
LwIP_HTTP_Server_Netconn_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a164  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014d00  0801a404  0801a404  0002a404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0802f104  0802f104  0003f104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0802f108  0802f108  0003f108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b4  24000000  0802f10c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000b220  240000b4  0802f1c0  000400b4  2**2
                  ALLOC
  7 ._user_heap_stack 00000c04  2400b2d4  0802f1c0  0004b2d4  2**0
                  ALLOC
  8 .lwip_sec     00041a00  30000000  0802f1c0  00050000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000400b4  2**0
                  CONTENTS, READONLY
 10 .debug_line   0003890a  00000000  00000000  000400e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00056fcf  00000000  00000000  000789ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000094bd  00000000  00000000  000cf9bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000025a8  00000000  00000000  000d8e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    001a0dc1  00000000  00000000  000db420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002458  00000000  00000000  0027c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00049e91  00000000  00000000  0027e640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002c84d1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000a668  00000000  00000000  002c8524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000cc  00000000  00000000  002d2b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  002d2c58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b4 	.word	0x240000b4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a3ec 	.word	0x0801a3ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b8 	.word	0x240000b8
 80002dc:	0801a3ec 	.word	0x0801a3ec

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003b6:	e003      	b.n	80003c0 <LoopCopyDataInit>

080003b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003be:	3104      	adds	r1, #4

080003c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003c8:	d3f6      	bcc.n	80003b8 <CopyDataInit>
  ldr  r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003cc:	e002      	b.n	80003d4 <LoopFillZerobss>

080003ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003d0:	f842 3b04 	str.w	r3, [r2], #4

080003d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003d8:	d3f9      	bcc.n	80003ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003da:	f001 fbb7 	bl	8001b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003de:	f018 fd53 	bl	8018e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003e2:	f000 ff11 	bl	8001208 <main>
  bx  lr    
 80003e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003e8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80003ec:	0802f10c 	.word	0x0802f10c
  ldr  r0, =_sdata
 80003f0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003f4:	240000b4 	.word	0x240000b4
  ldr  r2, =_sbss
 80003f8:	240000b4 	.word	0x240000b4
  ldr  r3, = _ebss
 80003fc:	2400b2d4 	.word	0x2400b2d4

08000400 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC3_IRQHandler>

08000402 <ethernet_link_status_updated>:
  * @brief  Notify the User about the nework interface config status 
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif) 
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	b2db      	uxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	d006      	beq.n	8000428 <ethernet_link_status_updated+0x26>
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#else
    BSP_LED_On(LED2);
 800041a:	2001      	movs	r0, #1
 800041c:	f001 fb30 	bl	8001a80 <BSP_LED_On>
    BSP_LED_Off(LED3);
 8000420:	2002      	movs	r0, #2
 8000422:	f001 fb57 	bl	8001ad4 <BSP_LED_Off>
#else    
    BSP_LED_Off(LED2);
    BSP_LED_On(LED3); 
#endif /* LWIP_DHCP */
  } 
}
 8000426:	e005      	b.n	8000434 <ethernet_link_status_updated+0x32>
    BSP_LED_Off(LED2);
 8000428:	2001      	movs	r0, #1
 800042a:	f001 fb53 	bl	8001ad4 <BSP_LED_Off>
    BSP_LED_On(LED3); 
 800042e:	2002      	movs	r0, #2
 8000430:	f001 fb26 	bl	8001a80 <BSP_LED_On>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 800043c:	b5b0      	push	{r4, r5, r7, lr}
 800043e:	b0a6      	sub	sp, #152	; 0x98
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  uint32_t idx, duplex, speed = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int32_t PHYLinkState;
  ETH_MACConfigTypeDef MACConf;
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 800044a:	4a7d      	ldr	r2, [pc, #500]	; (8000640 <low_level_init+0x204>)
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000454:	6018      	str	r0, [r3, #0]
 8000456:	3304      	adds	r3, #4
 8000458:	8019      	strh	r1, [r3, #0]
  
  EthHandle.Instance = ETH;  
 800045a:	4b7a      	ldr	r3, [pc, #488]	; (8000644 <low_level_init+0x208>)
 800045c:	4a7a      	ldr	r2, [pc, #488]	; (8000648 <low_level_init+0x20c>)
 800045e:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 8000460:	4a78      	ldr	r2, [pc, #480]	; (8000644 <low_level_init+0x208>)
 8000462:	f107 031c 	add.w	r3, r7, #28
 8000466:	6053      	str	r3, [r2, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000468:	4b76      	ldr	r3, [pc, #472]	; (8000644 <low_level_init+0x208>)
 800046a:	2201      	movs	r2, #1
 800046c:	721a      	strb	r2, [r3, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 800046e:	4b75      	ldr	r3, [pc, #468]	; (8000644 <low_level_init+0x208>)
 8000470:	4a76      	ldr	r2, [pc, #472]	; (800064c <low_level_init+0x210>)
 8000472:	611a      	str	r2, [r3, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8000474:	4b73      	ldr	r3, [pc, #460]	; (8000644 <low_level_init+0x208>)
 8000476:	4a76      	ldr	r2, [pc, #472]	; (8000650 <low_level_init+0x214>)
 8000478:	60da      	str	r2, [r3, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 800047a:	4b72      	ldr	r3, [pc, #456]	; (8000644 <low_level_init+0x208>)
 800047c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000480:	615a      	str	r2, [r3, #20]
  
  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  HAL_ETH_Init(&EthHandle);
 8000482:	4870      	ldr	r0, [pc, #448]	; (8000644 <low_level_init+0x208>)
 8000484:	f001 fdaa 	bl	8001fdc <HAL_ETH_Init>
  
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2206      	movs	r2, #6
 800048c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  ETH_MAC_ADDR0;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2202      	movs	r2, #2
 8000494:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  ETH_MAC_ADDR1;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2200      	movs	r2, #0
 800049c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2200      	movs	r2, #0
 80004a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  ETH_MAC_ADDR3;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2200      	movs	r2, #0
 80004ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  ETH_MAC_ADDR4;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2200      	movs	r2, #0
 80004b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  ETH_MAC_ADDR5;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2200      	movs	r2, #0
 80004bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004c6:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80004ce:	f043 030a 	orr.w	r3, r3, #10
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80004da:	2300      	movs	r3, #0
 80004dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80004e0:	e012      	b.n	8000508 <low_level_init+0xcc>
  {
    HAL_ETH_DescAssignMemory(&EthHandle, idx, Rx_Buff[idx], NULL);
 80004e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80004e6:	4613      	mov	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	4413      	add	r3, r2
 80004ec:	025b      	lsls	r3, r3, #9
 80004ee:	4a59      	ldr	r2, [pc, #356]	; (8000654 <low_level_init+0x218>)
 80004f0:	441a      	add	r2, r3
 80004f2:	2300      	movs	r3, #0
 80004f4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80004f8:	4852      	ldr	r0, [pc, #328]	; (8000644 <low_level_init+0x208>)
 80004fa:	f001 fe49 	bl	8002190 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80004fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000502:	3301      	adds	r3, #1
 8000504:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000508:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800050c:	2b03      	cmp	r3, #3
 800050e:	d9e8      	bls.n	80004e2 <low_level_init+0xa6>
  }
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000510:	4851      	ldr	r0, [pc, #324]	; (8000658 <low_level_init+0x21c>)
 8000512:	f010 f9ab 	bl	801086c <memp_init_pool>
  
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));  
 8000516:	2234      	movs	r2, #52	; 0x34
 8000518:	2100      	movs	r1, #0
 800051a:	4850      	ldr	r0, [pc, #320]	; (800065c <low_level_init+0x220>)
 800051c:	f018 fd0e 	bl	8018f3c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000520:	4b4e      	ldr	r3, [pc, #312]	; (800065c <low_level_init+0x220>)
 8000522:	2221      	movs	r2, #33	; 0x21
 8000524:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000526:	4b4d      	ldr	r3, [pc, #308]	; (800065c <low_level_init+0x220>)
 8000528:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800052c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800052e:	4b4b      	ldr	r3, [pc, #300]	; (800065c <low_level_init+0x220>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
   
  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000534:	2203      	movs	r2, #3
 8000536:	2100      	movs	r1, #0
 8000538:	2001      	movs	r0, #1
 800053a:	f005 f9b5 	bl	80058a8 <xQueueGenericCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a47      	ldr	r2, [pc, #284]	; (8000660 <low_level_init+0x224>)
 8000542:	6013      	str	r3, [r2, #0]
  
  /* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000544:	4b47      	ldr	r3, [pc, #284]	; (8000664 <low_level_init+0x228>)
 8000546:	f107 0408 	add.w	r4, r7, #8
 800054a:	461d      	mov	r5, r3
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	682b      	ldr	r3, [r5, #0]
 8000552:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	6879      	ldr	r1, [r7, #4]
 800055a:	4618      	mov	r0, r3
 800055c:	f007 fb17 	bl	8007b8e <osThreadCreate>
  
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000560:	4941      	ldr	r1, [pc, #260]	; (8000668 <low_level_init+0x22c>)
 8000562:	4842      	ldr	r0, [pc, #264]	; (800066c <low_level_init+0x230>)
 8000564:	f001 f8b4 	bl	80016d0 <LAN8742_RegisterBusIO>
  
  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8000568:	4840      	ldr	r0, [pc, #256]	; (800066c <low_level_init+0x230>)
 800056a:	f001 f8e3 	bl	8001734 <LAN8742_Init>
  
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800056e:	483f      	ldr	r0, [pc, #252]	; (800066c <low_level_init+0x230>)
 8000570:	f001 f988 	bl	8001884 <LAN8742_GetLinkState>
 8000574:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  
  /* Get link state */  
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8000578:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800057c:	2b01      	cmp	r3, #1
 800057e:	dc06      	bgt.n	800058e <low_level_init+0x152>
  {
    netif_set_link_down(netif);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f010 fd4d 	bl	8011020 <netif_set_link_down>
    netif_set_down(netif);
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f010 fce4 	bl	8010f54 <netif_set_down>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
    HAL_ETH_Start_IT(&EthHandle);
    netif_set_up(netif);
    netif_set_link_up(netif);
  }
}
 800058c:	e054      	b.n	8000638 <low_level_init+0x1fc>
 800058e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000592:	3b02      	subs	r3, #2
 8000594:	2b03      	cmp	r3, #3
 8000596:	d82b      	bhi.n	80005f0 <low_level_init+0x1b4>
 8000598:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <low_level_init+0x164>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	080005b1 	.word	0x080005b1
 80005a4:	080005c3 	.word	0x080005c3
 80005a8:	080005d3 	.word	0x080005d3
 80005ac:	080005e3 	.word	0x080005e3
      duplex = ETH_FULLDUPLEX_MODE;
 80005b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_100M;
 80005b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;
 80005c0:	e01f      	b.n	8000602 <low_level_init+0x1c6>
      duplex = ETH_HALFDUPLEX_MODE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_100M;
 80005c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;
 80005d0:	e017      	b.n	8000602 <low_level_init+0x1c6>
      duplex = ETH_FULLDUPLEX_MODE;
 80005d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_10M;
 80005da:	2300      	movs	r3, #0
 80005dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;
 80005e0:	e00f      	b.n	8000602 <low_level_init+0x1c6>
      duplex = ETH_HALFDUPLEX_MODE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_10M;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;
 80005ee:	e008      	b.n	8000602 <low_level_init+0x1c6>
      duplex = ETH_FULLDUPLEX_MODE;
 80005f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_100M;
 80005f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;      
 8000600:	bf00      	nop
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 8000602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000606:	4619      	mov	r1, r3
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <low_level_init+0x208>)
 800060a:	f002 fb93 	bl	8002d34 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800060e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
    MACConf.Speed = speed;
 8000614:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000618:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 800061a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061e:	4619      	mov	r1, r3
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <low_level_init+0x208>)
 8000622:	f002 fd5b 	bl	80030dc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <low_level_init+0x208>)
 8000628:	f001 fdf3 	bl	8002212 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f010 fc25 	bl	8010e7c <netif_set_up>
    netif_set_link_up(netif);
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f010 fcc0 	bl	8010fb8 <netif_set_link_up>
}
 8000638:	bf00      	nop
 800063a:	3798      	adds	r7, #152	; 0x98
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	0801a418 	.word	0x0801a418
 8000644:	240071e8 	.word	0x240071e8
 8000648:	40028000 	.word	0x40028000
 800064c:	30040000 	.word	0x30040000
 8000650:	30040060 	.word	0x30040060
 8000654:	30040200 	.word	0x30040200
 8000658:	0801a40c 	.word	0x0801a40c
 800065c:	2400735c 	.word	0x2400735c
 8000660:	240000d0 	.word	0x240000d0
 8000664:	0801a420 	.word	0x0801a420
 8000668:	24000000 	.word	0x24000000
 800066c:	2400733c 	.word	0x2400733c

08000670 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b092      	sub	sp, #72	; 0x48
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800067a:	2300      	movs	r3, #0
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800067e:	2300      	movs	r3, #0
 8000680:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2230      	movs	r2, #48	; 0x30
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f018 fc55 	bl	8018f3c <memset>
  
  for(q = p; q != NULL; q = q->next)
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	643b      	str	r3, [r7, #64]	; 0x40
 8000696:	e049      	b.n	800072c <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 8000698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800069a:	2b03      	cmp	r3, #3
 800069c:	d902      	bls.n	80006a4 <low_level_output+0x34>
      return ERR_IF;
 800069e:	f06f 030b 	mvn.w	r3, #11
 80006a2:	e056      	b.n	8000752 <low_level_output+0xe2>
    
    Txbuffer[i].buffer = q->payload;
 80006a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006a6:	6859      	ldr	r1, [r3, #4]
 80006a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006b6:	4413      	add	r3, r2
 80006b8:	3b3c      	subs	r3, #60	; 0x3c
 80006ba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80006bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006be:	895b      	ldrh	r3, [r3, #10]
 80006c0:	4619      	mov	r1, r3
 80006c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006d0:	4413      	add	r3, r2
 80006d2:	3b38      	subs	r3, #56	; 0x38
 80006d4:	6019      	str	r1, [r3, #0]

    if(i>0)
 80006d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d012      	beq.n	8000702 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80006dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006de:	1e5a      	subs	r2, r3, #1
 80006e0:	f107 000c 	add.w	r0, r7, #12
 80006e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80006e6:	460b      	mov	r3, r1
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	440b      	add	r3, r1
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	18c1      	adds	r1, r0, r3
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006fc:	4413      	add	r3, r2
 80006fe:	3b34      	subs	r3, #52	; 0x34
 8000700:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 8000702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d10a      	bne.n	8000720 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800070a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000718:	4413      	add	r3, r2
 800071a:	3b34      	subs	r3, #52	; 0x34
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
    }

    i++;
 8000720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000722:	3301      	adds	r3, #1
 8000724:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8000726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
 800072c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1b2      	bne.n	8000698 <low_level_output+0x28>
  }

  TxConfig.Length = p->tot_len;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	891b      	ldrh	r3, [r3, #8]
 8000736:	461a      	mov	r2, r3
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <low_level_output+0xec>)
 800073a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <low_level_output+0xec>)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8000744:	2214      	movs	r2, #20
 8000746:	4905      	ldr	r1, [pc, #20]	; (800075c <low_level_output+0xec>)
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <low_level_output+0xf0>)
 800074a:	f001 fe61 	bl	8002410 <HAL_ETH_Transmit>
  
  return errval;
 800074e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8000752:	4618      	mov	r0, r3
 8000754:	3748      	adds	r7, #72	; 0x48
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2400735c 	.word	0x2400735c
 8000760:	240071e8 	.word	0x240071e8

08000764 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b098      	sub	sp, #96	; 0x60
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800076c:	2300      	movs	r3, #0
 800076e:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	2300      	movs	r3, #0
 8000776:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2230      	movs	r2, #48	; 0x30
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f018 fbdb 	bl	8018f3c <memset>
  
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8000786:	2300      	movs	r3, #0
 8000788:	653b      	str	r3, [r7, #80]	; 0x50
 800078a:	e015      	b.n	80007b8 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800078c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	f107 010c 	add.w	r1, r7, #12
 8000794:	4613      	mov	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4413      	add	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4419      	add	r1, r3
 800079e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80007ac:	4413      	add	r3, r2
 80007ae:	3b44      	subs	r3, #68	; 0x44
 80007b0:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80007b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007b4:	3301      	adds	r3, #1
 80007b6:	653b      	str	r3, [r7, #80]	; 0x50
 80007b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d9e6      	bls.n	800078c <low_level_input+0x28>
  }

  if(HAL_ETH_GetRxDataBuffer(&EthHandle, RxBuff) == HAL_OK)
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	4828      	ldr	r0, [pc, #160]	; (8000868 <low_level_input+0x104>)
 80007c6:	f001 ff9c 	bl	8002702 <HAL_ETH_GetRxDataBuffer>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d145      	bne.n	800085c <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&EthHandle, &framelength);
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	4824      	ldr	r0, [pc, #144]	; (8000868 <low_level_input+0x104>)
 80007d8:	f002 f831 	bl	800283e <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&EthHandle);
 80007dc:	4822      	ldr	r0, [pc, #136]	; (8000868 <low_level_input+0x104>)
 80007de:	f002 f861 	bl	80028a4 <HAL_ETH_BuildRxDescriptors>

    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80007e8:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80007ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dd1d      	ble.n	800082c <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80007f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007f2:	f003 021f 	and.w	r2, r3, #31
 80007f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007f8:	4413      	add	r3, r2
 80007fa:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80007fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000800:	f3bf 8f4f 	dsb	sy
}
 8000804:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000806:	4a19      	ldr	r2, [pc, #100]	; (800086c <low_level_input+0x108>)
 8000808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800080a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800080e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000810:	3320      	adds	r3, #32
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000816:	3b20      	subs	r3, #32
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800081a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800081c:	2b00      	cmp	r3, #0
 800081e:	dcf2      	bgt.n	8000806 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8000820:	f3bf 8f4f 	dsb	sy
}
 8000824:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000826:	f3bf 8f6f 	isb	sy
}
 800082a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800082c:	bf00      	nop
    
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800082e:	4810      	ldr	r0, [pc, #64]	; (8000870 <low_level_input+0x10c>)
 8000830:	f010 f898 	bl	8010964 <memp_malloc_pool>
 8000834:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 8000836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00f      	beq.n	800085c <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800083c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <low_level_input+0x110>)
 8000840:	611a      	str	r2, [r3, #16]

      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	b299      	uxth	r1, r3
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	b292      	uxth	r2, r2
 800084c:	9201      	str	r2, [sp, #4]
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000852:	2241      	movs	r2, #65	; 0x41
 8000854:	2000      	movs	r0, #0
 8000856:	f010 fdab 	bl	80113b0 <pbuf_alloced_custom>
 800085a:	6578      	str	r0, [r7, #84]	; 0x54
    }

  }
  
  return p;
 800085c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800085e:	4618      	mov	r0, r3
 8000860:	3758      	adds	r7, #88	; 0x58
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	240071e8 	.word	0x240071e8
 800086c:	e000ed00 	.word	0xe000ed00
 8000870:	0801a40c 	.word	0x0801a40c
 8000874:	08000925 	.word	0x08000925

08000878 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input( void const * argument )
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <ethernetif_input+0x4c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800088c:	4618      	mov	r0, r3
 800088e:	f007 fa79 	bl	8007d84 <osSemaphoreWait>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1f5      	bne.n	8000884 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f7ff ff63 	bl	8000764 <low_level_input>
 800089e:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00a      	beq.n	80008bc <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	68f9      	ldr	r1, [r7, #12]
 80008ac:	68b8      	ldr	r0, [r7, #8]
 80008ae:	4798      	blx	r3
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <ethernetif_input+0x44>
          {
            pbuf_free(p);
 80008b6:	68b8      	ldr	r0, [r7, #8]
 80008b8:	f010 ff66 	bl	8011788 <pbuf_free>
          }
        }

      }while(p!=NULL);
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1ea      	bne.n	8000898 <ethernetif_input+0x20>
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80008c2:	e7df      	b.n	8000884 <ethernetif_input+0xc>
 80008c4:	240000d0 	.word	0x240000d0

080008c8 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d106      	bne.n	80008e4 <ethernetif_init+0x1c>
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <ethernetif_init+0x48>)
 80008d8:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80008dc:	490d      	ldr	r1, [pc, #52]	; (8000914 <ethernetif_init+0x4c>)
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <ethernetif_init+0x50>)
 80008e0:	f018 fb34 	bl	8018f4c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2273      	movs	r2, #115	; 0x73
 80008e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2274      	movs	r2, #116	; 0x74
 80008f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <ethernetif_init+0x54>)
 80008f8:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a08      	ldr	r2, [pc, #32]	; (8000920 <ethernetif_init+0x58>)
 80008fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fd9b 	bl	800043c <low_level_init>

  return ERR_OK;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	0801a434 	.word	0x0801a434
 8000914:	0801a48c 	.word	0x0801a48c
 8000918:	0801a49c 	.word	0x0801a49c
 800091c:	0800d1d1 	.word	0x0800d1d1
 8000920:	08000671 	.word	0x08000671

08000924 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000930:	68f9      	ldr	r1, [r7, #12]
 8000932:	4803      	ldr	r0, [pc, #12]	; (8000940 <pbuf_free_custom+0x1c>)
 8000934:	f010 f88a 	bl	8010a4c <memp_free_pool>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	0801a40c 	.word	0x0801a40c

08000944 <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000948:	f001 f9c0 	bl	8001ccc <HAL_GetTick>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	; 0x38
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Ethernett MSP init: RMII Mode */
  
  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b4f      	ldr	r3, [pc, #316]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000962:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096c:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	623b      	str	r3, [r7, #32]
 8000978:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	4a46      	ldr	r2, [pc, #280]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098a:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
 8000996:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000998:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099e:	4a3f      	ldr	r2, [pc, #252]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a8:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	4a37      	ldr	r2, [pc, #220]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c6:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	697b      	ldr	r3, [r7, #20]
        RMII_MII_TXD0 ---------------------> PG13
        RMII_MII_TXD1 ---------------------> PB13
  */

  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	2302      	movs	r3, #2
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 80009e0:	230b      	movs	r3, #11
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 80009e4:	2386      	movs	r3, #134	; 0x86
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	482c      	ldr	r0, [pc, #176]	; (8000aa0 <HAL_ETH_MspInit+0x14c>)
 80009f0:	f003 f9a0 	bl	8003d34 <HAL_GPIO_Init>
  
  /* Configure PB13 */
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	4828      	ldr	r0, [pc, #160]	; (8000aa4 <HAL_ETH_MspInit+0x150>)
 8000a02:	f003 f997 	bl	8003d34 <HAL_GPIO_Init>
  
  /* Configure PC1, PC4 and PC5 */
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000a06:	2332      	movs	r3, #50	; 0x32
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <HAL_ETH_MspInit+0x154>)
 8000a12:	f003 f98f 	bl	8003d34 <HAL_GPIO_Init>

  /* Configure PG2, PG11, PG13 and PG14 */
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 8000a16:	f642 0304 	movw	r3, #10244	; 0x2804
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);	
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4822      	ldr	r0, [pc, #136]	; (8000aac <HAL_ETH_MspInit+0x158>)
 8000a24:	f003 f986 	bl	8003d34 <HAL_GPIO_Init>
  
  /* Enable the Ethernet global Interrupt */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2107      	movs	r1, #7
 8000a2c:	203d      	movs	r0, #61	; 0x3d
 8000a2e:	f001 fa31 	bl	8001e94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000a32:	203d      	movs	r0, #61	; 0x3d
 8000a34:	f001 fa48 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
  
  /* Enable Ethernet clocks */
  __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
}
 8000a92:	bf00      	nop
 8000a94:	3738      	adds	r7, #56	; 0x38
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	58024400 	.word	0x58024400
 8000aa0:	58020000 	.word	0x58020000
 8000aa4:	58020400 	.word	0x58020400
 8000aa8:	58020800 	.word	0x58020800
 8000aac:	58021800 	.word	0x58021800

08000ab0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <HAL_ETH_RxCpltCallback+0x1c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 f9af 	bl	8007e20 <osSemaphoreRelease>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	240000d0 	.word	0x240000d0

08000ad0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <ETH_PHY_IO_Init+0x10>)
 8000ad6:	f002 fb1b 	bl	8003110 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	240071e8 	.word	0x240071e8

08000ae4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return 0;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	68f9      	ldr	r1, [r7, #12]
 8000b06:	4807      	ldr	r0, [pc, #28]	; (8000b24 <ETH_PHY_IO_ReadReg+0x30>)
 8000b08:	f002 f86c 	bl	8002be4 <HAL_ETH_ReadPHYRegister>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b16:	e000      	b.n	8000b1a <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	240071e8 	.word	0x240071e8

08000b28 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	68f9      	ldr	r1, [r7, #12]
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <ETH_PHY_IO_WriteReg+0x30>)
 8000b3c:	f002 f8a6 	bl	8002c8c <HAL_ETH_WritePHYRegister>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4a:	e000      	b.n	8000b4e <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	240071e8 	.word	0x240071e8

08000b5c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000b60:	f001 f8b4 	bl	8001ccc <HAL_GetTick>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <ethernet_link_thread>:
  * @brief  Check the ETH link state and update netif accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread( void const * argument )
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0a0      	sub	sp, #128	; 0x80
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b78:	2300      	movs	r3, #0
 8000b7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	677b      	str	r3, [r7, #116]	; 0x74
  struct netif *netif = (struct netif *) argument;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	673b      	str	r3, [r7, #112]	; 0x70
  
  for(;;)
  {
    
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b84:	483a      	ldr	r0, [pc, #232]	; (8000c70 <ethernet_link_thread+0x104>)
 8000b86:	f000 fe7d 	bl	8001884 <LAN8742_GetLinkState>
 8000b8a:	66f8      	str	r0, [r7, #108]	; 0x6c
    
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00c      	beq.n	8000bb8 <ethernet_link_thread+0x4c>
 8000b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	dc09      	bgt.n	8000bb8 <ethernet_link_thread+0x4c>
    {
      HAL_ETH_Stop_IT(&EthHandle);
 8000ba4:	4833      	ldr	r0, [pc, #204]	; (8000c74 <ethernet_link_thread+0x108>)
 8000ba6:	f001 fbb9 	bl	800231c <HAL_ETH_Stop_IT>
      netif_set_down(netif);
 8000baa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000bac:	f010 f9d2 	bl	8010f54 <netif_set_down>
      netif_set_link_down(netif);
 8000bb0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000bb2:	f010 fa35 	bl	8011020 <netif_set_link_down>
 8000bb6:	e056      	b.n	8000c66 <ethernet_link_thread+0xfa>
    }
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d14f      	bne.n	8000c66 <ethernet_link_thread+0xfa>
 8000bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	dd4c      	ble.n	8000c66 <ethernet_link_thread+0xfa>
 8000bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bce:	3b02      	subs	r3, #2
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d82b      	bhi.n	8000c2c <ethernet_link_thread+0xc0>
 8000bd4:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <ethernet_link_thread+0x70>)
 8000bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bda:	bf00      	nop
 8000bdc:	08000bed 	.word	0x08000bed
 8000be0:	08000bff 	.word	0x08000bff
 8000be4:	08000c0f 	.word	0x08000c0f
 8000be8:	08000c1f 	.word	0x08000c1f
    {
      switch (PHYLinkState)
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_100M;
 8000bf2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bf6:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000bfc:	e017      	b.n	8000c2e <ethernet_link_thread+0xc2>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_100M;
 8000c02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c06:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000c0c:	e00f      	b.n	8000c2e <ethernet_link_thread+0xc2>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c12:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_10M;
 8000c14:	2300      	movs	r3, #0
 8000c16:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000c1c:	e007      	b.n	8000c2e <ethernet_link_thread+0xc2>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_10M;
 8000c22:	2300      	movs	r3, #0
 8000c24:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000c2a:	e000      	b.n	8000c2e <ethernet_link_thread+0xc2>
      default:
        break;      
 8000c2c:	bf00      	nop
      }
      
      if(linkchanged)
 8000c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d018      	beq.n	8000c66 <ethernet_link_thread+0xfa>
      {
        /* Get MAC Config MAC */
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480e      	ldr	r0, [pc, #56]	; (8000c74 <ethernet_link_thread+0x108>)
 8000c3c:	f002 f87a 	bl	8002d34 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8000c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c42:	623b      	str	r3, [r7, #32]
        MACConf.Speed = speed;
 8000c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c46:	61fb      	str	r3, [r7, #28]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4809      	ldr	r0, [pc, #36]	; (8000c74 <ethernet_link_thread+0x108>)
 8000c50:	f002 fa44 	bl	80030dc <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <ethernet_link_thread+0x108>)
 8000c56:	f001 fadc 	bl	8002212 <HAL_ETH_Start_IT>
        netif_set_up(netif);
 8000c5a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000c5c:	f010 f90e 	bl	8010e7c <netif_set_up>
        netif_set_link_up(netif);
 8000c60:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000c62:	f010 f9a9 	bl	8010fb8 <netif_set_link_up>
      }
    }
    
    osDelay(100);
 8000c66:	2064      	movs	r0, #100	; 0x64
 8000c68:	f006 ffc4 	bl	8007bf4 <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000c6c:	e78a      	b.n	8000b84 <ethernet_link_thread+0x18>
 8000c6e:	bf00      	nop
 8000c70:	2400733c 	.word	0x2400733c
 8000c74:	240071e8 	.word	0x240071e8

08000c78 <http_server_serve>:
  * @brief serve tcp connection  
  * @param conn: pointer on connection structure 
  * @retval None
  */
static void http_server_serve(struct netconn *conn) 
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	6078      	str	r0, [r7, #4]
  u16_t buflen;
  struct fs_file file;
  
  /* Read the data from the port, blocking if nothing yet there. 
   We assume the request (the part we care about) is in one netbuf */
  recv_err = netconn_recv(conn, &inbuf);
 8000c80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c84:	4619      	mov	r1, r3
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f008 fad4 	bl	8009234 <netconn_recv>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  if (recv_err == ERR_OK)
 8000c92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 80bf 	bne.w	8000e1a <http_server_serve+0x1a2>
  {
    if (netconn_err(conn) == ERR_OK) 
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f008 fc80 	bl	80095a2 <netconn_err>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f040 80b8 	bne.w	8000e1a <http_server_serve+0x1a2>
    {
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8000caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cac:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000cb0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00a fc19 	bl	800b4ec <netbuf_data>
    
      /* Is this an HTTP GET command? (only check the first 5 chars, since
      there are other formats for GET, and we're keeping it very simple )*/
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000cba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	f240 80ac 	bls.w	8000e1a <http_server_serve+0x1a2>
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	495a      	ldr	r1, [pc, #360]	; (8000e30 <http_server_serve+0x1b8>)
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f018 f9ce 	bl	801906a <strncmp>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 80a2 	bne.w	8000e1a <http_server_serve+0x1a2>
      {
        /* Check if request to get ST.gif */ 
        if (strncmp((char const *)buf,"GET /STM32H7xx_files/ST.gif",27)==0)
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	221b      	movs	r2, #27
 8000cda:	4956      	ldr	r1, [pc, #344]	; (8000e34 <http_server_serve+0x1bc>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f018 f9c4 	bl	801906a <strncmp>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d114      	bne.n	8000d12 <http_server_serve+0x9a>
        {
          fs_open(&file, "/STM32H7xx_files/ST.gif"); 
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4952      	ldr	r1, [pc, #328]	; (8000e38 <http_server_serve+0x1c0>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f018 f882 	bl	8018df8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000cf4:	68f9      	ldr	r1, [r7, #12]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f008 fb3f 	bl	8009384 <netconn_write_partly>
          fs_close(&file);
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f018 f8b2 	bl	8018e74 <fs_close>
 8000d10:	e083      	b.n	8000e1a <http_server_serve+0x1a2>
        }   
        /* Check if request to get stm32.jpg */
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	221e      	movs	r2, #30
 8000d16:	4949      	ldr	r1, [pc, #292]	; (8000e3c <http_server_serve+0x1c4>)
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f018 f9a6 	bl	801906a <strncmp>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d114      	bne.n	8000d4e <http_server_serve+0xd6>
        {
          fs_open(&file, "/STM32H7xx_files/stm32.jpg"); 
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4945      	ldr	r1, [pc, #276]	; (8000e40 <http_server_serve+0x1c8>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f018 f864 	bl	8018df8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000d30:	68f9      	ldr	r1, [r7, #12]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f008 fb21 	bl	8009384 <netconn_write_partly>
          fs_close(&file);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4618      	mov	r0, r3
 8000d48:	f018 f894 	bl	8018e74 <fs_close>
 8000d4c:	e065      	b.n	8000e1a <http_server_serve+0x1a2>
        }
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/logo.jpg", 29) == 0)                                           
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	221d      	movs	r2, #29
 8000d52:	493c      	ldr	r1, [pc, #240]	; (8000e44 <http_server_serve+0x1cc>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f018 f988 	bl	801906a <strncmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d114      	bne.n	8000d8a <http_server_serve+0x112>
        {
          /* Check if request to get ST logo.jpg */
          fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4938      	ldr	r1, [pc, #224]	; (8000e48 <http_server_serve+0x1d0>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f018 f846 	bl	8018df8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000d6c:	68f9      	ldr	r1, [r7, #12]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	461a      	mov	r2, r3
 8000d72:	2300      	movs	r3, #0
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2300      	movs	r3, #0
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f008 fb03 	bl	8009384 <netconn_write_partly>
          fs_close(&file);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4618      	mov	r0, r3
 8000d84:	f018 f876 	bl	8018e74 <fs_close>
 8000d88:	e047      	b.n	8000e1a <http_server_serve+0x1a2>
        }
        else if(strncmp(buf, "GET /STM32H7xxTASKS.html", 24) == 0)
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	2218      	movs	r2, #24
 8000d8e:	492f      	ldr	r1, [pc, #188]	; (8000e4c <http_server_serve+0x1d4>)
 8000d90:	4618      	mov	r0, r3
 8000d92:	f018 f96a 	bl	801906a <strncmp>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d103      	bne.n	8000da4 <http_server_serve+0x12c>
        {
           /* Load dynamic page */
           DynWebPage(conn);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 f947 	bl	8001030 <DynWebPage>
 8000da2:	e03a      	b.n	8000e1a <http_server_serve+0x1a2>
        }
        else if((strncmp(buf, "GET /STM32H7xx.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0)) 
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	2213      	movs	r2, #19
 8000da8:	4929      	ldr	r1, [pc, #164]	; (8000e50 <http_server_serve+0x1d8>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f018 f95d 	bl	801906a <strncmp>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d008      	beq.n	8000dc8 <http_server_serve+0x150>
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	2206      	movs	r2, #6
 8000dba:	4926      	ldr	r1, [pc, #152]	; (8000e54 <http_server_serve+0x1dc>)
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f018 f954 	bl	801906a <strncmp>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d114      	bne.n	8000df2 <http_server_serve+0x17a>
        {
          /* Load STM32H7xx page */
          fs_open(&file, "/STM32H7xx.html"); 
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4922      	ldr	r1, [pc, #136]	; (8000e58 <http_server_serve+0x1e0>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f018 f812 	bl	8018df8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000dd4:	68f9      	ldr	r1, [r7, #12]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f008 facf 	bl	8009384 <netconn_write_partly>
          fs_close(&file);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4618      	mov	r0, r3
 8000dec:	f018 f842 	bl	8018e74 <fs_close>
 8000df0:	e013      	b.n	8000e1a <http_server_serve+0x1a2>
        }
        else 
        {
          /* Load Error page */
          fs_open(&file, "/404.html"); 
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4919      	ldr	r1, [pc, #100]	; (8000e5c <http_server_serve+0x1e4>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f017 fffd 	bl	8018df8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000dfe:	68f9      	ldr	r1, [r7, #12]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	461a      	mov	r2, r3
 8000e04:	2300      	movs	r3, #0
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f008 faba 	bl	8009384 <netconn_write_partly>
          fs_close(&file);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4618      	mov	r0, r3
 8000e16:	f018 f82d 	bl	8018e74 <fs_close>
        }
      }      
    }
  }
  /* Close the connection (server closes in HTTP) */
  netconn_close(conn);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f008 fbb4 	bl	8009588 <netconn_close>
  
  /* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
  netbuf_delete(inbuf);
 8000e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e22:	4618      	mov	r0, r3
 8000e24:	f00a fad0 	bl	800b3c8 <netbuf_delete>
}
 8000e28:	bf00      	nop
 8000e2a:	3730      	adds	r7, #48	; 0x30
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	0801ab10 	.word	0x0801ab10
 8000e34:	0801ab18 	.word	0x0801ab18
 8000e38:	0801ab34 	.word	0x0801ab34
 8000e3c:	0801ab4c 	.word	0x0801ab4c
 8000e40:	0801ab6c 	.word	0x0801ab6c
 8000e44:	0801ab88 	.word	0x0801ab88
 8000e48:	0801aba8 	.word	0x0801aba8
 8000e4c:	0801abc4 	.word	0x0801abc4
 8000e50:	0801abe0 	.word	0x0801abe0
 8000e54:	0801abf4 	.word	0x0801abf4
 8000e58:	0801abfc 	.word	0x0801abfc
 8000e5c:	0801ac0c 	.word	0x0801ac0c

08000e60 <http_server_netconn_thread>:
  * @brief  http server thread 
  * @param arg: pointer on argument(not used here) 
  * @retval None
  */
static void http_server_netconn_thread(void *arg)
{ 
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2010      	movs	r0, #16
 8000e6e:	f007 fd81 	bl	8008974 <netconn_new_with_proto_and_callback>
 8000e72:	6178      	str	r0, [r7, #20]
  
  if (conn!= NULL)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d023      	beq.n	8000ec2 <http_server_netconn_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 80);
 8000e7a:	2250      	movs	r2, #80	; 0x50
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f007 fe84 	bl	8008b8c <netconn_bind>
 8000e84:	4603      	mov	r3, r0
 8000e86:	74fb      	strb	r3, [r7, #19]
    
    if (err == ERR_OK)
 8000e88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d118      	bne.n	8000ec2 <http_server_netconn_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8000e90:	21ff      	movs	r1, #255	; 0xff
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f007 ff14 	bl	8008cc0 <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any icoming connection */
        accept_err = netconn_accept(conn, &newconn);
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	6978      	ldr	r0, [r7, #20]
 8000ea0:	f007 ff3a 	bl	8008d18 <netconn_accept>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 8000ea8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1f3      	bne.n	8000e98 <http_server_netconn_thread+0x38>
        {
          /* serve connection */
          http_server_serve(newconn);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fee0 	bl	8000c78 <http_server_serve>

          /* delete connection */
          netconn_delete(newconn);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f007 fdf8 	bl	8008ab0 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8000ec0:	e7ea      	b.n	8000e98 <http_server_netconn_thread+0x38>
        }
      }
    }
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <vTCP_Client_Task>:
 * This task gets and configures a socket to get the header of google web site
 * using HTTP protocol.
 *
 * @param param
 */
static void vTCP_Client_Task(void *param) {
 8000ecc:	b5b0      	push	{r4, r5, r7, lr}
 8000ece:	b09a      	sub	sp, #104	; 0x68
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 /* Variables */
 const char host[] = TCP_IP;
 8000ed4:	4b43      	ldr	r3, [pc, #268]	; (8000fe4 <vTCP_Client_Task+0x118>)
 8000ed6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000eda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000edc:	c407      	stmia	r4!, {r0, r1, r2}
 8000ede:	8023      	strh	r3, [r4, #0]
 /* TCP Data buffer */
 static uint8_t data_buffer[1000];
 /* ID Client */
 int CControl;
 /* HTTP method: HEAD */
 uint8_t http_head[]="HEAD / HTTP/1.0\r\nHost:www.google.es\r\n\r\n\r\n";
 8000ee0:	4b41      	ldr	r3, [pc, #260]	; (8000fe8 <vTCP_Client_Task+0x11c>)
 8000ee2:	f107 0408 	add.w	r4, r7, #8
 8000ee6:	461d      	mov	r5, r3
 8000ee8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ef0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ef4:	c403      	stmia	r4!, {r0, r1}
 8000ef6:	8022      	strh	r2, [r4, #0]
 /* Counter request */
 uint8_t counter_request = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 for(;;){
  /* Fill structure */
  memset(&sin,0,sizeof(sin));
 8000efe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f02:	2210      	movs	r2, #16
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f018 f818 	bl	8018f3c <memset>
  sin.sin_family = AF_INET;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sin.sin_port = htons(TCP_PORT);
 8000f12:	2050      	movs	r0, #80	; 0x50
 8000f14:	f00e f854 	bl	800efc0 <lwip_htons>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	86fb      	strh	r3, [r7, #54]	; 0x36

  if ((sin.sin_addr.s_addr = inet_addr(lhost)) == -1) {
 8000f1c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000f1e:	f00d f8d8 	bl	800e0d2 <ipaddr_addr>
 8000f22:	4603      	mov	r3, r0
 8000f24:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f2c:	d113      	bne.n	8000f56 <vTCP_Client_Task+0x8a>
   if ((phe = gethostbyname(lhost)) == NULL) {
 8000f2e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000f30:	f00a fb26 	bl	800b580 <lwip_gethostbyname>
 8000f34:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d100      	bne.n	8000f3e <vTCP_Client_Task+0x72>
    /* Impossible get host name */
    for(;;);
 8000f3c:	e7fe      	b.n	8000f3c <vTCP_Client_Task+0x70>
   }
   memcpy((char *)&sin.sin_addr, phe->h_addr, phe->h_length);
 8000f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f40:	691b      	ldr	r3, [r3, #16]
 8000f42:	6819      	ldr	r1, [r3, #0]
 8000f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f4e:	3304      	adds	r3, #4
 8000f50:	4618      	mov	r0, r3
 8000f52:	f017 ffcb 	bl	8018eec <memcpy>
  }
  /* Free unnecessary memory */
  vPortFree(lhost);
 8000f56:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8000f58:	f007 f97e 	bl	8008258 <vPortFree>
  /* Get socket */
  CControl = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);
 8000f5c:	2206      	movs	r2, #6
 8000f5e:	2101      	movs	r1, #1
 8000f60:	2002      	movs	r0, #2
 8000f62:	f00b f98d 	bl	800c280 <lwip_socket>
 8000f66:	65b8      	str	r0, [r7, #88]	; 0x58
  if (CControl == -1) {
 8000f68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f6e:	d100      	bne.n	8000f72 <vTCP_Client_Task+0xa6>
   /* Impossible get a socket */
   for(;;);
 8000f70:	e7fe      	b.n	8000f70 <vTCP_Client_Task+0xa4>
  }
  vTaskDelay(1000/portTICK_RATE_MS);
 8000f72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f76:	f005 fd61 	bl	8006a3c <vTaskDelay>
  /* Connect to remote TCP server */
  ret = connect(CControl, (struct sockaddr *)&sin, sizeof(sin));
 8000f7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f7e:	2210      	movs	r2, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000f84:	f00a fcc0 	bl	800b908 <lwip_connect>
 8000f88:	6578      	str	r0, [r7, #84]	; 0x54
  if (ret == -1) {
 8000f8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f90:	d103      	bne.n	8000f9a <vTCP_Client_Task+0xce>
   /* Close socket */
   closesocket(CControl);
 8000f92:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000f94:	f00a fc62 	bl	800b85c <lwip_close>
   /* Impossible connect to remote TCP server */
   for(;;);
 8000f98:	e7fe      	b.n	8000f98 <vTCP_Client_Task+0xcc>
  }
  /* Request HTTP: HEAD */
  ret = send(CControl, http_head, sizeof(http_head), 0);
 8000f9a:	f107 0108 	add.w	r1, r7, #8
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	222a      	movs	r2, #42	; 0x2a
 8000fa2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000fa4:	f00b f85c 	bl	800c060 <lwip_send>
 8000fa8:	6578      	str	r0, [r7, #84]	; 0x54
  if (ret != sizeof(http_head)){
 8000faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fac:	2b2a      	cmp	r3, #42	; 0x2a
 8000fae:	d000      	beq.n	8000fb2 <vTCP_Client_Task+0xe6>
   /* Error: repeat sending */
   for(;;);
 8000fb0:	e7fe      	b.n	8000fb0 <vTCP_Client_Task+0xe4>
  }
  /* Check answer */
  do{
   /* Reset buffer */
   memset(data_buffer, 0x00, sizeof(data_buffer));
 8000fb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <vTCP_Client_Task+0x120>)
 8000fba:	f017 ffbf 	bl	8018f3c <memset>
   /* Read socket */
   ret = read(CControl, data_buffer, 1000);
 8000fbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fc2:	490a      	ldr	r1, [pc, #40]	; (8000fec <vTCP_Client_Task+0x120>)
 8000fc4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000fc6:	f00b f835 	bl	800c034 <lwip_read>
 8000fca:	6578      	str	r0, [r7, #84]	; 0x54
   /* Debug message */
  }while(ret != 0);
 8000fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1ef      	bne.n	8000fb2 <vTCP_Client_Task+0xe6>
  /* Close connection */
  closesocket(CControl);
 8000fd2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000fd4:	f00a fc42 	bl	800b85c <lwip_close>
  /* Wait for next request */
  vTaskDelay(2000/portTICK_RATE_MS);
 8000fd8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fdc:	f005 fd2e 	bl	8006a3c <vTaskDelay>
  memset(&sin,0,sizeof(sin));
 8000fe0:	e78d      	b.n	8000efe <vTCP_Client_Task+0x32>
 8000fe2:	bf00      	nop
 8000fe4:	0801ac18 	.word	0x0801ac18
 8000fe8:	0801ac28 	.word	0x0801ac28
 8000fec:	240000dc 	.word	0x240000dc

08000ff0 <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread)
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ffe:	2200      	movs	r2, #0
 8001000:	4907      	ldr	r1, [pc, #28]	; (8001020 <http_server_netconn_init+0x30>)
 8001002:	4808      	ldr	r0, [pc, #32]	; (8001024 <http_server_netconn_init+0x34>)
 8001004:	f017 febc 	bl	8018d80 <sys_thread_new>
  sys_thread_new("TCP_Client_Task", vTCP_Client_Task, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8001008:	2301      	movs	r3, #1
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001010:	2200      	movs	r2, #0
 8001012:	4905      	ldr	r1, [pc, #20]	; (8001028 <http_server_netconn_init+0x38>)
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <http_server_netconn_init+0x3c>)
 8001016:	f017 feb3 	bl	8018d80 <sys_thread_new>
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	08000e61 	.word	0x08000e61
 8001024:	0801ac54 	.word	0x0801ac54
 8001028:	08000ecd 	.word	0x08000ecd
 800102c:	0801ac5c 	.word	0x0801ac5c

08001030 <DynWebPage>:
  *         running tasks and the number of page hits.
  * @param  conn pointer on connection structure
  * @retval None
  */
void DynWebPage(struct netconn *conn)
{
 8001030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001032:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001036:	af02      	add	r7, sp, #8
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	6018      	str	r0, [r3, #0]
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	3304      	adds	r3, #4
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	809a      	strh	r2, [r3, #4]

  memset(PAGE_BODY, 0,512);
 800104c:	f107 0318 	add.w	r3, r7, #24
 8001050:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f017 ff70 	bl	8018f3c <memset>

  /* Update the hit count */
  nPageHits++;
 800105c:	4b63      	ldr	r3, [pc, #396]	; (80011ec <DynWebPage+0x1bc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	3301      	adds	r3, #1
 8001062:	4a62      	ldr	r2, [pc, #392]	; (80011ec <DynWebPage+0x1bc>)
 8001064:	6013      	str	r3, [r2, #0]
  sprintf(pagehits, "%d", (int)nPageHits);
 8001066:	4b61      	ldr	r3, [pc, #388]	; (80011ec <DynWebPage+0x1bc>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	495f      	ldr	r1, [pc, #380]	; (80011f0 <DynWebPage+0x1c0>)
 8001072:	4618      	mov	r0, r3
 8001074:	f017 ffc2 	bl	8018ffc <siprintf>
  strcat(PAGE_BODY, pagehits);
 8001078:	f107 020c 	add.w	r2, r7, #12
 800107c:	f107 0318 	add.w	r3, r7, #24
 8001080:	4611      	mov	r1, r2
 8001082:	4618      	mov	r0, r3
 8001084:	f017 ffda 	bl	801903c <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
 8001088:	f107 0318 	add.w	r3, r7, #24
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff f931 	bl	80002f4 <strlen>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	f107 0318 	add.w	r3, r7, #24
 800109a:	4413      	add	r3, r2
 800109c:	4a55      	ldr	r2, [pc, #340]	; (80011f4 <DynWebPage+0x1c4>)
 800109e:	4614      	mov	r4, r2
 80010a0:	469c      	mov	ip, r3
 80010a2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010a6:	4665      	mov	r5, ip
 80010a8:	4626      	mov	r6, r4
 80010aa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010ac:	6028      	str	r0, [r5, #0]
 80010ae:	6069      	str	r1, [r5, #4]
 80010b0:	60aa      	str	r2, [r5, #8]
 80010b2:	60eb      	str	r3, [r5, #12]
 80010b4:	3410      	adds	r4, #16
 80010b6:	f10c 0c10 	add.w	ip, ip, #16
 80010ba:	4574      	cmp	r4, lr
 80010bc:	d1f3      	bne.n	80010a6 <DynWebPage+0x76>
 80010be:	4663      	mov	r3, ip
 80010c0:	4622      	mov	r2, r4
 80010c2:	6810      	ldr	r0, [r2, #0]
 80010c4:	6018      	str	r0, [r3, #0]
  strcat((char *)PAGE_BODY, "<br>---------------------------------------------<br>");
 80010c6:	f107 0318 	add.w	r3, r7, #24
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff f912 	bl	80002f4 <strlen>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	f107 0318 	add.w	r3, r7, #24
 80010d8:	4413      	add	r3, r2
 80010da:	4a47      	ldr	r2, [pc, #284]	; (80011f8 <DynWebPage+0x1c8>)
 80010dc:	4614      	mov	r4, r2
 80010de:	469c      	mov	ip, r3
 80010e0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010e4:	4665      	mov	r5, ip
 80010e6:	4626      	mov	r6, r4
 80010e8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010ea:	6028      	str	r0, [r5, #0]
 80010ec:	6069      	str	r1, [r5, #4]
 80010ee:	60aa      	str	r2, [r5, #8]
 80010f0:	60eb      	str	r3, [r5, #12]
 80010f2:	3410      	adds	r4, #16
 80010f4:	f10c 0c10 	add.w	ip, ip, #16
 80010f8:	4574      	cmp	r4, lr
 80010fa:	d1f3      	bne.n	80010e4 <DynWebPage+0xb4>
 80010fc:	4663      	mov	r3, ip
 80010fe:	4622      	mov	r2, r4
 8001100:	6810      	ldr	r0, [r2, #0]
 8001102:	6018      	str	r0, [r3, #0]
 8001104:	8892      	ldrh	r2, [r2, #4]
 8001106:	809a      	strh	r2, [r3, #4]

  /* The list of tasks and their status */
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8001108:	f107 0318 	add.w	r3, r7, #24
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff f8f1 	bl	80002f4 <strlen>
 8001112:	4602      	mov	r2, r0
 8001114:	f107 0318 	add.w	r3, r7, #24
 8001118:	4413      	add	r3, r2
 800111a:	4618      	mov	r0, r3
 800111c:	f006 ff9b 	bl	8008056 <osThreadList>
  strcat((char *)PAGE_BODY, "<br><br>---------------------------------------------");
 8001120:	f107 0318 	add.w	r3, r7, #24
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f8e5 	bl	80002f4 <strlen>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	f107 0318 	add.w	r3, r7, #24
 8001132:	4413      	add	r3, r2
 8001134:	4a31      	ldr	r2, [pc, #196]	; (80011fc <DynWebPage+0x1cc>)
 8001136:	4614      	mov	r4, r2
 8001138:	469c      	mov	ip, r3
 800113a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800113e:	4665      	mov	r5, ip
 8001140:	4626      	mov	r6, r4
 8001142:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001144:	6028      	str	r0, [r5, #0]
 8001146:	6069      	str	r1, [r5, #4]
 8001148:	60aa      	str	r2, [r5, #8]
 800114a:	60eb      	str	r3, [r5, #12]
 800114c:	3410      	adds	r4, #16
 800114e:	f10c 0c10 	add.w	ip, ip, #16
 8001152:	4574      	cmp	r4, lr
 8001154:	d1f3      	bne.n	800113e <DynWebPage+0x10e>
 8001156:	4663      	mov	r3, ip
 8001158:	4622      	mov	r2, r4
 800115a:	6810      	ldr	r0, [r2, #0]
 800115c:	6018      	str	r0, [r3, #0]
 800115e:	8892      	ldrh	r2, [r2, #4]
 8001160:	809a      	strh	r2, [r3, #4]
  strcat((char *)PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8001162:	f107 0318 	add.w	r3, r7, #24
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f8c4 	bl	80002f4 <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	4413      	add	r3, r2
 8001176:	4a22      	ldr	r2, [pc, #136]	; (8001200 <DynWebPage+0x1d0>)
 8001178:	4614      	mov	r4, r2
 800117a:	469c      	mov	ip, r3
 800117c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001180:	4665      	mov	r5, ip
 8001182:	4626      	mov	r6, r4
 8001184:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001186:	6028      	str	r0, [r5, #0]
 8001188:	6069      	str	r1, [r5, #4]
 800118a:	60aa      	str	r2, [r5, #8]
 800118c:	60eb      	str	r3, [r5, #12]
 800118e:	3410      	adds	r4, #16
 8001190:	f10c 0c10 	add.w	ip, ip, #16
 8001194:	4574      	cmp	r4, lr
 8001196:	d1f3      	bne.n	8001180 <DynWebPage+0x150>
 8001198:	4662      	mov	r2, ip
 800119a:	4623      	mov	r3, r4
 800119c:	cb03      	ldmia	r3!, {r0, r1}
 800119e:	6010      	str	r0, [r2, #0]
 80011a0:	6051      	str	r1, [r2, #4]
 80011a2:	8819      	ldrh	r1, [r3, #0]
 80011a4:	789b      	ldrb	r3, [r3, #2]
 80011a6:	8111      	strh	r1, [r2, #8]
 80011a8:	7293      	strb	r3, [r2, #10]

  /* Send the dynamically generated page */
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 80011aa:	4816      	ldr	r0, [pc, #88]	; (8001204 <DynWebPage+0x1d4>)
 80011ac:	f7ff f8a2 	bl	80002f4 <strlen>
 80011b0:	4602      	mov	r2, r0
 80011b2:	1d38      	adds	r0, r7, #4
 80011b4:	2300      	movs	r3, #0
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2301      	movs	r3, #1
 80011ba:	4912      	ldr	r1, [pc, #72]	; (8001204 <DynWebPage+0x1d4>)
 80011bc:	6800      	ldr	r0, [r0, #0]
 80011be:	f008 f8e1 	bl	8009384 <netconn_write_partly>
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 80011c2:	f107 0318 	add.w	r3, r7, #24
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff f894 	bl	80002f4 <strlen>
 80011cc:	4602      	mov	r2, r0
 80011ce:	f107 0118 	add.w	r1, r7, #24
 80011d2:	1d38      	adds	r0, r7, #4
 80011d4:	2300      	movs	r3, #0
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	6800      	ldr	r0, [r0, #0]
 80011dc:	f008 f8d2 	bl	8009384 <netconn_write_partly>
}
 80011e0:	bf00      	nop
 80011e2:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ea:	bf00      	nop
 80011ec:	240000d8 	.word	0x240000d8
 80011f0:	0801ac6c 	.word	0x0801ac6c
 80011f4:	0801ac70 	.word	0x0801ac70
 80011f8:	0801aca4 	.word	0x0801aca4
 80011fc:	0801acdc 	.word	0x0801acdc
 8001200:	0801ad14 	.word	0x0801ad14
 8001204:	0801a4c4 	.word	0x0801a4c4

08001208 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001208:	b5b0      	push	{r4, r5, r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Device memory for ETH DMA descriptors */
  MPU_Config();
 800120e:	f000 f903 	bl	8001418 <MPU_Config>
  
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8001212:	f000 f945 	bl	80014a0 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the TIM6 to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();  
 8001216:	f000 fd01 	bl	8001c1c <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
 800121a:	f000 f86f 	bl	80012fc <SystemClock_Config>
  
  /* Configure the LCD ...*/
  BSP_Config();
 800121e:	f000 f821 	bl	8001264 <BSP_Config>
  
  /* Init thread */
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 4);
 8001222:	4b07      	ldr	r3, [pc, #28]	; (8001240 <main+0x38>)
 8001224:	1d3c      	adds	r4, r7, #4
 8001226:	461d      	mov	r5, r3
 8001228:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800122a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800122c:	682b      	ldr	r3, [r5, #0]
 800122e:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8001230:	1d3b      	adds	r3, r7, #4
 8001232:	2100      	movs	r1, #0
 8001234:	4618      	mov	r0, r3
 8001236:	f006 fcaa 	bl	8007b8e <osThreadCreate>
  
  /* Start scheduler */
  osKernelStart();
 800123a:	f006 fc91 	bl	8007b60 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */
  for( ;; );
 800123e:	e7fe      	b.n	800123e <main+0x36>
 8001240:	0801ad60 	.word	0x0801ad60

08001244 <StartThread>:
  * @brief  Start Thread 
  * @param  argument not used
  * @retval None
  */
static void StartThread(void const * argument)
{   
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 800124c:	2100      	movs	r1, #0
 800124e:	2000      	movs	r0, #0
 8001250:	f00b fb28 	bl	800c8a4 <tcpip_init>
  
  /* Initialize the LwIP stack */
  Netif_Config();
 8001254:	f000 f810 	bl	8001278 <Netif_Config>

  /* Initialize webserver demo */
  http_server_netconn_init();
 8001258:	f7ff feca 	bl	8000ff0 <http_server_netconn_init>
  
  for( ;; )
  {
    /* Delete the Init Thread */ 
    osThreadTerminate(NULL);
 800125c:	2000      	movs	r0, #0
 800125e:	f006 fcbd 	bl	8007bdc <osThreadTerminate>
 8001262:	e7fb      	b.n	800125c <StartThread+0x18>

08001264 <BSP_Config>:
  * @brief  BSP Configuration 
  * @param  None
  * @retval None
  */
static void BSP_Config(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED2);
 8001268:	2001      	movs	r0, #1
 800126a:	f000 fb93 	bl	8001994 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800126e:	2002      	movs	r0, #2
 8001270:	f000 fb90 	bl	8001994 <BSP_LED_Init>
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <Netif_Config>:
  * @brief  Initializes the lwIP stack
  * @param  None
  * @retval None
  */
static void Netif_Config(void)
{
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30
 800127c:	af04      	add	r7, sp, #16
#if LWIP_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
  ip_addr_set_zero_ip4(&netmask);
  ip_addr_set_zero_ip4(&gw);
#else
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <Netif_Config+0x68>)
 8001280:	61fb      	str	r3, [r7, #28]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8001282:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001286:	61bb      	str	r3, [r7, #24]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <Netif_Config+0x6c>)
 800128a:	617b      	str	r3, [r7, #20]
#endif /* LWIP_DHCP */
  
  /* add the network interface */    
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	f107 0218 	add.w	r2, r7, #24
 8001294:	f107 011c 	add.w	r1, r7, #28
 8001298:	4813      	ldr	r0, [pc, #76]	; (80012e8 <Netif_Config+0x70>)
 800129a:	9002      	str	r0, [sp, #8]
 800129c:	4813      	ldr	r0, [pc, #76]	; (80012ec <Netif_Config+0x74>)
 800129e:	9001      	str	r0, [sp, #4]
 80012a0:	2000      	movs	r0, #0
 80012a2:	9000      	str	r0, [sp, #0]
 80012a4:	4812      	ldr	r0, [pc, #72]	; (80012f0 <Netif_Config+0x78>)
 80012a6:	f00f fc27 	bl	8010af8 <netif_add>
  
  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 80012aa:	4811      	ldr	r0, [pc, #68]	; (80012f0 <Netif_Config+0x78>)
 80012ac:	f00f fdd6 	bl	8010e5c <netif_set_default>
  
  ethernet_link_status_updated(&gnetif); 
 80012b0:	480f      	ldr	r0, [pc, #60]	; (80012f0 <Netif_Config+0x78>)
 80012b2:	f7ff f8a6 	bl	8000402 <ethernet_link_status_updated>
  
#if LWIP_NETIF_LINK_CALLBACK 
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80012b6:	490f      	ldr	r1, [pc, #60]	; (80012f4 <Netif_Config+0x7c>)
 80012b8:	480d      	ldr	r0, [pc, #52]	; (80012f0 <Netif_Config+0x78>)
 80012ba:	f00f fee1 	bl	8011080 <netif_set_link_callback>
  
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 80012be:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <Netif_Config+0x80>)
 80012c0:	463c      	mov	r4, r7
 80012c2:	461d      	mov	r5, r3
 80012c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012c8:	682b      	ldr	r3, [r5, #0]
 80012ca:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 80012cc:	463b      	mov	r3, r7
 80012ce:	4908      	ldr	r1, [pc, #32]	; (80012f0 <Netif_Config+0x78>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f006 fc5c 	bl	8007b8e <osThreadCreate>
#if LWIP_DHCP
  /* Start DHCPClient */
  osThreadDef(DHCP, DHCP_Thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
  osThreadCreate (osThread(DHCP), &gnetif);
#endif 
}
 80012d6:	bf00      	nop
 80012d8:	3720      	adds	r7, #32
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	0a47fea9 	.word	0x0a47fea9
 80012e4:	0100fea9 	.word	0x0100fea9
 80012e8:	0800c835 	.word	0x0800c835
 80012ec:	080008c9 	.word	0x080008c9
 80012f0:	24007390 	.word	0x24007390
 80012f4:	08000403 	.word	0x08000403
 80012f8:	0801ad74 	.word	0x0801ad74

080012fc <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b09e      	sub	sp, #120	; 0x78
 8001300:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  
  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001308:	2002      	movs	r0, #2
 800130a:	f002 fedd 	bl	80040c8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b3e      	ldr	r3, [pc, #248]	; (800140c <SystemClock_Config+0x110>)
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	4a3d      	ldr	r2, [pc, #244]	; (800140c <SystemClock_Config+0x110>)
 8001318:	f023 0301 	bic.w	r3, r3, #1
 800131c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800131e:	4b3b      	ldr	r3, [pc, #236]	; (800140c <SystemClock_Config+0x110>)
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	4b39      	ldr	r3, [pc, #228]	; (8001410 <SystemClock_Config+0x114>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a38      	ldr	r2, [pc, #224]	; (8001410 <SystemClock_Config+0x114>)
 800132e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <SystemClock_Config+0x114>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001340:	bf00      	nop
 8001342:	4b33      	ldr	r3, [pc, #204]	; (8001410 <SystemClock_Config+0x114>)
 8001344:	699b      	ldr	r3, [r3, #24]
 8001346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800134a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800134e:	d1f8      	bne.n	8001342 <SystemClock_Config+0x46>
  
  /* Enable D2 domain SRAM3 Clock (0x30040000 AXI)*/
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <SystemClock_Config+0x118>)
 8001352:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001356:	4a2f      	ldr	r2, [pc, #188]	; (8001414 <SystemClock_Config+0x118>)
 8001358:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800135c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001360:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <SystemClock_Config+0x118>)
 8001362:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800136e:	2301      	movs	r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001372:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001376:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001380:	2302      	movs	r3, #2
 8001382:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001384:	2302      	movs	r3, #2
 8001386:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 4;
 8001388:	2304      	movs	r3, #4
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 800138c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001390:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001396:	2302      	movs	r3, #2
 8001398:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800139a:	2302      	movs	r3, #2
 800139c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800139e:	2304      	movs	r3, #4
 80013a0:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80013a6:	2304      	movs	r3, #4
 80013a8:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 fec4 	bl	800413c <HAL_RCC_OscConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80013ba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d000      	beq.n	80013c4 <SystemClock_Config+0xc8>
  {
    while(1);
 80013c2:	e7fe      	b.n	80013c2 <SystemClock_Config+0xc6>
  }
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80013c4:	233f      	movs	r3, #63	; 0x3f
 80013c6:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c8:	2303      	movs	r3, #3
 80013ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013d0:	2308      	movs	r3, #8
 80013d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 80013d4:	2340      	movs	r3, #64	; 0x40
 80013d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 80013d8:	2340      	movs	r3, #64	; 0x40
 80013da:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 80013dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 80013e2:	2340      	movs	r3, #64	; 0x40
 80013e4:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80013e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013ea:	2104      	movs	r1, #4
 80013ec:	4618      	mov	r0, r3
 80013ee:	f003 fab5 	bl	800495c <HAL_RCC_ClockConfig>
 80013f2:	4603      	mov	r3, r0
 80013f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80013f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d000      	beq.n	8001402 <SystemClock_Config+0x106>
  {
    while(1);
 8001400:	e7fe      	b.n	8001400 <SystemClock_Config+0x104>
  }
}
 8001402:	bf00      	nop
 8001404:	3778      	adds	r7, #120	; 0x78
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	58000400 	.word	0x58000400
 8001410:	58024800 	.word	0x58024800
 8001414:	58024400 	.word	0x58024400

08001418 <MPU_Config>:
  * @brief  Configure the MPU attributes 
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 800141e:	f000 fd61 	bl	8001ee4 <HAL_MPU_Disable>

  /* Configure the MPU attributes as Device not cacheable 
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001422:	2301      	movs	r3, #1
 8001424:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <MPU_Config+0x80>)
 8001428:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800142a:	2307      	movs	r3, #7
 800142c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800142e:	2303      	movs	r3, #3
 8001430:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001432:	2301      	movs	r3, #1
 8001434:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800143e:	2300      	movs	r3, #0
 8001440:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001442:	2300      	movs	r3, #0
 8001444:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001446:	2300      	movs	r3, #0
 8001448:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800144a:	2300      	movs	r3, #0
 800144c:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800144e:	463b      	mov	r3, r7
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fd7f 	bl	8001f54 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001456:	2301      	movs	r3, #1
 8001458:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30044000;
 800145a:	4b10      	ldr	r3, [pc, #64]	; (800149c <MPU_Config+0x84>)
 800145c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800145e:	230d      	movs	r3, #13
 8001460:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001462:	2303      	movs	r3, #3
 8001464:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800146e:	2301      	movs	r3, #1
 8001470:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001472:	2301      	movs	r3, #1
 8001474:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001476:	2301      	movs	r3, #1
 8001478:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800147a:	2300      	movs	r3, #0
 800147c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001482:	463b      	mov	r3, r7
 8001484:	4618      	mov	r0, r3
 8001486:	f000 fd65 	bl	8001f54 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800148a:	2004      	movs	r0, #4
 800148c:	f000 fd42 	bl	8001f14 <HAL_MPU_Enable>
}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	30040000 	.word	0x30040000
 800149c:	30044000 	.word	0x30044000

080014a0 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <CPU_CACHE_Enable+0xd8>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d11b      	bne.n	80014ea <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80014b2:	f3bf 8f4f 	dsb	sy
}
 80014b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014b8:	f3bf 8f6f 	isb	sy
}
 80014bc:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <CPU_CACHE_Enable+0xd8>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014c6:	f3bf 8f4f 	dsb	sy
}
 80014ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014cc:	f3bf 8f6f 	isb	sy
}
 80014d0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014d2:	4b29      	ldr	r3, [pc, #164]	; (8001578 <CPU_CACHE_Enable+0xd8>)
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	4a28      	ldr	r2, [pc, #160]	; (8001578 <CPU_CACHE_Enable+0xd8>)
 80014d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014dc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014de:	f3bf 8f4f 	dsb	sy
}
 80014e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014e4:	f3bf 8f6f 	isb	sy
}
 80014e8:	e000      	b.n	80014ec <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014ea:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <CPU_CACHE_Enable+0xd8>)
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d138      	bne.n	800156a <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80014f8:	4b1f      	ldr	r3, [pc, #124]	; (8001578 <CPU_CACHE_Enable+0xd8>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001500:	f3bf 8f4f 	dsb	sy
}
 8001504:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8001506:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <CPU_CACHE_Enable+0xd8>)
 8001508:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800150c:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	0b5b      	lsrs	r3, r3, #13
 8001512:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001516:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001520:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	015a      	lsls	r2, r3, #5
 8001526:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800152a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001530:	4911      	ldr	r1, [pc, #68]	; (8001578 <CPU_CACHE_Enable+0xd8>)
 8001532:	4313      	orrs	r3, r2
 8001534:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1ef      	bne.n	8001522 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	60ba      	str	r2, [r7, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1e5      	bne.n	8001518 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800154c:	f3bf 8f4f 	dsb	sy
}
 8001550:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <CPU_CACHE_Enable+0xd8>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a08      	ldr	r2, [pc, #32]	; (8001578 <CPU_CACHE_Enable+0xd8>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800155e:	f3bf 8f4f 	dsb	sy
}
 8001562:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001564:	f3bf 8f6f 	isb	sy
}
 8001568:	e000      	b.n	800156c <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800156a:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b090      	sub	sp, #64	; 0x40
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b0f      	cmp	r3, #15
 8001588:	d827      	bhi.n	80015da <HAL_InitTick+0x5e>
  {
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800158a:	2200      	movs	r2, #0
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	2036      	movs	r0, #54	; 0x36
 8001590:	f000 fc80 	bl	8001e94 <HAL_NVIC_SetPriority>
    
    /* Enable the TIM6 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001594:	2036      	movs	r0, #54	; 0x36
 8001596:	f000 fc97 	bl	8001ec8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800159a:	4a29      	ldr	r2, [pc, #164]	; (8001640 <HAL_InitTick+0xc4>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015a0:	4b28      	ldr	r3, [pc, #160]	; (8001644 <HAL_InitTick+0xc8>)
 80015a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a6:	4a27      	ldr	r2, [pc, #156]	; (8001644 <HAL_InitTick+0xc8>)
 80015a8:	f043 0310 	orr.w	r3, r3, #16
 80015ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015b0:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_InitTick+0xc8>)
 80015b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	60fb      	str	r3, [r7, #12]
 80015bc:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015be:	f107 0210 	add.w	r2, r7, #16
 80015c2:	f107 0314 	add.w	r3, r7, #20
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f003 fd3d 	bl	8005048 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80015d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d106      	bne.n	80015e6 <HAL_InitTick+0x6a>
 80015d8:	e001      	b.n	80015de <HAL_InitTick+0x62>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e02b      	b.n	8001636 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015de:	f003 fd1d 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 80015e2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80015e4:	e004      	b.n	80015f0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015e6:	f003 fd19 	bl	800501c <HAL_RCC_GetPCLK1Freq>
 80015ea:	4603      	mov	r3, r0
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <HAL_InitTick+0xcc>)
 80015f4:	fba2 2303 	umull	r2, r3, r2, r3
 80015f8:	0c9b      	lsrs	r3, r3, #18
 80015fa:	3b01      	subs	r3, #1
 80015fc:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <HAL_InitTick+0xd0>)
 8001600:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_InitTick+0xd4>)
 8001602:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <HAL_InitTick+0xd0>)
 8001606:	f240 32e7 	movw	r2, #999	; 0x3e7
 800160a:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 800160c:	4a0f      	ldr	r2, [pc, #60]	; (800164c <HAL_InitTick+0xd0>)
 800160e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001610:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_InitTick+0xd0>)
 8001614:	2200      	movs	r2, #0
 8001616:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <HAL_InitTick+0xd0>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <HAL_InitTick+0xd0>)
 8001620:	f003 fd54 	bl	80050cc <HAL_TIM_Base_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d104      	bne.n	8001634 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800162a:	4808      	ldr	r0, [pc, #32]	; (800164c <HAL_InitTick+0xd0>)
 800162c:	f003 fdb0 	bl	8005190 <HAL_TIM_Base_Start_IT>
 8001630:	4603      	mov	r3, r0
 8001632:	e000      	b.n	8001636 <HAL_InitTick+0xba>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	3740      	adds	r7, #64	; 0x40
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	24000038 	.word	0x24000038
 8001644:	58024400 	.word	0x58024400
 8001648:	431bde83 	.word	0x431bde83
 800164c:	240004c4 	.word	0x240004c4
 8001650:	40001000 	.word	0x40001000

08001654 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 800165c:	f000 fb22 	bl	8001ca4 <HAL_IncTick>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 800166c:	4802      	ldr	r0, [pc, #8]	; (8001678 <TIM6_DAC_IRQHandler+0x10>)
 800166e:	f003 fdff 	bl	8005270 <HAL_TIM_IRQHandler>
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	240004c4 	.word	0x240004c4

0800167c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  osSystickHandler();
 80016b4:	f006 fcc4 	bl	8008040 <osSystickHandler>
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <ETH_IRQHandler>:
  * @brief  This function handles Ethernet interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  HAL_ETH_IRQHandler(&EthHandle);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <ETH_IRQHandler+0x10>)
 80016c2:	f001 f965 	bl	8002990 <HAL_ETH_IRQHandler>
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	240071e8 	.word	0x240071e8

080016d0 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00b      	beq.n	80016f8 <LAN8742_RegisterBusIO+0x28>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d007      	beq.n	80016f8 <LAN8742_RegisterBusIO+0x28>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <LAN8742_RegisterBusIO+0x28>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80016f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016fc:	e014      	b.n	8001728 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685a      	ldr	r2, [r3, #4]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	689a      	ldr	r2, [r3, #8]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	691a      	ldr	r2, [r3, #16]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d17c      	bne.n	800184e <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d002      	beq.n	8001762 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2220      	movs	r2, #32
 8001766:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	e01c      	b.n	80017a8 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f107 0208 	add.w	r2, r7, #8
 8001776:	2112      	movs	r1, #18
 8001778:	6978      	ldr	r0, [r7, #20]
 800177a:	4798      	blx	r3
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	da03      	bge.n	800178a <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001782:	f06f 0304 	mvn.w	r3, #4
 8001786:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001788:	e00b      	b.n	80017a2 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f003 031f 	and.w	r3, r3, #31
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	429a      	cmp	r2, r3
 8001794:	d105      	bne.n	80017a2 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
         break;
 80017a0:	e005      	b.n	80017ae <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	3301      	adds	r3, #1
 80017a6:	617b      	str	r3, [r7, #20]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2b1f      	cmp	r3, #31
 80017ac:	d9df      	bls.n	800176e <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b1f      	cmp	r3, #31
 80017b4:	d902      	bls.n	80017bc <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80017b6:	f06f 0302 	mvn.w	r3, #2
 80017ba:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d145      	bne.n	800184e <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	687a      	ldr	r2, [r7, #4]
 80017c8:	6810      	ldr	r0, [r2, #0]
 80017ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017ce:	2100      	movs	r1, #0
 80017d0:	4798      	blx	r3
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	db37      	blt.n	8001848 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	6810      	ldr	r0, [r2, #0]
 80017e0:	f107 0208 	add.w	r2, r7, #8
 80017e4:	2100      	movs	r1, #0
 80017e6:	4798      	blx	r3
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db28      	blt.n	8001840 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	4798      	blx	r3
 80017f4:	4603      	mov	r3, r0
 80017f6:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017f8:	e01c      	b.n	8001834 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	4798      	blx	r3
 8001800:	4603      	mov	r3, r0
 8001802:	461a      	mov	r2, r3
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800180c:	d80e      	bhi.n	800182c <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	6810      	ldr	r0, [r2, #0]
 8001816:	f107 0208 	add.w	r2, r7, #8
 800181a:	2100      	movs	r1, #0
 800181c:	4798      	blx	r3
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	da07      	bge.n	8001834 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001824:	f06f 0304 	mvn.w	r3, #4
 8001828:	613b      	str	r3, [r7, #16]
                 break;
 800182a:	e010      	b.n	800184e <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800182c:	f06f 0301 	mvn.w	r3, #1
 8001830:	613b      	str	r3, [r7, #16]
               break;
 8001832:	e00c      	b.n	800184e <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1dd      	bne.n	80017fa <LAN8742_Init+0xc6>
 800183e:	e006      	b.n	800184e <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001840:	f06f 0304 	mvn.w	r3, #4
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e002      	b.n	800184e <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001848:	f06f 0303 	mvn.w	r3, #3
 800184c:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d112      	bne.n	800187a <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4798      	blx	r3
 800185a:	4603      	mov	r3, r0
 800185c:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800185e:	bf00      	nop
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	4798      	blx	r3
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001872:	d9f5      	bls.n	8001860 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800187a:	693b      	ldr	r3, [r7, #16]
 }
 800187c:	4618      	mov	r0, r3
 800187e:	3718      	adds	r7, #24
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6810      	ldr	r0, [r2, #0]
 8001898:	f107 020c 	add.w	r2, r7, #12
 800189c:	2101      	movs	r1, #1
 800189e:	4798      	blx	r3
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da02      	bge.n	80018ac <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018a6:	f06f 0304 	mvn.w	r3, #4
 80018aa:	e06e      	b.n	800198a <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	695b      	ldr	r3, [r3, #20]
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6810      	ldr	r0, [r2, #0]
 80018b4:	f107 020c 	add.w	r2, r7, #12
 80018b8:	2101      	movs	r1, #1
 80018ba:	4798      	blx	r3
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	da02      	bge.n	80018c8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018c2:	f06f 0304 	mvn.w	r3, #4
 80018c6:	e060      	b.n	800198a <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0304 	and.w	r3, r3, #4
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80018d2:	2301      	movs	r3, #1
 80018d4:	e059      	b.n	800198a <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6810      	ldr	r0, [r2, #0]
 80018de:	f107 020c 	add.w	r2, r7, #12
 80018e2:	2100      	movs	r1, #0
 80018e4:	4798      	blx	r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da02      	bge.n	80018f2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018ec:	f06f 0304 	mvn.w	r3, #4
 80018f0:	e04b      	b.n	800198a <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <LAN8742_GetLinkState+0x90>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001910:	2302      	movs	r3, #2
 8001912:	e03a      	b.n	800198a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800191e:	2303      	movs	r3, #3
 8001920:	e033      	b.n	800198a <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800192c:	2304      	movs	r3, #4
 800192e:	e02c      	b.n	800198a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001930:	2305      	movs	r3, #5
 8001932:	e02a      	b.n	800198a <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6810      	ldr	r0, [r2, #0]
 800193c:	f107 020c 	add.w	r2, r7, #12
 8001940:	211f      	movs	r1, #31
 8001942:	4798      	blx	r3
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	da02      	bge.n	8001950 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800194a:	f06f 0304 	mvn.w	r3, #4
 800194e:	e01c      	b.n	800198a <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800195a:	2306      	movs	r3, #6
 800195c:	e015      	b.n	800198a <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	f003 031c 	and.w	r3, r3, #28
 8001964:	2b18      	cmp	r3, #24
 8001966:	d101      	bne.n	800196c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001968:	2302      	movs	r3, #2
 800196a:	e00e      	b.n	800198a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 031c 	and.w	r3, r3, #28
 8001972:	2b08      	cmp	r3, #8
 8001974:	d101      	bne.n	800197a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001976:	2303      	movs	r3, #3
 8001978:	e007      	b.n	800198a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f003 031c 	and.w	r3, r3, #28
 8001980:	2b14      	cmp	r3, #20
 8001982:	d101      	bne.n	8001988 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001984:	2304      	movs	r3, #4
 8001986:	e000      	b.n	800198a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001988:	2305      	movs	r3, #5
    }				
  }
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08c      	sub	sp, #48	; 0x30
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d009      	beq.n	80019bc <BSP_LED_Init+0x28>
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d006      	beq.n	80019bc <BSP_LED_Init+0x28>
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d003      	beq.n	80019bc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019b4:	f06f 0301 	mvn.w	r3, #1
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ba:	e055      	b.n	8001a68 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10f      	bne.n	80019e2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80019c2:	4b2c      	ldr	r3, [pc, #176]	; (8001a74 <BSP_LED_Init+0xe0>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c8:	4a2a      	ldr	r2, [pc, #168]	; (8001a74 <BSP_LED_Init+0xe0>)
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019d2:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <BSP_LED_Init+0xe0>)
 80019d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	e021      	b.n	8001a26 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d10f      	bne.n	8001a08 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <BSP_LED_Init+0xe0>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ee:	4a21      	ldr	r2, [pc, #132]	; (8001a74 <BSP_LED_Init+0xe0>)
 80019f0:	f043 0310 	orr.w	r3, r3, #16
 80019f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019f8:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <BSP_LED_Init+0xe0>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	e00e      	b.n	8001a26 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001a08:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <BSP_LED_Init+0xe0>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <BSP_LED_Init+0xe0>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <BSP_LED_Init+0xe0>)
 8001a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	4a13      	ldr	r2, [pc, #76]	; (8001a78 <BSP_LED_Init+0xe4>)
 8001a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a2e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <BSP_LED_Init+0xe8>)
 8001a40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a44:	f107 0218 	add.w	r2, r7, #24
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 f972 	bl	8003d34 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <BSP_LED_Init+0xe8>)
 8001a54:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <BSP_LED_Init+0xe4>)
 8001a5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a60:	2200      	movs	r2, #0
 8001a62:	4619      	mov	r1, r3
 8001a64:	f002 fb16 	bl	8004094 <HAL_GPIO_WritePin>
  }

  return ret;
 8001a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3730      	adds	r7, #48	; 0x30
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	58024400 	.word	0x58024400
 8001a78:	0801ad88 	.word	0x0801ad88
 8001a7c:	24000018 	.word	0x24000018

08001a80 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d009      	beq.n	8001aa8 <BSP_LED_On+0x28>
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d006      	beq.n	8001aa8 <BSP_LED_On+0x28>
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d003      	beq.n	8001aa8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001aa0:	f06f 0301 	mvn.w	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e00b      	b.n	8001ac0 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <BSP_LED_On+0x4c>)
 8001aac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <BSP_LED_On+0x50>)
 8001ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4619      	mov	r1, r3
 8001abc:	f002 faea 	bl	8004094 <HAL_GPIO_WritePin>
  }

  return ret;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3710      	adds	r7, #16
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	24000018 	.word	0x24000018
 8001ad0:	0801ad88 	.word	0x0801ad88

08001ad4 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d009      	beq.n	8001afc <BSP_LED_Off+0x28>
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d006      	beq.n	8001afc <BSP_LED_Off+0x28>
 8001aee:	79fb      	ldrb	r3, [r7, #7]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d003      	beq.n	8001afc <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001af4:	f06f 0301 	mvn.w	r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	e00b      	b.n	8001b14 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <BSP_LED_Off+0x4c>)
 8001b00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <BSP_LED_Off+0x50>)
 8001b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f002 fac0 	bl	8004094 <HAL_GPIO_WritePin>
  }

  return ret;
 8001b14:	68fb      	ldr	r3, [r7, #12]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	24000018 	.word	0x24000018
 8001b24:	0801ad88 	.word	0x0801ad88

08001b28 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7ff fff0 	bl	8001b28 <BSP_PB_Callback>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b50:	4b2b      	ldr	r3, [pc, #172]	; (8001c00 <SystemInit+0xb4>)
 8001b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b56:	4a2a      	ldr	r2, [pc, #168]	; (8001c00 <SystemInit+0xb4>)
 8001b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <SystemInit+0xb8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a27      	ldr	r2, [pc, #156]	; (8001c04 <SystemInit+0xb8>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <SystemInit+0xb8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <SystemInit+0xb8>)
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	4923      	ldr	r1, [pc, #140]	; (8001c04 <SystemInit+0xb8>)
 8001b78:	4b23      	ldr	r3, [pc, #140]	; (8001c08 <SystemInit+0xbc>)
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b7e:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <SystemInit+0xb8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <SystemInit+0xb8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b8a:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <SystemInit+0xb8>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001b90:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <SystemInit+0xb8>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001b96:	4b1b      	ldr	r3, [pc, #108]	; (8001c04 <SystemInit+0xb8>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001b9c:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <SystemInit+0xb8>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <SystemInit+0xb8>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <SystemInit+0xb8>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <SystemInit+0xb8>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001bb4:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <SystemInit+0xb8>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <SystemInit+0xb8>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bc0:	4b10      	ldr	r3, [pc, #64]	; (8001c04 <SystemInit+0xb8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0f      	ldr	r2, [pc, #60]	; (8001c04 <SystemInit+0xb8>)
 8001bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <SystemInit+0xb8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <SystemInit+0xc0>)
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	4b0e      	ldr	r3, [pc, #56]	; (8001c10 <SystemInit+0xc4>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bde:	d202      	bcs.n	8001be6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <SystemInit+0xc8>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <SystemInit+0xcc>)
 8001be8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001bec:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SystemInit+0xb4>)
 8001bf0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bf4:	609a      	str	r2, [r3, #8]
#endif  


}
 8001bf6:	bf00      	nop
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00
 8001c04:	58024400 	.word	0x58024400
 8001c08:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c0c:	5c001000 	.word	0x5c001000
 8001c10:	ffff0000 	.word	0xffff0000
 8001c14:	51008108 	.word	0x51008108
 8001c18:	52004000 	.word	0x52004000

08001c1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c22:	2003      	movs	r0, #3
 8001c24:	f000 f92b 	bl	8001e7e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c28:	f003 f84e 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b15      	ldr	r3, [pc, #84]	; (8001c84 <HAL_Init+0x68>)
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	0a1b      	lsrs	r3, r3, #8
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	4913      	ldr	r1, [pc, #76]	; (8001c88 <HAL_Init+0x6c>)
 8001c3a:	5ccb      	ldrb	r3, [r1, r3]
 8001c3c:	f003 031f 	and.w	r3, r3, #31
 8001c40:	fa22 f303 	lsr.w	r3, r2, r3
 8001c44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <HAL_Init+0x68>)
 8001c48:	699b      	ldr	r3, [r3, #24]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <HAL_Init+0x6c>)
 8001c50:	5cd3      	ldrb	r3, [r2, r3]
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	fa22 f303 	lsr.w	r3, r2, r3
 8001c5c:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <HAL_Init+0x70>)
 8001c5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_Init+0x74>)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c66:	200f      	movs	r0, #15
 8001c68:	f7ff fc88 	bl	800157c <HAL_InitTick>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e002      	b.n	8001c7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c76:	f000 f80d 	bl	8001c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	58024400 	.word	0x58024400
 8001c88:	0801ad9c 	.word	0x0801ad9c
 8001c8c:	24000034 	.word	0x24000034
 8001c90:	24000030 	.word	0x24000030

08001c94 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_IncTick+0x20>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4a04      	ldr	r2, [pc, #16]	; (8001cc8 <HAL_IncTick+0x24>)
 8001cb6:	6013      	str	r3, [r2, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	2400003c 	.word	0x2400003c
 8001cc8:	240073c4 	.word	0x240073c4

08001ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd0:	4b03      	ldr	r3, [pc, #12]	; (8001ce0 <HAL_GetTick+0x14>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	240073c4 	.word	0x240073c4

08001ce4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_GetREVID+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0c1b      	lsrs	r3, r3, #16
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	5c001000 	.word	0x5c001000

08001cfc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001d0c:	4904      	ldr	r1, [pc, #16]	; (8001d20 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	58000400 	.word	0x58000400

08001d24 <__NVIC_SetPriorityGrouping>:
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <__NVIC_SetPriorityGrouping+0x40>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3a:	68ba      	ldr	r2, [r7, #8]
 8001d3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d40:	4013      	ands	r3, r2
 8001d42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <__NVIC_SetPriorityGrouping+0x44>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d52:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <__NVIC_SetPriorityGrouping+0x40>)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	60d3      	str	r3, [r2, #12]
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000ed00 	.word	0xe000ed00
 8001d68:	05fa0000 	.word	0x05fa0000

08001d6c <__NVIC_GetPriorityGrouping>:
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d70:	4b04      	ldr	r3, [pc, #16]	; (8001d84 <__NVIC_GetPriorityGrouping+0x18>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	0a1b      	lsrs	r3, r3, #8
 8001d76:	f003 0307 	and.w	r3, r3, #7
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <__NVIC_EnableIRQ>:
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	db0b      	blt.n	8001db2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	f003 021f 	and.w	r2, r3, #31
 8001da0:	4907      	ldr	r1, [pc, #28]	; (8001dc0 <__NVIC_EnableIRQ+0x38>)
 8001da2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	2001      	movs	r0, #1
 8001daa:	fa00 f202 	lsl.w	r2, r0, r2
 8001dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000e100 	.word	0xe000e100

08001dc4 <__NVIC_SetPriority>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	4603      	mov	r3, r0
 8001dcc:	6039      	str	r1, [r7, #0]
 8001dce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	db0a      	blt.n	8001dee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	490c      	ldr	r1, [pc, #48]	; (8001e10 <__NVIC_SetPriority+0x4c>)
 8001dde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001de2:	0112      	lsls	r2, r2, #4
 8001de4:	b2d2      	uxtb	r2, r2
 8001de6:	440b      	add	r3, r1
 8001de8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dec:	e00a      	b.n	8001e04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4908      	ldr	r1, [pc, #32]	; (8001e14 <__NVIC_SetPriority+0x50>)
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	3b04      	subs	r3, #4
 8001dfc:	0112      	lsls	r2, r2, #4
 8001dfe:	b2d2      	uxtb	r2, r2
 8001e00:	440b      	add	r3, r1
 8001e02:	761a      	strb	r2, [r3, #24]
}
 8001e04:	bf00      	nop
 8001e06:	370c      	adds	r7, #12
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <NVIC_EncodePriority>:
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	f003 0307 	and.w	r3, r3, #7
 8001e2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f1c3 0307 	rsb	r3, r3, #7
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	bf28      	it	cs
 8001e36:	2304      	movcs	r3, #4
 8001e38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	3304      	adds	r3, #4
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d902      	bls.n	8001e48 <NVIC_EncodePriority+0x30>
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	3b03      	subs	r3, #3
 8001e46:	e000      	b.n	8001e4a <NVIC_EncodePriority+0x32>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	fa02 f303 	lsl.w	r3, r2, r3
 8001e56:	43da      	mvns	r2, r3
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	401a      	ands	r2, r3
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6a:	43d9      	mvns	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e70:	4313      	orrs	r3, r2
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3724      	adds	r7, #36	; 0x24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr

08001e7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ff4c 	bl	8001d24 <__NVIC_SetPriorityGrouping>
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea2:	f7ff ff63 	bl	8001d6c <__NVIC_GetPriorityGrouping>
 8001ea6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	68b9      	ldr	r1, [r7, #8]
 8001eac:	6978      	ldr	r0, [r7, #20]
 8001eae:	f7ff ffb3 	bl	8001e18 <NVIC_EncodePriority>
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eb8:	4611      	mov	r1, r2
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff82 	bl	8001dc4 <__NVIC_SetPriority>
}
 8001ec0:	bf00      	nop
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff ff56 	bl	8001d88 <__NVIC_EnableIRQ>
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ee8:	f3bf 8f5f 	dmb	sy
}
 8001eec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001eee:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <HAL_MPU_Disable+0x28>)
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	4a06      	ldr	r2, [pc, #24]	; (8001f0c <HAL_MPU_Disable+0x28>)
 8001ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ef8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_MPU_Disable+0x2c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00
 8001f10:	e000ed90 	.word	0xe000ed90

08001f14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <HAL_MPU_Enable+0x38>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <HAL_MPU_Enable+0x3c>)
 8001f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <HAL_MPU_Enable+0x3c>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f32:	f3bf 8f4f 	dsb	sy
}
 8001f36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f38:	f3bf 8f6f 	isb	sy
}
 8001f3c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	e000ed90 	.word	0xe000ed90
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	785a      	ldrb	r2, [r3, #1]
 8001f60:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <HAL_MPU_ConfigRegion+0x84>)
 8001f62:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d029      	beq.n	8001fc0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001f6c:	4a1a      	ldr	r2, [pc, #104]	; (8001fd8 <HAL_MPU_ConfigRegion+0x84>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	7b1b      	ldrb	r3, [r3, #12]
 8001f78:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7adb      	ldrb	r3, [r3, #11]
 8001f7e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7a9b      	ldrb	r3, [r3, #10]
 8001f86:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7b5b      	ldrb	r3, [r3, #13]
 8001f8e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7b9b      	ldrb	r3, [r3, #14]
 8001f96:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7bdb      	ldrb	r3, [r3, #15]
 8001f9e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001fa0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	7a5b      	ldrb	r3, [r3, #9]
 8001fa6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001fa8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7a1b      	ldrb	r3, [r3, #8]
 8001fae:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fb0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	7812      	ldrb	r2, [r2, #0]
 8001fb6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001fba:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fbc:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001fbe:	e005      	b.n	8001fcc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_MPU_ConfigRegion+0x84>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_MPU_ConfigRegion+0x84>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	e000ed90 	.word	0xe000ed90

08001fdc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e0c6      	b.n	800217c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d102      	bne.n	8001ffc <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe fcac 	bl	8000954 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2223      	movs	r2, #35	; 0x23
 8002000:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	4b60      	ldr	r3, [pc, #384]	; (8002184 <HAL_ETH_Init+0x1a8>)
 8002004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002008:	4a5e      	ldr	r2, [pc, #376]	; (8002184 <HAL_ETH_Init+0x1a8>)
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002012:	4b5c      	ldr	r3, [pc, #368]	; (8002184 <HAL_ETH_Init+0x1a8>)
 8002014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	7a1b      	ldrb	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d103      	bne.n	8002030 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002028:	2000      	movs	r0, #0
 800202a:	f7ff fe67 	bl	8001cfc <HAL_SYSCFG_ETHInterfaceSelect>
 800202e:	e003      	b.n	8002038 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002030:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002034:	f7ff fe62 	bl	8001cfc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800204e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002050:	f7ff fe3c 	bl	8001ccc <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002056:	e00f      	b.n	8002078 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002058:	f7ff fe38 	bl	8001ccc <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002066:	d907      	bls.n	8002078 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2204      	movs	r2, #4
 800206c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	22e0      	movs	r2, #224	; 0xe0
 8002072:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e081      	b.n	800217c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1e6      	bne.n	8002058 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f001 fad8 	bl	8003640 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002090:	f002 ff94 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8002094:	4603      	mov	r3, r0
 8002096:	4a3c      	ldr	r2, [pc, #240]	; (8002188 <HAL_ETH_Init+0x1ac>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	0c9a      	lsrs	r2, r3, #18
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3a01      	subs	r2, #1
 80020a4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f001 fa2b 	bl	8003504 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80020c4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80020c8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0303 	and.w	r3, r3, #3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	22e0      	movs	r2, #224	; 0xe0
 80020e0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e04a      	b.n	800217c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	f241 1308 	movw	r3, #4360	; 0x1108
 80020ee:	4413      	add	r3, r2
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_ETH_Init+0x1b0>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6952      	ldr	r2, [r2, #20]
 80020fa:	0052      	lsls	r2, r2, #1
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	6809      	ldr	r1, [r1, #0]
 8002100:	431a      	orrs	r2, r3
 8002102:	f241 1308 	movw	r3, #4360	; 0x1108
 8002106:	440b      	add	r3, r1
 8002108:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f001 faf0 	bl	80036f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f001 fb34 	bl	800377e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	3305      	adds	r3, #5
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	021a      	lsls	r2, r3, #8
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	3304      	adds	r3, #4
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	430a      	orrs	r2, r1
 8002130:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	3303      	adds	r3, #3
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	061a      	lsls	r2, r3, #24
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	3302      	adds	r3, #2
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	041b      	lsls	r3, r3, #16
 8002148:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	3301      	adds	r3, #1
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002154:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002162:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002164:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2200      	movs	r2, #0
 800216c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2210      	movs	r2, #16
 8002172:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2210      	movs	r2, #16
 8002178:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	58024400 	.word	0x58024400
 8002188:	431bde83 	.word	0x431bde83
 800218c:	ffff8001 	.word	0xffff8001

08002190 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
 800219c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	3310      	adds	r3, #16
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d002      	beq.n	80021b8 <HAL_ETH_DescAssignMemory+0x28>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	d904      	bls.n	80021c2 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e021      	b.n	8002206 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00b      	beq.n	80021f8 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	371c      	adds	r7, #28
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr

08002212 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800221e:	2b10      	cmp	r3, #16
 8002220:	d174      	bne.n	800230c <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2223      	movs	r2, #35	; 0x23
 8002226:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e00f      	b.n	800224e <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3310      	adds	r3, #16
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	3301      	adds	r3, #1
 800224c:	60fb      	str	r3, [r7, #12]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2b03      	cmp	r3, #3
 8002252:	d9ec      	bls.n	800222e <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0202 	orr.w	r2, r2, #2
 8002268:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f042 0201 	orr.w	r2, r2, #1
 8002278:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	f241 1304 	movw	r3, #4356	; 0x1104
 8002296:	4413      	add	r3, r2
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6811      	ldr	r1, [r2, #0]
 800229e:	f043 0201 	orr.w	r2, r3, #1
 80022a2:	f241 1304 	movw	r3, #4356	; 0x1104
 80022a6:	440b      	add	r3, r1
 80022a8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f241 1308 	movw	r3, #4360	; 0x1108
 80022b2:	4413      	add	r3, r2
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6811      	ldr	r1, [r2, #0]
 80022ba:	f043 0201 	orr.w	r2, r3, #1
 80022be:	f241 1308 	movw	r3, #4360	; 0x1108
 80022c2:	440b      	add	r3, r1
 80022c4:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 80022d8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80022dc:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	f241 1334 	movw	r3, #4404	; 0x1134
 80022e6:	4413      	add	r3, r2
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	6811      	ldr	r1, [r2, #0]
 80022ee:	f24d 0241 	movw	r2, #53313	; 0xd041
 80022f2:	431a      	orrs	r2, r3
 80022f4:	f241 1334 	movw	r3, #4404	; 0x1134
 80022f8:	440b      	add	r3, r1
 80022fa:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2210      	movs	r2, #16
 8002300:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2222      	movs	r2, #34	; 0x22
 8002306:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8002308:	2300      	movs	r3, #0
 800230a:	e000      	b.n	800230e <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
  }
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d067      	beq.n	80023fc <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2223      	movs	r2, #35	; 0x23
 8002330:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	f241 1334 	movw	r3, #4404	; 0x1134
 800233a:	4413      	add	r3, r2
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6811      	ldr	r1, [r2, #0]
 8002342:	4a32      	ldr	r2, [pc, #200]	; (800240c <HAL_ETH_Stop_IT+0xf0>)
 8002344:	401a      	ands	r2, r3
 8002346:	f241 1334 	movw	r3, #4404	; 0x1134
 800234a:	440b      	add	r3, r1
 800234c:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	f241 1304 	movw	r3, #4356	; 0x1104
 8002356:	4413      	add	r3, r2
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6811      	ldr	r1, [r2, #0]
 800235e:	f023 0201 	bic.w	r2, r3, #1
 8002362:	f241 1304 	movw	r3, #4356	; 0x1104
 8002366:	440b      	add	r3, r1
 8002368:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002372:	4413      	add	r3, r2
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	6811      	ldr	r1, [r2, #0]
 800237a:	f023 0201 	bic.w	r2, r3, #1
 800237e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002382:	440b      	add	r3, r1
 8002384:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0202 	bic.w	r2, r2, #2
 80023b8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80023ba:	2300      	movs	r3, #0
 80023bc:	60fb      	str	r3, [r7, #12]
 80023be:	e00f      	b.n	80023e0 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	3310      	adds	r3, #16
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	4413      	add	r3, r2
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	3301      	adds	r3, #1
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d9ec      	bls.n	80023c0 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2210      	movs	r2, #16
 80023f0:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2210      	movs	r2, #16
 80023f6:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	ffff2fbe 	.word	0xffff2fbe

08002410 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d107      	bne.n	8002432 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002426:	f043 0201 	orr.w	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e073      	b.n	800251a <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002436:	2b10      	cmp	r3, #16
 8002438:	d16e      	bne.n	8002518 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800243a:	2200      	movs	r2, #0
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f001 f9fa 	bl	8003838 <ETH_Prepare_Tx_Descriptors>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d007      	beq.n	800245a <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244e:	f043 0202 	orr.w	r2, r3, #2
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e05f      	b.n	800251a <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3206      	adds	r2, #6
 8002462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002466:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	629a      	str	r2, [r3, #40]	; 0x28
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002476:	2b03      	cmp	r3, #3
 8002478:	d904      	bls.n	8002484 <HAL_ETH_Transmit+0x74>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247e:	1f1a      	subs	r2, r3, #4
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	3106      	adds	r1, #6
 8002490:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002494:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002498:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 800249a:	f7ff fc17 	bl	8001ccc <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80024a0:	e034      	b.n	800250c <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d011      	beq.n	80024d8 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b8:	f043 0208 	orr.w	r2, r3, #8
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	22e0      	movs	r2, #224	; 0xe0
 80024d2:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e020      	b.n	800251a <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024de:	d015      	beq.n	800250c <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80024e0:	f7ff fbf4 	bl	8001ccc <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d302      	bcc.n	80024f6 <HAL_ETH_Transmit+0xe6>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024fa:	f043 0204 	orr.w	r2, r3, #4
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	22e0      	movs	r2, #224	; 0xe0
 8002506:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e006      	b.n	800251a <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	dbc6      	blt.n	80024a2 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002522:	b480      	push	{r7}
 8002524:	b089      	sub	sp, #36	; 0x24
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3344      	adds	r3, #68	; 0x44
 800252e:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253e:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002540:	2300      	movs	r3, #0
 8002542:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002544:	2300      	movs	r3, #0
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	2300      	movs	r3, #0
 800254a:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	699b      	ldr	r3, [r3, #24]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d06b      	beq.n	800262c <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002554:	2300      	movs	r3, #0
 8002556:	e0ce      	b.n	80026f6 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	3301      	adds	r3, #1
 800255c:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d036      	beq.n	80025d8 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	3301      	adds	r3, #1
 800256e:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d101      	bne.n	800257a <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d902      	bls.n	800258c <HAL_ETH_IsRxDataAvailable+0x6a>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	3b04      	subs	r3, #4
 800258a:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	69fa      	ldr	r2, [r7, #28]
 8002590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002594:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db11      	blt.n	80025c2 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2201      	movs	r2, #1
 80025ae:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	3301      	adds	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d902      	bls.n	80025c2 <HAL_ETH_IsRxDataAvailable+0xa0>
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	3b04      	subs	r3, #4
 80025c0:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e08e      	b.n	80026f6 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d012      	beq.n	800260a <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80025e8:	2301      	movs	r3, #1
 80025ea:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	3301      	adds	r3, #1
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d902      	bls.n	80025fe <HAL_ETH_IsRxDataAvailable+0xdc>
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	3b04      	subs	r3, #4
 80025fc:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	e010      	b.n	800262c <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	3301      	adds	r3, #1
 800260e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	3301      	adds	r3, #1
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d902      	bls.n	8002622 <HAL_ETH_IsRxDataAvailable+0x100>
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	3b04      	subs	r3, #4
 8002620:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db02      	blt.n	800263a <HAL_ETH_IsRxDataAvailable+0x118>
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d98e      	bls.n	8002558 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d056      	beq.n	80026ee <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	69fa      	ldr	r2, [r7, #28]
 8002654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002658:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	e03b      	b.n	80026d8 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800266e:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d009      	beq.n	800268c <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d20d      	bcs.n	80026d2 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	3301      	adds	r3, #1
 80026ba:	61fb      	str	r3, [r7, #28]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d902      	bls.n	80026c8 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3b04      	subs	r3, #4
 80026c6:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	69fa      	ldr	r2, [r7, #28]
 80026cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026d0:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3301      	adds	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d3bf      	bcc.n	8002660 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6819      	ldr	r1, [r3, #0]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	f241 1328 	movw	r3, #4392	; 0x1128
 80026ea:	440b      	add	r3, r1
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]

  return 0;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3724      	adds	r7, #36	; 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b08a      	sub	sp, #40	; 0x28
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3344      	adds	r3, #68	; 0x44
 8002710:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002718:	2300      	movs	r3, #0
 800271a:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002724:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e07d      	b.n	8002836 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10f      	bne.n	8002762 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff feed 	bl	8002522 <HAL_ETH_IsRxDataAvailable>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e071      	b.n	8002836 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800275c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002760:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002762:	2300      	movs	r3, #0
 8002764:	623b      	str	r3, [r7, #32]
 8002766:	e031      	b.n	80027cc <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	461a      	mov	r2, r3
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695a      	ldr	r2, [r3, #20]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	461a      	mov	r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	695a      	ldr	r2, [r3, #20]
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80027a2:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	3301      	adds	r3, #1
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	2b03      	cmp	r3, #3
 80027ae:	d902      	bls.n	80027b6 <HAL_ETH_GetRxDataBuffer+0xb4>
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	3b04      	subs	r3, #4
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027be:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80027c6:	6a3b      	ldr	r3, [r7, #32]
 80027c8:	3301      	adds	r3, #1
 80027ca:	623b      	str	r3, [r7, #32]
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	6a3a      	ldr	r2, [r7, #32]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d3c7      	bcc.n	8002768 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	461a      	mov	r2, r3
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d803      	bhi.n	8002802 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	605a      	str	r2, [r3, #4]
 8002800:	e018      	b.n	8002834 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d012      	beq.n	8002830 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	461a      	mov	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	1ad2      	subs	r2, r2, r3
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	e001      	b.n	8002834 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3728      	adds	r7, #40	; 0x28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	3344      	adds	r3, #68	; 0x44
 800284c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d107      	bne.n	800286c <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff fe60 	bl	8002522 <HAL_ETH_IsRxDataAvailable>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e017      	b.n	800289c <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	699a      	ldr	r2, [r3, #24]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	4413      	add	r3, r2
 8002874:	3b01      	subs	r3, #1
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	2b03      	cmp	r3, #3
 800287c:	d902      	bls.n	8002884 <HAL_ETH_GetRxDataLength+0x46>
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3b04      	subs	r3, #4
 8002882:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288c:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}

080028a4 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b089      	sub	sp, #36	; 0x24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3344      	adds	r3, #68	; 0x44
 80028b0:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028c0:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e057      	b.n	8002984 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	3301      	adds	r3, #1
 80028e0:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	e03b      	b.n	8002960 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028f6:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d009      	beq.n	8002914 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d005      	beq.n	8002934 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002928:	69bb      	ldr	r3, [r7, #24]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	3b01      	subs	r3, #1
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	429a      	cmp	r2, r3
 800293c:	d20d      	bcs.n	800295a <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3301      	adds	r3, #1
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b03      	cmp	r3, #3
 8002948:	d902      	bls.n	8002950 <HAL_ETH_BuildRxDescriptors+0xac>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b04      	subs	r3, #4
 800294e:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002958:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	3301      	adds	r3, #1
 800295e:	613b      	str	r3, [r7, #16]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	429a      	cmp	r2, r3
 8002966:	d3bf      	bcc.n	80028e8 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6819      	ldr	r1, [r3, #0]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	f241 1328 	movw	r3, #4392	; 0x1128
 8002972:	440b      	add	r3, r1
 8002974:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002982:	2300      	movs	r3, #0
}
 8002984:	4618      	mov	r0, r3
 8002986:	3724      	adds	r7, #36	; 0x24
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a6:	2b40      	cmp	r3, #64	; 0x40
 80029a8:	d113      	bne.n	80029d2 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	f241 1334 	movw	r3, #4404	; 0x1134
 80029b2:	4413      	add	r3, r2
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ba:	2b40      	cmp	r3, #64	; 0x40
 80029bc:	d109      	bne.n	80029d2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe f876 	bl	8000ab0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80029cc:	f248 0240 	movw	r2, #32832	; 0x8040
 80029d0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d113      	bne.n	8002a0c <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	f241 1334 	movw	r3, #4404	; 0x1134
 80029ec:	4413      	add	r3, r2
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d109      	bne.n	8002a0c <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f8b7 	bl	8002b6c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002a06:	f248 0201 	movw	r2, #32769	; 0x8001
 8002a0a:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a1e:	d149      	bne.n	8002ab4 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	f241 1334 	movw	r3, #4404	; 0x1134
 8002a28:	4413      	add	r3, r2
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a34:	d13e      	bne.n	8002ab4 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a3a:	f043 0208 	orr.w	r2, r3, #8
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a54:	d11b      	bne.n	8002a8e <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	f241 1302 	movw	r3, #4354	; 0x1102
 8002a64:	4013      	ands	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002a72:	4413      	add	r3, r2
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6811      	ldr	r1, [r2, #0]
 8002a7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a7e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002a82:	440b      	add	r3, r1
 8002a84:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	22e0      	movs	r2, #224	; 0xe0
 8002a8a:	66da      	str	r2, [r3, #108]	; 0x6c
 8002a8c:	e00f      	b.n	8002aae <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002aa8:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8002aac:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f866 	bl	8002b80 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002abc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002ac0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ac4:	d10e      	bne.n	8002ae4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	22e0      	movs	r2, #224	; 0xe0
 8002ad6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f85b 	bl	8002b94 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b10      	cmp	r3, #16
 8002af2:	d10f      	bne.n	8002b14 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002afc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f84e 	bl	8002ba8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b20      	cmp	r3, #32
 8002b22:	d10f      	bne.n	8002b44 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b2c:	f003 020f 	and.w	r2, r3, #15
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f840 	bl	8002bbc <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_ETH_IRQHandler+0x1d8>)
 8002b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_ETH_IRQHandler+0x1d8>)
 8002b52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b56:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 f839 	bl	8002bd0 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	58000080 	.word	0x58000080

08002b6c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	60b9      	str	r1, [r7, #8]
 8002bee:	607a      	str	r2, [r7, #4]
 8002bf0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e03e      	b.n	8002c84 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c0e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	055b      	lsls	r3, r3, #21
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f043 030c 	orr.w	r3, r3, #12
 8002c32:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002c46:	f7ff f841 	bl	8001ccc <HAL_GetTick>
 8002c4a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002c4c:	e009      	b.n	8002c62 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002c4e:	f7ff f83d 	bl	8001ccc <HAL_GetTick>
 8002c52:	4602      	mov	r2, r0
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c5c:	d901      	bls.n	8002c62 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e010      	b.n	8002c84 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1ed      	bne.n	8002c4e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3718      	adds	r7, #24
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e03c      	b.n	8002d28 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cb6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	055b      	lsls	r3, r3, #21
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	041b      	lsls	r3, r3, #16
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f023 030c 	bic.w	r3, r3, #12
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	b29a      	uxth	r2, r3
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_ETH_WritePHYRegister+0xa4>)
 8002cee:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002cf2:	4a0f      	ldr	r2, [pc, #60]	; (8002d30 <HAL_ETH_WritePHYRegister+0xa4>)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002cfa:	f7fe ffe7 	bl	8001ccc <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002d00:	e009      	b.n	8002d16 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002d02:	f7fe ffe3 	bl	8001ccc <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d10:	d901      	bls.n	8002d16 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e008      	b.n	8002d28 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1ed      	bne.n	8002d02 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002d26:	2300      	movs	r3, #0
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3718      	adds	r7, #24
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40028000 	.word	0x40028000

08002d34 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e1c3      	b.n	80030d0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 020c 	and.w	r2, r3, #12
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0310 	and.w	r3, r3, #16
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	bf0c      	ite	eq
 8002d8e:	2301      	moveq	r3, #1
 8002d90:	2300      	movne	r3, #0
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	461a      	mov	r2, r3
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf14      	ite	ne
 8002daa:	2301      	movne	r3, #1
 8002dac:	2300      	moveq	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	461a      	mov	r2, r3
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	bf14      	ite	ne
 8002df8:	2301      	movne	r3, #1
 8002dfa:	2300      	moveq	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	461a      	mov	r2, r3
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	bf14      	ite	ne
 8002e2e:	2301      	movne	r3, #1
 8002e30:	2300      	moveq	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	461a      	mov	r2, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	bf0c      	ite	eq
 8002e62:	2301      	moveq	r3, #1
 8002e64:	2300      	movne	r3, #0
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	bf14      	ite	ne
 8002e7c:	2301      	movne	r3, #1
 8002e7e:	2300      	moveq	r3, #0
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bf14      	ite	ne
 8002e96:	2301      	movne	r3, #1
 8002e98:	2300      	moveq	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	bf14      	ite	ne
 8002eb0:	2301      	movne	r3, #1
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	bf14      	ite	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	2300      	moveq	r3, #0
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf14      	ite	ne
 8002ef2:	2301      	movne	r3, #1
 8002ef4:	2300      	moveq	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	461a      	mov	r2, r3
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf0c      	ite	eq
 8002f28:	2301      	moveq	r3, #1
 8002f2a:	2300      	movne	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bf14      	ite	ne
 8002f44:	2301      	movne	r3, #1
 8002f46:	2300      	moveq	r3, #0
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf14      	ite	ne
 8002f60:	2301      	movne	r3, #1
 8002f62:	2300      	moveq	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	0e5b      	lsrs	r3, r3, #25
 8002f92:	f003 021f 	and.w	r2, r3, #31
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf14      	ite	ne
 8002fa8:	2301      	movne	r3, #1
 8002faa:	2300      	moveq	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f003 020f 	and.w	r2, r3, #15
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf14      	ite	ne
 8002fd2:	2301      	movne	r3, #1
 8002fd4:	2300      	moveq	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	b29a      	uxth	r2, r3
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	bf14      	ite	ne
 8003028:	2301      	movne	r3, #1
 800302a:	2300      	moveq	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	bf14      	ite	ne
 8003046:	2301      	movne	r3, #1
 8003048:	2300      	moveq	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	461a      	mov	r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800305c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800306c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800307c:	f003 0308 	and.w	r3, r3, #8
 8003080:	2b00      	cmp	r3, #0
 8003082:	bf14      	ite	ne
 8003084:	2301      	movne	r3, #1
 8003086:	2300      	moveq	r3, #0
 8003088:	b2db      	uxtb	r3, r3
 800308a:	461a      	mov	r2, r3
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800309a:	f003 0310 	and.w	r3, r3, #16
 800309e:	2b00      	cmp	r3, #0
 80030a0:	bf14      	ite	ne
 80030a2:	2301      	movne	r3, #1
 80030a4:	2300      	moveq	r3, #0
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	461a      	mov	r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf0c      	ite	eq
 80030c0:	2301      	moveq	r3, #1
 80030c2:	2300      	movne	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	461a      	mov	r2, r3
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e00a      	b.n	8003106 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f4:	2b10      	cmp	r3, #16
 80030f6:	d105      	bne.n	8003104 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f860 	bl	80031c0 <ETH_SetMACConfig>

    return HAL_OK;
 8003100:	2300      	movs	r3, #0
 8003102:	e000      	b.n	8003106 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
  }
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003120:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003128:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800312a:	f001 ff47 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 800312e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4a1e      	ldr	r2, [pc, #120]	; (80031ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d908      	bls.n	800314a <HAL_ETH_SetMDIOClockRange+0x3a>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4a1d      	ldr	r2, [pc, #116]	; (80031b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d804      	bhi.n	800314a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	e027      	b.n	800319a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d908      	bls.n	8003164 <HAL_ETH_SetMDIOClockRange+0x54>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	4a17      	ldr	r2, [pc, #92]	; (80031b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d204      	bcs.n	8003164 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	e01a      	b.n	800319a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4a13      	ldr	r2, [pc, #76]	; (80031b4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d303      	bcc.n	8003174 <HAL_ETH_SetMDIOClockRange+0x64>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4a12      	ldr	r2, [pc, #72]	; (80031b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d911      	bls.n	8003198 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4a10      	ldr	r2, [pc, #64]	; (80031b8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d908      	bls.n	800318e <HAL_ETH_SetMDIOClockRange+0x7e>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4a0f      	ldr	r2, [pc, #60]	; (80031bc <HAL_ETH_SetMDIOClockRange+0xac>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d804      	bhi.n	800318e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e005      	b.n	800319a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003194:	60fb      	str	r3, [r7, #12]
 8003196:	e000      	b.n	800319a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003198:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80031a4:	bf00      	nop
 80031a6:	3710      	adds	r7, #16
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	01312cff 	.word	0x01312cff
 80031b0:	02160ebf 	.word	0x02160ebf
 80031b4:	03938700 	.word	0x03938700
 80031b8:	05f5e0ff 	.word	0x05f5e0ff
 80031bc:	08f0d17f 	.word	0x08f0d17f

080031c0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80031d2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	791b      	ldrb	r3, [r3, #4]
 80031d8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80031da:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	7b1b      	ldrb	r3, [r3, #12]
 80031e0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80031e2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	7b5b      	ldrb	r3, [r3, #13]
 80031e8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80031ea:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	7b9b      	ldrb	r3, [r3, #14]
 80031f0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80031f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	7bdb      	ldrb	r3, [r3, #15]
 80031f8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80031fa:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	7c12      	ldrb	r2, [r2, #16]
 8003200:	2a00      	cmp	r2, #0
 8003202:	d102      	bne.n	800320a <ETH_SetMACConfig+0x4a>
 8003204:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003208:	e000      	b.n	800320c <ETH_SetMACConfig+0x4c>
 800320a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800320c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	7c52      	ldrb	r2, [r2, #17]
 8003212:	2a00      	cmp	r2, #0
 8003214:	d102      	bne.n	800321c <ETH_SetMACConfig+0x5c>
 8003216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800321a:	e000      	b.n	800321e <ETH_SetMACConfig+0x5e>
 800321c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800321e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	7c9b      	ldrb	r3, [r3, #18]
 8003224:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003226:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800322c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003232:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	7f1b      	ldrb	r3, [r3, #28]
 8003238:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800323a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	7f5b      	ldrb	r3, [r3, #29]
 8003240:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003242:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	7f92      	ldrb	r2, [r2, #30]
 8003248:	2a00      	cmp	r2, #0
 800324a:	d102      	bne.n	8003252 <ETH_SetMACConfig+0x92>
 800324c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003250:	e000      	b.n	8003254 <ETH_SetMACConfig+0x94>
 8003252:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003254:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	7fdb      	ldrb	r3, [r3, #31]
 800325a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800325c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003264:	2a00      	cmp	r2, #0
 8003266:	d102      	bne.n	800326e <ETH_SetMACConfig+0xae>
 8003268:	f44f 7280 	mov.w	r2, #256	; 0x100
 800326c:	e000      	b.n	8003270 <ETH_SetMACConfig+0xb0>
 800326e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003270:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003276:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800327e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003280:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	4b56      	ldr	r3, [pc, #344]	; (80033ec <ETH_SetMACConfig+0x22c>)
 8003292:	4013      	ands	r3, r2
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	6812      	ldr	r2, [r2, #0]
 8003298:	68f9      	ldr	r1, [r7, #12]
 800329a:	430b      	orrs	r3, r1
 800329c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80032ac:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80032b6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032be:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80032c0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80032c2:	683a      	ldr	r2, [r7, #0]
 80032c4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80032c8:	2a00      	cmp	r2, #0
 80032ca:	d102      	bne.n	80032d2 <ETH_SetMACConfig+0x112>
 80032cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032d0:	e000      	b.n	80032d4 <ETH_SetMACConfig+0x114>
 80032d2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80032d4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80032da:	4313      	orrs	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	685a      	ldr	r2, [r3, #4]
 80032e4:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <ETH_SetMACConfig+0x230>)
 80032e6:	4013      	ands	r3, r2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	68f9      	ldr	r1, [r7, #12]
 80032ee:	430b      	orrs	r3, r1
 80032f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68da      	ldr	r2, [r3, #12]
 8003308:	4b3a      	ldr	r3, [pc, #232]	; (80033f4 <ETH_SetMACConfig+0x234>)
 800330a:	4013      	ands	r3, r2
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	430b      	orrs	r3, r1
 8003314:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800331c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003322:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800332a:	2a00      	cmp	r2, #0
 800332c:	d101      	bne.n	8003332 <ETH_SetMACConfig+0x172>
 800332e:	2280      	movs	r2, #128	; 0x80
 8003330:	e000      	b.n	8003334 <ETH_SetMACConfig+0x174>
 8003332:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003334:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800333a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800333c:	4313      	orrs	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003346:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800334a:	4013      	ands	r3, r2
 800334c:	687a      	ldr	r2, [r7, #4]
 800334e:	6812      	ldr	r2, [r2, #0]
 8003350:	68f9      	ldr	r1, [r7, #12]
 8003352:	430b      	orrs	r3, r1
 8003354:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800335c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003364:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f023 0103 	bic.w	r1, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	430a      	orrs	r2, r1
 800337e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800338a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80033a6:	2a00      	cmp	r2, #0
 80033a8:	d101      	bne.n	80033ae <ETH_SetMACConfig+0x1ee>
 80033aa:	2240      	movs	r2, #64	; 0x40
 80033ac:	e000      	b.n	80033b0 <ETH_SetMACConfig+0x1f0>
 80033ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80033b0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80033b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80033ba:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80033c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80033c4:	4313      	orrs	r3, r2
 80033c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80033d0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	430a      	orrs	r2, r1
 80033dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80033e0:	bf00      	nop
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	00048083 	.word	0x00048083
 80033f0:	c0f88000 	.word	0xc0f88000
 80033f4:	fffffef0 	.word	0xfffffef0

080033f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4b38      	ldr	r3, [pc, #224]	; (80034f0 <ETH_SetDMAConfig+0xf8>)
 800340e:	4013      	ands	r3, r2
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	6809      	ldr	r1, [r1, #0]
 8003418:	431a      	orrs	r2, r3
 800341a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800341e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	791b      	ldrb	r3, [r3, #4]
 8003424:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800342a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	7b1b      	ldrb	r3, [r3, #12]
 8003430:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	f241 0304 	movw	r3, #4100	; 0x1004
 800343e:	4413      	add	r3, r2
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	4b2c      	ldr	r3, [pc, #176]	; (80034f4 <ETH_SetDMAConfig+0xfc>)
 8003444:	4013      	ands	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6811      	ldr	r1, [r2, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	431a      	orrs	r2, r3
 800344e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003452:	440b      	add	r3, r1
 8003454:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	7b5b      	ldrb	r3, [r3, #13]
 800345a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <ETH_SetDMAConfig+0x100>)
 8003470:	4013      	ands	r3, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6811      	ldr	r1, [r2, #0]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	431a      	orrs	r2, r3
 800347a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800347e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	7d1b      	ldrb	r3, [r3, #20]
 8003488:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800348a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	7f5b      	ldrb	r3, [r3, #29]
 8003490:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	f241 1304 	movw	r3, #4356	; 0x1104
 800349e:	4413      	add	r3, r2
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4b16      	ldr	r3, [pc, #88]	; (80034fc <ETH_SetDMAConfig+0x104>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	6811      	ldr	r1, [r2, #0]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	431a      	orrs	r2, r3
 80034ae:	f241 1304 	movw	r3, #4356	; 0x1104
 80034b2:	440b      	add	r3, r1
 80034b4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	7f1b      	ldrb	r3, [r3, #28]
 80034ba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	f241 1308 	movw	r3, #4360	; 0x1108
 80034cc:	4413      	add	r3, r2
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <ETH_SetDMAConfig+0x108>)
 80034d2:	4013      	ands	r3, r2
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6811      	ldr	r1, [r2, #0]
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	431a      	orrs	r2, r3
 80034dc:	f241 1308 	movw	r3, #4360	; 0x1108
 80034e0:	440b      	add	r3, r1
 80034e2:	601a      	str	r2, [r3, #0]
}
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	ffff87fd 	.word	0xffff87fd
 80034f4:	ffff2ffe 	.word	0xffff2ffe
 80034f8:	fffec000 	.word	0xfffec000
 80034fc:	ffc0efef 	.word	0xffc0efef
 8003500:	7fc0ffff 	.word	0x7fc0ffff

08003504 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b0a4      	sub	sp, #144	; 0x90
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800350c:	2301      	movs	r3, #1
 800350e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003512:	2300      	movs	r3, #0
 8003514:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800351c:	2300      	movs	r3, #0
 800351e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003522:	2301      	movs	r3, #1
 8003524:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003528:	2301      	movs	r3, #1
 800352a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800352e:	2301      	movs	r3, #1
 8003530:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003534:	2300      	movs	r3, #0
 8003536:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800353a:	2301      	movs	r3, #1
 800353c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003540:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003544:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003546:	2300      	movs	r3, #0
 8003548:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800354c:	2300      	movs	r3, #0
 800354e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003550:	2300      	movs	r3, #0
 8003552:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003556:	2300      	movs	r3, #0
 8003558:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800355c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003560:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003562:	2300      	movs	r3, #0
 8003564:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003568:	2300      	movs	r3, #0
 800356a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800356c:	2301      	movs	r3, #1
 800356e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003572:	2300      	movs	r3, #0
 8003574:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800357e:	2300      	movs	r3, #0
 8003580:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003582:	2300      	movs	r3, #0
 8003584:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003586:	2300      	movs	r3, #0
 8003588:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800358a:	2300      	movs	r3, #0
 800358c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003590:	2300      	movs	r3, #0
 8003592:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003596:	2301      	movs	r3, #1
 8003598:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800359c:	2320      	movs	r3, #32
 800359e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80035ae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80035b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80035b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035b8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80035c0:	2302      	movs	r3, #2
 80035c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80035c6:	2300      	movs	r3, #0
 80035c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80035d2:	2300      	movs	r3, #0
 80035d4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80035d8:	2301      	movs	r3, #1
 80035da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80035de:	2300      	movs	r3, #0
 80035e0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80035e2:	2301      	movs	r3, #1
 80035e4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80035e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035ec:	4619      	mov	r1, r3
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff fde6 	bl	80031c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80035f4:	2301      	movs	r3, #1
 80035f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80035f8:	2301      	movs	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003600:	2300      	movs	r3, #0
 8003602:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003606:	2300      	movs	r3, #0
 8003608:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800360a:	2300      	movs	r3, #0
 800360c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800360e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003612:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003614:	2300      	movs	r3, #0
 8003616:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003618:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800361c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800361e:	2300      	movs	r3, #0
 8003620:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003624:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003628:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800362a:	f107 0308 	add.w	r3, r7, #8
 800362e:	4619      	mov	r1, r3
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f7ff fee1 	bl	80033f8 <ETH_SetDMAConfig>
}
 8003636:	bf00      	nop
 8003638:	3790      	adds	r7, #144	; 0x90
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003650:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003658:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800365a:	f001 fcaf 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 800365e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	4a1e      	ldr	r2, [pc, #120]	; (80036dc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d908      	bls.n	800367a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4a1d      	ldr	r2, [pc, #116]	; (80036e0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d804      	bhi.n	800367a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	e027      	b.n	80036ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d908      	bls.n	8003694 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4a17      	ldr	r2, [pc, #92]	; (80036e4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d204      	bcs.n	8003694 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	e01a      	b.n	80036ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4a13      	ldr	r2, [pc, #76]	; (80036e4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d303      	bcc.n	80036a4 <ETH_MAC_MDIO_ClkConfig+0x64>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d911      	bls.n	80036c8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4a10      	ldr	r2, [pc, #64]	; (80036e8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d908      	bls.n	80036be <ETH_MAC_MDIO_ClkConfig+0x7e>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <ETH_MAC_MDIO_ClkConfig+0xac>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d804      	bhi.n	80036be <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	e005      	b.n	80036ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	e000      	b.n	80036ca <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80036c8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	01312cff 	.word	0x01312cff
 80036e0:	02160ebf 	.word	0x02160ebf
 80036e4:	03938700 	.word	0x03938700
 80036e8:	05f5e0ff 	.word	0x05f5e0ff
 80036ec:	08f0d17f 	.word	0x08f0d17f

080036f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
 80036fc:	e01d      	b.n	800373a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68d9      	ldr	r1, [r3, #12]
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4613      	mov	r3, r2
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	4413      	add	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	440b      	add	r3, r1
 800370e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2200      	movs	r2, #0
 800371a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2200      	movs	r2, #0
 8003720:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	2200      	movs	r2, #0
 8003726:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003728:	68b9      	ldr	r1, [r7, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	3206      	adds	r2, #6
 8003730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	3301      	adds	r3, #1
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2b03      	cmp	r3, #3
 800373e:	d9de      	bls.n	80036fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	f241 132c 	movw	r3, #4396	; 0x112c
 800374e:	4413      	add	r3, r2
 8003750:	2203      	movs	r2, #3
 8003752:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68d9      	ldr	r1, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	f241 1314 	movw	r3, #4372	; 0x1114
 8003760:	4413      	add	r3, r2
 8003762:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003770:	601a      	str	r2, [r3, #0]
}
 8003772:	bf00      	nop
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800377e:	b480      	push	{r7}
 8003780:	b085      	sub	sp, #20
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	e024      	b.n	80037d6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6919      	ldr	r1, [r3, #16]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4613      	mov	r3, r2
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	4413      	add	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	440b      	add	r3, r1
 800379c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2200      	movs	r2, #0
 80037a8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2200      	movs	r2, #0
 80037ae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2200      	movs	r2, #0
 80037b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	2200      	movs	r2, #0
 80037ba:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2200      	movs	r2, #0
 80037c0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	3310      	adds	r3, #16
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	3301      	adds	r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d9d7      	bls.n	800378c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	f241 1330 	movw	r3, #4400	; 0x1130
 8003802:	4413      	add	r3, r2
 8003804:	2203      	movs	r2, #3
 8003806:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6919      	ldr	r1, [r3, #16]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	f241 131c 	movw	r3, #4380	; 0x111c
 8003814:	4413      	add	r3, r2
 8003816:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	f241 1328 	movw	r3, #4392	; 0x1128
 8003828:	4413      	add	r3, r2
 800382a:	6019      	str	r1, [r3, #0]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003838:	b480      	push	{r7}
 800383a:	b08d      	sub	sp, #52	; 0x34
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	3318      	adds	r3, #24
 8003848:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003856:	2300      	movs	r3, #0
 8003858:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003862:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800386a:	2300      	movs	r3, #0
 800386c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003876:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800387a:	d007      	beq.n	800388c <ETH_Prepare_Tx_Descriptors+0x54>
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	3304      	adds	r3, #4
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	4413      	add	r3, r2
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800388c:	2302      	movs	r3, #2
 800388e:	e24a      	b.n	8003d26 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d044      	beq.n	8003926 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	68da      	ldr	r2, [r3, #12]
 80038a0:	4b72      	ldr	r3, [pc, #456]	; (8003a6c <ETH_Prepare_Tx_Descriptors+0x234>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038a8:	431a      	orrs	r2, r3
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80038c8:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d027      	beq.n	8003926 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e0:	041b      	lsls	r3, r3, #16
 80038e2:	431a      	orrs	r2, r3
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	431a      	orrs	r2, r3
 8003902:	6a3b      	ldr	r3, [r7, #32]
 8003904:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003914:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003924:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00e      	beq.n	8003950 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	689a      	ldr	r2, [r3, #8]
 8003936:	4b4e      	ldr	r3, [pc, #312]	; (8003a70 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003938:	4013      	ands	r3, r2
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	6992      	ldr	r2, [r2, #24]
 800393e:	431a      	orrs	r2, r3
 8003940:	6a3b      	ldr	r3, [r7, #32]
 8003942:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d105      	bne.n	8003968 <ETH_Prepare_Tx_Descriptors+0x130>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	d030      	beq.n	80039ca <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003982:	3301      	adds	r3, #1
 8003984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003988:	2b03      	cmp	r3, #3
 800398a:	d902      	bls.n	8003992 <ETH_Prepare_Tx_Descriptors+0x15a>
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398e:	3b04      	subs	r3, #4
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800399a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	3301      	adds	r3, #1
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039ae:	d10c      	bne.n	80039ca <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039b8:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80039c6:	2302      	movs	r3, #2
 80039c8:	e1ad      	b.n	8003d26 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	3301      	adds	r3, #1
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	689a      	ldr	r2, [r3, #8]
 80039de:	4b24      	ldr	r3, [pc, #144]	; (8003a70 <ETH_Prepare_Tx_Descriptors+0x238>)
 80039e0:	4013      	ands	r3, r2
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	6852      	ldr	r2, [r2, #4]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d012      	beq.n	8003a1a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	6a3b      	ldr	r3, [r7, #32]
 8003a02:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	4b1a      	ldr	r3, [pc, #104]	; (8003a74 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	69fa      	ldr	r2, [r7, #28]
 8003a0e:	6852      	ldr	r2, [r2, #4]
 8003a10:	0412      	lsls	r2, r2, #16
 8003a12:	431a      	orrs	r2, r3
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	e008      	b.n	8003a2c <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	4b13      	ldr	r3, [pc, #76]	; (8003a74 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	6a3a      	ldr	r2, [r7, #32]
 8003a2a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d021      	beq.n	8003a7c <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	6a1b      	ldr	r3, [r3, #32]
 8003a44:	04db      	lsls	r3, r3, #19
 8003a46:	431a      	orrs	r2, r3
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003a4c:	6a3b      	ldr	r3, [r7, #32]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003a52:	4013      	ands	r3, r2
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	69d2      	ldr	r2, [r2, #28]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	e02e      	b.n	8003aca <ETH_Prepare_Tx_Descriptors+0x292>
 8003a6c:	ffff0000 	.word	0xffff0000
 8003a70:	ffffc000 	.word	0xffffc000
 8003a74:	c000ffff 	.word	0xc000ffff
 8003a78:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003a7c:	6a3b      	ldr	r3, [r7, #32]
 8003a7e:	68da      	ldr	r2, [r3, #12]
 8003a80:	4b93      	ldr	r3, [pc, #588]	; (8003cd0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	6852      	ldr	r2, [r2, #4]
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	691b      	ldr	r3, [r3, #16]
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d008      	beq.n	8003ae8 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003ad6:	6a3b      	ldr	r3, [r7, #32]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 80cb 	beq.w	8003cb0 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003b2c:	e0c0      	b.n	8003cb0 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d902      	bls.n	8003b4c <ETH_Prepare_Tx_Descriptors+0x314>
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	3b04      	subs	r3, #4
 8003b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b54:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b6e:	d007      	beq.n	8003b80 <ETH_Prepare_Tx_Descriptors+0x348>
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	3304      	adds	r3, #4
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d026      	beq.n	8003bce <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b8c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
 8003b92:	e016      	b.n	8003bc2 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003b94:	6a3b      	ldr	r3, [r7, #32]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba8:	2b03      	cmp	r3, #3
 8003baa:	d902      	bls.n	8003bb2 <ETH_Prepare_Tx_Descriptors+0x37a>
 8003bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bae:	3b04      	subs	r3, #4
 8003bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bba:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d3e4      	bcc.n	8003b94 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e0ab      	b.n	8003d26 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8003bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	461a      	mov	r2, r3
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	4b3a      	ldr	r3, [pc, #232]	; (8003cd4 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	6852      	ldr	r2, [r2, #4]
 8003bf0:	431a      	orrs	r2, r3
 8003bf2:	6a3b      	ldr	r3, [r7, #32]
 8003bf4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d012      	beq.n	8003c24 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	4b31      	ldr	r3, [pc, #196]	; (8003cd8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	6852      	ldr	r2, [r2, #4]
 8003c1a:	0412      	lsls	r2, r2, #16
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	6a3b      	ldr	r3, [r7, #32]
 8003c20:	609a      	str	r2, [r3, #8]
 8003c22:	e008      	b.n	8003c36 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	2200      	movs	r2, #0
 8003c28:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	689a      	ldr	r2, [r3, #8]
 8003c2e:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003c30:	4013      	ands	r3, r2
 8003c32:	6a3a      	ldr	r2, [r7, #32]
 8003c34:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0310 	and.w	r3, r3, #16
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00f      	beq.n	8003c62 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	4b25      	ldr	r3, [pc, #148]	; (8003cdc <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003c48:	4013      	ands	r3, r2
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	69d2      	ldr	r2, [r2, #28]
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	6a3b      	ldr	r3, [r7, #32]
 8003c52:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c5c:	6a3b      	ldr	r3, [r7, #32]
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	e017      	b.n	8003c92 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	4b1a      	ldr	r3, [pc, #104]	; (8003cd0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	6852      	ldr	r2, [r2, #4]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d008      	beq.n	8003c92 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	68db      	ldr	r3, [r3, #12]
 8003c84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	3301      	adds	r3, #1
 8003c96:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003c98:	6a3b      	ldr	r3, [r7, #32]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003cac:	6a3b      	ldr	r3, [r7, #32]
 8003cae:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f47f af3a 	bne.w	8003b2e <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d00f      	beq.n	8003ce0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	609a      	str	r2, [r3, #8]
 8003ccc:	e00e      	b.n	8003cec <ETH_Prepare_Tx_Descriptors+0x4b4>
 8003cce:	bf00      	nop
 8003cd0:	ffff8000 	.word	0xffff8000
 8003cd4:	ffffc000 	.word	0xffffc000
 8003cd8:	c000ffff 	.word	0xc000ffff
 8003cdc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ce8:	6a3b      	ldr	r3, [r7, #32]
 8003cea:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cfc:	6979      	ldr	r1, [r7, #20]
 8003cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d00:	3304      	adds	r3, #4
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d0c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d0e:	b672      	cpsid	i
}
 8003d10:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	4413      	add	r3, r2
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003d20:	b662      	cpsie	i
}
 8003d22:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3734      	adds	r7, #52	; 0x34
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop

08003d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b089      	sub	sp, #36	; 0x24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d42:	4b89      	ldr	r3, [pc, #548]	; (8003f68 <HAL_GPIO_Init+0x234>)
 8003d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d46:	e194      	b.n	8004072 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	fa01 f303 	lsl.w	r3, r1, r3
 8003d54:	4013      	ands	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 8186 	beq.w	800406c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d00b      	beq.n	8003d80 <HAL_GPIO_Init+0x4c>
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d007      	beq.n	8003d80 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d74:	2b11      	cmp	r3, #17
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b12      	cmp	r3, #18
 8003d7e:	d130      	bne.n	8003de2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	2203      	movs	r2, #3
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003db6:	2201      	movs	r2, #1
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43db      	mvns	r3, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	091b      	lsrs	r3, r3, #4
 8003dcc:	f003 0201 	and.w	r2, r3, #1
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	2203      	movs	r2, #3
 8003dee:	fa02 f303 	lsl.w	r3, r2, r3
 8003df2:	43db      	mvns	r3, r3
 8003df4:	69ba      	ldr	r2, [r7, #24]
 8003df6:	4013      	ands	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_Init+0xee>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b12      	cmp	r3, #18
 8003e20:	d123      	bne.n	8003e6a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	08da      	lsrs	r2, r3, #3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	3208      	adds	r2, #8
 8003e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	220f      	movs	r2, #15
 8003e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	4013      	ands	r3, r2
 8003e44:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0307 	and.w	r3, r3, #7
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	fa02 f303 	lsl.w	r3, r2, r3
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	08da      	lsrs	r2, r3, #3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3208      	adds	r2, #8
 8003e64:	69b9      	ldr	r1, [r7, #24]
 8003e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	2203      	movs	r2, #3
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43db      	mvns	r3, r3
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f003 0203 	and.w	r2, r3, #3
 8003e8a:	69fb      	ldr	r3, [r7, #28]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e92:	69ba      	ldr	r2, [r7, #24]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 80e0 	beq.w	800406c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eac:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <HAL_GPIO_Init+0x238>)
 8003eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eb2:	4a2e      	ldr	r2, [pc, #184]	; (8003f6c <HAL_GPIO_Init+0x238>)
 8003eb4:	f043 0302 	orr.w	r3, r3, #2
 8003eb8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_GPIO_Init+0x238>)
 8003ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eca:	4a29      	ldr	r2, [pc, #164]	; (8003f70 <HAL_GPIO_Init+0x23c>)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	089b      	lsrs	r3, r3, #2
 8003ed0:	3302      	adds	r3, #2
 8003ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	220f      	movs	r2, #15
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a20      	ldr	r2, [pc, #128]	; (8003f74 <HAL_GPIO_Init+0x240>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d052      	beq.n	8003f9c <HAL_GPIO_Init+0x268>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1f      	ldr	r2, [pc, #124]	; (8003f78 <HAL_GPIO_Init+0x244>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d031      	beq.n	8003f62 <HAL_GPIO_Init+0x22e>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a1e      	ldr	r2, [pc, #120]	; (8003f7c <HAL_GPIO_Init+0x248>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d02b      	beq.n	8003f5e <HAL_GPIO_Init+0x22a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1d      	ldr	r2, [pc, #116]	; (8003f80 <HAL_GPIO_Init+0x24c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d025      	beq.n	8003f5a <HAL_GPIO_Init+0x226>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1c      	ldr	r2, [pc, #112]	; (8003f84 <HAL_GPIO_Init+0x250>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01f      	beq.n	8003f56 <HAL_GPIO_Init+0x222>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a1b      	ldr	r2, [pc, #108]	; (8003f88 <HAL_GPIO_Init+0x254>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d019      	beq.n	8003f52 <HAL_GPIO_Init+0x21e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a1a      	ldr	r2, [pc, #104]	; (8003f8c <HAL_GPIO_Init+0x258>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_GPIO_Init+0x21a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a19      	ldr	r2, [pc, #100]	; (8003f90 <HAL_GPIO_Init+0x25c>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d00d      	beq.n	8003f4a <HAL_GPIO_Init+0x216>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <HAL_GPIO_Init+0x260>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d007      	beq.n	8003f46 <HAL_GPIO_Init+0x212>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a17      	ldr	r2, [pc, #92]	; (8003f98 <HAL_GPIO_Init+0x264>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d101      	bne.n	8003f42 <HAL_GPIO_Init+0x20e>
 8003f3e:	2309      	movs	r3, #9
 8003f40:	e02d      	b.n	8003f9e <HAL_GPIO_Init+0x26a>
 8003f42:	230a      	movs	r3, #10
 8003f44:	e02b      	b.n	8003f9e <HAL_GPIO_Init+0x26a>
 8003f46:	2308      	movs	r3, #8
 8003f48:	e029      	b.n	8003f9e <HAL_GPIO_Init+0x26a>
 8003f4a:	2307      	movs	r3, #7
 8003f4c:	e027      	b.n	8003f9e <HAL_GPIO_Init+0x26a>
 8003f4e:	2306      	movs	r3, #6
 8003f50:	e025      	b.n	8003f9e <HAL_GPIO_Init+0x26a>
 8003f52:	2305      	movs	r3, #5
 8003f54:	e023      	b.n	8003f9e <HAL_GPIO_Init+0x26a>
 8003f56:	2304      	movs	r3, #4
 8003f58:	e021      	b.n	8003f9e <HAL_GPIO_Init+0x26a>
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e01f      	b.n	8003f9e <HAL_GPIO_Init+0x26a>
 8003f5e:	2302      	movs	r3, #2
 8003f60:	e01d      	b.n	8003f9e <HAL_GPIO_Init+0x26a>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e01b      	b.n	8003f9e <HAL_GPIO_Init+0x26a>
 8003f66:	bf00      	nop
 8003f68:	58000080 	.word	0x58000080
 8003f6c:	58024400 	.word	0x58024400
 8003f70:	58000400 	.word	0x58000400
 8003f74:	58020000 	.word	0x58020000
 8003f78:	58020400 	.word	0x58020400
 8003f7c:	58020800 	.word	0x58020800
 8003f80:	58020c00 	.word	0x58020c00
 8003f84:	58021000 	.word	0x58021000
 8003f88:	58021400 	.word	0x58021400
 8003f8c:	58021800 	.word	0x58021800
 8003f90:	58021c00 	.word	0x58021c00
 8003f94:	58022000 	.word	0x58022000
 8003f98:	58022400 	.word	0x58022400
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	69fa      	ldr	r2, [r7, #28]
 8003fa0:	f002 0203 	and.w	r2, r2, #3
 8003fa4:	0092      	lsls	r2, r2, #2
 8003fa6:	4093      	lsls	r3, r2
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fae:	4938      	ldr	r1, [pc, #224]	; (8004090 <HAL_GPIO_Init+0x35c>)
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	3302      	adds	r3, #2
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d003      	beq.n	8003fe0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	4313      	orrs	r3, r2
 8004008:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	43db      	mvns	r3, r3
 800401c:	69ba      	ldr	r2, [r7, #24]
 800401e:	4013      	ands	r3, r2
 8004020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800402e:	69ba      	ldr	r2, [r7, #24]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004036:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800403e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	43db      	mvns	r3, r3
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4013      	ands	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	3301      	adds	r3, #1
 8004070:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	f47f ae63 	bne.w	8003d48 <HAL_GPIO_Init+0x14>
  }
}
 8004082:	bf00      	nop
 8004084:	bf00      	nop
 8004086:	3724      	adds	r7, #36	; 0x24
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	58000400 	.word	0x58000400

08004094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
 80040a0:	4613      	mov	r3, r2
 80040a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040a4:	787b      	ldrb	r3, [r7, #1]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040aa:	887a      	ldrh	r2, [r7, #2]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80040b0:	e003      	b.n	80040ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040b2:	887b      	ldrh	r3, [r7, #2]
 80040b4:	041a      	lsls	r2, r3, #16
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	619a      	str	r2, [r3, #24]
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
	...

080040c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <HAL_PWREx_ConfigSupply+0x70>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d00a      	beq.n	80040f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040dc:	4b16      	ldr	r3, [pc, #88]	; (8004138 <HAL_PWREx_ConfigSupply+0x70>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f003 0307 	and.w	r3, r3, #7
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d001      	beq.n	80040ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e01f      	b.n	800412e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e01d      	b.n	800412e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80040f2:	4b11      	ldr	r3, [pc, #68]	; (8004138 <HAL_PWREx_ConfigSupply+0x70>)
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	f023 0207 	bic.w	r2, r3, #7
 80040fa:	490f      	ldr	r1, [pc, #60]	; (8004138 <HAL_PWREx_ConfigSupply+0x70>)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004102:	f7fd fde3 	bl	8001ccc <HAL_GetTick>
 8004106:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004108:	e009      	b.n	800411e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800410a:	f7fd fddf 	bl	8001ccc <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004118:	d901      	bls.n	800411e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e007      	b.n	800412e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800411e:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_PWREx_ConfigSupply+0x70>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004126:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800412a:	d1ee      	bne.n	800410a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	58024800 	.word	0x58024800

0800413c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b08c      	sub	sp, #48	; 0x30
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e3ff      	b.n	800494e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8087 	beq.w	800426a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800415c:	4b99      	ldr	r3, [pc, #612]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004164:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004166:	4b97      	ldr	r3, [pc, #604]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416e:	2b10      	cmp	r3, #16
 8004170:	d007      	beq.n	8004182 <HAL_RCC_OscConfig+0x46>
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	2b18      	cmp	r3, #24
 8004176:	d110      	bne.n	800419a <HAL_RCC_OscConfig+0x5e>
 8004178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d10b      	bne.n	800419a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004182:	4b90      	ldr	r3, [pc, #576]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d06c      	beq.n	8004268 <HAL_RCC_OscConfig+0x12c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d168      	bne.n	8004268 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e3d9      	b.n	800494e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x76>
 80041a4:	4b87      	ldr	r3, [pc, #540]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a86      	ldr	r2, [pc, #536]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80041aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041ae:	6013      	str	r3, [r2, #0]
 80041b0:	e02e      	b.n	8004210 <HAL_RCC_OscConfig+0xd4>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x98>
 80041ba:	4b82      	ldr	r3, [pc, #520]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a81      	ldr	r2, [pc, #516]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80041c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b7f      	ldr	r3, [pc, #508]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a7e      	ldr	r2, [pc, #504]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80041cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e01d      	b.n	8004210 <HAL_RCC_OscConfig+0xd4>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041dc:	d10c      	bne.n	80041f8 <HAL_RCC_OscConfig+0xbc>
 80041de:	4b79      	ldr	r3, [pc, #484]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a78      	ldr	r2, [pc, #480]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80041e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	4b76      	ldr	r3, [pc, #472]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a75      	ldr	r2, [pc, #468]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80041f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	e00b      	b.n	8004210 <HAL_RCC_OscConfig+0xd4>
 80041f8:	4b72      	ldr	r3, [pc, #456]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a71      	ldr	r2, [pc, #452]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80041fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004202:	6013      	str	r3, [r2, #0]
 8004204:	4b6f      	ldr	r3, [pc, #444]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6e      	ldr	r2, [pc, #440]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 800420a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800420e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d013      	beq.n	8004240 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004218:	f7fd fd58 	bl	8001ccc <HAL_GetTick>
 800421c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004220:	f7fd fd54 	bl	8001ccc <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b64      	cmp	r3, #100	; 0x64
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e38d      	b.n	800494e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004232:	4b64      	ldr	r3, [pc, #400]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0xe4>
 800423e:	e014      	b.n	800426a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fd fd44 	bl	8001ccc <HAL_GetTick>
 8004244:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004248:	f7fd fd40 	bl	8001ccc <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b64      	cmp	r3, #100	; 0x64
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e379      	b.n	800494e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800425a:	4b5a      	ldr	r3, [pc, #360]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x10c>
 8004266:	e000      	b.n	800426a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 80ae 	beq.w	80043d4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004278:	4b52      	ldr	r3, [pc, #328]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004280:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004282:	4b50      	ldr	r3, [pc, #320]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <HAL_RCC_OscConfig+0x162>
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	2b18      	cmp	r3, #24
 8004292:	d13a      	bne.n	800430a <HAL_RCC_OscConfig+0x1ce>
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d135      	bne.n	800430a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800429e:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0304 	and.w	r3, r3, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x17a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e34b      	b.n	800494e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b6:	f7fd fd15 	bl	8001ce4 <HAL_GetREVID>
 80042ba:	4603      	mov	r3, r0
 80042bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d817      	bhi.n	80042f4 <HAL_RCC_OscConfig+0x1b8>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d108      	bne.n	80042de <HAL_RCC_OscConfig+0x1a2>
 80042cc:	4b3d      	ldr	r3, [pc, #244]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042d4:	4a3b      	ldr	r2, [pc, #236]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80042d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042da:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042dc:	e07a      	b.n	80043d4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042de:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	031b      	lsls	r3, r3, #12
 80042ec:	4935      	ldr	r1, [pc, #212]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f2:	e06f      	b.n	80043d4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f4:	4b33      	ldr	r3, [pc, #204]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	061b      	lsls	r3, r3, #24
 8004302:	4930      	ldr	r1, [pc, #192]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004304:	4313      	orrs	r3, r2
 8004306:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004308:	e064      	b.n	80043d4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d045      	beq.n	800439e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004312:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 0219 	bic.w	r2, r3, #25
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	4929      	ldr	r1, [pc, #164]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004320:	4313      	orrs	r3, r2
 8004322:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004324:	f7fd fcd2 	bl	8001ccc <HAL_GetTick>
 8004328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432c:	f7fd fcce 	bl	8001ccc <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e307      	b.n	800494e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800433e:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d0f0      	beq.n	800432c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800434a:	f7fd fccb 	bl	8001ce4 <HAL_GetREVID>
 800434e:	4603      	mov	r3, r0
 8004350:	f241 0203 	movw	r2, #4099	; 0x1003
 8004354:	4293      	cmp	r3, r2
 8004356:	d817      	bhi.n	8004388 <HAL_RCC_OscConfig+0x24c>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b40      	cmp	r3, #64	; 0x40
 800435e:	d108      	bne.n	8004372 <HAL_RCC_OscConfig+0x236>
 8004360:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004368:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 800436a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800436e:	6053      	str	r3, [r2, #4]
 8004370:	e030      	b.n	80043d4 <HAL_RCC_OscConfig+0x298>
 8004372:	4b14      	ldr	r3, [pc, #80]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	031b      	lsls	r3, r3, #12
 8004380:	4910      	ldr	r1, [pc, #64]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004382:	4313      	orrs	r3, r2
 8004384:	604b      	str	r3, [r1, #4]
 8004386:	e025      	b.n	80043d4 <HAL_RCC_OscConfig+0x298>
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	061b      	lsls	r3, r3, #24
 8004396:	490b      	ldr	r1, [pc, #44]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 8004398:	4313      	orrs	r3, r2
 800439a:	604b      	str	r3, [r1, #4]
 800439c:	e01a      	b.n	80043d4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a08      	ldr	r2, [pc, #32]	; (80043c4 <HAL_RCC_OscConfig+0x288>)
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043aa:	f7fd fc8f 	bl	8001ccc <HAL_GetTick>
 80043ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043b0:	e00a      	b.n	80043c8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043b2:	f7fd fc8b 	bl	8001ccc <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d903      	bls.n	80043c8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e2c4      	b.n	800494e <HAL_RCC_OscConfig+0x812>
 80043c4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043c8:	4ba4      	ldr	r3, [pc, #656]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0304 	and.w	r3, r3, #4
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1ee      	bne.n	80043b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0310 	and.w	r3, r3, #16
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80a9 	beq.w	8004534 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043e2:	4b9e      	ldr	r3, [pc, #632]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043ea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043ec:	4b9b      	ldr	r3, [pc, #620]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80043ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d007      	beq.n	8004408 <HAL_RCC_OscConfig+0x2cc>
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b18      	cmp	r3, #24
 80043fc:	d13a      	bne.n	8004474 <HAL_RCC_OscConfig+0x338>
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	2b01      	cmp	r3, #1
 8004406:	d135      	bne.n	8004474 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004408:	4b94      	ldr	r3, [pc, #592]	; (800465c <HAL_RCC_OscConfig+0x520>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004410:	2b00      	cmp	r3, #0
 8004412:	d005      	beq.n	8004420 <HAL_RCC_OscConfig+0x2e4>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	69db      	ldr	r3, [r3, #28]
 8004418:	2b80      	cmp	r3, #128	; 0x80
 800441a:	d001      	beq.n	8004420 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e296      	b.n	800494e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004420:	f7fd fc60 	bl	8001ce4 <HAL_GetREVID>
 8004424:	4603      	mov	r3, r0
 8004426:	f241 0203 	movw	r2, #4099	; 0x1003
 800442a:	4293      	cmp	r3, r2
 800442c:	d817      	bhi.n	800445e <HAL_RCC_OscConfig+0x322>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	2b20      	cmp	r3, #32
 8004434:	d108      	bne.n	8004448 <HAL_RCC_OscConfig+0x30c>
 8004436:	4b89      	ldr	r3, [pc, #548]	; (800465c <HAL_RCC_OscConfig+0x520>)
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800443e:	4a87      	ldr	r2, [pc, #540]	; (800465c <HAL_RCC_OscConfig+0x520>)
 8004440:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004444:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004446:	e075      	b.n	8004534 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004448:	4b84      	ldr	r3, [pc, #528]	; (800465c <HAL_RCC_OscConfig+0x520>)
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	069b      	lsls	r3, r3, #26
 8004456:	4981      	ldr	r1, [pc, #516]	; (800465c <HAL_RCC_OscConfig+0x520>)
 8004458:	4313      	orrs	r3, r2
 800445a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800445c:	e06a      	b.n	8004534 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800445e:	4b7f      	ldr	r3, [pc, #508]	; (800465c <HAL_RCC_OscConfig+0x520>)
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	061b      	lsls	r3, r3, #24
 800446c:	497b      	ldr	r1, [pc, #492]	; (800465c <HAL_RCC_OscConfig+0x520>)
 800446e:	4313      	orrs	r3, r2
 8004470:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004472:	e05f      	b.n	8004534 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d042      	beq.n	8004502 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800447c:	4b77      	ldr	r3, [pc, #476]	; (800465c <HAL_RCC_OscConfig+0x520>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a76      	ldr	r2, [pc, #472]	; (800465c <HAL_RCC_OscConfig+0x520>)
 8004482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004488:	f7fd fc20 	bl	8001ccc <HAL_GetTick>
 800448c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800448e:	e008      	b.n	80044a2 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004490:	f7fd fc1c 	bl	8001ccc <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e255      	b.n	800494e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80044a2:	4b6e      	ldr	r3, [pc, #440]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80044ae:	f7fd fc19 	bl	8001ce4 <HAL_GetREVID>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d817      	bhi.n	80044ec <HAL_RCC_OscConfig+0x3b0>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	2b20      	cmp	r3, #32
 80044c2:	d108      	bne.n	80044d6 <HAL_RCC_OscConfig+0x39a>
 80044c4:	4b65      	ldr	r3, [pc, #404]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044cc:	4a63      	ldr	r2, [pc, #396]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80044ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044d2:	6053      	str	r3, [r2, #4]
 80044d4:	e02e      	b.n	8004534 <HAL_RCC_OscConfig+0x3f8>
 80044d6:	4b61      	ldr	r3, [pc, #388]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	069b      	lsls	r3, r3, #26
 80044e4:	495d      	ldr	r1, [pc, #372]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
 80044ea:	e023      	b.n	8004534 <HAL_RCC_OscConfig+0x3f8>
 80044ec:	4b5b      	ldr	r3, [pc, #364]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	061b      	lsls	r3, r3, #24
 80044fa:	4958      	ldr	r1, [pc, #352]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60cb      	str	r3, [r1, #12]
 8004500:	e018      	b.n	8004534 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004502:	4b56      	ldr	r3, [pc, #344]	; (800465c <HAL_RCC_OscConfig+0x520>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a55      	ldr	r2, [pc, #340]	; (800465c <HAL_RCC_OscConfig+0x520>)
 8004508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800450c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fd fbdd 	bl	8001ccc <HAL_GetTick>
 8004512:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004516:	f7fd fbd9 	bl	8001ccc <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e212      	b.n	800494e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004528:	4b4c      	ldr	r3, [pc, #304]	; (800465c <HAL_RCC_OscConfig+0x520>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1f0      	bne.n	8004516 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d036      	beq.n	80045ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d019      	beq.n	800457c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004548:	4b44      	ldr	r3, [pc, #272]	; (800465c <HAL_RCC_OscConfig+0x520>)
 800454a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454c:	4a43      	ldr	r2, [pc, #268]	; (800465c <HAL_RCC_OscConfig+0x520>)
 800454e:	f043 0301 	orr.w	r3, r3, #1
 8004552:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004554:	f7fd fbba 	bl	8001ccc <HAL_GetTick>
 8004558:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800455c:	f7fd fbb6 	bl	8001ccc <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e1ef      	b.n	800494e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800456e:	4b3b      	ldr	r3, [pc, #236]	; (800465c <HAL_RCC_OscConfig+0x520>)
 8004570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d0f0      	beq.n	800455c <HAL_RCC_OscConfig+0x420>
 800457a:	e018      	b.n	80045ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800457c:	4b37      	ldr	r3, [pc, #220]	; (800465c <HAL_RCC_OscConfig+0x520>)
 800457e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004580:	4a36      	ldr	r2, [pc, #216]	; (800465c <HAL_RCC_OscConfig+0x520>)
 8004582:	f023 0301 	bic.w	r3, r3, #1
 8004586:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004588:	f7fd fba0 	bl	8001ccc <HAL_GetTick>
 800458c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004590:	f7fd fb9c 	bl	8001ccc <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e1d5      	b.n	800494e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045a2:	4b2e      	ldr	r3, [pc, #184]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80045a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1f0      	bne.n	8004590 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0320 	and.w	r3, r3, #32
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d036      	beq.n	8004628 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d019      	beq.n	80045f6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045c2:	4b26      	ldr	r3, [pc, #152]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a25      	ldr	r2, [pc, #148]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80045c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045cc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045ce:	f7fd fb7d 	bl	8001ccc <HAL_GetTick>
 80045d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80045d6:	f7fd fb79 	bl	8001ccc <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e1b2      	b.n	800494e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045e8:	4b1c      	ldr	r3, [pc, #112]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0f0      	beq.n	80045d6 <HAL_RCC_OscConfig+0x49a>
 80045f4:	e018      	b.n	8004628 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045f6:	4b19      	ldr	r3, [pc, #100]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a18      	ldr	r2, [pc, #96]	; (800465c <HAL_RCC_OscConfig+0x520>)
 80045fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004600:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004602:	f7fd fb63 	bl	8001ccc <HAL_GetTick>
 8004606:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004608:	e008      	b.n	800461c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800460a:	f7fd fb5f 	bl	8001ccc <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	2b02      	cmp	r3, #2
 8004616:	d901      	bls.n	800461c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e198      	b.n	800494e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800461c:	4b0f      	ldr	r3, [pc, #60]	; (800465c <HAL_RCC_OscConfig+0x520>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1f0      	bne.n	800460a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 8085 	beq.w	8004740 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004636:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <HAL_RCC_OscConfig+0x524>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a09      	ldr	r2, [pc, #36]	; (8004660 <HAL_RCC_OscConfig+0x524>)
 800463c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004640:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004642:	f7fd fb43 	bl	8001ccc <HAL_GetTick>
 8004646:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004648:	e00c      	b.n	8004664 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800464a:	f7fd fb3f 	bl	8001ccc <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b64      	cmp	r3, #100	; 0x64
 8004656:	d905      	bls.n	8004664 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e178      	b.n	800494e <HAL_RCC_OscConfig+0x812>
 800465c:	58024400 	.word	0x58024400
 8004660:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004664:	4b96      	ldr	r3, [pc, #600]	; (80048c0 <HAL_RCC_OscConfig+0x784>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0ec      	beq.n	800464a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d106      	bne.n	8004686 <HAL_RCC_OscConfig+0x54a>
 8004678:	4b92      	ldr	r3, [pc, #584]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800467a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467c:	4a91      	ldr	r2, [pc, #580]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800467e:	f043 0301 	orr.w	r3, r3, #1
 8004682:	6713      	str	r3, [r2, #112]	; 0x70
 8004684:	e02d      	b.n	80046e2 <HAL_RCC_OscConfig+0x5a6>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10c      	bne.n	80046a8 <HAL_RCC_OscConfig+0x56c>
 800468e:	4b8d      	ldr	r3, [pc, #564]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	4a8c      	ldr	r2, [pc, #560]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	6713      	str	r3, [r2, #112]	; 0x70
 800469a:	4b8a      	ldr	r3, [pc, #552]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a89      	ldr	r2, [pc, #548]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80046a0:	f023 0304 	bic.w	r3, r3, #4
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
 80046a6:	e01c      	b.n	80046e2 <HAL_RCC_OscConfig+0x5a6>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	2b05      	cmp	r3, #5
 80046ae:	d10c      	bne.n	80046ca <HAL_RCC_OscConfig+0x58e>
 80046b0:	4b84      	ldr	r3, [pc, #528]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	4a83      	ldr	r2, [pc, #524]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	6713      	str	r3, [r2, #112]	; 0x70
 80046bc:	4b81      	ldr	r3, [pc, #516]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80046be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c0:	4a80      	ldr	r2, [pc, #512]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	6713      	str	r3, [r2, #112]	; 0x70
 80046c8:	e00b      	b.n	80046e2 <HAL_RCC_OscConfig+0x5a6>
 80046ca:	4b7e      	ldr	r3, [pc, #504]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	4a7d      	ldr	r2, [pc, #500]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80046d0:	f023 0301 	bic.w	r3, r3, #1
 80046d4:	6713      	str	r3, [r2, #112]	; 0x70
 80046d6:	4b7b      	ldr	r3, [pc, #492]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046da:	4a7a      	ldr	r2, [pc, #488]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80046dc:	f023 0304 	bic.w	r3, r3, #4
 80046e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d015      	beq.n	8004716 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ea:	f7fd faef 	bl	8001ccc <HAL_GetTick>
 80046ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046f0:	e00a      	b.n	8004708 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f2:	f7fd faeb 	bl	8001ccc <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004700:	4293      	cmp	r3, r2
 8004702:	d901      	bls.n	8004708 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e122      	b.n	800494e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004708:	4b6e      	ldr	r3, [pc, #440]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800470a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470c:	f003 0302 	and.w	r3, r3, #2
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0ee      	beq.n	80046f2 <HAL_RCC_OscConfig+0x5b6>
 8004714:	e014      	b.n	8004740 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004716:	f7fd fad9 	bl	8001ccc <HAL_GetTick>
 800471a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800471c:	e00a      	b.n	8004734 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800471e:	f7fd fad5 	bl	8001ccc <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	f241 3288 	movw	r2, #5000	; 0x1388
 800472c:	4293      	cmp	r3, r2
 800472e:	d901      	bls.n	8004734 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004730:	2303      	movs	r3, #3
 8004732:	e10c      	b.n	800494e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004734:	4b63      	ldr	r3, [pc, #396]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1ee      	bne.n	800471e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 8101 	beq.w	800494c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800474a:	4b5e      	ldr	r3, [pc, #376]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004752:	2b18      	cmp	r3, #24
 8004754:	f000 80bc 	beq.w	80048d0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	2b02      	cmp	r3, #2
 800475e:	f040 8095 	bne.w	800488c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004762:	4b58      	ldr	r3, [pc, #352]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a57      	ldr	r2, [pc, #348]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004768:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800476c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800476e:	f7fd faad 	bl	8001ccc <HAL_GetTick>
 8004772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004774:	e008      	b.n	8004788 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004776:	f7fd faa9 	bl	8001ccc <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e0e2      	b.n	800494e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004788:	4b4e      	ldr	r3, [pc, #312]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1f0      	bne.n	8004776 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004794:	4b4b      	ldr	r3, [pc, #300]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004798:	4b4b      	ldr	r3, [pc, #300]	; (80048c8 <HAL_RCC_OscConfig+0x78c>)
 800479a:	4013      	ands	r3, r2
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80047a4:	0112      	lsls	r2, r2, #4
 80047a6:	430a      	orrs	r2, r1
 80047a8:	4946      	ldr	r1, [pc, #280]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	628b      	str	r3, [r1, #40]	; 0x28
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b2:	3b01      	subs	r3, #1
 80047b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047bc:	3b01      	subs	r3, #1
 80047be:	025b      	lsls	r3, r3, #9
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	431a      	orrs	r2, r3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	3b01      	subs	r3, #1
 80047ca:	041b      	lsls	r3, r3, #16
 80047cc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047d6:	3b01      	subs	r3, #1
 80047d8:	061b      	lsls	r3, r3, #24
 80047da:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047de:	4939      	ldr	r1, [pc, #228]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80047e4:	4b37      	ldr	r3, [pc, #220]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	4a36      	ldr	r2, [pc, #216]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047f0:	4b34      	ldr	r3, [pc, #208]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80047f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f4:	4b35      	ldr	r3, [pc, #212]	; (80048cc <HAL_RCC_OscConfig+0x790>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047fc:	00d2      	lsls	r2, r2, #3
 80047fe:	4931      	ldr	r1, [pc, #196]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004800:	4313      	orrs	r3, r2
 8004802:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004804:	4b2f      	ldr	r3, [pc, #188]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	f023 020c 	bic.w	r2, r3, #12
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	492c      	ldr	r1, [pc, #176]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004812:	4313      	orrs	r3, r2
 8004814:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004816:	4b2b      	ldr	r3, [pc, #172]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481a:	f023 0202 	bic.w	r2, r3, #2
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	4928      	ldr	r1, [pc, #160]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004824:	4313      	orrs	r3, r2
 8004826:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004828:	4b26      	ldr	r3, [pc, #152]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800482a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800482c:	4a25      	ldr	r2, [pc, #148]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800482e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004834:	4b23      	ldr	r3, [pc, #140]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	4a22      	ldr	r2, [pc, #136]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800483a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800483e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004840:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004844:	4a1f      	ldr	r2, [pc, #124]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800484a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800484c:	4b1d      	ldr	r3, [pc, #116]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	4a1c      	ldr	r2, [pc, #112]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004852:	f043 0301 	orr.w	r3, r3, #1
 8004856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004858:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800485e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004864:	f7fd fa32 	bl	8001ccc <HAL_GetTick>
 8004868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800486a:	e008      	b.n	800487e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800486c:	f7fd fa2e 	bl	8001ccc <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d901      	bls.n	800487e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	e067      	b.n	800494e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800487e:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d0f0      	beq.n	800486c <HAL_RCC_OscConfig+0x730>
 800488a:	e05f      	b.n	800494c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488c:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0c      	ldr	r2, [pc, #48]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 8004892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004898:	f7fd fa18 	bl	8001ccc <HAL_GetTick>
 800489c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800489e:	e008      	b.n	80048b2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a0:	f7fd fa14 	bl	8001ccc <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d901      	bls.n	80048b2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e04d      	b.n	800494e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048b2:	4b04      	ldr	r3, [pc, #16]	; (80048c4 <HAL_RCC_OscConfig+0x788>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1f0      	bne.n	80048a0 <HAL_RCC_OscConfig+0x764>
 80048be:	e045      	b.n	800494c <HAL_RCC_OscConfig+0x810>
 80048c0:	58024800 	.word	0x58024800
 80048c4:	58024400 	.word	0x58024400
 80048c8:	fffffc0c 	.word	0xfffffc0c
 80048cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80048d0:	4b21      	ldr	r3, [pc, #132]	; (8004958 <HAL_RCC_OscConfig+0x81c>)
 80048d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048d6:	4b20      	ldr	r3, [pc, #128]	; (8004958 <HAL_RCC_OscConfig+0x81c>)
 80048d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048da:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d031      	beq.n	8004948 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f003 0203 	and.w	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d12a      	bne.n	8004948 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d122      	bne.n	8004948 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800490e:	429a      	cmp	r2, r3
 8004910:	d11a      	bne.n	8004948 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	0a5b      	lsrs	r3, r3, #9
 8004916:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004920:	429a      	cmp	r2, r3
 8004922:	d111      	bne.n	8004948 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	0c1b      	lsrs	r3, r3, #16
 8004928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004932:	429a      	cmp	r2, r3
 8004934:	d108      	bne.n	8004948 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	0e1b      	lsrs	r3, r3, #24
 800493a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004942:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004944:	429a      	cmp	r2, r3
 8004946:	d001      	beq.n	800494c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e000      	b.n	800494e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3730      	adds	r7, #48	; 0x30
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	58024400 	.word	0x58024400

0800495c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b086      	sub	sp, #24
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d101      	bne.n	8004970 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e19c      	b.n	8004caa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004970:	4b8a      	ldr	r3, [pc, #552]	; (8004b9c <HAL_RCC_ClockConfig+0x240>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	683a      	ldr	r2, [r7, #0]
 800497a:	429a      	cmp	r2, r3
 800497c:	d910      	bls.n	80049a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497e:	4b87      	ldr	r3, [pc, #540]	; (8004b9c <HAL_RCC_ClockConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f023 020f 	bic.w	r2, r3, #15
 8004986:	4985      	ldr	r1, [pc, #532]	; (8004b9c <HAL_RCC_ClockConfig+0x240>)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	4313      	orrs	r3, r2
 800498c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800498e:	4b83      	ldr	r3, [pc, #524]	; (8004b9c <HAL_RCC_ClockConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d001      	beq.n	80049a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e184      	b.n	8004caa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0304 	and.w	r3, r3, #4
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d010      	beq.n	80049ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691a      	ldr	r2, [r3, #16]
 80049b0:	4b7b      	ldr	r3, [pc, #492]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d908      	bls.n	80049ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049bc:	4b78      	ldr	r3, [pc, #480]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	4975      	ldr	r1, [pc, #468]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0308 	and.w	r3, r3, #8
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d010      	beq.n	80049fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	4b70      	ldr	r3, [pc, #448]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 80049e0:	69db      	ldr	r3, [r3, #28]
 80049e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d908      	bls.n	80049fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049ea:	4b6d      	ldr	r3, [pc, #436]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	496a      	ldr	r1, [pc, #424]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0310 	and.w	r3, r3, #16
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d010      	beq.n	8004a2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	699a      	ldr	r2, [r3, #24]
 8004a0c:	4b64      	ldr	r3, [pc, #400]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004a0e:	69db      	ldr	r3, [r3, #28]
 8004a10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d908      	bls.n	8004a2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a18:	4b61      	ldr	r3, [pc, #388]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004a1a:	69db      	ldr	r3, [r3, #28]
 8004a1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	495e      	ldr	r1, [pc, #376]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d010      	beq.n	8004a58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	69da      	ldr	r2, [r3, #28]
 8004a3a:	4b59      	ldr	r3, [pc, #356]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d908      	bls.n	8004a58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a46:	4b56      	ldr	r3, [pc, #344]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	4953      	ldr	r1, [pc, #332]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d010      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68da      	ldr	r2, [r3, #12]
 8004a68:	4b4d      	ldr	r3, [pc, #308]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d908      	bls.n	8004a86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a74:	4b4a      	ldr	r3, [pc, #296]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	f023 020f 	bic.w	r2, r3, #15
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4947      	ldr	r1, [pc, #284]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d055      	beq.n	8004b3e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a92:	4b43      	ldr	r3, [pc, #268]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	4940      	ldr	r1, [pc, #256]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d107      	bne.n	8004abc <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004aac:	4b3c      	ldr	r3, [pc, #240]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d121      	bne.n	8004afc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	e0f6      	b.n	8004caa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d107      	bne.n	8004ad4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ac4:	4b36      	ldr	r3, [pc, #216]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d115      	bne.n	8004afc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e0ea      	b.n	8004caa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d107      	bne.n	8004aec <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004adc:	4b30      	ldr	r3, [pc, #192]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d109      	bne.n	8004afc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0de      	b.n	8004caa <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004aec:	4b2c      	ldr	r3, [pc, #176]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e0d6      	b.n	8004caa <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004afc:	4b28      	ldr	r3, [pc, #160]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	f023 0207 	bic.w	r2, r3, #7
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	4925      	ldr	r1, [pc, #148]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b0e:	f7fd f8dd 	bl	8001ccc <HAL_GetTick>
 8004b12:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b14:	e00a      	b.n	8004b2c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b16:	f7fd f8d9 	bl	8001ccc <HAL_GetTick>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e0be      	b.n	8004caa <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2c:	4b1c      	ldr	r3, [pc, #112]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d1eb      	bne.n	8004b16 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0302 	and.w	r3, r3, #2
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d010      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d208      	bcs.n	8004b6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f023 020f 	bic.w	r2, r3, #15
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	490e      	ldr	r1, [pc, #56]	; (8004ba0 <HAL_RCC_ClockConfig+0x244>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	; (8004b9c <HAL_RCC_ClockConfig+0x240>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 030f 	and.w	r3, r3, #15
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d214      	bcs.n	8004ba4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b7a:	4b08      	ldr	r3, [pc, #32]	; (8004b9c <HAL_RCC_ClockConfig+0x240>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f023 020f 	bic.w	r2, r3, #15
 8004b82:	4906      	ldr	r1, [pc, #24]	; (8004b9c <HAL_RCC_ClockConfig+0x240>)
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b8a:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <HAL_RCC_ClockConfig+0x240>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	683a      	ldr	r2, [r7, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d005      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	e086      	b.n	8004caa <HAL_RCC_ClockConfig+0x34e>
 8004b9c:	52002000 	.word	0x52002000
 8004ba0:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d010      	beq.n	8004bd2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	4b3f      	ldr	r3, [pc, #252]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d208      	bcs.n	8004bd2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bc0:	4b3c      	ldr	r3, [pc, #240]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	4939      	ldr	r1, [pc, #228]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d010      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695a      	ldr	r2, [r3, #20]
 8004be2:	4b34      	ldr	r3, [pc, #208]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d208      	bcs.n	8004c00 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bee:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	695b      	ldr	r3, [r3, #20]
 8004bfa:	492e      	ldr	r1, [pc, #184]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0310 	and.w	r3, r3, #16
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d010      	beq.n	8004c2e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	699a      	ldr	r2, [r3, #24]
 8004c10:	4b28      	ldr	r3, [pc, #160]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d208      	bcs.n	8004c2e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c1c:	4b25      	ldr	r3, [pc, #148]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	4922      	ldr	r1, [pc, #136]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d010      	beq.n	8004c5c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69da      	ldr	r2, [r3, #28]
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d208      	bcs.n	8004c5c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c4a:	4b1a      	ldr	r3, [pc, #104]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	4917      	ldr	r1, [pc, #92]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c5c:	f000 f834 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b14      	ldr	r3, [pc, #80]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	0a1b      	lsrs	r3, r3, #8
 8004c68:	f003 030f 	and.w	r3, r3, #15
 8004c6c:	4912      	ldr	r1, [pc, #72]	; (8004cb8 <HAL_RCC_ClockConfig+0x35c>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
 8004c78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c7a:	4b0e      	ldr	r3, [pc, #56]	; (8004cb4 <HAL_RCC_ClockConfig+0x358>)
 8004c7c:	699b      	ldr	r3, [r3, #24]
 8004c7e:	f003 030f 	and.w	r3, r3, #15
 8004c82:	4a0d      	ldr	r2, [pc, #52]	; (8004cb8 <HAL_RCC_ClockConfig+0x35c>)
 8004c84:	5cd3      	ldrb	r3, [r2, r3]
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c90:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <HAL_RCC_ClockConfig+0x360>)
 8004c92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c94:	4a0a      	ldr	r2, [pc, #40]	; (8004cc0 <HAL_RCC_ClockConfig+0x364>)
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004c9a:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <HAL_RCC_ClockConfig+0x368>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fc fc6c 	bl	800157c <HAL_InitTick>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3718      	adds	r7, #24
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	0801ad9c 	.word	0x0801ad9c
 8004cbc:	24000034 	.word	0x24000034
 8004cc0:	24000030 	.word	0x24000030
 8004cc4:	24000038 	.word	0x24000038

08004cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b089      	sub	sp, #36	; 0x24
 8004ccc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cce:	4bb3      	ldr	r3, [pc, #716]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cd6:	2b18      	cmp	r3, #24
 8004cd8:	f200 8155 	bhi.w	8004f86 <HAL_RCC_GetSysClockFreq+0x2be>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004d49 	.word	0x08004d49
 8004ce8:	08004f87 	.word	0x08004f87
 8004cec:	08004f87 	.word	0x08004f87
 8004cf0:	08004f87 	.word	0x08004f87
 8004cf4:	08004f87 	.word	0x08004f87
 8004cf8:	08004f87 	.word	0x08004f87
 8004cfc:	08004f87 	.word	0x08004f87
 8004d00:	08004f87 	.word	0x08004f87
 8004d04:	08004d6f 	.word	0x08004d6f
 8004d08:	08004f87 	.word	0x08004f87
 8004d0c:	08004f87 	.word	0x08004f87
 8004d10:	08004f87 	.word	0x08004f87
 8004d14:	08004f87 	.word	0x08004f87
 8004d18:	08004f87 	.word	0x08004f87
 8004d1c:	08004f87 	.word	0x08004f87
 8004d20:	08004f87 	.word	0x08004f87
 8004d24:	08004d75 	.word	0x08004d75
 8004d28:	08004f87 	.word	0x08004f87
 8004d2c:	08004f87 	.word	0x08004f87
 8004d30:	08004f87 	.word	0x08004f87
 8004d34:	08004f87 	.word	0x08004f87
 8004d38:	08004f87 	.word	0x08004f87
 8004d3c:	08004f87 	.word	0x08004f87
 8004d40:	08004f87 	.word	0x08004f87
 8004d44:	08004d7b 	.word	0x08004d7b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d48:	4b94      	ldr	r3, [pc, #592]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d009      	beq.n	8004d68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d54:	4b91      	ldr	r3, [pc, #580]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	08db      	lsrs	r3, r3, #3
 8004d5a:	f003 0303 	and.w	r3, r3, #3
 8004d5e:	4a90      	ldr	r2, [pc, #576]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d60:	fa22 f303 	lsr.w	r3, r2, r3
 8004d64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004d66:	e111      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d68:	4b8d      	ldr	r3, [pc, #564]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d6a:	61bb      	str	r3, [r7, #24]
    break;
 8004d6c:	e10e      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d6e:	4b8d      	ldr	r3, [pc, #564]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d70:	61bb      	str	r3, [r7, #24]
    break;
 8004d72:	e10b      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004d74:	4b8c      	ldr	r3, [pc, #560]	; (8004fa8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d76:	61bb      	str	r3, [r7, #24]
    break;
 8004d78:	e108      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d7a:	4b88      	ldr	r3, [pc, #544]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004d84:	4b85      	ldr	r3, [pc, #532]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d8e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d90:	4b82      	ldr	r3, [pc, #520]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004d9a:	4b80      	ldr	r3, [pc, #512]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d9e:	08db      	lsrs	r3, r3, #3
 8004da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	fb02 f303 	mul.w	r3, r2, r3
 8004daa:	ee07 3a90 	vmov	s15, r3
 8004dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004db2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 80e1 	beq.w	8004f80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	f000 8083 	beq.w	8004ecc <HAL_RCC_GetSysClockFreq+0x204>
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	f200 80a1 	bhi.w	8004f10 <HAL_RCC_GetSysClockFreq+0x248>
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_RCC_GetSysClockFreq+0x114>
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d056      	beq.n	8004e88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004dda:	e099      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ddc:	4b6f      	ldr	r3, [pc, #444]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d02d      	beq.n	8004e44 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004de8:	4b6c      	ldr	r3, [pc, #432]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	08db      	lsrs	r3, r3, #3
 8004dee:	f003 0303 	and.w	r3, r3, #3
 8004df2:	4a6b      	ldr	r2, [pc, #428]	; (8004fa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
 8004df8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	ee07 3a90 	vmov	s15, r3
 8004e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	ee07 3a90 	vmov	s15, r3
 8004e0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e12:	4b62      	ldr	r3, [pc, #392]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e1a:	ee07 3a90 	vmov	s15, r3
 8004e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e26:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004e42:	e087      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	ee07 3a90 	vmov	s15, r3
 8004e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e4e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004fb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e56:	4b51      	ldr	r3, [pc, #324]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e5e:	ee07 3a90 	vmov	s15, r3
 8004e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e66:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e6a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e86:	e065      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e92:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004fb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e9a:	4b40      	ldr	r3, [pc, #256]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea2:	ee07 3a90 	vmov	s15, r3
 8004ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eaa:	ed97 6a02 	vldr	s12, [r7, #8]
 8004eae:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004eb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ebe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eca:	e043      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	ee07 3a90 	vmov	s15, r3
 8004ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ed6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004fb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004eda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ede:	4b2f      	ldr	r3, [pc, #188]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ee6:	ee07 3a90 	vmov	s15, r3
 8004eea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ef2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ef6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004efa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004efe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f0e:	e021      	b.n	8004f54 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	ee07 3a90 	vmov	s15, r3
 8004f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f1a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004fb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f22:	4b1e      	ldr	r3, [pc, #120]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f2a:	ee07 3a90 	vmov	s15, r3
 8004f2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f32:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f36:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004fac <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f52:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004f54:	4b11      	ldr	r3, [pc, #68]	; (8004f9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	0a5b      	lsrs	r3, r3, #9
 8004f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f5e:	3301      	adds	r3, #1
 8004f60:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	ee07 3a90 	vmov	s15, r3
 8004f68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f78:	ee17 3a90 	vmov	r3, s15
 8004f7c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004f7e:	e005      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	61bb      	str	r3, [r7, #24]
    break;
 8004f84:	e002      	b.n	8004f8c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f88:	61bb      	str	r3, [r7, #24]
    break;
 8004f8a:	bf00      	nop
  }

  return sysclockfreq;
 8004f8c:	69bb      	ldr	r3, [r7, #24]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3724      	adds	r7, #36	; 0x24
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	58024400 	.word	0x58024400
 8004fa0:	03d09000 	.word	0x03d09000
 8004fa4:	003d0900 	.word	0x003d0900
 8004fa8:	017d7840 	.word	0x017d7840
 8004fac:	46000000 	.word	0x46000000
 8004fb0:	4c742400 	.word	0x4c742400
 8004fb4:	4a742400 	.word	0x4a742400
 8004fb8:	4bbebc20 	.word	0x4bbebc20

08004fbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fc2:	f7ff fe81 	bl	8004cc8 <HAL_RCC_GetSysClockFreq>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	4b10      	ldr	r3, [pc, #64]	; (800500c <HAL_RCC_GetHCLKFreq+0x50>)
 8004fca:	699b      	ldr	r3, [r3, #24]
 8004fcc:	0a1b      	lsrs	r3, r3, #8
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	490f      	ldr	r1, [pc, #60]	; (8005010 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fd4:	5ccb      	ldrb	r3, [r1, r3]
 8004fd6:	f003 031f 	and.w	r3, r3, #31
 8004fda:	fa22 f303 	lsr.w	r3, r2, r3
 8004fde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	; (800500c <HAL_RCC_GetHCLKFreq+0x50>)
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	f003 030f 	and.w	r3, r3, #15
 8004fe8:	4a09      	ldr	r2, [pc, #36]	; (8005010 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fea:	5cd3      	ldrb	r3, [r2, r3]
 8004fec:	f003 031f 	and.w	r3, r3, #31
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff6:	4a07      	ldr	r2, [pc, #28]	; (8005014 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ff8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ffa:	4a07      	ldr	r2, [pc, #28]	; (8005018 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005000:	4b04      	ldr	r3, [pc, #16]	; (8005014 <HAL_RCC_GetHCLKFreq+0x58>)
 8005002:	681b      	ldr	r3, [r3, #0]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3708      	adds	r7, #8
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	58024400 	.word	0x58024400
 8005010:	0801ad9c 	.word	0x0801ad9c
 8005014:	24000034 	.word	0x24000034
 8005018:	24000030 	.word	0x24000030

0800501c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005020:	f7ff ffcc 	bl	8004fbc <HAL_RCC_GetHCLKFreq>
 8005024:	4602      	mov	r2, r0
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	091b      	lsrs	r3, r3, #4
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	4904      	ldr	r1, [pc, #16]	; (8005044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005032:	5ccb      	ldrb	r3, [r1, r3]
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd80      	pop	{r7, pc}
 8005040:	58024400 	.word	0x58024400
 8005044:	0801ad9c 	.word	0x0801ad9c

08005048 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	223f      	movs	r2, #63	; 0x3f
 8005056:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005058:	4b1a      	ldr	r3, [pc, #104]	; (80050c4 <HAL_RCC_GetClockConfig+0x7c>)
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f003 0207 	and.w	r2, r3, #7
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005064:	4b17      	ldr	r3, [pc, #92]	; (80050c4 <HAL_RCC_GetClockConfig+0x7c>)
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005070:	4b14      	ldr	r3, [pc, #80]	; (80050c4 <HAL_RCC_GetClockConfig+0x7c>)
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	f003 020f 	and.w	r2, r3, #15
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800507c:	4b11      	ldr	r3, [pc, #68]	; (80050c4 <HAL_RCC_GetClockConfig+0x7c>)
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005088:	4b0e      	ldr	r3, [pc, #56]	; (80050c4 <HAL_RCC_GetClockConfig+0x7c>)
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005094:	4b0b      	ldr	r3, [pc, #44]	; (80050c4 <HAL_RCC_GetClockConfig+0x7c>)
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80050a0:	4b08      	ldr	r3, [pc, #32]	; (80050c4 <HAL_RCC_GetClockConfig+0x7c>)
 80050a2:	6a1b      	ldr	r3, [r3, #32]
 80050a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80050ac:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_RCC_GetClockConfig+0x80>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 020f 	and.w	r2, r3, #15
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	601a      	str	r2, [r3, #0]
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	58024400 	.word	0x58024400
 80050c8:	52002000 	.word	0x52002000

080050cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e049      	b.n	8005172 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f841 	bl	800517a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	4610      	mov	r0, r2
 800510c:	f000 f9f8 	bl	8005500 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d001      	beq.n	80051a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e04f      	b.n	8005248 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0201 	orr.w	r2, r2, #1
 80051be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a23      	ldr	r2, [pc, #140]	; (8005254 <HAL_TIM_Base_Start_IT+0xc4>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d01d      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0x76>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d018      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0x76>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1f      	ldr	r2, [pc, #124]	; (8005258 <HAL_TIM_Base_Start_IT+0xc8>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0x76>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1e      	ldr	r2, [pc, #120]	; (800525c <HAL_TIM_Base_Start_IT+0xcc>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00e      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0x76>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <HAL_TIM_Base_Start_IT+0xd0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d009      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0x76>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a1b      	ldr	r2, [pc, #108]	; (8005264 <HAL_TIM_Base_Start_IT+0xd4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d004      	beq.n	8005206 <HAL_TIM_Base_Start_IT+0x76>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a19      	ldr	r2, [pc, #100]	; (8005268 <HAL_TIM_Base_Start_IT+0xd8>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d115      	bne.n	8005232 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	4b17      	ldr	r3, [pc, #92]	; (800526c <HAL_TIM_Base_Start_IT+0xdc>)
 800520e:	4013      	ands	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2b06      	cmp	r3, #6
 8005216:	d015      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0xb4>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800521e:	d011      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005230:	e008      	b.n	8005244 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f042 0201 	orr.w	r2, r2, #1
 8005240:	601a      	str	r2, [r3, #0]
 8005242:	e000      	b.n	8005246 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005244:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	40010000 	.word	0x40010000
 8005258:	40000400 	.word	0x40000400
 800525c:	40000800 	.word	0x40000800
 8005260:	40000c00 	.word	0x40000c00
 8005264:	40010400 	.word	0x40010400
 8005268:	40001800 	.word	0x40001800
 800526c:	00010007 	.word	0x00010007

08005270 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b02      	cmp	r3, #2
 8005284:	d122      	bne.n	80052cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b02      	cmp	r3, #2
 8005292:	d11b      	bne.n	80052cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0202 	mvn.w	r2, #2
 800529c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 f905 	bl	80054c2 <HAL_TIM_IC_CaptureCallback>
 80052b8:	e005      	b.n	80052c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f8f7 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 f908 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	f003 0304 	and.w	r3, r3, #4
 80052d6:	2b04      	cmp	r3, #4
 80052d8:	d122      	bne.n	8005320 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b04      	cmp	r3, #4
 80052e6:	d11b      	bne.n	8005320 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0204 	mvn.w	r2, #4
 80052f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2202      	movs	r2, #2
 80052f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699b      	ldr	r3, [r3, #24]
 80052fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f8db 	bl	80054c2 <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f8cd 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f8de 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b08      	cmp	r3, #8
 800532c:	d122      	bne.n	8005374 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0308 	and.w	r3, r3, #8
 8005338:	2b08      	cmp	r3, #8
 800533a:	d11b      	bne.n	8005374 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f06f 0208 	mvn.w	r2, #8
 8005344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2204      	movs	r2, #4
 800534a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 0303 	and.w	r3, r3, #3
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8b1 	bl	80054c2 <HAL_TIM_IC_CaptureCallback>
 8005360:	e005      	b.n	800536e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8a3 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8b4 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0310 	and.w	r3, r3, #16
 800537e:	2b10      	cmp	r3, #16
 8005380:	d122      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	f003 0310 	and.w	r3, r3, #16
 800538c:	2b10      	cmp	r3, #16
 800538e:	d11b      	bne.n	80053c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0210 	mvn.w	r2, #16
 8005398:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2208      	movs	r2, #8
 800539e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d003      	beq.n	80053b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f887 	bl	80054c2 <HAL_TIM_IC_CaptureCallback>
 80053b4:	e005      	b.n	80053c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f879 	bl	80054ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f88a 	bl	80054d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d10e      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d107      	bne.n	80053f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0201 	mvn.w	r2, #1
 80053ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fc f930 	bl	8001654 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b80      	cmp	r3, #128	; 0x80
 8005400:	d10e      	bne.n	8005420 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540c:	2b80      	cmp	r3, #128	; 0x80
 800540e:	d107      	bne.n	8005420 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f914 	bl	8005648 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542e:	d10e      	bne.n	800544e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b80      	cmp	r3, #128	; 0x80
 800543c:	d107      	bne.n	800544e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005446:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 f907 	bl	800565c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005458:	2b40      	cmp	r3, #64	; 0x40
 800545a:	d10e      	bne.n	800547a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005466:	2b40      	cmp	r3, #64	; 0x40
 8005468:	d107      	bne.n	800547a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f838 	bl	80054ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	691b      	ldr	r3, [r3, #16]
 8005480:	f003 0320 	and.w	r3, r3, #32
 8005484:	2b20      	cmp	r3, #32
 8005486:	d10e      	bne.n	80054a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b20      	cmp	r3, #32
 8005494:	d107      	bne.n	80054a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f06f 0220 	mvn.w	r2, #32
 800549e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f8c7 	bl	8005634 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054a6:	bf00      	nop
 80054a8:	3708      	adds	r7, #8
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}

080054ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b083      	sub	sp, #12
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054b6:	bf00      	nop
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr

080054c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054c2:	b480      	push	{r7}
 80054c4:	b083      	sub	sp, #12
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ca:	bf00      	nop
 80054cc:	370c      	adds	r7, #12
 80054ce:	46bd      	mov	sp, r7
 80054d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d4:	4770      	bx	lr

080054d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a40      	ldr	r2, [pc, #256]	; (8005614 <TIM_Base_SetConfig+0x114>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d013      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800551e:	d00f      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a3d      	ldr	r2, [pc, #244]	; (8005618 <TIM_Base_SetConfig+0x118>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a3c      	ldr	r2, [pc, #240]	; (800561c <TIM_Base_SetConfig+0x11c>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a3b      	ldr	r2, [pc, #236]	; (8005620 <TIM_Base_SetConfig+0x120>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a3a      	ldr	r2, [pc, #232]	; (8005624 <TIM_Base_SetConfig+0x124>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d108      	bne.n	8005552 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	4313      	orrs	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2f      	ldr	r2, [pc, #188]	; (8005614 <TIM_Base_SetConfig+0x114>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01f      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005560:	d01b      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2c      	ldr	r2, [pc, #176]	; (8005618 <TIM_Base_SetConfig+0x118>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d017      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2b      	ldr	r2, [pc, #172]	; (800561c <TIM_Base_SetConfig+0x11c>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2a      	ldr	r2, [pc, #168]	; (8005620 <TIM_Base_SetConfig+0x120>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00f      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a29      	ldr	r2, [pc, #164]	; (8005624 <TIM_Base_SetConfig+0x124>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00b      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a28      	ldr	r2, [pc, #160]	; (8005628 <TIM_Base_SetConfig+0x128>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d007      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a27      	ldr	r2, [pc, #156]	; (800562c <TIM_Base_SetConfig+0x12c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_Base_SetConfig+0x9a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a26      	ldr	r2, [pc, #152]	; (8005630 <TIM_Base_SetConfig+0x130>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d108      	bne.n	80055ac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a10      	ldr	r2, [pc, #64]	; (8005614 <TIM_Base_SetConfig+0x114>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d00f      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a12      	ldr	r2, [pc, #72]	; (8005624 <TIM_Base_SetConfig+0x124>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a11      	ldr	r2, [pc, #68]	; (8005628 <TIM_Base_SetConfig+0x128>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a10      	ldr	r2, [pc, #64]	; (800562c <TIM_Base_SetConfig+0x12c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_Base_SetConfig+0xf8>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a0f      	ldr	r2, [pc, #60]	; (8005630 <TIM_Base_SetConfig+0x130>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d103      	bne.n	8005600 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	691a      	ldr	r2, [r3, #16]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	615a      	str	r2, [r3, #20]
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40010000 	.word	0x40010000
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40010400 	.word	0x40010400
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400
 8005630:	40014800 	.word	0x40014800

08005634 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800563c:	bf00      	nop
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005650:	bf00      	nop
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f103 0208 	add.w	r2, r3, #8
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005688:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f103 0208 	add.w	r2, r3, #8
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f103 0208 	add.w	r2, r3, #8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	601a      	str	r2, [r3, #0]
}
 8005706:	bf00      	nop
 8005708:	3714      	adds	r7, #20
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr

08005712 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005712:	b480      	push	{r7}
 8005714:	b085      	sub	sp, #20
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005728:	d103      	bne.n	8005732 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	e00c      	b.n	800574c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3308      	adds	r3, #8
 8005736:	60fb      	str	r3, [r7, #12]
 8005738:	e002      	b.n	8005740 <vListInsert+0x2e>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	429a      	cmp	r2, r3
 800574a:	d2f6      	bcs.n	800573a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	683a      	ldr	r2, [r7, #0]
 800575a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	601a      	str	r2, [r3, #0]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	6892      	ldr	r2, [r2, #8]
 800579a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	6852      	ldr	r2, [r2, #4]
 80057a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d103      	bne.n	80057b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	1e5a      	subs	r2, r3, #1
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005802:	f002 ff77 	bl	80086f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800580e:	68f9      	ldr	r1, [r7, #12]
 8005810:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005812:	fb01 f303 	mul.w	r3, r1, r3
 8005816:	441a      	add	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005832:	3b01      	subs	r3, #1
 8005834:	68f9      	ldr	r1, [r7, #12]
 8005836:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005838:	fb01 f303 	mul.w	r3, r1, r3
 800583c:	441a      	add	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	22ff      	movs	r2, #255	; 0xff
 8005846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	22ff      	movs	r2, #255	; 0xff
 800584e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d114      	bne.n	8005882 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d01a      	beq.n	8005896 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	3310      	adds	r3, #16
 8005864:	4618      	mov	r0, r3
 8005866:	f001 fc31 	bl	80070cc <xTaskRemoveFromEventList>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d012      	beq.n	8005896 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005870:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <xQueueGenericReset+0xcc>)
 8005872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	e009      	b.n	8005896 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3310      	adds	r3, #16
 8005886:	4618      	mov	r0, r3
 8005888:	f7ff fef2 	bl	8005670 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3324      	adds	r3, #36	; 0x24
 8005890:	4618      	mov	r0, r3
 8005892:	f7ff feed 	bl	8005670 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005896:	f002 ff5d 	bl	8008754 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800589a:	2301      	movs	r3, #1
}
 800589c:	4618      	mov	r0, r3
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	e000ed04 	.word	0xe000ed04

080058a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	; 0x28
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	4613      	mov	r3, r2
 80058b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	613b      	str	r3, [r7, #16]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	fb02 f303 	mul.w	r3, r2, r3
 80058da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	3350      	adds	r3, #80	; 0x50
 80058e0:	4618      	mov	r0, r3
 80058e2:	f002 fbed 	bl	80080c0 <pvPortMalloc>
 80058e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00d      	beq.n	800590a <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	3350      	adds	r3, #80	; 0x50
 80058f6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058f8:	79fa      	ldrb	r2, [r7, #7]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	4613      	mov	r3, r2
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f805 	bl	8005914 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800590a:	69bb      	ldr	r3, [r7, #24]
	}
 800590c:	4618      	mov	r0, r3
 800590e:	3720      	adds	r7, #32
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
 8005920:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d103      	bne.n	8005930 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	601a      	str	r2, [r3, #0]
 800592e:	e002      	b.n	8005936 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	687a      	ldr	r2, [r7, #4]
 8005934:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800593c:	69bb      	ldr	r3, [r7, #24]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005942:	2101      	movs	r1, #1
 8005944:	69b8      	ldr	r0, [r7, #24]
 8005946:	f7ff ff47 	bl	80057d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	78fa      	ldrb	r2, [r7, #3]
 800594e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005952:	bf00      	nop
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00e      	beq.n	8005986 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800597a:	2300      	movs	r3, #0
 800597c:	2200      	movs	r2, #0
 800597e:	2100      	movs	r1, #0
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f84f 	bl	8005a24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800598e:	b580      	push	{r7, lr}
 8005990:	b086      	sub	sp, #24
 8005992:	af00      	add	r7, sp, #0
 8005994:	4603      	mov	r3, r0
 8005996:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005998:	2301      	movs	r3, #1
 800599a:	617b      	str	r3, [r7, #20]
 800599c:	2300      	movs	r3, #0
 800599e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	461a      	mov	r2, r3
 80059a4:	6939      	ldr	r1, [r7, #16]
 80059a6:	6978      	ldr	r0, [r7, #20]
 80059a8:	f7ff ff7e 	bl	80058a8 <xQueueGenericCreate>
 80059ac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80059ae:	68f8      	ldr	r0, [r7, #12]
 80059b0:	f7ff ffd3 	bl	800595a <prvInitialiseMutex>

		return xNewQueue;
 80059b4:	68fb      	ldr	r3, [r7, #12]
	}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b086      	sub	sp, #24
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10a      	bne.n	80059e4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80059ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d2:	f383 8811 	msr	BASEPRI, r3
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	f3bf 8f4f 	dsb	sy
 80059de:	613b      	str	r3, [r7, #16]
}
 80059e0:	bf00      	nop
 80059e2:	e7fe      	b.n	80059e2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80059e4:	683a      	ldr	r2, [r7, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d90a      	bls.n	8005a02 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80059ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	60fb      	str	r3, [r7, #12]
}
 80059fe:	bf00      	nop
 8005a00:	e7fe      	b.n	8005a00 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005a02:	2202      	movs	r2, #2
 8005a04:	2100      	movs	r1, #0
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff ff4e 	bl	80058a8 <xQueueGenericCreate>
 8005a0c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	683a      	ldr	r2, [r7, #0]
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005a1a:	697b      	ldr	r3, [r7, #20]
	}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b08e      	sub	sp, #56	; 0x38
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
 8005a30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a32:	2300      	movs	r3, #0
 8005a34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10a      	bne.n	8005a56 <xQueueGenericSend+0x32>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d103      	bne.n	8005a64 <xQueueGenericSend+0x40>
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <xQueueGenericSend+0x44>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <xQueueGenericSend+0x46>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d10a      	bne.n	8005a84 <xQueueGenericSend+0x60>
	__asm volatile
 8005a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a72:	f383 8811 	msr	BASEPRI, r3
 8005a76:	f3bf 8f6f 	isb	sy
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a80:	bf00      	nop
 8005a82:	e7fe      	b.n	8005a82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d103      	bne.n	8005a92 <xQueueGenericSend+0x6e>
 8005a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <xQueueGenericSend+0x72>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <xQueueGenericSend+0x74>
 8005a96:	2300      	movs	r3, #0
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10a      	bne.n	8005ab2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	623b      	str	r3, [r7, #32]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ab2:	f001 fd5f 	bl	8007574 <xTaskGetSchedulerState>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d102      	bne.n	8005ac2 <xQueueGenericSend+0x9e>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <xQueueGenericSend+0xa2>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <xQueueGenericSend+0xa4>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10a      	bne.n	8005ae2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	61fb      	str	r3, [r7, #28]
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ae2:	f002 fe07 	bl	80086f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d302      	bcc.n	8005af8 <xQueueGenericSend+0xd4>
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d129      	bne.n	8005b4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005afe:	f000 fc95 	bl	800642c <prvCopyDataToQueue>
 8005b02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d010      	beq.n	8005b2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	3324      	adds	r3, #36	; 0x24
 8005b10:	4618      	mov	r0, r3
 8005b12:	f001 fadb 	bl	80070cc <xTaskRemoveFromEventList>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d013      	beq.n	8005b44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b1c:	4b3f      	ldr	r3, [pc, #252]	; (8005c1c <xQueueGenericSend+0x1f8>)
 8005b1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	e00a      	b.n	8005b44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d007      	beq.n	8005b44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b34:	4b39      	ldr	r3, [pc, #228]	; (8005c1c <xQueueGenericSend+0x1f8>)
 8005b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b44:	f002 fe06 	bl	8008754 <vPortExitCritical>
				return pdPASS;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e063      	b.n	8005c14 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d103      	bne.n	8005b5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b52:	f002 fdff 	bl	8008754 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b56:	2300      	movs	r3, #0
 8005b58:	e05c      	b.n	8005c14 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d106      	bne.n	8005b6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b60:	f107 0314 	add.w	r3, r7, #20
 8005b64:	4618      	mov	r0, r3
 8005b66:	f001 fb13 	bl	8007190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b6e:	f002 fdf1 	bl	8008754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b72:	f001 f82d 	bl	8006bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b76:	f002 fdbd 	bl	80086f4 <vPortEnterCritical>
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b80:	b25b      	sxtb	r3, r3
 8005b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b86:	d103      	bne.n	8005b90 <xQueueGenericSend+0x16c>
 8005b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b96:	b25b      	sxtb	r3, r3
 8005b98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b9c:	d103      	bne.n	8005ba6 <xQueueGenericSend+0x182>
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ba6:	f002 fdd5 	bl	8008754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005baa:	1d3a      	adds	r2, r7, #4
 8005bac:	f107 0314 	add.w	r3, r7, #20
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f001 fb02 	bl	80071bc <xTaskCheckForTimeOut>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d124      	bne.n	8005c08 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bc0:	f000 fd2c 	bl	800661c <prvIsQueueFull>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d018      	beq.n	8005bfc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	3310      	adds	r3, #16
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	4611      	mov	r1, r2
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f001 fa56 	bl	8007084 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bda:	f000 fcb7 	bl	800654c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005bde:	f001 f805 	bl	8006bec <xTaskResumeAll>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	f47f af7c 	bne.w	8005ae2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005bea:	4b0c      	ldr	r3, [pc, #48]	; (8005c1c <xQueueGenericSend+0x1f8>)
 8005bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf0:	601a      	str	r2, [r3, #0]
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	e772      	b.n	8005ae2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bfe:	f000 fca5 	bl	800654c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c02:	f000 fff3 	bl	8006bec <xTaskResumeAll>
 8005c06:	e76c      	b.n	8005ae2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c0a:	f000 fc9f 	bl	800654c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c0e:	f000 ffed 	bl	8006bec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c12:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3738      	adds	r7, #56	; 0x38
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	e000ed04 	.word	0xe000ed04

08005c20 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b090      	sub	sp, #64	; 0x40
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d103      	bne.n	8005c5c <xQueueGenericSendFromISR+0x3c>
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <xQueueGenericSendFromISR+0x40>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e000      	b.n	8005c62 <xQueueGenericSendFromISR+0x42>
 8005c60:	2300      	movs	r3, #0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d103      	bne.n	8005c8a <xQueueGenericSendFromISR+0x6a>
 8005c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d101      	bne.n	8005c8e <xQueueGenericSendFromISR+0x6e>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e000      	b.n	8005c90 <xQueueGenericSendFromISR+0x70>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d10a      	bne.n	8005caa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c98:	f383 8811 	msr	BASEPRI, r3
 8005c9c:	f3bf 8f6f 	isb	sy
 8005ca0:	f3bf 8f4f 	dsb	sy
 8005ca4:	623b      	str	r3, [r7, #32]
}
 8005ca6:	bf00      	nop
 8005ca8:	e7fe      	b.n	8005ca8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005caa:	f002 fe05 	bl	80088b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cae:	f3ef 8211 	mrs	r2, BASEPRI
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	61fa      	str	r2, [r7, #28]
 8005cc4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cc8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d302      	bcc.n	8005cdc <xQueueGenericSendFromISR+0xbc>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d12f      	bne.n	8005d3c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ce2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cec:	683a      	ldr	r2, [r7, #0]
 8005cee:	68b9      	ldr	r1, [r7, #8]
 8005cf0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cf2:	f000 fb9b 	bl	800642c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cf6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005cfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cfe:	d112      	bne.n	8005d26 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d016      	beq.n	8005d36 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0a:	3324      	adds	r3, #36	; 0x24
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f001 f9dd 	bl	80070cc <xTaskRemoveFromEventList>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d00e      	beq.n	8005d36 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d00b      	beq.n	8005d36 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	e007      	b.n	8005d36 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	b25a      	sxtb	r2, r3
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d36:	2301      	movs	r3, #1
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d3a:	e001      	b.n	8005d40 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d42:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d4a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3740      	adds	r7, #64	; 0x40
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b08e      	sub	sp, #56	; 0x38
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10a      	bne.n	8005d80 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	623b      	str	r3, [r7, #32]
}
 8005d7c:	bf00      	nop
 8005d7e:	e7fe      	b.n	8005d7e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <xQueueGiveFromISR+0x48>
	__asm volatile
 8005d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8c:	f383 8811 	msr	BASEPRI, r3
 8005d90:	f3bf 8f6f 	isb	sy
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	61fb      	str	r3, [r7, #28]
}
 8005d9a:	bf00      	nop
 8005d9c:	e7fe      	b.n	8005d9c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d103      	bne.n	8005dae <xQueueGiveFromISR+0x58>
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <xQueueGiveFromISR+0x5c>
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <xQueueGiveFromISR+0x5e>
 8005db2:	2300      	movs	r3, #0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <xQueueGiveFromISR+0x78>
	__asm volatile
 8005db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dbc:	f383 8811 	msr	BASEPRI, r3
 8005dc0:	f3bf 8f6f 	isb	sy
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	61bb      	str	r3, [r7, #24]
}
 8005dca:	bf00      	nop
 8005dcc:	e7fe      	b.n	8005dcc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dce:	f002 fd73 	bl	80088b8 <vPortValidateInterruptPriority>
	__asm volatile
 8005dd2:	f3ef 8211 	mrs	r2, BASEPRI
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	617a      	str	r2, [r7, #20]
 8005de8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005dea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d22b      	bcs.n	8005e56 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	1c5a      	adds	r2, r3, #1
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e18:	d112      	bne.n	8005e40 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d016      	beq.n	8005e50 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	3324      	adds	r3, #36	; 0x24
 8005e26:	4618      	mov	r0, r3
 8005e28:	f001 f950 	bl	80070cc <xTaskRemoveFromEventList>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00e      	beq.n	8005e50 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00b      	beq.n	8005e50 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	e007      	b.n	8005e50 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e44:	3301      	adds	r3, #1
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	b25a      	sxtb	r2, r3
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e50:	2301      	movs	r3, #1
 8005e52:	637b      	str	r3, [r7, #52]	; 0x34
 8005e54:	e001      	b.n	8005e5a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34
 8005e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e5c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f383 8811 	msr	BASEPRI, r3
}
 8005e64:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3738      	adds	r7, #56	; 0x38
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08c      	sub	sp, #48	; 0x30
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10a      	bne.n	8005ea0 <xQueueReceive+0x30>
	__asm volatile
 8005e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8e:	f383 8811 	msr	BASEPRI, r3
 8005e92:	f3bf 8f6f 	isb	sy
 8005e96:	f3bf 8f4f 	dsb	sy
 8005e9a:	623b      	str	r3, [r7, #32]
}
 8005e9c:	bf00      	nop
 8005e9e:	e7fe      	b.n	8005e9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d103      	bne.n	8005eae <xQueueReceive+0x3e>
 8005ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d101      	bne.n	8005eb2 <xQueueReceive+0x42>
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e000      	b.n	8005eb4 <xQueueReceive+0x44>
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <xQueueReceive+0x5e>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	61fb      	str	r3, [r7, #28]
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ece:	f001 fb51 	bl	8007574 <xTaskGetSchedulerState>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <xQueueReceive+0x6e>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <xQueueReceive+0x72>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <xQueueReceive+0x74>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <xQueueReceive+0x8e>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	61bb      	str	r3, [r7, #24]
}
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005efe:	f002 fbf9 	bl	80086f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01f      	beq.n	8005f4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f0e:	68b9      	ldr	r1, [r7, #8]
 8005f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f12:	f000 faf5 	bl	8006500 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f18:	1e5a      	subs	r2, r3, #1
 8005f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00f      	beq.n	8005f46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f28:	3310      	adds	r3, #16
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 f8ce 	bl	80070cc <xTaskRemoveFromEventList>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f36:	4b3d      	ldr	r3, [pc, #244]	; (800602c <xQueueReceive+0x1bc>)
 8005f38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f46:	f002 fc05 	bl	8008754 <vPortExitCritical>
				return pdPASS;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e069      	b.n	8006022 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d103      	bne.n	8005f5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f54:	f002 fbfe 	bl	8008754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	e062      	b.n	8006022 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f62:	f107 0310 	add.w	r3, r7, #16
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 f912 	bl	8007190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f70:	f002 fbf0 	bl	8008754 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f74:	f000 fe2c 	bl	8006bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f78:	f002 fbbc 	bl	80086f4 <vPortEnterCritical>
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f82:	b25b      	sxtb	r3, r3
 8005f84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f88:	d103      	bne.n	8005f92 <xQueueReceive+0x122>
 8005f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f98:	b25b      	sxtb	r3, r3
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f9e:	d103      	bne.n	8005fa8 <xQueueReceive+0x138>
 8005fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fa8:	f002 fbd4 	bl	8008754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fac:	1d3a      	adds	r2, r7, #4
 8005fae:	f107 0310 	add.w	r3, r7, #16
 8005fb2:	4611      	mov	r1, r2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f001 f901 	bl	80071bc <xTaskCheckForTimeOut>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d123      	bne.n	8006008 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fc2:	f000 fb15 	bl	80065f0 <prvIsQueueEmpty>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d017      	beq.n	8005ffc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	3324      	adds	r3, #36	; 0x24
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	4611      	mov	r1, r2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f001 f855 	bl	8007084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fdc:	f000 fab6 	bl	800654c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fe0:	f000 fe04 	bl	8006bec <xTaskResumeAll>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d189      	bne.n	8005efe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005fea:	4b10      	ldr	r3, [pc, #64]	; (800602c <xQueueReceive+0x1bc>)
 8005fec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ff0:	601a      	str	r2, [r3, #0]
 8005ff2:	f3bf 8f4f 	dsb	sy
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	e780      	b.n	8005efe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ffc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ffe:	f000 faa5 	bl	800654c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006002:	f000 fdf3 	bl	8006bec <xTaskResumeAll>
 8006006:	e77a      	b.n	8005efe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006008:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800600a:	f000 fa9f 	bl	800654c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800600e:	f000 fded 	bl	8006bec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006014:	f000 faec 	bl	80065f0 <prvIsQueueEmpty>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	f43f af6f 	beq.w	8005efe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006020:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006022:	4618      	mov	r0, r3
 8006024:	3730      	adds	r7, #48	; 0x30
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08e      	sub	sp, #56	; 0x38
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800603a:	2300      	movs	r3, #0
 800603c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006042:	2300      	movs	r3, #0
 8006044:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	623b      	str	r3, [r7, #32]
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00a      	beq.n	8006080 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	61fb      	str	r3, [r7, #28]
}
 800607c:	bf00      	nop
 800607e:	e7fe      	b.n	800607e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006080:	f001 fa78 	bl	8007574 <xTaskGetSchedulerState>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <xQueueSemaphoreTake+0x60>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <xQueueSemaphoreTake+0x64>
 8006090:	2301      	movs	r3, #1
 8006092:	e000      	b.n	8006096 <xQueueSemaphoreTake+0x66>
 8006094:	2300      	movs	r3, #0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	61bb      	str	r3, [r7, #24]
}
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060b0:	f002 fb20 	bl	80086f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80060ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d024      	beq.n	800610a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80060c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c2:	1e5a      	subs	r2, r3, #1
 80060c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d104      	bne.n	80060da <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80060d0:	f001 fcb4 	bl	8007a3c <pvTaskIncrementMutexHeldCount>
 80060d4:	4602      	mov	r2, r0
 80060d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00f      	beq.n	8006102 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060e4:	3310      	adds	r3, #16
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fff0 	bl	80070cc <xTaskRemoveFromEventList>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060f2:	4b54      	ldr	r3, [pc, #336]	; (8006244 <xQueueSemaphoreTake+0x214>)
 80060f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060f8:	601a      	str	r2, [r3, #0]
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006102:	f002 fb27 	bl	8008754 <vPortExitCritical>
				return pdPASS;
 8006106:	2301      	movs	r3, #1
 8006108:	e097      	b.n	800623a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d111      	bne.n	8006134 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	617b      	str	r3, [r7, #20]
}
 8006128:	bf00      	nop
 800612a:	e7fe      	b.n	800612a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800612c:	f002 fb12 	bl	8008754 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006130:	2300      	movs	r3, #0
 8006132:	e082      	b.n	800623a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800613a:	f107 030c 	add.w	r3, r7, #12
 800613e:	4618      	mov	r0, r3
 8006140:	f001 f826 	bl	8007190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006144:	2301      	movs	r3, #1
 8006146:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006148:	f002 fb04 	bl	8008754 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800614c:	f000 fd40 	bl	8006bd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006150:	f002 fad0 	bl	80086f4 <vPortEnterCritical>
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800615a:	b25b      	sxtb	r3, r3
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006160:	d103      	bne.n	800616a <xQueueSemaphoreTake+0x13a>
 8006162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006164:	2200      	movs	r2, #0
 8006166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006170:	b25b      	sxtb	r3, r3
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006176:	d103      	bne.n	8006180 <xQueueSemaphoreTake+0x150>
 8006178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617a:	2200      	movs	r2, #0
 800617c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006180:	f002 fae8 	bl	8008754 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006184:	463a      	mov	r2, r7
 8006186:	f107 030c 	add.w	r3, r7, #12
 800618a:	4611      	mov	r1, r2
 800618c:	4618      	mov	r0, r3
 800618e:	f001 f815 	bl	80071bc <xTaskCheckForTimeOut>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d132      	bne.n	80061fe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006198:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800619a:	f000 fa29 	bl	80065f0 <prvIsQueueEmpty>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d026      	beq.n	80061f2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d109      	bne.n	80061c0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80061ac:	f002 faa2 	bl	80086f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 f9fb 	bl	80075b0 <xTaskPriorityInherit>
 80061ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80061bc:	f002 faca 	bl	8008754 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	3324      	adds	r3, #36	; 0x24
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	4611      	mov	r1, r2
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 ff5b 	bl	8007084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061d0:	f000 f9bc 	bl	800654c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061d4:	f000 fd0a 	bl	8006bec <xTaskResumeAll>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f47f af68 	bne.w	80060b0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80061e0:	4b18      	ldr	r3, [pc, #96]	; (8006244 <xQueueSemaphoreTake+0x214>)
 80061e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	e75e      	b.n	80060b0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80061f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061f4:	f000 f9aa 	bl	800654c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061f8:	f000 fcf8 	bl	8006bec <xTaskResumeAll>
 80061fc:	e758      	b.n	80060b0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80061fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006200:	f000 f9a4 	bl	800654c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006204:	f000 fcf2 	bl	8006bec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006208:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800620a:	f000 f9f1 	bl	80065f0 <prvIsQueueEmpty>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	f43f af4d 	beq.w	80060b0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00d      	beq.n	8006238 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800621c:	f002 fa6a 	bl	80086f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006220:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006222:	f000 f8eb 	bl	80063fc <prvGetDisinheritPriorityAfterTimeout>
 8006226:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800622e:	4618      	mov	r0, r3
 8006230:	f001 faba 	bl	80077a8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006234:	f002 fa8e 	bl	8008754 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006238:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800623a:	4618      	mov	r0, r3
 800623c:	3738      	adds	r7, #56	; 0x38
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	e000ed04 	.word	0xe000ed04

08006248 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b08e      	sub	sp, #56	; 0x38
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	623b      	str	r3, [r7, #32]
}
 8006270:	bf00      	nop
 8006272:	e7fe      	b.n	8006272 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d103      	bne.n	8006282 <xQueueReceiveFromISR+0x3a>
 800627a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <xQueueReceiveFromISR+0x3e>
 8006282:	2301      	movs	r3, #1
 8006284:	e000      	b.n	8006288 <xQueueReceiveFromISR+0x40>
 8006286:	2300      	movs	r3, #0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10a      	bne.n	80062a2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800628c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006290:	f383 8811 	msr	BASEPRI, r3
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	f3bf 8f4f 	dsb	sy
 800629c:	61fb      	str	r3, [r7, #28]
}
 800629e:	bf00      	nop
 80062a0:	e7fe      	b.n	80062a0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062a2:	f002 fb09 	bl	80088b8 <vPortValidateInterruptPriority>
	__asm volatile
 80062a6:	f3ef 8211 	mrs	r2, BASEPRI
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	f383 8811 	msr	BASEPRI, r3
 80062b2:	f3bf 8f6f 	isb	sy
 80062b6:	f3bf 8f4f 	dsb	sy
 80062ba:	61ba      	str	r2, [r7, #24]
 80062bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80062be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d02f      	beq.n	800632e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80062ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062dc:	f000 f910 	bl	8006500 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062e2:	1e5a      	subs	r2, r3, #1
 80062e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80062e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f0:	d112      	bne.n	8006318 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d016      	beq.n	8006328 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062fc:	3310      	adds	r3, #16
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 fee4 	bl	80070cc <xTaskRemoveFromEventList>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00e      	beq.n	8006328 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00b      	beq.n	8006328 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	601a      	str	r2, [r3, #0]
 8006316:	e007      	b.n	8006328 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800631c:	3301      	adds	r3, #1
 800631e:	b2db      	uxtb	r3, r3
 8006320:	b25a      	sxtb	r2, r3
 8006322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006328:	2301      	movs	r3, #1
 800632a:	637b      	str	r3, [r7, #52]	; 0x34
 800632c:	e001      	b.n	8006332 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800632e:	2300      	movs	r3, #0
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
 8006332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006334:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	f383 8811 	msr	BASEPRI, r3
}
 800633c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800633e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006340:	4618      	mov	r0, r3
 8006342:	3738      	adds	r7, #56	; 0x38
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	f3bf 8f6f 	isb	sy
 8006362:	f3bf 8f4f 	dsb	sy
 8006366:	60bb      	str	r3, [r7, #8]
}
 8006368:	bf00      	nop
 800636a:	e7fe      	b.n	800636a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800636c:	f002 f9c2 	bl	80086f4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006374:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006376:	f002 f9ed 	bl	8008754 <vPortExitCritical>

	return uxReturn;
 800637a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d10a      	bne.n	80063ac <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639a:	f383 8811 	msr	BASEPRI, r3
 800639e:	f3bf 8f6f 	isb	sy
 80063a2:	f3bf 8f4f 	dsb	sy
 80063a6:	60fb      	str	r3, [r7, #12]
}
 80063a8:	bf00      	nop
 80063aa:	e7fe      	b.n	80063aa <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80063b2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80063b4:	4618      	mov	r0, r3
 80063b6:	371c      	adds	r7, #28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <vQueueDelete+0x28>
	__asm volatile
 80063d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d6:	f383 8811 	msr	BASEPRI, r3
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	f3bf 8f4f 	dsb	sy
 80063e2:	60bb      	str	r3, [r7, #8]
}
 80063e4:	bf00      	nop
 80063e6:	e7fe      	b.n	80063e6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80063e8:	68f8      	ldr	r0, [r7, #12]
 80063ea:	f000 f92f 	bl	800664c <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f001 ff32 	bl	8008258 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80063f4:	bf00      	nop
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063fc:	b480      	push	{r7}
 80063fe:	b085      	sub	sp, #20
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006408:	2b00      	cmp	r3, #0
 800640a:	d006      	beq.n	800641a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f1c3 0307 	rsb	r3, r3, #7
 8006416:	60fb      	str	r3, [r7, #12]
 8006418:	e001      	b.n	800641e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800641a:	2300      	movs	r3, #0
 800641c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800641e:	68fb      	ldr	r3, [r7, #12]
	}
 8006420:	4618      	mov	r0, r3
 8006422:	3714      	adds	r7, #20
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006438:	2300      	movs	r3, #0
 800643a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	d10d      	bne.n	8006466 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d14d      	bne.n	80064ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	4618      	mov	r0, r3
 8006458:	f001 f920 	bl	800769c <xTaskPriorityDisinherit>
 800645c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	609a      	str	r2, [r3, #8]
 8006464:	e043      	b.n	80064ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d119      	bne.n	80064a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6858      	ldr	r0, [r3, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	461a      	mov	r2, r3
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	f012 fd38 	bl	8018eec <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	441a      	add	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	d32b      	bcc.n	80064ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	605a      	str	r2, [r3, #4]
 800649e:	e026      	b.n	80064ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68d8      	ldr	r0, [r3, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	461a      	mov	r2, r3
 80064aa:	68b9      	ldr	r1, [r7, #8]
 80064ac:	f012 fd1e 	bl	8018eec <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b8:	425b      	negs	r3, r3
 80064ba:	441a      	add	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d207      	bcs.n	80064dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d4:	425b      	negs	r3, r3
 80064d6:	441a      	add	r2, r3
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d105      	bne.n	80064ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064f6:	697b      	ldr	r3, [r7, #20]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	2b00      	cmp	r3, #0
 8006510:	d018      	beq.n	8006544 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	441a      	add	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	429a      	cmp	r2, r3
 800652a:	d303      	bcc.n	8006534 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	68d9      	ldr	r1, [r3, #12]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653c:	461a      	mov	r2, r3
 800653e:	6838      	ldr	r0, [r7, #0]
 8006540:	f012 fcd4 	bl	8018eec <memcpy>
	}
}
 8006544:	bf00      	nop
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006554:	f002 f8ce 	bl	80086f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800655e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006560:	e011      	b.n	8006586 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	2b00      	cmp	r3, #0
 8006568:	d012      	beq.n	8006590 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3324      	adds	r3, #36	; 0x24
 800656e:	4618      	mov	r0, r3
 8006570:	f000 fdac 	bl	80070cc <xTaskRemoveFromEventList>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800657a:	f000 fe79 	bl	8007270 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	3b01      	subs	r3, #1
 8006582:	b2db      	uxtb	r3, r3
 8006584:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800658a:	2b00      	cmp	r3, #0
 800658c:	dce9      	bgt.n	8006562 <prvUnlockQueue+0x16>
 800658e:	e000      	b.n	8006592 <prvUnlockQueue+0x46>
					break;
 8006590:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	22ff      	movs	r2, #255	; 0xff
 8006596:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800659a:	f002 f8db 	bl	8008754 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800659e:	f002 f8a9 	bl	80086f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80065a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065aa:	e011      	b.n	80065d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d012      	beq.n	80065da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3310      	adds	r3, #16
 80065b8:	4618      	mov	r0, r3
 80065ba:	f000 fd87 	bl	80070cc <xTaskRemoveFromEventList>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065c4:	f000 fe54 	bl	8007270 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065c8:	7bbb      	ldrb	r3, [r7, #14]
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dce9      	bgt.n	80065ac <prvUnlockQueue+0x60>
 80065d8:	e000      	b.n	80065dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	22ff      	movs	r2, #255	; 0xff
 80065e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065e4:	f002 f8b6 	bl	8008754 <vPortExitCritical>
}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065f8:	f002 f87c 	bl	80086f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006600:	2b00      	cmp	r3, #0
 8006602:	d102      	bne.n	800660a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006604:	2301      	movs	r3, #1
 8006606:	60fb      	str	r3, [r7, #12]
 8006608:	e001      	b.n	800660e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800660e:	f002 f8a1 	bl	8008754 <vPortExitCritical>

	return xReturn;
 8006612:	68fb      	ldr	r3, [r7, #12]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006624:	f002 f866 	bl	80086f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006630:	429a      	cmp	r2, r3
 8006632:	d102      	bne.n	800663a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006634:	2301      	movs	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
 8006638:	e001      	b.n	800663e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800663e:	f002 f889 	bl	8008754 <vPortExitCritical>

	return xReturn;
 8006642:	68fb      	ldr	r3, [r7, #12]
}
 8006644:	4618      	mov	r0, r3
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006654:	2300      	movs	r3, #0
 8006656:	60fb      	str	r3, [r7, #12]
 8006658:	e016      	b.n	8006688 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800665a:	4a10      	ldr	r2, [pc, #64]	; (800669c <vQueueUnregisterQueue+0x50>)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	4413      	add	r3, r2
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	429a      	cmp	r2, r3
 8006668:	d10b      	bne.n	8006682 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800666a:	4a0c      	ldr	r2, [pc, #48]	; (800669c <vQueueUnregisterQueue+0x50>)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2100      	movs	r1, #0
 8006670:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006674:	4a09      	ldr	r2, [pc, #36]	; (800669c <vQueueUnregisterQueue+0x50>)
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4413      	add	r3, r2
 800667c:	2200      	movs	r2, #0
 800667e:	605a      	str	r2, [r3, #4]
				break;
 8006680:	e006      	b.n	8006690 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	3301      	adds	r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b07      	cmp	r3, #7
 800668c:	d9e5      	bls.n	800665a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800668e:	bf00      	nop
 8006690:	bf00      	nop
 8006692:	3714      	adds	r7, #20
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	240073c8 	.word	0x240073c8

080066a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b08c      	sub	sp, #48	; 0x30
 80066a4:	af04      	add	r7, sp, #16
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066b0:	88fb      	ldrh	r3, [r7, #6]
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4618      	mov	r0, r3
 80066b6:	f001 fd03 	bl	80080c0 <pvPortMalloc>
 80066ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00e      	beq.n	80066e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066c2:	205c      	movs	r0, #92	; 0x5c
 80066c4:	f001 fcfc 	bl	80080c0 <pvPortMalloc>
 80066c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d003      	beq.n	80066d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	697a      	ldr	r2, [r7, #20]
 80066d4:	631a      	str	r2, [r3, #48]	; 0x30
 80066d6:	e005      	b.n	80066e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066d8:	6978      	ldr	r0, [r7, #20]
 80066da:	f001 fdbd 	bl	8008258 <vPortFree>
 80066de:	e001      	b.n	80066e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066e0:	2300      	movs	r3, #0
 80066e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d013      	beq.n	8006712 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066ea:	88fa      	ldrh	r2, [r7, #6]
 80066ec:	2300      	movs	r3, #0
 80066ee:	9303      	str	r3, [sp, #12]
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	9302      	str	r3, [sp, #8]
 80066f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	68b9      	ldr	r1, [r7, #8]
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f80e 	bl	8006722 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006706:	69f8      	ldr	r0, [r7, #28]
 8006708:	f000 f89a 	bl	8006840 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800670c:	2301      	movs	r3, #1
 800670e:	61bb      	str	r3, [r7, #24]
 8006710:	e002      	b.n	8006718 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006716:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006718:	69bb      	ldr	r3, [r7, #24]
	}
 800671a:	4618      	mov	r0, r3
 800671c:	3720      	adds	r7, #32
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006722:	b580      	push	{r7, lr}
 8006724:	b088      	sub	sp, #32
 8006726:	af00      	add	r7, sp, #0
 8006728:	60f8      	str	r0, [r7, #12]
 800672a:	60b9      	str	r1, [r7, #8]
 800672c:	607a      	str	r2, [r7, #4]
 800672e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	461a      	mov	r2, r3
 800673a:	21a5      	movs	r1, #165	; 0xa5
 800673c:	f012 fbfe 	bl	8018f3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006744:	6879      	ldr	r1, [r7, #4]
 8006746:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800674a:	440b      	add	r3, r1
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f023 0307 	bic.w	r3, r3, #7
 8006758:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <prvInitialiseNewTask+0x58>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	617b      	str	r3, [r7, #20]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d01f      	beq.n	80067c0 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006780:	2300      	movs	r3, #0
 8006782:	61fb      	str	r3, [r7, #28]
 8006784:	e012      	b.n	80067ac <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	4413      	add	r3, r2
 800678c:	7819      	ldrb	r1, [r3, #0]
 800678e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	3334      	adds	r3, #52	; 0x34
 8006796:	460a      	mov	r2, r1
 8006798:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	4413      	add	r3, r2
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d006      	beq.n	80067b4 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	3301      	adds	r3, #1
 80067aa:	61fb      	str	r3, [r7, #28]
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	2b0f      	cmp	r3, #15
 80067b0:	d9e9      	bls.n	8006786 <prvInitialiseNewTask+0x64>
 80067b2:	e000      	b.n	80067b6 <prvInitialiseNewTask+0x94>
			{
				break;
 80067b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067be:	e003      	b.n	80067c8 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ca:	2b06      	cmp	r3, #6
 80067cc:	d901      	bls.n	80067d2 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067ce:	2306      	movs	r3, #6
 80067d0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067dc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	2200      	movs	r2, #0
 80067e2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	3304      	adds	r3, #4
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fe ff61 	bl	80056b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f0:	3318      	adds	r3, #24
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fe ff5c 	bl	80056b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006800:	f1c3 0207 	rsb	r2, r3, #7
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800680c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	2200      	movs	r2, #0
 8006812:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800681c:	683a      	ldr	r2, [r7, #0]
 800681e:	68f9      	ldr	r1, [r7, #12]
 8006820:	69b8      	ldr	r0, [r7, #24]
 8006822:	f001 fe37 	bl	8008494 <pxPortInitialiseStack>
 8006826:	4602      	mov	r2, r0
 8006828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800682a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800682c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006836:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006838:	bf00      	nop
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006848:	f001 ff54 	bl	80086f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800684c:	4b2c      	ldr	r3, [pc, #176]	; (8006900 <prvAddNewTaskToReadyList+0xc0>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	3301      	adds	r3, #1
 8006852:	4a2b      	ldr	r2, [pc, #172]	; (8006900 <prvAddNewTaskToReadyList+0xc0>)
 8006854:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006856:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <prvAddNewTaskToReadyList+0xc4>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d109      	bne.n	8006872 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800685e:	4a29      	ldr	r2, [pc, #164]	; (8006904 <prvAddNewTaskToReadyList+0xc4>)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006864:	4b26      	ldr	r3, [pc, #152]	; (8006900 <prvAddNewTaskToReadyList+0xc0>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d110      	bne.n	800688e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800686c:	f000 fd24 	bl	80072b8 <prvInitialiseTaskLists>
 8006870:	e00d      	b.n	800688e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006872:	4b25      	ldr	r3, [pc, #148]	; (8006908 <prvAddNewTaskToReadyList+0xc8>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d109      	bne.n	800688e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800687a:	4b22      	ldr	r3, [pc, #136]	; (8006904 <prvAddNewTaskToReadyList+0xc4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	429a      	cmp	r2, r3
 8006886:	d802      	bhi.n	800688e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006888:	4a1e      	ldr	r2, [pc, #120]	; (8006904 <prvAddNewTaskToReadyList+0xc4>)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800688e:	4b1f      	ldr	r3, [pc, #124]	; (800690c <prvAddNewTaskToReadyList+0xcc>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	3301      	adds	r3, #1
 8006894:	4a1d      	ldr	r2, [pc, #116]	; (800690c <prvAddNewTaskToReadyList+0xcc>)
 8006896:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006898:	4b1c      	ldr	r3, [pc, #112]	; (800690c <prvAddNewTaskToReadyList+0xcc>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	2201      	movs	r2, #1
 80068a6:	409a      	lsls	r2, r3
 80068a8:	4b19      	ldr	r3, [pc, #100]	; (8006910 <prvAddNewTaskToReadyList+0xd0>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4313      	orrs	r3, r2
 80068ae:	4a18      	ldr	r2, [pc, #96]	; (8006910 <prvAddNewTaskToReadyList+0xd0>)
 80068b0:	6013      	str	r3, [r2, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068b6:	4613      	mov	r3, r2
 80068b8:	009b      	lsls	r3, r3, #2
 80068ba:	4413      	add	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4a15      	ldr	r2, [pc, #84]	; (8006914 <prvAddNewTaskToReadyList+0xd4>)
 80068c0:	441a      	add	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3304      	adds	r3, #4
 80068c6:	4619      	mov	r1, r3
 80068c8:	4610      	mov	r0, r2
 80068ca:	f7fe fefe 	bl	80056ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068ce:	f001 ff41 	bl	8008754 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068d2:	4b0d      	ldr	r3, [pc, #52]	; (8006908 <prvAddNewTaskToReadyList+0xc8>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00e      	beq.n	80068f8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068da:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <prvAddNewTaskToReadyList+0xc4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d207      	bcs.n	80068f8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068e8:	4b0b      	ldr	r3, [pc, #44]	; (8006918 <prvAddNewTaskToReadyList+0xd8>)
 80068ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068ee:	601a      	str	r2, [r3, #0]
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068f8:	bf00      	nop
 80068fa:	3708      	adds	r7, #8
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	240005fc 	.word	0x240005fc
 8006904:	24000510 	.word	0x24000510
 8006908:	24000608 	.word	0x24000608
 800690c:	24000618 	.word	0x24000618
 8006910:	24000604 	.word	0x24000604
 8006914:	24000514 	.word	0x24000514
 8006918:	e000ed04 	.word	0xe000ed04

0800691c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006924:	f001 fee6 	bl	80086f4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d102      	bne.n	8006934 <vTaskDelete+0x18>
 800692e:	4b39      	ldr	r3, [pc, #228]	; (8006a14 <vTaskDelete+0xf8>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	e000      	b.n	8006936 <vTaskDelete+0x1a>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3304      	adds	r3, #4
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe ff21 	bl	8005784 <uxListRemove>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d115      	bne.n	8006974 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800694c:	4932      	ldr	r1, [pc, #200]	; (8006a18 <vTaskDelete+0xfc>)
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10a      	bne.n	8006974 <vTaskDelete+0x58>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006962:	2201      	movs	r2, #1
 8006964:	fa02 f303 	lsl.w	r3, r2, r3
 8006968:	43da      	mvns	r2, r3
 800696a:	4b2c      	ldr	r3, [pc, #176]	; (8006a1c <vTaskDelete+0x100>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4013      	ands	r3, r2
 8006970:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <vTaskDelete+0x100>)
 8006972:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	2b00      	cmp	r3, #0
 800697a:	d004      	beq.n	8006986 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3318      	adds	r3, #24
 8006980:	4618      	mov	r0, r3
 8006982:	f7fe feff 	bl	8005784 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006986:	4b26      	ldr	r3, [pc, #152]	; (8006a20 <vTaskDelete+0x104>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3301      	adds	r3, #1
 800698c:	4a24      	ldr	r2, [pc, #144]	; (8006a20 <vTaskDelete+0x104>)
 800698e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006990:	4b20      	ldr	r3, [pc, #128]	; (8006a14 <vTaskDelete+0xf8>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	429a      	cmp	r2, r3
 8006998:	d10b      	bne.n	80069b2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3304      	adds	r3, #4
 800699e:	4619      	mov	r1, r3
 80069a0:	4820      	ldr	r0, [pc, #128]	; (8006a24 <vTaskDelete+0x108>)
 80069a2:	f7fe fe92 	bl	80056ca <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80069a6:	4b20      	ldr	r3, [pc, #128]	; (8006a28 <vTaskDelete+0x10c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	3301      	adds	r3, #1
 80069ac:	4a1e      	ldr	r2, [pc, #120]	; (8006a28 <vTaskDelete+0x10c>)
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	e009      	b.n	80069c6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80069b2:	4b1e      	ldr	r3, [pc, #120]	; (8006a2c <vTaskDelete+0x110>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3b01      	subs	r3, #1
 80069b8:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <vTaskDelete+0x110>)
 80069ba:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80069bc:	68f8      	ldr	r0, [r7, #12]
 80069be:	f000 fda9 	bl	8007514 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80069c2:	f000 fdb7 	bl	8007534 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80069c6:	f001 fec5 	bl	8008754 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80069ca:	4b19      	ldr	r3, [pc, #100]	; (8006a30 <vTaskDelete+0x114>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d01b      	beq.n	8006a0a <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80069d2:	4b10      	ldr	r3, [pc, #64]	; (8006a14 <vTaskDelete+0xf8>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d116      	bne.n	8006a0a <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80069dc:	4b15      	ldr	r3, [pc, #84]	; (8006a34 <vTaskDelete+0x118>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00a      	beq.n	80069fa <vTaskDelete+0xde>
	__asm volatile
 80069e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e8:	f383 8811 	msr	BASEPRI, r3
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	60bb      	str	r3, [r7, #8]
}
 80069f6:	bf00      	nop
 80069f8:	e7fe      	b.n	80069f8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80069fa:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <vTaskDelete+0x11c>)
 80069fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a0a:	bf00      	nop
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	24000510 	.word	0x24000510
 8006a18:	24000514 	.word	0x24000514
 8006a1c:	24000604 	.word	0x24000604
 8006a20:	24000618 	.word	0x24000618
 8006a24:	240005e4 	.word	0x240005e4
 8006a28:	240005f8 	.word	0x240005f8
 8006a2c:	240005fc 	.word	0x240005fc
 8006a30:	24000608 	.word	0x24000608
 8006a34:	24000624 	.word	0x24000624
 8006a38:	e000ed04 	.word	0xe000ed04

08006a3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d017      	beq.n	8006a7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <vTaskDelay+0x60>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <vTaskDelay+0x30>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	60bb      	str	r3, [r7, #8]
}
 8006a68:	bf00      	nop
 8006a6a:	e7fe      	b.n	8006a6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a6c:	f000 f8b0 	bl	8006bd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a70:	2100      	movs	r1, #0
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fff6 	bl	8007a64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a78:	f000 f8b8 	bl	8006bec <xTaskResumeAll>
 8006a7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d107      	bne.n	8006a94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <vTaskDelay+0x64>)
 8006a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a8a:	601a      	str	r2, [r3, #0]
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a94:	bf00      	nop
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	24000624 	.word	0x24000624
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b088      	sub	sp, #32
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <eTaskGetState+0x28>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	60bb      	str	r3, [r7, #8]
}
 8006ac8:	bf00      	nop
 8006aca:	e7fe      	b.n	8006aca <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8006acc:	4b18      	ldr	r3, [pc, #96]	; (8006b30 <eTaskGetState+0x8c>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d102      	bne.n	8006adc <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	77fb      	strb	r3, [r7, #31]
 8006ada:	e023      	b.n	8006b24 <eTaskGetState+0x80>
		}
		else
		{
			taskENTER_CRITICAL();
 8006adc:	f001 fe0a 	bl	80086f4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006ae6:	4b13      	ldr	r3, [pc, #76]	; (8006b34 <eTaskGetState+0x90>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8006aec:	4b12      	ldr	r3, [pc, #72]	; (8006b38 <eTaskGetState+0x94>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006af2:	f001 fe2f 	bl	8008754 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d003      	beq.n	8006b06 <eTaskGetState+0x62>
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d102      	bne.n	8006b0c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006b06:	2302      	movs	r3, #2
 8006b08:	77fb      	strb	r3, [r7, #31]
 8006b0a:	e00b      	b.n	8006b24 <eTaskGetState+0x80>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	4a0b      	ldr	r2, [pc, #44]	; (8006b3c <eTaskGetState+0x98>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d002      	beq.n	8006b1a <eTaskGetState+0x76>
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d102      	bne.n	8006b20 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006b1a:	2304      	movs	r3, #4
 8006b1c:	77fb      	strb	r3, [r7, #31]
 8006b1e:	e001      	b.n	8006b24 <eTaskGetState+0x80>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006b20:	2301      	movs	r3, #1
 8006b22:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006b24:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006b26:	4618      	mov	r0, r3
 8006b28:	3720      	adds	r7, #32
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}
 8006b2e:	bf00      	nop
 8006b30:	24000510 	.word	0x24000510
 8006b34:	240005c8 	.word	0x240005c8
 8006b38:	240005cc 	.word	0x240005cc
 8006b3c:	240005e4 	.word	0x240005e4

08006b40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b086      	sub	sp, #24
 8006b44:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006b46:	4b1c      	ldr	r3, [pc, #112]	; (8006bb8 <vTaskStartScheduler+0x78>)
 8006b48:	9301      	str	r3, [sp, #4]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	9300      	str	r3, [sp, #0]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2280      	movs	r2, #128	; 0x80
 8006b52:	491a      	ldr	r1, [pc, #104]	; (8006bbc <vTaskStartScheduler+0x7c>)
 8006b54:	481a      	ldr	r0, [pc, #104]	; (8006bc0 <vTaskStartScheduler+0x80>)
 8006b56:	f7ff fda3 	bl	80066a0 <xTaskCreate>
 8006b5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d116      	bne.n	8006b90 <vTaskStartScheduler+0x50>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	60bb      	str	r3, [r7, #8]
}
 8006b74:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b76:	4b13      	ldr	r3, [pc, #76]	; (8006bc4 <vTaskStartScheduler+0x84>)
 8006b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b7e:	4b12      	ldr	r3, [pc, #72]	; (8006bc8 <vTaskStartScheduler+0x88>)
 8006b80:	2201      	movs	r2, #1
 8006b82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b84:	4b11      	ldr	r3, [pc, #68]	; (8006bcc <vTaskStartScheduler+0x8c>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b8a:	f001 fd11 	bl	80085b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b8e:	e00e      	b.n	8006bae <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b96:	d10a      	bne.n	8006bae <vTaskStartScheduler+0x6e>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	607b      	str	r3, [r7, #4]
}
 8006baa:	bf00      	nop
 8006bac:	e7fe      	b.n	8006bac <vTaskStartScheduler+0x6c>
}
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	24000620 	.word	0x24000620
 8006bbc:	0801adac 	.word	0x0801adac
 8006bc0:	08007289 	.word	0x08007289
 8006bc4:	2400061c 	.word	0x2400061c
 8006bc8:	24000608 	.word	0x24000608
 8006bcc:	24000600 	.word	0x24000600

08006bd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006bd4:	4b04      	ldr	r3, [pc, #16]	; (8006be8 <vTaskSuspendAll+0x18>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	4a03      	ldr	r2, [pc, #12]	; (8006be8 <vTaskSuspendAll+0x18>)
 8006bdc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006bde:	bf00      	nop
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	24000624 	.word	0x24000624

08006bec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bfa:	4b41      	ldr	r3, [pc, #260]	; (8006d00 <xTaskResumeAll+0x114>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <xTaskResumeAll+0x2c>
	__asm volatile
 8006c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c06:	f383 8811 	msr	BASEPRI, r3
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	f3bf 8f4f 	dsb	sy
 8006c12:	603b      	str	r3, [r7, #0]
}
 8006c14:	bf00      	nop
 8006c16:	e7fe      	b.n	8006c16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c18:	f001 fd6c 	bl	80086f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c1c:	4b38      	ldr	r3, [pc, #224]	; (8006d00 <xTaskResumeAll+0x114>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3b01      	subs	r3, #1
 8006c22:	4a37      	ldr	r2, [pc, #220]	; (8006d00 <xTaskResumeAll+0x114>)
 8006c24:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c26:	4b36      	ldr	r3, [pc, #216]	; (8006d00 <xTaskResumeAll+0x114>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d161      	bne.n	8006cf2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c2e:	4b35      	ldr	r3, [pc, #212]	; (8006d04 <xTaskResumeAll+0x118>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d05d      	beq.n	8006cf2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c36:	e02e      	b.n	8006c96 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c38:	4b33      	ldr	r3, [pc, #204]	; (8006d08 <xTaskResumeAll+0x11c>)
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	3318      	adds	r3, #24
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe fd9d 	bl	8005784 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe fd98 	bl	8005784 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	2201      	movs	r2, #1
 8006c5a:	409a      	lsls	r2, r3
 8006c5c:	4b2b      	ldr	r3, [pc, #172]	; (8006d0c <xTaskResumeAll+0x120>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	4a2a      	ldr	r2, [pc, #168]	; (8006d0c <xTaskResumeAll+0x120>)
 8006c64:	6013      	str	r3, [r2, #0]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c6a:	4613      	mov	r3, r2
 8006c6c:	009b      	lsls	r3, r3, #2
 8006c6e:	4413      	add	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4a27      	ldr	r2, [pc, #156]	; (8006d10 <xTaskResumeAll+0x124>)
 8006c74:	441a      	add	r2, r3
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	3304      	adds	r3, #4
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	4610      	mov	r0, r2
 8006c7e:	f7fe fd24 	bl	80056ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c86:	4b23      	ldr	r3, [pc, #140]	; (8006d14 <xTaskResumeAll+0x128>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d302      	bcc.n	8006c96 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006c90:	4b21      	ldr	r3, [pc, #132]	; (8006d18 <xTaskResumeAll+0x12c>)
 8006c92:	2201      	movs	r2, #1
 8006c94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c96:	4b1c      	ldr	r3, [pc, #112]	; (8006d08 <xTaskResumeAll+0x11c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1cc      	bne.n	8006c38 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ca4:	f000 fc46 	bl	8007534 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ca8:	4b1c      	ldr	r3, [pc, #112]	; (8006d1c <xTaskResumeAll+0x130>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d010      	beq.n	8006cd6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006cb4:	f000 f8d2 	bl	8006e5c <xTaskIncrementTick>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d002      	beq.n	8006cc4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006cbe:	4b16      	ldr	r3, [pc, #88]	; (8006d18 <xTaskResumeAll+0x12c>)
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3b01      	subs	r3, #1
 8006cc8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1f1      	bne.n	8006cb4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006cd0:	4b12      	ldr	r3, [pc, #72]	; (8006d1c <xTaskResumeAll+0x130>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cd6:	4b10      	ldr	r3, [pc, #64]	; (8006d18 <xTaskResumeAll+0x12c>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d009      	beq.n	8006cf2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006ce2:	4b0f      	ldr	r3, [pc, #60]	; (8006d20 <xTaskResumeAll+0x134>)
 8006ce4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	f3bf 8f4f 	dsb	sy
 8006cee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cf2:	f001 fd2f 	bl	8008754 <vPortExitCritical>

	return xAlreadyYielded;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	24000624 	.word	0x24000624
 8006d04:	240005fc 	.word	0x240005fc
 8006d08:	240005d0 	.word	0x240005d0
 8006d0c:	24000604 	.word	0x24000604
 8006d10:	24000514 	.word	0x24000514
 8006d14:	24000510 	.word	0x24000510
 8006d18:	24000610 	.word	0x24000610
 8006d1c:	2400060c 	.word	0x2400060c
 8006d20:	e000ed04 	.word	0xe000ed04

08006d24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d2a:	4b05      	ldr	r3, [pc, #20]	; (8006d40 <xTaskGetTickCount+0x1c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d30:	687b      	ldr	r3, [r7, #4]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop
 8006d40:	24000600 	.word	0x24000600

08006d44 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d4a:	f001 fdb5 	bl	80088b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006d4e:	2300      	movs	r3, #0
 8006d50:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006d52:	4b04      	ldr	r3, [pc, #16]	; (8006d64 <xTaskGetTickCountFromISR+0x20>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d58:	683b      	ldr	r3, [r7, #0]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	24000600 	.word	0x24000600

08006d68 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8006d74:	2300      	movs	r3, #0
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	2307      	movs	r3, #7
 8006d7a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8006d7c:	f7ff ff28 	bl	8006bd0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8006d80:	4b31      	ldr	r3, [pc, #196]	; (8006e48 <uxTaskGetSystemState+0xe0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d357      	bcc.n	8006e3a <uxTaskGetSystemState+0xd2>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4613      	mov	r3, r2
 8006d94:	00db      	lsls	r3, r3, #3
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	461a      	mov	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	1898      	adds	r0, r3, r2
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4a28      	ldr	r2, [pc, #160]	; (8006e4c <uxTaskGetSystemState+0xe4>)
 8006dac:	4413      	add	r3, r2
 8006dae:	2201      	movs	r2, #1
 8006db0:	4619      	mov	r1, r3
 8006db2:	f000 fb41 	bl	8007438 <prvListTasksWithinSingleList>
 8006db6:	4602      	mov	r2, r0
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	4413      	add	r3, r2
 8006dbc:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e2      	bne.n	8006d8a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	461a      	mov	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	4a1e      	ldr	r2, [pc, #120]	; (8006e50 <uxTaskGetSystemState+0xe8>)
 8006dd6:	6811      	ldr	r1, [r2, #0]
 8006dd8:	2202      	movs	r2, #2
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fb2c 	bl	8007438 <prvListTasksWithinSingleList>
 8006de0:	4602      	mov	r2, r0
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	4413      	add	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	4613      	mov	r3, r2
 8006dec:	00db      	lsls	r3, r3, #3
 8006dee:	4413      	add	r3, r2
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	461a      	mov	r2, r3
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	4a16      	ldr	r2, [pc, #88]	; (8006e54 <uxTaskGetSystemState+0xec>)
 8006dfa:	6811      	ldr	r1, [r2, #0]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fb1a 	bl	8007438 <prvListTasksWithinSingleList>
 8006e04:	4602      	mov	r2, r0
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	4413      	add	r3, r2
 8006e0a:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8006e0c:	697a      	ldr	r2, [r7, #20]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	00db      	lsls	r3, r3, #3
 8006e12:	4413      	add	r3, r2
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	461a      	mov	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	490e      	ldr	r1, [pc, #56]	; (8006e58 <uxTaskGetSystemState+0xf0>)
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 fb09 	bl	8007438 <prvListTasksWithinSingleList>
 8006e26:	4602      	mov	r2, r0
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d002      	beq.n	8006e3a <uxTaskGetSystemState+0xd2>
					{
						*pulTotalRunTime = 0;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8006e3a:	f7ff fed7 	bl	8006bec <xTaskResumeAll>

		return uxTask;
 8006e3e:	697b      	ldr	r3, [r7, #20]
	}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3718      	adds	r7, #24
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	240005fc 	.word	0x240005fc
 8006e4c:	24000514 	.word	0x24000514
 8006e50:	240005c8 	.word	0x240005c8
 8006e54:	240005cc 	.word	0x240005cc
 8006e58:	240005e4 	.word	0x240005e4

08006e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b086      	sub	sp, #24
 8006e60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e66:	4b4e      	ldr	r3, [pc, #312]	; (8006fa0 <xTaskIncrementTick+0x144>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 808e 	bne.w	8006f8c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e70:	4b4c      	ldr	r3, [pc, #304]	; (8006fa4 <xTaskIncrementTick+0x148>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3301      	adds	r3, #1
 8006e76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e78:	4a4a      	ldr	r2, [pc, #296]	; (8006fa4 <xTaskIncrementTick+0x148>)
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e7e:	693b      	ldr	r3, [r7, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d120      	bne.n	8006ec6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e84:	4b48      	ldr	r3, [pc, #288]	; (8006fa8 <xTaskIncrementTick+0x14c>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00a      	beq.n	8006ea4 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	603b      	str	r3, [r7, #0]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <xTaskIncrementTick+0x46>
 8006ea4:	4b40      	ldr	r3, [pc, #256]	; (8006fa8 <xTaskIncrementTick+0x14c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	4b40      	ldr	r3, [pc, #256]	; (8006fac <xTaskIncrementTick+0x150>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a3e      	ldr	r2, [pc, #248]	; (8006fa8 <xTaskIncrementTick+0x14c>)
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	4a3e      	ldr	r2, [pc, #248]	; (8006fac <xTaskIncrementTick+0x150>)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6013      	str	r3, [r2, #0]
 8006eb8:	4b3d      	ldr	r3, [pc, #244]	; (8006fb0 <xTaskIncrementTick+0x154>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	4a3c      	ldr	r2, [pc, #240]	; (8006fb0 <xTaskIncrementTick+0x154>)
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	f000 fb37 	bl	8007534 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006ec6:	4b3b      	ldr	r3, [pc, #236]	; (8006fb4 <xTaskIncrementTick+0x158>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d348      	bcc.n	8006f62 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ed0:	4b35      	ldr	r3, [pc, #212]	; (8006fa8 <xTaskIncrementTick+0x14c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d104      	bne.n	8006ee4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eda:	4b36      	ldr	r3, [pc, #216]	; (8006fb4 <xTaskIncrementTick+0x158>)
 8006edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ee0:	601a      	str	r2, [r3, #0]
					break;
 8006ee2:	e03e      	b.n	8006f62 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ee4:	4b30      	ldr	r3, [pc, #192]	; (8006fa8 <xTaskIncrementTick+0x14c>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d203      	bcs.n	8006f04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006efc:	4a2d      	ldr	r2, [pc, #180]	; (8006fb4 <xTaskIncrementTick+0x158>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f02:	e02e      	b.n	8006f62 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	3304      	adds	r3, #4
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe fc3b 	bl	8005784 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d004      	beq.n	8006f20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	3318      	adds	r3, #24
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fe fc32 	bl	8005784 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	2201      	movs	r2, #1
 8006f26:	409a      	lsls	r2, r3
 8006f28:	4b23      	ldr	r3, [pc, #140]	; (8006fb8 <xTaskIncrementTick+0x15c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	4a22      	ldr	r2, [pc, #136]	; (8006fb8 <xTaskIncrementTick+0x15c>)
 8006f30:	6013      	str	r3, [r2, #0]
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f36:	4613      	mov	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4a1f      	ldr	r2, [pc, #124]	; (8006fbc <xTaskIncrementTick+0x160>)
 8006f40:	441a      	add	r2, r3
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	3304      	adds	r3, #4
 8006f46:	4619      	mov	r1, r3
 8006f48:	4610      	mov	r0, r2
 8006f4a:	f7fe fbbe 	bl	80056ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f52:	4b1b      	ldr	r3, [pc, #108]	; (8006fc0 <xTaskIncrementTick+0x164>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d3b9      	bcc.n	8006ed0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f60:	e7b6      	b.n	8006ed0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f62:	4b17      	ldr	r3, [pc, #92]	; (8006fc0 <xTaskIncrementTick+0x164>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f68:	4914      	ldr	r1, [pc, #80]	; (8006fbc <xTaskIncrementTick+0x160>)
 8006f6a:	4613      	mov	r3, r2
 8006f6c:	009b      	lsls	r3, r3, #2
 8006f6e:	4413      	add	r3, r2
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	440b      	add	r3, r1
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d901      	bls.n	8006f7e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f7e:	4b11      	ldr	r3, [pc, #68]	; (8006fc4 <xTaskIncrementTick+0x168>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d007      	beq.n	8006f96 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006f86:	2301      	movs	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]
 8006f8a:	e004      	b.n	8006f96 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f8c:	4b0e      	ldr	r3, [pc, #56]	; (8006fc8 <xTaskIncrementTick+0x16c>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3301      	adds	r3, #1
 8006f92:	4a0d      	ldr	r2, [pc, #52]	; (8006fc8 <xTaskIncrementTick+0x16c>)
 8006f94:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f96:	697b      	ldr	r3, [r7, #20]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	24000624 	.word	0x24000624
 8006fa4:	24000600 	.word	0x24000600
 8006fa8:	240005c8 	.word	0x240005c8
 8006fac:	240005cc 	.word	0x240005cc
 8006fb0:	24000614 	.word	0x24000614
 8006fb4:	2400061c 	.word	0x2400061c
 8006fb8:	24000604 	.word	0x24000604
 8006fbc:	24000514 	.word	0x24000514
 8006fc0:	24000510 	.word	0x24000510
 8006fc4:	24000610 	.word	0x24000610
 8006fc8:	2400060c 	.word	0x2400060c

08006fcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fd2:	4b27      	ldr	r3, [pc, #156]	; (8007070 <vTaskSwitchContext+0xa4>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d003      	beq.n	8006fe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fda:	4b26      	ldr	r3, [pc, #152]	; (8007074 <vTaskSwitchContext+0xa8>)
 8006fdc:	2201      	movs	r2, #1
 8006fde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fe0:	e03f      	b.n	8007062 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006fe2:	4b24      	ldr	r3, [pc, #144]	; (8007074 <vTaskSwitchContext+0xa8>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe8:	4b23      	ldr	r3, [pc, #140]	; (8007078 <vTaskSwitchContext+0xac>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	fab3 f383 	clz	r3, r3
 8006ff4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006ff6:	7afb      	ldrb	r3, [r7, #11]
 8006ff8:	f1c3 031f 	rsb	r3, r3, #31
 8006ffc:	617b      	str	r3, [r7, #20]
 8006ffe:	491f      	ldr	r1, [pc, #124]	; (800707c <vTaskSwitchContext+0xb0>)
 8007000:	697a      	ldr	r2, [r7, #20]
 8007002:	4613      	mov	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	440b      	add	r3, r1
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10a      	bne.n	8007028 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	607b      	str	r3, [r7, #4]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <vTaskSwitchContext+0x5a>
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4a12      	ldr	r2, [pc, #72]	; (800707c <vTaskSwitchContext+0xb0>)
 8007034:	4413      	add	r3, r2
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	685a      	ldr	r2, [r3, #4]
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	605a      	str	r2, [r3, #4]
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	685a      	ldr	r2, [r3, #4]
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	3308      	adds	r3, #8
 800704a:	429a      	cmp	r2, r3
 800704c:	d104      	bne.n	8007058 <vTaskSwitchContext+0x8c>
 800704e:	693b      	ldr	r3, [r7, #16]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	605a      	str	r2, [r3, #4]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	4a08      	ldr	r2, [pc, #32]	; (8007080 <vTaskSwitchContext+0xb4>)
 8007060:	6013      	str	r3, [r2, #0]
}
 8007062:	bf00      	nop
 8007064:	371c      	adds	r7, #28
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	24000624 	.word	0x24000624
 8007074:	24000610 	.word	0x24000610
 8007078:	24000604 	.word	0x24000604
 800707c:	24000514 	.word	0x24000514
 8007080:	24000510 	.word	0x24000510

08007084 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60fb      	str	r3, [r7, #12]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070aa:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <vTaskPlaceOnEventList+0x44>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3318      	adds	r3, #24
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fe fb2d 	bl	8005712 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070b8:	2101      	movs	r1, #1
 80070ba:	6838      	ldr	r0, [r7, #0]
 80070bc:	f000 fcd2 	bl	8007a64 <prvAddCurrentTaskToDelayedList>
}
 80070c0:	bf00      	nop
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	24000510 	.word	0x24000510

080070cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10a      	bne.n	80070f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	60fb      	str	r3, [r7, #12]
}
 80070f4:	bf00      	nop
 80070f6:	e7fe      	b.n	80070f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	3318      	adds	r3, #24
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe fb41 	bl	8005784 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007102:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <xTaskRemoveFromEventList+0xac>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d11c      	bne.n	8007144 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	3304      	adds	r3, #4
 800710e:	4618      	mov	r0, r3
 8007110:	f7fe fb38 	bl	8005784 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	2201      	movs	r2, #1
 800711a:	409a      	lsls	r2, r3
 800711c:	4b17      	ldr	r3, [pc, #92]	; (800717c <xTaskRemoveFromEventList+0xb0>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4313      	orrs	r3, r2
 8007122:	4a16      	ldr	r2, [pc, #88]	; (800717c <xTaskRemoveFromEventList+0xb0>)
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800712a:	4613      	mov	r3, r2
 800712c:	009b      	lsls	r3, r3, #2
 800712e:	4413      	add	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4a13      	ldr	r2, [pc, #76]	; (8007180 <xTaskRemoveFromEventList+0xb4>)
 8007134:	441a      	add	r2, r3
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	3304      	adds	r3, #4
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f7fe fac4 	bl	80056ca <vListInsertEnd>
 8007142:	e005      	b.n	8007150 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	3318      	adds	r3, #24
 8007148:	4619      	mov	r1, r3
 800714a:	480e      	ldr	r0, [pc, #56]	; (8007184 <xTaskRemoveFromEventList+0xb8>)
 800714c:	f7fe fabd 	bl	80056ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007154:	4b0c      	ldr	r3, [pc, #48]	; (8007188 <xTaskRemoveFromEventList+0xbc>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715a:	429a      	cmp	r2, r3
 800715c:	d905      	bls.n	800716a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800715e:	2301      	movs	r3, #1
 8007160:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007162:	4b0a      	ldr	r3, [pc, #40]	; (800718c <xTaskRemoveFromEventList+0xc0>)
 8007164:	2201      	movs	r2, #1
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e001      	b.n	800716e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800716a:	2300      	movs	r3, #0
 800716c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800716e:	697b      	ldr	r3, [r7, #20]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	24000624 	.word	0x24000624
 800717c:	24000604 	.word	0x24000604
 8007180:	24000514 	.word	0x24000514
 8007184:	240005d0 	.word	0x240005d0
 8007188:	24000510 	.word	0x24000510
 800718c:	24000610 	.word	0x24000610

08007190 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007198:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <vTaskInternalSetTimeOutState+0x24>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <vTaskInternalSetTimeOutState+0x28>)
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	605a      	str	r2, [r3, #4]
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	24000614 	.word	0x24000614
 80071b8:	24000600 	.word	0x24000600

080071bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10a      	bne.n	80071e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	613b      	str	r3, [r7, #16]
}
 80071de:	bf00      	nop
 80071e0:	e7fe      	b.n	80071e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10a      	bne.n	80071fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	f383 8811 	msr	BASEPRI, r3
 80071f0:	f3bf 8f6f 	isb	sy
 80071f4:	f3bf 8f4f 	dsb	sy
 80071f8:	60fb      	str	r3, [r7, #12]
}
 80071fa:	bf00      	nop
 80071fc:	e7fe      	b.n	80071fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80071fe:	f001 fa79 	bl	80086f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007202:	4b19      	ldr	r3, [pc, #100]	; (8007268 <xTaskCheckForTimeOut+0xac>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	4b15      	ldr	r3, [pc, #84]	; (800726c <xTaskCheckForTimeOut+0xb0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d007      	beq.n	800722e <xTaskCheckForTimeOut+0x72>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	69ba      	ldr	r2, [r7, #24]
 8007224:	429a      	cmp	r2, r3
 8007226:	d302      	bcc.n	800722e <xTaskCheckForTimeOut+0x72>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007228:	2301      	movs	r3, #1
 800722a:	61fb      	str	r3, [r7, #28]
 800722c:	e015      	b.n	800725a <xTaskCheckForTimeOut+0x9e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	429a      	cmp	r2, r3
 8007236:	d20b      	bcs.n	8007250 <xTaskCheckForTimeOut+0x94>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f7ff ffa3 	bl	8007190 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800724a:	2300      	movs	r3, #0
 800724c:	61fb      	str	r3, [r7, #28]
 800724e:	e004      	b.n	800725a <xTaskCheckForTimeOut+0x9e>
		}
		else
		{
			*pxTicksToWait = 0;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007256:	2301      	movs	r3, #1
 8007258:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800725a:	f001 fa7b 	bl	8008754 <vPortExitCritical>

	return xReturn;
 800725e:	69fb      	ldr	r3, [r7, #28]
}
 8007260:	4618      	mov	r0, r3
 8007262:	3720      	adds	r7, #32
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	24000600 	.word	0x24000600
 800726c:	24000614 	.word	0x24000614

08007270 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007270:	b480      	push	{r7}
 8007272:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007274:	4b03      	ldr	r3, [pc, #12]	; (8007284 <vTaskMissedYield+0x14>)
 8007276:	2201      	movs	r2, #1
 8007278:	601a      	str	r2, [r3, #0]
}
 800727a:	bf00      	nop
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	24000610 	.word	0x24000610

08007288 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007290:	f000 f84c 	bl	800732c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007294:	4b06      	ldr	r3, [pc, #24]	; (80072b0 <prvIdleTask+0x28>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d9f9      	bls.n	8007290 <prvIdleTask+0x8>
			{
				taskYIELD();
 800729c:	4b05      	ldr	r3, [pc, #20]	; (80072b4 <prvIdleTask+0x2c>)
 800729e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a2:	601a      	str	r2, [r3, #0]
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072ac:	e7f0      	b.n	8007290 <prvIdleTask+0x8>
 80072ae:	bf00      	nop
 80072b0:	24000514 	.word	0x24000514
 80072b4:	e000ed04 	.word	0xe000ed04

080072b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072be:	2300      	movs	r3, #0
 80072c0:	607b      	str	r3, [r7, #4]
 80072c2:	e00c      	b.n	80072de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	4a10      	ldr	r2, [pc, #64]	; (8007310 <prvInitialiseTaskLists+0x58>)
 80072d0:	4413      	add	r3, r2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f7fe f9cc 	bl	8005670 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3301      	adds	r3, #1
 80072dc:	607b      	str	r3, [r7, #4]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2b06      	cmp	r3, #6
 80072e2:	d9ef      	bls.n	80072c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072e4:	480b      	ldr	r0, [pc, #44]	; (8007314 <prvInitialiseTaskLists+0x5c>)
 80072e6:	f7fe f9c3 	bl	8005670 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072ea:	480b      	ldr	r0, [pc, #44]	; (8007318 <prvInitialiseTaskLists+0x60>)
 80072ec:	f7fe f9c0 	bl	8005670 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072f0:	480a      	ldr	r0, [pc, #40]	; (800731c <prvInitialiseTaskLists+0x64>)
 80072f2:	f7fe f9bd 	bl	8005670 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072f6:	480a      	ldr	r0, [pc, #40]	; (8007320 <prvInitialiseTaskLists+0x68>)
 80072f8:	f7fe f9ba 	bl	8005670 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072fc:	4b09      	ldr	r3, [pc, #36]	; (8007324 <prvInitialiseTaskLists+0x6c>)
 80072fe:	4a05      	ldr	r2, [pc, #20]	; (8007314 <prvInitialiseTaskLists+0x5c>)
 8007300:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007302:	4b09      	ldr	r3, [pc, #36]	; (8007328 <prvInitialiseTaskLists+0x70>)
 8007304:	4a04      	ldr	r2, [pc, #16]	; (8007318 <prvInitialiseTaskLists+0x60>)
 8007306:	601a      	str	r2, [r3, #0]
}
 8007308:	bf00      	nop
 800730a:	3708      	adds	r7, #8
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}
 8007310:	24000514 	.word	0x24000514
 8007314:	240005a0 	.word	0x240005a0
 8007318:	240005b4 	.word	0x240005b4
 800731c:	240005d0 	.word	0x240005d0
 8007320:	240005e4 	.word	0x240005e4
 8007324:	240005c8 	.word	0x240005c8
 8007328:	240005cc 	.word	0x240005cc

0800732c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007332:	e019      	b.n	8007368 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007334:	f001 f9de 	bl	80086f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007338:	4b10      	ldr	r3, [pc, #64]	; (800737c <prvCheckTasksWaitingTermination+0x50>)
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3304      	adds	r3, #4
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fa1d 	bl	8005784 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800734a:	4b0d      	ldr	r3, [pc, #52]	; (8007380 <prvCheckTasksWaitingTermination+0x54>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3b01      	subs	r3, #1
 8007350:	4a0b      	ldr	r2, [pc, #44]	; (8007380 <prvCheckTasksWaitingTermination+0x54>)
 8007352:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007354:	4b0b      	ldr	r3, [pc, #44]	; (8007384 <prvCheckTasksWaitingTermination+0x58>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3b01      	subs	r3, #1
 800735a:	4a0a      	ldr	r2, [pc, #40]	; (8007384 <prvCheckTasksWaitingTermination+0x58>)
 800735c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800735e:	f001 f9f9 	bl	8008754 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f8d6 	bl	8007514 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007368:	4b06      	ldr	r3, [pc, #24]	; (8007384 <prvCheckTasksWaitingTermination+0x58>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d1e1      	bne.n	8007334 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007370:	bf00      	nop
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	240005e4 	.word	0x240005e4
 8007380:	240005fc 	.word	0x240005fc
 8007384:	240005f8 	.word	0x240005f8

08007388 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	607a      	str	r2, [r7, #4]
 8007394:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d102      	bne.n	80073a2 <vTaskGetInfo+0x1a>
 800739c:	4b25      	ldr	r3, [pc, #148]	; (8007434 <vTaskGetInfo+0xac>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	e000      	b.n	80073a4 <vTaskGetInfo+0x1c>
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	697a      	ldr	r2, [r7, #20]
 80073aa:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	2200      	movs	r2, #0
 80073da:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	2b05      	cmp	r3, #5
 80073e0:	d00c      	beq.n	80073fc <vTaskGetInfo+0x74>
		{
			if( pxTCB == pxCurrentTCB )
 80073e2:	4b14      	ldr	r3, [pc, #80]	; (8007434 <vTaskGetInfo+0xac>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d103      	bne.n	80073f4 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	2200      	movs	r2, #0
 80073f0:	731a      	strb	r2, [r3, #12]
 80073f2:	e00a      	b.n	800740a <vTaskGetInfo+0x82>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	731a      	strb	r2, [r3, #12]
 80073fa:	e006      	b.n	800740a <vTaskGetInfo+0x82>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80073fc:	6978      	ldr	r0, [r7, #20]
 80073fe:	f7ff fb51 	bl	8006aa4 <eTaskGetState>
 8007402:	4603      	mov	r3, r0
 8007404:	461a      	mov	r2, r3
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d009      	beq.n	8007424 <vTaskGetInfo+0x9c>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007414:	4618      	mov	r0, r3
 8007416:	f000 f861 	bl	80074dc <prvTaskCheckFreeStackSpace>
 800741a:	4603      	mov	r3, r0
 800741c:	461a      	mov	r2, r3
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8007422:	e002      	b.n	800742a <vTaskGetInfo+0xa2>
			pxTaskStatus->usStackHighWaterMark = 0;
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	2200      	movs	r2, #0
 8007428:	841a      	strh	r2, [r3, #32]
	}
 800742a:	bf00      	nop
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	24000510 	.word	0x24000510

08007438 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8007438:	b580      	push	{r7, lr}
 800743a:	b08a      	sub	sp, #40	; 0x28
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	4613      	mov	r3, r2
 8007444:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d03f      	beq.n	80074d2 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	623b      	str	r3, [r7, #32]
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	685b      	ldr	r3, [r3, #4]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	605a      	str	r2, [r3, #4]
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	6a3b      	ldr	r3, [r7, #32]
 8007466:	3308      	adds	r3, #8
 8007468:	429a      	cmp	r2, r3
 800746a:	d104      	bne.n	8007476 <prvListTasksWithinSingleList+0x3e>
 800746c:	6a3b      	ldr	r3, [r7, #32]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	6a3b      	ldr	r3, [r7, #32]
 8007474:	605a      	str	r2, [r3, #4]
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	61bb      	str	r3, [r7, #24]
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	605a      	str	r2, [r3, #4]
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	3308      	adds	r3, #8
 8007494:	429a      	cmp	r2, r3
 8007496:	d104      	bne.n	80074a2 <prvListTasksWithinSingleList+0x6a>
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	605a      	str	r2, [r3, #4]
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80074aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ac:	4613      	mov	r3, r2
 80074ae:	00db      	lsls	r3, r3, #3
 80074b0:	4413      	add	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	461a      	mov	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	1899      	adds	r1, r3, r2
 80074ba:	79fb      	ldrb	r3, [r7, #7]
 80074bc:	2201      	movs	r2, #1
 80074be:	6978      	ldr	r0, [r7, #20]
 80074c0:	f7ff ff62 	bl	8007388 <vTaskGetInfo>
				uxTask++;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c6:	3301      	adds	r3, #1
 80074c8:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d1d5      	bne.n	800747e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 80074d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3728      	adds	r7, #40	; 0x28
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80074e8:	e005      	b.n	80074f6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3301      	adds	r3, #1
 80074ee:	607b      	str	r3, [r7, #4]
			ulCount++;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	781b      	ldrb	r3, [r3, #0]
 80074fa:	2ba5      	cmp	r3, #165	; 0xa5
 80074fc:	d0f5      	beq.n	80074ea <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	089b      	lsrs	r3, r3, #2
 8007502:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	b29b      	uxth	r3, r3
	}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007520:	4618      	mov	r0, r3
 8007522:	f000 fe99 	bl	8008258 <vPortFree>
			vPortFree( pxTCB );
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 fe96 	bl	8008258 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800752c:	bf00      	nop
 800752e:	3708      	adds	r7, #8
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <prvResetNextTaskUnblockTime+0x38>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d104      	bne.n	800754e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007544:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <prvResetNextTaskUnblockTime+0x3c>)
 8007546:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800754a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800754c:	e008      	b.n	8007560 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800754e:	4b07      	ldr	r3, [pc, #28]	; (800756c <prvResetNextTaskUnblockTime+0x38>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68db      	ldr	r3, [r3, #12]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	4a04      	ldr	r2, [pc, #16]	; (8007570 <prvResetNextTaskUnblockTime+0x3c>)
 800755e:	6013      	str	r3, [r2, #0]
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	240005c8 	.word	0x240005c8
 8007570:	2400061c 	.word	0x2400061c

08007574 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800757a:	4b0b      	ldr	r3, [pc, #44]	; (80075a8 <xTaskGetSchedulerState+0x34>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d102      	bne.n	8007588 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007582:	2301      	movs	r3, #1
 8007584:	607b      	str	r3, [r7, #4]
 8007586:	e008      	b.n	800759a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007588:	4b08      	ldr	r3, [pc, #32]	; (80075ac <xTaskGetSchedulerState+0x38>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d102      	bne.n	8007596 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007590:	2302      	movs	r3, #2
 8007592:	607b      	str	r3, [r7, #4]
 8007594:	e001      	b.n	800759a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007596:	2300      	movs	r3, #0
 8007598:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800759a:	687b      	ldr	r3, [r7, #4]
	}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	24000608 	.word	0x24000608
 80075ac:	24000624 	.word	0x24000624

080075b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b084      	sub	sp, #16
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80075bc:	2300      	movs	r3, #0
 80075be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d05e      	beq.n	8007684 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ca:	4b31      	ldr	r3, [pc, #196]	; (8007690 <xTaskPriorityInherit+0xe0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d24e      	bcs.n	8007672 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	db06      	blt.n	80075ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075dc:	4b2c      	ldr	r3, [pc, #176]	; (8007690 <xTaskPriorityInherit+0xe0>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	f1c3 0207 	rsb	r2, r3, #7
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	6959      	ldr	r1, [r3, #20]
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075f2:	4613      	mov	r3, r2
 80075f4:	009b      	lsls	r3, r3, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	4a26      	ldr	r2, [pc, #152]	; (8007694 <xTaskPriorityInherit+0xe4>)
 80075fc:	4413      	add	r3, r2
 80075fe:	4299      	cmp	r1, r3
 8007600:	d12f      	bne.n	8007662 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	3304      	adds	r3, #4
 8007606:	4618      	mov	r0, r3
 8007608:	f7fe f8bc 	bl	8005784 <uxListRemove>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10a      	bne.n	8007628 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007616:	2201      	movs	r2, #1
 8007618:	fa02 f303 	lsl.w	r3, r2, r3
 800761c:	43da      	mvns	r2, r3
 800761e:	4b1e      	ldr	r3, [pc, #120]	; (8007698 <xTaskPriorityInherit+0xe8>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4013      	ands	r3, r2
 8007624:	4a1c      	ldr	r2, [pc, #112]	; (8007698 <xTaskPriorityInherit+0xe8>)
 8007626:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007628:	4b19      	ldr	r3, [pc, #100]	; (8007690 <xTaskPriorityInherit+0xe0>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007636:	2201      	movs	r2, #1
 8007638:	409a      	lsls	r2, r3
 800763a:	4b17      	ldr	r3, [pc, #92]	; (8007698 <xTaskPriorityInherit+0xe8>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4313      	orrs	r3, r2
 8007640:	4a15      	ldr	r2, [pc, #84]	; (8007698 <xTaskPriorityInherit+0xe8>)
 8007642:	6013      	str	r3, [r2, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4a10      	ldr	r2, [pc, #64]	; (8007694 <xTaskPriorityInherit+0xe4>)
 8007652:	441a      	add	r2, r3
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	3304      	adds	r3, #4
 8007658:	4619      	mov	r1, r3
 800765a:	4610      	mov	r0, r2
 800765c:	f7fe f835 	bl	80056ca <vListInsertEnd>
 8007660:	e004      	b.n	800766c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007662:	4b0b      	ldr	r3, [pc, #44]	; (8007690 <xTaskPriorityInherit+0xe0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800766c:	2301      	movs	r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	e008      	b.n	8007684 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007676:	4b06      	ldr	r3, [pc, #24]	; (8007690 <xTaskPriorityInherit+0xe0>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800767c:	429a      	cmp	r2, r3
 800767e:	d201      	bcs.n	8007684 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007684:	68fb      	ldr	r3, [r7, #12]
	}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	24000510 	.word	0x24000510
 8007694:	24000514 	.word	0x24000514
 8007698:	24000604 	.word	0x24000604

0800769c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076a8:	2300      	movs	r3, #0
 80076aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d06e      	beq.n	8007790 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076b2:	4b3a      	ldr	r3, [pc, #232]	; (800779c <xTaskPriorityDisinherit+0x100>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d00a      	beq.n	80076d2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	60fb      	str	r3, [r7, #12]
}
 80076ce:	bf00      	nop
 80076d0:	e7fe      	b.n	80076d0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076de:	f383 8811 	msr	BASEPRI, r3
 80076e2:	f3bf 8f6f 	isb	sy
 80076e6:	f3bf 8f4f 	dsb	sy
 80076ea:	60bb      	str	r3, [r7, #8]
}
 80076ec:	bf00      	nop
 80076ee:	e7fe      	b.n	80076ee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076f4:	1e5a      	subs	r2, r3, #1
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007702:	429a      	cmp	r2, r3
 8007704:	d044      	beq.n	8007790 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800770a:	2b00      	cmp	r3, #0
 800770c:	d140      	bne.n	8007790 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	3304      	adds	r3, #4
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe f836 	bl	8005784 <uxListRemove>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d115      	bne.n	800774a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007722:	491f      	ldr	r1, [pc, #124]	; (80077a0 <xTaskPriorityDisinherit+0x104>)
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	440b      	add	r3, r1
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10a      	bne.n	800774a <xTaskPriorityDisinherit+0xae>
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	2201      	movs	r2, #1
 800773a:	fa02 f303 	lsl.w	r3, r2, r3
 800773e:	43da      	mvns	r2, r3
 8007740:	4b18      	ldr	r3, [pc, #96]	; (80077a4 <xTaskPriorityDisinherit+0x108>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4013      	ands	r3, r2
 8007746:	4a17      	ldr	r2, [pc, #92]	; (80077a4 <xTaskPriorityDisinherit+0x108>)
 8007748:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007756:	f1c3 0207 	rsb	r2, r3, #7
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007762:	2201      	movs	r2, #1
 8007764:	409a      	lsls	r2, r3
 8007766:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <xTaskPriorityDisinherit+0x108>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4313      	orrs	r3, r2
 800776c:	4a0d      	ldr	r2, [pc, #52]	; (80077a4 <xTaskPriorityDisinherit+0x108>)
 800776e:	6013      	str	r3, [r2, #0]
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007774:	4613      	mov	r3, r2
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	4413      	add	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4a08      	ldr	r2, [pc, #32]	; (80077a0 <xTaskPriorityDisinherit+0x104>)
 800777e:	441a      	add	r2, r3
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	3304      	adds	r3, #4
 8007784:	4619      	mov	r1, r3
 8007786:	4610      	mov	r0, r2
 8007788:	f7fd ff9f 	bl	80056ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800778c:	2301      	movs	r3, #1
 800778e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007790:	697b      	ldr	r3, [r7, #20]
	}
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	24000510 	.word	0x24000510
 80077a0:	24000514 	.word	0x24000514
 80077a4:	24000604 	.word	0x24000604

080077a8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077b6:	2301      	movs	r3, #1
 80077b8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d077      	beq.n	80078b0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80077c0:	69bb      	ldr	r3, [r7, #24]
 80077c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	60fb      	str	r3, [r7, #12]
}
 80077da:	bf00      	nop
 80077dc:	e7fe      	b.n	80077dc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d902      	bls.n	80077ee <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	e002      	b.n	80077f4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	69fa      	ldr	r2, [r7, #28]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d058      	beq.n	80078b0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	429a      	cmp	r2, r3
 8007806:	d153      	bne.n	80078b0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007808:	4b2b      	ldr	r3, [pc, #172]	; (80078b8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	69ba      	ldr	r2, [r7, #24]
 800780e:	429a      	cmp	r2, r3
 8007810:	d10a      	bne.n	8007828 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	60bb      	str	r3, [r7, #8]
}
 8007824:	bf00      	nop
 8007826:	e7fe      	b.n	8007826 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	69fa      	ldr	r2, [r7, #28]
 8007832:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	db04      	blt.n	8007846 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	f1c3 0207 	rsb	r2, r3, #7
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	6959      	ldr	r1, [r3, #20]
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	4a19      	ldr	r2, [pc, #100]	; (80078bc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007856:	4413      	add	r3, r2
 8007858:	4299      	cmp	r1, r3
 800785a:	d129      	bne.n	80078b0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	3304      	adds	r3, #4
 8007860:	4618      	mov	r0, r3
 8007862:	f7fd ff8f 	bl	8005784 <uxListRemove>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d10a      	bne.n	8007882 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007870:	2201      	movs	r2, #1
 8007872:	fa02 f303 	lsl.w	r3, r2, r3
 8007876:	43da      	mvns	r2, r3
 8007878:	4b11      	ldr	r3, [pc, #68]	; (80078c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4013      	ands	r3, r2
 800787e:	4a10      	ldr	r2, [pc, #64]	; (80078c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007880:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007882:	69bb      	ldr	r3, [r7, #24]
 8007884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007886:	2201      	movs	r2, #1
 8007888:	409a      	lsls	r2, r3
 800788a:	4b0d      	ldr	r3, [pc, #52]	; (80078c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4313      	orrs	r3, r2
 8007890:	4a0b      	ldr	r2, [pc, #44]	; (80078c0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4a06      	ldr	r2, [pc, #24]	; (80078bc <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80078a2:	441a      	add	r2, r3
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	3304      	adds	r3, #4
 80078a8:	4619      	mov	r1, r3
 80078aa:	4610      	mov	r0, r2
 80078ac:	f7fd ff0d 	bl	80056ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078b0:	bf00      	nop
 80078b2:	3720      	adds	r7, #32
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	24000510 	.word	0x24000510
 80078bc:	24000514 	.word	0x24000514
 80078c0:	24000604 	.word	0x24000604

080078c4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80078ce:	6839      	ldr	r1, [r7, #0]
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f011 fbc2 	bl	801905a <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7f8 fd0c 	bl	80002f4 <strlen>
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	e007      	b.n	80078f0 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	4413      	add	r3, r2
 80078e6:	2220      	movs	r2, #32
 80078e8:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3301      	adds	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b0e      	cmp	r3, #14
 80078f4:	d9f4      	bls.n	80078e0 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	2200      	movs	r2, #0
 80078fe:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	4413      	add	r3, r2
	}
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8007910:	b590      	push	{r4, r7, lr}
 8007912:	b089      	sub	sp, #36	; 0x24
 8007914:	af02      	add	r7, sp, #8
 8007916:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800791e:	4b45      	ldr	r3, [pc, #276]	; (8007a34 <vTaskList+0x124>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8007924:	4b43      	ldr	r3, [pc, #268]	; (8007a34 <vTaskList+0x124>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	4613      	mov	r3, r2
 800792a:	00db      	lsls	r3, r3, #3
 800792c:	4413      	add	r3, r2
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	4618      	mov	r0, r3
 8007932:	f000 fbc5 	bl	80080c0 <pvPortMalloc>
 8007936:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d076      	beq.n	8007a2c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800793e:	2200      	movs	r2, #0
 8007940:	68f9      	ldr	r1, [r7, #12]
 8007942:	68b8      	ldr	r0, [r7, #8]
 8007944:	f7ff fa10 	bl	8006d68 <uxTaskGetSystemState>
 8007948:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	e066      	b.n	8007a1e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8007950:	697a      	ldr	r2, [r7, #20]
 8007952:	4613      	mov	r3, r2
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	4413      	add	r3, r2
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	461a      	mov	r2, r3
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	4413      	add	r3, r2
 8007960:	7b1b      	ldrb	r3, [r3, #12]
 8007962:	2b04      	cmp	r3, #4
 8007964:	d81b      	bhi.n	800799e <vTaskList+0x8e>
 8007966:	a201      	add	r2, pc, #4	; (adr r2, 800796c <vTaskList+0x5c>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	08007981 	.word	0x08007981
 8007970:	08007987 	.word	0x08007987
 8007974:	0800798d 	.word	0x0800798d
 8007978:	08007993 	.word	0x08007993
 800797c:	08007999 	.word	0x08007999
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8007980:	2358      	movs	r3, #88	; 0x58
 8007982:	74fb      	strb	r3, [r7, #19]
										break;
 8007984:	e00e      	b.n	80079a4 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8007986:	2352      	movs	r3, #82	; 0x52
 8007988:	74fb      	strb	r3, [r7, #19]
										break;
 800798a:	e00b      	b.n	80079a4 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800798c:	2342      	movs	r3, #66	; 0x42
 800798e:	74fb      	strb	r3, [r7, #19]
										break;
 8007990:	e008      	b.n	80079a4 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8007992:	2353      	movs	r3, #83	; 0x53
 8007994:	74fb      	strb	r3, [r7, #19]
										break;
 8007996:	e005      	b.n	80079a4 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8007998:	2344      	movs	r3, #68	; 0x44
 800799a:	74fb      	strb	r3, [r7, #19]
										break;
 800799c:	e002      	b.n	80079a4 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800799e:	2300      	movs	r3, #0
 80079a0:	74fb      	strb	r3, [r7, #19]
										break;
 80079a2:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 80079a4:	697a      	ldr	r2, [r7, #20]
 80079a6:	4613      	mov	r3, r2
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	4413      	add	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	461a      	mov	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	4413      	add	r3, r2
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7ff ff83 	bl	80078c4 <prvWriteNameToBuffer>
 80079be:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80079c0:	7cf9      	ldrb	r1, [r7, #19]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	4613      	mov	r3, r2
 80079c6:	00db      	lsls	r3, r3, #3
 80079c8:	4413      	add	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	461a      	mov	r2, r3
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	4413      	add	r3, r2
 80079d2:	6918      	ldr	r0, [r3, #16]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4613      	mov	r3, r2
 80079d8:	00db      	lsls	r3, r3, #3
 80079da:	4413      	add	r3, r2
 80079dc:	009b      	lsls	r3, r3, #2
 80079de:	461a      	mov	r2, r3
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	4413      	add	r3, r2
 80079e4:	8c1b      	ldrh	r3, [r3, #32]
 80079e6:	461c      	mov	r4, r3
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	4613      	mov	r3, r2
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	4413      	add	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	461a      	mov	r2, r3
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	4413      	add	r3, r2
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	9301      	str	r3, [sp, #4]
 80079fc:	9400      	str	r4, [sp, #0]
 80079fe:	4603      	mov	r3, r0
 8007a00:	460a      	mov	r2, r1
 8007a02:	490d      	ldr	r1, [pc, #52]	; (8007a38 <vTaskList+0x128>)
 8007a04:	6878      	ldr	r0, [r7, #4]
 8007a06:	f011 faf9 	bl	8018ffc <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7f8 fc72 	bl	80002f4 <strlen>
 8007a10:	4602      	mov	r2, r0
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	4413      	add	r3, r2
 8007a16:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	617b      	str	r3, [r7, #20]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d394      	bcc.n	8007950 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8007a26:	68b8      	ldr	r0, [r7, #8]
 8007a28:	f000 fc16 	bl	8008258 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a2c:	bf00      	nop
 8007a2e:	371c      	adds	r7, #28
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd90      	pop	{r4, r7, pc}
 8007a34:	240005fc 	.word	0x240005fc
 8007a38:	0801adb4 	.word	0x0801adb4

08007a3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a40:	4b07      	ldr	r3, [pc, #28]	; (8007a60 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d004      	beq.n	8007a52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a48:	4b05      	ldr	r3, [pc, #20]	; (8007a60 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a4e:	3201      	adds	r2, #1
 8007a50:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007a52:	4b03      	ldr	r3, [pc, #12]	; (8007a60 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a54:	681b      	ldr	r3, [r3, #0]
	}
 8007a56:	4618      	mov	r0, r3
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	24000510 	.word	0x24000510

08007a64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a6e:	4b21      	ldr	r3, [pc, #132]	; (8007af4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a74:	4b20      	ldr	r3, [pc, #128]	; (8007af8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fd fe82 	bl	8005784 <uxListRemove>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d10b      	bne.n	8007a9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a86:	4b1c      	ldr	r3, [pc, #112]	; (8007af8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	43da      	mvns	r2, r3
 8007a94:	4b19      	ldr	r3, [pc, #100]	; (8007afc <prvAddCurrentTaskToDelayedList+0x98>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4013      	ands	r3, r2
 8007a9a:	4a18      	ldr	r2, [pc, #96]	; (8007afc <prvAddCurrentTaskToDelayedList+0x98>)
 8007a9c:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007aa6:	4b14      	ldr	r3, [pc, #80]	; (8007af8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d209      	bcs.n	8007aca <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ab6:	4b12      	ldr	r3, [pc, #72]	; (8007b00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	4b0f      	ldr	r3, [pc, #60]	; (8007af8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	4610      	mov	r0, r2
 8007ac4:	f7fd fe25 	bl	8005712 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ac8:	e010      	b.n	8007aec <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aca:	4b0e      	ldr	r3, [pc, #56]	; (8007b04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	4610      	mov	r0, r2
 8007ad8:	f7fd fe1b 	bl	8005712 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8007adc:	4b0a      	ldr	r3, [pc, #40]	; (8007b08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	429a      	cmp	r2, r3
 8007ae4:	d202      	bcs.n	8007aec <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 8007ae6:	4a08      	ldr	r2, [pc, #32]	; (8007b08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	6013      	str	r3, [r2, #0]
}
 8007aec:	bf00      	nop
 8007aee:	3710      	adds	r7, #16
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	24000600 	.word	0x24000600
 8007af8:	24000510 	.word	0x24000510
 8007afc:	24000604 	.word	0x24000604
 8007b00:	240005cc 	.word	0x240005cc
 8007b04:	240005c8 	.word	0x240005c8
 8007b08:	2400061c 	.word	0x2400061c

08007b0c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	4603      	mov	r3, r0
 8007b14:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007b16:	2300      	movs	r3, #0
 8007b18:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b1e:	2b84      	cmp	r3, #132	; 0x84
 8007b20:	d005      	beq.n	8007b2e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007b22:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	4413      	add	r3, r2
 8007b2a:	3303      	adds	r3, #3
 8007b2c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3714      	adds	r7, #20
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b42:	f3ef 8305 	mrs	r3, IPSR
 8007b46:	607b      	str	r3, [r7, #4]
  return(result);
 8007b48:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	bf14      	ite	ne
 8007b4e:	2301      	movne	r3, #1
 8007b50:	2300      	moveq	r3, #0
 8007b52:	b2db      	uxtb	r3, r3
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b64:	f7fe ffec 	bl	8006b40 <vTaskStartScheduler>
  
  return osOK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	bd80      	pop	{r7, pc}

08007b6e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007b6e:	b580      	push	{r7, lr}
 8007b70:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007b72:	f7ff ffe3 	bl	8007b3c <inHandlerMode>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007b7c:	f7ff f8e2 	bl	8006d44 <xTaskGetTickCountFromISR>
 8007b80:	4603      	mov	r3, r0
 8007b82:	e002      	b.n	8007b8a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007b84:	f7ff f8ce 	bl	8006d24 <xTaskGetTickCount>
 8007b88:	4603      	mov	r3, r0
  }
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b90:	b087      	sub	sp, #28
 8007b92:	af02      	add	r7, sp, #8
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	685c      	ldr	r4, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ba4:	b29e      	uxth	r6, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7ff ffad 	bl	8007b0c <makeFreeRtosPriority>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	f107 030c 	add.w	r3, r7, #12
 8007bb8:	9301      	str	r3, [sp, #4]
 8007bba:	9200      	str	r2, [sp, #0]
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	4632      	mov	r2, r6
 8007bc0:	4629      	mov	r1, r5
 8007bc2:	4620      	mov	r0, r4
 8007bc4:	f7fe fd6c 	bl	80066a0 <xTaskCreate>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d001      	beq.n	8007bd2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e000      	b.n	8007bd4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bdc <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7fe fe99 	bl	800691c <vTaskDelete>
  return osOK;
 8007bea:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <osDelay+0x16>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	e000      	b.n	8007c0c <osDelay+0x18>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fe ff15 	bl	8006a3c <vTaskDelay>
  
  return osOK;
 8007c12:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8007c24:	2001      	movs	r0, #1
 8007c26:	f7fd feb2 	bl	800598e <xQueueCreateMutex>
 8007c2a:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007c3e:	2300      	movs	r3, #0
 8007c40:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <osMutexWait+0x18>
    return osErrorParameter;
 8007c48:	2380      	movs	r3, #128	; 0x80
 8007c4a:	e03a      	b.n	8007cc2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c56:	d103      	bne.n	8007c60 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007c58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	e009      	b.n	8007c74 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d006      	beq.n	8007c74 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <osMutexWait+0x40>
      ticks = 1;
 8007c70:	2301      	movs	r3, #1
 8007c72:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007c74:	f7ff ff62 	bl	8007b3c <inHandlerMode>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d017      	beq.n	8007cae <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007c7e:	f107 0308 	add.w	r3, r7, #8
 8007c82:	461a      	mov	r2, r3
 8007c84:	2100      	movs	r1, #0
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f7fe fade 	bl	8006248 <xQueueReceiveFromISR>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b01      	cmp	r3, #1
 8007c90:	d001      	beq.n	8007c96 <osMutexWait+0x62>
      return osErrorOS;
 8007c92:	23ff      	movs	r3, #255	; 0xff
 8007c94:	e015      	b.n	8007cc2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d011      	beq.n	8007cc0 <osMutexWait+0x8c>
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	; (8007ccc <osMutexWait+0x98>)
 8007c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca2:	601a      	str	r2, [r3, #0]
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	f3bf 8f6f 	isb	sy
 8007cac:	e008      	b.n	8007cc0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007cae:	68f9      	ldr	r1, [r7, #12]
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7fe f9bd 	bl	8006030 <xQueueSemaphoreTake>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d001      	beq.n	8007cc0 <osMutexWait+0x8c>
    return osErrorOS;
 8007cbc:	23ff      	movs	r3, #255	; 0xff
 8007cbe:	e000      	b.n	8007cc2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	e000ed04 	.word	0xe000ed04

08007cd0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007ce0:	f7ff ff2c 	bl	8007b3c <inHandlerMode>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d016      	beq.n	8007d18 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007cea:	f107 0308 	add.w	r3, r7, #8
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7fe f830 	bl	8005d56 <xQueueGiveFromISR>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d001      	beq.n	8007d00 <osMutexRelease+0x30>
      return osErrorOS;
 8007cfc:	23ff      	movs	r3, #255	; 0xff
 8007cfe:	e017      	b.n	8007d30 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d013      	beq.n	8007d2e <osMutexRelease+0x5e>
 8007d06:	4b0c      	ldr	r3, [pc, #48]	; (8007d38 <osMutexRelease+0x68>)
 8007d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	e00a      	b.n	8007d2e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007d18:	2300      	movs	r3, #0
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2100      	movs	r1, #0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f7fd fe80 	bl	8005a24 <xQueueGenericSend>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b01      	cmp	r3, #1
 8007d28:	d001      	beq.n	8007d2e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007d2a:	23ff      	movs	r3, #255	; 0xff
 8007d2c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3710      	adds	r7, #16
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}
 8007d38:	e000ed04 	.word	0xe000ed04

08007d3c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d110      	bne.n	8007d6e <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8007d4c:	2203      	movs	r2, #3
 8007d4e:	2100      	movs	r1, #0
 8007d50:	2001      	movs	r0, #1
 8007d52:	f7fd fda9 	bl	80058a8 <xQueueGenericCreate>
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d005      	beq.n	8007d6a <osSemaphoreCreate+0x2e>
 8007d5e:	2300      	movs	r3, #0
 8007d60:	2200      	movs	r2, #0
 8007d62:	2100      	movs	r1, #0
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7fd fe5d 	bl	8005a24 <xQueueGenericSend>
    return sema;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	e006      	b.n	8007d7c <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	4611      	mov	r1, r2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fd fe22 	bl	80059be <xQueueCreateCountingSemaphore>
 8007d7a:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3710      	adds	r7, #16
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}

08007d84 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007d8e:	2300      	movs	r3, #0
 8007d90:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d101      	bne.n	8007d9c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007d98:	2380      	movs	r3, #128	; 0x80
 8007d9a:	e03a      	b.n	8007e12 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007da6:	d103      	bne.n	8007db0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007da8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dac:	60fb      	str	r3, [r7, #12]
 8007dae:	e009      	b.n	8007dc4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d006      	beq.n	8007dc4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d101      	bne.n	8007dc4 <osSemaphoreWait+0x40>
      ticks = 1;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007dc4:	f7ff feba 	bl	8007b3c <inHandlerMode>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d017      	beq.n	8007dfe <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007dce:	f107 0308 	add.w	r3, r7, #8
 8007dd2:	461a      	mov	r2, r3
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f7fe fa36 	bl	8006248 <xQueueReceiveFromISR>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d001      	beq.n	8007de6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007de2:	23ff      	movs	r3, #255	; 0xff
 8007de4:	e015      	b.n	8007e12 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d011      	beq.n	8007e10 <osSemaphoreWait+0x8c>
 8007dec:	4b0b      	ldr	r3, [pc, #44]	; (8007e1c <osSemaphoreWait+0x98>)
 8007dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	e008      	b.n	8007e10 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007dfe:	68f9      	ldr	r1, [r7, #12]
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7fe f915 	bl	8006030 <xQueueSemaphoreTake>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d001      	beq.n	8007e10 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007e0c:	23ff      	movs	r3, #255	; 0xff
 8007e0e:	e000      	b.n	8007e12 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007e10:	2300      	movs	r3, #0
}
 8007e12:	4618      	mov	r0, r3
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	e000ed04 	.word	0xe000ed04

08007e20 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007e30:	f7ff fe84 	bl	8007b3c <inHandlerMode>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d016      	beq.n	8007e68 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007e3a:	f107 0308 	add.w	r3, r7, #8
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7fd ff88 	bl	8005d56 <xQueueGiveFromISR>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d001      	beq.n	8007e50 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007e4c:	23ff      	movs	r3, #255	; 0xff
 8007e4e:	e017      	b.n	8007e80 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d013      	beq.n	8007e7e <osSemaphoreRelease+0x5e>
 8007e56:	4b0c      	ldr	r3, [pc, #48]	; (8007e88 <osSemaphoreRelease+0x68>)
 8007e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e5c:	601a      	str	r2, [r3, #0]
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	e00a      	b.n	8007e7e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f7fd fdd8 	bl	8005a24 <xQueueGenericSend>
 8007e74:	4603      	mov	r3, r0
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d001      	beq.n	8007e7e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007e7a:	23ff      	movs	r3, #255	; 0xff
 8007e7c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
}
 8007e80:	4618      	mov	r0, r3
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}
 8007e88:	e000ed04 	.word	0xe000ed04

08007e8c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007e94:	f7ff fe52 	bl	8007b3c <inHandlerMode>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007e9e:	2382      	movs	r3, #130	; 0x82
 8007ea0:	e003      	b.n	8007eaa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7fe fa8c 	bl	80063c0 <vQueueDelete>

  return osOK; 
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b082      	sub	sp, #8
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6818      	ldr	r0, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	f7fd fcee 	bl	80058a8 <xQueueGenericCreate>
 8007ecc:	4603      	mov	r3, r0
#endif
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}
	...

08007ed8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d101      	bne.n	8007ef6 <osMessagePut+0x1e>
    ticks = 1;
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007ef6:	f7ff fe21 	bl	8007b3c <inHandlerMode>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d018      	beq.n	8007f32 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007f00:	f107 0210 	add.w	r2, r7, #16
 8007f04:	f107 0108 	add.w	r1, r7, #8
 8007f08:	2300      	movs	r3, #0
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f7fd fe88 	bl	8005c20 <xQueueGenericSendFromISR>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d001      	beq.n	8007f1a <osMessagePut+0x42>
      return osErrorOS;
 8007f16:	23ff      	movs	r3, #255	; 0xff
 8007f18:	e018      	b.n	8007f4c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d014      	beq.n	8007f4a <osMessagePut+0x72>
 8007f20:	4b0c      	ldr	r3, [pc, #48]	; (8007f54 <osMessagePut+0x7c>)
 8007f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	e00b      	b.n	8007f4a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007f32:	f107 0108 	add.w	r1, r7, #8
 8007f36:	2300      	movs	r3, #0
 8007f38:	697a      	ldr	r2, [r7, #20]
 8007f3a:	68f8      	ldr	r0, [r7, #12]
 8007f3c:	f7fd fd72 	bl	8005a24 <xQueueGenericSend>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d001      	beq.n	8007f4a <osMessagePut+0x72>
      return osErrorOS;
 8007f46:	23ff      	movs	r3, #255	; 0xff
 8007f48:	e000      	b.n	8007f4c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007f4a:	2300      	movs	r3, #0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	e000ed04 	.word	0xe000ed04

08007f58 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007f58:	b590      	push	{r4, r7, lr}
 8007f5a:	b08b      	sub	sp, #44	; 0x2c
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10a      	bne.n	8007f88 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007f72:	2380      	movs	r3, #128	; 0x80
 8007f74:	617b      	str	r3, [r7, #20]
    return event;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	461c      	mov	r4, r3
 8007f7a:	f107 0314 	add.w	r3, r7, #20
 8007f7e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f86:	e054      	b.n	8008032 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f96:	d103      	bne.n	8007fa0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f9e:	e009      	b.n	8007fb4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d006      	beq.n	8007fb4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d101      	bne.n	8007fb4 <osMessageGet+0x5c>
      ticks = 1;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007fb4:	f7ff fdc2 	bl	8007b3c <inHandlerMode>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d01c      	beq.n	8007ff8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007fbe:	f107 0220 	add.w	r2, r7, #32
 8007fc2:	f107 0314 	add.w	r3, r7, #20
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4619      	mov	r1, r3
 8007fca:	68b8      	ldr	r0, [r7, #8]
 8007fcc:	f7fe f93c 	bl	8006248 <xQueueReceiveFromISR>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d102      	bne.n	8007fdc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007fd6:	2310      	movs	r3, #16
 8007fd8:	617b      	str	r3, [r7, #20]
 8007fda:	e001      	b.n	8007fe0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007fdc:	2300      	movs	r3, #0
 8007fde:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d01d      	beq.n	8008022 <osMessageGet+0xca>
 8007fe6:	4b15      	ldr	r3, [pc, #84]	; (800803c <osMessageGet+0xe4>)
 8007fe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	f3bf 8f6f 	isb	sy
 8007ff6:	e014      	b.n	8008022 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007ff8:	f107 0314 	add.w	r3, r7, #20
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008000:	4619      	mov	r1, r3
 8008002:	68b8      	ldr	r0, [r7, #8]
 8008004:	f7fd ff34 	bl	8005e70 <xQueueReceive>
 8008008:	4603      	mov	r3, r0
 800800a:	2b01      	cmp	r3, #1
 800800c:	d102      	bne.n	8008014 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800800e:	2310      	movs	r3, #16
 8008010:	617b      	str	r3, [r7, #20]
 8008012:	e006      	b.n	8008022 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008016:	2b00      	cmp	r3, #0
 8008018:	d101      	bne.n	800801e <osMessageGet+0xc6>
 800801a:	2300      	movs	r3, #0
 800801c:	e000      	b.n	8008020 <osMessageGet+0xc8>
 800801e:	2340      	movs	r3, #64	; 0x40
 8008020:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	461c      	mov	r4, r3
 8008026:	f107 0314 	add.w	r3, r7, #20
 800802a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800802e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008032:	68f8      	ldr	r0, [r7, #12]
 8008034:	372c      	adds	r7, #44	; 0x2c
 8008036:	46bd      	mov	sp, r7
 8008038:	bd90      	pop	{r4, r7, pc}
 800803a:	bf00      	nop
 800803c:	e000ed04 	.word	0xe000ed04

08008040 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8008044:	f7ff fa96 	bl	8007574 <xTaskGetSchedulerState>
 8008048:	4603      	mov	r3, r0
 800804a:	2b01      	cmp	r3, #1
 800804c:	d001      	beq.n	8008052 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800804e:	f000 fbe3 	bl	8008818 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8008052:	bf00      	nop
 8008054:	bd80      	pop	{r7, pc}

08008056 <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b082      	sub	sp, #8
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7ff fc56 	bl	8007910 <vTaskList>
#endif
  return osOK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b082      	sub	sp, #8
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008076:	f7ff fd61 	bl	8007b3c <inHandlerMode>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d004      	beq.n	800808a <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7fe f97f 	bl	8006384 <uxQueueMessagesWaitingFromISR>
 8008086:	4603      	mov	r3, r0
 8008088:	e003      	b.n	8008092 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7fe f95c 	bl	8006348 <uxQueueMessagesWaiting>
 8008090:	4603      	mov	r3, r0
  }
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80080a2:	f7ff fd4b 	bl	8007b3c <inHandlerMode>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <osMessageDelete+0x16>
    return osErrorISR;
 80080ac:	2382      	movs	r3, #130	; 0x82
 80080ae:	e003      	b.n	80080b8 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f7fe f985 	bl	80063c0 <vQueueDelete>

  return osOK; 
 80080b6:	2300      	movs	r3, #0
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3708      	adds	r7, #8
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b08a      	sub	sp, #40	; 0x28
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080c8:	2300      	movs	r3, #0
 80080ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080cc:	f7fe fd80 	bl	8006bd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080d0:	4b5b      	ldr	r3, [pc, #364]	; (8008240 <pvPortMalloc+0x180>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080d8:	f000 f920 	bl	800831c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080dc:	4b59      	ldr	r3, [pc, #356]	; (8008244 <pvPortMalloc+0x184>)
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4013      	ands	r3, r2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f040 8093 	bne.w	8008210 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01d      	beq.n	800812c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80080f0:	2208      	movs	r2, #8
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4413      	add	r3, r2
 80080f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f003 0307 	and.w	r3, r3, #7
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d014      	beq.n	800812c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f023 0307 	bic.w	r3, r3, #7
 8008108:	3308      	adds	r3, #8
 800810a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f003 0307 	and.w	r3, r3, #7
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00a      	beq.n	800812c <pvPortMalloc+0x6c>
	__asm volatile
 8008116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811a:	f383 8811 	msr	BASEPRI, r3
 800811e:	f3bf 8f6f 	isb	sy
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	617b      	str	r3, [r7, #20]
}
 8008128:	bf00      	nop
 800812a:	e7fe      	b.n	800812a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d06e      	beq.n	8008210 <pvPortMalloc+0x150>
 8008132:	4b45      	ldr	r3, [pc, #276]	; (8008248 <pvPortMalloc+0x188>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	429a      	cmp	r2, r3
 800813a:	d869      	bhi.n	8008210 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800813c:	4b43      	ldr	r3, [pc, #268]	; (800824c <pvPortMalloc+0x18c>)
 800813e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008140:	4b42      	ldr	r3, [pc, #264]	; (800824c <pvPortMalloc+0x18c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008146:	e004      	b.n	8008152 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	429a      	cmp	r2, r3
 800815a:	d903      	bls.n	8008164 <pvPortMalloc+0xa4>
 800815c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d1f1      	bne.n	8008148 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008164:	4b36      	ldr	r3, [pc, #216]	; (8008240 <pvPortMalloc+0x180>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800816a:	429a      	cmp	r2, r3
 800816c:	d050      	beq.n	8008210 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2208      	movs	r2, #8
 8008174:	4413      	add	r3, r2
 8008176:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	1ad2      	subs	r2, r2, r3
 8008188:	2308      	movs	r3, #8
 800818a:	005b      	lsls	r3, r3, #1
 800818c:	429a      	cmp	r2, r3
 800818e:	d91f      	bls.n	80081d0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4413      	add	r3, r2
 8008196:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00a      	beq.n	80081b8 <pvPortMalloc+0xf8>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	613b      	str	r3, [r7, #16]
}
 80081b4:	bf00      	nop
 80081b6:	e7fe      	b.n	80081b6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	1ad2      	subs	r2, r2, r3
 80081c0:	69bb      	ldr	r3, [r7, #24]
 80081c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081ca:	69b8      	ldr	r0, [r7, #24]
 80081cc:	f000 f908 	bl	80083e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081d0:	4b1d      	ldr	r3, [pc, #116]	; (8008248 <pvPortMalloc+0x188>)
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	1ad3      	subs	r3, r2, r3
 80081da:	4a1b      	ldr	r2, [pc, #108]	; (8008248 <pvPortMalloc+0x188>)
 80081dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081de:	4b1a      	ldr	r3, [pc, #104]	; (8008248 <pvPortMalloc+0x188>)
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	4b1b      	ldr	r3, [pc, #108]	; (8008250 <pvPortMalloc+0x190>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d203      	bcs.n	80081f2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081ea:	4b17      	ldr	r3, [pc, #92]	; (8008248 <pvPortMalloc+0x188>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a18      	ldr	r2, [pc, #96]	; (8008250 <pvPortMalloc+0x190>)
 80081f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	685a      	ldr	r2, [r3, #4]
 80081f6:	4b13      	ldr	r3, [pc, #76]	; (8008244 <pvPortMalloc+0x184>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	431a      	orrs	r2, r3
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008202:	2200      	movs	r2, #0
 8008204:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008206:	4b13      	ldr	r3, [pc, #76]	; (8008254 <pvPortMalloc+0x194>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3301      	adds	r3, #1
 800820c:	4a11      	ldr	r2, [pc, #68]	; (8008254 <pvPortMalloc+0x194>)
 800820e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008210:	f7fe fcec 	bl	8006bec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00a      	beq.n	8008234 <pvPortMalloc+0x174>
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	60fb      	str	r3, [r7, #12]
}
 8008230:	bf00      	nop
 8008232:	e7fe      	b.n	8008232 <pvPortMalloc+0x172>
	return pvReturn;
 8008234:	69fb      	ldr	r3, [r7, #28]
}
 8008236:	4618      	mov	r0, r3
 8008238:	3728      	adds	r7, #40	; 0x28
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	24006a30 	.word	0x24006a30
 8008244:	24006a44 	.word	0x24006a44
 8008248:	24006a34 	.word	0x24006a34
 800824c:	24006a28 	.word	0x24006a28
 8008250:	24006a38 	.word	0x24006a38
 8008254:	24006a3c 	.word	0x24006a3c

08008258 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b086      	sub	sp, #24
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d04d      	beq.n	8008306 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800826a:	2308      	movs	r3, #8
 800826c:	425b      	negs	r3, r3
 800826e:	697a      	ldr	r2, [r7, #20]
 8008270:	4413      	add	r3, r2
 8008272:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008278:	693b      	ldr	r3, [r7, #16]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	4b24      	ldr	r3, [pc, #144]	; (8008310 <vPortFree+0xb8>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4013      	ands	r3, r2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d10a      	bne.n	800829c <vPortFree+0x44>
	__asm volatile
 8008286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800828a:	f383 8811 	msr	BASEPRI, r3
 800828e:	f3bf 8f6f 	isb	sy
 8008292:	f3bf 8f4f 	dsb	sy
 8008296:	60fb      	str	r3, [r7, #12]
}
 8008298:	bf00      	nop
 800829a:	e7fe      	b.n	800829a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00a      	beq.n	80082ba <vPortFree+0x62>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	60bb      	str	r3, [r7, #8]
}
 80082b6:	bf00      	nop
 80082b8:	e7fe      	b.n	80082b8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	4b14      	ldr	r3, [pc, #80]	; (8008310 <vPortFree+0xb8>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4013      	ands	r3, r2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01e      	beq.n	8008306 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d11a      	bne.n	8008306 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <vPortFree+0xb8>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	43db      	mvns	r3, r3
 80082da:	401a      	ands	r2, r3
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082e0:	f7fe fc76 	bl	8006bd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <vPortFree+0xbc>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4413      	add	r3, r2
 80082ee:	4a09      	ldr	r2, [pc, #36]	; (8008314 <vPortFree+0xbc>)
 80082f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082f2:	6938      	ldr	r0, [r7, #16]
 80082f4:	f000 f874 	bl	80083e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80082f8:	4b07      	ldr	r3, [pc, #28]	; (8008318 <vPortFree+0xc0>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3301      	adds	r3, #1
 80082fe:	4a06      	ldr	r2, [pc, #24]	; (8008318 <vPortFree+0xc0>)
 8008300:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008302:	f7fe fc73 	bl	8006bec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008306:	bf00      	nop
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	24006a44 	.word	0x24006a44
 8008314:	24006a34 	.word	0x24006a34
 8008318:	24006a40 	.word	0x24006a40

0800831c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008322:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8008326:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008328:	4b27      	ldr	r3, [pc, #156]	; (80083c8 <prvHeapInit+0xac>)
 800832a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00c      	beq.n	8008350 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3307      	adds	r3, #7
 800833a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f023 0307 	bic.w	r3, r3, #7
 8008342:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	4a1f      	ldr	r2, [pc, #124]	; (80083c8 <prvHeapInit+0xac>)
 800834c:	4413      	add	r3, r2
 800834e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008354:	4a1d      	ldr	r2, [pc, #116]	; (80083cc <prvHeapInit+0xb0>)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800835a:	4b1c      	ldr	r3, [pc, #112]	; (80083cc <prvHeapInit+0xb0>)
 800835c:	2200      	movs	r2, #0
 800835e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	4413      	add	r3, r2
 8008366:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008368:	2208      	movs	r2, #8
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0307 	bic.w	r3, r3, #7
 8008376:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4a15      	ldr	r2, [pc, #84]	; (80083d0 <prvHeapInit+0xb4>)
 800837c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800837e:	4b14      	ldr	r3, [pc, #80]	; (80083d0 <prvHeapInit+0xb4>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2200      	movs	r2, #0
 8008384:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008386:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <prvHeapInit+0xb4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	1ad2      	subs	r2, r2, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800839c:	4b0c      	ldr	r3, [pc, #48]	; (80083d0 <prvHeapInit+0xb4>)
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	4a0a      	ldr	r2, [pc, #40]	; (80083d4 <prvHeapInit+0xb8>)
 80083aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	4a09      	ldr	r2, [pc, #36]	; (80083d8 <prvHeapInit+0xbc>)
 80083b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083b4:	4b09      	ldr	r3, [pc, #36]	; (80083dc <prvHeapInit+0xc0>)
 80083b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083ba:	601a      	str	r2, [r3, #0]
}
 80083bc:	bf00      	nop
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	24000628 	.word	0x24000628
 80083cc:	24006a28 	.word	0x24006a28
 80083d0:	24006a30 	.word	0x24006a30
 80083d4:	24006a38 	.word	0x24006a38
 80083d8:	24006a34 	.word	0x24006a34
 80083dc:	24006a44 	.word	0x24006a44

080083e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083e8:	4b28      	ldr	r3, [pc, #160]	; (800848c <prvInsertBlockIntoFreeList+0xac>)
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	e002      	b.n	80083f4 <prvInsertBlockIntoFreeList+0x14>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d8f7      	bhi.n	80083ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	4413      	add	r3, r2
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	429a      	cmp	r2, r3
 800840e:	d108      	bne.n	8008422 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	441a      	add	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	441a      	add	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	429a      	cmp	r2, r3
 8008434:	d118      	bne.n	8008468 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	4b15      	ldr	r3, [pc, #84]	; (8008490 <prvInsertBlockIntoFreeList+0xb0>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d00d      	beq.n	800845e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	441a      	add	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	e008      	b.n	8008470 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800845e:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <prvInsertBlockIntoFreeList+0xb0>)
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e003      	b.n	8008470 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	429a      	cmp	r2, r3
 8008476:	d002      	beq.n	800847e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800847e:	bf00      	nop
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	24006a28 	.word	0x24006a28
 8008490:	24006a30 	.word	0x24006a30

08008494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	3b04      	subs	r3, #4
 80084a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3b04      	subs	r3, #4
 80084b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	f023 0201 	bic.w	r2, r3, #1
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	3b04      	subs	r3, #4
 80084c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084c4:	4a0c      	ldr	r2, [pc, #48]	; (80084f8 <pxPortInitialiseStack+0x64>)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3b14      	subs	r3, #20
 80084ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	3b04      	subs	r3, #4
 80084da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f06f 0202 	mvn.w	r2, #2
 80084e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	3b20      	subs	r3, #32
 80084e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084ea:	68fb      	ldr	r3, [r7, #12]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3714      	adds	r7, #20
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr
 80084f8:	080084fd 	.word	0x080084fd

080084fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008506:	4b12      	ldr	r3, [pc, #72]	; (8008550 <prvTaskExitError+0x54>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800850e:	d00a      	beq.n	8008526 <prvTaskExitError+0x2a>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	60fb      	str	r3, [r7, #12]
}
 8008522:	bf00      	nop
 8008524:	e7fe      	b.n	8008524 <prvTaskExitError+0x28>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	60bb      	str	r3, [r7, #8]
}
 8008538:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800853a:	bf00      	nop
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0fc      	beq.n	800853c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008542:	bf00      	nop
 8008544:	bf00      	nop
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	24000040 	.word	0x24000040
	...

08008560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008560:	4b07      	ldr	r3, [pc, #28]	; (8008580 <pxCurrentTCBConst2>)
 8008562:	6819      	ldr	r1, [r3, #0]
 8008564:	6808      	ldr	r0, [r1, #0]
 8008566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800856a:	f380 8809 	msr	PSP, r0
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f04f 0000 	mov.w	r0, #0
 8008576:	f380 8811 	msr	BASEPRI, r0
 800857a:	4770      	bx	lr
 800857c:	f3af 8000 	nop.w

08008580 <pxCurrentTCBConst2>:
 8008580:	24000510 	.word	0x24000510
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008584:	bf00      	nop
 8008586:	bf00      	nop

08008588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008588:	4808      	ldr	r0, [pc, #32]	; (80085ac <prvPortStartFirstTask+0x24>)
 800858a:	6800      	ldr	r0, [r0, #0]
 800858c:	6800      	ldr	r0, [r0, #0]
 800858e:	f380 8808 	msr	MSP, r0
 8008592:	f04f 0000 	mov.w	r0, #0
 8008596:	f380 8814 	msr	CONTROL, r0
 800859a:	b662      	cpsie	i
 800859c:	b661      	cpsie	f
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	df00      	svc	0
 80085a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80085aa:	bf00      	nop
 80085ac:	e000ed08 	.word	0xe000ed08

080085b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b086      	sub	sp, #24
 80085b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085b6:	4b46      	ldr	r3, [pc, #280]	; (80086d0 <xPortStartScheduler+0x120>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4a46      	ldr	r2, [pc, #280]	; (80086d4 <xPortStartScheduler+0x124>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d10a      	bne.n	80085d6 <xPortStartScheduler+0x26>
	__asm volatile
 80085c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c4:	f383 8811 	msr	BASEPRI, r3
 80085c8:	f3bf 8f6f 	isb	sy
 80085cc:	f3bf 8f4f 	dsb	sy
 80085d0:	613b      	str	r3, [r7, #16]
}
 80085d2:	bf00      	nop
 80085d4:	e7fe      	b.n	80085d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085d6:	4b3e      	ldr	r3, [pc, #248]	; (80086d0 <xPortStartScheduler+0x120>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a3f      	ldr	r2, [pc, #252]	; (80086d8 <xPortStartScheduler+0x128>)
 80085dc:	4293      	cmp	r3, r2
 80085de:	d10a      	bne.n	80085f6 <xPortStartScheduler+0x46>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	60fb      	str	r3, [r7, #12]
}
 80085f2:	bf00      	nop
 80085f4:	e7fe      	b.n	80085f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085f6:	4b39      	ldr	r3, [pc, #228]	; (80086dc <xPortStartScheduler+0x12c>)
 80085f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	22ff      	movs	r2, #255	; 0xff
 8008606:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	b2db      	uxtb	r3, r3
 800860e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	b2db      	uxtb	r3, r3
 8008614:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008618:	b2da      	uxtb	r2, r3
 800861a:	4b31      	ldr	r3, [pc, #196]	; (80086e0 <xPortStartScheduler+0x130>)
 800861c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800861e:	4b31      	ldr	r3, [pc, #196]	; (80086e4 <xPortStartScheduler+0x134>)
 8008620:	2207      	movs	r2, #7
 8008622:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008624:	e009      	b.n	800863a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008626:	4b2f      	ldr	r3, [pc, #188]	; (80086e4 <xPortStartScheduler+0x134>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3b01      	subs	r3, #1
 800862c:	4a2d      	ldr	r2, [pc, #180]	; (80086e4 <xPortStartScheduler+0x134>)
 800862e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	b2db      	uxtb	r3, r3
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	b2db      	uxtb	r3, r3
 8008638:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800863a:	78fb      	ldrb	r3, [r7, #3]
 800863c:	b2db      	uxtb	r3, r3
 800863e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008642:	2b80      	cmp	r3, #128	; 0x80
 8008644:	d0ef      	beq.n	8008626 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008646:	4b27      	ldr	r3, [pc, #156]	; (80086e4 <xPortStartScheduler+0x134>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f1c3 0307 	rsb	r3, r3, #7
 800864e:	2b04      	cmp	r3, #4
 8008650:	d00a      	beq.n	8008668 <xPortStartScheduler+0xb8>
	__asm volatile
 8008652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008656:	f383 8811 	msr	BASEPRI, r3
 800865a:	f3bf 8f6f 	isb	sy
 800865e:	f3bf 8f4f 	dsb	sy
 8008662:	60bb      	str	r3, [r7, #8]
}
 8008664:	bf00      	nop
 8008666:	e7fe      	b.n	8008666 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008668:	4b1e      	ldr	r3, [pc, #120]	; (80086e4 <xPortStartScheduler+0x134>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	4a1d      	ldr	r2, [pc, #116]	; (80086e4 <xPortStartScheduler+0x134>)
 8008670:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008672:	4b1c      	ldr	r3, [pc, #112]	; (80086e4 <xPortStartScheduler+0x134>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800867a:	4a1a      	ldr	r2, [pc, #104]	; (80086e4 <xPortStartScheduler+0x134>)
 800867c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	b2da      	uxtb	r2, r3
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008686:	4b18      	ldr	r3, [pc, #96]	; (80086e8 <xPortStartScheduler+0x138>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a17      	ldr	r2, [pc, #92]	; (80086e8 <xPortStartScheduler+0x138>)
 800868c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008690:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008692:	4b15      	ldr	r3, [pc, #84]	; (80086e8 <xPortStartScheduler+0x138>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a14      	ldr	r2, [pc, #80]	; (80086e8 <xPortStartScheduler+0x138>)
 8008698:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800869c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800869e:	f000 f8dd 	bl	800885c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80086a2:	4b12      	ldr	r3, [pc, #72]	; (80086ec <xPortStartScheduler+0x13c>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80086a8:	f000 f8fc 	bl	80088a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80086ac:	4b10      	ldr	r3, [pc, #64]	; (80086f0 <xPortStartScheduler+0x140>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a0f      	ldr	r2, [pc, #60]	; (80086f0 <xPortStartScheduler+0x140>)
 80086b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086b8:	f7ff ff66 	bl	8008588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086bc:	f7fe fc86 	bl	8006fcc <vTaskSwitchContext>
	prvTaskExitError();
 80086c0:	f7ff ff1c 	bl	80084fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop
 80086d0:	e000ed00 	.word	0xe000ed00
 80086d4:	410fc271 	.word	0x410fc271
 80086d8:	410fc270 	.word	0x410fc270
 80086dc:	e000e400 	.word	0xe000e400
 80086e0:	24006a48 	.word	0x24006a48
 80086e4:	24006a4c 	.word	0x24006a4c
 80086e8:	e000ed20 	.word	0xe000ed20
 80086ec:	24000040 	.word	0x24000040
 80086f0:	e000ef34 	.word	0xe000ef34

080086f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	607b      	str	r3, [r7, #4]
}
 800870c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800870e:	4b0f      	ldr	r3, [pc, #60]	; (800874c <vPortEnterCritical+0x58>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	3301      	adds	r3, #1
 8008714:	4a0d      	ldr	r2, [pc, #52]	; (800874c <vPortEnterCritical+0x58>)
 8008716:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008718:	4b0c      	ldr	r3, [pc, #48]	; (800874c <vPortEnterCritical+0x58>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d10f      	bne.n	8008740 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008720:	4b0b      	ldr	r3, [pc, #44]	; (8008750 <vPortEnterCritical+0x5c>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	b2db      	uxtb	r3, r3
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <vPortEnterCritical+0x4c>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	603b      	str	r3, [r7, #0]
}
 800873c:	bf00      	nop
 800873e:	e7fe      	b.n	800873e <vPortEnterCritical+0x4a>
	}
}
 8008740:	bf00      	nop
 8008742:	370c      	adds	r7, #12
 8008744:	46bd      	mov	sp, r7
 8008746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874a:	4770      	bx	lr
 800874c:	24000040 	.word	0x24000040
 8008750:	e000ed04 	.word	0xe000ed04

08008754 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800875a:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <vPortExitCritical+0x50>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d10a      	bne.n	8008778 <vPortExitCritical+0x24>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	607b      	str	r3, [r7, #4]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008778:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <vPortExitCritical+0x50>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3b01      	subs	r3, #1
 800877e:	4a09      	ldr	r2, [pc, #36]	; (80087a4 <vPortExitCritical+0x50>)
 8008780:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008782:	4b08      	ldr	r3, [pc, #32]	; (80087a4 <vPortExitCritical+0x50>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d105      	bne.n	8008796 <vPortExitCritical+0x42>
 800878a:	2300      	movs	r3, #0
 800878c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	f383 8811 	msr	BASEPRI, r3
}
 8008794:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008796:	bf00      	nop
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop
 80087a4:	24000040 	.word	0x24000040
	...

080087b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087b0:	f3ef 8009 	mrs	r0, PSP
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	4b15      	ldr	r3, [pc, #84]	; (8008810 <pxCurrentTCBConst>)
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	f01e 0f10 	tst.w	lr, #16
 80087c0:	bf08      	it	eq
 80087c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ca:	6010      	str	r0, [r2, #0]
 80087cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087d4:	f380 8811 	msr	BASEPRI, r0
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f7fe fbf4 	bl	8006fcc <vTaskSwitchContext>
 80087e4:	f04f 0000 	mov.w	r0, #0
 80087e8:	f380 8811 	msr	BASEPRI, r0
 80087ec:	bc09      	pop	{r0, r3}
 80087ee:	6819      	ldr	r1, [r3, #0]
 80087f0:	6808      	ldr	r0, [r1, #0]
 80087f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087f6:	f01e 0f10 	tst.w	lr, #16
 80087fa:	bf08      	it	eq
 80087fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008800:	f380 8809 	msr	PSP, r0
 8008804:	f3bf 8f6f 	isb	sy
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	f3af 8000 	nop.w

08008810 <pxCurrentTCBConst>:
 8008810:	24000510 	.word	0x24000510
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop

08008818 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	607b      	str	r3, [r7, #4]
}
 8008830:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008832:	f7fe fb13 	bl	8006e5c <xTaskIncrementTick>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800883c:	4b06      	ldr	r3, [pc, #24]	; (8008858 <xPortSysTickHandler+0x40>)
 800883e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	2300      	movs	r3, #0
 8008846:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	f383 8811 	msr	BASEPRI, r3
}
 800884e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	e000ed04 	.word	0xe000ed04

0800885c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008860:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <vPortSetupTimerInterrupt+0x34>)
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008866:	4b0b      	ldr	r3, [pc, #44]	; (8008894 <vPortSetupTimerInterrupt+0x38>)
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800886c:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <vPortSetupTimerInterrupt+0x3c>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a0a      	ldr	r2, [pc, #40]	; (800889c <vPortSetupTimerInterrupt+0x40>)
 8008872:	fba2 2303 	umull	r2, r3, r2, r3
 8008876:	099b      	lsrs	r3, r3, #6
 8008878:	4a09      	ldr	r2, [pc, #36]	; (80088a0 <vPortSetupTimerInterrupt+0x44>)
 800887a:	3b01      	subs	r3, #1
 800887c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800887e:	4b04      	ldr	r3, [pc, #16]	; (8008890 <vPortSetupTimerInterrupt+0x34>)
 8008880:	2207      	movs	r2, #7
 8008882:	601a      	str	r2, [r3, #0]
}
 8008884:	bf00      	nop
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	e000e010 	.word	0xe000e010
 8008894:	e000e018 	.word	0xe000e018
 8008898:	24000030 	.word	0x24000030
 800889c:	10624dd3 	.word	0x10624dd3
 80088a0:	e000e014 	.word	0xe000e014

080088a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80088a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088b4 <vPortEnableVFP+0x10>
 80088a8:	6801      	ldr	r1, [r0, #0]
 80088aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80088ae:	6001      	str	r1, [r0, #0]
 80088b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088b2:	bf00      	nop
 80088b4:	e000ed88 	.word	0xe000ed88

080088b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088be:	f3ef 8305 	mrs	r3, IPSR
 80088c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b0f      	cmp	r3, #15
 80088c8:	d914      	bls.n	80088f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088ca:	4a17      	ldr	r2, [pc, #92]	; (8008928 <vPortValidateInterruptPriority+0x70>)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	4413      	add	r3, r2
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088d4:	4b15      	ldr	r3, [pc, #84]	; (800892c <vPortValidateInterruptPriority+0x74>)
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	7afa      	ldrb	r2, [r7, #11]
 80088da:	429a      	cmp	r2, r3
 80088dc:	d20a      	bcs.n	80088f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	607b      	str	r3, [r7, #4]
}
 80088f0:	bf00      	nop
 80088f2:	e7fe      	b.n	80088f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088f4:	4b0e      	ldr	r3, [pc, #56]	; (8008930 <vPortValidateInterruptPriority+0x78>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088fc:	4b0d      	ldr	r3, [pc, #52]	; (8008934 <vPortValidateInterruptPriority+0x7c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	429a      	cmp	r2, r3
 8008902:	d90a      	bls.n	800891a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008908:	f383 8811 	msr	BASEPRI, r3
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f3bf 8f4f 	dsb	sy
 8008914:	603b      	str	r3, [r7, #0]
}
 8008916:	bf00      	nop
 8008918:	e7fe      	b.n	8008918 <vPortValidateInterruptPriority+0x60>
	}
 800891a:	bf00      	nop
 800891c:	3714      	adds	r7, #20
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop
 8008928:	e000e3f0 	.word	0xe000e3f0
 800892c:	24006a48 	.word	0x24006a48
 8008930:	e000ed0c 	.word	0xe000ed0c
 8008934:	24006a4c 	.word	0x24006a4c

08008938 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	330c      	adds	r3, #12
 8008948:	461a      	mov	r2, r3
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f003 ff93 	bl	800c878 <tcpip_send_msg_wait_sem>
 8008952:	4603      	mov	r3, r0
 8008954:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d103      	bne.n	8008966 <netconn_apimsg+0x2e>
    return apimsg->err;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008964:	e001      	b.n	800896a <netconn_apimsg+0x32>
  }
  return err;
 8008966:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
	...

08008974 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08c      	sub	sp, #48	; 0x30
 8008978:	af00      	add	r7, sp, #0
 800897a:	4603      	mov	r3, r0
 800897c:	603a      	str	r2, [r7, #0]
 800897e:	71fb      	strb	r3, [r7, #7]
 8008980:	460b      	mov	r3, r1
 8008982:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	6839      	ldr	r1, [r7, #0]
 8008988:	4618      	mov	r0, r3
 800898a:	f001 faeb 	bl	8009f64 <netconn_alloc>
 800898e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d054      	beq.n	8008a40 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008996:	79bb      	ldrb	r3, [r7, #6]
 8008998:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800899a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800899c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800899e:	f107 0308 	add.w	r3, r7, #8
 80089a2:	4619      	mov	r1, r3
 80089a4:	4829      	ldr	r0, [pc, #164]	; (8008a4c <netconn_new_with_proto_and_callback+0xd8>)
 80089a6:	f7ff ffc7 	bl	8008938 <netconn_apimsg>
 80089aa:	4603      	mov	r3, r0
 80089ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80089b0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d043      	beq.n	8008a40 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80089b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d005      	beq.n	80089cc <netconn_new_with_proto_and_callback+0x58>
 80089c0:	4b23      	ldr	r3, [pc, #140]	; (8008a50 <netconn_new_with_proto_and_callback+0xdc>)
 80089c2:	22a3      	movs	r2, #163	; 0xa3
 80089c4:	4923      	ldr	r1, [pc, #140]	; (8008a54 <netconn_new_with_proto_and_callback+0xe0>)
 80089c6:	4824      	ldr	r0, [pc, #144]	; (8008a58 <netconn_new_with_proto_and_callback+0xe4>)
 80089c8:	f010 fac0 	bl	8018f4c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80089cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ce:	3310      	adds	r3, #16
 80089d0:	4618      	mov	r0, r3
 80089d2:	f010 f8e4 	bl	8018b9e <sys_mbox_valid>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d105      	bne.n	80089e8 <netconn_new_with_proto_and_callback+0x74>
 80089dc:	4b1c      	ldr	r3, [pc, #112]	; (8008a50 <netconn_new_with_proto_and_callback+0xdc>)
 80089de:	22a4      	movs	r2, #164	; 0xa4
 80089e0:	491e      	ldr	r1, [pc, #120]	; (8008a5c <netconn_new_with_proto_and_callback+0xe8>)
 80089e2:	481d      	ldr	r0, [pc, #116]	; (8008a58 <netconn_new_with_proto_and_callback+0xe4>)
 80089e4:	f010 fab2 	bl	8018f4c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80089e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ea:	3314      	adds	r3, #20
 80089ec:	4618      	mov	r0, r3
 80089ee:	f010 f8d6 	bl	8018b9e <sys_mbox_valid>
 80089f2:	4603      	mov	r3, r0
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d005      	beq.n	8008a04 <netconn_new_with_proto_and_callback+0x90>
 80089f8:	4b15      	ldr	r3, [pc, #84]	; (8008a50 <netconn_new_with_proto_and_callback+0xdc>)
 80089fa:	22a6      	movs	r2, #166	; 0xa6
 80089fc:	4918      	ldr	r1, [pc, #96]	; (8008a60 <netconn_new_with_proto_and_callback+0xec>)
 80089fe:	4816      	ldr	r0, [pc, #88]	; (8008a58 <netconn_new_with_proto_and_callback+0xe4>)
 8008a00:	f010 faa4 	bl	8018f4c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a06:	330c      	adds	r3, #12
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f010 f957 	bl	8018cbc <sys_sem_valid>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d105      	bne.n	8008a20 <netconn_new_with_proto_and_callback+0xac>
 8008a14:	4b0e      	ldr	r3, [pc, #56]	; (8008a50 <netconn_new_with_proto_and_callback+0xdc>)
 8008a16:	22a9      	movs	r2, #169	; 0xa9
 8008a18:	4912      	ldr	r1, [pc, #72]	; (8008a64 <netconn_new_with_proto_and_callback+0xf0>)
 8008a1a:	480f      	ldr	r0, [pc, #60]	; (8008a58 <netconn_new_with_proto_and_callback+0xe4>)
 8008a1c:	f010 fa96 	bl	8018f4c <iprintf>
      sys_sem_free(&conn->op_completed);
 8008a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a22:	330c      	adds	r3, #12
 8008a24:	4618      	mov	r0, r3
 8008a26:	f010 f93c 	bl	8018ca2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a2c:	3310      	adds	r3, #16
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f010 f82e 	bl	8018a90 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008a34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a36:	2007      	movs	r0, #7
 8008a38:	f008 f82c 	bl	8010a94 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	e000      	b.n	8008a42 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3730      	adds	r7, #48	; 0x30
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	08009f39 	.word	0x08009f39
 8008a50:	0801adc4 	.word	0x0801adc4
 8008a54:	0801ae3c 	.word	0x0801ae3c
 8008a58:	0801ae60 	.word	0x0801ae60
 8008a5c:	0801ae88 	.word	0x0801ae88
 8008a60:	0801aea0 	.word	0x0801aea0
 8008a64:	0801aec4 	.word	0x0801aec4

08008a68 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08c      	sub	sp, #48	; 0x30
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	e014      	b.n	8008aa4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008a7e:	2329      	movs	r3, #41	; 0x29
 8008a80:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008a82:	f107 030c 	add.w	r3, r7, #12
 8008a86:	4619      	mov	r1, r3
 8008a88:	4808      	ldr	r0, [pc, #32]	; (8008aac <netconn_prepare_delete+0x44>)
 8008a8a:	f7ff ff55 	bl	8008938 <netconn_apimsg>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008a94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d002      	beq.n	8008aa2 <netconn_prepare_delete+0x3a>
    return err;
 8008a9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008aa0:	e000      	b.n	8008aa4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3730      	adds	r7, #48	; 0x30
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	0800a49d 	.word	0x0800a49d

08008ab0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d101      	bne.n	8008ac2 <netconn_delete+0x12>
    return ERR_OK;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e00d      	b.n	8008ade <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7ff ffd0 	bl	8008a68 <netconn_prepare_delete>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <netconn_delete+0x2a>
    netconn_free(conn);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 fab3 	bl	800a040 <netconn_free>
  }
  return err;
 8008ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
	...

08008ae8 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b08e      	sub	sp, #56	; 0x38
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d109      	bne.n	8008b10 <netconn_getaddr+0x28>
 8008afc:	4b1d      	ldr	r3, [pc, #116]	; (8008b74 <netconn_getaddr+0x8c>)
 8008afe:	f44f 7289 	mov.w	r2, #274	; 0x112
 8008b02:	491d      	ldr	r1, [pc, #116]	; (8008b78 <netconn_getaddr+0x90>)
 8008b04:	481d      	ldr	r0, [pc, #116]	; (8008b7c <netconn_getaddr+0x94>)
 8008b06:	f010 fa21 	bl	8018f4c <iprintf>
 8008b0a:	f06f 030f 	mvn.w	r3, #15
 8008b0e:	e02d      	b.n	8008b6c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d109      	bne.n	8008b2a <netconn_getaddr+0x42>
 8008b16:	4b17      	ldr	r3, [pc, #92]	; (8008b74 <netconn_getaddr+0x8c>)
 8008b18:	f240 1213 	movw	r2, #275	; 0x113
 8008b1c:	4918      	ldr	r1, [pc, #96]	; (8008b80 <netconn_getaddr+0x98>)
 8008b1e:	4817      	ldr	r0, [pc, #92]	; (8008b7c <netconn_getaddr+0x94>)
 8008b20:	f010 fa14 	bl	8018f4c <iprintf>
 8008b24:	f06f 030f 	mvn.w	r3, #15
 8008b28:	e020      	b.n	8008b6c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d109      	bne.n	8008b44 <netconn_getaddr+0x5c>
 8008b30:	4b10      	ldr	r3, [pc, #64]	; (8008b74 <netconn_getaddr+0x8c>)
 8008b32:	f44f 728a 	mov.w	r2, #276	; 0x114
 8008b36:	4913      	ldr	r1, [pc, #76]	; (8008b84 <netconn_getaddr+0x9c>)
 8008b38:	4810      	ldr	r0, [pc, #64]	; (8008b7c <netconn_getaddr+0x94>)
 8008b3a:	f010 fa07 	bl	8018f4c <iprintf>
 8008b3e:	f06f 030f 	mvn.w	r3, #15
 8008b42:	e013      	b.n	8008b6c <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 8008b48:	78fb      	ldrb	r3, [r7, #3]
 8008b4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 8008b56:	f107 0314 	add.w	r3, r7, #20
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	480a      	ldr	r0, [pc, #40]	; (8008b88 <netconn_getaddr+0xa0>)
 8008b5e:	f7ff feeb 	bl	8008938 <netconn_apimsg>
 8008b62:	4603      	mov	r3, r0
 8008b64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 8008b68:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3738      	adds	r7, #56	; 0x38
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}
 8008b74:	0801adc4 	.word	0x0801adc4
 8008b78:	0801aee0 	.word	0x0801aee0
 8008b7c:	0801ae60 	.word	0x0801ae60
 8008b80:	0801af00 	.word	0x0801af00
 8008b84:	0801af20 	.word	0x0801af20
 8008b88:	0800b099 	.word	0x0800b099

08008b8c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08e      	sub	sp, #56	; 0x38
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	4613      	mov	r3, r2
 8008b98:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d109      	bne.n	8008bb4 <netconn_bind+0x28>
 8008ba0:	4b11      	ldr	r3, [pc, #68]	; (8008be8 <netconn_bind+0x5c>)
 8008ba2:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008ba6:	4911      	ldr	r1, [pc, #68]	; (8008bec <netconn_bind+0x60>)
 8008ba8:	4811      	ldr	r0, [pc, #68]	; (8008bf0 <netconn_bind+0x64>)
 8008baa:	f010 f9cf 	bl	8018f4c <iprintf>
 8008bae:	f06f 030f 	mvn.w	r3, #15
 8008bb2:	e015      	b.n	8008be0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008bba:	4b0e      	ldr	r3, [pc, #56]	; (8008bf4 <netconn_bind+0x68>)
 8008bbc:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008bc6:	88fb      	ldrh	r3, [r7, #6]
 8008bc8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008bca:	f107 0314 	add.w	r3, r7, #20
 8008bce:	4619      	mov	r1, r3
 8008bd0:	4809      	ldr	r0, [pc, #36]	; (8008bf8 <netconn_bind+0x6c>)
 8008bd2:	f7ff feb1 	bl	8008938 <netconn_apimsg>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008bdc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3738      	adds	r7, #56	; 0x38
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	0801adc4 	.word	0x0801adc4
 8008bec:	0801af40 	.word	0x0801af40
 8008bf0:	0801ae60 	.word	0x0801ae60
 8008bf4:	0801c38c 	.word	0x0801c38c
 8008bf8:	0800a665 	.word	0x0800a665

08008bfc <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b08e      	sub	sp, #56	; 0x38
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	4613      	mov	r3, r2
 8008c08:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d109      	bne.n	8008c24 <netconn_connect+0x28>
 8008c10:	4b11      	ldr	r3, [pc, #68]	; (8008c58 <netconn_connect+0x5c>)
 8008c12:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008c16:	4911      	ldr	r1, [pc, #68]	; (8008c5c <netconn_connect+0x60>)
 8008c18:	4811      	ldr	r0, [pc, #68]	; (8008c60 <netconn_connect+0x64>)
 8008c1a:	f010 f997 	bl	8018f4c <iprintf>
 8008c1e:	f06f 030f 	mvn.w	r3, #15
 8008c22:	e015      	b.n	8008c50 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d101      	bne.n	8008c2e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8008c2a:	4b0e      	ldr	r3, [pc, #56]	; (8008c64 <netconn_connect+0x68>)
 8008c2c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008c36:	88fb      	ldrh	r3, [r7, #6]
 8008c38:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8008c3a:	f107 0314 	add.w	r3, r7, #20
 8008c3e:	4619      	mov	r1, r3
 8008c40:	4809      	ldr	r0, [pc, #36]	; (8008c68 <netconn_connect+0x6c>)
 8008c42:	f7ff fe79 	bl	8008938 <netconn_apimsg>
 8008c46:	4603      	mov	r3, r0
 8008c48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008c4c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3738      	adds	r7, #56	; 0x38
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	0801adc4 	.word	0x0801adc4
 8008c5c:	0801af7c 	.word	0x0801af7c
 8008c60:	0801ae60 	.word	0x0801ae60
 8008c64:	0801c38c 	.word	0x0801c38c
 8008c68:	0800a7f9 	.word	0x0800a7f9

08008c6c <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b08c      	sub	sp, #48	; 0x30
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d109      	bne.n	8008c8e <netconn_disconnect+0x22>
 8008c7a:	4b0d      	ldr	r3, [pc, #52]	; (8008cb0 <netconn_disconnect+0x44>)
 8008c7c:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8008c80:	490c      	ldr	r1, [pc, #48]	; (8008cb4 <netconn_disconnect+0x48>)
 8008c82:	480d      	ldr	r0, [pc, #52]	; (8008cb8 <netconn_disconnect+0x4c>)
 8008c84:	f010 f962 	bl	8018f4c <iprintf>
 8008c88:	f06f 030f 	mvn.w	r3, #15
 8008c8c:	e00c      	b.n	8008ca8 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8008c92:	f107 030c 	add.w	r3, r7, #12
 8008c96:	4619      	mov	r1, r3
 8008c98:	4808      	ldr	r0, [pc, #32]	; (8008cbc <netconn_disconnect+0x50>)
 8008c9a:	f7ff fe4d 	bl	8008938 <netconn_apimsg>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008ca4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3730      	adds	r7, #48	; 0x30
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}
 8008cb0:	0801adc4 	.word	0x0801adc4
 8008cb4:	0801af9c 	.word	0x0801af9c
 8008cb8:	0801ae60 	.word	0x0801ae60
 8008cbc:	0800a975 	.word	0x0800a975

08008cc0 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08c      	sub	sp, #48	; 0x30
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
 8008cc8:	460b      	mov	r3, r1
 8008cca:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d109      	bne.n	8008ce6 <netconn_listen_with_backlog+0x26>
 8008cd2:	4b0d      	ldr	r3, [pc, #52]	; (8008d08 <netconn_listen_with_backlog+0x48>)
 8008cd4:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008cd8:	490c      	ldr	r1, [pc, #48]	; (8008d0c <netconn_listen_with_backlog+0x4c>)
 8008cda:	480d      	ldr	r0, [pc, #52]	; (8008d10 <netconn_listen_with_backlog+0x50>)
 8008cdc:	f010 f936 	bl	8018f4c <iprintf>
 8008ce0:	f06f 030f 	mvn.w	r3, #15
 8008ce4:	e00c      	b.n	8008d00 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008cea:	f107 030c 	add.w	r3, r7, #12
 8008cee:	4619      	mov	r1, r3
 8008cf0:	4808      	ldr	r0, [pc, #32]	; (8008d14 <netconn_listen_with_backlog+0x54>)
 8008cf2:	f7ff fe21 	bl	8008938 <netconn_apimsg>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008cfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3730      	adds	r7, #48	; 0x30
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	0801adc4 	.word	0x0801adc4
 8008d0c:	0801afc0 	.word	0x0801afc0
 8008d10:	0801ae60 	.word	0x0801ae60
 8008d14:	0800a9b1 	.word	0x0800a9b1

08008d18 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d109      	bne.n	8008d3c <netconn_accept+0x24>
 8008d28:	4b3d      	ldr	r3, [pc, #244]	; (8008e20 <netconn_accept+0x108>)
 8008d2a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008d2e:	493d      	ldr	r1, [pc, #244]	; (8008e24 <netconn_accept+0x10c>)
 8008d30:	483d      	ldr	r0, [pc, #244]	; (8008e28 <netconn_accept+0x110>)
 8008d32:	f010 f90b 	bl	8018f4c <iprintf>
 8008d36:	f06f 030f 	mvn.w	r3, #15
 8008d3a:	e06c      	b.n	8008e16 <netconn_accept+0xfe>
  *new_conn = NULL;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d109      	bne.n	8008d5c <netconn_accept+0x44>
 8008d48:	4b35      	ldr	r3, [pc, #212]	; (8008e20 <netconn_accept+0x108>)
 8008d4a:	f240 12e3 	movw	r2, #483	; 0x1e3
 8008d4e:	4937      	ldr	r1, [pc, #220]	; (8008e2c <netconn_accept+0x114>)
 8008d50:	4835      	ldr	r0, [pc, #212]	; (8008e28 <netconn_accept+0x110>)
 8008d52:	f010 f8fb 	bl	8018f4c <iprintf>
 8008d56:	f06f 030f 	mvn.w	r3, #15
 8008d5a:	e05c      	b.n	8008e16 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fc20 	bl	80095a2 <netconn_err>
 8008d62:	4603      	mov	r3, r0
 8008d64:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008d66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d002      	beq.n	8008d74 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8008d6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008d72:	e050      	b.n	8008e16 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3314      	adds	r3, #20
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f00f ff10 	bl	8018b9e <sys_mbox_valid>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <netconn_accept+0x78>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	7f1b      	ldrb	r3, [r3, #28]
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d002      	beq.n	8008d96 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8008d90:	f06f 030e 	mvn.w	r3, #14
 8008d94:	e03f      	b.n	8008e16 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	7f1b      	ldrb	r3, [r3, #28]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00e      	beq.n	8008dc0 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	3314      	adds	r3, #20
 8008da6:	f107 020c 	add.w	r2, r7, #12
 8008daa:	4611      	mov	r1, r2
 8008dac:	4618      	mov	r0, r3
 8008dae:	f00f feda 	bl	8018b66 <sys_arch_mbox_tryfetch>
 8008db2:	4603      	mov	r3, r0
 8008db4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008db8:	d10a      	bne.n	8008dd0 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008dba:	f06f 0306 	mvn.w	r3, #6
 8008dbe:	e02a      	b.n	8008e16 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	3314      	adds	r3, #20
 8008dc4:	f107 010c 	add.w	r1, r7, #12
 8008dc8:	2200      	movs	r2, #0
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f00f fe8c 	bl	8018ae8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d005      	beq.n	8008de4 <netconn_accept+0xcc>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2101      	movs	r1, #1
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	f107 0213 	add.w	r2, r7, #19
 8008dea:	4611      	mov	r1, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 fc85 	bl	80096fc <lwip_netconn_is_err_msg>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008df8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008dfc:	e00b      	b.n	8008e16 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d102      	bne.n	8008e0a <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008e04:	f06f 030e 	mvn.w	r3, #14
 8008e08:	e005      	b.n	8008e16 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008e14:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3718      	adds	r7, #24
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	0801adc4 	.word	0x0801adc4
 8008e24:	0801afe0 	.word	0x0801afe0
 8008e28:	0801ae60 	.word	0x0801ae60
 8008e2c:	0801b000 	.word	0x0801b000

08008e30 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b088      	sub	sp, #32
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	4613      	mov	r3, r2
 8008e3c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d109      	bne.n	8008e5c <netconn_recv_data+0x2c>
 8008e48:	4b58      	ldr	r3, [pc, #352]	; (8008fac <netconn_recv_data+0x17c>)
 8008e4a:	f44f 7212 	mov.w	r2, #584	; 0x248
 8008e4e:	4958      	ldr	r1, [pc, #352]	; (8008fb0 <netconn_recv_data+0x180>)
 8008e50:	4858      	ldr	r0, [pc, #352]	; (8008fb4 <netconn_recv_data+0x184>)
 8008e52:	f010 f87b 	bl	8018f4c <iprintf>
 8008e56:	f06f 030f 	mvn.w	r3, #15
 8008e5a:	e0a2      	b.n	8008fa2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d109      	bne.n	8008e7c <netconn_recv_data+0x4c>
 8008e68:	4b50      	ldr	r3, [pc, #320]	; (8008fac <netconn_recv_data+0x17c>)
 8008e6a:	f240 224a 	movw	r2, #586	; 0x24a
 8008e6e:	4952      	ldr	r1, [pc, #328]	; (8008fb8 <netconn_recv_data+0x188>)
 8008e70:	4850      	ldr	r0, [pc, #320]	; (8008fb4 <netconn_recv_data+0x184>)
 8008e72:	f010 f86b 	bl	8018f4c <iprintf>
 8008e76:	f06f 030f 	mvn.w	r3, #15
 8008e7a:	e092      	b.n	8008fa2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3310      	adds	r3, #16
 8008e80:	4618      	mov	r0, r3
 8008e82:	f00f fe8c 	bl	8018b9e <sys_mbox_valid>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10e      	bne.n	8008eaa <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f000 fb88 	bl	80095a2 <netconn_err>
 8008e92:	4603      	mov	r3, r0
 8008e94:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008e96:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d002      	beq.n	8008ea4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8008e9e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008ea2:	e07e      	b.n	8008fa2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008ea4:	f06f 030a 	mvn.w	r3, #10
 8008ea8:	e07b      	b.n	8008fa2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	7f1b      	ldrb	r3, [r3, #28]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10f      	bne.n	8008ed6 <netconn_recv_data+0xa6>
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	7f1b      	ldrb	r3, [r3, #28]
 8008ec4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d104      	bne.n	8008ed6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d023      	beq.n	8008f1e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	3310      	adds	r3, #16
 8008eda:	f107 0218 	add.w	r2, r7, #24
 8008ede:	4611      	mov	r1, r2
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f00f fe40 	bl	8018b66 <sys_arch_mbox_tryfetch>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008eec:	d11f      	bne.n	8008f2e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8008eee:	68f8      	ldr	r0, [r7, #12]
 8008ef0:	f000 fb57 	bl	80095a2 <netconn_err>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008ef8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8008f00:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008f04:	e04d      	b.n	8008fa2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	7f1b      	ldrb	r3, [r3, #28]
 8008f0a:	f003 0301 	and.w	r3, r3, #1
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d002      	beq.n	8008f18 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8008f12:	f06f 030a 	mvn.w	r3, #10
 8008f16:	e044      	b.n	8008fa2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008f18:	f06f 0306 	mvn.w	r3, #6
 8008f1c:	e041      	b.n	8008fa2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	3310      	adds	r3, #16
 8008f22:	f107 0118 	add.w	r1, r7, #24
 8008f26:	2200      	movs	r2, #0
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f00f fddd 	bl	8018ae8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f36:	2b10      	cmp	r3, #16
 8008f38:	d117      	bne.n	8008f6a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	f107 0217 	add.w	r2, r7, #23
 8008f40:	4611      	mov	r1, r2
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 fbda 	bl	80096fc <lwip_netconn_is_err_msg>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d009      	beq.n	8008f62 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008f4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f52:	f113 0f0f 	cmn.w	r3, #15
 8008f56:	d101      	bne.n	8008f5c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e022      	b.n	8008fa2 <netconn_recv_data+0x172>
      }
      return err;
 8008f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008f60:	e01f      	b.n	8008fa2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	891b      	ldrh	r3, [r3, #8]
 8008f66:	83fb      	strh	r3, [r7, #30]
 8008f68:	e00d      	b.n	8008f86 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d106      	bne.n	8008f7e <netconn_recv_data+0x14e>
 8008f70:	4b0e      	ldr	r3, [pc, #56]	; (8008fac <netconn_recv_data+0x17c>)
 8008f72:	f240 2291 	movw	r2, #657	; 0x291
 8008f76:	4911      	ldr	r1, [pc, #68]	; (8008fbc <netconn_recv_data+0x18c>)
 8008f78:	480e      	ldr	r0, [pc, #56]	; (8008fb4 <netconn_recv_data+0x184>)
 8008f7a:	f00f ffe7 	bl	8018f4c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	891b      	ldrh	r3, [r3, #8]
 8008f84:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d005      	beq.n	8008f9a <netconn_recv_data+0x16a>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f92:	8bfa      	ldrh	r2, [r7, #30]
 8008f94:	2101      	movs	r1, #1
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008f9a:	69ba      	ldr	r2, [r7, #24]
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3720      	adds	r7, #32
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	0801adc4 	.word	0x0801adc4
 8008fb0:	0801b020 	.word	0x0801b020
 8008fb4:	0801ae60 	.word	0x0801ae60
 8008fb8:	0801b040 	.word	0x0801b040
 8008fbc:	0801b05c 	.word	0x0801b05c

08008fc0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <netconn_tcp_recvd_msg+0x1e>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008fda:	2b10      	cmp	r3, #16
 8008fdc:	d009      	beq.n	8008ff2 <netconn_tcp_recvd_msg+0x32>
 8008fde:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <netconn_tcp_recvd_msg+0x50>)
 8008fe0:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008fe4:	490b      	ldr	r1, [pc, #44]	; (8009014 <netconn_tcp_recvd_msg+0x54>)
 8008fe6:	480c      	ldr	r0, [pc, #48]	; (8009018 <netconn_tcp_recvd_msg+0x58>)
 8008fe8:	f00f ffb0 	bl	8018f4c <iprintf>
 8008fec:	f06f 030f 	mvn.w	r3, #15
 8008ff0:	e00a      	b.n	8009008 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008ffe:	6879      	ldr	r1, [r7, #4]
 8009000:	4806      	ldr	r0, [pc, #24]	; (800901c <netconn_tcp_recvd_msg+0x5c>)
 8009002:	f7ff fc99 	bl	8008938 <netconn_apimsg>
 8009006:	4603      	mov	r3, r0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}
 8009010:	0801adc4 	.word	0x0801adc4
 8009014:	0801b068 	.word	0x0801b068
 8009018:	0801ae60 	.word	0x0801ae60
 800901c:	0800ab7b 	.word	0x0800ab7b

08009020 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b08c      	sub	sp, #48	; 0x30
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d005      	beq.n	800903c <netconn_tcp_recvd+0x1c>
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009038:	2b10      	cmp	r3, #16
 800903a:	d009      	beq.n	8009050 <netconn_tcp_recvd+0x30>
 800903c:	4b0c      	ldr	r3, [pc, #48]	; (8009070 <netconn_tcp_recvd+0x50>)
 800903e:	f240 22b5 	movw	r2, #693	; 0x2b5
 8009042:	490c      	ldr	r1, [pc, #48]	; (8009074 <netconn_tcp_recvd+0x54>)
 8009044:	480c      	ldr	r0, [pc, #48]	; (8009078 <netconn_tcp_recvd+0x58>)
 8009046:	f00f ff81 	bl	8018f4c <iprintf>
 800904a:	f06f 030f 	mvn.w	r3, #15
 800904e:	e00b      	b.n	8009068 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 8009050:	f107 030c 	add.w	r3, r7, #12
 8009054:	461a      	mov	r2, r3
 8009056:	6839      	ldr	r1, [r7, #0]
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f7ff ffb1 	bl	8008fc0 <netconn_tcp_recvd_msg>
 800905e:	4603      	mov	r3, r0
 8009060:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 8009064:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009068:	4618      	mov	r0, r3
 800906a:	3730      	adds	r7, #48	; 0x30
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	0801adc4 	.word	0x0801adc4
 8009074:	0801b068 	.word	0x0801b068
 8009078:	0801ae60 	.word	0x0801ae60

0800907c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b090      	sub	sp, #64	; 0x40
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	4613      	mov	r3, r2
 8009088:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3310      	adds	r3, #16
 800908e:	4618      	mov	r0, r3
 8009090:	f00f fd85 	bl	8018b9e <sys_mbox_valid>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d102      	bne.n	80090a0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800909a:	f06f 030a 	mvn.w	r3, #10
 800909e:	e06d      	b.n	800917c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	7f1b      	ldrb	r3, [r3, #28]
 80090a4:	b25b      	sxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	da07      	bge.n	80090ba <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	7f1b      	ldrb	r3, [r3, #28]
 80090ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b2:	b2da      	uxtb	r2, r3
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80090b8:	e039      	b.n	800912e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80090ba:	79fb      	ldrb	r3, [r7, #7]
 80090bc:	461a      	mov	r2, r3
 80090be:	68b9      	ldr	r1, [r7, #8]
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7ff feb5 	bl	8008e30 <netconn_recv_data>
 80090c6:	4603      	mov	r3, r0
 80090c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80090cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d002      	beq.n	80090da <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80090d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80090d8:	e050      	b.n	800917c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	f003 0308 	and.w	r3, r3, #8
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10e      	bne.n	8009108 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80090ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <netconn_recv_data_tcp+0x7a>
 80090f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f2:	891b      	ldrh	r3, [r3, #8]
 80090f4:	e000      	b.n	80090f8 <netconn_recv_data_tcp+0x7c>
 80090f6:	2301      	movs	r3, #1
 80090f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80090fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80090fc:	f107 0214 	add.w	r2, r7, #20
 8009100:	4619      	mov	r1, r3
 8009102:	68f8      	ldr	r0, [r7, #12]
 8009104:	f7ff ff5c 	bl	8008fc0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910a:	2b00      	cmp	r3, #0
 800910c:	d134      	bne.n	8009178 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	f003 0310 	and.w	r3, r3, #16
 8009114:	2b00      	cmp	r3, #0
 8009116:	d009      	beq.n	800912c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	7f1b      	ldrb	r3, [r3, #28]
 800911c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009120:	b2da      	uxtb	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009126:	f06f 0306 	mvn.w	r3, #6
 800912a:	e027      	b.n	800917c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800912c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	2b00      	cmp	r3, #0
 8009134:	d005      	beq.n	8009142 <netconn_recv_data_tcp+0xc6>
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	2200      	movs	r2, #0
 800913c:	2101      	movs	r1, #1
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d10f      	bne.n	800916a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f000 fa29 	bl	80095a2 <netconn_err>
 8009150:	4603      	mov	r3, r0
 8009152:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009156:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800915a:	2b00      	cmp	r3, #0
 800915c:	d002      	beq.n	8009164 <netconn_recv_data_tcp+0xe8>
          return err;
 800915e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009162:	e00b      	b.n	800917c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009164:	f06f 030d 	mvn.w	r3, #13
 8009168:	e008      	b.n	800917c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800916a:	2101      	movs	r1, #1
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 f9db 	bl	8009528 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009172:	f06f 030e 	mvn.w	r3, #14
 8009176:	e001      	b.n	800917c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009178:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800917c:	4618      	mov	r0, r3
 800917e:	3740      	adds	r7, #64	; 0x40
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b084      	sub	sp, #16
 8009188:	af00      	add	r7, sp, #0
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	60b9      	str	r1, [r7, #8]
 800918e:	4613      	mov	r3, r2
 8009190:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d005      	beq.n	80091a4 <netconn_recv_tcp_pbuf_flags+0x20>
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091a0:	2b10      	cmp	r3, #16
 80091a2:	d009      	beq.n	80091b8 <netconn_recv_tcp_pbuf_flags+0x34>
 80091a4:	4b0a      	ldr	r3, [pc, #40]	; (80091d0 <netconn_recv_tcp_pbuf_flags+0x4c>)
 80091a6:	f240 3225 	movw	r2, #805	; 0x325
 80091aa:	490a      	ldr	r1, [pc, #40]	; (80091d4 <netconn_recv_tcp_pbuf_flags+0x50>)
 80091ac:	480a      	ldr	r0, [pc, #40]	; (80091d8 <netconn_recv_tcp_pbuf_flags+0x54>)
 80091ae:	f00f fecd 	bl	8018f4c <iprintf>
 80091b2:	f06f 030f 	mvn.w	r3, #15
 80091b6:	e006      	b.n	80091c6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	461a      	mov	r2, r3
 80091bc:	68b9      	ldr	r1, [r7, #8]
 80091be:	68f8      	ldr	r0, [r7, #12]
 80091c0:	f7ff ff5c 	bl	800907c <netconn_recv_data_tcp>
 80091c4:	4603      	mov	r3, r0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	0801adc4 	.word	0x0801adc4
 80091d4:	0801b068 	.word	0x0801b068
 80091d8:	0801ae60 	.word	0x0801ae60

080091dc <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	4613      	mov	r3, r2
 80091e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d005      	beq.n	80091fc <netconn_recv_udp_raw_netbuf_flags+0x20>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	781b      	ldrb	r3, [r3, #0]
 80091f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80091f8:	2b10      	cmp	r3, #16
 80091fa:	d109      	bne.n	8009210 <netconn_recv_udp_raw_netbuf_flags+0x34>
 80091fc:	4b0a      	ldr	r3, [pc, #40]	; (8009228 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 80091fe:	f44f 7253 	mov.w	r2, #844	; 0x34c
 8009202:	490a      	ldr	r1, [pc, #40]	; (800922c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 8009204:	480a      	ldr	r0, [pc, #40]	; (8009230 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 8009206:	f00f fea1 	bl	8018f4c <iprintf>
 800920a:	f06f 030f 	mvn.w	r3, #15
 800920e:	e006      	b.n	800921e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	461a      	mov	r2, r3
 8009214:	68b9      	ldr	r1, [r7, #8]
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f7ff fe0a 	bl	8008e30 <netconn_recv_data>
 800921c:	4603      	mov	r3, r0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	0801adc4 	.word	0x0801adc4
 800922c:	0801b08c 	.word	0x0801b08c
 8009230:	0801ae60 	.word	0x0801ae60

08009234 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b086      	sub	sp, #24
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800923e:	2300      	movs	r3, #0
 8009240:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d109      	bne.n	800925c <netconn_recv+0x28>
 8009248:	4b32      	ldr	r3, [pc, #200]	; (8009314 <netconn_recv+0xe0>)
 800924a:	f240 3263 	movw	r2, #867	; 0x363
 800924e:	4932      	ldr	r1, [pc, #200]	; (8009318 <netconn_recv+0xe4>)
 8009250:	4832      	ldr	r0, [pc, #200]	; (800931c <netconn_recv+0xe8>)
 8009252:	f00f fe7b 	bl	8018f4c <iprintf>
 8009256:	f06f 030f 	mvn.w	r3, #15
 800925a:	e056      	b.n	800930a <netconn_recv+0xd6>
  *new_buf = NULL;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	2200      	movs	r2, #0
 8009260:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d109      	bne.n	800927c <netconn_recv+0x48>
 8009268:	4b2a      	ldr	r3, [pc, #168]	; (8009314 <netconn_recv+0xe0>)
 800926a:	f240 3265 	movw	r2, #869	; 0x365
 800926e:	492c      	ldr	r1, [pc, #176]	; (8009320 <netconn_recv+0xec>)
 8009270:	482a      	ldr	r0, [pc, #168]	; (800931c <netconn_recv+0xe8>)
 8009272:	f00f fe6b 	bl	8018f4c <iprintf>
 8009276:	f06f 030f 	mvn.w	r3, #15
 800927a:	e046      	b.n	800930a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009284:	2b10      	cmp	r3, #16
 8009286:	d13a      	bne.n	80092fe <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009288:	2300      	movs	r3, #0
 800928a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800928c:	2006      	movs	r0, #6
 800928e:	f007 fb8b 	bl	80109a8 <memp_malloc>
 8009292:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d102      	bne.n	80092a0 <netconn_recv+0x6c>
      return ERR_MEM;
 800929a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800929e:	e034      	b.n	800930a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80092a0:	f107 030c 	add.w	r3, r7, #12
 80092a4:	2200      	movs	r2, #0
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7ff fee7 	bl	800907c <netconn_recv_data_tcp>
 80092ae:	4603      	mov	r3, r0
 80092b0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80092b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d006      	beq.n	80092c8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80092ba:	6979      	ldr	r1, [r7, #20]
 80092bc:	2006      	movs	r0, #6
 80092be:	f007 fbe9 	bl	8010a94 <memp_free>
      return err;
 80092c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80092c6:	e020      	b.n	800930a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d106      	bne.n	80092dc <netconn_recv+0xa8>
 80092ce:	4b11      	ldr	r3, [pc, #68]	; (8009314 <netconn_recv+0xe0>)
 80092d0:	f240 3279 	movw	r2, #889	; 0x379
 80092d4:	4913      	ldr	r1, [pc, #76]	; (8009324 <netconn_recv+0xf0>)
 80092d6:	4811      	ldr	r0, [pc, #68]	; (800931c <netconn_recv+0xe8>)
 80092d8:	f00f fe38 	bl	8018f4c <iprintf>

    buf->p = p;
 80092dc:	68fa      	ldr	r2, [r7, #12]
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80092e2:	68fa      	ldr	r2, [r7, #12]
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	2200      	movs	r2, #0
 80092ec:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2200      	movs	r2, #0
 80092f2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80092fa:	2300      	movs	r3, #0
 80092fc:	e005      	b.n	800930a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80092fe:	2200      	movs	r2, #0
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff fd94 	bl	8008e30 <netconn_recv_data>
 8009308:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800930a:	4618      	mov	r0, r3
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	0801adc4 	.word	0x0801adc4
 8009318:	0801b020 	.word	0x0801b020
 800931c:	0801ae60 	.word	0x0801ae60
 8009320:	0801b040 	.word	0x0801b040
 8009324:	0801b0b8 	.word	0x0801b0b8

08009328 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b08c      	sub	sp, #48	; 0x30
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d109      	bne.n	800934c <netconn_send+0x24>
 8009338:	4b0e      	ldr	r3, [pc, #56]	; (8009374 <netconn_send+0x4c>)
 800933a:	f240 32b2 	movw	r2, #946	; 0x3b2
 800933e:	490e      	ldr	r1, [pc, #56]	; (8009378 <netconn_send+0x50>)
 8009340:	480e      	ldr	r0, [pc, #56]	; (800937c <netconn_send+0x54>)
 8009342:	f00f fe03 	bl	8018f4c <iprintf>
 8009346:	f06f 030f 	mvn.w	r3, #15
 800934a:	e00e      	b.n	800936a <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8009354:	f107 030c 	add.w	r3, r7, #12
 8009358:	4619      	mov	r1, r3
 800935a:	4809      	ldr	r0, [pc, #36]	; (8009380 <netconn_send+0x58>)
 800935c:	f7ff faec 	bl	8008938 <netconn_apimsg>
 8009360:	4603      	mov	r3, r0
 8009362:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009366:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800936a:	4618      	mov	r0, r3
 800936c:	3730      	adds	r7, #48	; 0x30
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	0801adc4 	.word	0x0801adc4
 8009378:	0801b0c4 	.word	0x0801b0c4
 800937c:	0801ae60 	.word	0x0801ae60
 8009380:	0800aae1 	.word	0x0800aae1

08009384 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af02      	add	r7, sp, #8
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
 8009390:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800939a:	78fa      	ldrb	r2, [r7, #3]
 800939c:	f107 0110 	add.w	r1, r7, #16
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	4613      	mov	r3, r2
 80093a6:	2201      	movs	r2, #1
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 f805 	bl	80093b8 <netconn_write_vectors_partly>
 80093ae:	4603      	mov	r3, r0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b092      	sub	sp, #72	; 0x48
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	4611      	mov	r1, r2
 80093c4:	461a      	mov	r2, r3
 80093c6:	460b      	mov	r3, r1
 80093c8:	80fb      	strh	r3, [r7, #6]
 80093ca:	4613      	mov	r3, r2
 80093cc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <netconn_write_vectors_partly+0x30>
 80093d4:	4b4e      	ldr	r3, [pc, #312]	; (8009510 <netconn_write_vectors_partly+0x158>)
 80093d6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80093da:	494e      	ldr	r1, [pc, #312]	; (8009514 <netconn_write_vectors_partly+0x15c>)
 80093dc:	484e      	ldr	r0, [pc, #312]	; (8009518 <netconn_write_vectors_partly+0x160>)
 80093de:	f00f fdb5 	bl	8018f4c <iprintf>
 80093e2:	f06f 030f 	mvn.w	r3, #15
 80093e6:	e08e      	b.n	8009506 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093f0:	2b10      	cmp	r3, #16
 80093f2:	d009      	beq.n	8009408 <netconn_write_vectors_partly+0x50>
 80093f4:	4b46      	ldr	r3, [pc, #280]	; (8009510 <netconn_write_vectors_partly+0x158>)
 80093f6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80093fa:	4948      	ldr	r1, [pc, #288]	; (800951c <netconn_write_vectors_partly+0x164>)
 80093fc:	4846      	ldr	r0, [pc, #280]	; (8009518 <netconn_write_vectors_partly+0x160>)
 80093fe:	f00f fda5 	bl	8018f4c <iprintf>
 8009402:	f06f 0305 	mvn.w	r3, #5
 8009406:	e07e      	b.n	8009506 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	7f1b      	ldrb	r3, [r3, #28]
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d104      	bne.n	800941e <netconn_write_vectors_partly+0x66>
 8009414:	797b      	ldrb	r3, [r7, #5]
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <netconn_write_vectors_partly+0x6a>
 800941e:	2301      	movs	r3, #1
 8009420:	e000      	b.n	8009424 <netconn_write_vectors_partly+0x6c>
 8009422:	2300      	movs	r3, #0
 8009424:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009428:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <netconn_write_vectors_partly+0x84>
 8009430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009432:	2b00      	cmp	r3, #0
 8009434:	d102      	bne.n	800943c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009436:	f06f 0305 	mvn.w	r3, #5
 800943a:	e064      	b.n	8009506 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009440:	2300      	movs	r3, #0
 8009442:	643b      	str	r3, [r7, #64]	; 0x40
 8009444:	e015      	b.n	8009472 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009448:	00db      	lsls	r3, r3, #3
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	4413      	add	r3, r2
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009452:	4413      	add	r3, r2
 8009454:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009458:	00db      	lsls	r3, r3, #3
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	4413      	add	r3, r2
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009462:	429a      	cmp	r2, r3
 8009464:	d202      	bcs.n	800946c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009466:	f06f 0305 	mvn.w	r3, #5
 800946a:	e04c      	b.n	8009506 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800946c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946e:	3301      	adds	r3, #1
 8009470:	643b      	str	r3, [r7, #64]	; 0x40
 8009472:	88fb      	ldrh	r3, [r7, #6]
 8009474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009476:	429a      	cmp	r2, r3
 8009478:	dbe5      	blt.n	8009446 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800947a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	e040      	b.n	8009506 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009486:	2b00      	cmp	r3, #0
 8009488:	da0a      	bge.n	80094a0 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800948a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800948c:	2b00      	cmp	r3, #0
 800948e:	d102      	bne.n	8009496 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009490:	f06f 0305 	mvn.w	r3, #5
 8009494:	e037      	b.n	8009506 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009496:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800949a:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80094b0:	797b      	ldrb	r3, [r7, #5]
 80094b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80094b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094b8:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80094be:	f107 0314 	add.w	r3, r7, #20
 80094c2:	4619      	mov	r1, r3
 80094c4:	4816      	ldr	r0, [pc, #88]	; (8009520 <netconn_write_vectors_partly+0x168>)
 80094c6:	f7ff fa37 	bl	8008938 <netconn_apimsg>
 80094ca:	4603      	mov	r3, r0
 80094cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80094d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d114      	bne.n	8009502 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80094d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d002      	beq.n	80094e4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80094de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094e2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80094e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10a      	bne.n	8009502 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80094ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d006      	beq.n	8009502 <netconn_write_vectors_partly+0x14a>
 80094f4:	4b06      	ldr	r3, [pc, #24]	; (8009510 <netconn_write_vectors_partly+0x158>)
 80094f6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80094fa:	490a      	ldr	r1, [pc, #40]	; (8009524 <netconn_write_vectors_partly+0x16c>)
 80094fc:	4806      	ldr	r0, [pc, #24]	; (8009518 <netconn_write_vectors_partly+0x160>)
 80094fe:	f00f fd25 	bl	8018f4c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009502:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009506:	4618      	mov	r0, r3
 8009508:	3748      	adds	r7, #72	; 0x48
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	0801adc4 	.word	0x0801adc4
 8009514:	0801b0e0 	.word	0x0801b0e0
 8009518:	0801ae60 	.word	0x0801ae60
 800951c:	0801b0fc 	.word	0x0801b0fc
 8009520:	0800af81 	.word	0x0800af81
 8009524:	0801b120 	.word	0x0801b120

08009528 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b08c      	sub	sp, #48	; 0x30
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <netconn_close_shutdown+0x26>
 800953a:	4b0f      	ldr	r3, [pc, #60]	; (8009578 <netconn_close_shutdown+0x50>)
 800953c:	f240 4247 	movw	r2, #1095	; 0x447
 8009540:	490e      	ldr	r1, [pc, #56]	; (800957c <netconn_close_shutdown+0x54>)
 8009542:	480f      	ldr	r0, [pc, #60]	; (8009580 <netconn_close_shutdown+0x58>)
 8009544:	f00f fd02 	bl	8018f4c <iprintf>
 8009548:	f06f 030f 	mvn.w	r3, #15
 800954c:	e010      	b.n	8009570 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009556:	2329      	movs	r3, #41	; 0x29
 8009558:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800955a:	f107 030c 	add.w	r3, r7, #12
 800955e:	4619      	mov	r1, r3
 8009560:	4808      	ldr	r0, [pc, #32]	; (8009584 <netconn_close_shutdown+0x5c>)
 8009562:	f7ff f9e9 	bl	8008938 <netconn_apimsg>
 8009566:	4603      	mov	r3, r0
 8009568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800956c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009570:	4618      	mov	r0, r3
 8009572:	3730      	adds	r7, #48	; 0x30
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	0801adc4 	.word	0x0801adc4
 800957c:	0801b144 	.word	0x0801b144
 8009580:	0801ae60 	.word	0x0801ae60
 8009584:	0800b1a5 	.word	0x0800b1a5

08009588 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009590:	2103      	movs	r1, #3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7ff ffc8 	bl	8009528 <netconn_close_shutdown>
 8009598:	4603      	mov	r3, r0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <netconn_err+0x12>
    return ERR_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	e00d      	b.n	80095d0 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80095b4:	f00f fc02 	bl	8018dbc <sys_arch_protect>
 80095b8:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	7a1b      	ldrb	r3, [r3, #8]
 80095be:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f00f fc06 	bl	8018dd8 <sys_arch_unprotect>
  return err;
 80095cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <netconn_gethostbyname>:
netconn_gethostbyname_addrtype(const char *name, ip_addr_t *addr, u8_t dns_addrtype)
#else
err_t
netconn_gethostbyname(const char *name, ip_addr_t *addr)
#endif
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b08a      	sub	sp, #40	; 0x28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  sys_sem_t sem;
#endif /* LWIP_MPU_COMPATIBLE */
  err_t err;
  err_t cberr;

  LWIP_ERROR("netconn_gethostbyname: invalid name", (name != NULL), return ERR_ARG;);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d109      	bne.n	80095fc <netconn_gethostbyname+0x24>
 80095e8:	4b24      	ldr	r3, [pc, #144]	; (800967c <netconn_gethostbyname+0xa4>)
 80095ea:	f240 5204 	movw	r2, #1284	; 0x504
 80095ee:	4924      	ldr	r1, [pc, #144]	; (8009680 <netconn_gethostbyname+0xa8>)
 80095f0:	4824      	ldr	r0, [pc, #144]	; (8009684 <netconn_gethostbyname+0xac>)
 80095f2:	f00f fcab 	bl	8018f4c <iprintf>
 80095f6:	f06f 030f 	mvn.w	r3, #15
 80095fa:	e03b      	b.n	8009674 <netconn_gethostbyname+0x9c>
  LWIP_ERROR("netconn_gethostbyname: invalid addr", (addr != NULL), return ERR_ARG;);
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d109      	bne.n	8009616 <netconn_gethostbyname+0x3e>
 8009602:	4b1e      	ldr	r3, [pc, #120]	; (800967c <netconn_gethostbyname+0xa4>)
 8009604:	f240 5205 	movw	r2, #1285	; 0x505
 8009608:	491f      	ldr	r1, [pc, #124]	; (8009688 <netconn_gethostbyname+0xb0>)
 800960a:	481e      	ldr	r0, [pc, #120]	; (8009684 <netconn_gethostbyname+0xac>)
 800960c:	f00f fc9e 	bl	8018f4c <iprintf>
 8009610:	f06f 030f 	mvn.w	r3, #15
 8009614:	e02e      	b.n	8009674 <netconn_gethostbyname+0x9c>
  API_VAR_ALLOC(struct dns_api_msg, MEMP_DNS_API_MSG, msg, ERR_MEM);
#if LWIP_MPU_COMPATIBLE
  strncpy(API_VAR_REF(msg).name, name, DNS_MAX_NAME_LENGTH - 1);
  API_VAR_REF(msg).name[DNS_MAX_NAME_LENGTH - 1] = 0;
#else /* LWIP_MPU_COMPATIBLE */
  msg.err = &err;
 8009616:	f107 030f 	add.w	r3, r7, #15
 800961a:	623b      	str	r3, [r7, #32]
  msg.sem = &sem;
 800961c:	f107 0310 	add.w	r3, r7, #16
 8009620:	61fb      	str	r3, [r7, #28]
  API_VAR_REF(msg).addr = API_VAR_REF(addr);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	61bb      	str	r3, [r7, #24]
  API_VAR_REF(msg).name = name;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	617b      	str	r3, [r7, #20]
  API_VAR_REF(msg).dns_addrtype = dns_addrtype;
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_NETCONN_SEM_PER_THREAD
  API_VAR_REF(msg).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD*/
  err = sys_sem_new(API_EXPR_REF(API_VAR_REF(msg).sem), 0);
 800962a:	69fb      	ldr	r3, [r7, #28]
 800962c:	2100      	movs	r1, #0
 800962e:	4618      	mov	r0, r3
 8009630:	f00f fad3 	bl	8018bda <sys_sem_new>
 8009634:	4603      	mov	r3, r0
 8009636:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8009638:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d002      	beq.n	8009646 <netconn_gethostbyname+0x6e>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return err;
 8009640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009644:	e016      	b.n	8009674 <netconn_gethostbyname+0x9c>
  }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  cberr = tcpip_send_msg_wait_sem(lwip_netconn_do_gethostbyname, &API_VAR_REF(msg), API_EXPR_REF(API_VAR_REF(msg).sem));
 8009646:	69fa      	ldr	r2, [r7, #28]
 8009648:	f107 0314 	add.w	r3, r7, #20
 800964c:	4619      	mov	r1, r3
 800964e:	480f      	ldr	r0, [pc, #60]	; (800968c <netconn_gethostbyname+0xb4>)
 8009650:	f003 f912 	bl	800c878 <tcpip_send_msg_wait_sem>
 8009654:	4603      	mov	r3, r0
 8009656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(API_EXPR_REF(API_VAR_REF(msg).sem));
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	4618      	mov	r0, r3
 800965e:	f00f fb20 	bl	8018ca2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
  if (cberr != ERR_OK) {
 8009662:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009666:	2b00      	cmp	r3, #0
 8009668:	d002      	beq.n	8009670 <netconn_gethostbyname+0x98>
    API_VAR_FREE(MEMP_DNS_API_MSG, msg);
    return cberr;
 800966a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800966e:	e001      	b.n	8009674 <netconn_gethostbyname+0x9c>
  *addr = msg->addr;
  err = msg->err;
#endif /* LWIP_MPU_COMPATIBLE */

  API_VAR_FREE(MEMP_DNS_API_MSG, msg);
  return err;
 8009670:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3728      	adds	r7, #40	; 0x28
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	0801adc4 	.word	0x0801adc4
 8009680:	0801b160 	.word	0x0801b160
 8009684:	0801ae60 	.word	0x0801ae60
 8009688:	0801b184 	.word	0x0801b184
 800968c:	0800b301 	.word	0x0800b301

08009690 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800969a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800969e:	f113 0f0d 	cmn.w	r3, #13
 80096a2:	d009      	beq.n	80096b8 <lwip_netconn_err_to_msg+0x28>
 80096a4:	f113 0f0d 	cmn.w	r3, #13
 80096a8:	dc0c      	bgt.n	80096c4 <lwip_netconn_err_to_msg+0x34>
 80096aa:	f113 0f0f 	cmn.w	r3, #15
 80096ae:	d007      	beq.n	80096c0 <lwip_netconn_err_to_msg+0x30>
 80096b0:	f113 0f0e 	cmn.w	r3, #14
 80096b4:	d002      	beq.n	80096bc <lwip_netconn_err_to_msg+0x2c>
 80096b6:	e005      	b.n	80096c4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80096b8:	4b0a      	ldr	r3, [pc, #40]	; (80096e4 <lwip_netconn_err_to_msg+0x54>)
 80096ba:	e00e      	b.n	80096da <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <lwip_netconn_err_to_msg+0x58>)
 80096be:	e00c      	b.n	80096da <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80096c0:	4b0a      	ldr	r3, [pc, #40]	; (80096ec <lwip_netconn_err_to_msg+0x5c>)
 80096c2:	e00a      	b.n	80096da <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80096c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d005      	beq.n	80096d8 <lwip_netconn_err_to_msg+0x48>
 80096cc:	4b08      	ldr	r3, [pc, #32]	; (80096f0 <lwip_netconn_err_to_msg+0x60>)
 80096ce:	227d      	movs	r2, #125	; 0x7d
 80096d0:	4908      	ldr	r1, [pc, #32]	; (80096f4 <lwip_netconn_err_to_msg+0x64>)
 80096d2:	4809      	ldr	r0, [pc, #36]	; (80096f8 <lwip_netconn_err_to_msg+0x68>)
 80096d4:	f00f fc3a 	bl	8018f4c <iprintf>
      return NULL;
 80096d8:	2300      	movs	r3, #0
  }
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	0801b1a8 	.word	0x0801b1a8
 80096e8:	0801b1a9 	.word	0x0801b1a9
 80096ec:	0801b1aa 	.word	0x0801b1aa
 80096f0:	0801b1ac 	.word	0x0801b1ac
 80096f4:	0801b224 	.word	0x0801b224
 80096f8:	0801b234 	.word	0x0801b234

080096fc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d105      	bne.n	8009718 <lwip_netconn_is_err_msg+0x1c>
 800970c:	4b12      	ldr	r3, [pc, #72]	; (8009758 <lwip_netconn_is_err_msg+0x5c>)
 800970e:	2285      	movs	r2, #133	; 0x85
 8009710:	4912      	ldr	r1, [pc, #72]	; (800975c <lwip_netconn_is_err_msg+0x60>)
 8009712:	4813      	ldr	r0, [pc, #76]	; (8009760 <lwip_netconn_is_err_msg+0x64>)
 8009714:	f00f fc1a 	bl	8018f4c <iprintf>

  if (msg == &netconn_aborted) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a12      	ldr	r2, [pc, #72]	; (8009764 <lwip_netconn_is_err_msg+0x68>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d104      	bne.n	800972a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	22f3      	movs	r2, #243	; 0xf3
 8009724:	701a      	strb	r2, [r3, #0]
    return 1;
 8009726:	2301      	movs	r3, #1
 8009728:	e012      	b.n	8009750 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a0e      	ldr	r2, [pc, #56]	; (8009768 <lwip_netconn_is_err_msg+0x6c>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d104      	bne.n	800973c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	22f2      	movs	r2, #242	; 0xf2
 8009736:	701a      	strb	r2, [r3, #0]
    return 1;
 8009738:	2301      	movs	r3, #1
 800973a:	e009      	b.n	8009750 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a0b      	ldr	r2, [pc, #44]	; (800976c <lwip_netconn_is_err_msg+0x70>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d104      	bne.n	800974e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	22f1      	movs	r2, #241	; 0xf1
 8009748:	701a      	strb	r2, [r3, #0]
    return 1;
 800974a:	2301      	movs	r3, #1
 800974c:	e000      	b.n	8009750 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3708      	adds	r7, #8
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	0801b1ac 	.word	0x0801b1ac
 800975c:	0801b25c 	.word	0x0801b25c
 8009760:	0801b234 	.word	0x0801b234
 8009764:	0801b1a8 	.word	0x0801b1a8
 8009768:	0801b1a9 	.word	0x0801b1a9
 800976c:	0801b1aa 	.word	0x0801b1aa

08009770 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b088      	sub	sp, #32
 8009774:	af00      	add	r7, sp, #0
 8009776:	60f8      	str	r0, [r7, #12]
 8009778:	60b9      	str	r1, [r7, #8]
 800977a:	607a      	str	r2, [r7, #4]
 800977c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d105      	bne.n	8009790 <recv_udp+0x20>
 8009784:	4b34      	ldr	r3, [pc, #208]	; (8009858 <recv_udp+0xe8>)
 8009786:	22e5      	movs	r2, #229	; 0xe5
 8009788:	4934      	ldr	r1, [pc, #208]	; (800985c <recv_udp+0xec>)
 800978a:	4835      	ldr	r0, [pc, #212]	; (8009860 <recv_udp+0xf0>)
 800978c:	f00f fbde 	bl	8018f4c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d105      	bne.n	80097a2 <recv_udp+0x32>
 8009796:	4b30      	ldr	r3, [pc, #192]	; (8009858 <recv_udp+0xe8>)
 8009798:	22e6      	movs	r2, #230	; 0xe6
 800979a:	4932      	ldr	r1, [pc, #200]	; (8009864 <recv_udp+0xf4>)
 800979c:	4830      	ldr	r0, [pc, #192]	; (8009860 <recv_udp+0xf0>)
 800979e:	f00f fbd5 	bl	8018f4c <iprintf>
  conn = (struct netconn *)arg;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80097a6:	69fb      	ldr	r3, [r7, #28]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d103      	bne.n	80097b4 <recv_udp+0x44>
    pbuf_free(p);
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f007 ffeb 	bl	8011788 <pbuf_free>
    return;
 80097b2:	e04d      	b.n	8009850 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80097b4:	69fb      	ldr	r3, [r7, #28]
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	68ba      	ldr	r2, [r7, #8]
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d005      	beq.n	80097ca <recv_udp+0x5a>
 80097be:	4b26      	ldr	r3, [pc, #152]	; (8009858 <recv_udp+0xe8>)
 80097c0:	22ee      	movs	r2, #238	; 0xee
 80097c2:	4929      	ldr	r1, [pc, #164]	; (8009868 <recv_udp+0xf8>)
 80097c4:	4826      	ldr	r0, [pc, #152]	; (8009860 <recv_udp+0xf0>)
 80097c6:	f00f fbc1 	bl	8018f4c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	3310      	adds	r3, #16
 80097ce:	4618      	mov	r0, r3
 80097d0:	f00f f9e5 	bl	8018b9e <sys_mbox_valid>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d103      	bne.n	80097e2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f007 ffd4 	bl	8011788 <pbuf_free>
    return;
 80097e0:	e036      	b.n	8009850 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80097e2:	2006      	movs	r0, #6
 80097e4:	f007 f8e0 	bl	80109a8 <memp_malloc>
 80097e8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d103      	bne.n	80097f8 <recv_udp+0x88>
    pbuf_free(p);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f007 ffc9 	bl	8011788 <pbuf_free>
    return;
 80097f6:	e02b      	b.n	8009850 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80097fe:	69bb      	ldr	r3, [r7, #24]
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <recv_udp+0xa0>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	e000      	b.n	8009812 <recv_udp+0xa2>
 8009810:	2300      	movs	r3, #0
 8009812:	69ba      	ldr	r2, [r7, #24]
 8009814:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800981a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	891b      	ldrh	r3, [r3, #8]
 8009820:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	3310      	adds	r3, #16
 8009826:	69b9      	ldr	r1, [r7, #24]
 8009828:	4618      	mov	r0, r3
 800982a:	f00f f943 	bl	8018ab4 <sys_mbox_trypost>
 800982e:	4603      	mov	r3, r0
 8009830:	2b00      	cmp	r3, #0
 8009832:	d003      	beq.n	800983c <recv_udp+0xcc>
    netbuf_delete(buf);
 8009834:	69b8      	ldr	r0, [r7, #24]
 8009836:	f001 fdc7 	bl	800b3c8 <netbuf_delete>
    return;
 800983a:	e009      	b.n	8009850 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800983c:	69fb      	ldr	r3, [r7, #28]
 800983e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009840:	2b00      	cmp	r3, #0
 8009842:	d005      	beq.n	8009850 <recv_udp+0xe0>
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009848:	8afa      	ldrh	r2, [r7, #22]
 800984a:	2100      	movs	r1, #0
 800984c:	69f8      	ldr	r0, [r7, #28]
 800984e:	4798      	blx	r3
  }
}
 8009850:	3720      	adds	r7, #32
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	0801b1ac 	.word	0x0801b1ac
 800985c:	0801b268 	.word	0x0801b268
 8009860:	0801b234 	.word	0x0801b234
 8009864:	0801b28c 	.word	0x0801b28c
 8009868:	0801b2ac 	.word	0x0801b2ac

0800986c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d106      	bne.n	800988e <recv_tcp+0x22>
 8009880:	4b36      	ldr	r3, [pc, #216]	; (800995c <recv_tcp+0xf0>)
 8009882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009886:	4936      	ldr	r1, [pc, #216]	; (8009960 <recv_tcp+0xf4>)
 8009888:	4836      	ldr	r0, [pc, #216]	; (8009964 <recv_tcp+0xf8>)
 800988a:	f00f fb5f 	bl	8018f4c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d106      	bne.n	80098a2 <recv_tcp+0x36>
 8009894:	4b31      	ldr	r3, [pc, #196]	; (800995c <recv_tcp+0xf0>)
 8009896:	f240 122d 	movw	r2, #301	; 0x12d
 800989a:	4933      	ldr	r1, [pc, #204]	; (8009968 <recv_tcp+0xfc>)
 800989c:	4831      	ldr	r0, [pc, #196]	; (8009964 <recv_tcp+0xf8>)
 800989e:	f00f fb55 	bl	8018f4c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80098a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d006      	beq.n	80098b8 <recv_tcp+0x4c>
 80098aa:	4b2c      	ldr	r3, [pc, #176]	; (800995c <recv_tcp+0xf0>)
 80098ac:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80098b0:	492e      	ldr	r1, [pc, #184]	; (800996c <recv_tcp+0x100>)
 80098b2:	482c      	ldr	r0, [pc, #176]	; (8009964 <recv_tcp+0xf8>)
 80098b4:	f00f fb4a 	bl	8018f4c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d102      	bne.n	80098c8 <recv_tcp+0x5c>
    return ERR_VAL;
 80098c2:	f06f 0305 	mvn.w	r3, #5
 80098c6:	e045      	b.n	8009954 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	68ba      	ldr	r2, [r7, #8]
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d006      	beq.n	80098e0 <recv_tcp+0x74>
 80098d2:	4b22      	ldr	r3, [pc, #136]	; (800995c <recv_tcp+0xf0>)
 80098d4:	f240 1235 	movw	r2, #309	; 0x135
 80098d8:	4925      	ldr	r1, [pc, #148]	; (8009970 <recv_tcp+0x104>)
 80098da:	4822      	ldr	r0, [pc, #136]	; (8009964 <recv_tcp+0xf8>)
 80098dc:	f00f fb36 	bl	8018f4c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	3310      	adds	r3, #16
 80098e4:	4618      	mov	r0, r3
 80098e6:	f00f f95a 	bl	8018b9e <sys_mbox_valid>
 80098ea:	4603      	mov	r3, r0
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d10d      	bne.n	800990c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d008      	beq.n	8009908 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	891b      	ldrh	r3, [r3, #8]
 80098fa:	4619      	mov	r1, r3
 80098fc:	68b8      	ldr	r0, [r7, #8]
 80098fe:	f009 f87d 	bl	80129fc <tcp_recved>
      pbuf_free(p);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f007 ff40 	bl	8011788 <pbuf_free>
    }
    return ERR_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	e023      	b.n	8009954 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d005      	beq.n	800991e <recv_tcp+0xb2>
    msg = p;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	891b      	ldrh	r3, [r3, #8]
 800991a:	83fb      	strh	r3, [r7, #30]
 800991c:	e003      	b.n	8009926 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800991e:	4b15      	ldr	r3, [pc, #84]	; (8009974 <recv_tcp+0x108>)
 8009920:	61bb      	str	r3, [r7, #24]
    len = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	3310      	adds	r3, #16
 800992a:	69b9      	ldr	r1, [r7, #24]
 800992c:	4618      	mov	r0, r3
 800992e:	f00f f8c1 	bl	8018ab4 <sys_mbox_trypost>
 8009932:	4603      	mov	r3, r0
 8009934:	2b00      	cmp	r3, #0
 8009936:	d002      	beq.n	800993e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800993c:	e00a      	b.n	8009954 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	2b00      	cmp	r3, #0
 8009944:	d005      	beq.n	8009952 <recv_tcp+0xe6>
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994a:	8bfa      	ldrh	r2, [r7, #30]
 800994c:	2100      	movs	r1, #0
 800994e:	6978      	ldr	r0, [r7, #20]
 8009950:	4798      	blx	r3
  }

  return ERR_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3720      	adds	r7, #32
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	0801b1ac 	.word	0x0801b1ac
 8009960:	0801b2cc 	.word	0x0801b2cc
 8009964:	0801b234 	.word	0x0801b234
 8009968:	0801b2f0 	.word	0x0801b2f0
 800996c:	0801b310 	.word	0x0801b310
 8009970:	0801b328 	.word	0x0801b328
 8009974:	0801b1aa 	.word	0x0801b1aa

08009978 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d106      	bne.n	800999a <poll_tcp+0x22>
 800998c:	4b2a      	ldr	r3, [pc, #168]	; (8009a38 <poll_tcp+0xc0>)
 800998e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8009992:	492a      	ldr	r1, [pc, #168]	; (8009a3c <poll_tcp+0xc4>)
 8009994:	482a      	ldr	r0, [pc, #168]	; (8009a40 <poll_tcp+0xc8>)
 8009996:	f00f fad9 	bl	8018f4c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	785b      	ldrb	r3, [r3, #1]
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d104      	bne.n	80099ac <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80099a2:	2101      	movs	r1, #1
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f001 f91d 	bl	800abe4 <lwip_netconn_do_writemore>
 80099aa:	e016      	b.n	80099da <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	785b      	ldrb	r3, [r3, #1]
 80099b0:	2b04      	cmp	r3, #4
 80099b2:	d112      	bne.n	80099da <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6a1b      	ldr	r3, [r3, #32]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d00a      	beq.n	80099d2 <poll_tcp+0x5a>
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6a1b      	ldr	r3, [r3, #32]
 80099c0:	7a5b      	ldrb	r3, [r3, #9]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d005      	beq.n	80099d2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	7a5a      	ldrb	r2, [r3, #9]
 80099cc:	3a01      	subs	r2, #1
 80099ce:	b2d2      	uxtb	r2, r2
 80099d0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80099d2:	2101      	movs	r1, #1
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 fbfb 	bl	800a1d0 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	7f1b      	ldrb	r3, [r3, #28]
 80099de:	f003 0310 	and.w	r3, r3, #16
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d022      	beq.n	8009a2c <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d01e      	beq.n	8009a2c <poll_tcp+0xb4>
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80099f6:	f640 3269 	movw	r2, #2921	; 0xb69
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d916      	bls.n	8009a2c <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d810      	bhi.n	8009a2c <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	7f1b      	ldrb	r3, [r3, #28]
 8009a0e:	f023 0310 	bic.w	r3, r3, #16
 8009a12:	b2da      	uxtb	r2, r3
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d005      	beq.n	8009a2c <poll_tcp+0xb4>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	2200      	movs	r2, #0
 8009a26:	2102      	movs	r1, #2
 8009a28:	68f8      	ldr	r0, [r7, #12]
 8009a2a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	0801b1ac 	.word	0x0801b1ac
 8009a3c:	0801b348 	.word	0x0801b348
 8009a40:	0801b234 	.word	0x0801b234

08009a44 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	4613      	mov	r3, r2
 8009a50:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d106      	bne.n	8009a6a <sent_tcp+0x26>
 8009a5c:	4b21      	ldr	r3, [pc, #132]	; (8009ae4 <sent_tcp+0xa0>)
 8009a5e:	f240 1293 	movw	r2, #403	; 0x193
 8009a62:	4921      	ldr	r1, [pc, #132]	; (8009ae8 <sent_tcp+0xa4>)
 8009a64:	4821      	ldr	r0, [pc, #132]	; (8009aec <sent_tcp+0xa8>)
 8009a66:	f00f fa71 	bl	8018f4c <iprintf>

  if (conn) {
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d033      	beq.n	8009ad8 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	785b      	ldrb	r3, [r3, #1]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d104      	bne.n	8009a82 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009a78:	2101      	movs	r1, #1
 8009a7a:	6978      	ldr	r0, [r7, #20]
 8009a7c:	f001 f8b2 	bl	800abe4 <lwip_netconn_do_writemore>
 8009a80:	e007      	b.n	8009a92 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	785b      	ldrb	r3, [r3, #1]
 8009a86:	2b04      	cmp	r3, #4
 8009a88:	d103      	bne.n	8009a92 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009a8a:	2101      	movs	r1, #1
 8009a8c:	6978      	ldr	r0, [r7, #20]
 8009a8e:	f000 fb9f 	bl	800a1d0 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d01e      	beq.n	8009ad8 <sent_tcp+0x94>
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009aa2:	f640 3269 	movw	r2, #2921	; 0xb69
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d916      	bls.n	8009ad8 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009ab2:	2b04      	cmp	r3, #4
 8009ab4:	d810      	bhi.n	8009ad8 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	7f1b      	ldrb	r3, [r3, #28]
 8009aba:	f023 0310 	bic.w	r3, r3, #16
 8009abe:	b2da      	uxtb	r2, r3
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d005      	beq.n	8009ad8 <sent_tcp+0x94>
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad0:	88fa      	ldrh	r2, [r7, #6]
 8009ad2:	2102      	movs	r1, #2
 8009ad4:	6978      	ldr	r0, [r7, #20]
 8009ad6:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	0801b1ac 	.word	0x0801b1ac
 8009ae8:	0801b348 	.word	0x0801b348
 8009aec:	0801b234 	.word	0x0801b234

08009af0 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b088      	sub	sp, #32
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	460b      	mov	r3, r1
 8009afa:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d106      	bne.n	8009b14 <err_tcp+0x24>
 8009b06:	4b5f      	ldr	r3, [pc, #380]	; (8009c84 <err_tcp+0x194>)
 8009b08:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009b0c:	495e      	ldr	r1, [pc, #376]	; (8009c88 <err_tcp+0x198>)
 8009b0e:	485f      	ldr	r0, [pc, #380]	; (8009c8c <err_tcp+0x19c>)
 8009b10:	f00f fa1c 	bl	8018f4c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009b14:	f00f f952 	bl	8018dbc <sys_arch_protect>
 8009b18:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	78fa      	ldrb	r2, [r7, #3]
 8009b24:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	7f1b      	ldrb	r3, [r3, #28]
 8009b2a:	f043 0301 	orr.w	r3, r3, #1
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	69fb      	ldr	r3, [r7, #28]
 8009b32:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	785b      	ldrb	r3, [r3, #1]
 8009b38:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009b40:	69b8      	ldr	r0, [r7, #24]
 8009b42:	f00f f949 	bl	8018dd8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d005      	beq.n	8009b5a <err_tcp+0x6a>
 8009b4e:	69fb      	ldr	r3, [r7, #28]
 8009b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b52:	2200      	movs	r2, #0
 8009b54:	2104      	movs	r1, #4
 8009b56:	69f8      	ldr	r0, [r7, #28]
 8009b58:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d005      	beq.n	8009b6e <err_tcp+0x7e>
 8009b62:	69fb      	ldr	r3, [r7, #28]
 8009b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b66:	2200      	movs	r2, #0
 8009b68:	2100      	movs	r1, #0
 8009b6a:	69f8      	ldr	r0, [r7, #28]
 8009b6c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d005      	beq.n	8009b82 <err_tcp+0x92>
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2102      	movs	r1, #2
 8009b7e:	69f8      	ldr	r0, [r7, #28]
 8009b80:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f7ff fd82 	bl	8009690 <lwip_netconn_err_to_msg>
 8009b8c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	3310      	adds	r3, #16
 8009b92:	4618      	mov	r0, r3
 8009b94:	f00f f803 	bl	8018b9e <sys_mbox_valid>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d005      	beq.n	8009baa <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	3310      	adds	r3, #16
 8009ba2:	6939      	ldr	r1, [r7, #16]
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f00e ff85 	bl	8018ab4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	3314      	adds	r3, #20
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f00e fff5 	bl	8018b9e <sys_mbox_valid>
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d005      	beq.n	8009bc6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009bba:	69fb      	ldr	r3, [r7, #28]
 8009bbc:	3314      	adds	r3, #20
 8009bbe:	6939      	ldr	r1, [r7, #16]
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f00e ff77 	bl	8018ab4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009bc6:	7dfb      	ldrb	r3, [r7, #23]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d005      	beq.n	8009bd8 <err_tcp+0xe8>
 8009bcc:	7dfb      	ldrb	r3, [r7, #23]
 8009bce:	2b04      	cmp	r3, #4
 8009bd0:	d002      	beq.n	8009bd8 <err_tcp+0xe8>
 8009bd2:	7dfb      	ldrb	r3, [r7, #23]
 8009bd4:	2b03      	cmp	r3, #3
 8009bd6:	d143      	bne.n	8009c60 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	7f1b      	ldrb	r3, [r3, #28]
 8009bdc:	f003 0304 	and.w	r3, r3, #4
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	bf14      	ite	ne
 8009be4:	2301      	movne	r3, #1
 8009be6:	2300      	moveq	r3, #0
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	7f1b      	ldrb	r3, [r3, #28]
 8009bf0:	f023 0304 	bic.w	r3, r3, #4
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d13b      	bne.n	8009c78 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	6a1b      	ldr	r3, [r3, #32]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d106      	bne.n	8009c16 <err_tcp+0x126>
 8009c08:	4b1e      	ldr	r3, [pc, #120]	; (8009c84 <err_tcp+0x194>)
 8009c0a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009c0e:	4920      	ldr	r1, [pc, #128]	; (8009c90 <err_tcp+0x1a0>)
 8009c10:	481e      	ldr	r0, [pc, #120]	; (8009c8c <err_tcp+0x19c>)
 8009c12:	f00f f99b 	bl	8018f4c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009c16:	7dfb      	ldrb	r3, [r7, #23]
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	d104      	bne.n	8009c26 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009c1c:	69fb      	ldr	r3, [r7, #28]
 8009c1e:	6a1b      	ldr	r3, [r3, #32]
 8009c20:	2200      	movs	r2, #0
 8009c22:	711a      	strb	r2, [r3, #4]
 8009c24:	e003      	b.n	8009c2e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	78fa      	ldrb	r2, [r7, #3]
 8009c2c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009c2e:	69fb      	ldr	r3, [r7, #28]
 8009c30:	6a1b      	ldr	r3, [r3, #32]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	330c      	adds	r3, #12
 8009c36:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009c38:	68b8      	ldr	r0, [r7, #8]
 8009c3a:	f00f f83f 	bl	8018cbc <sys_sem_valid>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d106      	bne.n	8009c52 <err_tcp+0x162>
 8009c44:	4b0f      	ldr	r3, [pc, #60]	; (8009c84 <err_tcp+0x194>)
 8009c46:	f240 12ef 	movw	r2, #495	; 0x1ef
 8009c4a:	4912      	ldr	r1, [pc, #72]	; (8009c94 <err_tcp+0x1a4>)
 8009c4c:	480f      	ldr	r0, [pc, #60]	; (8009c8c <err_tcp+0x19c>)
 8009c4e:	f00f f97d 	bl	8018f4c <iprintf>
      conn->current_msg = NULL;
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	2200      	movs	r2, #0
 8009c56:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009c58:	68b8      	ldr	r0, [r7, #8]
 8009c5a:	f00f f815 	bl	8018c88 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009c5e:	e00b      	b.n	8009c78 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009c60:	69fb      	ldr	r3, [r7, #28]
 8009c62:	6a1b      	ldr	r3, [r3, #32]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d008      	beq.n	8009c7a <err_tcp+0x18a>
 8009c68:	4b06      	ldr	r3, [pc, #24]	; (8009c84 <err_tcp+0x194>)
 8009c6a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009c6e:	490a      	ldr	r1, [pc, #40]	; (8009c98 <err_tcp+0x1a8>)
 8009c70:	4806      	ldr	r0, [pc, #24]	; (8009c8c <err_tcp+0x19c>)
 8009c72:	f00f f96b 	bl	8018f4c <iprintf>
  }
}
 8009c76:	e000      	b.n	8009c7a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009c78:	bf00      	nop
}
 8009c7a:	bf00      	nop
 8009c7c:	3720      	adds	r7, #32
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	0801b1ac 	.word	0x0801b1ac
 8009c88:	0801b348 	.word	0x0801b348
 8009c8c:	0801b234 	.word	0x0801b234
 8009c90:	0801b358 	.word	0x0801b358
 8009c94:	0801b374 	.word	0x0801b374
 8009c98:	0801b390 	.word	0x0801b390

08009c9c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685b      	ldr	r3, [r3, #4]
 8009ca8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009caa:	6879      	ldr	r1, [r7, #4]
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f009 fe45 	bl	801393c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009cb2:	490a      	ldr	r1, [pc, #40]	; (8009cdc <setup_tcp+0x40>)
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f009 fe53 	bl	8013960 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009cba:	4909      	ldr	r1, [pc, #36]	; (8009ce0 <setup_tcp+0x44>)
 8009cbc:	68f8      	ldr	r0, [r7, #12]
 8009cbe:	f009 fe71 	bl	80139a4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009cc2:	2202      	movs	r2, #2
 8009cc4:	4907      	ldr	r1, [pc, #28]	; (8009ce4 <setup_tcp+0x48>)
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f009 fec6 	bl	8013a58 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009ccc:	4906      	ldr	r1, [pc, #24]	; (8009ce8 <setup_tcp+0x4c>)
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f009 fe88 	bl	80139e4 <tcp_err>
}
 8009cd4:	bf00      	nop
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	0800986d 	.word	0x0800986d
 8009ce0:	08009a45 	.word	0x08009a45
 8009ce4:	08009979 	.word	0x08009979
 8009ce8:	08009af1 	.word	0x08009af1

08009cec <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009cec:	b590      	push	{r4, r7, lr}
 8009cee:	b089      	sub	sp, #36	; 0x24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d102      	bne.n	8009d0a <accept_function+0x1e>
    return ERR_VAL;
 8009d04:	f06f 0305 	mvn.w	r3, #5
 8009d08:	e0a1      	b.n	8009e4e <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	3314      	adds	r3, #20
 8009d0e:	4618      	mov	r0, r3
 8009d10:	f00e ff45 	bl	8018b9e <sys_mbox_valid>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d102      	bne.n	8009d20 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009d1a:	f06f 0305 	mvn.w	r3, #5
 8009d1e:	e096      	b.n	8009e4e <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d11b      	bne.n	8009d5e <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	f103 0414 	add.w	r4, r3, #20
 8009d2c:	f06f 000c 	mvn.w	r0, #12
 8009d30:	f7ff fcae 	bl	8009690 <lwip_netconn_err_to_msg>
 8009d34:	4603      	mov	r3, r0
 8009d36:	4619      	mov	r1, r3
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f00e febb 	bl	8018ab4 <sys_mbox_trypost>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d109      	bne.n	8009d58 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d005      	beq.n	8009d58 <accept_function+0x6c>
 8009d4c:	69fb      	ldr	r3, [r7, #28]
 8009d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d50:	2200      	movs	r2, #0
 8009d52:	2100      	movs	r1, #0
 8009d54:	69f8      	ldr	r0, [r7, #28]
 8009d56:	4798      	blx	r3
    }
    return ERR_VAL;
 8009d58:	f06f 0305 	mvn.w	r3, #5
 8009d5c:	e077      	b.n	8009e4e <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d006      	beq.n	8009d74 <accept_function+0x88>
 8009d66:	4b3c      	ldr	r3, [pc, #240]	; (8009e58 <accept_function+0x16c>)
 8009d68:	f240 222a 	movw	r2, #554	; 0x22a
 8009d6c:	493b      	ldr	r1, [pc, #236]	; (8009e5c <accept_function+0x170>)
 8009d6e:	483c      	ldr	r0, [pc, #240]	; (8009e60 <accept_function+0x174>)
 8009d70:	f00f f8ec 	bl	8018f4c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009d74:	69fb      	ldr	r3, [r7, #28]
 8009d76:	781a      	ldrb	r2, [r3, #0]
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	4610      	mov	r0, r2
 8009d80:	f000 f8f0 	bl	8009f64 <netconn_alloc>
 8009d84:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d11b      	bne.n	8009dc4 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	f103 0414 	add.w	r4, r3, #20
 8009d92:	f06f 000c 	mvn.w	r0, #12
 8009d96:	f7ff fc7b 	bl	8009690 <lwip_netconn_err_to_msg>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f00e fe88 	bl	8018ab4 <sys_mbox_trypost>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d109      	bne.n	8009dbe <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009daa:	69fb      	ldr	r3, [r7, #28]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d005      	beq.n	8009dbe <accept_function+0xd2>
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009db6:	2200      	movs	r2, #0
 8009db8:	2100      	movs	r1, #0
 8009dba:	69f8      	ldr	r0, [r7, #28]
 8009dbc:	4798      	blx	r3
    }
    return ERR_MEM;
 8009dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009dc2:	e044      	b.n	8009e4e <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	68ba      	ldr	r2, [r7, #8]
 8009dc8:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009dca:	69b8      	ldr	r0, [r7, #24]
 8009dcc:	f7ff ff66 	bl	8009c9c <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009dd0:	69fb      	ldr	r3, [r7, #28]
 8009dd2:	3314      	adds	r3, #20
 8009dd4:	69b9      	ldr	r1, [r7, #24]
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f00e fe6c 	bl	8018ab4 <sys_mbox_trypost>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d02a      	beq.n	8009e38 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009de8:	2100      	movs	r1, #0
 8009dea:	6978      	ldr	r0, [r7, #20]
 8009dec:	f009 fda6 	bl	801393c <tcp_arg>
    tcp_recv(pcb, NULL);
 8009df0:	2100      	movs	r1, #0
 8009df2:	6978      	ldr	r0, [r7, #20]
 8009df4:	f009 fdb4 	bl	8013960 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009df8:	2100      	movs	r1, #0
 8009dfa:	6978      	ldr	r0, [r7, #20]
 8009dfc:	f009 fdd2 	bl	80139a4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009e00:	2200      	movs	r2, #0
 8009e02:	2100      	movs	r1, #0
 8009e04:	6978      	ldr	r0, [r7, #20]
 8009e06:	f009 fe27 	bl	8013a58 <tcp_poll>
    tcp_err(pcb, NULL);
 8009e0a:	2100      	movs	r1, #0
 8009e0c:	6978      	ldr	r0, [r7, #20]
 8009e0e:	f009 fde9 	bl	80139e4 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	2200      	movs	r2, #0
 8009e16:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	3310      	adds	r3, #16
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f00e fe37 	bl	8018a90 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	3310      	adds	r3, #16
 8009e26:	4618      	mov	r0, r3
 8009e28:	f00e feca 	bl	8018bc0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009e2c:	69b8      	ldr	r0, [r7, #24]
 8009e2e:	f000 f907 	bl	800a040 <netconn_free>
    return ERR_MEM;
 8009e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e36:	e00a      	b.n	8009e4e <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009e38:	69fb      	ldr	r3, [r7, #28]
 8009e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d005      	beq.n	8009e4c <accept_function+0x160>
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e44:	2200      	movs	r2, #0
 8009e46:	2100      	movs	r1, #0
 8009e48:	69f8      	ldr	r0, [r7, #28]
 8009e4a:	4798      	blx	r3
  }

  return ERR_OK;
 8009e4c:	2300      	movs	r3, #0
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3724      	adds	r7, #36	; 0x24
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd90      	pop	{r4, r7, pc}
 8009e56:	bf00      	nop
 8009e58:	0801b1ac 	.word	0x0801b1ac
 8009e5c:	0801b3ac 	.word	0x0801b3ac
 8009e60:	0801b234 	.word	0x0801b234

08009e64 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009e64:	b590      	push	{r4, r7, lr}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d006      	beq.n	8009e88 <pcb_new+0x24>
 8009e7a:	4b2b      	ldr	r3, [pc, #172]	; (8009f28 <pcb_new+0xc4>)
 8009e7c:	f240 2265 	movw	r2, #613	; 0x265
 8009e80:	492a      	ldr	r1, [pc, #168]	; (8009f2c <pcb_new+0xc8>)
 8009e82:	482b      	ldr	r0, [pc, #172]	; (8009f30 <pcb_new+0xcc>)
 8009e84:	f00f f862 	bl	8018f4c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e92:	2b10      	cmp	r3, #16
 8009e94:	d022      	beq.n	8009edc <pcb_new+0x78>
 8009e96:	2b20      	cmp	r3, #32
 8009e98:	d133      	bne.n	8009f02 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681c      	ldr	r4, [r3, #0]
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f00e fcc4 	bl	801882e <udp_new_ip_type>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d02a      	beq.n	8009f0a <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	2b22      	cmp	r3, #34	; 0x22
 8009ebc:	d104      	bne.n	8009ec8 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	2201      	movs	r2, #1
 8009ec6:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6858      	ldr	r0, [r3, #4]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	461a      	mov	r2, r3
 8009ed4:	4917      	ldr	r1, [pc, #92]	; (8009f34 <pcb_new+0xd0>)
 8009ed6:	f00e fc31 	bl	801873c <udp_recv>
      }
      break;
 8009eda:	e016      	b.n	8009f0a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681c      	ldr	r4, [r3, #0]
 8009ee0:	7bfb      	ldrb	r3, [r7, #15]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f009 fd1c 	bl	8013920 <tcp_new_ip_type>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00b      	beq.n	8009f0e <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7ff fece 	bl	8009c9c <setup_tcp>
      }
      break;
 8009f00:	e005      	b.n	8009f0e <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	22fa      	movs	r2, #250	; 0xfa
 8009f06:	711a      	strb	r2, [r3, #4]
      return;
 8009f08:	e00a      	b.n	8009f20 <pcb_new+0xbc>
      break;
 8009f0a:	bf00      	nop
 8009f0c:	e000      	b.n	8009f10 <pcb_new+0xac>
      break;
 8009f0e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d102      	bne.n	8009f20 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	22ff      	movs	r2, #255	; 0xff
 8009f1e:	711a      	strb	r2, [r3, #4]
  }
}
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd90      	pop	{r4, r7, pc}
 8009f26:	bf00      	nop
 8009f28:	0801b1ac 	.word	0x0801b1ac
 8009f2c:	0801b3d4 	.word	0x0801b3d4
 8009f30:	0801b234 	.word	0x0801b234
 8009f34:	08009771 	.word	0x08009771

08009f38 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d102      	bne.n	8009f5a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f7ff ff85 	bl	8009e64 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
	...

08009f64 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b086      	sub	sp, #24
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	6039      	str	r1, [r7, #0]
 8009f6e:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009f70:	2300      	movs	r3, #0
 8009f72:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009f74:	2007      	movs	r0, #7
 8009f76:	f006 fd17 	bl	80109a8 <memp_malloc>
 8009f7a:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d101      	bne.n	8009f86 <netconn_alloc+0x22>
    return NULL;
 8009f82:	2300      	movs	r3, #0
 8009f84:	e052      	b.n	800a02c <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	79fa      	ldrb	r2, [r7, #7]
 8009f90:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	2200      	movs	r2, #0
 8009f96:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009f98:	79fb      	ldrb	r3, [r7, #7]
 8009f9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009f9e:	2b10      	cmp	r3, #16
 8009fa0:	d004      	beq.n	8009fac <netconn_alloc+0x48>
 8009fa2:	2b20      	cmp	r3, #32
 8009fa4:	d105      	bne.n	8009fb2 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009fa6:	2306      	movs	r3, #6
 8009fa8:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009faa:	e00a      	b.n	8009fc2 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009fac:	2306      	movs	r3, #6
 8009fae:	617b      	str	r3, [r7, #20]
      break;
 8009fb0:	e007      	b.n	8009fc2 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009fb2:	4b20      	ldr	r3, [pc, #128]	; (800a034 <netconn_alloc+0xd0>)
 8009fb4:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009fb8:	491f      	ldr	r1, [pc, #124]	; (800a038 <netconn_alloc+0xd4>)
 8009fba:	4820      	ldr	r0, [pc, #128]	; (800a03c <netconn_alloc+0xd8>)
 8009fbc:	f00e ffc6 	bl	8018f4c <iprintf>
      goto free_and_return;
 8009fc0:	e02f      	b.n	800a022 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3310      	adds	r3, #16
 8009fc6:	6979      	ldr	r1, [r7, #20]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f00e fd43 	bl	8018a54 <sys_mbox_new>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d125      	bne.n	800a020 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	330c      	adds	r3, #12
 8009fd8:	2100      	movs	r1, #0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f00e fdfd 	bl	8018bda <sys_sem_new>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d005      	beq.n	8009ff2 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	3310      	adds	r3, #16
 8009fea:	4618      	mov	r0, r3
 8009fec:	f00e fd50 	bl	8018a90 <sys_mbox_free>
    goto free_and_return;
 8009ff0:	e017      	b.n	800a022 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	3314      	adds	r3, #20
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f00e fde2 	bl	8018bc0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a008:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	7cfa      	ldrb	r2, [r7, #19]
 800a01a:	771a      	strb	r2, [r3, #28]
  return conn;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	e005      	b.n	800a02c <netconn_alloc+0xc8>
    goto free_and_return;
 800a020:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a022:	68f9      	ldr	r1, [r7, #12]
 800a024:	2007      	movs	r0, #7
 800a026:	f006 fd35 	bl	8010a94 <memp_free>
  return NULL;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	0801b1ac 	.word	0x0801b1ac
 800a038:	0801b3f4 	.word	0x0801b3f4
 800a03c:	0801b234 	.word	0x0801b234

0800a040 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b082      	sub	sp, #8
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d006      	beq.n	800a05e <netconn_free+0x1e>
 800a050:	4b1b      	ldr	r3, [pc, #108]	; (800a0c0 <netconn_free+0x80>)
 800a052:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a056:	491b      	ldr	r1, [pc, #108]	; (800a0c4 <netconn_free+0x84>)
 800a058:	481b      	ldr	r0, [pc, #108]	; (800a0c8 <netconn_free+0x88>)
 800a05a:	f00e ff77 	bl	8018f4c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	3310      	adds	r3, #16
 800a062:	4618      	mov	r0, r3
 800a064:	f00e fd9b 	bl	8018b9e <sys_mbox_valid>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d006      	beq.n	800a07c <netconn_free+0x3c>
 800a06e:	4b14      	ldr	r3, [pc, #80]	; (800a0c0 <netconn_free+0x80>)
 800a070:	f240 3223 	movw	r2, #803	; 0x323
 800a074:	4915      	ldr	r1, [pc, #84]	; (800a0cc <netconn_free+0x8c>)
 800a076:	4814      	ldr	r0, [pc, #80]	; (800a0c8 <netconn_free+0x88>)
 800a078:	f00e ff68 	bl	8018f4c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	3314      	adds	r3, #20
 800a080:	4618      	mov	r0, r3
 800a082:	f00e fd8c 	bl	8018b9e <sys_mbox_valid>
 800a086:	4603      	mov	r3, r0
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d006      	beq.n	800a09a <netconn_free+0x5a>
 800a08c:	4b0c      	ldr	r3, [pc, #48]	; (800a0c0 <netconn_free+0x80>)
 800a08e:	f240 3226 	movw	r2, #806	; 0x326
 800a092:	490f      	ldr	r1, [pc, #60]	; (800a0d0 <netconn_free+0x90>)
 800a094:	480c      	ldr	r0, [pc, #48]	; (800a0c8 <netconn_free+0x88>)
 800a096:	f00e ff59 	bl	8018f4c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	330c      	adds	r3, #12
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f00e fdff 	bl	8018ca2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	330c      	adds	r3, #12
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f00e fe18 	bl	8018cde <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	2007      	movs	r0, #7
 800a0b2:	f006 fcef 	bl	8010a94 <memp_free>
}
 800a0b6:	bf00      	nop
 800a0b8:	3708      	adds	r7, #8
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	bd80      	pop	{r7, pc}
 800a0be:	bf00      	nop
 800a0c0:	0801b1ac 	.word	0x0801b1ac
 800a0c4:	0801b41c 	.word	0x0801b41c
 800a0c8:	0801b234 	.word	0x0801b234
 800a0cc:	0801b44c 	.word	0x0801b44c
 800a0d0:	0801b488 	.word	0x0801b488

0800a0d4 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	3310      	adds	r3, #16
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f00e fd5c 	bl	8018b9e <sys_mbox_valid>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d02f      	beq.n	800a14c <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a0ec:	e018      	b.n	800a120 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a0f6:	2b10      	cmp	r3, #16
 800a0f8:	d10e      	bne.n	800a118 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	f107 020f 	add.w	r2, r7, #15
 800a100:	4611      	mov	r1, r2
 800a102:	4618      	mov	r0, r3
 800a104:	f7ff fafa 	bl	80096fc <lwip_netconn_is_err_msg>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d108      	bne.n	800a120 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	4618      	mov	r0, r3
 800a112:	f007 fb39 	bl	8011788 <pbuf_free>
 800a116:	e003      	b.n	800a120 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f001 f954 	bl	800b3c8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3310      	adds	r3, #16
 800a124:	f107 0210 	add.w	r2, r7, #16
 800a128:	4611      	mov	r1, r2
 800a12a:	4618      	mov	r0, r3
 800a12c:	f00e fd1b 	bl	8018b66 <sys_arch_mbox_tryfetch>
 800a130:	4603      	mov	r3, r0
 800a132:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a136:	d1da      	bne.n	800a0ee <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3310      	adds	r3, #16
 800a13c:	4618      	mov	r0, r3
 800a13e:	f00e fca7 	bl	8018a90 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3310      	adds	r3, #16
 800a146:	4618      	mov	r0, r3
 800a148:	f00e fd3a 	bl	8018bc0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	3314      	adds	r3, #20
 800a150:	4618      	mov	r0, r3
 800a152:	f00e fd24 	bl	8018b9e <sys_mbox_valid>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d034      	beq.n	800a1c6 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a15c:	e01d      	b.n	800a19a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f107 020e 	add.w	r2, r7, #14
 800a164:	4611      	mov	r1, r2
 800a166:	4618      	mov	r0, r3
 800a168:	f7ff fac8 	bl	80096fc <lwip_netconn_is_err_msg>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d113      	bne.n	800a19a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a176:	6978      	ldr	r0, [r7, #20]
 800a178:	f7ff ffac 	bl	800a0d4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d007      	beq.n	800a194 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	685b      	ldr	r3, [r3, #4]
 800a188:	4618      	mov	r0, r3
 800a18a:	f008 fa6f 	bl	801266c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	2200      	movs	r2, #0
 800a192:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a194:	6978      	ldr	r0, [r7, #20]
 800a196:	f7ff ff53 	bl	800a040 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	3314      	adds	r3, #20
 800a19e:	f107 0210 	add.w	r2, r7, #16
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f00e fcde 	bl	8018b66 <sys_arch_mbox_tryfetch>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1b0:	d1d5      	bne.n	800a15e <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	3314      	adds	r3, #20
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f00e fc6a 	bl	8018a90 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	3314      	adds	r3, #20
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f00e fcfd 	bl	8018bc0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a1c6:	bf00      	nop
 800a1c8:	3718      	adds	r7, #24
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
	...

0800a1d0 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d106      	bne.n	800a1f4 <lwip_netconn_do_close_internal+0x24>
 800a1e6:	4ba1      	ldr	r3, [pc, #644]	; (800a46c <lwip_netconn_do_close_internal+0x29c>)
 800a1e8:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a1ec:	49a0      	ldr	r1, [pc, #640]	; (800a470 <lwip_netconn_do_close_internal+0x2a0>)
 800a1ee:	48a1      	ldr	r0, [pc, #644]	; (800a474 <lwip_netconn_do_close_internal+0x2a4>)
 800a1f0:	f00e feac 	bl	8018f4c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1fc:	2b10      	cmp	r3, #16
 800a1fe:	d006      	beq.n	800a20e <lwip_netconn_do_close_internal+0x3e>
 800a200:	4b9a      	ldr	r3, [pc, #616]	; (800a46c <lwip_netconn_do_close_internal+0x29c>)
 800a202:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a206:	499c      	ldr	r1, [pc, #624]	; (800a478 <lwip_netconn_do_close_internal+0x2a8>)
 800a208:	489a      	ldr	r0, [pc, #616]	; (800a474 <lwip_netconn_do_close_internal+0x2a4>)
 800a20a:	f00e fe9f 	bl	8018f4c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	785b      	ldrb	r3, [r3, #1]
 800a212:	2b04      	cmp	r3, #4
 800a214:	d006      	beq.n	800a224 <lwip_netconn_do_close_internal+0x54>
 800a216:	4b95      	ldr	r3, [pc, #596]	; (800a46c <lwip_netconn_do_close_internal+0x29c>)
 800a218:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a21c:	4997      	ldr	r1, [pc, #604]	; (800a47c <lwip_netconn_do_close_internal+0x2ac>)
 800a21e:	4895      	ldr	r0, [pc, #596]	; (800a474 <lwip_netconn_do_close_internal+0x2a4>)
 800a220:	f00e fe94 	bl	8018f4c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d106      	bne.n	800a23a <lwip_netconn_do_close_internal+0x6a>
 800a22c:	4b8f      	ldr	r3, [pc, #572]	; (800a46c <lwip_netconn_do_close_internal+0x29c>)
 800a22e:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a232:	4993      	ldr	r1, [pc, #588]	; (800a480 <lwip_netconn_do_close_internal+0x2b0>)
 800a234:	488f      	ldr	r0, [pc, #572]	; (800a474 <lwip_netconn_do_close_internal+0x2a4>)
 800a236:	f00e fe89 	bl	8018f4c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6a1b      	ldr	r3, [r3, #32]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <lwip_netconn_do_close_internal+0x80>
 800a242:	4b8a      	ldr	r3, [pc, #552]	; (800a46c <lwip_netconn_do_close_internal+0x29c>)
 800a244:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a248:	498e      	ldr	r1, [pc, #568]	; (800a484 <lwip_netconn_do_close_internal+0x2b4>)
 800a24a:	488a      	ldr	r0, [pc, #552]	; (800a474 <lwip_netconn_do_close_internal+0x2a4>)
 800a24c:	f00e fe7e 	bl	8018f4c <iprintf>

  tpcb = conn->pcb.tcp;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	7a1b      	ldrb	r3, [r3, #8]
 800a25c:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	f003 0301 	and.w	r3, r3, #1
 800a264:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a266:	7bfb      	ldrb	r3, [r7, #15]
 800a268:	f003 0302 	and.w	r3, r3, #2
 800a26c:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a26e:	7bfb      	ldrb	r3, [r7, #15]
 800a270:	2b03      	cmp	r3, #3
 800a272:	d102      	bne.n	800a27a <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a274:	2301      	movs	r3, #1
 800a276:	75bb      	strb	r3, [r7, #22]
 800a278:	e01f      	b.n	800a2ba <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a27a:	7bbb      	ldrb	r3, [r7, #14]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d00e      	beq.n	800a29e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a284:	2b05      	cmp	r3, #5
 800a286:	d007      	beq.n	800a298 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a28c:	2b06      	cmp	r3, #6
 800a28e:	d003      	beq.n	800a298 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a294:	2b08      	cmp	r3, #8
 800a296:	d102      	bne.n	800a29e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a298:	2301      	movs	r3, #1
 800a29a:	75bb      	strb	r3, [r7, #22]
 800a29c:	e00d      	b.n	800a2ba <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a29e:	7b7b      	ldrb	r3, [r7, #13]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d008      	beq.n	800a2b6 <lwip_netconn_do_close_internal+0xe6>
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	8b5b      	ldrh	r3, [r3, #26]
 800a2a8:	f003 0310 	and.w	r3, r3, #16
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	75bb      	strb	r3, [r7, #22]
 800a2b4:	e001      	b.n	800a2ba <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a2ba:	7dbb      	ldrb	r3, [r7, #22]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d003      	beq.n	800a2c8 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a2c0:	2100      	movs	r1, #0
 800a2c2:	6938      	ldr	r0, [r7, #16]
 800a2c4:	f009 fb3a 	bl	801393c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	7d1b      	ldrb	r3, [r3, #20]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d104      	bne.n	800a2da <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a2d0:	2100      	movs	r1, #0
 800a2d2:	6938      	ldr	r0, [r7, #16]
 800a2d4:	f009 fba8 	bl	8013a28 <tcp_accept>
 800a2d8:	e01d      	b.n	800a316 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a2da:	7bbb      	ldrb	r3, [r7, #14]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d007      	beq.n	800a2f0 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a2e0:	2100      	movs	r1, #0
 800a2e2:	6938      	ldr	r0, [r7, #16]
 800a2e4:	f009 fb3c 	bl	8013960 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a2e8:	2100      	movs	r1, #0
 800a2ea:	6938      	ldr	r0, [r7, #16]
 800a2ec:	f009 fb9c 	bl	8013a28 <tcp_accept>
    }
    if (shut_tx) {
 800a2f0:	7b7b      	ldrb	r3, [r7, #13]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d003      	beq.n	800a2fe <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a2f6:	2100      	movs	r1, #0
 800a2f8:	6938      	ldr	r0, [r7, #16]
 800a2fa:	f009 fb53 	bl	80139a4 <tcp_sent>
    }
    if (shut_close) {
 800a2fe:	7dbb      	ldrb	r3, [r7, #22]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d008      	beq.n	800a316 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a304:	2200      	movs	r2, #0
 800a306:	2100      	movs	r1, #0
 800a308:	6938      	ldr	r0, [r7, #16]
 800a30a:	f009 fba5 	bl	8013a58 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a30e:	2100      	movs	r1, #0
 800a310:	6938      	ldr	r0, [r7, #16]
 800a312:	f009 fb67 	bl	80139e4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a316:	7dbb      	ldrb	r3, [r7, #22]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d005      	beq.n	800a328 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a31c:	6938      	ldr	r0, [r7, #16]
 800a31e:	f008 f869 	bl	80123f4 <tcp_close>
 800a322:	4603      	mov	r3, r0
 800a324:	75fb      	strb	r3, [r7, #23]
 800a326:	e007      	b.n	800a338 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a328:	7bbb      	ldrb	r3, [r7, #14]
 800a32a:	7b7a      	ldrb	r2, [r7, #13]
 800a32c:	4619      	mov	r1, r3
 800a32e:	6938      	ldr	r0, [r7, #16]
 800a330:	f008 f88c 	bl	801244c <tcp_shutdown>
 800a334:	4603      	mov	r3, r0
 800a336:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a338:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a340:	2301      	movs	r3, #1
 800a342:	757b      	strb	r3, [r7, #21]
 800a344:	e016      	b.n	800a374 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a346:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a34a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a34e:	d10f      	bne.n	800a370 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	7a5b      	ldrb	r3, [r3, #9]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10c      	bne.n	800a374 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a35a:	2301      	movs	r3, #1
 800a35c:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a35e:	7dbb      	ldrb	r3, [r7, #22]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d007      	beq.n	800a374 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a364:	6938      	ldr	r0, [r7, #16]
 800a366:	f008 f981 	bl	801266c <tcp_abort>
          err = ERR_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	75fb      	strb	r3, [r7, #23]
 800a36e:	e001      	b.n	800a374 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a370:	2301      	movs	r3, #1
 800a372:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a374:	7d7b      	ldrb	r3, [r7, #21]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d044      	beq.n	800a404 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	6a1b      	ldr	r3, [r3, #32]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	330c      	adds	r3, #12
 800a382:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	7dfa      	ldrb	r2, [r7, #23]
 800a38a:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a398:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d129      	bne.n	800a3f4 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a3a0:	7dbb      	ldrb	r3, [r7, #22]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d00c      	beq.n	800a3c0 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d005      	beq.n	800a3c0 <lwip_netconn_do_close_internal+0x1f0>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	2104      	movs	r1, #4
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	4798      	blx	r3
      }
      if (shut_rx) {
 800a3c0:	7bbb      	ldrb	r3, [r7, #14]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d009      	beq.n	800a3da <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d005      	beq.n	800a3da <lwip_netconn_do_close_internal+0x20a>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	2100      	movs	r1, #0
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	4798      	blx	r3
      }
      if (shut_tx) {
 800a3da:	7b7b      	ldrb	r3, [r7, #13]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d009      	beq.n	800a3f4 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d005      	beq.n	800a3f4 <lwip_netconn_do_close_internal+0x224>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	2102      	movs	r1, #2
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a3f4:	78fb      	ldrb	r3, [r7, #3]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a3fa:	68b8      	ldr	r0, [r7, #8]
 800a3fc:	f00e fc44 	bl	8018c88 <sys_sem_signal>
    }
    return ERR_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	e02e      	b.n	800a462 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a404:	7d7b      	ldrb	r3, [r7, #21]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d11e      	bne.n	800a448 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	7d1b      	ldrb	r3, [r3, #20]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d106      	bne.n	800a420 <lwip_netconn_do_close_internal+0x250>
 800a412:	4b16      	ldr	r3, [pc, #88]	; (800a46c <lwip_netconn_do_close_internal+0x29c>)
 800a414:	f240 4241 	movw	r2, #1089	; 0x441
 800a418:	491b      	ldr	r1, [pc, #108]	; (800a488 <lwip_netconn_do_close_internal+0x2b8>)
 800a41a:	4816      	ldr	r0, [pc, #88]	; (800a474 <lwip_netconn_do_close_internal+0x2a4>)
 800a41c:	f00e fd96 	bl	8018f4c <iprintf>
    if (shut_tx) {
 800a420:	7b7b      	ldrb	r3, [r7, #13]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a426:	4919      	ldr	r1, [pc, #100]	; (800a48c <lwip_netconn_do_close_internal+0x2bc>)
 800a428:	6938      	ldr	r0, [r7, #16]
 800a42a:	f009 fabb 	bl	80139a4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a42e:	2201      	movs	r2, #1
 800a430:	4917      	ldr	r1, [pc, #92]	; (800a490 <lwip_netconn_do_close_internal+0x2c0>)
 800a432:	6938      	ldr	r0, [r7, #16]
 800a434:	f009 fb10 	bl	8013a58 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a438:	4916      	ldr	r1, [pc, #88]	; (800a494 <lwip_netconn_do_close_internal+0x2c4>)
 800a43a:	6938      	ldr	r0, [r7, #16]
 800a43c:	f009 fad2 	bl	80139e4 <tcp_err>
    tcp_arg(tpcb, conn);
 800a440:	6879      	ldr	r1, [r7, #4]
 800a442:	6938      	ldr	r0, [r7, #16]
 800a444:	f009 fa7a 	bl	801393c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a448:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d106      	bne.n	800a45e <lwip_netconn_do_close_internal+0x28e>
 800a450:	4b06      	ldr	r3, [pc, #24]	; (800a46c <lwip_netconn_do_close_internal+0x29c>)
 800a452:	f240 424d 	movw	r2, #1101	; 0x44d
 800a456:	4910      	ldr	r1, [pc, #64]	; (800a498 <lwip_netconn_do_close_internal+0x2c8>)
 800a458:	4806      	ldr	r0, [pc, #24]	; (800a474 <lwip_netconn_do_close_internal+0x2a4>)
 800a45a:	f00e fd77 	bl	8018f4c <iprintf>
  return err;
 800a45e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}
 800a46a:	bf00      	nop
 800a46c:	0801b1ac 	.word	0x0801b1ac
 800a470:	0801b4c4 	.word	0x0801b4c4
 800a474:	0801b234 	.word	0x0801b234
 800a478:	0801b4d4 	.word	0x0801b4d4
 800a47c:	0801b4f4 	.word	0x0801b4f4
 800a480:	0801b518 	.word	0x0801b518
 800a484:	0801b358 	.word	0x0801b358
 800a488:	0801b52c 	.word	0x0801b52c
 800a48c:	08009a45 	.word	0x08009a45
 800a490:	08009979 	.word	0x08009979
 800a494:	08009af1 	.word	0x08009af1
 800a498:	0801b550 	.word	0x0801b550

0800a49c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	785b      	ldrb	r3, [r3, #1]
 800a4ae:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a4b0:	7afb      	ldrb	r3, [r7, #11]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00d      	beq.n	800a4d2 <lwip_netconn_do_delconn+0x36>
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4c0:	2b10      	cmp	r3, #16
 800a4c2:	d006      	beq.n	800a4d2 <lwip_netconn_do_delconn+0x36>
 800a4c4:	4b60      	ldr	r3, [pc, #384]	; (800a648 <lwip_netconn_do_delconn+0x1ac>)
 800a4c6:	f240 425e 	movw	r2, #1118	; 0x45e
 800a4ca:	4960      	ldr	r1, [pc, #384]	; (800a64c <lwip_netconn_do_delconn+0x1b0>)
 800a4cc:	4860      	ldr	r0, [pc, #384]	; (800a650 <lwip_netconn_do_delconn+0x1b4>)
 800a4ce:	f00e fd3d 	bl	8018f4c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a4d2:	7afb      	ldrb	r3, [r7, #11]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d005      	beq.n	800a4e4 <lwip_netconn_do_delconn+0x48>
 800a4d8:	7afb      	ldrb	r3, [r7, #11]
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d002      	beq.n	800a4e4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a4de:	7afb      	ldrb	r3, [r7, #11]
 800a4e0:	2b03      	cmp	r3, #3
 800a4e2:	d109      	bne.n	800a4f8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a4e4:	7afb      	ldrb	r3, [r7, #11]
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	d10a      	bne.n	800a500 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	7f1b      	ldrb	r3, [r3, #28]
 800a4f0:	f003 0304 	and.w	r3, r3, #4
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d103      	bne.n	800a500 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	22fb      	movs	r2, #251	; 0xfb
 800a4fc:	711a      	strb	r2, [r3, #4]
 800a4fe:	e097      	b.n	800a630 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a500:	7afb      	ldrb	r3, [r7, #11]
 800a502:	2b03      	cmp	r3, #3
 800a504:	d10d      	bne.n	800a522 <lwip_netconn_do_delconn+0x86>
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	7f1b      	ldrb	r3, [r3, #28]
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	2b00      	cmp	r3, #0
 800a512:	d106      	bne.n	800a522 <lwip_netconn_do_delconn+0x86>
 800a514:	4b4c      	ldr	r3, [pc, #304]	; (800a648 <lwip_netconn_do_delconn+0x1ac>)
 800a516:	f240 427a 	movw	r2, #1146	; 0x47a
 800a51a:	494e      	ldr	r1, [pc, #312]	; (800a654 <lwip_netconn_do_delconn+0x1b8>)
 800a51c:	484c      	ldr	r0, [pc, #304]	; (800a650 <lwip_netconn_do_delconn+0x1b4>)
 800a51e:	f00e fd15 	bl	8018f4c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	2200      	movs	r2, #0
 800a526:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	4618      	mov	r0, r3
 800a52e:	f7ff fdd1 	bl	800a0d4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d05f      	beq.n	800a5fc <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a546:	2b10      	cmp	r3, #16
 800a548:	d00d      	beq.n	800a566 <lwip_netconn_do_delconn+0xca>
 800a54a:	2b20      	cmp	r3, #32
 800a54c:	d151      	bne.n	800a5f2 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	685b      	ldr	r3, [r3, #4]
 800a554:	2200      	movs	r2, #0
 800a556:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	4618      	mov	r0, r3
 800a560:	f00e f90c 	bl	801877c <udp_remove>
          break;
 800a564:	e046      	b.n	800a5f4 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	6a1b      	ldr	r3, [r3, #32]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d006      	beq.n	800a57e <lwip_netconn_do_delconn+0xe2>
 800a570:	4b35      	ldr	r3, [pc, #212]	; (800a648 <lwip_netconn_do_delconn+0x1ac>)
 800a572:	f240 4294 	movw	r2, #1172	; 0x494
 800a576:	4938      	ldr	r1, [pc, #224]	; (800a658 <lwip_netconn_do_delconn+0x1bc>)
 800a578:	4835      	ldr	r0, [pc, #212]	; (800a650 <lwip_netconn_do_delconn+0x1b4>)
 800a57a:	f00e fce7 	bl	8018f4c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2204      	movs	r2, #4
 800a584:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2203      	movs	r2, #3
 800a58a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2100      	movs	r1, #0
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff fe18 	bl	800a1d0 <lwip_netconn_do_close_internal>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d04b      	beq.n	800a63e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	785b      	ldrb	r3, [r3, #1]
 800a5ac:	2b04      	cmp	r3, #4
 800a5ae:	d006      	beq.n	800a5be <lwip_netconn_do_delconn+0x122>
 800a5b0:	4b25      	ldr	r3, [pc, #148]	; (800a648 <lwip_netconn_do_delconn+0x1ac>)
 800a5b2:	f240 429a 	movw	r2, #1178	; 0x49a
 800a5b6:	4929      	ldr	r1, [pc, #164]	; (800a65c <lwip_netconn_do_delconn+0x1c0>)
 800a5b8:	4825      	ldr	r0, [pc, #148]	; (800a650 <lwip_netconn_do_delconn+0x1b4>)
 800a5ba:	f00e fcc7 	bl	8018f4c <iprintf>
            UNLOCK_TCPIP_CORE();
 800a5be:	4828      	ldr	r0, [pc, #160]	; (800a660 <lwip_netconn_do_delconn+0x1c4>)
 800a5c0:	f00e fbd1 	bl	8018d66 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	330c      	adds	r3, #12
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	f00e fb2a 	bl	8018c26 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a5d2:	4823      	ldr	r0, [pc, #140]	; (800a660 <lwip_netconn_do_delconn+0x1c4>)
 800a5d4:	f00e fbb8 	bl	8018d48 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	785b      	ldrb	r3, [r3, #1]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d02d      	beq.n	800a63e <lwip_netconn_do_delconn+0x1a2>
 800a5e2:	4b19      	ldr	r3, [pc, #100]	; (800a648 <lwip_netconn_do_delconn+0x1ac>)
 800a5e4:	f240 429e 	movw	r2, #1182	; 0x49e
 800a5e8:	491c      	ldr	r1, [pc, #112]	; (800a65c <lwip_netconn_do_delconn+0x1c0>)
 800a5ea:	4819      	ldr	r0, [pc, #100]	; (800a650 <lwip_netconn_do_delconn+0x1b4>)
 800a5ec:	f00e fcae 	bl	8018f4c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a5f0:	e025      	b.n	800a63e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800a5f2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a602:	2b00      	cmp	r3, #0
 800a604:	d007      	beq.n	800a616 <lwip_netconn_do_delconn+0x17a>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	6810      	ldr	r0, [r2, #0]
 800a610:	2200      	movs	r2, #0
 800a612:	2100      	movs	r1, #0
 800a614:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d007      	beq.n	800a630 <lwip_netconn_do_delconn+0x194>
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a626:	68fa      	ldr	r2, [r7, #12]
 800a628:	6810      	ldr	r0, [r2, #0]
 800a62a:	2200      	movs	r2, #0
 800a62c:	2102      	movs	r1, #2
 800a62e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	330c      	adds	r3, #12
 800a636:	4618      	mov	r0, r3
 800a638:	f00e fb40 	bl	8018cbc <sys_sem_valid>
 800a63c:	e000      	b.n	800a640 <lwip_netconn_do_delconn+0x1a4>
          return;
 800a63e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	0801b1ac 	.word	0x0801b1ac
 800a64c:	0801b560 	.word	0x0801b560
 800a650:	0801b234 	.word	0x0801b234
 800a654:	0801b574 	.word	0x0801b574
 800a658:	0801b594 	.word	0x0801b594
 800a65c:	0801b5b0 	.word	0x0801b5b0
 800a660:	2400740c 	.word	0x2400740c

0800a664 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d025      	beq.n	800a6c6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a684:	2b10      	cmp	r3, #16
 800a686:	d00e      	beq.n	800a6a6 <lwip_netconn_do_bind+0x42>
 800a688:	2b20      	cmp	r3, #32
 800a68a:	d119      	bne.n	800a6c0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	6858      	ldr	r0, [r3, #4]
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	6899      	ldr	r1, [r3, #8]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	899b      	ldrh	r3, [r3, #12]
 800a69a:	461a      	mov	r2, r3
 800a69c:	f00d ff30 	bl	8018500 <udp_bind>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73fb      	strb	r3, [r7, #15]
        break;
 800a6a4:	e011      	b.n	800a6ca <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	6858      	ldr	r0, [r3, #4]
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	6899      	ldr	r1, [r3, #8]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	899b      	ldrh	r3, [r3, #12]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	f007 ffe5 	bl	8012684 <tcp_bind>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	73fb      	strb	r3, [r7, #15]
        break;
 800a6be:	e004      	b.n	800a6ca <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a6c0:	23fa      	movs	r3, #250	; 0xfa
 800a6c2:	73fb      	strb	r3, [r7, #15]
        break;
 800a6c4:	e001      	b.n	800a6ca <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a6c6:	23fa      	movs	r3, #250	; 0xfa
 800a6c8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	7bfa      	ldrb	r2, [r7, #15]
 800a6ce:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a6d0:	bf00      	nop
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d102      	bne.n	800a6fa <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800a6f4:	f06f 0305 	mvn.w	r3, #5
 800a6f8:	e070      	b.n	800a7dc <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800a6fa:	69bb      	ldr	r3, [r7, #24]
 800a6fc:	785b      	ldrb	r3, [r3, #1]
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	d006      	beq.n	800a710 <lwip_netconn_do_connected+0x38>
 800a702:	4b38      	ldr	r3, [pc, #224]	; (800a7e4 <lwip_netconn_do_connected+0x10c>)
 800a704:	f240 5223 	movw	r2, #1315	; 0x523
 800a708:	4937      	ldr	r1, [pc, #220]	; (800a7e8 <lwip_netconn_do_connected+0x110>)
 800a70a:	4838      	ldr	r0, [pc, #224]	; (800a7ec <lwip_netconn_do_connected+0x114>)
 800a70c:	f00e fc1e 	bl	8018f4c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	6a1b      	ldr	r3, [r3, #32]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10c      	bne.n	800a732 <lwip_netconn_do_connected+0x5a>
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	7f1b      	ldrb	r3, [r3, #28]
 800a71c:	f003 0304 	and.w	r3, r3, #4
 800a720:	2b00      	cmp	r3, #0
 800a722:	d106      	bne.n	800a732 <lwip_netconn_do_connected+0x5a>
 800a724:	4b2f      	ldr	r3, [pc, #188]	; (800a7e4 <lwip_netconn_do_connected+0x10c>)
 800a726:	f240 5224 	movw	r2, #1316	; 0x524
 800a72a:	4931      	ldr	r1, [pc, #196]	; (800a7f0 <lwip_netconn_do_connected+0x118>)
 800a72c:	482f      	ldr	r0, [pc, #188]	; (800a7ec <lwip_netconn_do_connected+0x114>)
 800a72e:	f00e fc0d 	bl	8018f4c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800a732:	69bb      	ldr	r3, [r7, #24]
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d008      	beq.n	800a74c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800a73a:	69bb      	ldr	r3, [r7, #24]
 800a73c:	6a1b      	ldr	r3, [r3, #32]
 800a73e:	79fa      	ldrb	r2, [r7, #7]
 800a740:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	6a1b      	ldr	r3, [r3, #32]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	330c      	adds	r3, #12
 800a74a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a754:	2b10      	cmp	r3, #16
 800a756:	d106      	bne.n	800a766 <lwip_netconn_do_connected+0x8e>
 800a758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d102      	bne.n	800a766 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800a760:	69b8      	ldr	r0, [r7, #24]
 800a762:	f7ff fa9b 	bl	8009c9c <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	7f1b      	ldrb	r3, [r3, #28]
 800a76a:	f003 0304 	and.w	r3, r3, #4
 800a76e:	2b00      	cmp	r3, #0
 800a770:	bf0c      	ite	eq
 800a772:	2301      	moveq	r3, #1
 800a774:	2300      	movne	r3, #0
 800a776:	b2db      	uxtb	r3, r3
 800a778:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	7f1b      	ldrb	r3, [r3, #28]
 800a77e:	f023 0304 	bic.w	r3, r3, #4
 800a782:	b2da      	uxtb	r2, r3
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d002      	beq.n	800a794 <lwip_netconn_do_connected+0xbc>
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d10c      	bne.n	800a7ae <lwip_netconn_do_connected+0xd6>
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d102      	bne.n	800a7a0 <lwip_netconn_do_connected+0xc8>
 800a79a:	69fb      	ldr	r3, [r7, #28]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d006      	beq.n	800a7ae <lwip_netconn_do_connected+0xd6>
 800a7a0:	4b10      	ldr	r3, [pc, #64]	; (800a7e4 <lwip_netconn_do_connected+0x10c>)
 800a7a2:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800a7a6:	4913      	ldr	r1, [pc, #76]	; (800a7f4 <lwip_netconn_do_connected+0x11c>)
 800a7a8:	4810      	ldr	r0, [pc, #64]	; (800a7ec <lwip_netconn_do_connected+0x114>)
 800a7aa:	f00e fbcf 	bl	8018f4c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d005      	beq.n	800a7ce <lwip_netconn_do_connected+0xf6>
 800a7c2:	69bb      	ldr	r3, [r7, #24]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	2102      	movs	r1, #2
 800a7ca:	69b8      	ldr	r0, [r7, #24]
 800a7cc:	4798      	blx	r3

  if (was_blocking) {
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800a7d4:	69f8      	ldr	r0, [r7, #28]
 800a7d6:	f00e fa57 	bl	8018c88 <sys_sem_signal>
  }
  return ERR_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3720      	adds	r7, #32
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	0801b1ac 	.word	0x0801b1ac
 800a7e8:	0801b5b8 	.word	0x0801b5b8
 800a7ec:	0801b234 	.word	0x0801b234
 800a7f0:	0801b5d8 	.word	0x0801b5d8
 800a7f4:	0801b618 	.word	0x0801b618

0800a7f8 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b086      	sub	sp, #24
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d102      	bne.n	800a814 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800a80e:	23f1      	movs	r3, #241	; 0xf1
 800a810:	75fb      	strb	r3, [r7, #23]
 800a812:	e09b      	b.n	800a94c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a81e:	2b10      	cmp	r3, #16
 800a820:	d00f      	beq.n	800a842 <lwip_netconn_do_connect+0x4a>
 800a822:	2b20      	cmp	r3, #32
 800a824:	f040 8087 	bne.w	800a936 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	6858      	ldr	r0, [r3, #4]
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	6899      	ldr	r1, [r3, #8]
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	899b      	ldrh	r3, [r3, #12]
 800a836:	461a      	mov	r2, r3
 800a838:	f00d feea 	bl	8018610 <udp_connect>
 800a83c:	4603      	mov	r3, r0
 800a83e:	75fb      	strb	r3, [r7, #23]
        break;
 800a840:	e084      	b.n	800a94c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	785b      	ldrb	r3, [r3, #1]
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d102      	bne.n	800a852 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800a84c:	23f7      	movs	r3, #247	; 0xf7
 800a84e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800a850:	e07b      	b.n	800a94a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	785b      	ldrb	r3, [r3, #1]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800a85c:	23f6      	movs	r3, #246	; 0xf6
 800a85e:	75fb      	strb	r3, [r7, #23]
        break;
 800a860:	e073      	b.n	800a94a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4618      	mov	r0, r3
 800a868:	f7ff fa18 	bl	8009c9c <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	6858      	ldr	r0, [r3, #4]
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	6899      	ldr	r1, [r3, #8]
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	899a      	ldrh	r2, [r3, #12]
 800a87a:	4b38      	ldr	r3, [pc, #224]	; (800a95c <lwip_netconn_do_connect+0x164>)
 800a87c:	f008 f956 	bl	8012b2c <tcp_connect>
 800a880:	4603      	mov	r3, r0
 800a882:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800a884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d15e      	bne.n	800a94a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	7f1b      	ldrb	r3, [r3, #28]
 800a892:	f003 0302 	and.w	r3, r3, #2
 800a896:	2b00      	cmp	r3, #0
 800a898:	bf14      	ite	ne
 800a89a:	2301      	movne	r3, #1
 800a89c:	2300      	moveq	r3, #0
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2203      	movs	r2, #3
 800a8a8:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d009      	beq.n	800a8c4 <lwip_netconn_do_connect+0xcc>
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	7f1a      	ldrb	r2, [r3, #28]
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f042 0204 	orr.w	r2, r2, #4
 800a8be:	b2d2      	uxtb	r2, r2
 800a8c0:	771a      	strb	r2, [r3, #28]
 800a8c2:	e008      	b.n	800a8d6 <lwip_netconn_do_connect+0xde>
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	7f1a      	ldrb	r2, [r3, #28]
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f022 0204 	bic.w	r2, r2, #4
 800a8d2:	b2d2      	uxtb	r2, r2
 800a8d4:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800a8dc:	23fb      	movs	r3, #251	; 0xfb
 800a8de:	75fb      	strb	r3, [r7, #23]
        break;
 800a8e0:	e033      	b.n	800a94a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	785b      	ldrb	r3, [r3, #1]
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d006      	beq.n	800a902 <lwip_netconn_do_connect+0x10a>
 800a8f4:	4b1a      	ldr	r3, [pc, #104]	; (800a960 <lwip_netconn_do_connect+0x168>)
 800a8f6:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800a8fa:	491a      	ldr	r1, [pc, #104]	; (800a964 <lwip_netconn_do_connect+0x16c>)
 800a8fc:	481a      	ldr	r0, [pc, #104]	; (800a968 <lwip_netconn_do_connect+0x170>)
 800a8fe:	f00e fb25 	bl	8018f4c <iprintf>
              UNLOCK_TCPIP_CORE();
 800a902:	481a      	ldr	r0, [pc, #104]	; (800a96c <lwip_netconn_do_connect+0x174>)
 800a904:	f00e fa2f 	bl	8018d66 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	330c      	adds	r3, #12
 800a90e:	2100      	movs	r1, #0
 800a910:	4618      	mov	r0, r3
 800a912:	f00e f988 	bl	8018c26 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800a916:	4815      	ldr	r0, [pc, #84]	; (800a96c <lwip_netconn_do_connect+0x174>)
 800a918:	f00e fa16 	bl	8018d48 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	785b      	ldrb	r3, [r3, #1]
 800a922:	2b03      	cmp	r3, #3
 800a924:	d116      	bne.n	800a954 <lwip_netconn_do_connect+0x15c>
 800a926:	4b0e      	ldr	r3, [pc, #56]	; (800a960 <lwip_netconn_do_connect+0x168>)
 800a928:	f240 5274 	movw	r2, #1396	; 0x574
 800a92c:	490d      	ldr	r1, [pc, #52]	; (800a964 <lwip_netconn_do_connect+0x16c>)
 800a92e:	480e      	ldr	r0, [pc, #56]	; (800a968 <lwip_netconn_do_connect+0x170>)
 800a930:	f00e fb0c 	bl	8018f4c <iprintf>
              return;
 800a934:	e00e      	b.n	800a954 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800a936:	4b0a      	ldr	r3, [pc, #40]	; (800a960 <lwip_netconn_do_connect+0x168>)
 800a938:	f240 527d 	movw	r2, #1405	; 0x57d
 800a93c:	490c      	ldr	r1, [pc, #48]	; (800a970 <lwip_netconn_do_connect+0x178>)
 800a93e:	480a      	ldr	r0, [pc, #40]	; (800a968 <lwip_netconn_do_connect+0x170>)
 800a940:	f00e fb04 	bl	8018f4c <iprintf>
 800a944:	23fa      	movs	r3, #250	; 0xfa
 800a946:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800a948:	e000      	b.n	800a94c <lwip_netconn_do_connect+0x154>
        break;
 800a94a:	bf00      	nop
    }
  }
  msg->err = err;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	7dfa      	ldrb	r2, [r7, #23]
 800a950:	711a      	strb	r2, [r3, #4]
 800a952:	e000      	b.n	800a956 <lwip_netconn_do_connect+0x15e>
              return;
 800a954:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800a956:	3718      	adds	r7, #24
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	0800a6d9 	.word	0x0800a6d9
 800a960:	0801b1ac 	.word	0x0801b1ac
 800a964:	0801b5b0 	.word	0x0801b5b0
 800a968:	0801b234 	.word	0x0801b234
 800a96c:	2400740c 	.word	0x2400740c
 800a970:	0801b638 	.word	0x0801b638

0800a974 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	781b      	ldrb	r3, [r3, #0]
 800a986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a98a:	2b20      	cmp	r3, #32
 800a98c:	d109      	bne.n	800a9a2 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	685b      	ldr	r3, [r3, #4]
 800a994:	4618      	mov	r0, r3
 800a996:	f00d fea9 	bl	80186ec <udp_disconnect>
    msg->err = ERR_OK;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a9a0:	e002      	b.n	800a9a8 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	22fa      	movs	r2, #250	; 0xfa
 800a9a6:	711a      	strb	r2, [r3, #4]
}
 800a9a8:	bf00      	nop
 800a9aa:	3710      	adds	r7, #16
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}

0800a9b0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b086      	sub	sp, #24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d07f      	beq.n	800aac6 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a9d0:	2b10      	cmp	r3, #16
 800a9d2:	d175      	bne.n	800aac0 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	785b      	ldrb	r3, [r3, #1]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d165      	bne.n	800aaaa <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	7d1b      	ldrb	r3, [r3, #20]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d002      	beq.n	800a9f0 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a9ea:	23fa      	movs	r3, #250	; 0xfa
 800a9ec:	72fb      	strb	r3, [r7, #11]
 800a9ee:	e06c      	b.n	800aaca <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a9f0:	23ff      	movs	r3, #255	; 0xff
 800a9f2:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a9f4:	697b      	ldr	r3, [r7, #20]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	f107 020b 	add.w	r2, r7, #11
 800a9fe:	7cf9      	ldrb	r1, [r7, #19]
 800aa00:	4618      	mov	r0, r3
 800aa02:	f007 fef7 	bl	80127f4 <tcp_listen_with_backlog_and_err>
 800aa06:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d05d      	beq.n	800aaca <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	3310      	adds	r3, #16
 800aa14:	4618      	mov	r0, r3
 800aa16:	f00e f8c2 	bl	8018b9e <sys_mbox_valid>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d00b      	beq.n	800aa38 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	3310      	adds	r3, #16
 800aa26:	4618      	mov	r0, r3
 800aa28:	f00e f832 	bl	8018a90 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800aa2c:	697b      	ldr	r3, [r7, #20]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	3310      	adds	r3, #16
 800aa32:	4618      	mov	r0, r3
 800aa34:	f00e f8c4 	bl	8018bc0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	3314      	adds	r3, #20
 800aa42:	4618      	mov	r0, r3
 800aa44:	f00e f8ab 	bl	8018b9e <sys_mbox_valid>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d108      	bne.n	800aa60 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	3314      	adds	r3, #20
 800aa54:	2106      	movs	r1, #6
 800aa56:	4618      	mov	r0, r3
 800aa58:	f00d fffc 	bl	8018a54 <sys_mbox_new>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800aa60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d118      	bne.n	800aa9a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	2202      	movs	r2, #2
 800aa6e:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	685a      	ldr	r2, [r3, #4]
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4619      	mov	r1, r3
 800aa84:	4610      	mov	r0, r2
 800aa86:	f008 ff59 	bl	801393c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	4912      	ldr	r1, [pc, #72]	; (800aadc <lwip_netconn_do_listen+0x12c>)
 800aa92:	4618      	mov	r0, r3
 800aa94:	f008 ffc8 	bl	8013a28 <tcp_accept>
 800aa98:	e017      	b.n	800aaca <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f007 fcaa 	bl	80123f4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	605a      	str	r2, [r3, #4]
 800aaa8:	e00f      	b.n	800aaca <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	785b      	ldrb	r3, [r3, #1]
 800aab0:	2b02      	cmp	r3, #2
 800aab2:	d102      	bne.n	800aaba <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	72fb      	strb	r3, [r7, #11]
 800aab8:	e007      	b.n	800aaca <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800aaba:	23f5      	movs	r3, #245	; 0xf5
 800aabc:	72fb      	strb	r3, [r7, #11]
 800aabe:	e004      	b.n	800aaca <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800aac0:	23f0      	movs	r3, #240	; 0xf0
 800aac2:	72fb      	strb	r3, [r7, #11]
 800aac4:	e001      	b.n	800aaca <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800aac6:	23f5      	movs	r3, #245	; 0xf5
 800aac8:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800aaca:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800aad2:	bf00      	nop
 800aad4:	3718      	adds	r7, #24
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop
 800aadc:	08009ced 	.word	0x08009ced

0800aae0 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f7fe fd56 	bl	80095a2 <netconn_err>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800aafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d134      	bne.n	800ab6c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d02d      	beq.n	800ab68 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	781b      	ldrb	r3, [r3, #0]
 800ab12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab16:	2b20      	cmp	r3, #32
 800ab18:	d123      	bne.n	800ab62 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d10c      	bne.n	800ab3e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	689b      	ldr	r3, [r3, #8]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4619      	mov	r1, r3
 800ab32:	4610      	mov	r0, r2
 800ab34:	f00d fafa 	bl	801812c <udp_send>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800ab3c:	e016      	b.n	800ab6c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6858      	ldr	r0, [r3, #4]
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	6819      	ldr	r1, [r3, #0]
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	f103 0208 	add.w	r2, r3, #8
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	899b      	ldrh	r3, [r3, #12]
 800ab58:	f00d fb1c 	bl	8018194 <udp_sendto>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	73fb      	strb	r3, [r7, #15]
          break;
 800ab60:	e004      	b.n	800ab6c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800ab62:	23f5      	movs	r3, #245	; 0xf5
 800ab64:	73fb      	strb	r3, [r7, #15]
          break;
 800ab66:	e001      	b.n	800ab6c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800ab68:	23f5      	movs	r3, #245	; 0xf5
 800ab6a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	7bfa      	ldrb	r2, [r7, #15]
 800ab70:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ab72:	bf00      	nop
 800ab74:	3710      	adds	r7, #16
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}

0800ab7a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b086      	sub	sp, #24
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d022      	beq.n	800abdc <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aba0:	2b10      	cmp	r3, #16
 800aba2:	d11b      	bne.n	800abdc <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abb0:	d202      	bcs.n	800abb8 <lwip_netconn_do_recv+0x3e>
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	e001      	b.n	800abbc <lwip_netconn_do_recv+0x42>
 800abb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800abbc:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800abbe:	693b      	ldr	r3, [r7, #16]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	89fa      	ldrh	r2, [r7, #14]
 800abc6:	4611      	mov	r1, r2
 800abc8:	4618      	mov	r0, r3
 800abca:	f007 ff17 	bl	80129fc <tcp_recved>
        remaining -= recved;
 800abce:	89fb      	ldrh	r3, [r7, #14]
 800abd0:	697a      	ldr	r2, [r7, #20]
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1e6      	bne.n	800abaa <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800abdc:	bf00      	nop
 800abde:	3718      	adds	r7, #24
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	460b      	mov	r3, r1
 800abee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d106      	bne.n	800ac08 <lwip_netconn_do_writemore+0x24>
 800abfa:	4b96      	ldr	r3, [pc, #600]	; (800ae54 <lwip_netconn_do_writemore+0x270>)
 800abfc:	f240 6273 	movw	r2, #1651	; 0x673
 800ac00:	4995      	ldr	r1, [pc, #596]	; (800ae58 <lwip_netconn_do_writemore+0x274>)
 800ac02:	4896      	ldr	r0, [pc, #600]	; (800ae5c <lwip_netconn_do_writemore+0x278>)
 800ac04:	f00e f9a2 	bl	8018f4c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	785b      	ldrb	r3, [r3, #1]
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d006      	beq.n	800ac1e <lwip_netconn_do_writemore+0x3a>
 800ac10:	4b90      	ldr	r3, [pc, #576]	; (800ae54 <lwip_netconn_do_writemore+0x270>)
 800ac12:	f240 6274 	movw	r2, #1652	; 0x674
 800ac16:	4992      	ldr	r1, [pc, #584]	; (800ae60 <lwip_netconn_do_writemore+0x27c>)
 800ac18:	4890      	ldr	r0, [pc, #576]	; (800ae5c <lwip_netconn_do_writemore+0x278>)
 800ac1a:	f00e f997 	bl	8018f4c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a1b      	ldr	r3, [r3, #32]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d106      	bne.n	800ac34 <lwip_netconn_do_writemore+0x50>
 800ac26:	4b8b      	ldr	r3, [pc, #556]	; (800ae54 <lwip_netconn_do_writemore+0x270>)
 800ac28:	f240 6275 	movw	r2, #1653	; 0x675
 800ac2c:	498d      	ldr	r1, [pc, #564]	; (800ae64 <lwip_netconn_do_writemore+0x280>)
 800ac2e:	488b      	ldr	r0, [pc, #556]	; (800ae5c <lwip_netconn_do_writemore+0x278>)
 800ac30:	f00e f98c 	bl	8018f4c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d106      	bne.n	800ac4a <lwip_netconn_do_writemore+0x66>
 800ac3c:	4b85      	ldr	r3, [pc, #532]	; (800ae54 <lwip_netconn_do_writemore+0x270>)
 800ac3e:	f240 6276 	movw	r2, #1654	; 0x676
 800ac42:	4989      	ldr	r1, [pc, #548]	; (800ae68 <lwip_netconn_do_writemore+0x284>)
 800ac44:	4885      	ldr	r0, [pc, #532]	; (800ae5c <lwip_netconn_do_writemore+0x278>)
 800ac46:	f00e f981 	bl	8018f4c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6a1b      	ldr	r3, [r3, #32]
 800ac4e:	699a      	ldr	r2, [r3, #24]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a1b      	ldr	r3, [r3, #32]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	429a      	cmp	r2, r3
 800ac58:	d306      	bcc.n	800ac68 <lwip_netconn_do_writemore+0x84>
 800ac5a:	4b7e      	ldr	r3, [pc, #504]	; (800ae54 <lwip_netconn_do_writemore+0x270>)
 800ac5c:	f240 6277 	movw	r2, #1655	; 0x677
 800ac60:	4982      	ldr	r1, [pc, #520]	; (800ae6c <lwip_netconn_do_writemore+0x288>)
 800ac62:	487e      	ldr	r0, [pc, #504]	; (800ae5c <lwip_netconn_do_writemore+0x278>)
 800ac64:	f00e f972 	bl	8018f4c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
 800ac6c:	899b      	ldrh	r3, [r3, #12]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d106      	bne.n	800ac80 <lwip_netconn_do_writemore+0x9c>
 800ac72:	4b78      	ldr	r3, [pc, #480]	; (800ae54 <lwip_netconn_do_writemore+0x270>)
 800ac74:	f240 6279 	movw	r2, #1657	; 0x679
 800ac78:	497d      	ldr	r1, [pc, #500]	; (800ae70 <lwip_netconn_do_writemore+0x28c>)
 800ac7a:	4878      	ldr	r0, [pc, #480]	; (800ae5c <lwip_netconn_do_writemore+0x278>)
 800ac7c:	f00e f966 	bl	8018f4c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6a1b      	ldr	r3, [r3, #32]
 800ac84:	7f1b      	ldrb	r3, [r3, #28]
 800ac86:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	7f1b      	ldrb	r3, [r3, #28]
 800ac8c:	f003 0302 	and.w	r3, r3, #2
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d104      	bne.n	800ac9e <lwip_netconn_do_writemore+0xba>
 800ac94:	7ebb      	ldrb	r3, [r7, #26]
 800ac96:	f003 0304 	and.w	r3, r3, #4
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <lwip_netconn_do_writemore+0xbe>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e000      	b.n	800aca4 <lwip_netconn_do_writemore+0xc0>
 800aca2:	2300      	movs	r3, #0
 800aca4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6a1b      	ldr	r3, [r3, #32]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	4413      	add	r3, r2
 800acb6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a1b      	ldr	r3, [r3, #32]
 800acc4:	691b      	ldr	r3, [r3, #16]
 800acc6:	1ad3      	subs	r3, r2, r3
 800acc8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acd0:	d307      	bcc.n	800ace2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800acd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800acd6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800acd8:	7ebb      	ldrb	r3, [r7, #26]
 800acda:	f043 0302 	orr.w	r3, r3, #2
 800acde:	76bb      	strb	r3, [r7, #26]
 800ace0:	e001      	b.n	800ace6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	685b      	ldr	r3, [r3, #4]
 800acea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800acee:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800acf0:	89fa      	ldrh	r2, [r7, #14]
 800acf2:	8bbb      	ldrh	r3, [r7, #28]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d216      	bcs.n	800ad26 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800acf8:	89fb      	ldrh	r3, [r7, #14]
 800acfa:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800acfc:	7e3b      	ldrb	r3, [r7, #24]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00d      	beq.n	800ad1e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ad02:	8bbb      	ldrh	r3, [r7, #28]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d10e      	bne.n	800ad26 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a1b      	ldr	r3, [r3, #32]
 800ad0c:	699b      	ldr	r3, [r3, #24]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d102      	bne.n	800ad18 <lwip_netconn_do_writemore+0x134>
 800ad12:	f06f 0306 	mvn.w	r3, #6
 800ad16:	e000      	b.n	800ad1a <lwip_netconn_do_writemore+0x136>
 800ad18:	2300      	movs	r3, #0
 800ad1a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ad1c:	e07d      	b.n	800ae1a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ad1e:	7ebb      	ldrb	r3, [r7, #26]
 800ad20:	f043 0302 	orr.w	r3, r3, #2
 800ad24:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6a1b      	ldr	r3, [r3, #32]
 800ad2a:	691a      	ldr	r2, [r3, #16]
 800ad2c:	8bbb      	ldrh	r3, [r7, #28]
 800ad2e:	441a      	add	r2, r3
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6a1b      	ldr	r3, [r3, #32]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	685b      	ldr	r3, [r3, #4]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d906      	bls.n	800ad4a <lwip_netconn_do_writemore+0x166>
 800ad3c:	4b45      	ldr	r3, [pc, #276]	; (800ae54 <lwip_netconn_do_writemore+0x270>)
 800ad3e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800ad42:	494c      	ldr	r1, [pc, #304]	; (800ae74 <lwip_netconn_do_writemore+0x290>)
 800ad44:	4845      	ldr	r0, [pc, #276]	; (800ae5c <lwip_netconn_do_writemore+0x278>)
 800ad46:	f00e f901 	bl	8018f4c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ad4a:	8bbb      	ldrh	r3, [r7, #28]
 800ad4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d103      	bne.n	800ad5c <lwip_netconn_do_writemore+0x178>
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad5a:	d209      	bcs.n	800ad70 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800ad60:	8bba      	ldrh	r2, [r7, #28]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d10b      	bne.n	800ad7e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6a1b      	ldr	r3, [r3, #32]
 800ad6a:	899b      	ldrh	r3, [r3, #12]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d906      	bls.n	800ad7e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800ad70:	2301      	movs	r3, #1
 800ad72:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ad74:	7ebb      	ldrb	r3, [r7, #26]
 800ad76:	f043 0302 	orr.w	r3, r3, #2
 800ad7a:	76bb      	strb	r3, [r7, #26]
 800ad7c:	e001      	b.n	800ad82 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800ad7e:	2300      	movs	r3, #0
 800ad80:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6858      	ldr	r0, [r3, #4]
 800ad86:	7ebb      	ldrb	r3, [r7, #26]
 800ad88:	8bba      	ldrh	r2, [r7, #28]
 800ad8a:	6979      	ldr	r1, [r7, #20]
 800ad8c:	f00b f932 	bl	8015ff4 <tcp_write>
 800ad90:	4603      	mov	r3, r0
 800ad92:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ad94:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d12c      	bne.n	800adf6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6a1b      	ldr	r3, [r3, #32]
 800ada0:	6999      	ldr	r1, [r3, #24]
 800ada2:	8bba      	ldrh	r2, [r7, #28]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a1b      	ldr	r3, [r3, #32]
 800ada8:	440a      	add	r2, r1
 800adaa:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	6a1b      	ldr	r3, [r3, #32]
 800adb0:	6919      	ldr	r1, [r3, #16]
 800adb2:	8bba      	ldrh	r2, [r7, #28]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6a1b      	ldr	r3, [r3, #32]
 800adb8:	440a      	add	r2, r1
 800adba:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	691a      	ldr	r2, [r3, #16]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6a1b      	ldr	r3, [r3, #32]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d113      	bne.n	800adf6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	899a      	ldrh	r2, [r3, #12]
 800add4:	3a01      	subs	r2, #1
 800add6:	b292      	uxth	r2, r2
 800add8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a1b      	ldr	r3, [r3, #32]
 800adde:	899b      	ldrh	r3, [r3, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d008      	beq.n	800adf6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	689a      	ldr	r2, [r3, #8]
 800adea:	3208      	adds	r2, #8
 800adec:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	2200      	movs	r2, #0
 800adf4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800adf6:	7e7b      	ldrb	r3, [r7, #25]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d004      	beq.n	800ae06 <lwip_netconn_do_writemore+0x222>
 800adfc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f43f af50 	beq.w	800aca6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ae06:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d004      	beq.n	800ae18 <lwip_netconn_do_writemore+0x234>
 800ae0e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ae12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae16:	d147      	bne.n	800aea8 <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800ae18:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ae1a:	7e3b      	ldrb	r3, [r7, #24]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d02b      	beq.n	800ae78 <lwip_netconn_do_writemore+0x294>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a1b      	ldr	r3, [r3, #32]
 800ae24:	699a      	ldr	r2, [r3, #24]
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	695b      	ldr	r3, [r3, #20]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d223      	bcs.n	800ae78 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d005      	beq.n	800ae44 <lwip_netconn_do_writemore+0x260>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	2103      	movs	r1, #3
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	7f1b      	ldrb	r3, [r3, #28]
 800ae48:	f043 0310 	orr.w	r3, r3, #16
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	771a      	strb	r2, [r3, #28]
 800ae52:	e029      	b.n	800aea8 <lwip_netconn_do_writemore+0x2c4>
 800ae54:	0801b1ac 	.word	0x0801b1ac
 800ae58:	0801b348 	.word	0x0801b348
 800ae5c:	0801b234 	.word	0x0801b234
 800ae60:	0801b650 	.word	0x0801b650
 800ae64:	0801b358 	.word	0x0801b358
 800ae68:	0801b670 	.word	0x0801b670
 800ae6c:	0801b688 	.word	0x0801b688
 800ae70:	0801b6c8 	.word	0x0801b6c8
 800ae74:	0801b6f0 	.word	0x0801b6f0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685b      	ldr	r3, [r3, #4]
 800ae7c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae80:	f640 3269 	movw	r2, #2921	; 0xb69
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d905      	bls.n	800ae94 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ae90:	2b04      	cmp	r3, #4
 800ae92:	d909      	bls.n	800aea8 <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d005      	beq.n	800aea8 <lwip_netconn_do_writemore+0x2c4>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	2200      	movs	r2, #0
 800aea2:	2103      	movs	r1, #3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800aea8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d11d      	bne.n	800aeec <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6a1b      	ldr	r3, [r3, #32]
 800aeb4:	699a      	ldr	r2, [r3, #24]
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	6a1b      	ldr	r3, [r3, #32]
 800aeba:	695b      	ldr	r3, [r3, #20]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d002      	beq.n	800aec6 <lwip_netconn_do_writemore+0x2e2>
 800aec0:	7e3b      	ldrb	r3, [r7, #24]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d001      	beq.n	800aeca <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800aec6:	2301      	movs	r3, #1
 800aec8:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	4618      	mov	r0, r3
 800aed0:	f00b fe7a 	bl	8016bc8 <tcp_output>
 800aed4:	4603      	mov	r3, r0
 800aed6:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800aed8:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800aedc:	f113 0f04 	cmn.w	r3, #4
 800aee0:	d12c      	bne.n	800af3c <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800aee2:	7b3b      	ldrb	r3, [r7, #12]
 800aee4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800aee6:	2301      	movs	r3, #1
 800aee8:	76fb      	strb	r3, [r7, #27]
 800aeea:	e027      	b.n	800af3c <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800aeec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aef0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aef4:	d120      	bne.n	800af38 <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f00b fe64 	bl	8016bc8 <tcp_output>
 800af00:	4603      	mov	r3, r0
 800af02:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800af04:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800af08:	f113 0f04 	cmn.w	r3, #4
 800af0c:	d104      	bne.n	800af18 <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800af0e:	7b7b      	ldrb	r3, [r7, #13]
 800af10:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800af12:	2301      	movs	r3, #1
 800af14:	76fb      	strb	r3, [r7, #27]
 800af16:	e011      	b.n	800af3c <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800af18:	7e3b      	ldrb	r3, [r7, #24]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00e      	beq.n	800af3c <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a1b      	ldr	r3, [r3, #32]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d102      	bne.n	800af2e <lwip_netconn_do_writemore+0x34a>
 800af28:	f06f 0306 	mvn.w	r3, #6
 800af2c:	e000      	b.n	800af30 <lwip_netconn_do_writemore+0x34c>
 800af2e:	2300      	movs	r3, #0
 800af30:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800af32:	2301      	movs	r3, #1
 800af34:	76fb      	strb	r3, [r7, #27]
 800af36:	e001      	b.n	800af3c <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800af38:	2301      	movs	r3, #1
 800af3a:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800af3c:	7efb      	ldrb	r3, [r7, #27]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d015      	beq.n	800af6e <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6a1b      	ldr	r3, [r3, #32]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	330c      	adds	r3, #12
 800af4a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6a1b      	ldr	r3, [r3, #32]
 800af50:	7ffa      	ldrb	r2, [r7, #31]
 800af52:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800af60:	78fb      	ldrb	r3, [r7, #3]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d006      	beq.n	800af74 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800af66:	68b8      	ldr	r0, [r7, #8]
 800af68:	f00d fe8e 	bl	8018c88 <sys_sem_signal>
 800af6c:	e002      	b.n	800af74 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800af6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af72:	e000      	b.n	800af76 <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800af74:	2300      	movs	r3, #0
}
 800af76:	4618      	mov	r0, r3
 800af78:	3720      	adds	r7, #32
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop

0800af80 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4618      	mov	r0, r3
 800af92:	f7fe fb06 	bl	80095a2 <netconn_err>
 800af96:	4603      	mov	r3, r0
 800af98:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800af9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d166      	bne.n	800b070 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800afac:	2b10      	cmp	r3, #16
 800afae:	d15d      	bne.n	800b06c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	785b      	ldrb	r3, [r3, #1]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d002      	beq.n	800afc0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800afba:	23fb      	movs	r3, #251	; 0xfb
 800afbc:	73fb      	strb	r3, [r7, #15]
 800afbe:	e057      	b.n	800b070 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d04d      	beq.n	800b066 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	2201      	movs	r2, #1
 800afd0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d006      	beq.n	800afea <lwip_netconn_do_write+0x6a>
 800afdc:	4b28      	ldr	r3, [pc, #160]	; (800b080 <lwip_netconn_do_write+0x100>)
 800afde:	f240 7223 	movw	r2, #1827	; 0x723
 800afe2:	4928      	ldr	r1, [pc, #160]	; (800b084 <lwip_netconn_do_write+0x104>)
 800afe4:	4828      	ldr	r0, [pc, #160]	; (800b088 <lwip_netconn_do_write+0x108>)
 800afe6:	f00d ffb1 	bl	8018f4c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	695b      	ldr	r3, [r3, #20]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d106      	bne.n	800b000 <lwip_netconn_do_write+0x80>
 800aff2:	4b23      	ldr	r3, [pc, #140]	; (800b080 <lwip_netconn_do_write+0x100>)
 800aff4:	f240 7224 	movw	r2, #1828	; 0x724
 800aff8:	4924      	ldr	r1, [pc, #144]	; (800b08c <lwip_netconn_do_write+0x10c>)
 800affa:	4823      	ldr	r0, [pc, #140]	; (800b088 <lwip_netconn_do_write+0x108>)
 800affc:	f00d ffa6 	bl	8018f4c <iprintf>
        msg->conn->current_msg = msg;
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2100      	movs	r1, #0
 800b00e:	4618      	mov	r0, r3
 800b010:	f7ff fde8 	bl	800abe4 <lwip_netconn_do_writemore>
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	d02e      	beq.n	800b078 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	785b      	ldrb	r3, [r3, #1]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d006      	beq.n	800b032 <lwip_netconn_do_write+0xb2>
 800b024:	4b16      	ldr	r3, [pc, #88]	; (800b080 <lwip_netconn_do_write+0x100>)
 800b026:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b02a:	4919      	ldr	r1, [pc, #100]	; (800b090 <lwip_netconn_do_write+0x110>)
 800b02c:	4816      	ldr	r0, [pc, #88]	; (800b088 <lwip_netconn_do_write+0x108>)
 800b02e:	f00d ff8d 	bl	8018f4c <iprintf>
          UNLOCK_TCPIP_CORE();
 800b032:	4818      	ldr	r0, [pc, #96]	; (800b094 <lwip_netconn_do_write+0x114>)
 800b034:	f00d fe97 	bl	8018d66 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	330c      	adds	r3, #12
 800b03e:	2100      	movs	r1, #0
 800b040:	4618      	mov	r0, r3
 800b042:	f00d fdf0 	bl	8018c26 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b046:	4813      	ldr	r0, [pc, #76]	; (800b094 <lwip_netconn_do_write+0x114>)
 800b048:	f00d fe7e 	bl	8018d48 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	785b      	ldrb	r3, [r3, #1]
 800b052:	2b01      	cmp	r3, #1
 800b054:	d110      	bne.n	800b078 <lwip_netconn_do_write+0xf8>
 800b056:	4b0a      	ldr	r3, [pc, #40]	; (800b080 <lwip_netconn_do_write+0x100>)
 800b058:	f240 722c 	movw	r2, #1836	; 0x72c
 800b05c:	490c      	ldr	r1, [pc, #48]	; (800b090 <lwip_netconn_do_write+0x110>)
 800b05e:	480a      	ldr	r0, [pc, #40]	; (800b088 <lwip_netconn_do_write+0x108>)
 800b060:	f00d ff74 	bl	8018f4c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b064:	e008      	b.n	800b078 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b066:	23f5      	movs	r3, #245	; 0xf5
 800b068:	73fb      	strb	r3, [r7, #15]
 800b06a:	e001      	b.n	800b070 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b06c:	23fa      	movs	r3, #250	; 0xfa
 800b06e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	7bfa      	ldrb	r2, [r7, #15]
 800b074:	711a      	strb	r2, [r3, #4]
 800b076:	e000      	b.n	800b07a <lwip_netconn_do_write+0xfa>
        return;
 800b078:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	0801b1ac 	.word	0x0801b1ac
 800b084:	0801b594 	.word	0x0801b594
 800b088:	0801b234 	.word	0x0801b234
 800b08c:	0801b71c 	.word	0x0801b71c
 800b090:	0801b5b0 	.word	0x0801b5b0
 800b094:	2400740c 	.word	0x2400740c

0800b098 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d06b      	beq.n	800b186 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	7c1b      	ldrb	r3, [r3, #16]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d007      	beq.n	800b0c6 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	685a      	ldr	r2, [r3, #4]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	6812      	ldr	r2, [r2, #0]
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	e006      	b.n	800b0d4 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	689b      	ldr	r3, [r3, #8]
 800b0d0:	6852      	ldr	r2, [r2, #4]
 800b0d2:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b0e4:	2b10      	cmp	r3, #16
 800b0e6:	d021      	beq.n	800b12c <lwip_netconn_do_getaddr+0x94>
 800b0e8:	2b20      	cmp	r3, #32
 800b0ea:	d144      	bne.n	800b176 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	7c1b      	ldrb	r3, [r3, #16]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d007      	beq.n	800b104 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	685a      	ldr	r2, [r3, #4]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	8a52      	ldrh	r2, [r2, #18]
 800b100:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800b102:	e044      	b.n	800b18e <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	7c1b      	ldrb	r3, [r3, #16]
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b00      	cmp	r3, #0
 800b112:	d103      	bne.n	800b11c <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	22f5      	movs	r2, #245	; 0xf5
 800b118:	711a      	strb	r2, [r3, #4]
        break;
 800b11a:	e038      	b.n	800b18e <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	8a92      	ldrh	r2, [r2, #20]
 800b128:	801a      	strh	r2, [r3, #0]
        break;
 800b12a:	e030      	b.n	800b18e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	7c1b      	ldrb	r3, [r3, #16]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d10f      	bne.n	800b154 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	685b      	ldr	r3, [r3, #4]
 800b13a:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d005      	beq.n	800b14c <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	7d1b      	ldrb	r3, [r3, #20]
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d103      	bne.n	800b154 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	22f5      	movs	r2, #245	; 0xf5
 800b150:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800b152:	e01c      	b.n	800b18e <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	7c1b      	ldrb	r3, [r3, #16]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d004      	beq.n	800b166 <lwip_netconn_do_getaddr+0xce>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	685b      	ldr	r3, [r3, #4]
 800b162:	8adb      	ldrh	r3, [r3, #22]
 800b164:	e003      	b.n	800b16e <lwip_netconn_do_getaddr+0xd6>
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	8b1b      	ldrh	r3, [r3, #24]
 800b16e:	68fa      	ldr	r2, [r7, #12]
 800b170:	68d2      	ldr	r2, [r2, #12]
 800b172:	8013      	strh	r3, [r2, #0]
        break;
 800b174:	e00b      	b.n	800b18e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800b176:	4b08      	ldr	r3, [pc, #32]	; (800b198 <lwip_netconn_do_getaddr+0x100>)
 800b178:	f240 727d 	movw	r2, #1917	; 0x77d
 800b17c:	4907      	ldr	r1, [pc, #28]	; (800b19c <lwip_netconn_do_getaddr+0x104>)
 800b17e:	4808      	ldr	r0, [pc, #32]	; (800b1a0 <lwip_netconn_do_getaddr+0x108>)
 800b180:	f00d fee4 	bl	8018f4c <iprintf>
        break;
 800b184:	e003      	b.n	800b18e <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	22f5      	movs	r2, #245	; 0xf5
 800b18a:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b18c:	bf00      	nop
 800b18e:	bf00      	nop
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	0801b1ac 	.word	0x0801b1ac
 800b19c:	0801b730 	.word	0x0801b730
 800b1a0:	0801b234 	.word	0x0801b234

0800b1a4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	785b      	ldrb	r3, [r3, #1]
 800b1b6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d069      	beq.n	800b296 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b1cc:	2b10      	cmp	r3, #16
 800b1ce:	d162      	bne.n	800b296 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b1d4:	2b03      	cmp	r3, #3
 800b1d6:	d002      	beq.n	800b1de <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b1d8:	7afb      	ldrb	r3, [r7, #11]
 800b1da:	2b02      	cmp	r3, #2
 800b1dc:	d05b      	beq.n	800b296 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b1de:	7afb      	ldrb	r3, [r7, #11]
 800b1e0:	2b03      	cmp	r3, #3
 800b1e2:	d103      	bne.n	800b1ec <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	22f5      	movs	r2, #245	; 0xf5
 800b1e8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b1ea:	e059      	b.n	800b2a0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b1ec:	7afb      	ldrb	r3, [r7, #11]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d103      	bne.n	800b1fa <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	22fb      	movs	r2, #251	; 0xfb
 800b1f6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b1f8:	e052      	b.n	800b2a0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	7a1b      	ldrb	r3, [r3, #8]
 800b1fe:	f003 0301 	and.w	r3, r3, #1
 800b202:	2b00      	cmp	r3, #0
 800b204:	d004      	beq.n	800b210 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fe ff62 	bl	800a0d4 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	2b00      	cmp	r3, #0
 800b218:	d006      	beq.n	800b228 <lwip_netconn_do_close+0x84>
 800b21a:	4b23      	ldr	r3, [pc, #140]	; (800b2a8 <lwip_netconn_do_close+0x104>)
 800b21c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b220:	4922      	ldr	r1, [pc, #136]	; (800b2ac <lwip_netconn_do_close+0x108>)
 800b222:	4823      	ldr	r0, [pc, #140]	; (800b2b0 <lwip_netconn_do_close+0x10c>)
 800b224:	f00d fe92 	bl	8018f4c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2204      	movs	r2, #4
 800b22e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	2100      	movs	r1, #0
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fe ffc6 	bl	800a1d0 <lwip_netconn_do_close_internal>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d029      	beq.n	800b29e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	785b      	ldrb	r3, [r3, #1]
 800b250:	2b04      	cmp	r3, #4
 800b252:	d006      	beq.n	800b262 <lwip_netconn_do_close+0xbe>
 800b254:	4b14      	ldr	r3, [pc, #80]	; (800b2a8 <lwip_netconn_do_close+0x104>)
 800b256:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b25a:	4916      	ldr	r1, [pc, #88]	; (800b2b4 <lwip_netconn_do_close+0x110>)
 800b25c:	4814      	ldr	r0, [pc, #80]	; (800b2b0 <lwip_netconn_do_close+0x10c>)
 800b25e:	f00d fe75 	bl	8018f4c <iprintf>
        UNLOCK_TCPIP_CORE();
 800b262:	4815      	ldr	r0, [pc, #84]	; (800b2b8 <lwip_netconn_do_close+0x114>)
 800b264:	f00d fd7f 	bl	8018d66 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	330c      	adds	r3, #12
 800b26e:	2100      	movs	r1, #0
 800b270:	4618      	mov	r0, r3
 800b272:	f00d fcd8 	bl	8018c26 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b276:	4810      	ldr	r0, [pc, #64]	; (800b2b8 <lwip_netconn_do_close+0x114>)
 800b278:	f00d fd66 	bl	8018d48 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	785b      	ldrb	r3, [r3, #1]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00b      	beq.n	800b29e <lwip_netconn_do_close+0xfa>
 800b286:	4b08      	ldr	r3, [pc, #32]	; (800b2a8 <lwip_netconn_do_close+0x104>)
 800b288:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b28c:	4909      	ldr	r1, [pc, #36]	; (800b2b4 <lwip_netconn_do_close+0x110>)
 800b28e:	4808      	ldr	r0, [pc, #32]	; (800b2b0 <lwip_netconn_do_close+0x10c>)
 800b290:	f00d fe5c 	bl	8018f4c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b294:	e003      	b.n	800b29e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	22f5      	movs	r2, #245	; 0xf5
 800b29a:	711a      	strb	r2, [r3, #4]
 800b29c:	e000      	b.n	800b2a0 <lwip_netconn_do_close+0xfc>
      return;
 800b29e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	0801b1ac 	.word	0x0801b1ac
 800b2ac:	0801b594 	.word	0x0801b594
 800b2b0:	0801b234 	.word	0x0801b234
 800b2b4:	0801b5b0 	.word	0x0801b5b0
 800b2b8:	2400740c 	.word	0x2400740c

0800b2bc <lwip_netconn_do_dns_found>:
 * (or on timeout). A waiting application thread is waked up by
 * signaling the semaphore.
 */
static void
lwip_netconn_do_dns_found(const char *name, const ip_addr_t *ipaddr, void *arg)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	617b      	str	r3, [r7, #20]

  /* we trust the internal implementation to be correct :-) */
  LWIP_UNUSED_ARG(name);

  if (ipaddr == NULL) {
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d104      	bne.n	800b2dc <lwip_netconn_do_dns_found+0x20>
    /* timeout or memory error */
    API_EXPR_DEREF(msg->err) = ERR_VAL;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	68db      	ldr	r3, [r3, #12]
 800b2d6:	22fa      	movs	r2, #250	; 0xfa
 800b2d8:	701a      	strb	r2, [r3, #0]
 800b2da:	e008      	b.n	800b2ee <lwip_netconn_do_dns_found+0x32>
  } else {
    /* address was resolved */
    API_EXPR_DEREF(msg->err) = ERR_OK;
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	68db      	ldr	r3, [r3, #12]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	701a      	strb	r2, [r3, #0]
    API_EXPR_DEREF(msg->addr) = *ipaddr;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	685b      	ldr	r3, [r3, #4]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	6812      	ldr	r2, [r2, #0]
 800b2ec:	601a      	str	r2, [r3, #0]
  }
  /* wake up the application task waiting in netconn_gethostbyname */
  sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
 800b2ee:	697b      	ldr	r3, [r7, #20]
 800b2f0:	689b      	ldr	r3, [r3, #8]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f00d fcc8 	bl	8018c88 <sys_sem_signal>
}
 800b2f8:	bf00      	nop
 800b2fa:	3718      	adds	r7, #24
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <lwip_netconn_do_gethostbyname>:
 *
 * @param arg the dns_api_msg pointing to the query
 */
void
lwip_netconn_do_gethostbyname(void *arg)
{
 800b300:	b590      	push	{r4, r7, lr}
 800b302:	b087      	sub	sp, #28
 800b304:	af02      	add	r7, sp, #8
 800b306:	6078      	str	r0, [r7, #4]
  struct dns_api_msg *msg = (struct dns_api_msg *)arg;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	60fb      	str	r3, [r7, #12]
  u8_t addrtype =
 800b30c:	2300      	movs	r3, #0
 800b30e:	72fb      	strb	r3, [r7, #11]
    msg->dns_addrtype;
#else
    LWIP_DNS_ADDRTYPE_DEFAULT;
#endif

  API_EXPR_DEREF(msg->err) = dns_gethostbyname_addrtype(msg->name,
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	6818      	ldr	r0, [r3, #0]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6859      	ldr	r1, [r3, #4]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	68dc      	ldr	r4, [r3, #12]
 800b31c:	7afb      	ldrb	r3, [r7, #11]
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	4a15      	ldr	r2, [pc, #84]	; (800b378 <lwip_netconn_do_gethostbyname+0x78>)
 800b324:	f004 fde6 	bl	800fef4 <dns_gethostbyname_addrtype>
 800b328:	4603      	mov	r3, r0
 800b32a:	7023      	strb	r3, [r4, #0]
                             API_EXPR_REF(msg->addr), lwip_netconn_do_dns_found, msg, addrtype);
#if LWIP_TCPIP_CORE_LOCKING
  /* For core locking, only block if we need to wait for answer/timeout */
  if (API_EXPR_DEREF(msg->err) == ERR_INPROGRESS) {
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	f993 3000 	ldrsb.w	r3, [r3]
 800b334:	f113 0f05 	cmn.w	r3, #5
 800b338:	d119      	bne.n	800b36e <lwip_netconn_do_gethostbyname+0x6e>
    UNLOCK_TCPIP_CORE();
 800b33a:	4810      	ldr	r0, [pc, #64]	; (800b37c <lwip_netconn_do_gethostbyname+0x7c>)
 800b33c:	f00d fd13 	bl	8018d66 <sys_mutex_unlock>
    sys_sem_wait(API_EXPR_REF_SEM(msg->sem));
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	2100      	movs	r1, #0
 800b346:	4618      	mov	r0, r3
 800b348:	f00d fc6d 	bl	8018c26 <sys_arch_sem_wait>
    LOCK_TCPIP_CORE();
 800b34c:	480b      	ldr	r0, [pc, #44]	; (800b37c <lwip_netconn_do_gethostbyname+0x7c>)
 800b34e:	f00d fcfb 	bl	8018d48 <sys_mutex_lock>
    LWIP_ASSERT("do_gethostbyname still in progress!!", API_EXPR_DEREF(msg->err) != ERR_INPROGRESS);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	f993 3000 	ldrsb.w	r3, [r3]
 800b35a:	f113 0f05 	cmn.w	r3, #5
 800b35e:	d106      	bne.n	800b36e <lwip_netconn_do_gethostbyname+0x6e>
 800b360:	4b07      	ldr	r3, [pc, #28]	; (800b380 <lwip_netconn_do_gethostbyname+0x80>)
 800b362:	f640 0271 	movw	r2, #2161	; 0x871
 800b366:	4907      	ldr	r1, [pc, #28]	; (800b384 <lwip_netconn_do_gethostbyname+0x84>)
 800b368:	4807      	ldr	r0, [pc, #28]	; (800b388 <lwip_netconn_do_gethostbyname+0x88>)
 800b36a:	f00d fdef 	bl	8018f4c <iprintf>
    /* on error or immediate success, wake up the application
     * task waiting in netconn_gethostbyname */
    sys_sem_signal(API_EXPR_REF_SEM(msg->sem));
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b36e:	bf00      	nop
 800b370:	3714      	adds	r7, #20
 800b372:	46bd      	mov	sp, r7
 800b374:	bd90      	pop	{r4, r7, pc}
 800b376:	bf00      	nop
 800b378:	0800b2bd 	.word	0x0800b2bd
 800b37c:	2400740c 	.word	0x2400740c
 800b380:	0801b1ac 	.word	0x0801b1ac
 800b384:	0801b748 	.word	0x0801b748
 800b388:	0801b234 	.word	0x0801b234

0800b38c <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	4603      	mov	r3, r0
 800b394:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800b396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	dc04      	bgt.n	800b3a8 <err_to_errno+0x1c>
 800b39e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3a2:	f113 0f10 	cmn.w	r3, #16
 800b3a6:	da01      	bge.n	800b3ac <err_to_errno+0x20>
    return EIO;
 800b3a8:	2305      	movs	r3, #5
 800b3aa:	e005      	b.n	800b3b8 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800b3ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3b0:	425b      	negs	r3, r3
 800b3b2:	4a04      	ldr	r2, [pc, #16]	; (800b3c4 <err_to_errno+0x38>)
 800b3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	370c      	adds	r7, #12
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c2:	4770      	bx	lr
 800b3c4:	0801b770 	.word	0x0801b770

0800b3c8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d013      	beq.n	800b3fe <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00b      	beq.n	800b3f6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	f006 f9d0 	bl	8011788 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	605a      	str	r2, [r3, #4]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	685a      	ldr	r2, [r3, #4]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b3f6:	6879      	ldr	r1, [r7, #4]
 800b3f8:	2006      	movs	r0, #6
 800b3fa:	f005 fb4b 	bl	8010a94 <memp_free>
  }
}
 800b3fe:	bf00      	nop
 800b400:	3708      	adds	r7, #8
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
	...

0800b408 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d106      	bne.n	800b424 <netbuf_free+0x1c>
 800b416:	4b0d      	ldr	r3, [pc, #52]	; (800b44c <netbuf_free+0x44>)
 800b418:	2281      	movs	r2, #129	; 0x81
 800b41a:	490d      	ldr	r1, [pc, #52]	; (800b450 <netbuf_free+0x48>)
 800b41c:	480d      	ldr	r0, [pc, #52]	; (800b454 <netbuf_free+0x4c>)
 800b41e:	f00d fd95 	bl	8018f4c <iprintf>
 800b422:	e00f      	b.n	800b444 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d004      	beq.n	800b436 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4618      	mov	r0, r3
 800b432:	f006 f9a9 	bl	8011788 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	605a      	str	r2, [r3, #4]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	0801b7b4 	.word	0x0801b7b4
 800b450:	0801b890 	.word	0x0801b890
 800b454:	0801b844 	.word	0x0801b844

0800b458 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	4613      	mov	r3, r2
 800b464:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d108      	bne.n	800b47e <netbuf_ref+0x26>
 800b46c:	4b1c      	ldr	r3, [pc, #112]	; (800b4e0 <netbuf_ref+0x88>)
 800b46e:	2299      	movs	r2, #153	; 0x99
 800b470:	491c      	ldr	r1, [pc, #112]	; (800b4e4 <netbuf_ref+0x8c>)
 800b472:	481d      	ldr	r0, [pc, #116]	; (800b4e8 <netbuf_ref+0x90>)
 800b474:	f00d fd6a 	bl	8018f4c <iprintf>
 800b478:	f06f 030f 	mvn.w	r3, #15
 800b47c:	e02b      	b.n	800b4d6 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d004      	beq.n	800b490 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4618      	mov	r0, r3
 800b48c:	f006 f97c 	bl	8011788 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800b490:	2241      	movs	r2, #65	; 0x41
 800b492:	2100      	movs	r1, #0
 800b494:	2036      	movs	r0, #54	; 0x36
 800b496:	f005 fe63 	bl	8011160 <pbuf_alloc>
 800b49a:	4602      	mov	r2, r0
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d105      	bne.n	800b4b4 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800b4ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4b2:	e010      	b.n	800b4d6 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	88fa      	ldrh	r2, [r7, #6]
 800b4c2:	811a      	strh	r2, [r3, #8]
 800b4c4:	68fa      	ldr	r2, [r7, #12]
 800b4c6:	6812      	ldr	r2, [r2, #0]
 800b4c8:	891b      	ldrh	r3, [r3, #8]
 800b4ca:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3710      	adds	r7, #16
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	0801b7b4 	.word	0x0801b7b4
 800b4e4:	0801b8ac 	.word	0x0801b8ac
 800b4e8:	0801b844 	.word	0x0801b844

0800b4ec <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d108      	bne.n	800b510 <netbuf_data+0x24>
 800b4fe:	4b1b      	ldr	r3, [pc, #108]	; (800b56c <netbuf_data+0x80>)
 800b500:	22c6      	movs	r2, #198	; 0xc6
 800b502:	491b      	ldr	r1, [pc, #108]	; (800b570 <netbuf_data+0x84>)
 800b504:	481b      	ldr	r0, [pc, #108]	; (800b574 <netbuf_data+0x88>)
 800b506:	f00d fd21 	bl	8018f4c <iprintf>
 800b50a:	f06f 030f 	mvn.w	r3, #15
 800b50e:	e029      	b.n	800b564 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d108      	bne.n	800b528 <netbuf_data+0x3c>
 800b516:	4b15      	ldr	r3, [pc, #84]	; (800b56c <netbuf_data+0x80>)
 800b518:	22c7      	movs	r2, #199	; 0xc7
 800b51a:	4917      	ldr	r1, [pc, #92]	; (800b578 <netbuf_data+0x8c>)
 800b51c:	4815      	ldr	r0, [pc, #84]	; (800b574 <netbuf_data+0x88>)
 800b51e:	f00d fd15 	bl	8018f4c <iprintf>
 800b522:	f06f 030f 	mvn.w	r3, #15
 800b526:	e01d      	b.n	800b564 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d108      	bne.n	800b540 <netbuf_data+0x54>
 800b52e:	4b0f      	ldr	r3, [pc, #60]	; (800b56c <netbuf_data+0x80>)
 800b530:	22c8      	movs	r2, #200	; 0xc8
 800b532:	4912      	ldr	r1, [pc, #72]	; (800b57c <netbuf_data+0x90>)
 800b534:	480f      	ldr	r0, [pc, #60]	; (800b574 <netbuf_data+0x88>)
 800b536:	f00d fd09 	bl	8018f4c <iprintf>
 800b53a:	f06f 030f 	mvn.w	r3, #15
 800b53e:	e011      	b.n	800b564 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d102      	bne.n	800b54e <netbuf_data+0x62>
    return ERR_BUF;
 800b548:	f06f 0301 	mvn.w	r3, #1
 800b54c:	e00a      	b.n	800b564 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	68bb      	ldr	r3, [r7, #8]
 800b556:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	685b      	ldr	r3, [r3, #4]
 800b55c:	895a      	ldrh	r2, [r3, #10]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800b562:	2300      	movs	r3, #0
}
 800b564:	4618      	mov	r0, r3
 800b566:	3710      	adds	r7, #16
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	0801b7b4 	.word	0x0801b7b4
 800b570:	0801b8fc 	.word	0x0801b8fc
 800b574:	0801b844 	.word	0x0801b844
 800b578:	0801b918 	.word	0x0801b918
 800b57c:	0801b938 	.word	0x0801b938

0800b580 <lwip_gethostbyname>:
 * @return an entry containing addresses of address family AF_INET
 *         for the host with name name
 */
struct hostent *
lwip_gethostbyname(const char *name)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  HOSTENT_STORAGE ip_addr_t s_hostent_addr;
  HOSTENT_STORAGE ip_addr_t *s_phostent_addr[2];
  HOSTENT_STORAGE char s_hostname[DNS_MAX_NAME_LENGTH + 1];

  /* query host IP address */
  err = netconn_gethostbyname(name, &addr);
 800b588:	f107 0308 	add.w	r3, r7, #8
 800b58c:	4619      	mov	r1, r3
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	f7fe f822 	bl	80095d8 <netconn_gethostbyname>
 800b594:	4603      	mov	r3, r0
 800b596:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b598:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d004      	beq.n	800b5aa <lwip_gethostbyname+0x2a>
    LWIP_DEBUGF(DNS_DEBUG, ("lwip_gethostbyname(%s) failed, err=%d\n", name, err));
    h_errno = HOST_NOT_FOUND;
 800b5a0:	4b17      	ldr	r3, [pc, #92]	; (800b600 <lwip_gethostbyname+0x80>)
 800b5a2:	22d2      	movs	r2, #210	; 0xd2
 800b5a4:	601a      	str	r2, [r3, #0]
    return NULL;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	e025      	b.n	800b5f6 <lwip_gethostbyname+0x76>
  }

  /* fill hostent */
  s_hostent_addr = addr;
 800b5aa:	4a16      	ldr	r2, [pc, #88]	; (800b604 <lwip_gethostbyname+0x84>)
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	6013      	str	r3, [r2, #0]
  s_phostent_addr[0] = &s_hostent_addr;
 800b5b0:	4b15      	ldr	r3, [pc, #84]	; (800b608 <lwip_gethostbyname+0x88>)
 800b5b2:	4a14      	ldr	r2, [pc, #80]	; (800b604 <lwip_gethostbyname+0x84>)
 800b5b4:	601a      	str	r2, [r3, #0]
  s_phostent_addr[1] = NULL;
 800b5b6:	4b14      	ldr	r3, [pc, #80]	; (800b608 <lwip_gethostbyname+0x88>)
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	605a      	str	r2, [r3, #4]
  strncpy(s_hostname, name, DNS_MAX_NAME_LENGTH);
 800b5bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b5c0:	6879      	ldr	r1, [r7, #4]
 800b5c2:	4812      	ldr	r0, [pc, #72]	; (800b60c <lwip_gethostbyname+0x8c>)
 800b5c4:	f00d fd63 	bl	801908e <strncpy>
  s_hostname[DNS_MAX_NAME_LENGTH] = 0;
 800b5c8:	4b10      	ldr	r3, [pc, #64]	; (800b60c <lwip_gethostbyname+0x8c>)
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
  s_hostent.h_name = s_hostname;
 800b5d0:	4b0f      	ldr	r3, [pc, #60]	; (800b610 <lwip_gethostbyname+0x90>)
 800b5d2:	4a0e      	ldr	r2, [pc, #56]	; (800b60c <lwip_gethostbyname+0x8c>)
 800b5d4:	601a      	str	r2, [r3, #0]
  s_aliases = NULL;
 800b5d6:	4b0f      	ldr	r3, [pc, #60]	; (800b614 <lwip_gethostbyname+0x94>)
 800b5d8:	2200      	movs	r2, #0
 800b5da:	601a      	str	r2, [r3, #0]
  s_hostent.h_aliases = &s_aliases;
 800b5dc:	4b0c      	ldr	r3, [pc, #48]	; (800b610 <lwip_gethostbyname+0x90>)
 800b5de:	4a0d      	ldr	r2, [pc, #52]	; (800b614 <lwip_gethostbyname+0x94>)
 800b5e0:	605a      	str	r2, [r3, #4]
  s_hostent.h_addrtype = AF_INET;
 800b5e2:	4b0b      	ldr	r3, [pc, #44]	; (800b610 <lwip_gethostbyname+0x90>)
 800b5e4:	2202      	movs	r2, #2
 800b5e6:	609a      	str	r2, [r3, #8]
  s_hostent.h_length = sizeof(ip_addr_t);
 800b5e8:	4b09      	ldr	r3, [pc, #36]	; (800b610 <lwip_gethostbyname+0x90>)
 800b5ea:	2204      	movs	r2, #4
 800b5ec:	60da      	str	r2, [r3, #12]
  s_hostent.h_addr_list = (char **)&s_phostent_addr;
 800b5ee:	4b08      	ldr	r3, [pc, #32]	; (800b610 <lwip_gethostbyname+0x90>)
 800b5f0:	4a05      	ldr	r2, [pc, #20]	; (800b608 <lwip_gethostbyname+0x88>)
 800b5f2:	611a      	str	r2, [r3, #16]

#if LWIP_DNS_API_HOSTENT_STORAGE
  /* this function should return the "per-thread" hostent after copy from s_hostent */
  return sys_thread_hostent(&s_hostent);
#else
  return &s_hostent;
 800b5f4:	4b06      	ldr	r3, [pc, #24]	; (800b610 <lwip_gethostbyname+0x90>)
#endif /* LWIP_DNS_API_HOSTENT_STORAGE */
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	24007408 	.word	0x24007408
 800b604:	24006a50 	.word	0x24006a50
 800b608:	24006a54 	.word	0x24006a54
 800b60c:	24006a5c 	.word	0x24006a5c
 800b610:	24006b60 	.word	0x24006b60
 800b614:	24006b74 	.word	0x24006b74

0800b618 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800b618:	b480      	push	{r7}
 800b61a:	b085      	sub	sp, #20
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2b00      	cmp	r3, #0
 800b628:	db02      	blt.n	800b630 <tryget_socket_unconn_nouse+0x18>
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	2b03      	cmp	r3, #3
 800b62e:	dd01      	ble.n	800b634 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800b630:	2300      	movs	r3, #0
 800b632:	e003      	b.n	800b63c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	011b      	lsls	r3, r3, #4
 800b638:	4a03      	ldr	r2, [pc, #12]	; (800b648 <tryget_socket_unconn_nouse+0x30>)
 800b63a:	4413      	add	r3, r2
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr
 800b648:	24006b78 	.word	0x24006b78

0800b64c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff ffdf 	bl	800b618 <tryget_socket_unconn_nouse>
 800b65a:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800b65c:	68fb      	ldr	r3, [r7, #12]
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b084      	sub	sp, #16
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f7ff ffec 	bl	800b64c <tryget_socket_unconn>
 800b674:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d005      	beq.n	800b688 <tryget_socket+0x22>
    if (sock->conn) {
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <tryget_socket+0x22>
      return sock;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	e000      	b.n	800b68a <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
	...

0800b694 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b084      	sub	sp, #16
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7ff ffe2 	bl	800b666 <tryget_socket>
 800b6a2:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d104      	bne.n	800b6b4 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800b6aa:	4b05      	ldr	r3, [pc, #20]	; (800b6c0 <get_socket+0x2c>)
 800b6ac:	2209      	movs	r2, #9
 800b6ae:	601a      	str	r2, [r3, #0]
    return NULL;
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	e000      	b.n	800b6b6 <get_socket+0x22>
  }
  return sock;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3710      	adds	r7, #16
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	2400b2c0 	.word	0x2400b2c0

0800b6c4 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b084      	sub	sp, #16
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	e052      	b.n	800b77a <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800b6d4:	f00d fb72 	bl	8018dbc <sys_arch_protect>
 800b6d8:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800b6da:	4a2c      	ldr	r2, [pc, #176]	; (800b78c <alloc_socket+0xc8>)
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	011b      	lsls	r3, r3, #4
 800b6e0:	4413      	add	r3, r2
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d142      	bne.n	800b76e <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800b6e8:	4a28      	ldr	r2, [pc, #160]	; (800b78c <alloc_socket+0xc8>)
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	011b      	lsls	r3, r3, #4
 800b6ee:	4413      	add	r3, r2
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800b6f4:	68b8      	ldr	r0, [r7, #8]
 800b6f6:	f00d fb6f 	bl	8018dd8 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800b6fa:	4a24      	ldr	r2, [pc, #144]	; (800b78c <alloc_socket+0xc8>)
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	011b      	lsls	r3, r3, #4
 800b700:	4413      	add	r3, r2
 800b702:	3304      	adds	r3, #4
 800b704:	2200      	movs	r2, #0
 800b706:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800b708:	4a20      	ldr	r2, [pc, #128]	; (800b78c <alloc_socket+0xc8>)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	011b      	lsls	r3, r3, #4
 800b70e:	4413      	add	r3, r2
 800b710:	330e      	adds	r3, #14
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d006      	beq.n	800b726 <alloc_socket+0x62>
 800b718:	4b1d      	ldr	r3, [pc, #116]	; (800b790 <alloc_socket+0xcc>)
 800b71a:	f240 220e 	movw	r2, #526	; 0x20e
 800b71e:	491d      	ldr	r1, [pc, #116]	; (800b794 <alloc_socket+0xd0>)
 800b720:	481d      	ldr	r0, [pc, #116]	; (800b798 <alloc_socket+0xd4>)
 800b722:	f00d fc13 	bl	8018f4c <iprintf>
      sockets[i].rcvevent   = 0;
 800b726:	4a19      	ldr	r2, [pc, #100]	; (800b78c <alloc_socket+0xc8>)
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	011b      	lsls	r3, r3, #4
 800b72c:	4413      	add	r3, r2
 800b72e:	3308      	adds	r3, #8
 800b730:	2200      	movs	r2, #0
 800b732:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b73c:	2b10      	cmp	r3, #16
 800b73e:	d102      	bne.n	800b746 <alloc_socket+0x82>
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d001      	beq.n	800b74a <alloc_socket+0x86>
 800b746:	2301      	movs	r3, #1
 800b748:	e000      	b.n	800b74c <alloc_socket+0x88>
 800b74a:	2300      	movs	r3, #0
 800b74c:	b299      	uxth	r1, r3
 800b74e:	4a0f      	ldr	r2, [pc, #60]	; (800b78c <alloc_socket+0xc8>)
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	011b      	lsls	r3, r3, #4
 800b754:	4413      	add	r3, r2
 800b756:	330a      	adds	r3, #10
 800b758:	460a      	mov	r2, r1
 800b75a:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800b75c:	4a0b      	ldr	r2, [pc, #44]	; (800b78c <alloc_socket+0xc8>)
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	011b      	lsls	r3, r3, #4
 800b762:	4413      	add	r3, r2
 800b764:	330c      	adds	r3, #12
 800b766:	2200      	movs	r2, #0
 800b768:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	e00a      	b.n	800b784 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800b76e:	68b8      	ldr	r0, [r7, #8]
 800b770:	f00d fb32 	bl	8018dd8 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	3301      	adds	r3, #1
 800b778:	60fb      	str	r3, [r7, #12]
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2b03      	cmp	r3, #3
 800b77e:	dda9      	ble.n	800b6d4 <alloc_socket+0x10>
  }
  return -1;
 800b780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b784:	4618      	mov	r0, r3
 800b786:	3710      	adds	r7, #16
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	24006b78 	.word	0x24006b78
 800b790:	0801b98c 	.word	0x0801b98c
 800b794:	0801ba04 	.word	0x0801ba04
 800b798:	0801ba24 	.word	0x0801ba24

0800b79c <free_socket_locked>:
 * @param lastdata lastdata is stored here, must be freed externally
 */
static int
free_socket_locked(struct lwip_sock *sock, int is_tcp, struct netconn **conn,
                   union lwip_sock_lastdata *lastdata)
{
 800b79c:	b480      	push	{r7}
 800b79e:	b085      	sub	sp, #20
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
 800b7a8:	603b      	str	r3, [r7, #0]
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  LWIP_UNUSED_ARG(is_tcp);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  *lastdata = sock->lastdata;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	68fa      	ldr	r2, [r7, #12]
 800b7ae:	6852      	ldr	r2, [r2, #4]
 800b7b0:	601a      	str	r2, [r3, #0]
  sock->lastdata.pbuf = NULL;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	605a      	str	r2, [r3, #4]
  *conn = sock->conn;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	601a      	str	r2, [r3, #0]
  sock->conn = NULL;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	601a      	str	r2, [r3, #0]
  return 1;
 800b7c6:	2301      	movs	r3, #1
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3714      	adds	r7, #20
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d2:	4770      	bx	lr

0800b7d4 <free_socket_free_elements>:

/** Free a socket's leftover members.
 */
static void
free_socket_free_elements(int is_tcp, struct netconn *conn, union lwip_sock_lastdata *lastdata)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	60f8      	str	r0, [r7, #12]
 800b7dc:	60b9      	str	r1, [r7, #8]
 800b7de:	607a      	str	r2, [r7, #4]
  if (lastdata->pbuf != NULL) {
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00d      	beq.n	800b804 <free_socket_free_elements+0x30>
    if (is_tcp) {
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d005      	beq.n	800b7fa <free_socket_free_elements+0x26>
      pbuf_free(lastdata->pbuf);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f005 ffc8 	bl	8011788 <pbuf_free>
 800b7f8:	e004      	b.n	800b804 <free_socket_free_elements+0x30>
    } else {
      netbuf_delete(lastdata->netbuf);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	4618      	mov	r0, r3
 800b800:	f7ff fde2 	bl	800b3c8 <netbuf_delete>
    }
  }
  if (conn != NULL) {
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d002      	beq.n	800b810 <free_socket_free_elements+0x3c>
    /* netconn_prepare_delete() has already been called, here we only free the conn */
    netconn_delete(conn);
 800b80a:	68b8      	ldr	r0, [r7, #8]
 800b80c:	f7fd f950 	bl	8008ab0 <netconn_delete>
  }
}
 800b810:	bf00      	nop
 800b812:	3710      	adds	r7, #16
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <free_socket>:
 * @param sock the socket to free
 * @param is_tcp != 0 for TCP sockets, used to free lastdata
 */
static void
free_socket(struct lwip_sock *sock, int is_tcp)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b086      	sub	sp, #24
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  struct netconn *conn;
  union lwip_sock_lastdata lastdata;
  SYS_ARCH_DECL_PROTECT(lev);

  /* Protect socket array */
  SYS_ARCH_PROTECT(lev);
 800b822:	f00d facb 	bl	8018dbc <sys_arch_protect>
 800b826:	6178      	str	r0, [r7, #20]

  freed = free_socket_locked(sock, is_tcp, &conn, &lastdata);
 800b828:	f107 0308 	add.w	r3, r7, #8
 800b82c:	f107 020c 	add.w	r2, r7, #12
 800b830:	6839      	ldr	r1, [r7, #0]
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f7ff ffb2 	bl	800b79c <free_socket_locked>
 800b838:	6138      	str	r0, [r7, #16]
  SYS_ARCH_UNPROTECT(lev);
 800b83a:	6978      	ldr	r0, [r7, #20]
 800b83c:	f00d facc 	bl	8018dd8 <sys_arch_unprotect>
  /* don't use 'sock' after this line, as another task might have allocated it */

  if (freed) {
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d006      	beq.n	800b854 <free_socket+0x3c>
    free_socket_free_elements(is_tcp, conn, &lastdata);
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f107 0208 	add.w	r2, r7, #8
 800b84c:	4619      	mov	r1, r3
 800b84e:	6838      	ldr	r0, [r7, #0]
 800b850:	f7ff ffc0 	bl	800b7d4 <free_socket_free_elements>
  }
}
 800b854:	bf00      	nop
 800b856:	3718      	adds	r7, #24
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <lwip_close>:
  return 0;
}

int
lwip_close(int s)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock;
  int is_tcp = 0;
 800b864:	2300      	movs	r3, #0
 800b866:	617b      	str	r3, [r7, #20]
  err_t err;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_close(%d)\n", s));

  sock = get_socket(s);
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7ff ff13 	bl	800b694 <get_socket>
 800b86e:	6138      	str	r0, [r7, #16]
  if (!sock) {
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d102      	bne.n	800b87c <lwip_close+0x20>
    return -1;
 800b876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b87a:	e039      	b.n	800b8f0 <lwip_close+0x94>
  }

  if (sock->conn != NULL) {
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d00b      	beq.n	800b89c <lwip_close+0x40>
    is_tcp = NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP;
 800b884:	693b      	ldr	r3, [r7, #16]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b88e:	2b10      	cmp	r3, #16
 800b890:	bf0c      	ite	eq
 800b892:	2301      	moveq	r3, #1
 800b894:	2300      	movne	r3, #0
 800b896:	b2db      	uxtb	r3, r3
 800b898:	617b      	str	r3, [r7, #20]
 800b89a:	e00a      	b.n	800b8b2 <lwip_close+0x56>
  } else {
    LWIP_ASSERT("sock->lastdata == NULL", sock->lastdata.pbuf == NULL);
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	685b      	ldr	r3, [r3, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d006      	beq.n	800b8b2 <lwip_close+0x56>
 800b8a4:	4b14      	ldr	r3, [pc, #80]	; (800b8f8 <lwip_close+0x9c>)
 800b8a6:	f44f 7245 	mov.w	r2, #788	; 0x314
 800b8aa:	4914      	ldr	r1, [pc, #80]	; (800b8fc <lwip_close+0xa0>)
 800b8ac:	4814      	ldr	r0, [pc, #80]	; (800b900 <lwip_close+0xa4>)
 800b8ae:	f00d fb4d 	bl	8018f4c <iprintf>
#if LWIP_IPV6_MLD
  /* drop all possibly joined MLD6 memberships */
  lwip_socket_drop_registered_mld6_memberships(s);
#endif /* LWIP_IPV6_MLD */

  err = netconn_prepare_delete(sock->conn);
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fd f8d6 	bl	8008a68 <netconn_prepare_delete>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b8c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d00e      	beq.n	800b8e6 <lwip_close+0x8a>
    sock_set_errno(sock, err_to_errno(err));
 800b8c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7ff fd5d 	bl	800b38c <err_to_errno>
 800b8d2:	60b8      	str	r0, [r7, #8]
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <lwip_close+0x84>
 800b8da:	4a0a      	ldr	r2, [pc, #40]	; (800b904 <lwip_close+0xa8>)
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b8e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8e4:	e004      	b.n	800b8f0 <lwip_close+0x94>
  }

  free_socket(sock, is_tcp);
 800b8e6:	6979      	ldr	r1, [r7, #20]
 800b8e8:	6938      	ldr	r0, [r7, #16]
 800b8ea:	f7ff ff95 	bl	800b818 <free_socket>
  set_errno(0);
  return 0;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3718      	adds	r7, #24
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	0801b98c 	.word	0x0801b98c
 800b8fc:	0801ba90 	.word	0x0801ba90
 800b900:	0801ba24 	.word	0x0801ba24
 800b904:	2400b2c0 	.word	0x2400b2c0

0800b908 <lwip_connect>:

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b08c      	sub	sp, #48	; 0x30
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f7ff febd 	bl	800b694 <get_socket>
 800b91a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (!sock) {
 800b91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d102      	bne.n	800b928 <lwip_connect+0x20>
    return -1;
 800b922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b926:	e062      	b.n	800b9ee <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800b928:	68bb      	ldr	r3, [r7, #8]
 800b92a:	785b      	ldrb	r3, [r3, #1]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d108      	bne.n	800b942 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4618      	mov	r0, r3
 800b936:	f7fd f999 	bl	8008c6c <netconn_disconnect>
 800b93a:	4603      	mov	r3, r0
 800b93c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b940:	e039      	b.n	800b9b6 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2b10      	cmp	r3, #16
 800b946:	d10c      	bne.n	800b962 <lwip_connect+0x5a>
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	785b      	ldrb	r3, [r3, #1]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d003      	beq.n	800b958 <lwip_connect+0x50>
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	785b      	ldrb	r3, [r3, #1]
 800b954:	2b02      	cmp	r3, #2
 800b956:	d104      	bne.n	800b962 <lwip_connect+0x5a>
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	f003 0303 	and.w	r3, r3, #3
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d014      	beq.n	800b98c <lwip_connect+0x84>
 800b962:	4b25      	ldr	r3, [pc, #148]	; (800b9f8 <lwip_connect+0xf0>)
 800b964:	f240 3247 	movw	r2, #839	; 0x347
 800b968:	4924      	ldr	r1, [pc, #144]	; (800b9fc <lwip_connect+0xf4>)
 800b96a:	4825      	ldr	r0, [pc, #148]	; (800ba00 <lwip_connect+0xf8>)
 800b96c:	f00d faee 	bl	8018f4c <iprintf>
 800b970:	f06f 000f 	mvn.w	r0, #15
 800b974:	f7ff fd0a 	bl	800b38c <err_to_errno>
 800b978:	6238      	str	r0, [r7, #32]
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <lwip_connect+0x7e>
 800b980:	4a20      	ldr	r2, [pc, #128]	; (800ba04 <lwip_connect+0xfc>)
 800b982:	6a3b      	ldr	r3, [r7, #32]
 800b984:	6013      	str	r3, [r2, #0]
 800b986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b98a:	e030      	b.n	800b9ee <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800b98c:	68bb      	ldr	r3, [r7, #8]
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	617b      	str	r3, [r7, #20]
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	885b      	ldrh	r3, [r3, #2]
 800b996:	4618      	mov	r0, r3
 800b998:	f003 fb12 	bl	800efc0 <lwip_htons>
 800b99c:	4603      	mov	r3, r0
 800b99e:	84fb      	strh	r3, [r7, #38]	; 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800b9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b9a6:	f107 0114 	add.w	r1, r7, #20
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7fd f926 	bl	8008bfc <netconn_connect>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  if (err != ERR_OK) {
 800b9b6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00e      	beq.n	800b9dc <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800b9be:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7ff fce2 	bl	800b38c <err_to_errno>
 800b9c8:	61b8      	str	r0, [r7, #24]
 800b9ca:	69bb      	ldr	r3, [r7, #24]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d002      	beq.n	800b9d6 <lwip_connect+0xce>
 800b9d0:	4a0c      	ldr	r2, [pc, #48]	; (800ba04 <lwip_connect+0xfc>)
 800b9d2:	69bb      	ldr	r3, [r7, #24]
 800b9d4:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800b9d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9da:	e008      	b.n	800b9ee <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800b9dc:	2300      	movs	r3, #0
 800b9de:	61fb      	str	r3, [r7, #28]
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d002      	beq.n	800b9ec <lwip_connect+0xe4>
 800b9e6:	4a07      	ldr	r2, [pc, #28]	; (800ba04 <lwip_connect+0xfc>)
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3730      	adds	r7, #48	; 0x30
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	0801b98c 	.word	0x0801b98c
 800b9fc:	0801baa8 	.word	0x0801baa8
 800ba00:	0801ba24 	.word	0x0801ba24
 800ba04:	2400b2c0 	.word	0x2400b2c0

0800ba08 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b08c      	sub	sp, #48	; 0x30
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]
 800ba14:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800ba16:	2308      	movs	r3, #8
 800ba18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	db01      	blt.n	800ba2a <lwip_recv_tcp+0x22>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	e001      	b.n	800ba2e <lwip_recv_tcp+0x26>
 800ba2a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ba2e:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d106      	bne.n	800ba44 <lwip_recv_tcp+0x3c>
 800ba36:	4b74      	ldr	r3, [pc, #464]	; (800bc08 <lwip_recv_tcp+0x200>)
 800ba38:	f240 329e 	movw	r2, #926	; 0x39e
 800ba3c:	4973      	ldr	r1, [pc, #460]	; (800bc0c <lwip_recv_tcp+0x204>)
 800ba3e:	4874      	ldr	r0, [pc, #464]	; (800bc10 <lwip_recv_tcp+0x208>)
 800ba40:	f00d fa84 	bl	8018f4c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba4e:	2b10      	cmp	r3, #16
 800ba50:	d006      	beq.n	800ba60 <lwip_recv_tcp+0x58>
 800ba52:	4b6d      	ldr	r3, [pc, #436]	; (800bc08 <lwip_recv_tcp+0x200>)
 800ba54:	f240 329f 	movw	r2, #927	; 0x39f
 800ba58:	496e      	ldr	r1, [pc, #440]	; (800bc14 <lwip_recv_tcp+0x20c>)
 800ba5a:	486d      	ldr	r0, [pc, #436]	; (800bc10 <lwip_recv_tcp+0x208>)
 800ba5c:	f00d fa76 	bl	8018f4c <iprintf>

  if (flags & MSG_DONTWAIT) {
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	f003 0308 	and.w	r3, r3, #8
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d005      	beq.n	800ba76 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800ba6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ba6e:	f043 0304 	orr.w	r3, r3, #4
 800ba72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d003      	beq.n	800ba86 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	617b      	str	r3, [r7, #20]
 800ba84:	e036      	b.n	800baf4 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ba8e:	f107 0114 	add.w	r1, r7, #20
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fd fb76 	bl	8009184 <netconn_recv_tcp_pbuf_flags>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800ba9e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d019      	beq.n	800bada <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800baa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f300 808d 	bgt.w	800bbc8 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800baae:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7ff fc6a 	bl	800b38c <err_to_errno>
 800bab8:	61f8      	str	r0, [r7, #28]
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d002      	beq.n	800bac6 <lwip_recv_tcp+0xbe>
 800bac0:	4a55      	ldr	r2, [pc, #340]	; (800bc18 <lwip_recv_tcp+0x210>)
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800bac6:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800baca:	f113 0f0f 	cmn.w	r3, #15
 800bace:	d101      	bne.n	800bad4 <lwip_recv_tcp+0xcc>
          return 0;
 800bad0:	2300      	movs	r3, #0
 800bad2:	e094      	b.n	800bbfe <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800bad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bad8:	e091      	b.n	800bbfe <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d106      	bne.n	800baee <lwip_recv_tcp+0xe6>
 800bae0:	4b49      	ldr	r3, [pc, #292]	; (800bc08 <lwip_recv_tcp+0x200>)
 800bae2:	f240 32c5 	movw	r2, #965	; 0x3c5
 800bae6:	494d      	ldr	r1, [pc, #308]	; (800bc1c <lwip_recv_tcp+0x214>)
 800bae8:	4849      	ldr	r0, [pc, #292]	; (800bc10 <lwip_recv_tcp+0x208>)
 800baea:	f00d fa2f 	bl	8018f4c <iprintf>
      sock->lastdata.pbuf = p;
 800baee:	697a      	ldr	r2, [r7, #20]
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	891b      	ldrh	r3, [r3, #8]
 800baf8:	461a      	mov	r2, r3
 800bafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafc:	4293      	cmp	r3, r2
 800bafe:	dd03      	ble.n	800bb08 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	891b      	ldrh	r3, [r3, #8]
 800bb04:	847b      	strh	r3, [r7, #34]	; 0x22
 800bb06:	e001      	b.n	800bb0c <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800bb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb0a:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800bb0c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb10:	4413      	add	r3, r2
 800bb12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb14:	429a      	cmp	r2, r3
 800bb16:	dd03      	ble.n	800bb20 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800bb18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	43db      	mvns	r3, r3
 800bb1e:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800bb20:	6978      	ldr	r0, [r7, #20]
 800bb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb24:	68ba      	ldr	r2, [r7, #8]
 800bb26:	18d1      	adds	r1, r2, r3
 800bb28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	f006 f832 	bl	8011b94 <pbuf_copy_partial>

    recvd += copylen;
 800bb30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bb34:	4413      	add	r3, r2
 800bb36:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800bb38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	da06      	bge.n	800bb4e <lwip_recv_tcp+0x146>
 800bb40:	4b31      	ldr	r3, [pc, #196]	; (800bc08 <lwip_recv_tcp+0x200>)
 800bb42:	f240 32dd 	movw	r2, #989	; 0x3dd
 800bb46:	4936      	ldr	r1, [pc, #216]	; (800bc20 <lwip_recv_tcp+0x218>)
 800bb48:	4831      	ldr	r0, [pc, #196]	; (800bc10 <lwip_recv_tcp+0x208>)
 800bb4a:	f00d f9ff 	bl	8018f4c <iprintf>
    recv_left -= copylen;
 800bb4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb52:	1ad3      	subs	r3, r2, r3
 800bb54:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d123      	bne.n	800bba8 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	891b      	ldrh	r3, [r3, #8]
 800bb64:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d906      	bls.n	800bb78 <lwip_recv_tcp+0x170>
 800bb6a:	4b27      	ldr	r3, [pc, #156]	; (800bc08 <lwip_recv_tcp+0x200>)
 800bb6c:	f240 32e3 	movw	r2, #995	; 0x3e3
 800bb70:	492c      	ldr	r1, [pc, #176]	; (800bc24 <lwip_recv_tcp+0x21c>)
 800bb72:	4827      	ldr	r0, [pc, #156]	; (800bc10 <lwip_recv_tcp+0x208>)
 800bb74:	f00d f9ea 	bl	8018f4c <iprintf>
      if (p->tot_len - copylen > 0) {
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	891b      	ldrh	r3, [r3, #8]
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	dd09      	ble.n	800bb9a <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800bb86:	697b      	ldr	r3, [r7, #20]
 800bb88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bb8a:	4611      	mov	r1, r2
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f005 fdc8 	bl	8011722 <pbuf_free_header>
 800bb92:	4602      	mov	r2, r0
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	605a      	str	r2, [r3, #4]
 800bb98:	e006      	b.n	800bba8 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	4618      	mov	r0, r3
 800bba4:	f005 fdf0 	bl	8011788 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800bba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bbac:	f043 0314 	orr.w	r3, r3, #20
 800bbb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800bbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	dd08      	ble.n	800bbcc <lwip_recv_tcp+0x1c4>
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	f003 0301 	and.w	r3, r3, #1
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f43f af58 	beq.w	800ba76 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800bbc6:	e001      	b.n	800bbcc <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800bbc8:	bf00      	nop
 800bbca:	e000      	b.n	800bbce <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800bbcc:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800bbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	dd0b      	ble.n	800bbec <lwip_recv_tcp+0x1e4>
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	f003 0301 	and.w	r3, r3, #1
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d106      	bne.n	800bbec <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bbe4:	4611      	mov	r1, r2
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	f7fd fa1a 	bl	8009020 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800bbec:	2300      	movs	r3, #0
 800bbee:	61bb      	str	r3, [r7, #24]
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d002      	beq.n	800bbfc <lwip_recv_tcp+0x1f4>
 800bbf6:	4a08      	ldr	r2, [pc, #32]	; (800bc18 <lwip_recv_tcp+0x210>)
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	6013      	str	r3, [r2, #0]
  return recvd;
 800bbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	3730      	adds	r7, #48	; 0x30
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	0801b98c 	.word	0x0801b98c
 800bc0c:	0801bac8 	.word	0x0801bac8
 800bc10:	0801ba24 	.word	0x0801ba24
 800bc14:	0801bad8 	.word	0x0801bad8
 800bc18:	2400b2c0 	.word	0x2400b2c0
 800bc1c:	0801bafc 	.word	0x0801bafc
 800bc20:	0801bb08 	.word	0x0801bb08
 800bc24:	0801bb30 	.word	0x0801bb30

0800bc28 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800bc28:	b590      	push	{r4, r7, lr}
 800bc2a:	b08b      	sub	sp, #44	; 0x2c
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	603b      	str	r3, [r7, #0]
 800bc34:	4613      	mov	r3, r2
 800bc36:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800bc38:	2300      	movs	r3, #0
 800bc3a:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d106      	bne.n	800bc50 <lwip_sock_make_addr+0x28>
 800bc42:	4b2b      	ldr	r3, [pc, #172]	; (800bcf0 <lwip_sock_make_addr+0xc8>)
 800bc44:	f240 4207 	movw	r2, #1031	; 0x407
 800bc48:	492a      	ldr	r1, [pc, #168]	; (800bcf4 <lwip_sock_make_addr+0xcc>)
 800bc4a:	482b      	ldr	r0, [pc, #172]	; (800bcf8 <lwip_sock_make_addr+0xd0>)
 800bc4c:	f00d f97e 	bl	8018f4c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d106      	bne.n	800bc64 <lwip_sock_make_addr+0x3c>
 800bc56:	4b26      	ldr	r3, [pc, #152]	; (800bcf0 <lwip_sock_make_addr+0xc8>)
 800bc58:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800bc5c:	4927      	ldr	r1, [pc, #156]	; (800bcfc <lwip_sock_make_addr+0xd4>)
 800bc5e:	4826      	ldr	r0, [pc, #152]	; (800bcf8 <lwip_sock_make_addr+0xd0>)
 800bc60:	f00d f974 	bl	8018f4c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800bc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d106      	bne.n	800bc78 <lwip_sock_make_addr+0x50>
 800bc6a:	4b21      	ldr	r3, [pc, #132]	; (800bcf0 <lwip_sock_make_addr+0xc8>)
 800bc6c:	f240 4209 	movw	r2, #1033	; 0x409
 800bc70:	4923      	ldr	r1, [pc, #140]	; (800bd00 <lwip_sock_make_addr+0xd8>)
 800bc72:	4821      	ldr	r0, [pc, #132]	; (800bcf8 <lwip_sock_make_addr+0xd0>)
 800bc74:	f00d f96a 	bl	8018f4c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800bc78:	f107 0314 	add.w	r3, r7, #20
 800bc7c:	2210      	movs	r2, #16
 800bc7e:	701a      	strb	r2, [r3, #0]
 800bc80:	f107 0314 	add.w	r3, r7, #20
 800bc84:	2202      	movs	r2, #2
 800bc86:	705a      	strb	r2, [r3, #1]
 800bc88:	f107 0414 	add.w	r4, r7, #20
 800bc8c:	88fb      	ldrh	r3, [r7, #6]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f003 f996 	bl	800efc0 <lwip_htons>
 800bc94:	4603      	mov	r3, r0
 800bc96:	8063      	strh	r3, [r4, #2]
 800bc98:	f107 0314 	add.w	r3, r7, #20
 800bc9c:	68ba      	ldr	r2, [r7, #8]
 800bc9e:	6812      	ldr	r2, [r2, #0]
 800bca0:	605a      	str	r2, [r3, #4]
 800bca2:	f107 0314 	add.w	r3, r7, #20
 800bca6:	3308      	adds	r3, #8
 800bca8:	2208      	movs	r2, #8
 800bcaa:	2100      	movs	r1, #0
 800bcac:	4618      	mov	r0, r3
 800bcae:	f00d f945 	bl	8018f3c <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800bcb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	7d3a      	ldrb	r2, [r7, #20]
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d202      	bcs.n	800bcc2 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	627b      	str	r3, [r7, #36]	; 0x24
 800bcc0:	e008      	b.n	800bcd4 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800bcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	7d3a      	ldrb	r2, [r7, #20]
 800bcc8:	4293      	cmp	r3, r2
 800bcca:	d903      	bls.n	800bcd4 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800bccc:	7d3b      	ldrb	r3, [r7, #20]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd2:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800bcd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	f107 0314 	add.w	r3, r7, #20
 800bcdc:	4619      	mov	r1, r3
 800bcde:	6838      	ldr	r0, [r7, #0]
 800bce0:	f00d f904 	bl	8018eec <memcpy>
  return truncated;
 800bce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	372c      	adds	r7, #44	; 0x2c
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd90      	pop	{r4, r7, pc}
 800bcee:	bf00      	nop
 800bcf0:	0801b98c 	.word	0x0801b98c
 800bcf4:	0801bb40 	.word	0x0801bb40
 800bcf8:	0801ba24 	.word	0x0801ba24
 800bcfc:	0801bb54 	.word	0x0801bb54
 800bd00:	0801bb64 	.word	0x0801bb64

0800bd04 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b088      	sub	sp, #32
 800bd08:	af02      	add	r7, sp, #8
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
 800bd10:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d101      	bne.n	800bd1c <lwip_recv_tcp_from+0x18>
    return 0;
 800bd18:	2300      	movs	r3, #0
 800bd1a:	e021      	b.n	800bd60 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d01d      	beq.n	800bd5e <lwip_recv_tcp_from+0x5a>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d01a      	beq.n	800bd5e <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6818      	ldr	r0, [r3, #0]
 800bd2c:	f107 0216 	add.w	r2, r7, #22
 800bd30:	f107 0110 	add.w	r1, r7, #16
 800bd34:	2300      	movs	r3, #0
 800bd36:	f7fc fed7 	bl	8008ae8 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d00e      	beq.n	800bd5e <lwip_recv_tcp_from+0x5a>
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00b      	beq.n	800bd5e <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6818      	ldr	r0, [r3, #0]
 800bd4a:	8afa      	ldrh	r2, [r7, #22]
 800bd4c:	f107 0110 	add.w	r1, r7, #16
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	f7ff ff67 	bl	800bc28 <lwip_sock_make_addr>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	e000      	b.n	800bd60 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800bd5e:	2300      	movs	r3, #0
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3718      	adds	r7, #24
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800bd68:	b590      	push	{r4, r7, lr}
 800bd6a:	b08d      	sub	sp, #52	; 0x34
 800bd6c:	af02      	add	r7, sp, #8
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
 800bd74:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d10d      	bne.n	800bd9a <lwip_recvfrom_udp_raw+0x32>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	68db      	ldr	r3, [r3, #12]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	dd09      	ble.n	800bd9a <lwip_recvfrom_udp_raw+0x32>
 800bd86:	4b5e      	ldr	r3, [pc, #376]	; (800bf00 <lwip_recvfrom_udp_raw+0x198>)
 800bd88:	f240 4249 	movw	r2, #1097	; 0x449
 800bd8c:	495d      	ldr	r1, [pc, #372]	; (800bf04 <lwip_recvfrom_udp_raw+0x19c>)
 800bd8e:	485e      	ldr	r0, [pc, #376]	; (800bf08 <lwip_recvfrom_udp_raw+0x1a0>)
 800bd90:	f00d f8dc 	bl	8018f4c <iprintf>
 800bd94:	f06f 030f 	mvn.w	r3, #15
 800bd98:	e0ad      	b.n	800bef6 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	f003 0308 	and.w	r3, r3, #8
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d003      	beq.n	800bdac <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800bda4:	2304      	movs	r3, #4
 800bda6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bdaa:	e002      	b.n	800bdb2 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800bdac:	2300      	movs	r3, #0
 800bdae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d11e      	bne.n	800bdfc <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bdc6:	f107 0110 	add.w	r1, r7, #16
 800bdca:	4618      	mov	r0, r3
 800bdcc:	f7fd fa06 	bl	80091dc <netconn_recv_udp_raw_netbuf_flags>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800bdd4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800bddc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bde0:	e089      	b.n	800bef6 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d106      	bne.n	800bdf6 <lwip_recvfrom_udp_raw+0x8e>
 800bde8:	4b45      	ldr	r3, [pc, #276]	; (800bf00 <lwip_recvfrom_udp_raw+0x198>)
 800bdea:	f240 425e 	movw	r2, #1118	; 0x45e
 800bdee:	4947      	ldr	r1, [pc, #284]	; (800bf0c <lwip_recvfrom_udp_raw+0x1a4>)
 800bdf0:	4845      	ldr	r0, [pc, #276]	; (800bf08 <lwip_recvfrom_udp_raw+0x1a0>)
 800bdf2:	f00d f8ab 	bl	8018f4c <iprintf>
    sock->lastdata.netbuf = buf;
 800bdf6:	693a      	ldr	r2, [r7, #16]
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800bdfc:	693b      	ldr	r3, [r7, #16]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	891b      	ldrh	r3, [r3, #8]
 800be02:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800be04:	2300      	movs	r3, #0
 800be06:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800be08:	2300      	movs	r3, #0
 800be0a:	61fb      	str	r3, [r7, #28]
 800be0c:	e029      	b.n	800be62 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800be0e:	8b3a      	ldrh	r2, [r7, #24]
 800be10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be12:	1ad3      	subs	r3, r2, r3
 800be14:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	689a      	ldr	r2, [r3, #8]
 800be1a:	69fb      	ldr	r3, [r7, #28]
 800be1c:	00db      	lsls	r3, r3, #3
 800be1e:	4413      	add	r3, r2
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	8afb      	ldrh	r3, [r7, #22]
 800be24:	429a      	cmp	r2, r3
 800be26:	d902      	bls.n	800be2e <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800be28:	8afb      	ldrh	r3, [r7, #22]
 800be2a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800be2c:	e006      	b.n	800be3c <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	689a      	ldr	r2, [r3, #8]
 800be32:	69fb      	ldr	r3, [r7, #28]
 800be34:	00db      	lsls	r3, r3, #3
 800be36:	4413      	add	r3, r2
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	6818      	ldr	r0, [r3, #0]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	689a      	ldr	r2, [r3, #8]
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	00db      	lsls	r3, r3, #3
 800be48:	4413      	add	r3, r2
 800be4a:	6819      	ldr	r1, [r3, #0]
 800be4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800be50:	f005 fea0 	bl	8011b94 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800be54:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800be56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800be58:	4413      	add	r3, r2
 800be5a:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	3301      	adds	r3, #1
 800be60:	61fb      	str	r3, [r7, #28]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	68db      	ldr	r3, [r3, #12]
 800be66:	69fa      	ldr	r2, [r7, #28]
 800be68:	429a      	cmp	r2, r3
 800be6a:	da03      	bge.n	800be74 <lwip_recvfrom_udp_raw+0x10c>
 800be6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800be6e:	8b3b      	ldrh	r3, [r7, #24]
 800be70:	429a      	cmp	r2, r3
 800be72:	d3cc      	bcc.n	800be0e <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d01a      	beq.n	800beb2 <lwip_recvfrom_udp_raw+0x14a>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d016      	beq.n	800beb2 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d012      	beq.n	800beb2 <lwip_recvfrom_udp_raw+0x14a>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d00e      	beq.n	800beb2 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	6818      	ldr	r0, [r3, #0]
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	f103 0108 	add.w	r1, r3, #8
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	3304      	adds	r3, #4
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	4623      	mov	r3, r4
 800beae:	f7ff febb 	bl	800bc28 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2200      	movs	r2, #0
 800beb6:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d007      	beq.n	800bed0 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800bec0:	2300      	movs	r3, #0
 800bec2:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800bec4:	7d7b      	ldrb	r3, [r7, #21]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d102      	bne.n	800bed0 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d106      	bne.n	800bee8 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	2200      	movs	r2, #0
 800bede:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7ff fa70 	bl	800b3c8 <netbuf_delete>
  }
  if (datagram_len) {
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d002      	beq.n	800bef4 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	8b3a      	ldrh	r2, [r7, #24]
 800bef2:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	372c      	adds	r7, #44	; 0x2c
 800befa:	46bd      	mov	sp, r7
 800befc:	bd90      	pop	{r4, r7, pc}
 800befe:	bf00      	nop
 800bf00:	0801b98c 	.word	0x0801b98c
 800bf04:	0801bb74 	.word	0x0801bb74
 800bf08:	0801ba24 	.word	0x0801ba24
 800bf0c:	0801bba0 	.word	0x0801bba0

0800bf10 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b096      	sub	sp, #88	; 0x58
 800bf14:	af02      	add	r7, sp, #8
 800bf16:	60f8      	str	r0, [r7, #12]
 800bf18:	60b9      	str	r1, [r7, #8]
 800bf1a:	607a      	str	r2, [r7, #4]
 800bf1c:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f7ff fbb8 	bl	800b694 <get_socket>
 800bf24:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800bf26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d102      	bne.n	800bf32 <lwip_recvfrom+0x22>
    return -1;
 800bf2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf30:	e078      	b.n	800c024 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800bf32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf3c:	2b10      	cmp	r3, #16
 800bf3e:	d112      	bne.n	800bf66 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	687a      	ldr	r2, [r7, #4]
 800bf44:	68b9      	ldr	r1, [r7, #8]
 800bf46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bf48:	f7ff fd5e 	bl	800ba08 <lwip_recv_tcp>
 800bf4c:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800bf4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf50:	9301      	str	r3, [sp, #4]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	4b35      	ldr	r3, [pc, #212]	; (800c02c <lwip_recvfrom+0x11c>)
 800bf58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bf5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bf5c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bf5e:	f7ff fed1 	bl	800bd04 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800bf62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf64:	e05e      	b.n	800c024 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800bf66:	2300      	movs	r3, #0
 800bf68:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800bf7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bf82:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800bf84:	2301      	movs	r3, #1
 800bf86:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800bf88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf8a:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800bf8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d002      	beq.n	800bf98 <lwip_recvfrom+0x88>
 800bf92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	e000      	b.n	800bf9a <lwip_recvfrom+0x8a>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800bf9c:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800bfa0:	f107 0214 	add.w	r2, r7, #20
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	9300      	str	r3, [sp, #0]
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	6839      	ldr	r1, [r7, #0]
 800bfac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bfae:	f7ff fedb 	bl	800bd68 <lwip_recvfrom_udp_raw>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800bfb8:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d00e      	beq.n	800bfde <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800bfc0:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f7ff f9e1 	bl	800b38c <err_to_errno>
 800bfca:	63f8      	str	r0, [r7, #60]	; 0x3c
 800bfcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d002      	beq.n	800bfd8 <lwip_recvfrom+0xc8>
 800bfd2:	4a17      	ldr	r2, [pc, #92]	; (800c030 <lwip_recvfrom+0x120>)
 800bfd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfd6:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800bfd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bfdc:	e022      	b.n	800c024 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800bfde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bfe0:	461a      	mov	r2, r3
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	bf28      	it	cs
 800bfe8:	4613      	movcs	r3, r2
 800bfea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d206      	bcs.n	800c000 <lwip_recvfrom+0xf0>
 800bff2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bff4:	461a      	mov	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	4293      	cmp	r3, r2
 800bffa:	bf28      	it	cs
 800bffc:	4613      	movcs	r3, r2
 800bffe:	e001      	b.n	800c004 <lwip_recvfrom+0xf4>
 800c000:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c004:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800c006:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800c00c:	69ba      	ldr	r2, [r7, #24]
 800c00e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c010:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800c012:	2300      	movs	r3, #0
 800c014:	643b      	str	r3, [r7, #64]	; 0x40
 800c016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d002      	beq.n	800c022 <lwip_recvfrom+0x112>
 800c01c:	4a04      	ldr	r2, [pc, #16]	; (800c030 <lwip_recvfrom+0x120>)
 800c01e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c020:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800c022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800c024:	4618      	mov	r0, r3
 800c026:	3750      	adds	r7, #80	; 0x50
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	0801bbac 	.word	0x0801bbac
 800c030:	2400b2c0 	.word	0x2400b2c0

0800c034 <lwip_read>:

ssize_t
lwip_read(int s, void *mem, size_t len)
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b086      	sub	sp, #24
 800c038:	af02      	add	r7, sp, #8
 800c03a:	60f8      	str	r0, [r7, #12]
 800c03c:	60b9      	str	r1, [r7, #8]
 800c03e:	607a      	str	r2, [r7, #4]
  return lwip_recvfrom(s, mem, len, 0, NULL, NULL);
 800c040:	2300      	movs	r3, #0
 800c042:	9301      	str	r3, [sp, #4]
 800c044:	2300      	movs	r3, #0
 800c046:	9300      	str	r3, [sp, #0]
 800c048:	2300      	movs	r3, #0
 800c04a:	687a      	ldr	r2, [r7, #4]
 800c04c:	68b9      	ldr	r1, [r7, #8]
 800c04e:	68f8      	ldr	r0, [r7, #12]
 800c050:	f7ff ff5e 	bl	800bf10 <lwip_recvfrom>
 800c054:	4603      	mov	r3, r0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
	...

0800c060 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b08a      	sub	sp, #40	; 0x28
 800c064:	af02      	add	r7, sp, #8
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f7ff fb10 	bl	800b694 <get_socket>
 800c074:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800c076:	69fb      	ldr	r3, [r7, #28]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d102      	bne.n	800c082 <lwip_send+0x22>
    return -1;
 800c07c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c080:	e046      	b.n	800c110 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c08c:	2b10      	cmp	r3, #16
 800c08e:	d00b      	beq.n	800c0a8 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800c090:	2300      	movs	r3, #0
 800c092:	9301      	str	r3, [sp, #4]
 800c094:	2300      	movs	r3, #0
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	68b9      	ldr	r1, [r7, #8]
 800c09e:	68f8      	ldr	r0, [r7, #12]
 800c0a0:	f000 f83c 	bl	800c11c <lwip_sendto>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	e033      	b.n	800c110 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d001      	beq.n	800c0b6 <lwip_send+0x56>
 800c0b2:	2203      	movs	r2, #3
 800c0b4:	e000      	b.n	800c0b8 <lwip_send+0x58>
 800c0b6:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	105b      	asrs	r3, r3, #1
 800c0bc:	b25b      	sxtb	r3, r3
 800c0be:	f003 0304 	and.w	r3, r3, #4
 800c0c2:	b25b      	sxtb	r3, r3
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800c0c8:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	6818      	ldr	r0, [r3, #0]
 800c0d2:	7efa      	ldrb	r2, [r7, #27]
 800c0d4:	f107 0310 	add.w	r3, r7, #16
 800c0d8:	9300      	str	r3, [sp, #0]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	68b9      	ldr	r1, [r7, #8]
 800c0e0:	f7fd f950 	bl	8009384 <netconn_write_partly>
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800c0e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7ff f94d 	bl	800b38c <err_to_errno>
 800c0f2:	6178      	str	r0, [r7, #20]
 800c0f4:	697b      	ldr	r3, [r7, #20]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d002      	beq.n	800c100 <lwip_send+0xa0>
 800c0fa:	4a07      	ldr	r2, [pc, #28]	; (800c118 <lwip_send+0xb8>)
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800c100:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d101      	bne.n	800c10c <lwip_send+0xac>
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	e001      	b.n	800c110 <lwip_send+0xb0>
 800c10c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c110:	4618      	mov	r0, r3
 800c112:	3720      	adds	r7, #32
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	2400b2c0 	.word	0x2400b2c0

0800c11c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b08e      	sub	sp, #56	; 0x38
 800c120:	af00      	add	r7, sp, #0
 800c122:	60f8      	str	r0, [r7, #12]
 800c124:	60b9      	str	r1, [r7, #8]
 800c126:	607a      	str	r2, [r7, #4]
 800c128:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800c12a:	68f8      	ldr	r0, [r7, #12]
 800c12c:	f7ff fab2 	bl	800b694 <get_socket>
 800c130:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800c132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c134:	2b00      	cmp	r3, #0
 800c136:	d102      	bne.n	800c13e <lwip_sendto+0x22>
    return -1;
 800c138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c13c:	e093      	b.n	800c266 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c148:	2b10      	cmp	r3, #16
 800c14a:	d107      	bne.n	800c15c <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	68b9      	ldr	r1, [r7, #8]
 800c152:	68f8      	ldr	r0, [r7, #12]
 800c154:	f7ff ff84 	bl	800c060 <lwip_send>
 800c158:	4603      	mov	r3, r0
 800c15a:	e084      	b.n	800c266 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c162:	d30a      	bcc.n	800c17a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800c164:	235a      	movs	r3, #90	; 0x5a
 800c166:	623b      	str	r3, [r7, #32]
 800c168:	6a3b      	ldr	r3, [r7, #32]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d002      	beq.n	800c174 <lwip_sendto+0x58>
 800c16e:	4a40      	ldr	r2, [pc, #256]	; (800c270 <lwip_sendto+0x154>)
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800c174:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c178:	e075      	b.n	800c266 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800c17e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c180:	2b00      	cmp	r3, #0
 800c182:	d102      	bne.n	800c18a <lwip_sendto+0x6e>
 800c184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c186:	2b00      	cmp	r3, #0
 800c188:	d023      	beq.n	800c1d2 <lwip_sendto+0xb6>
 800c18a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c18c:	2b10      	cmp	r3, #16
 800c18e:	d10b      	bne.n	800c1a8 <lwip_sendto+0x8c>
 800c190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c192:	2b00      	cmp	r3, #0
 800c194:	d008      	beq.n	800c1a8 <lwip_sendto+0x8c>
 800c196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c198:	785b      	ldrb	r3, [r3, #1]
 800c19a:	2b02      	cmp	r3, #2
 800c19c:	d104      	bne.n	800c1a8 <lwip_sendto+0x8c>
 800c19e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1a0:	f003 0303 	and.w	r3, r3, #3
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d014      	beq.n	800c1d2 <lwip_sendto+0xb6>
 800c1a8:	4b32      	ldr	r3, [pc, #200]	; (800c274 <lwip_sendto+0x158>)
 800c1aa:	f240 6252 	movw	r2, #1618	; 0x652
 800c1ae:	4932      	ldr	r1, [pc, #200]	; (800c278 <lwip_sendto+0x15c>)
 800c1b0:	4832      	ldr	r0, [pc, #200]	; (800c27c <lwip_sendto+0x160>)
 800c1b2:	f00c fecb 	bl	8018f4c <iprintf>
 800c1b6:	f06f 000f 	mvn.w	r0, #15
 800c1ba:	f7ff f8e7 	bl	800b38c <err_to_errno>
 800c1be:	62b8      	str	r0, [r7, #40]	; 0x28
 800c1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d002      	beq.n	800c1cc <lwip_sendto+0xb0>
 800c1c6:	4a2a      	ldr	r2, [pc, #168]	; (800c270 <lwip_sendto+0x154>)
 800c1c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ca:	6013      	str	r3, [r2, #0]
 800c1cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1d0:	e049      	b.n	800c266 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	617b      	str	r3, [r7, #20]
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800c1da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00a      	beq.n	800c1f6 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800c1e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	61bb      	str	r3, [r7, #24]
 800c1e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1e8:	885b      	ldrh	r3, [r3, #2]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f002 fee8 	bl	800efc0 <lwip_htons>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	86bb      	strh	r3, [r7, #52]	; 0x34
 800c1f4:	e003      	b.n	800c1fe <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800c1fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c200:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800c202:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c204:	f107 0310 	add.w	r3, r7, #16
 800c208:	68b9      	ldr	r1, [r7, #8]
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7ff f924 	bl	800b458 <netbuf_ref>
 800c210:	4603      	mov	r3, r0
 800c212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800c216:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d10a      	bne.n	800c234 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800c21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f107 0210 	add.w	r2, r7, #16
 800c226:	4611      	mov	r1, r2
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fd f87d 	bl	8009328 <netconn_send>
 800c22e:	4603      	mov	r3, r0
 800c230:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800c234:	f107 0310 	add.w	r3, r7, #16
 800c238:	4618      	mov	r0, r3
 800c23a:	f7ff f8e5 	bl	800b408 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800c23e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c242:	4618      	mov	r0, r3
 800c244:	f7ff f8a2 	bl	800b38c <err_to_errno>
 800c248:	6278      	str	r0, [r7, #36]	; 0x24
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d002      	beq.n	800c256 <lwip_sendto+0x13a>
 800c250:	4a07      	ldr	r2, [pc, #28]	; (800c270 <lwip_sendto+0x154>)
 800c252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c254:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800c256:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d101      	bne.n	800c262 <lwip_sendto+0x146>
 800c25e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c260:	e001      	b.n	800c266 <lwip_sendto+0x14a>
 800c262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c266:	4618      	mov	r0, r3
 800c268:	3738      	adds	r7, #56	; 0x38
 800c26a:	46bd      	mov	sp, r7
 800c26c:	bd80      	pop	{r7, pc}
 800c26e:	bf00      	nop
 800c270:	2400b2c0 	.word	0x2400b2c0
 800c274:	0801b98c 	.word	0x0801b98c
 800c278:	0801bcb0 	.word	0x0801bcb0
 800c27c:	0801ba24 	.word	0x0801ba24

0800c280 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b086      	sub	sp, #24
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	2b03      	cmp	r3, #3
 800c290:	d009      	beq.n	800c2a6 <lwip_socket+0x26>
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	2b03      	cmp	r3, #3
 800c296:	dc23      	bgt.n	800c2e0 <lwip_socket+0x60>
 800c298:	68bb      	ldr	r3, [r7, #8]
 800c29a:	2b01      	cmp	r3, #1
 800c29c:	d019      	beq.n	800c2d2 <lwip_socket+0x52>
 800c29e:	68bb      	ldr	r3, [r7, #8]
 800c2a0:	2b02      	cmp	r3, #2
 800c2a2:	d009      	beq.n	800c2b8 <lwip_socket+0x38>
 800c2a4:	e01c      	b.n	800c2e0 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	b2db      	uxtb	r3, r3
 800c2aa:	4a22      	ldr	r2, [pc, #136]	; (800c334 <lwip_socket+0xb4>)
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	2040      	movs	r0, #64	; 0x40
 800c2b0:	f7fc fb60 	bl	8008974 <netconn_new_with_proto_and_callback>
 800c2b4:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c2b6:	e019      	b.n	800c2ec <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2b88      	cmp	r3, #136	; 0x88
 800c2bc:	d101      	bne.n	800c2c2 <lwip_socket+0x42>
 800c2be:	2321      	movs	r3, #33	; 0x21
 800c2c0:	e000      	b.n	800c2c4 <lwip_socket+0x44>
 800c2c2:	2320      	movs	r3, #32
 800c2c4:	4a1b      	ldr	r2, [pc, #108]	; (800c334 <lwip_socket+0xb4>)
 800c2c6:	2100      	movs	r1, #0
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	f7fc fb53 	bl	8008974 <netconn_new_with_proto_and_callback>
 800c2ce:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800c2d0:	e00c      	b.n	800c2ec <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800c2d2:	4a18      	ldr	r2, [pc, #96]	; (800c334 <lwip_socket+0xb4>)
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	2010      	movs	r0, #16
 800c2d8:	f7fc fb4c 	bl	8008974 <netconn_new_with_proto_and_callback>
 800c2dc:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800c2de:	e005      	b.n	800c2ec <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800c2e0:	4b15      	ldr	r3, [pc, #84]	; (800c338 <lwip_socket+0xb8>)
 800c2e2:	2216      	movs	r2, #22
 800c2e4:	601a      	str	r2, [r3, #0]
      return -1;
 800c2e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2ea:	e01e      	b.n	800c32a <lwip_socket+0xaa>
  }

  if (!conn) {
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d105      	bne.n	800c2fe <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800c2f2:	4b11      	ldr	r3, [pc, #68]	; (800c338 <lwip_socket+0xb8>)
 800c2f4:	2269      	movs	r2, #105	; 0x69
 800c2f6:	601a      	str	r2, [r3, #0]
    return -1;
 800c2f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2fc:	e015      	b.n	800c32a <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800c2fe:	2100      	movs	r1, #0
 800c300:	6978      	ldr	r0, [r7, #20]
 800c302:	f7ff f9df 	bl	800b6c4 <alloc_socket>
 800c306:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c30e:	d108      	bne.n	800c322 <lwip_socket+0xa2>
    netconn_delete(conn);
 800c310:	6978      	ldr	r0, [r7, #20]
 800c312:	f7fc fbcd 	bl	8008ab0 <netconn_delete>
    set_errno(ENFILE);
 800c316:	4b08      	ldr	r3, [pc, #32]	; (800c338 <lwip_socket+0xb8>)
 800c318:	2217      	movs	r2, #23
 800c31a:	601a      	str	r2, [r3, #0]
    return -1;
 800c31c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c320:	e003      	b.n	800c32a <lwip_socket+0xaa>
  }
  conn->socket = i;
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	693a      	ldr	r2, [r7, #16]
 800c326:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800c328:	693b      	ldr	r3, [r7, #16]
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3718      	adds	r7, #24
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	0800c3c5 	.word	0x0800c3c5
 800c338:	2400b2c0 	.word	0x2400b2c0

0800c33c <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b087      	sub	sp, #28
 800c340:	af00      	add	r7, sp, #0
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
 800c348:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c34a:	2300      	movs	r3, #0
 800c34c:	617b      	str	r3, [r7, #20]
 800c34e:	e02c      	b.n	800c3aa <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	695a      	ldr	r2, [r3, #20]
 800c354:	697b      	ldr	r3, [r7, #20]
 800c356:	00db      	lsls	r3, r3, #3
 800c358:	4413      	add	r3, r2
 800c35a:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	429a      	cmp	r2, r3
 800c364:	d11e      	bne.n	800c3a4 <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d009      	beq.n	800c380 <lwip_poll_should_wake+0x44>
 800c36c:	693b      	ldr	r3, [r7, #16]
 800c36e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c372:	b29b      	uxth	r3, r3
 800c374:	f003 0301 	and.w	r3, r3, #1
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d001      	beq.n	800c380 <lwip_poll_should_wake+0x44>
        return 1;
 800c37c:	2301      	movs	r3, #1
 800c37e:	e01a      	b.n	800c3b6 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d009      	beq.n	800c39a <lwip_poll_should_wake+0x5e>
 800c386:	693b      	ldr	r3, [r7, #16]
 800c388:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	f003 0302 	and.w	r3, r3, #2
 800c392:	2b00      	cmp	r3, #0
 800c394:	d001      	beq.n	800c39a <lwip_poll_should_wake+0x5e>
        return 1;
 800c396:	2301      	movs	r3, #1
 800c398:	e00d      	b.n	800c3b6 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800c39a:	6a3b      	ldr	r3, [r7, #32]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d001      	beq.n	800c3a4 <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e008      	b.n	800c3b6 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	617b      	str	r3, [r7, #20]
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	699b      	ldr	r3, [r3, #24]
 800c3ae:	697a      	ldr	r2, [r7, #20]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d3cd      	bcc.n	800c350 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800c3b4:	2300      	movs	r3, #0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	371c      	adds	r7, #28
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c0:	4770      	bx	lr
	...

0800c3c4 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b08a      	sub	sp, #40	; 0x28
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	460b      	mov	r3, r1
 800c3ce:	70fb      	strb	r3, [r7, #3]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 80a4 	beq.w	800c524 <event_callback+0x160>
    s = conn->socket;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	699b      	ldr	r3, [r3, #24]
 800c3e0:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800c3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	da18      	bge.n	800c41a <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800c3e8:	f00c fce8 	bl	8018dbc <sys_arch_protect>
 800c3ec:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	699b      	ldr	r3, [r3, #24]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	da0b      	bge.n	800c40e <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800c3f6:	78fb      	ldrb	r3, [r7, #3]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d104      	bne.n	800c406 <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	699b      	ldr	r3, [r3, #24]
 800c400:	1e5a      	subs	r2, r3, #1
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800c406:	69f8      	ldr	r0, [r7, #28]
 800c408:	f00c fce6 	bl	8018dd8 <sys_arch_unprotect>
        return;
 800c40c:	e08d      	b.n	800c52a <event_callback+0x166>
      }
      s = conn->socket;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800c414:	69f8      	ldr	r0, [r7, #28]
 800c416:	f00c fcdf 	bl	8018dd8 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800c41a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c41c:	f7ff f93a 	bl	800b694 <get_socket>
 800c420:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d07f      	beq.n	800c528 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800c428:	2301      	movs	r3, #1
 800c42a:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800c42c:	f00c fcc6 	bl	8018dbc <sys_arch_protect>
 800c430:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800c432:	78fb      	ldrb	r3, [r7, #3]
 800c434:	2b04      	cmp	r3, #4
 800c436:	d83e      	bhi.n	800c4b6 <event_callback+0xf2>
 800c438:	a201      	add	r2, pc, #4	; (adr r2, 800c440 <event_callback+0x7c>)
 800c43a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c43e:	bf00      	nop
 800c440:	0800c455 	.word	0x0800c455
 800c444:	0800c477 	.word	0x0800c477
 800c448:	0800c48f 	.word	0x0800c48f
 800c44c:	0800c4a3 	.word	0x0800c4a3
 800c450:	0800c4af 	.word	0x0800c4af
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800c454:	69bb      	ldr	r3, [r7, #24]
 800c456:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	3301      	adds	r3, #1
 800c45e:	b29b      	uxth	r3, r3
 800c460:	b21a      	sxth	r2, r3
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800c466:	69bb      	ldr	r3, [r7, #24]
 800c468:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c46c:	2b01      	cmp	r3, #1
 800c46e:	dd2a      	ble.n	800c4c6 <event_callback+0x102>
        check_waiters = 0;
 800c470:	2300      	movs	r3, #0
 800c472:	623b      	str	r3, [r7, #32]
      }
      break;
 800c474:	e027      	b.n	800c4c6 <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800c476:	69bb      	ldr	r3, [r7, #24]
 800c478:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c47c:	b29b      	uxth	r3, r3
 800c47e:	3b01      	subs	r3, #1
 800c480:	b29b      	uxth	r3, r3
 800c482:	b21a      	sxth	r2, r3
 800c484:	69bb      	ldr	r3, [r7, #24]
 800c486:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	623b      	str	r3, [r7, #32]
      break;
 800c48c:	e01c      	b.n	800c4c8 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	895b      	ldrh	r3, [r3, #10]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d001      	beq.n	800c49a <event_callback+0xd6>
        check_waiters = 0;
 800c496:	2300      	movs	r3, #0
 800c498:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	2201      	movs	r2, #1
 800c49e:	815a      	strh	r2, [r3, #10]
      break;
 800c4a0:	e012      	b.n	800c4c8 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	623b      	str	r3, [r7, #32]
      break;
 800c4ac:	e00c      	b.n	800c4c8 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	819a      	strh	r2, [r3, #12]
      break;
 800c4b4:	e008      	b.n	800c4c8 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800c4b6:	4b1e      	ldr	r3, [pc, #120]	; (800c530 <event_callback+0x16c>)
 800c4b8:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800c4bc:	491d      	ldr	r1, [pc, #116]	; (800c534 <event_callback+0x170>)
 800c4be:	481e      	ldr	r0, [pc, #120]	; (800c538 <event_callback+0x174>)
 800c4c0:	f00c fd44 	bl	8018f4c <iprintf>
      break;
 800c4c4:	e000      	b.n	800c4c8 <event_callback+0x104>
      break;
 800c4c6:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	7b9b      	ldrb	r3, [r3, #14]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d025      	beq.n	800c51c <event_callback+0x158>
 800c4d0:	6a3b      	ldr	r3, [r7, #32]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d022      	beq.n	800c51c <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	bfcc      	ite	gt
 800c4e0:	2301      	movgt	r3, #1
 800c4e2:	2300      	movle	r3, #0
 800c4e4:	b2db      	uxtb	r3, r3
 800c4e6:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800c4e8:	69bb      	ldr	r3, [r7, #24]
 800c4ea:	895b      	ldrh	r3, [r3, #10]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	bf14      	ite	ne
 800c4f0:	2301      	movne	r3, #1
 800c4f2:	2300      	moveq	r3, #0
 800c4f4:	b2db      	uxtb	r3, r3
 800c4f6:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800c4f8:	69bb      	ldr	r3, [r7, #24]
 800c4fa:	899b      	ldrh	r3, [r3, #12]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	bf14      	ite	ne
 800c500:	2301      	movne	r3, #1
 800c502:	2300      	moveq	r3, #0
 800c504:	b2db      	uxtb	r3, r3
 800c506:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800c508:	69f8      	ldr	r0, [r7, #28]
 800c50a:	f00c fc65 	bl	8018dd8 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	693a      	ldr	r2, [r7, #16]
 800c512:	6979      	ldr	r1, [r7, #20]
 800c514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c516:	f000 f811 	bl	800c53c <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800c51a:	e006      	b.n	800c52a <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800c51c:	69f8      	ldr	r0, [r7, #28]
 800c51e:	f00c fc5b 	bl	8018dd8 <sys_arch_unprotect>
 800c522:	e002      	b.n	800c52a <event_callback+0x166>
    return;
 800c524:	bf00      	nop
 800c526:	e000      	b.n	800c52a <event_callback+0x166>
      return;
 800c528:	bf00      	nop
  }
  done_socket(sock);
}
 800c52a:	3728      	adds	r7, #40	; 0x28
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	0801b98c 	.word	0x0801b98c
 800c534:	0801bd4c 	.word	0x0801bd4c
 800c538:	0801ba24 	.word	0x0801ba24

0800c53c <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b088      	sub	sp, #32
 800c540:	af02      	add	r7, sp, #8
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	607a      	str	r2, [r7, #4]
 800c548:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c54a:	4b3e      	ldr	r3, [pc, #248]	; (800c644 <select_check_waiters+0x108>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	617b      	str	r3, [r7, #20]
 800c550:	e06f      	b.n	800c632 <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	69db      	ldr	r3, [r3, #28]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d168      	bne.n	800c62c <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	695b      	ldr	r3, [r3, #20]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d009      	beq.n	800c57a <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800c566:	683b      	ldr	r3, [r7, #0]
 800c568:	9300      	str	r3, [sp, #0]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	68ba      	ldr	r2, [r7, #8]
 800c56e:	68f9      	ldr	r1, [r7, #12]
 800c570:	6978      	ldr	r0, [r7, #20]
 800c572:	f7ff fee3 	bl	800c33c <lwip_poll_should_wake>
 800c576:	6138      	str	r0, [r7, #16]
 800c578:	e04d      	b.n	800c616 <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d014      	beq.n	800c5aa <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d010      	beq.n	800c5aa <select_check_waiters+0x6e>
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	689b      	ldr	r3, [r3, #8]
 800c58c:	68fa      	ldr	r2, [r7, #12]
 800c58e:	0952      	lsrs	r2, r2, #5
 800c590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	f002 021f 	and.w	r2, r2, #31
 800c59a:	2101      	movs	r1, #1
 800c59c:	fa01 f202 	lsl.w	r2, r1, r2
 800c5a0:	4013      	ands	r3, r2
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d001      	beq.n	800c5aa <select_check_waiters+0x6e>
            do_signal = 1;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d017      	beq.n	800c5e0 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d114      	bne.n	800c5e0 <select_check_waiters+0xa4>
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	68db      	ldr	r3, [r3, #12]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d010      	beq.n	800c5e0 <select_check_waiters+0xa4>
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	68db      	ldr	r3, [r3, #12]
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	0952      	lsrs	r2, r2, #5
 800c5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ca:	68fa      	ldr	r2, [r7, #12]
 800c5cc:	f002 021f 	and.w	r2, r2, #31
 800c5d0:	2101      	movs	r1, #1
 800c5d2:	fa01 f202 	lsl.w	r2, r1, r2
 800c5d6:	4013      	ands	r3, r2
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d001      	beq.n	800c5e0 <select_check_waiters+0xa4>
            do_signal = 1;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d017      	beq.n	800c616 <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d114      	bne.n	800c616 <select_check_waiters+0xda>
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d010      	beq.n	800c616 <select_check_waiters+0xda>
 800c5f4:	697b      	ldr	r3, [r7, #20]
 800c5f6:	691b      	ldr	r3, [r3, #16]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	0952      	lsrs	r2, r2, #5
 800c5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	f002 021f 	and.w	r2, r2, #31
 800c606:	2101      	movs	r1, #1
 800c608:	fa01 f202 	lsl.w	r2, r1, r2
 800c60c:	4013      	ands	r3, r2
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <select_check_waiters+0xda>
            do_signal = 1;
 800c612:	2301      	movs	r3, #1
 800c614:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d007      	beq.n	800c62c <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	2201      	movs	r2, #1
 800c620:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	3320      	adds	r3, #32
 800c626:	4618      	mov	r0, r3
 800c628:	f00c fb2e 	bl	8018c88 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	617b      	str	r3, [r7, #20]
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d18c      	bne.n	800c552 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800c638:	bf00      	nop
 800c63a:	bf00      	nop
 800c63c:	3718      	adds	r7, #24
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	24006bb8 	.word	0x24006bb8

0800c648 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800c652:	f00b fb71 	bl	8017d38 <sys_timeouts_sleeptime>
 800c656:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c65e:	d10b      	bne.n	800c678 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800c660:	4813      	ldr	r0, [pc, #76]	; (800c6b0 <tcpip_timeouts_mbox_fetch+0x68>)
 800c662:	f00c fb80 	bl	8018d66 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800c666:	2200      	movs	r2, #0
 800c668:	6839      	ldr	r1, [r7, #0]
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f00c fa3c 	bl	8018ae8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c670:	480f      	ldr	r0, [pc, #60]	; (800c6b0 <tcpip_timeouts_mbox_fetch+0x68>)
 800c672:	f00c fb69 	bl	8018d48 <sys_mutex_lock>
    return;
 800c676:	e018      	b.n	800c6aa <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d102      	bne.n	800c684 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800c67e:	f00b fb21 	bl	8017cc4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c682:	e7e6      	b.n	800c652 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800c684:	480a      	ldr	r0, [pc, #40]	; (800c6b0 <tcpip_timeouts_mbox_fetch+0x68>)
 800c686:	f00c fb6e 	bl	8018d66 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	6839      	ldr	r1, [r7, #0]
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f00c fa2a 	bl	8018ae8 <sys_arch_mbox_fetch>
 800c694:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800c696:	4806      	ldr	r0, [pc, #24]	; (800c6b0 <tcpip_timeouts_mbox_fetch+0x68>)
 800c698:	f00c fb56 	bl	8018d48 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6a2:	d102      	bne.n	800c6aa <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800c6a4:	f00b fb0e 	bl	8017cc4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800c6a8:	e7d3      	b.n	800c652 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	2400740c 	.word	0x2400740c

0800c6b4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800c6bc:	4810      	ldr	r0, [pc, #64]	; (800c700 <tcpip_thread+0x4c>)
 800c6be:	f00c fb43 	bl	8018d48 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800c6c2:	4b10      	ldr	r3, [pc, #64]	; (800c704 <tcpip_thread+0x50>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d005      	beq.n	800c6d6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800c6ca:	4b0e      	ldr	r3, [pc, #56]	; (800c704 <tcpip_thread+0x50>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a0e      	ldr	r2, [pc, #56]	; (800c708 <tcpip_thread+0x54>)
 800c6d0:	6812      	ldr	r2, [r2, #0]
 800c6d2:	4610      	mov	r0, r2
 800c6d4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c6d6:	f107 030c 	add.w	r3, r7, #12
 800c6da:	4619      	mov	r1, r3
 800c6dc:	480b      	ldr	r0, [pc, #44]	; (800c70c <tcpip_thread+0x58>)
 800c6de:	f7ff ffb3 	bl	800c648 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d106      	bne.n	800c6f6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c6e8:	4b09      	ldr	r3, [pc, #36]	; (800c710 <tcpip_thread+0x5c>)
 800c6ea:	2291      	movs	r2, #145	; 0x91
 800c6ec:	4909      	ldr	r1, [pc, #36]	; (800c714 <tcpip_thread+0x60>)
 800c6ee:	480a      	ldr	r0, [pc, #40]	; (800c718 <tcpip_thread+0x64>)
 800c6f0:	f00c fc2c 	bl	8018f4c <iprintf>
      continue;
 800c6f4:	e003      	b.n	800c6fe <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 f80f 	bl	800c71c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800c6fe:	e7ea      	b.n	800c6d6 <tcpip_thread+0x22>
 800c700:	2400740c 	.word	0x2400740c
 800c704:	24006bbc 	.word	0x24006bbc
 800c708:	24006bc0 	.word	0x24006bc0
 800c70c:	24006bc4 	.word	0x24006bc4
 800c710:	0801bda0 	.word	0x0801bda0
 800c714:	0801be14 	.word	0x0801be14
 800c718:	0801be34 	.word	0x0801be34

0800c71c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b082      	sub	sp, #8
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	2b02      	cmp	r3, #2
 800c72a:	d026      	beq.n	800c77a <tcpip_thread_handle_msg+0x5e>
 800c72c:	2b02      	cmp	r3, #2
 800c72e:	dc2b      	bgt.n	800c788 <tcpip_thread_handle_msg+0x6c>
 800c730:	2b00      	cmp	r3, #0
 800c732:	d002      	beq.n	800c73a <tcpip_thread_handle_msg+0x1e>
 800c734:	2b01      	cmp	r3, #1
 800c736:	d015      	beq.n	800c764 <tcpip_thread_handle_msg+0x48>
 800c738:	e026      	b.n	800c788 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	687a      	ldr	r2, [r7, #4]
 800c740:	6850      	ldr	r0, [r2, #4]
 800c742:	687a      	ldr	r2, [r7, #4]
 800c744:	6892      	ldr	r2, [r2, #8]
 800c746:	4611      	mov	r1, r2
 800c748:	4798      	blx	r3
 800c74a:	4603      	mov	r3, r0
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d004      	beq.n	800c75a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	685b      	ldr	r3, [r3, #4]
 800c754:	4618      	mov	r0, r3
 800c756:	f005 f817 	bl	8011788 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c75a:	6879      	ldr	r1, [r7, #4]
 800c75c:	2009      	movs	r0, #9
 800c75e:	f004 f999 	bl	8010a94 <memp_free>
      break;
 800c762:	e018      	b.n	800c796 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	685b      	ldr	r3, [r3, #4]
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	6892      	ldr	r2, [r2, #8]
 800c76c:	4610      	mov	r0, r2
 800c76e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c770:	6879      	ldr	r1, [r7, #4]
 800c772:	2008      	movs	r0, #8
 800c774:	f004 f98e 	bl	8010a94 <memp_free>
      break;
 800c778:	e00d      	b.n	800c796 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	6892      	ldr	r2, [r2, #8]
 800c782:	4610      	mov	r0, r2
 800c784:	4798      	blx	r3
      break;
 800c786:	e006      	b.n	800c796 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c788:	4b05      	ldr	r3, [pc, #20]	; (800c7a0 <tcpip_thread_handle_msg+0x84>)
 800c78a:	22cf      	movs	r2, #207	; 0xcf
 800c78c:	4905      	ldr	r1, [pc, #20]	; (800c7a4 <tcpip_thread_handle_msg+0x88>)
 800c78e:	4806      	ldr	r0, [pc, #24]	; (800c7a8 <tcpip_thread_handle_msg+0x8c>)
 800c790:	f00c fbdc 	bl	8018f4c <iprintf>
      break;
 800c794:	bf00      	nop
  }
}
 800c796:	bf00      	nop
 800c798:	3708      	adds	r7, #8
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	0801bda0 	.word	0x0801bda0
 800c7a4:	0801be14 	.word	0x0801be14
 800c7a8:	0801be34 	.word	0x0801be34

0800c7ac <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b086      	sub	sp, #24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800c7b8:	481a      	ldr	r0, [pc, #104]	; (800c824 <tcpip_inpkt+0x78>)
 800c7ba:	f00c f9f0 	bl	8018b9e <sys_mbox_valid>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d105      	bne.n	800c7d0 <tcpip_inpkt+0x24>
 800c7c4:	4b18      	ldr	r3, [pc, #96]	; (800c828 <tcpip_inpkt+0x7c>)
 800c7c6:	22fc      	movs	r2, #252	; 0xfc
 800c7c8:	4918      	ldr	r1, [pc, #96]	; (800c82c <tcpip_inpkt+0x80>)
 800c7ca:	4819      	ldr	r0, [pc, #100]	; (800c830 <tcpip_inpkt+0x84>)
 800c7cc:	f00c fbbe 	bl	8018f4c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c7d0:	2009      	movs	r0, #9
 800c7d2:	f004 f8e9 	bl	80109a8 <memp_malloc>
 800c7d6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c7d8:	697b      	ldr	r3, [r7, #20]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d102      	bne.n	800c7e4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c7de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c7e2:	e01a      	b.n	800c81a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	68fa      	ldr	r2, [r7, #12]
 800c7ee:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	68ba      	ldr	r2, [r7, #8]
 800c7f4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	687a      	ldr	r2, [r7, #4]
 800c7fa:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800c7fc:	6979      	ldr	r1, [r7, #20]
 800c7fe:	4809      	ldr	r0, [pc, #36]	; (800c824 <tcpip_inpkt+0x78>)
 800c800:	f00c f958 	bl	8018ab4 <sys_mbox_trypost>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d006      	beq.n	800c818 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c80a:	6979      	ldr	r1, [r7, #20]
 800c80c:	2009      	movs	r0, #9
 800c80e:	f004 f941 	bl	8010a94 <memp_free>
    return ERR_MEM;
 800c812:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c816:	e000      	b.n	800c81a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c818:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3718      	adds	r7, #24
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	24006bc4 	.word	0x24006bc4
 800c828:	0801bda0 	.word	0x0801bda0
 800c82c:	0801be5c 	.word	0x0801be5c
 800c830:	0801be34 	.word	0x0801be34

0800c834 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b082      	sub	sp, #8
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c844:	f003 0318 	and.w	r3, r3, #24
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d006      	beq.n	800c85a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c84c:	4a08      	ldr	r2, [pc, #32]	; (800c870 <tcpip_input+0x3c>)
 800c84e:	6839      	ldr	r1, [r7, #0]
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff ffab 	bl	800c7ac <tcpip_inpkt>
 800c856:	4603      	mov	r3, r0
 800c858:	e005      	b.n	800c866 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800c85a:	4a06      	ldr	r2, [pc, #24]	; (800c874 <tcpip_input+0x40>)
 800c85c:	6839      	ldr	r1, [r7, #0]
 800c85e:	6878      	ldr	r0, [r7, #4]
 800c860:	f7ff ffa4 	bl	800c7ac <tcpip_inpkt>
 800c864:	4603      	mov	r3, r0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3708      	adds	r7, #8
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	080188a9 	.word	0x080188a9
 800c874:	0800dc59 	.word	0x0800dc59

0800c878 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800c884:	4806      	ldr	r0, [pc, #24]	; (800c8a0 <tcpip_send_msg_wait_sem+0x28>)
 800c886:	f00c fa5f 	bl	8018d48 <sys_mutex_lock>
  fn(apimsg);
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	68b8      	ldr	r0, [r7, #8]
 800c88e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800c890:	4803      	ldr	r0, [pc, #12]	; (800c8a0 <tcpip_send_msg_wait_sem+0x28>)
 800c892:	f00c fa68 	bl	8018d66 <sys_mutex_unlock>
  return ERR_OK;
 800c896:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	2400740c 	.word	0x2400740c

0800c8a4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b084      	sub	sp, #16
 800c8a8:	af02      	add	r7, sp, #8
 800c8aa:	6078      	str	r0, [r7, #4]
 800c8ac:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c8ae:	f003 fbd4 	bl	801005a <lwip_init>

  tcpip_init_done = initfunc;
 800c8b2:	4a17      	ldr	r2, [pc, #92]	; (800c910 <tcpip_init+0x6c>)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c8b8:	4a16      	ldr	r2, [pc, #88]	; (800c914 <tcpip_init+0x70>)
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c8be:	2106      	movs	r1, #6
 800c8c0:	4815      	ldr	r0, [pc, #84]	; (800c918 <tcpip_init+0x74>)
 800c8c2:	f00c f8c7 	bl	8018a54 <sys_mbox_new>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d006      	beq.n	800c8da <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c8cc:	4b13      	ldr	r3, [pc, #76]	; (800c91c <tcpip_init+0x78>)
 800c8ce:	f240 2261 	movw	r2, #609	; 0x261
 800c8d2:	4913      	ldr	r1, [pc, #76]	; (800c920 <tcpip_init+0x7c>)
 800c8d4:	4813      	ldr	r0, [pc, #76]	; (800c924 <tcpip_init+0x80>)
 800c8d6:	f00c fb39 	bl	8018f4c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c8da:	4813      	ldr	r0, [pc, #76]	; (800c928 <tcpip_init+0x84>)
 800c8dc:	f00c fa1a 	bl	8018d14 <sys_mutex_new>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d006      	beq.n	800c8f4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c8e6:	4b0d      	ldr	r3, [pc, #52]	; (800c91c <tcpip_init+0x78>)
 800c8e8:	f240 2265 	movw	r2, #613	; 0x265
 800c8ec:	490f      	ldr	r1, [pc, #60]	; (800c92c <tcpip_init+0x88>)
 800c8ee:	480d      	ldr	r0, [pc, #52]	; (800c924 <tcpip_init+0x80>)
 800c8f0:	f00c fb2c 	bl	8018f4c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c8f4:	2302      	movs	r3, #2
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	490c      	ldr	r1, [pc, #48]	; (800c930 <tcpip_init+0x8c>)
 800c900:	480c      	ldr	r0, [pc, #48]	; (800c934 <tcpip_init+0x90>)
 800c902:	f00c fa3d 	bl	8018d80 <sys_thread_new>
}
 800c906:	bf00      	nop
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
 800c90e:	bf00      	nop
 800c910:	24006bbc 	.word	0x24006bbc
 800c914:	24006bc0 	.word	0x24006bc0
 800c918:	24006bc4 	.word	0x24006bc4
 800c91c:	0801bda0 	.word	0x0801bda0
 800c920:	0801be6c 	.word	0x0801be6c
 800c924:	0801be34 	.word	0x0801be34
 800c928:	2400740c 	.word	0x2400740c
 800c92c:	0801be90 	.word	0x0801be90
 800c930:	0800c6b5 	.word	0x0800c6b5
 800c934:	0801beb4 	.word	0x0801beb4

0800c938 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c940:	4915      	ldr	r1, [pc, #84]	; (800c998 <etharp_free_entry+0x60>)
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	4613      	mov	r3, r2
 800c946:	005b      	lsls	r3, r3, #1
 800c948:	4413      	add	r3, r2
 800c94a:	00db      	lsls	r3, r3, #3
 800c94c:	440b      	add	r3, r1
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d013      	beq.n	800c97c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c954:	4910      	ldr	r1, [pc, #64]	; (800c998 <etharp_free_entry+0x60>)
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	4613      	mov	r3, r2
 800c95a:	005b      	lsls	r3, r3, #1
 800c95c:	4413      	add	r3, r2
 800c95e:	00db      	lsls	r3, r3, #3
 800c960:	440b      	add	r3, r1
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	4618      	mov	r0, r3
 800c966:	f004 ff0f 	bl	8011788 <pbuf_free>
    arp_table[i].q = NULL;
 800c96a:	490b      	ldr	r1, [pc, #44]	; (800c998 <etharp_free_entry+0x60>)
 800c96c:	687a      	ldr	r2, [r7, #4]
 800c96e:	4613      	mov	r3, r2
 800c970:	005b      	lsls	r3, r3, #1
 800c972:	4413      	add	r3, r2
 800c974:	00db      	lsls	r3, r3, #3
 800c976:	440b      	add	r3, r1
 800c978:	2200      	movs	r2, #0
 800c97a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c97c:	4906      	ldr	r1, [pc, #24]	; (800c998 <etharp_free_entry+0x60>)
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	4613      	mov	r3, r2
 800c982:	005b      	lsls	r3, r3, #1
 800c984:	4413      	add	r3, r2
 800c986:	00db      	lsls	r3, r3, #3
 800c988:	440b      	add	r3, r1
 800c98a:	3314      	adds	r3, #20
 800c98c:	2200      	movs	r2, #0
 800c98e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c990:	bf00      	nop
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	24006bc8 	.word	0x24006bc8

0800c99c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	607b      	str	r3, [r7, #4]
 800c9a6:	e096      	b.n	800cad6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c9a8:	494f      	ldr	r1, [pc, #316]	; (800cae8 <etharp_tmr+0x14c>)
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	4613      	mov	r3, r2
 800c9ae:	005b      	lsls	r3, r3, #1
 800c9b0:	4413      	add	r3, r2
 800c9b2:	00db      	lsls	r3, r3, #3
 800c9b4:	440b      	add	r3, r1
 800c9b6:	3314      	adds	r3, #20
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800c9bc:	78fb      	ldrb	r3, [r7, #3]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	f000 8086 	beq.w	800cad0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800c9c4:	4948      	ldr	r1, [pc, #288]	; (800cae8 <etharp_tmr+0x14c>)
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	4613      	mov	r3, r2
 800c9ca:	005b      	lsls	r3, r3, #1
 800c9cc:	4413      	add	r3, r2
 800c9ce:	00db      	lsls	r3, r3, #3
 800c9d0:	440b      	add	r3, r1
 800c9d2:	3312      	adds	r3, #18
 800c9d4:	881b      	ldrh	r3, [r3, #0]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	b298      	uxth	r0, r3
 800c9da:	4943      	ldr	r1, [pc, #268]	; (800cae8 <etharp_tmr+0x14c>)
 800c9dc:	687a      	ldr	r2, [r7, #4]
 800c9de:	4613      	mov	r3, r2
 800c9e0:	005b      	lsls	r3, r3, #1
 800c9e2:	4413      	add	r3, r2
 800c9e4:	00db      	lsls	r3, r3, #3
 800c9e6:	440b      	add	r3, r1
 800c9e8:	3312      	adds	r3, #18
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c9ee:	493e      	ldr	r1, [pc, #248]	; (800cae8 <etharp_tmr+0x14c>)
 800c9f0:	687a      	ldr	r2, [r7, #4]
 800c9f2:	4613      	mov	r3, r2
 800c9f4:	005b      	lsls	r3, r3, #1
 800c9f6:	4413      	add	r3, r2
 800c9f8:	00db      	lsls	r3, r3, #3
 800c9fa:	440b      	add	r3, r1
 800c9fc:	3312      	adds	r3, #18
 800c9fe:	881b      	ldrh	r3, [r3, #0]
 800ca00:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800ca04:	d215      	bcs.n	800ca32 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ca06:	4938      	ldr	r1, [pc, #224]	; (800cae8 <etharp_tmr+0x14c>)
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	005b      	lsls	r3, r3, #1
 800ca0e:	4413      	add	r3, r2
 800ca10:	00db      	lsls	r3, r3, #3
 800ca12:	440b      	add	r3, r1
 800ca14:	3314      	adds	r3, #20
 800ca16:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d10e      	bne.n	800ca3a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800ca1c:	4932      	ldr	r1, [pc, #200]	; (800cae8 <etharp_tmr+0x14c>)
 800ca1e:	687a      	ldr	r2, [r7, #4]
 800ca20:	4613      	mov	r3, r2
 800ca22:	005b      	lsls	r3, r3, #1
 800ca24:	4413      	add	r3, r2
 800ca26:	00db      	lsls	r3, r3, #3
 800ca28:	440b      	add	r3, r1
 800ca2a:	3312      	adds	r3, #18
 800ca2c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800ca2e:	2b04      	cmp	r3, #4
 800ca30:	d903      	bls.n	800ca3a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f7ff ff80 	bl	800c938 <etharp_free_entry>
 800ca38:	e04a      	b.n	800cad0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800ca3a:	492b      	ldr	r1, [pc, #172]	; (800cae8 <etharp_tmr+0x14c>)
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	4613      	mov	r3, r2
 800ca40:	005b      	lsls	r3, r3, #1
 800ca42:	4413      	add	r3, r2
 800ca44:	00db      	lsls	r3, r3, #3
 800ca46:	440b      	add	r3, r1
 800ca48:	3314      	adds	r3, #20
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	2b03      	cmp	r3, #3
 800ca4e:	d10a      	bne.n	800ca66 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800ca50:	4925      	ldr	r1, [pc, #148]	; (800cae8 <etharp_tmr+0x14c>)
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	4613      	mov	r3, r2
 800ca56:	005b      	lsls	r3, r3, #1
 800ca58:	4413      	add	r3, r2
 800ca5a:	00db      	lsls	r3, r3, #3
 800ca5c:	440b      	add	r3, r1
 800ca5e:	3314      	adds	r3, #20
 800ca60:	2204      	movs	r2, #4
 800ca62:	701a      	strb	r2, [r3, #0]
 800ca64:	e034      	b.n	800cad0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800ca66:	4920      	ldr	r1, [pc, #128]	; (800cae8 <etharp_tmr+0x14c>)
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	4613      	mov	r3, r2
 800ca6c:	005b      	lsls	r3, r3, #1
 800ca6e:	4413      	add	r3, r2
 800ca70:	00db      	lsls	r3, r3, #3
 800ca72:	440b      	add	r3, r1
 800ca74:	3314      	adds	r3, #20
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	2b04      	cmp	r3, #4
 800ca7a:	d10a      	bne.n	800ca92 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800ca7c:	491a      	ldr	r1, [pc, #104]	; (800cae8 <etharp_tmr+0x14c>)
 800ca7e:	687a      	ldr	r2, [r7, #4]
 800ca80:	4613      	mov	r3, r2
 800ca82:	005b      	lsls	r3, r3, #1
 800ca84:	4413      	add	r3, r2
 800ca86:	00db      	lsls	r3, r3, #3
 800ca88:	440b      	add	r3, r1
 800ca8a:	3314      	adds	r3, #20
 800ca8c:	2202      	movs	r2, #2
 800ca8e:	701a      	strb	r2, [r3, #0]
 800ca90:	e01e      	b.n	800cad0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800ca92:	4915      	ldr	r1, [pc, #84]	; (800cae8 <etharp_tmr+0x14c>)
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	4613      	mov	r3, r2
 800ca98:	005b      	lsls	r3, r3, #1
 800ca9a:	4413      	add	r3, r2
 800ca9c:	00db      	lsls	r3, r3, #3
 800ca9e:	440b      	add	r3, r1
 800caa0:	3314      	adds	r3, #20
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d113      	bne.n	800cad0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800caa8:	490f      	ldr	r1, [pc, #60]	; (800cae8 <etharp_tmr+0x14c>)
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	4613      	mov	r3, r2
 800caae:	005b      	lsls	r3, r3, #1
 800cab0:	4413      	add	r3, r2
 800cab2:	00db      	lsls	r3, r3, #3
 800cab4:	440b      	add	r3, r1
 800cab6:	3308      	adds	r3, #8
 800cab8:	6818      	ldr	r0, [r3, #0]
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	4613      	mov	r3, r2
 800cabe:	005b      	lsls	r3, r3, #1
 800cac0:	4413      	add	r3, r2
 800cac2:	00db      	lsls	r3, r3, #3
 800cac4:	4a08      	ldr	r2, [pc, #32]	; (800cae8 <etharp_tmr+0x14c>)
 800cac6:	4413      	add	r3, r2
 800cac8:	3304      	adds	r3, #4
 800caca:	4619      	mov	r1, r3
 800cacc:	f000 fe6e 	bl	800d7ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	3301      	adds	r3, #1
 800cad4:	607b      	str	r3, [r7, #4]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2b09      	cmp	r3, #9
 800cada:	f77f af65 	ble.w	800c9a8 <etharp_tmr+0xc>
      }
    }
  }
}
 800cade:	bf00      	nop
 800cae0:	bf00      	nop
 800cae2:	3708      	adds	r7, #8
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	24006bc8 	.word	0x24006bc8

0800caec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b08a      	sub	sp, #40	; 0x28
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	460b      	mov	r3, r1
 800caf6:	607a      	str	r2, [r7, #4]
 800caf8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800cafa:	230a      	movs	r3, #10
 800cafc:	84fb      	strh	r3, [r7, #38]	; 0x26
 800cafe:	230a      	movs	r3, #10
 800cb00:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800cb02:	230a      	movs	r3, #10
 800cb04:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800cb06:	2300      	movs	r3, #0
 800cb08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800cb0a:	230a      	movs	r3, #10
 800cb0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800cb0e:	2300      	movs	r3, #0
 800cb10:	83bb      	strh	r3, [r7, #28]
 800cb12:	2300      	movs	r3, #0
 800cb14:	837b      	strh	r3, [r7, #26]
 800cb16:	2300      	movs	r3, #0
 800cb18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	843b      	strh	r3, [r7, #32]
 800cb1e:	e0ae      	b.n	800cc7e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800cb20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb24:	49a6      	ldr	r1, [pc, #664]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cb26:	4613      	mov	r3, r2
 800cb28:	005b      	lsls	r3, r3, #1
 800cb2a:	4413      	add	r3, r2
 800cb2c:	00db      	lsls	r3, r3, #3
 800cb2e:	440b      	add	r3, r1
 800cb30:	3314      	adds	r3, #20
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800cb36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cb3a:	2b0a      	cmp	r3, #10
 800cb3c:	d105      	bne.n	800cb4a <etharp_find_entry+0x5e>
 800cb3e:	7dfb      	ldrb	r3, [r7, #23]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d102      	bne.n	800cb4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800cb44:	8c3b      	ldrh	r3, [r7, #32]
 800cb46:	847b      	strh	r3, [r7, #34]	; 0x22
 800cb48:	e095      	b.n	800cc76 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800cb4a:	7dfb      	ldrb	r3, [r7, #23]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	f000 8092 	beq.w	800cc76 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800cb52:	7dfb      	ldrb	r3, [r7, #23]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d009      	beq.n	800cb6c <etharp_find_entry+0x80>
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
 800cb5a:	2b01      	cmp	r3, #1
 800cb5c:	d806      	bhi.n	800cb6c <etharp_find_entry+0x80>
 800cb5e:	4b99      	ldr	r3, [pc, #612]	; (800cdc4 <etharp_find_entry+0x2d8>)
 800cb60:	f240 1223 	movw	r2, #291	; 0x123
 800cb64:	4998      	ldr	r1, [pc, #608]	; (800cdc8 <etharp_find_entry+0x2dc>)
 800cb66:	4899      	ldr	r0, [pc, #612]	; (800cdcc <etharp_find_entry+0x2e0>)
 800cb68:	f00c f9f0 	bl	8018f4c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d020      	beq.n	800cbb4 <etharp_find_entry+0xc8>
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6819      	ldr	r1, [r3, #0]
 800cb76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb7a:	4891      	ldr	r0, [pc, #580]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cb7c:	4613      	mov	r3, r2
 800cb7e:	005b      	lsls	r3, r3, #1
 800cb80:	4413      	add	r3, r2
 800cb82:	00db      	lsls	r3, r3, #3
 800cb84:	4403      	add	r3, r0
 800cb86:	3304      	adds	r3, #4
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4299      	cmp	r1, r3
 800cb8c:	d112      	bne.n	800cbb4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00c      	beq.n	800cbae <etharp_find_entry+0xc2>
 800cb94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cb98:	4989      	ldr	r1, [pc, #548]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cb9a:	4613      	mov	r3, r2
 800cb9c:	005b      	lsls	r3, r3, #1
 800cb9e:	4413      	add	r3, r2
 800cba0:	00db      	lsls	r3, r3, #3
 800cba2:	440b      	add	r3, r1
 800cba4:	3308      	adds	r3, #8
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	429a      	cmp	r2, r3
 800cbac:	d102      	bne.n	800cbb4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800cbae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cbb2:	e100      	b.n	800cdb6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800cbb4:	7dfb      	ldrb	r3, [r7, #23]
 800cbb6:	2b01      	cmp	r3, #1
 800cbb8:	d140      	bne.n	800cc3c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800cbba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbbe:	4980      	ldr	r1, [pc, #512]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cbc0:	4613      	mov	r3, r2
 800cbc2:	005b      	lsls	r3, r3, #1
 800cbc4:	4413      	add	r3, r2
 800cbc6:	00db      	lsls	r3, r3, #3
 800cbc8:	440b      	add	r3, r1
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d01a      	beq.n	800cc06 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800cbd0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbd4:	497a      	ldr	r1, [pc, #488]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	005b      	lsls	r3, r3, #1
 800cbda:	4413      	add	r3, r2
 800cbdc:	00db      	lsls	r3, r3, #3
 800cbde:	440b      	add	r3, r1
 800cbe0:	3312      	adds	r3, #18
 800cbe2:	881b      	ldrh	r3, [r3, #0]
 800cbe4:	8bba      	ldrh	r2, [r7, #28]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d845      	bhi.n	800cc76 <etharp_find_entry+0x18a>
            old_queue = i;
 800cbea:	8c3b      	ldrh	r3, [r7, #32]
 800cbec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800cbee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cbf2:	4973      	ldr	r1, [pc, #460]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cbf4:	4613      	mov	r3, r2
 800cbf6:	005b      	lsls	r3, r3, #1
 800cbf8:	4413      	add	r3, r2
 800cbfa:	00db      	lsls	r3, r3, #3
 800cbfc:	440b      	add	r3, r1
 800cbfe:	3312      	adds	r3, #18
 800cc00:	881b      	ldrh	r3, [r3, #0]
 800cc02:	83bb      	strh	r3, [r7, #28]
 800cc04:	e037      	b.n	800cc76 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800cc06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc0a:	496d      	ldr	r1, [pc, #436]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	005b      	lsls	r3, r3, #1
 800cc10:	4413      	add	r3, r2
 800cc12:	00db      	lsls	r3, r3, #3
 800cc14:	440b      	add	r3, r1
 800cc16:	3312      	adds	r3, #18
 800cc18:	881b      	ldrh	r3, [r3, #0]
 800cc1a:	8b7a      	ldrh	r2, [r7, #26]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d82a      	bhi.n	800cc76 <etharp_find_entry+0x18a>
            old_pending = i;
 800cc20:	8c3b      	ldrh	r3, [r7, #32]
 800cc22:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800cc24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc28:	4965      	ldr	r1, [pc, #404]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	005b      	lsls	r3, r3, #1
 800cc2e:	4413      	add	r3, r2
 800cc30:	00db      	lsls	r3, r3, #3
 800cc32:	440b      	add	r3, r1
 800cc34:	3312      	adds	r3, #18
 800cc36:	881b      	ldrh	r3, [r3, #0]
 800cc38:	837b      	strh	r3, [r7, #26]
 800cc3a:	e01c      	b.n	800cc76 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800cc3c:	7dfb      	ldrb	r3, [r7, #23]
 800cc3e:	2b01      	cmp	r3, #1
 800cc40:	d919      	bls.n	800cc76 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800cc42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc46:	495e      	ldr	r1, [pc, #376]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cc48:	4613      	mov	r3, r2
 800cc4a:	005b      	lsls	r3, r3, #1
 800cc4c:	4413      	add	r3, r2
 800cc4e:	00db      	lsls	r3, r3, #3
 800cc50:	440b      	add	r3, r1
 800cc52:	3312      	adds	r3, #18
 800cc54:	881b      	ldrh	r3, [r3, #0]
 800cc56:	8b3a      	ldrh	r2, [r7, #24]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d80c      	bhi.n	800cc76 <etharp_find_entry+0x18a>
            old_stable = i;
 800cc5c:	8c3b      	ldrh	r3, [r7, #32]
 800cc5e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800cc60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cc64:	4956      	ldr	r1, [pc, #344]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cc66:	4613      	mov	r3, r2
 800cc68:	005b      	lsls	r3, r3, #1
 800cc6a:	4413      	add	r3, r2
 800cc6c:	00db      	lsls	r3, r3, #3
 800cc6e:	440b      	add	r3, r1
 800cc70:	3312      	adds	r3, #18
 800cc72:	881b      	ldrh	r3, [r3, #0]
 800cc74:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cc76:	8c3b      	ldrh	r3, [r7, #32]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	b29b      	uxth	r3, r3
 800cc7c:	843b      	strh	r3, [r7, #32]
 800cc7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cc82:	2b09      	cmp	r3, #9
 800cc84:	f77f af4c 	ble.w	800cb20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800cc88:	7afb      	ldrb	r3, [r7, #11]
 800cc8a:	f003 0302 	and.w	r3, r3, #2
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d108      	bne.n	800cca4 <etharp_find_entry+0x1b8>
 800cc92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cc96:	2b0a      	cmp	r3, #10
 800cc98:	d107      	bne.n	800ccaa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800cc9a:	7afb      	ldrb	r3, [r7, #11]
 800cc9c:	f003 0301 	and.w	r3, r3, #1
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d102      	bne.n	800ccaa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800cca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cca8:	e085      	b.n	800cdb6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800ccaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800ccae:	2b09      	cmp	r3, #9
 800ccb0:	dc02      	bgt.n	800ccb8 <etharp_find_entry+0x1cc>
    i = empty;
 800ccb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ccb4:	843b      	strh	r3, [r7, #32]
 800ccb6:	e039      	b.n	800cd2c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800ccb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800ccbc:	2b09      	cmp	r3, #9
 800ccbe:	dc14      	bgt.n	800ccea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800ccc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccc2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800ccc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ccc8:	493d      	ldr	r1, [pc, #244]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800ccca:	4613      	mov	r3, r2
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	4413      	add	r3, r2
 800ccd0:	00db      	lsls	r3, r3, #3
 800ccd2:	440b      	add	r3, r1
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d018      	beq.n	800cd0c <etharp_find_entry+0x220>
 800ccda:	4b3a      	ldr	r3, [pc, #232]	; (800cdc4 <etharp_find_entry+0x2d8>)
 800ccdc:	f240 126d 	movw	r2, #365	; 0x16d
 800cce0:	493b      	ldr	r1, [pc, #236]	; (800cdd0 <etharp_find_entry+0x2e4>)
 800cce2:	483a      	ldr	r0, [pc, #232]	; (800cdcc <etharp_find_entry+0x2e0>)
 800cce4:	f00c f932 	bl	8018f4c <iprintf>
 800cce8:	e010      	b.n	800cd0c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800ccea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ccee:	2b09      	cmp	r3, #9
 800ccf0:	dc02      	bgt.n	800ccf8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800ccf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ccf4:	843b      	strh	r3, [r7, #32]
 800ccf6:	e009      	b.n	800cd0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800ccf8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ccfc:	2b09      	cmp	r3, #9
 800ccfe:	dc02      	bgt.n	800cd06 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800cd00:	8bfb      	ldrh	r3, [r7, #30]
 800cd02:	843b      	strh	r3, [r7, #32]
 800cd04:	e002      	b.n	800cd0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800cd06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd0a:	e054      	b.n	800cdb6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cd0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd10:	2b09      	cmp	r3, #9
 800cd12:	dd06      	ble.n	800cd22 <etharp_find_entry+0x236>
 800cd14:	4b2b      	ldr	r3, [pc, #172]	; (800cdc4 <etharp_find_entry+0x2d8>)
 800cd16:	f240 127f 	movw	r2, #383	; 0x17f
 800cd1a:	492e      	ldr	r1, [pc, #184]	; (800cdd4 <etharp_find_entry+0x2e8>)
 800cd1c:	482b      	ldr	r0, [pc, #172]	; (800cdcc <etharp_find_entry+0x2e0>)
 800cd1e:	f00c f915 	bl	8018f4c <iprintf>
    etharp_free_entry(i);
 800cd22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7ff fe06 	bl	800c938 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800cd2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800cd30:	2b09      	cmp	r3, #9
 800cd32:	dd06      	ble.n	800cd42 <etharp_find_entry+0x256>
 800cd34:	4b23      	ldr	r3, [pc, #140]	; (800cdc4 <etharp_find_entry+0x2d8>)
 800cd36:	f240 1283 	movw	r2, #387	; 0x183
 800cd3a:	4926      	ldr	r1, [pc, #152]	; (800cdd4 <etharp_find_entry+0x2e8>)
 800cd3c:	4823      	ldr	r0, [pc, #140]	; (800cdcc <etharp_find_entry+0x2e0>)
 800cd3e:	f00c f905 	bl	8018f4c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800cd42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd46:	491e      	ldr	r1, [pc, #120]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cd48:	4613      	mov	r3, r2
 800cd4a:	005b      	lsls	r3, r3, #1
 800cd4c:	4413      	add	r3, r2
 800cd4e:	00db      	lsls	r3, r3, #3
 800cd50:	440b      	add	r3, r1
 800cd52:	3314      	adds	r3, #20
 800cd54:	781b      	ldrb	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d006      	beq.n	800cd68 <etharp_find_entry+0x27c>
 800cd5a:	4b1a      	ldr	r3, [pc, #104]	; (800cdc4 <etharp_find_entry+0x2d8>)
 800cd5c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800cd60:	491d      	ldr	r1, [pc, #116]	; (800cdd8 <etharp_find_entry+0x2ec>)
 800cd62:	481a      	ldr	r0, [pc, #104]	; (800cdcc <etharp_find_entry+0x2e0>)
 800cd64:	f00c f8f2 	bl	8018f4c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00b      	beq.n	800cd86 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800cd6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	6819      	ldr	r1, [r3, #0]
 800cd76:	4812      	ldr	r0, [pc, #72]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cd78:	4613      	mov	r3, r2
 800cd7a:	005b      	lsls	r3, r3, #1
 800cd7c:	4413      	add	r3, r2
 800cd7e:	00db      	lsls	r3, r3, #3
 800cd80:	4403      	add	r3, r0
 800cd82:	3304      	adds	r3, #4
 800cd84:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800cd86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cd8a:	490d      	ldr	r1, [pc, #52]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	005b      	lsls	r3, r3, #1
 800cd90:	4413      	add	r3, r2
 800cd92:	00db      	lsls	r3, r3, #3
 800cd94:	440b      	add	r3, r1
 800cd96:	3312      	adds	r3, #18
 800cd98:	2200      	movs	r2, #0
 800cd9a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800cd9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800cda0:	4907      	ldr	r1, [pc, #28]	; (800cdc0 <etharp_find_entry+0x2d4>)
 800cda2:	4613      	mov	r3, r2
 800cda4:	005b      	lsls	r3, r3, #1
 800cda6:	4413      	add	r3, r2
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	440b      	add	r3, r1
 800cdac:	3308      	adds	r3, #8
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800cdb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3728      	adds	r7, #40	; 0x28
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
 800cdbe:	bf00      	nop
 800cdc0:	24006bc8 	.word	0x24006bc8
 800cdc4:	0801bebc 	.word	0x0801bebc
 800cdc8:	0801bf38 	.word	0x0801bf38
 800cdcc:	0801bf78 	.word	0x0801bf78
 800cdd0:	0801bfa0 	.word	0x0801bfa0
 800cdd4:	0801bfb8 	.word	0x0801bfb8
 800cdd8:	0801bfcc 	.word	0x0801bfcc

0800cddc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b088      	sub	sp, #32
 800cde0:	af02      	add	r7, sp, #8
 800cde2:	60f8      	str	r0, [r7, #12]
 800cde4:	60b9      	str	r1, [r7, #8]
 800cde6:	607a      	str	r2, [r7, #4]
 800cde8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cdf0:	2b06      	cmp	r3, #6
 800cdf2:	d006      	beq.n	800ce02 <etharp_update_arp_entry+0x26>
 800cdf4:	4b48      	ldr	r3, [pc, #288]	; (800cf18 <etharp_update_arp_entry+0x13c>)
 800cdf6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800cdfa:	4948      	ldr	r1, [pc, #288]	; (800cf1c <etharp_update_arp_entry+0x140>)
 800cdfc:	4848      	ldr	r0, [pc, #288]	; (800cf20 <etharp_update_arp_entry+0x144>)
 800cdfe:	f00c f8a5 	bl	8018f4c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d012      	beq.n	800ce2e <etharp_update_arp_entry+0x52>
 800ce08:	68bb      	ldr	r3, [r7, #8]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00e      	beq.n	800ce2e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68f9      	ldr	r1, [r7, #12]
 800ce16:	4618      	mov	r0, r3
 800ce18:	f001 f91a 	bl	800e050 <ip4_addr_isbroadcast_u32>
 800ce1c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d105      	bne.n	800ce2e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800ce2a:	2be0      	cmp	r3, #224	; 0xe0
 800ce2c:	d102      	bne.n	800ce34 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800ce2e:	f06f 030f 	mvn.w	r3, #15
 800ce32:	e06c      	b.n	800cf0e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800ce34:	78fb      	ldrb	r3, [r7, #3]
 800ce36:	68fa      	ldr	r2, [r7, #12]
 800ce38:	4619      	mov	r1, r3
 800ce3a:	68b8      	ldr	r0, [r7, #8]
 800ce3c:	f7ff fe56 	bl	800caec <etharp_find_entry>
 800ce40:	4603      	mov	r3, r0
 800ce42:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800ce44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	da02      	bge.n	800ce52 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800ce4c:	8afb      	ldrh	r3, [r7, #22]
 800ce4e:	b25b      	sxtb	r3, r3
 800ce50:	e05d      	b.n	800cf0e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800ce52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce56:	4933      	ldr	r1, [pc, #204]	; (800cf24 <etharp_update_arp_entry+0x148>)
 800ce58:	4613      	mov	r3, r2
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	4413      	add	r3, r2
 800ce5e:	00db      	lsls	r3, r3, #3
 800ce60:	440b      	add	r3, r1
 800ce62:	3314      	adds	r3, #20
 800ce64:	2202      	movs	r2, #2
 800ce66:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800ce68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce6c:	492d      	ldr	r1, [pc, #180]	; (800cf24 <etharp_update_arp_entry+0x148>)
 800ce6e:	4613      	mov	r3, r2
 800ce70:	005b      	lsls	r3, r3, #1
 800ce72:	4413      	add	r3, r2
 800ce74:	00db      	lsls	r3, r3, #3
 800ce76:	440b      	add	r3, r1
 800ce78:	3308      	adds	r3, #8
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800ce7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce82:	4613      	mov	r3, r2
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	4413      	add	r3, r2
 800ce88:	00db      	lsls	r3, r3, #3
 800ce8a:	3308      	adds	r3, #8
 800ce8c:	4a25      	ldr	r2, [pc, #148]	; (800cf24 <etharp_update_arp_entry+0x148>)
 800ce8e:	4413      	add	r3, r2
 800ce90:	3304      	adds	r3, #4
 800ce92:	2206      	movs	r2, #6
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	4618      	mov	r0, r3
 800ce98:	f00c f828 	bl	8018eec <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800ce9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cea0:	4920      	ldr	r1, [pc, #128]	; (800cf24 <etharp_update_arp_entry+0x148>)
 800cea2:	4613      	mov	r3, r2
 800cea4:	005b      	lsls	r3, r3, #1
 800cea6:	4413      	add	r3, r2
 800cea8:	00db      	lsls	r3, r3, #3
 800ceaa:	440b      	add	r3, r1
 800ceac:	3312      	adds	r3, #18
 800ceae:	2200      	movs	r2, #0
 800ceb0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800ceb2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ceb6:	491b      	ldr	r1, [pc, #108]	; (800cf24 <etharp_update_arp_entry+0x148>)
 800ceb8:	4613      	mov	r3, r2
 800ceba:	005b      	lsls	r3, r3, #1
 800cebc:	4413      	add	r3, r2
 800cebe:	00db      	lsls	r3, r3, #3
 800cec0:	440b      	add	r3, r1
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d021      	beq.n	800cf0c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800cec8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cecc:	4915      	ldr	r1, [pc, #84]	; (800cf24 <etharp_update_arp_entry+0x148>)
 800cece:	4613      	mov	r3, r2
 800ced0:	005b      	lsls	r3, r3, #1
 800ced2:	4413      	add	r3, r2
 800ced4:	00db      	lsls	r3, r3, #3
 800ced6:	440b      	add	r3, r1
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800cedc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cee0:	4910      	ldr	r1, [pc, #64]	; (800cf24 <etharp_update_arp_entry+0x148>)
 800cee2:	4613      	mov	r3, r2
 800cee4:	005b      	lsls	r3, r3, #1
 800cee6:	4413      	add	r3, r2
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	440b      	add	r3, r1
 800ceec:	2200      	movs	r2, #0
 800ceee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800cef6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cefa:	9300      	str	r3, [sp, #0]
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6939      	ldr	r1, [r7, #16]
 800cf00:	68f8      	ldr	r0, [r7, #12]
 800cf02:	f00b fd5f 	bl	80189c4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800cf06:	6938      	ldr	r0, [r7, #16]
 800cf08:	f004 fc3e 	bl	8011788 <pbuf_free>
  }
  return ERR_OK;
 800cf0c:	2300      	movs	r3, #0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}
 800cf16:	bf00      	nop
 800cf18:	0801bebc 	.word	0x0801bebc
 800cf1c:	0801bff8 	.word	0x0801bff8
 800cf20:	0801bf78 	.word	0x0801bf78
 800cf24:	24006bc8 	.word	0x24006bc8

0800cf28 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b084      	sub	sp, #16
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf30:	2300      	movs	r3, #0
 800cf32:	60fb      	str	r3, [r7, #12]
 800cf34:	e01e      	b.n	800cf74 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800cf36:	4913      	ldr	r1, [pc, #76]	; (800cf84 <etharp_cleanup_netif+0x5c>)
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	4613      	mov	r3, r2
 800cf3c:	005b      	lsls	r3, r3, #1
 800cf3e:	4413      	add	r3, r2
 800cf40:	00db      	lsls	r3, r3, #3
 800cf42:	440b      	add	r3, r1
 800cf44:	3314      	adds	r3, #20
 800cf46:	781b      	ldrb	r3, [r3, #0]
 800cf48:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800cf4a:	7afb      	ldrb	r3, [r7, #11]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00e      	beq.n	800cf6e <etharp_cleanup_netif+0x46>
 800cf50:	490c      	ldr	r1, [pc, #48]	; (800cf84 <etharp_cleanup_netif+0x5c>)
 800cf52:	68fa      	ldr	r2, [r7, #12]
 800cf54:	4613      	mov	r3, r2
 800cf56:	005b      	lsls	r3, r3, #1
 800cf58:	4413      	add	r3, r2
 800cf5a:	00db      	lsls	r3, r3, #3
 800cf5c:	440b      	add	r3, r1
 800cf5e:	3308      	adds	r3, #8
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	687a      	ldr	r2, [r7, #4]
 800cf64:	429a      	cmp	r2, r3
 800cf66:	d102      	bne.n	800cf6e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800cf68:	68f8      	ldr	r0, [r7, #12]
 800cf6a:	f7ff fce5 	bl	800c938 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	3301      	adds	r3, #1
 800cf72:	60fb      	str	r3, [r7, #12]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2b09      	cmp	r3, #9
 800cf78:	dddd      	ble.n	800cf36 <etharp_cleanup_netif+0xe>
    }
  }
}
 800cf7a:	bf00      	nop
 800cf7c:	bf00      	nop
 800cf7e:	3710      	adds	r7, #16
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}
 800cf84:	24006bc8 	.word	0x24006bc8

0800cf88 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800cf88:	b5b0      	push	{r4, r5, r7, lr}
 800cf8a:	b08a      	sub	sp, #40	; 0x28
 800cf8c:	af04      	add	r7, sp, #16
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d107      	bne.n	800cfa8 <etharp_input+0x20>
 800cf98:	4b3d      	ldr	r3, [pc, #244]	; (800d090 <etharp_input+0x108>)
 800cf9a:	f240 228a 	movw	r2, #650	; 0x28a
 800cf9e:	493d      	ldr	r1, [pc, #244]	; (800d094 <etharp_input+0x10c>)
 800cfa0:	483d      	ldr	r0, [pc, #244]	; (800d098 <etharp_input+0x110>)
 800cfa2:	f00b ffd3 	bl	8018f4c <iprintf>
 800cfa6:	e06f      	b.n	800d088 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	685b      	ldr	r3, [r3, #4]
 800cfac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	881b      	ldrh	r3, [r3, #0]
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfb8:	d10c      	bne.n	800cfd4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cfba:	693b      	ldr	r3, [r7, #16]
 800cfbc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800cfbe:	2b06      	cmp	r3, #6
 800cfc0:	d108      	bne.n	800cfd4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cfc2:	693b      	ldr	r3, [r7, #16]
 800cfc4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800cfc6:	2b04      	cmp	r3, #4
 800cfc8:	d104      	bne.n	800cfd4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800cfca:	693b      	ldr	r3, [r7, #16]
 800cfcc:	885b      	ldrh	r3, [r3, #2]
 800cfce:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800cfd0:	2b08      	cmp	r3, #8
 800cfd2:	d003      	beq.n	800cfdc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f004 fbd7 	bl	8011788 <pbuf_free>
    return;
 800cfda:	e055      	b.n	800d088 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800cfdc:	693b      	ldr	r3, [r7, #16]
 800cfde:	330e      	adds	r3, #14
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800cfe4:	693b      	ldr	r3, [r7, #16]
 800cfe6:	3318      	adds	r3, #24
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	3304      	adds	r3, #4
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d102      	bne.n	800cffc <etharp_input+0x74>
    for_us = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	75fb      	strb	r3, [r7, #23]
 800cffa:	e009      	b.n	800d010 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800cffc:	68ba      	ldr	r2, [r7, #8]
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	3304      	adds	r3, #4
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	429a      	cmp	r2, r3
 800d006:	bf0c      	ite	eq
 800d008:	2301      	moveq	r3, #1
 800d00a:	2300      	movne	r3, #0
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	f103 0208 	add.w	r2, r3, #8
 800d016:	7dfb      	ldrb	r3, [r7, #23]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d001      	beq.n	800d020 <etharp_input+0x98>
 800d01c:	2301      	movs	r3, #1
 800d01e:	e000      	b.n	800d022 <etharp_input+0x9a>
 800d020:	2302      	movs	r3, #2
 800d022:	f107 010c 	add.w	r1, r7, #12
 800d026:	6838      	ldr	r0, [r7, #0]
 800d028:	f7ff fed8 	bl	800cddc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800d02c:	693b      	ldr	r3, [r7, #16]
 800d02e:	88db      	ldrh	r3, [r3, #6]
 800d030:	b29b      	uxth	r3, r3
 800d032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d036:	d003      	beq.n	800d040 <etharp_input+0xb8>
 800d038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d03c:	d01e      	beq.n	800d07c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800d03e:	e020      	b.n	800d082 <etharp_input+0xfa>
      if (for_us) {
 800d040:	7dfb      	ldrb	r3, [r7, #23]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d01c      	beq.n	800d080 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d04c:	693b      	ldr	r3, [r7, #16]
 800d04e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800d05c:	693a      	ldr	r2, [r7, #16]
 800d05e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800d060:	2102      	movs	r1, #2
 800d062:	9103      	str	r1, [sp, #12]
 800d064:	f107 010c 	add.w	r1, r7, #12
 800d068:	9102      	str	r1, [sp, #8]
 800d06a:	9201      	str	r2, [sp, #4]
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	462b      	mov	r3, r5
 800d070:	4622      	mov	r2, r4
 800d072:	4601      	mov	r1, r0
 800d074:	6838      	ldr	r0, [r7, #0]
 800d076:	f000 faeb 	bl	800d650 <etharp_raw>
      break;
 800d07a:	e001      	b.n	800d080 <etharp_input+0xf8>
      break;
 800d07c:	bf00      	nop
 800d07e:	e000      	b.n	800d082 <etharp_input+0xfa>
      break;
 800d080:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f004 fb80 	bl	8011788 <pbuf_free>
}
 800d088:	3718      	adds	r7, #24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bdb0      	pop	{r4, r5, r7, pc}
 800d08e:	bf00      	nop
 800d090:	0801bebc 	.word	0x0801bebc
 800d094:	0801c050 	.word	0x0801c050
 800d098:	0801bf78 	.word	0x0801bf78

0800d09c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b086      	sub	sp, #24
 800d0a0:	af02      	add	r7, sp, #8
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800d0aa:	79fa      	ldrb	r2, [r7, #7]
 800d0ac:	4944      	ldr	r1, [pc, #272]	; (800d1c0 <etharp_output_to_arp_index+0x124>)
 800d0ae:	4613      	mov	r3, r2
 800d0b0:	005b      	lsls	r3, r3, #1
 800d0b2:	4413      	add	r3, r2
 800d0b4:	00db      	lsls	r3, r3, #3
 800d0b6:	440b      	add	r3, r1
 800d0b8:	3314      	adds	r3, #20
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d806      	bhi.n	800d0ce <etharp_output_to_arp_index+0x32>
 800d0c0:	4b40      	ldr	r3, [pc, #256]	; (800d1c4 <etharp_output_to_arp_index+0x128>)
 800d0c2:	f240 22ee 	movw	r2, #750	; 0x2ee
 800d0c6:	4940      	ldr	r1, [pc, #256]	; (800d1c8 <etharp_output_to_arp_index+0x12c>)
 800d0c8:	4840      	ldr	r0, [pc, #256]	; (800d1cc <etharp_output_to_arp_index+0x130>)
 800d0ca:	f00b ff3f 	bl	8018f4c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800d0ce:	79fa      	ldrb	r2, [r7, #7]
 800d0d0:	493b      	ldr	r1, [pc, #236]	; (800d1c0 <etharp_output_to_arp_index+0x124>)
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	005b      	lsls	r3, r3, #1
 800d0d6:	4413      	add	r3, r2
 800d0d8:	00db      	lsls	r3, r3, #3
 800d0da:	440b      	add	r3, r1
 800d0dc:	3314      	adds	r3, #20
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	2b02      	cmp	r3, #2
 800d0e2:	d153      	bne.n	800d18c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800d0e4:	79fa      	ldrb	r2, [r7, #7]
 800d0e6:	4936      	ldr	r1, [pc, #216]	; (800d1c0 <etharp_output_to_arp_index+0x124>)
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	005b      	lsls	r3, r3, #1
 800d0ec:	4413      	add	r3, r2
 800d0ee:	00db      	lsls	r3, r3, #3
 800d0f0:	440b      	add	r3, r1
 800d0f2:	3312      	adds	r3, #18
 800d0f4:	881b      	ldrh	r3, [r3, #0]
 800d0f6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800d0fa:	d919      	bls.n	800d130 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800d0fc:	79fa      	ldrb	r2, [r7, #7]
 800d0fe:	4613      	mov	r3, r2
 800d100:	005b      	lsls	r3, r3, #1
 800d102:	4413      	add	r3, r2
 800d104:	00db      	lsls	r3, r3, #3
 800d106:	4a2e      	ldr	r2, [pc, #184]	; (800d1c0 <etharp_output_to_arp_index+0x124>)
 800d108:	4413      	add	r3, r2
 800d10a:	3304      	adds	r3, #4
 800d10c:	4619      	mov	r1, r3
 800d10e:	68f8      	ldr	r0, [r7, #12]
 800d110:	f000 fb4c 	bl	800d7ac <etharp_request>
 800d114:	4603      	mov	r3, r0
 800d116:	2b00      	cmp	r3, #0
 800d118:	d138      	bne.n	800d18c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d11a:	79fa      	ldrb	r2, [r7, #7]
 800d11c:	4928      	ldr	r1, [pc, #160]	; (800d1c0 <etharp_output_to_arp_index+0x124>)
 800d11e:	4613      	mov	r3, r2
 800d120:	005b      	lsls	r3, r3, #1
 800d122:	4413      	add	r3, r2
 800d124:	00db      	lsls	r3, r3, #3
 800d126:	440b      	add	r3, r1
 800d128:	3314      	adds	r3, #20
 800d12a:	2203      	movs	r2, #3
 800d12c:	701a      	strb	r2, [r3, #0]
 800d12e:	e02d      	b.n	800d18c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800d130:	79fa      	ldrb	r2, [r7, #7]
 800d132:	4923      	ldr	r1, [pc, #140]	; (800d1c0 <etharp_output_to_arp_index+0x124>)
 800d134:	4613      	mov	r3, r2
 800d136:	005b      	lsls	r3, r3, #1
 800d138:	4413      	add	r3, r2
 800d13a:	00db      	lsls	r3, r3, #3
 800d13c:	440b      	add	r3, r1
 800d13e:	3312      	adds	r3, #18
 800d140:	881b      	ldrh	r3, [r3, #0]
 800d142:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800d146:	d321      	bcc.n	800d18c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800d148:	79fa      	ldrb	r2, [r7, #7]
 800d14a:	4613      	mov	r3, r2
 800d14c:	005b      	lsls	r3, r3, #1
 800d14e:	4413      	add	r3, r2
 800d150:	00db      	lsls	r3, r3, #3
 800d152:	4a1b      	ldr	r2, [pc, #108]	; (800d1c0 <etharp_output_to_arp_index+0x124>)
 800d154:	4413      	add	r3, r2
 800d156:	1d19      	adds	r1, r3, #4
 800d158:	79fa      	ldrb	r2, [r7, #7]
 800d15a:	4613      	mov	r3, r2
 800d15c:	005b      	lsls	r3, r3, #1
 800d15e:	4413      	add	r3, r2
 800d160:	00db      	lsls	r3, r3, #3
 800d162:	3308      	adds	r3, #8
 800d164:	4a16      	ldr	r2, [pc, #88]	; (800d1c0 <etharp_output_to_arp_index+0x124>)
 800d166:	4413      	add	r3, r2
 800d168:	3304      	adds	r3, #4
 800d16a:	461a      	mov	r2, r3
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f000 fafb 	bl	800d768 <etharp_request_dst>
 800d172:	4603      	mov	r3, r0
 800d174:	2b00      	cmp	r3, #0
 800d176:	d109      	bne.n	800d18c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800d178:	79fa      	ldrb	r2, [r7, #7]
 800d17a:	4911      	ldr	r1, [pc, #68]	; (800d1c0 <etharp_output_to_arp_index+0x124>)
 800d17c:	4613      	mov	r3, r2
 800d17e:	005b      	lsls	r3, r3, #1
 800d180:	4413      	add	r3, r2
 800d182:	00db      	lsls	r3, r3, #3
 800d184:	440b      	add	r3, r1
 800d186:	3314      	adds	r3, #20
 800d188:	2203      	movs	r2, #3
 800d18a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800d192:	79fa      	ldrb	r2, [r7, #7]
 800d194:	4613      	mov	r3, r2
 800d196:	005b      	lsls	r3, r3, #1
 800d198:	4413      	add	r3, r2
 800d19a:	00db      	lsls	r3, r3, #3
 800d19c:	3308      	adds	r3, #8
 800d19e:	4a08      	ldr	r2, [pc, #32]	; (800d1c0 <etharp_output_to_arp_index+0x124>)
 800d1a0:	4413      	add	r3, r2
 800d1a2:	3304      	adds	r3, #4
 800d1a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d1a8:	9200      	str	r2, [sp, #0]
 800d1aa:	460a      	mov	r2, r1
 800d1ac:	68b9      	ldr	r1, [r7, #8]
 800d1ae:	68f8      	ldr	r0, [r7, #12]
 800d1b0:	f00b fc08 	bl	80189c4 <ethernet_output>
 800d1b4:	4603      	mov	r3, r0
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3710      	adds	r7, #16
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	24006bc8 	.word	0x24006bc8
 800d1c4:	0801bebc 	.word	0x0801bebc
 800d1c8:	0801c070 	.word	0x0801c070
 800d1cc:	0801bf78 	.word	0x0801bf78

0800d1d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b08a      	sub	sp, #40	; 0x28
 800d1d4:	af02      	add	r7, sp, #8
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d106      	bne.n	800d1f4 <etharp_output+0x24>
 800d1e6:	4b73      	ldr	r3, [pc, #460]	; (800d3b4 <etharp_output+0x1e4>)
 800d1e8:	f240 321e 	movw	r2, #798	; 0x31e
 800d1ec:	4972      	ldr	r1, [pc, #456]	; (800d3b8 <etharp_output+0x1e8>)
 800d1ee:	4873      	ldr	r0, [pc, #460]	; (800d3bc <etharp_output+0x1ec>)
 800d1f0:	f00b feac 	bl	8018f4c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d106      	bne.n	800d208 <etharp_output+0x38>
 800d1fa:	4b6e      	ldr	r3, [pc, #440]	; (800d3b4 <etharp_output+0x1e4>)
 800d1fc:	f240 321f 	movw	r2, #799	; 0x31f
 800d200:	496f      	ldr	r1, [pc, #444]	; (800d3c0 <etharp_output+0x1f0>)
 800d202:	486e      	ldr	r0, [pc, #440]	; (800d3bc <etharp_output+0x1ec>)
 800d204:	f00b fea2 	bl	8018f4c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d106      	bne.n	800d21c <etharp_output+0x4c>
 800d20e:	4b69      	ldr	r3, [pc, #420]	; (800d3b4 <etharp_output+0x1e4>)
 800d210:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d214:	496b      	ldr	r1, [pc, #428]	; (800d3c4 <etharp_output+0x1f4>)
 800d216:	4869      	ldr	r0, [pc, #420]	; (800d3bc <etharp_output+0x1ec>)
 800d218:	f00b fe98 	bl	8018f4c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	68f9      	ldr	r1, [r7, #12]
 800d222:	4618      	mov	r0, r3
 800d224:	f000 ff14 	bl	800e050 <ip4_addr_isbroadcast_u32>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d002      	beq.n	800d234 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800d22e:	4b66      	ldr	r3, [pc, #408]	; (800d3c8 <etharp_output+0x1f8>)
 800d230:	61fb      	str	r3, [r7, #28]
 800d232:	e0af      	b.n	800d394 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d23c:	2be0      	cmp	r3, #224	; 0xe0
 800d23e:	d118      	bne.n	800d272 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800d240:	2301      	movs	r3, #1
 800d242:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800d244:	2300      	movs	r3, #0
 800d246:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800d248:	235e      	movs	r3, #94	; 0x5e
 800d24a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	3301      	adds	r3, #1
 800d250:	781b      	ldrb	r3, [r3, #0]
 800d252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d256:	b2db      	uxtb	r3, r3
 800d258:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	3302      	adds	r3, #2
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	3303      	adds	r3, #3
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800d26a:	f107 0310 	add.w	r3, r7, #16
 800d26e:	61fb      	str	r3, [r7, #28]
 800d270:	e090      	b.n	800d394 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	3304      	adds	r3, #4
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	405a      	eors	r2, r3
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	3308      	adds	r3, #8
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	4013      	ands	r3, r2
 800d286:	2b00      	cmp	r3, #0
 800d288:	d012      	beq.n	800d2b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800d290:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800d294:	4293      	cmp	r3, r2
 800d296:	d00b      	beq.n	800d2b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	330c      	adds	r3, #12
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d003      	beq.n	800d2aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	330c      	adds	r3, #12
 800d2a6:	61bb      	str	r3, [r7, #24]
 800d2a8:	e002      	b.n	800d2b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800d2aa:	f06f 0303 	mvn.w	r3, #3
 800d2ae:	e07d      	b.n	800d3ac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d2b0:	4b46      	ldr	r3, [pc, #280]	; (800d3cc <etharp_output+0x1fc>)
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	4a46      	ldr	r2, [pc, #280]	; (800d3d0 <etharp_output+0x200>)
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	005b      	lsls	r3, r3, #1
 800d2bc:	440b      	add	r3, r1
 800d2be:	00db      	lsls	r3, r3, #3
 800d2c0:	4413      	add	r3, r2
 800d2c2:	3314      	adds	r3, #20
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d925      	bls.n	800d316 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d2ca:	4b40      	ldr	r3, [pc, #256]	; (800d3cc <etharp_output+0x1fc>)
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	4a3f      	ldr	r2, [pc, #252]	; (800d3d0 <etharp_output+0x200>)
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	005b      	lsls	r3, r3, #1
 800d2d6:	440b      	add	r3, r1
 800d2d8:	00db      	lsls	r3, r3, #3
 800d2da:	4413      	add	r3, r2
 800d2dc:	3308      	adds	r3, #8
 800d2de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	429a      	cmp	r2, r3
 800d2e4:	d117      	bne.n	800d316 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800d2e6:	69bb      	ldr	r3, [r7, #24]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	4b38      	ldr	r3, [pc, #224]	; (800d3cc <etharp_output+0x1fc>)
 800d2ec:	781b      	ldrb	r3, [r3, #0]
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	4937      	ldr	r1, [pc, #220]	; (800d3d0 <etharp_output+0x200>)
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	005b      	lsls	r3, r3, #1
 800d2f6:	4403      	add	r3, r0
 800d2f8:	00db      	lsls	r3, r3, #3
 800d2fa:	440b      	add	r3, r1
 800d2fc:	3304      	adds	r3, #4
 800d2fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800d300:	429a      	cmp	r2, r3
 800d302:	d108      	bne.n	800d316 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800d304:	4b31      	ldr	r3, [pc, #196]	; (800d3cc <etharp_output+0x1fc>)
 800d306:	781b      	ldrb	r3, [r3, #0]
 800d308:	461a      	mov	r2, r3
 800d30a:	68b9      	ldr	r1, [r7, #8]
 800d30c:	68f8      	ldr	r0, [r7, #12]
 800d30e:	f7ff fec5 	bl	800d09c <etharp_output_to_arp_index>
 800d312:	4603      	mov	r3, r0
 800d314:	e04a      	b.n	800d3ac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d316:	2300      	movs	r3, #0
 800d318:	75fb      	strb	r3, [r7, #23]
 800d31a:	e031      	b.n	800d380 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d31c:	7dfa      	ldrb	r2, [r7, #23]
 800d31e:	492c      	ldr	r1, [pc, #176]	; (800d3d0 <etharp_output+0x200>)
 800d320:	4613      	mov	r3, r2
 800d322:	005b      	lsls	r3, r3, #1
 800d324:	4413      	add	r3, r2
 800d326:	00db      	lsls	r3, r3, #3
 800d328:	440b      	add	r3, r1
 800d32a:	3314      	adds	r3, #20
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	2b01      	cmp	r3, #1
 800d330:	d923      	bls.n	800d37a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800d332:	7dfa      	ldrb	r2, [r7, #23]
 800d334:	4926      	ldr	r1, [pc, #152]	; (800d3d0 <etharp_output+0x200>)
 800d336:	4613      	mov	r3, r2
 800d338:	005b      	lsls	r3, r3, #1
 800d33a:	4413      	add	r3, r2
 800d33c:	00db      	lsls	r3, r3, #3
 800d33e:	440b      	add	r3, r1
 800d340:	3308      	adds	r3, #8
 800d342:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	429a      	cmp	r2, r3
 800d348:	d117      	bne.n	800d37a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800d34a:	69bb      	ldr	r3, [r7, #24]
 800d34c:	6819      	ldr	r1, [r3, #0]
 800d34e:	7dfa      	ldrb	r2, [r7, #23]
 800d350:	481f      	ldr	r0, [pc, #124]	; (800d3d0 <etharp_output+0x200>)
 800d352:	4613      	mov	r3, r2
 800d354:	005b      	lsls	r3, r3, #1
 800d356:	4413      	add	r3, r2
 800d358:	00db      	lsls	r3, r3, #3
 800d35a:	4403      	add	r3, r0
 800d35c:	3304      	adds	r3, #4
 800d35e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800d360:	4299      	cmp	r1, r3
 800d362:	d10a      	bne.n	800d37a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800d364:	4a19      	ldr	r2, [pc, #100]	; (800d3cc <etharp_output+0x1fc>)
 800d366:	7dfb      	ldrb	r3, [r7, #23]
 800d368:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800d36a:	7dfb      	ldrb	r3, [r7, #23]
 800d36c:	461a      	mov	r2, r3
 800d36e:	68b9      	ldr	r1, [r7, #8]
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f7ff fe93 	bl	800d09c <etharp_output_to_arp_index>
 800d376:	4603      	mov	r3, r0
 800d378:	e018      	b.n	800d3ac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800d37a:	7dfb      	ldrb	r3, [r7, #23]
 800d37c:	3301      	adds	r3, #1
 800d37e:	75fb      	strb	r3, [r7, #23]
 800d380:	7dfb      	ldrb	r3, [r7, #23]
 800d382:	2b09      	cmp	r3, #9
 800d384:	d9ca      	bls.n	800d31c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800d386:	68ba      	ldr	r2, [r7, #8]
 800d388:	69b9      	ldr	r1, [r7, #24]
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f000 f822 	bl	800d3d4 <etharp_query>
 800d390:	4603      	mov	r3, r0
 800d392:	e00b      	b.n	800d3ac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d39a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d39e:	9300      	str	r3, [sp, #0]
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	68b9      	ldr	r1, [r7, #8]
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f00b fb0d 	bl	80189c4 <ethernet_output>
 800d3aa:	4603      	mov	r3, r0
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3720      	adds	r7, #32
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}
 800d3b4:	0801bebc 	.word	0x0801bebc
 800d3b8:	0801c050 	.word	0x0801c050
 800d3bc:	0801bf78 	.word	0x0801bf78
 800d3c0:	0801c0a0 	.word	0x0801c0a0
 800d3c4:	0801c040 	.word	0x0801c040
 800d3c8:	0801ed7c 	.word	0x0801ed7c
 800d3cc:	24006cb8 	.word	0x24006cb8
 800d3d0:	24006bc8 	.word	0x24006bc8

0800d3d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b08c      	sub	sp, #48	; 0x30
 800d3d8:	af02      	add	r7, sp, #8
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	3326      	adds	r3, #38	; 0x26
 800d3e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800d3e6:	23ff      	movs	r3, #255	; 0xff
 800d3e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	68f9      	ldr	r1, [r7, #12]
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f000 fe2a 	bl	800e050 <ip4_addr_isbroadcast_u32>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d10c      	bne.n	800d41c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800d40a:	2be0      	cmp	r3, #224	; 0xe0
 800d40c:	d006      	beq.n	800d41c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d003      	beq.n	800d41c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d102      	bne.n	800d422 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800d41c:	f06f 030f 	mvn.w	r3, #15
 800d420:	e101      	b.n	800d626 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800d422:	68fa      	ldr	r2, [r7, #12]
 800d424:	2101      	movs	r1, #1
 800d426:	68b8      	ldr	r0, [r7, #8]
 800d428:	f7ff fb60 	bl	800caec <etharp_find_entry>
 800d42c:	4603      	mov	r3, r0
 800d42e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800d430:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d434:	2b00      	cmp	r3, #0
 800d436:	da02      	bge.n	800d43e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800d438:	8a7b      	ldrh	r3, [r7, #18]
 800d43a:	b25b      	sxtb	r3, r3
 800d43c:	e0f3      	b.n	800d626 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800d43e:	8a7b      	ldrh	r3, [r7, #18]
 800d440:	2b7e      	cmp	r3, #126	; 0x7e
 800d442:	d906      	bls.n	800d452 <etharp_query+0x7e>
 800d444:	4b7a      	ldr	r3, [pc, #488]	; (800d630 <etharp_query+0x25c>)
 800d446:	f240 32c1 	movw	r2, #961	; 0x3c1
 800d44a:	497a      	ldr	r1, [pc, #488]	; (800d634 <etharp_query+0x260>)
 800d44c:	487a      	ldr	r0, [pc, #488]	; (800d638 <etharp_query+0x264>)
 800d44e:	f00b fd7d 	bl	8018f4c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800d452:	8a7b      	ldrh	r3, [r7, #18]
 800d454:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800d456:	7c7a      	ldrb	r2, [r7, #17]
 800d458:	4978      	ldr	r1, [pc, #480]	; (800d63c <etharp_query+0x268>)
 800d45a:	4613      	mov	r3, r2
 800d45c:	005b      	lsls	r3, r3, #1
 800d45e:	4413      	add	r3, r2
 800d460:	00db      	lsls	r3, r3, #3
 800d462:	440b      	add	r3, r1
 800d464:	3314      	adds	r3, #20
 800d466:	781b      	ldrb	r3, [r3, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d115      	bne.n	800d498 <etharp_query+0xc4>
    is_new_entry = 1;
 800d46c:	2301      	movs	r3, #1
 800d46e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800d470:	7c7a      	ldrb	r2, [r7, #17]
 800d472:	4972      	ldr	r1, [pc, #456]	; (800d63c <etharp_query+0x268>)
 800d474:	4613      	mov	r3, r2
 800d476:	005b      	lsls	r3, r3, #1
 800d478:	4413      	add	r3, r2
 800d47a:	00db      	lsls	r3, r3, #3
 800d47c:	440b      	add	r3, r1
 800d47e:	3314      	adds	r3, #20
 800d480:	2201      	movs	r2, #1
 800d482:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800d484:	7c7a      	ldrb	r2, [r7, #17]
 800d486:	496d      	ldr	r1, [pc, #436]	; (800d63c <etharp_query+0x268>)
 800d488:	4613      	mov	r3, r2
 800d48a:	005b      	lsls	r3, r3, #1
 800d48c:	4413      	add	r3, r2
 800d48e:	00db      	lsls	r3, r3, #3
 800d490:	440b      	add	r3, r1
 800d492:	3308      	adds	r3, #8
 800d494:	68fa      	ldr	r2, [r7, #12]
 800d496:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800d498:	7c7a      	ldrb	r2, [r7, #17]
 800d49a:	4968      	ldr	r1, [pc, #416]	; (800d63c <etharp_query+0x268>)
 800d49c:	4613      	mov	r3, r2
 800d49e:	005b      	lsls	r3, r3, #1
 800d4a0:	4413      	add	r3, r2
 800d4a2:	00db      	lsls	r3, r3, #3
 800d4a4:	440b      	add	r3, r1
 800d4a6:	3314      	adds	r3, #20
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	2b01      	cmp	r3, #1
 800d4ac:	d011      	beq.n	800d4d2 <etharp_query+0xfe>
 800d4ae:	7c7a      	ldrb	r2, [r7, #17]
 800d4b0:	4962      	ldr	r1, [pc, #392]	; (800d63c <etharp_query+0x268>)
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	005b      	lsls	r3, r3, #1
 800d4b6:	4413      	add	r3, r2
 800d4b8:	00db      	lsls	r3, r3, #3
 800d4ba:	440b      	add	r3, r1
 800d4bc:	3314      	adds	r3, #20
 800d4be:	781b      	ldrb	r3, [r3, #0]
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d806      	bhi.n	800d4d2 <etharp_query+0xfe>
 800d4c4:	4b5a      	ldr	r3, [pc, #360]	; (800d630 <etharp_query+0x25c>)
 800d4c6:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d4ca:	495d      	ldr	r1, [pc, #372]	; (800d640 <etharp_query+0x26c>)
 800d4cc:	485a      	ldr	r0, [pc, #360]	; (800d638 <etharp_query+0x264>)
 800d4ce:	f00b fd3d 	bl	8018f4c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800d4d2:	6a3b      	ldr	r3, [r7, #32]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d102      	bne.n	800d4de <etharp_query+0x10a>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d10c      	bne.n	800d4f8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800d4de:	68b9      	ldr	r1, [r7, #8]
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f000 f963 	bl	800d7ac <etharp_request>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d102      	bne.n	800d4f8 <etharp_query+0x124>
      return result;
 800d4f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d4f6:	e096      	b.n	800d626 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d106      	bne.n	800d50c <etharp_query+0x138>
 800d4fe:	4b4c      	ldr	r3, [pc, #304]	; (800d630 <etharp_query+0x25c>)
 800d500:	f240 32e1 	movw	r2, #993	; 0x3e1
 800d504:	494f      	ldr	r1, [pc, #316]	; (800d644 <etharp_query+0x270>)
 800d506:	484c      	ldr	r0, [pc, #304]	; (800d638 <etharp_query+0x264>)
 800d508:	f00b fd20 	bl	8018f4c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800d50c:	7c7a      	ldrb	r2, [r7, #17]
 800d50e:	494b      	ldr	r1, [pc, #300]	; (800d63c <etharp_query+0x268>)
 800d510:	4613      	mov	r3, r2
 800d512:	005b      	lsls	r3, r3, #1
 800d514:	4413      	add	r3, r2
 800d516:	00db      	lsls	r3, r3, #3
 800d518:	440b      	add	r3, r1
 800d51a:	3314      	adds	r3, #20
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d917      	bls.n	800d552 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800d522:	4a49      	ldr	r2, [pc, #292]	; (800d648 <etharp_query+0x274>)
 800d524:	7c7b      	ldrb	r3, [r7, #17]
 800d526:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800d528:	7c7a      	ldrb	r2, [r7, #17]
 800d52a:	4613      	mov	r3, r2
 800d52c:	005b      	lsls	r3, r3, #1
 800d52e:	4413      	add	r3, r2
 800d530:	00db      	lsls	r3, r3, #3
 800d532:	3308      	adds	r3, #8
 800d534:	4a41      	ldr	r2, [pc, #260]	; (800d63c <etharp_query+0x268>)
 800d536:	4413      	add	r3, r2
 800d538:	3304      	adds	r3, #4
 800d53a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d53e:	9200      	str	r2, [sp, #0]
 800d540:	697a      	ldr	r2, [r7, #20]
 800d542:	6879      	ldr	r1, [r7, #4]
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f00b fa3d 	bl	80189c4 <ethernet_output>
 800d54a:	4603      	mov	r3, r0
 800d54c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d550:	e067      	b.n	800d622 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d552:	7c7a      	ldrb	r2, [r7, #17]
 800d554:	4939      	ldr	r1, [pc, #228]	; (800d63c <etharp_query+0x268>)
 800d556:	4613      	mov	r3, r2
 800d558:	005b      	lsls	r3, r3, #1
 800d55a:	4413      	add	r3, r2
 800d55c:	00db      	lsls	r3, r3, #3
 800d55e:	440b      	add	r3, r1
 800d560:	3314      	adds	r3, #20
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d15c      	bne.n	800d622 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800d568:	2300      	movs	r3, #0
 800d56a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d570:	e01c      	b.n	800d5ac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	895a      	ldrh	r2, [r3, #10]
 800d576:	69fb      	ldr	r3, [r7, #28]
 800d578:	891b      	ldrh	r3, [r3, #8]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d10a      	bne.n	800d594 <etharp_query+0x1c0>
 800d57e:	69fb      	ldr	r3, [r7, #28]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d006      	beq.n	800d594 <etharp_query+0x1c0>
 800d586:	4b2a      	ldr	r3, [pc, #168]	; (800d630 <etharp_query+0x25c>)
 800d588:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d58c:	492f      	ldr	r1, [pc, #188]	; (800d64c <etharp_query+0x278>)
 800d58e:	482a      	ldr	r0, [pc, #168]	; (800d638 <etharp_query+0x264>)
 800d590:	f00b fcdc 	bl	8018f4c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	7b1b      	ldrb	r3, [r3, #12]
 800d598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d002      	beq.n	800d5a6 <etharp_query+0x1d2>
        copy_needed = 1;
 800d5a0:	2301      	movs	r3, #1
 800d5a2:	61bb      	str	r3, [r7, #24]
        break;
 800d5a4:	e005      	b.n	800d5b2 <etharp_query+0x1de>
      }
      p = p->next;
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d1df      	bne.n	800d572 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d007      	beq.n	800d5c8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	f44f 7120 	mov.w	r1, #640	; 0x280
 800d5be:	200e      	movs	r0, #14
 800d5c0:	f004 fc92 	bl	8011ee8 <pbuf_clone>
 800d5c4:	61f8      	str	r0, [r7, #28]
 800d5c6:	e004      	b.n	800d5d2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800d5cc:	69f8      	ldr	r0, [r7, #28]
 800d5ce:	f004 f981 	bl	80118d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d021      	beq.n	800d61c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800d5d8:	7c7a      	ldrb	r2, [r7, #17]
 800d5da:	4918      	ldr	r1, [pc, #96]	; (800d63c <etharp_query+0x268>)
 800d5dc:	4613      	mov	r3, r2
 800d5de:	005b      	lsls	r3, r3, #1
 800d5e0:	4413      	add	r3, r2
 800d5e2:	00db      	lsls	r3, r3, #3
 800d5e4:	440b      	add	r3, r1
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d00a      	beq.n	800d602 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800d5ec:	7c7a      	ldrb	r2, [r7, #17]
 800d5ee:	4913      	ldr	r1, [pc, #76]	; (800d63c <etharp_query+0x268>)
 800d5f0:	4613      	mov	r3, r2
 800d5f2:	005b      	lsls	r3, r3, #1
 800d5f4:	4413      	add	r3, r2
 800d5f6:	00db      	lsls	r3, r3, #3
 800d5f8:	440b      	add	r3, r1
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f004 f8c3 	bl	8011788 <pbuf_free>
      }
      arp_table[i].q = p;
 800d602:	7c7a      	ldrb	r2, [r7, #17]
 800d604:	490d      	ldr	r1, [pc, #52]	; (800d63c <etharp_query+0x268>)
 800d606:	4613      	mov	r3, r2
 800d608:	005b      	lsls	r3, r3, #1
 800d60a:	4413      	add	r3, r2
 800d60c:	00db      	lsls	r3, r3, #3
 800d60e:	440b      	add	r3, r1
 800d610:	69fa      	ldr	r2, [r7, #28]
 800d612:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800d614:	2300      	movs	r3, #0
 800d616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d61a:	e002      	b.n	800d622 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800d61c:	23ff      	movs	r3, #255	; 0xff
 800d61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800d622:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d626:	4618      	mov	r0, r3
 800d628:	3728      	adds	r7, #40	; 0x28
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}
 800d62e:	bf00      	nop
 800d630:	0801bebc 	.word	0x0801bebc
 800d634:	0801c0ac 	.word	0x0801c0ac
 800d638:	0801bf78 	.word	0x0801bf78
 800d63c:	24006bc8 	.word	0x24006bc8
 800d640:	0801c0bc 	.word	0x0801c0bc
 800d644:	0801c0a0 	.word	0x0801c0a0
 800d648:	24006cb8 	.word	0x24006cb8
 800d64c:	0801c0e4 	.word	0x0801c0e4

0800d650 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b08a      	sub	sp, #40	; 0x28
 800d654:	af02      	add	r7, sp, #8
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	607a      	str	r2, [r7, #4]
 800d65c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800d65e:	2300      	movs	r3, #0
 800d660:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d106      	bne.n	800d676 <etharp_raw+0x26>
 800d668:	4b3a      	ldr	r3, [pc, #232]	; (800d754 <etharp_raw+0x104>)
 800d66a:	f240 4257 	movw	r2, #1111	; 0x457
 800d66e:	493a      	ldr	r1, [pc, #232]	; (800d758 <etharp_raw+0x108>)
 800d670:	483a      	ldr	r0, [pc, #232]	; (800d75c <etharp_raw+0x10c>)
 800d672:	f00b fc6b 	bl	8018f4c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800d676:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d67a:	211c      	movs	r1, #28
 800d67c:	200e      	movs	r0, #14
 800d67e:	f003 fd6f 	bl	8011160 <pbuf_alloc>
 800d682:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800d684:	69bb      	ldr	r3, [r7, #24]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d102      	bne.n	800d690 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800d68a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d68e:	e05d      	b.n	800d74c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800d690:	69bb      	ldr	r3, [r7, #24]
 800d692:	895b      	ldrh	r3, [r3, #10]
 800d694:	2b1b      	cmp	r3, #27
 800d696:	d806      	bhi.n	800d6a6 <etharp_raw+0x56>
 800d698:	4b2e      	ldr	r3, [pc, #184]	; (800d754 <etharp_raw+0x104>)
 800d69a:	f240 4262 	movw	r2, #1122	; 0x462
 800d69e:	4930      	ldr	r1, [pc, #192]	; (800d760 <etharp_raw+0x110>)
 800d6a0:	482e      	ldr	r0, [pc, #184]	; (800d75c <etharp_raw+0x10c>)
 800d6a2:	f00b fc53 	bl	8018f4c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	685b      	ldr	r3, [r3, #4]
 800d6aa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800d6ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f001 fc86 	bl	800efc0 <lwip_htons>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800d6c2:	2b06      	cmp	r3, #6
 800d6c4:	d006      	beq.n	800d6d4 <etharp_raw+0x84>
 800d6c6:	4b23      	ldr	r3, [pc, #140]	; (800d754 <etharp_raw+0x104>)
 800d6c8:	f240 4269 	movw	r2, #1129	; 0x469
 800d6cc:	4925      	ldr	r1, [pc, #148]	; (800d764 <etharp_raw+0x114>)
 800d6ce:	4823      	ldr	r0, [pc, #140]	; (800d75c <etharp_raw+0x10c>)
 800d6d0:	f00b fc3c 	bl	8018f4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	3308      	adds	r3, #8
 800d6d8:	2206      	movs	r2, #6
 800d6da:	6839      	ldr	r1, [r7, #0]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f00b fc05 	bl	8018eec <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	3312      	adds	r3, #18
 800d6e6:	2206      	movs	r2, #6
 800d6e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f00b fbfe 	bl	8018eec <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800d6f0:	697b      	ldr	r3, [r7, #20]
 800d6f2:	330e      	adds	r3, #14
 800d6f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6f6:	6812      	ldr	r2, [r2, #0]
 800d6f8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	3318      	adds	r3, #24
 800d6fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d700:	6812      	ldr	r2, [r2, #0]
 800d702:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	2200      	movs	r2, #0
 800d708:	701a      	strb	r2, [r3, #0]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f042 0201 	orr.w	r2, r2, #1
 800d710:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	2200      	movs	r2, #0
 800d716:	f042 0208 	orr.w	r2, r2, #8
 800d71a:	709a      	strb	r2, [r3, #2]
 800d71c:	2200      	movs	r2, #0
 800d71e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800d720:	697b      	ldr	r3, [r7, #20]
 800d722:	2206      	movs	r2, #6
 800d724:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	2204      	movs	r2, #4
 800d72a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800d72c:	f640 0306 	movw	r3, #2054	; 0x806
 800d730:	9300      	str	r3, [sp, #0]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	68ba      	ldr	r2, [r7, #8]
 800d736:	69b9      	ldr	r1, [r7, #24]
 800d738:	68f8      	ldr	r0, [r7, #12]
 800d73a:	f00b f943 	bl	80189c4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800d73e:	69b8      	ldr	r0, [r7, #24]
 800d740:	f004 f822 	bl	8011788 <pbuf_free>
  p = NULL;
 800d744:	2300      	movs	r3, #0
 800d746:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800d748:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d74c:	4618      	mov	r0, r3
 800d74e:	3720      	adds	r7, #32
 800d750:	46bd      	mov	sp, r7
 800d752:	bd80      	pop	{r7, pc}
 800d754:	0801bebc 	.word	0x0801bebc
 800d758:	0801c050 	.word	0x0801c050
 800d75c:	0801bf78 	.word	0x0801bf78
 800d760:	0801c100 	.word	0x0801c100
 800d764:	0801c134 	.word	0x0801c134

0800d768 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b088      	sub	sp, #32
 800d76c:	af04      	add	r7, sp, #16
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800d784:	2201      	movs	r2, #1
 800d786:	9203      	str	r2, [sp, #12]
 800d788:	68ba      	ldr	r2, [r7, #8]
 800d78a:	9202      	str	r2, [sp, #8]
 800d78c:	4a06      	ldr	r2, [pc, #24]	; (800d7a8 <etharp_request_dst+0x40>)
 800d78e:	9201      	str	r2, [sp, #4]
 800d790:	9300      	str	r3, [sp, #0]
 800d792:	4603      	mov	r3, r0
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	68f8      	ldr	r0, [r7, #12]
 800d798:	f7ff ff5a 	bl	800d650 <etharp_raw>
 800d79c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	0801ed84 	.word	0x0801ed84

0800d7ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	6078      	str	r0, [r7, #4]
 800d7b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800d7b6:	4a05      	ldr	r2, [pc, #20]	; (800d7cc <etharp_request+0x20>)
 800d7b8:	6839      	ldr	r1, [r7, #0]
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f7ff ffd4 	bl	800d768 <etharp_request_dst>
 800d7c0:	4603      	mov	r3, r0
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3708      	adds	r7, #8
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	0801ed7c 	.word	0x0801ed7c

0800d7d0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b08e      	sub	sp, #56	; 0x38
 800d7d4:	af04      	add	r7, sp, #16
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800d7da:	4b82      	ldr	r3, [pc, #520]	; (800d9e4 <icmp_input+0x214>)
 800d7dc:	689b      	ldr	r3, [r3, #8]
 800d7de:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800d7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e2:	781b      	ldrb	r3, [r3, #0]
 800d7e4:	f003 030f 	and.w	r3, r3, #15
 800d7e8:	b2db      	uxtb	r3, r3
 800d7ea:	009b      	lsls	r3, r3, #2
 800d7ec:	b2db      	uxtb	r3, r3
 800d7ee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800d7f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d7f2:	2b13      	cmp	r3, #19
 800d7f4:	f240 80de 	bls.w	800d9b4 <icmp_input+0x1e4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	895b      	ldrh	r3, [r3, #10]
 800d7fc:	2b03      	cmp	r3, #3
 800d7fe:	f240 80db 	bls.w	800d9b8 <icmp_input+0x1e8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800d80c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d810:	2b00      	cmp	r3, #0
 800d812:	f000 80c8 	beq.w	800d9a6 <icmp_input+0x1d6>
 800d816:	2b08      	cmp	r3, #8
 800d818:	f040 80c8 	bne.w	800d9ac <icmp_input+0x1dc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800d81c:	4b72      	ldr	r3, [pc, #456]	; (800d9e8 <icmp_input+0x218>)
 800d81e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d820:	4b70      	ldr	r3, [pc, #448]	; (800d9e4 <icmp_input+0x214>)
 800d822:	695b      	ldr	r3, [r3, #20]
 800d824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d828:	2be0      	cmp	r3, #224	; 0xe0
 800d82a:	f000 80cc 	beq.w	800d9c6 <icmp_input+0x1f6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800d82e:	4b6d      	ldr	r3, [pc, #436]	; (800d9e4 <icmp_input+0x214>)
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	4a6c      	ldr	r2, [pc, #432]	; (800d9e4 <icmp_input+0x214>)
 800d834:	6812      	ldr	r2, [r2, #0]
 800d836:	4611      	mov	r1, r2
 800d838:	4618      	mov	r0, r3
 800d83a:	f000 fc09 	bl	800e050 <ip4_addr_isbroadcast_u32>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	f040 80c2 	bne.w	800d9ca <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	891b      	ldrh	r3, [r3, #8]
 800d84a:	2b07      	cmp	r3, #7
 800d84c:	f240 80b6 	bls.w	800d9bc <icmp_input+0x1ec>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d850:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d852:	330e      	adds	r3, #14
 800d854:	4619      	mov	r1, r3
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f003 fece 	bl	80115f8 <pbuf_add_header>
 800d85c:	4603      	mov	r3, r0
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d04b      	beq.n	800d8fa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	891a      	ldrh	r2, [r3, #8]
 800d866:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d868:	4413      	add	r3, r2
 800d86a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	891b      	ldrh	r3, [r3, #8]
 800d870:	8b7a      	ldrh	r2, [r7, #26]
 800d872:	429a      	cmp	r2, r3
 800d874:	f0c0 80ab 	bcc.w	800d9ce <icmp_input+0x1fe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800d878:	8b7b      	ldrh	r3, [r7, #26]
 800d87a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d87e:	4619      	mov	r1, r3
 800d880:	200e      	movs	r0, #14
 800d882:	f003 fc6d 	bl	8011160 <pbuf_alloc>
 800d886:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	f000 80a1 	beq.w	800d9d2 <icmp_input+0x202>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	895b      	ldrh	r3, [r3, #10]
 800d894:	461a      	mov	r2, r3
 800d896:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d898:	3308      	adds	r3, #8
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d203      	bcs.n	800d8a6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800d89e:	6978      	ldr	r0, [r7, #20]
 800d8a0:	f003 ff72 	bl	8011788 <pbuf_free>
          goto icmperr;
 800d8a4:	e096      	b.n	800d9d4 <icmp_input+0x204>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d8ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f00b fb1c 	bl	8018eec <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800d8b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	6978      	ldr	r0, [r7, #20]
 800d8ba:	f003 fead 	bl	8011618 <pbuf_remove_header>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d009      	beq.n	800d8d8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800d8c4:	4b49      	ldr	r3, [pc, #292]	; (800d9ec <icmp_input+0x21c>)
 800d8c6:	22b6      	movs	r2, #182	; 0xb6
 800d8c8:	4949      	ldr	r1, [pc, #292]	; (800d9f0 <icmp_input+0x220>)
 800d8ca:	484a      	ldr	r0, [pc, #296]	; (800d9f4 <icmp_input+0x224>)
 800d8cc:	f00b fb3e 	bl	8018f4c <iprintf>
          pbuf_free(r);
 800d8d0:	6978      	ldr	r0, [r7, #20]
 800d8d2:	f003 ff59 	bl	8011788 <pbuf_free>
          goto icmperr;
 800d8d6:	e07d      	b.n	800d9d4 <icmp_input+0x204>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800d8d8:	6879      	ldr	r1, [r7, #4]
 800d8da:	6978      	ldr	r0, [r7, #20]
 800d8dc:	f004 f888 	bl	80119f0 <pbuf_copy>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d003      	beq.n	800d8ee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800d8e6:	6978      	ldr	r0, [r7, #20]
 800d8e8:	f003 ff4e 	bl	8011788 <pbuf_free>
          goto icmperr;
 800d8ec:	e072      	b.n	800d9d4 <icmp_input+0x204>
        }
        /* free the original p */
        pbuf_free(p);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f003 ff4a 	bl	8011788 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800d8f4:	697b      	ldr	r3, [r7, #20]
 800d8f6:	607b      	str	r3, [r7, #4]
 800d8f8:	e00f      	b.n	800d91a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800d8fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8fc:	330e      	adds	r3, #14
 800d8fe:	4619      	mov	r1, r3
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f003 fe89 	bl	8011618 <pbuf_remove_header>
 800d906:	4603      	mov	r3, r0
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d006      	beq.n	800d91a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800d90c:	4b37      	ldr	r3, [pc, #220]	; (800d9ec <icmp_input+0x21c>)
 800d90e:	22c7      	movs	r2, #199	; 0xc7
 800d910:	4939      	ldr	r1, [pc, #228]	; (800d9f8 <icmp_input+0x228>)
 800d912:	4838      	ldr	r0, [pc, #224]	; (800d9f4 <icmp_input+0x224>)
 800d914:	f00b fb1a 	bl	8018f4c <iprintf>
          goto icmperr;
 800d918:	e05c      	b.n	800d9d4 <icmp_input+0x204>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800d920:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d922:	4619      	mov	r1, r3
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f003 fe67 	bl	80115f8 <pbuf_add_header>
 800d92a:	4603      	mov	r3, r0
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d13c      	bne.n	800d9aa <icmp_input+0x1da>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800d93e:	4b29      	ldr	r3, [pc, #164]	; (800d9e4 <icmp_input+0x214>)
 800d940:	691a      	ldr	r2, [r3, #16]
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	2200      	movs	r2, #0
 800d94a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	885b      	ldrh	r3, [r3, #2]
 800d950:	b29b      	uxth	r3, r3
 800d952:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800d956:	4293      	cmp	r3, r2
 800d958:	d907      	bls.n	800d96a <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800d95a:	693b      	ldr	r3, [r7, #16]
 800d95c:	885b      	ldrh	r3, [r3, #2]
 800d95e:	b29b      	uxth	r3, r3
 800d960:	3309      	adds	r3, #9
 800d962:	b29a      	uxth	r2, r3
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	805a      	strh	r2, [r3, #2]
 800d968:	e006      	b.n	800d978 <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	885b      	ldrh	r3, [r3, #2]
 800d96e:	b29b      	uxth	r3, r3
 800d970:	3308      	adds	r3, #8
 800d972:	b29a      	uxth	r2, r3
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	22ff      	movs	r2, #255	; 0xff
 800d97c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	2200      	movs	r2, #0
 800d982:	729a      	strb	r2, [r3, #10]
 800d984:	2200      	movs	r2, #0
 800d986:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	9302      	str	r3, [sp, #8]
 800d98c:	2301      	movs	r3, #1
 800d98e:	9301      	str	r3, [sp, #4]
 800d990:	2300      	movs	r3, #0
 800d992:	9300      	str	r3, [sp, #0]
 800d994:	23ff      	movs	r3, #255	; 0xff
 800d996:	2200      	movs	r2, #0
 800d998:	69f9      	ldr	r1, [r7, #28]
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 fa80 	bl	800dea0 <ip4_output_if>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800d9a4:	e001      	b.n	800d9aa <icmp_input+0x1da>
      break;
 800d9a6:	bf00      	nop
 800d9a8:	e000      	b.n	800d9ac <icmp_input+0x1dc>
      break;
 800d9aa:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f003 feeb 	bl	8011788 <pbuf_free>
  return;
 800d9b2:	e013      	b.n	800d9dc <icmp_input+0x20c>
    goto lenerr;
 800d9b4:	bf00      	nop
 800d9b6:	e002      	b.n	800d9be <icmp_input+0x1ee>
    goto lenerr;
 800d9b8:	bf00      	nop
 800d9ba:	e000      	b.n	800d9be <icmp_input+0x1ee>
        goto lenerr;
 800d9bc:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f003 fee2 	bl	8011788 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d9c4:	e00a      	b.n	800d9dc <icmp_input+0x20c>
        goto icmperr;
 800d9c6:	bf00      	nop
 800d9c8:	e004      	b.n	800d9d4 <icmp_input+0x204>
        goto icmperr;
 800d9ca:	bf00      	nop
 800d9cc:	e002      	b.n	800d9d4 <icmp_input+0x204>
          goto icmperr;
 800d9ce:	bf00      	nop
 800d9d0:	e000      	b.n	800d9d4 <icmp_input+0x204>
          goto icmperr;
 800d9d2:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f003 fed7 	bl	8011788 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d9da:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d9dc:	3728      	adds	r7, #40	; 0x28
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}
 800d9e2:	bf00      	nop
 800d9e4:	24007410 	.word	0x24007410
 800d9e8:	24007424 	.word	0x24007424
 800d9ec:	0801c178 	.word	0x0801c178
 800d9f0:	0801c1f0 	.word	0x0801c1f0
 800d9f4:	0801c228 	.word	0x0801c228
 800d9f8:	0801c250 	.word	0x0801c250

0800d9fc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b082      	sub	sp, #8
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
 800da04:	460b      	mov	r3, r1
 800da06:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800da08:	78fb      	ldrb	r3, [r7, #3]
 800da0a:	461a      	mov	r2, r3
 800da0c:	2103      	movs	r1, #3
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 f814 	bl	800da3c <icmp_send_response>
}
 800da14:	bf00      	nop
 800da16:	3708      	adds	r7, #8
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}

0800da1c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	460b      	mov	r3, r1
 800da26:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800da28:	78fb      	ldrb	r3, [r7, #3]
 800da2a:	461a      	mov	r2, r3
 800da2c:	210b      	movs	r1, #11
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f804 	bl	800da3c <icmp_send_response>
}
 800da34:	bf00      	nop
 800da36:	3708      	adds	r7, #8
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b08c      	sub	sp, #48	; 0x30
 800da40:	af04      	add	r7, sp, #16
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	460b      	mov	r3, r1
 800da46:	70fb      	strb	r3, [r7, #3]
 800da48:	4613      	mov	r3, r2
 800da4a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800da4c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800da50:	2124      	movs	r1, #36	; 0x24
 800da52:	2022      	movs	r0, #34	; 0x22
 800da54:	f003 fb84 	bl	8011160 <pbuf_alloc>
 800da58:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800da5a:	69fb      	ldr	r3, [r7, #28]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d056      	beq.n	800db0e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800da60:	69fb      	ldr	r3, [r7, #28]
 800da62:	895b      	ldrh	r3, [r3, #10]
 800da64:	2b23      	cmp	r3, #35	; 0x23
 800da66:	d806      	bhi.n	800da76 <icmp_send_response+0x3a>
 800da68:	4b2b      	ldr	r3, [pc, #172]	; (800db18 <icmp_send_response+0xdc>)
 800da6a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800da6e:	492b      	ldr	r1, [pc, #172]	; (800db1c <icmp_send_response+0xe0>)
 800da70:	482b      	ldr	r0, [pc, #172]	; (800db20 <icmp_send_response+0xe4>)
 800da72:	f00b fa6b 	bl	8018f4c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800da7c:	69fb      	ldr	r3, [r7, #28]
 800da7e:	685b      	ldr	r3, [r3, #4]
 800da80:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800da82:	697b      	ldr	r3, [r7, #20]
 800da84:	78fa      	ldrb	r2, [r7, #3]
 800da86:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	78ba      	ldrb	r2, [r7, #2]
 800da8c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	2200      	movs	r2, #0
 800da92:	711a      	strb	r2, [r3, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	2200      	movs	r2, #0
 800da9c:	719a      	strb	r2, [r3, #6]
 800da9e:	2200      	movs	r2, #0
 800daa0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	685b      	ldr	r3, [r3, #4]
 800daa6:	f103 0008 	add.w	r0, r3, #8
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	221c      	movs	r2, #28
 800dab0:	4619      	mov	r1, r3
 800dab2:	f00b fa1b 	bl	8018eec <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800dab6:	69bb      	ldr	r3, [r7, #24]
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800dabc:	f107 030c 	add.w	r3, r7, #12
 800dac0:	4618      	mov	r0, r3
 800dac2:	f000 f82f 	bl	800db24 <ip4_route>
 800dac6:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d01b      	beq.n	800db06 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	2200      	movs	r2, #0
 800dad2:	709a      	strb	r2, [r3, #2]
 800dad4:	2200      	movs	r2, #0
 800dad6:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800dad8:	69fb      	ldr	r3, [r7, #28]
 800dada:	895b      	ldrh	r3, [r3, #10]
 800dadc:	4619      	mov	r1, r3
 800dade:	6978      	ldr	r0, [r7, #20]
 800dae0:	f002 faa9 	bl	8010036 <inet_chksum>
 800dae4:	4603      	mov	r3, r0
 800dae6:	461a      	mov	r2, r3
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800daec:	f107 020c 	add.w	r2, r7, #12
 800daf0:	693b      	ldr	r3, [r7, #16]
 800daf2:	9302      	str	r3, [sp, #8]
 800daf4:	2301      	movs	r3, #1
 800daf6:	9301      	str	r3, [sp, #4]
 800daf8:	2300      	movs	r3, #0
 800dafa:	9300      	str	r3, [sp, #0]
 800dafc:	23ff      	movs	r3, #255	; 0xff
 800dafe:	2100      	movs	r1, #0
 800db00:	69f8      	ldr	r0, [r7, #28]
 800db02:	f000 f9cd 	bl	800dea0 <ip4_output_if>
  }
  pbuf_free(q);
 800db06:	69f8      	ldr	r0, [r7, #28]
 800db08:	f003 fe3e 	bl	8011788 <pbuf_free>
 800db0c:	e000      	b.n	800db10 <icmp_send_response+0xd4>
    return;
 800db0e:	bf00      	nop
}
 800db10:	3720      	adds	r7, #32
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	0801c178 	.word	0x0801c178
 800db1c:	0801c284 	.word	0x0801c284
 800db20:	0801c228 	.word	0x0801c228

0800db24 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800db24:	b480      	push	{r7}
 800db26:	b085      	sub	sp, #20
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800db2c:	4b33      	ldr	r3, [pc, #204]	; (800dbfc <ip4_route+0xd8>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	60fb      	str	r3, [r7, #12]
 800db32:	e036      	b.n	800dba2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db3a:	f003 0301 	and.w	r3, r3, #1
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	2b00      	cmp	r3, #0
 800db42:	d02b      	beq.n	800db9c <ip4_route+0x78>
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db4a:	089b      	lsrs	r3, r3, #2
 800db4c:	f003 0301 	and.w	r3, r3, #1
 800db50:	b2db      	uxtb	r3, r3
 800db52:	2b00      	cmp	r3, #0
 800db54:	d022      	beq.n	800db9c <ip4_route+0x78>
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	3304      	adds	r3, #4
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d01d      	beq.n	800db9c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	3304      	adds	r3, #4
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	405a      	eors	r2, r3
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	3308      	adds	r3, #8
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4013      	ands	r3, r2
 800db74:	2b00      	cmp	r3, #0
 800db76:	d101      	bne.n	800db7c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	e038      	b.n	800dbee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800db82:	f003 0302 	and.w	r3, r3, #2
 800db86:	2b00      	cmp	r3, #0
 800db88:	d108      	bne.n	800db9c <ip4_route+0x78>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	330c      	adds	r3, #12
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	429a      	cmp	r2, r3
 800db96:	d101      	bne.n	800db9c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	e028      	b.n	800dbee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	60fb      	str	r3, [r7, #12]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d1c5      	bne.n	800db34 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dba8:	4b15      	ldr	r3, [pc, #84]	; (800dc00 <ip4_route+0xdc>)
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d01a      	beq.n	800dbe6 <ip4_route+0xc2>
 800dbb0:	4b13      	ldr	r3, [pc, #76]	; (800dc00 <ip4_route+0xdc>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbb8:	f003 0301 	and.w	r3, r3, #1
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d012      	beq.n	800dbe6 <ip4_route+0xc2>
 800dbc0:	4b0f      	ldr	r3, [pc, #60]	; (800dc00 <ip4_route+0xdc>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dbc8:	f003 0304 	and.w	r3, r3, #4
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d00a      	beq.n	800dbe6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dbd0:	4b0b      	ldr	r3, [pc, #44]	; (800dc00 <ip4_route+0xdc>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d004      	beq.n	800dbe6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	2b7f      	cmp	r3, #127	; 0x7f
 800dbe4:	d101      	bne.n	800dbea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	e001      	b.n	800dbee <ip4_route+0xca>
  }

  return netif_default;
 800dbea:	4b05      	ldr	r3, [pc, #20]	; (800dc00 <ip4_route+0xdc>)
 800dbec:	681b      	ldr	r3, [r3, #0]
}
 800dbee:	4618      	mov	r0, r3
 800dbf0:	3714      	adds	r7, #20
 800dbf2:	46bd      	mov	sp, r7
 800dbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf8:	4770      	bx	lr
 800dbfa:	bf00      	nop
 800dbfc:	2400b298 	.word	0x2400b298
 800dc00:	2400b29c 	.word	0x2400b29c

0800dc04 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b082      	sub	sp, #8
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dc12:	f003 0301 	and.w	r3, r3, #1
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d016      	beq.n	800dc4a <ip4_input_accept+0x46>
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	3304      	adds	r3, #4
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d011      	beq.n	800dc4a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dc26:	4b0b      	ldr	r3, [pc, #44]	; (800dc54 <ip4_input_accept+0x50>)
 800dc28:	695a      	ldr	r2, [r3, #20]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	3304      	adds	r3, #4
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	d008      	beq.n	800dc46 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800dc34:	4b07      	ldr	r3, [pc, #28]	; (800dc54 <ip4_input_accept+0x50>)
 800dc36:	695b      	ldr	r3, [r3, #20]
 800dc38:	6879      	ldr	r1, [r7, #4]
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f000 fa08 	bl	800e050 <ip4_addr_isbroadcast_u32>
 800dc40:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d001      	beq.n	800dc4a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800dc46:	2301      	movs	r3, #1
 800dc48:	e000      	b.n	800dc4c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800dc4a:	2300      	movs	r3, #0
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3708      	adds	r7, #8
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	24007410 	.word	0x24007410

0800dc58 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b086      	sub	sp, #24
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	685b      	ldr	r3, [r3, #4]
 800dc66:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	091b      	lsrs	r3, r3, #4
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	2b04      	cmp	r3, #4
 800dc72:	d004      	beq.n	800dc7e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800dc74:	6878      	ldr	r0, [r7, #4]
 800dc76:	f003 fd87 	bl	8011788 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	e107      	b.n	800de8e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800dc7e:	697b      	ldr	r3, [r7, #20]
 800dc80:	781b      	ldrb	r3, [r3, #0]
 800dc82:	f003 030f 	and.w	r3, r3, #15
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	009b      	lsls	r3, r3, #2
 800dc8a:	b2db      	uxtb	r3, r3
 800dc8c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	885b      	ldrh	r3, [r3, #2]
 800dc92:	b29b      	uxth	r3, r3
 800dc94:	4618      	mov	r0, r3
 800dc96:	f001 f993 	bl	800efc0 <lwip_htons>
 800dc9a:	4603      	mov	r3, r0
 800dc9c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	891b      	ldrh	r3, [r3, #8]
 800dca2:	89ba      	ldrh	r2, [r7, #12]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d204      	bcs.n	800dcb2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800dca8:	89bb      	ldrh	r3, [r7, #12]
 800dcaa:	4619      	mov	r1, r3
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f003 fbb3 	bl	8011418 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	895b      	ldrh	r3, [r3, #10]
 800dcb6:	89fa      	ldrh	r2, [r7, #14]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d807      	bhi.n	800dccc <ip4_input+0x74>
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	891b      	ldrh	r3, [r3, #8]
 800dcc0:	89ba      	ldrh	r2, [r7, #12]
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	d802      	bhi.n	800dccc <ip4_input+0x74>
 800dcc6:	89fb      	ldrh	r3, [r7, #14]
 800dcc8:	2b13      	cmp	r3, #19
 800dcca:	d804      	bhi.n	800dcd6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f003 fd5b 	bl	8011788 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	e0db      	b.n	800de8e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	691b      	ldr	r3, [r3, #16]
 800dcda:	4a6f      	ldr	r2, [pc, #444]	; (800de98 <ip4_input+0x240>)
 800dcdc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	68db      	ldr	r3, [r3, #12]
 800dce2:	4a6d      	ldr	r2, [pc, #436]	; (800de98 <ip4_input+0x240>)
 800dce4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800dce6:	4b6c      	ldr	r3, [pc, #432]	; (800de98 <ip4_input+0x240>)
 800dce8:	695b      	ldr	r3, [r3, #20]
 800dcea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcee:	2be0      	cmp	r3, #224	; 0xe0
 800dcf0:	d112      	bne.n	800dd18 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800dcf2:	683b      	ldr	r3, [r7, #0]
 800dcf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800dcf8:	f003 0301 	and.w	r3, r3, #1
 800dcfc:	b2db      	uxtb	r3, r3
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d007      	beq.n	800dd12 <ip4_input+0xba>
 800dd02:	683b      	ldr	r3, [r7, #0]
 800dd04:	3304      	adds	r3, #4
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d002      	beq.n	800dd12 <ip4_input+0xba>
      netif = inp;
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	613b      	str	r3, [r7, #16]
 800dd10:	e02a      	b.n	800dd68 <ip4_input+0x110>
    } else {
      netif = NULL;
 800dd12:	2300      	movs	r3, #0
 800dd14:	613b      	str	r3, [r7, #16]
 800dd16:	e027      	b.n	800dd68 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800dd18:	6838      	ldr	r0, [r7, #0]
 800dd1a:	f7ff ff73 	bl	800dc04 <ip4_input_accept>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d002      	beq.n	800dd2a <ip4_input+0xd2>
      netif = inp;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	613b      	str	r3, [r7, #16]
 800dd28:	e01e      	b.n	800dd68 <ip4_input+0x110>
    } else {
      netif = NULL;
 800dd2a:	2300      	movs	r3, #0
 800dd2c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800dd2e:	4b5a      	ldr	r3, [pc, #360]	; (800de98 <ip4_input+0x240>)
 800dd30:	695b      	ldr	r3, [r3, #20]
 800dd32:	b2db      	uxtb	r3, r3
 800dd34:	2b7f      	cmp	r3, #127	; 0x7f
 800dd36:	d017      	beq.n	800dd68 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800dd38:	4b58      	ldr	r3, [pc, #352]	; (800de9c <ip4_input+0x244>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	613b      	str	r3, [r7, #16]
 800dd3e:	e00e      	b.n	800dd5e <ip4_input+0x106>
          if (netif == inp) {
 800dd40:	693a      	ldr	r2, [r7, #16]
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d006      	beq.n	800dd56 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800dd48:	6938      	ldr	r0, [r7, #16]
 800dd4a:	f7ff ff5b 	bl	800dc04 <ip4_input_accept>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d108      	bne.n	800dd66 <ip4_input+0x10e>
 800dd54:	e000      	b.n	800dd58 <ip4_input+0x100>
            continue;
 800dd56:	bf00      	nop
        NETIF_FOREACH(netif) {
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	613b      	str	r3, [r7, #16]
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d1ed      	bne.n	800dd40 <ip4_input+0xe8>
 800dd64:	e000      	b.n	800dd68 <ip4_input+0x110>
            break;
 800dd66:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dd68:	4b4b      	ldr	r3, [pc, #300]	; (800de98 <ip4_input+0x240>)
 800dd6a:	691b      	ldr	r3, [r3, #16]
 800dd6c:	6839      	ldr	r1, [r7, #0]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f000 f96e 	bl	800e050 <ip4_addr_isbroadcast_u32>
 800dd74:	4603      	mov	r3, r0
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d105      	bne.n	800dd86 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800dd7a:	4b47      	ldr	r3, [pc, #284]	; (800de98 <ip4_input+0x240>)
 800dd7c:	691b      	ldr	r3, [r3, #16]
 800dd7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800dd82:	2be0      	cmp	r3, #224	; 0xe0
 800dd84:	d104      	bne.n	800dd90 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f003 fcfe 	bl	8011788 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	e07e      	b.n	800de8e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d104      	bne.n	800dda0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f003 fcf6 	bl	8011788 <pbuf_free>
    return ERR_OK;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	e076      	b.n	800de8e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	88db      	ldrh	r3, [r3, #6]
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	461a      	mov	r2, r3
 800dda8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800ddac:	4013      	ands	r3, r2
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d00b      	beq.n	800ddca <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 fdd0 	bl	800e958 <ip4_reass>
 800ddb8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d101      	bne.n	800ddc4 <ip4_input+0x16c>
      return ERR_OK;
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	e064      	b.n	800de8e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800ddca:	4a33      	ldr	r2, [pc, #204]	; (800de98 <ip4_input+0x240>)
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800ddd0:	4a31      	ldr	r2, [pc, #196]	; (800de98 <ip4_input+0x240>)
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800ddd6:	4a30      	ldr	r2, [pc, #192]	; (800de98 <ip4_input+0x240>)
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	f003 030f 	and.w	r3, r3, #15
 800dde4:	b2db      	uxtb	r3, r3
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	4b2a      	ldr	r3, [pc, #168]	; (800de98 <ip4_input+0x240>)
 800ddee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ddf0:	89fb      	ldrh	r3, [r7, #14]
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f003 fc0f 	bl	8011618 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ddfa:	697b      	ldr	r3, [r7, #20]
 800ddfc:	7a5b      	ldrb	r3, [r3, #9]
 800ddfe:	2b11      	cmp	r3, #17
 800de00:	d006      	beq.n	800de10 <ip4_input+0x1b8>
 800de02:	2b11      	cmp	r3, #17
 800de04:	dc13      	bgt.n	800de2e <ip4_input+0x1d6>
 800de06:	2b01      	cmp	r3, #1
 800de08:	d00c      	beq.n	800de24 <ip4_input+0x1cc>
 800de0a:	2b06      	cmp	r3, #6
 800de0c:	d005      	beq.n	800de1a <ip4_input+0x1c2>
 800de0e:	e00e      	b.n	800de2e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800de10:	6839      	ldr	r1, [r7, #0]
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f00a f876 	bl	8017f04 <udp_input>
        break;
 800de18:	e026      	b.n	800de68 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800de1a:	6839      	ldr	r1, [r7, #0]
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f005 ffeb 	bl	8013df8 <tcp_input>
        break;
 800de22:	e021      	b.n	800de68 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800de24:	6839      	ldr	r1, [r7, #0]
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f7ff fcd2 	bl	800d7d0 <icmp_input>
        break;
 800de2c:	e01c      	b.n	800de68 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800de2e:	4b1a      	ldr	r3, [pc, #104]	; (800de98 <ip4_input+0x240>)
 800de30:	695b      	ldr	r3, [r3, #20]
 800de32:	6939      	ldr	r1, [r7, #16]
 800de34:	4618      	mov	r0, r3
 800de36:	f000 f90b 	bl	800e050 <ip4_addr_isbroadcast_u32>
 800de3a:	4603      	mov	r3, r0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d10f      	bne.n	800de60 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800de40:	4b15      	ldr	r3, [pc, #84]	; (800de98 <ip4_input+0x240>)
 800de42:	695b      	ldr	r3, [r3, #20]
 800de44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800de48:	2be0      	cmp	r3, #224	; 0xe0
 800de4a:	d009      	beq.n	800de60 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800de4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800de50:	4619      	mov	r1, r3
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	f003 fc53 	bl	80116fe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800de58:	2102      	movs	r1, #2
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7ff fdce 	bl	800d9fc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f003 fc91 	bl	8011788 <pbuf_free>
        break;
 800de66:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800de68:	4b0b      	ldr	r3, [pc, #44]	; (800de98 <ip4_input+0x240>)
 800de6a:	2200      	movs	r2, #0
 800de6c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800de6e:	4b0a      	ldr	r3, [pc, #40]	; (800de98 <ip4_input+0x240>)
 800de70:	2200      	movs	r2, #0
 800de72:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800de74:	4b08      	ldr	r3, [pc, #32]	; (800de98 <ip4_input+0x240>)
 800de76:	2200      	movs	r2, #0
 800de78:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800de7a:	4b07      	ldr	r3, [pc, #28]	; (800de98 <ip4_input+0x240>)
 800de7c:	2200      	movs	r2, #0
 800de7e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800de80:	4b05      	ldr	r3, [pc, #20]	; (800de98 <ip4_input+0x240>)
 800de82:	2200      	movs	r2, #0
 800de84:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800de86:	4b04      	ldr	r3, [pc, #16]	; (800de98 <ip4_input+0x240>)
 800de88:	2200      	movs	r2, #0
 800de8a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800de8c:	2300      	movs	r3, #0
}
 800de8e:	4618      	mov	r0, r3
 800de90:	3718      	adds	r7, #24
 800de92:	46bd      	mov	sp, r7
 800de94:	bd80      	pop	{r7, pc}
 800de96:	bf00      	nop
 800de98:	24007410 	.word	0x24007410
 800de9c:	2400b298 	.word	0x2400b298

0800dea0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b08a      	sub	sp, #40	; 0x28
 800dea4:	af04      	add	r7, sp, #16
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	607a      	str	r2, [r7, #4]
 800deac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d009      	beq.n	800decc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d003      	beq.n	800dec6 <ip4_output_if+0x26>
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d102      	bne.n	800decc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800dec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec8:	3304      	adds	r3, #4
 800deca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800decc:	78fa      	ldrb	r2, [r7, #3]
 800dece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ded0:	9302      	str	r3, [sp, #8]
 800ded2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ded6:	9301      	str	r3, [sp, #4]
 800ded8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	4613      	mov	r3, r2
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	6979      	ldr	r1, [r7, #20]
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f000 f805 	bl	800def4 <ip4_output_if_src>
 800deea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800deec:	4618      	mov	r0, r3
 800deee:	3718      	adds	r7, #24
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b088      	sub	sp, #32
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
 800df00:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	7b9b      	ldrb	r3, [r3, #14]
 800df06:	2b01      	cmp	r3, #1
 800df08:	d006      	beq.n	800df18 <ip4_output_if_src+0x24>
 800df0a:	4b4b      	ldr	r3, [pc, #300]	; (800e038 <ip4_output_if_src+0x144>)
 800df0c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800df10:	494a      	ldr	r1, [pc, #296]	; (800e03c <ip4_output_if_src+0x148>)
 800df12:	484b      	ldr	r0, [pc, #300]	; (800e040 <ip4_output_if_src+0x14c>)
 800df14:	f00b f81a 	bl	8018f4c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d060      	beq.n	800dfe0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800df1e:	2314      	movs	r3, #20
 800df20:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800df22:	2114      	movs	r1, #20
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f003 fb67 	bl	80115f8 <pbuf_add_header>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d002      	beq.n	800df36 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800df30:	f06f 0301 	mvn.w	r3, #1
 800df34:	e07c      	b.n	800e030 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	895b      	ldrh	r3, [r3, #10]
 800df40:	2b13      	cmp	r3, #19
 800df42:	d806      	bhi.n	800df52 <ip4_output_if_src+0x5e>
 800df44:	4b3c      	ldr	r3, [pc, #240]	; (800e038 <ip4_output_if_src+0x144>)
 800df46:	f44f 7262 	mov.w	r2, #904	; 0x388
 800df4a:	493e      	ldr	r1, [pc, #248]	; (800e044 <ip4_output_if_src+0x150>)
 800df4c:	483c      	ldr	r0, [pc, #240]	; (800e040 <ip4_output_if_src+0x14c>)
 800df4e:	f00a fffd 	bl	8018f4c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800df52:	69fb      	ldr	r3, [r7, #28]
 800df54:	78fa      	ldrb	r2, [r7, #3]
 800df56:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800df58:	69fb      	ldr	r3, [r7, #28]
 800df5a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800df5e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800df68:	8b7b      	ldrh	r3, [r7, #26]
 800df6a:	089b      	lsrs	r3, r3, #2
 800df6c:	b29b      	uxth	r3, r3
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df74:	b2da      	uxtb	r2, r3
 800df76:	69fb      	ldr	r3, [r7, #28]
 800df78:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800df80:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	891b      	ldrh	r3, [r3, #8]
 800df86:	4618      	mov	r0, r3
 800df88:	f001 f81a 	bl	800efc0 <lwip_htons>
 800df8c:	4603      	mov	r3, r0
 800df8e:	461a      	mov	r2, r3
 800df90:	69fb      	ldr	r3, [r7, #28]
 800df92:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	2200      	movs	r2, #0
 800df98:	719a      	strb	r2, [r3, #6]
 800df9a:	2200      	movs	r2, #0
 800df9c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800df9e:	4b2a      	ldr	r3, [pc, #168]	; (800e048 <ip4_output_if_src+0x154>)
 800dfa0:	881b      	ldrh	r3, [r3, #0]
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f001 f80c 	bl	800efc0 <lwip_htons>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	461a      	mov	r2, r3
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800dfb0:	4b25      	ldr	r3, [pc, #148]	; (800e048 <ip4_output_if_src+0x154>)
 800dfb2:	881b      	ldrh	r3, [r3, #0]
 800dfb4:	3301      	adds	r3, #1
 800dfb6:	b29a      	uxth	r2, r3
 800dfb8:	4b23      	ldr	r3, [pc, #140]	; (800e048 <ip4_output_if_src+0x154>)
 800dfba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d104      	bne.n	800dfcc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800dfc2:	4b22      	ldr	r3, [pc, #136]	; (800e04c <ip4_output_if_src+0x158>)
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	60da      	str	r2, [r3, #12]
 800dfca:	e003      	b.n	800dfd4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	681a      	ldr	r2, [r3, #0]
 800dfd0:	69fb      	ldr	r3, [r7, #28]
 800dfd2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	729a      	strb	r2, [r3, #10]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	72da      	strb	r2, [r3, #11]
 800dfde:	e00f      	b.n	800e000 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	895b      	ldrh	r3, [r3, #10]
 800dfe4:	2b13      	cmp	r3, #19
 800dfe6:	d802      	bhi.n	800dfee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800dfe8:	f06f 0301 	mvn.w	r3, #1
 800dfec:	e020      	b.n	800e030 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	691b      	ldr	r3, [r3, #16]
 800dff8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800dffa:	f107 0314 	add.w	r3, r7, #20
 800dffe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800e000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e002:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e004:	2b00      	cmp	r3, #0
 800e006:	d00c      	beq.n	800e022 <ip4_output_if_src+0x12e>
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	891a      	ldrh	r2, [r3, #8]
 800e00c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e010:	429a      	cmp	r2, r3
 800e012:	d906      	bls.n	800e022 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800e014:	687a      	ldr	r2, [r7, #4]
 800e016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e018:	68f8      	ldr	r0, [r7, #12]
 800e01a:	f000 fe8b 	bl	800ed34 <ip4_frag>
 800e01e:	4603      	mov	r3, r0
 800e020:	e006      	b.n	800e030 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800e022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e024:	695b      	ldr	r3, [r3, #20]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	68f9      	ldr	r1, [r7, #12]
 800e02a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e02c:	4798      	blx	r3
 800e02e:	4603      	mov	r3, r0
}
 800e030:	4618      	mov	r0, r3
 800e032:	3720      	adds	r7, #32
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}
 800e038:	0801c2b0 	.word	0x0801c2b0
 800e03c:	0801c328 	.word	0x0801c328
 800e040:	0801c334 	.word	0x0801c334
 800e044:	0801c35c 	.word	0x0801c35c
 800e048:	24006cba 	.word	0x24006cba
 800e04c:	0801c38c 	.word	0x0801c38c

0800e050 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800e050:	b480      	push	{r7}
 800e052:	b085      	sub	sp, #20
 800e054:	af00      	add	r7, sp, #0
 800e056:	6078      	str	r0, [r7, #4]
 800e058:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e064:	d002      	beq.n	800e06c <ip4_addr_isbroadcast_u32+0x1c>
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d101      	bne.n	800e070 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800e06c:	2301      	movs	r3, #1
 800e06e:	e02a      	b.n	800e0c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800e070:	683b      	ldr	r3, [r7, #0]
 800e072:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e076:	f003 0302 	and.w	r3, r3, #2
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d101      	bne.n	800e082 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800e07e:	2300      	movs	r3, #0
 800e080:	e021      	b.n	800e0c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	3304      	adds	r3, #4
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d101      	bne.n	800e092 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	e019      	b.n	800e0c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	3304      	adds	r3, #4
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	405a      	eors	r2, r3
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	3308      	adds	r3, #8
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	4013      	ands	r3, r2
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10d      	bne.n	800e0c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	3308      	adds	r3, #8
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	43da      	mvns	r2, r3
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	3308      	adds	r3, #8
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d101      	bne.n	800e0c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e000      	b.n	800e0c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800e0c4:	2300      	movs	r3, #0
  }
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3714      	adds	r7, #20
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d0:	4770      	bx	lr

0800e0d2 <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 800e0d2:	b580      	push	{r7, lr}
 800e0d4:	b084      	sub	sp, #16
 800e0d6:	af00      	add	r7, sp, #0
 800e0d8:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 800e0da:	f107 030c 	add.w	r3, r7, #12
 800e0de:	4619      	mov	r1, r3
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 f80b 	bl	800e0fc <ip4addr_aton>
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d001      	beq.n	800e0f0 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	e001      	b.n	800e0f4 <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 800e0f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	3710      	adds	r7, #16
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b08a      	sub	sp, #40	; 0x28
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 800e106:	f107 030c 	add.w	r3, r7, #12
 800e10a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	781b      	ldrb	r3, [r3, #0]
 800e110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 800e114:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e118:	3301      	adds	r3, #1
 800e11a:	4a89      	ldr	r2, [pc, #548]	; (800e340 <ip4addr_aton+0x244>)
 800e11c:	4413      	add	r3, r2
 800e11e:	781b      	ldrb	r3, [r3, #0]
 800e120:	f003 0304 	and.w	r3, r3, #4
 800e124:	2b00      	cmp	r3, #0
 800e126:	d101      	bne.n	800e12c <ip4addr_aton+0x30>
      return 0;
 800e128:	2300      	movs	r3, #0
 800e12a:	e105      	b.n	800e338 <ip4addr_aton+0x23c>
    }
    val = 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 800e130:	230a      	movs	r3, #10
 800e132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 800e136:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e13a:	2b30      	cmp	r3, #48	; 0x30
 800e13c:	d11c      	bne.n	800e178 <ip4addr_aton+0x7c>
      c = *++cp;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	3301      	adds	r3, #1
 800e142:	607b      	str	r3, [r7, #4]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	781b      	ldrb	r3, [r3, #0]
 800e148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 800e14c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e150:	2b78      	cmp	r3, #120	; 0x78
 800e152:	d003      	beq.n	800e15c <ip4addr_aton+0x60>
 800e154:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e158:	2b58      	cmp	r3, #88	; 0x58
 800e15a:	d10a      	bne.n	800e172 <ip4addr_aton+0x76>
        base = 16;
 800e15c:	2310      	movs	r3, #16
 800e15e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	3301      	adds	r3, #1
 800e166:	607b      	str	r3, [r7, #4]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	781b      	ldrb	r3, [r3, #0]
 800e16c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e170:	e002      	b.n	800e178 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 800e172:	2308      	movs	r3, #8
 800e174:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 800e178:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e17c:	3301      	adds	r3, #1
 800e17e:	4a70      	ldr	r2, [pc, #448]	; (800e340 <ip4addr_aton+0x244>)
 800e180:	4413      	add	r3, r2
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	f003 0304 	and.w	r3, r3, #4
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d011      	beq.n	800e1b0 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 800e18c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e192:	fb02 f203 	mul.w	r2, r2, r3
 800e196:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e19a:	4413      	add	r3, r2
 800e19c:	3b30      	subs	r3, #48	; 0x30
 800e19e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	607b      	str	r3, [r7, #4]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800e1ae:	e7e3      	b.n	800e178 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 800e1b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e1b4:	2b10      	cmp	r3, #16
 800e1b6:	d127      	bne.n	800e208 <ip4addr_aton+0x10c>
 800e1b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e1bc:	3301      	adds	r3, #1
 800e1be:	4a60      	ldr	r2, [pc, #384]	; (800e340 <ip4addr_aton+0x244>)
 800e1c0:	4413      	add	r3, r2
 800e1c2:	781b      	ldrb	r3, [r3, #0]
 800e1c4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d01d      	beq.n	800e208 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 800e1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ce:	011b      	lsls	r3, r3, #4
 800e1d0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e1d4:	f102 010a 	add.w	r1, r2, #10
 800e1d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e1dc:	3201      	adds	r2, #1
 800e1de:	4858      	ldr	r0, [pc, #352]	; (800e340 <ip4addr_aton+0x244>)
 800e1e0:	4402      	add	r2, r0
 800e1e2:	7812      	ldrb	r2, [r2, #0]
 800e1e4:	f002 0203 	and.w	r2, r2, #3
 800e1e8:	2a02      	cmp	r2, #2
 800e1ea:	d101      	bne.n	800e1f0 <ip4addr_aton+0xf4>
 800e1ec:	2261      	movs	r2, #97	; 0x61
 800e1ee:	e000      	b.n	800e1f2 <ip4addr_aton+0xf6>
 800e1f0:	2241      	movs	r2, #65	; 0x41
 800e1f2:	1a8a      	subs	r2, r1, r2
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	607b      	str	r3, [r7, #4]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 800e206:	e7b7      	b.n	800e178 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 800e208:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e20c:	2b2e      	cmp	r3, #46	; 0x2e
 800e20e:	d114      	bne.n	800e23a <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 800e210:	f107 030c 	add.w	r3, r7, #12
 800e214:	330c      	adds	r3, #12
 800e216:	69fa      	ldr	r2, [r7, #28]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d301      	bcc.n	800e220 <ip4addr_aton+0x124>
        return 0;
 800e21c:	2300      	movs	r3, #0
 800e21e:	e08b      	b.n	800e338 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	1d1a      	adds	r2, r3, #4
 800e224:	61fa      	str	r2, [r7, #28]
 800e226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e228:	601a      	str	r2, [r3, #0]
      c = *++cp;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	3301      	adds	r3, #1
 800e22e:	607b      	str	r3, [r7, #4]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 800e238:	e76c      	b.n	800e114 <ip4addr_aton+0x18>
    } else {
      break;
 800e23a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 800e23c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00b      	beq.n	800e25c <ip4addr_aton+0x160>
 800e244:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e248:	3301      	adds	r3, #1
 800e24a:	4a3d      	ldr	r2, [pc, #244]	; (800e340 <ip4addr_aton+0x244>)
 800e24c:	4413      	add	r3, r2
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	f003 0308 	and.w	r3, r3, #8
 800e254:	2b00      	cmp	r3, #0
 800e256:	d101      	bne.n	800e25c <ip4addr_aton+0x160>
    return 0;
 800e258:	2300      	movs	r3, #0
 800e25a:	e06d      	b.n	800e338 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 800e25c:	f107 030c 	add.w	r3, r7, #12
 800e260:	69fa      	ldr	r2, [r7, #28]
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	109b      	asrs	r3, r3, #2
 800e266:	3301      	adds	r3, #1
 800e268:	2b04      	cmp	r3, #4
 800e26a:	d853      	bhi.n	800e314 <ip4addr_aton+0x218>
 800e26c:	a201      	add	r2, pc, #4	; (adr r2, 800e274 <ip4addr_aton+0x178>)
 800e26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e272:	bf00      	nop
 800e274:	0800e289 	.word	0x0800e289
 800e278:	0800e323 	.word	0x0800e323
 800e27c:	0800e28d 	.word	0x0800e28d
 800e280:	0800e2af 	.word	0x0800e2af
 800e284:	0800e2dd 	.word	0x0800e2dd

    case 0:
      return 0;       /* initial nondigit */
 800e288:	2300      	movs	r3, #0
 800e28a:	e055      	b.n	800e338 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 800e28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e28e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e292:	d301      	bcc.n	800e298 <ip4addr_aton+0x19c>
        return 0;
 800e294:	2300      	movs	r3, #0
 800e296:	e04f      	b.n	800e338 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	2bff      	cmp	r3, #255	; 0xff
 800e29c:	d901      	bls.n	800e2a2 <ip4addr_aton+0x1a6>
        return 0;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	e04a      	b.n	800e338 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	061b      	lsls	r3, r3, #24
 800e2a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e2ac:	e03a      	b.n	800e324 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 800e2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e2b4:	d301      	bcc.n	800e2ba <ip4addr_aton+0x1be>
        return 0;
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	e03e      	b.n	800e338 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2bff      	cmp	r3, #255	; 0xff
 800e2be:	d802      	bhi.n	800e2c6 <ip4addr_aton+0x1ca>
 800e2c0:	693b      	ldr	r3, [r7, #16]
 800e2c2:	2bff      	cmp	r3, #255	; 0xff
 800e2c4:	d901      	bls.n	800e2ca <ip4addr_aton+0x1ce>
        return 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	e036      	b.n	800e338 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	061a      	lsls	r2, r3, #24
 800e2ce:	693b      	ldr	r3, [r7, #16]
 800e2d0:	041b      	lsls	r3, r3, #16
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e2da:	e023      	b.n	800e324 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2de:	2bff      	cmp	r3, #255	; 0xff
 800e2e0:	d901      	bls.n	800e2e6 <ip4addr_aton+0x1ea>
        return 0;
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	e028      	b.n	800e338 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	2bff      	cmp	r3, #255	; 0xff
 800e2ea:	d805      	bhi.n	800e2f8 <ip4addr_aton+0x1fc>
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	2bff      	cmp	r3, #255	; 0xff
 800e2f0:	d802      	bhi.n	800e2f8 <ip4addr_aton+0x1fc>
 800e2f2:	697b      	ldr	r3, [r7, #20]
 800e2f4:	2bff      	cmp	r3, #255	; 0xff
 800e2f6:	d901      	bls.n	800e2fc <ip4addr_aton+0x200>
        return 0;
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	e01d      	b.n	800e338 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	061a      	lsls	r2, r3, #24
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	041b      	lsls	r3, r3, #16
 800e304:	431a      	orrs	r2, r3
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	021b      	lsls	r3, r3, #8
 800e30a:	4313      	orrs	r3, r2
 800e30c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e30e:	4313      	orrs	r3, r2
 800e310:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800e312:	e007      	b.n	800e324 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 800e314:	4b0b      	ldr	r3, [pc, #44]	; (800e344 <ip4addr_aton+0x248>)
 800e316:	22f9      	movs	r2, #249	; 0xf9
 800e318:	490b      	ldr	r1, [pc, #44]	; (800e348 <ip4addr_aton+0x24c>)
 800e31a:	480c      	ldr	r0, [pc, #48]	; (800e34c <ip4addr_aton+0x250>)
 800e31c:	f00a fe16 	bl	8018f4c <iprintf>
      break;
 800e320:	e000      	b.n	800e324 <ip4addr_aton+0x228>
      break;
 800e322:	bf00      	nop
  }
  if (addr) {
 800e324:	683b      	ldr	r3, [r7, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d005      	beq.n	800e336 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 800e32a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e32c:	f000 fe5d 	bl	800efea <lwip_htonl>
 800e330:	4602      	mov	r2, r0
 800e332:	683b      	ldr	r3, [r7, #0]
 800e334:	601a      	str	r2, [r3, #0]
  }
  return 1;
 800e336:	2301      	movs	r3, #1
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3728      	adds	r7, #40	; 0x28
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	0802eeb4 	.word	0x0802eeb4
 800e344:	0801c394 	.word	0x0801c394
 800e348:	0801c410 	.word	0x0801c410
 800e34c:	0801c41c 	.word	0x0801c41c

0800e350 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800e356:	2300      	movs	r3, #0
 800e358:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800e35a:	4b12      	ldr	r3, [pc, #72]	; (800e3a4 <ip_reass_tmr+0x54>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800e360:	e018      	b.n	800e394 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	7fdb      	ldrb	r3, [r3, #31]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00b      	beq.n	800e382 <ip_reass_tmr+0x32>
      r->timer--;
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	7fdb      	ldrb	r3, [r3, #31]
 800e36e:	3b01      	subs	r3, #1
 800e370:	b2da      	uxtb	r2, r3
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	60fb      	str	r3, [r7, #12]
 800e380:	e008      	b.n	800e394 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800e38c:	68b9      	ldr	r1, [r7, #8]
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 f80a 	bl	800e3a8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d1e3      	bne.n	800e362 <ip_reass_tmr+0x12>
    }
  }
}
 800e39a:	bf00      	nop
 800e39c:	bf00      	nop
 800e39e:	3710      	adds	r7, #16
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	24006cbc 	.word	0x24006cbc

0800e3a8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b088      	sub	sp, #32
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800e3b2:	2300      	movs	r3, #0
 800e3b4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	d105      	bne.n	800e3ca <ip_reass_free_complete_datagram+0x22>
 800e3be:	4b45      	ldr	r3, [pc, #276]	; (800e4d4 <ip_reass_free_complete_datagram+0x12c>)
 800e3c0:	22ab      	movs	r2, #171	; 0xab
 800e3c2:	4945      	ldr	r1, [pc, #276]	; (800e4d8 <ip_reass_free_complete_datagram+0x130>)
 800e3c4:	4845      	ldr	r0, [pc, #276]	; (800e4dc <ip_reass_free_complete_datagram+0x134>)
 800e3c6:	f00a fdc1 	bl	8018f4c <iprintf>
  if (prev != NULL) {
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d00a      	beq.n	800e3e6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800e3d0:	683b      	ldr	r3, [r7, #0]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	687a      	ldr	r2, [r7, #4]
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d005      	beq.n	800e3e6 <ip_reass_free_complete_datagram+0x3e>
 800e3da:	4b3e      	ldr	r3, [pc, #248]	; (800e4d4 <ip_reass_free_complete_datagram+0x12c>)
 800e3dc:	22ad      	movs	r2, #173	; 0xad
 800e3de:	4940      	ldr	r1, [pc, #256]	; (800e4e0 <ip_reass_free_complete_datagram+0x138>)
 800e3e0:	483e      	ldr	r0, [pc, #248]	; (800e4dc <ip_reass_free_complete_datagram+0x134>)
 800e3e2:	f00a fdb3 	bl	8018f4c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	685b      	ldr	r3, [r3, #4]
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800e3ee:	697b      	ldr	r3, [r7, #20]
 800e3f0:	889b      	ldrh	r3, [r3, #4]
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d12a      	bne.n	800e44e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	685b      	ldr	r3, [r3, #4]
 800e3fc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	681a      	ldr	r2, [r3, #0]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800e406:	69bb      	ldr	r3, [r7, #24]
 800e408:	6858      	ldr	r0, [r3, #4]
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	3308      	adds	r3, #8
 800e40e:	2214      	movs	r2, #20
 800e410:	4619      	mov	r1, r3
 800e412:	f00a fd6b 	bl	8018eec <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800e416:	2101      	movs	r1, #1
 800e418:	69b8      	ldr	r0, [r7, #24]
 800e41a:	f7ff faff 	bl	800da1c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800e41e:	69b8      	ldr	r0, [r7, #24]
 800e420:	f003 fa40 	bl	80118a4 <pbuf_clen>
 800e424:	4603      	mov	r3, r0
 800e426:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e428:	8bfa      	ldrh	r2, [r7, #30]
 800e42a:	8a7b      	ldrh	r3, [r7, #18]
 800e42c:	4413      	add	r3, r2
 800e42e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e432:	db05      	blt.n	800e440 <ip_reass_free_complete_datagram+0x98>
 800e434:	4b27      	ldr	r3, [pc, #156]	; (800e4d4 <ip_reass_free_complete_datagram+0x12c>)
 800e436:	22bc      	movs	r2, #188	; 0xbc
 800e438:	492a      	ldr	r1, [pc, #168]	; (800e4e4 <ip_reass_free_complete_datagram+0x13c>)
 800e43a:	4828      	ldr	r0, [pc, #160]	; (800e4dc <ip_reass_free_complete_datagram+0x134>)
 800e43c:	f00a fd86 	bl	8018f4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e440:	8bfa      	ldrh	r2, [r7, #30]
 800e442:	8a7b      	ldrh	r3, [r7, #18]
 800e444:	4413      	add	r3, r2
 800e446:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800e448:	69b8      	ldr	r0, [r7, #24]
 800e44a:	f003 f99d 	bl	8011788 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800e454:	e01f      	b.n	800e496 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800e456:	69bb      	ldr	r3, [r7, #24]
 800e458:	685b      	ldr	r3, [r3, #4]
 800e45a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800e45c:	69bb      	ldr	r3, [r7, #24]
 800e45e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800e466:	68f8      	ldr	r0, [r7, #12]
 800e468:	f003 fa1c 	bl	80118a4 <pbuf_clen>
 800e46c:	4603      	mov	r3, r0
 800e46e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800e470:	8bfa      	ldrh	r2, [r7, #30]
 800e472:	8a7b      	ldrh	r3, [r7, #18]
 800e474:	4413      	add	r3, r2
 800e476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e47a:	db05      	blt.n	800e488 <ip_reass_free_complete_datagram+0xe0>
 800e47c:	4b15      	ldr	r3, [pc, #84]	; (800e4d4 <ip_reass_free_complete_datagram+0x12c>)
 800e47e:	22cc      	movs	r2, #204	; 0xcc
 800e480:	4918      	ldr	r1, [pc, #96]	; (800e4e4 <ip_reass_free_complete_datagram+0x13c>)
 800e482:	4816      	ldr	r0, [pc, #88]	; (800e4dc <ip_reass_free_complete_datagram+0x134>)
 800e484:	f00a fd62 	bl	8018f4c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800e488:	8bfa      	ldrh	r2, [r7, #30]
 800e48a:	8a7b      	ldrh	r3, [r7, #18]
 800e48c:	4413      	add	r3, r2
 800e48e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800e490:	68f8      	ldr	r0, [r7, #12]
 800e492:	f003 f979 	bl	8011788 <pbuf_free>
  while (p != NULL) {
 800e496:	69bb      	ldr	r3, [r7, #24]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d1dc      	bne.n	800e456 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800e49c:	6839      	ldr	r1, [r7, #0]
 800e49e:	6878      	ldr	r0, [r7, #4]
 800e4a0:	f000 f8c2 	bl	800e628 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800e4a4:	4b10      	ldr	r3, [pc, #64]	; (800e4e8 <ip_reass_free_complete_datagram+0x140>)
 800e4a6:	881b      	ldrh	r3, [r3, #0]
 800e4a8:	8bfa      	ldrh	r2, [r7, #30]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	d905      	bls.n	800e4ba <ip_reass_free_complete_datagram+0x112>
 800e4ae:	4b09      	ldr	r3, [pc, #36]	; (800e4d4 <ip_reass_free_complete_datagram+0x12c>)
 800e4b0:	22d2      	movs	r2, #210	; 0xd2
 800e4b2:	490e      	ldr	r1, [pc, #56]	; (800e4ec <ip_reass_free_complete_datagram+0x144>)
 800e4b4:	4809      	ldr	r0, [pc, #36]	; (800e4dc <ip_reass_free_complete_datagram+0x134>)
 800e4b6:	f00a fd49 	bl	8018f4c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800e4ba:	4b0b      	ldr	r3, [pc, #44]	; (800e4e8 <ip_reass_free_complete_datagram+0x140>)
 800e4bc:	881a      	ldrh	r2, [r3, #0]
 800e4be:	8bfb      	ldrh	r3, [r7, #30]
 800e4c0:	1ad3      	subs	r3, r2, r3
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	4b08      	ldr	r3, [pc, #32]	; (800e4e8 <ip_reass_free_complete_datagram+0x140>)
 800e4c6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800e4c8:	8bfb      	ldrh	r3, [r7, #30]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3720      	adds	r7, #32
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}
 800e4d2:	bf00      	nop
 800e4d4:	0801c444 	.word	0x0801c444
 800e4d8:	0801c4c0 	.word	0x0801c4c0
 800e4dc:	0801c4cc 	.word	0x0801c4cc
 800e4e0:	0801c4f4 	.word	0x0801c4f4
 800e4e4:	0801c508 	.word	0x0801c508
 800e4e8:	24006cc0 	.word	0x24006cc0
 800e4ec:	0801c528 	.word	0x0801c528

0800e4f0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b08a      	sub	sp, #40	; 0x28
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800e4fe:	2300      	movs	r3, #0
 800e500:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800e502:	2300      	movs	r3, #0
 800e504:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800e506:	2300      	movs	r3, #0
 800e508:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800e50a:	2300      	movs	r3, #0
 800e50c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800e50e:	4b28      	ldr	r3, [pc, #160]	; (800e5b0 <ip_reass_remove_oldest_datagram+0xc0>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e514:	e030      	b.n	800e578 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800e516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e518:	695a      	ldr	r2, [r3, #20]
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	68db      	ldr	r3, [r3, #12]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d10c      	bne.n	800e53c <ip_reass_remove_oldest_datagram+0x4c>
 800e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e524:	699a      	ldr	r2, [r3, #24]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	691b      	ldr	r3, [r3, #16]
 800e52a:	429a      	cmp	r2, r3
 800e52c:	d106      	bne.n	800e53c <ip_reass_remove_oldest_datagram+0x4c>
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e530:	899a      	ldrh	r2, [r3, #12]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	889b      	ldrh	r3, [r3, #4]
 800e536:	b29b      	uxth	r3, r3
 800e538:	429a      	cmp	r2, r3
 800e53a:	d014      	beq.n	800e566 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	3301      	adds	r3, #1
 800e540:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800e542:	6a3b      	ldr	r3, [r7, #32]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d104      	bne.n	800e552 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800e548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	61bb      	str	r3, [r7, #24]
 800e550:	e009      	b.n	800e566 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800e552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e554:	7fda      	ldrb	r2, [r3, #31]
 800e556:	6a3b      	ldr	r3, [r7, #32]
 800e558:	7fdb      	ldrb	r3, [r3, #31]
 800e55a:	429a      	cmp	r2, r3
 800e55c:	d803      	bhi.n	800e566 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800e55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e560:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800e562:	69fb      	ldr	r3, [r7, #28]
 800e564:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800e566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d001      	beq.n	800e572 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800e56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e570:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800e572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800e578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d1cb      	bne.n	800e516 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800e57e:	6a3b      	ldr	r3, [r7, #32]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d008      	beq.n	800e596 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800e584:	69b9      	ldr	r1, [r7, #24]
 800e586:	6a38      	ldr	r0, [r7, #32]
 800e588:	f7ff ff0e 	bl	800e3a8 <ip_reass_free_complete_datagram>
 800e58c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	4413      	add	r3, r2
 800e594:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800e596:	697a      	ldr	r2, [r7, #20]
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	da02      	bge.n	800e5a4 <ip_reass_remove_oldest_datagram+0xb4>
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	2b01      	cmp	r3, #1
 800e5a2:	dcac      	bgt.n	800e4fe <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800e5a4:	697b      	ldr	r3, [r7, #20]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3728      	adds	r7, #40	; 0x28
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}
 800e5ae:	bf00      	nop
 800e5b0:	24006cbc 	.word	0x24006cbc

0800e5b4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e5be:	2004      	movs	r0, #4
 800e5c0:	f002 f9f2 	bl	80109a8 <memp_malloc>
 800e5c4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d110      	bne.n	800e5ee <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800e5cc:	6839      	ldr	r1, [r7, #0]
 800e5ce:	6878      	ldr	r0, [r7, #4]
 800e5d0:	f7ff ff8e 	bl	800e4f0 <ip_reass_remove_oldest_datagram>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	4293      	cmp	r3, r2
 800e5da:	dc03      	bgt.n	800e5e4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800e5dc:	2004      	movs	r0, #4
 800e5de:	f002 f9e3 	bl	80109a8 <memp_malloc>
 800e5e2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d101      	bne.n	800e5ee <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	e016      	b.n	800e61c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800e5ee:	2220      	movs	r2, #32
 800e5f0:	2100      	movs	r1, #0
 800e5f2:	68f8      	ldr	r0, [r7, #12]
 800e5f4:	f00a fca2 	bl	8018f3c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	220f      	movs	r2, #15
 800e5fc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800e5fe:	4b09      	ldr	r3, [pc, #36]	; (800e624 <ip_reass_enqueue_new_datagram+0x70>)
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800e606:	4a07      	ldr	r2, [pc, #28]	; (800e624 <ip_reass_enqueue_new_datagram+0x70>)
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	3308      	adds	r3, #8
 800e610:	2214      	movs	r2, #20
 800e612:	6879      	ldr	r1, [r7, #4]
 800e614:	4618      	mov	r0, r3
 800e616:	f00a fc69 	bl	8018eec <memcpy>
  return ipr;
 800e61a:	68fb      	ldr	r3, [r7, #12]
}
 800e61c:	4618      	mov	r0, r3
 800e61e:	3710      	adds	r7, #16
 800e620:	46bd      	mov	sp, r7
 800e622:	bd80      	pop	{r7, pc}
 800e624:	24006cbc 	.word	0x24006cbc

0800e628 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b082      	sub	sp, #8
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
 800e630:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800e632:	4b10      	ldr	r3, [pc, #64]	; (800e674 <ip_reass_dequeue_datagram+0x4c>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	687a      	ldr	r2, [r7, #4]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d104      	bne.n	800e646 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	4a0c      	ldr	r2, [pc, #48]	; (800e674 <ip_reass_dequeue_datagram+0x4c>)
 800e642:	6013      	str	r3, [r2, #0]
 800e644:	e00d      	b.n	800e662 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d106      	bne.n	800e65a <ip_reass_dequeue_datagram+0x32>
 800e64c:	4b0a      	ldr	r3, [pc, #40]	; (800e678 <ip_reass_dequeue_datagram+0x50>)
 800e64e:	f240 1245 	movw	r2, #325	; 0x145
 800e652:	490a      	ldr	r1, [pc, #40]	; (800e67c <ip_reass_dequeue_datagram+0x54>)
 800e654:	480a      	ldr	r0, [pc, #40]	; (800e680 <ip_reass_dequeue_datagram+0x58>)
 800e656:	f00a fc79 	bl	8018f4c <iprintf>
    prev->next = ipr->next;
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	681a      	ldr	r2, [r3, #0]
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800e662:	6879      	ldr	r1, [r7, #4]
 800e664:	2004      	movs	r0, #4
 800e666:	f002 fa15 	bl	8010a94 <memp_free>
}
 800e66a:	bf00      	nop
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	24006cbc 	.word	0x24006cbc
 800e678:	0801c444 	.word	0x0801c444
 800e67c:	0801c54c 	.word	0x0801c54c
 800e680:	0801c4cc 	.word	0x0801c4cc

0800e684 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b08c      	sub	sp, #48	; 0x30
 800e688:	af00      	add	r7, sp, #0
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	60b9      	str	r1, [r7, #8]
 800e68e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800e690:	2300      	movs	r3, #0
 800e692:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800e694:	2301      	movs	r3, #1
 800e696:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800e698:	68bb      	ldr	r3, [r7, #8]
 800e69a:	685b      	ldr	r3, [r3, #4]
 800e69c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	885b      	ldrh	r3, [r3, #2]
 800e6a2:	b29b      	uxth	r3, r3
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f000 fc8b 	bl	800efc0 <lwip_htons>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800e6ae:	69fb      	ldr	r3, [r7, #28]
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	f003 030f 	and.w	r3, r3, #15
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	009b      	lsls	r3, r3, #2
 800e6ba:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800e6bc:	7e7b      	ldrb	r3, [r7, #25]
 800e6be:	b29b      	uxth	r3, r3
 800e6c0:	8b7a      	ldrh	r2, [r7, #26]
 800e6c2:	429a      	cmp	r2, r3
 800e6c4:	d202      	bcs.n	800e6cc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e6c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e6ca:	e135      	b.n	800e938 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800e6cc:	7e7b      	ldrb	r3, [r7, #25]
 800e6ce:	b29b      	uxth	r3, r3
 800e6d0:	8b7a      	ldrh	r2, [r7, #26]
 800e6d2:	1ad3      	subs	r3, r2, r3
 800e6d4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	88db      	ldrh	r3, [r3, #6]
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f000 fc6f 	bl	800efc0 <lwip_htons>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	00db      	lsls	r3, r3, #3
 800e6ec:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800e6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	701a      	strb	r2, [r3, #0]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	705a      	strb	r2, [r3, #1]
 800e6fe:	2200      	movs	r2, #0
 800e700:	709a      	strb	r2, [r3, #2]
 800e702:	2200      	movs	r2, #0
 800e704:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800e706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e708:	8afa      	ldrh	r2, [r7, #22]
 800e70a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800e70c:	8afa      	ldrh	r2, [r7, #22]
 800e70e:	8b7b      	ldrh	r3, [r7, #26]
 800e710:	4413      	add	r3, r2
 800e712:	b29a      	uxth	r2, r3
 800e714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e716:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800e718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e71a:	88db      	ldrh	r3, [r3, #6]
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	8afa      	ldrh	r2, [r7, #22]
 800e720:	429a      	cmp	r2, r3
 800e722:	d902      	bls.n	800e72a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e728:	e106      	b.n	800e938 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	627b      	str	r3, [r7, #36]	; 0x24
 800e730:	e068      	b.n	800e804 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800e732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800e738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e73a:	889b      	ldrh	r3, [r3, #4]
 800e73c:	b29a      	uxth	r2, r3
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	889b      	ldrh	r3, [r3, #4]
 800e742:	b29b      	uxth	r3, r3
 800e744:	429a      	cmp	r2, r3
 800e746:	d235      	bcs.n	800e7b4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800e748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e74a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e74c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800e74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e750:	2b00      	cmp	r3, #0
 800e752:	d020      	beq.n	800e796 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800e754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e756:	889b      	ldrh	r3, [r3, #4]
 800e758:	b29a      	uxth	r2, r3
 800e75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75c:	88db      	ldrh	r3, [r3, #6]
 800e75e:	b29b      	uxth	r3, r3
 800e760:	429a      	cmp	r2, r3
 800e762:	d307      	bcc.n	800e774 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800e764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e766:	88db      	ldrh	r3, [r3, #6]
 800e768:	b29a      	uxth	r2, r3
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	889b      	ldrh	r3, [r3, #4]
 800e76e:	b29b      	uxth	r3, r3
 800e770:	429a      	cmp	r2, r3
 800e772:	d902      	bls.n	800e77a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e778:	e0de      	b.n	800e938 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800e77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e77c:	68ba      	ldr	r2, [r7, #8]
 800e77e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800e780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e782:	88db      	ldrh	r3, [r3, #6]
 800e784:	b29a      	uxth	r2, r3
 800e786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e788:	889b      	ldrh	r3, [r3, #4]
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	429a      	cmp	r2, r3
 800e78e:	d03d      	beq.n	800e80c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e790:	2300      	movs	r3, #0
 800e792:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800e794:	e03a      	b.n	800e80c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800e796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e798:	88db      	ldrh	r3, [r3, #6]
 800e79a:	b29a      	uxth	r2, r3
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	889b      	ldrh	r3, [r3, #4]
 800e7a0:	b29b      	uxth	r3, r3
 800e7a2:	429a      	cmp	r2, r3
 800e7a4:	d902      	bls.n	800e7ac <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e7a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7aa:	e0c5      	b.n	800e938 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	68ba      	ldr	r2, [r7, #8]
 800e7b0:	605a      	str	r2, [r3, #4]
      break;
 800e7b2:	e02b      	b.n	800e80c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800e7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b6:	889b      	ldrh	r3, [r3, #4]
 800e7b8:	b29a      	uxth	r2, r3
 800e7ba:	693b      	ldr	r3, [r7, #16]
 800e7bc:	889b      	ldrh	r3, [r3, #4]
 800e7be:	b29b      	uxth	r3, r3
 800e7c0:	429a      	cmp	r2, r3
 800e7c2:	d102      	bne.n	800e7ca <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e7c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7c8:	e0b6      	b.n	800e938 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800e7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7cc:	889b      	ldrh	r3, [r3, #4]
 800e7ce:	b29a      	uxth	r2, r3
 800e7d0:	693b      	ldr	r3, [r7, #16]
 800e7d2:	88db      	ldrh	r3, [r3, #6]
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	429a      	cmp	r2, r3
 800e7d8:	d202      	bcs.n	800e7e0 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800e7da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e7de:	e0ab      	b.n	800e938 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800e7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d009      	beq.n	800e7fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800e7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e8:	88db      	ldrh	r3, [r3, #6]
 800e7ea:	b29a      	uxth	r2, r3
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	889b      	ldrh	r3, [r3, #4]
 800e7f0:	b29b      	uxth	r3, r3
 800e7f2:	429a      	cmp	r2, r3
 800e7f4:	d001      	beq.n	800e7fa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	2b00      	cmp	r3, #0
 800e808:	d193      	bne.n	800e732 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800e80a:	e000      	b.n	800e80e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800e80c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800e80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e810:	2b00      	cmp	r3, #0
 800e812:	d12d      	bne.n	800e870 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e816:	2b00      	cmp	r3, #0
 800e818:	d01c      	beq.n	800e854 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	88db      	ldrh	r3, [r3, #6]
 800e81e:	b29a      	uxth	r2, r3
 800e820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e822:	889b      	ldrh	r3, [r3, #4]
 800e824:	b29b      	uxth	r3, r3
 800e826:	429a      	cmp	r2, r3
 800e828:	d906      	bls.n	800e838 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800e82a:	4b45      	ldr	r3, [pc, #276]	; (800e940 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e82c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800e830:	4944      	ldr	r1, [pc, #272]	; (800e944 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800e832:	4845      	ldr	r0, [pc, #276]	; (800e948 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e834:	f00a fb8a 	bl	8018f4c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800e838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83a:	68ba      	ldr	r2, [r7, #8]
 800e83c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800e83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e840:	88db      	ldrh	r3, [r3, #6]
 800e842:	b29a      	uxth	r2, r3
 800e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e846:	889b      	ldrh	r3, [r3, #4]
 800e848:	b29b      	uxth	r3, r3
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d010      	beq.n	800e870 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	623b      	str	r3, [r7, #32]
 800e852:	e00d      	b.n	800e870 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	685b      	ldr	r3, [r3, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d006      	beq.n	800e86a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800e85c:	4b38      	ldr	r3, [pc, #224]	; (800e940 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e85e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800e862:	493a      	ldr	r1, [pc, #232]	; (800e94c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800e864:	4838      	ldr	r0, [pc, #224]	; (800e948 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e866:	f00a fb71 	bl	8018f4c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	68ba      	ldr	r2, [r7, #8]
 800e86e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	2b00      	cmp	r3, #0
 800e874:	d105      	bne.n	800e882 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	7f9b      	ldrb	r3, [r3, #30]
 800e87a:	f003 0301 	and.w	r3, r3, #1
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d059      	beq.n	800e936 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800e882:	6a3b      	ldr	r3, [r7, #32]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d04f      	beq.n	800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d006      	beq.n	800e89e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	889b      	ldrh	r3, [r3, #4]
 800e898:	b29b      	uxth	r3, r3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d002      	beq.n	800e8a4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800e89e:	2300      	movs	r3, #0
 800e8a0:	623b      	str	r3, [r7, #32]
 800e8a2:	e041      	b.n	800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800e8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800e8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e8ae:	e012      	b.n	800e8d6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	685b      	ldr	r3, [r3, #4]
 800e8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800e8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b8:	88db      	ldrh	r3, [r3, #6]
 800e8ba:	b29a      	uxth	r2, r3
 800e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8be:	889b      	ldrh	r3, [r3, #4]
 800e8c0:	b29b      	uxth	r3, r3
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d002      	beq.n	800e8cc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	623b      	str	r3, [r7, #32]
            break;
 800e8ca:	e007      	b.n	800e8dc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800e8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ce:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800e8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800e8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d1e9      	bne.n	800e8b0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800e8dc:	6a3b      	ldr	r3, [r7, #32]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d022      	beq.n	800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d106      	bne.n	800e8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800e8ea:	4b15      	ldr	r3, [pc, #84]	; (800e940 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e8ec:	f240 12df 	movw	r2, #479	; 0x1df
 800e8f0:	4917      	ldr	r1, [pc, #92]	; (800e950 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e8f2:	4815      	ldr	r0, [pc, #84]	; (800e948 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e8f4:	f00a fb2a 	bl	8018f4c <iprintf>
          LWIP_ASSERT("sanity check",
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	685b      	ldr	r3, [r3, #4]
 800e8fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e900:	429a      	cmp	r2, r3
 800e902:	d106      	bne.n	800e912 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800e904:	4b0e      	ldr	r3, [pc, #56]	; (800e940 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e906:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e90a:	4911      	ldr	r1, [pc, #68]	; (800e950 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800e90c:	480e      	ldr	r0, [pc, #56]	; (800e948 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e90e:	f00a fb1d 	bl	8018f4c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800e912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d006      	beq.n	800e928 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800e91a:	4b09      	ldr	r3, [pc, #36]	; (800e940 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800e91c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800e920:	490c      	ldr	r1, [pc, #48]	; (800e954 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800e922:	4809      	ldr	r0, [pc, #36]	; (800e948 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800e924:	f00a fb12 	bl	8018f4c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800e928:	6a3b      	ldr	r3, [r7, #32]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	bf14      	ite	ne
 800e92e:	2301      	movne	r3, #1
 800e930:	2300      	moveq	r3, #0
 800e932:	b2db      	uxtb	r3, r3
 800e934:	e000      	b.n	800e938 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800e936:	2300      	movs	r3, #0
}
 800e938:	4618      	mov	r0, r3
 800e93a:	3730      	adds	r7, #48	; 0x30
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	0801c444 	.word	0x0801c444
 800e944:	0801c568 	.word	0x0801c568
 800e948:	0801c4cc 	.word	0x0801c4cc
 800e94c:	0801c588 	.word	0x0801c588
 800e950:	0801c5c0 	.word	0x0801c5c0
 800e954:	0801c5d0 	.word	0x0801c5d0

0800e958 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b08e      	sub	sp, #56	; 0x38
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	685b      	ldr	r3, [r3, #4]
 800e964:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800e966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e968:	781b      	ldrb	r3, [r3, #0]
 800e96a:	f003 030f 	and.w	r3, r3, #15
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	009b      	lsls	r3, r3, #2
 800e972:	b2db      	uxtb	r3, r3
 800e974:	2b14      	cmp	r3, #20
 800e976:	f040 8167 	bne.w	800ec48 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800e97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97c:	88db      	ldrh	r3, [r3, #6]
 800e97e:	b29b      	uxth	r3, r3
 800e980:	4618      	mov	r0, r3
 800e982:	f000 fb1d 	bl	800efc0 <lwip_htons>
 800e986:	4603      	mov	r3, r0
 800e988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	00db      	lsls	r3, r3, #3
 800e990:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800e992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e994:	885b      	ldrh	r3, [r3, #2]
 800e996:	b29b      	uxth	r3, r3
 800e998:	4618      	mov	r0, r3
 800e99a:	f000 fb11 	bl	800efc0 <lwip_htons>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800e9a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a4:	781b      	ldrb	r3, [r3, #0]
 800e9a6:	f003 030f 	and.w	r3, r3, #15
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	009b      	lsls	r3, r3, #2
 800e9ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800e9b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e9b6:	b29b      	uxth	r3, r3
 800e9b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	f0c0 8146 	bcc.w	800ec4c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800e9c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9c8:	1ad3      	subs	r3, r2, r3
 800e9ca:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f002 ff69 	bl	80118a4 <pbuf_clen>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800e9d6:	4b9f      	ldr	r3, [pc, #636]	; (800ec54 <ip4_reass+0x2fc>)
 800e9d8:	881b      	ldrh	r3, [r3, #0]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	8c3b      	ldrh	r3, [r7, #32]
 800e9de:	4413      	add	r3, r2
 800e9e0:	2b0a      	cmp	r3, #10
 800e9e2:	dd10      	ble.n	800ea06 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800e9e4:	8c3b      	ldrh	r3, [r7, #32]
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e9ea:	f7ff fd81 	bl	800e4f0 <ip_reass_remove_oldest_datagram>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f000 812d 	beq.w	800ec50 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800e9f6:	4b97      	ldr	r3, [pc, #604]	; (800ec54 <ip4_reass+0x2fc>)
 800e9f8:	881b      	ldrh	r3, [r3, #0]
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	8c3b      	ldrh	r3, [r7, #32]
 800e9fe:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ea00:	2b0a      	cmp	r3, #10
 800ea02:	f300 8125 	bgt.w	800ec50 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ea06:	4b94      	ldr	r3, [pc, #592]	; (800ec58 <ip4_reass+0x300>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	633b      	str	r3, [r7, #48]	; 0x30
 800ea0c:	e015      	b.n	800ea3a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800ea0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea10:	695a      	ldr	r2, [r3, #20]
 800ea12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	429a      	cmp	r2, r3
 800ea18:	d10c      	bne.n	800ea34 <ip4_reass+0xdc>
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea1c:	699a      	ldr	r2, [r3, #24]
 800ea1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea20:	691b      	ldr	r3, [r3, #16]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d106      	bne.n	800ea34 <ip4_reass+0xdc>
 800ea26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea28:	899a      	ldrh	r2, [r3, #12]
 800ea2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2c:	889b      	ldrh	r3, [r3, #4]
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d006      	beq.n	800ea42 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800ea34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	633b      	str	r3, [r7, #48]	; 0x30
 800ea3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1e6      	bne.n	800ea0e <ip4_reass+0xb6>
 800ea40:	e000      	b.n	800ea44 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ea42:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ea44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d109      	bne.n	800ea5e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ea4a:	8c3b      	ldrh	r3, [r7, #32]
 800ea4c:	4619      	mov	r1, r3
 800ea4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea50:	f7ff fdb0 	bl	800e5b4 <ip_reass_enqueue_new_datagram>
 800ea54:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ea56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d11c      	bne.n	800ea96 <ip4_reass+0x13e>
      goto nullreturn;
 800ea5c:	e109      	b.n	800ec72 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ea5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea60:	88db      	ldrh	r3, [r3, #6]
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	4618      	mov	r0, r3
 800ea66:	f000 faab 	bl	800efc0 <lwip_htons>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d110      	bne.n	800ea96 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ea74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea76:	89db      	ldrh	r3, [r3, #14]
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f000 faa1 	bl	800efc0 <lwip_htons>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d006      	beq.n	800ea96 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ea88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8a:	3308      	adds	r3, #8
 800ea8c:	2214      	movs	r2, #20
 800ea8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ea90:	4618      	mov	r0, r3
 800ea92:	f00a fa2b 	bl	8018eec <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ea96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea98:	88db      	ldrh	r3, [r3, #6]
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	f003 0320 	and.w	r3, r3, #32
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	bf0c      	ite	eq
 800eaa4:	2301      	moveq	r3, #1
 800eaa6:	2300      	movne	r3, #0
 800eaa8:	b2db      	uxtb	r3, r3
 800eaaa:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d00e      	beq.n	800ead0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800eab2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eab4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eab6:	4413      	add	r3, r2
 800eab8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800eaba:	8b7a      	ldrh	r2, [r7, #26]
 800eabc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eabe:	429a      	cmp	r2, r3
 800eac0:	f0c0 80a0 	bcc.w	800ec04 <ip4_reass+0x2ac>
 800eac4:	8b7b      	ldrh	r3, [r7, #26]
 800eac6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800eaca:	4293      	cmp	r3, r2
 800eacc:	f200 809a 	bhi.w	800ec04 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ead0:	69fa      	ldr	r2, [r7, #28]
 800ead2:	6879      	ldr	r1, [r7, #4]
 800ead4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ead6:	f7ff fdd5 	bl	800e684 <ip_reass_chain_frag_into_datagram_and_validate>
 800eada:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800eae2:	f000 8091 	beq.w	800ec08 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800eae6:	4b5b      	ldr	r3, [pc, #364]	; (800ec54 <ip4_reass+0x2fc>)
 800eae8:	881a      	ldrh	r2, [r3, #0]
 800eaea:	8c3b      	ldrh	r3, [r7, #32]
 800eaec:	4413      	add	r3, r2
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	4b58      	ldr	r3, [pc, #352]	; (800ec54 <ip4_reass+0x2fc>)
 800eaf2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d00d      	beq.n	800eb16 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800eafa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800eafc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eafe:	4413      	add	r3, r2
 800eb00:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800eb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb04:	8a7a      	ldrh	r2, [r7, #18]
 800eb06:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800eb08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb0a:	7f9b      	ldrb	r3, [r3, #30]
 800eb0c:	f043 0301 	orr.w	r3, r3, #1
 800eb10:	b2da      	uxtb	r2, r3
 800eb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb14:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d171      	bne.n	800ec00 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800eb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb1e:	8b9b      	ldrh	r3, [r3, #28]
 800eb20:	3314      	adds	r3, #20
 800eb22:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800eb24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	685b      	ldr	r3, [r3, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800eb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	685b      	ldr	r3, [r3, #4]
 800eb34:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800eb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb38:	3308      	adds	r3, #8
 800eb3a:	2214      	movs	r2, #20
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eb40:	f00a f9d4 	bl	8018eec <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800eb44:	8a3b      	ldrh	r3, [r7, #16]
 800eb46:	4618      	mov	r0, r3
 800eb48:	f000 fa3a 	bl	800efc0 <lwip_htons>
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	461a      	mov	r2, r3
 800eb50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb52:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800eb54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb56:	2200      	movs	r2, #0
 800eb58:	719a      	strb	r2, [r3, #6]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800eb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb60:	2200      	movs	r2, #0
 800eb62:	729a      	strb	r2, [r3, #10]
 800eb64:	2200      	movs	r2, #0
 800eb66:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800eb6e:	e00d      	b.n	800eb8c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800eb70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb72:	685b      	ldr	r3, [r3, #4]
 800eb74:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800eb76:	2114      	movs	r1, #20
 800eb78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb7a:	f002 fd4d 	bl	8011618 <pbuf_remove_header>
      pbuf_cat(p, r);
 800eb7e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f002 fecf 	bl	8011924 <pbuf_cat>
      r = iprh->next_pbuf;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800eb8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d1ee      	bne.n	800eb70 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800eb92:	4b31      	ldr	r3, [pc, #196]	; (800ec58 <ip4_reass+0x300>)
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d102      	bne.n	800eba2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eba0:	e010      	b.n	800ebc4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800eba2:	4b2d      	ldr	r3, [pc, #180]	; (800ec58 <ip4_reass+0x300>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eba8:	e007      	b.n	800ebba <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800ebaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebb0:	429a      	cmp	r2, r3
 800ebb2:	d006      	beq.n	800ebc2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800ebb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ebba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d1f4      	bne.n	800ebaa <ip4_reass+0x252>
 800ebc0:	e000      	b.n	800ebc4 <ip4_reass+0x26c>
          break;
 800ebc2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800ebc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ebc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ebc8:	f7ff fd2e 	bl	800e628 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f002 fe69 	bl	80118a4 <pbuf_clen>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800ebd6:	4b1f      	ldr	r3, [pc, #124]	; (800ec54 <ip4_reass+0x2fc>)
 800ebd8:	881b      	ldrh	r3, [r3, #0]
 800ebda:	8c3a      	ldrh	r2, [r7, #32]
 800ebdc:	429a      	cmp	r2, r3
 800ebde:	d906      	bls.n	800ebee <ip4_reass+0x296>
 800ebe0:	4b1e      	ldr	r3, [pc, #120]	; (800ec5c <ip4_reass+0x304>)
 800ebe2:	f240 229b 	movw	r2, #667	; 0x29b
 800ebe6:	491e      	ldr	r1, [pc, #120]	; (800ec60 <ip4_reass+0x308>)
 800ebe8:	481e      	ldr	r0, [pc, #120]	; (800ec64 <ip4_reass+0x30c>)
 800ebea:	f00a f9af 	bl	8018f4c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800ebee:	4b19      	ldr	r3, [pc, #100]	; (800ec54 <ip4_reass+0x2fc>)
 800ebf0:	881a      	ldrh	r2, [r3, #0]
 800ebf2:	8c3b      	ldrh	r3, [r7, #32]
 800ebf4:	1ad3      	subs	r3, r2, r3
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	4b16      	ldr	r3, [pc, #88]	; (800ec54 <ip4_reass+0x2fc>)
 800ebfa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	e03c      	b.n	800ec7a <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800ec00:	2300      	movs	r3, #0
 800ec02:	e03a      	b.n	800ec7a <ip4_reass+0x322>
      goto nullreturn_ipr;
 800ec04:	bf00      	nop
 800ec06:	e000      	b.n	800ec0a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800ec08:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d106      	bne.n	800ec1e <ip4_reass+0x2c6>
 800ec10:	4b12      	ldr	r3, [pc, #72]	; (800ec5c <ip4_reass+0x304>)
 800ec12:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800ec16:	4914      	ldr	r1, [pc, #80]	; (800ec68 <ip4_reass+0x310>)
 800ec18:	4812      	ldr	r0, [pc, #72]	; (800ec64 <ip4_reass+0x30c>)
 800ec1a:	f00a f997 	bl	8018f4c <iprintf>
  if (ipr->p == NULL) {
 800ec1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec20:	685b      	ldr	r3, [r3, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d124      	bne.n	800ec70 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800ec26:	4b0c      	ldr	r3, [pc, #48]	; (800ec58 <ip4_reass+0x300>)
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d006      	beq.n	800ec3e <ip4_reass+0x2e6>
 800ec30:	4b0a      	ldr	r3, [pc, #40]	; (800ec5c <ip4_reass+0x304>)
 800ec32:	f240 22ab 	movw	r2, #683	; 0x2ab
 800ec36:	490d      	ldr	r1, [pc, #52]	; (800ec6c <ip4_reass+0x314>)
 800ec38:	480a      	ldr	r0, [pc, #40]	; (800ec64 <ip4_reass+0x30c>)
 800ec3a:	f00a f987 	bl	8018f4c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800ec3e:	2100      	movs	r1, #0
 800ec40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec42:	f7ff fcf1 	bl	800e628 <ip_reass_dequeue_datagram>
 800ec46:	e014      	b.n	800ec72 <ip4_reass+0x31a>
    goto nullreturn;
 800ec48:	bf00      	nop
 800ec4a:	e012      	b.n	800ec72 <ip4_reass+0x31a>
    goto nullreturn;
 800ec4c:	bf00      	nop
 800ec4e:	e010      	b.n	800ec72 <ip4_reass+0x31a>
      goto nullreturn;
 800ec50:	bf00      	nop
 800ec52:	e00e      	b.n	800ec72 <ip4_reass+0x31a>
 800ec54:	24006cc0 	.word	0x24006cc0
 800ec58:	24006cbc 	.word	0x24006cbc
 800ec5c:	0801c444 	.word	0x0801c444
 800ec60:	0801c5f4 	.word	0x0801c5f4
 800ec64:	0801c4cc 	.word	0x0801c4cc
 800ec68:	0801c610 	.word	0x0801c610
 800ec6c:	0801c61c 	.word	0x0801c61c
  }

nullreturn:
 800ec70:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f002 fd88 	bl	8011788 <pbuf_free>
  return NULL;
 800ec78:	2300      	movs	r3, #0
}
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	3738      	adds	r7, #56	; 0x38
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop

0800ec84 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800ec88:	2005      	movs	r0, #5
 800ec8a:	f001 fe8d 	bl	80109a8 <memp_malloc>
 800ec8e:	4603      	mov	r3, r0
}
 800ec90:	4618      	mov	r0, r3
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d106      	bne.n	800ecb0 <ip_frag_free_pbuf_custom_ref+0x1c>
 800eca2:	4b07      	ldr	r3, [pc, #28]	; (800ecc0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800eca4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800eca8:	4906      	ldr	r1, [pc, #24]	; (800ecc4 <ip_frag_free_pbuf_custom_ref+0x30>)
 800ecaa:	4807      	ldr	r0, [pc, #28]	; (800ecc8 <ip_frag_free_pbuf_custom_ref+0x34>)
 800ecac:	f00a f94e 	bl	8018f4c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800ecb0:	6879      	ldr	r1, [r7, #4]
 800ecb2:	2005      	movs	r0, #5
 800ecb4:	f001 feee 	bl	8010a94 <memp_free>
}
 800ecb8:	bf00      	nop
 800ecba:	3708      	adds	r7, #8
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	bd80      	pop	{r7, pc}
 800ecc0:	0801c444 	.word	0x0801c444
 800ecc4:	0801c63c 	.word	0x0801c63c
 800ecc8:	0801c4cc 	.word	0x0801c4cc

0800eccc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b084      	sub	sp, #16
 800ecd0:	af00      	add	r7, sp, #0
 800ecd2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d106      	bne.n	800ecec <ipfrag_free_pbuf_custom+0x20>
 800ecde:	4b11      	ldr	r3, [pc, #68]	; (800ed24 <ipfrag_free_pbuf_custom+0x58>)
 800ece0:	f240 22ce 	movw	r2, #718	; 0x2ce
 800ece4:	4910      	ldr	r1, [pc, #64]	; (800ed28 <ipfrag_free_pbuf_custom+0x5c>)
 800ece6:	4811      	ldr	r0, [pc, #68]	; (800ed2c <ipfrag_free_pbuf_custom+0x60>)
 800ece8:	f00a f930 	bl	8018f4c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800ecec:	68fa      	ldr	r2, [r7, #12]
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	d006      	beq.n	800ed02 <ipfrag_free_pbuf_custom+0x36>
 800ecf4:	4b0b      	ldr	r3, [pc, #44]	; (800ed24 <ipfrag_free_pbuf_custom+0x58>)
 800ecf6:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ecfa:	490d      	ldr	r1, [pc, #52]	; (800ed30 <ipfrag_free_pbuf_custom+0x64>)
 800ecfc:	480b      	ldr	r0, [pc, #44]	; (800ed2c <ipfrag_free_pbuf_custom+0x60>)
 800ecfe:	f00a f925 	bl	8018f4c <iprintf>
  if (pcr->original != NULL) {
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	695b      	ldr	r3, [r3, #20]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d004      	beq.n	800ed14 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	695b      	ldr	r3, [r3, #20]
 800ed0e:	4618      	mov	r0, r3
 800ed10:	f002 fd3a 	bl	8011788 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800ed14:	68f8      	ldr	r0, [r7, #12]
 800ed16:	f7ff ffbd 	bl	800ec94 <ip_frag_free_pbuf_custom_ref>
}
 800ed1a:	bf00      	nop
 800ed1c:	3710      	adds	r7, #16
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	bd80      	pop	{r7, pc}
 800ed22:	bf00      	nop
 800ed24:	0801c444 	.word	0x0801c444
 800ed28:	0801c648 	.word	0x0801c648
 800ed2c:	0801c4cc 	.word	0x0801c4cc
 800ed30:	0801c654 	.word	0x0801c654

0800ed34 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b094      	sub	sp, #80	; 0x50
 800ed38:	af02      	add	r7, sp, #8
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800ed40:	2300      	movs	r3, #0
 800ed42:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ed4a:	3b14      	subs	r3, #20
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	da00      	bge.n	800ed52 <ip4_frag+0x1e>
 800ed50:	3307      	adds	r3, #7
 800ed52:	10db      	asrs	r3, r3, #3
 800ed54:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800ed56:	2314      	movs	r3, #20
 800ed58:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	685b      	ldr	r3, [r3, #4]
 800ed5e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800ed60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed62:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800ed64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	f003 030f 	and.w	r3, r3, #15
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	009b      	lsls	r3, r3, #2
 800ed70:	b2db      	uxtb	r3, r3
 800ed72:	2b14      	cmp	r3, #20
 800ed74:	d002      	beq.n	800ed7c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800ed76:	f06f 0305 	mvn.w	r3, #5
 800ed7a:	e110      	b.n	800ef9e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	895b      	ldrh	r3, [r3, #10]
 800ed80:	2b13      	cmp	r3, #19
 800ed82:	d809      	bhi.n	800ed98 <ip4_frag+0x64>
 800ed84:	4b88      	ldr	r3, [pc, #544]	; (800efa8 <ip4_frag+0x274>)
 800ed86:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800ed8a:	4988      	ldr	r1, [pc, #544]	; (800efac <ip4_frag+0x278>)
 800ed8c:	4888      	ldr	r0, [pc, #544]	; (800efb0 <ip4_frag+0x27c>)
 800ed8e:	f00a f8dd 	bl	8018f4c <iprintf>
 800ed92:	f06f 0305 	mvn.w	r3, #5
 800ed96:	e102      	b.n	800ef9e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800ed98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed9a:	88db      	ldrh	r3, [r3, #6]
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f000 f90e 	bl	800efc0 <lwip_htons>
 800eda4:	4603      	mov	r3, r0
 800eda6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800eda8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800edaa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800edae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800edb2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800edb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800edb8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	891b      	ldrh	r3, [r3, #8]
 800edbe:	3b14      	subs	r3, #20
 800edc0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800edc4:	e0e1      	b.n	800ef8a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800edc6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800edc8:	00db      	lsls	r3, r3, #3
 800edca:	b29b      	uxth	r3, r3
 800edcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800edd0:	4293      	cmp	r3, r2
 800edd2:	bf28      	it	cs
 800edd4:	4613      	movcs	r3, r2
 800edd6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800edd8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eddc:	2114      	movs	r1, #20
 800edde:	200e      	movs	r0, #14
 800ede0:	f002 f9be 	bl	8011160 <pbuf_alloc>
 800ede4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800ede6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 80d5 	beq.w	800ef98 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800edee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf0:	895b      	ldrh	r3, [r3, #10]
 800edf2:	2b13      	cmp	r3, #19
 800edf4:	d806      	bhi.n	800ee04 <ip4_frag+0xd0>
 800edf6:	4b6c      	ldr	r3, [pc, #432]	; (800efa8 <ip4_frag+0x274>)
 800edf8:	f44f 7249 	mov.w	r2, #804	; 0x324
 800edfc:	496d      	ldr	r1, [pc, #436]	; (800efb4 <ip4_frag+0x280>)
 800edfe:	486c      	ldr	r0, [pc, #432]	; (800efb0 <ip4_frag+0x27c>)
 800ee00:	f00a f8a4 	bl	8018f4c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800ee04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	2214      	movs	r2, #20
 800ee0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f00a f86d 	bl	8018eec <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800ee12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee14:	685b      	ldr	r3, [r3, #4]
 800ee16:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800ee18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ee1a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800ee1e:	e064      	b.n	800eeea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	895a      	ldrh	r2, [r3, #10]
 800ee24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ee26:	1ad3      	subs	r3, r2, r3
 800ee28:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	895b      	ldrh	r3, [r3, #10]
 800ee2e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d906      	bls.n	800ee42 <ip4_frag+0x10e>
 800ee34:	4b5c      	ldr	r3, [pc, #368]	; (800efa8 <ip4_frag+0x274>)
 800ee36:	f240 322d 	movw	r2, #813	; 0x32d
 800ee3a:	495f      	ldr	r1, [pc, #380]	; (800efb8 <ip4_frag+0x284>)
 800ee3c:	485c      	ldr	r0, [pc, #368]	; (800efb0 <ip4_frag+0x27c>)
 800ee3e:	f00a f885 	bl	8018f4c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800ee42:	8bfa      	ldrh	r2, [r7, #30]
 800ee44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ee48:	4293      	cmp	r3, r2
 800ee4a:	bf28      	it	cs
 800ee4c:	4613      	movcs	r3, r2
 800ee4e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800ee52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d105      	bne.n	800ee66 <ip4_frag+0x132>
        poff = 0;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	60fb      	str	r3, [r7, #12]
        continue;
 800ee64:	e041      	b.n	800eeea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800ee66:	f7ff ff0d 	bl	800ec84 <ip_frag_alloc_pbuf_custom_ref>
 800ee6a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800ee6c:	69bb      	ldr	r3, [r7, #24]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d103      	bne.n	800ee7a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800ee72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee74:	f002 fc88 	bl	8011788 <pbuf_free>
        goto memerr;
 800ee78:	e08f      	b.n	800ef9a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee7a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800ee80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800ee82:	4413      	add	r3, r2
 800ee84:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800ee88:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ee8c:	9201      	str	r2, [sp, #4]
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	4603      	mov	r3, r0
 800ee92:	2241      	movs	r2, #65	; 0x41
 800ee94:	2000      	movs	r0, #0
 800ee96:	f002 fa8b 	bl	80113b0 <pbuf_alloced_custom>
 800ee9a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d106      	bne.n	800eeb0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800eea2:	69b8      	ldr	r0, [r7, #24]
 800eea4:	f7ff fef6 	bl	800ec94 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800eea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eeaa:	f002 fc6d 	bl	8011788 <pbuf_free>
        goto memerr;
 800eeae:	e074      	b.n	800ef9a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800eeb0:	68f8      	ldr	r0, [r7, #12]
 800eeb2:	f002 fd0f 	bl	80118d4 <pbuf_ref>
      pcr->original = p;
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	68fa      	ldr	r2, [r7, #12]
 800eeba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	4a3f      	ldr	r2, [pc, #252]	; (800efbc <ip4_frag+0x288>)
 800eec0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800eec2:	6979      	ldr	r1, [r7, #20]
 800eec4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eec6:	f002 fd2d 	bl	8011924 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800eeca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800eece:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eed2:	1ad3      	subs	r3, r2, r3
 800eed4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800eed8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d004      	beq.n	800eeea <ip4_frag+0x1b6>
        poff = 0;
 800eee0:	2300      	movs	r3, #0
 800eee2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800eeea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d196      	bne.n	800ee20 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800eef2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800eef4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eef8:	4413      	add	r3, r2
 800eefa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800eefc:	68bb      	ldr	r3, [r7, #8]
 800eefe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ef00:	f1a3 0213 	sub.w	r2, r3, #19
 800ef04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef08:	429a      	cmp	r2, r3
 800ef0a:	bfcc      	ite	gt
 800ef0c:	2301      	movgt	r3, #1
 800ef0e:	2300      	movle	r3, #0
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800ef14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ef18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef1c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800ef1e:	6a3b      	ldr	r3, [r7, #32]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d002      	beq.n	800ef2a <ip4_frag+0x1f6>
 800ef24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d003      	beq.n	800ef32 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800ef2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ef30:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800ef32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800ef34:	4618      	mov	r0, r3
 800ef36:	f000 f843 	bl	800efc0 <lwip_htons>
 800ef3a:	4603      	mov	r3, r0
 800ef3c:	461a      	mov	r2, r3
 800ef3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef40:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800ef42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef44:	3314      	adds	r3, #20
 800ef46:	b29b      	uxth	r3, r3
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f000 f839 	bl	800efc0 <lwip_htons>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	461a      	mov	r2, r3
 800ef52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef54:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800ef56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef58:	2200      	movs	r2, #0
 800ef5a:	729a      	strb	r2, [r3, #10]
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	695b      	ldr	r3, [r3, #20]
 800ef64:	687a      	ldr	r2, [r7, #4]
 800ef66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ef68:	68b8      	ldr	r0, [r7, #8]
 800ef6a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800ef6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ef6e:	f002 fc0b 	bl	8011788 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800ef72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ef76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ef78:	1ad3      	subs	r3, r2, r3
 800ef7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800ef7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ef82:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ef84:	4413      	add	r3, r2
 800ef86:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800ef8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	f47f af19 	bne.w	800edc6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800ef94:	2300      	movs	r3, #0
 800ef96:	e002      	b.n	800ef9e <ip4_frag+0x26a>
      goto memerr;
 800ef98:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800ef9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ef9e:	4618      	mov	r0, r3
 800efa0:	3748      	adds	r7, #72	; 0x48
 800efa2:	46bd      	mov	sp, r7
 800efa4:	bd80      	pop	{r7, pc}
 800efa6:	bf00      	nop
 800efa8:	0801c444 	.word	0x0801c444
 800efac:	0801c660 	.word	0x0801c660
 800efb0:	0801c4cc 	.word	0x0801c4cc
 800efb4:	0801c67c 	.word	0x0801c67c
 800efb8:	0801c69c 	.word	0x0801c69c
 800efbc:	0800eccd 	.word	0x0800eccd

0800efc0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800efc0:	b480      	push	{r7}
 800efc2:	b083      	sub	sp, #12
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	4603      	mov	r3, r0
 800efc8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800efca:	88fb      	ldrh	r3, [r7, #6]
 800efcc:	021b      	lsls	r3, r3, #8
 800efce:	b21a      	sxth	r2, r3
 800efd0:	88fb      	ldrh	r3, [r7, #6]
 800efd2:	0a1b      	lsrs	r3, r3, #8
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	b21b      	sxth	r3, r3
 800efd8:	4313      	orrs	r3, r2
 800efda:	b21b      	sxth	r3, r3
 800efdc:	b29b      	uxth	r3, r3
}
 800efde:	4618      	mov	r0, r3
 800efe0:	370c      	adds	r7, #12
 800efe2:	46bd      	mov	sp, r7
 800efe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe8:	4770      	bx	lr

0800efea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800efea:	b480      	push	{r7}
 800efec:	b083      	sub	sp, #12
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	061a      	lsls	r2, r3, #24
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	021b      	lsls	r3, r3, #8
 800effa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800effe:	431a      	orrs	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	0a1b      	lsrs	r3, r3, #8
 800f004:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f008:	431a      	orrs	r2, r3
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	0e1b      	lsrs	r3, r3, #24
 800f00e:	4313      	orrs	r3, r2
}
 800f010:	4618      	mov	r0, r3
 800f012:	370c      	adds	r7, #12
 800f014:	46bd      	mov	sp, r7
 800f016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01a:	4770      	bx	lr

0800f01c <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 800f01c:	b480      	push	{r7}
 800f01e:	b087      	sub	sp, #28
 800f020:	af00      	add	r7, sp, #0
 800f022:	60f8      	str	r0, [r7, #12]
 800f024:	60b9      	str	r1, [r7, #8]
 800f026:	607a      	str	r2, [r7, #4]
  char c1, c2;

  do {
    c1 = *str1++;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	1c5a      	adds	r2, r3, #1
 800f02c:	60fa      	str	r2, [r7, #12]
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	75fb      	strb	r3, [r7, #23]
    c2 = *str2++;
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	1c5a      	adds	r2, r3, #1
 800f036:	60ba      	str	r2, [r7, #8]
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	75bb      	strb	r3, [r7, #22]
    if (c1 != c2) {
 800f03c:	7dfa      	ldrb	r2, [r7, #23]
 800f03e:	7dbb      	ldrb	r3, [r7, #22]
 800f040:	429a      	cmp	r2, r3
 800f042:	d016      	beq.n	800f072 <lwip_strnicmp+0x56>
      char c1_upc = c1 | 0x20;
 800f044:	7dfb      	ldrb	r3, [r7, #23]
 800f046:	f043 0320 	orr.w	r3, r3, #32
 800f04a:	757b      	strb	r3, [r7, #21]
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800f04c:	7d7b      	ldrb	r3, [r7, #21]
 800f04e:	2b60      	cmp	r3, #96	; 0x60
 800f050:	d90c      	bls.n	800f06c <lwip_strnicmp+0x50>
 800f052:	7d7b      	ldrb	r3, [r7, #21]
 800f054:	2b7a      	cmp	r3, #122	; 0x7a
 800f056:	d809      	bhi.n	800f06c <lwip_strnicmp+0x50>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
 800f058:	7dbb      	ldrb	r3, [r7, #22]
 800f05a:	f043 0320 	orr.w	r3, r3, #32
 800f05e:	753b      	strb	r3, [r7, #20]
        if (c1_upc != c2_upc) {
 800f060:	7d7a      	ldrb	r2, [r7, #21]
 800f062:	7d3b      	ldrb	r3, [r7, #20]
 800f064:	429a      	cmp	r2, r3
 800f066:	d003      	beq.n	800f070 <lwip_strnicmp+0x54>
          /* still not equal */
          /* don't care for < or > */
          return 1;
 800f068:	2301      	movs	r3, #1
 800f06a:	e00c      	b.n	800f086 <lwip_strnicmp+0x6a>
        }
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
 800f06c:	2301      	movs	r3, #1
 800f06e:	e00a      	b.n	800f086 <lwip_strnicmp+0x6a>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 800f070:	bf00      	nop
      }
    }
    len--;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	3b01      	subs	r3, #1
 800f076:	607b      	str	r3, [r7, #4]
  } while ((len != 0) && (c1 != 0));
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d002      	beq.n	800f084 <lwip_strnicmp+0x68>
 800f07e:	7dfb      	ldrb	r3, [r7, #23]
 800f080:	2b00      	cmp	r3, #0
 800f082:	d1d1      	bne.n	800f028 <lwip_strnicmp+0xc>
  return 0;
 800f084:	2300      	movs	r3, #0
}
 800f086:	4618      	mov	r0, r3
 800f088:	371c      	adds	r7, #28
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr

0800f092 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800f092:	b480      	push	{r7}
 800f094:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800f096:	bf00      	nop
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr

0800f0a0 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800f0a4:	f000 fc54 	bl	800f950 <dns_check_entries>
}
 800f0a8:	bf00      	nop
 800f0aa:	bd80      	pop	{r7, pc}

0800f0ac <dns_lookup>:
 *         was not found in the cached dns_table.
 * @return ERR_OK if found, ERR_ARG if not found
 */
static err_t
dns_lookup(const char *name, ip_addr_t *addr LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype))
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b084      	sub	sp, #16
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
 800f0b4:	6039      	str	r1, [r7, #0]
    return ERR_OK;
  }
#endif /* DNS_LOOKUP_LOCAL_EXTERN */

  /* Walk through name list, return entry if found. If not, return NULL. */
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	73fb      	strb	r3, [r7, #15]
 800f0ba:	e02e      	b.n	800f11a <dns_lookup+0x6e>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800f0bc:	7bfa      	ldrb	r2, [r7, #15]
 800f0be:	491b      	ldr	r1, [pc, #108]	; (800f12c <dns_lookup+0x80>)
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	011b      	lsls	r3, r3, #4
 800f0c4:	4413      	add	r3, r2
 800f0c6:	011b      	lsls	r3, r3, #4
 800f0c8:	440b      	add	r3, r1
 800f0ca:	330a      	adds	r3, #10
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	2b03      	cmp	r3, #3
 800f0d0:	d120      	bne.n	800f114 <dns_lookup+0x68>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 800f0d2:	7bfa      	ldrb	r2, [r7, #15]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	011b      	lsls	r3, r3, #4
 800f0d8:	4413      	add	r3, r2
 800f0da:	011b      	lsls	r3, r3, #4
 800f0dc:	3310      	adds	r3, #16
 800f0de:	4a13      	ldr	r2, [pc, #76]	; (800f12c <dns_lookup+0x80>)
 800f0e0:	4413      	add	r3, r2
 800f0e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	6878      	ldr	r0, [r7, #4]
 800f0ea:	f7ff ff97 	bl	800f01c <lwip_strnicmp>
 800f0ee:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d10f      	bne.n	800f114 <dns_lookup+0x68>
        LWIP_DNS_ADDRTYPE_MATCH_IP(dns_addrtype, dns_table[i].ipaddr)) {
      LWIP_DEBUGF(DNS_DEBUG, ("dns_lookup: \"%s\": found = ", name));
      ip_addr_debug_print_val(DNS_DEBUG, dns_table[i].ipaddr);
      LWIP_DEBUGF(DNS_DEBUG, ("\n"));
      if (addr) {
 800f0f4:	683b      	ldr	r3, [r7, #0]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d00a      	beq.n	800f110 <dns_lookup+0x64>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 800f0fa:	7bfa      	ldrb	r2, [r7, #15]
 800f0fc:	490b      	ldr	r1, [pc, #44]	; (800f12c <dns_lookup+0x80>)
 800f0fe:	4613      	mov	r3, r2
 800f100:	011b      	lsls	r3, r3, #4
 800f102:	4413      	add	r3, r2
 800f104:	011b      	lsls	r3, r3, #4
 800f106:	440b      	add	r3, r1
 800f108:	3304      	adds	r3, #4
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	601a      	str	r2, [r3, #0]
      }
      return ERR_OK;
 800f110:	2300      	movs	r3, #0
 800f112:	e007      	b.n	800f124 <dns_lookup+0x78>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f114:	7bfb      	ldrb	r3, [r7, #15]
 800f116:	3301      	adds	r3, #1
 800f118:	73fb      	strb	r3, [r7, #15]
 800f11a:	7bfb      	ldrb	r3, [r7, #15]
 800f11c:	2b03      	cmp	r3, #3
 800f11e:	d9cd      	bls.n	800f0bc <dns_lookup+0x10>
    }
  }

  return ERR_ARG;
 800f120:	f06f 030f 	mvn.w	r3, #15
}
 800f124:	4618      	mov	r0, r3
 800f126:	3710      	adds	r7, #16
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}
 800f12c:	24006cd8 	.word	0x24006cd8

0800f130 <dns_compare_name>:
 * @param start_offset offset into p where the name starts
 * @return 0xFFFF: names differ, other: names equal -> offset behind name
 */
static u16_t
dns_compare_name(const char *query, struct pbuf *p, u16_t start_offset)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b088      	sub	sp, #32
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	60b9      	str	r1, [r7, #8]
 800f13a:	4613      	mov	r3, r2
 800f13c:	80fb      	strh	r3, [r7, #6]
  int n;
  u16_t response_offset = start_offset;
 800f13e:	88fb      	ldrh	r3, [r7, #6]
 800f140:	837b      	strh	r3, [r7, #26]

  do {
    n = pbuf_try_get_at(p, response_offset);
 800f142:	8b7b      	ldrh	r3, [r7, #26]
 800f144:	4619      	mov	r1, r3
 800f146:	68b8      	ldr	r0, [r7, #8]
 800f148:	f002 ff00 	bl	8011f4c <pbuf_try_get_at>
 800f14c:	61f8      	str	r0, [r7, #28]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 800f14e:	69fb      	ldr	r3, [r7, #28]
 800f150:	2b00      	cmp	r3, #0
 800f152:	db04      	blt.n	800f15e <dns_compare_name+0x2e>
 800f154:	8b7b      	ldrh	r3, [r7, #26]
 800f156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d102      	bne.n	800f164 <dns_compare_name+0x34>
      /* error or overflow */
      return 0xFFFF;
 800f15e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f162:	e06c      	b.n	800f23e <dns_compare_name+0x10e>
    }
    response_offset++;
 800f164:	8b7b      	ldrh	r3, [r7, #26]
 800f166:	3301      	adds	r3, #1
 800f168:	837b      	strh	r3, [r7, #26]
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 800f16a:	69fb      	ldr	r3, [r7, #28]
 800f16c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f170:	2bc0      	cmp	r3, #192	; 0xc0
 800f172:	d144      	bne.n	800f1fe <dns_compare_name+0xce>
      /* Compressed name: cannot be equal since we don't send them */
      return 0xFFFF;
 800f174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f178:	e061      	b.n	800f23e <dns_compare_name+0x10e>
    } else {
      /* Not compressed name */
      while (n > 0) {
        int c = pbuf_try_get_at(p, response_offset);
 800f17a:	8b7b      	ldrh	r3, [r7, #26]
 800f17c:	4619      	mov	r1, r3
 800f17e:	68b8      	ldr	r0, [r7, #8]
 800f180:	f002 fee4 	bl	8011f4c <pbuf_try_get_at>
 800f184:	6178      	str	r0, [r7, #20]
        if (c < 0) {
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	da02      	bge.n	800f192 <dns_compare_name+0x62>
          return 0xFFFF;
 800f18c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f190:	e055      	b.n	800f23e <dns_compare_name+0x10e>
        }
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	74fb      	strb	r3, [r7, #19]
 800f198:	7cfb      	ldrb	r3, [r7, #19]
 800f19a:	3301      	adds	r3, #1
 800f19c:	4a2a      	ldr	r2, [pc, #168]	; (800f248 <dns_compare_name+0x118>)
 800f19e:	4413      	add	r3, r2
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	f003 0303 	and.w	r3, r3, #3
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d103      	bne.n	800f1b2 <dns_compare_name+0x82>
 800f1aa:	7cfb      	ldrb	r3, [r7, #19]
 800f1ac:	f103 0220 	add.w	r2, r3, #32
 800f1b0:	e000      	b.n	800f1b4 <dns_compare_name+0x84>
 800f1b2:	7cfa      	ldrb	r2, [r7, #19]
 800f1b4:	697b      	ldr	r3, [r7, #20]
 800f1b6:	74bb      	strb	r3, [r7, #18]
 800f1b8:	7cbb      	ldrb	r3, [r7, #18]
 800f1ba:	3301      	adds	r3, #1
 800f1bc:	4922      	ldr	r1, [pc, #136]	; (800f248 <dns_compare_name+0x118>)
 800f1be:	440b      	add	r3, r1
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	f003 0303 	and.w	r3, r3, #3
 800f1c6:	2b01      	cmp	r3, #1
 800f1c8:	d102      	bne.n	800f1d0 <dns_compare_name+0xa0>
 800f1ca:	7cbb      	ldrb	r3, [r7, #18]
 800f1cc:	3320      	adds	r3, #32
 800f1ce:	e000      	b.n	800f1d2 <dns_compare_name+0xa2>
 800f1d0:	7cbb      	ldrb	r3, [r7, #18]
 800f1d2:	429a      	cmp	r2, r3
 800f1d4:	d002      	beq.n	800f1dc <dns_compare_name+0xac>
          return 0xFFFF;
 800f1d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f1da:	e030      	b.n	800f23e <dns_compare_name+0x10e>
        }
        if (response_offset == 0xFFFF) {
 800f1dc:	8b7b      	ldrh	r3, [r7, #26]
 800f1de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1e2:	4293      	cmp	r3, r2
 800f1e4:	d102      	bne.n	800f1ec <dns_compare_name+0xbc>
          /* would overflow */
          return 0xFFFF;
 800f1e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f1ea:	e028      	b.n	800f23e <dns_compare_name+0x10e>
        }
        response_offset++;
 800f1ec:	8b7b      	ldrh	r3, [r7, #26]
 800f1ee:	3301      	adds	r3, #1
 800f1f0:	837b      	strh	r3, [r7, #26]
        ++query;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	3301      	adds	r3, #1
 800f1f6:	60fb      	str	r3, [r7, #12]
        --n;
 800f1f8:	69fb      	ldr	r3, [r7, #28]
 800f1fa:	3b01      	subs	r3, #1
 800f1fc:	61fb      	str	r3, [r7, #28]
      while (n > 0) {
 800f1fe:	69fb      	ldr	r3, [r7, #28]
 800f200:	2b00      	cmp	r3, #0
 800f202:	dcba      	bgt.n	800f17a <dns_compare_name+0x4a>
      }
      ++query;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	3301      	adds	r3, #1
 800f208:	60fb      	str	r3, [r7, #12]
    }
    n = pbuf_try_get_at(p, response_offset);
 800f20a:	8b7b      	ldrh	r3, [r7, #26]
 800f20c:	4619      	mov	r1, r3
 800f20e:	68b8      	ldr	r0, [r7, #8]
 800f210:	f002 fe9c 	bl	8011f4c <pbuf_try_get_at>
 800f214:	61f8      	str	r0, [r7, #28]
    if (n < 0) {
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	da02      	bge.n	800f222 <dns_compare_name+0xf2>
      return 0xFFFF;
 800f21c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f220:	e00d      	b.n	800f23e <dns_compare_name+0x10e>
    }
  } while (n != 0);
 800f222:	69fb      	ldr	r3, [r7, #28]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d18c      	bne.n	800f142 <dns_compare_name+0x12>

  if (response_offset == 0xFFFF) {
 800f228:	8b7b      	ldrh	r3, [r7, #26]
 800f22a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f22e:	4293      	cmp	r3, r2
 800f230:	d102      	bne.n	800f238 <dns_compare_name+0x108>
    /* would overflow */
    return 0xFFFF;
 800f232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f236:	e002      	b.n	800f23e <dns_compare_name+0x10e>
  }
  return (u16_t)(response_offset + 1);
 800f238:	8b7b      	ldrh	r3, [r7, #26]
 800f23a:	3301      	adds	r3, #1
 800f23c:	b29b      	uxth	r3, r3
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3720      	adds	r7, #32
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}
 800f246:	bf00      	nop
 800f248:	0802eeb4 	.word	0x0802eeb4

0800f24c <dns_skip_name>:
 * @param query_idx start index into p pointing to encoded DNS name in the DNS server response
 * @return index to end of the name
 */
static u16_t
dns_skip_name(struct pbuf *p, u16_t query_idx)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	460b      	mov	r3, r1
 800f256:	807b      	strh	r3, [r7, #2]
  int n;
  u16_t offset = query_idx;
 800f258:	887b      	ldrh	r3, [r7, #2]
 800f25a:	81fb      	strh	r3, [r7, #14]

  do {
    n = pbuf_try_get_at(p, offset++);
 800f25c:	89fb      	ldrh	r3, [r7, #14]
 800f25e:	1c5a      	adds	r2, r3, #1
 800f260:	81fa      	strh	r2, [r7, #14]
 800f262:	4619      	mov	r1, r3
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f002 fe71 	bl	8011f4c <pbuf_try_get_at>
 800f26a:	60b8      	str	r0, [r7, #8]
    if ((n < 0) || (offset == 0)) {
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	db02      	blt.n	800f278 <dns_skip_name+0x2c>
 800f272:	89fb      	ldrh	r3, [r7, #14]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d102      	bne.n	800f27e <dns_skip_name+0x32>
      return 0xFFFF;
 800f278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f27c:	e02f      	b.n	800f2de <dns_skip_name+0x92>
    }
    /** @see RFC 1035 - 4.1.4. Message compression */
    if ((n & 0xc0) == 0xc0) {
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f284:	2bc0      	cmp	r3, #192	; 0xc0
 800f286:	d01e      	beq.n	800f2c6 <dns_skip_name+0x7a>
      /* Compressed name: since we only want to skip it (not check it), stop here */
      break;
    } else {
      /* Not compressed name */
      if (offset + n >= p->tot_len) {
 800f288:	89fa      	ldrh	r2, [r7, #14]
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	4413      	add	r3, r2
 800f28e:	687a      	ldr	r2, [r7, #4]
 800f290:	8912      	ldrh	r2, [r2, #8]
 800f292:	4293      	cmp	r3, r2
 800f294:	db02      	blt.n	800f29c <dns_skip_name+0x50>
        return 0xFFFF;
 800f296:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f29a:	e020      	b.n	800f2de <dns_skip_name+0x92>
      }
      offset = (u16_t)(offset + n);
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	b29a      	uxth	r2, r3
 800f2a0:	89fb      	ldrh	r3, [r7, #14]
 800f2a2:	4413      	add	r3, r2
 800f2a4:	81fb      	strh	r3, [r7, #14]
    }
    n = pbuf_try_get_at(p, offset);
 800f2a6:	89fb      	ldrh	r3, [r7, #14]
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f002 fe4e 	bl	8011f4c <pbuf_try_get_at>
 800f2b0:	60b8      	str	r0, [r7, #8]
    if (n < 0) {
 800f2b2:	68bb      	ldr	r3, [r7, #8]
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	da02      	bge.n	800f2be <dns_skip_name+0x72>
      return 0xFFFF;
 800f2b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f2bc:	e00f      	b.n	800f2de <dns_skip_name+0x92>
    }
  } while (n != 0);
 800f2be:	68bb      	ldr	r3, [r7, #8]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d1cb      	bne.n	800f25c <dns_skip_name+0x10>
 800f2c4:	e000      	b.n	800f2c8 <dns_skip_name+0x7c>
      break;
 800f2c6:	bf00      	nop

  if (offset == 0xFFFF) {
 800f2c8:	89fb      	ldrh	r3, [r7, #14]
 800f2ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2ce:	4293      	cmp	r3, r2
 800f2d0:	d102      	bne.n	800f2d8 <dns_skip_name+0x8c>
    return 0xFFFF;
 800f2d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f2d6:	e002      	b.n	800f2de <dns_skip_name+0x92>
  }
  return (u16_t)(offset + 1);
 800f2d8:	89fb      	ldrh	r3, [r7, #14]
 800f2da:	3301      	adds	r3, #1
 800f2dc:	b29b      	uxth	r3, r3
}
 800f2de:	4618      	mov	r0, r3
 800f2e0:	3710      	adds	r7, #16
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
	...

0800f2e8 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b090      	sub	sp, #64	; 0x40
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	4603      	mov	r3, r0
 800f2f0:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800f2f2:	79fa      	ldrb	r2, [r7, #7]
 800f2f4:	4613      	mov	r3, r2
 800f2f6:	011b      	lsls	r3, r3, #4
 800f2f8:	4413      	add	r3, r2
 800f2fa:	011b      	lsls	r3, r3, #4
 800f2fc:	4a6c      	ldr	r2, [pc, #432]	; (800f4b0 <dns_send+0x1c8>)
 800f2fe:	4413      	add	r3, r2
 800f300:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800f302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f304:	7adb      	ldrb	r3, [r3, #11]
 800f306:	2b01      	cmp	r3, #1
 800f308:	d906      	bls.n	800f318 <dns_send+0x30>
 800f30a:	4b6a      	ldr	r3, [pc, #424]	; (800f4b4 <dns_send+0x1cc>)
 800f30c:	f240 22fa 	movw	r2, #762	; 0x2fa
 800f310:	4969      	ldr	r1, [pc, #420]	; (800f4b8 <dns_send+0x1d0>)
 800f312:	486a      	ldr	r0, [pc, #424]	; (800f4bc <dns_send+0x1d4>)
 800f314:	f009 fe1a 	bl	8018f4c <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800f318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31a:	7adb      	ldrb	r3, [r3, #11]
 800f31c:	461a      	mov	r2, r3
 800f31e:	4b68      	ldr	r3, [pc, #416]	; (800f4c0 <dns_send+0x1d8>)
 800f320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d109      	bne.n	800f33c <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800f328:	79fb      	ldrb	r3, [r7, #7]
 800f32a:	2100      	movs	r1, #0
 800f32c:	4618      	mov	r0, r3
 800f32e:	f000 f959 	bl	800f5e4 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800f332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f334:	2200      	movs	r2, #0
 800f336:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800f338:	2300      	movs	r3, #0
 800f33a:	e0b4      	b.n	800f4a6 <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800f33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33e:	3310      	adds	r3, #16
 800f340:	4618      	mov	r0, r3
 800f342:	f7f0 ffd7 	bl	80002f4 <strlen>
 800f346:	4603      	mov	r3, r0
 800f348:	b29b      	uxth	r3, r3
 800f34a:	3312      	adds	r3, #18
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f352:	4619      	mov	r1, r3
 800f354:	2036      	movs	r0, #54	; 0x36
 800f356:	f001 ff03 	bl	8011160 <pbuf_alloc>
 800f35a:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800f35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f35e:	2b00      	cmp	r3, #0
 800f360:	f000 8095 	beq.w	800f48e <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800f364:	f107 0310 	add.w	r3, r7, #16
 800f368:	220c      	movs	r2, #12
 800f36a:	2100      	movs	r1, #0
 800f36c:	4618      	mov	r0, r3
 800f36e:	f009 fde5 	bl	8018f3c <memset>
    hdr.id = lwip_htons(entry->txid);
 800f372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f374:	891b      	ldrh	r3, [r3, #8]
 800f376:	4618      	mov	r0, r3
 800f378:	f7ff fe22 	bl	800efc0 <lwip_htons>
 800f37c:	4603      	mov	r3, r0
 800f37e:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800f380:	2301      	movs	r3, #1
 800f382:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800f384:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f388:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800f38a:	f107 0310 	add.w	r3, r7, #16
 800f38e:	220c      	movs	r2, #12
 800f390:	4619      	mov	r1, r3
 800f392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f394:	f002 fcac 	bl	8011cf0 <pbuf_take>
    hostname = entry->name;
 800f398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39a:	3310      	adds	r3, #16
 800f39c:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800f39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a0:	3b01      	subs	r3, #1
 800f3a2:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800f3a4:	230c      	movs	r3, #12
 800f3a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800f3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800f3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f3b8:	e007      	b.n	800f3ca <dns_send+0xe2>
        ++n;
 800f3ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f3be:	3301      	adds	r3, #1
 800f3c0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	63bb      	str	r3, [r7, #56]	; 0x38
 800f3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	2b2e      	cmp	r3, #46	; 0x2e
 800f3d0:	d003      	beq.n	800f3da <dns_send+0xf2>
 800f3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d1ef      	bne.n	800f3ba <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800f3da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800f3e2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800f3e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f3e8:	4413      	add	r3, r2
 800f3ea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f3ee:	4293      	cmp	r3, r2
 800f3f0:	dc53      	bgt.n	800f49a <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800f3f2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800f3f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f3fc:	f002 fdc8 	bl	8011f90 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800f400:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f402:	3301      	adds	r3, #1
 800f404:	b29b      	uxth	r3, r3
 800f406:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f40a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f40c:	f002 fd02 	bl	8011e14 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800f410:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f414:	b29a      	uxth	r2, r3
 800f416:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f418:	4413      	add	r3, r2
 800f41a:	b29b      	uxth	r3, r3
 800f41c:	3301      	adds	r3, #1
 800f41e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800f420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d1bf      	bne.n	800f3a8 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800f428:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f42a:	2200      	movs	r2, #0
 800f42c:	4619      	mov	r1, r3
 800f42e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f430:	f002 fdae 	bl	8011f90 <pbuf_put_at>
    query_idx++;
 800f434:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f436:	3301      	adds	r3, #1
 800f438:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800f43a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f43e:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800f440:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f444:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800f446:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f448:	f107 010c 	add.w	r1, r7, #12
 800f44c:	2204      	movs	r2, #4
 800f44e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f450:	f002 fce0 	bl	8011e14 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800f454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f456:	7bdb      	ldrb	r3, [r3, #15]
 800f458:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800f45c:	2335      	movs	r3, #53	; 0x35
 800f45e:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800f460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f462:	7adb      	ldrb	r3, [r3, #11]
 800f464:	009b      	lsls	r3, r3, #2
 800f466:	4a16      	ldr	r2, [pc, #88]	; (800f4c0 <dns_send+0x1d8>)
 800f468:	4413      	add	r3, r2
 800f46a:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800f46c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f470:	4a14      	ldr	r2, [pc, #80]	; (800f4c4 <dns_send+0x1dc>)
 800f472:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f476:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f478:	69fa      	ldr	r2, [r7, #28]
 800f47a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f47c:	f008 fe8a 	bl	8018194 <udp_sendto>
 800f480:	4603      	mov	r3, r0
 800f482:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800f486:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f488:	f002 f97e 	bl	8011788 <pbuf_free>
 800f48c:	e002      	b.n	800f494 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800f48e:	23ff      	movs	r3, #255	; 0xff
 800f490:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800f494:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f498:	e005      	b.n	800f4a6 <dns_send+0x1be>
        goto overflow_return;
 800f49a:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800f49c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f49e:	f002 f973 	bl	8011788 <pbuf_free>
  return ERR_VAL;
 800f4a2:	f06f 0305 	mvn.w	r3, #5
}
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	3740      	adds	r7, #64	; 0x40
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	24006cd8 	.word	0x24006cd8
 800f4b4:	0801c6b0 	.word	0x0801c6b0
 800f4b8:	0801c724 	.word	0x0801c724
 800f4bc:	0801c73c 	.word	0x0801c73c
 800f4c0:	24007148 	.word	0x24007148
 800f4c4:	24006cc4 	.word	0x24006cc4

0800f4c8 <dns_alloc_random_port>:

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
static struct udp_pcb *
dns_alloc_random_port(void)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b084      	sub	sp, #16
 800f4cc:	af00      	add	r7, sp, #0
  err_t err;
  struct udp_pcb *pcb;

  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 800f4ce:	202e      	movs	r0, #46	; 0x2e
 800f4d0:	f009 f9ad 	bl	801882e <udp_new_ip_type>
 800f4d4:	60b8      	str	r0, [r7, #8]
  if (pcb == NULL) {
 800f4d6:	68bb      	ldr	r3, [r7, #8]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d101      	bne.n	800f4e0 <dns_alloc_random_port+0x18>
    /* out of memory, have to reuse an existing pcb */
    return NULL;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	e026      	b.n	800f52e <dns_alloc_random_port+0x66>
  }
  do {
    u16_t port = (u16_t)DNS_RAND_TXID();
 800f4e0:	f009 fd4c 	bl	8018f7c <rand>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	80fb      	strh	r3, [r7, #6]
    if (DNS_PORT_ALLOWED(port)) {
 800f4e8:	88fb      	ldrh	r3, [r7, #6]
 800f4ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f4ee:	d308      	bcc.n	800f502 <dns_alloc_random_port+0x3a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 800f4f0:	88fb      	ldrh	r3, [r7, #6]
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	4910      	ldr	r1, [pc, #64]	; (800f538 <dns_alloc_random_port+0x70>)
 800f4f6:	68b8      	ldr	r0, [r7, #8]
 800f4f8:	f009 f802 	bl	8018500 <udp_bind>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	73fb      	strb	r3, [r7, #15]
 800f500:	e001      	b.n	800f506 <dns_alloc_random_port+0x3e>
    } else {
      /* this port is not allowed, try again */
      err = ERR_USE;
 800f502:	23f8      	movs	r3, #248	; 0xf8
 800f504:	73fb      	strb	r3, [r7, #15]
    }
  } while (err == ERR_USE);
 800f506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f50a:	f113 0f08 	cmn.w	r3, #8
 800f50e:	d0e7      	beq.n	800f4e0 <dns_alloc_random_port+0x18>
  if (err != ERR_OK) {
 800f510:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d004      	beq.n	800f522 <dns_alloc_random_port+0x5a>
    udp_remove(pcb);
 800f518:	68b8      	ldr	r0, [r7, #8]
 800f51a:	f009 f92f 	bl	801877c <udp_remove>
    return NULL;
 800f51e:	2300      	movs	r3, #0
 800f520:	e005      	b.n	800f52e <dns_alloc_random_port+0x66>
  }
  udp_recv(pcb, dns_recv, NULL);
 800f522:	2200      	movs	r2, #0
 800f524:	4905      	ldr	r1, [pc, #20]	; (800f53c <dns_alloc_random_port+0x74>)
 800f526:	68b8      	ldr	r0, [r7, #8]
 800f528:	f009 f908 	bl	801873c <udp_recv>
  return pcb;
 800f52c:	68bb      	ldr	r3, [r7, #8]
}
 800f52e:	4618      	mov	r0, r3
 800f530:	3710      	adds	r7, #16
 800f532:	46bd      	mov	sp, r7
 800f534:	bd80      	pop	{r7, pc}
 800f536:	bf00      	nop
 800f538:	0801c38c 	.word	0x0801c38c
 800f53c:	0800f9e9 	.word	0x0800f9e9

0800f540 <dns_alloc_pcb>:
 *
 * @return an index into dns_pcbs
 */
static u8_t
dns_alloc_pcb(void)
{
 800f540:	b590      	push	{r4, r7, lr}
 800f542:	b083      	sub	sp, #12
 800f544:	af00      	add	r7, sp, #0
  u8_t i;
  u8_t idx;

  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800f546:	2300      	movs	r3, #0
 800f548:	71fb      	strb	r3, [r7, #7]
 800f54a:	e008      	b.n	800f55e <dns_alloc_pcb+0x1e>
    if (dns_pcbs[i] == NULL) {
 800f54c:	79fb      	ldrb	r3, [r7, #7]
 800f54e:	4a23      	ldr	r2, [pc, #140]	; (800f5dc <dns_alloc_pcb+0x9c>)
 800f550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d006      	beq.n	800f566 <dns_alloc_pcb+0x26>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 800f558:	79fb      	ldrb	r3, [r7, #7]
 800f55a:	3301      	adds	r3, #1
 800f55c:	71fb      	strb	r3, [r7, #7]
 800f55e:	79fb      	ldrb	r3, [r7, #7]
 800f560:	2b03      	cmp	r3, #3
 800f562:	d9f3      	bls.n	800f54c <dns_alloc_pcb+0xc>
 800f564:	e000      	b.n	800f568 <dns_alloc_pcb+0x28>
      break;
 800f566:	bf00      	nop
    }
  }
  if (i < DNS_MAX_SOURCE_PORTS) {
 800f568:	79fb      	ldrb	r3, [r7, #7]
 800f56a:	2b03      	cmp	r3, #3
 800f56c:	d811      	bhi.n	800f592 <dns_alloc_pcb+0x52>
    dns_pcbs[i] = dns_alloc_random_port();
 800f56e:	79fc      	ldrb	r4, [r7, #7]
 800f570:	f7ff ffaa 	bl	800f4c8 <dns_alloc_random_port>
 800f574:	4603      	mov	r3, r0
 800f576:	4a19      	ldr	r2, [pc, #100]	; (800f5dc <dns_alloc_pcb+0x9c>)
 800f578:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if (dns_pcbs[i] != NULL) {
 800f57c:	79fb      	ldrb	r3, [r7, #7]
 800f57e:	4a17      	ldr	r2, [pc, #92]	; (800f5dc <dns_alloc_pcb+0x9c>)
 800f580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d004      	beq.n	800f592 <dns_alloc_pcb+0x52>
      /* succeeded */
      dns_last_pcb_idx = i;
 800f588:	4a15      	ldr	r2, [pc, #84]	; (800f5e0 <dns_alloc_pcb+0xa0>)
 800f58a:	79fb      	ldrb	r3, [r7, #7]
 800f58c:	7013      	strb	r3, [r2, #0]
      return i;
 800f58e:	79fb      	ldrb	r3, [r7, #7]
 800f590:	e020      	b.n	800f5d4 <dns_alloc_pcb+0x94>
    }
  }
  /* if we come here, creating a new UDP pcb failed, so we have to use
     an already existing one (so overflow is no issue) */
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800f592:	2300      	movs	r3, #0
 800f594:	71fb      	strb	r3, [r7, #7]
 800f596:	4b12      	ldr	r3, [pc, #72]	; (800f5e0 <dns_alloc_pcb+0xa0>)
 800f598:	781b      	ldrb	r3, [r3, #0]
 800f59a:	3301      	adds	r3, #1
 800f59c:	71bb      	strb	r3, [r7, #6]
 800f59e:	e015      	b.n	800f5cc <dns_alloc_pcb+0x8c>
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 800f5a0:	79bb      	ldrb	r3, [r7, #6]
 800f5a2:	2b03      	cmp	r3, #3
 800f5a4:	d901      	bls.n	800f5aa <dns_alloc_pcb+0x6a>
      idx = 0;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	71bb      	strb	r3, [r7, #6]
    }
    if (dns_pcbs[idx] != NULL) {
 800f5aa:	79bb      	ldrb	r3, [r7, #6]
 800f5ac:	4a0b      	ldr	r2, [pc, #44]	; (800f5dc <dns_alloc_pcb+0x9c>)
 800f5ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d004      	beq.n	800f5c0 <dns_alloc_pcb+0x80>
      dns_last_pcb_idx = idx;
 800f5b6:	4a0a      	ldr	r2, [pc, #40]	; (800f5e0 <dns_alloc_pcb+0xa0>)
 800f5b8:	79bb      	ldrb	r3, [r7, #6]
 800f5ba:	7013      	strb	r3, [r2, #0]
      return idx;
 800f5bc:	79bb      	ldrb	r3, [r7, #6]
 800f5be:	e009      	b.n	800f5d4 <dns_alloc_pcb+0x94>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 800f5c0:	79fb      	ldrb	r3, [r7, #7]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	71fb      	strb	r3, [r7, #7]
 800f5c6:	79bb      	ldrb	r3, [r7, #6]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	71bb      	strb	r3, [r7, #6]
 800f5cc:	79fb      	ldrb	r3, [r7, #7]
 800f5ce:	2b03      	cmp	r3, #3
 800f5d0:	d9e6      	bls.n	800f5a0 <dns_alloc_pcb+0x60>
    }
  }
  return DNS_MAX_SOURCE_PORTS;
 800f5d2:	2304      	movs	r3, #4
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	370c      	adds	r7, #12
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd90      	pop	{r4, r7, pc}
 800f5dc:	24006cc4 	.word	0x24006cc4
 800f5e0:	24006cd4 	.word	0x24006cd4

0800f5e4 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800f5e4:	b590      	push	{r4, r7, lr}
 800f5e6:	b085      	sub	sp, #20
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	6039      	str	r1, [r7, #0]
 800f5ee:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	73fb      	strb	r3, [r7, #15]
 800f5f4:	e03d      	b.n	800f672 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800f5f6:	7bfa      	ldrb	r2, [r7, #15]
 800f5f8:	4957      	ldr	r1, [pc, #348]	; (800f758 <dns_call_found+0x174>)
 800f5fa:	4613      	mov	r3, r2
 800f5fc:	005b      	lsls	r3, r3, #1
 800f5fe:	4413      	add	r3, r2
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	440b      	add	r3, r1
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d030      	beq.n	800f66c <dns_call_found+0x88>
 800f60a:	7bfa      	ldrb	r2, [r7, #15]
 800f60c:	4952      	ldr	r1, [pc, #328]	; (800f758 <dns_call_found+0x174>)
 800f60e:	4613      	mov	r3, r2
 800f610:	005b      	lsls	r3, r3, #1
 800f612:	4413      	add	r3, r2
 800f614:	009b      	lsls	r3, r3, #2
 800f616:	440b      	add	r3, r1
 800f618:	3308      	adds	r3, #8
 800f61a:	781b      	ldrb	r3, [r3, #0]
 800f61c:	79fa      	ldrb	r2, [r7, #7]
 800f61e:	429a      	cmp	r2, r3
 800f620:	d124      	bne.n	800f66c <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800f622:	7bfa      	ldrb	r2, [r7, #15]
 800f624:	494c      	ldr	r1, [pc, #304]	; (800f758 <dns_call_found+0x174>)
 800f626:	4613      	mov	r3, r2
 800f628:	005b      	lsls	r3, r3, #1
 800f62a:	4413      	add	r3, r2
 800f62c:	009b      	lsls	r3, r3, #2
 800f62e:	440b      	add	r3, r1
 800f630:	681c      	ldr	r4, [r3, #0]
 800f632:	79fa      	ldrb	r2, [r7, #7]
 800f634:	4613      	mov	r3, r2
 800f636:	011b      	lsls	r3, r3, #4
 800f638:	4413      	add	r3, r2
 800f63a:	011b      	lsls	r3, r3, #4
 800f63c:	3310      	adds	r3, #16
 800f63e:	4a47      	ldr	r2, [pc, #284]	; (800f75c <dns_call_found+0x178>)
 800f640:	1898      	adds	r0, r3, r2
 800f642:	7bfa      	ldrb	r2, [r7, #15]
 800f644:	4944      	ldr	r1, [pc, #272]	; (800f758 <dns_call_found+0x174>)
 800f646:	4613      	mov	r3, r2
 800f648:	005b      	lsls	r3, r3, #1
 800f64a:	4413      	add	r3, r2
 800f64c:	009b      	lsls	r3, r3, #2
 800f64e:	440b      	add	r3, r1
 800f650:	3304      	adds	r3, #4
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	461a      	mov	r2, r3
 800f656:	6839      	ldr	r1, [r7, #0]
 800f658:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800f65a:	7bfa      	ldrb	r2, [r7, #15]
 800f65c:	493e      	ldr	r1, [pc, #248]	; (800f758 <dns_call_found+0x174>)
 800f65e:	4613      	mov	r3, r2
 800f660:	005b      	lsls	r3, r3, #1
 800f662:	4413      	add	r3, r2
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	440b      	add	r3, r1
 800f668:	2200      	movs	r2, #0
 800f66a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f66c:	7bfb      	ldrb	r3, [r7, #15]
 800f66e:	3301      	adds	r3, #1
 800f670:	73fb      	strb	r3, [r7, #15]
 800f672:	7bfb      	ldrb	r3, [r7, #15]
 800f674:	2b03      	cmp	r3, #3
 800f676:	d9be      	bls.n	800f5f6 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f678:	2300      	movs	r3, #0
 800f67a:	73fb      	strb	r3, [r7, #15]
 800f67c:	e031      	b.n	800f6e2 <dns_call_found+0xfe>
    if (i == idx) {
 800f67e:	7bfa      	ldrb	r2, [r7, #15]
 800f680:	79fb      	ldrb	r3, [r7, #7]
 800f682:	429a      	cmp	r2, r3
 800f684:	d029      	beq.n	800f6da <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800f686:	7bfa      	ldrb	r2, [r7, #15]
 800f688:	4934      	ldr	r1, [pc, #208]	; (800f75c <dns_call_found+0x178>)
 800f68a:	4613      	mov	r3, r2
 800f68c:	011b      	lsls	r3, r3, #4
 800f68e:	4413      	add	r3, r2
 800f690:	011b      	lsls	r3, r3, #4
 800f692:	440b      	add	r3, r1
 800f694:	330a      	adds	r3, #10
 800f696:	781b      	ldrb	r3, [r3, #0]
 800f698:	2b02      	cmp	r3, #2
 800f69a:	d11f      	bne.n	800f6dc <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800f69c:	7bfa      	ldrb	r2, [r7, #15]
 800f69e:	492f      	ldr	r1, [pc, #188]	; (800f75c <dns_call_found+0x178>)
 800f6a0:	4613      	mov	r3, r2
 800f6a2:	011b      	lsls	r3, r3, #4
 800f6a4:	4413      	add	r3, r2
 800f6a6:	011b      	lsls	r3, r3, #4
 800f6a8:	440b      	add	r3, r1
 800f6aa:	330f      	adds	r3, #15
 800f6ac:	7819      	ldrb	r1, [r3, #0]
 800f6ae:	79fa      	ldrb	r2, [r7, #7]
 800f6b0:	482a      	ldr	r0, [pc, #168]	; (800f75c <dns_call_found+0x178>)
 800f6b2:	4613      	mov	r3, r2
 800f6b4:	011b      	lsls	r3, r3, #4
 800f6b6:	4413      	add	r3, r2
 800f6b8:	011b      	lsls	r3, r3, #4
 800f6ba:	4403      	add	r3, r0
 800f6bc:	330f      	adds	r3, #15
 800f6be:	781b      	ldrb	r3, [r3, #0]
 800f6c0:	4299      	cmp	r1, r3
 800f6c2:	d10b      	bne.n	800f6dc <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f6c4:	79fa      	ldrb	r2, [r7, #7]
 800f6c6:	4925      	ldr	r1, [pc, #148]	; (800f75c <dns_call_found+0x178>)
 800f6c8:	4613      	mov	r3, r2
 800f6ca:	011b      	lsls	r3, r3, #4
 800f6cc:	4413      	add	r3, r2
 800f6ce:	011b      	lsls	r3, r3, #4
 800f6d0:	440b      	add	r3, r1
 800f6d2:	330f      	adds	r3, #15
 800f6d4:	2204      	movs	r2, #4
 800f6d6:	701a      	strb	r2, [r3, #0]
        break;
 800f6d8:	e006      	b.n	800f6e8 <dns_call_found+0x104>
      continue; /* only check other requests */
 800f6da:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f6dc:	7bfb      	ldrb	r3, [r7, #15]
 800f6de:	3301      	adds	r3, #1
 800f6e0:	73fb      	strb	r3, [r7, #15]
 800f6e2:	7bfb      	ldrb	r3, [r7, #15]
 800f6e4:	2b03      	cmp	r3, #3
 800f6e6:	d9ca      	bls.n	800f67e <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800f6e8:	79fa      	ldrb	r2, [r7, #7]
 800f6ea:	491c      	ldr	r1, [pc, #112]	; (800f75c <dns_call_found+0x178>)
 800f6ec:	4613      	mov	r3, r2
 800f6ee:	011b      	lsls	r3, r3, #4
 800f6f0:	4413      	add	r3, r2
 800f6f2:	011b      	lsls	r3, r3, #4
 800f6f4:	440b      	add	r3, r1
 800f6f6:	330f      	adds	r3, #15
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	2b03      	cmp	r3, #3
 800f6fc:	d827      	bhi.n	800f74e <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800f6fe:	79fa      	ldrb	r2, [r7, #7]
 800f700:	4916      	ldr	r1, [pc, #88]	; (800f75c <dns_call_found+0x178>)
 800f702:	4613      	mov	r3, r2
 800f704:	011b      	lsls	r3, r3, #4
 800f706:	4413      	add	r3, r2
 800f708:	011b      	lsls	r3, r3, #4
 800f70a:	440b      	add	r3, r1
 800f70c:	330f      	adds	r3, #15
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	461a      	mov	r2, r3
 800f712:	4b13      	ldr	r3, [pc, #76]	; (800f760 <dns_call_found+0x17c>)
 800f714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f718:	4618      	mov	r0, r3
 800f71a:	f009 f82f 	bl	801877c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800f71e:	79fa      	ldrb	r2, [r7, #7]
 800f720:	490e      	ldr	r1, [pc, #56]	; (800f75c <dns_call_found+0x178>)
 800f722:	4613      	mov	r3, r2
 800f724:	011b      	lsls	r3, r3, #4
 800f726:	4413      	add	r3, r2
 800f728:	011b      	lsls	r3, r3, #4
 800f72a:	440b      	add	r3, r1
 800f72c:	330f      	adds	r3, #15
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	4619      	mov	r1, r3
 800f732:	4b0b      	ldr	r3, [pc, #44]	; (800f760 <dns_call_found+0x17c>)
 800f734:	2200      	movs	r2, #0
 800f736:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f73a:	79fa      	ldrb	r2, [r7, #7]
 800f73c:	4907      	ldr	r1, [pc, #28]	; (800f75c <dns_call_found+0x178>)
 800f73e:	4613      	mov	r3, r2
 800f740:	011b      	lsls	r3, r3, #4
 800f742:	4413      	add	r3, r2
 800f744:	011b      	lsls	r3, r3, #4
 800f746:	440b      	add	r3, r1
 800f748:	330f      	adds	r3, #15
 800f74a:	2204      	movs	r2, #4
 800f74c:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800f74e:	bf00      	nop
 800f750:	3714      	adds	r7, #20
 800f752:	46bd      	mov	sp, r7
 800f754:	bd90      	pop	{r4, r7, pc}
 800f756:	bf00      	nop
 800f758:	24007118 	.word	0x24007118
 800f75c:	24006cd8 	.word	0x24006cd8
 800f760:	24006cc4 	.word	0x24006cc4

0800f764 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800f76a:	f009 fc07 	bl	8018f7c <rand>
 800f76e:	4603      	mov	r3, r0
 800f770:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800f772:	2300      	movs	r3, #0
 800f774:	71fb      	strb	r3, [r7, #7]
 800f776:	e01a      	b.n	800f7ae <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800f778:	79fa      	ldrb	r2, [r7, #7]
 800f77a:	4911      	ldr	r1, [pc, #68]	; (800f7c0 <dns_create_txid+0x5c>)
 800f77c:	4613      	mov	r3, r2
 800f77e:	011b      	lsls	r3, r3, #4
 800f780:	4413      	add	r3, r2
 800f782:	011b      	lsls	r3, r3, #4
 800f784:	440b      	add	r3, r1
 800f786:	330a      	adds	r3, #10
 800f788:	781b      	ldrb	r3, [r3, #0]
 800f78a:	2b02      	cmp	r3, #2
 800f78c:	d10c      	bne.n	800f7a8 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800f78e:	79fa      	ldrb	r2, [r7, #7]
 800f790:	490b      	ldr	r1, [pc, #44]	; (800f7c0 <dns_create_txid+0x5c>)
 800f792:	4613      	mov	r3, r2
 800f794:	011b      	lsls	r3, r3, #4
 800f796:	4413      	add	r3, r2
 800f798:	011b      	lsls	r3, r3, #4
 800f79a:	440b      	add	r3, r1
 800f79c:	3308      	adds	r3, #8
 800f79e:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800f7a0:	88ba      	ldrh	r2, [r7, #4]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d100      	bne.n	800f7a8 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800f7a6:	e7e0      	b.n	800f76a <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800f7a8:	79fb      	ldrb	r3, [r7, #7]
 800f7aa:	3301      	adds	r3, #1
 800f7ac:	71fb      	strb	r3, [r7, #7]
 800f7ae:	79fb      	ldrb	r3, [r7, #7]
 800f7b0:	2b03      	cmp	r3, #3
 800f7b2:	d9e1      	bls.n	800f778 <dns_create_txid+0x14>
    }
  }

  return txid;
 800f7b4:	88bb      	ldrh	r3, [r7, #4]
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3708      	adds	r7, #8
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	24006cd8 	.word	0x24006cd8

0800f7c4 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800f7c4:	b480      	push	{r7}
 800f7c6:	b085      	sub	sp, #20
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d00d      	beq.n	800f7f2 <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	7adb      	ldrb	r3, [r3, #11]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d109      	bne.n	800f7f2 <dns_backupserver_available+0x2e>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	7adb      	ldrb	r3, [r3, #11]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	4a06      	ldr	r2, [pc, #24]	; (800f800 <dns_backupserver_available+0x3c>)
 800f7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	d001      	beq.n	800f7f2 <dns_backupserver_available+0x2e>
      ret = 1;
 800f7ee:	2301      	movs	r3, #1
 800f7f0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f7f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	3714      	adds	r7, #20
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr
 800f800:	24007148 	.word	0x24007148

0800f804 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b084      	sub	sp, #16
 800f808:	af00      	add	r7, sp, #0
 800f80a:	4603      	mov	r3, r0
 800f80c:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800f80e:	79fa      	ldrb	r2, [r7, #7]
 800f810:	4613      	mov	r3, r2
 800f812:	011b      	lsls	r3, r3, #4
 800f814:	4413      	add	r3, r2
 800f816:	011b      	lsls	r3, r3, #4
 800f818:	4a48      	ldr	r2, [pc, #288]	; (800f93c <dns_check_entry+0x138>)
 800f81a:	4413      	add	r3, r2
 800f81c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800f81e:	79fb      	ldrb	r3, [r7, #7]
 800f820:	2b03      	cmp	r3, #3
 800f822:	d906      	bls.n	800f832 <dns_check_entry+0x2e>
 800f824:	4b46      	ldr	r3, [pc, #280]	; (800f940 <dns_check_entry+0x13c>)
 800f826:	f240 421c 	movw	r2, #1052	; 0x41c
 800f82a:	4946      	ldr	r1, [pc, #280]	; (800f944 <dns_check_entry+0x140>)
 800f82c:	4846      	ldr	r0, [pc, #280]	; (800f948 <dns_check_entry+0x144>)
 800f82e:	f009 fb8d 	bl	8018f4c <iprintf>

  switch (entry->state) {
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	7a9b      	ldrb	r3, [r3, #10]
 800f836:	2b03      	cmp	r3, #3
 800f838:	d86f      	bhi.n	800f91a <dns_check_entry+0x116>
 800f83a:	a201      	add	r2, pc, #4	; (adr r2, 800f840 <dns_check_entry+0x3c>)
 800f83c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f840:	0800f92b 	.word	0x0800f92b
 800f844:	0800f851 	.word	0x0800f851
 800f848:	0800f883 	.word	0x0800f883
 800f84c:	0800f8f9 	.word	0x0800f8f9
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800f850:	f7ff ff88 	bl	800f764 <dns_create_txid>
 800f854:	4603      	mov	r3, r0
 800f856:	461a      	mov	r2, r3
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2202      	movs	r2, #2
 800f860:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	2200      	movs	r2, #0
 800f866:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2201      	movs	r2, #1
 800f86c:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	2200      	movs	r2, #0
 800f872:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800f874:	79fb      	ldrb	r3, [r7, #7]
 800f876:	4618      	mov	r0, r3
 800f878:	f7ff fd36 	bl	800f2e8 <dns_send>
 800f87c:	4603      	mov	r3, r0
 800f87e:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800f880:	e058      	b.n	800f934 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	7b1b      	ldrb	r3, [r3, #12]
 800f886:	3b01      	subs	r3, #1
 800f888:	b2da      	uxtb	r2, r3
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	731a      	strb	r2, [r3, #12]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	7b1b      	ldrb	r3, [r3, #12]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d14b      	bne.n	800f92e <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	7b5b      	ldrb	r3, [r3, #13]
 800f89a:	3301      	adds	r3, #1
 800f89c:	b2da      	uxtb	r2, r3
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	735a      	strb	r2, [r3, #13]
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	7b5b      	ldrb	r3, [r3, #13]
 800f8a6:	2b04      	cmp	r3, #4
 800f8a8:	d11b      	bne.n	800f8e2 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800f8aa:	68f8      	ldr	r0, [r7, #12]
 800f8ac:	f7ff ff8a 	bl	800f7c4 <dns_backupserver_available>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d00c      	beq.n	800f8d0 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	7adb      	ldrb	r3, [r3, #11]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	b2da      	uxtb	r2, r3
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	2201      	movs	r2, #1
 800f8c6:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	735a      	strb	r2, [r3, #13]
 800f8ce:	e00c      	b.n	800f8ea <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800f8d0:	79fb      	ldrb	r3, [r7, #7]
 800f8d2:	2100      	movs	r1, #0
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7ff fe85 	bl	800f5e4 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	2200      	movs	r2, #0
 800f8de:	729a      	strb	r2, [r3, #10]
            break;
 800f8e0:	e028      	b.n	800f934 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	7b5a      	ldrb	r2, [r3, #13]
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800f8ea:	79fb      	ldrb	r3, [r7, #7]
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	f7ff fcfb 	bl	800f2e8 <dns_send>
 800f8f2:	4603      	mov	r3, r0
 800f8f4:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800f8f6:	e01a      	b.n	800f92e <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d008      	beq.n	800f912 <dns_check_entry+0x10e>
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	1e5a      	subs	r2, r3, #1
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	601a      	str	r2, [r3, #0]
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d10f      	bne.n	800f932 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	2200      	movs	r2, #0
 800f916:	729a      	strb	r2, [r3, #10]
      }
      break;
 800f918:	e00b      	b.n	800f932 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800f91a:	4b09      	ldr	r3, [pc, #36]	; (800f940 <dns_check_entry+0x13c>)
 800f91c:	f240 425b 	movw	r2, #1115	; 0x45b
 800f920:	490a      	ldr	r1, [pc, #40]	; (800f94c <dns_check_entry+0x148>)
 800f922:	4809      	ldr	r0, [pc, #36]	; (800f948 <dns_check_entry+0x144>)
 800f924:	f009 fb12 	bl	8018f4c <iprintf>
      break;
 800f928:	e004      	b.n	800f934 <dns_check_entry+0x130>
      break;
 800f92a:	bf00      	nop
 800f92c:	e002      	b.n	800f934 <dns_check_entry+0x130>
      break;
 800f92e:	bf00      	nop
 800f930:	e000      	b.n	800f934 <dns_check_entry+0x130>
      break;
 800f932:	bf00      	nop
  }
}
 800f934:	bf00      	nop
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}
 800f93c:	24006cd8 	.word	0x24006cd8
 800f940:	0801c6b0 	.word	0x0801c6b0
 800f944:	0801c764 	.word	0x0801c764
 800f948:	0801c73c 	.word	0x0801c73c
 800f94c:	0801c780 	.word	0x0801c780

0800f950 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f956:	2300      	movs	r3, #0
 800f958:	71fb      	strb	r3, [r7, #7]
 800f95a:	e006      	b.n	800f96a <dns_check_entries+0x1a>
    dns_check_entry(i);
 800f95c:	79fb      	ldrb	r3, [r7, #7]
 800f95e:	4618      	mov	r0, r3
 800f960:	f7ff ff50 	bl	800f804 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f964:	79fb      	ldrb	r3, [r7, #7]
 800f966:	3301      	adds	r3, #1
 800f968:	71fb      	strb	r3, [r7, #7]
 800f96a:	79fb      	ldrb	r3, [r7, #7]
 800f96c:	2b03      	cmp	r3, #3
 800f96e:	d9f5      	bls.n	800f95c <dns_check_entries+0xc>
  }
}
 800f970:	bf00      	nop
 800f972:	bf00      	nop
 800f974:	3708      	adds	r7, #8
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
	...

0800f97c <dns_correct_response>:
/**
 * Save TTL and call dns_call_found for correct response.
 */
static void
dns_correct_response(u8_t idx, u32_t ttl)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	4603      	mov	r3, r0
 800f984:	6039      	str	r1, [r7, #0]
 800f986:	71fb      	strb	r3, [r7, #7]
  struct dns_table_entry *entry = &dns_table[idx];
 800f988:	79fa      	ldrb	r2, [r7, #7]
 800f98a:	4613      	mov	r3, r2
 800f98c:	011b      	lsls	r3, r3, #4
 800f98e:	4413      	add	r3, r2
 800f990:	011b      	lsls	r3, r3, #4
 800f992:	4a13      	ldr	r2, [pc, #76]	; (800f9e0 <dns_correct_response+0x64>)
 800f994:	4413      	add	r3, r2
 800f996:	60fb      	str	r3, [r7, #12]

  entry->state = DNS_STATE_DONE;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	2203      	movs	r2, #3
 800f99c:	729a      	strb	r2, [r3, #10]
  LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response = ", entry->name));
  ip_addr_debug_print_val(DNS_DEBUG, entry->ipaddr);
  LWIP_DEBUGF(DNS_DEBUG, ("\n"));

  /* read the answer resource record's TTL, and maximize it if needed */
  entry->ttl = ttl;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	683a      	ldr	r2, [r7, #0]
 800f9a2:	601a      	str	r2, [r3, #0]
  if (entry->ttl > DNS_MAX_TTL) {
 800f9a4:	68fb      	ldr	r3, [r7, #12]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4a0e      	ldr	r2, [pc, #56]	; (800f9e4 <dns_correct_response+0x68>)
 800f9aa:	4293      	cmp	r3, r2
 800f9ac:	d902      	bls.n	800f9b4 <dns_correct_response+0x38>
    entry->ttl = DNS_MAX_TTL;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	4a0c      	ldr	r2, [pc, #48]	; (800f9e4 <dns_correct_response+0x68>)
 800f9b2:	601a      	str	r2, [r3, #0]
  }
  dns_call_found(idx, &entry->ipaddr);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	1d1a      	adds	r2, r3, #4
 800f9b8:	79fb      	ldrb	r3, [r7, #7]
 800f9ba:	4611      	mov	r1, r2
 800f9bc:	4618      	mov	r0, r3
 800f9be:	f7ff fe11 	bl	800f5e4 <dns_call_found>

  if (entry->ttl == 0) {
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d106      	bne.n	800f9d8 <dns_correct_response+0x5c>
    /* RFC 883, page 29: "Zero values are
       interpreted to mean that the RR can only be used for the
       transaction in progress, and should not be cached."
       -> flush this entry now */
    /* entry reused during callback? */
    if (entry->state == DNS_STATE_DONE) {
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	7a9b      	ldrb	r3, [r3, #10]
 800f9ce:	2b03      	cmp	r3, #3
 800f9d0:	d102      	bne.n	800f9d8 <dns_correct_response+0x5c>
      entry->state = DNS_STATE_UNUSED;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	729a      	strb	r2, [r3, #10]
    }
  }
}
 800f9d8:	bf00      	nop
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}
 800f9e0:	24006cd8 	.word	0x24006cd8
 800f9e4:	00093a80 	.word	0x00093a80

0800f9e8 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800f9e8:	b590      	push	{r4, r7, lr}
 800f9ea:	b091      	sub	sp, #68	; 0x44
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	60f8      	str	r0, [r7, #12]
 800f9f0:	60b9      	str	r1, [r7, #8]
 800f9f2:	607a      	str	r2, [r7, #4]
 800f9f4:	603b      	str	r3, [r7, #0]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	891b      	ldrh	r3, [r3, #8]
 800f9fa:	2b0f      	cmp	r3, #15
 800f9fc:	f240 811e 	bls.w	800fc3c <dns_recv+0x254>
    /* free pbuf and return */
    goto ignore_packet;
  }

  /* copy dns payload inside static buffer for processing */
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 800fa00:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800fa04:	2300      	movs	r3, #0
 800fa06:	220c      	movs	r2, #12
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f002 f8c3 	bl	8011b94 <pbuf_copy_partial>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b0c      	cmp	r3, #12
 800fa12:	f040 8115 	bne.w	800fc40 <dns_recv+0x258>
    /* Match the ID in the DNS header with the name table. */
    txid = lwip_htons(hdr.id);
 800fa16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7ff fad1 	bl	800efc0 <lwip_htons>
 800fa1e:	4603      	mov	r3, r0
 800fa20:	873b      	strh	r3, [r7, #56]	; 0x38
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800fa22:	2300      	movs	r3, #0
 800fa24:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fa28:	e102      	b.n	800fc30 <dns_recv+0x248>
      struct dns_table_entry *entry = &dns_table[i];
 800fa2a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fa2e:	4613      	mov	r3, r2
 800fa30:	011b      	lsls	r3, r3, #4
 800fa32:	4413      	add	r3, r2
 800fa34:	011b      	lsls	r3, r3, #4
 800fa36:	4a92      	ldr	r2, [pc, #584]	; (800fc80 <dns_recv+0x298>)
 800fa38:	4413      	add	r3, r2
 800fa3a:	637b      	str	r3, [r7, #52]	; 0x34
      if ((entry->state == DNS_STATE_ASKING) &&
 800fa3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa3e:	7a9b      	ldrb	r3, [r3, #10]
 800fa40:	2b02      	cmp	r3, #2
 800fa42:	f040 80f0 	bne.w	800fc26 <dns_recv+0x23e>
          (entry->txid == txid)) {
 800fa46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa48:	891b      	ldrh	r3, [r3, #8]
      if ((entry->state == DNS_STATE_ASKING) &&
 800fa4a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	f040 80ea 	bne.w	800fc26 <dns_recv+0x23e>

        /* We only care about the question(s) and the answers. The authrr
           and the extrarr are simply discarded. */
        nquestions = lwip_htons(hdr.numquestions);
 800fa52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7ff fab3 	bl	800efc0 <lwip_htons>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	867b      	strh	r3, [r7, #50]	; 0x32
        nanswers   = lwip_htons(hdr.numanswers);
 800fa5e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7ff faad 	bl	800efc0 <lwip_htons>
 800fa66:	4603      	mov	r3, r0
 800fa68:	877b      	strh	r3, [r7, #58]	; 0x3a

        /* Check for correct response. */
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 800fa6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fa6e:	b25b      	sxtb	r3, r3
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	f280 80e7 	bge.w	800fc44 <dns_recv+0x25c>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": not a response\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        if (nquestions != 1) {
 800fa76:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800fa78:	2b01      	cmp	r3, #1
 800fa7a:	f040 80e5 	bne.w	800fc48 <dns_recv+0x260>
        if (!entry->is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
        {
          /* Check whether response comes from the same network address to which the
             question was sent. (RFC 5452) */
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	681a      	ldr	r2, [r3, #0]
 800fa82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa84:	7adb      	ldrb	r3, [r3, #11]
 800fa86:	4619      	mov	r1, r3
 800fa88:	4b7e      	ldr	r3, [pc, #504]	; (800fc84 <dns_recv+0x29c>)
 800fa8a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	f040 80dc 	bne.w	800fc4c <dns_recv+0x264>
          }
        }

        /* Check if the name in the "question" part match with the name in the entry and
           skip it if equal. */
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 800fa94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa96:	3310      	adds	r3, #16
 800fa98:	220c      	movs	r2, #12
 800fa9a:	6879      	ldr	r1, [r7, #4]
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7ff fb47 	bl	800f130 <dns_compare_name>
 800faa2:	4603      	mov	r3, r0
 800faa4:	87bb      	strh	r3, [r7, #60]	; 0x3c
        if (res_idx == 0xFFFF) {
 800faa6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800faa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800faac:	4293      	cmp	r3, r2
 800faae:	f000 80cf 	beq.w	800fc50 <dns_recv+0x268>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }

        /* check if "question" part matches the request */
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 800fab2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fab4:	f107 0114 	add.w	r1, r7, #20
 800fab8:	2204      	movs	r2, #4
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f002 f86a 	bl	8011b94 <pbuf_copy_partial>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b04      	cmp	r3, #4
 800fac4:	f040 80c6 	bne.w	800fc54 <dns_recv+0x26c>
          goto ignore_packet; /* ignore this packet */
        }
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 800fac8:	8afb      	ldrh	r3, [r7, #22]
 800faca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800face:	f040 80c3 	bne.w	800fc58 <dns_recv+0x270>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
            (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_A)))) {
 800fad2:	8abb      	ldrh	r3, [r7, #20]
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 800fad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fad8:	f040 80be 	bne.w	800fc58 <dns_recv+0x270>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": response not match to query\n", entry->name));
          goto ignore_packet; /* ignore this packet */
        }
        /* skip the rest of the "question" part */
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 800fadc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fade:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800fae2:	4293      	cmp	r3, r2
 800fae4:	f200 80ba 	bhi.w	800fc5c <dns_recv+0x274>
          goto ignore_packet;
        }
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 800fae8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800faea:	3304      	adds	r3, #4
 800faec:	87bb      	strh	r3, [r7, #60]	; 0x3c

        /* Check for error. If so, call callback to inform. */
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 800faee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800faf2:	f003 030f 	and.w	r3, r3, #15
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d078      	beq.n	800fbec <dns_recv+0x204>
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in flags\n", entry->name));

          /* if there is another backup DNS server to try
           * then don't stop the DNS request
           */
          if (dns_backupserver_available(entry)) {
 800fafa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fafc:	f7ff fe62 	bl	800f7c4 <dns_backupserver_available>
 800fb00:	4603      	mov	r3, r0
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d07a      	beq.n	800fbfc <dns_recv+0x214>
            /* avoid retrying the same server */
            entry->retries = DNS_MAX_RETRIES-1;
 800fb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb08:	2203      	movs	r2, #3
 800fb0a:	735a      	strb	r2, [r3, #13]
            entry->tmr     = 1;
 800fb0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb0e:	2201      	movs	r2, #1
 800fb10:	731a      	strb	r2, [r3, #12]

            /* contact next available server for this entry */
            dns_check_entry(i);
 800fb12:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7ff fe74 	bl	800f804 <dns_check_entry>

            goto ignore_packet;
 800fb1c:	e0a9      	b.n	800fc72 <dns_recv+0x28a>
          }
        } else {
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
            /* skip answer resource record's host name */
            res_idx = dns_skip_name(p, res_idx);
 800fb1e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb20:	4619      	mov	r1, r3
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7ff fb92 	bl	800f24c <dns_skip_name>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
            if (res_idx == 0xFFFF) {
 800fb2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fb32:	4293      	cmp	r3, r2
 800fb34:	f000 8094 	beq.w	800fc60 <dns_recv+0x278>
              goto ignore_packet; /* ignore this packet */
            }

            /* Check for IP address type and Internet class. Others are discarded. */
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 800fb38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb3a:	f107 0118 	add.w	r1, r7, #24
 800fb3e:	220a      	movs	r2, #10
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f002 f827 	bl	8011b94 <pbuf_copy_partial>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2b0a      	cmp	r3, #10
 800fb4a:	f040 808b 	bne.w	800fc64 <dns_recv+0x27c>
              goto ignore_packet; /* ignore this packet */
            }
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 800fb4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb50:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fb54:	4293      	cmp	r3, r2
 800fb56:	f200 8087 	bhi.w	800fc68 <dns_recv+0x280>
              goto ignore_packet;
            }
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 800fb5a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb5c:	330a      	adds	r3, #10
 800fb5e:	87bb      	strh	r3, [r7, #60]	; 0x3c

            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 800fb60:	8b7b      	ldrh	r3, [r7, #26]
 800fb62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb66:	d12b      	bne.n	800fbc0 <dns_recv+0x1d8>
#if LWIP_IPV4
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 800fb68:	8b3b      	ldrh	r3, [r7, #24]
 800fb6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fb6e:	d127      	bne.n	800fbc0 <dns_recv+0x1d8>
 800fb70:	8c3b      	ldrh	r3, [r7, #32]
 800fb72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fb76:	d123      	bne.n	800fbc0 <dns_recv+0x1d8>
                if (!LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
                {
                  ip4_addr_t ip4addr;
                  /* read the IP address after answer resource record's header */
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 800fb78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fb7a:	f107 0110 	add.w	r1, r7, #16
 800fb7e:	2204      	movs	r2, #4
 800fb80:	6878      	ldr	r0, [r7, #4]
 800fb82:	f002 f807 	bl	8011b94 <pbuf_copy_partial>
 800fb86:	4603      	mov	r3, r0
 800fb88:	2b04      	cmp	r3, #4
 800fb8a:	d16f      	bne.n	800fc6c <dns_recv+0x284>
                    goto ignore_packet; /* ignore this packet */
                  }
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 800fb8c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fb90:	6939      	ldr	r1, [r7, #16]
 800fb92:	483b      	ldr	r0, [pc, #236]	; (800fc80 <dns_recv+0x298>)
 800fb94:	4613      	mov	r3, r2
 800fb96:	011b      	lsls	r3, r3, #4
 800fb98:	4413      	add	r3, r2
 800fb9a:	011b      	lsls	r3, r3, #4
 800fb9c:	4403      	add	r3, r0
 800fb9e:	3304      	adds	r3, #4
 800fba0:	6019      	str	r1, [r3, #0]
                  pbuf_free(p);
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f001 fdf0 	bl	8011788 <pbuf_free>
                  /* handle correct response */
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 800fba8:	69fb      	ldr	r3, [r7, #28]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7ff fa1d 	bl	800efea <lwip_htonl>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fbb6:	4611      	mov	r1, r2
 800fbb8:	4618      	mov	r0, r3
 800fbba:	f7ff fedf 	bl	800f97c <dns_correct_response>
 800fbbe:	e05c      	b.n	800fc7a <dns_recv+0x292>
                }
              }
#endif /* LWIP_IPV6 */
            }
            /* skip this answer */
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 800fbc0:	8fbc      	ldrh	r4, [r7, #60]	; 0x3c
 800fbc2:	8c3b      	ldrh	r3, [r7, #32]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	f7ff f9fb 	bl	800efc0 <lwip_htons>
 800fbca:	4603      	mov	r3, r0
 800fbcc:	4423      	add	r3, r4
 800fbce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbd2:	da4d      	bge.n	800fc70 <dns_recv+0x288>
              goto ignore_packet; /* ignore this packet */
            }
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 800fbd4:	8c3b      	ldrh	r3, [r7, #32]
 800fbd6:	4618      	mov	r0, r3
 800fbd8:	f7ff f9f2 	bl	800efc0 <lwip_htons>
 800fbdc:	4603      	mov	r3, r0
 800fbde:	461a      	mov	r2, r3
 800fbe0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fbe2:	4413      	add	r3, r2
 800fbe4:	87bb      	strh	r3, [r7, #60]	; 0x3c
            --nanswers;
 800fbe6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	877b      	strh	r3, [r7, #58]	; 0x3a
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 800fbec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d004      	beq.n	800fbfc <dns_recv+0x214>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	891b      	ldrh	r3, [r3, #8]
 800fbf6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800fbf8:	429a      	cmp	r2, r3
 800fbfa:	d390      	bcc.n	800fb1e <dns_recv+0x136>
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
          LWIP_DEBUGF(DNS_DEBUG, ("dns_recv: \"%s\": error in response\n", entry->name));
        }
        /* call callback to indicate error, clean up memory and return */
        pbuf_free(p);
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f001 fdc3 	bl	8011788 <pbuf_free>
        dns_call_found(i, NULL);
 800fc02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc06:	2100      	movs	r1, #0
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f7ff fceb 	bl	800f5e4 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 800fc0e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800fc12:	491b      	ldr	r1, [pc, #108]	; (800fc80 <dns_recv+0x298>)
 800fc14:	4613      	mov	r3, r2
 800fc16:	011b      	lsls	r3, r3, #4
 800fc18:	4413      	add	r3, r2
 800fc1a:	011b      	lsls	r3, r3, #4
 800fc1c:	440b      	add	r3, r1
 800fc1e:	330a      	adds	r3, #10
 800fc20:	2200      	movs	r2, #0
 800fc22:	701a      	strb	r2, [r3, #0]
        return;
 800fc24:	e029      	b.n	800fc7a <dns_recv+0x292>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800fc26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc2a:	3301      	adds	r3, #1
 800fc2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800fc30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fc34:	2b03      	cmp	r3, #3
 800fc36:	f67f aef8 	bls.w	800fa2a <dns_recv+0x42>
      }
    }
  }

ignore_packet:
 800fc3a:	e001      	b.n	800fc40 <dns_recv+0x258>
    goto ignore_packet;
 800fc3c:	bf00      	nop
 800fc3e:	e018      	b.n	800fc72 <dns_recv+0x28a>
ignore_packet:
 800fc40:	bf00      	nop
 800fc42:	e016      	b.n	800fc72 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800fc44:	bf00      	nop
 800fc46:	e014      	b.n	800fc72 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800fc48:	bf00      	nop
 800fc4a:	e012      	b.n	800fc72 <dns_recv+0x28a>
            goto ignore_packet; /* ignore this packet */
 800fc4c:	bf00      	nop
 800fc4e:	e010      	b.n	800fc72 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800fc50:	bf00      	nop
 800fc52:	e00e      	b.n	800fc72 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800fc54:	bf00      	nop
 800fc56:	e00c      	b.n	800fc72 <dns_recv+0x28a>
          goto ignore_packet; /* ignore this packet */
 800fc58:	bf00      	nop
 800fc5a:	e00a      	b.n	800fc72 <dns_recv+0x28a>
          goto ignore_packet;
 800fc5c:	bf00      	nop
 800fc5e:	e008      	b.n	800fc72 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800fc60:	bf00      	nop
 800fc62:	e006      	b.n	800fc72 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800fc64:	bf00      	nop
 800fc66:	e004      	b.n	800fc72 <dns_recv+0x28a>
              goto ignore_packet;
 800fc68:	bf00      	nop
 800fc6a:	e002      	b.n	800fc72 <dns_recv+0x28a>
                    goto ignore_packet; /* ignore this packet */
 800fc6c:	bf00      	nop
 800fc6e:	e000      	b.n	800fc72 <dns_recv+0x28a>
              goto ignore_packet; /* ignore this packet */
 800fc70:	bf00      	nop
  /* deallocate memory and return */
  pbuf_free(p);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f001 fd88 	bl	8011788 <pbuf_free>
  return;
 800fc78:	bf00      	nop
}
 800fc7a:	3744      	adds	r7, #68	; 0x44
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	bd90      	pop	{r4, r7, pc}
 800fc80:	24006cd8 	.word	0x24006cd8
 800fc84:	24007148 	.word	0x24007148

0800fc88 <dns_enqueue>:
 * @return err_t return code.
 */
static err_t
dns_enqueue(const char *name, size_t hostnamelen, dns_found_callback found,
            void *callback_arg LWIP_DNS_ADDRTYPE_ARG(u8_t dns_addrtype) LWIP_DNS_ISMDNS_ARG(u8_t is_mdns))
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b08a      	sub	sp, #40	; 0x28
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	60f8      	str	r0, [r7, #12]
 800fc90:	60b9      	str	r1, [r7, #8]
 800fc92:	607a      	str	r2, [r7, #4]
 800fc94:	603b      	str	r3, [r7, #0]
  u8_t i;
  u8_t lseq, lseqi;
  struct dns_table_entry *entry = NULL;
 800fc96:	2300      	movs	r3, #0
 800fc98:	623b      	str	r3, [r7, #32]
  struct dns_req_entry *req;

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  u8_t r;
  /* check for duplicate entries */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800fc9a:	2300      	movs	r3, #0
 800fc9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fca0:	e056      	b.n	800fd50 <dns_enqueue+0xc8>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800fca2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fca6:	4990      	ldr	r1, [pc, #576]	; (800fee8 <dns_enqueue+0x260>)
 800fca8:	4613      	mov	r3, r2
 800fcaa:	011b      	lsls	r3, r3, #4
 800fcac:	4413      	add	r3, r2
 800fcae:	011b      	lsls	r3, r3, #4
 800fcb0:	440b      	add	r3, r1
 800fcb2:	330a      	adds	r3, #10
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	2b02      	cmp	r3, #2
 800fcb8:	d145      	bne.n	800fd46 <dns_enqueue+0xbe>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 800fcba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fcbe:	4613      	mov	r3, r2
 800fcc0:	011b      	lsls	r3, r3, #4
 800fcc2:	4413      	add	r3, r2
 800fcc4:	011b      	lsls	r3, r3, #4
 800fcc6:	3310      	adds	r3, #16
 800fcc8:	4a87      	ldr	r2, [pc, #540]	; (800fee8 <dns_enqueue+0x260>)
 800fcca:	4413      	add	r3, r2
 800fccc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fcd0:	4619      	mov	r1, r3
 800fcd2:	68f8      	ldr	r0, [r7, #12]
 800fcd4:	f7ff f9a2 	bl	800f01c <lwip_strnicmp>
 800fcd8:	4603      	mov	r3, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d133      	bne.n	800fd46 <dns_enqueue+0xbe>
           for the same host should not be that common */
        continue;
      }
#endif /* LWIP_IPV4 && LWIP_IPV6 */
      /* this is a duplicate entry, find a free request entry */
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800fcde:	2300      	movs	r3, #0
 800fce0:	76fb      	strb	r3, [r7, #27]
 800fce2:	e02d      	b.n	800fd40 <dns_enqueue+0xb8>
        if (dns_requests[r].found == 0) {
 800fce4:	7efa      	ldrb	r2, [r7, #27]
 800fce6:	4981      	ldr	r1, [pc, #516]	; (800feec <dns_enqueue+0x264>)
 800fce8:	4613      	mov	r3, r2
 800fcea:	005b      	lsls	r3, r3, #1
 800fcec:	4413      	add	r3, r2
 800fcee:	009b      	lsls	r3, r3, #2
 800fcf0:	440b      	add	r3, r1
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d120      	bne.n	800fd3a <dns_enqueue+0xb2>
          dns_requests[r].found = found;
 800fcf8:	7efa      	ldrb	r2, [r7, #27]
 800fcfa:	497c      	ldr	r1, [pc, #496]	; (800feec <dns_enqueue+0x264>)
 800fcfc:	4613      	mov	r3, r2
 800fcfe:	005b      	lsls	r3, r3, #1
 800fd00:	4413      	add	r3, r2
 800fd02:	009b      	lsls	r3, r3, #2
 800fd04:	440b      	add	r3, r1
 800fd06:	687a      	ldr	r2, [r7, #4]
 800fd08:	601a      	str	r2, [r3, #0]
          dns_requests[r].arg = callback_arg;
 800fd0a:	7efa      	ldrb	r2, [r7, #27]
 800fd0c:	4977      	ldr	r1, [pc, #476]	; (800feec <dns_enqueue+0x264>)
 800fd0e:	4613      	mov	r3, r2
 800fd10:	005b      	lsls	r3, r3, #1
 800fd12:	4413      	add	r3, r2
 800fd14:	009b      	lsls	r3, r3, #2
 800fd16:	440b      	add	r3, r1
 800fd18:	3304      	adds	r3, #4
 800fd1a:	683a      	ldr	r2, [r7, #0]
 800fd1c:	601a      	str	r2, [r3, #0]
          dns_requests[r].dns_table_idx = i;
 800fd1e:	7efa      	ldrb	r2, [r7, #27]
 800fd20:	4972      	ldr	r1, [pc, #456]	; (800feec <dns_enqueue+0x264>)
 800fd22:	4613      	mov	r3, r2
 800fd24:	005b      	lsls	r3, r3, #1
 800fd26:	4413      	add	r3, r2
 800fd28:	009b      	lsls	r3, r3, #2
 800fd2a:	440b      	add	r3, r1
 800fd2c:	3308      	adds	r3, #8
 800fd2e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fd32:	701a      	strb	r2, [r3, #0]
          LWIP_DNS_SET_ADDRTYPE(dns_requests[r].reqaddrtype, dns_addrtype);
          LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": duplicate request\n", name));
          return ERR_INPROGRESS;
 800fd34:	f06f 0304 	mvn.w	r3, #4
 800fd38:	e0d1      	b.n	800fede <dns_enqueue+0x256>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800fd3a:	7efb      	ldrb	r3, [r7, #27]
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	76fb      	strb	r3, [r7, #27]
 800fd40:	7efb      	ldrb	r3, [r7, #27]
 800fd42:	2b03      	cmp	r3, #3
 800fd44:	d9ce      	bls.n	800fce4 <dns_enqueue+0x5c>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800fd46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd4a:	3301      	adds	r3, #1
 800fd4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fd50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd54:	2b03      	cmp	r3, #3
 800fd56:	d9a4      	bls.n	800fca2 <dns_enqueue+0x1a>
  }
  /* no duplicate entries found */
#endif

  /* search an unused entry, or the oldest one */
  lseq = 0;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  lseqi = DNS_TABLE_SIZE;
 800fd5e:	2304      	movs	r3, #4
 800fd60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800fd64:	2300      	movs	r3, #0
 800fd66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fd6a:	e027      	b.n	800fdbc <dns_enqueue+0x134>
    entry = &dns_table[i];
 800fd6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fd70:	4613      	mov	r3, r2
 800fd72:	011b      	lsls	r3, r3, #4
 800fd74:	4413      	add	r3, r2
 800fd76:	011b      	lsls	r3, r3, #4
 800fd78:	4a5b      	ldr	r2, [pc, #364]	; (800fee8 <dns_enqueue+0x260>)
 800fd7a:	4413      	add	r3, r2
 800fd7c:	623b      	str	r3, [r7, #32]
    /* is it an unused entry ? */
    if (entry->state == DNS_STATE_UNUSED) {
 800fd7e:	6a3b      	ldr	r3, [r7, #32]
 800fd80:	7a9b      	ldrb	r3, [r3, #10]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d01f      	beq.n	800fdc6 <dns_enqueue+0x13e>
      break;
    }
    /* check if this is the oldest completed entry */
    if (entry->state == DNS_STATE_DONE) {
 800fd86:	6a3b      	ldr	r3, [r7, #32]
 800fd88:	7a9b      	ldrb	r3, [r3, #10]
 800fd8a:	2b03      	cmp	r3, #3
 800fd8c:	d111      	bne.n	800fdb2 <dns_enqueue+0x12a>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 800fd8e:	4b58      	ldr	r3, [pc, #352]	; (800fef0 <dns_enqueue+0x268>)
 800fd90:	781a      	ldrb	r2, [r3, #0]
 800fd92:	6a3b      	ldr	r3, [r7, #32]
 800fd94:	7b9b      	ldrb	r3, [r3, #14]
 800fd96:	1ad3      	subs	r3, r2, r3
 800fd98:	76bb      	strb	r3, [r7, #26]
      if (age > lseq) {
 800fd9a:	7eba      	ldrb	r2, [r7, #26]
 800fd9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fda0:	429a      	cmp	r2, r3
 800fda2:	d906      	bls.n	800fdb2 <dns_enqueue+0x12a>
        lseq = age;
 800fda4:	7ebb      	ldrb	r3, [r7, #26]
 800fda6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        lseqi = i;
 800fdaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800fdb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fdbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdc0:	2b03      	cmp	r3, #3
 800fdc2:	d9d3      	bls.n	800fd6c <dns_enqueue+0xe4>
 800fdc4:	e000      	b.n	800fdc8 <dns_enqueue+0x140>
      break;
 800fdc6:	bf00      	nop
      }
    }
  }

  /* if we don't have found an unused entry, use the oldest completed one */
  if (i == DNS_TABLE_SIZE) {
 800fdc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdcc:	2b04      	cmp	r3, #4
 800fdce:	d11f      	bne.n	800fe10 <dns_enqueue+0x188>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 800fdd0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800fdd4:	2b03      	cmp	r3, #3
 800fdd6:	d80b      	bhi.n	800fdf0 <dns_enqueue+0x168>
 800fdd8:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800fddc:	4942      	ldr	r1, [pc, #264]	; (800fee8 <dns_enqueue+0x260>)
 800fdde:	4613      	mov	r3, r2
 800fde0:	011b      	lsls	r3, r3, #4
 800fde2:	4413      	add	r3, r2
 800fde4:	011b      	lsls	r3, r3, #4
 800fde6:	440b      	add	r3, r1
 800fde8:	330a      	adds	r3, #10
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	2b03      	cmp	r3, #3
 800fdee:	d002      	beq.n	800fdf6 <dns_enqueue+0x16e>
      /* no entry can be used now, table is full */
      LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS entries table is full\n", name));
      return ERR_MEM;
 800fdf0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdf4:	e073      	b.n	800fede <dns_enqueue+0x256>
    } else {
      /* use the oldest completed one */
      i = lseqi;
 800fdf6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800fdfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      entry = &dns_table[i];
 800fdfe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fe02:	4613      	mov	r3, r2
 800fe04:	011b      	lsls	r3, r3, #4
 800fe06:	4413      	add	r3, r2
 800fe08:	011b      	lsls	r3, r3, #4
 800fe0a:	4a37      	ldr	r2, [pc, #220]	; (800fee8 <dns_enqueue+0x260>)
 800fe0c:	4413      	add	r3, r2
 800fe0e:	623b      	str	r3, [r7, #32]
    }
  }

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  /* find a free request entry */
  req = NULL;
 800fe10:	2300      	movs	r3, #0
 800fe12:	61fb      	str	r3, [r7, #28]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800fe14:	2300      	movs	r3, #0
 800fe16:	76fb      	strb	r3, [r7, #27]
 800fe18:	e015      	b.n	800fe46 <dns_enqueue+0x1be>
    if (dns_requests[r].found == NULL) {
 800fe1a:	7efa      	ldrb	r2, [r7, #27]
 800fe1c:	4933      	ldr	r1, [pc, #204]	; (800feec <dns_enqueue+0x264>)
 800fe1e:	4613      	mov	r3, r2
 800fe20:	005b      	lsls	r3, r3, #1
 800fe22:	4413      	add	r3, r2
 800fe24:	009b      	lsls	r3, r3, #2
 800fe26:	440b      	add	r3, r1
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d108      	bne.n	800fe40 <dns_enqueue+0x1b8>
      req = &dns_requests[r];
 800fe2e:	7efa      	ldrb	r2, [r7, #27]
 800fe30:	4613      	mov	r3, r2
 800fe32:	005b      	lsls	r3, r3, #1
 800fe34:	4413      	add	r3, r2
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	4a2c      	ldr	r2, [pc, #176]	; (800feec <dns_enqueue+0x264>)
 800fe3a:	4413      	add	r3, r2
 800fe3c:	61fb      	str	r3, [r7, #28]
      break;
 800fe3e:	e005      	b.n	800fe4c <dns_enqueue+0x1c4>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 800fe40:	7efb      	ldrb	r3, [r7, #27]
 800fe42:	3301      	adds	r3, #1
 800fe44:	76fb      	strb	r3, [r7, #27]
 800fe46:	7efb      	ldrb	r3, [r7, #27]
 800fe48:	2b03      	cmp	r3, #3
 800fe4a:	d9e6      	bls.n	800fe1a <dns_enqueue+0x192>
    }
  }
  if (req == NULL) {
 800fe4c:	69fb      	ldr	r3, [r7, #28]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d102      	bne.n	800fe58 <dns_enqueue+0x1d0>
    /* no request entry can be used now, table is full */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": DNS request entries table is full\n", name));
    return ERR_MEM;
 800fe52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fe56:	e042      	b.n	800fede <dns_enqueue+0x256>
  }
  req->dns_table_idx = i;
 800fe58:	69fb      	ldr	r3, [r7, #28]
 800fe5a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fe5e:	721a      	strb	r2, [r3, #8]

  /* use this entry */
  LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": use DNS entry %"U16_F"\n", name, (u16_t)(i)));

  /* fill the entry */
  entry->state = DNS_STATE_NEW;
 800fe60:	6a3b      	ldr	r3, [r7, #32]
 800fe62:	2201      	movs	r2, #1
 800fe64:	729a      	strb	r2, [r3, #10]
  entry->seqno = dns_seqno;
 800fe66:	4b22      	ldr	r3, [pc, #136]	; (800fef0 <dns_enqueue+0x268>)
 800fe68:	781a      	ldrb	r2, [r3, #0]
 800fe6a:	6a3b      	ldr	r3, [r7, #32]
 800fe6c:	739a      	strb	r2, [r3, #14]
  LWIP_DNS_SET_ADDRTYPE(entry->reqaddrtype, dns_addrtype);
  LWIP_DNS_SET_ADDRTYPE(req->reqaddrtype, dns_addrtype);
  req->found = found;
 800fe6e:	69fb      	ldr	r3, [r7, #28]
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	601a      	str	r2, [r3, #0]
  req->arg   = callback_arg;
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	683a      	ldr	r2, [r7, #0]
 800fe78:	605a      	str	r2, [r3, #4]
  namelen = LWIP_MIN(hostnamelen, DNS_MAX_NAME_LENGTH - 1);
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	2bff      	cmp	r3, #255	; 0xff
 800fe7e:	bf28      	it	cs
 800fe80:	23ff      	movcs	r3, #255	; 0xff
 800fe82:	617b      	str	r3, [r7, #20]
  MEMCPY(entry->name, name, namelen);
 800fe84:	6a3b      	ldr	r3, [r7, #32]
 800fe86:	3310      	adds	r3, #16
 800fe88:	697a      	ldr	r2, [r7, #20]
 800fe8a:	68f9      	ldr	r1, [r7, #12]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f009 f82d 	bl	8018eec <memcpy>
  entry->name[namelen] = 0;
 800fe92:	6a3a      	ldr	r2, [r7, #32]
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	4413      	add	r3, r2
 800fe98:	3310      	adds	r3, #16
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	701a      	strb	r2, [r3, #0]

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  entry->pcb_idx = dns_alloc_pcb();
 800fe9e:	f7ff fb4f 	bl	800f540 <dns_alloc_pcb>
 800fea2:	4603      	mov	r3, r0
 800fea4:	461a      	mov	r2, r3
 800fea6:	6a3b      	ldr	r3, [r7, #32]
 800fea8:	73da      	strb	r2, [r3, #15]
  if (entry->pcb_idx >= DNS_MAX_SOURCE_PORTS) {
 800feaa:	6a3b      	ldr	r3, [r7, #32]
 800feac:	7bdb      	ldrb	r3, [r3, #15]
 800feae:	2b03      	cmp	r3, #3
 800feb0:	d908      	bls.n	800fec4 <dns_enqueue+0x23c>
    /* failed to get a UDP pcb */
    LWIP_DEBUGF(DNS_DEBUG, ("dns_enqueue: \"%s\": failed to allocate a pcb\n", name));
    entry->state = DNS_STATE_UNUSED;
 800feb2:	6a3b      	ldr	r3, [r7, #32]
 800feb4:	2200      	movs	r2, #0
 800feb6:	729a      	strb	r2, [r3, #10]
    req->found = NULL;
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	2200      	movs	r2, #0
 800febc:	601a      	str	r2, [r3, #0]
    return ERR_MEM;
 800febe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fec2:	e00c      	b.n	800fede <dns_enqueue+0x256>

#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  entry->is_mdns = is_mdns;
#endif

  dns_seqno++;
 800fec4:	4b0a      	ldr	r3, [pc, #40]	; (800fef0 <dns_enqueue+0x268>)
 800fec6:	781b      	ldrb	r3, [r3, #0]
 800fec8:	3301      	adds	r3, #1
 800feca:	b2da      	uxtb	r2, r3
 800fecc:	4b08      	ldr	r3, [pc, #32]	; (800fef0 <dns_enqueue+0x268>)
 800fece:	701a      	strb	r2, [r3, #0]

  /* force to send query without waiting timer */
  dns_check_entry(i);
 800fed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7ff fc95 	bl	800f804 <dns_check_entry>

  /* dns query is enqueued */
  return ERR_INPROGRESS;
 800feda:	f06f 0304 	mvn.w	r3, #4
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3728      	adds	r7, #40	; 0x28
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	24006cd8 	.word	0x24006cd8
 800feec:	24007118 	.word	0x24007118
 800fef0:	24006cd5 	.word	0x24006cd5

0800fef4 <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b086      	sub	sp, #24
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	60f8      	str	r0, [r7, #12]
 800fefc:	60b9      	str	r1, [r7, #8]
 800fefe:	607a      	str	r2, [r7, #4]
 800ff00:	603b      	str	r3, [r7, #0]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d006      	beq.n	800ff16 <dns_gethostbyname_addrtype+0x22>
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d003      	beq.n	800ff16 <dns_gethostbyname_addrtype+0x22>
      (!hostname) || (!hostname[0])) {
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	781b      	ldrb	r3, [r3, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d102      	bne.n	800ff1c <dns_gethostbyname_addrtype+0x28>
    return ERR_ARG;
 800ff16:	f06f 030f 	mvn.w	r3, #15
 800ff1a:	e029      	b.n	800ff70 <dns_gethostbyname_addrtype+0x7c>
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 800ff1c:	68f8      	ldr	r0, [r7, #12]
 800ff1e:	f7f0 f9e9 	bl	80002f4 <strlen>
 800ff22:	6178      	str	r0, [r7, #20]
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	2bff      	cmp	r3, #255	; 0xff
 800ff28:	d902      	bls.n	800ff30 <dns_gethostbyname_addrtype+0x3c>
    LWIP_DEBUGF(DNS_DEBUG, ("dns_gethostbyname: name too long to resolve"));
    return ERR_ARG;
 800ff2a:	f06f 030f 	mvn.w	r3, #15
 800ff2e:	e01f      	b.n	800ff70 <dns_gethostbyname_addrtype+0x7c>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 800ff30:	68b9      	ldr	r1, [r7, #8]
 800ff32:	68f8      	ldr	r0, [r7, #12]
 800ff34:	f7fe f8e2 	bl	800e0fc <ip4addr_aton>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d001      	beq.n	800ff42 <dns_gethostbyname_addrtype+0x4e>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	e016      	b.n	800ff70 <dns_gethostbyname_addrtype+0x7c>
    }
  }
  /* already have this address cached? */
  if (dns_lookup(hostname, addr LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)) == ERR_OK) {
 800ff42:	68b9      	ldr	r1, [r7, #8]
 800ff44:	68f8      	ldr	r0, [r7, #12]
 800ff46:	f7ff f8b1 	bl	800f0ac <dns_lookup>
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d101      	bne.n	800ff54 <dns_gethostbyname_addrtype+0x60>
    return ERR_OK;
 800ff50:	2300      	movs	r3, #0
 800ff52:	e00d      	b.n	800ff70 <dns_gethostbyname_addrtype+0x7c>

  if (!is_mdns)
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
  {
    /* prevent calling found callback if no server is set, return error instead */
    if (ip_addr_isany_val(dns_servers[0])) {
 800ff54:	4b08      	ldr	r3, [pc, #32]	; (800ff78 <dns_gethostbyname_addrtype+0x84>)
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d102      	bne.n	800ff62 <dns_gethostbyname_addrtype+0x6e>
      return ERR_VAL;
 800ff5c:	f06f 0305 	mvn.w	r3, #5
 800ff60:	e006      	b.n	800ff70 <dns_gethostbyname_addrtype+0x7c>
    }
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	687a      	ldr	r2, [r7, #4]
 800ff66:	6979      	ldr	r1, [r7, #20]
 800ff68:	68f8      	ldr	r0, [r7, #12]
 800ff6a:	f7ff fe8d 	bl	800fc88 <dns_enqueue>
 800ff6e:	4603      	mov	r3, r0
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3718      	adds	r7, #24
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	24007148 	.word	0x24007148

0800ff7c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b089      	sub	sp, #36	; 0x24
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800ff8e:	2300      	movs	r3, #0
 800ff90:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800ff92:	69fb      	ldr	r3, [r7, #28]
 800ff94:	f003 0301 	and.w	r3, r3, #1
 800ff98:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d00d      	beq.n	800ffbc <lwip_standard_chksum+0x40>
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	dd0a      	ble.n	800ffbc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800ffa6:	69fa      	ldr	r2, [r7, #28]
 800ffa8:	1c53      	adds	r3, r2, #1
 800ffaa:	61fb      	str	r3, [r7, #28]
 800ffac:	f107 030e 	add.w	r3, r7, #14
 800ffb0:	3301      	adds	r3, #1
 800ffb2:	7812      	ldrb	r2, [r2, #0]
 800ffb4:	701a      	strb	r2, [r3, #0]
    len--;
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	3b01      	subs	r3, #1
 800ffba:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800ffbc:	69fb      	ldr	r3, [r7, #28]
 800ffbe:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800ffc0:	e00a      	b.n	800ffd8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800ffc2:	69bb      	ldr	r3, [r7, #24]
 800ffc4:	1c9a      	adds	r2, r3, #2
 800ffc6:	61ba      	str	r2, [r7, #24]
 800ffc8:	881b      	ldrh	r3, [r3, #0]
 800ffca:	461a      	mov	r2, r3
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	4413      	add	r3, r2
 800ffd0:	617b      	str	r3, [r7, #20]
    len -= 2;
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	3b02      	subs	r3, #2
 800ffd6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	2b01      	cmp	r3, #1
 800ffdc:	dcf1      	bgt.n	800ffc2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	dd04      	ble.n	800ffee <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800ffe4:	f107 030e 	add.w	r3, r7, #14
 800ffe8:	69ba      	ldr	r2, [r7, #24]
 800ffea:	7812      	ldrb	r2, [r2, #0]
 800ffec:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ffee:	89fb      	ldrh	r3, [r7, #14]
 800fff0:	461a      	mov	r2, r3
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	4413      	add	r3, r2
 800fff6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	0c1a      	lsrs	r2, r3, #16
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	b29b      	uxth	r3, r3
 8010000:	4413      	add	r3, r2
 8010002:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	0c1a      	lsrs	r2, r3, #16
 8010008:	697b      	ldr	r3, [r7, #20]
 801000a:	b29b      	uxth	r3, r3
 801000c:	4413      	add	r3, r2
 801000e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	2b00      	cmp	r3, #0
 8010014:	d007      	beq.n	8010026 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	021b      	lsls	r3, r3, #8
 801001a:	b29a      	uxth	r2, r3
 801001c:	697b      	ldr	r3, [r7, #20]
 801001e:	0a1b      	lsrs	r3, r3, #8
 8010020:	b2db      	uxtb	r3, r3
 8010022:	4313      	orrs	r3, r2
 8010024:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	b29b      	uxth	r3, r3
}
 801002a:	4618      	mov	r0, r3
 801002c:	3724      	adds	r7, #36	; 0x24
 801002e:	46bd      	mov	sp, r7
 8010030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010034:	4770      	bx	lr

08010036 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8010036:	b580      	push	{r7, lr}
 8010038:	b082      	sub	sp, #8
 801003a:	af00      	add	r7, sp, #0
 801003c:	6078      	str	r0, [r7, #4]
 801003e:	460b      	mov	r3, r1
 8010040:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8010042:	887b      	ldrh	r3, [r7, #2]
 8010044:	4619      	mov	r1, r3
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f7ff ff98 	bl	800ff7c <lwip_standard_chksum>
 801004c:	4603      	mov	r3, r0
 801004e:	43db      	mvns	r3, r3
 8010050:	b29b      	uxth	r3, r3
}
 8010052:	4618      	mov	r0, r3
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}

0801005a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801005a:	b580      	push	{r7, lr}
 801005c:	b082      	sub	sp, #8
 801005e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010060:	2300      	movs	r3, #0
 8010062:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010064:	f008 fe48 	bl	8018cf8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010068:	f000 f8d6 	bl	8010218 <mem_init>
  memp_init();
 801006c:	f000 fc2e 	bl	80108cc <memp_init>
  pbuf_init();
  netif_init();
 8010070:	f000 fd3a 	bl	8010ae8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010074:	f007 fe98 	bl	8017da8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010078:	f001 ffac 	bl	8011fd4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 801007c:	f7ff f809 	bl	800f092 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010080:	f007 fdd8 	bl	8017c34 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010084:	bf00      	nop
 8010086:	3708      	adds	r7, #8
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}

0801008c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801008c:	b480      	push	{r7}
 801008e:	b083      	sub	sp, #12
 8010090:	af00      	add	r7, sp, #0
 8010092:	4603      	mov	r3, r0
 8010094:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010096:	4b05      	ldr	r3, [pc, #20]	; (80100ac <ptr_to_mem+0x20>)
 8010098:	681a      	ldr	r2, [r3, #0]
 801009a:	88fb      	ldrh	r3, [r7, #6]
 801009c:	4413      	add	r3, r2
}
 801009e:	4618      	mov	r0, r3
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr
 80100aa:	bf00      	nop
 80100ac:	24007150 	.word	0x24007150

080100b0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80100b0:	b480      	push	{r7}
 80100b2:	b083      	sub	sp, #12
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80100b8:	4b05      	ldr	r3, [pc, #20]	; (80100d0 <mem_to_ptr+0x20>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	687a      	ldr	r2, [r7, #4]
 80100be:	1ad3      	subs	r3, r2, r3
 80100c0:	b29b      	uxth	r3, r3
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	370c      	adds	r7, #12
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	24007150 	.word	0x24007150

080100d4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80100d4:	b590      	push	{r4, r7, lr}
 80100d6:	b085      	sub	sp, #20
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80100dc:	4b45      	ldr	r3, [pc, #276]	; (80101f4 <plug_holes+0x120>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	687a      	ldr	r2, [r7, #4]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d206      	bcs.n	80100f4 <plug_holes+0x20>
 80100e6:	4b44      	ldr	r3, [pc, #272]	; (80101f8 <plug_holes+0x124>)
 80100e8:	f240 12df 	movw	r2, #479	; 0x1df
 80100ec:	4943      	ldr	r1, [pc, #268]	; (80101fc <plug_holes+0x128>)
 80100ee:	4844      	ldr	r0, [pc, #272]	; (8010200 <plug_holes+0x12c>)
 80100f0:	f008 ff2c 	bl	8018f4c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80100f4:	4b43      	ldr	r3, [pc, #268]	; (8010204 <plug_holes+0x130>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	687a      	ldr	r2, [r7, #4]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d306      	bcc.n	801010c <plug_holes+0x38>
 80100fe:	4b3e      	ldr	r3, [pc, #248]	; (80101f8 <plug_holes+0x124>)
 8010100:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8010104:	4940      	ldr	r1, [pc, #256]	; (8010208 <plug_holes+0x134>)
 8010106:	483e      	ldr	r0, [pc, #248]	; (8010200 <plug_holes+0x12c>)
 8010108:	f008 ff20 	bl	8018f4c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	791b      	ldrb	r3, [r3, #4]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d006      	beq.n	8010122 <plug_holes+0x4e>
 8010114:	4b38      	ldr	r3, [pc, #224]	; (80101f8 <plug_holes+0x124>)
 8010116:	f240 12e1 	movw	r2, #481	; 0x1e1
 801011a:	493c      	ldr	r1, [pc, #240]	; (801020c <plug_holes+0x138>)
 801011c:	4838      	ldr	r0, [pc, #224]	; (8010200 <plug_holes+0x12c>)
 801011e:	f008 ff15 	bl	8018f4c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	881b      	ldrh	r3, [r3, #0]
 8010126:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801012a:	d906      	bls.n	801013a <plug_holes+0x66>
 801012c:	4b32      	ldr	r3, [pc, #200]	; (80101f8 <plug_holes+0x124>)
 801012e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8010132:	4937      	ldr	r1, [pc, #220]	; (8010210 <plug_holes+0x13c>)
 8010134:	4832      	ldr	r0, [pc, #200]	; (8010200 <plug_holes+0x12c>)
 8010136:	f008 ff09 	bl	8018f4c <iprintf>

  nmem = ptr_to_mem(mem->next);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	881b      	ldrh	r3, [r3, #0]
 801013e:	4618      	mov	r0, r3
 8010140:	f7ff ffa4 	bl	801008c <ptr_to_mem>
 8010144:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010146:	687a      	ldr	r2, [r7, #4]
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	429a      	cmp	r2, r3
 801014c:	d024      	beq.n	8010198 <plug_holes+0xc4>
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	791b      	ldrb	r3, [r3, #4]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d120      	bne.n	8010198 <plug_holes+0xc4>
 8010156:	4b2b      	ldr	r3, [pc, #172]	; (8010204 <plug_holes+0x130>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	68fa      	ldr	r2, [r7, #12]
 801015c:	429a      	cmp	r2, r3
 801015e:	d01b      	beq.n	8010198 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010160:	4b2c      	ldr	r3, [pc, #176]	; (8010214 <plug_holes+0x140>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	68fa      	ldr	r2, [r7, #12]
 8010166:	429a      	cmp	r2, r3
 8010168:	d102      	bne.n	8010170 <plug_holes+0x9c>
      lfree = mem;
 801016a:	4a2a      	ldr	r2, [pc, #168]	; (8010214 <plug_holes+0x140>)
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	881a      	ldrh	r2, [r3, #0]
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	881b      	ldrh	r3, [r3, #0]
 801017c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010180:	d00a      	beq.n	8010198 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	881b      	ldrh	r3, [r3, #0]
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff ff80 	bl	801008c <ptr_to_mem>
 801018c:	4604      	mov	r4, r0
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	f7ff ff8e 	bl	80100b0 <mem_to_ptr>
 8010194:	4603      	mov	r3, r0
 8010196:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	885b      	ldrh	r3, [r3, #2]
 801019c:	4618      	mov	r0, r3
 801019e:	f7ff ff75 	bl	801008c <ptr_to_mem>
 80101a2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80101a4:	68ba      	ldr	r2, [r7, #8]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	429a      	cmp	r2, r3
 80101aa:	d01f      	beq.n	80101ec <plug_holes+0x118>
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	791b      	ldrb	r3, [r3, #4]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d11b      	bne.n	80101ec <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80101b4:	4b17      	ldr	r3, [pc, #92]	; (8010214 <plug_holes+0x140>)
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d102      	bne.n	80101c4 <plug_holes+0xf0>
      lfree = pmem;
 80101be:	4a15      	ldr	r2, [pc, #84]	; (8010214 <plug_holes+0x140>)
 80101c0:	68bb      	ldr	r3, [r7, #8]
 80101c2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	881a      	ldrh	r2, [r3, #0]
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	881b      	ldrh	r3, [r3, #0]
 80101d0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80101d4:	d00a      	beq.n	80101ec <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	4618      	mov	r0, r3
 80101dc:	f7ff ff56 	bl	801008c <ptr_to_mem>
 80101e0:	4604      	mov	r4, r0
 80101e2:	68b8      	ldr	r0, [r7, #8]
 80101e4:	f7ff ff64 	bl	80100b0 <mem_to_ptr>
 80101e8:	4603      	mov	r3, r0
 80101ea:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80101ec:	bf00      	nop
 80101ee:	3714      	adds	r7, #20
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd90      	pop	{r4, r7, pc}
 80101f4:	24007150 	.word	0x24007150
 80101f8:	0801c7a0 	.word	0x0801c7a0
 80101fc:	0801c814 	.word	0x0801c814
 8010200:	0801c82c 	.word	0x0801c82c
 8010204:	24007154 	.word	0x24007154
 8010208:	0801c854 	.word	0x0801c854
 801020c:	0801c870 	.word	0x0801c870
 8010210:	0801c88c 	.word	0x0801c88c
 8010214:	2400715c 	.word	0x2400715c

08010218 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b082      	sub	sp, #8
 801021c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801021e:	4b1d      	ldr	r3, [pc, #116]	; (8010294 <mem_init+0x7c>)
 8010220:	4a1d      	ldr	r2, [pc, #116]	; (8010298 <mem_init+0x80>)
 8010222:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010224:	4b1b      	ldr	r3, [pc, #108]	; (8010294 <mem_init+0x7c>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8010230:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	2200      	movs	r2, #0
 8010236:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	2200      	movs	r2, #0
 801023c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801023e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8010242:	f7ff ff23 	bl	801008c <ptr_to_mem>
 8010246:	4603      	mov	r3, r0
 8010248:	4a14      	ldr	r2, [pc, #80]	; (801029c <mem_init+0x84>)
 801024a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801024c:	4b13      	ldr	r3, [pc, #76]	; (801029c <mem_init+0x84>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2201      	movs	r2, #1
 8010252:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8010254:	4b11      	ldr	r3, [pc, #68]	; (801029c <mem_init+0x84>)
 8010256:	681b      	ldr	r3, [r3, #0]
 8010258:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 801025c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801025e:	4b0f      	ldr	r3, [pc, #60]	; (801029c <mem_init+0x84>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8010266:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010268:	4b0a      	ldr	r3, [pc, #40]	; (8010294 <mem_init+0x7c>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	4a0c      	ldr	r2, [pc, #48]	; (80102a0 <mem_init+0x88>)
 801026e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010270:	480c      	ldr	r0, [pc, #48]	; (80102a4 <mem_init+0x8c>)
 8010272:	f008 fd4f 	bl	8018d14 <sys_mutex_new>
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d006      	beq.n	801028a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801027c:	4b0a      	ldr	r3, [pc, #40]	; (80102a8 <mem_init+0x90>)
 801027e:	f240 221f 	movw	r2, #543	; 0x21f
 8010282:	490a      	ldr	r1, [pc, #40]	; (80102ac <mem_init+0x94>)
 8010284:	480a      	ldr	r0, [pc, #40]	; (80102b0 <mem_init+0x98>)
 8010286:	f008 fe61 	bl	8018f4c <iprintf>
  }
}
 801028a:	bf00      	nop
 801028c:	3708      	adds	r7, #8
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
 8010292:	bf00      	nop
 8010294:	24007150 	.word	0x24007150
 8010298:	30044000 	.word	0x30044000
 801029c:	24007154 	.word	0x24007154
 80102a0:	2400715c 	.word	0x2400715c
 80102a4:	24007158 	.word	0x24007158
 80102a8:	0801c7a0 	.word	0x0801c7a0
 80102ac:	0801c8b8 	.word	0x0801c8b8
 80102b0:	0801c82c 	.word	0x0801c82c

080102b4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b086      	sub	sp, #24
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f7ff fef7 	bl	80100b0 <mem_to_ptr>
 80102c2:	4603      	mov	r3, r0
 80102c4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	881b      	ldrh	r3, [r3, #0]
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7ff fede 	bl	801008c <ptr_to_mem>
 80102d0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	885b      	ldrh	r3, [r3, #2]
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7ff fed8 	bl	801008c <ptr_to_mem>
 80102dc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	881b      	ldrh	r3, [r3, #0]
 80102e2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80102e6:	d818      	bhi.n	801031a <mem_link_valid+0x66>
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	885b      	ldrh	r3, [r3, #2]
 80102ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80102f0:	d813      	bhi.n	801031a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80102f6:	8afa      	ldrh	r2, [r7, #22]
 80102f8:	429a      	cmp	r2, r3
 80102fa:	d004      	beq.n	8010306 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	881b      	ldrh	r3, [r3, #0]
 8010300:	8afa      	ldrh	r2, [r7, #22]
 8010302:	429a      	cmp	r2, r3
 8010304:	d109      	bne.n	801031a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010306:	4b08      	ldr	r3, [pc, #32]	; (8010328 <mem_link_valid+0x74>)
 8010308:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801030a:	693a      	ldr	r2, [r7, #16]
 801030c:	429a      	cmp	r2, r3
 801030e:	d006      	beq.n	801031e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	885b      	ldrh	r3, [r3, #2]
 8010314:	8afa      	ldrh	r2, [r7, #22]
 8010316:	429a      	cmp	r2, r3
 8010318:	d001      	beq.n	801031e <mem_link_valid+0x6a>
    return 0;
 801031a:	2300      	movs	r3, #0
 801031c:	e000      	b.n	8010320 <mem_link_valid+0x6c>
  }
  return 1;
 801031e:	2301      	movs	r3, #1
}
 8010320:	4618      	mov	r0, r3
 8010322:	3718      	adds	r7, #24
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}
 8010328:	24007154 	.word	0x24007154

0801032c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b088      	sub	sp, #32
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d070      	beq.n	801041c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f003 0303 	and.w	r3, r3, #3
 8010340:	2b00      	cmp	r3, #0
 8010342:	d00d      	beq.n	8010360 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8010344:	4b37      	ldr	r3, [pc, #220]	; (8010424 <mem_free+0xf8>)
 8010346:	f240 2273 	movw	r2, #627	; 0x273
 801034a:	4937      	ldr	r1, [pc, #220]	; (8010428 <mem_free+0xfc>)
 801034c:	4837      	ldr	r0, [pc, #220]	; (801042c <mem_free+0x100>)
 801034e:	f008 fdfd 	bl	8018f4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010352:	f008 fd33 	bl	8018dbc <sys_arch_protect>
 8010356:	60f8      	str	r0, [r7, #12]
 8010358:	68f8      	ldr	r0, [r7, #12]
 801035a:	f008 fd3d 	bl	8018dd8 <sys_arch_unprotect>
    return;
 801035e:	e05e      	b.n	801041e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	3b08      	subs	r3, #8
 8010364:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8010366:	4b32      	ldr	r3, [pc, #200]	; (8010430 <mem_free+0x104>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	69fa      	ldr	r2, [r7, #28]
 801036c:	429a      	cmp	r2, r3
 801036e:	d306      	bcc.n	801037e <mem_free+0x52>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f103 020c 	add.w	r2, r3, #12
 8010376:	4b2f      	ldr	r3, [pc, #188]	; (8010434 <mem_free+0x108>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	429a      	cmp	r2, r3
 801037c:	d90d      	bls.n	801039a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801037e:	4b29      	ldr	r3, [pc, #164]	; (8010424 <mem_free+0xf8>)
 8010380:	f240 227f 	movw	r2, #639	; 0x27f
 8010384:	492c      	ldr	r1, [pc, #176]	; (8010438 <mem_free+0x10c>)
 8010386:	4829      	ldr	r0, [pc, #164]	; (801042c <mem_free+0x100>)
 8010388:	f008 fde0 	bl	8018f4c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801038c:	f008 fd16 	bl	8018dbc <sys_arch_protect>
 8010390:	6138      	str	r0, [r7, #16]
 8010392:	6938      	ldr	r0, [r7, #16]
 8010394:	f008 fd20 	bl	8018dd8 <sys_arch_unprotect>
    return;
 8010398:	e041      	b.n	801041e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801039a:	4828      	ldr	r0, [pc, #160]	; (801043c <mem_free+0x110>)
 801039c:	f008 fcd4 	bl	8018d48 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80103a0:	69fb      	ldr	r3, [r7, #28]
 80103a2:	791b      	ldrb	r3, [r3, #4]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d110      	bne.n	80103ca <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80103a8:	4b1e      	ldr	r3, [pc, #120]	; (8010424 <mem_free+0xf8>)
 80103aa:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80103ae:	4924      	ldr	r1, [pc, #144]	; (8010440 <mem_free+0x114>)
 80103b0:	481e      	ldr	r0, [pc, #120]	; (801042c <mem_free+0x100>)
 80103b2:	f008 fdcb 	bl	8018f4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80103b6:	4821      	ldr	r0, [pc, #132]	; (801043c <mem_free+0x110>)
 80103b8:	f008 fcd5 	bl	8018d66 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80103bc:	f008 fcfe 	bl	8018dbc <sys_arch_protect>
 80103c0:	6178      	str	r0, [r7, #20]
 80103c2:	6978      	ldr	r0, [r7, #20]
 80103c4:	f008 fd08 	bl	8018dd8 <sys_arch_unprotect>
    return;
 80103c8:	e029      	b.n	801041e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80103ca:	69f8      	ldr	r0, [r7, #28]
 80103cc:	f7ff ff72 	bl	80102b4 <mem_link_valid>
 80103d0:	4603      	mov	r3, r0
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d110      	bne.n	80103f8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80103d6:	4b13      	ldr	r3, [pc, #76]	; (8010424 <mem_free+0xf8>)
 80103d8:	f240 2295 	movw	r2, #661	; 0x295
 80103dc:	4919      	ldr	r1, [pc, #100]	; (8010444 <mem_free+0x118>)
 80103de:	4813      	ldr	r0, [pc, #76]	; (801042c <mem_free+0x100>)
 80103e0:	f008 fdb4 	bl	8018f4c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80103e4:	4815      	ldr	r0, [pc, #84]	; (801043c <mem_free+0x110>)
 80103e6:	f008 fcbe 	bl	8018d66 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80103ea:	f008 fce7 	bl	8018dbc <sys_arch_protect>
 80103ee:	61b8      	str	r0, [r7, #24]
 80103f0:	69b8      	ldr	r0, [r7, #24]
 80103f2:	f008 fcf1 	bl	8018dd8 <sys_arch_unprotect>
    return;
 80103f6:	e012      	b.n	801041e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80103f8:	69fb      	ldr	r3, [r7, #28]
 80103fa:	2200      	movs	r2, #0
 80103fc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80103fe:	4b12      	ldr	r3, [pc, #72]	; (8010448 <mem_free+0x11c>)
 8010400:	681b      	ldr	r3, [r3, #0]
 8010402:	69fa      	ldr	r2, [r7, #28]
 8010404:	429a      	cmp	r2, r3
 8010406:	d202      	bcs.n	801040e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010408:	4a0f      	ldr	r2, [pc, #60]	; (8010448 <mem_free+0x11c>)
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801040e:	69f8      	ldr	r0, [r7, #28]
 8010410:	f7ff fe60 	bl	80100d4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010414:	4809      	ldr	r0, [pc, #36]	; (801043c <mem_free+0x110>)
 8010416:	f008 fca6 	bl	8018d66 <sys_mutex_unlock>
 801041a:	e000      	b.n	801041e <mem_free+0xf2>
    return;
 801041c:	bf00      	nop
}
 801041e:	3720      	adds	r7, #32
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}
 8010424:	0801c7a0 	.word	0x0801c7a0
 8010428:	0801c8d4 	.word	0x0801c8d4
 801042c:	0801c82c 	.word	0x0801c82c
 8010430:	24007150 	.word	0x24007150
 8010434:	24007154 	.word	0x24007154
 8010438:	0801c8f8 	.word	0x0801c8f8
 801043c:	24007158 	.word	0x24007158
 8010440:	0801c914 	.word	0x0801c914
 8010444:	0801c93c 	.word	0x0801c93c
 8010448:	2400715c 	.word	0x2400715c

0801044c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b088      	sub	sp, #32
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	460b      	mov	r3, r1
 8010456:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010458:	887b      	ldrh	r3, [r7, #2]
 801045a:	3303      	adds	r3, #3
 801045c:	b29b      	uxth	r3, r3
 801045e:	f023 0303 	bic.w	r3, r3, #3
 8010462:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010464:	8bfb      	ldrh	r3, [r7, #30]
 8010466:	2b0b      	cmp	r3, #11
 8010468:	d801      	bhi.n	801046e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801046a:	230c      	movs	r3, #12
 801046c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801046e:	8bfb      	ldrh	r3, [r7, #30]
 8010470:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010474:	d803      	bhi.n	801047e <mem_trim+0x32>
 8010476:	8bfa      	ldrh	r2, [r7, #30]
 8010478:	887b      	ldrh	r3, [r7, #2]
 801047a:	429a      	cmp	r2, r3
 801047c:	d201      	bcs.n	8010482 <mem_trim+0x36>
    return NULL;
 801047e:	2300      	movs	r3, #0
 8010480:	e0d8      	b.n	8010634 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010482:	4b6e      	ldr	r3, [pc, #440]	; (801063c <mem_trim+0x1f0>)
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	687a      	ldr	r2, [r7, #4]
 8010488:	429a      	cmp	r2, r3
 801048a:	d304      	bcc.n	8010496 <mem_trim+0x4a>
 801048c:	4b6c      	ldr	r3, [pc, #432]	; (8010640 <mem_trim+0x1f4>)
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	429a      	cmp	r2, r3
 8010494:	d306      	bcc.n	80104a4 <mem_trim+0x58>
 8010496:	4b6b      	ldr	r3, [pc, #428]	; (8010644 <mem_trim+0x1f8>)
 8010498:	f240 22d1 	movw	r2, #721	; 0x2d1
 801049c:	496a      	ldr	r1, [pc, #424]	; (8010648 <mem_trim+0x1fc>)
 801049e:	486b      	ldr	r0, [pc, #428]	; (801064c <mem_trim+0x200>)
 80104a0:	f008 fd54 	bl	8018f4c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80104a4:	4b65      	ldr	r3, [pc, #404]	; (801063c <mem_trim+0x1f0>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	687a      	ldr	r2, [r7, #4]
 80104aa:	429a      	cmp	r2, r3
 80104ac:	d304      	bcc.n	80104b8 <mem_trim+0x6c>
 80104ae:	4b64      	ldr	r3, [pc, #400]	; (8010640 <mem_trim+0x1f4>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	687a      	ldr	r2, [r7, #4]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d307      	bcc.n	80104c8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80104b8:	f008 fc80 	bl	8018dbc <sys_arch_protect>
 80104bc:	60b8      	str	r0, [r7, #8]
 80104be:	68b8      	ldr	r0, [r7, #8]
 80104c0:	f008 fc8a 	bl	8018dd8 <sys_arch_unprotect>
    return rmem;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	e0b5      	b.n	8010634 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	3b08      	subs	r3, #8
 80104cc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80104ce:	69b8      	ldr	r0, [r7, #24]
 80104d0:	f7ff fdee 	bl	80100b0 <mem_to_ptr>
 80104d4:	4603      	mov	r3, r0
 80104d6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80104d8:	69bb      	ldr	r3, [r7, #24]
 80104da:	881a      	ldrh	r2, [r3, #0]
 80104dc:	8afb      	ldrh	r3, [r7, #22]
 80104de:	1ad3      	subs	r3, r2, r3
 80104e0:	b29b      	uxth	r3, r3
 80104e2:	3b08      	subs	r3, #8
 80104e4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80104e6:	8bfa      	ldrh	r2, [r7, #30]
 80104e8:	8abb      	ldrh	r3, [r7, #20]
 80104ea:	429a      	cmp	r2, r3
 80104ec:	d906      	bls.n	80104fc <mem_trim+0xb0>
 80104ee:	4b55      	ldr	r3, [pc, #340]	; (8010644 <mem_trim+0x1f8>)
 80104f0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80104f4:	4956      	ldr	r1, [pc, #344]	; (8010650 <mem_trim+0x204>)
 80104f6:	4855      	ldr	r0, [pc, #340]	; (801064c <mem_trim+0x200>)
 80104f8:	f008 fd28 	bl	8018f4c <iprintf>
  if (newsize > size) {
 80104fc:	8bfa      	ldrh	r2, [r7, #30]
 80104fe:	8abb      	ldrh	r3, [r7, #20]
 8010500:	429a      	cmp	r2, r3
 8010502:	d901      	bls.n	8010508 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010504:	2300      	movs	r3, #0
 8010506:	e095      	b.n	8010634 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010508:	8bfa      	ldrh	r2, [r7, #30]
 801050a:	8abb      	ldrh	r3, [r7, #20]
 801050c:	429a      	cmp	r2, r3
 801050e:	d101      	bne.n	8010514 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	e08f      	b.n	8010634 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010514:	484f      	ldr	r0, [pc, #316]	; (8010654 <mem_trim+0x208>)
 8010516:	f008 fc17 	bl	8018d48 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	881b      	ldrh	r3, [r3, #0]
 801051e:	4618      	mov	r0, r3
 8010520:	f7ff fdb4 	bl	801008c <ptr_to_mem>
 8010524:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010526:	693b      	ldr	r3, [r7, #16]
 8010528:	791b      	ldrb	r3, [r3, #4]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d13f      	bne.n	80105ae <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801052e:	69bb      	ldr	r3, [r7, #24]
 8010530:	881b      	ldrh	r3, [r3, #0]
 8010532:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010536:	d106      	bne.n	8010546 <mem_trim+0xfa>
 8010538:	4b42      	ldr	r3, [pc, #264]	; (8010644 <mem_trim+0x1f8>)
 801053a:	f240 22f5 	movw	r2, #757	; 0x2f5
 801053e:	4946      	ldr	r1, [pc, #280]	; (8010658 <mem_trim+0x20c>)
 8010540:	4842      	ldr	r0, [pc, #264]	; (801064c <mem_trim+0x200>)
 8010542:	f008 fd03 	bl	8018f4c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	881b      	ldrh	r3, [r3, #0]
 801054a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801054c:	8afa      	ldrh	r2, [r7, #22]
 801054e:	8bfb      	ldrh	r3, [r7, #30]
 8010550:	4413      	add	r3, r2
 8010552:	b29b      	uxth	r3, r3
 8010554:	3308      	adds	r3, #8
 8010556:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010558:	4b40      	ldr	r3, [pc, #256]	; (801065c <mem_trim+0x210>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	693a      	ldr	r2, [r7, #16]
 801055e:	429a      	cmp	r2, r3
 8010560:	d106      	bne.n	8010570 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010562:	89fb      	ldrh	r3, [r7, #14]
 8010564:	4618      	mov	r0, r3
 8010566:	f7ff fd91 	bl	801008c <ptr_to_mem>
 801056a:	4603      	mov	r3, r0
 801056c:	4a3b      	ldr	r2, [pc, #236]	; (801065c <mem_trim+0x210>)
 801056e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010570:	89fb      	ldrh	r3, [r7, #14]
 8010572:	4618      	mov	r0, r3
 8010574:	f7ff fd8a 	bl	801008c <ptr_to_mem>
 8010578:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	2200      	movs	r2, #0
 801057e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010580:	693b      	ldr	r3, [r7, #16]
 8010582:	89ba      	ldrh	r2, [r7, #12]
 8010584:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	8afa      	ldrh	r2, [r7, #22]
 801058a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801058c:	69bb      	ldr	r3, [r7, #24]
 801058e:	89fa      	ldrh	r2, [r7, #14]
 8010590:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010592:	693b      	ldr	r3, [r7, #16]
 8010594:	881b      	ldrh	r3, [r3, #0]
 8010596:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801059a:	d047      	beq.n	801062c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	881b      	ldrh	r3, [r3, #0]
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7ff fd73 	bl	801008c <ptr_to_mem>
 80105a6:	4602      	mov	r2, r0
 80105a8:	89fb      	ldrh	r3, [r7, #14]
 80105aa:	8053      	strh	r3, [r2, #2]
 80105ac:	e03e      	b.n	801062c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80105ae:	8bfb      	ldrh	r3, [r7, #30]
 80105b0:	f103 0214 	add.w	r2, r3, #20
 80105b4:	8abb      	ldrh	r3, [r7, #20]
 80105b6:	429a      	cmp	r2, r3
 80105b8:	d838      	bhi.n	801062c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80105ba:	8afa      	ldrh	r2, [r7, #22]
 80105bc:	8bfb      	ldrh	r3, [r7, #30]
 80105be:	4413      	add	r3, r2
 80105c0:	b29b      	uxth	r3, r3
 80105c2:	3308      	adds	r3, #8
 80105c4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80105c6:	69bb      	ldr	r3, [r7, #24]
 80105c8:	881b      	ldrh	r3, [r3, #0]
 80105ca:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80105ce:	d106      	bne.n	80105de <mem_trim+0x192>
 80105d0:	4b1c      	ldr	r3, [pc, #112]	; (8010644 <mem_trim+0x1f8>)
 80105d2:	f240 3216 	movw	r2, #790	; 0x316
 80105d6:	4920      	ldr	r1, [pc, #128]	; (8010658 <mem_trim+0x20c>)
 80105d8:	481c      	ldr	r0, [pc, #112]	; (801064c <mem_trim+0x200>)
 80105da:	f008 fcb7 	bl	8018f4c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80105de:	89fb      	ldrh	r3, [r7, #14]
 80105e0:	4618      	mov	r0, r3
 80105e2:	f7ff fd53 	bl	801008c <ptr_to_mem>
 80105e6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80105e8:	4b1c      	ldr	r3, [pc, #112]	; (801065c <mem_trim+0x210>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	693a      	ldr	r2, [r7, #16]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d202      	bcs.n	80105f8 <mem_trim+0x1ac>
      lfree = mem2;
 80105f2:	4a1a      	ldr	r2, [pc, #104]	; (801065c <mem_trim+0x210>)
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	2200      	movs	r2, #0
 80105fc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80105fe:	69bb      	ldr	r3, [r7, #24]
 8010600:	881a      	ldrh	r2, [r3, #0]
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	8afa      	ldrh	r2, [r7, #22]
 801060a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	89fa      	ldrh	r2, [r7, #14]
 8010610:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	881b      	ldrh	r3, [r3, #0]
 8010616:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801061a:	d007      	beq.n	801062c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801061c:	693b      	ldr	r3, [r7, #16]
 801061e:	881b      	ldrh	r3, [r3, #0]
 8010620:	4618      	mov	r0, r3
 8010622:	f7ff fd33 	bl	801008c <ptr_to_mem>
 8010626:	4602      	mov	r2, r0
 8010628:	89fb      	ldrh	r3, [r7, #14]
 801062a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801062c:	4809      	ldr	r0, [pc, #36]	; (8010654 <mem_trim+0x208>)
 801062e:	f008 fb9a 	bl	8018d66 <sys_mutex_unlock>
  return rmem;
 8010632:	687b      	ldr	r3, [r7, #4]
}
 8010634:	4618      	mov	r0, r3
 8010636:	3720      	adds	r7, #32
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	24007150 	.word	0x24007150
 8010640:	24007154 	.word	0x24007154
 8010644:	0801c7a0 	.word	0x0801c7a0
 8010648:	0801c970 	.word	0x0801c970
 801064c:	0801c82c 	.word	0x0801c82c
 8010650:	0801c988 	.word	0x0801c988
 8010654:	24007158 	.word	0x24007158
 8010658:	0801c9a8 	.word	0x0801c9a8
 801065c:	2400715c 	.word	0x2400715c

08010660 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b088      	sub	sp, #32
 8010664:	af00      	add	r7, sp, #0
 8010666:	4603      	mov	r3, r0
 8010668:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801066a:	88fb      	ldrh	r3, [r7, #6]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d101      	bne.n	8010674 <mem_malloc+0x14>
    return NULL;
 8010670:	2300      	movs	r3, #0
 8010672:	e0e2      	b.n	801083a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010674:	88fb      	ldrh	r3, [r7, #6]
 8010676:	3303      	adds	r3, #3
 8010678:	b29b      	uxth	r3, r3
 801067a:	f023 0303 	bic.w	r3, r3, #3
 801067e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010680:	8bbb      	ldrh	r3, [r7, #28]
 8010682:	2b0b      	cmp	r3, #11
 8010684:	d801      	bhi.n	801068a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010686:	230c      	movs	r3, #12
 8010688:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801068a:	8bbb      	ldrh	r3, [r7, #28]
 801068c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010690:	d803      	bhi.n	801069a <mem_malloc+0x3a>
 8010692:	8bba      	ldrh	r2, [r7, #28]
 8010694:	88fb      	ldrh	r3, [r7, #6]
 8010696:	429a      	cmp	r2, r3
 8010698:	d201      	bcs.n	801069e <mem_malloc+0x3e>
    return NULL;
 801069a:	2300      	movs	r3, #0
 801069c:	e0cd      	b.n	801083a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801069e:	4869      	ldr	r0, [pc, #420]	; (8010844 <mem_malloc+0x1e4>)
 80106a0:	f008 fb52 	bl	8018d48 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80106a4:	4b68      	ldr	r3, [pc, #416]	; (8010848 <mem_malloc+0x1e8>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7ff fd01 	bl	80100b0 <mem_to_ptr>
 80106ae:	4603      	mov	r3, r0
 80106b0:	83fb      	strh	r3, [r7, #30]
 80106b2:	e0b7      	b.n	8010824 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80106b4:	8bfb      	ldrh	r3, [r7, #30]
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7ff fce8 	bl	801008c <ptr_to_mem>
 80106bc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	791b      	ldrb	r3, [r3, #4]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	f040 80a7 	bne.w	8010816 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	881b      	ldrh	r3, [r3, #0]
 80106cc:	461a      	mov	r2, r3
 80106ce:	8bfb      	ldrh	r3, [r7, #30]
 80106d0:	1ad3      	subs	r3, r2, r3
 80106d2:	f1a3 0208 	sub.w	r2, r3, #8
 80106d6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80106d8:	429a      	cmp	r2, r3
 80106da:	f0c0 809c 	bcc.w	8010816 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	881b      	ldrh	r3, [r3, #0]
 80106e2:	461a      	mov	r2, r3
 80106e4:	8bfb      	ldrh	r3, [r7, #30]
 80106e6:	1ad3      	subs	r3, r2, r3
 80106e8:	f1a3 0208 	sub.w	r2, r3, #8
 80106ec:	8bbb      	ldrh	r3, [r7, #28]
 80106ee:	3314      	adds	r3, #20
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d333      	bcc.n	801075c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80106f4:	8bfa      	ldrh	r2, [r7, #30]
 80106f6:	8bbb      	ldrh	r3, [r7, #28]
 80106f8:	4413      	add	r3, r2
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	3308      	adds	r3, #8
 80106fe:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010700:	8a7b      	ldrh	r3, [r7, #18]
 8010702:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010706:	d106      	bne.n	8010716 <mem_malloc+0xb6>
 8010708:	4b50      	ldr	r3, [pc, #320]	; (801084c <mem_malloc+0x1ec>)
 801070a:	f240 3287 	movw	r2, #903	; 0x387
 801070e:	4950      	ldr	r1, [pc, #320]	; (8010850 <mem_malloc+0x1f0>)
 8010710:	4850      	ldr	r0, [pc, #320]	; (8010854 <mem_malloc+0x1f4>)
 8010712:	f008 fc1b 	bl	8018f4c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010716:	8a7b      	ldrh	r3, [r7, #18]
 8010718:	4618      	mov	r0, r3
 801071a:	f7ff fcb7 	bl	801008c <ptr_to_mem>
 801071e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2200      	movs	r2, #0
 8010724:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010726:	697b      	ldr	r3, [r7, #20]
 8010728:	881a      	ldrh	r2, [r3, #0]
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	8bfa      	ldrh	r2, [r7, #30]
 8010732:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	8a7a      	ldrh	r2, [r7, #18]
 8010738:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	2201      	movs	r2, #1
 801073e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	881b      	ldrh	r3, [r3, #0]
 8010744:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010748:	d00b      	beq.n	8010762 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	881b      	ldrh	r3, [r3, #0]
 801074e:	4618      	mov	r0, r3
 8010750:	f7ff fc9c 	bl	801008c <ptr_to_mem>
 8010754:	4602      	mov	r2, r0
 8010756:	8a7b      	ldrh	r3, [r7, #18]
 8010758:	8053      	strh	r3, [r2, #2]
 801075a:	e002      	b.n	8010762 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	2201      	movs	r2, #1
 8010760:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010762:	4b39      	ldr	r3, [pc, #228]	; (8010848 <mem_malloc+0x1e8>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	697a      	ldr	r2, [r7, #20]
 8010768:	429a      	cmp	r2, r3
 801076a:	d127      	bne.n	80107bc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801076c:	4b36      	ldr	r3, [pc, #216]	; (8010848 <mem_malloc+0x1e8>)
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010772:	e005      	b.n	8010780 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010774:	69bb      	ldr	r3, [r7, #24]
 8010776:	881b      	ldrh	r3, [r3, #0]
 8010778:	4618      	mov	r0, r3
 801077a:	f7ff fc87 	bl	801008c <ptr_to_mem>
 801077e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010780:	69bb      	ldr	r3, [r7, #24]
 8010782:	791b      	ldrb	r3, [r3, #4]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d004      	beq.n	8010792 <mem_malloc+0x132>
 8010788:	4b33      	ldr	r3, [pc, #204]	; (8010858 <mem_malloc+0x1f8>)
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	69ba      	ldr	r2, [r7, #24]
 801078e:	429a      	cmp	r2, r3
 8010790:	d1f0      	bne.n	8010774 <mem_malloc+0x114>
          }
          lfree = cur;
 8010792:	4a2d      	ldr	r2, [pc, #180]	; (8010848 <mem_malloc+0x1e8>)
 8010794:	69bb      	ldr	r3, [r7, #24]
 8010796:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010798:	4b2b      	ldr	r3, [pc, #172]	; (8010848 <mem_malloc+0x1e8>)
 801079a:	681a      	ldr	r2, [r3, #0]
 801079c:	4b2e      	ldr	r3, [pc, #184]	; (8010858 <mem_malloc+0x1f8>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d00b      	beq.n	80107bc <mem_malloc+0x15c>
 80107a4:	4b28      	ldr	r3, [pc, #160]	; (8010848 <mem_malloc+0x1e8>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	791b      	ldrb	r3, [r3, #4]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d006      	beq.n	80107bc <mem_malloc+0x15c>
 80107ae:	4b27      	ldr	r3, [pc, #156]	; (801084c <mem_malloc+0x1ec>)
 80107b0:	f240 32b5 	movw	r2, #949	; 0x3b5
 80107b4:	4929      	ldr	r1, [pc, #164]	; (801085c <mem_malloc+0x1fc>)
 80107b6:	4827      	ldr	r0, [pc, #156]	; (8010854 <mem_malloc+0x1f4>)
 80107b8:	f008 fbc8 	bl	8018f4c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80107bc:	4821      	ldr	r0, [pc, #132]	; (8010844 <mem_malloc+0x1e4>)
 80107be:	f008 fad2 	bl	8018d66 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80107c2:	8bba      	ldrh	r2, [r7, #28]
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	4413      	add	r3, r2
 80107c8:	3308      	adds	r3, #8
 80107ca:	4a23      	ldr	r2, [pc, #140]	; (8010858 <mem_malloc+0x1f8>)
 80107cc:	6812      	ldr	r2, [r2, #0]
 80107ce:	4293      	cmp	r3, r2
 80107d0:	d906      	bls.n	80107e0 <mem_malloc+0x180>
 80107d2:	4b1e      	ldr	r3, [pc, #120]	; (801084c <mem_malloc+0x1ec>)
 80107d4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80107d8:	4921      	ldr	r1, [pc, #132]	; (8010860 <mem_malloc+0x200>)
 80107da:	481e      	ldr	r0, [pc, #120]	; (8010854 <mem_malloc+0x1f4>)
 80107dc:	f008 fbb6 	bl	8018f4c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	f003 0303 	and.w	r3, r3, #3
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d006      	beq.n	80107f8 <mem_malloc+0x198>
 80107ea:	4b18      	ldr	r3, [pc, #96]	; (801084c <mem_malloc+0x1ec>)
 80107ec:	f240 32bb 	movw	r2, #955	; 0x3bb
 80107f0:	491c      	ldr	r1, [pc, #112]	; (8010864 <mem_malloc+0x204>)
 80107f2:	4818      	ldr	r0, [pc, #96]	; (8010854 <mem_malloc+0x1f4>)
 80107f4:	f008 fbaa 	bl	8018f4c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	f003 0303 	and.w	r3, r3, #3
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d006      	beq.n	8010810 <mem_malloc+0x1b0>
 8010802:	4b12      	ldr	r3, [pc, #72]	; (801084c <mem_malloc+0x1ec>)
 8010804:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010808:	4917      	ldr	r1, [pc, #92]	; (8010868 <mem_malloc+0x208>)
 801080a:	4812      	ldr	r0, [pc, #72]	; (8010854 <mem_malloc+0x1f4>)
 801080c:	f008 fb9e 	bl	8018f4c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010810:	697b      	ldr	r3, [r7, #20]
 8010812:	3308      	adds	r3, #8
 8010814:	e011      	b.n	801083a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010816:	8bfb      	ldrh	r3, [r7, #30]
 8010818:	4618      	mov	r0, r3
 801081a:	f7ff fc37 	bl	801008c <ptr_to_mem>
 801081e:	4603      	mov	r3, r0
 8010820:	881b      	ldrh	r3, [r3, #0]
 8010822:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010824:	8bfa      	ldrh	r2, [r7, #30]
 8010826:	8bbb      	ldrh	r3, [r7, #28]
 8010828:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 801082c:	429a      	cmp	r2, r3
 801082e:	f4ff af41 	bcc.w	80106b4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010832:	4804      	ldr	r0, [pc, #16]	; (8010844 <mem_malloc+0x1e4>)
 8010834:	f008 fa97 	bl	8018d66 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010838:	2300      	movs	r3, #0
}
 801083a:	4618      	mov	r0, r3
 801083c:	3720      	adds	r7, #32
 801083e:	46bd      	mov	sp, r7
 8010840:	bd80      	pop	{r7, pc}
 8010842:	bf00      	nop
 8010844:	24007158 	.word	0x24007158
 8010848:	2400715c 	.word	0x2400715c
 801084c:	0801c7a0 	.word	0x0801c7a0
 8010850:	0801c9a8 	.word	0x0801c9a8
 8010854:	0801c82c 	.word	0x0801c82c
 8010858:	24007154 	.word	0x24007154
 801085c:	0801c9bc 	.word	0x0801c9bc
 8010860:	0801c9d8 	.word	0x0801c9d8
 8010864:	0801ca08 	.word	0x0801ca08
 8010868:	0801ca38 	.word	0x0801ca38

0801086c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801086c:	b480      	push	{r7}
 801086e:	b085      	sub	sp, #20
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	689b      	ldr	r3, [r3, #8]
 8010878:	2200      	movs	r2, #0
 801087a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	685b      	ldr	r3, [r3, #4]
 8010880:	3303      	adds	r3, #3
 8010882:	f023 0303 	bic.w	r3, r3, #3
 8010886:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010888:	2300      	movs	r3, #0
 801088a:	60fb      	str	r3, [r7, #12]
 801088c:	e011      	b.n	80108b2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	689b      	ldr	r3, [r3, #8]
 8010892:	681a      	ldr	r2, [r3, #0]
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	689b      	ldr	r3, [r3, #8]
 801089c:	68ba      	ldr	r2, [r7, #8]
 801089e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	881b      	ldrh	r3, [r3, #0]
 80108a4:	461a      	mov	r2, r3
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	4413      	add	r3, r2
 80108aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	3301      	adds	r3, #1
 80108b0:	60fb      	str	r3, [r7, #12]
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	885b      	ldrh	r3, [r3, #2]
 80108b6:	461a      	mov	r2, r3
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	4293      	cmp	r3, r2
 80108bc:	dbe7      	blt.n	801088e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80108be:	bf00      	nop
 80108c0:	bf00      	nop
 80108c2:	3714      	adds	r7, #20
 80108c4:	46bd      	mov	sp, r7
 80108c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108ca:	4770      	bx	lr

080108cc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80108cc:	b580      	push	{r7, lr}
 80108ce:	b082      	sub	sp, #8
 80108d0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80108d2:	2300      	movs	r3, #0
 80108d4:	80fb      	strh	r3, [r7, #6]
 80108d6:	e009      	b.n	80108ec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80108d8:	88fb      	ldrh	r3, [r7, #6]
 80108da:	4a08      	ldr	r2, [pc, #32]	; (80108fc <memp_init+0x30>)
 80108dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7ff ffc3 	bl	801086c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80108e6:	88fb      	ldrh	r3, [r7, #6]
 80108e8:	3301      	adds	r3, #1
 80108ea:	80fb      	strh	r3, [r7, #6]
 80108ec:	88fb      	ldrh	r3, [r7, #6]
 80108ee:	2b0d      	cmp	r3, #13
 80108f0:	d9f2      	bls.n	80108d8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80108f2:	bf00      	nop
 80108f4:	bf00      	nop
 80108f6:	3708      	adds	r7, #8
 80108f8:	46bd      	mov	sp, r7
 80108fa:	bd80      	pop	{r7, pc}
 80108fc:	0801cb04 	.word	0x0801cb04

08010900 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b084      	sub	sp, #16
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010908:	f008 fa58 	bl	8018dbc <sys_arch_protect>
 801090c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	689b      	ldr	r3, [r3, #8]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d015      	beq.n	8010948 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	68ba      	ldr	r2, [r7, #8]
 8010922:	6812      	ldr	r2, [r2, #0]
 8010924:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010926:	68bb      	ldr	r3, [r7, #8]
 8010928:	f003 0303 	and.w	r3, r3, #3
 801092c:	2b00      	cmp	r3, #0
 801092e:	d006      	beq.n	801093e <do_memp_malloc_pool+0x3e>
 8010930:	4b09      	ldr	r3, [pc, #36]	; (8010958 <do_memp_malloc_pool+0x58>)
 8010932:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010936:	4909      	ldr	r1, [pc, #36]	; (801095c <do_memp_malloc_pool+0x5c>)
 8010938:	4809      	ldr	r0, [pc, #36]	; (8010960 <do_memp_malloc_pool+0x60>)
 801093a:	f008 fb07 	bl	8018f4c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801093e:	68f8      	ldr	r0, [r7, #12]
 8010940:	f008 fa4a 	bl	8018dd8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010944:	68bb      	ldr	r3, [r7, #8]
 8010946:	e003      	b.n	8010950 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010948:	68f8      	ldr	r0, [r7, #12]
 801094a:	f008 fa45 	bl	8018dd8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801094e:	2300      	movs	r3, #0
}
 8010950:	4618      	mov	r0, r3
 8010952:	3710      	adds	r7, #16
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}
 8010958:	0801cb3c 	.word	0x0801cb3c
 801095c:	0801cbb0 	.word	0x0801cbb0
 8010960:	0801cbd4 	.word	0x0801cbd4

08010964 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d106      	bne.n	8010980 <memp_malloc_pool+0x1c>
 8010972:	4b0a      	ldr	r3, [pc, #40]	; (801099c <memp_malloc_pool+0x38>)
 8010974:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010978:	4909      	ldr	r1, [pc, #36]	; (80109a0 <memp_malloc_pool+0x3c>)
 801097a:	480a      	ldr	r0, [pc, #40]	; (80109a4 <memp_malloc_pool+0x40>)
 801097c:	f008 fae6 	bl	8018f4c <iprintf>
  if (desc == NULL) {
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	2b00      	cmp	r3, #0
 8010984:	d101      	bne.n	801098a <memp_malloc_pool+0x26>
    return NULL;
 8010986:	2300      	movs	r3, #0
 8010988:	e003      	b.n	8010992 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7ff ffb8 	bl	8010900 <do_memp_malloc_pool>
 8010990:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010992:	4618      	mov	r0, r3
 8010994:	3708      	adds	r7, #8
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	0801cb3c 	.word	0x0801cb3c
 80109a0:	0801cbfc 	.word	0x0801cbfc
 80109a4:	0801cbd4 	.word	0x0801cbd4

080109a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b084      	sub	sp, #16
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	4603      	mov	r3, r0
 80109b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80109b2:	79fb      	ldrb	r3, [r7, #7]
 80109b4:	2b0d      	cmp	r3, #13
 80109b6:	d908      	bls.n	80109ca <memp_malloc+0x22>
 80109b8:	4b0a      	ldr	r3, [pc, #40]	; (80109e4 <memp_malloc+0x3c>)
 80109ba:	f240 1257 	movw	r2, #343	; 0x157
 80109be:	490a      	ldr	r1, [pc, #40]	; (80109e8 <memp_malloc+0x40>)
 80109c0:	480a      	ldr	r0, [pc, #40]	; (80109ec <memp_malloc+0x44>)
 80109c2:	f008 fac3 	bl	8018f4c <iprintf>
 80109c6:	2300      	movs	r3, #0
 80109c8:	e008      	b.n	80109dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80109ca:	79fb      	ldrb	r3, [r7, #7]
 80109cc:	4a08      	ldr	r2, [pc, #32]	; (80109f0 <memp_malloc+0x48>)
 80109ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7ff ff94 	bl	8010900 <do_memp_malloc_pool>
 80109d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80109da:	68fb      	ldr	r3, [r7, #12]
}
 80109dc:	4618      	mov	r0, r3
 80109de:	3710      	adds	r7, #16
 80109e0:	46bd      	mov	sp, r7
 80109e2:	bd80      	pop	{r7, pc}
 80109e4:	0801cb3c 	.word	0x0801cb3c
 80109e8:	0801cc10 	.word	0x0801cc10
 80109ec:	0801cbd4 	.word	0x0801cbd4
 80109f0:	0801cb04 	.word	0x0801cb04

080109f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b084      	sub	sp, #16
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
 80109fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	f003 0303 	and.w	r3, r3, #3
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d006      	beq.n	8010a16 <do_memp_free_pool+0x22>
 8010a08:	4b0d      	ldr	r3, [pc, #52]	; (8010a40 <do_memp_free_pool+0x4c>)
 8010a0a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010a0e:	490d      	ldr	r1, [pc, #52]	; (8010a44 <do_memp_free_pool+0x50>)
 8010a10:	480d      	ldr	r0, [pc, #52]	; (8010a48 <do_memp_free_pool+0x54>)
 8010a12:	f008 fa9b 	bl	8018f4c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010a16:	683b      	ldr	r3, [r7, #0]
 8010a18:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010a1a:	f008 f9cf 	bl	8018dbc <sys_arch_protect>
 8010a1e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	689b      	ldr	r3, [r3, #8]
 8010a24:	681a      	ldr	r2, [r3, #0]
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	689b      	ldr	r3, [r3, #8]
 8010a2e:	68fa      	ldr	r2, [r7, #12]
 8010a30:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010a32:	68b8      	ldr	r0, [r7, #8]
 8010a34:	f008 f9d0 	bl	8018dd8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010a38:	bf00      	nop
 8010a3a:	3710      	adds	r7, #16
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}
 8010a40:	0801cb3c 	.word	0x0801cb3c
 8010a44:	0801cc30 	.word	0x0801cc30
 8010a48:	0801cbd4 	.word	0x0801cbd4

08010a4c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b082      	sub	sp, #8
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d106      	bne.n	8010a6a <memp_free_pool+0x1e>
 8010a5c:	4b0a      	ldr	r3, [pc, #40]	; (8010a88 <memp_free_pool+0x3c>)
 8010a5e:	f240 1295 	movw	r2, #405	; 0x195
 8010a62:	490a      	ldr	r1, [pc, #40]	; (8010a8c <memp_free_pool+0x40>)
 8010a64:	480a      	ldr	r0, [pc, #40]	; (8010a90 <memp_free_pool+0x44>)
 8010a66:	f008 fa71 	bl	8018f4c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d007      	beq.n	8010a80 <memp_free_pool+0x34>
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d004      	beq.n	8010a80 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010a76:	6839      	ldr	r1, [r7, #0]
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f7ff ffbb 	bl	80109f4 <do_memp_free_pool>
 8010a7e:	e000      	b.n	8010a82 <memp_free_pool+0x36>
    return;
 8010a80:	bf00      	nop
}
 8010a82:	3708      	adds	r7, #8
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}
 8010a88:	0801cb3c 	.word	0x0801cb3c
 8010a8c:	0801cbfc 	.word	0x0801cbfc
 8010a90:	0801cbd4 	.word	0x0801cbd4

08010a94 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	6039      	str	r1, [r7, #0]
 8010a9e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010aa0:	79fb      	ldrb	r3, [r7, #7]
 8010aa2:	2b0d      	cmp	r3, #13
 8010aa4:	d907      	bls.n	8010ab6 <memp_free+0x22>
 8010aa6:	4b0c      	ldr	r3, [pc, #48]	; (8010ad8 <memp_free+0x44>)
 8010aa8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010aac:	490b      	ldr	r1, [pc, #44]	; (8010adc <memp_free+0x48>)
 8010aae:	480c      	ldr	r0, [pc, #48]	; (8010ae0 <memp_free+0x4c>)
 8010ab0:	f008 fa4c 	bl	8018f4c <iprintf>
 8010ab4:	e00c      	b.n	8010ad0 <memp_free+0x3c>

  if (mem == NULL) {
 8010ab6:	683b      	ldr	r3, [r7, #0]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d008      	beq.n	8010ace <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010abc:	79fb      	ldrb	r3, [r7, #7]
 8010abe:	4a09      	ldr	r2, [pc, #36]	; (8010ae4 <memp_free+0x50>)
 8010ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ac4:	6839      	ldr	r1, [r7, #0]
 8010ac6:	4618      	mov	r0, r3
 8010ac8:	f7ff ff94 	bl	80109f4 <do_memp_free_pool>
 8010acc:	e000      	b.n	8010ad0 <memp_free+0x3c>
    return;
 8010ace:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010ad0:	3708      	adds	r7, #8
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}
 8010ad6:	bf00      	nop
 8010ad8:	0801cb3c 	.word	0x0801cb3c
 8010adc:	0801cc50 	.word	0x0801cc50
 8010ae0:	0801cbd4 	.word	0x0801cbd4
 8010ae4:	0801cb04 	.word	0x0801cb04

08010ae8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010aec:	bf00      	nop
 8010aee:	46bd      	mov	sp, r7
 8010af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af4:	4770      	bx	lr
	...

08010af8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b086      	sub	sp, #24
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	60f8      	str	r0, [r7, #12]
 8010b00:	60b9      	str	r1, [r7, #8]
 8010b02:	607a      	str	r2, [r7, #4]
 8010b04:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d108      	bne.n	8010b1e <netif_add+0x26>
 8010b0c:	4b57      	ldr	r3, [pc, #348]	; (8010c6c <netif_add+0x174>)
 8010b0e:	f240 1227 	movw	r2, #295	; 0x127
 8010b12:	4957      	ldr	r1, [pc, #348]	; (8010c70 <netif_add+0x178>)
 8010b14:	4857      	ldr	r0, [pc, #348]	; (8010c74 <netif_add+0x17c>)
 8010b16:	f008 fa19 	bl	8018f4c <iprintf>
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	e0a2      	b.n	8010c64 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d108      	bne.n	8010b36 <netif_add+0x3e>
 8010b24:	4b51      	ldr	r3, [pc, #324]	; (8010c6c <netif_add+0x174>)
 8010b26:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010b2a:	4953      	ldr	r1, [pc, #332]	; (8010c78 <netif_add+0x180>)
 8010b2c:	4851      	ldr	r0, [pc, #324]	; (8010c74 <netif_add+0x17c>)
 8010b2e:	f008 fa0d 	bl	8018f4c <iprintf>
 8010b32:	2300      	movs	r3, #0
 8010b34:	e096      	b.n	8010c64 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d101      	bne.n	8010b40 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010b3c:	4b4f      	ldr	r3, [pc, #316]	; (8010c7c <netif_add+0x184>)
 8010b3e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d101      	bne.n	8010b4a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010b46:	4b4d      	ldr	r3, [pc, #308]	; (8010c7c <netif_add+0x184>)
 8010b48:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d101      	bne.n	8010b54 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010b50:	4b4a      	ldr	r3, [pc, #296]	; (8010c7c <netif_add+0x184>)
 8010b52:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010b54:	68fb      	ldr	r3, [r7, #12]
 8010b56:	2200      	movs	r2, #0
 8010b58:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	2200      	movs	r2, #0
 8010b64:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	4a45      	ldr	r2, [pc, #276]	; (8010c80 <netif_add+0x188>)
 8010b6a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2200      	movs	r2, #0
 8010b70:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2200      	movs	r2, #0
 8010b76:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	6a3a      	ldr	r2, [r7, #32]
 8010b84:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010b86:	4b3f      	ldr	r3, [pc, #252]	; (8010c84 <netif_add+0x18c>)
 8010b88:	781a      	ldrb	r2, [r3, #0]
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010b94:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010b96:	683b      	ldr	r3, [r7, #0]
 8010b98:	687a      	ldr	r2, [r7, #4]
 8010b9a:	68b9      	ldr	r1, [r7, #8]
 8010b9c:	68f8      	ldr	r0, [r7, #12]
 8010b9e:	f000 f913 	bl	8010dc8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba4:	68f8      	ldr	r0, [r7, #12]
 8010ba6:	4798      	blx	r3
 8010ba8:	4603      	mov	r3, r0
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d001      	beq.n	8010bb2 <netif_add+0xba>
    return NULL;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	e058      	b.n	8010c64 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010bb8:	2bff      	cmp	r3, #255	; 0xff
 8010bba:	d103      	bne.n	8010bc4 <netif_add+0xcc>
        netif->num = 0;
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	2200      	movs	r2, #0
 8010bc0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010bc8:	4b2f      	ldr	r3, [pc, #188]	; (8010c88 <netif_add+0x190>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	617b      	str	r3, [r7, #20]
 8010bce:	e02b      	b.n	8010c28 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010bd0:	697a      	ldr	r2, [r7, #20]
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	429a      	cmp	r2, r3
 8010bd6:	d106      	bne.n	8010be6 <netif_add+0xee>
 8010bd8:	4b24      	ldr	r3, [pc, #144]	; (8010c6c <netif_add+0x174>)
 8010bda:	f240 128b 	movw	r2, #395	; 0x18b
 8010bde:	492b      	ldr	r1, [pc, #172]	; (8010c8c <netif_add+0x194>)
 8010be0:	4824      	ldr	r0, [pc, #144]	; (8010c74 <netif_add+0x17c>)
 8010be2:	f008 f9b3 	bl	8018f4c <iprintf>
        num_netifs++;
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	3301      	adds	r3, #1
 8010bea:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	2bff      	cmp	r3, #255	; 0xff
 8010bf0:	dd06      	ble.n	8010c00 <netif_add+0x108>
 8010bf2:	4b1e      	ldr	r3, [pc, #120]	; (8010c6c <netif_add+0x174>)
 8010bf4:	f240 128d 	movw	r2, #397	; 0x18d
 8010bf8:	4925      	ldr	r1, [pc, #148]	; (8010c90 <netif_add+0x198>)
 8010bfa:	481e      	ldr	r0, [pc, #120]	; (8010c74 <netif_add+0x17c>)
 8010bfc:	f008 f9a6 	bl	8018f4c <iprintf>
        if (netif2->num == netif->num) {
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d108      	bne.n	8010c22 <netif_add+0x12a>
          netif->num++;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c16:	3301      	adds	r3, #1
 8010c18:	b2da      	uxtb	r2, r3
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010c20:	e005      	b.n	8010c2e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010c22:	697b      	ldr	r3, [r7, #20]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	617b      	str	r3, [r7, #20]
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d1d0      	bne.n	8010bd0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d1be      	bne.n	8010bb2 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c3a:	2bfe      	cmp	r3, #254	; 0xfe
 8010c3c:	d103      	bne.n	8010c46 <netif_add+0x14e>
    netif_num = 0;
 8010c3e:	4b11      	ldr	r3, [pc, #68]	; (8010c84 <netif_add+0x18c>)
 8010c40:	2200      	movs	r2, #0
 8010c42:	701a      	strb	r2, [r3, #0]
 8010c44:	e006      	b.n	8010c54 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010c4c:	3301      	adds	r3, #1
 8010c4e:	b2da      	uxtb	r2, r3
 8010c50:	4b0c      	ldr	r3, [pc, #48]	; (8010c84 <netif_add+0x18c>)
 8010c52:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010c54:	4b0c      	ldr	r3, [pc, #48]	; (8010c88 <netif_add+0x190>)
 8010c56:	681a      	ldr	r2, [r3, #0]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010c5c:	4a0a      	ldr	r2, [pc, #40]	; (8010c88 <netif_add+0x190>)
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010c62:	68fb      	ldr	r3, [r7, #12]
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	3718      	adds	r7, #24
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}
 8010c6c:	0801cc6c 	.word	0x0801cc6c
 8010c70:	0801cd40 	.word	0x0801cd40
 8010c74:	0801ccfc 	.word	0x0801ccfc
 8010c78:	0801cd5c 	.word	0x0801cd5c
 8010c7c:	0801c38c 	.word	0x0801c38c
 8010c80:	080110a3 	.word	0x080110a3
 8010c84:	24007198 	.word	0x24007198
 8010c88:	2400b298 	.word	0x2400b298
 8010c8c:	0801cd80 	.word	0x0801cd80
 8010c90:	0801cd94 	.word	0x0801cd94

08010c94 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b082      	sub	sp, #8
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
 8010c9c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010c9e:	6839      	ldr	r1, [r7, #0]
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f003 f86b 	bl	8013d7c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010ca6:	6839      	ldr	r1, [r7, #0]
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f007 fdcd 	bl	8018848 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010cae:	bf00      	nop
 8010cb0:	3708      	adds	r7, #8
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
	...

08010cb8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b086      	sub	sp, #24
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010cc4:	68bb      	ldr	r3, [r7, #8]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d106      	bne.n	8010cd8 <netif_do_set_ipaddr+0x20>
 8010cca:	4b1d      	ldr	r3, [pc, #116]	; (8010d40 <netif_do_set_ipaddr+0x88>)
 8010ccc:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010cd0:	491c      	ldr	r1, [pc, #112]	; (8010d44 <netif_do_set_ipaddr+0x8c>)
 8010cd2:	481d      	ldr	r0, [pc, #116]	; (8010d48 <netif_do_set_ipaddr+0x90>)
 8010cd4:	f008 f93a 	bl	8018f4c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d106      	bne.n	8010cec <netif_do_set_ipaddr+0x34>
 8010cde:	4b18      	ldr	r3, [pc, #96]	; (8010d40 <netif_do_set_ipaddr+0x88>)
 8010ce0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010ce4:	4917      	ldr	r1, [pc, #92]	; (8010d44 <netif_do_set_ipaddr+0x8c>)
 8010ce6:	4818      	ldr	r0, [pc, #96]	; (8010d48 <netif_do_set_ipaddr+0x90>)
 8010ce8:	f008 f930 	bl	8018f4c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	3304      	adds	r3, #4
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	429a      	cmp	r2, r3
 8010cf8:	d01c      	beq.n	8010d34 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010cfa:	68bb      	ldr	r3, [r7, #8]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	3304      	adds	r3, #4
 8010d04:	681a      	ldr	r2, [r3, #0]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010d0a:	f107 0314 	add.w	r3, r7, #20
 8010d0e:	4619      	mov	r1, r3
 8010d10:	6878      	ldr	r0, [r7, #4]
 8010d12:	f7ff ffbf 	bl	8010c94 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010d16:	68bb      	ldr	r3, [r7, #8]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d002      	beq.n	8010d22 <netif_do_set_ipaddr+0x6a>
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	e000      	b.n	8010d24 <netif_do_set_ipaddr+0x6c>
 8010d22:	2300      	movs	r3, #0
 8010d24:	68fa      	ldr	r2, [r7, #12]
 8010d26:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010d28:	2101      	movs	r1, #1
 8010d2a:	68f8      	ldr	r0, [r7, #12]
 8010d2c:	f000 f8d2 	bl	8010ed4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010d30:	2301      	movs	r3, #1
 8010d32:	e000      	b.n	8010d36 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010d34:	2300      	movs	r3, #0
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3718      	adds	r7, #24
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	0801cc6c 	.word	0x0801cc6c
 8010d44:	0801cdc4 	.word	0x0801cdc4
 8010d48:	0801ccfc 	.word	0x0801ccfc

08010d4c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010d4c:	b480      	push	{r7}
 8010d4e:	b085      	sub	sp, #20
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	60f8      	str	r0, [r7, #12]
 8010d54:	60b9      	str	r1, [r7, #8]
 8010d56:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010d58:	68bb      	ldr	r3, [r7, #8]
 8010d5a:	681a      	ldr	r2, [r3, #0]
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	3308      	adds	r3, #8
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	429a      	cmp	r2, r3
 8010d64:	d00a      	beq.n	8010d7c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d002      	beq.n	8010d72 <netif_do_set_netmask+0x26>
 8010d6c:	68bb      	ldr	r3, [r7, #8]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	e000      	b.n	8010d74 <netif_do_set_netmask+0x28>
 8010d72:	2300      	movs	r3, #0
 8010d74:	68fa      	ldr	r2, [r7, #12]
 8010d76:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010d78:	2301      	movs	r3, #1
 8010d7a:	e000      	b.n	8010d7e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010d7c:	2300      	movs	r3, #0
}
 8010d7e:	4618      	mov	r0, r3
 8010d80:	3714      	adds	r7, #20
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr

08010d8a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010d8a:	b480      	push	{r7}
 8010d8c:	b085      	sub	sp, #20
 8010d8e:	af00      	add	r7, sp, #0
 8010d90:	60f8      	str	r0, [r7, #12]
 8010d92:	60b9      	str	r1, [r7, #8]
 8010d94:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010d96:	68bb      	ldr	r3, [r7, #8]
 8010d98:	681a      	ldr	r2, [r3, #0]
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	330c      	adds	r3, #12
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	429a      	cmp	r2, r3
 8010da2:	d00a      	beq.n	8010dba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d002      	beq.n	8010db0 <netif_do_set_gw+0x26>
 8010daa:	68bb      	ldr	r3, [r7, #8]
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	e000      	b.n	8010db2 <netif_do_set_gw+0x28>
 8010db0:	2300      	movs	r3, #0
 8010db2:	68fa      	ldr	r2, [r7, #12]
 8010db4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010db6:	2301      	movs	r3, #1
 8010db8:	e000      	b.n	8010dbc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010dba:	2300      	movs	r3, #0
}
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	3714      	adds	r7, #20
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr

08010dc8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b088      	sub	sp, #32
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	60f8      	str	r0, [r7, #12]
 8010dd0:	60b9      	str	r1, [r7, #8]
 8010dd2:	607a      	str	r2, [r7, #4]
 8010dd4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d101      	bne.n	8010de8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010de4:	4b1c      	ldr	r3, [pc, #112]	; (8010e58 <netif_set_addr+0x90>)
 8010de6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d101      	bne.n	8010df2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010dee:	4b1a      	ldr	r3, [pc, #104]	; (8010e58 <netif_set_addr+0x90>)
 8010df0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d101      	bne.n	8010dfc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010df8:	4b17      	ldr	r3, [pc, #92]	; (8010e58 <netif_set_addr+0x90>)
 8010dfa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010dfc:	68bb      	ldr	r3, [r7, #8]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d003      	beq.n	8010e0a <netif_set_addr+0x42>
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d101      	bne.n	8010e0e <netif_set_addr+0x46>
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	e000      	b.n	8010e10 <netif_set_addr+0x48>
 8010e0e:	2300      	movs	r3, #0
 8010e10:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010e12:	697b      	ldr	r3, [r7, #20]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d006      	beq.n	8010e26 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010e18:	f107 0310 	add.w	r3, r7, #16
 8010e1c:	461a      	mov	r2, r3
 8010e1e:	68b9      	ldr	r1, [r7, #8]
 8010e20:	68f8      	ldr	r0, [r7, #12]
 8010e22:	f7ff ff49 	bl	8010cb8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010e26:	69fa      	ldr	r2, [r7, #28]
 8010e28:	6879      	ldr	r1, [r7, #4]
 8010e2a:	68f8      	ldr	r0, [r7, #12]
 8010e2c:	f7ff ff8e 	bl	8010d4c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010e30:	69ba      	ldr	r2, [r7, #24]
 8010e32:	6839      	ldr	r1, [r7, #0]
 8010e34:	68f8      	ldr	r0, [r7, #12]
 8010e36:	f7ff ffa8 	bl	8010d8a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d106      	bne.n	8010e4e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010e40:	f107 0310 	add.w	r3, r7, #16
 8010e44:	461a      	mov	r2, r3
 8010e46:	68b9      	ldr	r1, [r7, #8]
 8010e48:	68f8      	ldr	r0, [r7, #12]
 8010e4a:	f7ff ff35 	bl	8010cb8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010e4e:	bf00      	nop
 8010e50:	3720      	adds	r7, #32
 8010e52:	46bd      	mov	sp, r7
 8010e54:	bd80      	pop	{r7, pc}
 8010e56:	bf00      	nop
 8010e58:	0801c38c 	.word	0x0801c38c

08010e5c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010e5c:	b480      	push	{r7}
 8010e5e:	b083      	sub	sp, #12
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010e64:	4a04      	ldr	r2, [pc, #16]	; (8010e78 <netif_set_default+0x1c>)
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010e6a:	bf00      	nop
 8010e6c:	370c      	adds	r7, #12
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e74:	4770      	bx	lr
 8010e76:	bf00      	nop
 8010e78:	2400b29c 	.word	0x2400b29c

08010e7c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b082      	sub	sp, #8
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d107      	bne.n	8010e9a <netif_set_up+0x1e>
 8010e8a:	4b0f      	ldr	r3, [pc, #60]	; (8010ec8 <netif_set_up+0x4c>)
 8010e8c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010e90:	490e      	ldr	r1, [pc, #56]	; (8010ecc <netif_set_up+0x50>)
 8010e92:	480f      	ldr	r0, [pc, #60]	; (8010ed0 <netif_set_up+0x54>)
 8010e94:	f008 f85a 	bl	8018f4c <iprintf>
 8010e98:	e013      	b.n	8010ec2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ea0:	f003 0301 	and.w	r3, r3, #1
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d10c      	bne.n	8010ec2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010eae:	f043 0301 	orr.w	r3, r3, #1
 8010eb2:	b2da      	uxtb	r2, r3
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010eba:	2103      	movs	r1, #3
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 f809 	bl	8010ed4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010ec2:	3708      	adds	r7, #8
 8010ec4:	46bd      	mov	sp, r7
 8010ec6:	bd80      	pop	{r7, pc}
 8010ec8:	0801cc6c 	.word	0x0801cc6c
 8010ecc:	0801ce34 	.word	0x0801ce34
 8010ed0:	0801ccfc 	.word	0x0801ccfc

08010ed4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010ed4:	b580      	push	{r7, lr}
 8010ed6:	b082      	sub	sp, #8
 8010ed8:	af00      	add	r7, sp, #0
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	460b      	mov	r3, r1
 8010ede:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d106      	bne.n	8010ef4 <netif_issue_reports+0x20>
 8010ee6:	4b18      	ldr	r3, [pc, #96]	; (8010f48 <netif_issue_reports+0x74>)
 8010ee8:	f240 326d 	movw	r2, #877	; 0x36d
 8010eec:	4917      	ldr	r1, [pc, #92]	; (8010f4c <netif_issue_reports+0x78>)
 8010eee:	4818      	ldr	r0, [pc, #96]	; (8010f50 <netif_issue_reports+0x7c>)
 8010ef0:	f008 f82c 	bl	8018f4c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010efa:	f003 0304 	and.w	r3, r3, #4
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d01e      	beq.n	8010f40 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f08:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d017      	beq.n	8010f40 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010f10:	78fb      	ldrb	r3, [r7, #3]
 8010f12:	f003 0301 	and.w	r3, r3, #1
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d013      	beq.n	8010f42 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	3304      	adds	r3, #4
 8010f1e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d00e      	beq.n	8010f42 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f2a:	f003 0308 	and.w	r3, r3, #8
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d007      	beq.n	8010f42 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	3304      	adds	r3, #4
 8010f36:	4619      	mov	r1, r3
 8010f38:	6878      	ldr	r0, [r7, #4]
 8010f3a:	f7fc fc37 	bl	800d7ac <etharp_request>
 8010f3e:	e000      	b.n	8010f42 <netif_issue_reports+0x6e>
    return;
 8010f40:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010f42:	3708      	adds	r7, #8
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}
 8010f48:	0801cc6c 	.word	0x0801cc6c
 8010f4c:	0801ce50 	.word	0x0801ce50
 8010f50:	0801ccfc 	.word	0x0801ccfc

08010f54 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d107      	bne.n	8010f72 <netif_set_down+0x1e>
 8010f62:	4b12      	ldr	r3, [pc, #72]	; (8010fac <netif_set_down+0x58>)
 8010f64:	f240 329b 	movw	r2, #923	; 0x39b
 8010f68:	4911      	ldr	r1, [pc, #68]	; (8010fb0 <netif_set_down+0x5c>)
 8010f6a:	4812      	ldr	r0, [pc, #72]	; (8010fb4 <netif_set_down+0x60>)
 8010f6c:	f007 ffee 	bl	8018f4c <iprintf>
 8010f70:	e019      	b.n	8010fa6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f78:	f003 0301 	and.w	r3, r3, #1
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d012      	beq.n	8010fa6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f86:	f023 0301 	bic.w	r3, r3, #1
 8010f8a:	b2da      	uxtb	r2, r3
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010f98:	f003 0308 	and.w	r3, r3, #8
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d002      	beq.n	8010fa6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f7fb ffc1 	bl	800cf28 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	0801cc6c 	.word	0x0801cc6c
 8010fb0:	0801ce74 	.word	0x0801ce74
 8010fb4:	0801ccfc 	.word	0x0801ccfc

08010fb8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d107      	bne.n	8010fd6 <netif_set_link_up+0x1e>
 8010fc6:	4b13      	ldr	r3, [pc, #76]	; (8011014 <netif_set_link_up+0x5c>)
 8010fc8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010fcc:	4912      	ldr	r1, [pc, #72]	; (8011018 <netif_set_link_up+0x60>)
 8010fce:	4813      	ldr	r0, [pc, #76]	; (801101c <netif_set_link_up+0x64>)
 8010fd0:	f007 ffbc 	bl	8018f4c <iprintf>
 8010fd4:	e01b      	b.n	801100e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010fdc:	f003 0304 	and.w	r3, r3, #4
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d114      	bne.n	801100e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010fea:	f043 0304 	orr.w	r3, r3, #4
 8010fee:	b2da      	uxtb	r2, r3
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010ff6:	2103      	movs	r1, #3
 8010ff8:	6878      	ldr	r0, [r7, #4]
 8010ffa:	f7ff ff6b 	bl	8010ed4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	69db      	ldr	r3, [r3, #28]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d003      	beq.n	801100e <netif_set_link_up+0x56>
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	69db      	ldr	r3, [r3, #28]
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}
 8011014:	0801cc6c 	.word	0x0801cc6c
 8011018:	0801ce94 	.word	0x0801ce94
 801101c:	0801ccfc 	.word	0x0801ccfc

08011020 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d107      	bne.n	801103e <netif_set_link_down+0x1e>
 801102e:	4b11      	ldr	r3, [pc, #68]	; (8011074 <netif_set_link_down+0x54>)
 8011030:	f240 4206 	movw	r2, #1030	; 0x406
 8011034:	4910      	ldr	r1, [pc, #64]	; (8011078 <netif_set_link_down+0x58>)
 8011036:	4811      	ldr	r0, [pc, #68]	; (801107c <netif_set_link_down+0x5c>)
 8011038:	f007 ff88 	bl	8018f4c <iprintf>
 801103c:	e017      	b.n	801106e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011044:	f003 0304 	and.w	r3, r3, #4
 8011048:	2b00      	cmp	r3, #0
 801104a:	d010      	beq.n	801106e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011052:	f023 0304 	bic.w	r3, r3, #4
 8011056:	b2da      	uxtb	r2, r3
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	69db      	ldr	r3, [r3, #28]
 8011062:	2b00      	cmp	r3, #0
 8011064:	d003      	beq.n	801106e <netif_set_link_down+0x4e>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	69db      	ldr	r3, [r3, #28]
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	0801cc6c 	.word	0x0801cc6c
 8011078:	0801ceb8 	.word	0x0801ceb8
 801107c:	0801ccfc 	.word	0x0801ccfc

08011080 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011080:	b480      	push	{r7}
 8011082:	b083      	sub	sp, #12
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d002      	beq.n	8011096 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	683a      	ldr	r2, [r7, #0]
 8011094:	61da      	str	r2, [r3, #28]
  }
}
 8011096:	bf00      	nop
 8011098:	370c      	adds	r7, #12
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr

080110a2 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80110a2:	b480      	push	{r7}
 80110a4:	b085      	sub	sp, #20
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	60f8      	str	r0, [r7, #12]
 80110aa:	60b9      	str	r1, [r7, #8]
 80110ac:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80110ae:	f06f 030b 	mvn.w	r3, #11
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3714      	adds	r7, #20
 80110b6:	46bd      	mov	sp, r7
 80110b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110bc:	4770      	bx	lr
	...

080110c0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80110c0:	b480      	push	{r7}
 80110c2:	b085      	sub	sp, #20
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	4603      	mov	r3, r0
 80110c8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80110ca:	79fb      	ldrb	r3, [r7, #7]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d013      	beq.n	80110f8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80110d0:	4b0d      	ldr	r3, [pc, #52]	; (8011108 <netif_get_by_index+0x48>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	60fb      	str	r3, [r7, #12]
 80110d6:	e00c      	b.n	80110f2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80110d8:	68fb      	ldr	r3, [r7, #12]
 80110da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110de:	3301      	adds	r3, #1
 80110e0:	b2db      	uxtb	r3, r3
 80110e2:	79fa      	ldrb	r2, [r7, #7]
 80110e4:	429a      	cmp	r2, r3
 80110e6:	d101      	bne.n	80110ec <netif_get_by_index+0x2c>
        return netif; /* found! */
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	e006      	b.n	80110fa <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	60fb      	str	r3, [r7, #12]
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d1ef      	bne.n	80110d8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80110f8:	2300      	movs	r3, #0
}
 80110fa:	4618      	mov	r0, r3
 80110fc:	3714      	adds	r7, #20
 80110fe:	46bd      	mov	sp, r7
 8011100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011104:	4770      	bx	lr
 8011106:	bf00      	nop
 8011108:	2400b298 	.word	0x2400b298

0801110c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801110c:	b480      	push	{r7}
 801110e:	b085      	sub	sp, #20
 8011110:	af00      	add	r7, sp, #0
 8011112:	60f8      	str	r0, [r7, #12]
 8011114:	60b9      	str	r1, [r7, #8]
 8011116:	4611      	mov	r1, r2
 8011118:	461a      	mov	r2, r3
 801111a:	460b      	mov	r3, r1
 801111c:	80fb      	strh	r3, [r7, #6]
 801111e:	4613      	mov	r3, r2
 8011120:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	2200      	movs	r2, #0
 8011126:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	68ba      	ldr	r2, [r7, #8]
 801112c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	88fa      	ldrh	r2, [r7, #6]
 8011132:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	88ba      	ldrh	r2, [r7, #4]
 8011138:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801113a:	8b3b      	ldrh	r3, [r7, #24]
 801113c:	b2da      	uxtb	r2, r3
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	7f3a      	ldrb	r2, [r7, #28]
 8011146:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2201      	movs	r2, #1
 801114c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	2200      	movs	r2, #0
 8011152:	73da      	strb	r2, [r3, #15]
}
 8011154:	bf00      	nop
 8011156:	3714      	adds	r7, #20
 8011158:	46bd      	mov	sp, r7
 801115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115e:	4770      	bx	lr

08011160 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b08c      	sub	sp, #48	; 0x30
 8011164:	af02      	add	r7, sp, #8
 8011166:	4603      	mov	r3, r0
 8011168:	71fb      	strb	r3, [r7, #7]
 801116a:	460b      	mov	r3, r1
 801116c:	80bb      	strh	r3, [r7, #4]
 801116e:	4613      	mov	r3, r2
 8011170:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011172:	79fb      	ldrb	r3, [r7, #7]
 8011174:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011176:	887b      	ldrh	r3, [r7, #2]
 8011178:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801117c:	d07d      	beq.n	801127a <pbuf_alloc+0x11a>
 801117e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011182:	f300 80c6 	bgt.w	8011312 <pbuf_alloc+0x1b2>
 8011186:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801118a:	d010      	beq.n	80111ae <pbuf_alloc+0x4e>
 801118c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011190:	f300 80bf 	bgt.w	8011312 <pbuf_alloc+0x1b2>
 8011194:	2b01      	cmp	r3, #1
 8011196:	d002      	beq.n	801119e <pbuf_alloc+0x3e>
 8011198:	2b41      	cmp	r3, #65	; 0x41
 801119a:	f040 80ba 	bne.w	8011312 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801119e:	887a      	ldrh	r2, [r7, #2]
 80111a0:	88bb      	ldrh	r3, [r7, #4]
 80111a2:	4619      	mov	r1, r3
 80111a4:	2000      	movs	r0, #0
 80111a6:	f000 f8cf 	bl	8011348 <pbuf_alloc_reference>
 80111aa:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80111ac:	e0bb      	b.n	8011326 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80111ae:	2300      	movs	r3, #0
 80111b0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80111b2:	2300      	movs	r3, #0
 80111b4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80111b6:	88bb      	ldrh	r3, [r7, #4]
 80111b8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80111ba:	200d      	movs	r0, #13
 80111bc:	f7ff fbf4 	bl	80109a8 <memp_malloc>
 80111c0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80111c2:	693b      	ldr	r3, [r7, #16]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d107      	bne.n	80111d8 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 80111c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d002      	beq.n	80111d4 <pbuf_alloc+0x74>
            pbuf_free(p);
 80111ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111d0:	f000 fada 	bl	8011788 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80111d4:	2300      	movs	r3, #0
 80111d6:	e0a7      	b.n	8011328 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80111d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111da:	3303      	adds	r3, #3
 80111dc:	b29b      	uxth	r3, r3
 80111de:	f023 0303 	bic.w	r3, r3, #3
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	f5c3 63bf 	rsb	r3, r3, #1528	; 0x5f8
 80111e8:	b29b      	uxth	r3, r3
 80111ea:	8b7a      	ldrh	r2, [r7, #26]
 80111ec:	4293      	cmp	r3, r2
 80111ee:	bf28      	it	cs
 80111f0:	4613      	movcs	r3, r2
 80111f2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80111f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111f6:	3310      	adds	r3, #16
 80111f8:	693a      	ldr	r2, [r7, #16]
 80111fa:	4413      	add	r3, r2
 80111fc:	3303      	adds	r3, #3
 80111fe:	f023 0303 	bic.w	r3, r3, #3
 8011202:	4618      	mov	r0, r3
 8011204:	89f9      	ldrh	r1, [r7, #14]
 8011206:	8b7a      	ldrh	r2, [r7, #26]
 8011208:	2300      	movs	r3, #0
 801120a:	9301      	str	r3, [sp, #4]
 801120c:	887b      	ldrh	r3, [r7, #2]
 801120e:	9300      	str	r3, [sp, #0]
 8011210:	460b      	mov	r3, r1
 8011212:	4601      	mov	r1, r0
 8011214:	6938      	ldr	r0, [r7, #16]
 8011216:	f7ff ff79 	bl	801110c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801121a:	693b      	ldr	r3, [r7, #16]
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	f003 0303 	and.w	r3, r3, #3
 8011222:	2b00      	cmp	r3, #0
 8011224:	d006      	beq.n	8011234 <pbuf_alloc+0xd4>
 8011226:	4b42      	ldr	r3, [pc, #264]	; (8011330 <pbuf_alloc+0x1d0>)
 8011228:	f44f 7280 	mov.w	r2, #256	; 0x100
 801122c:	4941      	ldr	r1, [pc, #260]	; (8011334 <pbuf_alloc+0x1d4>)
 801122e:	4842      	ldr	r0, [pc, #264]	; (8011338 <pbuf_alloc+0x1d8>)
 8011230:	f007 fe8c 	bl	8018f4c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011236:	3303      	adds	r3, #3
 8011238:	f023 0303 	bic.w	r3, r3, #3
 801123c:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
 8011240:	d106      	bne.n	8011250 <pbuf_alloc+0xf0>
 8011242:	4b3b      	ldr	r3, [pc, #236]	; (8011330 <pbuf_alloc+0x1d0>)
 8011244:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011248:	493c      	ldr	r1, [pc, #240]	; (801133c <pbuf_alloc+0x1dc>)
 801124a:	483b      	ldr	r0, [pc, #236]	; (8011338 <pbuf_alloc+0x1d8>)
 801124c:	f007 fe7e 	bl	8018f4c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011252:	2b00      	cmp	r3, #0
 8011254:	d102      	bne.n	801125c <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011256:	693b      	ldr	r3, [r7, #16]
 8011258:	627b      	str	r3, [r7, #36]	; 0x24
 801125a:	e002      	b.n	8011262 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801125c:	69fb      	ldr	r3, [r7, #28]
 801125e:	693a      	ldr	r2, [r7, #16]
 8011260:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011262:	693b      	ldr	r3, [r7, #16]
 8011264:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011266:	8b7a      	ldrh	r2, [r7, #26]
 8011268:	89fb      	ldrh	r3, [r7, #14]
 801126a:	1ad3      	subs	r3, r2, r3
 801126c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801126e:	2300      	movs	r3, #0
 8011270:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011272:	8b7b      	ldrh	r3, [r7, #26]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d1a0      	bne.n	80111ba <pbuf_alloc+0x5a>
      break;
 8011278:	e055      	b.n	8011326 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801127a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801127c:	3303      	adds	r3, #3
 801127e:	b29b      	uxth	r3, r3
 8011280:	f023 0303 	bic.w	r3, r3, #3
 8011284:	b29a      	uxth	r2, r3
 8011286:	88bb      	ldrh	r3, [r7, #4]
 8011288:	3303      	adds	r3, #3
 801128a:	b29b      	uxth	r3, r3
 801128c:	f023 0303 	bic.w	r3, r3, #3
 8011290:	b29b      	uxth	r3, r3
 8011292:	4413      	add	r3, r2
 8011294:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011296:	8b3b      	ldrh	r3, [r7, #24]
 8011298:	3310      	adds	r3, #16
 801129a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801129c:	8b3a      	ldrh	r2, [r7, #24]
 801129e:	88bb      	ldrh	r3, [r7, #4]
 80112a0:	3303      	adds	r3, #3
 80112a2:	f023 0303 	bic.w	r3, r3, #3
 80112a6:	429a      	cmp	r2, r3
 80112a8:	d306      	bcc.n	80112b8 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80112aa:	8afa      	ldrh	r2, [r7, #22]
 80112ac:	88bb      	ldrh	r3, [r7, #4]
 80112ae:	3303      	adds	r3, #3
 80112b0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d201      	bcs.n	80112bc <pbuf_alloc+0x15c>
        return NULL;
 80112b8:	2300      	movs	r3, #0
 80112ba:	e035      	b.n	8011328 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80112bc:	8afb      	ldrh	r3, [r7, #22]
 80112be:	4618      	mov	r0, r3
 80112c0:	f7ff f9ce 	bl	8010660 <mem_malloc>
 80112c4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d101      	bne.n	80112d0 <pbuf_alloc+0x170>
        return NULL;
 80112cc:	2300      	movs	r3, #0
 80112ce:	e02b      	b.n	8011328 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80112d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80112d2:	3310      	adds	r3, #16
 80112d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112d6:	4413      	add	r3, r2
 80112d8:	3303      	adds	r3, #3
 80112da:	f023 0303 	bic.w	r3, r3, #3
 80112de:	4618      	mov	r0, r3
 80112e0:	88b9      	ldrh	r1, [r7, #4]
 80112e2:	88ba      	ldrh	r2, [r7, #4]
 80112e4:	2300      	movs	r3, #0
 80112e6:	9301      	str	r3, [sp, #4]
 80112e8:	887b      	ldrh	r3, [r7, #2]
 80112ea:	9300      	str	r3, [sp, #0]
 80112ec:	460b      	mov	r3, r1
 80112ee:	4601      	mov	r1, r0
 80112f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80112f2:	f7ff ff0b 	bl	801110c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80112f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	f003 0303 	and.w	r3, r3, #3
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d010      	beq.n	8011324 <pbuf_alloc+0x1c4>
 8011302:	4b0b      	ldr	r3, [pc, #44]	; (8011330 <pbuf_alloc+0x1d0>)
 8011304:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011308:	490d      	ldr	r1, [pc, #52]	; (8011340 <pbuf_alloc+0x1e0>)
 801130a:	480b      	ldr	r0, [pc, #44]	; (8011338 <pbuf_alloc+0x1d8>)
 801130c:	f007 fe1e 	bl	8018f4c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011310:	e008      	b.n	8011324 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011312:	4b07      	ldr	r3, [pc, #28]	; (8011330 <pbuf_alloc+0x1d0>)
 8011314:	f240 1227 	movw	r2, #295	; 0x127
 8011318:	490a      	ldr	r1, [pc, #40]	; (8011344 <pbuf_alloc+0x1e4>)
 801131a:	4807      	ldr	r0, [pc, #28]	; (8011338 <pbuf_alloc+0x1d8>)
 801131c:	f007 fe16 	bl	8018f4c <iprintf>
      return NULL;
 8011320:	2300      	movs	r3, #0
 8011322:	e001      	b.n	8011328 <pbuf_alloc+0x1c8>
      break;
 8011324:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011328:	4618      	mov	r0, r3
 801132a:	3728      	adds	r7, #40	; 0x28
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}
 8011330:	0801cedc 	.word	0x0801cedc
 8011334:	0801cf50 	.word	0x0801cf50
 8011338:	0801cf80 	.word	0x0801cf80
 801133c:	0801cfa8 	.word	0x0801cfa8
 8011340:	0801cfdc 	.word	0x0801cfdc
 8011344:	0801d008 	.word	0x0801d008

08011348 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b086      	sub	sp, #24
 801134c:	af02      	add	r7, sp, #8
 801134e:	6078      	str	r0, [r7, #4]
 8011350:	460b      	mov	r3, r1
 8011352:	807b      	strh	r3, [r7, #2]
 8011354:	4613      	mov	r3, r2
 8011356:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011358:	883b      	ldrh	r3, [r7, #0]
 801135a:	2b41      	cmp	r3, #65	; 0x41
 801135c:	d009      	beq.n	8011372 <pbuf_alloc_reference+0x2a>
 801135e:	883b      	ldrh	r3, [r7, #0]
 8011360:	2b01      	cmp	r3, #1
 8011362:	d006      	beq.n	8011372 <pbuf_alloc_reference+0x2a>
 8011364:	4b0f      	ldr	r3, [pc, #60]	; (80113a4 <pbuf_alloc_reference+0x5c>)
 8011366:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801136a:	490f      	ldr	r1, [pc, #60]	; (80113a8 <pbuf_alloc_reference+0x60>)
 801136c:	480f      	ldr	r0, [pc, #60]	; (80113ac <pbuf_alloc_reference+0x64>)
 801136e:	f007 fded 	bl	8018f4c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011372:	200c      	movs	r0, #12
 8011374:	f7ff fb18 	bl	80109a8 <memp_malloc>
 8011378:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d101      	bne.n	8011384 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011380:	2300      	movs	r3, #0
 8011382:	e00b      	b.n	801139c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011384:	8879      	ldrh	r1, [r7, #2]
 8011386:	887a      	ldrh	r2, [r7, #2]
 8011388:	2300      	movs	r3, #0
 801138a:	9301      	str	r3, [sp, #4]
 801138c:	883b      	ldrh	r3, [r7, #0]
 801138e:	9300      	str	r3, [sp, #0]
 8011390:	460b      	mov	r3, r1
 8011392:	6879      	ldr	r1, [r7, #4]
 8011394:	68f8      	ldr	r0, [r7, #12]
 8011396:	f7ff feb9 	bl	801110c <pbuf_init_alloced_pbuf>
  return p;
 801139a:	68fb      	ldr	r3, [r7, #12]
}
 801139c:	4618      	mov	r0, r3
 801139e:	3710      	adds	r7, #16
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}
 80113a4:	0801cedc 	.word	0x0801cedc
 80113a8:	0801d024 	.word	0x0801d024
 80113ac:	0801cf80 	.word	0x0801cf80

080113b0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b088      	sub	sp, #32
 80113b4:	af02      	add	r7, sp, #8
 80113b6:	607b      	str	r3, [r7, #4]
 80113b8:	4603      	mov	r3, r0
 80113ba:	73fb      	strb	r3, [r7, #15]
 80113bc:	460b      	mov	r3, r1
 80113be:	81bb      	strh	r3, [r7, #12]
 80113c0:	4613      	mov	r3, r2
 80113c2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80113c4:	7bfb      	ldrb	r3, [r7, #15]
 80113c6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80113c8:	8a7b      	ldrh	r3, [r7, #18]
 80113ca:	3303      	adds	r3, #3
 80113cc:	f023 0203 	bic.w	r2, r3, #3
 80113d0:	89bb      	ldrh	r3, [r7, #12]
 80113d2:	441a      	add	r2, r3
 80113d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113d6:	429a      	cmp	r2, r3
 80113d8:	d901      	bls.n	80113de <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80113da:	2300      	movs	r3, #0
 80113dc:	e018      	b.n	8011410 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80113de:	6a3b      	ldr	r3, [r7, #32]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d007      	beq.n	80113f4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80113e4:	8a7b      	ldrh	r3, [r7, #18]
 80113e6:	3303      	adds	r3, #3
 80113e8:	f023 0303 	bic.w	r3, r3, #3
 80113ec:	6a3a      	ldr	r2, [r7, #32]
 80113ee:	4413      	add	r3, r2
 80113f0:	617b      	str	r3, [r7, #20]
 80113f2:	e001      	b.n	80113f8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80113f4:	2300      	movs	r3, #0
 80113f6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	89b9      	ldrh	r1, [r7, #12]
 80113fc:	89ba      	ldrh	r2, [r7, #12]
 80113fe:	2302      	movs	r3, #2
 8011400:	9301      	str	r3, [sp, #4]
 8011402:	897b      	ldrh	r3, [r7, #10]
 8011404:	9300      	str	r3, [sp, #0]
 8011406:	460b      	mov	r3, r1
 8011408:	6979      	ldr	r1, [r7, #20]
 801140a:	f7ff fe7f 	bl	801110c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801140e:	687b      	ldr	r3, [r7, #4]
}
 8011410:	4618      	mov	r0, r3
 8011412:	3718      	adds	r7, #24
 8011414:	46bd      	mov	sp, r7
 8011416:	bd80      	pop	{r7, pc}

08011418 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	460b      	mov	r3, r1
 8011422:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d106      	bne.n	8011438 <pbuf_realloc+0x20>
 801142a:	4b3a      	ldr	r3, [pc, #232]	; (8011514 <pbuf_realloc+0xfc>)
 801142c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011430:	4939      	ldr	r1, [pc, #228]	; (8011518 <pbuf_realloc+0x100>)
 8011432:	483a      	ldr	r0, [pc, #232]	; (801151c <pbuf_realloc+0x104>)
 8011434:	f007 fd8a 	bl	8018f4c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	891b      	ldrh	r3, [r3, #8]
 801143c:	887a      	ldrh	r2, [r7, #2]
 801143e:	429a      	cmp	r2, r3
 8011440:	d263      	bcs.n	801150a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	891a      	ldrh	r2, [r3, #8]
 8011446:	887b      	ldrh	r3, [r7, #2]
 8011448:	1ad3      	subs	r3, r2, r3
 801144a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801144c:	887b      	ldrh	r3, [r7, #2]
 801144e:	817b      	strh	r3, [r7, #10]
  q = p;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011454:	e018      	b.n	8011488 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	895b      	ldrh	r3, [r3, #10]
 801145a:	897a      	ldrh	r2, [r7, #10]
 801145c:	1ad3      	subs	r3, r2, r3
 801145e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	891a      	ldrh	r2, [r3, #8]
 8011464:	893b      	ldrh	r3, [r7, #8]
 8011466:	1ad3      	subs	r3, r2, r3
 8011468:	b29a      	uxth	r2, r3
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d106      	bne.n	8011488 <pbuf_realloc+0x70>
 801147a:	4b26      	ldr	r3, [pc, #152]	; (8011514 <pbuf_realloc+0xfc>)
 801147c:	f240 12af 	movw	r2, #431	; 0x1af
 8011480:	4927      	ldr	r1, [pc, #156]	; (8011520 <pbuf_realloc+0x108>)
 8011482:	4826      	ldr	r0, [pc, #152]	; (801151c <pbuf_realloc+0x104>)
 8011484:	f007 fd62 	bl	8018f4c <iprintf>
  while (rem_len > q->len) {
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	895b      	ldrh	r3, [r3, #10]
 801148c:	897a      	ldrh	r2, [r7, #10]
 801148e:	429a      	cmp	r2, r3
 8011490:	d8e1      	bhi.n	8011456 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	7b1b      	ldrb	r3, [r3, #12]
 8011496:	f003 030f 	and.w	r3, r3, #15
 801149a:	2b00      	cmp	r3, #0
 801149c:	d121      	bne.n	80114e2 <pbuf_realloc+0xca>
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	895b      	ldrh	r3, [r3, #10]
 80114a2:	897a      	ldrh	r2, [r7, #10]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d01c      	beq.n	80114e2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	7b5b      	ldrb	r3, [r3, #13]
 80114ac:	f003 0302 	and.w	r3, r3, #2
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d116      	bne.n	80114e2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80114b4:	68fb      	ldr	r3, [r7, #12]
 80114b6:	685a      	ldr	r2, [r3, #4]
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	1ad3      	subs	r3, r2, r3
 80114bc:	b29a      	uxth	r2, r3
 80114be:	897b      	ldrh	r3, [r7, #10]
 80114c0:	4413      	add	r3, r2
 80114c2:	b29b      	uxth	r3, r3
 80114c4:	4619      	mov	r1, r3
 80114c6:	68f8      	ldr	r0, [r7, #12]
 80114c8:	f7fe ffc0 	bl	801044c <mem_trim>
 80114cc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d106      	bne.n	80114e2 <pbuf_realloc+0xca>
 80114d4:	4b0f      	ldr	r3, [pc, #60]	; (8011514 <pbuf_realloc+0xfc>)
 80114d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80114da:	4912      	ldr	r1, [pc, #72]	; (8011524 <pbuf_realloc+0x10c>)
 80114dc:	480f      	ldr	r0, [pc, #60]	; (801151c <pbuf_realloc+0x104>)
 80114de:	f007 fd35 	bl	8018f4c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	897a      	ldrh	r2, [r7, #10]
 80114e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	895a      	ldrh	r2, [r3, #10]
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d004      	beq.n	8011502 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	4618      	mov	r0, r3
 80114fe:	f000 f943 	bl	8011788 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	2200      	movs	r2, #0
 8011506:	601a      	str	r2, [r3, #0]
 8011508:	e000      	b.n	801150c <pbuf_realloc+0xf4>
    return;
 801150a:	bf00      	nop

}
 801150c:	3710      	adds	r7, #16
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}
 8011512:	bf00      	nop
 8011514:	0801cedc 	.word	0x0801cedc
 8011518:	0801d038 	.word	0x0801d038
 801151c:	0801cf80 	.word	0x0801cf80
 8011520:	0801d050 	.word	0x0801d050
 8011524:	0801d068 	.word	0x0801d068

08011528 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011528:	b580      	push	{r7, lr}
 801152a:	b086      	sub	sp, #24
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	4613      	mov	r3, r2
 8011534:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d106      	bne.n	801154a <pbuf_add_header_impl+0x22>
 801153c:	4b2b      	ldr	r3, [pc, #172]	; (80115ec <pbuf_add_header_impl+0xc4>)
 801153e:	f240 12df 	movw	r2, #479	; 0x1df
 8011542:	492b      	ldr	r1, [pc, #172]	; (80115f0 <pbuf_add_header_impl+0xc8>)
 8011544:	482b      	ldr	r0, [pc, #172]	; (80115f4 <pbuf_add_header_impl+0xcc>)
 8011546:	f007 fd01 	bl	8018f4c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d003      	beq.n	8011558 <pbuf_add_header_impl+0x30>
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011556:	d301      	bcc.n	801155c <pbuf_add_header_impl+0x34>
    return 1;
 8011558:	2301      	movs	r3, #1
 801155a:	e043      	b.n	80115e4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801155c:	68bb      	ldr	r3, [r7, #8]
 801155e:	2b00      	cmp	r3, #0
 8011560:	d101      	bne.n	8011566 <pbuf_add_header_impl+0x3e>
    return 0;
 8011562:	2300      	movs	r3, #0
 8011564:	e03e      	b.n	80115e4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	891a      	ldrh	r2, [r3, #8]
 801156e:	8a7b      	ldrh	r3, [r7, #18]
 8011570:	4413      	add	r3, r2
 8011572:	b29b      	uxth	r3, r3
 8011574:	8a7a      	ldrh	r2, [r7, #18]
 8011576:	429a      	cmp	r2, r3
 8011578:	d901      	bls.n	801157e <pbuf_add_header_impl+0x56>
    return 1;
 801157a:	2301      	movs	r3, #1
 801157c:	e032      	b.n	80115e4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	7b1b      	ldrb	r3, [r3, #12]
 8011582:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011584:	8a3b      	ldrh	r3, [r7, #16]
 8011586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801158a:	2b00      	cmp	r3, #0
 801158c:	d00c      	beq.n	80115a8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	685a      	ldr	r2, [r3, #4]
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	425b      	negs	r3, r3
 8011596:	4413      	add	r3, r2
 8011598:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	3310      	adds	r3, #16
 801159e:	697a      	ldr	r2, [r7, #20]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d20d      	bcs.n	80115c0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80115a4:	2301      	movs	r3, #1
 80115a6:	e01d      	b.n	80115e4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80115a8:	79fb      	ldrb	r3, [r7, #7]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d006      	beq.n	80115bc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	685a      	ldr	r2, [r3, #4]
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	425b      	negs	r3, r3
 80115b6:	4413      	add	r3, r2
 80115b8:	617b      	str	r3, [r7, #20]
 80115ba:	e001      	b.n	80115c0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80115bc:	2301      	movs	r3, #1
 80115be:	e011      	b.n	80115e4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	697a      	ldr	r2, [r7, #20]
 80115c4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	895a      	ldrh	r2, [r3, #10]
 80115ca:	8a7b      	ldrh	r3, [r7, #18]
 80115cc:	4413      	add	r3, r2
 80115ce:	b29a      	uxth	r2, r3
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	891a      	ldrh	r2, [r3, #8]
 80115d8:	8a7b      	ldrh	r3, [r7, #18]
 80115da:	4413      	add	r3, r2
 80115dc:	b29a      	uxth	r2, r3
 80115de:	68fb      	ldr	r3, [r7, #12]
 80115e0:	811a      	strh	r2, [r3, #8]


  return 0;
 80115e2:	2300      	movs	r3, #0
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3718      	adds	r7, #24
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	0801cedc 	.word	0x0801cedc
 80115f0:	0801d084 	.word	0x0801d084
 80115f4:	0801cf80 	.word	0x0801cf80

080115f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	6078      	str	r0, [r7, #4]
 8011600:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011602:	2200      	movs	r2, #0
 8011604:	6839      	ldr	r1, [r7, #0]
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f7ff ff8e 	bl	8011528 <pbuf_add_header_impl>
 801160c:	4603      	mov	r3, r0
}
 801160e:	4618      	mov	r0, r3
 8011610:	3708      	adds	r7, #8
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
	...

08011618 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011618:	b580      	push	{r7, lr}
 801161a:	b084      	sub	sp, #16
 801161c:	af00      	add	r7, sp, #0
 801161e:	6078      	str	r0, [r7, #4]
 8011620:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d106      	bne.n	8011636 <pbuf_remove_header+0x1e>
 8011628:	4b20      	ldr	r3, [pc, #128]	; (80116ac <pbuf_remove_header+0x94>)
 801162a:	f240 224b 	movw	r2, #587	; 0x24b
 801162e:	4920      	ldr	r1, [pc, #128]	; (80116b0 <pbuf_remove_header+0x98>)
 8011630:	4820      	ldr	r0, [pc, #128]	; (80116b4 <pbuf_remove_header+0x9c>)
 8011632:	f007 fc8b 	bl	8018f4c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d003      	beq.n	8011644 <pbuf_remove_header+0x2c>
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011642:	d301      	bcc.n	8011648 <pbuf_remove_header+0x30>
    return 1;
 8011644:	2301      	movs	r3, #1
 8011646:	e02c      	b.n	80116a2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d101      	bne.n	8011652 <pbuf_remove_header+0x3a>
    return 0;
 801164e:	2300      	movs	r3, #0
 8011650:	e027      	b.n	80116a2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	895b      	ldrh	r3, [r3, #10]
 801165a:	89fa      	ldrh	r2, [r7, #14]
 801165c:	429a      	cmp	r2, r3
 801165e:	d908      	bls.n	8011672 <pbuf_remove_header+0x5a>
 8011660:	4b12      	ldr	r3, [pc, #72]	; (80116ac <pbuf_remove_header+0x94>)
 8011662:	f240 2255 	movw	r2, #597	; 0x255
 8011666:	4914      	ldr	r1, [pc, #80]	; (80116b8 <pbuf_remove_header+0xa0>)
 8011668:	4812      	ldr	r0, [pc, #72]	; (80116b4 <pbuf_remove_header+0x9c>)
 801166a:	f007 fc6f 	bl	8018f4c <iprintf>
 801166e:	2301      	movs	r3, #1
 8011670:	e017      	b.n	80116a2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	685b      	ldr	r3, [r3, #4]
 8011676:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	685a      	ldr	r2, [r3, #4]
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	441a      	add	r2, r3
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	895a      	ldrh	r2, [r3, #10]
 8011688:	89fb      	ldrh	r3, [r7, #14]
 801168a:	1ad3      	subs	r3, r2, r3
 801168c:	b29a      	uxth	r2, r3
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	891a      	ldrh	r2, [r3, #8]
 8011696:	89fb      	ldrh	r3, [r7, #14]
 8011698:	1ad3      	subs	r3, r2, r3
 801169a:	b29a      	uxth	r2, r3
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80116a0:	2300      	movs	r3, #0
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3710      	adds	r7, #16
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}
 80116aa:	bf00      	nop
 80116ac:	0801cedc 	.word	0x0801cedc
 80116b0:	0801d084 	.word	0x0801d084
 80116b4:	0801cf80 	.word	0x0801cf80
 80116b8:	0801d090 	.word	0x0801d090

080116bc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b082      	sub	sp, #8
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	6078      	str	r0, [r7, #4]
 80116c4:	460b      	mov	r3, r1
 80116c6:	807b      	strh	r3, [r7, #2]
 80116c8:	4613      	mov	r3, r2
 80116ca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80116cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	da08      	bge.n	80116e6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80116d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80116d8:	425b      	negs	r3, r3
 80116da:	4619      	mov	r1, r3
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f7ff ff9b 	bl	8011618 <pbuf_remove_header>
 80116e2:	4603      	mov	r3, r0
 80116e4:	e007      	b.n	80116f6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80116e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80116ea:	787a      	ldrb	r2, [r7, #1]
 80116ec:	4619      	mov	r1, r3
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f7ff ff1a 	bl	8011528 <pbuf_add_header_impl>
 80116f4:	4603      	mov	r3, r0
  }
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	3708      	adds	r7, #8
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}

080116fe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80116fe:	b580      	push	{r7, lr}
 8011700:	b082      	sub	sp, #8
 8011702:	af00      	add	r7, sp, #0
 8011704:	6078      	str	r0, [r7, #4]
 8011706:	460b      	mov	r3, r1
 8011708:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801170a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801170e:	2201      	movs	r2, #1
 8011710:	4619      	mov	r1, r3
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f7ff ffd2 	bl	80116bc <pbuf_header_impl>
 8011718:	4603      	mov	r3, r0
}
 801171a:	4618      	mov	r0, r3
 801171c:	3708      	adds	r7, #8
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}

08011722 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8011722:	b580      	push	{r7, lr}
 8011724:	b086      	sub	sp, #24
 8011726:	af00      	add	r7, sp, #0
 8011728:	6078      	str	r0, [r7, #4]
 801172a:	460b      	mov	r3, r1
 801172c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8011732:	887b      	ldrh	r3, [r7, #2]
 8011734:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8011736:	e01c      	b.n	8011772 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	895b      	ldrh	r3, [r3, #10]
 801173c:	8a7a      	ldrh	r2, [r7, #18]
 801173e:	429a      	cmp	r2, r3
 8011740:	d310      	bcc.n	8011764 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8011742:	697b      	ldr	r3, [r7, #20]
 8011744:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	895b      	ldrh	r3, [r3, #10]
 801174a:	8a7a      	ldrh	r2, [r7, #18]
 801174c:	1ad3      	subs	r3, r2, r3
 801174e:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8011750:	697b      	ldr	r3, [r7, #20]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2200      	movs	r2, #0
 801175a:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 801175c:	68f8      	ldr	r0, [r7, #12]
 801175e:	f000 f813 	bl	8011788 <pbuf_free>
 8011762:	e006      	b.n	8011772 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8011764:	8a7b      	ldrh	r3, [r7, #18]
 8011766:	4619      	mov	r1, r3
 8011768:	6978      	ldr	r0, [r7, #20]
 801176a:	f7ff ff55 	bl	8011618 <pbuf_remove_header>
      free_left = 0;
 801176e:	2300      	movs	r3, #0
 8011770:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8011772:	8a7b      	ldrh	r3, [r7, #18]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d002      	beq.n	801177e <pbuf_free_header+0x5c>
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d1dc      	bne.n	8011738 <pbuf_free_header+0x16>
    }
  }
  return p;
 801177e:	697b      	ldr	r3, [r7, #20]
}
 8011780:	4618      	mov	r0, r3
 8011782:	3718      	adds	r7, #24
 8011784:	46bd      	mov	sp, r7
 8011786:	bd80      	pop	{r7, pc}

08011788 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b088      	sub	sp, #32
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d10b      	bne.n	80117ae <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d106      	bne.n	80117aa <pbuf_free+0x22>
 801179c:	4b3b      	ldr	r3, [pc, #236]	; (801188c <pbuf_free+0x104>)
 801179e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80117a2:	493b      	ldr	r1, [pc, #236]	; (8011890 <pbuf_free+0x108>)
 80117a4:	483b      	ldr	r0, [pc, #236]	; (8011894 <pbuf_free+0x10c>)
 80117a6:	f007 fbd1 	bl	8018f4c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80117aa:	2300      	movs	r3, #0
 80117ac:	e069      	b.n	8011882 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80117ae:	2300      	movs	r3, #0
 80117b0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80117b2:	e062      	b.n	801187a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80117b4:	f007 fb02 	bl	8018dbc <sys_arch_protect>
 80117b8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	7b9b      	ldrb	r3, [r3, #14]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d106      	bne.n	80117d0 <pbuf_free+0x48>
 80117c2:	4b32      	ldr	r3, [pc, #200]	; (801188c <pbuf_free+0x104>)
 80117c4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80117c8:	4933      	ldr	r1, [pc, #204]	; (8011898 <pbuf_free+0x110>)
 80117ca:	4832      	ldr	r0, [pc, #200]	; (8011894 <pbuf_free+0x10c>)
 80117cc:	f007 fbbe 	bl	8018f4c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	7b9b      	ldrb	r3, [r3, #14]
 80117d4:	3b01      	subs	r3, #1
 80117d6:	b2da      	uxtb	r2, r3
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	739a      	strb	r2, [r3, #14]
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	7b9b      	ldrb	r3, [r3, #14]
 80117e0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80117e2:	69b8      	ldr	r0, [r7, #24]
 80117e4:	f007 faf8 	bl	8018dd8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80117e8:	7dfb      	ldrb	r3, [r7, #23]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d143      	bne.n	8011876 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	7b1b      	ldrb	r3, [r3, #12]
 80117f8:	f003 030f 	and.w	r3, r3, #15
 80117fc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	7b5b      	ldrb	r3, [r3, #13]
 8011802:	f003 0302 	and.w	r3, r3, #2
 8011806:	2b00      	cmp	r3, #0
 8011808:	d011      	beq.n	801182e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	691b      	ldr	r3, [r3, #16]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d106      	bne.n	8011824 <pbuf_free+0x9c>
 8011816:	4b1d      	ldr	r3, [pc, #116]	; (801188c <pbuf_free+0x104>)
 8011818:	f240 22ff 	movw	r2, #767	; 0x2ff
 801181c:	491f      	ldr	r1, [pc, #124]	; (801189c <pbuf_free+0x114>)
 801181e:	481d      	ldr	r0, [pc, #116]	; (8011894 <pbuf_free+0x10c>)
 8011820:	f007 fb94 	bl	8018f4c <iprintf>
        pc->custom_free_function(p);
 8011824:	68bb      	ldr	r3, [r7, #8]
 8011826:	691b      	ldr	r3, [r3, #16]
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	4798      	blx	r3
 801182c:	e01d      	b.n	801186a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801182e:	7bfb      	ldrb	r3, [r7, #15]
 8011830:	2b02      	cmp	r3, #2
 8011832:	d104      	bne.n	801183e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011834:	6879      	ldr	r1, [r7, #4]
 8011836:	200d      	movs	r0, #13
 8011838:	f7ff f92c 	bl	8010a94 <memp_free>
 801183c:	e015      	b.n	801186a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801183e:	7bfb      	ldrb	r3, [r7, #15]
 8011840:	2b01      	cmp	r3, #1
 8011842:	d104      	bne.n	801184e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011844:	6879      	ldr	r1, [r7, #4]
 8011846:	200c      	movs	r0, #12
 8011848:	f7ff f924 	bl	8010a94 <memp_free>
 801184c:	e00d      	b.n	801186a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801184e:	7bfb      	ldrb	r3, [r7, #15]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d103      	bne.n	801185c <pbuf_free+0xd4>
          mem_free(p);
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7fe fd69 	bl	801032c <mem_free>
 801185a:	e006      	b.n	801186a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801185c:	4b0b      	ldr	r3, [pc, #44]	; (801188c <pbuf_free+0x104>)
 801185e:	f240 320f 	movw	r2, #783	; 0x30f
 8011862:	490f      	ldr	r1, [pc, #60]	; (80118a0 <pbuf_free+0x118>)
 8011864:	480b      	ldr	r0, [pc, #44]	; (8011894 <pbuf_free+0x10c>)
 8011866:	f007 fb71 	bl	8018f4c <iprintf>
        }
      }
      count++;
 801186a:	7ffb      	ldrb	r3, [r7, #31]
 801186c:	3301      	adds	r3, #1
 801186e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	607b      	str	r3, [r7, #4]
 8011874:	e001      	b.n	801187a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011876:	2300      	movs	r3, #0
 8011878:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d199      	bne.n	80117b4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011880:	7ffb      	ldrb	r3, [r7, #31]
}
 8011882:	4618      	mov	r0, r3
 8011884:	3720      	adds	r7, #32
 8011886:	46bd      	mov	sp, r7
 8011888:	bd80      	pop	{r7, pc}
 801188a:	bf00      	nop
 801188c:	0801cedc 	.word	0x0801cedc
 8011890:	0801d084 	.word	0x0801d084
 8011894:	0801cf80 	.word	0x0801cf80
 8011898:	0801d0b0 	.word	0x0801d0b0
 801189c:	0801d0c8 	.word	0x0801d0c8
 80118a0:	0801d0ec 	.word	0x0801d0ec

080118a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b085      	sub	sp, #20
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80118ac:	2300      	movs	r3, #0
 80118ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80118b0:	e005      	b.n	80118be <pbuf_clen+0x1a>
    ++len;
 80118b2:	89fb      	ldrh	r3, [r7, #14]
 80118b4:	3301      	adds	r3, #1
 80118b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d1f6      	bne.n	80118b2 <pbuf_clen+0xe>
  }
  return len;
 80118c4:	89fb      	ldrh	r3, [r7, #14]
}
 80118c6:	4618      	mov	r0, r3
 80118c8:	3714      	adds	r7, #20
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr
	...

080118d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d016      	beq.n	8011910 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80118e2:	f007 fa6b 	bl	8018dbc <sys_arch_protect>
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	7b9b      	ldrb	r3, [r3, #14]
 80118ec:	3301      	adds	r3, #1
 80118ee:	b2da      	uxtb	r2, r3
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	739a      	strb	r2, [r3, #14]
 80118f4:	68f8      	ldr	r0, [r7, #12]
 80118f6:	f007 fa6f 	bl	8018dd8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	7b9b      	ldrb	r3, [r3, #14]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d106      	bne.n	8011910 <pbuf_ref+0x3c>
 8011902:	4b05      	ldr	r3, [pc, #20]	; (8011918 <pbuf_ref+0x44>)
 8011904:	f240 3242 	movw	r2, #834	; 0x342
 8011908:	4904      	ldr	r1, [pc, #16]	; (801191c <pbuf_ref+0x48>)
 801190a:	4805      	ldr	r0, [pc, #20]	; (8011920 <pbuf_ref+0x4c>)
 801190c:	f007 fb1e 	bl	8018f4c <iprintf>
  }
}
 8011910:	bf00      	nop
 8011912:	3710      	adds	r7, #16
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}
 8011918:	0801cedc 	.word	0x0801cedc
 801191c:	0801d100 	.word	0x0801d100
 8011920:	0801cf80 	.word	0x0801cf80

08011924 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b084      	sub	sp, #16
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d002      	beq.n	801193a <pbuf_cat+0x16>
 8011934:	683b      	ldr	r3, [r7, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d107      	bne.n	801194a <pbuf_cat+0x26>
 801193a:	4b20      	ldr	r3, [pc, #128]	; (80119bc <pbuf_cat+0x98>)
 801193c:	f240 3259 	movw	r2, #857	; 0x359
 8011940:	491f      	ldr	r1, [pc, #124]	; (80119c0 <pbuf_cat+0x9c>)
 8011942:	4820      	ldr	r0, [pc, #128]	; (80119c4 <pbuf_cat+0xa0>)
 8011944:	f007 fb02 	bl	8018f4c <iprintf>
 8011948:	e034      	b.n	80119b4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	60fb      	str	r3, [r7, #12]
 801194e:	e00a      	b.n	8011966 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	891a      	ldrh	r2, [r3, #8]
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	891b      	ldrh	r3, [r3, #8]
 8011958:	4413      	add	r3, r2
 801195a:	b29a      	uxth	r2, r3
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	60fb      	str	r3, [r7, #12]
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d1f0      	bne.n	8011950 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	891a      	ldrh	r2, [r3, #8]
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	895b      	ldrh	r3, [r3, #10]
 8011976:	429a      	cmp	r2, r3
 8011978:	d006      	beq.n	8011988 <pbuf_cat+0x64>
 801197a:	4b10      	ldr	r3, [pc, #64]	; (80119bc <pbuf_cat+0x98>)
 801197c:	f240 3262 	movw	r2, #866	; 0x362
 8011980:	4911      	ldr	r1, [pc, #68]	; (80119c8 <pbuf_cat+0xa4>)
 8011982:	4810      	ldr	r0, [pc, #64]	; (80119c4 <pbuf_cat+0xa0>)
 8011984:	f007 fae2 	bl	8018f4c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d006      	beq.n	801199e <pbuf_cat+0x7a>
 8011990:	4b0a      	ldr	r3, [pc, #40]	; (80119bc <pbuf_cat+0x98>)
 8011992:	f240 3263 	movw	r2, #867	; 0x363
 8011996:	490d      	ldr	r1, [pc, #52]	; (80119cc <pbuf_cat+0xa8>)
 8011998:	480a      	ldr	r0, [pc, #40]	; (80119c4 <pbuf_cat+0xa0>)
 801199a:	f007 fad7 	bl	8018f4c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	891a      	ldrh	r2, [r3, #8]
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	891b      	ldrh	r3, [r3, #8]
 80119a6:	4413      	add	r3, r2
 80119a8:	b29a      	uxth	r2, r3
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	683a      	ldr	r2, [r7, #0]
 80119b2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80119b4:	3710      	adds	r7, #16
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}
 80119ba:	bf00      	nop
 80119bc:	0801cedc 	.word	0x0801cedc
 80119c0:	0801d114 	.word	0x0801d114
 80119c4:	0801cf80 	.word	0x0801cf80
 80119c8:	0801d14c 	.word	0x0801d14c
 80119cc:	0801d17c 	.word	0x0801d17c

080119d0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b082      	sub	sp, #8
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
 80119d8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80119da:	6839      	ldr	r1, [r7, #0]
 80119dc:	6878      	ldr	r0, [r7, #4]
 80119de:	f7ff ffa1 	bl	8011924 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80119e2:	6838      	ldr	r0, [r7, #0]
 80119e4:	f7ff ff76 	bl	80118d4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80119e8:	bf00      	nop
 80119ea:	3708      	adds	r7, #8
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b086      	sub	sp, #24
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
 80119f8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80119fa:	2300      	movs	r3, #0
 80119fc:	617b      	str	r3, [r7, #20]
 80119fe:	2300      	movs	r3, #0
 8011a00:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d008      	beq.n	8011a1a <pbuf_copy+0x2a>
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d005      	beq.n	8011a1a <pbuf_copy+0x2a>
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	891a      	ldrh	r2, [r3, #8]
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	891b      	ldrh	r3, [r3, #8]
 8011a16:	429a      	cmp	r2, r3
 8011a18:	d209      	bcs.n	8011a2e <pbuf_copy+0x3e>
 8011a1a:	4b57      	ldr	r3, [pc, #348]	; (8011b78 <pbuf_copy+0x188>)
 8011a1c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011a20:	4956      	ldr	r1, [pc, #344]	; (8011b7c <pbuf_copy+0x18c>)
 8011a22:	4857      	ldr	r0, [pc, #348]	; (8011b80 <pbuf_copy+0x190>)
 8011a24:	f007 fa92 	bl	8018f4c <iprintf>
 8011a28:	f06f 030f 	mvn.w	r3, #15
 8011a2c:	e09f      	b.n	8011b6e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	895b      	ldrh	r3, [r3, #10]
 8011a32:	461a      	mov	r2, r3
 8011a34:	697b      	ldr	r3, [r7, #20]
 8011a36:	1ad2      	subs	r2, r2, r3
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	895b      	ldrh	r3, [r3, #10]
 8011a3c:	4619      	mov	r1, r3
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	1acb      	subs	r3, r1, r3
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d306      	bcc.n	8011a54 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	895b      	ldrh	r3, [r3, #10]
 8011a4a:	461a      	mov	r2, r3
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	1ad3      	subs	r3, r2, r3
 8011a50:	60fb      	str	r3, [r7, #12]
 8011a52:	e005      	b.n	8011a60 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	895b      	ldrh	r3, [r3, #10]
 8011a58:	461a      	mov	r2, r3
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	1ad3      	subs	r3, r2, r3
 8011a5e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	685a      	ldr	r2, [r3, #4]
 8011a64:	697b      	ldr	r3, [r7, #20]
 8011a66:	18d0      	adds	r0, r2, r3
 8011a68:	683b      	ldr	r3, [r7, #0]
 8011a6a:	685a      	ldr	r2, [r3, #4]
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	4413      	add	r3, r2
 8011a70:	68fa      	ldr	r2, [r7, #12]
 8011a72:	4619      	mov	r1, r3
 8011a74:	f007 fa3a 	bl	8018eec <memcpy>
    offset_to += len;
 8011a78:	697a      	ldr	r2, [r7, #20]
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	4413      	add	r3, r2
 8011a7e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011a80:	693a      	ldr	r2, [r7, #16]
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	4413      	add	r3, r2
 8011a86:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	895b      	ldrh	r3, [r3, #10]
 8011a8c:	461a      	mov	r2, r3
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	4293      	cmp	r3, r2
 8011a92:	d906      	bls.n	8011aa2 <pbuf_copy+0xb2>
 8011a94:	4b38      	ldr	r3, [pc, #224]	; (8011b78 <pbuf_copy+0x188>)
 8011a96:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011a9a:	493a      	ldr	r1, [pc, #232]	; (8011b84 <pbuf_copy+0x194>)
 8011a9c:	4838      	ldr	r0, [pc, #224]	; (8011b80 <pbuf_copy+0x190>)
 8011a9e:	f007 fa55 	bl	8018f4c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011aa2:	683b      	ldr	r3, [r7, #0]
 8011aa4:	895b      	ldrh	r3, [r3, #10]
 8011aa6:	461a      	mov	r2, r3
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	4293      	cmp	r3, r2
 8011aac:	d906      	bls.n	8011abc <pbuf_copy+0xcc>
 8011aae:	4b32      	ldr	r3, [pc, #200]	; (8011b78 <pbuf_copy+0x188>)
 8011ab0:	f240 32da 	movw	r2, #986	; 0x3da
 8011ab4:	4934      	ldr	r1, [pc, #208]	; (8011b88 <pbuf_copy+0x198>)
 8011ab6:	4832      	ldr	r0, [pc, #200]	; (8011b80 <pbuf_copy+0x190>)
 8011ab8:	f007 fa48 	bl	8018f4c <iprintf>
    if (offset_from >= p_from->len) {
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	895b      	ldrh	r3, [r3, #10]
 8011ac0:	461a      	mov	r2, r3
 8011ac2:	693b      	ldr	r3, [r7, #16]
 8011ac4:	4293      	cmp	r3, r2
 8011ac6:	d304      	bcc.n	8011ad2 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011ac8:	2300      	movs	r3, #0
 8011aca:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	895b      	ldrh	r3, [r3, #10]
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	697b      	ldr	r3, [r7, #20]
 8011ada:	4293      	cmp	r3, r2
 8011adc:	d114      	bne.n	8011b08 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d10c      	bne.n	8011b08 <pbuf_copy+0x118>
 8011aee:	683b      	ldr	r3, [r7, #0]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d009      	beq.n	8011b08 <pbuf_copy+0x118>
 8011af4:	4b20      	ldr	r3, [pc, #128]	; (8011b78 <pbuf_copy+0x188>)
 8011af6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011afa:	4924      	ldr	r1, [pc, #144]	; (8011b8c <pbuf_copy+0x19c>)
 8011afc:	4820      	ldr	r0, [pc, #128]	; (8011b80 <pbuf_copy+0x190>)
 8011afe:	f007 fa25 	bl	8018f4c <iprintf>
 8011b02:	f06f 030f 	mvn.w	r3, #15
 8011b06:	e032      	b.n	8011b6e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011b08:	683b      	ldr	r3, [r7, #0]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d013      	beq.n	8011b36 <pbuf_copy+0x146>
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	895a      	ldrh	r2, [r3, #10]
 8011b12:	683b      	ldr	r3, [r7, #0]
 8011b14:	891b      	ldrh	r3, [r3, #8]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d10d      	bne.n	8011b36 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	681b      	ldr	r3, [r3, #0]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d009      	beq.n	8011b36 <pbuf_copy+0x146>
 8011b22:	4b15      	ldr	r3, [pc, #84]	; (8011b78 <pbuf_copy+0x188>)
 8011b24:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011b28:	4919      	ldr	r1, [pc, #100]	; (8011b90 <pbuf_copy+0x1a0>)
 8011b2a:	4815      	ldr	r0, [pc, #84]	; (8011b80 <pbuf_copy+0x190>)
 8011b2c:	f007 fa0e 	bl	8018f4c <iprintf>
 8011b30:	f06f 0305 	mvn.w	r3, #5
 8011b34:	e01b      	b.n	8011b6e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d013      	beq.n	8011b64 <pbuf_copy+0x174>
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	895a      	ldrh	r2, [r3, #10]
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	891b      	ldrh	r3, [r3, #8]
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d10d      	bne.n	8011b64 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d009      	beq.n	8011b64 <pbuf_copy+0x174>
 8011b50:	4b09      	ldr	r3, [pc, #36]	; (8011b78 <pbuf_copy+0x188>)
 8011b52:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011b56:	490e      	ldr	r1, [pc, #56]	; (8011b90 <pbuf_copy+0x1a0>)
 8011b58:	4809      	ldr	r0, [pc, #36]	; (8011b80 <pbuf_copy+0x190>)
 8011b5a:	f007 f9f7 	bl	8018f4c <iprintf>
 8011b5e:	f06f 0305 	mvn.w	r3, #5
 8011b62:	e004      	b.n	8011b6e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011b64:	683b      	ldr	r3, [r7, #0]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	f47f af61 	bne.w	8011a2e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011b6c:	2300      	movs	r3, #0
}
 8011b6e:	4618      	mov	r0, r3
 8011b70:	3718      	adds	r7, #24
 8011b72:	46bd      	mov	sp, r7
 8011b74:	bd80      	pop	{r7, pc}
 8011b76:	bf00      	nop
 8011b78:	0801cedc 	.word	0x0801cedc
 8011b7c:	0801d1c8 	.word	0x0801d1c8
 8011b80:	0801cf80 	.word	0x0801cf80
 8011b84:	0801d1f8 	.word	0x0801d1f8
 8011b88:	0801d210 	.word	0x0801d210
 8011b8c:	0801d22c 	.word	0x0801d22c
 8011b90:	0801d23c 	.word	0x0801d23c

08011b94 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	b088      	sub	sp, #32
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	60f8      	str	r0, [r7, #12]
 8011b9c:	60b9      	str	r1, [r7, #8]
 8011b9e:	4611      	mov	r1, r2
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	460b      	mov	r3, r1
 8011ba4:	80fb      	strh	r3, [r7, #6]
 8011ba6:	4613      	mov	r3, r2
 8011ba8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011baa:	2300      	movs	r3, #0
 8011bac:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d108      	bne.n	8011bca <pbuf_copy_partial+0x36>
 8011bb8:	4b2b      	ldr	r3, [pc, #172]	; (8011c68 <pbuf_copy_partial+0xd4>)
 8011bba:	f240 420a 	movw	r2, #1034	; 0x40a
 8011bbe:	492b      	ldr	r1, [pc, #172]	; (8011c6c <pbuf_copy_partial+0xd8>)
 8011bc0:	482b      	ldr	r0, [pc, #172]	; (8011c70 <pbuf_copy_partial+0xdc>)
 8011bc2:	f007 f9c3 	bl	8018f4c <iprintf>
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	e04a      	b.n	8011c60 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d108      	bne.n	8011be2 <pbuf_copy_partial+0x4e>
 8011bd0:	4b25      	ldr	r3, [pc, #148]	; (8011c68 <pbuf_copy_partial+0xd4>)
 8011bd2:	f240 420b 	movw	r2, #1035	; 0x40b
 8011bd6:	4927      	ldr	r1, [pc, #156]	; (8011c74 <pbuf_copy_partial+0xe0>)
 8011bd8:	4825      	ldr	r0, [pc, #148]	; (8011c70 <pbuf_copy_partial+0xdc>)
 8011bda:	f007 f9b7 	bl	8018f4c <iprintf>
 8011bde:	2300      	movs	r3, #0
 8011be0:	e03e      	b.n	8011c60 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	61fb      	str	r3, [r7, #28]
 8011be6:	e034      	b.n	8011c52 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011be8:	88bb      	ldrh	r3, [r7, #4]
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d00a      	beq.n	8011c04 <pbuf_copy_partial+0x70>
 8011bee:	69fb      	ldr	r3, [r7, #28]
 8011bf0:	895b      	ldrh	r3, [r3, #10]
 8011bf2:	88ba      	ldrh	r2, [r7, #4]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d305      	bcc.n	8011c04 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	895b      	ldrh	r3, [r3, #10]
 8011bfc:	88ba      	ldrh	r2, [r7, #4]
 8011bfe:	1ad3      	subs	r3, r2, r3
 8011c00:	80bb      	strh	r3, [r7, #4]
 8011c02:	e023      	b.n	8011c4c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011c04:	69fb      	ldr	r3, [r7, #28]
 8011c06:	895a      	ldrh	r2, [r3, #10]
 8011c08:	88bb      	ldrh	r3, [r7, #4]
 8011c0a:	1ad3      	subs	r3, r2, r3
 8011c0c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011c0e:	8b3a      	ldrh	r2, [r7, #24]
 8011c10:	88fb      	ldrh	r3, [r7, #6]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d901      	bls.n	8011c1a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011c16:	88fb      	ldrh	r3, [r7, #6]
 8011c18:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011c1a:	8b7b      	ldrh	r3, [r7, #26]
 8011c1c:	68ba      	ldr	r2, [r7, #8]
 8011c1e:	18d0      	adds	r0, r2, r3
 8011c20:	69fb      	ldr	r3, [r7, #28]
 8011c22:	685a      	ldr	r2, [r3, #4]
 8011c24:	88bb      	ldrh	r3, [r7, #4]
 8011c26:	4413      	add	r3, r2
 8011c28:	8b3a      	ldrh	r2, [r7, #24]
 8011c2a:	4619      	mov	r1, r3
 8011c2c:	f007 f95e 	bl	8018eec <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011c30:	8afa      	ldrh	r2, [r7, #22]
 8011c32:	8b3b      	ldrh	r3, [r7, #24]
 8011c34:	4413      	add	r3, r2
 8011c36:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011c38:	8b7a      	ldrh	r2, [r7, #26]
 8011c3a:	8b3b      	ldrh	r3, [r7, #24]
 8011c3c:	4413      	add	r3, r2
 8011c3e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011c40:	88fa      	ldrh	r2, [r7, #6]
 8011c42:	8b3b      	ldrh	r3, [r7, #24]
 8011c44:	1ad3      	subs	r3, r2, r3
 8011c46:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011c48:	2300      	movs	r3, #0
 8011c4a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011c4c:	69fb      	ldr	r3, [r7, #28]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	61fb      	str	r3, [r7, #28]
 8011c52:	88fb      	ldrh	r3, [r7, #6]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d002      	beq.n	8011c5e <pbuf_copy_partial+0xca>
 8011c58:	69fb      	ldr	r3, [r7, #28]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d1c4      	bne.n	8011be8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011c5e:	8afb      	ldrh	r3, [r7, #22]
}
 8011c60:	4618      	mov	r0, r3
 8011c62:	3720      	adds	r7, #32
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	0801cedc 	.word	0x0801cedc
 8011c6c:	0801d268 	.word	0x0801d268
 8011c70:	0801cf80 	.word	0x0801cf80
 8011c74:	0801d288 	.word	0x0801d288

08011c78 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b087      	sub	sp, #28
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	60f8      	str	r0, [r7, #12]
 8011c80:	460b      	mov	r3, r1
 8011c82:	607a      	str	r2, [r7, #4]
 8011c84:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8011c86:	897b      	ldrh	r3, [r7, #10]
 8011c88:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8011c8e:	e007      	b.n	8011ca0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8011c90:	693b      	ldr	r3, [r7, #16]
 8011c92:	895b      	ldrh	r3, [r3, #10]
 8011c94:	8afa      	ldrh	r2, [r7, #22]
 8011c96:	1ad3      	subs	r3, r2, r3
 8011c98:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8011c9a:	693b      	ldr	r3, [r7, #16]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	2b00      	cmp	r3, #0
 8011ca4:	d004      	beq.n	8011cb0 <pbuf_skip_const+0x38>
 8011ca6:	693b      	ldr	r3, [r7, #16]
 8011ca8:	895b      	ldrh	r3, [r3, #10]
 8011caa:	8afa      	ldrh	r2, [r7, #22]
 8011cac:	429a      	cmp	r2, r3
 8011cae:	d2ef      	bcs.n	8011c90 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d002      	beq.n	8011cbc <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	8afa      	ldrh	r2, [r7, #22]
 8011cba:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8011cbc:	693b      	ldr	r3, [r7, #16]
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	371c      	adds	r7, #28
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc8:	4770      	bx	lr

08011cca <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8011cca:	b580      	push	{r7, lr}
 8011ccc:	b086      	sub	sp, #24
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	60f8      	str	r0, [r7, #12]
 8011cd2:	460b      	mov	r3, r1
 8011cd4:	607a      	str	r2, [r7, #4]
 8011cd6:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8011cd8:	897b      	ldrh	r3, [r7, #10]
 8011cda:	687a      	ldr	r2, [r7, #4]
 8011cdc:	4619      	mov	r1, r3
 8011cde:	68f8      	ldr	r0, [r7, #12]
 8011ce0:	f7ff ffca 	bl	8011c78 <pbuf_skip_const>
 8011ce4:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8011ce6:	697b      	ldr	r3, [r7, #20]
}
 8011ce8:	4618      	mov	r0, r3
 8011cea:	3718      	adds	r7, #24
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}

08011cf0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b088      	sub	sp, #32
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	60f8      	str	r0, [r7, #12]
 8011cf8:	60b9      	str	r1, [r7, #8]
 8011cfa:	4613      	mov	r3, r2
 8011cfc:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8011cfe:	88fb      	ldrh	r3, [r7, #6]
 8011d00:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8011d02:	2300      	movs	r3, #0
 8011d04:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d109      	bne.n	8011d20 <pbuf_take+0x30>
 8011d0c:	4b3a      	ldr	r3, [pc, #232]	; (8011df8 <pbuf_take+0x108>)
 8011d0e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8011d12:	493a      	ldr	r1, [pc, #232]	; (8011dfc <pbuf_take+0x10c>)
 8011d14:	483a      	ldr	r0, [pc, #232]	; (8011e00 <pbuf_take+0x110>)
 8011d16:	f007 f919 	bl	8018f4c <iprintf>
 8011d1a:	f06f 030f 	mvn.w	r3, #15
 8011d1e:	e067      	b.n	8011df0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d109      	bne.n	8011d3a <pbuf_take+0x4a>
 8011d26:	4b34      	ldr	r3, [pc, #208]	; (8011df8 <pbuf_take+0x108>)
 8011d28:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8011d2c:	4935      	ldr	r1, [pc, #212]	; (8011e04 <pbuf_take+0x114>)
 8011d2e:	4834      	ldr	r0, [pc, #208]	; (8011e00 <pbuf_take+0x110>)
 8011d30:	f007 f90c 	bl	8018f4c <iprintf>
 8011d34:	f06f 030f 	mvn.w	r3, #15
 8011d38:	e05a      	b.n	8011df0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	891b      	ldrh	r3, [r3, #8]
 8011d3e:	88fa      	ldrh	r2, [r7, #6]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d909      	bls.n	8011d58 <pbuf_take+0x68>
 8011d44:	4b2c      	ldr	r3, [pc, #176]	; (8011df8 <pbuf_take+0x108>)
 8011d46:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8011d4a:	492f      	ldr	r1, [pc, #188]	; (8011e08 <pbuf_take+0x118>)
 8011d4c:	482c      	ldr	r0, [pc, #176]	; (8011e00 <pbuf_take+0x110>)
 8011d4e:	f007 f8fd 	bl	8018f4c <iprintf>
 8011d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d56:	e04b      	b.n	8011df0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d007      	beq.n	8011d6e <pbuf_take+0x7e>
 8011d5e:	68bb      	ldr	r3, [r7, #8]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d004      	beq.n	8011d6e <pbuf_take+0x7e>
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	891b      	ldrh	r3, [r3, #8]
 8011d68:	88fa      	ldrh	r2, [r7, #6]
 8011d6a:	429a      	cmp	r2, r3
 8011d6c:	d902      	bls.n	8011d74 <pbuf_take+0x84>
    return ERR_ARG;
 8011d6e:	f06f 030f 	mvn.w	r3, #15
 8011d72:	e03d      	b.n	8011df0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	61fb      	str	r3, [r7, #28]
 8011d78:	e028      	b.n	8011dcc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8011d7a:	69fb      	ldr	r3, [r7, #28]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d106      	bne.n	8011d8e <pbuf_take+0x9e>
 8011d80:	4b1d      	ldr	r3, [pc, #116]	; (8011df8 <pbuf_take+0x108>)
 8011d82:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8011d86:	4921      	ldr	r1, [pc, #132]	; (8011e0c <pbuf_take+0x11c>)
 8011d88:	481d      	ldr	r0, [pc, #116]	; (8011e00 <pbuf_take+0x110>)
 8011d8a:	f007 f8df 	bl	8018f4c <iprintf>
    buf_copy_len = total_copy_len;
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8011d92:	69fb      	ldr	r3, [r7, #28]
 8011d94:	895b      	ldrh	r3, [r3, #10]
 8011d96:	461a      	mov	r2, r3
 8011d98:	69bb      	ldr	r3, [r7, #24]
 8011d9a:	4293      	cmp	r3, r2
 8011d9c:	d902      	bls.n	8011da4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8011d9e:	69fb      	ldr	r3, [r7, #28]
 8011da0:	895b      	ldrh	r3, [r3, #10]
 8011da2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8011da4:	69fb      	ldr	r3, [r7, #28]
 8011da6:	6858      	ldr	r0, [r3, #4]
 8011da8:	68ba      	ldr	r2, [r7, #8]
 8011daa:	693b      	ldr	r3, [r7, #16]
 8011dac:	4413      	add	r3, r2
 8011dae:	69ba      	ldr	r2, [r7, #24]
 8011db0:	4619      	mov	r1, r3
 8011db2:	f007 f89b 	bl	8018eec <memcpy>
    total_copy_len -= buf_copy_len;
 8011db6:	697a      	ldr	r2, [r7, #20]
 8011db8:	69bb      	ldr	r3, [r7, #24]
 8011dba:	1ad3      	subs	r3, r2, r3
 8011dbc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8011dbe:	693a      	ldr	r2, [r7, #16]
 8011dc0:	69bb      	ldr	r3, [r7, #24]
 8011dc2:	4413      	add	r3, r2
 8011dc4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011dc6:	69fb      	ldr	r3, [r7, #28]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	61fb      	str	r3, [r7, #28]
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d1d3      	bne.n	8011d7a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d103      	bne.n	8011de0 <pbuf_take+0xf0>
 8011dd8:	88fb      	ldrh	r3, [r7, #6]
 8011dda:	693a      	ldr	r2, [r7, #16]
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d006      	beq.n	8011dee <pbuf_take+0xfe>
 8011de0:	4b05      	ldr	r3, [pc, #20]	; (8011df8 <pbuf_take+0x108>)
 8011de2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8011de6:	490a      	ldr	r1, [pc, #40]	; (8011e10 <pbuf_take+0x120>)
 8011de8:	4805      	ldr	r0, [pc, #20]	; (8011e00 <pbuf_take+0x110>)
 8011dea:	f007 f8af 	bl	8018f4c <iprintf>
  return ERR_OK;
 8011dee:	2300      	movs	r3, #0
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	3720      	adds	r7, #32
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}
 8011df8:	0801cedc 	.word	0x0801cedc
 8011dfc:	0801d2f8 	.word	0x0801d2f8
 8011e00:	0801cf80 	.word	0x0801cf80
 8011e04:	0801d310 	.word	0x0801d310
 8011e08:	0801d32c 	.word	0x0801d32c
 8011e0c:	0801d34c 	.word	0x0801d34c
 8011e10:	0801d364 	.word	0x0801d364

08011e14 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b088      	sub	sp, #32
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	4611      	mov	r1, r2
 8011e20:	461a      	mov	r2, r3
 8011e22:	460b      	mov	r3, r1
 8011e24:	80fb      	strh	r3, [r7, #6]
 8011e26:	4613      	mov	r3, r2
 8011e28:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8011e2a:	f107 0210 	add.w	r2, r7, #16
 8011e2e:	88bb      	ldrh	r3, [r7, #4]
 8011e30:	4619      	mov	r1, r3
 8011e32:	68f8      	ldr	r0, [r7, #12]
 8011e34:	f7ff ff49 	bl	8011cca <pbuf_skip>
 8011e38:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8011e3a:	69fb      	ldr	r3, [r7, #28]
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d047      	beq.n	8011ed0 <pbuf_take_at+0xbc>
 8011e40:	69fb      	ldr	r3, [r7, #28]
 8011e42:	891b      	ldrh	r3, [r3, #8]
 8011e44:	461a      	mov	r2, r3
 8011e46:	8a3b      	ldrh	r3, [r7, #16]
 8011e48:	4619      	mov	r1, r3
 8011e4a:	88fb      	ldrh	r3, [r7, #6]
 8011e4c:	440b      	add	r3, r1
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	db3e      	blt.n	8011ed0 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8011e52:	88fb      	ldrh	r3, [r7, #6]
 8011e54:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8011e56:	68bb      	ldr	r3, [r7, #8]
 8011e58:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8011e5a:	69fb      	ldr	r3, [r7, #28]
 8011e5c:	895a      	ldrh	r2, [r3, #10]
 8011e5e:	8a3b      	ldrh	r3, [r7, #16]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d806      	bhi.n	8011e72 <pbuf_take_at+0x5e>
 8011e64:	4b1d      	ldr	r3, [pc, #116]	; (8011edc <pbuf_take_at+0xc8>)
 8011e66:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011e6a:	491d      	ldr	r1, [pc, #116]	; (8011ee0 <pbuf_take_at+0xcc>)
 8011e6c:	481d      	ldr	r0, [pc, #116]	; (8011ee4 <pbuf_take_at+0xd0>)
 8011e6e:	f007 f86d 	bl	8018f4c <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	895b      	ldrh	r3, [r3, #10]
 8011e76:	461a      	mov	r2, r3
 8011e78:	8a3b      	ldrh	r3, [r7, #16]
 8011e7a:	1ad2      	subs	r2, r2, r3
 8011e7c:	88fb      	ldrh	r3, [r7, #6]
 8011e7e:	429a      	cmp	r2, r3
 8011e80:	da05      	bge.n	8011e8e <pbuf_take_at+0x7a>
 8011e82:	69fb      	ldr	r3, [r7, #28]
 8011e84:	895a      	ldrh	r2, [r3, #10]
 8011e86:	8a3b      	ldrh	r3, [r7, #16]
 8011e88:	1ad3      	subs	r3, r2, r3
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	e000      	b.n	8011e90 <pbuf_take_at+0x7c>
 8011e8e:	88fb      	ldrh	r3, [r7, #6]
 8011e90:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8011e92:	69fb      	ldr	r3, [r7, #28]
 8011e94:	685b      	ldr	r3, [r3, #4]
 8011e96:	8a3a      	ldrh	r2, [r7, #16]
 8011e98:	4413      	add	r3, r2
 8011e9a:	8a7a      	ldrh	r2, [r7, #18]
 8011e9c:	68b9      	ldr	r1, [r7, #8]
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	f007 f824 	bl	8018eec <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8011ea4:	8b7a      	ldrh	r2, [r7, #26]
 8011ea6:	8a7b      	ldrh	r3, [r7, #18]
 8011ea8:	1ad3      	subs	r3, r2, r3
 8011eaa:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8011eac:	8a7b      	ldrh	r3, [r7, #18]
 8011eae:	697a      	ldr	r2, [r7, #20]
 8011eb0:	4413      	add	r3, r2
 8011eb2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8011eb4:	8b7b      	ldrh	r3, [r7, #26]
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d008      	beq.n	8011ecc <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8011eba:	69fb      	ldr	r3, [r7, #28]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	8b7a      	ldrh	r2, [r7, #26]
 8011ec0:	6979      	ldr	r1, [r7, #20]
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	f7ff ff14 	bl	8011cf0 <pbuf_take>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	e003      	b.n	8011ed4 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8011ecc:	2300      	movs	r3, #0
 8011ece:	e001      	b.n	8011ed4 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8011ed0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3720      	adds	r7, #32
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	0801cedc 	.word	0x0801cedc
 8011ee0:	0801d37c 	.word	0x0801d37c
 8011ee4:	0801cf80 	.word	0x0801cf80

08011ee8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b084      	sub	sp, #16
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	4603      	mov	r3, r0
 8011ef0:	603a      	str	r2, [r7, #0]
 8011ef2:	71fb      	strb	r3, [r7, #7]
 8011ef4:	460b      	mov	r3, r1
 8011ef6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	8919      	ldrh	r1, [r3, #8]
 8011efc:	88ba      	ldrh	r2, [r7, #4]
 8011efe:	79fb      	ldrb	r3, [r7, #7]
 8011f00:	4618      	mov	r0, r3
 8011f02:	f7ff f92d 	bl	8011160 <pbuf_alloc>
 8011f06:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011f08:	68fb      	ldr	r3, [r7, #12]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d101      	bne.n	8011f12 <pbuf_clone+0x2a>
    return NULL;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	e011      	b.n	8011f36 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011f12:	6839      	ldr	r1, [r7, #0]
 8011f14:	68f8      	ldr	r0, [r7, #12]
 8011f16:	f7ff fd6b 	bl	80119f0 <pbuf_copy>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011f1e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d006      	beq.n	8011f34 <pbuf_clone+0x4c>
 8011f26:	4b06      	ldr	r3, [pc, #24]	; (8011f40 <pbuf_clone+0x58>)
 8011f28:	f240 5224 	movw	r2, #1316	; 0x524
 8011f2c:	4905      	ldr	r1, [pc, #20]	; (8011f44 <pbuf_clone+0x5c>)
 8011f2e:	4806      	ldr	r0, [pc, #24]	; (8011f48 <pbuf_clone+0x60>)
 8011f30:	f007 f80c 	bl	8018f4c <iprintf>
  return q;
 8011f34:	68fb      	ldr	r3, [r7, #12]
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3710      	adds	r7, #16
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	0801cedc 	.word	0x0801cedc
 8011f44:	0801d394 	.word	0x0801d394
 8011f48:	0801cf80 	.word	0x0801cf80

08011f4c <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b084      	sub	sp, #16
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	460b      	mov	r3, r1
 8011f56:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 8011f58:	f107 020a 	add.w	r2, r7, #10
 8011f5c:	887b      	ldrh	r3, [r7, #2]
 8011f5e:	4619      	mov	r1, r3
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f7ff fe89 	bl	8011c78 <pbuf_skip_const>
 8011f66:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8011f68:	68fb      	ldr	r3, [r7, #12]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d00a      	beq.n	8011f84 <pbuf_try_get_at+0x38>
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	895a      	ldrh	r2, [r3, #10]
 8011f72:	897b      	ldrh	r3, [r7, #10]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d905      	bls.n	8011f84 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	685b      	ldr	r3, [r3, #4]
 8011f7c:	897a      	ldrh	r2, [r7, #10]
 8011f7e:	4413      	add	r3, r2
 8011f80:	781b      	ldrb	r3, [r3, #0]
 8011f82:	e001      	b.n	8011f88 <pbuf_try_get_at+0x3c>
  }
  return -1;
 8011f84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011f88:	4618      	mov	r0, r3
 8011f8a:	3710      	adds	r7, #16
 8011f8c:	46bd      	mov	sp, r7
 8011f8e:	bd80      	pop	{r7, pc}

08011f90 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8011f90:	b580      	push	{r7, lr}
 8011f92:	b084      	sub	sp, #16
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
 8011f98:	460b      	mov	r3, r1
 8011f9a:	807b      	strh	r3, [r7, #2]
 8011f9c:	4613      	mov	r3, r2
 8011f9e:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8011fa0:	f107 020a 	add.w	r2, r7, #10
 8011fa4:	887b      	ldrh	r3, [r7, #2]
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f7ff fe8e 	bl	8011cca <pbuf_skip>
 8011fae:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d00a      	beq.n	8011fcc <pbuf_put_at+0x3c>
 8011fb6:	68fb      	ldr	r3, [r7, #12]
 8011fb8:	895a      	ldrh	r2, [r3, #10]
 8011fba:	897b      	ldrh	r3, [r7, #10]
 8011fbc:	429a      	cmp	r2, r3
 8011fbe:	d905      	bls.n	8011fcc <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	685b      	ldr	r3, [r3, #4]
 8011fc4:	897a      	ldrh	r2, [r7, #10]
 8011fc6:	4413      	add	r3, r2
 8011fc8:	787a      	ldrb	r2, [r7, #1]
 8011fca:	701a      	strb	r2, [r3, #0]
  }
}
 8011fcc:	bf00      	nop
 8011fce:	3710      	adds	r7, #16
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}

08011fd4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011fd8:	f006 ffd0 	bl	8018f7c <rand>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	b29b      	uxth	r3, r3
 8011fe0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011fea:	b29a      	uxth	r2, r3
 8011fec:	4b01      	ldr	r3, [pc, #4]	; (8011ff4 <tcp_init+0x20>)
 8011fee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011ff0:	bf00      	nop
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	24000044 	.word	0x24000044

08011ff8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b082      	sub	sp, #8
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	7d1b      	ldrb	r3, [r3, #20]
 8012004:	2b01      	cmp	r3, #1
 8012006:	d105      	bne.n	8012014 <tcp_free+0x1c>
 8012008:	4b06      	ldr	r3, [pc, #24]	; (8012024 <tcp_free+0x2c>)
 801200a:	22d4      	movs	r2, #212	; 0xd4
 801200c:	4906      	ldr	r1, [pc, #24]	; (8012028 <tcp_free+0x30>)
 801200e:	4807      	ldr	r0, [pc, #28]	; (801202c <tcp_free+0x34>)
 8012010:	f006 ff9c 	bl	8018f4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012014:	6879      	ldr	r1, [r7, #4]
 8012016:	2001      	movs	r0, #1
 8012018:	f7fe fd3c 	bl	8010a94 <memp_free>
}
 801201c:	bf00      	nop
 801201e:	3708      	adds	r7, #8
 8012020:	46bd      	mov	sp, r7
 8012022:	bd80      	pop	{r7, pc}
 8012024:	0801d474 	.word	0x0801d474
 8012028:	0801d4e8 	.word	0x0801d4e8
 801202c:	0801d4fc 	.word	0x0801d4fc

08012030 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b082      	sub	sp, #8
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	7d1b      	ldrb	r3, [r3, #20]
 801203c:	2b01      	cmp	r3, #1
 801203e:	d105      	bne.n	801204c <tcp_free_listen+0x1c>
 8012040:	4b06      	ldr	r3, [pc, #24]	; (801205c <tcp_free_listen+0x2c>)
 8012042:	22df      	movs	r2, #223	; 0xdf
 8012044:	4906      	ldr	r1, [pc, #24]	; (8012060 <tcp_free_listen+0x30>)
 8012046:	4807      	ldr	r0, [pc, #28]	; (8012064 <tcp_free_listen+0x34>)
 8012048:	f006 ff80 	bl	8018f4c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801204c:	6879      	ldr	r1, [r7, #4]
 801204e:	2002      	movs	r0, #2
 8012050:	f7fe fd20 	bl	8010a94 <memp_free>
}
 8012054:	bf00      	nop
 8012056:	3708      	adds	r7, #8
 8012058:	46bd      	mov	sp, r7
 801205a:	bd80      	pop	{r7, pc}
 801205c:	0801d474 	.word	0x0801d474
 8012060:	0801d524 	.word	0x0801d524
 8012064:	0801d4fc 	.word	0x0801d4fc

08012068 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012068:	b580      	push	{r7, lr}
 801206a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801206c:	f001 f9a0 	bl	80133b0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012070:	4b07      	ldr	r3, [pc, #28]	; (8012090 <tcp_tmr+0x28>)
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	3301      	adds	r3, #1
 8012076:	b2da      	uxtb	r2, r3
 8012078:	4b05      	ldr	r3, [pc, #20]	; (8012090 <tcp_tmr+0x28>)
 801207a:	701a      	strb	r2, [r3, #0]
 801207c:	4b04      	ldr	r3, [pc, #16]	; (8012090 <tcp_tmr+0x28>)
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	f003 0301 	and.w	r3, r3, #1
 8012084:	2b00      	cmp	r3, #0
 8012086:	d001      	beq.n	801208c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012088:	f000 fe68 	bl	8012d5c <tcp_slowtmr>
  }
}
 801208c:	bf00      	nop
 801208e:	bd80      	pop	{r7, pc}
 8012090:	24007199 	.word	0x24007199

08012094 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012094:	b580      	push	{r7, lr}
 8012096:	b084      	sub	sp, #16
 8012098:	af00      	add	r7, sp, #0
 801209a:	6078      	str	r0, [r7, #4]
 801209c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d105      	bne.n	80120b0 <tcp_remove_listener+0x1c>
 80120a4:	4b0d      	ldr	r3, [pc, #52]	; (80120dc <tcp_remove_listener+0x48>)
 80120a6:	22ff      	movs	r2, #255	; 0xff
 80120a8:	490d      	ldr	r1, [pc, #52]	; (80120e0 <tcp_remove_listener+0x4c>)
 80120aa:	480e      	ldr	r0, [pc, #56]	; (80120e4 <tcp_remove_listener+0x50>)
 80120ac:	f006 ff4e 	bl	8018f4c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	60fb      	str	r3, [r7, #12]
 80120b4:	e00a      	b.n	80120cc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120ba:	683a      	ldr	r2, [r7, #0]
 80120bc:	429a      	cmp	r2, r3
 80120be:	d102      	bne.n	80120c6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	2200      	movs	r2, #0
 80120c4:	679a      	str	r2, [r3, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80120c6:	68fb      	ldr	r3, [r7, #12]
 80120c8:	68db      	ldr	r3, [r3, #12]
 80120ca:	60fb      	str	r3, [r7, #12]
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d1f1      	bne.n	80120b6 <tcp_remove_listener+0x22>
    }
  }
}
 80120d2:	bf00      	nop
 80120d4:	bf00      	nop
 80120d6:	3710      	adds	r7, #16
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}
 80120dc:	0801d474 	.word	0x0801d474
 80120e0:	0801d540 	.word	0x0801d540
 80120e4:	0801d4fc 	.word	0x0801d4fc

080120e8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b084      	sub	sp, #16
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d106      	bne.n	8012104 <tcp_listen_closed+0x1c>
 80120f6:	4b14      	ldr	r3, [pc, #80]	; (8012148 <tcp_listen_closed+0x60>)
 80120f8:	f240 1211 	movw	r2, #273	; 0x111
 80120fc:	4913      	ldr	r1, [pc, #76]	; (801214c <tcp_listen_closed+0x64>)
 80120fe:	4814      	ldr	r0, [pc, #80]	; (8012150 <tcp_listen_closed+0x68>)
 8012100:	f006 ff24 	bl	8018f4c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	7d1b      	ldrb	r3, [r3, #20]
 8012108:	2b01      	cmp	r3, #1
 801210a:	d006      	beq.n	801211a <tcp_listen_closed+0x32>
 801210c:	4b0e      	ldr	r3, [pc, #56]	; (8012148 <tcp_listen_closed+0x60>)
 801210e:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012112:	4910      	ldr	r1, [pc, #64]	; (8012154 <tcp_listen_closed+0x6c>)
 8012114:	480e      	ldr	r0, [pc, #56]	; (8012150 <tcp_listen_closed+0x68>)
 8012116:	f006 ff19 	bl	8018f4c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801211a:	2301      	movs	r3, #1
 801211c:	60fb      	str	r3, [r7, #12]
 801211e:	e00b      	b.n	8012138 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012120:	4a0d      	ldr	r2, [pc, #52]	; (8012158 <tcp_listen_closed+0x70>)
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	6879      	ldr	r1, [r7, #4]
 801212c:	4618      	mov	r0, r3
 801212e:	f7ff ffb1 	bl	8012094 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	3301      	adds	r3, #1
 8012136:	60fb      	str	r3, [r7, #12]
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	2b03      	cmp	r3, #3
 801213c:	d9f0      	bls.n	8012120 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801213e:	bf00      	nop
 8012140:	bf00      	nop
 8012142:	3710      	adds	r7, #16
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	0801d474 	.word	0x0801d474
 801214c:	0801d568 	.word	0x0801d568
 8012150:	0801d4fc 	.word	0x0801d4fc
 8012154:	0801d574 	.word	0x0801d574
 8012158:	0801d464 	.word	0x0801d464

0801215c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801215c:	b5b0      	push	{r4, r5, r7, lr}
 801215e:	b088      	sub	sp, #32
 8012160:	af04      	add	r7, sp, #16
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	460b      	mov	r3, r1
 8012166:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d106      	bne.n	801217c <tcp_close_shutdown+0x20>
 801216e:	4b63      	ldr	r3, [pc, #396]	; (80122fc <tcp_close_shutdown+0x1a0>)
 8012170:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012174:	4962      	ldr	r1, [pc, #392]	; (8012300 <tcp_close_shutdown+0x1a4>)
 8012176:	4863      	ldr	r0, [pc, #396]	; (8012304 <tcp_close_shutdown+0x1a8>)
 8012178:	f006 fee8 	bl	8018f4c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801217c:	78fb      	ldrb	r3, [r7, #3]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d067      	beq.n	8012252 <tcp_close_shutdown+0xf6>
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	7d1b      	ldrb	r3, [r3, #20]
 8012186:	2b04      	cmp	r3, #4
 8012188:	d003      	beq.n	8012192 <tcp_close_shutdown+0x36>
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	7d1b      	ldrb	r3, [r3, #20]
 801218e:	2b07      	cmp	r3, #7
 8012190:	d15f      	bne.n	8012252 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012196:	2b00      	cmp	r3, #0
 8012198:	d105      	bne.n	80121a6 <tcp_close_shutdown+0x4a>
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801219e:	f640 3268 	movw	r2, #2920	; 0xb68
 80121a2:	4293      	cmp	r3, r2
 80121a4:	d055      	beq.n	8012252 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	8b5b      	ldrh	r3, [r3, #26]
 80121aa:	f003 0310 	and.w	r3, r3, #16
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d106      	bne.n	80121c0 <tcp_close_shutdown+0x64>
 80121b2:	4b52      	ldr	r3, [pc, #328]	; (80122fc <tcp_close_shutdown+0x1a0>)
 80121b4:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80121b8:	4953      	ldr	r1, [pc, #332]	; (8012308 <tcp_close_shutdown+0x1ac>)
 80121ba:	4852      	ldr	r0, [pc, #328]	; (8012304 <tcp_close_shutdown+0x1a8>)
 80121bc:	f006 fec6 	bl	8018f4c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80121c8:	687d      	ldr	r5, [r7, #4]
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	3304      	adds	r3, #4
 80121ce:	687a      	ldr	r2, [r7, #4]
 80121d0:	8ad2      	ldrh	r2, [r2, #22]
 80121d2:	6879      	ldr	r1, [r7, #4]
 80121d4:	8b09      	ldrh	r1, [r1, #24]
 80121d6:	9102      	str	r1, [sp, #8]
 80121d8:	9201      	str	r2, [sp, #4]
 80121da:	9300      	str	r3, [sp, #0]
 80121dc:	462b      	mov	r3, r5
 80121de:	4622      	mov	r2, r4
 80121e0:	4601      	mov	r1, r0
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f005 faa4 	bl	8017730 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f001 fc65 	bl	8013ab8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80121ee:	4b47      	ldr	r3, [pc, #284]	; (801230c <tcp_close_shutdown+0x1b0>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d105      	bne.n	8012204 <tcp_close_shutdown+0xa8>
 80121f8:	4b44      	ldr	r3, [pc, #272]	; (801230c <tcp_close_shutdown+0x1b0>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	68db      	ldr	r3, [r3, #12]
 80121fe:	4a43      	ldr	r2, [pc, #268]	; (801230c <tcp_close_shutdown+0x1b0>)
 8012200:	6013      	str	r3, [r2, #0]
 8012202:	e013      	b.n	801222c <tcp_close_shutdown+0xd0>
 8012204:	4b41      	ldr	r3, [pc, #260]	; (801230c <tcp_close_shutdown+0x1b0>)
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	60fb      	str	r3, [r7, #12]
 801220a:	e00c      	b.n	8012226 <tcp_close_shutdown+0xca>
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	68db      	ldr	r3, [r3, #12]
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	429a      	cmp	r2, r3
 8012214:	d104      	bne.n	8012220 <tcp_close_shutdown+0xc4>
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	68da      	ldr	r2, [r3, #12]
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	60da      	str	r2, [r3, #12]
 801221e:	e005      	b.n	801222c <tcp_close_shutdown+0xd0>
 8012220:	68fb      	ldr	r3, [r7, #12]
 8012222:	68db      	ldr	r3, [r3, #12]
 8012224:	60fb      	str	r3, [r7, #12]
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d1ef      	bne.n	801220c <tcp_close_shutdown+0xb0>
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2200      	movs	r2, #0
 8012230:	60da      	str	r2, [r3, #12]
 8012232:	4b37      	ldr	r3, [pc, #220]	; (8012310 <tcp_close_shutdown+0x1b4>)
 8012234:	2201      	movs	r2, #1
 8012236:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8012238:	4b36      	ldr	r3, [pc, #216]	; (8012314 <tcp_close_shutdown+0x1b8>)
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	687a      	ldr	r2, [r7, #4]
 801223e:	429a      	cmp	r2, r3
 8012240:	d102      	bne.n	8012248 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012242:	f003 fd19 	bl	8015c78 <tcp_trigger_input_pcb_close>
 8012246:	e002      	b.n	801224e <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8012248:	6878      	ldr	r0, [r7, #4]
 801224a:	f7ff fed5 	bl	8011ff8 <tcp_free>
      }
      return ERR_OK;
 801224e:	2300      	movs	r3, #0
 8012250:	e050      	b.n	80122f4 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	7d1b      	ldrb	r3, [r3, #20]
 8012256:	2b02      	cmp	r3, #2
 8012258:	d03b      	beq.n	80122d2 <tcp_close_shutdown+0x176>
 801225a:	2b02      	cmp	r3, #2
 801225c:	dc44      	bgt.n	80122e8 <tcp_close_shutdown+0x18c>
 801225e:	2b00      	cmp	r3, #0
 8012260:	d002      	beq.n	8012268 <tcp_close_shutdown+0x10c>
 8012262:	2b01      	cmp	r3, #1
 8012264:	d02a      	beq.n	80122bc <tcp_close_shutdown+0x160>
 8012266:	e03f      	b.n	80122e8 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	8adb      	ldrh	r3, [r3, #22]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d021      	beq.n	80122b4 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012270:	4b29      	ldr	r3, [pc, #164]	; (8012318 <tcp_close_shutdown+0x1bc>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	687a      	ldr	r2, [r7, #4]
 8012276:	429a      	cmp	r2, r3
 8012278:	d105      	bne.n	8012286 <tcp_close_shutdown+0x12a>
 801227a:	4b27      	ldr	r3, [pc, #156]	; (8012318 <tcp_close_shutdown+0x1bc>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	4a25      	ldr	r2, [pc, #148]	; (8012318 <tcp_close_shutdown+0x1bc>)
 8012282:	6013      	str	r3, [r2, #0]
 8012284:	e013      	b.n	80122ae <tcp_close_shutdown+0x152>
 8012286:	4b24      	ldr	r3, [pc, #144]	; (8012318 <tcp_close_shutdown+0x1bc>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	60bb      	str	r3, [r7, #8]
 801228c:	e00c      	b.n	80122a8 <tcp_close_shutdown+0x14c>
 801228e:	68bb      	ldr	r3, [r7, #8]
 8012290:	68db      	ldr	r3, [r3, #12]
 8012292:	687a      	ldr	r2, [r7, #4]
 8012294:	429a      	cmp	r2, r3
 8012296:	d104      	bne.n	80122a2 <tcp_close_shutdown+0x146>
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	68da      	ldr	r2, [r3, #12]
 801229c:	68bb      	ldr	r3, [r7, #8]
 801229e:	60da      	str	r2, [r3, #12]
 80122a0:	e005      	b.n	80122ae <tcp_close_shutdown+0x152>
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	68db      	ldr	r3, [r3, #12]
 80122a6:	60bb      	str	r3, [r7, #8]
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d1ef      	bne.n	801228e <tcp_close_shutdown+0x132>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	2200      	movs	r2, #0
 80122b2:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f7ff fe9f 	bl	8011ff8 <tcp_free>
      break;
 80122ba:	e01a      	b.n	80122f2 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 80122bc:	6878      	ldr	r0, [r7, #4]
 80122be:	f7ff ff13 	bl	80120e8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80122c2:	6879      	ldr	r1, [r7, #4]
 80122c4:	4815      	ldr	r0, [pc, #84]	; (801231c <tcp_close_shutdown+0x1c0>)
 80122c6:	f001 fc41 	bl	8013b4c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f7ff feb0 	bl	8012030 <tcp_free_listen>
      break;
 80122d0:	e00f      	b.n	80122f2 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80122d2:	6879      	ldr	r1, [r7, #4]
 80122d4:	480d      	ldr	r0, [pc, #52]	; (801230c <tcp_close_shutdown+0x1b0>)
 80122d6:	f001 fc39 	bl	8013b4c <tcp_pcb_remove>
 80122da:	4b0d      	ldr	r3, [pc, #52]	; (8012310 <tcp_close_shutdown+0x1b4>)
 80122dc:	2201      	movs	r2, #1
 80122de:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7ff fe89 	bl	8011ff8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80122e6:	e004      	b.n	80122f2 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f000 f819 	bl	8012320 <tcp_close_shutdown_fin>
 80122ee:	4603      	mov	r3, r0
 80122f0:	e000      	b.n	80122f4 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 80122f2:	2300      	movs	r3, #0
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3710      	adds	r7, #16
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bdb0      	pop	{r4, r5, r7, pc}
 80122fc:	0801d474 	.word	0x0801d474
 8012300:	0801d58c 	.word	0x0801d58c
 8012304:	0801d4fc 	.word	0x0801d4fc
 8012308:	0801d5ac 	.word	0x0801d5ac
 801230c:	2400b2a4 	.word	0x2400b2a4
 8012310:	2400b2a0 	.word	0x2400b2a0
 8012314:	2400b2b8 	.word	0x2400b2b8
 8012318:	2400b2b0 	.word	0x2400b2b0
 801231c:	2400b2ac 	.word	0x2400b2ac

08012320 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b084      	sub	sp, #16
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d106      	bne.n	801233c <tcp_close_shutdown_fin+0x1c>
 801232e:	4b2e      	ldr	r3, [pc, #184]	; (80123e8 <tcp_close_shutdown_fin+0xc8>)
 8012330:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012334:	492d      	ldr	r1, [pc, #180]	; (80123ec <tcp_close_shutdown_fin+0xcc>)
 8012336:	482e      	ldr	r0, [pc, #184]	; (80123f0 <tcp_close_shutdown_fin+0xd0>)
 8012338:	f006 fe08 	bl	8018f4c <iprintf>

  switch (pcb->state) {
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	7d1b      	ldrb	r3, [r3, #20]
 8012340:	2b07      	cmp	r3, #7
 8012342:	d020      	beq.n	8012386 <tcp_close_shutdown_fin+0x66>
 8012344:	2b07      	cmp	r3, #7
 8012346:	dc2b      	bgt.n	80123a0 <tcp_close_shutdown_fin+0x80>
 8012348:	2b03      	cmp	r3, #3
 801234a:	d002      	beq.n	8012352 <tcp_close_shutdown_fin+0x32>
 801234c:	2b04      	cmp	r3, #4
 801234e:	d00d      	beq.n	801236c <tcp_close_shutdown_fin+0x4c>
 8012350:	e026      	b.n	80123a0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012352:	6878      	ldr	r0, [r7, #4]
 8012354:	f004 fafa 	bl	801694c <tcp_send_fin>
 8012358:	4603      	mov	r3, r0
 801235a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801235c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012360:	2b00      	cmp	r3, #0
 8012362:	d11f      	bne.n	80123a4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2205      	movs	r2, #5
 8012368:	751a      	strb	r2, [r3, #20]
      }
      break;
 801236a:	e01b      	b.n	80123a4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801236c:	6878      	ldr	r0, [r7, #4]
 801236e:	f004 faed 	bl	801694c <tcp_send_fin>
 8012372:	4603      	mov	r3, r0
 8012374:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d114      	bne.n	80123a8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2205      	movs	r2, #5
 8012382:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012384:	e010      	b.n	80123a8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f004 fae0 	bl	801694c <tcp_send_fin>
 801238c:	4603      	mov	r3, r0
 801238e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d109      	bne.n	80123ac <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	2209      	movs	r2, #9
 801239c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801239e:	e005      	b.n	80123ac <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80123a0:	2300      	movs	r3, #0
 80123a2:	e01c      	b.n	80123de <tcp_close_shutdown_fin+0xbe>
      break;
 80123a4:	bf00      	nop
 80123a6:	e002      	b.n	80123ae <tcp_close_shutdown_fin+0x8e>
      break;
 80123a8:	bf00      	nop
 80123aa:	e000      	b.n	80123ae <tcp_close_shutdown_fin+0x8e>
      break;
 80123ac:	bf00      	nop
  }

  if (err == ERR_OK) {
 80123ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d103      	bne.n	80123be <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80123b6:	6878      	ldr	r0, [r7, #4]
 80123b8:	f004 fc06 	bl	8016bc8 <tcp_output>
 80123bc:	e00d      	b.n	80123da <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80123be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80123c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123c6:	d108      	bne.n	80123da <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	8b5b      	ldrh	r3, [r3, #26]
 80123cc:	f043 0308 	orr.w	r3, r3, #8
 80123d0:	b29a      	uxth	r2, r3
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80123d6:	2300      	movs	r3, #0
 80123d8:	e001      	b.n	80123de <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80123da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80123de:	4618      	mov	r0, r3
 80123e0:	3710      	adds	r7, #16
 80123e2:	46bd      	mov	sp, r7
 80123e4:	bd80      	pop	{r7, pc}
 80123e6:	bf00      	nop
 80123e8:	0801d474 	.word	0x0801d474
 80123ec:	0801d568 	.word	0x0801d568
 80123f0:	0801d4fc 	.word	0x0801d4fc

080123f4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d109      	bne.n	8012416 <tcp_close+0x22>
 8012402:	4b0f      	ldr	r3, [pc, #60]	; (8012440 <tcp_close+0x4c>)
 8012404:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012408:	490e      	ldr	r1, [pc, #56]	; (8012444 <tcp_close+0x50>)
 801240a:	480f      	ldr	r0, [pc, #60]	; (8012448 <tcp_close+0x54>)
 801240c:	f006 fd9e 	bl	8018f4c <iprintf>
 8012410:	f06f 030f 	mvn.w	r3, #15
 8012414:	e00f      	b.n	8012436 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	7d1b      	ldrb	r3, [r3, #20]
 801241a:	2b01      	cmp	r3, #1
 801241c:	d006      	beq.n	801242c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	8b5b      	ldrh	r3, [r3, #26]
 8012422:	f043 0310 	orr.w	r3, r3, #16
 8012426:	b29a      	uxth	r2, r3
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801242c:	2101      	movs	r1, #1
 801242e:	6878      	ldr	r0, [r7, #4]
 8012430:	f7ff fe94 	bl	801215c <tcp_close_shutdown>
 8012434:	4603      	mov	r3, r0
}
 8012436:	4618      	mov	r0, r3
 8012438:	3708      	adds	r7, #8
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}
 801243e:	bf00      	nop
 8012440:	0801d474 	.word	0x0801d474
 8012444:	0801d5c8 	.word	0x0801d5c8
 8012448:	0801d4fc 	.word	0x0801d4fc

0801244c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b084      	sub	sp, #16
 8012450:	af00      	add	r7, sp, #0
 8012452:	60f8      	str	r0, [r7, #12]
 8012454:	60b9      	str	r1, [r7, #8]
 8012456:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	2b00      	cmp	r3, #0
 801245c:	d109      	bne.n	8012472 <tcp_shutdown+0x26>
 801245e:	4b26      	ldr	r3, [pc, #152]	; (80124f8 <tcp_shutdown+0xac>)
 8012460:	f240 2207 	movw	r2, #519	; 0x207
 8012464:	4925      	ldr	r1, [pc, #148]	; (80124fc <tcp_shutdown+0xb0>)
 8012466:	4826      	ldr	r0, [pc, #152]	; (8012500 <tcp_shutdown+0xb4>)
 8012468:	f006 fd70 	bl	8018f4c <iprintf>
 801246c:	f06f 030f 	mvn.w	r3, #15
 8012470:	e03d      	b.n	80124ee <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	7d1b      	ldrb	r3, [r3, #20]
 8012476:	2b01      	cmp	r3, #1
 8012478:	d102      	bne.n	8012480 <tcp_shutdown+0x34>
    return ERR_CONN;
 801247a:	f06f 030a 	mvn.w	r3, #10
 801247e:	e036      	b.n	80124ee <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8012480:	68bb      	ldr	r3, [r7, #8]
 8012482:	2b00      	cmp	r3, #0
 8012484:	d01b      	beq.n	80124be <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	8b5b      	ldrh	r3, [r3, #26]
 801248a:	f043 0310 	orr.w	r3, r3, #16
 801248e:	b29a      	uxth	r2, r3
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d005      	beq.n	80124a6 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801249a:	2101      	movs	r1, #1
 801249c:	68f8      	ldr	r0, [r7, #12]
 801249e:	f7ff fe5d 	bl	801215c <tcp_close_shutdown>
 80124a2:	4603      	mov	r3, r0
 80124a4:	e023      	b.n	80124ee <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d007      	beq.n	80124be <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7ff f968 	bl	8011788 <pbuf_free>
      pcb->refused_data = NULL;
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	2200      	movs	r2, #0
 80124bc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d013      	beq.n	80124ec <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	7d1b      	ldrb	r3, [r3, #20]
 80124c8:	2b04      	cmp	r3, #4
 80124ca:	dc02      	bgt.n	80124d2 <tcp_shutdown+0x86>
 80124cc:	2b03      	cmp	r3, #3
 80124ce:	da02      	bge.n	80124d6 <tcp_shutdown+0x8a>
 80124d0:	e009      	b.n	80124e6 <tcp_shutdown+0x9a>
 80124d2:	2b07      	cmp	r3, #7
 80124d4:	d107      	bne.n	80124e6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	b2db      	uxtb	r3, r3
 80124da:	4619      	mov	r1, r3
 80124dc:	68f8      	ldr	r0, [r7, #12]
 80124de:	f7ff fe3d 	bl	801215c <tcp_close_shutdown>
 80124e2:	4603      	mov	r3, r0
 80124e4:	e003      	b.n	80124ee <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80124e6:	f06f 030a 	mvn.w	r3, #10
 80124ea:	e000      	b.n	80124ee <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80124ec:	2300      	movs	r3, #0
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3710      	adds	r7, #16
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop
 80124f8:	0801d474 	.word	0x0801d474
 80124fc:	0801d5e0 	.word	0x0801d5e0
 8012500:	0801d4fc 	.word	0x0801d4fc

08012504 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b08e      	sub	sp, #56	; 0x38
 8012508:	af04      	add	r7, sp, #16
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d107      	bne.n	8012524 <tcp_abandon+0x20>
 8012514:	4b4d      	ldr	r3, [pc, #308]	; (801264c <tcp_abandon+0x148>)
 8012516:	f240 223d 	movw	r2, #573	; 0x23d
 801251a:	494d      	ldr	r1, [pc, #308]	; (8012650 <tcp_abandon+0x14c>)
 801251c:	484d      	ldr	r0, [pc, #308]	; (8012654 <tcp_abandon+0x150>)
 801251e:	f006 fd15 	bl	8018f4c <iprintf>
 8012522:	e090      	b.n	8012646 <tcp_abandon+0x142>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	7d1b      	ldrb	r3, [r3, #20]
 8012528:	2b01      	cmp	r3, #1
 801252a:	d106      	bne.n	801253a <tcp_abandon+0x36>
 801252c:	4b47      	ldr	r3, [pc, #284]	; (801264c <tcp_abandon+0x148>)
 801252e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012532:	4949      	ldr	r1, [pc, #292]	; (8012658 <tcp_abandon+0x154>)
 8012534:	4847      	ldr	r0, [pc, #284]	; (8012654 <tcp_abandon+0x150>)
 8012536:	f006 fd09 	bl	8018f4c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	7d1b      	ldrb	r3, [r3, #20]
 801253e:	2b0a      	cmp	r3, #10
 8012540:	d107      	bne.n	8012552 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012542:	6879      	ldr	r1, [r7, #4]
 8012544:	4845      	ldr	r0, [pc, #276]	; (801265c <tcp_abandon+0x158>)
 8012546:	f001 fb01 	bl	8013b4c <tcp_pcb_remove>
    tcp_free(pcb);
 801254a:	6878      	ldr	r0, [r7, #4]
 801254c:	f7ff fd54 	bl	8011ff8 <tcp_free>
 8012550:	e079      	b.n	8012646 <tcp_abandon+0x142>
  } else {
    int send_rst = 0;
 8012552:	2300      	movs	r3, #0
 8012554:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012556:	2300      	movs	r3, #0
 8012558:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801255e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012564:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801256c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	691b      	ldr	r3, [r3, #16]
 8012572:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	7d1b      	ldrb	r3, [r3, #20]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d126      	bne.n	80125ca <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	8adb      	ldrh	r3, [r3, #22]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d02e      	beq.n	80125e2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012584:	4b36      	ldr	r3, [pc, #216]	; (8012660 <tcp_abandon+0x15c>)
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	687a      	ldr	r2, [r7, #4]
 801258a:	429a      	cmp	r2, r3
 801258c:	d105      	bne.n	801259a <tcp_abandon+0x96>
 801258e:	4b34      	ldr	r3, [pc, #208]	; (8012660 <tcp_abandon+0x15c>)
 8012590:	681b      	ldr	r3, [r3, #0]
 8012592:	68db      	ldr	r3, [r3, #12]
 8012594:	4a32      	ldr	r2, [pc, #200]	; (8012660 <tcp_abandon+0x15c>)
 8012596:	6013      	str	r3, [r2, #0]
 8012598:	e013      	b.n	80125c2 <tcp_abandon+0xbe>
 801259a:	4b31      	ldr	r3, [pc, #196]	; (8012660 <tcp_abandon+0x15c>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	61fb      	str	r3, [r7, #28]
 80125a0:	e00c      	b.n	80125bc <tcp_abandon+0xb8>
 80125a2:	69fb      	ldr	r3, [r7, #28]
 80125a4:	68db      	ldr	r3, [r3, #12]
 80125a6:	687a      	ldr	r2, [r7, #4]
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d104      	bne.n	80125b6 <tcp_abandon+0xb2>
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	68da      	ldr	r2, [r3, #12]
 80125b0:	69fb      	ldr	r3, [r7, #28]
 80125b2:	60da      	str	r2, [r3, #12]
 80125b4:	e005      	b.n	80125c2 <tcp_abandon+0xbe>
 80125b6:	69fb      	ldr	r3, [r7, #28]
 80125b8:	68db      	ldr	r3, [r3, #12]
 80125ba:	61fb      	str	r3, [r7, #28]
 80125bc:	69fb      	ldr	r3, [r7, #28]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d1ef      	bne.n	80125a2 <tcp_abandon+0x9e>
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2200      	movs	r2, #0
 80125c6:	60da      	str	r2, [r3, #12]
 80125c8:	e00b      	b.n	80125e2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	8adb      	ldrh	r3, [r3, #22]
 80125d2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80125d4:	6879      	ldr	r1, [r7, #4]
 80125d6:	4823      	ldr	r0, [pc, #140]	; (8012664 <tcp_abandon+0x160>)
 80125d8:	f001 fab8 	bl	8013b4c <tcp_pcb_remove>
 80125dc:	4b22      	ldr	r3, [pc, #136]	; (8012668 <tcp_abandon+0x164>)
 80125de:	2201      	movs	r2, #1
 80125e0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d004      	beq.n	80125f4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80125ee:	4618      	mov	r0, r3
 80125f0:	f000 ffc0 	bl	8013574 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d004      	beq.n	8012606 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012600:	4618      	mov	r0, r3
 8012602:	f000 ffb7 	bl	8013574 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012608:	2b00      	cmp	r3, #0
 801260a:	d00e      	beq.n	801262a <tcp_abandon+0x126>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801260c:	6879      	ldr	r1, [r7, #4]
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	3304      	adds	r3, #4
 8012612:	687a      	ldr	r2, [r7, #4]
 8012614:	8b12      	ldrh	r2, [r2, #24]
 8012616:	9202      	str	r2, [sp, #8]
 8012618:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801261a:	9201      	str	r2, [sp, #4]
 801261c:	9300      	str	r3, [sp, #0]
 801261e:	460b      	mov	r3, r1
 8012620:	697a      	ldr	r2, [r7, #20]
 8012622:	69b9      	ldr	r1, [r7, #24]
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f005 f883 	bl	8017730 <tcp_rst>
    }
    last_state = pcb->state;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	7d1b      	ldrb	r3, [r3, #20]
 801262e:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f7ff fce1 	bl	8011ff8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012636:	693b      	ldr	r3, [r7, #16]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d004      	beq.n	8012646 <tcp_abandon+0x142>
 801263c:	693b      	ldr	r3, [r7, #16]
 801263e:	f06f 010c 	mvn.w	r1, #12
 8012642:	68f8      	ldr	r0, [r7, #12]
 8012644:	4798      	blx	r3
  }
}
 8012646:	3728      	adds	r7, #40	; 0x28
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}
 801264c:	0801d474 	.word	0x0801d474
 8012650:	0801d5fc 	.word	0x0801d5fc
 8012654:	0801d4fc 	.word	0x0801d4fc
 8012658:	0801d618 	.word	0x0801d618
 801265c:	2400b2b4 	.word	0x2400b2b4
 8012660:	2400b2b0 	.word	0x2400b2b0
 8012664:	2400b2a4 	.word	0x2400b2a4
 8012668:	2400b2a0 	.word	0x2400b2a0

0801266c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b082      	sub	sp, #8
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012674:	2101      	movs	r1, #1
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f7ff ff44 	bl	8012504 <tcp_abandon>
}
 801267c:	bf00      	nop
 801267e:	3708      	adds	r7, #8
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b088      	sub	sp, #32
 8012688:	af00      	add	r7, sp, #0
 801268a:	60f8      	str	r0, [r7, #12]
 801268c:	60b9      	str	r1, [r7, #8]
 801268e:	4613      	mov	r3, r2
 8012690:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8012692:	2304      	movs	r3, #4
 8012694:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d101      	bne.n	80126a0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801269c:	4b3e      	ldr	r3, [pc, #248]	; (8012798 <tcp_bind+0x114>)
 801269e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	2b00      	cmp	r3, #0
 80126a4:	d109      	bne.n	80126ba <tcp_bind+0x36>
 80126a6:	4b3d      	ldr	r3, [pc, #244]	; (801279c <tcp_bind+0x118>)
 80126a8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80126ac:	493c      	ldr	r1, [pc, #240]	; (80127a0 <tcp_bind+0x11c>)
 80126ae:	483d      	ldr	r0, [pc, #244]	; (80127a4 <tcp_bind+0x120>)
 80126b0:	f006 fc4c 	bl	8018f4c <iprintf>
 80126b4:	f06f 030f 	mvn.w	r3, #15
 80126b8:	e06a      	b.n	8012790 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	7d1b      	ldrb	r3, [r3, #20]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d009      	beq.n	80126d6 <tcp_bind+0x52>
 80126c2:	4b36      	ldr	r3, [pc, #216]	; (801279c <tcp_bind+0x118>)
 80126c4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80126c8:	4937      	ldr	r1, [pc, #220]	; (80127a8 <tcp_bind+0x124>)
 80126ca:	4836      	ldr	r0, [pc, #216]	; (80127a4 <tcp_bind+0x120>)
 80126cc:	f006 fc3e 	bl	8018f4c <iprintf>
 80126d0:	f06f 0305 	mvn.w	r3, #5
 80126d4:	e05c      	b.n	8012790 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80126d6:	88fb      	ldrh	r3, [r7, #6]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d109      	bne.n	80126f0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80126dc:	f000 f9e0 	bl	8012aa0 <tcp_new_port>
 80126e0:	4603      	mov	r3, r0
 80126e2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80126e4:	88fb      	ldrh	r3, [r7, #6]
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d135      	bne.n	8012756 <tcp_bind+0xd2>
      return ERR_BUF;
 80126ea:	f06f 0301 	mvn.w	r3, #1
 80126ee:	e04f      	b.n	8012790 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80126f0:	2300      	movs	r3, #0
 80126f2:	61fb      	str	r3, [r7, #28]
 80126f4:	e02b      	b.n	801274e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80126f6:	4a2d      	ldr	r2, [pc, #180]	; (80127ac <tcp_bind+0x128>)
 80126f8:	69fb      	ldr	r3, [r7, #28]
 80126fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	61bb      	str	r3, [r7, #24]
 8012702:	e01e      	b.n	8012742 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8012704:	69bb      	ldr	r3, [r7, #24]
 8012706:	8adb      	ldrh	r3, [r3, #22]
 8012708:	88fa      	ldrh	r2, [r7, #6]
 801270a:	429a      	cmp	r2, r3
 801270c:	d116      	bne.n	801273c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801270e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012710:	2b00      	cmp	r3, #0
 8012712:	d010      	beq.n	8012736 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012714:	69bb      	ldr	r3, [r7, #24]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d00c      	beq.n	8012736 <tcp_bind+0xb2>
 801271c:	68bb      	ldr	r3, [r7, #8]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d009      	beq.n	8012736 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d005      	beq.n	8012736 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801272a:	69bb      	ldr	r3, [r7, #24]
 801272c:	681a      	ldr	r2, [r3, #0]
 801272e:	68bb      	ldr	r3, [r7, #8]
 8012730:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012732:	429a      	cmp	r2, r3
 8012734:	d102      	bne.n	801273c <tcp_bind+0xb8>
              return ERR_USE;
 8012736:	f06f 0307 	mvn.w	r3, #7
 801273a:	e029      	b.n	8012790 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801273c:	69bb      	ldr	r3, [r7, #24]
 801273e:	68db      	ldr	r3, [r3, #12]
 8012740:	61bb      	str	r3, [r7, #24]
 8012742:	69bb      	ldr	r3, [r7, #24]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d1dd      	bne.n	8012704 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012748:	69fb      	ldr	r3, [r7, #28]
 801274a:	3301      	adds	r3, #1
 801274c:	61fb      	str	r3, [r7, #28]
 801274e:	69fa      	ldr	r2, [r7, #28]
 8012750:	697b      	ldr	r3, [r7, #20]
 8012752:	429a      	cmp	r2, r3
 8012754:	dbcf      	blt.n	80126f6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d00c      	beq.n	8012776 <tcp_bind+0xf2>
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d008      	beq.n	8012776 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012764:	68bb      	ldr	r3, [r7, #8]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d002      	beq.n	8012770 <tcp_bind+0xec>
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	e000      	b.n	8012772 <tcp_bind+0xee>
 8012770:	2300      	movs	r3, #0
 8012772:	68fa      	ldr	r2, [r7, #12]
 8012774:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	88fa      	ldrh	r2, [r7, #6]
 801277a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801277c:	4b0c      	ldr	r3, [pc, #48]	; (80127b0 <tcp_bind+0x12c>)
 801277e:	681a      	ldr	r2, [r3, #0]
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	60da      	str	r2, [r3, #12]
 8012784:	4a0a      	ldr	r2, [pc, #40]	; (80127b0 <tcp_bind+0x12c>)
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	6013      	str	r3, [r2, #0]
 801278a:	f005 f993 	bl	8017ab4 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801278e:	2300      	movs	r3, #0
}
 8012790:	4618      	mov	r0, r3
 8012792:	3720      	adds	r7, #32
 8012794:	46bd      	mov	sp, r7
 8012796:	bd80      	pop	{r7, pc}
 8012798:	0801c38c 	.word	0x0801c38c
 801279c:	0801d474 	.word	0x0801d474
 80127a0:	0801d64c 	.word	0x0801d64c
 80127a4:	0801d4fc 	.word	0x0801d4fc
 80127a8:	0801d664 	.word	0x0801d664
 80127ac:	0801d464 	.word	0x0801d464
 80127b0:	2400b2b0 	.word	0x2400b2b0

080127b4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b084      	sub	sp, #16
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	60f8      	str	r0, [r7, #12]
 80127bc:	60b9      	str	r1, [r7, #8]
 80127be:	4613      	mov	r3, r2
 80127c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d106      	bne.n	80127d6 <tcp_accept_null+0x22>
 80127c8:	4b07      	ldr	r3, [pc, #28]	; (80127e8 <tcp_accept_null+0x34>)
 80127ca:	f240 320f 	movw	r2, #783	; 0x30f
 80127ce:	4907      	ldr	r1, [pc, #28]	; (80127ec <tcp_accept_null+0x38>)
 80127d0:	4807      	ldr	r0, [pc, #28]	; (80127f0 <tcp_accept_null+0x3c>)
 80127d2:	f006 fbbb 	bl	8018f4c <iprintf>

  tcp_abort(pcb);
 80127d6:	68b8      	ldr	r0, [r7, #8]
 80127d8:	f7ff ff48 	bl	801266c <tcp_abort>

  return ERR_ABRT;
 80127dc:	f06f 030c 	mvn.w	r3, #12
}
 80127e0:	4618      	mov	r0, r3
 80127e2:	3710      	adds	r7, #16
 80127e4:	46bd      	mov	sp, r7
 80127e6:	bd80      	pop	{r7, pc}
 80127e8:	0801d474 	.word	0x0801d474
 80127ec:	0801d68c 	.word	0x0801d68c
 80127f0:	0801d4fc 	.word	0x0801d4fc

080127f4 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b088      	sub	sp, #32
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	60f8      	str	r0, [r7, #12]
 80127fc:	460b      	mov	r3, r1
 80127fe:	607a      	str	r2, [r7, #4]
 8012800:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8012802:	2300      	movs	r3, #0
 8012804:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d109      	bne.n	8012820 <tcp_listen_with_backlog_and_err+0x2c>
 801280c:	4b47      	ldr	r3, [pc, #284]	; (801292c <tcp_listen_with_backlog_and_err+0x138>)
 801280e:	f240 3259 	movw	r2, #857	; 0x359
 8012812:	4947      	ldr	r1, [pc, #284]	; (8012930 <tcp_listen_with_backlog_and_err+0x13c>)
 8012814:	4847      	ldr	r0, [pc, #284]	; (8012934 <tcp_listen_with_backlog_and_err+0x140>)
 8012816:	f006 fb99 	bl	8018f4c <iprintf>
 801281a:	23f0      	movs	r3, #240	; 0xf0
 801281c:	76fb      	strb	r3, [r7, #27]
 801281e:	e079      	b.n	8012914 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	7d1b      	ldrb	r3, [r3, #20]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d009      	beq.n	801283c <tcp_listen_with_backlog_and_err+0x48>
 8012828:	4b40      	ldr	r3, [pc, #256]	; (801292c <tcp_listen_with_backlog_and_err+0x138>)
 801282a:	f240 325a 	movw	r2, #858	; 0x35a
 801282e:	4942      	ldr	r1, [pc, #264]	; (8012938 <tcp_listen_with_backlog_and_err+0x144>)
 8012830:	4840      	ldr	r0, [pc, #256]	; (8012934 <tcp_listen_with_backlog_and_err+0x140>)
 8012832:	f006 fb8b 	bl	8018f4c <iprintf>
 8012836:	23f1      	movs	r3, #241	; 0xf1
 8012838:	76fb      	strb	r3, [r7, #27]
 801283a:	e06b      	b.n	8012914 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	7d1b      	ldrb	r3, [r3, #20]
 8012840:	2b01      	cmp	r3, #1
 8012842:	d104      	bne.n	801284e <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8012848:	23f7      	movs	r3, #247	; 0xf7
 801284a:	76fb      	strb	r3, [r7, #27]
    goto done;
 801284c:	e062      	b.n	8012914 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801284e:	2002      	movs	r0, #2
 8012850:	f7fe f8aa 	bl	80109a8 <memp_malloc>
 8012854:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8012856:	69fb      	ldr	r3, [r7, #28]
 8012858:	2b00      	cmp	r3, #0
 801285a:	d102      	bne.n	8012862 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 801285c:	23ff      	movs	r3, #255	; 0xff
 801285e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012860:	e058      	b.n	8012914 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	691a      	ldr	r2, [r3, #16]
 8012866:	69fb      	ldr	r3, [r7, #28]
 8012868:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	8ada      	ldrh	r2, [r3, #22]
 801286e:	69fb      	ldr	r3, [r7, #28]
 8012870:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8012872:	69fb      	ldr	r3, [r7, #28]
 8012874:	2201      	movs	r2, #1
 8012876:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	7d5a      	ldrb	r2, [r3, #21]
 801287c:	69fb      	ldr	r3, [r7, #28]
 801287e:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	7a5a      	ldrb	r2, [r3, #9]
 8012884:	69fb      	ldr	r3, [r7, #28]
 8012886:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8012888:	69fb      	ldr	r3, [r7, #28]
 801288a:	2200      	movs	r2, #0
 801288c:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	7ada      	ldrb	r2, [r3, #11]
 8012892:	69fb      	ldr	r3, [r7, #28]
 8012894:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	7a9a      	ldrb	r2, [r3, #10]
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	681a      	ldr	r2, [r3, #0]
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	8adb      	ldrh	r3, [r3, #22]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d021      	beq.n	80128f2 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80128ae:	4b23      	ldr	r3, [pc, #140]	; (801293c <tcp_listen_with_backlog_and_err+0x148>)
 80128b0:	681b      	ldr	r3, [r3, #0]
 80128b2:	68fa      	ldr	r2, [r7, #12]
 80128b4:	429a      	cmp	r2, r3
 80128b6:	d105      	bne.n	80128c4 <tcp_listen_with_backlog_and_err+0xd0>
 80128b8:	4b20      	ldr	r3, [pc, #128]	; (801293c <tcp_listen_with_backlog_and_err+0x148>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	68db      	ldr	r3, [r3, #12]
 80128be:	4a1f      	ldr	r2, [pc, #124]	; (801293c <tcp_listen_with_backlog_and_err+0x148>)
 80128c0:	6013      	str	r3, [r2, #0]
 80128c2:	e013      	b.n	80128ec <tcp_listen_with_backlog_and_err+0xf8>
 80128c4:	4b1d      	ldr	r3, [pc, #116]	; (801293c <tcp_listen_with_backlog_and_err+0x148>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	617b      	str	r3, [r7, #20]
 80128ca:	e00c      	b.n	80128e6 <tcp_listen_with_backlog_and_err+0xf2>
 80128cc:	697b      	ldr	r3, [r7, #20]
 80128ce:	68db      	ldr	r3, [r3, #12]
 80128d0:	68fa      	ldr	r2, [r7, #12]
 80128d2:	429a      	cmp	r2, r3
 80128d4:	d104      	bne.n	80128e0 <tcp_listen_with_backlog_and_err+0xec>
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	68da      	ldr	r2, [r3, #12]
 80128da:	697b      	ldr	r3, [r7, #20]
 80128dc:	60da      	str	r2, [r3, #12]
 80128de:	e005      	b.n	80128ec <tcp_listen_with_backlog_and_err+0xf8>
 80128e0:	697b      	ldr	r3, [r7, #20]
 80128e2:	68db      	ldr	r3, [r3, #12]
 80128e4:	617b      	str	r3, [r7, #20]
 80128e6:	697b      	ldr	r3, [r7, #20]
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d1ef      	bne.n	80128cc <tcp_listen_with_backlog_and_err+0xd8>
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	2200      	movs	r2, #0
 80128f0:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80128f2:	68f8      	ldr	r0, [r7, #12]
 80128f4:	f7ff fb80 	bl	8011ff8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	4a11      	ldr	r2, [pc, #68]	; (8012940 <tcp_listen_with_backlog_and_err+0x14c>)
 80128fc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80128fe:	4b11      	ldr	r3, [pc, #68]	; (8012944 <tcp_listen_with_backlog_and_err+0x150>)
 8012900:	681a      	ldr	r2, [r3, #0]
 8012902:	69fb      	ldr	r3, [r7, #28]
 8012904:	60da      	str	r2, [r3, #12]
 8012906:	4a0f      	ldr	r2, [pc, #60]	; (8012944 <tcp_listen_with_backlog_and_err+0x150>)
 8012908:	69fb      	ldr	r3, [r7, #28]
 801290a:	6013      	str	r3, [r2, #0]
 801290c:	f005 f8d2 	bl	8017ab4 <tcp_timer_needed>
  res = ERR_OK;
 8012910:	2300      	movs	r3, #0
 8012912:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d002      	beq.n	8012920 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	7efa      	ldrb	r2, [r7, #27]
 801291e:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8012920:	69fb      	ldr	r3, [r7, #28]
}
 8012922:	4618      	mov	r0, r3
 8012924:	3720      	adds	r7, #32
 8012926:	46bd      	mov	sp, r7
 8012928:	bd80      	pop	{r7, pc}
 801292a:	bf00      	nop
 801292c:	0801d474 	.word	0x0801d474
 8012930:	0801d6ac 	.word	0x0801d6ac
 8012934:	0801d4fc 	.word	0x0801d4fc
 8012938:	0801d6dc 	.word	0x0801d6dc
 801293c:	2400b2b0 	.word	0x2400b2b0
 8012940:	080127b5 	.word	0x080127b5
 8012944:	2400b2ac 	.word	0x2400b2ac

08012948 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b084      	sub	sp, #16
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d106      	bne.n	8012964 <tcp_update_rcv_ann_wnd+0x1c>
 8012956:	4b25      	ldr	r3, [pc, #148]	; (80129ec <tcp_update_rcv_ann_wnd+0xa4>)
 8012958:	f240 32a6 	movw	r2, #934	; 0x3a6
 801295c:	4924      	ldr	r1, [pc, #144]	; (80129f0 <tcp_update_rcv_ann_wnd+0xa8>)
 801295e:	4825      	ldr	r0, [pc, #148]	; (80129f4 <tcp_update_rcv_ann_wnd+0xac>)
 8012960:	f006 faf4 	bl	8018f4c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801296c:	4413      	add	r3, r2
 801296e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012974:	687a      	ldr	r2, [r7, #4]
 8012976:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012978:	f240 51b4 	movw	r1, #1460	; 0x5b4
 801297c:	428a      	cmp	r2, r1
 801297e:	bf28      	it	cs
 8012980:	460a      	movcs	r2, r1
 8012982:	b292      	uxth	r2, r2
 8012984:	4413      	add	r3, r2
 8012986:	68fa      	ldr	r2, [r7, #12]
 8012988:	1ad3      	subs	r3, r2, r3
 801298a:	2b00      	cmp	r3, #0
 801298c:	db08      	blt.n	80129a0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801299a:	68fa      	ldr	r2, [r7, #12]
 801299c:	1ad3      	subs	r3, r2, r3
 801299e:	e020      	b.n	80129e2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129a8:	1ad3      	subs	r3, r2, r3
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	dd03      	ble.n	80129b6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	2200      	movs	r2, #0
 80129b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80129b4:	e014      	b.n	80129e0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80129be:	1ad3      	subs	r3, r2, r3
 80129c0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80129c8:	d306      	bcc.n	80129d8 <tcp_update_rcv_ann_wnd+0x90>
 80129ca:	4b08      	ldr	r3, [pc, #32]	; (80129ec <tcp_update_rcv_ann_wnd+0xa4>)
 80129cc:	f240 32b6 	movw	r2, #950	; 0x3b6
 80129d0:	4909      	ldr	r1, [pc, #36]	; (80129f8 <tcp_update_rcv_ann_wnd+0xb0>)
 80129d2:	4808      	ldr	r0, [pc, #32]	; (80129f4 <tcp_update_rcv_ann_wnd+0xac>)
 80129d4:	f006 faba 	bl	8018f4c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	b29a      	uxth	r2, r3
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80129e0:	2300      	movs	r3, #0
  }
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3710      	adds	r7, #16
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	0801d474 	.word	0x0801d474
 80129f0:	0801d714 	.word	0x0801d714
 80129f4:	0801d4fc 	.word	0x0801d4fc
 80129f8:	0801d738 	.word	0x0801d738

080129fc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b084      	sub	sp, #16
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	460b      	mov	r3, r1
 8012a06:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d107      	bne.n	8012a1e <tcp_recved+0x22>
 8012a0e:	4b20      	ldr	r3, [pc, #128]	; (8012a90 <tcp_recved+0x94>)
 8012a10:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012a14:	491f      	ldr	r1, [pc, #124]	; (8012a94 <tcp_recved+0x98>)
 8012a16:	4820      	ldr	r0, [pc, #128]	; (8012a98 <tcp_recved+0x9c>)
 8012a18:	f006 fa98 	bl	8018f4c <iprintf>
 8012a1c:	e034      	b.n	8012a88 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	7d1b      	ldrb	r3, [r3, #20]
 8012a22:	2b01      	cmp	r3, #1
 8012a24:	d106      	bne.n	8012a34 <tcp_recved+0x38>
 8012a26:	4b1a      	ldr	r3, [pc, #104]	; (8012a90 <tcp_recved+0x94>)
 8012a28:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012a2c:	491b      	ldr	r1, [pc, #108]	; (8012a9c <tcp_recved+0xa0>)
 8012a2e:	481a      	ldr	r0, [pc, #104]	; (8012a98 <tcp_recved+0x9c>)
 8012a30:	f006 fa8c 	bl	8018f4c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012a38:	887b      	ldrh	r3, [r7, #2]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012a3e:	89fb      	ldrh	r3, [r7, #14]
 8012a40:	f640 3268 	movw	r2, #2920	; 0xb68
 8012a44:	4293      	cmp	r3, r2
 8012a46:	d804      	bhi.n	8012a52 <tcp_recved+0x56>
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012a4c:	89fa      	ldrh	r2, [r7, #14]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d204      	bcs.n	8012a5c <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	f640 3268 	movw	r2, #2920	; 0xb68
 8012a58:	851a      	strh	r2, [r3, #40]	; 0x28
 8012a5a:	e002      	b.n	8012a62 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	89fa      	ldrh	r2, [r7, #14]
 8012a60:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f7ff ff70 	bl	8012948 <tcp_update_rcv_ann_wnd>
 8012a68:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012a6a:	68bb      	ldr	r3, [r7, #8]
 8012a6c:	f240 22d9 	movw	r2, #729	; 0x2d9
 8012a70:	4293      	cmp	r3, r2
 8012a72:	d909      	bls.n	8012a88 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	8b5b      	ldrh	r3, [r3, #26]
 8012a78:	f043 0302 	orr.w	r3, r3, #2
 8012a7c:	b29a      	uxth	r2, r3
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f004 f8a0 	bl	8016bc8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012a88:	3710      	adds	r7, #16
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	0801d474 	.word	0x0801d474
 8012a94:	0801d754 	.word	0x0801d754
 8012a98:	0801d4fc 	.word	0x0801d4fc
 8012a9c:	0801d76c 	.word	0x0801d76c

08012aa0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012aa0:	b480      	push	{r7}
 8012aa2:	b083      	sub	sp, #12
 8012aa4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012aaa:	4b1e      	ldr	r3, [pc, #120]	; (8012b24 <tcp_new_port+0x84>)
 8012aac:	881b      	ldrh	r3, [r3, #0]
 8012aae:	3301      	adds	r3, #1
 8012ab0:	b29a      	uxth	r2, r3
 8012ab2:	4b1c      	ldr	r3, [pc, #112]	; (8012b24 <tcp_new_port+0x84>)
 8012ab4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8012ab6:	4b1b      	ldr	r3, [pc, #108]	; (8012b24 <tcp_new_port+0x84>)
 8012ab8:	881b      	ldrh	r3, [r3, #0]
 8012aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012abe:	4293      	cmp	r3, r2
 8012ac0:	d103      	bne.n	8012aca <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012ac2:	4b18      	ldr	r3, [pc, #96]	; (8012b24 <tcp_new_port+0x84>)
 8012ac4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012ac8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012aca:	2300      	movs	r3, #0
 8012acc:	71fb      	strb	r3, [r7, #7]
 8012ace:	e01e      	b.n	8012b0e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012ad0:	79fb      	ldrb	r3, [r7, #7]
 8012ad2:	4a15      	ldr	r2, [pc, #84]	; (8012b28 <tcp_new_port+0x88>)
 8012ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	603b      	str	r3, [r7, #0]
 8012adc:	e011      	b.n	8012b02 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	8ada      	ldrh	r2, [r3, #22]
 8012ae2:	4b10      	ldr	r3, [pc, #64]	; (8012b24 <tcp_new_port+0x84>)
 8012ae4:	881b      	ldrh	r3, [r3, #0]
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	d108      	bne.n	8012afc <tcp_new_port+0x5c>
        n++;
 8012aea:	88bb      	ldrh	r3, [r7, #4]
 8012aec:	3301      	adds	r3, #1
 8012aee:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012af0:	88bb      	ldrh	r3, [r7, #4]
 8012af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012af6:	d3d8      	bcc.n	8012aaa <tcp_new_port+0xa>
          return 0;
 8012af8:	2300      	movs	r3, #0
 8012afa:	e00d      	b.n	8012b18 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012afc:	683b      	ldr	r3, [r7, #0]
 8012afe:	68db      	ldr	r3, [r3, #12]
 8012b00:	603b      	str	r3, [r7, #0]
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d1ea      	bne.n	8012ade <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012b08:	79fb      	ldrb	r3, [r7, #7]
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	71fb      	strb	r3, [r7, #7]
 8012b0e:	79fb      	ldrb	r3, [r7, #7]
 8012b10:	2b03      	cmp	r3, #3
 8012b12:	d9dd      	bls.n	8012ad0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012b14:	4b03      	ldr	r3, [pc, #12]	; (8012b24 <tcp_new_port+0x84>)
 8012b16:	881b      	ldrh	r3, [r3, #0]
}
 8012b18:	4618      	mov	r0, r3
 8012b1a:	370c      	adds	r7, #12
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr
 8012b24:	24000044 	.word	0x24000044
 8012b28:	0801d464 	.word	0x0801d464

08012b2c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b08a      	sub	sp, #40	; 0x28
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	60f8      	str	r0, [r7, #12]
 8012b34:	60b9      	str	r1, [r7, #8]
 8012b36:	603b      	str	r3, [r7, #0]
 8012b38:	4613      	mov	r3, r2
 8012b3a:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012b40:	68fb      	ldr	r3, [r7, #12]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d109      	bne.n	8012b5a <tcp_connect+0x2e>
 8012b46:	4b7d      	ldr	r3, [pc, #500]	; (8012d3c <tcp_connect+0x210>)
 8012b48:	f240 4235 	movw	r2, #1077	; 0x435
 8012b4c:	497c      	ldr	r1, [pc, #496]	; (8012d40 <tcp_connect+0x214>)
 8012b4e:	487d      	ldr	r0, [pc, #500]	; (8012d44 <tcp_connect+0x218>)
 8012b50:	f006 f9fc 	bl	8018f4c <iprintf>
 8012b54:	f06f 030f 	mvn.w	r3, #15
 8012b58:	e0ec      	b.n	8012d34 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d109      	bne.n	8012b74 <tcp_connect+0x48>
 8012b60:	4b76      	ldr	r3, [pc, #472]	; (8012d3c <tcp_connect+0x210>)
 8012b62:	f240 4236 	movw	r2, #1078	; 0x436
 8012b66:	4978      	ldr	r1, [pc, #480]	; (8012d48 <tcp_connect+0x21c>)
 8012b68:	4876      	ldr	r0, [pc, #472]	; (8012d44 <tcp_connect+0x218>)
 8012b6a:	f006 f9ef 	bl	8018f4c <iprintf>
 8012b6e:	f06f 030f 	mvn.w	r3, #15
 8012b72:	e0df      	b.n	8012d34 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	7d1b      	ldrb	r3, [r3, #20]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d009      	beq.n	8012b90 <tcp_connect+0x64>
 8012b7c:	4b6f      	ldr	r3, [pc, #444]	; (8012d3c <tcp_connect+0x210>)
 8012b7e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8012b82:	4972      	ldr	r1, [pc, #456]	; (8012d4c <tcp_connect+0x220>)
 8012b84:	486f      	ldr	r0, [pc, #444]	; (8012d44 <tcp_connect+0x218>)
 8012b86:	f006 f9e1 	bl	8018f4c <iprintf>
 8012b8a:	f06f 0309 	mvn.w	r3, #9
 8012b8e:	e0d1      	b.n	8012d34 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d002      	beq.n	8012b9c <tcp_connect+0x70>
 8012b96:	68bb      	ldr	r3, [r7, #8]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	e000      	b.n	8012b9e <tcp_connect+0x72>
 8012b9c:	2300      	movs	r3, #0
 8012b9e:	68fa      	ldr	r2, [r7, #12]
 8012ba0:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	88fa      	ldrh	r2, [r7, #6]
 8012ba6:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	7a1b      	ldrb	r3, [r3, #8]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d006      	beq.n	8012bbe <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	7a1b      	ldrb	r3, [r3, #8]
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7fe fa83 	bl	80110c0 <netif_get_by_index>
 8012bba:	6278      	str	r0, [r7, #36]	; 0x24
 8012bbc:	e005      	b.n	8012bca <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	3304      	adds	r3, #4
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7fa ffae 	bl	800db24 <ip4_route>
 8012bc8:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8012bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d102      	bne.n	8012bd6 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8012bd0:	f06f 0303 	mvn.w	r3, #3
 8012bd4:	e0ae      	b.n	8012d34 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d003      	beq.n	8012be4 <tcp_connect+0xb8>
 8012bdc:	68fb      	ldr	r3, [r7, #12]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d111      	bne.n	8012c08 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8012be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d002      	beq.n	8012bf0 <tcp_connect+0xc4>
 8012bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bec:	3304      	adds	r3, #4
 8012bee:	e000      	b.n	8012bf2 <tcp_connect+0xc6>
 8012bf0:	2300      	movs	r3, #0
 8012bf2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d102      	bne.n	8012c00 <tcp_connect+0xd4>
      return ERR_RTE;
 8012bfa:	f06f 0303 	mvn.w	r3, #3
 8012bfe:	e099      	b.n	8012d34 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012c00:	69fb      	ldr	r3, [r7, #28]
 8012c02:	681a      	ldr	r2, [r3, #0]
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	8adb      	ldrh	r3, [r3, #22]
 8012c0c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	8adb      	ldrh	r3, [r3, #22]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d10c      	bne.n	8012c30 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8012c16:	f7ff ff43 	bl	8012aa0 <tcp_new_port>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	461a      	mov	r2, r3
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	8adb      	ldrh	r3, [r3, #22]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d102      	bne.n	8012c30 <tcp_connect+0x104>
      return ERR_BUF;
 8012c2a:	f06f 0301 	mvn.w	r3, #1
 8012c2e:	e081      	b.n	8012d34 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8012c30:	68f8      	ldr	r0, [r7, #12]
 8012c32:	f001 f811 	bl	8013c58 <tcp_next_iss>
 8012c36:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8012c3e:	68fb      	ldr	r3, [r7, #12]
 8012c40:	697a      	ldr	r2, [r7, #20]
 8012c42:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	1e5a      	subs	r2, r3, #1
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8012c4c:	697b      	ldr	r3, [r7, #20]
 8012c4e:	1e5a      	subs	r2, r3, #1
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	1e5a      	subs	r2, r3, #1
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	f640 3268 	movw	r2, #2920	; 0xb68
 8012c62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	f640 3268 	movw	r2, #2920	; 0xb68
 8012c7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	f44f 7206 	mov.w	r2, #536	; 0x218
 8012c84:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	3304      	adds	r3, #4
 8012c8e:	461a      	mov	r2, r3
 8012c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012c92:	f001 f807 	bl	8013ca4 <tcp_eff_send_mss_netif>
 8012c96:	4603      	mov	r3, r0
 8012c98:	461a      	mov	r2, r3
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	2201      	movs	r2, #1
 8012ca2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	683a      	ldr	r2, [r7, #0]
 8012caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8012cae:	2102      	movs	r1, #2
 8012cb0:	68f8      	ldr	r0, [r7, #12]
 8012cb2:	f003 fe9b 	bl	80169ec <tcp_enqueue_flags>
 8012cb6:	4603      	mov	r3, r0
 8012cb8:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8012cba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	d136      	bne.n	8012d30 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	2202      	movs	r2, #2
 8012cc6:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8012cc8:	8b7b      	ldrh	r3, [r7, #26]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d021      	beq.n	8012d12 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8012cce:	4b20      	ldr	r3, [pc, #128]	; (8012d50 <tcp_connect+0x224>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	68fa      	ldr	r2, [r7, #12]
 8012cd4:	429a      	cmp	r2, r3
 8012cd6:	d105      	bne.n	8012ce4 <tcp_connect+0x1b8>
 8012cd8:	4b1d      	ldr	r3, [pc, #116]	; (8012d50 <tcp_connect+0x224>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	68db      	ldr	r3, [r3, #12]
 8012cde:	4a1c      	ldr	r2, [pc, #112]	; (8012d50 <tcp_connect+0x224>)
 8012ce0:	6013      	str	r3, [r2, #0]
 8012ce2:	e013      	b.n	8012d0c <tcp_connect+0x1e0>
 8012ce4:	4b1a      	ldr	r3, [pc, #104]	; (8012d50 <tcp_connect+0x224>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	623b      	str	r3, [r7, #32]
 8012cea:	e00c      	b.n	8012d06 <tcp_connect+0x1da>
 8012cec:	6a3b      	ldr	r3, [r7, #32]
 8012cee:	68db      	ldr	r3, [r3, #12]
 8012cf0:	68fa      	ldr	r2, [r7, #12]
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	d104      	bne.n	8012d00 <tcp_connect+0x1d4>
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	68da      	ldr	r2, [r3, #12]
 8012cfa:	6a3b      	ldr	r3, [r7, #32]
 8012cfc:	60da      	str	r2, [r3, #12]
 8012cfe:	e005      	b.n	8012d0c <tcp_connect+0x1e0>
 8012d00:	6a3b      	ldr	r3, [r7, #32]
 8012d02:	68db      	ldr	r3, [r3, #12]
 8012d04:	623b      	str	r3, [r7, #32]
 8012d06:	6a3b      	ldr	r3, [r7, #32]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d1ef      	bne.n	8012cec <tcp_connect+0x1c0>
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	2200      	movs	r2, #0
 8012d10:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8012d12:	4b10      	ldr	r3, [pc, #64]	; (8012d54 <tcp_connect+0x228>)
 8012d14:	681a      	ldr	r2, [r3, #0]
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	60da      	str	r2, [r3, #12]
 8012d1a:	4a0e      	ldr	r2, [pc, #56]	; (8012d54 <tcp_connect+0x228>)
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	6013      	str	r3, [r2, #0]
 8012d20:	f004 fec8 	bl	8017ab4 <tcp_timer_needed>
 8012d24:	4b0c      	ldr	r3, [pc, #48]	; (8012d58 <tcp_connect+0x22c>)
 8012d26:	2201      	movs	r2, #1
 8012d28:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8012d2a:	68f8      	ldr	r0, [r7, #12]
 8012d2c:	f003 ff4c 	bl	8016bc8 <tcp_output>
  }
  return ret;
 8012d30:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3728      	adds	r7, #40	; 0x28
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	bd80      	pop	{r7, pc}
 8012d3c:	0801d474 	.word	0x0801d474
 8012d40:	0801d794 	.word	0x0801d794
 8012d44:	0801d4fc 	.word	0x0801d4fc
 8012d48:	0801d7b0 	.word	0x0801d7b0
 8012d4c:	0801d7cc 	.word	0x0801d7cc
 8012d50:	2400b2b0 	.word	0x2400b2b0
 8012d54:	2400b2a4 	.word	0x2400b2a4
 8012d58:	2400b2a0 	.word	0x2400b2a0

08012d5c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012d5c:	b5b0      	push	{r4, r5, r7, lr}
 8012d5e:	b090      	sub	sp, #64	; 0x40
 8012d60:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012d62:	2300      	movs	r3, #0
 8012d64:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012d68:	4b94      	ldr	r3, [pc, #592]	; (8012fbc <tcp_slowtmr+0x260>)
 8012d6a:	681b      	ldr	r3, [r3, #0]
 8012d6c:	3301      	adds	r3, #1
 8012d6e:	4a93      	ldr	r2, [pc, #588]	; (8012fbc <tcp_slowtmr+0x260>)
 8012d70:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012d72:	4b93      	ldr	r3, [pc, #588]	; (8012fc0 <tcp_slowtmr+0x264>)
 8012d74:	781b      	ldrb	r3, [r3, #0]
 8012d76:	3301      	adds	r3, #1
 8012d78:	b2da      	uxtb	r2, r3
 8012d7a:	4b91      	ldr	r3, [pc, #580]	; (8012fc0 <tcp_slowtmr+0x264>)
 8012d7c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012d82:	4b90      	ldr	r3, [pc, #576]	; (8012fc4 <tcp_slowtmr+0x268>)
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012d88:	e287      	b.n	801329a <tcp_slowtmr+0x53e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d8c:	7d1b      	ldrb	r3, [r3, #20]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	d106      	bne.n	8012da0 <tcp_slowtmr+0x44>
 8012d92:	4b8d      	ldr	r3, [pc, #564]	; (8012fc8 <tcp_slowtmr+0x26c>)
 8012d94:	f240 42be 	movw	r2, #1214	; 0x4be
 8012d98:	498c      	ldr	r1, [pc, #560]	; (8012fcc <tcp_slowtmr+0x270>)
 8012d9a:	488d      	ldr	r0, [pc, #564]	; (8012fd0 <tcp_slowtmr+0x274>)
 8012d9c:	f006 f8d6 	bl	8018f4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012da2:	7d1b      	ldrb	r3, [r3, #20]
 8012da4:	2b01      	cmp	r3, #1
 8012da6:	d106      	bne.n	8012db6 <tcp_slowtmr+0x5a>
 8012da8:	4b87      	ldr	r3, [pc, #540]	; (8012fc8 <tcp_slowtmr+0x26c>)
 8012daa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012dae:	4989      	ldr	r1, [pc, #548]	; (8012fd4 <tcp_slowtmr+0x278>)
 8012db0:	4887      	ldr	r0, [pc, #540]	; (8012fd0 <tcp_slowtmr+0x274>)
 8012db2:	f006 f8cb 	bl	8018f4c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db8:	7d1b      	ldrb	r3, [r3, #20]
 8012dba:	2b0a      	cmp	r3, #10
 8012dbc:	d106      	bne.n	8012dcc <tcp_slowtmr+0x70>
 8012dbe:	4b82      	ldr	r3, [pc, #520]	; (8012fc8 <tcp_slowtmr+0x26c>)
 8012dc0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012dc4:	4984      	ldr	r1, [pc, #528]	; (8012fd8 <tcp_slowtmr+0x27c>)
 8012dc6:	4882      	ldr	r0, [pc, #520]	; (8012fd0 <tcp_slowtmr+0x274>)
 8012dc8:	f006 f8c0 	bl	8018f4c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dce:	7f9a      	ldrb	r2, [r3, #30]
 8012dd0:	4b7b      	ldr	r3, [pc, #492]	; (8012fc0 <tcp_slowtmr+0x264>)
 8012dd2:	781b      	ldrb	r3, [r3, #0]
 8012dd4:	429a      	cmp	r2, r3
 8012dd6:	d105      	bne.n	8012de4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dda:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dde:	68db      	ldr	r3, [r3, #12]
 8012de0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012de2:	e25a      	b.n	801329a <tcp_slowtmr+0x53e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012de4:	4b76      	ldr	r3, [pc, #472]	; (8012fc0 <tcp_slowtmr+0x264>)
 8012de6:	781a      	ldrb	r2, [r3, #0]
 8012de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dea:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012dec:	2300      	movs	r3, #0
 8012dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012df2:	2300      	movs	r3, #0
 8012df4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfa:	7d1b      	ldrb	r3, [r3, #20]
 8012dfc:	2b02      	cmp	r3, #2
 8012dfe:	d10a      	bne.n	8012e16 <tcp_slowtmr+0xba>
 8012e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e06:	2b05      	cmp	r3, #5
 8012e08:	d905      	bls.n	8012e16 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012e0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e0e:	3301      	adds	r3, #1
 8012e10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012e14:	e11e      	b.n	8013054 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012e1c:	2b0b      	cmp	r3, #11
 8012e1e:	d905      	bls.n	8012e2c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e24:	3301      	adds	r3, #1
 8012e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012e2a:	e113      	b.n	8013054 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e2e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d075      	beq.n	8012f22 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d006      	beq.n	8012e4c <tcp_slowtmr+0xf0>
 8012e3e:	4b62      	ldr	r3, [pc, #392]	; (8012fc8 <tcp_slowtmr+0x26c>)
 8012e40:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012e44:	4965      	ldr	r1, [pc, #404]	; (8012fdc <tcp_slowtmr+0x280>)
 8012e46:	4862      	ldr	r0, [pc, #392]	; (8012fd0 <tcp_slowtmr+0x274>)
 8012e48:	f006 f880 	bl	8018f4c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d106      	bne.n	8012e62 <tcp_slowtmr+0x106>
 8012e54:	4b5c      	ldr	r3, [pc, #368]	; (8012fc8 <tcp_slowtmr+0x26c>)
 8012e56:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012e5a:	4961      	ldr	r1, [pc, #388]	; (8012fe0 <tcp_slowtmr+0x284>)
 8012e5c:	485c      	ldr	r0, [pc, #368]	; (8012fd0 <tcp_slowtmr+0x274>)
 8012e5e:	f006 f875 	bl	8018f4c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e64:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8012e68:	2b0b      	cmp	r3, #11
 8012e6a:	d905      	bls.n	8012e78 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e70:	3301      	adds	r3, #1
 8012e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012e76:	e0ed      	b.n	8013054 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e7a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012e7e:	3b01      	subs	r3, #1
 8012e80:	4a58      	ldr	r2, [pc, #352]	; (8012fe4 <tcp_slowtmr+0x288>)
 8012e82:	5cd3      	ldrb	r3, [r2, r3]
 8012e84:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e88:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8012e8c:	7c7a      	ldrb	r2, [r7, #17]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d907      	bls.n	8012ea2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e94:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8012e98:	3301      	adds	r3, #1
 8012e9a:	b2da      	uxtb	r2, r3
 8012e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e9e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8012ea8:	7c7a      	ldrb	r2, [r7, #17]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	f200 80d2 	bhi.w	8013054 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012eb0:	2301      	movs	r3, #1
 8012eb2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d108      	bne.n	8012ed0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012ebe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ec0:	f004 fd2a 	bl	8017918 <tcp_zero_window_probe>
 8012ec4:	4603      	mov	r3, r0
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d014      	beq.n	8012ef4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8012eca:	2300      	movs	r3, #0
 8012ecc:	623b      	str	r3, [r7, #32]
 8012ece:	e011      	b.n	8012ef4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ed2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012eda:	f003 fbef 	bl	80166bc <tcp_split_unsent_seg>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d107      	bne.n	8012ef4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8012ee4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ee6:	f003 fe6f 	bl	8016bc8 <tcp_output>
 8012eea:	4603      	mov	r3, r0
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d101      	bne.n	8012ef4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8012ef4:	6a3b      	ldr	r3, [r7, #32]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	f000 80ac 	beq.w	8013054 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8012efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012efe:	2200      	movs	r2, #0
 8012f00:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f06:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012f0a:	2b06      	cmp	r3, #6
 8012f0c:	f200 80a2 	bhi.w	8013054 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f12:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012f16:	3301      	adds	r3, #1
 8012f18:	b2da      	uxtb	r2, r3
 8012f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f1c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8012f20:	e098      	b.n	8013054 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f24:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	db0f      	blt.n	8012f4c <tcp_slowtmr+0x1f0>
 8012f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012f32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012f36:	4293      	cmp	r3, r2
 8012f38:	d008      	beq.n	8012f4c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8012f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f3c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012f40:	b29b      	uxth	r3, r3
 8012f42:	3301      	adds	r3, #1
 8012f44:	b29b      	uxth	r3, r3
 8012f46:	b21a      	sxth	r2, r3
 8012f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f4a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f4e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f54:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012f58:	429a      	cmp	r2, r3
 8012f5a:	db7b      	blt.n	8013054 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012f5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f5e:	f004 f925 	bl	80171ac <tcp_rexmit_rto_prepare>
 8012f62:	4603      	mov	r3, r0
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d007      	beq.n	8012f78 <tcp_slowtmr+0x21c>
 8012f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d171      	bne.n	8013054 <tcp_slowtmr+0x2f8>
 8012f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d06d      	beq.n	8013054 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8012f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f7a:	7d1b      	ldrb	r3, [r3, #20]
 8012f7c:	2b02      	cmp	r3, #2
 8012f7e:	d03a      	beq.n	8012ff6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f86:	2b0c      	cmp	r3, #12
 8012f88:	bf28      	it	cs
 8012f8a:	230c      	movcs	r3, #12
 8012f8c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f90:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012f94:	10db      	asrs	r3, r3, #3
 8012f96:	b21b      	sxth	r3, r3
 8012f98:	461a      	mov	r2, r3
 8012f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f9c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012fa0:	4413      	add	r3, r2
 8012fa2:	7efa      	ldrb	r2, [r7, #27]
 8012fa4:	4910      	ldr	r1, [pc, #64]	; (8012fe8 <tcp_slowtmr+0x28c>)
 8012fa6:	5c8a      	ldrb	r2, [r1, r2]
 8012fa8:	4093      	lsls	r3, r2
 8012faa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012fac:	697b      	ldr	r3, [r7, #20]
 8012fae:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012fb2:	4293      	cmp	r3, r2
 8012fb4:	dc1a      	bgt.n	8012fec <tcp_slowtmr+0x290>
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	b21a      	sxth	r2, r3
 8012fba:	e019      	b.n	8012ff0 <tcp_slowtmr+0x294>
 8012fbc:	2400b2a8 	.word	0x2400b2a8
 8012fc0:	2400719a 	.word	0x2400719a
 8012fc4:	2400b2a4 	.word	0x2400b2a4
 8012fc8:	0801d474 	.word	0x0801d474
 8012fcc:	0801d7fc 	.word	0x0801d7fc
 8012fd0:	0801d4fc 	.word	0x0801d4fc
 8012fd4:	0801d828 	.word	0x0801d828
 8012fd8:	0801d854 	.word	0x0801d854
 8012fdc:	0801d884 	.word	0x0801d884
 8012fe0:	0801d8b8 	.word	0x0801d8b8
 8012fe4:	0801d45c 	.word	0x0801d45c
 8012fe8:	0801d44c 	.word	0x0801d44c
 8012fec:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8012ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ffe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013004:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013008:	4293      	cmp	r3, r2
 801300a:	bf28      	it	cs
 801300c:	4613      	movcs	r3, r2
 801300e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013010:	8a7b      	ldrh	r3, [r7, #18]
 8013012:	085b      	lsrs	r3, r3, #1
 8013014:	b29a      	uxth	r2, r3
 8013016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013018:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801301e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013026:	005b      	lsls	r3, r3, #1
 8013028:	b29b      	uxth	r3, r3
 801302a:	429a      	cmp	r2, r3
 801302c:	d206      	bcs.n	801303c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013032:	005b      	lsls	r3, r3, #1
 8013034:	b29a      	uxth	r2, r3
 8013036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013038:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801303e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013042:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8013046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013048:	2200      	movs	r2, #0
 801304a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801304e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013050:	f004 f91c 	bl	801728c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8013054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013056:	7d1b      	ldrb	r3, [r3, #20]
 8013058:	2b06      	cmp	r3, #6
 801305a:	d111      	bne.n	8013080 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801305c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801305e:	8b5b      	ldrh	r3, [r3, #26]
 8013060:	f003 0310 	and.w	r3, r3, #16
 8013064:	2b00      	cmp	r3, #0
 8013066:	d00b      	beq.n	8013080 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013068:	4b91      	ldr	r3, [pc, #580]	; (80132b0 <tcp_slowtmr+0x554>)
 801306a:	681a      	ldr	r2, [r3, #0]
 801306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306e:	6a1b      	ldr	r3, [r3, #32]
 8013070:	1ad3      	subs	r3, r2, r3
 8013072:	2b28      	cmp	r3, #40	; 0x28
 8013074:	d904      	bls.n	8013080 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8013076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801307a:	3301      	adds	r3, #1
 801307c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013082:	7a5b      	ldrb	r3, [r3, #9]
 8013084:	f003 0308 	and.w	r3, r3, #8
 8013088:	2b00      	cmp	r3, #0
 801308a:	d04a      	beq.n	8013122 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013090:	2b04      	cmp	r3, #4
 8013092:	d003      	beq.n	801309c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8013094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013096:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8013098:	2b07      	cmp	r3, #7
 801309a:	d142      	bne.n	8013122 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801309c:	4b84      	ldr	r3, [pc, #528]	; (80132b0 <tcp_slowtmr+0x554>)
 801309e:	681a      	ldr	r2, [r3, #0]
 80130a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a2:	6a1b      	ldr	r3, [r3, #32]
 80130a4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80130a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130a8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80130ac:	4b81      	ldr	r3, [pc, #516]	; (80132b4 <tcp_slowtmr+0x558>)
 80130ae:	440b      	add	r3, r1
 80130b0:	4981      	ldr	r1, [pc, #516]	; (80132b8 <tcp_slowtmr+0x55c>)
 80130b2:	fba1 1303 	umull	r1, r3, r1, r3
 80130b6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d90a      	bls.n	80130d2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80130bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130c0:	3301      	adds	r3, #1
 80130c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80130c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80130ca:	3301      	adds	r3, #1
 80130cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80130d0:	e027      	b.n	8013122 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80130d2:	4b77      	ldr	r3, [pc, #476]	; (80132b0 <tcp_slowtmr+0x554>)
 80130d4:	681a      	ldr	r2, [r3, #0]
 80130d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d8:	6a1b      	ldr	r3, [r3, #32]
 80130da:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80130dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130de:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80130e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130e4:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80130e8:	4618      	mov	r0, r3
 80130ea:	4b74      	ldr	r3, [pc, #464]	; (80132bc <tcp_slowtmr+0x560>)
 80130ec:	fb03 f300 	mul.w	r3, r3, r0
 80130f0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80130f2:	4971      	ldr	r1, [pc, #452]	; (80132b8 <tcp_slowtmr+0x55c>)
 80130f4:	fba1 1303 	umull	r1, r3, r1, r3
 80130f8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d911      	bls.n	8013122 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80130fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013100:	f004 fbca 	bl	8017898 <tcp_keepalive>
 8013104:	4603      	mov	r3, r0
 8013106:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801310a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801310e:	2b00      	cmp	r3, #0
 8013110:	d107      	bne.n	8013122 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8013112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013114:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 8013118:	3301      	adds	r3, #1
 801311a:	b2da      	uxtb	r2, r3
 801311c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311e:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      tcp_free_ooseq(pcb);
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8013122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013124:	7d1b      	ldrb	r3, [r3, #20]
 8013126:	2b03      	cmp	r3, #3
 8013128:	d10b      	bne.n	8013142 <tcp_slowtmr+0x3e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801312a:	4b61      	ldr	r3, [pc, #388]	; (80132b0 <tcp_slowtmr+0x554>)
 801312c:	681a      	ldr	r2, [r3, #0]
 801312e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013130:	6a1b      	ldr	r3, [r3, #32]
 8013132:	1ad3      	subs	r3, r2, r3
 8013134:	2b28      	cmp	r3, #40	; 0x28
 8013136:	d904      	bls.n	8013142 <tcp_slowtmr+0x3e6>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8013138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801313c:	3301      	adds	r3, #1
 801313e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8013142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013144:	7d1b      	ldrb	r3, [r3, #20]
 8013146:	2b09      	cmp	r3, #9
 8013148:	d10b      	bne.n	8013162 <tcp_slowtmr+0x406>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801314a:	4b59      	ldr	r3, [pc, #356]	; (80132b0 <tcp_slowtmr+0x554>)
 801314c:	681a      	ldr	r2, [r3, #0]
 801314e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013150:	6a1b      	ldr	r3, [r3, #32]
 8013152:	1ad3      	subs	r3, r2, r3
 8013154:	2bf0      	cmp	r3, #240	; 0xf0
 8013156:	d904      	bls.n	8013162 <tcp_slowtmr+0x406>
        ++pcb_remove;
 8013158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801315c:	3301      	adds	r3, #1
 801315e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013166:	2b00      	cmp	r3, #0
 8013168:	d060      	beq.n	801322c <tcp_slowtmr+0x4d0>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801316a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801316c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013170:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8013172:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013174:	f000 fca0 	bl	8013ab8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8013178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801317a:	2b00      	cmp	r3, #0
 801317c:	d010      	beq.n	80131a0 <tcp_slowtmr+0x444>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801317e:	4b50      	ldr	r3, [pc, #320]	; (80132c0 <tcp_slowtmr+0x564>)
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013184:	429a      	cmp	r2, r3
 8013186:	d106      	bne.n	8013196 <tcp_slowtmr+0x43a>
 8013188:	4b4e      	ldr	r3, [pc, #312]	; (80132c4 <tcp_slowtmr+0x568>)
 801318a:	f240 526d 	movw	r2, #1389	; 0x56d
 801318e:	494e      	ldr	r1, [pc, #312]	; (80132c8 <tcp_slowtmr+0x56c>)
 8013190:	484e      	ldr	r0, [pc, #312]	; (80132cc <tcp_slowtmr+0x570>)
 8013192:	f005 fedb 	bl	8018f4c <iprintf>
        prev->next = pcb->next;
 8013196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013198:	68da      	ldr	r2, [r3, #12]
 801319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801319c:	60da      	str	r2, [r3, #12]
 801319e:	e00f      	b.n	80131c0 <tcp_slowtmr+0x464>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80131a0:	4b47      	ldr	r3, [pc, #284]	; (80132c0 <tcp_slowtmr+0x564>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d006      	beq.n	80131b8 <tcp_slowtmr+0x45c>
 80131aa:	4b46      	ldr	r3, [pc, #280]	; (80132c4 <tcp_slowtmr+0x568>)
 80131ac:	f240 5271 	movw	r2, #1393	; 0x571
 80131b0:	4947      	ldr	r1, [pc, #284]	; (80132d0 <tcp_slowtmr+0x574>)
 80131b2:	4846      	ldr	r0, [pc, #280]	; (80132cc <tcp_slowtmr+0x570>)
 80131b4:	f005 feca 	bl	8018f4c <iprintf>
        tcp_active_pcbs = pcb->next;
 80131b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ba:	68db      	ldr	r3, [r3, #12]
 80131bc:	4a40      	ldr	r2, [pc, #256]	; (80132c0 <tcp_slowtmr+0x564>)
 80131be:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80131c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d013      	beq.n	80131f0 <tcp_slowtmr+0x494>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80131c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ca:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80131cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ce:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80131d0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80131d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d4:	3304      	adds	r3, #4
 80131d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80131d8:	8ad2      	ldrh	r2, [r2, #22]
 80131da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80131dc:	8b09      	ldrh	r1, [r1, #24]
 80131de:	9102      	str	r1, [sp, #8]
 80131e0:	9201      	str	r2, [sp, #4]
 80131e2:	9300      	str	r3, [sp, #0]
 80131e4:	462b      	mov	r3, r5
 80131e6:	4622      	mov	r2, r4
 80131e8:	4601      	mov	r1, r0
 80131ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80131ec:	f004 faa0 	bl	8017730 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80131f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f2:	691b      	ldr	r3, [r3, #16]
 80131f4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80131f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f8:	7d1b      	ldrb	r3, [r3, #20]
 80131fa:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80131fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013202:	68db      	ldr	r3, [r3, #12]
 8013204:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013206:	6838      	ldr	r0, [r7, #0]
 8013208:	f7fe fef6 	bl	8011ff8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801320c:	4b31      	ldr	r3, [pc, #196]	; (80132d4 <tcp_slowtmr+0x578>)
 801320e:	2200      	movs	r2, #0
 8013210:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d004      	beq.n	8013222 <tcp_slowtmr+0x4c6>
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	f06f 010c 	mvn.w	r1, #12
 801321e:	68b8      	ldr	r0, [r7, #8]
 8013220:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013222:	4b2c      	ldr	r3, [pc, #176]	; (80132d4 <tcp_slowtmr+0x578>)
 8013224:	781b      	ldrb	r3, [r3, #0]
 8013226:	2b00      	cmp	r3, #0
 8013228:	d037      	beq.n	801329a <tcp_slowtmr+0x53e>
        goto tcp_slowtmr_start;
 801322a:	e5a8      	b.n	8012d7e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801322e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8013230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013232:	68db      	ldr	r3, [r3, #12]
 8013234:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8013236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013238:	7f1b      	ldrb	r3, [r3, #28]
 801323a:	3301      	adds	r3, #1
 801323c:	b2da      	uxtb	r2, r3
 801323e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013240:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013244:	7f1a      	ldrb	r2, [r3, #28]
 8013246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013248:	7f5b      	ldrb	r3, [r3, #29]
 801324a:	429a      	cmp	r2, r3
 801324c:	d325      	bcc.n	801329a <tcp_slowtmr+0x53e>
        prev->polltmr = 0;
 801324e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013250:	2200      	movs	r2, #0
 8013252:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8013254:	4b1f      	ldr	r3, [pc, #124]	; (80132d4 <tcp_slowtmr+0x578>)
 8013256:	2200      	movs	r2, #0
 8013258:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013260:	2b00      	cmp	r3, #0
 8013262:	d00b      	beq.n	801327c <tcp_slowtmr+0x520>
 8013264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801326a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801326c:	6912      	ldr	r2, [r2, #16]
 801326e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013270:	4610      	mov	r0, r2
 8013272:	4798      	blx	r3
 8013274:	4603      	mov	r3, r0
 8013276:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801327a:	e002      	b.n	8013282 <tcp_slowtmr+0x526>
 801327c:	2300      	movs	r3, #0
 801327e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8013282:	4b14      	ldr	r3, [pc, #80]	; (80132d4 <tcp_slowtmr+0x578>)
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d000      	beq.n	801328c <tcp_slowtmr+0x530>
          goto tcp_slowtmr_start;
 801328a:	e578      	b.n	8012d7e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801328c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8013290:	2b00      	cmp	r3, #0
 8013292:	d102      	bne.n	801329a <tcp_slowtmr+0x53e>
          tcp_output(prev);
 8013294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013296:	f003 fc97 	bl	8016bc8 <tcp_output>
  while (pcb != NULL) {
 801329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329c:	2b00      	cmp	r3, #0
 801329e:	f47f ad74 	bne.w	8012d8a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80132a2:	2300      	movs	r3, #0
 80132a4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80132a6:	4b0c      	ldr	r3, [pc, #48]	; (80132d8 <tcp_slowtmr+0x57c>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80132ac:	e069      	b.n	8013382 <tcp_slowtmr+0x626>
 80132ae:	bf00      	nop
 80132b0:	2400b2a8 	.word	0x2400b2a8
 80132b4:	000a4cb8 	.word	0x000a4cb8
 80132b8:	10624dd3 	.word	0x10624dd3
 80132bc:	000124f8 	.word	0x000124f8
 80132c0:	2400b2a4 	.word	0x2400b2a4
 80132c4:	0801d474 	.word	0x0801d474
 80132c8:	0801d8f0 	.word	0x0801d8f0
 80132cc:	0801d4fc 	.word	0x0801d4fc
 80132d0:	0801d91c 	.word	0x0801d91c
 80132d4:	2400b2a0 	.word	0x2400b2a0
 80132d8:	2400b2b4 	.word	0x2400b2b4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80132dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132de:	7d1b      	ldrb	r3, [r3, #20]
 80132e0:	2b0a      	cmp	r3, #10
 80132e2:	d006      	beq.n	80132f2 <tcp_slowtmr+0x596>
 80132e4:	4b2b      	ldr	r3, [pc, #172]	; (8013394 <tcp_slowtmr+0x638>)
 80132e6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80132ea:	492b      	ldr	r1, [pc, #172]	; (8013398 <tcp_slowtmr+0x63c>)
 80132ec:	482b      	ldr	r0, [pc, #172]	; (801339c <tcp_slowtmr+0x640>)
 80132ee:	f005 fe2d 	bl	8018f4c <iprintf>
    pcb_remove = 0;
 80132f2:	2300      	movs	r3, #0
 80132f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80132f8:	4b29      	ldr	r3, [pc, #164]	; (80133a0 <tcp_slowtmr+0x644>)
 80132fa:	681a      	ldr	r2, [r3, #0]
 80132fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fe:	6a1b      	ldr	r3, [r3, #32]
 8013300:	1ad3      	subs	r3, r2, r3
 8013302:	2bf0      	cmp	r3, #240	; 0xf0
 8013304:	d904      	bls.n	8013310 <tcp_slowtmr+0x5b4>
      ++pcb_remove;
 8013306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801330a:	3301      	adds	r3, #1
 801330c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013314:	2b00      	cmp	r3, #0
 8013316:	d02f      	beq.n	8013378 <tcp_slowtmr+0x61c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801331a:	f000 fbcd 	bl	8013ab8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801331e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013320:	2b00      	cmp	r3, #0
 8013322:	d010      	beq.n	8013346 <tcp_slowtmr+0x5ea>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013324:	4b1f      	ldr	r3, [pc, #124]	; (80133a4 <tcp_slowtmr+0x648>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801332a:	429a      	cmp	r2, r3
 801332c:	d106      	bne.n	801333c <tcp_slowtmr+0x5e0>
 801332e:	4b19      	ldr	r3, [pc, #100]	; (8013394 <tcp_slowtmr+0x638>)
 8013330:	f240 52af 	movw	r2, #1455	; 0x5af
 8013334:	491c      	ldr	r1, [pc, #112]	; (80133a8 <tcp_slowtmr+0x64c>)
 8013336:	4819      	ldr	r0, [pc, #100]	; (801339c <tcp_slowtmr+0x640>)
 8013338:	f005 fe08 	bl	8018f4c <iprintf>
        prev->next = pcb->next;
 801333c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801333e:	68da      	ldr	r2, [r3, #12]
 8013340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013342:	60da      	str	r2, [r3, #12]
 8013344:	e00f      	b.n	8013366 <tcp_slowtmr+0x60a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013346:	4b17      	ldr	r3, [pc, #92]	; (80133a4 <tcp_slowtmr+0x648>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801334c:	429a      	cmp	r2, r3
 801334e:	d006      	beq.n	801335e <tcp_slowtmr+0x602>
 8013350:	4b10      	ldr	r3, [pc, #64]	; (8013394 <tcp_slowtmr+0x638>)
 8013352:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8013356:	4915      	ldr	r1, [pc, #84]	; (80133ac <tcp_slowtmr+0x650>)
 8013358:	4810      	ldr	r0, [pc, #64]	; (801339c <tcp_slowtmr+0x640>)
 801335a:	f005 fdf7 	bl	8018f4c <iprintf>
        tcp_tw_pcbs = pcb->next;
 801335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013360:	68db      	ldr	r3, [r3, #12]
 8013362:	4a10      	ldr	r2, [pc, #64]	; (80133a4 <tcp_slowtmr+0x648>)
 8013364:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013368:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801336a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801336c:	68db      	ldr	r3, [r3, #12]
 801336e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013370:	69f8      	ldr	r0, [r7, #28]
 8013372:	f7fe fe41 	bl	8011ff8 <tcp_free>
 8013376:	e004      	b.n	8013382 <tcp_slowtmr+0x626>
    } else {
      prev = pcb;
 8013378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801337c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013384:	2b00      	cmp	r3, #0
 8013386:	d1a9      	bne.n	80132dc <tcp_slowtmr+0x580>
    }
  }
}
 8013388:	bf00      	nop
 801338a:	bf00      	nop
 801338c:	3730      	adds	r7, #48	; 0x30
 801338e:	46bd      	mov	sp, r7
 8013390:	bdb0      	pop	{r4, r5, r7, pc}
 8013392:	bf00      	nop
 8013394:	0801d474 	.word	0x0801d474
 8013398:	0801d948 	.word	0x0801d948
 801339c:	0801d4fc 	.word	0x0801d4fc
 80133a0:	2400b2a8 	.word	0x2400b2a8
 80133a4:	2400b2b4 	.word	0x2400b2b4
 80133a8:	0801d978 	.word	0x0801d978
 80133ac:	0801d9a0 	.word	0x0801d9a0

080133b0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80133b6:	4b2d      	ldr	r3, [pc, #180]	; (801346c <tcp_fasttmr+0xbc>)
 80133b8:	781b      	ldrb	r3, [r3, #0]
 80133ba:	3301      	adds	r3, #1
 80133bc:	b2da      	uxtb	r2, r3
 80133be:	4b2b      	ldr	r3, [pc, #172]	; (801346c <tcp_fasttmr+0xbc>)
 80133c0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80133c2:	4b2b      	ldr	r3, [pc, #172]	; (8013470 <tcp_fasttmr+0xc0>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80133c8:	e048      	b.n	801345c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	7f9a      	ldrb	r2, [r3, #30]
 80133ce:	4b27      	ldr	r3, [pc, #156]	; (801346c <tcp_fasttmr+0xbc>)
 80133d0:	781b      	ldrb	r3, [r3, #0]
 80133d2:	429a      	cmp	r2, r3
 80133d4:	d03f      	beq.n	8013456 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80133d6:	4b25      	ldr	r3, [pc, #148]	; (801346c <tcp_fasttmr+0xbc>)
 80133d8:	781a      	ldrb	r2, [r3, #0]
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	8b5b      	ldrh	r3, [r3, #26]
 80133e2:	f003 0301 	and.w	r3, r3, #1
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d010      	beq.n	801340c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	8b5b      	ldrh	r3, [r3, #26]
 80133ee:	f043 0302 	orr.w	r3, r3, #2
 80133f2:	b29a      	uxth	r2, r3
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f003 fbe5 	bl	8016bc8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	8b5b      	ldrh	r3, [r3, #26]
 8013402:	f023 0303 	bic.w	r3, r3, #3
 8013406:	b29a      	uxth	r2, r3
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	8b5b      	ldrh	r3, [r3, #26]
 8013410:	f003 0308 	and.w	r3, r3, #8
 8013414:	2b00      	cmp	r3, #0
 8013416:	d009      	beq.n	801342c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	8b5b      	ldrh	r3, [r3, #26]
 801341c:	f023 0308 	bic.w	r3, r3, #8
 8013420:	b29a      	uxth	r2, r3
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f7fe ff7a 	bl	8012320 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	68db      	ldr	r3, [r3, #12]
 8013430:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013436:	2b00      	cmp	r3, #0
 8013438:	d00a      	beq.n	8013450 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801343a:	4b0e      	ldr	r3, [pc, #56]	; (8013474 <tcp_fasttmr+0xc4>)
 801343c:	2200      	movs	r2, #0
 801343e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f000 f819 	bl	8013478 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013446:	4b0b      	ldr	r3, [pc, #44]	; (8013474 <tcp_fasttmr+0xc4>)
 8013448:	781b      	ldrb	r3, [r3, #0]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d000      	beq.n	8013450 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801344e:	e7b8      	b.n	80133c2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	607b      	str	r3, [r7, #4]
 8013454:	e002      	b.n	801345c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	68db      	ldr	r3, [r3, #12]
 801345a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d1b3      	bne.n	80133ca <tcp_fasttmr+0x1a>
    }
  }
}
 8013462:	bf00      	nop
 8013464:	bf00      	nop
 8013466:	3708      	adds	r7, #8
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	2400719a 	.word	0x2400719a
 8013470:	2400b2a4 	.word	0x2400b2a4
 8013474:	2400b2a0 	.word	0x2400b2a0

08013478 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013478:	b590      	push	{r4, r7, lr}
 801347a:	b085      	sub	sp, #20
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d109      	bne.n	801349a <tcp_process_refused_data+0x22>
 8013486:	4b38      	ldr	r3, [pc, #224]	; (8013568 <tcp_process_refused_data+0xf0>)
 8013488:	f240 6209 	movw	r2, #1545	; 0x609
 801348c:	4937      	ldr	r1, [pc, #220]	; (801356c <tcp_process_refused_data+0xf4>)
 801348e:	4838      	ldr	r0, [pc, #224]	; (8013570 <tcp_process_refused_data+0xf8>)
 8013490:	f005 fd5c 	bl	8018f4c <iprintf>
 8013494:	f06f 030f 	mvn.w	r3, #15
 8013498:	e061      	b.n	801355e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801349e:	7b5b      	ldrb	r3, [r3, #13]
 80134a0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134a6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	2200      	movs	r2, #0
 80134ac:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d00b      	beq.n	80134d0 <tcp_process_refused_data+0x58>
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	6918      	ldr	r0, [r3, #16]
 80134c2:	2300      	movs	r3, #0
 80134c4:	68ba      	ldr	r2, [r7, #8]
 80134c6:	6879      	ldr	r1, [r7, #4]
 80134c8:	47a0      	blx	r4
 80134ca:	4603      	mov	r3, r0
 80134cc:	73fb      	strb	r3, [r7, #15]
 80134ce:	e007      	b.n	80134e0 <tcp_process_refused_data+0x68>
 80134d0:	2300      	movs	r3, #0
 80134d2:	68ba      	ldr	r2, [r7, #8]
 80134d4:	6879      	ldr	r1, [r7, #4]
 80134d6:	2000      	movs	r0, #0
 80134d8:	f000 f87a 	bl	80135d0 <tcp_recv_null>
 80134dc:	4603      	mov	r3, r0
 80134de:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80134e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d12b      	bne.n	8013540 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80134e8:	7bbb      	ldrb	r3, [r7, #14]
 80134ea:	f003 0320 	and.w	r3, r3, #32
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d034      	beq.n	801355c <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80134f6:	f640 3268 	movw	r2, #2920	; 0xb68
 80134fa:	4293      	cmp	r3, r2
 80134fc:	d005      	beq.n	801350a <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013502:	3301      	adds	r3, #1
 8013504:	b29a      	uxth	r2, r3
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013510:	2b00      	cmp	r3, #0
 8013512:	d00b      	beq.n	801352c <tcp_process_refused_data+0xb4>
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6918      	ldr	r0, [r3, #16]
 801351e:	2300      	movs	r3, #0
 8013520:	2200      	movs	r2, #0
 8013522:	6879      	ldr	r1, [r7, #4]
 8013524:	47a0      	blx	r4
 8013526:	4603      	mov	r3, r0
 8013528:	73fb      	strb	r3, [r7, #15]
 801352a:	e001      	b.n	8013530 <tcp_process_refused_data+0xb8>
 801352c:	2300      	movs	r3, #0
 801352e:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013534:	f113 0f0d 	cmn.w	r3, #13
 8013538:	d110      	bne.n	801355c <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 801353a:	f06f 030c 	mvn.w	r3, #12
 801353e:	e00e      	b.n	801355e <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8013540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013544:	f113 0f0d 	cmn.w	r3, #13
 8013548:	d102      	bne.n	8013550 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801354a:	f06f 030c 	mvn.w	r3, #12
 801354e:	e006      	b.n	801355e <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	68ba      	ldr	r2, [r7, #8]
 8013554:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8013556:	f06f 0304 	mvn.w	r3, #4
 801355a:	e000      	b.n	801355e <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 801355c:	2300      	movs	r3, #0
}
 801355e:	4618      	mov	r0, r3
 8013560:	3714      	adds	r7, #20
 8013562:	46bd      	mov	sp, r7
 8013564:	bd90      	pop	{r4, r7, pc}
 8013566:	bf00      	nop
 8013568:	0801d474 	.word	0x0801d474
 801356c:	0801d9c8 	.word	0x0801d9c8
 8013570:	0801d4fc 	.word	0x0801d4fc

08013574 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801357c:	e007      	b.n	801358e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f000 f80a 	bl	801359e <tcp_seg_free>
    seg = next;
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d1f4      	bne.n	801357e <tcp_segs_free+0xa>
  }
}
 8013594:	bf00      	nop
 8013596:	bf00      	nop
 8013598:	3710      	adds	r7, #16
 801359a:	46bd      	mov	sp, r7
 801359c:	bd80      	pop	{r7, pc}

0801359e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801359e:	b580      	push	{r7, lr}
 80135a0:	b082      	sub	sp, #8
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d00c      	beq.n	80135c6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	685b      	ldr	r3, [r3, #4]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d004      	beq.n	80135be <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	685b      	ldr	r3, [r3, #4]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7fe f8e5 	bl	8011788 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80135be:	6879      	ldr	r1, [r7, #4]
 80135c0:	2003      	movs	r0, #3
 80135c2:	f7fd fa67 	bl	8010a94 <memp_free>
  }
}
 80135c6:	bf00      	nop
 80135c8:	3708      	adds	r7, #8
 80135ca:	46bd      	mov	sp, r7
 80135cc:	bd80      	pop	{r7, pc}
	...

080135d0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80135d0:	b580      	push	{r7, lr}
 80135d2:	b084      	sub	sp, #16
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	60f8      	str	r0, [r7, #12]
 80135d8:	60b9      	str	r1, [r7, #8]
 80135da:	607a      	str	r2, [r7, #4]
 80135dc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d109      	bne.n	80135f8 <tcp_recv_null+0x28>
 80135e4:	4b12      	ldr	r3, [pc, #72]	; (8013630 <tcp_recv_null+0x60>)
 80135e6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80135ea:	4912      	ldr	r1, [pc, #72]	; (8013634 <tcp_recv_null+0x64>)
 80135ec:	4812      	ldr	r0, [pc, #72]	; (8013638 <tcp_recv_null+0x68>)
 80135ee:	f005 fcad 	bl	8018f4c <iprintf>
 80135f2:	f06f 030f 	mvn.w	r3, #15
 80135f6:	e016      	b.n	8013626 <tcp_recv_null+0x56>

  if (p != NULL) {
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d009      	beq.n	8013612 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	891b      	ldrh	r3, [r3, #8]
 8013602:	4619      	mov	r1, r3
 8013604:	68b8      	ldr	r0, [r7, #8]
 8013606:	f7ff f9f9 	bl	80129fc <tcp_recved>
    pbuf_free(p);
 801360a:	6878      	ldr	r0, [r7, #4]
 801360c:	f7fe f8bc 	bl	8011788 <pbuf_free>
 8013610:	e008      	b.n	8013624 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d104      	bne.n	8013624 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801361a:	68b8      	ldr	r0, [r7, #8]
 801361c:	f7fe feea 	bl	80123f4 <tcp_close>
 8013620:	4603      	mov	r3, r0
 8013622:	e000      	b.n	8013626 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013624:	2300      	movs	r3, #0
}
 8013626:	4618      	mov	r0, r3
 8013628:	3710      	adds	r7, #16
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}
 801362e:	bf00      	nop
 8013630:	0801d474 	.word	0x0801d474
 8013634:	0801da0c 	.word	0x0801da0c
 8013638:	0801d4fc 	.word	0x0801d4fc

0801363c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b086      	sub	sp, #24
 8013640:	af00      	add	r7, sp, #0
 8013642:	4603      	mov	r3, r0
 8013644:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801364a:	2b00      	cmp	r3, #0
 801364c:	db01      	blt.n	8013652 <tcp_kill_prio+0x16>
 801364e:	79fb      	ldrb	r3, [r7, #7]
 8013650:	e000      	b.n	8013654 <tcp_kill_prio+0x18>
 8013652:	237f      	movs	r3, #127	; 0x7f
 8013654:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013656:	7afb      	ldrb	r3, [r7, #11]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d034      	beq.n	80136c6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801365c:	7afb      	ldrb	r3, [r7, #11]
 801365e:	3b01      	subs	r3, #1
 8013660:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013662:	2300      	movs	r3, #0
 8013664:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013666:	2300      	movs	r3, #0
 8013668:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801366a:	4b19      	ldr	r3, [pc, #100]	; (80136d0 <tcp_kill_prio+0x94>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	617b      	str	r3, [r7, #20]
 8013670:	e01f      	b.n	80136b2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	7d5b      	ldrb	r3, [r3, #21]
 8013676:	7afa      	ldrb	r2, [r7, #11]
 8013678:	429a      	cmp	r2, r3
 801367a:	d80c      	bhi.n	8013696 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801367c:	697b      	ldr	r3, [r7, #20]
 801367e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013680:	7afa      	ldrb	r2, [r7, #11]
 8013682:	429a      	cmp	r2, r3
 8013684:	d112      	bne.n	80136ac <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013686:	4b13      	ldr	r3, [pc, #76]	; (80136d4 <tcp_kill_prio+0x98>)
 8013688:	681a      	ldr	r2, [r3, #0]
 801368a:	697b      	ldr	r3, [r7, #20]
 801368c:	6a1b      	ldr	r3, [r3, #32]
 801368e:	1ad3      	subs	r3, r2, r3
 8013690:	68fa      	ldr	r2, [r7, #12]
 8013692:	429a      	cmp	r2, r3
 8013694:	d80a      	bhi.n	80136ac <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013696:	4b0f      	ldr	r3, [pc, #60]	; (80136d4 <tcp_kill_prio+0x98>)
 8013698:	681a      	ldr	r2, [r3, #0]
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	6a1b      	ldr	r3, [r3, #32]
 801369e:	1ad3      	subs	r3, r2, r3
 80136a0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80136a2:	697b      	ldr	r3, [r7, #20]
 80136a4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	7d5b      	ldrb	r3, [r3, #21]
 80136aa:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80136ac:	697b      	ldr	r3, [r7, #20]
 80136ae:	68db      	ldr	r3, [r3, #12]
 80136b0:	617b      	str	r3, [r7, #20]
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d1dc      	bne.n	8013672 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d004      	beq.n	80136c8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80136be:	6938      	ldr	r0, [r7, #16]
 80136c0:	f7fe ffd4 	bl	801266c <tcp_abort>
 80136c4:	e000      	b.n	80136c8 <tcp_kill_prio+0x8c>
    return;
 80136c6:	bf00      	nop
  }
}
 80136c8:	3718      	adds	r7, #24
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
 80136ce:	bf00      	nop
 80136d0:	2400b2a4 	.word	0x2400b2a4
 80136d4:	2400b2a8 	.word	0x2400b2a8

080136d8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b086      	sub	sp, #24
 80136dc:	af00      	add	r7, sp, #0
 80136de:	4603      	mov	r3, r0
 80136e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80136e2:	79fb      	ldrb	r3, [r7, #7]
 80136e4:	2b08      	cmp	r3, #8
 80136e6:	d009      	beq.n	80136fc <tcp_kill_state+0x24>
 80136e8:	79fb      	ldrb	r3, [r7, #7]
 80136ea:	2b09      	cmp	r3, #9
 80136ec:	d006      	beq.n	80136fc <tcp_kill_state+0x24>
 80136ee:	4b1a      	ldr	r3, [pc, #104]	; (8013758 <tcp_kill_state+0x80>)
 80136f0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80136f4:	4919      	ldr	r1, [pc, #100]	; (801375c <tcp_kill_state+0x84>)
 80136f6:	481a      	ldr	r0, [pc, #104]	; (8013760 <tcp_kill_state+0x88>)
 80136f8:	f005 fc28 	bl	8018f4c <iprintf>

  inactivity = 0;
 80136fc:	2300      	movs	r3, #0
 80136fe:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013700:	2300      	movs	r3, #0
 8013702:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013704:	4b17      	ldr	r3, [pc, #92]	; (8013764 <tcp_kill_state+0x8c>)
 8013706:	681b      	ldr	r3, [r3, #0]
 8013708:	617b      	str	r3, [r7, #20]
 801370a:	e017      	b.n	801373c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	7d1b      	ldrb	r3, [r3, #20]
 8013710:	79fa      	ldrb	r2, [r7, #7]
 8013712:	429a      	cmp	r2, r3
 8013714:	d10f      	bne.n	8013736 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013716:	4b14      	ldr	r3, [pc, #80]	; (8013768 <tcp_kill_state+0x90>)
 8013718:	681a      	ldr	r2, [r3, #0]
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	6a1b      	ldr	r3, [r3, #32]
 801371e:	1ad3      	subs	r3, r2, r3
 8013720:	68fa      	ldr	r2, [r7, #12]
 8013722:	429a      	cmp	r2, r3
 8013724:	d807      	bhi.n	8013736 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013726:	4b10      	ldr	r3, [pc, #64]	; (8013768 <tcp_kill_state+0x90>)
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	6a1b      	ldr	r3, [r3, #32]
 801372e:	1ad3      	subs	r3, r2, r3
 8013730:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8013732:	697b      	ldr	r3, [r7, #20]
 8013734:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013736:	697b      	ldr	r3, [r7, #20]
 8013738:	68db      	ldr	r3, [r3, #12]
 801373a:	617b      	str	r3, [r7, #20]
 801373c:	697b      	ldr	r3, [r7, #20]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d1e4      	bne.n	801370c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8013742:	693b      	ldr	r3, [r7, #16]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d003      	beq.n	8013750 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013748:	2100      	movs	r1, #0
 801374a:	6938      	ldr	r0, [r7, #16]
 801374c:	f7fe feda 	bl	8012504 <tcp_abandon>
  }
}
 8013750:	bf00      	nop
 8013752:	3718      	adds	r7, #24
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}
 8013758:	0801d474 	.word	0x0801d474
 801375c:	0801da28 	.word	0x0801da28
 8013760:	0801d4fc 	.word	0x0801d4fc
 8013764:	2400b2a4 	.word	0x2400b2a4
 8013768:	2400b2a8 	.word	0x2400b2a8

0801376c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801376c:	b580      	push	{r7, lr}
 801376e:	b084      	sub	sp, #16
 8013770:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013772:	2300      	movs	r3, #0
 8013774:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013776:	2300      	movs	r3, #0
 8013778:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801377a:	4b12      	ldr	r3, [pc, #72]	; (80137c4 <tcp_kill_timewait+0x58>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	60fb      	str	r3, [r7, #12]
 8013780:	e012      	b.n	80137a8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013782:	4b11      	ldr	r3, [pc, #68]	; (80137c8 <tcp_kill_timewait+0x5c>)
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	68fb      	ldr	r3, [r7, #12]
 8013788:	6a1b      	ldr	r3, [r3, #32]
 801378a:	1ad3      	subs	r3, r2, r3
 801378c:	687a      	ldr	r2, [r7, #4]
 801378e:	429a      	cmp	r2, r3
 8013790:	d807      	bhi.n	80137a2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013792:	4b0d      	ldr	r3, [pc, #52]	; (80137c8 <tcp_kill_timewait+0x5c>)
 8013794:	681a      	ldr	r2, [r3, #0]
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	6a1b      	ldr	r3, [r3, #32]
 801379a:	1ad3      	subs	r3, r2, r3
 801379c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80137a2:	68fb      	ldr	r3, [r7, #12]
 80137a4:	68db      	ldr	r3, [r3, #12]
 80137a6:	60fb      	str	r3, [r7, #12]
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d1e9      	bne.n	8013782 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d002      	beq.n	80137ba <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80137b4:	68b8      	ldr	r0, [r7, #8]
 80137b6:	f7fe ff59 	bl	801266c <tcp_abort>
  }
}
 80137ba:	bf00      	nop
 80137bc:	3710      	adds	r7, #16
 80137be:	46bd      	mov	sp, r7
 80137c0:	bd80      	pop	{r7, pc}
 80137c2:	bf00      	nop
 80137c4:	2400b2b4 	.word	0x2400b2b4
 80137c8:	2400b2a8 	.word	0x2400b2a8

080137cc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80137d2:	4b10      	ldr	r3, [pc, #64]	; (8013814 <tcp_handle_closepend+0x48>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80137d8:	e014      	b.n	8013804 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	68db      	ldr	r3, [r3, #12]
 80137de:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	8b5b      	ldrh	r3, [r3, #26]
 80137e4:	f003 0308 	and.w	r3, r3, #8
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d009      	beq.n	8013800 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	8b5b      	ldrh	r3, [r3, #26]
 80137f0:	f023 0308 	bic.w	r3, r3, #8
 80137f4:	b29a      	uxth	r2, r3
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80137fa:	6878      	ldr	r0, [r7, #4]
 80137fc:	f7fe fd90 	bl	8012320 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013800:	683b      	ldr	r3, [r7, #0]
 8013802:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d1e7      	bne.n	80137da <tcp_handle_closepend+0xe>
  }
}
 801380a:	bf00      	nop
 801380c:	bf00      	nop
 801380e:	3708      	adds	r7, #8
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}
 8013814:	2400b2a4 	.word	0x2400b2a4

08013818 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b084      	sub	sp, #16
 801381c:	af00      	add	r7, sp, #0
 801381e:	4603      	mov	r3, r0
 8013820:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013822:	2001      	movs	r0, #1
 8013824:	f7fd f8c0 	bl	80109a8 <memp_malloc>
 8013828:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d126      	bne.n	801387e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013830:	f7ff ffcc 	bl	80137cc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013834:	f7ff ff9a 	bl	801376c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013838:	2001      	movs	r0, #1
 801383a:	f7fd f8b5 	bl	80109a8 <memp_malloc>
 801383e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	2b00      	cmp	r3, #0
 8013844:	d11b      	bne.n	801387e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013846:	2009      	movs	r0, #9
 8013848:	f7ff ff46 	bl	80136d8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801384c:	2001      	movs	r0, #1
 801384e:	f7fd f8ab 	bl	80109a8 <memp_malloc>
 8013852:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	2b00      	cmp	r3, #0
 8013858:	d111      	bne.n	801387e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801385a:	2008      	movs	r0, #8
 801385c:	f7ff ff3c 	bl	80136d8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013860:	2001      	movs	r0, #1
 8013862:	f7fd f8a1 	bl	80109a8 <memp_malloc>
 8013866:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	2b00      	cmp	r3, #0
 801386c:	d107      	bne.n	801387e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801386e:	79fb      	ldrb	r3, [r7, #7]
 8013870:	4618      	mov	r0, r3
 8013872:	f7ff fee3 	bl	801363c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013876:	2001      	movs	r0, #1
 8013878:	f7fd f896 	bl	80109a8 <memp_malloc>
 801387c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	2b00      	cmp	r3, #0
 8013882:	d03f      	beq.n	8013904 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013884:	2298      	movs	r2, #152	; 0x98
 8013886:	2100      	movs	r1, #0
 8013888:	68f8      	ldr	r0, [r7, #12]
 801388a:	f005 fb57 	bl	8018f3c <memset>
    pcb->prio = prio;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	79fa      	ldrb	r2, [r7, #7]
 8013892:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801389a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	f640 3268 	movw	r2, #2920	; 0xb68
 80138a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	22ff      	movs	r2, #255	; 0xff
 80138b2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80138b4:	68fb      	ldr	r3, [r7, #12]
 80138b6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80138ba:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	2206      	movs	r2, #6
 80138c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	2206      	movs	r2, #6
 80138c8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80138d0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	2201      	movs	r2, #1
 80138d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80138da:	4b0d      	ldr	r3, [pc, #52]	; (8013910 <tcp_alloc+0xf8>)
 80138dc:	681a      	ldr	r2, [r3, #0]
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80138e2:	4b0c      	ldr	r3, [pc, #48]	; (8013914 <tcp_alloc+0xfc>)
 80138e4:	781a      	ldrb	r2, [r3, #0]
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80138f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	4a08      	ldr	r2, [pc, #32]	; (8013918 <tcp_alloc+0x100>)
 80138f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80138fc:	68fb      	ldr	r3, [r7, #12]
 80138fe:	4a07      	ldr	r2, [pc, #28]	; (801391c <tcp_alloc+0x104>)
 8013900:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013904:	68fb      	ldr	r3, [r7, #12]
}
 8013906:	4618      	mov	r0, r3
 8013908:	3710      	adds	r7, #16
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}
 801390e:	bf00      	nop
 8013910:	2400b2a8 	.word	0x2400b2a8
 8013914:	2400719a 	.word	0x2400719a
 8013918:	080135d1 	.word	0x080135d1
 801391c:	006ddd00 	.word	0x006ddd00

08013920 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b084      	sub	sp, #16
 8013924:	af00      	add	r7, sp, #0
 8013926:	4603      	mov	r3, r0
 8013928:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801392a:	2040      	movs	r0, #64	; 0x40
 801392c:	f7ff ff74 	bl	8013818 <tcp_alloc>
 8013930:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013932:	68fb      	ldr	r3, [r7, #12]
}
 8013934:	4618      	mov	r0, r3
 8013936:	3710      	adds	r7, #16
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}

0801393c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801393c:	b480      	push	{r7}
 801393e:	b083      	sub	sp, #12
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d002      	beq.n	8013952 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	683a      	ldr	r2, [r7, #0]
 8013950:	611a      	str	r2, [r3, #16]
  }
}
 8013952:	bf00      	nop
 8013954:	370c      	adds	r7, #12
 8013956:	46bd      	mov	sp, r7
 8013958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395c:	4770      	bx	lr
	...

08013960 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b082      	sub	sp, #8
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d00e      	beq.n	801398e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	7d1b      	ldrb	r3, [r3, #20]
 8013974:	2b01      	cmp	r3, #1
 8013976:	d106      	bne.n	8013986 <tcp_recv+0x26>
 8013978:	4b07      	ldr	r3, [pc, #28]	; (8013998 <tcp_recv+0x38>)
 801397a:	f240 72df 	movw	r2, #2015	; 0x7df
 801397e:	4907      	ldr	r1, [pc, #28]	; (801399c <tcp_recv+0x3c>)
 8013980:	4807      	ldr	r0, [pc, #28]	; (80139a0 <tcp_recv+0x40>)
 8013982:	f005 fae3 	bl	8018f4c <iprintf>
    pcb->recv = recv;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	683a      	ldr	r2, [r7, #0]
 801398a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801398e:	bf00      	nop
 8013990:	3708      	adds	r7, #8
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	0801d474 	.word	0x0801d474
 801399c:	0801da38 	.word	0x0801da38
 80139a0:	0801d4fc 	.word	0x0801d4fc

080139a4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80139a4:	b580      	push	{r7, lr}
 80139a6:	b082      	sub	sp, #8
 80139a8:	af00      	add	r7, sp, #0
 80139aa:	6078      	str	r0, [r7, #4]
 80139ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d00d      	beq.n	80139d0 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	7d1b      	ldrb	r3, [r3, #20]
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d106      	bne.n	80139ca <tcp_sent+0x26>
 80139bc:	4b06      	ldr	r3, [pc, #24]	; (80139d8 <tcp_sent+0x34>)
 80139be:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80139c2:	4906      	ldr	r1, [pc, #24]	; (80139dc <tcp_sent+0x38>)
 80139c4:	4806      	ldr	r0, [pc, #24]	; (80139e0 <tcp_sent+0x3c>)
 80139c6:	f005 fac1 	bl	8018f4c <iprintf>
    pcb->sent = sent;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	683a      	ldr	r2, [r7, #0]
 80139ce:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 80139d0:	bf00      	nop
 80139d2:	3708      	adds	r7, #8
 80139d4:	46bd      	mov	sp, r7
 80139d6:	bd80      	pop	{r7, pc}
 80139d8:	0801d474 	.word	0x0801d474
 80139dc:	0801da60 	.word	0x0801da60
 80139e0:	0801d4fc 	.word	0x0801d4fc

080139e4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b082      	sub	sp, #8
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d00e      	beq.n	8013a12 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	7d1b      	ldrb	r3, [r3, #20]
 80139f8:	2b01      	cmp	r3, #1
 80139fa:	d106      	bne.n	8013a0a <tcp_err+0x26>
 80139fc:	4b07      	ldr	r3, [pc, #28]	; (8013a1c <tcp_err+0x38>)
 80139fe:	f640 020d 	movw	r2, #2061	; 0x80d
 8013a02:	4907      	ldr	r1, [pc, #28]	; (8013a20 <tcp_err+0x3c>)
 8013a04:	4807      	ldr	r0, [pc, #28]	; (8013a24 <tcp_err+0x40>)
 8013a06:	f005 faa1 	bl	8018f4c <iprintf>
    pcb->errf = err;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	683a      	ldr	r2, [r7, #0]
 8013a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8013a12:	bf00      	nop
 8013a14:	3708      	adds	r7, #8
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}
 8013a1a:	bf00      	nop
 8013a1c:	0801d474 	.word	0x0801d474
 8013a20:	0801da88 	.word	0x0801da88
 8013a24:	0801d4fc 	.word	0x0801d4fc

08013a28 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013a28:	b480      	push	{r7}
 8013a2a:	b085      	sub	sp, #20
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
 8013a30:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	d008      	beq.n	8013a4a <tcp_accept+0x22>
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	7d1b      	ldrb	r3, [r3, #20]
 8013a3c:	2b01      	cmp	r3, #1
 8013a3e:	d104      	bne.n	8013a4a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013a44:	68fb      	ldr	r3, [r7, #12]
 8013a46:	683a      	ldr	r2, [r7, #0]
 8013a48:	619a      	str	r2, [r3, #24]
  }
}
 8013a4a:	bf00      	nop
 8013a4c:	3714      	adds	r7, #20
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a54:	4770      	bx	lr
	...

08013a58 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b084      	sub	sp, #16
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	60f8      	str	r0, [r7, #12]
 8013a60:	60b9      	str	r1, [r7, #8]
 8013a62:	4613      	mov	r3, r2
 8013a64:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d107      	bne.n	8013a7c <tcp_poll+0x24>
 8013a6c:	4b0e      	ldr	r3, [pc, #56]	; (8013aa8 <tcp_poll+0x50>)
 8013a6e:	f640 023d 	movw	r2, #2109	; 0x83d
 8013a72:	490e      	ldr	r1, [pc, #56]	; (8013aac <tcp_poll+0x54>)
 8013a74:	480e      	ldr	r0, [pc, #56]	; (8013ab0 <tcp_poll+0x58>)
 8013a76:	f005 fa69 	bl	8018f4c <iprintf>
 8013a7a:	e011      	b.n	8013aa0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	7d1b      	ldrb	r3, [r3, #20]
 8013a80:	2b01      	cmp	r3, #1
 8013a82:	d106      	bne.n	8013a92 <tcp_poll+0x3a>
 8013a84:	4b08      	ldr	r3, [pc, #32]	; (8013aa8 <tcp_poll+0x50>)
 8013a86:	f640 023e 	movw	r2, #2110	; 0x83e
 8013a8a:	490a      	ldr	r1, [pc, #40]	; (8013ab4 <tcp_poll+0x5c>)
 8013a8c:	4808      	ldr	r0, [pc, #32]	; (8013ab0 <tcp_poll+0x58>)
 8013a8e:	f005 fa5d 	bl	8018f4c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	68ba      	ldr	r2, [r7, #8]
 8013a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	79fa      	ldrb	r2, [r7, #7]
 8013a9e:	775a      	strb	r2, [r3, #29]
}
 8013aa0:	3710      	adds	r7, #16
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}
 8013aa6:	bf00      	nop
 8013aa8:	0801d474 	.word	0x0801d474
 8013aac:	0801dab0 	.word	0x0801dab0
 8013ab0:	0801d4fc 	.word	0x0801d4fc
 8013ab4:	0801dac8 	.word	0x0801dac8

08013ab8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b082      	sub	sp, #8
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d107      	bne.n	8013ad6 <tcp_pcb_purge+0x1e>
 8013ac6:	4b1e      	ldr	r3, [pc, #120]	; (8013b40 <tcp_pcb_purge+0x88>)
 8013ac8:	f640 0251 	movw	r2, #2129	; 0x851
 8013acc:	491d      	ldr	r1, [pc, #116]	; (8013b44 <tcp_pcb_purge+0x8c>)
 8013ace:	481e      	ldr	r0, [pc, #120]	; (8013b48 <tcp_pcb_purge+0x90>)
 8013ad0:	f005 fa3c 	bl	8018f4c <iprintf>
 8013ad4:	e030      	b.n	8013b38 <tcp_pcb_purge+0x80>

  if (pcb->state != CLOSED &&
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	7d1b      	ldrb	r3, [r3, #20]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d02c      	beq.n	8013b38 <tcp_pcb_purge+0x80>
      pcb->state != TIME_WAIT &&
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013ae2:	2b0a      	cmp	r3, #10
 8013ae4:	d028      	beq.n	8013b38 <tcp_pcb_purge+0x80>
      pcb->state != LISTEN) {
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013aea:	2b01      	cmp	r3, #1
 8013aec:	d024      	beq.n	8013b38 <tcp_pcb_purge+0x80>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d007      	beq.n	8013b06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7fd fe44 	bl	8011788 <pbuf_free>
      pcb->refused_data = NULL;
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2200      	movs	r2, #0
 8013b04:	675a      	str	r2, [r3, #116]	; 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b0c:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b12:	4618      	mov	r0, r3
 8013b14:	f7ff fd2e 	bl	8013574 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f7ff fd29 	bl	8013574 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	2200      	movs	r2, #0
 8013b26:	66da      	str	r2, [r3, #108]	; 0x6c
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	2200      	movs	r2, #0
 8013b34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013b38:	3708      	adds	r7, #8
 8013b3a:	46bd      	mov	sp, r7
 8013b3c:	bd80      	pop	{r7, pc}
 8013b3e:	bf00      	nop
 8013b40:	0801d474 	.word	0x0801d474
 8013b44:	0801dae8 	.word	0x0801dae8
 8013b48:	0801d4fc 	.word	0x0801d4fc

08013b4c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013b4c:	b580      	push	{r7, lr}
 8013b4e:	b084      	sub	sp, #16
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
 8013b54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013b56:	683b      	ldr	r3, [r7, #0]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d106      	bne.n	8013b6a <tcp_pcb_remove+0x1e>
 8013b5c:	4b38      	ldr	r3, [pc, #224]	; (8013c40 <tcp_pcb_remove+0xf4>)
 8013b5e:	f640 0283 	movw	r2, #2179	; 0x883
 8013b62:	4938      	ldr	r1, [pc, #224]	; (8013c44 <tcp_pcb_remove+0xf8>)
 8013b64:	4838      	ldr	r0, [pc, #224]	; (8013c48 <tcp_pcb_remove+0xfc>)
 8013b66:	f005 f9f1 	bl	8018f4c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d106      	bne.n	8013b7e <tcp_pcb_remove+0x32>
 8013b70:	4b33      	ldr	r3, [pc, #204]	; (8013c40 <tcp_pcb_remove+0xf4>)
 8013b72:	f640 0284 	movw	r2, #2180	; 0x884
 8013b76:	4935      	ldr	r1, [pc, #212]	; (8013c4c <tcp_pcb_remove+0x100>)
 8013b78:	4833      	ldr	r0, [pc, #204]	; (8013c48 <tcp_pcb_remove+0xfc>)
 8013b7a:	f005 f9e7 	bl	8018f4c <iprintf>

  TCP_RMV(pcblist, pcb);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	681b      	ldr	r3, [r3, #0]
 8013b82:	683a      	ldr	r2, [r7, #0]
 8013b84:	429a      	cmp	r2, r3
 8013b86:	d105      	bne.n	8013b94 <tcp_pcb_remove+0x48>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	68da      	ldr	r2, [r3, #12]
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	601a      	str	r2, [r3, #0]
 8013b92:	e013      	b.n	8013bbc <tcp_pcb_remove+0x70>
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	60fb      	str	r3, [r7, #12]
 8013b9a:	e00c      	b.n	8013bb6 <tcp_pcb_remove+0x6a>
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	68db      	ldr	r3, [r3, #12]
 8013ba0:	683a      	ldr	r2, [r7, #0]
 8013ba2:	429a      	cmp	r2, r3
 8013ba4:	d104      	bne.n	8013bb0 <tcp_pcb_remove+0x64>
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	68da      	ldr	r2, [r3, #12]
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	60da      	str	r2, [r3, #12]
 8013bae:	e005      	b.n	8013bbc <tcp_pcb_remove+0x70>
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	68db      	ldr	r3, [r3, #12]
 8013bb4:	60fb      	str	r3, [r7, #12]
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d1ef      	bne.n	8013b9c <tcp_pcb_remove+0x50>
 8013bbc:	683b      	ldr	r3, [r7, #0]
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013bc2:	6838      	ldr	r0, [r7, #0]
 8013bc4:	f7ff ff78 	bl	8013ab8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013bc8:	683b      	ldr	r3, [r7, #0]
 8013bca:	7d1b      	ldrb	r3, [r3, #20]
 8013bcc:	2b0a      	cmp	r3, #10
 8013bce:	d013      	beq.n	8013bf8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013bd4:	2b01      	cmp	r3, #1
 8013bd6:	d00f      	beq.n	8013bf8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013bd8:	683b      	ldr	r3, [r7, #0]
 8013bda:	8b5b      	ldrh	r3, [r3, #26]
 8013bdc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d009      	beq.n	8013bf8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	8b5b      	ldrh	r3, [r3, #26]
 8013be8:	f043 0302 	orr.w	r3, r3, #2
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013bf2:	6838      	ldr	r0, [r7, #0]
 8013bf4:	f002 ffe8 	bl	8016bc8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	7d1b      	ldrb	r3, [r3, #20]
 8013bfc:	2b01      	cmp	r3, #1
 8013bfe:	d015      	beq.n	8013c2c <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013c00:	683b      	ldr	r3, [r7, #0]
 8013c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d006      	beq.n	8013c16 <tcp_pcb_remove+0xca>
 8013c08:	4b0d      	ldr	r3, [pc, #52]	; (8013c40 <tcp_pcb_remove+0xf4>)
 8013c0a:	f640 0293 	movw	r2, #2195	; 0x893
 8013c0e:	4910      	ldr	r1, [pc, #64]	; (8013c50 <tcp_pcb_remove+0x104>)
 8013c10:	480d      	ldr	r0, [pc, #52]	; (8013c48 <tcp_pcb_remove+0xfc>)
 8013c12:	f005 f99b 	bl	8018f4c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013c16:	683b      	ldr	r3, [r7, #0]
 8013c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d006      	beq.n	8013c2c <tcp_pcb_remove+0xe0>
 8013c1e:	4b08      	ldr	r3, [pc, #32]	; (8013c40 <tcp_pcb_remove+0xf4>)
 8013c20:	f640 0294 	movw	r2, #2196	; 0x894
 8013c24:	490b      	ldr	r1, [pc, #44]	; (8013c54 <tcp_pcb_remove+0x108>)
 8013c26:	4808      	ldr	r0, [pc, #32]	; (8013c48 <tcp_pcb_remove+0xfc>)
 8013c28:	f005 f990 	bl	8018f4c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	2200      	movs	r2, #0
 8013c30:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	2200      	movs	r2, #0
 8013c36:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013c38:	bf00      	nop
 8013c3a:	3710      	adds	r7, #16
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}
 8013c40:	0801d474 	.word	0x0801d474
 8013c44:	0801db04 	.word	0x0801db04
 8013c48:	0801d4fc 	.word	0x0801d4fc
 8013c4c:	0801db20 	.word	0x0801db20
 8013c50:	0801db40 	.word	0x0801db40
 8013c54:	0801db58 	.word	0x0801db58

08013c58 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013c58:	b580      	push	{r7, lr}
 8013c5a:	b082      	sub	sp, #8
 8013c5c:	af00      	add	r7, sp, #0
 8013c5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d106      	bne.n	8013c74 <tcp_next_iss+0x1c>
 8013c66:	4b0a      	ldr	r3, [pc, #40]	; (8013c90 <tcp_next_iss+0x38>)
 8013c68:	f640 02af 	movw	r2, #2223	; 0x8af
 8013c6c:	4909      	ldr	r1, [pc, #36]	; (8013c94 <tcp_next_iss+0x3c>)
 8013c6e:	480a      	ldr	r0, [pc, #40]	; (8013c98 <tcp_next_iss+0x40>)
 8013c70:	f005 f96c 	bl	8018f4c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013c74:	4b09      	ldr	r3, [pc, #36]	; (8013c9c <tcp_next_iss+0x44>)
 8013c76:	681a      	ldr	r2, [r3, #0]
 8013c78:	4b09      	ldr	r3, [pc, #36]	; (8013ca0 <tcp_next_iss+0x48>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	4413      	add	r3, r2
 8013c7e:	4a07      	ldr	r2, [pc, #28]	; (8013c9c <tcp_next_iss+0x44>)
 8013c80:	6013      	str	r3, [r2, #0]
  return iss;
 8013c82:	4b06      	ldr	r3, [pc, #24]	; (8013c9c <tcp_next_iss+0x44>)
 8013c84:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013c86:	4618      	mov	r0, r3
 8013c88:	3708      	adds	r7, #8
 8013c8a:	46bd      	mov	sp, r7
 8013c8c:	bd80      	pop	{r7, pc}
 8013c8e:	bf00      	nop
 8013c90:	0801d474 	.word	0x0801d474
 8013c94:	0801db74 	.word	0x0801db74
 8013c98:	0801d4fc 	.word	0x0801d4fc
 8013c9c:	24000048 	.word	0x24000048
 8013ca0:	2400b2a8 	.word	0x2400b2a8

08013ca4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013ca4:	b580      	push	{r7, lr}
 8013ca6:	b086      	sub	sp, #24
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	4603      	mov	r3, r0
 8013cac:	60b9      	str	r1, [r7, #8]
 8013cae:	607a      	str	r2, [r7, #4]
 8013cb0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d106      	bne.n	8013cc6 <tcp_eff_send_mss_netif+0x22>
 8013cb8:	4b14      	ldr	r3, [pc, #80]	; (8013d0c <tcp_eff_send_mss_netif+0x68>)
 8013cba:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013cbe:	4914      	ldr	r1, [pc, #80]	; (8013d10 <tcp_eff_send_mss_netif+0x6c>)
 8013cc0:	4814      	ldr	r0, [pc, #80]	; (8013d14 <tcp_eff_send_mss_netif+0x70>)
 8013cc2:	f005 f943 	bl	8018f4c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013cc6:	68bb      	ldr	r3, [r7, #8]
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d101      	bne.n	8013cd0 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013ccc:	89fb      	ldrh	r3, [r7, #14]
 8013cce:	e019      	b.n	8013d04 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013cd0:	68bb      	ldr	r3, [r7, #8]
 8013cd2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013cd4:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013cd6:	8afb      	ldrh	r3, [r7, #22]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d012      	beq.n	8013d02 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013cdc:	2328      	movs	r3, #40	; 0x28
 8013cde:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013ce0:	8afa      	ldrh	r2, [r7, #22]
 8013ce2:	8abb      	ldrh	r3, [r7, #20]
 8013ce4:	429a      	cmp	r2, r3
 8013ce6:	d904      	bls.n	8013cf2 <tcp_eff_send_mss_netif+0x4e>
 8013ce8:	8afa      	ldrh	r2, [r7, #22]
 8013cea:	8abb      	ldrh	r3, [r7, #20]
 8013cec:	1ad3      	subs	r3, r2, r3
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	e000      	b.n	8013cf4 <tcp_eff_send_mss_netif+0x50>
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013cf6:	8a7a      	ldrh	r2, [r7, #18]
 8013cf8:	89fb      	ldrh	r3, [r7, #14]
 8013cfa:	4293      	cmp	r3, r2
 8013cfc:	bf28      	it	cs
 8013cfe:	4613      	movcs	r3, r2
 8013d00:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013d02:	89fb      	ldrh	r3, [r7, #14]
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3718      	adds	r7, #24
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	0801d474 	.word	0x0801d474
 8013d10:	0801db90 	.word	0x0801db90
 8013d14:	0801d4fc 	.word	0x0801d4fc

08013d18 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b084      	sub	sp, #16
 8013d1c:	af00      	add	r7, sp, #0
 8013d1e:	6078      	str	r0, [r7, #4]
 8013d20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013d22:	683b      	ldr	r3, [r7, #0]
 8013d24:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d119      	bne.n	8013d60 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013d2c:	4b10      	ldr	r3, [pc, #64]	; (8013d70 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013d2e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8013d32:	4910      	ldr	r1, [pc, #64]	; (8013d74 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013d34:	4810      	ldr	r0, [pc, #64]	; (8013d78 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013d36:	f005 f909 	bl	8018f4c <iprintf>

  while (pcb != NULL) {
 8013d3a:	e011      	b.n	8013d60 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	681a      	ldr	r2, [r3, #0]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	429a      	cmp	r2, r3
 8013d46:	d108      	bne.n	8013d5a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	68db      	ldr	r3, [r3, #12]
 8013d4c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013d4e:	68f8      	ldr	r0, [r7, #12]
 8013d50:	f7fe fc8c 	bl	801266c <tcp_abort>
      pcb = next;
 8013d54:	68bb      	ldr	r3, [r7, #8]
 8013d56:	60fb      	str	r3, [r7, #12]
 8013d58:	e002      	b.n	8013d60 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	68db      	ldr	r3, [r3, #12]
 8013d5e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d1ea      	bne.n	8013d3c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013d66:	bf00      	nop
 8013d68:	bf00      	nop
 8013d6a:	3710      	adds	r7, #16
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	0801d474 	.word	0x0801d474
 8013d74:	0801dbb8 	.word	0x0801dbb8
 8013d78:	0801d4fc 	.word	0x0801d4fc

08013d7c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013d7c:	b580      	push	{r7, lr}
 8013d7e:	b084      	sub	sp, #16
 8013d80:	af00      	add	r7, sp, #0
 8013d82:	6078      	str	r0, [r7, #4]
 8013d84:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d02a      	beq.n	8013de2 <tcp_netif_ip_addr_changed+0x66>
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	681b      	ldr	r3, [r3, #0]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d026      	beq.n	8013de2 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013d94:	4b15      	ldr	r3, [pc, #84]	; (8013dec <tcp_netif_ip_addr_changed+0x70>)
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	4619      	mov	r1, r3
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f7ff ffbc 	bl	8013d18 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013da0:	4b13      	ldr	r3, [pc, #76]	; (8013df0 <tcp_netif_ip_addr_changed+0x74>)
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	4619      	mov	r1, r3
 8013da6:	6878      	ldr	r0, [r7, #4]
 8013da8:	f7ff ffb6 	bl	8013d18 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013dac:	683b      	ldr	r3, [r7, #0]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d017      	beq.n	8013de2 <tcp_netif_ip_addr_changed+0x66>
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d013      	beq.n	8013de2 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013dba:	4b0e      	ldr	r3, [pc, #56]	; (8013df4 <tcp_netif_ip_addr_changed+0x78>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	60fb      	str	r3, [r7, #12]
 8013dc0:	e00c      	b.n	8013ddc <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	681a      	ldr	r2, [r3, #0]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	681b      	ldr	r3, [r3, #0]
 8013dca:	429a      	cmp	r2, r3
 8013dcc:	d103      	bne.n	8013dd6 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	681a      	ldr	r2, [r3, #0]
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	68db      	ldr	r3, [r3, #12]
 8013dda:	60fb      	str	r3, [r7, #12]
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d1ef      	bne.n	8013dc2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013de2:	bf00      	nop
 8013de4:	3710      	adds	r7, #16
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop
 8013dec:	2400b2a4 	.word	0x2400b2a4
 8013df0:	2400b2b0 	.word	0x2400b2b0
 8013df4:	2400b2ac 	.word	0x2400b2ac

08013df8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013df8:	b590      	push	{r4, r7, lr}
 8013dfa:	b08d      	sub	sp, #52	; 0x34
 8013dfc:	af04      	add	r7, sp, #16
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d105      	bne.n	8013e14 <tcp_input+0x1c>
 8013e08:	4b9b      	ldr	r3, [pc, #620]	; (8014078 <tcp_input+0x280>)
 8013e0a:	2283      	movs	r2, #131	; 0x83
 8013e0c:	499b      	ldr	r1, [pc, #620]	; (801407c <tcp_input+0x284>)
 8013e0e:	489c      	ldr	r0, [pc, #624]	; (8014080 <tcp_input+0x288>)
 8013e10:	f005 f89c 	bl	8018f4c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	685b      	ldr	r3, [r3, #4]
 8013e18:	4a9a      	ldr	r2, [pc, #616]	; (8014084 <tcp_input+0x28c>)
 8013e1a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	895b      	ldrh	r3, [r3, #10]
 8013e20:	2b13      	cmp	r3, #19
 8013e22:	f240 83c3 	bls.w	80145ac <tcp_input+0x7b4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013e26:	4b98      	ldr	r3, [pc, #608]	; (8014088 <tcp_input+0x290>)
 8013e28:	695b      	ldr	r3, [r3, #20]
 8013e2a:	4a97      	ldr	r2, [pc, #604]	; (8014088 <tcp_input+0x290>)
 8013e2c:	6812      	ldr	r2, [r2, #0]
 8013e2e:	4611      	mov	r1, r2
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7fa f90d 	bl	800e050 <ip4_addr_isbroadcast_u32>
 8013e36:	4603      	mov	r3, r0
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	f040 83b9 	bne.w	80145b0 <tcp_input+0x7b8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013e3e:	4b92      	ldr	r3, [pc, #584]	; (8014088 <tcp_input+0x290>)
 8013e40:	695b      	ldr	r3, [r3, #20]
 8013e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013e46:	2be0      	cmp	r3, #224	; 0xe0
 8013e48:	f000 83b2 	beq.w	80145b0 <tcp_input+0x7b8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013e4c:	4b8d      	ldr	r3, [pc, #564]	; (8014084 <tcp_input+0x28c>)
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	899b      	ldrh	r3, [r3, #12]
 8013e52:	b29b      	uxth	r3, r3
 8013e54:	4618      	mov	r0, r3
 8013e56:	f7fb f8b3 	bl	800efc0 <lwip_htons>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	0b1b      	lsrs	r3, r3, #12
 8013e5e:	b29b      	uxth	r3, r3
 8013e60:	b2db      	uxtb	r3, r3
 8013e62:	009b      	lsls	r3, r3, #2
 8013e64:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013e66:	7cbb      	ldrb	r3, [r7, #18]
 8013e68:	2b13      	cmp	r3, #19
 8013e6a:	f240 83a3 	bls.w	80145b4 <tcp_input+0x7bc>
 8013e6e:	7cbb      	ldrb	r3, [r7, #18]
 8013e70:	b29a      	uxth	r2, r3
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	891b      	ldrh	r3, [r3, #8]
 8013e76:	429a      	cmp	r2, r3
 8013e78:	f200 839c 	bhi.w	80145b4 <tcp_input+0x7bc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013e7c:	7cbb      	ldrb	r3, [r7, #18]
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	3b14      	subs	r3, #20
 8013e82:	b29a      	uxth	r2, r3
 8013e84:	4b81      	ldr	r3, [pc, #516]	; (801408c <tcp_input+0x294>)
 8013e86:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013e88:	4b81      	ldr	r3, [pc, #516]	; (8014090 <tcp_input+0x298>)
 8013e8a:	2200      	movs	r2, #0
 8013e8c:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	895a      	ldrh	r2, [r3, #10]
 8013e92:	7cbb      	ldrb	r3, [r7, #18]
 8013e94:	b29b      	uxth	r3, r3
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d309      	bcc.n	8013eae <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013e9a:	4b7c      	ldr	r3, [pc, #496]	; (801408c <tcp_input+0x294>)
 8013e9c:	881a      	ldrh	r2, [r3, #0]
 8013e9e:	4b7d      	ldr	r3, [pc, #500]	; (8014094 <tcp_input+0x29c>)
 8013ea0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013ea2:	7cbb      	ldrb	r3, [r7, #18]
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	6878      	ldr	r0, [r7, #4]
 8013ea8:	f7fd fbb6 	bl	8011618 <pbuf_remove_header>
 8013eac:	e04e      	b.n	8013f4c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d105      	bne.n	8013ec2 <tcp_input+0xca>
 8013eb6:	4b70      	ldr	r3, [pc, #448]	; (8014078 <tcp_input+0x280>)
 8013eb8:	22c2      	movs	r2, #194	; 0xc2
 8013eba:	4977      	ldr	r1, [pc, #476]	; (8014098 <tcp_input+0x2a0>)
 8013ebc:	4870      	ldr	r0, [pc, #448]	; (8014080 <tcp_input+0x288>)
 8013ebe:	f005 f845 	bl	8018f4c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013ec2:	2114      	movs	r1, #20
 8013ec4:	6878      	ldr	r0, [r7, #4]
 8013ec6:	f7fd fba7 	bl	8011618 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	895a      	ldrh	r2, [r3, #10]
 8013ece:	4b71      	ldr	r3, [pc, #452]	; (8014094 <tcp_input+0x29c>)
 8013ed0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013ed2:	4b6e      	ldr	r3, [pc, #440]	; (801408c <tcp_input+0x294>)
 8013ed4:	881a      	ldrh	r2, [r3, #0]
 8013ed6:	4b6f      	ldr	r3, [pc, #444]	; (8014094 <tcp_input+0x29c>)
 8013ed8:	881b      	ldrh	r3, [r3, #0]
 8013eda:	1ad3      	subs	r3, r2, r3
 8013edc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8013ede:	4b6d      	ldr	r3, [pc, #436]	; (8014094 <tcp_input+0x29c>)
 8013ee0:	881b      	ldrh	r3, [r3, #0]
 8013ee2:	4619      	mov	r1, r3
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f7fd fb97 	bl	8011618 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	895b      	ldrh	r3, [r3, #10]
 8013ef0:	8a3a      	ldrh	r2, [r7, #16]
 8013ef2:	429a      	cmp	r2, r3
 8013ef4:	f200 8360 	bhi.w	80145b8 <tcp_input+0x7c0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	685b      	ldr	r3, [r3, #4]
 8013efe:	4a64      	ldr	r2, [pc, #400]	; (8014090 <tcp_input+0x298>)
 8013f00:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	8a3a      	ldrh	r2, [r7, #16]
 8013f08:	4611      	mov	r1, r2
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	f7fd fb84 	bl	8011618 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	891a      	ldrh	r2, [r3, #8]
 8013f14:	8a3b      	ldrh	r3, [r7, #16]
 8013f16:	1ad3      	subs	r3, r2, r3
 8013f18:	b29a      	uxth	r2, r3
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	895b      	ldrh	r3, [r3, #10]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d005      	beq.n	8013f32 <tcp_input+0x13a>
 8013f26:	4b54      	ldr	r3, [pc, #336]	; (8014078 <tcp_input+0x280>)
 8013f28:	22df      	movs	r2, #223	; 0xdf
 8013f2a:	495c      	ldr	r1, [pc, #368]	; (801409c <tcp_input+0x2a4>)
 8013f2c:	4854      	ldr	r0, [pc, #336]	; (8014080 <tcp_input+0x288>)
 8013f2e:	f005 f80d 	bl	8018f4c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	891a      	ldrh	r2, [r3, #8]
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	891b      	ldrh	r3, [r3, #8]
 8013f3c:	429a      	cmp	r2, r3
 8013f3e:	d005      	beq.n	8013f4c <tcp_input+0x154>
 8013f40:	4b4d      	ldr	r3, [pc, #308]	; (8014078 <tcp_input+0x280>)
 8013f42:	22e0      	movs	r2, #224	; 0xe0
 8013f44:	4956      	ldr	r1, [pc, #344]	; (80140a0 <tcp_input+0x2a8>)
 8013f46:	484e      	ldr	r0, [pc, #312]	; (8014080 <tcp_input+0x288>)
 8013f48:	f005 f800 	bl	8018f4c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013f4c:	4b4d      	ldr	r3, [pc, #308]	; (8014084 <tcp_input+0x28c>)
 8013f4e:	681b      	ldr	r3, [r3, #0]
 8013f50:	881b      	ldrh	r3, [r3, #0]
 8013f52:	b29b      	uxth	r3, r3
 8013f54:	4a4b      	ldr	r2, [pc, #300]	; (8014084 <tcp_input+0x28c>)
 8013f56:	6814      	ldr	r4, [r2, #0]
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f7fb f831 	bl	800efc0 <lwip_htons>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013f62:	4b48      	ldr	r3, [pc, #288]	; (8014084 <tcp_input+0x28c>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	885b      	ldrh	r3, [r3, #2]
 8013f68:	b29b      	uxth	r3, r3
 8013f6a:	4a46      	ldr	r2, [pc, #280]	; (8014084 <tcp_input+0x28c>)
 8013f6c:	6814      	ldr	r4, [r2, #0]
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f7fb f826 	bl	800efc0 <lwip_htons>
 8013f74:	4603      	mov	r3, r0
 8013f76:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013f78:	4b42      	ldr	r3, [pc, #264]	; (8014084 <tcp_input+0x28c>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	4a41      	ldr	r2, [pc, #260]	; (8014084 <tcp_input+0x28c>)
 8013f80:	6814      	ldr	r4, [r2, #0]
 8013f82:	4618      	mov	r0, r3
 8013f84:	f7fb f831 	bl	800efea <lwip_htonl>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	6063      	str	r3, [r4, #4]
 8013f8c:	6863      	ldr	r3, [r4, #4]
 8013f8e:	4a45      	ldr	r2, [pc, #276]	; (80140a4 <tcp_input+0x2ac>)
 8013f90:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013f92:	4b3c      	ldr	r3, [pc, #240]	; (8014084 <tcp_input+0x28c>)
 8013f94:	681b      	ldr	r3, [r3, #0]
 8013f96:	689b      	ldr	r3, [r3, #8]
 8013f98:	4a3a      	ldr	r2, [pc, #232]	; (8014084 <tcp_input+0x28c>)
 8013f9a:	6814      	ldr	r4, [r2, #0]
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	f7fb f824 	bl	800efea <lwip_htonl>
 8013fa2:	4603      	mov	r3, r0
 8013fa4:	60a3      	str	r3, [r4, #8]
 8013fa6:	68a3      	ldr	r3, [r4, #8]
 8013fa8:	4a3f      	ldr	r2, [pc, #252]	; (80140a8 <tcp_input+0x2b0>)
 8013faa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013fac:	4b35      	ldr	r3, [pc, #212]	; (8014084 <tcp_input+0x28c>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	89db      	ldrh	r3, [r3, #14]
 8013fb2:	b29b      	uxth	r3, r3
 8013fb4:	4a33      	ldr	r2, [pc, #204]	; (8014084 <tcp_input+0x28c>)
 8013fb6:	6814      	ldr	r4, [r2, #0]
 8013fb8:	4618      	mov	r0, r3
 8013fba:	f7fb f801 	bl	800efc0 <lwip_htons>
 8013fbe:	4603      	mov	r3, r0
 8013fc0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013fc2:	4b30      	ldr	r3, [pc, #192]	; (8014084 <tcp_input+0x28c>)
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	899b      	ldrh	r3, [r3, #12]
 8013fc8:	b29b      	uxth	r3, r3
 8013fca:	4618      	mov	r0, r3
 8013fcc:	f7fa fff8 	bl	800efc0 <lwip_htons>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	b2db      	uxtb	r3, r3
 8013fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013fd8:	b2da      	uxtb	r2, r3
 8013fda:	4b34      	ldr	r3, [pc, #208]	; (80140ac <tcp_input+0x2b4>)
 8013fdc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	891a      	ldrh	r2, [r3, #8]
 8013fe2:	4b33      	ldr	r3, [pc, #204]	; (80140b0 <tcp_input+0x2b8>)
 8013fe4:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013fe6:	4b31      	ldr	r3, [pc, #196]	; (80140ac <tcp_input+0x2b4>)
 8013fe8:	781b      	ldrb	r3, [r3, #0]
 8013fea:	f003 0303 	and.w	r3, r3, #3
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d00c      	beq.n	801400c <tcp_input+0x214>
    tcplen++;
 8013ff2:	4b2f      	ldr	r3, [pc, #188]	; (80140b0 <tcp_input+0x2b8>)
 8013ff4:	881b      	ldrh	r3, [r3, #0]
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	b29a      	uxth	r2, r3
 8013ffa:	4b2d      	ldr	r3, [pc, #180]	; (80140b0 <tcp_input+0x2b8>)
 8013ffc:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	891a      	ldrh	r2, [r3, #8]
 8014002:	4b2b      	ldr	r3, [pc, #172]	; (80140b0 <tcp_input+0x2b8>)
 8014004:	881b      	ldrh	r3, [r3, #0]
 8014006:	429a      	cmp	r2, r3
 8014008:	f200 82d8 	bhi.w	80145bc <tcp_input+0x7c4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801400c:	2300      	movs	r3, #0
 801400e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014010:	4b28      	ldr	r3, [pc, #160]	; (80140b4 <tcp_input+0x2bc>)
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	61fb      	str	r3, [r7, #28]
 8014016:	e09d      	b.n	8014154 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8014018:	69fb      	ldr	r3, [r7, #28]
 801401a:	7d1b      	ldrb	r3, [r3, #20]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d105      	bne.n	801402c <tcp_input+0x234>
 8014020:	4b15      	ldr	r3, [pc, #84]	; (8014078 <tcp_input+0x280>)
 8014022:	22fb      	movs	r2, #251	; 0xfb
 8014024:	4924      	ldr	r1, [pc, #144]	; (80140b8 <tcp_input+0x2c0>)
 8014026:	4816      	ldr	r0, [pc, #88]	; (8014080 <tcp_input+0x288>)
 8014028:	f004 ff90 	bl	8018f4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801402c:	69fb      	ldr	r3, [r7, #28]
 801402e:	7d1b      	ldrb	r3, [r3, #20]
 8014030:	2b0a      	cmp	r3, #10
 8014032:	d105      	bne.n	8014040 <tcp_input+0x248>
 8014034:	4b10      	ldr	r3, [pc, #64]	; (8014078 <tcp_input+0x280>)
 8014036:	22fc      	movs	r2, #252	; 0xfc
 8014038:	4920      	ldr	r1, [pc, #128]	; (80140bc <tcp_input+0x2c4>)
 801403a:	4811      	ldr	r0, [pc, #68]	; (8014080 <tcp_input+0x288>)
 801403c:	f004 ff86 	bl	8018f4c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014040:	69fb      	ldr	r3, [r7, #28]
 8014042:	7d1b      	ldrb	r3, [r3, #20]
 8014044:	2b01      	cmp	r3, #1
 8014046:	d105      	bne.n	8014054 <tcp_input+0x25c>
 8014048:	4b0b      	ldr	r3, [pc, #44]	; (8014078 <tcp_input+0x280>)
 801404a:	22fd      	movs	r2, #253	; 0xfd
 801404c:	491c      	ldr	r1, [pc, #112]	; (80140c0 <tcp_input+0x2c8>)
 801404e:	480c      	ldr	r0, [pc, #48]	; (8014080 <tcp_input+0x288>)
 8014050:	f004 ff7c 	bl	8018f4c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014054:	69fb      	ldr	r3, [r7, #28]
 8014056:	7a1b      	ldrb	r3, [r3, #8]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d033      	beq.n	80140c4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801405c:	69fb      	ldr	r3, [r7, #28]
 801405e:	7a1a      	ldrb	r2, [r3, #8]
 8014060:	4b09      	ldr	r3, [pc, #36]	; (8014088 <tcp_input+0x290>)
 8014062:	685b      	ldr	r3, [r3, #4]
 8014064:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014068:	3301      	adds	r3, #1
 801406a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801406c:	429a      	cmp	r2, r3
 801406e:	d029      	beq.n	80140c4 <tcp_input+0x2cc>
      prev = pcb;
 8014070:	69fb      	ldr	r3, [r7, #28]
 8014072:	61bb      	str	r3, [r7, #24]
      continue;
 8014074:	e06b      	b.n	801414e <tcp_input+0x356>
 8014076:	bf00      	nop
 8014078:	0801dbec 	.word	0x0801dbec
 801407c:	0801dc64 	.word	0x0801dc64
 8014080:	0801dc7c 	.word	0x0801dc7c
 8014084:	240071ac 	.word	0x240071ac
 8014088:	24007410 	.word	0x24007410
 801408c:	240071b0 	.word	0x240071b0
 8014090:	240071b4 	.word	0x240071b4
 8014094:	240071b2 	.word	0x240071b2
 8014098:	0801dca4 	.word	0x0801dca4
 801409c:	0801dcb4 	.word	0x0801dcb4
 80140a0:	0801dcc0 	.word	0x0801dcc0
 80140a4:	240071bc 	.word	0x240071bc
 80140a8:	240071c0 	.word	0x240071c0
 80140ac:	240071c8 	.word	0x240071c8
 80140b0:	240071c6 	.word	0x240071c6
 80140b4:	2400b2a4 	.word	0x2400b2a4
 80140b8:	0801dce0 	.word	0x0801dce0
 80140bc:	0801dd08 	.word	0x0801dd08
 80140c0:	0801dd34 	.word	0x0801dd34
    }

    if (pcb->remote_port == tcphdr->src &&
 80140c4:	69fb      	ldr	r3, [r7, #28]
 80140c6:	8b1a      	ldrh	r2, [r3, #24]
 80140c8:	4b94      	ldr	r3, [pc, #592]	; (801431c <tcp_input+0x524>)
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	881b      	ldrh	r3, [r3, #0]
 80140ce:	b29b      	uxth	r3, r3
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d13a      	bne.n	801414a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80140d4:	69fb      	ldr	r3, [r7, #28]
 80140d6:	8ada      	ldrh	r2, [r3, #22]
 80140d8:	4b90      	ldr	r3, [pc, #576]	; (801431c <tcp_input+0x524>)
 80140da:	681b      	ldr	r3, [r3, #0]
 80140dc:	885b      	ldrh	r3, [r3, #2]
 80140de:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80140e0:	429a      	cmp	r2, r3
 80140e2:	d132      	bne.n	801414a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80140e4:	69fb      	ldr	r3, [r7, #28]
 80140e6:	685a      	ldr	r2, [r3, #4]
 80140e8:	4b8d      	ldr	r3, [pc, #564]	; (8014320 <tcp_input+0x528>)
 80140ea:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d12c      	bne.n	801414a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	681a      	ldr	r2, [r3, #0]
 80140f4:	4b8a      	ldr	r3, [pc, #552]	; (8014320 <tcp_input+0x528>)
 80140f6:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d126      	bne.n	801414a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80140fc:	69fb      	ldr	r3, [r7, #28]
 80140fe:	68db      	ldr	r3, [r3, #12]
 8014100:	69fa      	ldr	r2, [r7, #28]
 8014102:	429a      	cmp	r2, r3
 8014104:	d106      	bne.n	8014114 <tcp_input+0x31c>
 8014106:	4b87      	ldr	r3, [pc, #540]	; (8014324 <tcp_input+0x52c>)
 8014108:	f240 120d 	movw	r2, #269	; 0x10d
 801410c:	4986      	ldr	r1, [pc, #536]	; (8014328 <tcp_input+0x530>)
 801410e:	4887      	ldr	r0, [pc, #540]	; (801432c <tcp_input+0x534>)
 8014110:	f004 ff1c 	bl	8018f4c <iprintf>
      if (prev != NULL) {
 8014114:	69bb      	ldr	r3, [r7, #24]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d00a      	beq.n	8014130 <tcp_input+0x338>
        prev->next = pcb->next;
 801411a:	69fb      	ldr	r3, [r7, #28]
 801411c:	68da      	ldr	r2, [r3, #12]
 801411e:	69bb      	ldr	r3, [r7, #24]
 8014120:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8014122:	4b83      	ldr	r3, [pc, #524]	; (8014330 <tcp_input+0x538>)
 8014124:	681a      	ldr	r2, [r3, #0]
 8014126:	69fb      	ldr	r3, [r7, #28]
 8014128:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801412a:	4a81      	ldr	r2, [pc, #516]	; (8014330 <tcp_input+0x538>)
 801412c:	69fb      	ldr	r3, [r7, #28]
 801412e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014130:	69fb      	ldr	r3, [r7, #28]
 8014132:	68db      	ldr	r3, [r3, #12]
 8014134:	69fa      	ldr	r2, [r7, #28]
 8014136:	429a      	cmp	r2, r3
 8014138:	d111      	bne.n	801415e <tcp_input+0x366>
 801413a:	4b7a      	ldr	r3, [pc, #488]	; (8014324 <tcp_input+0x52c>)
 801413c:	f240 1215 	movw	r2, #277	; 0x115
 8014140:	497c      	ldr	r1, [pc, #496]	; (8014334 <tcp_input+0x53c>)
 8014142:	487a      	ldr	r0, [pc, #488]	; (801432c <tcp_input+0x534>)
 8014144:	f004 ff02 	bl	8018f4c <iprintf>
      break;
 8014148:	e009      	b.n	801415e <tcp_input+0x366>
    }
    prev = pcb;
 801414a:	69fb      	ldr	r3, [r7, #28]
 801414c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801414e:	69fb      	ldr	r3, [r7, #28]
 8014150:	68db      	ldr	r3, [r3, #12]
 8014152:	61fb      	str	r3, [r7, #28]
 8014154:	69fb      	ldr	r3, [r7, #28]
 8014156:	2b00      	cmp	r3, #0
 8014158:	f47f af5e 	bne.w	8014018 <tcp_input+0x220>
 801415c:	e000      	b.n	8014160 <tcp_input+0x368>
      break;
 801415e:	bf00      	nop
  }

  if (pcb == NULL) {
 8014160:	69fb      	ldr	r3, [r7, #28]
 8014162:	2b00      	cmp	r3, #0
 8014164:	f040 8095 	bne.w	8014292 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014168:	4b73      	ldr	r3, [pc, #460]	; (8014338 <tcp_input+0x540>)
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	61fb      	str	r3, [r7, #28]
 801416e:	e03f      	b.n	80141f0 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014170:	69fb      	ldr	r3, [r7, #28]
 8014172:	7d1b      	ldrb	r3, [r3, #20]
 8014174:	2b0a      	cmp	r3, #10
 8014176:	d006      	beq.n	8014186 <tcp_input+0x38e>
 8014178:	4b6a      	ldr	r3, [pc, #424]	; (8014324 <tcp_input+0x52c>)
 801417a:	f240 121f 	movw	r2, #287	; 0x11f
 801417e:	496f      	ldr	r1, [pc, #444]	; (801433c <tcp_input+0x544>)
 8014180:	486a      	ldr	r0, [pc, #424]	; (801432c <tcp_input+0x534>)
 8014182:	f004 fee3 	bl	8018f4c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014186:	69fb      	ldr	r3, [r7, #28]
 8014188:	7a1b      	ldrb	r3, [r3, #8]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d009      	beq.n	80141a2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801418e:	69fb      	ldr	r3, [r7, #28]
 8014190:	7a1a      	ldrb	r2, [r3, #8]
 8014192:	4b63      	ldr	r3, [pc, #396]	; (8014320 <tcp_input+0x528>)
 8014194:	685b      	ldr	r3, [r3, #4]
 8014196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801419a:	3301      	adds	r3, #1
 801419c:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801419e:	429a      	cmp	r2, r3
 80141a0:	d122      	bne.n	80141e8 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80141a2:	69fb      	ldr	r3, [r7, #28]
 80141a4:	8b1a      	ldrh	r2, [r3, #24]
 80141a6:	4b5d      	ldr	r3, [pc, #372]	; (801431c <tcp_input+0x524>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	881b      	ldrh	r3, [r3, #0]
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	429a      	cmp	r2, r3
 80141b0:	d11b      	bne.n	80141ea <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80141b2:	69fb      	ldr	r3, [r7, #28]
 80141b4:	8ada      	ldrh	r2, [r3, #22]
 80141b6:	4b59      	ldr	r3, [pc, #356]	; (801431c <tcp_input+0x524>)
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	885b      	ldrh	r3, [r3, #2]
 80141bc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80141be:	429a      	cmp	r2, r3
 80141c0:	d113      	bne.n	80141ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80141c2:	69fb      	ldr	r3, [r7, #28]
 80141c4:	685a      	ldr	r2, [r3, #4]
 80141c6:	4b56      	ldr	r3, [pc, #344]	; (8014320 <tcp_input+0x528>)
 80141c8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d10d      	bne.n	80141ea <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80141ce:	69fb      	ldr	r3, [r7, #28]
 80141d0:	681a      	ldr	r2, [r3, #0]
 80141d2:	4b53      	ldr	r3, [pc, #332]	; (8014320 <tcp_input+0x528>)
 80141d4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d107      	bne.n	80141ea <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80141da:	69f8      	ldr	r0, [r7, #28]
 80141dc:	f000 fb54 	bl	8014888 <tcp_timewait_input>
        }
        pbuf_free(p);
 80141e0:	6878      	ldr	r0, [r7, #4]
 80141e2:	f7fd fad1 	bl	8011788 <pbuf_free>
        return;
 80141e6:	e1ef      	b.n	80145c8 <tcp_input+0x7d0>
        continue;
 80141e8:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80141ea:	69fb      	ldr	r3, [r7, #28]
 80141ec:	68db      	ldr	r3, [r3, #12]
 80141ee:	61fb      	str	r3, [r7, #28]
 80141f0:	69fb      	ldr	r3, [r7, #28]
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	d1bc      	bne.n	8014170 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80141f6:	2300      	movs	r3, #0
 80141f8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80141fa:	4b51      	ldr	r3, [pc, #324]	; (8014340 <tcp_input+0x548>)
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	617b      	str	r3, [r7, #20]
 8014200:	e02a      	b.n	8014258 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014202:	697b      	ldr	r3, [r7, #20]
 8014204:	7a1b      	ldrb	r3, [r3, #8]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d00c      	beq.n	8014224 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801420a:	697b      	ldr	r3, [r7, #20]
 801420c:	7a1a      	ldrb	r2, [r3, #8]
 801420e:	4b44      	ldr	r3, [pc, #272]	; (8014320 <tcp_input+0x528>)
 8014210:	685b      	ldr	r3, [r3, #4]
 8014212:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014216:	3301      	adds	r3, #1
 8014218:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801421a:	429a      	cmp	r2, r3
 801421c:	d002      	beq.n	8014224 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801421e:	697b      	ldr	r3, [r7, #20]
 8014220:	61bb      	str	r3, [r7, #24]
        continue;
 8014222:	e016      	b.n	8014252 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014224:	697b      	ldr	r3, [r7, #20]
 8014226:	8ada      	ldrh	r2, [r3, #22]
 8014228:	4b3c      	ldr	r3, [pc, #240]	; (801431c <tcp_input+0x524>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	885b      	ldrh	r3, [r3, #2]
 801422e:	b29b      	uxth	r3, r3
 8014230:	429a      	cmp	r2, r3
 8014232:	d10c      	bne.n	801424e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014234:	697b      	ldr	r3, [r7, #20]
 8014236:	681a      	ldr	r2, [r3, #0]
 8014238:	4b39      	ldr	r3, [pc, #228]	; (8014320 <tcp_input+0x528>)
 801423a:	695b      	ldr	r3, [r3, #20]
 801423c:	429a      	cmp	r2, r3
 801423e:	d00f      	beq.n	8014260 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d00d      	beq.n	8014262 <tcp_input+0x46a>
 8014246:	697b      	ldr	r3, [r7, #20]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d009      	beq.n	8014262 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801424e:	697b      	ldr	r3, [r7, #20]
 8014250:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014252:	697b      	ldr	r3, [r7, #20]
 8014254:	68db      	ldr	r3, [r3, #12]
 8014256:	617b      	str	r3, [r7, #20]
 8014258:	697b      	ldr	r3, [r7, #20]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d1d1      	bne.n	8014202 <tcp_input+0x40a>
 801425e:	e000      	b.n	8014262 <tcp_input+0x46a>
            break;
 8014260:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014262:	697b      	ldr	r3, [r7, #20]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d014      	beq.n	8014292 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014268:	69bb      	ldr	r3, [r7, #24]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d00a      	beq.n	8014284 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	68da      	ldr	r2, [r3, #12]
 8014272:	69bb      	ldr	r3, [r7, #24]
 8014274:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014276:	4b32      	ldr	r3, [pc, #200]	; (8014340 <tcp_input+0x548>)
 8014278:	681a      	ldr	r2, [r3, #0]
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801427e:	4a30      	ldr	r2, [pc, #192]	; (8014340 <tcp_input+0x548>)
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014284:	6978      	ldr	r0, [r7, #20]
 8014286:	f000 fa01 	bl	801468c <tcp_listen_input>
      }
      pbuf_free(p);
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	f7fd fa7c 	bl	8011788 <pbuf_free>
      return;
 8014290:	e19a      	b.n	80145c8 <tcp_input+0x7d0>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014292:	69fb      	ldr	r3, [r7, #28]
 8014294:	2b00      	cmp	r3, #0
 8014296:	f000 815f 	beq.w	8014558 <tcp_input+0x760>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801429a:	4b2a      	ldr	r3, [pc, #168]	; (8014344 <tcp_input+0x54c>)
 801429c:	2200      	movs	r2, #0
 801429e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	891a      	ldrh	r2, [r3, #8]
 80142a4:	4b27      	ldr	r3, [pc, #156]	; (8014344 <tcp_input+0x54c>)
 80142a6:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80142a8:	4a26      	ldr	r2, [pc, #152]	; (8014344 <tcp_input+0x54c>)
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80142ae:	4b1b      	ldr	r3, [pc, #108]	; (801431c <tcp_input+0x524>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	4a24      	ldr	r2, [pc, #144]	; (8014344 <tcp_input+0x54c>)
 80142b4:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80142b6:	4b24      	ldr	r3, [pc, #144]	; (8014348 <tcp_input+0x550>)
 80142b8:	2200      	movs	r2, #0
 80142ba:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80142bc:	4b23      	ldr	r3, [pc, #140]	; (801434c <tcp_input+0x554>)
 80142be:	2200      	movs	r2, #0
 80142c0:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80142c2:	4b23      	ldr	r3, [pc, #140]	; (8014350 <tcp_input+0x558>)
 80142c4:	2200      	movs	r2, #0
 80142c6:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80142c8:	4b22      	ldr	r3, [pc, #136]	; (8014354 <tcp_input+0x55c>)
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	f003 0308 	and.w	r3, r3, #8
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d006      	beq.n	80142e2 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	7b5b      	ldrb	r3, [r3, #13]
 80142d8:	f043 0301 	orr.w	r3, r3, #1
 80142dc:	b2da      	uxtb	r2, r3
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80142e2:	69fb      	ldr	r3, [r7, #28]
 80142e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d038      	beq.n	801435c <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80142ea:	69f8      	ldr	r0, [r7, #28]
 80142ec:	f7ff f8c4 	bl	8013478 <tcp_process_refused_data>
 80142f0:	4603      	mov	r3, r0
 80142f2:	f113 0f0d 	cmn.w	r3, #13
 80142f6:	d007      	beq.n	8014308 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80142f8:	69fb      	ldr	r3, [r7, #28]
 80142fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d02d      	beq.n	801435c <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014300:	4b15      	ldr	r3, [pc, #84]	; (8014358 <tcp_input+0x560>)
 8014302:	881b      	ldrh	r3, [r3, #0]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d029      	beq.n	801435c <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014308:	69fb      	ldr	r3, [r7, #28]
 801430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801430c:	2b00      	cmp	r3, #0
 801430e:	f040 8103 	bne.w	8014518 <tcp_input+0x720>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014312:	69f8      	ldr	r0, [r7, #28]
 8014314:	f003 fa5e 	bl	80177d4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014318:	e0fe      	b.n	8014518 <tcp_input+0x720>
 801431a:	bf00      	nop
 801431c:	240071ac 	.word	0x240071ac
 8014320:	24007410 	.word	0x24007410
 8014324:	0801dbec 	.word	0x0801dbec
 8014328:	0801dd5c 	.word	0x0801dd5c
 801432c:	0801dc7c 	.word	0x0801dc7c
 8014330:	2400b2a4 	.word	0x2400b2a4
 8014334:	0801dd88 	.word	0x0801dd88
 8014338:	2400b2b4 	.word	0x2400b2b4
 801433c:	0801ddb4 	.word	0x0801ddb4
 8014340:	2400b2ac 	.word	0x2400b2ac
 8014344:	2400719c 	.word	0x2400719c
 8014348:	240071cc 	.word	0x240071cc
 801434c:	240071c9 	.word	0x240071c9
 8014350:	240071c4 	.word	0x240071c4
 8014354:	240071c8 	.word	0x240071c8
 8014358:	240071c6 	.word	0x240071c6
      }
    }
    tcp_input_pcb = pcb;
 801435c:	4a9c      	ldr	r2, [pc, #624]	; (80145d0 <tcp_input+0x7d8>)
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014362:	69f8      	ldr	r0, [r7, #28]
 8014364:	f000 fb0a 	bl	801497c <tcp_process>
 8014368:	4603      	mov	r3, r0
 801436a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801436c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014370:	f113 0f0d 	cmn.w	r3, #13
 8014374:	f000 80d2 	beq.w	801451c <tcp_input+0x724>
      if (recv_flags & TF_RESET) {
 8014378:	4b96      	ldr	r3, [pc, #600]	; (80145d4 <tcp_input+0x7dc>)
 801437a:	781b      	ldrb	r3, [r3, #0]
 801437c:	f003 0308 	and.w	r3, r3, #8
 8014380:	2b00      	cmp	r3, #0
 8014382:	d015      	beq.n	80143b0 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014384:	69fb      	ldr	r3, [r7, #28]
 8014386:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801438a:	2b00      	cmp	r3, #0
 801438c:	d008      	beq.n	80143a0 <tcp_input+0x5a8>
 801438e:	69fb      	ldr	r3, [r7, #28]
 8014390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014394:	69fa      	ldr	r2, [r7, #28]
 8014396:	6912      	ldr	r2, [r2, #16]
 8014398:	f06f 010d 	mvn.w	r1, #13
 801439c:	4610      	mov	r0, r2
 801439e:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80143a0:	69f9      	ldr	r1, [r7, #28]
 80143a2:	488d      	ldr	r0, [pc, #564]	; (80145d8 <tcp_input+0x7e0>)
 80143a4:	f7ff fbd2 	bl	8013b4c <tcp_pcb_remove>
        tcp_free(pcb);
 80143a8:	69f8      	ldr	r0, [r7, #28]
 80143aa:	f7fd fe25 	bl	8011ff8 <tcp_free>
 80143ae:	e0c0      	b.n	8014532 <tcp_input+0x73a>
      } else {
        err = ERR_OK;
 80143b0:	2300      	movs	r3, #0
 80143b2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80143b4:	4b89      	ldr	r3, [pc, #548]	; (80145dc <tcp_input+0x7e4>)
 80143b6:	881b      	ldrh	r3, [r3, #0]
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d01b      	beq.n	80143f4 <tcp_input+0x5fc>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80143bc:	4b87      	ldr	r3, [pc, #540]	; (80145dc <tcp_input+0x7e4>)
 80143be:	881b      	ldrh	r3, [r3, #0]
 80143c0:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80143c2:	69fb      	ldr	r3, [r7, #28]
 80143c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d009      	beq.n	80143de <tcp_input+0x5e6>
 80143ca:	69fb      	ldr	r3, [r7, #28]
 80143cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80143ce:	69fa      	ldr	r2, [r7, #28]
 80143d0:	6910      	ldr	r0, [r2, #16]
 80143d2:	89fa      	ldrh	r2, [r7, #14]
 80143d4:	69f9      	ldr	r1, [r7, #28]
 80143d6:	4798      	blx	r3
 80143d8:	4603      	mov	r3, r0
 80143da:	74fb      	strb	r3, [r7, #19]
 80143dc:	e001      	b.n	80143e2 <tcp_input+0x5ea>
 80143de:	2300      	movs	r3, #0
 80143e0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80143e2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80143e6:	f113 0f0d 	cmn.w	r3, #13
 80143ea:	f000 8099 	beq.w	8014520 <tcp_input+0x728>
              goto aborted;
            }
          }
          recv_acked = 0;
 80143ee:	4b7b      	ldr	r3, [pc, #492]	; (80145dc <tcp_input+0x7e4>)
 80143f0:	2200      	movs	r2, #0
 80143f2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80143f4:	69f8      	ldr	r0, [r7, #28]
 80143f6:	f000 f909 	bl	801460c <tcp_input_delayed_close>
 80143fa:	4603      	mov	r3, r0
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	f040 8091 	bne.w	8014524 <tcp_input+0x72c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014402:	4b77      	ldr	r3, [pc, #476]	; (80145e0 <tcp_input+0x7e8>)
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d041      	beq.n	801448e <tcp_input+0x696>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801440a:	69fb      	ldr	r3, [r7, #28]
 801440c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801440e:	2b00      	cmp	r3, #0
 8014410:	d006      	beq.n	8014420 <tcp_input+0x628>
 8014412:	4b74      	ldr	r3, [pc, #464]	; (80145e4 <tcp_input+0x7ec>)
 8014414:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014418:	4973      	ldr	r1, [pc, #460]	; (80145e8 <tcp_input+0x7f0>)
 801441a:	4874      	ldr	r0, [pc, #464]	; (80145ec <tcp_input+0x7f4>)
 801441c:	f004 fd96 	bl	8018f4c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014420:	69fb      	ldr	r3, [r7, #28]
 8014422:	8b5b      	ldrh	r3, [r3, #26]
 8014424:	f003 0310 	and.w	r3, r3, #16
 8014428:	2b00      	cmp	r3, #0
 801442a:	d008      	beq.n	801443e <tcp_input+0x646>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801442c:	4b6c      	ldr	r3, [pc, #432]	; (80145e0 <tcp_input+0x7e8>)
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	4618      	mov	r0, r3
 8014432:	f7fd f9a9 	bl	8011788 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014436:	69f8      	ldr	r0, [r7, #28]
 8014438:	f7fe f918 	bl	801266c <tcp_abort>
            goto aborted;
 801443c:	e079      	b.n	8014532 <tcp_input+0x73a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801443e:	69fb      	ldr	r3, [r7, #28]
 8014440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014444:	2b00      	cmp	r3, #0
 8014446:	d00c      	beq.n	8014462 <tcp_input+0x66a>
 8014448:	69fb      	ldr	r3, [r7, #28]
 801444a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 801444e:	69fb      	ldr	r3, [r7, #28]
 8014450:	6918      	ldr	r0, [r3, #16]
 8014452:	4b63      	ldr	r3, [pc, #396]	; (80145e0 <tcp_input+0x7e8>)
 8014454:	681a      	ldr	r2, [r3, #0]
 8014456:	2300      	movs	r3, #0
 8014458:	69f9      	ldr	r1, [r7, #28]
 801445a:	47a0      	blx	r4
 801445c:	4603      	mov	r3, r0
 801445e:	74fb      	strb	r3, [r7, #19]
 8014460:	e008      	b.n	8014474 <tcp_input+0x67c>
 8014462:	4b5f      	ldr	r3, [pc, #380]	; (80145e0 <tcp_input+0x7e8>)
 8014464:	681a      	ldr	r2, [r3, #0]
 8014466:	2300      	movs	r3, #0
 8014468:	69f9      	ldr	r1, [r7, #28]
 801446a:	2000      	movs	r0, #0
 801446c:	f7ff f8b0 	bl	80135d0 <tcp_recv_null>
 8014470:	4603      	mov	r3, r0
 8014472:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014474:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014478:	f113 0f0d 	cmn.w	r3, #13
 801447c:	d054      	beq.n	8014528 <tcp_input+0x730>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801447e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014482:	2b00      	cmp	r3, #0
 8014484:	d003      	beq.n	801448e <tcp_input+0x696>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014486:	4b56      	ldr	r3, [pc, #344]	; (80145e0 <tcp_input+0x7e8>)
 8014488:	681a      	ldr	r2, [r3, #0]
 801448a:	69fb      	ldr	r3, [r7, #28]
 801448c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801448e:	4b51      	ldr	r3, [pc, #324]	; (80145d4 <tcp_input+0x7dc>)
 8014490:	781b      	ldrb	r3, [r3, #0]
 8014492:	f003 0320 	and.w	r3, r3, #32
 8014496:	2b00      	cmp	r3, #0
 8014498:	d031      	beq.n	80144fe <tcp_input+0x706>
          if (pcb->refused_data != NULL) {
 801449a:	69fb      	ldr	r3, [r7, #28]
 801449c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d009      	beq.n	80144b6 <tcp_input+0x6be>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80144a2:	69fb      	ldr	r3, [r7, #28]
 80144a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144a6:	7b5a      	ldrb	r2, [r3, #13]
 80144a8:	69fb      	ldr	r3, [r7, #28]
 80144aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80144ac:	f042 0220 	orr.w	r2, r2, #32
 80144b0:	b2d2      	uxtb	r2, r2
 80144b2:	735a      	strb	r2, [r3, #13]
 80144b4:	e023      	b.n	80144fe <tcp_input+0x706>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80144b6:	69fb      	ldr	r3, [r7, #28]
 80144b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144ba:	f640 3268 	movw	r2, #2920	; 0xb68
 80144be:	4293      	cmp	r3, r2
 80144c0:	d005      	beq.n	80144ce <tcp_input+0x6d6>
              pcb->rcv_wnd++;
 80144c2:	69fb      	ldr	r3, [r7, #28]
 80144c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80144c6:	3301      	adds	r3, #1
 80144c8:	b29a      	uxth	r2, r3
 80144ca:	69fb      	ldr	r3, [r7, #28]
 80144cc:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80144ce:	69fb      	ldr	r3, [r7, #28]
 80144d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d00b      	beq.n	80144f0 <tcp_input+0x6f8>
 80144d8:	69fb      	ldr	r3, [r7, #28]
 80144da:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80144de:	69fb      	ldr	r3, [r7, #28]
 80144e0:	6918      	ldr	r0, [r3, #16]
 80144e2:	2300      	movs	r3, #0
 80144e4:	2200      	movs	r2, #0
 80144e6:	69f9      	ldr	r1, [r7, #28]
 80144e8:	47a0      	blx	r4
 80144ea:	4603      	mov	r3, r0
 80144ec:	74fb      	strb	r3, [r7, #19]
 80144ee:	e001      	b.n	80144f4 <tcp_input+0x6fc>
 80144f0:	2300      	movs	r3, #0
 80144f2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80144f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144f8:	f113 0f0d 	cmn.w	r3, #13
 80144fc:	d016      	beq.n	801452c <tcp_input+0x734>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80144fe:	4b34      	ldr	r3, [pc, #208]	; (80145d0 <tcp_input+0x7d8>)
 8014500:	2200      	movs	r2, #0
 8014502:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014504:	69f8      	ldr	r0, [r7, #28]
 8014506:	f000 f881 	bl	801460c <tcp_input_delayed_close>
 801450a:	4603      	mov	r3, r0
 801450c:	2b00      	cmp	r3, #0
 801450e:	d10f      	bne.n	8014530 <tcp_input+0x738>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014510:	69f8      	ldr	r0, [r7, #28]
 8014512:	f002 fb59 	bl	8016bc8 <tcp_output>
 8014516:	e00c      	b.n	8014532 <tcp_input+0x73a>
        goto aborted;
 8014518:	bf00      	nop
 801451a:	e00a      	b.n	8014532 <tcp_input+0x73a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801451c:	bf00      	nop
 801451e:	e008      	b.n	8014532 <tcp_input+0x73a>
              goto aborted;
 8014520:	bf00      	nop
 8014522:	e006      	b.n	8014532 <tcp_input+0x73a>
          goto aborted;
 8014524:	bf00      	nop
 8014526:	e004      	b.n	8014532 <tcp_input+0x73a>
            goto aborted;
 8014528:	bf00      	nop
 801452a:	e002      	b.n	8014532 <tcp_input+0x73a>
              goto aborted;
 801452c:	bf00      	nop
 801452e:	e000      	b.n	8014532 <tcp_input+0x73a>
          goto aborted;
 8014530:	bf00      	nop
    tcp_input_pcb = NULL;
 8014532:	4b27      	ldr	r3, [pc, #156]	; (80145d0 <tcp_input+0x7d8>)
 8014534:	2200      	movs	r2, #0
 8014536:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014538:	4b29      	ldr	r3, [pc, #164]	; (80145e0 <tcp_input+0x7e8>)
 801453a:	2200      	movs	r2, #0
 801453c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801453e:	4b2c      	ldr	r3, [pc, #176]	; (80145f0 <tcp_input+0x7f8>)
 8014540:	685b      	ldr	r3, [r3, #4]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d03f      	beq.n	80145c6 <tcp_input+0x7ce>
      pbuf_free(inseg.p);
 8014546:	4b2a      	ldr	r3, [pc, #168]	; (80145f0 <tcp_input+0x7f8>)
 8014548:	685b      	ldr	r3, [r3, #4]
 801454a:	4618      	mov	r0, r3
 801454c:	f7fd f91c 	bl	8011788 <pbuf_free>
      inseg.p = NULL;
 8014550:	4b27      	ldr	r3, [pc, #156]	; (80145f0 <tcp_input+0x7f8>)
 8014552:	2200      	movs	r2, #0
 8014554:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014556:	e036      	b.n	80145c6 <tcp_input+0x7ce>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014558:	4b26      	ldr	r3, [pc, #152]	; (80145f4 <tcp_input+0x7fc>)
 801455a:	681b      	ldr	r3, [r3, #0]
 801455c:	899b      	ldrh	r3, [r3, #12]
 801455e:	b29b      	uxth	r3, r3
 8014560:	4618      	mov	r0, r3
 8014562:	f7fa fd2d 	bl	800efc0 <lwip_htons>
 8014566:	4603      	mov	r3, r0
 8014568:	b2db      	uxtb	r3, r3
 801456a:	f003 0304 	and.w	r3, r3, #4
 801456e:	2b00      	cmp	r3, #0
 8014570:	d118      	bne.n	80145a4 <tcp_input+0x7ac>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014572:	4b21      	ldr	r3, [pc, #132]	; (80145f8 <tcp_input+0x800>)
 8014574:	6819      	ldr	r1, [r3, #0]
 8014576:	4b21      	ldr	r3, [pc, #132]	; (80145fc <tcp_input+0x804>)
 8014578:	881b      	ldrh	r3, [r3, #0]
 801457a:	461a      	mov	r2, r3
 801457c:	4b20      	ldr	r3, [pc, #128]	; (8014600 <tcp_input+0x808>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014582:	4b1c      	ldr	r3, [pc, #112]	; (80145f4 <tcp_input+0x7fc>)
 8014584:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014586:	885b      	ldrh	r3, [r3, #2]
 8014588:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801458a:	4a1a      	ldr	r2, [pc, #104]	; (80145f4 <tcp_input+0x7fc>)
 801458c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801458e:	8812      	ldrh	r2, [r2, #0]
 8014590:	b292      	uxth	r2, r2
 8014592:	9202      	str	r2, [sp, #8]
 8014594:	9301      	str	r3, [sp, #4]
 8014596:	4b1b      	ldr	r3, [pc, #108]	; (8014604 <tcp_input+0x80c>)
 8014598:	9300      	str	r3, [sp, #0]
 801459a:	4b1b      	ldr	r3, [pc, #108]	; (8014608 <tcp_input+0x810>)
 801459c:	4602      	mov	r2, r0
 801459e:	2000      	movs	r0, #0
 80145a0:	f003 f8c6 	bl	8017730 <tcp_rst>
    pbuf_free(p);
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f7fd f8ef 	bl	8011788 <pbuf_free>
  return;
 80145aa:	e00c      	b.n	80145c6 <tcp_input+0x7ce>
    goto dropped;
 80145ac:	bf00      	nop
 80145ae:	e006      	b.n	80145be <tcp_input+0x7c6>
    goto dropped;
 80145b0:	bf00      	nop
 80145b2:	e004      	b.n	80145be <tcp_input+0x7c6>
    goto dropped;
 80145b4:	bf00      	nop
 80145b6:	e002      	b.n	80145be <tcp_input+0x7c6>
      goto dropped;
 80145b8:	bf00      	nop
 80145ba:	e000      	b.n	80145be <tcp_input+0x7c6>
      goto dropped;
 80145bc:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80145be:	6878      	ldr	r0, [r7, #4]
 80145c0:	f7fd f8e2 	bl	8011788 <pbuf_free>
 80145c4:	e000      	b.n	80145c8 <tcp_input+0x7d0>
  return;
 80145c6:	bf00      	nop
}
 80145c8:	3724      	adds	r7, #36	; 0x24
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd90      	pop	{r4, r7, pc}
 80145ce:	bf00      	nop
 80145d0:	2400b2b8 	.word	0x2400b2b8
 80145d4:	240071c9 	.word	0x240071c9
 80145d8:	2400b2a4 	.word	0x2400b2a4
 80145dc:	240071c4 	.word	0x240071c4
 80145e0:	240071cc 	.word	0x240071cc
 80145e4:	0801dbec 	.word	0x0801dbec
 80145e8:	0801dde4 	.word	0x0801dde4
 80145ec:	0801dc7c 	.word	0x0801dc7c
 80145f0:	2400719c 	.word	0x2400719c
 80145f4:	240071ac 	.word	0x240071ac
 80145f8:	240071c0 	.word	0x240071c0
 80145fc:	240071c6 	.word	0x240071c6
 8014600:	240071bc 	.word	0x240071bc
 8014604:	24007420 	.word	0x24007420
 8014608:	24007424 	.word	0x24007424

0801460c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b082      	sub	sp, #8
 8014610:	af00      	add	r7, sp, #0
 8014612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d106      	bne.n	8014628 <tcp_input_delayed_close+0x1c>
 801461a:	4b17      	ldr	r3, [pc, #92]	; (8014678 <tcp_input_delayed_close+0x6c>)
 801461c:	f240 225a 	movw	r2, #602	; 0x25a
 8014620:	4916      	ldr	r1, [pc, #88]	; (801467c <tcp_input_delayed_close+0x70>)
 8014622:	4817      	ldr	r0, [pc, #92]	; (8014680 <tcp_input_delayed_close+0x74>)
 8014624:	f004 fc92 	bl	8018f4c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014628:	4b16      	ldr	r3, [pc, #88]	; (8014684 <tcp_input_delayed_close+0x78>)
 801462a:	781b      	ldrb	r3, [r3, #0]
 801462c:	f003 0310 	and.w	r3, r3, #16
 8014630:	2b00      	cmp	r3, #0
 8014632:	d01c      	beq.n	801466e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	8b5b      	ldrh	r3, [r3, #26]
 8014638:	f003 0310 	and.w	r3, r3, #16
 801463c:	2b00      	cmp	r3, #0
 801463e:	d10d      	bne.n	801465c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014646:	2b00      	cmp	r3, #0
 8014648:	d008      	beq.n	801465c <tcp_input_delayed_close+0x50>
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	6912      	ldr	r2, [r2, #16]
 8014654:	f06f 010e 	mvn.w	r1, #14
 8014658:	4610      	mov	r0, r2
 801465a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801465c:	6879      	ldr	r1, [r7, #4]
 801465e:	480a      	ldr	r0, [pc, #40]	; (8014688 <tcp_input_delayed_close+0x7c>)
 8014660:	f7ff fa74 	bl	8013b4c <tcp_pcb_remove>
    tcp_free(pcb);
 8014664:	6878      	ldr	r0, [r7, #4]
 8014666:	f7fd fcc7 	bl	8011ff8 <tcp_free>
    return 1;
 801466a:	2301      	movs	r3, #1
 801466c:	e000      	b.n	8014670 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801466e:	2300      	movs	r3, #0
}
 8014670:	4618      	mov	r0, r3
 8014672:	3708      	adds	r7, #8
 8014674:	46bd      	mov	sp, r7
 8014676:	bd80      	pop	{r7, pc}
 8014678:	0801dbec 	.word	0x0801dbec
 801467c:	0801de00 	.word	0x0801de00
 8014680:	0801dc7c 	.word	0x0801dc7c
 8014684:	240071c9 	.word	0x240071c9
 8014688:	2400b2a4 	.word	0x2400b2a4

0801468c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801468c:	b590      	push	{r4, r7, lr}
 801468e:	b08b      	sub	sp, #44	; 0x2c
 8014690:	af04      	add	r7, sp, #16
 8014692:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014694:	4b6f      	ldr	r3, [pc, #444]	; (8014854 <tcp_listen_input+0x1c8>)
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	f003 0304 	and.w	r3, r3, #4
 801469c:	2b00      	cmp	r3, #0
 801469e:	f040 80d2 	bne.w	8014846 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d106      	bne.n	80146b6 <tcp_listen_input+0x2a>
 80146a8:	4b6b      	ldr	r3, [pc, #428]	; (8014858 <tcp_listen_input+0x1cc>)
 80146aa:	f240 2281 	movw	r2, #641	; 0x281
 80146ae:	496b      	ldr	r1, [pc, #428]	; (801485c <tcp_listen_input+0x1d0>)
 80146b0:	486b      	ldr	r0, [pc, #428]	; (8014860 <tcp_listen_input+0x1d4>)
 80146b2:	f004 fc4b 	bl	8018f4c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80146b6:	4b67      	ldr	r3, [pc, #412]	; (8014854 <tcp_listen_input+0x1c8>)
 80146b8:	781b      	ldrb	r3, [r3, #0]
 80146ba:	f003 0310 	and.w	r3, r3, #16
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d019      	beq.n	80146f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146c2:	4b68      	ldr	r3, [pc, #416]	; (8014864 <tcp_listen_input+0x1d8>)
 80146c4:	6819      	ldr	r1, [r3, #0]
 80146c6:	4b68      	ldr	r3, [pc, #416]	; (8014868 <tcp_listen_input+0x1dc>)
 80146c8:	881b      	ldrh	r3, [r3, #0]
 80146ca:	461a      	mov	r2, r3
 80146cc:	4b67      	ldr	r3, [pc, #412]	; (801486c <tcp_listen_input+0x1e0>)
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80146d2:	4b67      	ldr	r3, [pc, #412]	; (8014870 <tcp_listen_input+0x1e4>)
 80146d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146d6:	885b      	ldrh	r3, [r3, #2]
 80146d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80146da:	4a65      	ldr	r2, [pc, #404]	; (8014870 <tcp_listen_input+0x1e4>)
 80146dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146de:	8812      	ldrh	r2, [r2, #0]
 80146e0:	b292      	uxth	r2, r2
 80146e2:	9202      	str	r2, [sp, #8]
 80146e4:	9301      	str	r3, [sp, #4]
 80146e6:	4b63      	ldr	r3, [pc, #396]	; (8014874 <tcp_listen_input+0x1e8>)
 80146e8:	9300      	str	r3, [sp, #0]
 80146ea:	4b63      	ldr	r3, [pc, #396]	; (8014878 <tcp_listen_input+0x1ec>)
 80146ec:	4602      	mov	r2, r0
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	f003 f81e 	bl	8017730 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80146f4:	e0a9      	b.n	801484a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80146f6:	4b57      	ldr	r3, [pc, #348]	; (8014854 <tcp_listen_input+0x1c8>)
 80146f8:	781b      	ldrb	r3, [r3, #0]
 80146fa:	f003 0302 	and.w	r3, r3, #2
 80146fe:	2b00      	cmp	r3, #0
 8014700:	f000 80a3 	beq.w	801484a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	7d5b      	ldrb	r3, [r3, #21]
 8014708:	4618      	mov	r0, r3
 801470a:	f7ff f885 	bl	8013818 <tcp_alloc>
 801470e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014710:	697b      	ldr	r3, [r7, #20]
 8014712:	2b00      	cmp	r3, #0
 8014714:	d111      	bne.n	801473a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	699b      	ldr	r3, [r3, #24]
 801471a:	2b00      	cmp	r3, #0
 801471c:	d00a      	beq.n	8014734 <tcp_listen_input+0xa8>
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	699b      	ldr	r3, [r3, #24]
 8014722:	687a      	ldr	r2, [r7, #4]
 8014724:	6910      	ldr	r0, [r2, #16]
 8014726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801472a:	2100      	movs	r1, #0
 801472c:	4798      	blx	r3
 801472e:	4603      	mov	r3, r0
 8014730:	73bb      	strb	r3, [r7, #14]
      return;
 8014732:	e08b      	b.n	801484c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014734:	23f0      	movs	r3, #240	; 0xf0
 8014736:	73bb      	strb	r3, [r7, #14]
      return;
 8014738:	e088      	b.n	801484c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801473a:	4b50      	ldr	r3, [pc, #320]	; (801487c <tcp_listen_input+0x1f0>)
 801473c:	695a      	ldr	r2, [r3, #20]
 801473e:	697b      	ldr	r3, [r7, #20]
 8014740:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014742:	4b4e      	ldr	r3, [pc, #312]	; (801487c <tcp_listen_input+0x1f0>)
 8014744:	691a      	ldr	r2, [r3, #16]
 8014746:	697b      	ldr	r3, [r7, #20]
 8014748:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	8ada      	ldrh	r2, [r3, #22]
 801474e:	697b      	ldr	r3, [r7, #20]
 8014750:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014752:	4b47      	ldr	r3, [pc, #284]	; (8014870 <tcp_listen_input+0x1e4>)
 8014754:	681b      	ldr	r3, [r3, #0]
 8014756:	881b      	ldrh	r3, [r3, #0]
 8014758:	b29a      	uxth	r2, r3
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801475e:	697b      	ldr	r3, [r7, #20]
 8014760:	2203      	movs	r2, #3
 8014762:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014764:	4b41      	ldr	r3, [pc, #260]	; (801486c <tcp_listen_input+0x1e0>)
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	1c5a      	adds	r2, r3, #1
 801476a:	697b      	ldr	r3, [r7, #20]
 801476c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801476e:	697b      	ldr	r3, [r7, #20]
 8014770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014772:	697b      	ldr	r3, [r7, #20]
 8014774:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8014776:	6978      	ldr	r0, [r7, #20]
 8014778:	f7ff fa6e 	bl	8013c58 <tcp_next_iss>
 801477c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	693a      	ldr	r2, [r7, #16]
 8014782:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014784:	697b      	ldr	r3, [r7, #20]
 8014786:	693a      	ldr	r2, [r7, #16]
 8014788:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801478a:	697b      	ldr	r3, [r7, #20]
 801478c:	693a      	ldr	r2, [r7, #16]
 801478e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014790:	697b      	ldr	r3, [r7, #20]
 8014792:	693a      	ldr	r2, [r7, #16]
 8014794:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014796:	4b35      	ldr	r3, [pc, #212]	; (801486c <tcp_listen_input+0x1e0>)
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	1e5a      	subs	r2, r3, #1
 801479c:	697b      	ldr	r3, [r7, #20]
 801479e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	691a      	ldr	r2, [r3, #16]
 80147a4:	697b      	ldr	r3, [r7, #20]
 80147a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80147a8:	697b      	ldr	r3, [r7, #20]
 80147aa:	687a      	ldr	r2, [r7, #4]
 80147ac:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	7a5b      	ldrb	r3, [r3, #9]
 80147b2:	f003 030c 	and.w	r3, r3, #12
 80147b6:	b2da      	uxtb	r2, r3
 80147b8:	697b      	ldr	r3, [r7, #20]
 80147ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	7a1a      	ldrb	r2, [r3, #8]
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80147c4:	4b2e      	ldr	r3, [pc, #184]	; (8014880 <tcp_listen_input+0x1f4>)
 80147c6:	681a      	ldr	r2, [r3, #0]
 80147c8:	697b      	ldr	r3, [r7, #20]
 80147ca:	60da      	str	r2, [r3, #12]
 80147cc:	4a2c      	ldr	r2, [pc, #176]	; (8014880 <tcp_listen_input+0x1f4>)
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	6013      	str	r3, [r2, #0]
 80147d2:	f003 f96f 	bl	8017ab4 <tcp_timer_needed>
 80147d6:	4b2b      	ldr	r3, [pc, #172]	; (8014884 <tcp_listen_input+0x1f8>)
 80147d8:	2201      	movs	r2, #1
 80147da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80147dc:	6978      	ldr	r0, [r7, #20]
 80147de:	f001 f9d5 	bl	8015b8c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80147e2:	4b23      	ldr	r3, [pc, #140]	; (8014870 <tcp_listen_input+0x1e4>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	89db      	ldrh	r3, [r3, #14]
 80147e8:	b29a      	uxth	r2, r3
 80147ea:	697b      	ldr	r3, [r7, #20]
 80147ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80147f6:	697b      	ldr	r3, [r7, #20]
 80147f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	3304      	adds	r3, #4
 8014804:	4618      	mov	r0, r3
 8014806:	f7f9 f98d 	bl	800db24 <ip4_route>
 801480a:	4601      	mov	r1, r0
 801480c:	697b      	ldr	r3, [r7, #20]
 801480e:	3304      	adds	r3, #4
 8014810:	461a      	mov	r2, r3
 8014812:	4620      	mov	r0, r4
 8014814:	f7ff fa46 	bl	8013ca4 <tcp_eff_send_mss_netif>
 8014818:	4603      	mov	r3, r0
 801481a:	461a      	mov	r2, r3
 801481c:	697b      	ldr	r3, [r7, #20]
 801481e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014820:	2112      	movs	r1, #18
 8014822:	6978      	ldr	r0, [r7, #20]
 8014824:	f002 f8e2 	bl	80169ec <tcp_enqueue_flags>
 8014828:	4603      	mov	r3, r0
 801482a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801482c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014830:	2b00      	cmp	r3, #0
 8014832:	d004      	beq.n	801483e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014834:	2100      	movs	r1, #0
 8014836:	6978      	ldr	r0, [r7, #20]
 8014838:	f7fd fe64 	bl	8012504 <tcp_abandon>
      return;
 801483c:	e006      	b.n	801484c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801483e:	6978      	ldr	r0, [r7, #20]
 8014840:	f002 f9c2 	bl	8016bc8 <tcp_output>
  return;
 8014844:	e001      	b.n	801484a <tcp_listen_input+0x1be>
    return;
 8014846:	bf00      	nop
 8014848:	e000      	b.n	801484c <tcp_listen_input+0x1c0>
  return;
 801484a:	bf00      	nop
}
 801484c:	371c      	adds	r7, #28
 801484e:	46bd      	mov	sp, r7
 8014850:	bd90      	pop	{r4, r7, pc}
 8014852:	bf00      	nop
 8014854:	240071c8 	.word	0x240071c8
 8014858:	0801dbec 	.word	0x0801dbec
 801485c:	0801de28 	.word	0x0801de28
 8014860:	0801dc7c 	.word	0x0801dc7c
 8014864:	240071c0 	.word	0x240071c0
 8014868:	240071c6 	.word	0x240071c6
 801486c:	240071bc 	.word	0x240071bc
 8014870:	240071ac 	.word	0x240071ac
 8014874:	24007420 	.word	0x24007420
 8014878:	24007424 	.word	0x24007424
 801487c:	24007410 	.word	0x24007410
 8014880:	2400b2a4 	.word	0x2400b2a4
 8014884:	2400b2a0 	.word	0x2400b2a0

08014888 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b086      	sub	sp, #24
 801488c:	af04      	add	r7, sp, #16
 801488e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014890:	4b2f      	ldr	r3, [pc, #188]	; (8014950 <tcp_timewait_input+0xc8>)
 8014892:	781b      	ldrb	r3, [r3, #0]
 8014894:	f003 0304 	and.w	r3, r3, #4
 8014898:	2b00      	cmp	r3, #0
 801489a:	d153      	bne.n	8014944 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2b00      	cmp	r3, #0
 80148a0:	d106      	bne.n	80148b0 <tcp_timewait_input+0x28>
 80148a2:	4b2c      	ldr	r3, [pc, #176]	; (8014954 <tcp_timewait_input+0xcc>)
 80148a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80148a8:	492b      	ldr	r1, [pc, #172]	; (8014958 <tcp_timewait_input+0xd0>)
 80148aa:	482c      	ldr	r0, [pc, #176]	; (801495c <tcp_timewait_input+0xd4>)
 80148ac:	f004 fb4e 	bl	8018f4c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80148b0:	4b27      	ldr	r3, [pc, #156]	; (8014950 <tcp_timewait_input+0xc8>)
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	f003 0302 	and.w	r3, r3, #2
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d02a      	beq.n	8014912 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80148bc:	4b28      	ldr	r3, [pc, #160]	; (8014960 <tcp_timewait_input+0xd8>)
 80148be:	681a      	ldr	r2, [r3, #0]
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148c4:	1ad3      	subs	r3, r2, r3
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	db2d      	blt.n	8014926 <tcp_timewait_input+0x9e>
 80148ca:	4b25      	ldr	r3, [pc, #148]	; (8014960 <tcp_timewait_input+0xd8>)
 80148cc:	681a      	ldr	r2, [r3, #0]
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148d2:	6879      	ldr	r1, [r7, #4]
 80148d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80148d6:	440b      	add	r3, r1
 80148d8:	1ad3      	subs	r3, r2, r3
 80148da:	2b00      	cmp	r3, #0
 80148dc:	dc23      	bgt.n	8014926 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148de:	4b21      	ldr	r3, [pc, #132]	; (8014964 <tcp_timewait_input+0xdc>)
 80148e0:	6819      	ldr	r1, [r3, #0]
 80148e2:	4b21      	ldr	r3, [pc, #132]	; (8014968 <tcp_timewait_input+0xe0>)
 80148e4:	881b      	ldrh	r3, [r3, #0]
 80148e6:	461a      	mov	r2, r3
 80148e8:	4b1d      	ldr	r3, [pc, #116]	; (8014960 <tcp_timewait_input+0xd8>)
 80148ea:	681b      	ldr	r3, [r3, #0]
 80148ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80148ee:	4b1f      	ldr	r3, [pc, #124]	; (801496c <tcp_timewait_input+0xe4>)
 80148f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148f2:	885b      	ldrh	r3, [r3, #2]
 80148f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80148f6:	4a1d      	ldr	r2, [pc, #116]	; (801496c <tcp_timewait_input+0xe4>)
 80148f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80148fa:	8812      	ldrh	r2, [r2, #0]
 80148fc:	b292      	uxth	r2, r2
 80148fe:	9202      	str	r2, [sp, #8]
 8014900:	9301      	str	r3, [sp, #4]
 8014902:	4b1b      	ldr	r3, [pc, #108]	; (8014970 <tcp_timewait_input+0xe8>)
 8014904:	9300      	str	r3, [sp, #0]
 8014906:	4b1b      	ldr	r3, [pc, #108]	; (8014974 <tcp_timewait_input+0xec>)
 8014908:	4602      	mov	r2, r0
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f002 ff10 	bl	8017730 <tcp_rst>
      return;
 8014910:	e01b      	b.n	801494a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014912:	4b0f      	ldr	r3, [pc, #60]	; (8014950 <tcp_timewait_input+0xc8>)
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	f003 0301 	and.w	r3, r3, #1
 801491a:	2b00      	cmp	r3, #0
 801491c:	d003      	beq.n	8014926 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801491e:	4b16      	ldr	r3, [pc, #88]	; (8014978 <tcp_timewait_input+0xf0>)
 8014920:	681a      	ldr	r2, [r3, #0]
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014926:	4b10      	ldr	r3, [pc, #64]	; (8014968 <tcp_timewait_input+0xe0>)
 8014928:	881b      	ldrh	r3, [r3, #0]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d00c      	beq.n	8014948 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	8b5b      	ldrh	r3, [r3, #26]
 8014932:	f043 0302 	orr.w	r3, r3, #2
 8014936:	b29a      	uxth	r2, r3
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801493c:	6878      	ldr	r0, [r7, #4]
 801493e:	f002 f943 	bl	8016bc8 <tcp_output>
  }
  return;
 8014942:	e001      	b.n	8014948 <tcp_timewait_input+0xc0>
    return;
 8014944:	bf00      	nop
 8014946:	e000      	b.n	801494a <tcp_timewait_input+0xc2>
  return;
 8014948:	bf00      	nop
}
 801494a:	3708      	adds	r7, #8
 801494c:	46bd      	mov	sp, r7
 801494e:	bd80      	pop	{r7, pc}
 8014950:	240071c8 	.word	0x240071c8
 8014954:	0801dbec 	.word	0x0801dbec
 8014958:	0801de48 	.word	0x0801de48
 801495c:	0801dc7c 	.word	0x0801dc7c
 8014960:	240071bc 	.word	0x240071bc
 8014964:	240071c0 	.word	0x240071c0
 8014968:	240071c6 	.word	0x240071c6
 801496c:	240071ac 	.word	0x240071ac
 8014970:	24007420 	.word	0x24007420
 8014974:	24007424 	.word	0x24007424
 8014978:	2400b2a8 	.word	0x2400b2a8

0801497c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801497c:	b590      	push	{r4, r7, lr}
 801497e:	b08d      	sub	sp, #52	; 0x34
 8014980:	af04      	add	r7, sp, #16
 8014982:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014984:	2300      	movs	r3, #0
 8014986:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014988:	2300      	movs	r3, #0
 801498a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2b00      	cmp	r3, #0
 8014990:	d106      	bne.n	80149a0 <tcp_process+0x24>
 8014992:	4ba5      	ldr	r3, [pc, #660]	; (8014c28 <tcp_process+0x2ac>)
 8014994:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014998:	49a4      	ldr	r1, [pc, #656]	; (8014c2c <tcp_process+0x2b0>)
 801499a:	48a5      	ldr	r0, [pc, #660]	; (8014c30 <tcp_process+0x2b4>)
 801499c:	f004 fad6 	bl	8018f4c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80149a0:	4ba4      	ldr	r3, [pc, #656]	; (8014c34 <tcp_process+0x2b8>)
 80149a2:	781b      	ldrb	r3, [r3, #0]
 80149a4:	f003 0304 	and.w	r3, r3, #4
 80149a8:	2b00      	cmp	r3, #0
 80149aa:	d04e      	beq.n	8014a4a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	7d1b      	ldrb	r3, [r3, #20]
 80149b0:	2b02      	cmp	r3, #2
 80149b2:	d108      	bne.n	80149c6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80149b8:	4b9f      	ldr	r3, [pc, #636]	; (8014c38 <tcp_process+0x2bc>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	429a      	cmp	r2, r3
 80149be:	d123      	bne.n	8014a08 <tcp_process+0x8c>
        acceptable = 1;
 80149c0:	2301      	movs	r3, #1
 80149c2:	76fb      	strb	r3, [r7, #27]
 80149c4:	e020      	b.n	8014a08 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80149ca:	4b9c      	ldr	r3, [pc, #624]	; (8014c3c <tcp_process+0x2c0>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	d102      	bne.n	80149d8 <tcp_process+0x5c>
        acceptable = 1;
 80149d2:	2301      	movs	r3, #1
 80149d4:	76fb      	strb	r3, [r7, #27]
 80149d6:	e017      	b.n	8014a08 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80149d8:	4b98      	ldr	r3, [pc, #608]	; (8014c3c <tcp_process+0x2c0>)
 80149da:	681a      	ldr	r2, [r3, #0]
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149e0:	1ad3      	subs	r3, r2, r3
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	db10      	blt.n	8014a08 <tcp_process+0x8c>
 80149e6:	4b95      	ldr	r3, [pc, #596]	; (8014c3c <tcp_process+0x2c0>)
 80149e8:	681a      	ldr	r2, [r3, #0]
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149ee:	6879      	ldr	r1, [r7, #4]
 80149f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80149f2:	440b      	add	r3, r1
 80149f4:	1ad3      	subs	r3, r2, r3
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	dc06      	bgt.n	8014a08 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	8b5b      	ldrh	r3, [r3, #26]
 80149fe:	f043 0302 	orr.w	r3, r3, #2
 8014a02:	b29a      	uxth	r2, r3
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014a08:	7efb      	ldrb	r3, [r7, #27]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d01b      	beq.n	8014a46 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	7d1b      	ldrb	r3, [r3, #20]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d106      	bne.n	8014a24 <tcp_process+0xa8>
 8014a16:	4b84      	ldr	r3, [pc, #528]	; (8014c28 <tcp_process+0x2ac>)
 8014a18:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014a1c:	4988      	ldr	r1, [pc, #544]	; (8014c40 <tcp_process+0x2c4>)
 8014a1e:	4884      	ldr	r0, [pc, #528]	; (8014c30 <tcp_process+0x2b4>)
 8014a20:	f004 fa94 	bl	8018f4c <iprintf>
      recv_flags |= TF_RESET;
 8014a24:	4b87      	ldr	r3, [pc, #540]	; (8014c44 <tcp_process+0x2c8>)
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	f043 0308 	orr.w	r3, r3, #8
 8014a2c:	b2da      	uxtb	r2, r3
 8014a2e:	4b85      	ldr	r3, [pc, #532]	; (8014c44 <tcp_process+0x2c8>)
 8014a30:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	8b5b      	ldrh	r3, [r3, #26]
 8014a36:	f023 0301 	bic.w	r3, r3, #1
 8014a3a:	b29a      	uxth	r2, r3
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014a40:	f06f 030d 	mvn.w	r3, #13
 8014a44:	e37a      	b.n	801513c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014a46:	2300      	movs	r3, #0
 8014a48:	e378      	b.n	801513c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014a4a:	4b7a      	ldr	r3, [pc, #488]	; (8014c34 <tcp_process+0x2b8>)
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	f003 0302 	and.w	r3, r3, #2
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d010      	beq.n	8014a78 <tcp_process+0xfc>
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	7d1b      	ldrb	r3, [r3, #20]
 8014a5a:	2b02      	cmp	r3, #2
 8014a5c:	d00c      	beq.n	8014a78 <tcp_process+0xfc>
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	7d1b      	ldrb	r3, [r3, #20]
 8014a62:	2b03      	cmp	r3, #3
 8014a64:	d008      	beq.n	8014a78 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	8b5b      	ldrh	r3, [r3, #26]
 8014a6a:	f043 0302 	orr.w	r3, r3, #2
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014a74:	2300      	movs	r3, #0
 8014a76:	e361      	b.n	801513c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	8b5b      	ldrh	r3, [r3, #26]
 8014a7c:	f003 0310 	and.w	r3, r3, #16
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d103      	bne.n	8014a8c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014a84:	4b70      	ldr	r3, [pc, #448]	; (8014c48 <tcp_process+0x2cc>)
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	2200      	movs	r2, #0
 8014a90:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pcb->persist_probe = 0;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	2200      	movs	r2, #0
 8014a98:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f001 f875 	bl	8015b8c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	7d1b      	ldrb	r3, [r3, #20]
 8014aa6:	3b02      	subs	r3, #2
 8014aa8:	2b07      	cmp	r3, #7
 8014aaa:	f200 8337 	bhi.w	801511c <tcp_process+0x7a0>
 8014aae:	a201      	add	r2, pc, #4	; (adr r2, 8014ab4 <tcp_process+0x138>)
 8014ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ab4:	08014ad5 	.word	0x08014ad5
 8014ab8:	08014d05 	.word	0x08014d05
 8014abc:	08014e7d 	.word	0x08014e7d
 8014ac0:	08014ea7 	.word	0x08014ea7
 8014ac4:	08014fcb 	.word	0x08014fcb
 8014ac8:	08014e7d 	.word	0x08014e7d
 8014acc:	08015057 	.word	0x08015057
 8014ad0:	080150e7 	.word	0x080150e7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014ad4:	4b57      	ldr	r3, [pc, #348]	; (8014c34 <tcp_process+0x2b8>)
 8014ad6:	781b      	ldrb	r3, [r3, #0]
 8014ad8:	f003 0310 	and.w	r3, r3, #16
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	f000 80e4 	beq.w	8014caa <tcp_process+0x32e>
 8014ae2:	4b54      	ldr	r3, [pc, #336]	; (8014c34 <tcp_process+0x2b8>)
 8014ae4:	781b      	ldrb	r3, [r3, #0]
 8014ae6:	f003 0302 	and.w	r3, r3, #2
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	f000 80dd 	beq.w	8014caa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014af4:	1c5a      	adds	r2, r3, #1
 8014af6:	4b50      	ldr	r3, [pc, #320]	; (8014c38 <tcp_process+0x2bc>)
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	429a      	cmp	r2, r3
 8014afc:	f040 80d5 	bne.w	8014caa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014b00:	4b4e      	ldr	r3, [pc, #312]	; (8014c3c <tcp_process+0x2c0>)
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	1c5a      	adds	r2, r3, #1
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014b12:	4b49      	ldr	r3, [pc, #292]	; (8014c38 <tcp_process+0x2bc>)
 8014b14:	681a      	ldr	r2, [r3, #0]
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014b1a:	4b4c      	ldr	r3, [pc, #304]	; (8014c4c <tcp_process+0x2d0>)
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	89db      	ldrh	r3, [r3, #14]
 8014b20:	b29a      	uxth	r2, r3
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014b34:	4b41      	ldr	r3, [pc, #260]	; (8014c3c <tcp_process+0x2c0>)
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	1e5a      	subs	r2, r3, #1
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	2204      	movs	r2, #4
 8014b42:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014b48:	687b      	ldr	r3, [r7, #4]
 8014b4a:	3304      	adds	r3, #4
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7f8 ffe9 	bl	800db24 <ip4_route>
 8014b52:	4601      	mov	r1, r0
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	3304      	adds	r3, #4
 8014b58:	461a      	mov	r2, r3
 8014b5a:	4620      	mov	r0, r4
 8014b5c:	f7ff f8a2 	bl	8013ca4 <tcp_eff_send_mss_netif>
 8014b60:	4603      	mov	r3, r0
 8014b62:	461a      	mov	r2, r3
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b6c:	009a      	lsls	r2, r3, #2
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b72:	005b      	lsls	r3, r3, #1
 8014b74:	f241 111c 	movw	r1, #4380	; 0x111c
 8014b78:	428b      	cmp	r3, r1
 8014b7a:	bf38      	it	cc
 8014b7c:	460b      	movcc	r3, r1
 8014b7e:	429a      	cmp	r2, r3
 8014b80:	d204      	bcs.n	8014b8c <tcp_process+0x210>
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b86:	009b      	lsls	r3, r3, #2
 8014b88:	b29b      	uxth	r3, r3
 8014b8a:	e00d      	b.n	8014ba8 <tcp_process+0x22c>
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b90:	005b      	lsls	r3, r3, #1
 8014b92:	f241 121c 	movw	r2, #4380	; 0x111c
 8014b96:	4293      	cmp	r3, r2
 8014b98:	d904      	bls.n	8014ba4 <tcp_process+0x228>
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b9e:	005b      	lsls	r3, r3, #1
 8014ba0:	b29b      	uxth	r3, r3
 8014ba2:	e001      	b.n	8014ba8 <tcp_process+0x22c>
 8014ba4:	f241 131c 	movw	r3, #4380	; 0x111c
 8014ba8:	687a      	ldr	r2, [r7, #4]
 8014baa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d106      	bne.n	8014bc6 <tcp_process+0x24a>
 8014bb8:	4b1b      	ldr	r3, [pc, #108]	; (8014c28 <tcp_process+0x2ac>)
 8014bba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014bbe:	4924      	ldr	r1, [pc, #144]	; (8014c50 <tcp_process+0x2d4>)
 8014bc0:	481b      	ldr	r0, [pc, #108]	; (8014c30 <tcp_process+0x2b4>)
 8014bc2:	f004 f9c3 	bl	8018f4c <iprintf>
        --pcb->snd_queuelen;
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014bcc:	3b01      	subs	r3, #1
 8014bce:	b29a      	uxth	r2, r3
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014bda:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014bdc:	69fb      	ldr	r3, [r7, #28]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d111      	bne.n	8014c06 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014be6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014be8:	69fb      	ldr	r3, [r7, #28]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d106      	bne.n	8014bfc <tcp_process+0x280>
 8014bee:	4b0e      	ldr	r3, [pc, #56]	; (8014c28 <tcp_process+0x2ac>)
 8014bf0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014bf4:	4917      	ldr	r1, [pc, #92]	; (8014c54 <tcp_process+0x2d8>)
 8014bf6:	480e      	ldr	r0, [pc, #56]	; (8014c30 <tcp_process+0x2b4>)
 8014bf8:	f004 f9a8 	bl	8018f4c <iprintf>
          pcb->unsent = rseg->next;
 8014bfc:	69fb      	ldr	r3, [r7, #28]
 8014bfe:	681a      	ldr	r2, [r3, #0]
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	66da      	str	r2, [r3, #108]	; 0x6c
 8014c04:	e003      	b.n	8014c0e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8014c06:	69fb      	ldr	r3, [r7, #28]
 8014c08:	681a      	ldr	r2, [r3, #0]
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014c0e:	69f8      	ldr	r0, [r7, #28]
 8014c10:	f7fe fcc5 	bl	801359e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d11d      	bne.n	8014c58 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c22:	861a      	strh	r2, [r3, #48]	; 0x30
 8014c24:	e01f      	b.n	8014c66 <tcp_process+0x2ea>
 8014c26:	bf00      	nop
 8014c28:	0801dbec 	.word	0x0801dbec
 8014c2c:	0801de68 	.word	0x0801de68
 8014c30:	0801dc7c 	.word	0x0801dc7c
 8014c34:	240071c8 	.word	0x240071c8
 8014c38:	240071c0 	.word	0x240071c0
 8014c3c:	240071bc 	.word	0x240071bc
 8014c40:	0801de84 	.word	0x0801de84
 8014c44:	240071c9 	.word	0x240071c9
 8014c48:	2400b2a8 	.word	0x2400b2a8
 8014c4c:	240071ac 	.word	0x240071ac
 8014c50:	0801dea4 	.word	0x0801dea4
 8014c54:	0801debc 	.word	0x0801debc
        } else {
          pcb->rtime = 0;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2200      	movs	r2, #0
 8014c5c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2200      	movs	r2, #0
 8014c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d00a      	beq.n	8014c86 <tcp_process+0x30a>
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014c76:	687a      	ldr	r2, [r7, #4]
 8014c78:	6910      	ldr	r0, [r2, #16]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	6879      	ldr	r1, [r7, #4]
 8014c7e:	4798      	blx	r3
 8014c80:	4603      	mov	r3, r0
 8014c82:	76bb      	strb	r3, [r7, #26]
 8014c84:	e001      	b.n	8014c8a <tcp_process+0x30e>
 8014c86:	2300      	movs	r3, #0
 8014c88:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014c8a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014c8e:	f113 0f0d 	cmn.w	r3, #13
 8014c92:	d102      	bne.n	8014c9a <tcp_process+0x31e>
          return ERR_ABRT;
 8014c94:	f06f 030c 	mvn.w	r3, #12
 8014c98:	e250      	b.n	801513c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	8b5b      	ldrh	r3, [r3, #26]
 8014c9e:	f043 0302 	orr.w	r3, r3, #2
 8014ca2:	b29a      	uxth	r2, r3
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014ca8:	e23a      	b.n	8015120 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014caa:	4b9d      	ldr	r3, [pc, #628]	; (8014f20 <tcp_process+0x5a4>)
 8014cac:	781b      	ldrb	r3, [r3, #0]
 8014cae:	f003 0310 	and.w	r3, r3, #16
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	f000 8234 	beq.w	8015120 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014cb8:	4b9a      	ldr	r3, [pc, #616]	; (8014f24 <tcp_process+0x5a8>)
 8014cba:	6819      	ldr	r1, [r3, #0]
 8014cbc:	4b9a      	ldr	r3, [pc, #616]	; (8014f28 <tcp_process+0x5ac>)
 8014cbe:	881b      	ldrh	r3, [r3, #0]
 8014cc0:	461a      	mov	r2, r3
 8014cc2:	4b9a      	ldr	r3, [pc, #616]	; (8014f2c <tcp_process+0x5b0>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014cc8:	4b99      	ldr	r3, [pc, #612]	; (8014f30 <tcp_process+0x5b4>)
 8014cca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014ccc:	885b      	ldrh	r3, [r3, #2]
 8014cce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014cd0:	4a97      	ldr	r2, [pc, #604]	; (8014f30 <tcp_process+0x5b4>)
 8014cd2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014cd4:	8812      	ldrh	r2, [r2, #0]
 8014cd6:	b292      	uxth	r2, r2
 8014cd8:	9202      	str	r2, [sp, #8]
 8014cda:	9301      	str	r3, [sp, #4]
 8014cdc:	4b95      	ldr	r3, [pc, #596]	; (8014f34 <tcp_process+0x5b8>)
 8014cde:	9300      	str	r3, [sp, #0]
 8014ce0:	4b95      	ldr	r3, [pc, #596]	; (8014f38 <tcp_process+0x5bc>)
 8014ce2:	4602      	mov	r2, r0
 8014ce4:	6878      	ldr	r0, [r7, #4]
 8014ce6:	f002 fd23 	bl	8017730 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014cf0:	2b05      	cmp	r3, #5
 8014cf2:	f200 8215 	bhi.w	8015120 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014cfc:	6878      	ldr	r0, [r7, #4]
 8014cfe:	f002 faed 	bl	80172dc <tcp_rexmit_rto>
      break;
 8014d02:	e20d      	b.n	8015120 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014d04:	4b86      	ldr	r3, [pc, #536]	; (8014f20 <tcp_process+0x5a4>)
 8014d06:	781b      	ldrb	r3, [r3, #0]
 8014d08:	f003 0310 	and.w	r3, r3, #16
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	f000 80a1 	beq.w	8014e54 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014d12:	4b84      	ldr	r3, [pc, #528]	; (8014f24 <tcp_process+0x5a8>)
 8014d14:	681a      	ldr	r2, [r3, #0]
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d1a:	1ad3      	subs	r3, r2, r3
 8014d1c:	3b01      	subs	r3, #1
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	db7e      	blt.n	8014e20 <tcp_process+0x4a4>
 8014d22:	4b80      	ldr	r3, [pc, #512]	; (8014f24 <tcp_process+0x5a8>)
 8014d24:	681a      	ldr	r2, [r3, #0]
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d2a:	1ad3      	subs	r3, r2, r3
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	dc77      	bgt.n	8014e20 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	2204      	movs	r2, #4
 8014d34:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d102      	bne.n	8014d44 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014d3e:	23fa      	movs	r3, #250	; 0xfa
 8014d40:	76bb      	strb	r3, [r7, #26]
 8014d42:	e01d      	b.n	8014d80 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d48:	699b      	ldr	r3, [r3, #24]
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d106      	bne.n	8014d5c <tcp_process+0x3e0>
 8014d4e:	4b7b      	ldr	r3, [pc, #492]	; (8014f3c <tcp_process+0x5c0>)
 8014d50:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014d54:	497a      	ldr	r1, [pc, #488]	; (8014f40 <tcp_process+0x5c4>)
 8014d56:	487b      	ldr	r0, [pc, #492]	; (8014f44 <tcp_process+0x5c8>)
 8014d58:	f004 f8f8 	bl	8018f4c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d60:	699b      	ldr	r3, [r3, #24]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d00a      	beq.n	8014d7c <tcp_process+0x400>
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014d6a:	699b      	ldr	r3, [r3, #24]
 8014d6c:	687a      	ldr	r2, [r7, #4]
 8014d6e:	6910      	ldr	r0, [r2, #16]
 8014d70:	2200      	movs	r2, #0
 8014d72:	6879      	ldr	r1, [r7, #4]
 8014d74:	4798      	blx	r3
 8014d76:	4603      	mov	r3, r0
 8014d78:	76bb      	strb	r3, [r7, #26]
 8014d7a:	e001      	b.n	8014d80 <tcp_process+0x404>
 8014d7c:	23f0      	movs	r3, #240	; 0xf0
 8014d7e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014d80:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014d84:	2b00      	cmp	r3, #0
 8014d86:	d00a      	beq.n	8014d9e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014d88:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014d8c:	f113 0f0d 	cmn.w	r3, #13
 8014d90:	d002      	beq.n	8014d98 <tcp_process+0x41c>
              tcp_abort(pcb);
 8014d92:	6878      	ldr	r0, [r7, #4]
 8014d94:	f7fd fc6a 	bl	801266c <tcp_abort>
            }
            return ERR_ABRT;
 8014d98:	f06f 030c 	mvn.w	r3, #12
 8014d9c:	e1ce      	b.n	801513c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014d9e:	6878      	ldr	r0, [r7, #4]
 8014da0:	f000 fa58 	bl	8015254 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014da4:	4b68      	ldr	r3, [pc, #416]	; (8014f48 <tcp_process+0x5cc>)
 8014da6:	881b      	ldrh	r3, [r3, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d005      	beq.n	8014db8 <tcp_process+0x43c>
            recv_acked--;
 8014dac:	4b66      	ldr	r3, [pc, #408]	; (8014f48 <tcp_process+0x5cc>)
 8014dae:	881b      	ldrh	r3, [r3, #0]
 8014db0:	3b01      	subs	r3, #1
 8014db2:	b29a      	uxth	r2, r3
 8014db4:	4b64      	ldr	r3, [pc, #400]	; (8014f48 <tcp_process+0x5cc>)
 8014db6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dbc:	009a      	lsls	r2, r3, #2
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dc2:	005b      	lsls	r3, r3, #1
 8014dc4:	f241 111c 	movw	r1, #4380	; 0x111c
 8014dc8:	428b      	cmp	r3, r1
 8014dca:	bf38      	it	cc
 8014dcc:	460b      	movcc	r3, r1
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d204      	bcs.n	8014ddc <tcp_process+0x460>
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dd6:	009b      	lsls	r3, r3, #2
 8014dd8:	b29b      	uxth	r3, r3
 8014dda:	e00d      	b.n	8014df8 <tcp_process+0x47c>
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014de0:	005b      	lsls	r3, r3, #1
 8014de2:	f241 121c 	movw	r2, #4380	; 0x111c
 8014de6:	4293      	cmp	r3, r2
 8014de8:	d904      	bls.n	8014df4 <tcp_process+0x478>
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dee:	005b      	lsls	r3, r3, #1
 8014df0:	b29b      	uxth	r3, r3
 8014df2:	e001      	b.n	8014df8 <tcp_process+0x47c>
 8014df4:	f241 131c 	movw	r3, #4380	; 0x111c
 8014df8:	687a      	ldr	r2, [r7, #4]
 8014dfa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014dfe:	4b53      	ldr	r3, [pc, #332]	; (8014f4c <tcp_process+0x5d0>)
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	f003 0320 	and.w	r3, r3, #32
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d037      	beq.n	8014e7a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	8b5b      	ldrh	r3, [r3, #26]
 8014e0e:	f043 0302 	orr.w	r3, r3, #2
 8014e12:	b29a      	uxth	r2, r3
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2207      	movs	r2, #7
 8014e1c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014e1e:	e02c      	b.n	8014e7a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e20:	4b40      	ldr	r3, [pc, #256]	; (8014f24 <tcp_process+0x5a8>)
 8014e22:	6819      	ldr	r1, [r3, #0]
 8014e24:	4b40      	ldr	r3, [pc, #256]	; (8014f28 <tcp_process+0x5ac>)
 8014e26:	881b      	ldrh	r3, [r3, #0]
 8014e28:	461a      	mov	r2, r3
 8014e2a:	4b40      	ldr	r3, [pc, #256]	; (8014f2c <tcp_process+0x5b0>)
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014e30:	4b3f      	ldr	r3, [pc, #252]	; (8014f30 <tcp_process+0x5b4>)
 8014e32:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e34:	885b      	ldrh	r3, [r3, #2]
 8014e36:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014e38:	4a3d      	ldr	r2, [pc, #244]	; (8014f30 <tcp_process+0x5b4>)
 8014e3a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e3c:	8812      	ldrh	r2, [r2, #0]
 8014e3e:	b292      	uxth	r2, r2
 8014e40:	9202      	str	r2, [sp, #8]
 8014e42:	9301      	str	r3, [sp, #4]
 8014e44:	4b3b      	ldr	r3, [pc, #236]	; (8014f34 <tcp_process+0x5b8>)
 8014e46:	9300      	str	r3, [sp, #0]
 8014e48:	4b3b      	ldr	r3, [pc, #236]	; (8014f38 <tcp_process+0x5bc>)
 8014e4a:	4602      	mov	r2, r0
 8014e4c:	6878      	ldr	r0, [r7, #4]
 8014e4e:	f002 fc6f 	bl	8017730 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014e52:	e167      	b.n	8015124 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014e54:	4b32      	ldr	r3, [pc, #200]	; (8014f20 <tcp_process+0x5a4>)
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	f003 0302 	and.w	r3, r3, #2
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	f000 8161 	beq.w	8015124 <tcp_process+0x7a8>
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e66:	1e5a      	subs	r2, r3, #1
 8014e68:	4b30      	ldr	r3, [pc, #192]	; (8014f2c <tcp_process+0x5b0>)
 8014e6a:	681b      	ldr	r3, [r3, #0]
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	f040 8159 	bne.w	8015124 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014e72:	6878      	ldr	r0, [r7, #4]
 8014e74:	f002 fa54 	bl	8017320 <tcp_rexmit>
      break;
 8014e78:	e154      	b.n	8015124 <tcp_process+0x7a8>
 8014e7a:	e153      	b.n	8015124 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	f000 f9e9 	bl	8015254 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014e82:	4b32      	ldr	r3, [pc, #200]	; (8014f4c <tcp_process+0x5d0>)
 8014e84:	781b      	ldrb	r3, [r3, #0]
 8014e86:	f003 0320 	and.w	r3, r3, #32
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	f000 814c 	beq.w	8015128 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	8b5b      	ldrh	r3, [r3, #26]
 8014e94:	f043 0302 	orr.w	r3, r3, #2
 8014e98:	b29a      	uxth	r2, r3
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	2207      	movs	r2, #7
 8014ea2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014ea4:	e140      	b.n	8015128 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014ea6:	6878      	ldr	r0, [r7, #4]
 8014ea8:	f000 f9d4 	bl	8015254 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014eac:	4b27      	ldr	r3, [pc, #156]	; (8014f4c <tcp_process+0x5d0>)
 8014eae:	781b      	ldrb	r3, [r3, #0]
 8014eb0:	f003 0320 	and.w	r3, r3, #32
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d071      	beq.n	8014f9c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014eb8:	4b19      	ldr	r3, [pc, #100]	; (8014f20 <tcp_process+0x5a4>)
 8014eba:	781b      	ldrb	r3, [r3, #0]
 8014ebc:	f003 0310 	and.w	r3, r3, #16
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d060      	beq.n	8014f86 <tcp_process+0x60a>
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014ec8:	4b16      	ldr	r3, [pc, #88]	; (8014f24 <tcp_process+0x5a8>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	429a      	cmp	r2, r3
 8014ece:	d15a      	bne.n	8014f86 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d156      	bne.n	8014f86 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	8b5b      	ldrh	r3, [r3, #26]
 8014edc:	f043 0302 	orr.w	r3, r3, #2
 8014ee0:	b29a      	uxth	r2, r3
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014ee6:	6878      	ldr	r0, [r7, #4]
 8014ee8:	f7fe fde6 	bl	8013ab8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014eec:	4b18      	ldr	r3, [pc, #96]	; (8014f50 <tcp_process+0x5d4>)
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	687a      	ldr	r2, [r7, #4]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d105      	bne.n	8014f02 <tcp_process+0x586>
 8014ef6:	4b16      	ldr	r3, [pc, #88]	; (8014f50 <tcp_process+0x5d4>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	68db      	ldr	r3, [r3, #12]
 8014efc:	4a14      	ldr	r2, [pc, #80]	; (8014f50 <tcp_process+0x5d4>)
 8014efe:	6013      	str	r3, [r2, #0]
 8014f00:	e02e      	b.n	8014f60 <tcp_process+0x5e4>
 8014f02:	4b13      	ldr	r3, [pc, #76]	; (8014f50 <tcp_process+0x5d4>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	617b      	str	r3, [r7, #20]
 8014f08:	e027      	b.n	8014f5a <tcp_process+0x5de>
 8014f0a:	697b      	ldr	r3, [r7, #20]
 8014f0c:	68db      	ldr	r3, [r3, #12]
 8014f0e:	687a      	ldr	r2, [r7, #4]
 8014f10:	429a      	cmp	r2, r3
 8014f12:	d11f      	bne.n	8014f54 <tcp_process+0x5d8>
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	68da      	ldr	r2, [r3, #12]
 8014f18:	697b      	ldr	r3, [r7, #20]
 8014f1a:	60da      	str	r2, [r3, #12]
 8014f1c:	e020      	b.n	8014f60 <tcp_process+0x5e4>
 8014f1e:	bf00      	nop
 8014f20:	240071c8 	.word	0x240071c8
 8014f24:	240071c0 	.word	0x240071c0
 8014f28:	240071c6 	.word	0x240071c6
 8014f2c:	240071bc 	.word	0x240071bc
 8014f30:	240071ac 	.word	0x240071ac
 8014f34:	24007420 	.word	0x24007420
 8014f38:	24007424 	.word	0x24007424
 8014f3c:	0801dbec 	.word	0x0801dbec
 8014f40:	0801ded0 	.word	0x0801ded0
 8014f44:	0801dc7c 	.word	0x0801dc7c
 8014f48:	240071c4 	.word	0x240071c4
 8014f4c:	240071c9 	.word	0x240071c9
 8014f50:	2400b2a4 	.word	0x2400b2a4
 8014f54:	697b      	ldr	r3, [r7, #20]
 8014f56:	68db      	ldr	r3, [r3, #12]
 8014f58:	617b      	str	r3, [r7, #20]
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d1d4      	bne.n	8014f0a <tcp_process+0x58e>
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	2200      	movs	r2, #0
 8014f64:	60da      	str	r2, [r3, #12]
 8014f66:	4b77      	ldr	r3, [pc, #476]	; (8015144 <tcp_process+0x7c8>)
 8014f68:	2201      	movs	r2, #1
 8014f6a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	220a      	movs	r2, #10
 8014f70:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014f72:	4b75      	ldr	r3, [pc, #468]	; (8015148 <tcp_process+0x7cc>)
 8014f74:	681a      	ldr	r2, [r3, #0]
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	60da      	str	r2, [r3, #12]
 8014f7a:	4a73      	ldr	r2, [pc, #460]	; (8015148 <tcp_process+0x7cc>)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	6013      	str	r3, [r2, #0]
 8014f80:	f002 fd98 	bl	8017ab4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014f84:	e0d2      	b.n	801512c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	8b5b      	ldrh	r3, [r3, #26]
 8014f8a:	f043 0302 	orr.w	r3, r3, #2
 8014f8e:	b29a      	uxth	r2, r3
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	2208      	movs	r2, #8
 8014f98:	751a      	strb	r2, [r3, #20]
      break;
 8014f9a:	e0c7      	b.n	801512c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014f9c:	4b6b      	ldr	r3, [pc, #428]	; (801514c <tcp_process+0x7d0>)
 8014f9e:	781b      	ldrb	r3, [r3, #0]
 8014fa0:	f003 0310 	and.w	r3, r3, #16
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	f000 80c1 	beq.w	801512c <tcp_process+0x7b0>
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014fae:	4b68      	ldr	r3, [pc, #416]	; (8015150 <tcp_process+0x7d4>)
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	429a      	cmp	r2, r3
 8014fb4:	f040 80ba 	bne.w	801512c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	f040 80b5 	bne.w	801512c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	2206      	movs	r2, #6
 8014fc6:	751a      	strb	r2, [r3, #20]
      break;
 8014fc8:	e0b0      	b.n	801512c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f000 f942 	bl	8015254 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014fd0:	4b60      	ldr	r3, [pc, #384]	; (8015154 <tcp_process+0x7d8>)
 8014fd2:	781b      	ldrb	r3, [r3, #0]
 8014fd4:	f003 0320 	and.w	r3, r3, #32
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	f000 80a9 	beq.w	8015130 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	8b5b      	ldrh	r3, [r3, #26]
 8014fe2:	f043 0302 	orr.w	r3, r3, #2
 8014fe6:	b29a      	uxth	r2, r3
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f7fe fd63 	bl	8013ab8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014ff2:	4b59      	ldr	r3, [pc, #356]	; (8015158 <tcp_process+0x7dc>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	687a      	ldr	r2, [r7, #4]
 8014ff8:	429a      	cmp	r2, r3
 8014ffa:	d105      	bne.n	8015008 <tcp_process+0x68c>
 8014ffc:	4b56      	ldr	r3, [pc, #344]	; (8015158 <tcp_process+0x7dc>)
 8014ffe:	681b      	ldr	r3, [r3, #0]
 8015000:	68db      	ldr	r3, [r3, #12]
 8015002:	4a55      	ldr	r2, [pc, #340]	; (8015158 <tcp_process+0x7dc>)
 8015004:	6013      	str	r3, [r2, #0]
 8015006:	e013      	b.n	8015030 <tcp_process+0x6b4>
 8015008:	4b53      	ldr	r3, [pc, #332]	; (8015158 <tcp_process+0x7dc>)
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	613b      	str	r3, [r7, #16]
 801500e:	e00c      	b.n	801502a <tcp_process+0x6ae>
 8015010:	693b      	ldr	r3, [r7, #16]
 8015012:	68db      	ldr	r3, [r3, #12]
 8015014:	687a      	ldr	r2, [r7, #4]
 8015016:	429a      	cmp	r2, r3
 8015018:	d104      	bne.n	8015024 <tcp_process+0x6a8>
 801501a:	687b      	ldr	r3, [r7, #4]
 801501c:	68da      	ldr	r2, [r3, #12]
 801501e:	693b      	ldr	r3, [r7, #16]
 8015020:	60da      	str	r2, [r3, #12]
 8015022:	e005      	b.n	8015030 <tcp_process+0x6b4>
 8015024:	693b      	ldr	r3, [r7, #16]
 8015026:	68db      	ldr	r3, [r3, #12]
 8015028:	613b      	str	r3, [r7, #16]
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d1ef      	bne.n	8015010 <tcp_process+0x694>
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	2200      	movs	r2, #0
 8015034:	60da      	str	r2, [r3, #12]
 8015036:	4b43      	ldr	r3, [pc, #268]	; (8015144 <tcp_process+0x7c8>)
 8015038:	2201      	movs	r2, #1
 801503a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	220a      	movs	r2, #10
 8015040:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015042:	4b41      	ldr	r3, [pc, #260]	; (8015148 <tcp_process+0x7cc>)
 8015044:	681a      	ldr	r2, [r3, #0]
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	60da      	str	r2, [r3, #12]
 801504a:	4a3f      	ldr	r2, [pc, #252]	; (8015148 <tcp_process+0x7cc>)
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	6013      	str	r3, [r2, #0]
 8015050:	f002 fd30 	bl	8017ab4 <tcp_timer_needed>
      }
      break;
 8015054:	e06c      	b.n	8015130 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f000 f8fc 	bl	8015254 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801505c:	4b3b      	ldr	r3, [pc, #236]	; (801514c <tcp_process+0x7d0>)
 801505e:	781b      	ldrb	r3, [r3, #0]
 8015060:	f003 0310 	and.w	r3, r3, #16
 8015064:	2b00      	cmp	r3, #0
 8015066:	d065      	beq.n	8015134 <tcp_process+0x7b8>
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801506c:	4b38      	ldr	r3, [pc, #224]	; (8015150 <tcp_process+0x7d4>)
 801506e:	681b      	ldr	r3, [r3, #0]
 8015070:	429a      	cmp	r2, r3
 8015072:	d15f      	bne.n	8015134 <tcp_process+0x7b8>
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015078:	2b00      	cmp	r3, #0
 801507a:	d15b      	bne.n	8015134 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801507c:	6878      	ldr	r0, [r7, #4]
 801507e:	f7fe fd1b 	bl	8013ab8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015082:	4b35      	ldr	r3, [pc, #212]	; (8015158 <tcp_process+0x7dc>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	687a      	ldr	r2, [r7, #4]
 8015088:	429a      	cmp	r2, r3
 801508a:	d105      	bne.n	8015098 <tcp_process+0x71c>
 801508c:	4b32      	ldr	r3, [pc, #200]	; (8015158 <tcp_process+0x7dc>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	68db      	ldr	r3, [r3, #12]
 8015092:	4a31      	ldr	r2, [pc, #196]	; (8015158 <tcp_process+0x7dc>)
 8015094:	6013      	str	r3, [r2, #0]
 8015096:	e013      	b.n	80150c0 <tcp_process+0x744>
 8015098:	4b2f      	ldr	r3, [pc, #188]	; (8015158 <tcp_process+0x7dc>)
 801509a:	681b      	ldr	r3, [r3, #0]
 801509c:	60fb      	str	r3, [r7, #12]
 801509e:	e00c      	b.n	80150ba <tcp_process+0x73e>
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	68db      	ldr	r3, [r3, #12]
 80150a4:	687a      	ldr	r2, [r7, #4]
 80150a6:	429a      	cmp	r2, r3
 80150a8:	d104      	bne.n	80150b4 <tcp_process+0x738>
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	68da      	ldr	r2, [r3, #12]
 80150ae:	68fb      	ldr	r3, [r7, #12]
 80150b0:	60da      	str	r2, [r3, #12]
 80150b2:	e005      	b.n	80150c0 <tcp_process+0x744>
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	68db      	ldr	r3, [r3, #12]
 80150b8:	60fb      	str	r3, [r7, #12]
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d1ef      	bne.n	80150a0 <tcp_process+0x724>
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	2200      	movs	r2, #0
 80150c4:	60da      	str	r2, [r3, #12]
 80150c6:	4b1f      	ldr	r3, [pc, #124]	; (8015144 <tcp_process+0x7c8>)
 80150c8:	2201      	movs	r2, #1
 80150ca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	220a      	movs	r2, #10
 80150d0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80150d2:	4b1d      	ldr	r3, [pc, #116]	; (8015148 <tcp_process+0x7cc>)
 80150d4:	681a      	ldr	r2, [r3, #0]
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	60da      	str	r2, [r3, #12]
 80150da:	4a1b      	ldr	r2, [pc, #108]	; (8015148 <tcp_process+0x7cc>)
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	6013      	str	r3, [r2, #0]
 80150e0:	f002 fce8 	bl	8017ab4 <tcp_timer_needed>
      }
      break;
 80150e4:	e026      	b.n	8015134 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80150e6:	6878      	ldr	r0, [r7, #4]
 80150e8:	f000 f8b4 	bl	8015254 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80150ec:	4b17      	ldr	r3, [pc, #92]	; (801514c <tcp_process+0x7d0>)
 80150ee:	781b      	ldrb	r3, [r3, #0]
 80150f0:	f003 0310 	and.w	r3, r3, #16
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d01f      	beq.n	8015138 <tcp_process+0x7bc>
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80150fc:	4b14      	ldr	r3, [pc, #80]	; (8015150 <tcp_process+0x7d4>)
 80150fe:	681b      	ldr	r3, [r3, #0]
 8015100:	429a      	cmp	r2, r3
 8015102:	d119      	bne.n	8015138 <tcp_process+0x7bc>
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015108:	2b00      	cmp	r3, #0
 801510a:	d115      	bne.n	8015138 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801510c:	4b11      	ldr	r3, [pc, #68]	; (8015154 <tcp_process+0x7d8>)
 801510e:	781b      	ldrb	r3, [r3, #0]
 8015110:	f043 0310 	orr.w	r3, r3, #16
 8015114:	b2da      	uxtb	r2, r3
 8015116:	4b0f      	ldr	r3, [pc, #60]	; (8015154 <tcp_process+0x7d8>)
 8015118:	701a      	strb	r2, [r3, #0]
      }
      break;
 801511a:	e00d      	b.n	8015138 <tcp_process+0x7bc>
    default:
      break;
 801511c:	bf00      	nop
 801511e:	e00c      	b.n	801513a <tcp_process+0x7be>
      break;
 8015120:	bf00      	nop
 8015122:	e00a      	b.n	801513a <tcp_process+0x7be>
      break;
 8015124:	bf00      	nop
 8015126:	e008      	b.n	801513a <tcp_process+0x7be>
      break;
 8015128:	bf00      	nop
 801512a:	e006      	b.n	801513a <tcp_process+0x7be>
      break;
 801512c:	bf00      	nop
 801512e:	e004      	b.n	801513a <tcp_process+0x7be>
      break;
 8015130:	bf00      	nop
 8015132:	e002      	b.n	801513a <tcp_process+0x7be>
      break;
 8015134:	bf00      	nop
 8015136:	e000      	b.n	801513a <tcp_process+0x7be>
      break;
 8015138:	bf00      	nop
  }
  return ERR_OK;
 801513a:	2300      	movs	r3, #0
}
 801513c:	4618      	mov	r0, r3
 801513e:	3724      	adds	r7, #36	; 0x24
 8015140:	46bd      	mov	sp, r7
 8015142:	bd90      	pop	{r4, r7, pc}
 8015144:	2400b2a0 	.word	0x2400b2a0
 8015148:	2400b2b4 	.word	0x2400b2b4
 801514c:	240071c8 	.word	0x240071c8
 8015150:	240071c0 	.word	0x240071c0
 8015154:	240071c9 	.word	0x240071c9
 8015158:	2400b2a4 	.word	0x2400b2a4

0801515c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801515c:	b5b0      	push	{r4, r5, r7, lr}
 801515e:	b086      	sub	sp, #24
 8015160:	af00      	add	r7, sp, #0
 8015162:	60f8      	str	r0, [r7, #12]
 8015164:	60b9      	str	r1, [r7, #8]
 8015166:	607a      	str	r2, [r7, #4]
 8015168:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801516a:	e03e      	b.n	80151ea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015170:	68bb      	ldr	r3, [r7, #8]
 8015172:	681b      	ldr	r3, [r3, #0]
 8015174:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015176:	697b      	ldr	r3, [r7, #20]
 8015178:	685b      	ldr	r3, [r3, #4]
 801517a:	4618      	mov	r0, r3
 801517c:	f7fc fb92 	bl	80118a4 <pbuf_clen>
 8015180:	4603      	mov	r3, r0
 8015182:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801518a:	8a7a      	ldrh	r2, [r7, #18]
 801518c:	429a      	cmp	r2, r3
 801518e:	d906      	bls.n	801519e <tcp_free_acked_segments+0x42>
 8015190:	4b2a      	ldr	r3, [pc, #168]	; (801523c <tcp_free_acked_segments+0xe0>)
 8015192:	f240 4257 	movw	r2, #1111	; 0x457
 8015196:	492a      	ldr	r1, [pc, #168]	; (8015240 <tcp_free_acked_segments+0xe4>)
 8015198:	482a      	ldr	r0, [pc, #168]	; (8015244 <tcp_free_acked_segments+0xe8>)
 801519a:	f003 fed7 	bl	8018f4c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80151a4:	8a7b      	ldrh	r3, [r7, #18]
 80151a6:	1ad3      	subs	r3, r2, r3
 80151a8:	b29a      	uxth	r2, r3
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80151b0:	697b      	ldr	r3, [r7, #20]
 80151b2:	891a      	ldrh	r2, [r3, #8]
 80151b4:	4b24      	ldr	r3, [pc, #144]	; (8015248 <tcp_free_acked_segments+0xec>)
 80151b6:	881b      	ldrh	r3, [r3, #0]
 80151b8:	4413      	add	r3, r2
 80151ba:	b29a      	uxth	r2, r3
 80151bc:	4b22      	ldr	r3, [pc, #136]	; (8015248 <tcp_free_acked_segments+0xec>)
 80151be:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80151c0:	6978      	ldr	r0, [r7, #20]
 80151c2:	f7fe f9ec 	bl	801359e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80151c6:	68fb      	ldr	r3, [r7, #12]
 80151c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d00c      	beq.n	80151ea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80151d0:	68bb      	ldr	r3, [r7, #8]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d109      	bne.n	80151ea <tcp_free_acked_segments+0x8e>
 80151d6:	683b      	ldr	r3, [r7, #0]
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d106      	bne.n	80151ea <tcp_free_acked_segments+0x8e>
 80151dc:	4b17      	ldr	r3, [pc, #92]	; (801523c <tcp_free_acked_segments+0xe0>)
 80151de:	f240 4261 	movw	r2, #1121	; 0x461
 80151e2:	491a      	ldr	r1, [pc, #104]	; (801524c <tcp_free_acked_segments+0xf0>)
 80151e4:	4817      	ldr	r0, [pc, #92]	; (8015244 <tcp_free_acked_segments+0xe8>)
 80151e6:	f003 feb1 	bl	8018f4c <iprintf>
  while (seg_list != NULL &&
 80151ea:	68bb      	ldr	r3, [r7, #8]
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d020      	beq.n	8015232 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80151f0:	68bb      	ldr	r3, [r7, #8]
 80151f2:	68db      	ldr	r3, [r3, #12]
 80151f4:	685b      	ldr	r3, [r3, #4]
 80151f6:	4618      	mov	r0, r3
 80151f8:	f7f9 fef7 	bl	800efea <lwip_htonl>
 80151fc:	4604      	mov	r4, r0
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	891b      	ldrh	r3, [r3, #8]
 8015202:	461d      	mov	r5, r3
 8015204:	68bb      	ldr	r3, [r7, #8]
 8015206:	68db      	ldr	r3, [r3, #12]
 8015208:	899b      	ldrh	r3, [r3, #12]
 801520a:	b29b      	uxth	r3, r3
 801520c:	4618      	mov	r0, r3
 801520e:	f7f9 fed7 	bl	800efc0 <lwip_htons>
 8015212:	4603      	mov	r3, r0
 8015214:	b2db      	uxtb	r3, r3
 8015216:	f003 0303 	and.w	r3, r3, #3
 801521a:	2b00      	cmp	r3, #0
 801521c:	d001      	beq.n	8015222 <tcp_free_acked_segments+0xc6>
 801521e:	2301      	movs	r3, #1
 8015220:	e000      	b.n	8015224 <tcp_free_acked_segments+0xc8>
 8015222:	2300      	movs	r3, #0
 8015224:	442b      	add	r3, r5
 8015226:	18e2      	adds	r2, r4, r3
 8015228:	4b09      	ldr	r3, [pc, #36]	; (8015250 <tcp_free_acked_segments+0xf4>)
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801522e:	2b00      	cmp	r3, #0
 8015230:	dd9c      	ble.n	801516c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015232:	68bb      	ldr	r3, [r7, #8]
}
 8015234:	4618      	mov	r0, r3
 8015236:	3718      	adds	r7, #24
 8015238:	46bd      	mov	sp, r7
 801523a:	bdb0      	pop	{r4, r5, r7, pc}
 801523c:	0801dbec 	.word	0x0801dbec
 8015240:	0801def0 	.word	0x0801def0
 8015244:	0801dc7c 	.word	0x0801dc7c
 8015248:	240071c4 	.word	0x240071c4
 801524c:	0801df18 	.word	0x0801df18
 8015250:	240071c0 	.word	0x240071c0

08015254 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015254:	b590      	push	{r4, r7, lr}
 8015256:	b08d      	sub	sp, #52	; 0x34
 8015258:	af00      	add	r7, sp, #0
 801525a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801525c:	2300      	movs	r3, #0
 801525e:	62bb      	str	r3, [r7, #40]	; 0x28

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	2b00      	cmp	r3, #0
 8015264:	d106      	bne.n	8015274 <tcp_receive+0x20>
 8015266:	4ba5      	ldr	r3, [pc, #660]	; (80154fc <tcp_receive+0x2a8>)
 8015268:	f240 427b 	movw	r2, #1147	; 0x47b
 801526c:	49a4      	ldr	r1, [pc, #656]	; (8015500 <tcp_receive+0x2ac>)
 801526e:	48a5      	ldr	r0, [pc, #660]	; (8015504 <tcp_receive+0x2b0>)
 8015270:	f003 fe6c 	bl	8018f4c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	7d1b      	ldrb	r3, [r3, #20]
 8015278:	2b03      	cmp	r3, #3
 801527a:	d806      	bhi.n	801528a <tcp_receive+0x36>
 801527c:	4b9f      	ldr	r3, [pc, #636]	; (80154fc <tcp_receive+0x2a8>)
 801527e:	f240 427c 	movw	r2, #1148	; 0x47c
 8015282:	49a1      	ldr	r1, [pc, #644]	; (8015508 <tcp_receive+0x2b4>)
 8015284:	489f      	ldr	r0, [pc, #636]	; (8015504 <tcp_receive+0x2b0>)
 8015286:	f003 fe61 	bl	8018f4c <iprintf>

  if (flags & TCP_ACK) {
 801528a:	4ba0      	ldr	r3, [pc, #640]	; (801550c <tcp_receive+0x2b8>)
 801528c:	781b      	ldrb	r3, [r3, #0]
 801528e:	f003 0310 	and.w	r3, r3, #16
 8015292:	2b00      	cmp	r3, #0
 8015294:	f000 8258 	beq.w	8015748 <tcp_receive+0x4f4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801529e:	461a      	mov	r2, r3
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80152a4:	4413      	add	r3, r2
 80152a6:	61fb      	str	r3, [r7, #28]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80152ac:	4b98      	ldr	r3, [pc, #608]	; (8015510 <tcp_receive+0x2bc>)
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	1ad3      	subs	r3, r2, r3
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	db1b      	blt.n	80152ee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80152ba:	4b95      	ldr	r3, [pc, #596]	; (8015510 <tcp_receive+0x2bc>)
 80152bc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80152be:	429a      	cmp	r2, r3
 80152c0:	d106      	bne.n	80152d0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80152c6:	4b93      	ldr	r3, [pc, #588]	; (8015514 <tcp_receive+0x2c0>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	1ad3      	subs	r3, r2, r3
 80152cc:	2b00      	cmp	r3, #0
 80152ce:	db0e      	blt.n	80152ee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80152d4:	4b8f      	ldr	r3, [pc, #572]	; (8015514 <tcp_receive+0x2c0>)
 80152d6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80152d8:	429a      	cmp	r2, r3
 80152da:	d125      	bne.n	8015328 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80152dc:	4b8e      	ldr	r3, [pc, #568]	; (8015518 <tcp_receive+0x2c4>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	89db      	ldrh	r3, [r3, #14]
 80152e2:	b29a      	uxth	r2, r3
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d91c      	bls.n	8015328 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80152ee:	4b8a      	ldr	r3, [pc, #552]	; (8015518 <tcp_receive+0x2c4>)
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	89db      	ldrh	r3, [r3, #14]
 80152f4:	b29a      	uxth	r2, r3
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015308:	429a      	cmp	r2, r3
 801530a:	d205      	bcs.n	8015318 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8015318:	4b7d      	ldr	r3, [pc, #500]	; (8015510 <tcp_receive+0x2bc>)
 801531a:	681a      	ldr	r2, [r3, #0]
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8015320:	4b7c      	ldr	r3, [pc, #496]	; (8015514 <tcp_receive+0x2c0>)
 8015322:	681a      	ldr	r2, [r3, #0]
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015328:	4b7a      	ldr	r3, [pc, #488]	; (8015514 <tcp_receive+0x2c0>)
 801532a:	681a      	ldr	r2, [r3, #0]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015330:	1ad3      	subs	r3, r2, r3
 8015332:	2b00      	cmp	r3, #0
 8015334:	dc58      	bgt.n	80153e8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015336:	4b79      	ldr	r3, [pc, #484]	; (801551c <tcp_receive+0x2c8>)
 8015338:	881b      	ldrh	r3, [r3, #0]
 801533a:	2b00      	cmp	r3, #0
 801533c:	d14b      	bne.n	80153d6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015342:	687a      	ldr	r2, [r7, #4]
 8015344:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8015348:	4413      	add	r3, r2
 801534a:	69fa      	ldr	r2, [r7, #28]
 801534c:	429a      	cmp	r2, r3
 801534e:	d142      	bne.n	80153d6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015356:	2b00      	cmp	r3, #0
 8015358:	db3d      	blt.n	80153d6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801535e:	4b6d      	ldr	r3, [pc, #436]	; (8015514 <tcp_receive+0x2c0>)
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	429a      	cmp	r2, r3
 8015364:	d137      	bne.n	80153d6 <tcp_receive+0x182>
              found_dupack = 1;
 8015366:	2301      	movs	r3, #1
 8015368:	62bb      	str	r3, [r7, #40]	; 0x28
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015370:	2bff      	cmp	r3, #255	; 0xff
 8015372:	d007      	beq.n	8015384 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801537a:	3301      	adds	r3, #1
 801537c:	b2da      	uxtb	r2, r3
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801538a:	2b03      	cmp	r3, #3
 801538c:	d91b      	bls.n	80153c6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015398:	4413      	add	r3, r2
 801539a:	b29a      	uxth	r2, r3
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80153a2:	429a      	cmp	r2, r3
 80153a4:	d30a      	bcc.n	80153bc <tcp_receive+0x168>
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80153b0:	4413      	add	r3, r2
 80153b2:	b29a      	uxth	r2, r3
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80153ba:	e004      	b.n	80153c6 <tcp_receive+0x172>
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80153c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80153cc:	2b02      	cmp	r3, #2
 80153ce:	d902      	bls.n	80153d6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80153d0:	6878      	ldr	r0, [r7, #4]
 80153d2:	f002 f811 	bl	80173f8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80153d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153d8:	2b00      	cmp	r3, #0
 80153da:	f040 815e 	bne.w	801569a <tcp_receive+0x446>
        pcb->dupacks = 0;
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	2200      	movs	r2, #0
 80153e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80153e6:	e158      	b.n	801569a <tcp_receive+0x446>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80153e8:	4b4a      	ldr	r3, [pc, #296]	; (8015514 <tcp_receive+0x2c0>)
 80153ea:	681a      	ldr	r2, [r3, #0]
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80153f0:	1ad3      	subs	r3, r2, r3
 80153f2:	3b01      	subs	r3, #1
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	f2c0 814b 	blt.w	8015690 <tcp_receive+0x43c>
 80153fa:	4b46      	ldr	r3, [pc, #280]	; (8015514 <tcp_receive+0x2c0>)
 80153fc:	681a      	ldr	r2, [r3, #0]
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015402:	1ad3      	subs	r3, r2, r3
 8015404:	2b00      	cmp	r3, #0
 8015406:	f300 8143 	bgt.w	8015690 <tcp_receive+0x43c>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	8b5b      	ldrh	r3, [r3, #26]
 801540e:	f003 0304 	and.w	r3, r3, #4
 8015412:	2b00      	cmp	r3, #0
 8015414:	d010      	beq.n	8015438 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	8b5b      	ldrh	r3, [r3, #26]
 801541a:	f023 0304 	bic.w	r3, r3, #4
 801541e:	b29a      	uxth	r2, r3
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	2200      	movs	r2, #0
 8015434:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2200      	movs	r2, #0
 801543c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015446:	10db      	asrs	r3, r3, #3
 8015448:	b21b      	sxth	r3, r3
 801544a:	b29a      	uxth	r2, r3
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015452:	b29b      	uxth	r3, r3
 8015454:	4413      	add	r3, r2
 8015456:	b29b      	uxth	r3, r3
 8015458:	b21a      	sxth	r2, r3
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015460:	4b2c      	ldr	r3, [pc, #176]	; (8015514 <tcp_receive+0x2c0>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	b29a      	uxth	r2, r3
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801546a:	b29b      	uxth	r3, r3
 801546c:	1ad3      	subs	r3, r2, r3
 801546e:	837b      	strh	r3, [r7, #26]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	2200      	movs	r2, #0
 8015474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8015478:	4b26      	ldr	r3, [pc, #152]	; (8015514 <tcp_receive+0x2c0>)
 801547a:	681a      	ldr	r2, [r3, #0]
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	7d1b      	ldrb	r3, [r3, #20]
 8015484:	2b03      	cmp	r3, #3
 8015486:	f240 8094 	bls.w	80155b2 <tcp_receive+0x35e>
        if (pcb->cwnd < pcb->ssthresh) {
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8015496:	429a      	cmp	r2, r3
 8015498:	d242      	bcs.n	8015520 <tcp_receive+0x2cc>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	8b5b      	ldrh	r3, [r3, #26]
 801549e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80154a2:	2b00      	cmp	r3, #0
 80154a4:	d001      	beq.n	80154aa <tcp_receive+0x256>
 80154a6:	2301      	movs	r3, #1
 80154a8:	e000      	b.n	80154ac <tcp_receive+0x258>
 80154aa:	2302      	movs	r3, #2
 80154ac:	767b      	strb	r3, [r7, #25]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80154ae:	7e7b      	ldrb	r3, [r7, #25]
 80154b0:	b29a      	uxth	r2, r3
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80154b6:	fb12 f303 	smulbb	r3, r2, r3
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	8b7a      	ldrh	r2, [r7, #26]
 80154be:	4293      	cmp	r3, r2
 80154c0:	bf28      	it	cs
 80154c2:	4613      	movcs	r3, r2
 80154c4:	82fb      	strh	r3, [r7, #22]
          TCP_WND_INC(pcb->cwnd, increase);
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80154cc:	8afb      	ldrh	r3, [r7, #22]
 80154ce:	4413      	add	r3, r2
 80154d0:	b29a      	uxth	r2, r3
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80154d8:	429a      	cmp	r2, r3
 80154da:	d309      	bcc.n	80154f0 <tcp_receive+0x29c>
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80154e2:	8afb      	ldrh	r3, [r7, #22]
 80154e4:	4413      	add	r3, r2
 80154e6:	b29a      	uxth	r2, r3
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80154ee:	e060      	b.n	80155b2 <tcp_receive+0x35e>
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80154f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80154fa:	e05a      	b.n	80155b2 <tcp_receive+0x35e>
 80154fc:	0801dbec 	.word	0x0801dbec
 8015500:	0801df38 	.word	0x0801df38
 8015504:	0801dc7c 	.word	0x0801dc7c
 8015508:	0801df54 	.word	0x0801df54
 801550c:	240071c8 	.word	0x240071c8
 8015510:	240071bc 	.word	0x240071bc
 8015514:	240071c0 	.word	0x240071c0
 8015518:	240071ac 	.word	0x240071ac
 801551c:	240071c6 	.word	0x240071c6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015526:	8b7b      	ldrh	r3, [r7, #26]
 8015528:	4413      	add	r3, r2
 801552a:	b29a      	uxth	r2, r3
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8015532:	429a      	cmp	r2, r3
 8015534:	d309      	bcc.n	801554a <tcp_receive+0x2f6>
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801553c:	8b7b      	ldrh	r3, [r7, #26]
 801553e:	4413      	add	r3, r2
 8015540:	b29a      	uxth	r2, r3
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8015548:	e004      	b.n	8015554 <tcp_receive+0x300>
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015560:	429a      	cmp	r2, r3
 8015562:	d326      	bcc.n	80155b2 <tcp_receive+0x35e>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015570:	1ad3      	subs	r3, r2, r3
 8015572:	b29a      	uxth	r2, r3
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015584:	4413      	add	r3, r2
 8015586:	b29a      	uxth	r2, r3
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801558e:	429a      	cmp	r2, r3
 8015590:	d30a      	bcc.n	80155a8 <tcp_receive+0x354>
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801559c:	4413      	add	r3, r2
 801559e:	b29a      	uxth	r2, r3
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80155a6:	e004      	b.n	80155b2 <tcp_receive+0x35e>
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80155ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155ba:	4a91      	ldr	r2, [pc, #580]	; (8015800 <tcp_receive+0x5ac>)
 80155bc:	6878      	ldr	r0, [r7, #4]
 80155be:	f7ff fdcd 	bl	801515c <tcp_free_acked_segments>
 80155c2:	4602      	mov	r2, r0
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155d0:	4a8c      	ldr	r2, [pc, #560]	; (8015804 <tcp_receive+0x5b0>)
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	f7ff fdc2 	bl	801515c <tcp_free_acked_segments>
 80155d8:	4602      	mov	r2, r0
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155e2:	2b00      	cmp	r3, #0
 80155e4:	d104      	bne.n	80155f0 <tcp_receive+0x39c>
        pcb->rtime = -1;
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80155ec:	861a      	strh	r2, [r3, #48]	; 0x30
 80155ee:	e002      	b.n	80155f6 <tcp_receive+0x3a2>
      } else {
        pcb->rtime = 0;
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	2200      	movs	r2, #0
 80155f4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	2200      	movs	r2, #0
 80155fa:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015600:	2b00      	cmp	r3, #0
 8015602:	d103      	bne.n	801560c <tcp_receive+0x3b8>
        pcb->unsent_oversize = 0;
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	2200      	movs	r2, #0
 8015608:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015612:	4b7d      	ldr	r3, [pc, #500]	; (8015808 <tcp_receive+0x5b4>)
 8015614:	881b      	ldrh	r3, [r3, #0]
 8015616:	4413      	add	r3, r2
 8015618:	b29a      	uxth	r2, r3
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	8b5b      	ldrh	r3, [r3, #26]
 8015624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015628:	2b00      	cmp	r3, #0
 801562a:	d035      	beq.n	8015698 <tcp_receive+0x444>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015630:	2b00      	cmp	r3, #0
 8015632:	d118      	bne.n	8015666 <tcp_receive+0x412>
          if ((pcb->unsent == NULL) ||
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015638:	2b00      	cmp	r3, #0
 801563a:	d00c      	beq.n	8015656 <tcp_receive+0x402>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015644:	68db      	ldr	r3, [r3, #12]
 8015646:	685b      	ldr	r3, [r3, #4]
 8015648:	4618      	mov	r0, r3
 801564a:	f7f9 fcce 	bl	800efea <lwip_htonl>
 801564e:	4603      	mov	r3, r0
 8015650:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015652:	2b00      	cmp	r3, #0
 8015654:	dc20      	bgt.n	8015698 <tcp_receive+0x444>
            tcp_clear_flags(pcb, TF_RTO);
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	8b5b      	ldrh	r3, [r3, #26]
 801565a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801565e:	b29a      	uxth	r2, r3
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015664:	e018      	b.n	8015698 <tcp_receive+0x444>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801566e:	68db      	ldr	r3, [r3, #12]
 8015670:	685b      	ldr	r3, [r3, #4]
 8015672:	4618      	mov	r0, r3
 8015674:	f7f9 fcb9 	bl	800efea <lwip_htonl>
 8015678:	4603      	mov	r3, r0
 801567a:	1ae3      	subs	r3, r4, r3
 801567c:	2b00      	cmp	r3, #0
 801567e:	dc0b      	bgt.n	8015698 <tcp_receive+0x444>
          tcp_clear_flags(pcb, TF_RTO);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	8b5b      	ldrh	r3, [r3, #26]
 8015684:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015688:	b29a      	uxth	r2, r3
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801568e:	e003      	b.n	8015698 <tcp_receive+0x444>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015690:	6878      	ldr	r0, [r7, #4]
 8015692:	f002 f89f 	bl	80177d4 <tcp_send_empty_ack>
 8015696:	e000      	b.n	801569a <tcp_receive+0x446>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015698:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d052      	beq.n	8015748 <tcp_receive+0x4f4>
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80156a6:	4b59      	ldr	r3, [pc, #356]	; (801580c <tcp_receive+0x5b8>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	1ad3      	subs	r3, r2, r3
 80156ac:	2b00      	cmp	r3, #0
 80156ae:	da4b      	bge.n	8015748 <tcp_receive+0x4f4>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80156b0:	4b57      	ldr	r3, [pc, #348]	; (8015810 <tcp_receive+0x5bc>)
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	b29a      	uxth	r2, r3
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80156ba:	b29b      	uxth	r3, r3
 80156bc:	1ad3      	subs	r3, r2, r3
 80156be:	b29b      	uxth	r3, r3
 80156c0:	85fb      	strh	r3, [r7, #46]	; 0x2e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80156c2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80156ca:	10db      	asrs	r3, r3, #3
 80156cc:	b21b      	sxth	r3, r3
 80156ce:	b29b      	uxth	r3, r3
 80156d0:	1ad3      	subs	r3, r2, r3
 80156d2:	b29b      	uxth	r3, r3
 80156d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sa = (s16_t)(pcb->sa + m);
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80156dc:	b29a      	uxth	r2, r3
 80156de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80156e0:	4413      	add	r3, r2
 80156e2:	b29b      	uxth	r3, r3
 80156e4:	b21a      	sxth	r2, r3
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80156ea:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	da03      	bge.n	80156fa <tcp_receive+0x4a6>
        m = (s16_t) - m;
 80156f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80156f4:	425b      	negs	r3, r3
 80156f6:	b29b      	uxth	r3, r3
 80156f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80156fa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015702:	109b      	asrs	r3, r3, #2
 8015704:	b21b      	sxth	r3, r3
 8015706:	b29b      	uxth	r3, r3
 8015708:	1ad3      	subs	r3, r2, r3
 801570a:	b29b      	uxth	r3, r3
 801570c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sv = (s16_t)(pcb->sv + m);
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015714:	b29a      	uxth	r2, r3
 8015716:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015718:	4413      	add	r3, r2
 801571a:	b29b      	uxth	r3, r3
 801571c:	b21a      	sxth	r2, r3
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015728:	10db      	asrs	r3, r3, #3
 801572a:	b21b      	sxth	r3, r3
 801572c:	b29a      	uxth	r2, r3
 801572e:	687b      	ldr	r3, [r7, #4]
 8015730:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015734:	b29b      	uxth	r3, r3
 8015736:	4413      	add	r3, r2
 8015738:	b29b      	uxth	r3, r3
 801573a:	b21a      	sxth	r2, r3
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	2200      	movs	r2, #0
 8015746:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015748:	4b32      	ldr	r3, [pc, #200]	; (8015814 <tcp_receive+0x5c0>)
 801574a:	881b      	ldrh	r3, [r3, #0]
 801574c:	2b00      	cmp	r3, #0
 801574e:	f000 81c7 	beq.w	8015ae0 <tcp_receive+0x88c>
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	7d1b      	ldrb	r3, [r3, #20]
 8015756:	2b06      	cmp	r3, #6
 8015758:	f200 81c2 	bhi.w	8015ae0 <tcp_receive+0x88c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015760:	4b2d      	ldr	r3, [pc, #180]	; (8015818 <tcp_receive+0x5c4>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	1ad3      	subs	r3, r2, r3
 8015766:	3b01      	subs	r3, #1
 8015768:	2b00      	cmp	r3, #0
 801576a:	f2c0 8085 	blt.w	8015878 <tcp_receive+0x624>
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015772:	4b28      	ldr	r3, [pc, #160]	; (8015814 <tcp_receive+0x5c0>)
 8015774:	881b      	ldrh	r3, [r3, #0]
 8015776:	4619      	mov	r1, r3
 8015778:	4b27      	ldr	r3, [pc, #156]	; (8015818 <tcp_receive+0x5c4>)
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	440b      	add	r3, r1
 801577e:	1ad3      	subs	r3, r2, r3
 8015780:	3301      	adds	r3, #1
 8015782:	2b00      	cmp	r3, #0
 8015784:	dc78      	bgt.n	8015878 <tcp_receive+0x624>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015786:	4b25      	ldr	r3, [pc, #148]	; (801581c <tcp_receive+0x5c8>)
 8015788:	685b      	ldr	r3, [r3, #4]
 801578a:	627b      	str	r3, [r7, #36]	; 0x24
      u32_t off32 = pcb->rcv_nxt - seqno;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015790:	4b21      	ldr	r3, [pc, #132]	; (8015818 <tcp_receive+0x5c4>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	1ad3      	subs	r3, r2, r3
 8015796:	613b      	str	r3, [r7, #16]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015798:	4b20      	ldr	r3, [pc, #128]	; (801581c <tcp_receive+0x5c8>)
 801579a:	685b      	ldr	r3, [r3, #4]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d106      	bne.n	80157ae <tcp_receive+0x55a>
 80157a0:	4b1f      	ldr	r3, [pc, #124]	; (8015820 <tcp_receive+0x5cc>)
 80157a2:	f240 5294 	movw	r2, #1428	; 0x594
 80157a6:	491f      	ldr	r1, [pc, #124]	; (8015824 <tcp_receive+0x5d0>)
 80157a8:	481f      	ldr	r0, [pc, #124]	; (8015828 <tcp_receive+0x5d4>)
 80157aa:	f003 fbcf 	bl	8018f4c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80157ae:	693b      	ldr	r3, [r7, #16]
 80157b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80157b4:	4293      	cmp	r3, r2
 80157b6:	d906      	bls.n	80157c6 <tcp_receive+0x572>
 80157b8:	4b19      	ldr	r3, [pc, #100]	; (8015820 <tcp_receive+0x5cc>)
 80157ba:	f240 5295 	movw	r2, #1429	; 0x595
 80157be:	491b      	ldr	r1, [pc, #108]	; (801582c <tcp_receive+0x5d8>)
 80157c0:	4819      	ldr	r0, [pc, #100]	; (8015828 <tcp_receive+0x5d4>)
 80157c2:	f003 fbc3 	bl	8018f4c <iprintf>
      off = (u16_t)off32;
 80157c6:	693b      	ldr	r3, [r7, #16]
 80157c8:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80157ca:	4b14      	ldr	r3, [pc, #80]	; (801581c <tcp_receive+0x5c8>)
 80157cc:	685b      	ldr	r3, [r3, #4]
 80157ce:	891b      	ldrh	r3, [r3, #8]
 80157d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80157d2:	429a      	cmp	r2, r3
 80157d4:	d906      	bls.n	80157e4 <tcp_receive+0x590>
 80157d6:	4b12      	ldr	r3, [pc, #72]	; (8015820 <tcp_receive+0x5cc>)
 80157d8:	f240 5297 	movw	r2, #1431	; 0x597
 80157dc:	4914      	ldr	r1, [pc, #80]	; (8015830 <tcp_receive+0x5dc>)
 80157de:	4812      	ldr	r0, [pc, #72]	; (8015828 <tcp_receive+0x5d4>)
 80157e0:	f003 fbb4 	bl	8018f4c <iprintf>
      inseg.len -= off;
 80157e4:	4b0d      	ldr	r3, [pc, #52]	; (801581c <tcp_receive+0x5c8>)
 80157e6:	891a      	ldrh	r2, [r3, #8]
 80157e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157ea:	1ad3      	subs	r3, r2, r3
 80157ec:	b29a      	uxth	r2, r3
 80157ee:	4b0b      	ldr	r3, [pc, #44]	; (801581c <tcp_receive+0x5c8>)
 80157f0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80157f2:	4b0a      	ldr	r3, [pc, #40]	; (801581c <tcp_receive+0x5c8>)
 80157f4:	685b      	ldr	r3, [r3, #4]
 80157f6:	891a      	ldrh	r2, [r3, #8]
 80157f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80157fa:	1ad3      	subs	r3, r2, r3
 80157fc:	81fb      	strh	r3, [r7, #14]
      while (p->len < off) {
 80157fe:	e027      	b.n	8015850 <tcp_receive+0x5fc>
 8015800:	0801df70 	.word	0x0801df70
 8015804:	0801df78 	.word	0x0801df78
 8015808:	240071c4 	.word	0x240071c4
 801580c:	240071c0 	.word	0x240071c0
 8015810:	2400b2a8 	.word	0x2400b2a8
 8015814:	240071c6 	.word	0x240071c6
 8015818:	240071bc 	.word	0x240071bc
 801581c:	2400719c 	.word	0x2400719c
 8015820:	0801dbec 	.word	0x0801dbec
 8015824:	0801df80 	.word	0x0801df80
 8015828:	0801dc7c 	.word	0x0801dc7c
 801582c:	0801df90 	.word	0x0801df90
 8015830:	0801dfa0 	.word	0x0801dfa0
        off -= p->len;
 8015834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015836:	895b      	ldrh	r3, [r3, #10]
 8015838:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801583a:	1ad3      	subs	r3, r2, r3
 801583c:	847b      	strh	r3, [r7, #34]	; 0x22
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015840:	89fa      	ldrh	r2, [r7, #14]
 8015842:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015846:	2200      	movs	r2, #0
 8015848:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	627b      	str	r3, [r7, #36]	; 0x24
      while (p->len < off) {
 8015850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015852:	895b      	ldrh	r3, [r3, #10]
 8015854:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015856:	429a      	cmp	r2, r3
 8015858:	d8ec      	bhi.n	8015834 <tcp_receive+0x5e0>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801585a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801585c:	4619      	mov	r1, r3
 801585e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015860:	f7fb feda 	bl	8011618 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015868:	4a94      	ldr	r2, [pc, #592]	; (8015abc <tcp_receive+0x868>)
 801586a:	6013      	str	r3, [r2, #0]
 801586c:	4b94      	ldr	r3, [pc, #592]	; (8015ac0 <tcp_receive+0x86c>)
 801586e:	68db      	ldr	r3, [r3, #12]
 8015870:	4a92      	ldr	r2, [pc, #584]	; (8015abc <tcp_receive+0x868>)
 8015872:	6812      	ldr	r2, [r2, #0]
 8015874:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015876:	e00d      	b.n	8015894 <tcp_receive+0x640>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015878:	4b90      	ldr	r3, [pc, #576]	; (8015abc <tcp_receive+0x868>)
 801587a:	681a      	ldr	r2, [r3, #0]
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015880:	1ad3      	subs	r3, r2, r3
 8015882:	2b00      	cmp	r3, #0
 8015884:	da06      	bge.n	8015894 <tcp_receive+0x640>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015886:	687b      	ldr	r3, [r7, #4]
 8015888:	8b5b      	ldrh	r3, [r3, #26]
 801588a:	f043 0302 	orr.w	r3, r3, #2
 801588e:	b29a      	uxth	r2, r3
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015894:	4b89      	ldr	r3, [pc, #548]	; (8015abc <tcp_receive+0x868>)
 8015896:	681a      	ldr	r2, [r3, #0]
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801589c:	1ad3      	subs	r3, r2, r3
 801589e:	2b00      	cmp	r3, #0
 80158a0:	f2c0 8106 	blt.w	8015ab0 <tcp_receive+0x85c>
 80158a4:	4b85      	ldr	r3, [pc, #532]	; (8015abc <tcp_receive+0x868>)
 80158a6:	681a      	ldr	r2, [r3, #0]
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158ac:	6879      	ldr	r1, [r7, #4]
 80158ae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80158b0:	440b      	add	r3, r1
 80158b2:	1ad3      	subs	r3, r2, r3
 80158b4:	3301      	adds	r3, #1
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	f300 80fa 	bgt.w	8015ab0 <tcp_receive+0x85c>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80158c0:	4b7e      	ldr	r3, [pc, #504]	; (8015abc <tcp_receive+0x868>)
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	429a      	cmp	r2, r3
 80158c6:	f040 80ef 	bne.w	8015aa8 <tcp_receive+0x854>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80158ca:	4b7d      	ldr	r3, [pc, #500]	; (8015ac0 <tcp_receive+0x86c>)
 80158cc:	891c      	ldrh	r4, [r3, #8]
 80158ce:	4b7c      	ldr	r3, [pc, #496]	; (8015ac0 <tcp_receive+0x86c>)
 80158d0:	68db      	ldr	r3, [r3, #12]
 80158d2:	899b      	ldrh	r3, [r3, #12]
 80158d4:	b29b      	uxth	r3, r3
 80158d6:	4618      	mov	r0, r3
 80158d8:	f7f9 fb72 	bl	800efc0 <lwip_htons>
 80158dc:	4603      	mov	r3, r0
 80158de:	b2db      	uxtb	r3, r3
 80158e0:	f003 0303 	and.w	r3, r3, #3
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d001      	beq.n	80158ec <tcp_receive+0x698>
 80158e8:	2301      	movs	r3, #1
 80158ea:	e000      	b.n	80158ee <tcp_receive+0x69a>
 80158ec:	2300      	movs	r3, #0
 80158ee:	4423      	add	r3, r4
 80158f0:	b29a      	uxth	r2, r3
 80158f2:	4b74      	ldr	r3, [pc, #464]	; (8015ac4 <tcp_receive+0x870>)
 80158f4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80158fa:	4b72      	ldr	r3, [pc, #456]	; (8015ac4 <tcp_receive+0x870>)
 80158fc:	881b      	ldrh	r3, [r3, #0]
 80158fe:	429a      	cmp	r2, r3
 8015900:	d275      	bcs.n	80159ee <tcp_receive+0x79a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015902:	4b6f      	ldr	r3, [pc, #444]	; (8015ac0 <tcp_receive+0x86c>)
 8015904:	68db      	ldr	r3, [r3, #12]
 8015906:	899b      	ldrh	r3, [r3, #12]
 8015908:	b29b      	uxth	r3, r3
 801590a:	4618      	mov	r0, r3
 801590c:	f7f9 fb58 	bl	800efc0 <lwip_htons>
 8015910:	4603      	mov	r3, r0
 8015912:	b2db      	uxtb	r3, r3
 8015914:	f003 0301 	and.w	r3, r3, #1
 8015918:	2b00      	cmp	r3, #0
 801591a:	d01f      	beq.n	801595c <tcp_receive+0x708>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801591c:	4b68      	ldr	r3, [pc, #416]	; (8015ac0 <tcp_receive+0x86c>)
 801591e:	68db      	ldr	r3, [r3, #12]
 8015920:	899b      	ldrh	r3, [r3, #12]
 8015922:	b29b      	uxth	r3, r3
 8015924:	b21b      	sxth	r3, r3
 8015926:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801592a:	b21c      	sxth	r4, r3
 801592c:	4b64      	ldr	r3, [pc, #400]	; (8015ac0 <tcp_receive+0x86c>)
 801592e:	68db      	ldr	r3, [r3, #12]
 8015930:	899b      	ldrh	r3, [r3, #12]
 8015932:	b29b      	uxth	r3, r3
 8015934:	4618      	mov	r0, r3
 8015936:	f7f9 fb43 	bl	800efc0 <lwip_htons>
 801593a:	4603      	mov	r3, r0
 801593c:	b2db      	uxtb	r3, r3
 801593e:	b29b      	uxth	r3, r3
 8015940:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015944:	b29b      	uxth	r3, r3
 8015946:	4618      	mov	r0, r3
 8015948:	f7f9 fb3a 	bl	800efc0 <lwip_htons>
 801594c:	4603      	mov	r3, r0
 801594e:	b21b      	sxth	r3, r3
 8015950:	4323      	orrs	r3, r4
 8015952:	b21a      	sxth	r2, r3
 8015954:	4b5a      	ldr	r3, [pc, #360]	; (8015ac0 <tcp_receive+0x86c>)
 8015956:	68db      	ldr	r3, [r3, #12]
 8015958:	b292      	uxth	r2, r2
 801595a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015960:	4b57      	ldr	r3, [pc, #348]	; (8015ac0 <tcp_receive+0x86c>)
 8015962:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015964:	4b56      	ldr	r3, [pc, #344]	; (8015ac0 <tcp_receive+0x86c>)
 8015966:	68db      	ldr	r3, [r3, #12]
 8015968:	899b      	ldrh	r3, [r3, #12]
 801596a:	b29b      	uxth	r3, r3
 801596c:	4618      	mov	r0, r3
 801596e:	f7f9 fb27 	bl	800efc0 <lwip_htons>
 8015972:	4603      	mov	r3, r0
 8015974:	b2db      	uxtb	r3, r3
 8015976:	f003 0302 	and.w	r3, r3, #2
 801597a:	2b00      	cmp	r3, #0
 801597c:	d005      	beq.n	801598a <tcp_receive+0x736>
            inseg.len -= 1;
 801597e:	4b50      	ldr	r3, [pc, #320]	; (8015ac0 <tcp_receive+0x86c>)
 8015980:	891b      	ldrh	r3, [r3, #8]
 8015982:	3b01      	subs	r3, #1
 8015984:	b29a      	uxth	r2, r3
 8015986:	4b4e      	ldr	r3, [pc, #312]	; (8015ac0 <tcp_receive+0x86c>)
 8015988:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801598a:	4b4d      	ldr	r3, [pc, #308]	; (8015ac0 <tcp_receive+0x86c>)
 801598c:	685b      	ldr	r3, [r3, #4]
 801598e:	4a4c      	ldr	r2, [pc, #304]	; (8015ac0 <tcp_receive+0x86c>)
 8015990:	8912      	ldrh	r2, [r2, #8]
 8015992:	4611      	mov	r1, r2
 8015994:	4618      	mov	r0, r3
 8015996:	f7fb fd3f 	bl	8011418 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801599a:	4b49      	ldr	r3, [pc, #292]	; (8015ac0 <tcp_receive+0x86c>)
 801599c:	891c      	ldrh	r4, [r3, #8]
 801599e:	4b48      	ldr	r3, [pc, #288]	; (8015ac0 <tcp_receive+0x86c>)
 80159a0:	68db      	ldr	r3, [r3, #12]
 80159a2:	899b      	ldrh	r3, [r3, #12]
 80159a4:	b29b      	uxth	r3, r3
 80159a6:	4618      	mov	r0, r3
 80159a8:	f7f9 fb0a 	bl	800efc0 <lwip_htons>
 80159ac:	4603      	mov	r3, r0
 80159ae:	b2db      	uxtb	r3, r3
 80159b0:	f003 0303 	and.w	r3, r3, #3
 80159b4:	2b00      	cmp	r3, #0
 80159b6:	d001      	beq.n	80159bc <tcp_receive+0x768>
 80159b8:	2301      	movs	r3, #1
 80159ba:	e000      	b.n	80159be <tcp_receive+0x76a>
 80159bc:	2300      	movs	r3, #0
 80159be:	4423      	add	r3, r4
 80159c0:	b29a      	uxth	r2, r3
 80159c2:	4b40      	ldr	r3, [pc, #256]	; (8015ac4 <tcp_receive+0x870>)
 80159c4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80159c6:	4b3f      	ldr	r3, [pc, #252]	; (8015ac4 <tcp_receive+0x870>)
 80159c8:	881b      	ldrh	r3, [r3, #0]
 80159ca:	461a      	mov	r2, r3
 80159cc:	4b3b      	ldr	r3, [pc, #236]	; (8015abc <tcp_receive+0x868>)
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	441a      	add	r2, r3
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d6:	6879      	ldr	r1, [r7, #4]
 80159d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80159da:	440b      	add	r3, r1
 80159dc:	429a      	cmp	r2, r3
 80159de:	d006      	beq.n	80159ee <tcp_receive+0x79a>
 80159e0:	4b39      	ldr	r3, [pc, #228]	; (8015ac8 <tcp_receive+0x874>)
 80159e2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80159e6:	4939      	ldr	r1, [pc, #228]	; (8015acc <tcp_receive+0x878>)
 80159e8:	4839      	ldr	r0, [pc, #228]	; (8015ad0 <tcp_receive+0x87c>)
 80159ea:	f003 faaf 	bl	8018f4c <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80159ee:	4b35      	ldr	r3, [pc, #212]	; (8015ac4 <tcp_receive+0x870>)
 80159f0:	881b      	ldrh	r3, [r3, #0]
 80159f2:	461a      	mov	r2, r3
 80159f4:	4b31      	ldr	r3, [pc, #196]	; (8015abc <tcp_receive+0x868>)
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	441a      	add	r2, r3
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015a02:	4b30      	ldr	r3, [pc, #192]	; (8015ac4 <tcp_receive+0x870>)
 8015a04:	881b      	ldrh	r3, [r3, #0]
 8015a06:	429a      	cmp	r2, r3
 8015a08:	d206      	bcs.n	8015a18 <tcp_receive+0x7c4>
 8015a0a:	4b2f      	ldr	r3, [pc, #188]	; (8015ac8 <tcp_receive+0x874>)
 8015a0c:	f240 6207 	movw	r2, #1543	; 0x607
 8015a10:	4930      	ldr	r1, [pc, #192]	; (8015ad4 <tcp_receive+0x880>)
 8015a12:	482f      	ldr	r0, [pc, #188]	; (8015ad0 <tcp_receive+0x87c>)
 8015a14:	f003 fa9a 	bl	8018f4c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015a1c:	4b29      	ldr	r3, [pc, #164]	; (8015ac4 <tcp_receive+0x870>)
 8015a1e:	881b      	ldrh	r3, [r3, #0]
 8015a20:	1ad3      	subs	r3, r2, r3
 8015a22:	b29a      	uxth	r2, r3
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015a28:	6878      	ldr	r0, [r7, #4]
 8015a2a:	f7fc ff8d 	bl	8012948 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015a2e:	4b24      	ldr	r3, [pc, #144]	; (8015ac0 <tcp_receive+0x86c>)
 8015a30:	685b      	ldr	r3, [r3, #4]
 8015a32:	891b      	ldrh	r3, [r3, #8]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d006      	beq.n	8015a46 <tcp_receive+0x7f2>
          recv_data = inseg.p;
 8015a38:	4b21      	ldr	r3, [pc, #132]	; (8015ac0 <tcp_receive+0x86c>)
 8015a3a:	685b      	ldr	r3, [r3, #4]
 8015a3c:	4a26      	ldr	r2, [pc, #152]	; (8015ad8 <tcp_receive+0x884>)
 8015a3e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015a40:	4b1f      	ldr	r3, [pc, #124]	; (8015ac0 <tcp_receive+0x86c>)
 8015a42:	2200      	movs	r2, #0
 8015a44:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015a46:	4b1e      	ldr	r3, [pc, #120]	; (8015ac0 <tcp_receive+0x86c>)
 8015a48:	68db      	ldr	r3, [r3, #12]
 8015a4a:	899b      	ldrh	r3, [r3, #12]
 8015a4c:	b29b      	uxth	r3, r3
 8015a4e:	4618      	mov	r0, r3
 8015a50:	f7f9 fab6 	bl	800efc0 <lwip_htons>
 8015a54:	4603      	mov	r3, r0
 8015a56:	b2db      	uxtb	r3, r3
 8015a58:	f003 0301 	and.w	r3, r3, #1
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d006      	beq.n	8015a6e <tcp_receive+0x81a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015a60:	4b1e      	ldr	r3, [pc, #120]	; (8015adc <tcp_receive+0x888>)
 8015a62:	781b      	ldrb	r3, [r3, #0]
 8015a64:	f043 0320 	orr.w	r3, r3, #32
 8015a68:	b2da      	uxtb	r2, r3
 8015a6a:	4b1c      	ldr	r3, [pc, #112]	; (8015adc <tcp_receive+0x888>)
 8015a6c:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015a6e:	687b      	ldr	r3, [r7, #4]
 8015a70:	8b5b      	ldrh	r3, [r3, #26]
 8015a72:	f003 0301 	and.w	r3, r3, #1
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d00e      	beq.n	8015a98 <tcp_receive+0x844>
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	8b5b      	ldrh	r3, [r3, #26]
 8015a7e:	f023 0301 	bic.w	r3, r3, #1
 8015a82:	b29a      	uxth	r2, r3
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	835a      	strh	r2, [r3, #26]
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	8b5b      	ldrh	r3, [r3, #26]
 8015a8c:	f043 0302 	orr.w	r3, r3, #2
 8015a90:	b29a      	uxth	r2, r3
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015a96:	e00f      	b.n	8015ab8 <tcp_receive+0x864>
        tcp_ack(pcb);
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	8b5b      	ldrh	r3, [r3, #26]
 8015a9c:	f043 0301 	orr.w	r3, r3, #1
 8015aa0:	b29a      	uxth	r2, r3
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015aa6:	e007      	b.n	8015ab8 <tcp_receive+0x864>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015aa8:	6878      	ldr	r0, [r7, #4]
 8015aaa:	f001 fe93 	bl	80177d4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015aae:	e003      	b.n	8015ab8 <tcp_receive+0x864>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015ab0:	6878      	ldr	r0, [r7, #4]
 8015ab2:	f001 fe8f 	bl	80177d4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015ab6:	e02d      	b.n	8015b14 <tcp_receive+0x8c0>
 8015ab8:	e02c      	b.n	8015b14 <tcp_receive+0x8c0>
 8015aba:	bf00      	nop
 8015abc:	240071bc 	.word	0x240071bc
 8015ac0:	2400719c 	.word	0x2400719c
 8015ac4:	240071c6 	.word	0x240071c6
 8015ac8:	0801dbec 	.word	0x0801dbec
 8015acc:	0801dfb0 	.word	0x0801dfb0
 8015ad0:	0801dc7c 	.word	0x0801dc7c
 8015ad4:	0801dfe8 	.word	0x0801dfe8
 8015ad8:	240071cc 	.word	0x240071cc
 8015adc:	240071c9 	.word	0x240071c9
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015ae0:	4b0e      	ldr	r3, [pc, #56]	; (8015b1c <tcp_receive+0x8c8>)
 8015ae2:	681a      	ldr	r2, [r3, #0]
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ae8:	1ad3      	subs	r3, r2, r3
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	db0a      	blt.n	8015b04 <tcp_receive+0x8b0>
 8015aee:	4b0b      	ldr	r3, [pc, #44]	; (8015b1c <tcp_receive+0x8c8>)
 8015af0:	681a      	ldr	r2, [r3, #0]
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015af6:	6879      	ldr	r1, [r7, #4]
 8015af8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015afa:	440b      	add	r3, r1
 8015afc:	1ad3      	subs	r3, r2, r3
 8015afe:	3301      	adds	r3, #1
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	dd07      	ble.n	8015b14 <tcp_receive+0x8c0>
      tcp_ack_now(pcb);
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	8b5b      	ldrh	r3, [r3, #26]
 8015b08:	f043 0302 	orr.w	r3, r3, #2
 8015b0c:	b29a      	uxth	r2, r3
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015b12:	e7ff      	b.n	8015b14 <tcp_receive+0x8c0>
 8015b14:	bf00      	nop
 8015b16:	3734      	adds	r7, #52	; 0x34
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd90      	pop	{r4, r7, pc}
 8015b1c:	240071bc 	.word	0x240071bc

08015b20 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015b20:	b480      	push	{r7}
 8015b22:	b083      	sub	sp, #12
 8015b24:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015b26:	4b15      	ldr	r3, [pc, #84]	; (8015b7c <tcp_get_next_optbyte+0x5c>)
 8015b28:	881b      	ldrh	r3, [r3, #0]
 8015b2a:	1c5a      	adds	r2, r3, #1
 8015b2c:	b291      	uxth	r1, r2
 8015b2e:	4a13      	ldr	r2, [pc, #76]	; (8015b7c <tcp_get_next_optbyte+0x5c>)
 8015b30:	8011      	strh	r1, [r2, #0]
 8015b32:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015b34:	4b12      	ldr	r3, [pc, #72]	; (8015b80 <tcp_get_next_optbyte+0x60>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d004      	beq.n	8015b46 <tcp_get_next_optbyte+0x26>
 8015b3c:	4b11      	ldr	r3, [pc, #68]	; (8015b84 <tcp_get_next_optbyte+0x64>)
 8015b3e:	881b      	ldrh	r3, [r3, #0]
 8015b40:	88fa      	ldrh	r2, [r7, #6]
 8015b42:	429a      	cmp	r2, r3
 8015b44:	d208      	bcs.n	8015b58 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015b46:	4b10      	ldr	r3, [pc, #64]	; (8015b88 <tcp_get_next_optbyte+0x68>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	3314      	adds	r3, #20
 8015b4c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015b4e:	88fb      	ldrh	r3, [r7, #6]
 8015b50:	683a      	ldr	r2, [r7, #0]
 8015b52:	4413      	add	r3, r2
 8015b54:	781b      	ldrb	r3, [r3, #0]
 8015b56:	e00b      	b.n	8015b70 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015b58:	88fb      	ldrh	r3, [r7, #6]
 8015b5a:	b2da      	uxtb	r2, r3
 8015b5c:	4b09      	ldr	r3, [pc, #36]	; (8015b84 <tcp_get_next_optbyte+0x64>)
 8015b5e:	881b      	ldrh	r3, [r3, #0]
 8015b60:	b2db      	uxtb	r3, r3
 8015b62:	1ad3      	subs	r3, r2, r3
 8015b64:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015b66:	4b06      	ldr	r3, [pc, #24]	; (8015b80 <tcp_get_next_optbyte+0x60>)
 8015b68:	681a      	ldr	r2, [r3, #0]
 8015b6a:	797b      	ldrb	r3, [r7, #5]
 8015b6c:	4413      	add	r3, r2
 8015b6e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015b70:	4618      	mov	r0, r3
 8015b72:	370c      	adds	r7, #12
 8015b74:	46bd      	mov	sp, r7
 8015b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7a:	4770      	bx	lr
 8015b7c:	240071b8 	.word	0x240071b8
 8015b80:	240071b4 	.word	0x240071b4
 8015b84:	240071b2 	.word	0x240071b2
 8015b88:	240071ac 	.word	0x240071ac

08015b8c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	b084      	sub	sp, #16
 8015b90:	af00      	add	r7, sp, #0
 8015b92:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d106      	bne.n	8015ba8 <tcp_parseopt+0x1c>
 8015b9a:	4b32      	ldr	r3, [pc, #200]	; (8015c64 <tcp_parseopt+0xd8>)
 8015b9c:	f240 727d 	movw	r2, #1917	; 0x77d
 8015ba0:	4931      	ldr	r1, [pc, #196]	; (8015c68 <tcp_parseopt+0xdc>)
 8015ba2:	4832      	ldr	r0, [pc, #200]	; (8015c6c <tcp_parseopt+0xe0>)
 8015ba4:	f003 f9d2 	bl	8018f4c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015ba8:	4b31      	ldr	r3, [pc, #196]	; (8015c70 <tcp_parseopt+0xe4>)
 8015baa:	881b      	ldrh	r3, [r3, #0]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d056      	beq.n	8015c5e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015bb0:	4b30      	ldr	r3, [pc, #192]	; (8015c74 <tcp_parseopt+0xe8>)
 8015bb2:	2200      	movs	r2, #0
 8015bb4:	801a      	strh	r2, [r3, #0]
 8015bb6:	e046      	b.n	8015c46 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015bb8:	f7ff ffb2 	bl	8015b20 <tcp_get_next_optbyte>
 8015bbc:	4603      	mov	r3, r0
 8015bbe:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015bc0:	7bfb      	ldrb	r3, [r7, #15]
 8015bc2:	2b02      	cmp	r3, #2
 8015bc4:	d006      	beq.n	8015bd4 <tcp_parseopt+0x48>
 8015bc6:	2b02      	cmp	r3, #2
 8015bc8:	dc2c      	bgt.n	8015c24 <tcp_parseopt+0x98>
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d042      	beq.n	8015c54 <tcp_parseopt+0xc8>
 8015bce:	2b01      	cmp	r3, #1
 8015bd0:	d128      	bne.n	8015c24 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015bd2:	e038      	b.n	8015c46 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015bd4:	f7ff ffa4 	bl	8015b20 <tcp_get_next_optbyte>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	2b04      	cmp	r3, #4
 8015bdc:	d13c      	bne.n	8015c58 <tcp_parseopt+0xcc>
 8015bde:	4b25      	ldr	r3, [pc, #148]	; (8015c74 <tcp_parseopt+0xe8>)
 8015be0:	881b      	ldrh	r3, [r3, #0]
 8015be2:	3301      	adds	r3, #1
 8015be4:	4a22      	ldr	r2, [pc, #136]	; (8015c70 <tcp_parseopt+0xe4>)
 8015be6:	8812      	ldrh	r2, [r2, #0]
 8015be8:	4293      	cmp	r3, r2
 8015bea:	da35      	bge.n	8015c58 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015bec:	f7ff ff98 	bl	8015b20 <tcp_get_next_optbyte>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	b29b      	uxth	r3, r3
 8015bf4:	021b      	lsls	r3, r3, #8
 8015bf6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015bf8:	f7ff ff92 	bl	8015b20 <tcp_get_next_optbyte>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	b29a      	uxth	r2, r3
 8015c00:	89bb      	ldrh	r3, [r7, #12]
 8015c02:	4313      	orrs	r3, r2
 8015c04:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015c06:	89bb      	ldrh	r3, [r7, #12]
 8015c08:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015c0c:	4293      	cmp	r3, r2
 8015c0e:	d804      	bhi.n	8015c1a <tcp_parseopt+0x8e>
 8015c10:	89bb      	ldrh	r3, [r7, #12]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d001      	beq.n	8015c1a <tcp_parseopt+0x8e>
 8015c16:	89ba      	ldrh	r2, [r7, #12]
 8015c18:	e001      	b.n	8015c1e <tcp_parseopt+0x92>
 8015c1a:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015c22:	e010      	b.n	8015c46 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015c24:	f7ff ff7c 	bl	8015b20 <tcp_get_next_optbyte>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015c2c:	7afb      	ldrb	r3, [r7, #11]
 8015c2e:	2b01      	cmp	r3, #1
 8015c30:	d914      	bls.n	8015c5c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015c32:	7afb      	ldrb	r3, [r7, #11]
 8015c34:	b29a      	uxth	r2, r3
 8015c36:	4b0f      	ldr	r3, [pc, #60]	; (8015c74 <tcp_parseopt+0xe8>)
 8015c38:	881b      	ldrh	r3, [r3, #0]
 8015c3a:	4413      	add	r3, r2
 8015c3c:	b29b      	uxth	r3, r3
 8015c3e:	3b02      	subs	r3, #2
 8015c40:	b29a      	uxth	r2, r3
 8015c42:	4b0c      	ldr	r3, [pc, #48]	; (8015c74 <tcp_parseopt+0xe8>)
 8015c44:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015c46:	4b0b      	ldr	r3, [pc, #44]	; (8015c74 <tcp_parseopt+0xe8>)
 8015c48:	881a      	ldrh	r2, [r3, #0]
 8015c4a:	4b09      	ldr	r3, [pc, #36]	; (8015c70 <tcp_parseopt+0xe4>)
 8015c4c:	881b      	ldrh	r3, [r3, #0]
 8015c4e:	429a      	cmp	r2, r3
 8015c50:	d3b2      	bcc.n	8015bb8 <tcp_parseopt+0x2c>
 8015c52:	e004      	b.n	8015c5e <tcp_parseopt+0xd2>
          return;
 8015c54:	bf00      	nop
 8015c56:	e002      	b.n	8015c5e <tcp_parseopt+0xd2>
            return;
 8015c58:	bf00      	nop
 8015c5a:	e000      	b.n	8015c5e <tcp_parseopt+0xd2>
            return;
 8015c5c:	bf00      	nop
      }
    }
  }
}
 8015c5e:	3710      	adds	r7, #16
 8015c60:	46bd      	mov	sp, r7
 8015c62:	bd80      	pop	{r7, pc}
 8015c64:	0801dbec 	.word	0x0801dbec
 8015c68:	0801e008 	.word	0x0801e008
 8015c6c:	0801dc7c 	.word	0x0801dc7c
 8015c70:	240071b0 	.word	0x240071b0
 8015c74:	240071b8 	.word	0x240071b8

08015c78 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015c78:	b480      	push	{r7}
 8015c7a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015c7c:	4b05      	ldr	r3, [pc, #20]	; (8015c94 <tcp_trigger_input_pcb_close+0x1c>)
 8015c7e:	781b      	ldrb	r3, [r3, #0]
 8015c80:	f043 0310 	orr.w	r3, r3, #16
 8015c84:	b2da      	uxtb	r2, r3
 8015c86:	4b03      	ldr	r3, [pc, #12]	; (8015c94 <tcp_trigger_input_pcb_close+0x1c>)
 8015c88:	701a      	strb	r2, [r3, #0]
}
 8015c8a:	bf00      	nop
 8015c8c:	46bd      	mov	sp, r7
 8015c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c92:	4770      	bx	lr
 8015c94:	240071c9 	.word	0x240071c9

08015c98 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b084      	sub	sp, #16
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	60f8      	str	r0, [r7, #12]
 8015ca0:	60b9      	str	r1, [r7, #8]
 8015ca2:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015ca4:	68fb      	ldr	r3, [r7, #12]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d00a      	beq.n	8015cc0 <tcp_route+0x28>
 8015caa:	68fb      	ldr	r3, [r7, #12]
 8015cac:	7a1b      	ldrb	r3, [r3, #8]
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d006      	beq.n	8015cc0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	7a1b      	ldrb	r3, [r3, #8]
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	f7fb fa02 	bl	80110c0 <netif_get_by_index>
 8015cbc:	4603      	mov	r3, r0
 8015cbe:	e003      	b.n	8015cc8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015cc0:	6878      	ldr	r0, [r7, #4]
 8015cc2:	f7f7 ff2f 	bl	800db24 <ip4_route>
 8015cc6:	4603      	mov	r3, r0
  }
}
 8015cc8:	4618      	mov	r0, r3
 8015cca:	3710      	adds	r7, #16
 8015ccc:	46bd      	mov	sp, r7
 8015cce:	bd80      	pop	{r7, pc}

08015cd0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015cd0:	b590      	push	{r4, r7, lr}
 8015cd2:	b087      	sub	sp, #28
 8015cd4:	af00      	add	r7, sp, #0
 8015cd6:	60f8      	str	r0, [r7, #12]
 8015cd8:	60b9      	str	r1, [r7, #8]
 8015cda:	603b      	str	r3, [r7, #0]
 8015cdc:	4613      	mov	r3, r2
 8015cde:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d105      	bne.n	8015cf2 <tcp_create_segment+0x22>
 8015ce6:	4b44      	ldr	r3, [pc, #272]	; (8015df8 <tcp_create_segment+0x128>)
 8015ce8:	22a3      	movs	r2, #163	; 0xa3
 8015cea:	4944      	ldr	r1, [pc, #272]	; (8015dfc <tcp_create_segment+0x12c>)
 8015cec:	4844      	ldr	r0, [pc, #272]	; (8015e00 <tcp_create_segment+0x130>)
 8015cee:	f003 f92d 	bl	8018f4c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015cf2:	68bb      	ldr	r3, [r7, #8]
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d105      	bne.n	8015d04 <tcp_create_segment+0x34>
 8015cf8:	4b3f      	ldr	r3, [pc, #252]	; (8015df8 <tcp_create_segment+0x128>)
 8015cfa:	22a4      	movs	r2, #164	; 0xa4
 8015cfc:	4941      	ldr	r1, [pc, #260]	; (8015e04 <tcp_create_segment+0x134>)
 8015cfe:	4840      	ldr	r0, [pc, #256]	; (8015e00 <tcp_create_segment+0x130>)
 8015d00:	f003 f924 	bl	8018f4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015d04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015d08:	009b      	lsls	r3, r3, #2
 8015d0a:	b2db      	uxtb	r3, r3
 8015d0c:	f003 0304 	and.w	r3, r3, #4
 8015d10:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015d12:	2003      	movs	r0, #3
 8015d14:	f7fa fe48 	bl	80109a8 <memp_malloc>
 8015d18:	6138      	str	r0, [r7, #16]
 8015d1a:	693b      	ldr	r3, [r7, #16]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d104      	bne.n	8015d2a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015d20:	68b8      	ldr	r0, [r7, #8]
 8015d22:	f7fb fd31 	bl	8011788 <pbuf_free>
    return NULL;
 8015d26:	2300      	movs	r3, #0
 8015d28:	e061      	b.n	8015dee <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015d2a:	693b      	ldr	r3, [r7, #16]
 8015d2c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015d30:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015d32:	693b      	ldr	r3, [r7, #16]
 8015d34:	2200      	movs	r2, #0
 8015d36:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	68ba      	ldr	r2, [r7, #8]
 8015d3c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015d3e:	68bb      	ldr	r3, [r7, #8]
 8015d40:	891a      	ldrh	r2, [r3, #8]
 8015d42:	7dfb      	ldrb	r3, [r7, #23]
 8015d44:	b29b      	uxth	r3, r3
 8015d46:	429a      	cmp	r2, r3
 8015d48:	d205      	bcs.n	8015d56 <tcp_create_segment+0x86>
 8015d4a:	4b2b      	ldr	r3, [pc, #172]	; (8015df8 <tcp_create_segment+0x128>)
 8015d4c:	22b0      	movs	r2, #176	; 0xb0
 8015d4e:	492e      	ldr	r1, [pc, #184]	; (8015e08 <tcp_create_segment+0x138>)
 8015d50:	482b      	ldr	r0, [pc, #172]	; (8015e00 <tcp_create_segment+0x130>)
 8015d52:	f003 f8fb 	bl	8018f4c <iprintf>
  seg->len = p->tot_len - optlen;
 8015d56:	68bb      	ldr	r3, [r7, #8]
 8015d58:	891a      	ldrh	r2, [r3, #8]
 8015d5a:	7dfb      	ldrb	r3, [r7, #23]
 8015d5c:	b29b      	uxth	r3, r3
 8015d5e:	1ad3      	subs	r3, r2, r3
 8015d60:	b29a      	uxth	r2, r3
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015d66:	2114      	movs	r1, #20
 8015d68:	68b8      	ldr	r0, [r7, #8]
 8015d6a:	f7fb fc45 	bl	80115f8 <pbuf_add_header>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d004      	beq.n	8015d7e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015d74:	6938      	ldr	r0, [r7, #16]
 8015d76:	f7fd fc12 	bl	801359e <tcp_seg_free>
    return NULL;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	e037      	b.n	8015dee <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015d7e:	693b      	ldr	r3, [r7, #16]
 8015d80:	685b      	ldr	r3, [r3, #4]
 8015d82:	685a      	ldr	r2, [r3, #4]
 8015d84:	693b      	ldr	r3, [r7, #16]
 8015d86:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015d88:	68fb      	ldr	r3, [r7, #12]
 8015d8a:	8ada      	ldrh	r2, [r3, #22]
 8015d8c:	693b      	ldr	r3, [r7, #16]
 8015d8e:	68dc      	ldr	r4, [r3, #12]
 8015d90:	4610      	mov	r0, r2
 8015d92:	f7f9 f915 	bl	800efc0 <lwip_htons>
 8015d96:	4603      	mov	r3, r0
 8015d98:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015d9a:	68fb      	ldr	r3, [r7, #12]
 8015d9c:	8b1a      	ldrh	r2, [r3, #24]
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	68dc      	ldr	r4, [r3, #12]
 8015da2:	4610      	mov	r0, r2
 8015da4:	f7f9 f90c 	bl	800efc0 <lwip_htons>
 8015da8:	4603      	mov	r3, r0
 8015daa:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	68dc      	ldr	r4, [r3, #12]
 8015db0:	6838      	ldr	r0, [r7, #0]
 8015db2:	f7f9 f91a 	bl	800efea <lwip_htonl>
 8015db6:	4603      	mov	r3, r0
 8015db8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015dba:	7dfb      	ldrb	r3, [r7, #23]
 8015dbc:	089b      	lsrs	r3, r3, #2
 8015dbe:	b2db      	uxtb	r3, r3
 8015dc0:	b29b      	uxth	r3, r3
 8015dc2:	3305      	adds	r3, #5
 8015dc4:	b29b      	uxth	r3, r3
 8015dc6:	031b      	lsls	r3, r3, #12
 8015dc8:	b29a      	uxth	r2, r3
 8015dca:	79fb      	ldrb	r3, [r7, #7]
 8015dcc:	b29b      	uxth	r3, r3
 8015dce:	4313      	orrs	r3, r2
 8015dd0:	b29a      	uxth	r2, r3
 8015dd2:	693b      	ldr	r3, [r7, #16]
 8015dd4:	68dc      	ldr	r4, [r3, #12]
 8015dd6:	4610      	mov	r0, r2
 8015dd8:	f7f9 f8f2 	bl	800efc0 <lwip_htons>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	68db      	ldr	r3, [r3, #12]
 8015de4:	2200      	movs	r2, #0
 8015de6:	749a      	strb	r2, [r3, #18]
 8015de8:	2200      	movs	r2, #0
 8015dea:	74da      	strb	r2, [r3, #19]
  return seg;
 8015dec:	693b      	ldr	r3, [r7, #16]
}
 8015dee:	4618      	mov	r0, r3
 8015df0:	371c      	adds	r7, #28
 8015df2:	46bd      	mov	sp, r7
 8015df4:	bd90      	pop	{r4, r7, pc}
 8015df6:	bf00      	nop
 8015df8:	0801e024 	.word	0x0801e024
 8015dfc:	0801e09c 	.word	0x0801e09c
 8015e00:	0801e0bc 	.word	0x0801e0bc
 8015e04:	0801e0e4 	.word	0x0801e0e4
 8015e08:	0801e108 	.word	0x0801e108

08015e0c <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b086      	sub	sp, #24
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	607b      	str	r3, [r7, #4]
 8015e14:	4603      	mov	r3, r0
 8015e16:	73fb      	strb	r3, [r7, #15]
 8015e18:	460b      	mov	r3, r1
 8015e1a:	81bb      	strh	r3, [r7, #12]
 8015e1c:	4613      	mov	r3, r2
 8015e1e:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015e20:	89bb      	ldrh	r3, [r7, #12]
 8015e22:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d105      	bne.n	8015e36 <tcp_pbuf_prealloc+0x2a>
 8015e2a:	4b30      	ldr	r3, [pc, #192]	; (8015eec <tcp_pbuf_prealloc+0xe0>)
 8015e2c:	22e8      	movs	r2, #232	; 0xe8
 8015e2e:	4930      	ldr	r1, [pc, #192]	; (8015ef0 <tcp_pbuf_prealloc+0xe4>)
 8015e30:	4830      	ldr	r0, [pc, #192]	; (8015ef4 <tcp_pbuf_prealloc+0xe8>)
 8015e32:	f003 f88b 	bl	8018f4c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015e36:	6a3b      	ldr	r3, [r7, #32]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d105      	bne.n	8015e48 <tcp_pbuf_prealloc+0x3c>
 8015e3c:	4b2b      	ldr	r3, [pc, #172]	; (8015eec <tcp_pbuf_prealloc+0xe0>)
 8015e3e:	22e9      	movs	r2, #233	; 0xe9
 8015e40:	492d      	ldr	r1, [pc, #180]	; (8015ef8 <tcp_pbuf_prealloc+0xec>)
 8015e42:	482c      	ldr	r0, [pc, #176]	; (8015ef4 <tcp_pbuf_prealloc+0xe8>)
 8015e44:	f003 f882 	bl	8018f4c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015e48:	89ba      	ldrh	r2, [r7, #12]
 8015e4a:	897b      	ldrh	r3, [r7, #10]
 8015e4c:	429a      	cmp	r2, r3
 8015e4e:	d221      	bcs.n	8015e94 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015e50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015e54:	f003 0302 	and.w	r3, r3, #2
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d111      	bne.n	8015e80 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015e5c:	6a3b      	ldr	r3, [r7, #32]
 8015e5e:	8b5b      	ldrh	r3, [r3, #26]
 8015e60:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d115      	bne.n	8015e94 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015e68:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d007      	beq.n	8015e80 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015e70:	6a3b      	ldr	r3, [r7, #32]
 8015e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d103      	bne.n	8015e80 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015e78:	6a3b      	ldr	r3, [r7, #32]
 8015e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d009      	beq.n	8015e94 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015e80:	89bb      	ldrh	r3, [r7, #12]
 8015e82:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8015e86:	f023 0203 	bic.w	r2, r3, #3
 8015e8a:	897b      	ldrh	r3, [r7, #10]
 8015e8c:	4293      	cmp	r3, r2
 8015e8e:	bf28      	it	cs
 8015e90:	4613      	movcs	r3, r2
 8015e92:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015e94:	8af9      	ldrh	r1, [r7, #22]
 8015e96:	7bfb      	ldrb	r3, [r7, #15]
 8015e98:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	f7fb f95f 	bl	8011160 <pbuf_alloc>
 8015ea2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015ea4:	693b      	ldr	r3, [r7, #16]
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d101      	bne.n	8015eae <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015eaa:	2300      	movs	r3, #0
 8015eac:	e019      	b.n	8015ee2 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015eae:	693b      	ldr	r3, [r7, #16]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d006      	beq.n	8015ec4 <tcp_pbuf_prealloc+0xb8>
 8015eb6:	4b0d      	ldr	r3, [pc, #52]	; (8015eec <tcp_pbuf_prealloc+0xe0>)
 8015eb8:	f240 120b 	movw	r2, #267	; 0x10b
 8015ebc:	490f      	ldr	r1, [pc, #60]	; (8015efc <tcp_pbuf_prealloc+0xf0>)
 8015ebe:	480d      	ldr	r0, [pc, #52]	; (8015ef4 <tcp_pbuf_prealloc+0xe8>)
 8015ec0:	f003 f844 	bl	8018f4c <iprintf>
  *oversize = p->len - length;
 8015ec4:	693b      	ldr	r3, [r7, #16]
 8015ec6:	895a      	ldrh	r2, [r3, #10]
 8015ec8:	89bb      	ldrh	r3, [r7, #12]
 8015eca:	1ad3      	subs	r3, r2, r3
 8015ecc:	b29a      	uxth	r2, r3
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015ed2:	693b      	ldr	r3, [r7, #16]
 8015ed4:	89ba      	ldrh	r2, [r7, #12]
 8015ed6:	811a      	strh	r2, [r3, #8]
 8015ed8:	693b      	ldr	r3, [r7, #16]
 8015eda:	891a      	ldrh	r2, [r3, #8]
 8015edc:	693b      	ldr	r3, [r7, #16]
 8015ede:	815a      	strh	r2, [r3, #10]
  return p;
 8015ee0:	693b      	ldr	r3, [r7, #16]
}
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	3718      	adds	r7, #24
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
 8015eea:	bf00      	nop
 8015eec:	0801e024 	.word	0x0801e024
 8015ef0:	0801e120 	.word	0x0801e120
 8015ef4:	0801e0bc 	.word	0x0801e0bc
 8015ef8:	0801e144 	.word	0x0801e144
 8015efc:	0801e164 	.word	0x0801e164

08015f00 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b082      	sub	sp, #8
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
 8015f08:	460b      	mov	r3, r1
 8015f0a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d106      	bne.n	8015f20 <tcp_write_checks+0x20>
 8015f12:	4b33      	ldr	r3, [pc, #204]	; (8015fe0 <tcp_write_checks+0xe0>)
 8015f14:	f240 1233 	movw	r2, #307	; 0x133
 8015f18:	4932      	ldr	r1, [pc, #200]	; (8015fe4 <tcp_write_checks+0xe4>)
 8015f1a:	4833      	ldr	r0, [pc, #204]	; (8015fe8 <tcp_write_checks+0xe8>)
 8015f1c:	f003 f816 	bl	8018f4c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	7d1b      	ldrb	r3, [r3, #20]
 8015f24:	2b04      	cmp	r3, #4
 8015f26:	d00e      	beq.n	8015f46 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015f2c:	2b07      	cmp	r3, #7
 8015f2e:	d00a      	beq.n	8015f46 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015f34:	2b02      	cmp	r3, #2
 8015f36:	d006      	beq.n	8015f46 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015f3c:	2b03      	cmp	r3, #3
 8015f3e:	d002      	beq.n	8015f46 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015f40:	f06f 030a 	mvn.w	r3, #10
 8015f44:	e048      	b.n	8015fd8 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015f46:	887b      	ldrh	r3, [r7, #2]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d101      	bne.n	8015f50 <tcp_write_checks+0x50>
    return ERR_OK;
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	e043      	b.n	8015fd8 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015f56:	887a      	ldrh	r2, [r7, #2]
 8015f58:	429a      	cmp	r2, r3
 8015f5a:	d909      	bls.n	8015f70 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	8b5b      	ldrh	r3, [r3, #26]
 8015f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f64:	b29a      	uxth	r2, r3
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015f6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f6e:	e033      	b.n	8015fd8 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f76:	2b07      	cmp	r3, #7
 8015f78:	d909      	bls.n	8015f8e <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	8b5b      	ldrh	r3, [r3, #26]
 8015f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f82:	b29a      	uxth	r2, r3
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015f8c:	e024      	b.n	8015fd8 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f94:	2b00      	cmp	r3, #0
 8015f96:	d00f      	beq.n	8015fb8 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d11a      	bne.n	8015fd6 <tcp_write_checks+0xd6>
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d116      	bne.n	8015fd6 <tcp_write_checks+0xd6>
 8015fa8:	4b0d      	ldr	r3, [pc, #52]	; (8015fe0 <tcp_write_checks+0xe0>)
 8015faa:	f240 1255 	movw	r2, #341	; 0x155
 8015fae:	490f      	ldr	r1, [pc, #60]	; (8015fec <tcp_write_checks+0xec>)
 8015fb0:	480d      	ldr	r0, [pc, #52]	; (8015fe8 <tcp_write_checks+0xe8>)
 8015fb2:	f002 ffcb 	bl	8018f4c <iprintf>
 8015fb6:	e00e      	b.n	8015fd6 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d103      	bne.n	8015fc8 <tcp_write_checks+0xc8>
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d006      	beq.n	8015fd6 <tcp_write_checks+0xd6>
 8015fc8:	4b05      	ldr	r3, [pc, #20]	; (8015fe0 <tcp_write_checks+0xe0>)
 8015fca:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8015fce:	4908      	ldr	r1, [pc, #32]	; (8015ff0 <tcp_write_checks+0xf0>)
 8015fd0:	4805      	ldr	r0, [pc, #20]	; (8015fe8 <tcp_write_checks+0xe8>)
 8015fd2:	f002 ffbb 	bl	8018f4c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015fd6:	2300      	movs	r3, #0
}
 8015fd8:	4618      	mov	r0, r3
 8015fda:	3708      	adds	r7, #8
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bd80      	pop	{r7, pc}
 8015fe0:	0801e024 	.word	0x0801e024
 8015fe4:	0801e178 	.word	0x0801e178
 8015fe8:	0801e0bc 	.word	0x0801e0bc
 8015fec:	0801e198 	.word	0x0801e198
 8015ff0:	0801e1d4 	.word	0x0801e1d4

08015ff4 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015ff4:	b590      	push	{r4, r7, lr}
 8015ff6:	b09b      	sub	sp, #108	; 0x6c
 8015ff8:	af04      	add	r7, sp, #16
 8015ffa:	60f8      	str	r0, [r7, #12]
 8015ffc:	60b9      	str	r1, [r7, #8]
 8015ffe:	4611      	mov	r1, r2
 8016000:	461a      	mov	r2, r3
 8016002:	460b      	mov	r3, r1
 8016004:	80fb      	strh	r3, [r7, #6]
 8016006:	4613      	mov	r3, r2
 8016008:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801600a:	2300      	movs	r3, #0
 801600c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801600e:	2300      	movs	r3, #0
 8016010:	653b      	str	r3, [r7, #80]	; 0x50
 8016012:	2300      	movs	r3, #0
 8016014:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016016:	2300      	movs	r3, #0
 8016018:	64bb      	str	r3, [r7, #72]	; 0x48
 801601a:	2300      	movs	r3, #0
 801601c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801601e:	2300      	movs	r3, #0
 8016020:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016024:	2300      	movs	r3, #0
 8016026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801602a:	2300      	movs	r3, #0
 801602c:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801602e:	2300      	movs	r3, #0
 8016030:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8016032:	2300      	movs	r3, #0
 8016034:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d109      	bne.n	8016050 <tcp_write+0x5c>
 801603c:	4ba4      	ldr	r3, [pc, #656]	; (80162d0 <tcp_write+0x2dc>)
 801603e:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8016042:	49a4      	ldr	r1, [pc, #656]	; (80162d4 <tcp_write+0x2e0>)
 8016044:	48a4      	ldr	r0, [pc, #656]	; (80162d8 <tcp_write+0x2e4>)
 8016046:	f002 ff81 	bl	8018f4c <iprintf>
 801604a:	f06f 030f 	mvn.w	r3, #15
 801604e:	e32a      	b.n	80166a6 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016056:	085b      	lsrs	r3, r3, #1
 8016058:	b29a      	uxth	r2, r3
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801605e:	4293      	cmp	r3, r2
 8016060:	bf28      	it	cs
 8016062:	4613      	movcs	r3, r2
 8016064:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8016066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016068:	2b00      	cmp	r3, #0
 801606a:	d102      	bne.n	8016072 <tcp_write+0x7e>
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016070:	e000      	b.n	8016074 <tcp_write+0x80>
 8016072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016074:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016076:	68bb      	ldr	r3, [r7, #8]
 8016078:	2b00      	cmp	r3, #0
 801607a:	d109      	bne.n	8016090 <tcp_write+0x9c>
 801607c:	4b94      	ldr	r3, [pc, #592]	; (80162d0 <tcp_write+0x2dc>)
 801607e:	f240 12ad 	movw	r2, #429	; 0x1ad
 8016082:	4996      	ldr	r1, [pc, #600]	; (80162dc <tcp_write+0x2e8>)
 8016084:	4894      	ldr	r0, [pc, #592]	; (80162d8 <tcp_write+0x2e4>)
 8016086:	f002 ff61 	bl	8018f4c <iprintf>
 801608a:	f06f 030f 	mvn.w	r3, #15
 801608e:	e30a      	b.n	80166a6 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016090:	88fb      	ldrh	r3, [r7, #6]
 8016092:	4619      	mov	r1, r3
 8016094:	68f8      	ldr	r0, [r7, #12]
 8016096:	f7ff ff33 	bl	8015f00 <tcp_write_checks>
 801609a:	4603      	mov	r3, r0
 801609c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80160a0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d002      	beq.n	80160ae <tcp_write+0xba>
    return err;
 80160a8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80160ac:	e2fb      	b.n	80166a6 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80160b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80160b8:	2300      	movs	r3, #0
 80160ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	f000 80f6 	beq.w	80162b4 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80160c8:	68fb      	ldr	r3, [r7, #12]
 80160ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160cc:	653b      	str	r3, [r7, #80]	; 0x50
 80160ce:	e002      	b.n	80160d6 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80160d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80160d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d1f8      	bne.n	80160d0 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80160de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160e0:	7a9b      	ldrb	r3, [r3, #10]
 80160e2:	009b      	lsls	r3, r3, #2
 80160e4:	b29b      	uxth	r3, r3
 80160e6:	f003 0304 	and.w	r3, r3, #4
 80160ea:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80160ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160f0:	891b      	ldrh	r3, [r3, #8]
 80160f2:	4619      	mov	r1, r3
 80160f4:	8c3b      	ldrh	r3, [r7, #32]
 80160f6:	440b      	add	r3, r1
 80160f8:	429a      	cmp	r2, r3
 80160fa:	da06      	bge.n	801610a <tcp_write+0x116>
 80160fc:	4b74      	ldr	r3, [pc, #464]	; (80162d0 <tcp_write+0x2dc>)
 80160fe:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016102:	4977      	ldr	r1, [pc, #476]	; (80162e0 <tcp_write+0x2ec>)
 8016104:	4874      	ldr	r0, [pc, #464]	; (80162d8 <tcp_write+0x2e4>)
 8016106:	f002 ff21 	bl	8018f4c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801610a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801610c:	891a      	ldrh	r2, [r3, #8]
 801610e:	8c3b      	ldrh	r3, [r7, #32]
 8016110:	4413      	add	r3, r2
 8016112:	b29b      	uxth	r3, r3
 8016114:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016116:	1ad3      	subs	r3, r2, r3
 8016118:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801611a:	68fb      	ldr	r3, [r7, #12]
 801611c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016120:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8016122:	8a7b      	ldrh	r3, [r7, #18]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d026      	beq.n	8016176 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016128:	8a7b      	ldrh	r3, [r7, #18]
 801612a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801612c:	429a      	cmp	r2, r3
 801612e:	d206      	bcs.n	801613e <tcp_write+0x14a>
 8016130:	4b67      	ldr	r3, [pc, #412]	; (80162d0 <tcp_write+0x2dc>)
 8016132:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8016136:	496b      	ldr	r1, [pc, #428]	; (80162e4 <tcp_write+0x2f0>)
 8016138:	4867      	ldr	r0, [pc, #412]	; (80162d8 <tcp_write+0x2e4>)
 801613a:	f002 ff07 	bl	8018f4c <iprintf>
      seg = last_unsent;
 801613e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016140:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016142:	8a7b      	ldrh	r3, [r7, #18]
 8016144:	88fa      	ldrh	r2, [r7, #6]
 8016146:	4293      	cmp	r3, r2
 8016148:	bf28      	it	cs
 801614a:	4613      	movcs	r3, r2
 801614c:	b29b      	uxth	r3, r3
 801614e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016150:	4293      	cmp	r3, r2
 8016152:	bf28      	it	cs
 8016154:	4613      	movcs	r3, r2
 8016156:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016158:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801615c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801615e:	4413      	add	r3, r2
 8016160:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8016164:	8a7a      	ldrh	r2, [r7, #18]
 8016166:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016168:	1ad3      	subs	r3, r2, r3
 801616a:	b29b      	uxth	r3, r3
 801616c:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801616e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016170:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016172:	1ad3      	subs	r3, r2, r3
 8016174:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016176:	8a7b      	ldrh	r3, [r7, #18]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d00b      	beq.n	8016194 <tcp_write+0x1a0>
 801617c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016180:	88fb      	ldrh	r3, [r7, #6]
 8016182:	429a      	cmp	r2, r3
 8016184:	d006      	beq.n	8016194 <tcp_write+0x1a0>
 8016186:	4b52      	ldr	r3, [pc, #328]	; (80162d0 <tcp_write+0x2dc>)
 8016188:	f44f 7200 	mov.w	r2, #512	; 0x200
 801618c:	4956      	ldr	r1, [pc, #344]	; (80162e8 <tcp_write+0x2f4>)
 801618e:	4852      	ldr	r0, [pc, #328]	; (80162d8 <tcp_write+0x2e4>)
 8016190:	f002 fedc 	bl	8018f4c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016194:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016198:	88fb      	ldrh	r3, [r7, #6]
 801619a:	429a      	cmp	r2, r3
 801619c:	f080 8167 	bcs.w	801646e <tcp_write+0x47a>
 80161a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	f000 8163 	beq.w	801646e <tcp_write+0x47a>
 80161a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161aa:	891b      	ldrh	r3, [r3, #8]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	f000 815e 	beq.w	801646e <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80161b2:	88fa      	ldrh	r2, [r7, #6]
 80161b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161b8:	1ad2      	subs	r2, r2, r3
 80161ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161bc:	4293      	cmp	r3, r2
 80161be:	bfa8      	it	ge
 80161c0:	4613      	movge	r3, r2
 80161c2:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80161c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161c6:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80161c8:	797b      	ldrb	r3, [r7, #5]
 80161ca:	f003 0301 	and.w	r3, r3, #1
 80161ce:	2b00      	cmp	r3, #0
 80161d0:	d027      	beq.n	8016222 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80161d2:	f107 0012 	add.w	r0, r7, #18
 80161d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161d8:	8bf9      	ldrh	r1, [r7, #30]
 80161da:	2301      	movs	r3, #1
 80161dc:	9302      	str	r3, [sp, #8]
 80161de:	797b      	ldrb	r3, [r7, #5]
 80161e0:	9301      	str	r3, [sp, #4]
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	9300      	str	r3, [sp, #0]
 80161e6:	4603      	mov	r3, r0
 80161e8:	2000      	movs	r0, #0
 80161ea:	f7ff fe0f 	bl	8015e0c <tcp_pbuf_prealloc>
 80161ee:	6578      	str	r0, [r7, #84]	; 0x54
 80161f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	f000 8225 	beq.w	8016642 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80161f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80161fa:	6858      	ldr	r0, [r3, #4]
 80161fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016200:	68ba      	ldr	r2, [r7, #8]
 8016202:	4413      	add	r3, r2
 8016204:	8bfa      	ldrh	r2, [r7, #30]
 8016206:	4619      	mov	r1, r3
 8016208:	f002 fe70 	bl	8018eec <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801620c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801620e:	f7fb fb49 	bl	80118a4 <pbuf_clen>
 8016212:	4603      	mov	r3, r0
 8016214:	461a      	mov	r2, r3
 8016216:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801621a:	4413      	add	r3, r2
 801621c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8016220:	e041      	b.n	80162a6 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016222:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	637b      	str	r3, [r7, #52]	; 0x34
 8016228:	e002      	b.n	8016230 <tcp_write+0x23c>
 801622a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	637b      	str	r3, [r7, #52]	; 0x34
 8016230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d1f8      	bne.n	801622a <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801623a:	7b1b      	ldrb	r3, [r3, #12]
 801623c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016240:	2b00      	cmp	r3, #0
 8016242:	d115      	bne.n	8016270 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016246:	685b      	ldr	r3, [r3, #4]
 8016248:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801624a:	8952      	ldrh	r2, [r2, #10]
 801624c:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801624e:	68ba      	ldr	r2, [r7, #8]
 8016250:	429a      	cmp	r2, r3
 8016252:	d10d      	bne.n	8016270 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016254:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016258:	2b00      	cmp	r3, #0
 801625a:	d006      	beq.n	801626a <tcp_write+0x276>
 801625c:	4b1c      	ldr	r3, [pc, #112]	; (80162d0 <tcp_write+0x2dc>)
 801625e:	f240 2231 	movw	r2, #561	; 0x231
 8016262:	4922      	ldr	r1, [pc, #136]	; (80162ec <tcp_write+0x2f8>)
 8016264:	481c      	ldr	r0, [pc, #112]	; (80162d8 <tcp_write+0x2e4>)
 8016266:	f002 fe71 	bl	8018f4c <iprintf>
          extendlen = seglen;
 801626a:	8bfb      	ldrh	r3, [r7, #30]
 801626c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801626e:	e01a      	b.n	80162a6 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016270:	8bfb      	ldrh	r3, [r7, #30]
 8016272:	2201      	movs	r2, #1
 8016274:	4619      	mov	r1, r3
 8016276:	2000      	movs	r0, #0
 8016278:	f7fa ff72 	bl	8011160 <pbuf_alloc>
 801627c:	6578      	str	r0, [r7, #84]	; 0x54
 801627e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016280:	2b00      	cmp	r3, #0
 8016282:	f000 81e0 	beq.w	8016646 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016286:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801628a:	68ba      	ldr	r2, [r7, #8]
 801628c:	441a      	add	r2, r3
 801628e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016290:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016292:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016294:	f7fb fb06 	bl	80118a4 <pbuf_clen>
 8016298:	4603      	mov	r3, r0
 801629a:	461a      	mov	r2, r3
 801629c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80162a0:	4413      	add	r3, r2
 80162a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80162a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162aa:	8bfb      	ldrh	r3, [r7, #30]
 80162ac:	4413      	add	r3, r2
 80162ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80162b2:	e0dc      	b.n	801646e <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	f000 80d7 	beq.w	801646e <tcp_write+0x47a>
 80162c0:	4b03      	ldr	r3, [pc, #12]	; (80162d0 <tcp_write+0x2dc>)
 80162c2:	f240 224a 	movw	r2, #586	; 0x24a
 80162c6:	490a      	ldr	r1, [pc, #40]	; (80162f0 <tcp_write+0x2fc>)
 80162c8:	4803      	ldr	r0, [pc, #12]	; (80162d8 <tcp_write+0x2e4>)
 80162ca:	f002 fe3f 	bl	8018f4c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80162ce:	e0ce      	b.n	801646e <tcp_write+0x47a>
 80162d0:	0801e024 	.word	0x0801e024
 80162d4:	0801e208 	.word	0x0801e208
 80162d8:	0801e0bc 	.word	0x0801e0bc
 80162dc:	0801e220 	.word	0x0801e220
 80162e0:	0801e254 	.word	0x0801e254
 80162e4:	0801e26c 	.word	0x0801e26c
 80162e8:	0801e28c 	.word	0x0801e28c
 80162ec:	0801e2ac 	.word	0x0801e2ac
 80162f0:	0801e2d8 	.word	0x0801e2d8
    struct pbuf *p;
    u16_t left = len - pos;
 80162f4:	88fa      	ldrh	r2, [r7, #6]
 80162f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162fa:	1ad3      	subs	r3, r2, r3
 80162fc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80162fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016302:	b29b      	uxth	r3, r3
 8016304:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016306:	1ad3      	subs	r3, r2, r3
 8016308:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801630a:	8b7a      	ldrh	r2, [r7, #26]
 801630c:	8bbb      	ldrh	r3, [r7, #28]
 801630e:	4293      	cmp	r3, r2
 8016310:	bf28      	it	cs
 8016312:	4613      	movcs	r3, r2
 8016314:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016316:	797b      	ldrb	r3, [r7, #5]
 8016318:	f003 0301 	and.w	r3, r3, #1
 801631c:	2b00      	cmp	r3, #0
 801631e:	d036      	beq.n	801638e <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016320:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016324:	b29a      	uxth	r2, r3
 8016326:	8b3b      	ldrh	r3, [r7, #24]
 8016328:	4413      	add	r3, r2
 801632a:	b299      	uxth	r1, r3
 801632c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801632e:	2b00      	cmp	r3, #0
 8016330:	bf0c      	ite	eq
 8016332:	2301      	moveq	r3, #1
 8016334:	2300      	movne	r3, #0
 8016336:	b2db      	uxtb	r3, r3
 8016338:	f107 0012 	add.w	r0, r7, #18
 801633c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801633e:	9302      	str	r3, [sp, #8]
 8016340:	797b      	ldrb	r3, [r7, #5]
 8016342:	9301      	str	r3, [sp, #4]
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	9300      	str	r3, [sp, #0]
 8016348:	4603      	mov	r3, r0
 801634a:	2036      	movs	r0, #54	; 0x36
 801634c:	f7ff fd5e 	bl	8015e0c <tcp_pbuf_prealloc>
 8016350:	6338      	str	r0, [r7, #48]	; 0x30
 8016352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016354:	2b00      	cmp	r3, #0
 8016356:	f000 8178 	beq.w	801664a <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801635a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801635c:	895b      	ldrh	r3, [r3, #10]
 801635e:	8b3a      	ldrh	r2, [r7, #24]
 8016360:	429a      	cmp	r2, r3
 8016362:	d906      	bls.n	8016372 <tcp_write+0x37e>
 8016364:	4b8c      	ldr	r3, [pc, #560]	; (8016598 <tcp_write+0x5a4>)
 8016366:	f240 2266 	movw	r2, #614	; 0x266
 801636a:	498c      	ldr	r1, [pc, #560]	; (801659c <tcp_write+0x5a8>)
 801636c:	488c      	ldr	r0, [pc, #560]	; (80165a0 <tcp_write+0x5ac>)
 801636e:	f002 fded 	bl	8018f4c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016374:	685a      	ldr	r2, [r3, #4]
 8016376:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801637a:	18d0      	adds	r0, r2, r3
 801637c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016380:	68ba      	ldr	r2, [r7, #8]
 8016382:	4413      	add	r3, r2
 8016384:	8b3a      	ldrh	r2, [r7, #24]
 8016386:	4619      	mov	r1, r3
 8016388:	f002 fdb0 	bl	8018eec <memcpy>
 801638c:	e02f      	b.n	80163ee <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801638e:	8a7b      	ldrh	r3, [r7, #18]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d006      	beq.n	80163a2 <tcp_write+0x3ae>
 8016394:	4b80      	ldr	r3, [pc, #512]	; (8016598 <tcp_write+0x5a4>)
 8016396:	f240 2271 	movw	r2, #625	; 0x271
 801639a:	4982      	ldr	r1, [pc, #520]	; (80165a4 <tcp_write+0x5b0>)
 801639c:	4880      	ldr	r0, [pc, #512]	; (80165a0 <tcp_write+0x5ac>)
 801639e:	f002 fdd5 	bl	8018f4c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80163a2:	8b3b      	ldrh	r3, [r7, #24]
 80163a4:	2201      	movs	r2, #1
 80163a6:	4619      	mov	r1, r3
 80163a8:	2036      	movs	r0, #54	; 0x36
 80163aa:	f7fa fed9 	bl	8011160 <pbuf_alloc>
 80163ae:	6178      	str	r0, [r7, #20]
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	f000 814b 	beq.w	801664e <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80163b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163bc:	68ba      	ldr	r2, [r7, #8]
 80163be:	441a      	add	r2, r3
 80163c0:	697b      	ldr	r3, [r7, #20]
 80163c2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80163c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80163c8:	b29b      	uxth	r3, r3
 80163ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80163ce:	4619      	mov	r1, r3
 80163d0:	2036      	movs	r0, #54	; 0x36
 80163d2:	f7fa fec5 	bl	8011160 <pbuf_alloc>
 80163d6:	6338      	str	r0, [r7, #48]	; 0x30
 80163d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d103      	bne.n	80163e6 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80163de:	6978      	ldr	r0, [r7, #20]
 80163e0:	f7fb f9d2 	bl	8011788 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80163e4:	e136      	b.n	8016654 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80163e6:	6979      	ldr	r1, [r7, #20]
 80163e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163ea:	f7fb fa9b 	bl	8011924 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80163ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80163f0:	f7fb fa58 	bl	80118a4 <pbuf_clen>
 80163f4:	4603      	mov	r3, r0
 80163f6:	461a      	mov	r2, r3
 80163f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80163fc:	4413      	add	r3, r2
 80163fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016402:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016406:	2b08      	cmp	r3, #8
 8016408:	d903      	bls.n	8016412 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801640a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801640c:	f7fb f9bc 	bl	8011788 <pbuf_free>
      goto memerr;
 8016410:	e120      	b.n	8016654 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016416:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801641a:	441a      	add	r2, r3
 801641c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016420:	9300      	str	r3, [sp, #0]
 8016422:	4613      	mov	r3, r2
 8016424:	2200      	movs	r2, #0
 8016426:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016428:	68f8      	ldr	r0, [r7, #12]
 801642a:	f7ff fc51 	bl	8015cd0 <tcp_create_segment>
 801642e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016432:	2b00      	cmp	r3, #0
 8016434:	f000 810d 	beq.w	8016652 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016438:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801643a:	2b00      	cmp	r3, #0
 801643c:	d102      	bne.n	8016444 <tcp_write+0x450>
      queue = seg;
 801643e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016440:	647b      	str	r3, [r7, #68]	; 0x44
 8016442:	e00c      	b.n	801645e <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016444:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016446:	2b00      	cmp	r3, #0
 8016448:	d106      	bne.n	8016458 <tcp_write+0x464>
 801644a:	4b53      	ldr	r3, [pc, #332]	; (8016598 <tcp_write+0x5a4>)
 801644c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016450:	4955      	ldr	r1, [pc, #340]	; (80165a8 <tcp_write+0x5b4>)
 8016452:	4853      	ldr	r0, [pc, #332]	; (80165a0 <tcp_write+0x5ac>)
 8016454:	f002 fd7a 	bl	8018f4c <iprintf>
      prev_seg->next = seg;
 8016458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801645a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801645c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801645e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016460:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8016462:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016466:	8b3b      	ldrh	r3, [r7, #24]
 8016468:	4413      	add	r3, r2
 801646a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801646e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016472:	88fb      	ldrh	r3, [r7, #6]
 8016474:	429a      	cmp	r2, r3
 8016476:	f4ff af3d 	bcc.w	80162f4 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801647a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801647c:	2b00      	cmp	r3, #0
 801647e:	d02c      	beq.n	80164da <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016482:	685b      	ldr	r3, [r3, #4]
 8016484:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016486:	e01e      	b.n	80164c6 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801648a:	891a      	ldrh	r2, [r3, #8]
 801648c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801648e:	4413      	add	r3, r2
 8016490:	b29a      	uxth	r2, r3
 8016492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016494:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016498:	681b      	ldr	r3, [r3, #0]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d110      	bne.n	80164c0 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801649e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164a0:	685b      	ldr	r3, [r3, #4]
 80164a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164a4:	8952      	ldrh	r2, [r2, #10]
 80164a6:	4413      	add	r3, r2
 80164a8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80164aa:	68b9      	ldr	r1, [r7, #8]
 80164ac:	4618      	mov	r0, r3
 80164ae:	f002 fd1d 	bl	8018eec <memcpy>
        p->len += oversize_used;
 80164b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164b4:	895a      	ldrh	r2, [r3, #10]
 80164b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164b8:	4413      	add	r3, r2
 80164ba:	b29a      	uxth	r2, r3
 80164bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164be:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80164c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d1dd      	bne.n	8016488 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80164cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164ce:	891a      	ldrh	r2, [r3, #8]
 80164d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164d2:	4413      	add	r3, r2
 80164d4:	b29a      	uxth	r2, r3
 80164d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164d8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80164da:	8a7a      	ldrh	r2, [r7, #18]
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80164e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d018      	beq.n	801651a <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80164e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d106      	bne.n	80164fc <tcp_write+0x508>
 80164ee:	4b2a      	ldr	r3, [pc, #168]	; (8016598 <tcp_write+0x5a4>)
 80164f0:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80164f4:	492d      	ldr	r1, [pc, #180]	; (80165ac <tcp_write+0x5b8>)
 80164f6:	482a      	ldr	r0, [pc, #168]	; (80165a0 <tcp_write+0x5ac>)
 80164f8:	f002 fd28 	bl	8018f4c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80164fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164fe:	685b      	ldr	r3, [r3, #4]
 8016500:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016502:	4618      	mov	r0, r3
 8016504:	f7fb fa0e 	bl	8011924 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801650a:	891a      	ldrh	r2, [r3, #8]
 801650c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801650e:	891b      	ldrh	r3, [r3, #8]
 8016510:	4413      	add	r3, r2
 8016512:	b29a      	uxth	r2, r3
 8016514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016516:	811a      	strh	r2, [r3, #8]
 8016518:	e037      	b.n	801658a <tcp_write+0x596>
  } else if (extendlen > 0) {
 801651a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801651c:	2b00      	cmp	r3, #0
 801651e:	d034      	beq.n	801658a <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016522:	2b00      	cmp	r3, #0
 8016524:	d003      	beq.n	801652e <tcp_write+0x53a>
 8016526:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016528:	685b      	ldr	r3, [r3, #4]
 801652a:	2b00      	cmp	r3, #0
 801652c:	d106      	bne.n	801653c <tcp_write+0x548>
 801652e:	4b1a      	ldr	r3, [pc, #104]	; (8016598 <tcp_write+0x5a4>)
 8016530:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016534:	491e      	ldr	r1, [pc, #120]	; (80165b0 <tcp_write+0x5bc>)
 8016536:	481a      	ldr	r0, [pc, #104]	; (80165a0 <tcp_write+0x5ac>)
 8016538:	f002 fd08 	bl	8018f4c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801653c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801653e:	685b      	ldr	r3, [r3, #4]
 8016540:	62bb      	str	r3, [r7, #40]	; 0x28
 8016542:	e009      	b.n	8016558 <tcp_write+0x564>
      p->tot_len += extendlen;
 8016544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016546:	891a      	ldrh	r2, [r3, #8]
 8016548:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801654a:	4413      	add	r3, r2
 801654c:	b29a      	uxth	r2, r3
 801654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016550:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	62bb      	str	r3, [r7, #40]	; 0x28
 8016558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	2b00      	cmp	r3, #0
 801655e:	d1f1      	bne.n	8016544 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8016560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016562:	891a      	ldrh	r2, [r3, #8]
 8016564:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016566:	4413      	add	r3, r2
 8016568:	b29a      	uxth	r2, r3
 801656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801656c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016570:	895a      	ldrh	r2, [r3, #10]
 8016572:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016574:	4413      	add	r3, r2
 8016576:	b29a      	uxth	r2, r3
 8016578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801657a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801657c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801657e:	891a      	ldrh	r2, [r3, #8]
 8016580:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016582:	4413      	add	r3, r2
 8016584:	b29a      	uxth	r2, r3
 8016586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016588:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801658a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801658c:	2b00      	cmp	r3, #0
 801658e:	d111      	bne.n	80165b4 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016594:	66da      	str	r2, [r3, #108]	; 0x6c
 8016596:	e010      	b.n	80165ba <tcp_write+0x5c6>
 8016598:	0801e024 	.word	0x0801e024
 801659c:	0801e308 	.word	0x0801e308
 80165a0:	0801e0bc 	.word	0x0801e0bc
 80165a4:	0801e348 	.word	0x0801e348
 80165a8:	0801e358 	.word	0x0801e358
 80165ac:	0801e36c 	.word	0x0801e36c
 80165b0:	0801e3a4 	.word	0x0801e3a4
  } else {
    last_unsent->next = queue;
 80165b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80165b8:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80165be:	88fb      	ldrh	r3, [r7, #6]
 80165c0:	441a      	add	r2, r3
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80165c6:	68fb      	ldr	r3, [r7, #12]
 80165c8:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80165cc:	88fb      	ldrh	r3, [r7, #6]
 80165ce:	1ad3      	subs	r3, r2, r3
 80165d0:	b29a      	uxth	r2, r3
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80165de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80165e2:	68fb      	ldr	r3, [r7, #12]
 80165e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d00e      	beq.n	801660a <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80165ec:	68fb      	ldr	r3, [r7, #12]
 80165ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d10a      	bne.n	801660a <tcp_write+0x616>
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80165f8:	2b00      	cmp	r3, #0
 80165fa:	d106      	bne.n	801660a <tcp_write+0x616>
 80165fc:	4b2c      	ldr	r3, [pc, #176]	; (80166b0 <tcp_write+0x6bc>)
 80165fe:	f240 3212 	movw	r2, #786	; 0x312
 8016602:	492c      	ldr	r1, [pc, #176]	; (80166b4 <tcp_write+0x6c0>)
 8016604:	482c      	ldr	r0, [pc, #176]	; (80166b8 <tcp_write+0x6c4>)
 8016606:	f002 fca1 	bl	8018f4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801660a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801660c:	2b00      	cmp	r3, #0
 801660e:	d016      	beq.n	801663e <tcp_write+0x64a>
 8016610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016612:	68db      	ldr	r3, [r3, #12]
 8016614:	2b00      	cmp	r3, #0
 8016616:	d012      	beq.n	801663e <tcp_write+0x64a>
 8016618:	797b      	ldrb	r3, [r7, #5]
 801661a:	f003 0302 	and.w	r3, r3, #2
 801661e:	2b00      	cmp	r3, #0
 8016620:	d10d      	bne.n	801663e <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8016622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016624:	68db      	ldr	r3, [r3, #12]
 8016626:	899b      	ldrh	r3, [r3, #12]
 8016628:	b29c      	uxth	r4, r3
 801662a:	2008      	movs	r0, #8
 801662c:	f7f8 fcc8 	bl	800efc0 <lwip_htons>
 8016630:	4603      	mov	r3, r0
 8016632:	461a      	mov	r2, r3
 8016634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016636:	68db      	ldr	r3, [r3, #12]
 8016638:	4322      	orrs	r2, r4
 801663a:	b292      	uxth	r2, r2
 801663c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801663e:	2300      	movs	r3, #0
 8016640:	e031      	b.n	80166a6 <tcp_write+0x6b2>
          goto memerr;
 8016642:	bf00      	nop
 8016644:	e006      	b.n	8016654 <tcp_write+0x660>
            goto memerr;
 8016646:	bf00      	nop
 8016648:	e004      	b.n	8016654 <tcp_write+0x660>
        goto memerr;
 801664a:	bf00      	nop
 801664c:	e002      	b.n	8016654 <tcp_write+0x660>
        goto memerr;
 801664e:	bf00      	nop
 8016650:	e000      	b.n	8016654 <tcp_write+0x660>
      goto memerr;
 8016652:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	8b5b      	ldrh	r3, [r3, #26]
 8016658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801665c:	b29a      	uxth	r2, r3
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8016662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016664:	2b00      	cmp	r3, #0
 8016666:	d002      	beq.n	801666e <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016668:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801666a:	f7fb f88d 	bl	8011788 <pbuf_free>
  }
  if (queue != NULL) {
 801666e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016670:	2b00      	cmp	r3, #0
 8016672:	d002      	beq.n	801667a <tcp_write+0x686>
    tcp_segs_free(queue);
 8016674:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016676:	f7fc ff7d 	bl	8013574 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801667a:	68fb      	ldr	r3, [r7, #12]
 801667c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016680:	2b00      	cmp	r3, #0
 8016682:	d00e      	beq.n	80166a2 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016688:	2b00      	cmp	r3, #0
 801668a:	d10a      	bne.n	80166a2 <tcp_write+0x6ae>
 801668c:	68fb      	ldr	r3, [r7, #12]
 801668e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016690:	2b00      	cmp	r3, #0
 8016692:	d106      	bne.n	80166a2 <tcp_write+0x6ae>
 8016694:	4b06      	ldr	r3, [pc, #24]	; (80166b0 <tcp_write+0x6bc>)
 8016696:	f240 3227 	movw	r2, #807	; 0x327
 801669a:	4906      	ldr	r1, [pc, #24]	; (80166b4 <tcp_write+0x6c0>)
 801669c:	4806      	ldr	r0, [pc, #24]	; (80166b8 <tcp_write+0x6c4>)
 801669e:	f002 fc55 	bl	8018f4c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80166a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80166a6:	4618      	mov	r0, r3
 80166a8:	375c      	adds	r7, #92	; 0x5c
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bd90      	pop	{r4, r7, pc}
 80166ae:	bf00      	nop
 80166b0:	0801e024 	.word	0x0801e024
 80166b4:	0801e3dc 	.word	0x0801e3dc
 80166b8:	0801e0bc 	.word	0x0801e0bc

080166bc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80166bc:	b590      	push	{r4, r7, lr}
 80166be:	b08b      	sub	sp, #44	; 0x2c
 80166c0:	af02      	add	r7, sp, #8
 80166c2:	6078      	str	r0, [r7, #4]
 80166c4:	460b      	mov	r3, r1
 80166c6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80166c8:	2300      	movs	r3, #0
 80166ca:	61fb      	str	r3, [r7, #28]
 80166cc:	2300      	movs	r3, #0
 80166ce:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80166d0:	2300      	movs	r3, #0
 80166d2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d106      	bne.n	80166e8 <tcp_split_unsent_seg+0x2c>
 80166da:	4b95      	ldr	r3, [pc, #596]	; (8016930 <tcp_split_unsent_seg+0x274>)
 80166dc:	f240 324b 	movw	r2, #843	; 0x34b
 80166e0:	4994      	ldr	r1, [pc, #592]	; (8016934 <tcp_split_unsent_seg+0x278>)
 80166e2:	4895      	ldr	r0, [pc, #596]	; (8016938 <tcp_split_unsent_seg+0x27c>)
 80166e4:	f002 fc32 	bl	8018f4c <iprintf>

  useg = pcb->unsent;
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166ec:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80166ee:	697b      	ldr	r3, [r7, #20]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d102      	bne.n	80166fa <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80166f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166f8:	e116      	b.n	8016928 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80166fa:	887b      	ldrh	r3, [r7, #2]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d109      	bne.n	8016714 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016700:	4b8b      	ldr	r3, [pc, #556]	; (8016930 <tcp_split_unsent_seg+0x274>)
 8016702:	f240 3253 	movw	r2, #851	; 0x353
 8016706:	498d      	ldr	r1, [pc, #564]	; (801693c <tcp_split_unsent_seg+0x280>)
 8016708:	488b      	ldr	r0, [pc, #556]	; (8016938 <tcp_split_unsent_seg+0x27c>)
 801670a:	f002 fc1f 	bl	8018f4c <iprintf>
    return ERR_VAL;
 801670e:	f06f 0305 	mvn.w	r3, #5
 8016712:	e109      	b.n	8016928 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016714:	697b      	ldr	r3, [r7, #20]
 8016716:	891b      	ldrh	r3, [r3, #8]
 8016718:	887a      	ldrh	r2, [r7, #2]
 801671a:	429a      	cmp	r2, r3
 801671c:	d301      	bcc.n	8016722 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801671e:	2300      	movs	r3, #0
 8016720:	e102      	b.n	8016928 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016726:	887a      	ldrh	r2, [r7, #2]
 8016728:	429a      	cmp	r2, r3
 801672a:	d906      	bls.n	801673a <tcp_split_unsent_seg+0x7e>
 801672c:	4b80      	ldr	r3, [pc, #512]	; (8016930 <tcp_split_unsent_seg+0x274>)
 801672e:	f240 325b 	movw	r2, #859	; 0x35b
 8016732:	4983      	ldr	r1, [pc, #524]	; (8016940 <tcp_split_unsent_seg+0x284>)
 8016734:	4880      	ldr	r0, [pc, #512]	; (8016938 <tcp_split_unsent_seg+0x27c>)
 8016736:	f002 fc09 	bl	8018f4c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801673a:	697b      	ldr	r3, [r7, #20]
 801673c:	891b      	ldrh	r3, [r3, #8]
 801673e:	2b00      	cmp	r3, #0
 8016740:	d106      	bne.n	8016750 <tcp_split_unsent_seg+0x94>
 8016742:	4b7b      	ldr	r3, [pc, #492]	; (8016930 <tcp_split_unsent_seg+0x274>)
 8016744:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8016748:	497e      	ldr	r1, [pc, #504]	; (8016944 <tcp_split_unsent_seg+0x288>)
 801674a:	487b      	ldr	r0, [pc, #492]	; (8016938 <tcp_split_unsent_seg+0x27c>)
 801674c:	f002 fbfe 	bl	8018f4c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016750:	697b      	ldr	r3, [r7, #20]
 8016752:	7a9b      	ldrb	r3, [r3, #10]
 8016754:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016756:	7bfb      	ldrb	r3, [r7, #15]
 8016758:	009b      	lsls	r3, r3, #2
 801675a:	b2db      	uxtb	r3, r3
 801675c:	f003 0304 	and.w	r3, r3, #4
 8016760:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016762:	697b      	ldr	r3, [r7, #20]
 8016764:	891a      	ldrh	r2, [r3, #8]
 8016766:	887b      	ldrh	r3, [r7, #2]
 8016768:	1ad3      	subs	r3, r2, r3
 801676a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801676c:	7bbb      	ldrb	r3, [r7, #14]
 801676e:	b29a      	uxth	r2, r3
 8016770:	89bb      	ldrh	r3, [r7, #12]
 8016772:	4413      	add	r3, r2
 8016774:	b29b      	uxth	r3, r3
 8016776:	f44f 7220 	mov.w	r2, #640	; 0x280
 801677a:	4619      	mov	r1, r3
 801677c:	2036      	movs	r0, #54	; 0x36
 801677e:	f7fa fcef 	bl	8011160 <pbuf_alloc>
 8016782:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016784:	693b      	ldr	r3, [r7, #16]
 8016786:	2b00      	cmp	r3, #0
 8016788:	f000 80b7 	beq.w	80168fa <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801678c:	697b      	ldr	r3, [r7, #20]
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	891a      	ldrh	r2, [r3, #8]
 8016792:	697b      	ldr	r3, [r7, #20]
 8016794:	891b      	ldrh	r3, [r3, #8]
 8016796:	1ad3      	subs	r3, r2, r3
 8016798:	b29a      	uxth	r2, r3
 801679a:	887b      	ldrh	r3, [r7, #2]
 801679c:	4413      	add	r3, r2
 801679e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80167a0:	697b      	ldr	r3, [r7, #20]
 80167a2:	6858      	ldr	r0, [r3, #4]
 80167a4:	693b      	ldr	r3, [r7, #16]
 80167a6:	685a      	ldr	r2, [r3, #4]
 80167a8:	7bbb      	ldrb	r3, [r7, #14]
 80167aa:	18d1      	adds	r1, r2, r3
 80167ac:	897b      	ldrh	r3, [r7, #10]
 80167ae:	89ba      	ldrh	r2, [r7, #12]
 80167b0:	f7fb f9f0 	bl	8011b94 <pbuf_copy_partial>
 80167b4:	4603      	mov	r3, r0
 80167b6:	461a      	mov	r2, r3
 80167b8:	89bb      	ldrh	r3, [r7, #12]
 80167ba:	4293      	cmp	r3, r2
 80167bc:	f040 809f 	bne.w	80168fe <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80167c0:	697b      	ldr	r3, [r7, #20]
 80167c2:	68db      	ldr	r3, [r3, #12]
 80167c4:	899b      	ldrh	r3, [r3, #12]
 80167c6:	b29b      	uxth	r3, r3
 80167c8:	4618      	mov	r0, r3
 80167ca:	f7f8 fbf9 	bl	800efc0 <lwip_htons>
 80167ce:	4603      	mov	r3, r0
 80167d0:	b2db      	uxtb	r3, r3
 80167d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80167d6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80167d8:	2300      	movs	r3, #0
 80167da:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80167dc:	7efb      	ldrb	r3, [r7, #27]
 80167de:	f003 0308 	and.w	r3, r3, #8
 80167e2:	2b00      	cmp	r3, #0
 80167e4:	d007      	beq.n	80167f6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80167e6:	7efb      	ldrb	r3, [r7, #27]
 80167e8:	f023 0308 	bic.w	r3, r3, #8
 80167ec:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80167ee:	7ebb      	ldrb	r3, [r7, #26]
 80167f0:	f043 0308 	orr.w	r3, r3, #8
 80167f4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80167f6:	7efb      	ldrb	r3, [r7, #27]
 80167f8:	f003 0301 	and.w	r3, r3, #1
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d007      	beq.n	8016810 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016800:	7efb      	ldrb	r3, [r7, #27]
 8016802:	f023 0301 	bic.w	r3, r3, #1
 8016806:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016808:	7ebb      	ldrb	r3, [r7, #26]
 801680a:	f043 0301 	orr.w	r3, r3, #1
 801680e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016810:	697b      	ldr	r3, [r7, #20]
 8016812:	68db      	ldr	r3, [r3, #12]
 8016814:	685b      	ldr	r3, [r3, #4]
 8016816:	4618      	mov	r0, r3
 8016818:	f7f8 fbe7 	bl	800efea <lwip_htonl>
 801681c:	4602      	mov	r2, r0
 801681e:	887b      	ldrh	r3, [r7, #2]
 8016820:	18d1      	adds	r1, r2, r3
 8016822:	7eba      	ldrb	r2, [r7, #26]
 8016824:	7bfb      	ldrb	r3, [r7, #15]
 8016826:	9300      	str	r3, [sp, #0]
 8016828:	460b      	mov	r3, r1
 801682a:	6939      	ldr	r1, [r7, #16]
 801682c:	6878      	ldr	r0, [r7, #4]
 801682e:	f7ff fa4f 	bl	8015cd0 <tcp_create_segment>
 8016832:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016834:	69fb      	ldr	r3, [r7, #28]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d063      	beq.n	8016902 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801683a:	697b      	ldr	r3, [r7, #20]
 801683c:	685b      	ldr	r3, [r3, #4]
 801683e:	4618      	mov	r0, r3
 8016840:	f7fb f830 	bl	80118a4 <pbuf_clen>
 8016844:	4603      	mov	r3, r0
 8016846:	461a      	mov	r2, r3
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801684e:	1a9b      	subs	r3, r3, r2
 8016850:	b29a      	uxth	r2, r3
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016858:	697b      	ldr	r3, [r7, #20]
 801685a:	6858      	ldr	r0, [r3, #4]
 801685c:	697b      	ldr	r3, [r7, #20]
 801685e:	685b      	ldr	r3, [r3, #4]
 8016860:	891a      	ldrh	r2, [r3, #8]
 8016862:	89bb      	ldrh	r3, [r7, #12]
 8016864:	1ad3      	subs	r3, r2, r3
 8016866:	b29b      	uxth	r3, r3
 8016868:	4619      	mov	r1, r3
 801686a:	f7fa fdd5 	bl	8011418 <pbuf_realloc>
  useg->len -= remainder;
 801686e:	697b      	ldr	r3, [r7, #20]
 8016870:	891a      	ldrh	r2, [r3, #8]
 8016872:	89bb      	ldrh	r3, [r7, #12]
 8016874:	1ad3      	subs	r3, r2, r3
 8016876:	b29a      	uxth	r2, r3
 8016878:	697b      	ldr	r3, [r7, #20]
 801687a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801687c:	697b      	ldr	r3, [r7, #20]
 801687e:	68db      	ldr	r3, [r3, #12]
 8016880:	899b      	ldrh	r3, [r3, #12]
 8016882:	b29c      	uxth	r4, r3
 8016884:	7efb      	ldrb	r3, [r7, #27]
 8016886:	b29b      	uxth	r3, r3
 8016888:	4618      	mov	r0, r3
 801688a:	f7f8 fb99 	bl	800efc0 <lwip_htons>
 801688e:	4603      	mov	r3, r0
 8016890:	461a      	mov	r2, r3
 8016892:	697b      	ldr	r3, [r7, #20]
 8016894:	68db      	ldr	r3, [r3, #12]
 8016896:	4322      	orrs	r2, r4
 8016898:	b292      	uxth	r2, r2
 801689a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	685b      	ldr	r3, [r3, #4]
 80168a0:	4618      	mov	r0, r3
 80168a2:	f7fa ffff 	bl	80118a4 <pbuf_clen>
 80168a6:	4603      	mov	r3, r0
 80168a8:	461a      	mov	r2, r3
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80168b0:	4413      	add	r3, r2
 80168b2:	b29a      	uxth	r2, r3
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80168ba:	69fb      	ldr	r3, [r7, #28]
 80168bc:	685b      	ldr	r3, [r3, #4]
 80168be:	4618      	mov	r0, r3
 80168c0:	f7fa fff0 	bl	80118a4 <pbuf_clen>
 80168c4:	4603      	mov	r3, r0
 80168c6:	461a      	mov	r2, r3
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80168ce:	4413      	add	r3, r2
 80168d0:	b29a      	uxth	r2, r3
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80168d8:	697b      	ldr	r3, [r7, #20]
 80168da:	681a      	ldr	r2, [r3, #0]
 80168dc:	69fb      	ldr	r3, [r7, #28]
 80168de:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80168e0:	697b      	ldr	r3, [r7, #20]
 80168e2:	69fa      	ldr	r2, [r7, #28]
 80168e4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80168e6:	69fb      	ldr	r3, [r7, #28]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d103      	bne.n	80168f6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2200      	movs	r2, #0
 80168f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80168f6:	2300      	movs	r3, #0
 80168f8:	e016      	b.n	8016928 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80168fa:	bf00      	nop
 80168fc:	e002      	b.n	8016904 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80168fe:	bf00      	nop
 8016900:	e000      	b.n	8016904 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016902:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016904:	69fb      	ldr	r3, [r7, #28]
 8016906:	2b00      	cmp	r3, #0
 8016908:	d006      	beq.n	8016918 <tcp_split_unsent_seg+0x25c>
 801690a:	4b09      	ldr	r3, [pc, #36]	; (8016930 <tcp_split_unsent_seg+0x274>)
 801690c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016910:	490d      	ldr	r1, [pc, #52]	; (8016948 <tcp_split_unsent_seg+0x28c>)
 8016912:	4809      	ldr	r0, [pc, #36]	; (8016938 <tcp_split_unsent_seg+0x27c>)
 8016914:	f002 fb1a 	bl	8018f4c <iprintf>
  if (p != NULL) {
 8016918:	693b      	ldr	r3, [r7, #16]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d002      	beq.n	8016924 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801691e:	6938      	ldr	r0, [r7, #16]
 8016920:	f7fa ff32 	bl	8011788 <pbuf_free>
  }

  return ERR_MEM;
 8016924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016928:	4618      	mov	r0, r3
 801692a:	3724      	adds	r7, #36	; 0x24
 801692c:	46bd      	mov	sp, r7
 801692e:	bd90      	pop	{r4, r7, pc}
 8016930:	0801e024 	.word	0x0801e024
 8016934:	0801e3fc 	.word	0x0801e3fc
 8016938:	0801e0bc 	.word	0x0801e0bc
 801693c:	0801e420 	.word	0x0801e420
 8016940:	0801e444 	.word	0x0801e444
 8016944:	0801e454 	.word	0x0801e454
 8016948:	0801e464 	.word	0x0801e464

0801694c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801694c:	b590      	push	{r4, r7, lr}
 801694e:	b085      	sub	sp, #20
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d106      	bne.n	8016968 <tcp_send_fin+0x1c>
 801695a:	4b21      	ldr	r3, [pc, #132]	; (80169e0 <tcp_send_fin+0x94>)
 801695c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8016960:	4920      	ldr	r1, [pc, #128]	; (80169e4 <tcp_send_fin+0x98>)
 8016962:	4821      	ldr	r0, [pc, #132]	; (80169e8 <tcp_send_fin+0x9c>)
 8016964:	f002 faf2 	bl	8018f4c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801696c:	2b00      	cmp	r3, #0
 801696e:	d02e      	beq.n	80169ce <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016974:	60fb      	str	r3, [r7, #12]
 8016976:	e002      	b.n	801697e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801697e:	68fb      	ldr	r3, [r7, #12]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	2b00      	cmp	r3, #0
 8016984:	d1f8      	bne.n	8016978 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	68db      	ldr	r3, [r3, #12]
 801698a:	899b      	ldrh	r3, [r3, #12]
 801698c:	b29b      	uxth	r3, r3
 801698e:	4618      	mov	r0, r3
 8016990:	f7f8 fb16 	bl	800efc0 <lwip_htons>
 8016994:	4603      	mov	r3, r0
 8016996:	b2db      	uxtb	r3, r3
 8016998:	f003 0307 	and.w	r3, r3, #7
 801699c:	2b00      	cmp	r3, #0
 801699e:	d116      	bne.n	80169ce <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	68db      	ldr	r3, [r3, #12]
 80169a4:	899b      	ldrh	r3, [r3, #12]
 80169a6:	b29c      	uxth	r4, r3
 80169a8:	2001      	movs	r0, #1
 80169aa:	f7f8 fb09 	bl	800efc0 <lwip_htons>
 80169ae:	4603      	mov	r3, r0
 80169b0:	461a      	mov	r2, r3
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	68db      	ldr	r3, [r3, #12]
 80169b6:	4322      	orrs	r2, r4
 80169b8:	b292      	uxth	r2, r2
 80169ba:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	8b5b      	ldrh	r3, [r3, #26]
 80169c0:	f043 0320 	orr.w	r3, r3, #32
 80169c4:	b29a      	uxth	r2, r3
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80169ca:	2300      	movs	r3, #0
 80169cc:	e004      	b.n	80169d8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80169ce:	2101      	movs	r1, #1
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	f000 f80b 	bl	80169ec <tcp_enqueue_flags>
 80169d6:	4603      	mov	r3, r0
}
 80169d8:	4618      	mov	r0, r3
 80169da:	3714      	adds	r7, #20
 80169dc:	46bd      	mov	sp, r7
 80169de:	bd90      	pop	{r4, r7, pc}
 80169e0:	0801e024 	.word	0x0801e024
 80169e4:	0801e470 	.word	0x0801e470
 80169e8:	0801e0bc 	.word	0x0801e0bc

080169ec <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b08a      	sub	sp, #40	; 0x28
 80169f0:	af02      	add	r7, sp, #8
 80169f2:	6078      	str	r0, [r7, #4]
 80169f4:	460b      	mov	r3, r1
 80169f6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80169f8:	2300      	movs	r3, #0
 80169fa:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80169fc:	2300      	movs	r3, #0
 80169fe:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016a00:	78fb      	ldrb	r3, [r7, #3]
 8016a02:	f003 0303 	and.w	r3, r3, #3
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d106      	bne.n	8016a18 <tcp_enqueue_flags+0x2c>
 8016a0a:	4b67      	ldr	r3, [pc, #412]	; (8016ba8 <tcp_enqueue_flags+0x1bc>)
 8016a0c:	f240 4211 	movw	r2, #1041	; 0x411
 8016a10:	4966      	ldr	r1, [pc, #408]	; (8016bac <tcp_enqueue_flags+0x1c0>)
 8016a12:	4867      	ldr	r0, [pc, #412]	; (8016bb0 <tcp_enqueue_flags+0x1c4>)
 8016a14:	f002 fa9a 	bl	8018f4c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d106      	bne.n	8016a2c <tcp_enqueue_flags+0x40>
 8016a1e:	4b62      	ldr	r3, [pc, #392]	; (8016ba8 <tcp_enqueue_flags+0x1bc>)
 8016a20:	f240 4213 	movw	r2, #1043	; 0x413
 8016a24:	4963      	ldr	r1, [pc, #396]	; (8016bb4 <tcp_enqueue_flags+0x1c8>)
 8016a26:	4862      	ldr	r0, [pc, #392]	; (8016bb0 <tcp_enqueue_flags+0x1c4>)
 8016a28:	f002 fa90 	bl	8018f4c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016a2c:	78fb      	ldrb	r3, [r7, #3]
 8016a2e:	f003 0302 	and.w	r3, r3, #2
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d001      	beq.n	8016a3a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016a36:	2301      	movs	r3, #1
 8016a38:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016a3a:	7ffb      	ldrb	r3, [r7, #31]
 8016a3c:	009b      	lsls	r3, r3, #2
 8016a3e:	b2db      	uxtb	r3, r3
 8016a40:	f003 0304 	and.w	r3, r3, #4
 8016a44:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016a46:	7dfb      	ldrb	r3, [r7, #23]
 8016a48:	b29b      	uxth	r3, r3
 8016a4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016a4e:	4619      	mov	r1, r3
 8016a50:	2036      	movs	r0, #54	; 0x36
 8016a52:	f7fa fb85 	bl	8011160 <pbuf_alloc>
 8016a56:	6138      	str	r0, [r7, #16]
 8016a58:	693b      	ldr	r3, [r7, #16]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d109      	bne.n	8016a72 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	8b5b      	ldrh	r3, [r3, #26]
 8016a62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a66:	b29a      	uxth	r2, r3
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016a6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016a70:	e095      	b.n	8016b9e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016a72:	693b      	ldr	r3, [r7, #16]
 8016a74:	895a      	ldrh	r2, [r3, #10]
 8016a76:	7dfb      	ldrb	r3, [r7, #23]
 8016a78:	b29b      	uxth	r3, r3
 8016a7a:	429a      	cmp	r2, r3
 8016a7c:	d206      	bcs.n	8016a8c <tcp_enqueue_flags+0xa0>
 8016a7e:	4b4a      	ldr	r3, [pc, #296]	; (8016ba8 <tcp_enqueue_flags+0x1bc>)
 8016a80:	f240 4239 	movw	r2, #1081	; 0x439
 8016a84:	494c      	ldr	r1, [pc, #304]	; (8016bb8 <tcp_enqueue_flags+0x1cc>)
 8016a86:	484a      	ldr	r0, [pc, #296]	; (8016bb0 <tcp_enqueue_flags+0x1c4>)
 8016a88:	f002 fa60 	bl	8018f4c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016a90:	78fa      	ldrb	r2, [r7, #3]
 8016a92:	7ffb      	ldrb	r3, [r7, #31]
 8016a94:	9300      	str	r3, [sp, #0]
 8016a96:	460b      	mov	r3, r1
 8016a98:	6939      	ldr	r1, [r7, #16]
 8016a9a:	6878      	ldr	r0, [r7, #4]
 8016a9c:	f7ff f918 	bl	8015cd0 <tcp_create_segment>
 8016aa0:	60f8      	str	r0, [r7, #12]
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	2b00      	cmp	r3, #0
 8016aa6:	d109      	bne.n	8016abc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	8b5b      	ldrh	r3, [r3, #26]
 8016aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ab0:	b29a      	uxth	r2, r3
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016ab6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016aba:	e070      	b.n	8016b9e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016abc:	68fb      	ldr	r3, [r7, #12]
 8016abe:	68db      	ldr	r3, [r3, #12]
 8016ac0:	f003 0303 	and.w	r3, r3, #3
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d006      	beq.n	8016ad6 <tcp_enqueue_flags+0xea>
 8016ac8:	4b37      	ldr	r3, [pc, #220]	; (8016ba8 <tcp_enqueue_flags+0x1bc>)
 8016aca:	f240 4242 	movw	r2, #1090	; 0x442
 8016ace:	493b      	ldr	r1, [pc, #236]	; (8016bbc <tcp_enqueue_flags+0x1d0>)
 8016ad0:	4837      	ldr	r0, [pc, #220]	; (8016bb0 <tcp_enqueue_flags+0x1c4>)
 8016ad2:	f002 fa3b 	bl	8018f4c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016ad6:	68fb      	ldr	r3, [r7, #12]
 8016ad8:	891b      	ldrh	r3, [r3, #8]
 8016ada:	2b00      	cmp	r3, #0
 8016adc:	d006      	beq.n	8016aec <tcp_enqueue_flags+0x100>
 8016ade:	4b32      	ldr	r3, [pc, #200]	; (8016ba8 <tcp_enqueue_flags+0x1bc>)
 8016ae0:	f240 4243 	movw	r2, #1091	; 0x443
 8016ae4:	4936      	ldr	r1, [pc, #216]	; (8016bc0 <tcp_enqueue_flags+0x1d4>)
 8016ae6:	4832      	ldr	r0, [pc, #200]	; (8016bb0 <tcp_enqueue_flags+0x1c4>)
 8016ae8:	f002 fa30 	bl	8018f4c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d103      	bne.n	8016afc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	68fa      	ldr	r2, [r7, #12]
 8016af8:	66da      	str	r2, [r3, #108]	; 0x6c
 8016afa:	e00d      	b.n	8016b18 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b00:	61bb      	str	r3, [r7, #24]
 8016b02:	e002      	b.n	8016b0a <tcp_enqueue_flags+0x11e>
 8016b04:	69bb      	ldr	r3, [r7, #24]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	61bb      	str	r3, [r7, #24]
 8016b0a:	69bb      	ldr	r3, [r7, #24]
 8016b0c:	681b      	ldr	r3, [r3, #0]
 8016b0e:	2b00      	cmp	r3, #0
 8016b10:	d1f8      	bne.n	8016b04 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016b12:	69bb      	ldr	r3, [r7, #24]
 8016b14:	68fa      	ldr	r2, [r7, #12]
 8016b16:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016b20:	78fb      	ldrb	r3, [r7, #3]
 8016b22:	f003 0302 	and.w	r3, r3, #2
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d104      	bne.n	8016b34 <tcp_enqueue_flags+0x148>
 8016b2a:	78fb      	ldrb	r3, [r7, #3]
 8016b2c:	f003 0301 	and.w	r3, r3, #1
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d004      	beq.n	8016b3e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b38:	1c5a      	adds	r2, r3, #1
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016b3e:	78fb      	ldrb	r3, [r7, #3]
 8016b40:	f003 0301 	and.w	r3, r3, #1
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d006      	beq.n	8016b56 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	8b5b      	ldrh	r3, [r3, #26]
 8016b4c:	f043 0320 	orr.w	r3, r3, #32
 8016b50:	b29a      	uxth	r2, r3
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016b56:	68fb      	ldr	r3, [r7, #12]
 8016b58:	685b      	ldr	r3, [r3, #4]
 8016b5a:	4618      	mov	r0, r3
 8016b5c:	f7fa fea2 	bl	80118a4 <pbuf_clen>
 8016b60:	4603      	mov	r3, r0
 8016b62:	461a      	mov	r2, r3
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016b6a:	4413      	add	r3, r2
 8016b6c:	b29a      	uxth	r2, r3
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d00e      	beq.n	8016b9c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016b7e:	687b      	ldr	r3, [r7, #4]
 8016b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d10a      	bne.n	8016b9c <tcp_enqueue_flags+0x1b0>
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d106      	bne.n	8016b9c <tcp_enqueue_flags+0x1b0>
 8016b8e:	4b06      	ldr	r3, [pc, #24]	; (8016ba8 <tcp_enqueue_flags+0x1bc>)
 8016b90:	f240 4265 	movw	r2, #1125	; 0x465
 8016b94:	490b      	ldr	r1, [pc, #44]	; (8016bc4 <tcp_enqueue_flags+0x1d8>)
 8016b96:	4806      	ldr	r0, [pc, #24]	; (8016bb0 <tcp_enqueue_flags+0x1c4>)
 8016b98:	f002 f9d8 	bl	8018f4c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016b9c:	2300      	movs	r3, #0
}
 8016b9e:	4618      	mov	r0, r3
 8016ba0:	3720      	adds	r7, #32
 8016ba2:	46bd      	mov	sp, r7
 8016ba4:	bd80      	pop	{r7, pc}
 8016ba6:	bf00      	nop
 8016ba8:	0801e024 	.word	0x0801e024
 8016bac:	0801e48c 	.word	0x0801e48c
 8016bb0:	0801e0bc 	.word	0x0801e0bc
 8016bb4:	0801e4e4 	.word	0x0801e4e4
 8016bb8:	0801e504 	.word	0x0801e504
 8016bbc:	0801e540 	.word	0x0801e540
 8016bc0:	0801e558 	.word	0x0801e558
 8016bc4:	0801e584 	.word	0x0801e584

08016bc8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016bc8:	b5b0      	push	{r4, r5, r7, lr}
 8016bca:	b08a      	sub	sp, #40	; 0x28
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d106      	bne.n	8016be4 <tcp_output+0x1c>
 8016bd6:	4b9e      	ldr	r3, [pc, #632]	; (8016e50 <tcp_output+0x288>)
 8016bd8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016bdc:	499d      	ldr	r1, [pc, #628]	; (8016e54 <tcp_output+0x28c>)
 8016bde:	489e      	ldr	r0, [pc, #632]	; (8016e58 <tcp_output+0x290>)
 8016be0:	f002 f9b4 	bl	8018f4c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	7d1b      	ldrb	r3, [r3, #20]
 8016be8:	2b01      	cmp	r3, #1
 8016bea:	d106      	bne.n	8016bfa <tcp_output+0x32>
 8016bec:	4b98      	ldr	r3, [pc, #608]	; (8016e50 <tcp_output+0x288>)
 8016bee:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016bf2:	499a      	ldr	r1, [pc, #616]	; (8016e5c <tcp_output+0x294>)
 8016bf4:	4898      	ldr	r0, [pc, #608]	; (8016e58 <tcp_output+0x290>)
 8016bf6:	f002 f9a9 	bl	8018f4c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016bfa:	4b99      	ldr	r3, [pc, #612]	; (8016e60 <tcp_output+0x298>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	687a      	ldr	r2, [r7, #4]
 8016c00:	429a      	cmp	r2, r3
 8016c02:	d101      	bne.n	8016c08 <tcp_output+0x40>
    return ERR_OK;
 8016c04:	2300      	movs	r3, #0
 8016c06:	e1ce      	b.n	8016fa6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016c08:	687b      	ldr	r3, [r7, #4]
 8016c0a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c14:	4293      	cmp	r3, r2
 8016c16:	bf28      	it	cs
 8016c18:	4613      	movcs	r3, r2
 8016c1a:	b29b      	uxth	r3, r3
 8016c1c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c22:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d10b      	bne.n	8016c42 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	8b5b      	ldrh	r3, [r3, #26]
 8016c2e:	f003 0302 	and.w	r3, r3, #2
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	f000 81aa 	beq.w	8016f8c <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016c38:	6878      	ldr	r0, [r7, #4]
 8016c3a:	f000 fdcb 	bl	80177d4 <tcp_send_empty_ack>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	e1b1      	b.n	8016fa6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016c42:	6879      	ldr	r1, [r7, #4]
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	3304      	adds	r3, #4
 8016c48:	461a      	mov	r2, r3
 8016c4a:	6878      	ldr	r0, [r7, #4]
 8016c4c:	f7ff f824 	bl	8015c98 <tcp_route>
 8016c50:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016c52:	697b      	ldr	r3, [r7, #20]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d102      	bne.n	8016c5e <tcp_output+0x96>
    return ERR_RTE;
 8016c58:	f06f 0303 	mvn.w	r3, #3
 8016c5c:	e1a3      	b.n	8016fa6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d003      	beq.n	8016c6c <tcp_output+0xa4>
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d111      	bne.n	8016c90 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	d002      	beq.n	8016c78 <tcp_output+0xb0>
 8016c72:	697b      	ldr	r3, [r7, #20]
 8016c74:	3304      	adds	r3, #4
 8016c76:	e000      	b.n	8016c7a <tcp_output+0xb2>
 8016c78:	2300      	movs	r3, #0
 8016c7a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016c7c:	693b      	ldr	r3, [r7, #16]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d102      	bne.n	8016c88 <tcp_output+0xc0>
      return ERR_RTE;
 8016c82:	f06f 0303 	mvn.w	r3, #3
 8016c86:	e18e      	b.n	8016fa6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016c88:	693b      	ldr	r3, [r7, #16]
 8016c8a:	681a      	ldr	r2, [r3, #0]
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c92:	68db      	ldr	r3, [r3, #12]
 8016c94:	685b      	ldr	r3, [r3, #4]
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7f8 f9a7 	bl	800efea <lwip_htonl>
 8016c9c:	4602      	mov	r2, r0
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ca2:	1ad3      	subs	r3, r2, r3
 8016ca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ca6:	8912      	ldrh	r2, [r2, #8]
 8016ca8:	4413      	add	r3, r2
 8016caa:	69ba      	ldr	r2, [r7, #24]
 8016cac:	429a      	cmp	r2, r3
 8016cae:	d227      	bcs.n	8016d00 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016cb6:	461a      	mov	r2, r3
 8016cb8:	69bb      	ldr	r3, [r7, #24]
 8016cba:	4293      	cmp	r3, r2
 8016cbc:	d114      	bne.n	8016ce8 <tcp_output+0x120>
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d110      	bne.n	8016ce8 <tcp_output+0x120>
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d10b      	bne.n	8016ce8 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	2201      	movs	r2, #1
 8016cdc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
      pcb->persist_probe = 0;
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	8b5b      	ldrh	r3, [r3, #26]
 8016cec:	f003 0302 	and.w	r3, r3, #2
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	f000 814d 	beq.w	8016f90 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016cf6:	6878      	ldr	r0, [r7, #4]
 8016cf8:	f000 fd6c 	bl	80177d4 <tcp_send_empty_ack>
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	e152      	b.n	8016fa6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	2200      	movs	r2, #0
 8016d04:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d0c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016d0e:	6a3b      	ldr	r3, [r7, #32]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	f000 811c 	beq.w	8016f4e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016d16:	e002      	b.n	8016d1e <tcp_output+0x156>
 8016d18:	6a3b      	ldr	r3, [r7, #32]
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	623b      	str	r3, [r7, #32]
 8016d1e:	6a3b      	ldr	r3, [r7, #32]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d1f8      	bne.n	8016d18 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016d26:	e112      	b.n	8016f4e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d2a:	68db      	ldr	r3, [r3, #12]
 8016d2c:	899b      	ldrh	r3, [r3, #12]
 8016d2e:	b29b      	uxth	r3, r3
 8016d30:	4618      	mov	r0, r3
 8016d32:	f7f8 f945 	bl	800efc0 <lwip_htons>
 8016d36:	4603      	mov	r3, r0
 8016d38:	b2db      	uxtb	r3, r3
 8016d3a:	f003 0304 	and.w	r3, r3, #4
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d006      	beq.n	8016d50 <tcp_output+0x188>
 8016d42:	4b43      	ldr	r3, [pc, #268]	; (8016e50 <tcp_output+0x288>)
 8016d44:	f240 5236 	movw	r2, #1334	; 0x536
 8016d48:	4946      	ldr	r1, [pc, #280]	; (8016e64 <tcp_output+0x29c>)
 8016d4a:	4843      	ldr	r0, [pc, #268]	; (8016e58 <tcp_output+0x290>)
 8016d4c:	f002 f8fe 	bl	8018f4c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d01f      	beq.n	8016d98 <tcp_output+0x1d0>
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	8b5b      	ldrh	r3, [r3, #26]
 8016d5c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d119      	bne.n	8016d98 <tcp_output+0x1d0>
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d00b      	beq.n	8016d84 <tcp_output+0x1bc>
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d110      	bne.n	8016d98 <tcp_output+0x1d0>
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016d7a:	891a      	ldrh	r2, [r3, #8]
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016d80:	429a      	cmp	r2, r3
 8016d82:	d209      	bcs.n	8016d98 <tcp_output+0x1d0>
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d004      	beq.n	8016d98 <tcp_output+0x1d0>
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016d94:	2b07      	cmp	r3, #7
 8016d96:	d901      	bls.n	8016d9c <tcp_output+0x1d4>
 8016d98:	2301      	movs	r3, #1
 8016d9a:	e000      	b.n	8016d9e <tcp_output+0x1d6>
 8016d9c:	2300      	movs	r3, #0
 8016d9e:	2b00      	cmp	r3, #0
 8016da0:	d106      	bne.n	8016db0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	8b5b      	ldrh	r3, [r3, #26]
 8016da6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	f000 80e4 	beq.w	8016f78 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	7d1b      	ldrb	r3, [r3, #20]
 8016db4:	2b02      	cmp	r3, #2
 8016db6:	d00d      	beq.n	8016dd4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dba:	68db      	ldr	r3, [r3, #12]
 8016dbc:	899b      	ldrh	r3, [r3, #12]
 8016dbe:	b29c      	uxth	r4, r3
 8016dc0:	2010      	movs	r0, #16
 8016dc2:	f7f8 f8fd 	bl	800efc0 <lwip_htons>
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	461a      	mov	r2, r3
 8016dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dcc:	68db      	ldr	r3, [r3, #12]
 8016dce:	4322      	orrs	r2, r4
 8016dd0:	b292      	uxth	r2, r2
 8016dd2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016dd4:	697a      	ldr	r2, [r7, #20]
 8016dd6:	6879      	ldr	r1, [r7, #4]
 8016dd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016dda:	f000 f909 	bl	8016ff0 <tcp_output_segment>
 8016dde:	4603      	mov	r3, r0
 8016de0:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d009      	beq.n	8016dfe <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	8b5b      	ldrh	r3, [r3, #26]
 8016dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016df2:	b29a      	uxth	r2, r3
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	835a      	strh	r2, [r3, #26]
      return err;
 8016df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016dfc:	e0d3      	b.n	8016fa6 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e00:	681a      	ldr	r2, [r3, #0]
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016e06:	687b      	ldr	r3, [r7, #4]
 8016e08:	7d1b      	ldrb	r3, [r3, #20]
 8016e0a:	2b02      	cmp	r3, #2
 8016e0c:	d006      	beq.n	8016e1c <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	8b5b      	ldrh	r3, [r3, #26]
 8016e12:	f023 0303 	bic.w	r3, r3, #3
 8016e16:	b29a      	uxth	r2, r3
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e1e:	68db      	ldr	r3, [r3, #12]
 8016e20:	685b      	ldr	r3, [r3, #4]
 8016e22:	4618      	mov	r0, r3
 8016e24:	f7f8 f8e1 	bl	800efea <lwip_htonl>
 8016e28:	4604      	mov	r4, r0
 8016e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e2c:	891b      	ldrh	r3, [r3, #8]
 8016e2e:	461d      	mov	r5, r3
 8016e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e32:	68db      	ldr	r3, [r3, #12]
 8016e34:	899b      	ldrh	r3, [r3, #12]
 8016e36:	b29b      	uxth	r3, r3
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f7f8 f8c1 	bl	800efc0 <lwip_htons>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	b2db      	uxtb	r3, r3
 8016e42:	f003 0303 	and.w	r3, r3, #3
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d00e      	beq.n	8016e68 <tcp_output+0x2a0>
 8016e4a:	2301      	movs	r3, #1
 8016e4c:	e00d      	b.n	8016e6a <tcp_output+0x2a2>
 8016e4e:	bf00      	nop
 8016e50:	0801e024 	.word	0x0801e024
 8016e54:	0801e5ac 	.word	0x0801e5ac
 8016e58:	0801e0bc 	.word	0x0801e0bc
 8016e5c:	0801e5c4 	.word	0x0801e5c4
 8016e60:	2400b2b8 	.word	0x2400b2b8
 8016e64:	0801e5ec 	.word	0x0801e5ec
 8016e68:	2300      	movs	r3, #0
 8016e6a:	442b      	add	r3, r5
 8016e6c:	4423      	add	r3, r4
 8016e6e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	1ad3      	subs	r3, r2, r3
 8016e78:	2b00      	cmp	r3, #0
 8016e7a:	da02      	bge.n	8016e82 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	68ba      	ldr	r2, [r7, #8]
 8016e80:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e84:	891b      	ldrh	r3, [r3, #8]
 8016e86:	461c      	mov	r4, r3
 8016e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e8a:	68db      	ldr	r3, [r3, #12]
 8016e8c:	899b      	ldrh	r3, [r3, #12]
 8016e8e:	b29b      	uxth	r3, r3
 8016e90:	4618      	mov	r0, r3
 8016e92:	f7f8 f895 	bl	800efc0 <lwip_htons>
 8016e96:	4603      	mov	r3, r0
 8016e98:	b2db      	uxtb	r3, r3
 8016e9a:	f003 0303 	and.w	r3, r3, #3
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d001      	beq.n	8016ea6 <tcp_output+0x2de>
 8016ea2:	2301      	movs	r3, #1
 8016ea4:	e000      	b.n	8016ea8 <tcp_output+0x2e0>
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	4423      	add	r3, r4
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d049      	beq.n	8016f42 <tcp_output+0x37a>
      seg->next = NULL;
 8016eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016eb8:	2b00      	cmp	r3, #0
 8016eba:	d105      	bne.n	8016ec8 <tcp_output+0x300>
        pcb->unacked = seg;
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ec0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec4:	623b      	str	r3, [r7, #32]
 8016ec6:	e03f      	b.n	8016f48 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eca:	68db      	ldr	r3, [r3, #12]
 8016ecc:	685b      	ldr	r3, [r3, #4]
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f7f8 f88b 	bl	800efea <lwip_htonl>
 8016ed4:	4604      	mov	r4, r0
 8016ed6:	6a3b      	ldr	r3, [r7, #32]
 8016ed8:	68db      	ldr	r3, [r3, #12]
 8016eda:	685b      	ldr	r3, [r3, #4]
 8016edc:	4618      	mov	r0, r3
 8016ede:	f7f8 f884 	bl	800efea <lwip_htonl>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	1ae3      	subs	r3, r4, r3
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	da24      	bge.n	8016f34 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016eea:	687b      	ldr	r3, [r7, #4]
 8016eec:	3370      	adds	r3, #112	; 0x70
 8016eee:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016ef0:	e002      	b.n	8016ef8 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016ef2:	69fb      	ldr	r3, [r7, #28]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016ef8:	69fb      	ldr	r3, [r7, #28]
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d011      	beq.n	8016f24 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016f00:	69fb      	ldr	r3, [r7, #28]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	68db      	ldr	r3, [r3, #12]
 8016f06:	685b      	ldr	r3, [r3, #4]
 8016f08:	4618      	mov	r0, r3
 8016f0a:	f7f8 f86e 	bl	800efea <lwip_htonl>
 8016f0e:	4604      	mov	r4, r0
 8016f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f12:	68db      	ldr	r3, [r3, #12]
 8016f14:	685b      	ldr	r3, [r3, #4]
 8016f16:	4618      	mov	r0, r3
 8016f18:	f7f8 f867 	bl	800efea <lwip_htonl>
 8016f1c:	4603      	mov	r3, r0
 8016f1e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	dbe6      	blt.n	8016ef2 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016f24:	69fb      	ldr	r3, [r7, #28]
 8016f26:	681a      	ldr	r2, [r3, #0]
 8016f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f2a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016f2c:	69fb      	ldr	r3, [r7, #28]
 8016f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f30:	601a      	str	r2, [r3, #0]
 8016f32:	e009      	b.n	8016f48 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016f34:	6a3b      	ldr	r3, [r7, #32]
 8016f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f38:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016f3a:	6a3b      	ldr	r3, [r7, #32]
 8016f3c:	681b      	ldr	r3, [r3, #0]
 8016f3e:	623b      	str	r3, [r7, #32]
 8016f40:	e002      	b.n	8016f48 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016f42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f44:	f7fc fb2b 	bl	801359e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f4c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d012      	beq.n	8016f7a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f56:	68db      	ldr	r3, [r3, #12]
 8016f58:	685b      	ldr	r3, [r3, #4]
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f7f8 f845 	bl	800efea <lwip_htonl>
 8016f60:	4602      	mov	r2, r0
 8016f62:	687b      	ldr	r3, [r7, #4]
 8016f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016f66:	1ad3      	subs	r3, r2, r3
 8016f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f6a:	8912      	ldrh	r2, [r2, #8]
 8016f6c:	4413      	add	r3, r2
  while (seg != NULL &&
 8016f6e:	69ba      	ldr	r2, [r7, #24]
 8016f70:	429a      	cmp	r2, r3
 8016f72:	f4bf aed9 	bcs.w	8016d28 <tcp_output+0x160>
 8016f76:	e000      	b.n	8016f7a <tcp_output+0x3b2>
      break;
 8016f78:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d108      	bne.n	8016f94 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	2200      	movs	r2, #0
 8016f86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016f8a:	e004      	b.n	8016f96 <tcp_output+0x3ce>
    goto output_done;
 8016f8c:	bf00      	nop
 8016f8e:	e002      	b.n	8016f96 <tcp_output+0x3ce>
    goto output_done;
 8016f90:	bf00      	nop
 8016f92:	e000      	b.n	8016f96 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016f94:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	8b5b      	ldrh	r3, [r3, #26]
 8016f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016f9e:	b29a      	uxth	r2, r3
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016fa4:	2300      	movs	r3, #0
}
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	3728      	adds	r7, #40	; 0x28
 8016faa:	46bd      	mov	sp, r7
 8016fac:	bdb0      	pop	{r4, r5, r7, pc}
 8016fae:	bf00      	nop

08016fb0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b082      	sub	sp, #8
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d106      	bne.n	8016fcc <tcp_output_segment_busy+0x1c>
 8016fbe:	4b09      	ldr	r3, [pc, #36]	; (8016fe4 <tcp_output_segment_busy+0x34>)
 8016fc0:	f240 529a 	movw	r2, #1434	; 0x59a
 8016fc4:	4908      	ldr	r1, [pc, #32]	; (8016fe8 <tcp_output_segment_busy+0x38>)
 8016fc6:	4809      	ldr	r0, [pc, #36]	; (8016fec <tcp_output_segment_busy+0x3c>)
 8016fc8:	f001 ffc0 	bl	8018f4c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	685b      	ldr	r3, [r3, #4]
 8016fd0:	7b9b      	ldrb	r3, [r3, #14]
 8016fd2:	2b01      	cmp	r3, #1
 8016fd4:	d001      	beq.n	8016fda <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	e000      	b.n	8016fdc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016fda:	2300      	movs	r3, #0
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3708      	adds	r7, #8
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}
 8016fe4:	0801e024 	.word	0x0801e024
 8016fe8:	0801e604 	.word	0x0801e604
 8016fec:	0801e0bc 	.word	0x0801e0bc

08016ff0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016ff0:	b5b0      	push	{r4, r5, r7, lr}
 8016ff2:	b08c      	sub	sp, #48	; 0x30
 8016ff4:	af04      	add	r7, sp, #16
 8016ff6:	60f8      	str	r0, [r7, #12]
 8016ff8:	60b9      	str	r1, [r7, #8]
 8016ffa:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d106      	bne.n	8017010 <tcp_output_segment+0x20>
 8017002:	4b63      	ldr	r3, [pc, #396]	; (8017190 <tcp_output_segment+0x1a0>)
 8017004:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017008:	4962      	ldr	r1, [pc, #392]	; (8017194 <tcp_output_segment+0x1a4>)
 801700a:	4863      	ldr	r0, [pc, #396]	; (8017198 <tcp_output_segment+0x1a8>)
 801700c:	f001 ff9e 	bl	8018f4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017010:	68bb      	ldr	r3, [r7, #8]
 8017012:	2b00      	cmp	r3, #0
 8017014:	d106      	bne.n	8017024 <tcp_output_segment+0x34>
 8017016:	4b5e      	ldr	r3, [pc, #376]	; (8017190 <tcp_output_segment+0x1a0>)
 8017018:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801701c:	495f      	ldr	r1, [pc, #380]	; (801719c <tcp_output_segment+0x1ac>)
 801701e:	485e      	ldr	r0, [pc, #376]	; (8017198 <tcp_output_segment+0x1a8>)
 8017020:	f001 ff94 	bl	8018f4c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2b00      	cmp	r3, #0
 8017028:	d106      	bne.n	8017038 <tcp_output_segment+0x48>
 801702a:	4b59      	ldr	r3, [pc, #356]	; (8017190 <tcp_output_segment+0x1a0>)
 801702c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8017030:	495b      	ldr	r1, [pc, #364]	; (80171a0 <tcp_output_segment+0x1b0>)
 8017032:	4859      	ldr	r0, [pc, #356]	; (8017198 <tcp_output_segment+0x1a8>)
 8017034:	f001 ff8a 	bl	8018f4c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017038:	68f8      	ldr	r0, [r7, #12]
 801703a:	f7ff ffb9 	bl	8016fb0 <tcp_output_segment_busy>
 801703e:	4603      	mov	r3, r0
 8017040:	2b00      	cmp	r3, #0
 8017042:	d001      	beq.n	8017048 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017044:	2300      	movs	r3, #0
 8017046:	e09f      	b.n	8017188 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017048:	68bb      	ldr	r3, [r7, #8]
 801704a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	68dc      	ldr	r4, [r3, #12]
 8017050:	4610      	mov	r0, r2
 8017052:	f7f7 ffca 	bl	800efea <lwip_htonl>
 8017056:	4603      	mov	r3, r0
 8017058:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801705a:	68bb      	ldr	r3, [r7, #8]
 801705c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	68dc      	ldr	r4, [r3, #12]
 8017062:	4610      	mov	r0, r2
 8017064:	f7f7 ffac 	bl	800efc0 <lwip_htons>
 8017068:	4603      	mov	r3, r0
 801706a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017070:	68ba      	ldr	r2, [r7, #8]
 8017072:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017074:	441a      	add	r2, r3
 8017076:	68bb      	ldr	r3, [r7, #8]
 8017078:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	68db      	ldr	r3, [r3, #12]
 801707e:	3314      	adds	r3, #20
 8017080:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	7a9b      	ldrb	r3, [r3, #10]
 8017086:	f003 0301 	and.w	r3, r3, #1
 801708a:	2b00      	cmp	r3, #0
 801708c:	d015      	beq.n	80170ba <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801708e:	68bb      	ldr	r3, [r7, #8]
 8017090:	3304      	adds	r3, #4
 8017092:	461a      	mov	r2, r3
 8017094:	6879      	ldr	r1, [r7, #4]
 8017096:	f240 50b4 	movw	r0, #1460	; 0x5b4
 801709a:	f7fc fe03 	bl	8013ca4 <tcp_eff_send_mss_netif>
 801709e:	4603      	mov	r3, r0
 80170a0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80170a2:	8b7b      	ldrh	r3, [r7, #26]
 80170a4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80170a8:	4618      	mov	r0, r3
 80170aa:	f7f7 ff9e 	bl	800efea <lwip_htonl>
 80170ae:	4602      	mov	r2, r0
 80170b0:	69fb      	ldr	r3, [r7, #28]
 80170b2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80170b4:	69fb      	ldr	r3, [r7, #28]
 80170b6:	3304      	adds	r3, #4
 80170b8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80170ba:	68bb      	ldr	r3, [r7, #8]
 80170bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	da02      	bge.n	80170ca <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80170c4:	68bb      	ldr	r3, [r7, #8]
 80170c6:	2200      	movs	r2, #0
 80170c8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d10c      	bne.n	80170ec <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80170d2:	4b34      	ldr	r3, [pc, #208]	; (80171a4 <tcp_output_segment+0x1b4>)
 80170d4:	681a      	ldr	r2, [r3, #0]
 80170d6:	68bb      	ldr	r3, [r7, #8]
 80170d8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	68db      	ldr	r3, [r3, #12]
 80170de:	685b      	ldr	r3, [r3, #4]
 80170e0:	4618      	mov	r0, r3
 80170e2:	f7f7 ff82 	bl	800efea <lwip_htonl>
 80170e6:	4602      	mov	r2, r0
 80170e8:	68bb      	ldr	r3, [r7, #8]
 80170ea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	68da      	ldr	r2, [r3, #12]
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	685b      	ldr	r3, [r3, #4]
 80170f4:	685b      	ldr	r3, [r3, #4]
 80170f6:	1ad3      	subs	r3, r2, r3
 80170f8:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	685b      	ldr	r3, [r3, #4]
 80170fe:	8959      	ldrh	r1, [r3, #10]
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	685b      	ldr	r3, [r3, #4]
 8017104:	8b3a      	ldrh	r2, [r7, #24]
 8017106:	1a8a      	subs	r2, r1, r2
 8017108:	b292      	uxth	r2, r2
 801710a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	685b      	ldr	r3, [r3, #4]
 8017110:	8919      	ldrh	r1, [r3, #8]
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	685b      	ldr	r3, [r3, #4]
 8017116:	8b3a      	ldrh	r2, [r7, #24]
 8017118:	1a8a      	subs	r2, r1, r2
 801711a:	b292      	uxth	r2, r2
 801711c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	685b      	ldr	r3, [r3, #4]
 8017122:	68fa      	ldr	r2, [r7, #12]
 8017124:	68d2      	ldr	r2, [r2, #12]
 8017126:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	68db      	ldr	r3, [r3, #12]
 801712c:	2200      	movs	r2, #0
 801712e:	741a      	strb	r2, [r3, #16]
 8017130:	2200      	movs	r2, #0
 8017132:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	68db      	ldr	r3, [r3, #12]
 8017138:	f103 0214 	add.w	r2, r3, #20
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	7a9b      	ldrb	r3, [r3, #10]
 8017140:	009b      	lsls	r3, r3, #2
 8017142:	f003 0304 	and.w	r3, r3, #4
 8017146:	4413      	add	r3, r2
 8017148:	69fa      	ldr	r2, [r7, #28]
 801714a:	429a      	cmp	r2, r3
 801714c:	d006      	beq.n	801715c <tcp_output_segment+0x16c>
 801714e:	4b10      	ldr	r3, [pc, #64]	; (8017190 <tcp_output_segment+0x1a0>)
 8017150:	f240 621c 	movw	r2, #1564	; 0x61c
 8017154:	4914      	ldr	r1, [pc, #80]	; (80171a8 <tcp_output_segment+0x1b8>)
 8017156:	4810      	ldr	r0, [pc, #64]	; (8017198 <tcp_output_segment+0x1a8>)
 8017158:	f001 fef8 	bl	8018f4c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	6858      	ldr	r0, [r3, #4]
 8017160:	68b9      	ldr	r1, [r7, #8]
 8017162:	68bb      	ldr	r3, [r7, #8]
 8017164:	1d1c      	adds	r4, r3, #4
 8017166:	68bb      	ldr	r3, [r7, #8]
 8017168:	7add      	ldrb	r5, [r3, #11]
 801716a:	68bb      	ldr	r3, [r7, #8]
 801716c:	7a9b      	ldrb	r3, [r3, #10]
 801716e:	687a      	ldr	r2, [r7, #4]
 8017170:	9202      	str	r2, [sp, #8]
 8017172:	2206      	movs	r2, #6
 8017174:	9201      	str	r2, [sp, #4]
 8017176:	9300      	str	r3, [sp, #0]
 8017178:	462b      	mov	r3, r5
 801717a:	4622      	mov	r2, r4
 801717c:	f7f6 fe90 	bl	800dea0 <ip4_output_if>
 8017180:	4603      	mov	r3, r0
 8017182:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017184:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017188:	4618      	mov	r0, r3
 801718a:	3720      	adds	r7, #32
 801718c:	46bd      	mov	sp, r7
 801718e:	bdb0      	pop	{r4, r5, r7, pc}
 8017190:	0801e024 	.word	0x0801e024
 8017194:	0801e62c 	.word	0x0801e62c
 8017198:	0801e0bc 	.word	0x0801e0bc
 801719c:	0801e64c 	.word	0x0801e64c
 80171a0:	0801e66c 	.word	0x0801e66c
 80171a4:	2400b2a8 	.word	0x2400b2a8
 80171a8:	0801e690 	.word	0x0801e690

080171ac <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80171ac:	b5b0      	push	{r4, r5, r7, lr}
 80171ae:	b084      	sub	sp, #16
 80171b0:	af00      	add	r7, sp, #0
 80171b2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d106      	bne.n	80171c8 <tcp_rexmit_rto_prepare+0x1c>
 80171ba:	4b31      	ldr	r3, [pc, #196]	; (8017280 <tcp_rexmit_rto_prepare+0xd4>)
 80171bc:	f240 6263 	movw	r2, #1635	; 0x663
 80171c0:	4930      	ldr	r1, [pc, #192]	; (8017284 <tcp_rexmit_rto_prepare+0xd8>)
 80171c2:	4831      	ldr	r0, [pc, #196]	; (8017288 <tcp_rexmit_rto_prepare+0xdc>)
 80171c4:	f001 fec2 	bl	8018f4c <iprintf>

  if (pcb->unacked == NULL) {
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d102      	bne.n	80171d6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80171d0:	f06f 0305 	mvn.w	r3, #5
 80171d4:	e050      	b.n	8017278 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171da:	60fb      	str	r3, [r7, #12]
 80171dc:	e00b      	b.n	80171f6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80171de:	68f8      	ldr	r0, [r7, #12]
 80171e0:	f7ff fee6 	bl	8016fb0 <tcp_output_segment_busy>
 80171e4:	4603      	mov	r3, r0
 80171e6:	2b00      	cmp	r3, #0
 80171e8:	d002      	beq.n	80171f0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80171ea:	f06f 0305 	mvn.w	r3, #5
 80171ee:	e043      	b.n	8017278 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	60fb      	str	r3, [r7, #12]
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	681b      	ldr	r3, [r3, #0]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d1ef      	bne.n	80171de <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80171fe:	68f8      	ldr	r0, [r7, #12]
 8017200:	f7ff fed6 	bl	8016fb0 <tcp_output_segment_busy>
 8017204:	4603      	mov	r3, r0
 8017206:	2b00      	cmp	r3, #0
 8017208:	d002      	beq.n	8017210 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801720a:	f06f 0305 	mvn.w	r3, #5
 801720e:	e033      	b.n	8017278 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	2200      	movs	r2, #0
 8017224:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	8b5b      	ldrh	r3, [r3, #26]
 801722a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801722e:	b29a      	uxth	r2, r3
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	68db      	ldr	r3, [r3, #12]
 8017238:	685b      	ldr	r3, [r3, #4]
 801723a:	4618      	mov	r0, r3
 801723c:	f7f7 fed5 	bl	800efea <lwip_htonl>
 8017240:	4604      	mov	r4, r0
 8017242:	68fb      	ldr	r3, [r7, #12]
 8017244:	891b      	ldrh	r3, [r3, #8]
 8017246:	461d      	mov	r5, r3
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	68db      	ldr	r3, [r3, #12]
 801724c:	899b      	ldrh	r3, [r3, #12]
 801724e:	b29b      	uxth	r3, r3
 8017250:	4618      	mov	r0, r3
 8017252:	f7f7 feb5 	bl	800efc0 <lwip_htons>
 8017256:	4603      	mov	r3, r0
 8017258:	b2db      	uxtb	r3, r3
 801725a:	f003 0303 	and.w	r3, r3, #3
 801725e:	2b00      	cmp	r3, #0
 8017260:	d001      	beq.n	8017266 <tcp_rexmit_rto_prepare+0xba>
 8017262:	2301      	movs	r3, #1
 8017264:	e000      	b.n	8017268 <tcp_rexmit_rto_prepare+0xbc>
 8017266:	2300      	movs	r3, #0
 8017268:	442b      	add	r3, r5
 801726a:	18e2      	adds	r2, r4, r3
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2200      	movs	r2, #0
 8017274:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017276:	2300      	movs	r3, #0
}
 8017278:	4618      	mov	r0, r3
 801727a:	3710      	adds	r7, #16
 801727c:	46bd      	mov	sp, r7
 801727e:	bdb0      	pop	{r4, r5, r7, pc}
 8017280:	0801e024 	.word	0x0801e024
 8017284:	0801e6a4 	.word	0x0801e6a4
 8017288:	0801e0bc 	.word	0x0801e0bc

0801728c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	2b00      	cmp	r3, #0
 8017298:	d106      	bne.n	80172a8 <tcp_rexmit_rto_commit+0x1c>
 801729a:	4b0d      	ldr	r3, [pc, #52]	; (80172d0 <tcp_rexmit_rto_commit+0x44>)
 801729c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80172a0:	490c      	ldr	r1, [pc, #48]	; (80172d4 <tcp_rexmit_rto_commit+0x48>)
 80172a2:	480d      	ldr	r0, [pc, #52]	; (80172d8 <tcp_rexmit_rto_commit+0x4c>)
 80172a4:	f001 fe52 	bl	8018f4c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172ae:	2bff      	cmp	r3, #255	; 0xff
 80172b0:	d007      	beq.n	80172c2 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172b8:	3301      	adds	r3, #1
 80172ba:	b2da      	uxtb	r2, r3
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80172c2:	6878      	ldr	r0, [r7, #4]
 80172c4:	f7ff fc80 	bl	8016bc8 <tcp_output>
}
 80172c8:	bf00      	nop
 80172ca:	3708      	adds	r7, #8
 80172cc:	46bd      	mov	sp, r7
 80172ce:	bd80      	pop	{r7, pc}
 80172d0:	0801e024 	.word	0x0801e024
 80172d4:	0801e6c8 	.word	0x0801e6c8
 80172d8:	0801e0bc 	.word	0x0801e0bc

080172dc <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b082      	sub	sp, #8
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d106      	bne.n	80172f8 <tcp_rexmit_rto+0x1c>
 80172ea:	4b0a      	ldr	r3, [pc, #40]	; (8017314 <tcp_rexmit_rto+0x38>)
 80172ec:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80172f0:	4909      	ldr	r1, [pc, #36]	; (8017318 <tcp_rexmit_rto+0x3c>)
 80172f2:	480a      	ldr	r0, [pc, #40]	; (801731c <tcp_rexmit_rto+0x40>)
 80172f4:	f001 fe2a 	bl	8018f4c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80172f8:	6878      	ldr	r0, [r7, #4]
 80172fa:	f7ff ff57 	bl	80171ac <tcp_rexmit_rto_prepare>
 80172fe:	4603      	mov	r3, r0
 8017300:	2b00      	cmp	r3, #0
 8017302:	d102      	bne.n	801730a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017304:	6878      	ldr	r0, [r7, #4]
 8017306:	f7ff ffc1 	bl	801728c <tcp_rexmit_rto_commit>
  }
}
 801730a:	bf00      	nop
 801730c:	3708      	adds	r7, #8
 801730e:	46bd      	mov	sp, r7
 8017310:	bd80      	pop	{r7, pc}
 8017312:	bf00      	nop
 8017314:	0801e024 	.word	0x0801e024
 8017318:	0801e6ec 	.word	0x0801e6ec
 801731c:	0801e0bc 	.word	0x0801e0bc

08017320 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017320:	b590      	push	{r4, r7, lr}
 8017322:	b085      	sub	sp, #20
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d106      	bne.n	801733c <tcp_rexmit+0x1c>
 801732e:	4b2f      	ldr	r3, [pc, #188]	; (80173ec <tcp_rexmit+0xcc>)
 8017330:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017334:	492e      	ldr	r1, [pc, #184]	; (80173f0 <tcp_rexmit+0xd0>)
 8017336:	482f      	ldr	r0, [pc, #188]	; (80173f4 <tcp_rexmit+0xd4>)
 8017338:	f001 fe08 	bl	8018f4c <iprintf>

  if (pcb->unacked == NULL) {
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017340:	2b00      	cmp	r3, #0
 8017342:	d102      	bne.n	801734a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017344:	f06f 0305 	mvn.w	r3, #5
 8017348:	e04c      	b.n	80173e4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801734e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017350:	68b8      	ldr	r0, [r7, #8]
 8017352:	f7ff fe2d 	bl	8016fb0 <tcp_output_segment_busy>
 8017356:	4603      	mov	r3, r0
 8017358:	2b00      	cmp	r3, #0
 801735a:	d002      	beq.n	8017362 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801735c:	f06f 0305 	mvn.w	r3, #5
 8017360:	e040      	b.n	80173e4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017362:	68bb      	ldr	r3, [r7, #8]
 8017364:	681a      	ldr	r2, [r3, #0]
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	336c      	adds	r3, #108	; 0x6c
 801736e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017370:	e002      	b.n	8017378 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017372:	68fb      	ldr	r3, [r7, #12]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017378:	68fb      	ldr	r3, [r7, #12]
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	2b00      	cmp	r3, #0
 801737e:	d011      	beq.n	80173a4 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	68db      	ldr	r3, [r3, #12]
 8017386:	685b      	ldr	r3, [r3, #4]
 8017388:	4618      	mov	r0, r3
 801738a:	f7f7 fe2e 	bl	800efea <lwip_htonl>
 801738e:	4604      	mov	r4, r0
 8017390:	68bb      	ldr	r3, [r7, #8]
 8017392:	68db      	ldr	r3, [r3, #12]
 8017394:	685b      	ldr	r3, [r3, #4]
 8017396:	4618      	mov	r0, r3
 8017398:	f7f7 fe27 	bl	800efea <lwip_htonl>
 801739c:	4603      	mov	r3, r0
 801739e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	dbe6      	blt.n	8017372 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	681a      	ldr	r2, [r3, #0]
 80173a8:	68bb      	ldr	r3, [r7, #8]
 80173aa:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	68ba      	ldr	r2, [r7, #8]
 80173b0:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d103      	bne.n	80173c2 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	2200      	movs	r2, #0
 80173be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80173c8:	2bff      	cmp	r3, #255	; 0xff
 80173ca:	d007      	beq.n	80173dc <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80173d2:	3301      	adds	r3, #1
 80173d4:	b2da      	uxtb	r2, r3
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2200      	movs	r2, #0
 80173e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80173e2:	2300      	movs	r3, #0
}
 80173e4:	4618      	mov	r0, r3
 80173e6:	3714      	adds	r7, #20
 80173e8:	46bd      	mov	sp, r7
 80173ea:	bd90      	pop	{r4, r7, pc}
 80173ec:	0801e024 	.word	0x0801e024
 80173f0:	0801e708 	.word	0x0801e708
 80173f4:	0801e0bc 	.word	0x0801e0bc

080173f8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b082      	sub	sp, #8
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	2b00      	cmp	r3, #0
 8017404:	d106      	bne.n	8017414 <tcp_rexmit_fast+0x1c>
 8017406:	4b2a      	ldr	r3, [pc, #168]	; (80174b0 <tcp_rexmit_fast+0xb8>)
 8017408:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801740c:	4929      	ldr	r1, [pc, #164]	; (80174b4 <tcp_rexmit_fast+0xbc>)
 801740e:	482a      	ldr	r0, [pc, #168]	; (80174b8 <tcp_rexmit_fast+0xc0>)
 8017410:	f001 fd9c 	bl	8018f4c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017418:	2b00      	cmp	r3, #0
 801741a:	d045      	beq.n	80174a8 <tcp_rexmit_fast+0xb0>
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	8b5b      	ldrh	r3, [r3, #26]
 8017420:	f003 0304 	and.w	r3, r3, #4
 8017424:	2b00      	cmp	r3, #0
 8017426:	d13f      	bne.n	80174a8 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017428:	6878      	ldr	r0, [r7, #4]
 801742a:	f7ff ff79 	bl	8017320 <tcp_rexmit>
 801742e:	4603      	mov	r3, r0
 8017430:	2b00      	cmp	r3, #0
 8017432:	d139      	bne.n	80174a8 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017440:	4293      	cmp	r3, r2
 8017442:	bf28      	it	cs
 8017444:	4613      	movcs	r3, r2
 8017446:	b29b      	uxth	r3, r3
 8017448:	2b00      	cmp	r3, #0
 801744a:	da00      	bge.n	801744e <tcp_rexmit_fast+0x56>
 801744c:	3301      	adds	r3, #1
 801744e:	105b      	asrs	r3, r3, #1
 8017450:	b29a      	uxth	r2, r3
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801745e:	461a      	mov	r2, r3
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017464:	005b      	lsls	r3, r3, #1
 8017466:	429a      	cmp	r2, r3
 8017468:	d206      	bcs.n	8017478 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801746e:	005b      	lsls	r3, r3, #1
 8017470:	b29a      	uxth	r2, r3
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017482:	4619      	mov	r1, r3
 8017484:	0049      	lsls	r1, r1, #1
 8017486:	440b      	add	r3, r1
 8017488:	b29b      	uxth	r3, r3
 801748a:	4413      	add	r3, r2
 801748c:	b29a      	uxth	r2, r3
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	8b5b      	ldrh	r3, [r3, #26]
 8017498:	f043 0304 	orr.w	r3, r3, #4
 801749c:	b29a      	uxth	r2, r3
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	2200      	movs	r2, #0
 80174a6:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80174a8:	bf00      	nop
 80174aa:	3708      	adds	r7, #8
 80174ac:	46bd      	mov	sp, r7
 80174ae:	bd80      	pop	{r7, pc}
 80174b0:	0801e024 	.word	0x0801e024
 80174b4:	0801e720 	.word	0x0801e720
 80174b8:	0801e0bc 	.word	0x0801e0bc

080174bc <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b086      	sub	sp, #24
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	60f8      	str	r0, [r7, #12]
 80174c4:	607b      	str	r3, [r7, #4]
 80174c6:	460b      	mov	r3, r1
 80174c8:	817b      	strh	r3, [r7, #10]
 80174ca:	4613      	mov	r3, r2
 80174cc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80174ce:	897a      	ldrh	r2, [r7, #10]
 80174d0:	893b      	ldrh	r3, [r7, #8]
 80174d2:	4413      	add	r3, r2
 80174d4:	b29b      	uxth	r3, r3
 80174d6:	3314      	adds	r3, #20
 80174d8:	b29b      	uxth	r3, r3
 80174da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80174de:	4619      	mov	r1, r3
 80174e0:	2022      	movs	r0, #34	; 0x22
 80174e2:	f7f9 fe3d 	bl	8011160 <pbuf_alloc>
 80174e6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80174e8:	697b      	ldr	r3, [r7, #20]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d04d      	beq.n	801758a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80174ee:	897b      	ldrh	r3, [r7, #10]
 80174f0:	3313      	adds	r3, #19
 80174f2:	697a      	ldr	r2, [r7, #20]
 80174f4:	8952      	ldrh	r2, [r2, #10]
 80174f6:	4293      	cmp	r3, r2
 80174f8:	db06      	blt.n	8017508 <tcp_output_alloc_header_common+0x4c>
 80174fa:	4b26      	ldr	r3, [pc, #152]	; (8017594 <tcp_output_alloc_header_common+0xd8>)
 80174fc:	f240 7223 	movw	r2, #1827	; 0x723
 8017500:	4925      	ldr	r1, [pc, #148]	; (8017598 <tcp_output_alloc_header_common+0xdc>)
 8017502:	4826      	ldr	r0, [pc, #152]	; (801759c <tcp_output_alloc_header_common+0xe0>)
 8017504:	f001 fd22 	bl	8018f4c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017508:	697b      	ldr	r3, [r7, #20]
 801750a:	685b      	ldr	r3, [r3, #4]
 801750c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801750e:	8c3b      	ldrh	r3, [r7, #32]
 8017510:	4618      	mov	r0, r3
 8017512:	f7f7 fd55 	bl	800efc0 <lwip_htons>
 8017516:	4603      	mov	r3, r0
 8017518:	461a      	mov	r2, r3
 801751a:	693b      	ldr	r3, [r7, #16]
 801751c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801751e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017520:	4618      	mov	r0, r3
 8017522:	f7f7 fd4d 	bl	800efc0 <lwip_htons>
 8017526:	4603      	mov	r3, r0
 8017528:	461a      	mov	r2, r3
 801752a:	693b      	ldr	r3, [r7, #16]
 801752c:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801752e:	693b      	ldr	r3, [r7, #16]
 8017530:	687a      	ldr	r2, [r7, #4]
 8017532:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017534:	68f8      	ldr	r0, [r7, #12]
 8017536:	f7f7 fd58 	bl	800efea <lwip_htonl>
 801753a:	4602      	mov	r2, r0
 801753c:	693b      	ldr	r3, [r7, #16]
 801753e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017540:	897b      	ldrh	r3, [r7, #10]
 8017542:	089b      	lsrs	r3, r3, #2
 8017544:	b29b      	uxth	r3, r3
 8017546:	3305      	adds	r3, #5
 8017548:	b29b      	uxth	r3, r3
 801754a:	031b      	lsls	r3, r3, #12
 801754c:	b29a      	uxth	r2, r3
 801754e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017552:	b29b      	uxth	r3, r3
 8017554:	4313      	orrs	r3, r2
 8017556:	b29b      	uxth	r3, r3
 8017558:	4618      	mov	r0, r3
 801755a:	f7f7 fd31 	bl	800efc0 <lwip_htons>
 801755e:	4603      	mov	r3, r0
 8017560:	461a      	mov	r2, r3
 8017562:	693b      	ldr	r3, [r7, #16]
 8017564:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017566:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017568:	4618      	mov	r0, r3
 801756a:	f7f7 fd29 	bl	800efc0 <lwip_htons>
 801756e:	4603      	mov	r3, r0
 8017570:	461a      	mov	r2, r3
 8017572:	693b      	ldr	r3, [r7, #16]
 8017574:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017576:	693b      	ldr	r3, [r7, #16]
 8017578:	2200      	movs	r2, #0
 801757a:	741a      	strb	r2, [r3, #16]
 801757c:	2200      	movs	r2, #0
 801757e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017580:	693b      	ldr	r3, [r7, #16]
 8017582:	2200      	movs	r2, #0
 8017584:	749a      	strb	r2, [r3, #18]
 8017586:	2200      	movs	r2, #0
 8017588:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801758a:	697b      	ldr	r3, [r7, #20]
}
 801758c:	4618      	mov	r0, r3
 801758e:	3718      	adds	r7, #24
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}
 8017594:	0801e024 	.word	0x0801e024
 8017598:	0801e740 	.word	0x0801e740
 801759c:	0801e0bc 	.word	0x0801e0bc

080175a0 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80175a0:	b5b0      	push	{r4, r5, r7, lr}
 80175a2:	b08a      	sub	sp, #40	; 0x28
 80175a4:	af04      	add	r7, sp, #16
 80175a6:	60f8      	str	r0, [r7, #12]
 80175a8:	607b      	str	r3, [r7, #4]
 80175aa:	460b      	mov	r3, r1
 80175ac:	817b      	strh	r3, [r7, #10]
 80175ae:	4613      	mov	r3, r2
 80175b0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d106      	bne.n	80175c6 <tcp_output_alloc_header+0x26>
 80175b8:	4b15      	ldr	r3, [pc, #84]	; (8017610 <tcp_output_alloc_header+0x70>)
 80175ba:	f240 7242 	movw	r2, #1858	; 0x742
 80175be:	4915      	ldr	r1, [pc, #84]	; (8017614 <tcp_output_alloc_header+0x74>)
 80175c0:	4815      	ldr	r0, [pc, #84]	; (8017618 <tcp_output_alloc_header+0x78>)
 80175c2:	f001 fcc3 	bl	8018f4c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80175c6:	68fb      	ldr	r3, [r7, #12]
 80175c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80175ca:	68fb      	ldr	r3, [r7, #12]
 80175cc:	8adb      	ldrh	r3, [r3, #22]
 80175ce:	68fa      	ldr	r2, [r7, #12]
 80175d0:	8b12      	ldrh	r2, [r2, #24]
 80175d2:	68f9      	ldr	r1, [r7, #12]
 80175d4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80175d6:	893d      	ldrh	r5, [r7, #8]
 80175d8:	897c      	ldrh	r4, [r7, #10]
 80175da:	9103      	str	r1, [sp, #12]
 80175dc:	2110      	movs	r1, #16
 80175de:	9102      	str	r1, [sp, #8]
 80175e0:	9201      	str	r2, [sp, #4]
 80175e2:	9300      	str	r3, [sp, #0]
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	462a      	mov	r2, r5
 80175e8:	4621      	mov	r1, r4
 80175ea:	f7ff ff67 	bl	80174bc <tcp_output_alloc_header_common>
 80175ee:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80175f0:	697b      	ldr	r3, [r7, #20]
 80175f2:	2b00      	cmp	r3, #0
 80175f4:	d006      	beq.n	8017604 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80175f6:	68fb      	ldr	r3, [r7, #12]
 80175f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175fa:	68fa      	ldr	r2, [r7, #12]
 80175fc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80175fe:	441a      	add	r2, r3
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017604:	697b      	ldr	r3, [r7, #20]
}
 8017606:	4618      	mov	r0, r3
 8017608:	3718      	adds	r7, #24
 801760a:	46bd      	mov	sp, r7
 801760c:	bdb0      	pop	{r4, r5, r7, pc}
 801760e:	bf00      	nop
 8017610:	0801e024 	.word	0x0801e024
 8017614:	0801e770 	.word	0x0801e770
 8017618:	0801e0bc 	.word	0x0801e0bc

0801761c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801761c:	b580      	push	{r7, lr}
 801761e:	b088      	sub	sp, #32
 8017620:	af00      	add	r7, sp, #0
 8017622:	60f8      	str	r0, [r7, #12]
 8017624:	60b9      	str	r1, [r7, #8]
 8017626:	4611      	mov	r1, r2
 8017628:	461a      	mov	r2, r3
 801762a:	460b      	mov	r3, r1
 801762c:	71fb      	strb	r3, [r7, #7]
 801762e:	4613      	mov	r3, r2
 8017630:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017632:	2300      	movs	r3, #0
 8017634:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017636:	68bb      	ldr	r3, [r7, #8]
 8017638:	2b00      	cmp	r3, #0
 801763a:	d106      	bne.n	801764a <tcp_output_fill_options+0x2e>
 801763c:	4b13      	ldr	r3, [pc, #76]	; (801768c <tcp_output_fill_options+0x70>)
 801763e:	f240 7256 	movw	r2, #1878	; 0x756
 8017642:	4913      	ldr	r1, [pc, #76]	; (8017690 <tcp_output_fill_options+0x74>)
 8017644:	4813      	ldr	r0, [pc, #76]	; (8017694 <tcp_output_fill_options+0x78>)
 8017646:	f001 fc81 	bl	8018f4c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801764a:	68bb      	ldr	r3, [r7, #8]
 801764c:	685b      	ldr	r3, [r3, #4]
 801764e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017650:	69bb      	ldr	r3, [r7, #24]
 8017652:	3314      	adds	r3, #20
 8017654:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017656:	69bb      	ldr	r3, [r7, #24]
 8017658:	f103 0214 	add.w	r2, r3, #20
 801765c:	8bfb      	ldrh	r3, [r7, #30]
 801765e:	009b      	lsls	r3, r3, #2
 8017660:	4619      	mov	r1, r3
 8017662:	79fb      	ldrb	r3, [r7, #7]
 8017664:	009b      	lsls	r3, r3, #2
 8017666:	f003 0304 	and.w	r3, r3, #4
 801766a:	440b      	add	r3, r1
 801766c:	4413      	add	r3, r2
 801766e:	697a      	ldr	r2, [r7, #20]
 8017670:	429a      	cmp	r2, r3
 8017672:	d006      	beq.n	8017682 <tcp_output_fill_options+0x66>
 8017674:	4b05      	ldr	r3, [pc, #20]	; (801768c <tcp_output_fill_options+0x70>)
 8017676:	f240 7275 	movw	r2, #1909	; 0x775
 801767a:	4907      	ldr	r1, [pc, #28]	; (8017698 <tcp_output_fill_options+0x7c>)
 801767c:	4805      	ldr	r0, [pc, #20]	; (8017694 <tcp_output_fill_options+0x78>)
 801767e:	f001 fc65 	bl	8018f4c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017682:	bf00      	nop
 8017684:	3720      	adds	r7, #32
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}
 801768a:	bf00      	nop
 801768c:	0801e024 	.word	0x0801e024
 8017690:	0801e798 	.word	0x0801e798
 8017694:	0801e0bc 	.word	0x0801e0bc
 8017698:	0801e690 	.word	0x0801e690

0801769c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801769c:	b580      	push	{r7, lr}
 801769e:	b08a      	sub	sp, #40	; 0x28
 80176a0:	af04      	add	r7, sp, #16
 80176a2:	60f8      	str	r0, [r7, #12]
 80176a4:	60b9      	str	r1, [r7, #8]
 80176a6:	607a      	str	r2, [r7, #4]
 80176a8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80176aa:	68bb      	ldr	r3, [r7, #8]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d106      	bne.n	80176be <tcp_output_control_segment+0x22>
 80176b0:	4b1c      	ldr	r3, [pc, #112]	; (8017724 <tcp_output_control_segment+0x88>)
 80176b2:	f240 7287 	movw	r2, #1927	; 0x787
 80176b6:	491c      	ldr	r1, [pc, #112]	; (8017728 <tcp_output_control_segment+0x8c>)
 80176b8:	481c      	ldr	r0, [pc, #112]	; (801772c <tcp_output_control_segment+0x90>)
 80176ba:	f001 fc47 	bl	8018f4c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80176be:	683a      	ldr	r2, [r7, #0]
 80176c0:	6879      	ldr	r1, [r7, #4]
 80176c2:	68f8      	ldr	r0, [r7, #12]
 80176c4:	f7fe fae8 	bl	8015c98 <tcp_route>
 80176c8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80176ca:	693b      	ldr	r3, [r7, #16]
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d102      	bne.n	80176d6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80176d0:	23fc      	movs	r3, #252	; 0xfc
 80176d2:	75fb      	strb	r3, [r7, #23]
 80176d4:	e01c      	b.n	8017710 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d006      	beq.n	80176ea <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80176dc:	68fb      	ldr	r3, [r7, #12]
 80176de:	7adb      	ldrb	r3, [r3, #11]
 80176e0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80176e2:	68fb      	ldr	r3, [r7, #12]
 80176e4:	7a9b      	ldrb	r3, [r3, #10]
 80176e6:	757b      	strb	r3, [r7, #21]
 80176e8:	e003      	b.n	80176f2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80176ea:	23ff      	movs	r3, #255	; 0xff
 80176ec:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80176ee:	2300      	movs	r3, #0
 80176f0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80176f2:	7dba      	ldrb	r2, [r7, #22]
 80176f4:	693b      	ldr	r3, [r7, #16]
 80176f6:	9302      	str	r3, [sp, #8]
 80176f8:	2306      	movs	r3, #6
 80176fa:	9301      	str	r3, [sp, #4]
 80176fc:	7d7b      	ldrb	r3, [r7, #21]
 80176fe:	9300      	str	r3, [sp, #0]
 8017700:	4613      	mov	r3, r2
 8017702:	683a      	ldr	r2, [r7, #0]
 8017704:	6879      	ldr	r1, [r7, #4]
 8017706:	68b8      	ldr	r0, [r7, #8]
 8017708:	f7f6 fbca 	bl	800dea0 <ip4_output_if>
 801770c:	4603      	mov	r3, r0
 801770e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017710:	68b8      	ldr	r0, [r7, #8]
 8017712:	f7fa f839 	bl	8011788 <pbuf_free>
  return err;
 8017716:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801771a:	4618      	mov	r0, r3
 801771c:	3718      	adds	r7, #24
 801771e:	46bd      	mov	sp, r7
 8017720:	bd80      	pop	{r7, pc}
 8017722:	bf00      	nop
 8017724:	0801e024 	.word	0x0801e024
 8017728:	0801e7c0 	.word	0x0801e7c0
 801772c:	0801e0bc 	.word	0x0801e0bc

08017730 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017730:	b590      	push	{r4, r7, lr}
 8017732:	b08b      	sub	sp, #44	; 0x2c
 8017734:	af04      	add	r7, sp, #16
 8017736:	60f8      	str	r0, [r7, #12]
 8017738:	60b9      	str	r1, [r7, #8]
 801773a:	607a      	str	r2, [r7, #4]
 801773c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	2b00      	cmp	r3, #0
 8017742:	d106      	bne.n	8017752 <tcp_rst+0x22>
 8017744:	4b1f      	ldr	r3, [pc, #124]	; (80177c4 <tcp_rst+0x94>)
 8017746:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801774a:	491f      	ldr	r1, [pc, #124]	; (80177c8 <tcp_rst+0x98>)
 801774c:	481f      	ldr	r0, [pc, #124]	; (80177cc <tcp_rst+0x9c>)
 801774e:	f001 fbfd 	bl	8018f4c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017754:	2b00      	cmp	r3, #0
 8017756:	d106      	bne.n	8017766 <tcp_rst+0x36>
 8017758:	4b1a      	ldr	r3, [pc, #104]	; (80177c4 <tcp_rst+0x94>)
 801775a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801775e:	491c      	ldr	r1, [pc, #112]	; (80177d0 <tcp_rst+0xa0>)
 8017760:	481a      	ldr	r0, [pc, #104]	; (80177cc <tcp_rst+0x9c>)
 8017762:	f001 fbf3 	bl	8018f4c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017766:	2300      	movs	r3, #0
 8017768:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801776a:	f646 030b 	movw	r3, #26635	; 0x680b
 801776e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017770:	7dfb      	ldrb	r3, [r7, #23]
 8017772:	b29c      	uxth	r4, r3
 8017774:	68b8      	ldr	r0, [r7, #8]
 8017776:	f7f7 fc38 	bl	800efea <lwip_htonl>
 801777a:	4602      	mov	r2, r0
 801777c:	8abb      	ldrh	r3, [r7, #20]
 801777e:	9303      	str	r3, [sp, #12]
 8017780:	2314      	movs	r3, #20
 8017782:	9302      	str	r3, [sp, #8]
 8017784:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017786:	9301      	str	r3, [sp, #4]
 8017788:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801778a:	9300      	str	r3, [sp, #0]
 801778c:	4613      	mov	r3, r2
 801778e:	2200      	movs	r2, #0
 8017790:	4621      	mov	r1, r4
 8017792:	6878      	ldr	r0, [r7, #4]
 8017794:	f7ff fe92 	bl	80174bc <tcp_output_alloc_header_common>
 8017798:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801779a:	693b      	ldr	r3, [r7, #16]
 801779c:	2b00      	cmp	r3, #0
 801779e:	d00c      	beq.n	80177ba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80177a0:	7dfb      	ldrb	r3, [r7, #23]
 80177a2:	2200      	movs	r2, #0
 80177a4:	6939      	ldr	r1, [r7, #16]
 80177a6:	68f8      	ldr	r0, [r7, #12]
 80177a8:	f7ff ff38 	bl	801761c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80177ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177ae:	683a      	ldr	r2, [r7, #0]
 80177b0:	6939      	ldr	r1, [r7, #16]
 80177b2:	68f8      	ldr	r0, [r7, #12]
 80177b4:	f7ff ff72 	bl	801769c <tcp_output_control_segment>
 80177b8:	e000      	b.n	80177bc <tcp_rst+0x8c>
    return;
 80177ba:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80177bc:	371c      	adds	r7, #28
 80177be:	46bd      	mov	sp, r7
 80177c0:	bd90      	pop	{r4, r7, pc}
 80177c2:	bf00      	nop
 80177c4:	0801e024 	.word	0x0801e024
 80177c8:	0801e7ec 	.word	0x0801e7ec
 80177cc:	0801e0bc 	.word	0x0801e0bc
 80177d0:	0801e808 	.word	0x0801e808

080177d4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80177d4:	b590      	push	{r4, r7, lr}
 80177d6:	b087      	sub	sp, #28
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80177dc:	2300      	movs	r3, #0
 80177de:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80177e0:	2300      	movs	r3, #0
 80177e2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d106      	bne.n	80177f8 <tcp_send_empty_ack+0x24>
 80177ea:	4b28      	ldr	r3, [pc, #160]	; (801788c <tcp_send_empty_ack+0xb8>)
 80177ec:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80177f0:	4927      	ldr	r1, [pc, #156]	; (8017890 <tcp_send_empty_ack+0xbc>)
 80177f2:	4828      	ldr	r0, [pc, #160]	; (8017894 <tcp_send_empty_ack+0xc0>)
 80177f4:	f001 fbaa 	bl	8018f4c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80177f8:	7dfb      	ldrb	r3, [r7, #23]
 80177fa:	009b      	lsls	r3, r3, #2
 80177fc:	b2db      	uxtb	r3, r3
 80177fe:	f003 0304 	and.w	r3, r3, #4
 8017802:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017804:	7d7b      	ldrb	r3, [r7, #21]
 8017806:	b29c      	uxth	r4, r3
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801780c:	4618      	mov	r0, r3
 801780e:	f7f7 fbec 	bl	800efea <lwip_htonl>
 8017812:	4603      	mov	r3, r0
 8017814:	2200      	movs	r2, #0
 8017816:	4621      	mov	r1, r4
 8017818:	6878      	ldr	r0, [r7, #4]
 801781a:	f7ff fec1 	bl	80175a0 <tcp_output_alloc_header>
 801781e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017820:	693b      	ldr	r3, [r7, #16]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d109      	bne.n	801783a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	8b5b      	ldrh	r3, [r3, #26]
 801782a:	f043 0303 	orr.w	r3, r3, #3
 801782e:	b29a      	uxth	r2, r3
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017834:	f06f 0301 	mvn.w	r3, #1
 8017838:	e023      	b.n	8017882 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801783a:	7dbb      	ldrb	r3, [r7, #22]
 801783c:	7dfa      	ldrb	r2, [r7, #23]
 801783e:	6939      	ldr	r1, [r7, #16]
 8017840:	6878      	ldr	r0, [r7, #4]
 8017842:	f7ff feeb 	bl	801761c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017846:	687a      	ldr	r2, [r7, #4]
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	3304      	adds	r3, #4
 801784c:	6939      	ldr	r1, [r7, #16]
 801784e:	6878      	ldr	r0, [r7, #4]
 8017850:	f7ff ff24 	bl	801769c <tcp_output_control_segment>
 8017854:	4603      	mov	r3, r0
 8017856:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801785c:	2b00      	cmp	r3, #0
 801785e:	d007      	beq.n	8017870 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017860:	687b      	ldr	r3, [r7, #4]
 8017862:	8b5b      	ldrh	r3, [r3, #26]
 8017864:	f043 0303 	orr.w	r3, r3, #3
 8017868:	b29a      	uxth	r2, r3
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	835a      	strh	r2, [r3, #26]
 801786e:	e006      	b.n	801787e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	8b5b      	ldrh	r3, [r3, #26]
 8017874:	f023 0303 	bic.w	r3, r3, #3
 8017878:	b29a      	uxth	r2, r3
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801787e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017882:	4618      	mov	r0, r3
 8017884:	371c      	adds	r7, #28
 8017886:	46bd      	mov	sp, r7
 8017888:	bd90      	pop	{r4, r7, pc}
 801788a:	bf00      	nop
 801788c:	0801e024 	.word	0x0801e024
 8017890:	0801e824 	.word	0x0801e824
 8017894:	0801e0bc 	.word	0x0801e0bc

08017898 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017898:	b590      	push	{r4, r7, lr}
 801789a:	b087      	sub	sp, #28
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80178a0:	2300      	movs	r3, #0
 80178a2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	2b00      	cmp	r3, #0
 80178a8:	d106      	bne.n	80178b8 <tcp_keepalive+0x20>
 80178aa:	4b18      	ldr	r3, [pc, #96]	; (801790c <tcp_keepalive+0x74>)
 80178ac:	f640 0224 	movw	r2, #2084	; 0x824
 80178b0:	4917      	ldr	r1, [pc, #92]	; (8017910 <tcp_keepalive+0x78>)
 80178b2:	4818      	ldr	r0, [pc, #96]	; (8017914 <tcp_keepalive+0x7c>)
 80178b4:	f001 fb4a 	bl	8018f4c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80178b8:	7dfb      	ldrb	r3, [r7, #23]
 80178ba:	b29c      	uxth	r4, r3
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80178c0:	3b01      	subs	r3, #1
 80178c2:	4618      	mov	r0, r3
 80178c4:	f7f7 fb91 	bl	800efea <lwip_htonl>
 80178c8:	4603      	mov	r3, r0
 80178ca:	2200      	movs	r2, #0
 80178cc:	4621      	mov	r1, r4
 80178ce:	6878      	ldr	r0, [r7, #4]
 80178d0:	f7ff fe66 	bl	80175a0 <tcp_output_alloc_header>
 80178d4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80178d6:	693b      	ldr	r3, [r7, #16]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d102      	bne.n	80178e2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80178dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80178e0:	e010      	b.n	8017904 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80178e2:	7dfb      	ldrb	r3, [r7, #23]
 80178e4:	2200      	movs	r2, #0
 80178e6:	6939      	ldr	r1, [r7, #16]
 80178e8:	6878      	ldr	r0, [r7, #4]
 80178ea:	f7ff fe97 	bl	801761c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80178ee:	687a      	ldr	r2, [r7, #4]
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	3304      	adds	r3, #4
 80178f4:	6939      	ldr	r1, [r7, #16]
 80178f6:	6878      	ldr	r0, [r7, #4]
 80178f8:	f7ff fed0 	bl	801769c <tcp_output_control_segment>
 80178fc:	4603      	mov	r3, r0
 80178fe:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017900:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017904:	4618      	mov	r0, r3
 8017906:	371c      	adds	r7, #28
 8017908:	46bd      	mov	sp, r7
 801790a:	bd90      	pop	{r4, r7, pc}
 801790c:	0801e024 	.word	0x0801e024
 8017910:	0801e844 	.word	0x0801e844
 8017914:	0801e0bc 	.word	0x0801e0bc

08017918 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017918:	b590      	push	{r4, r7, lr}
 801791a:	b08b      	sub	sp, #44	; 0x2c
 801791c:	af00      	add	r7, sp, #0
 801791e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017920:	2300      	movs	r3, #0
 8017922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d106      	bne.n	801793a <tcp_zero_window_probe+0x22>
 801792c:	4b4c      	ldr	r3, [pc, #304]	; (8017a60 <tcp_zero_window_probe+0x148>)
 801792e:	f640 024f 	movw	r2, #2127	; 0x84f
 8017932:	494c      	ldr	r1, [pc, #304]	; (8017a64 <tcp_zero_window_probe+0x14c>)
 8017934:	484c      	ldr	r0, [pc, #304]	; (8017a68 <tcp_zero_window_probe+0x150>)
 8017936:	f001 fb09 	bl	8018f4c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801793e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017940:	6a3b      	ldr	r3, [r7, #32]
 8017942:	2b00      	cmp	r3, #0
 8017944:	d101      	bne.n	801794a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017946:	2300      	movs	r3, #0
 8017948:	e086      	b.n	8017a58 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8017950:	2bff      	cmp	r3, #255	; 0xff
 8017952:	d007      	beq.n	8017964 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801795a:	3301      	adds	r3, #1
 801795c:	b2da      	uxtb	r2, r3
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017964:	6a3b      	ldr	r3, [r7, #32]
 8017966:	68db      	ldr	r3, [r3, #12]
 8017968:	899b      	ldrh	r3, [r3, #12]
 801796a:	b29b      	uxth	r3, r3
 801796c:	4618      	mov	r0, r3
 801796e:	f7f7 fb27 	bl	800efc0 <lwip_htons>
 8017972:	4603      	mov	r3, r0
 8017974:	b2db      	uxtb	r3, r3
 8017976:	f003 0301 	and.w	r3, r3, #1
 801797a:	2b00      	cmp	r3, #0
 801797c:	d005      	beq.n	801798a <tcp_zero_window_probe+0x72>
 801797e:	6a3b      	ldr	r3, [r7, #32]
 8017980:	891b      	ldrh	r3, [r3, #8]
 8017982:	2b00      	cmp	r3, #0
 8017984:	d101      	bne.n	801798a <tcp_zero_window_probe+0x72>
 8017986:	2301      	movs	r3, #1
 8017988:	e000      	b.n	801798c <tcp_zero_window_probe+0x74>
 801798a:	2300      	movs	r3, #0
 801798c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801798e:	7ffb      	ldrb	r3, [r7, #31]
 8017990:	2b00      	cmp	r3, #0
 8017992:	bf0c      	ite	eq
 8017994:	2301      	moveq	r3, #1
 8017996:	2300      	movne	r3, #0
 8017998:	b2db      	uxtb	r3, r3
 801799a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801799c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179a0:	b299      	uxth	r1, r3
 80179a2:	6a3b      	ldr	r3, [r7, #32]
 80179a4:	68db      	ldr	r3, [r3, #12]
 80179a6:	685b      	ldr	r3, [r3, #4]
 80179a8:	8bba      	ldrh	r2, [r7, #28]
 80179aa:	6878      	ldr	r0, [r7, #4]
 80179ac:	f7ff fdf8 	bl	80175a0 <tcp_output_alloc_header>
 80179b0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80179b2:	69bb      	ldr	r3, [r7, #24]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d102      	bne.n	80179be <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80179b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80179bc:	e04c      	b.n	8017a58 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80179be:	69bb      	ldr	r3, [r7, #24]
 80179c0:	685b      	ldr	r3, [r3, #4]
 80179c2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80179c4:	7ffb      	ldrb	r3, [r7, #31]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d011      	beq.n	80179ee <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80179ca:	697b      	ldr	r3, [r7, #20]
 80179cc:	899b      	ldrh	r3, [r3, #12]
 80179ce:	b29b      	uxth	r3, r3
 80179d0:	b21b      	sxth	r3, r3
 80179d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80179d6:	b21c      	sxth	r4, r3
 80179d8:	2011      	movs	r0, #17
 80179da:	f7f7 faf1 	bl	800efc0 <lwip_htons>
 80179de:	4603      	mov	r3, r0
 80179e0:	b21b      	sxth	r3, r3
 80179e2:	4323      	orrs	r3, r4
 80179e4:	b21b      	sxth	r3, r3
 80179e6:	b29a      	uxth	r2, r3
 80179e8:	697b      	ldr	r3, [r7, #20]
 80179ea:	819a      	strh	r2, [r3, #12]
 80179ec:	e010      	b.n	8017a10 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80179ee:	69bb      	ldr	r3, [r7, #24]
 80179f0:	685b      	ldr	r3, [r3, #4]
 80179f2:	3314      	adds	r3, #20
 80179f4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80179f6:	6a3b      	ldr	r3, [r7, #32]
 80179f8:	6858      	ldr	r0, [r3, #4]
 80179fa:	6a3b      	ldr	r3, [r7, #32]
 80179fc:	685b      	ldr	r3, [r3, #4]
 80179fe:	891a      	ldrh	r2, [r3, #8]
 8017a00:	6a3b      	ldr	r3, [r7, #32]
 8017a02:	891b      	ldrh	r3, [r3, #8]
 8017a04:	1ad3      	subs	r3, r2, r3
 8017a06:	b29b      	uxth	r3, r3
 8017a08:	2201      	movs	r2, #1
 8017a0a:	6939      	ldr	r1, [r7, #16]
 8017a0c:	f7fa f8c2 	bl	8011b94 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017a10:	6a3b      	ldr	r3, [r7, #32]
 8017a12:	68db      	ldr	r3, [r3, #12]
 8017a14:	685b      	ldr	r3, [r3, #4]
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7f7 fae7 	bl	800efea <lwip_htonl>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	3301      	adds	r3, #1
 8017a20:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	1ad3      	subs	r3, r2, r3
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	da02      	bge.n	8017a34 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	68fa      	ldr	r2, [r7, #12]
 8017a32:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a38:	2200      	movs	r2, #0
 8017a3a:	69b9      	ldr	r1, [r7, #24]
 8017a3c:	6878      	ldr	r0, [r7, #4]
 8017a3e:	f7ff fded 	bl	801761c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017a42:	687a      	ldr	r2, [r7, #4]
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	3304      	adds	r3, #4
 8017a48:	69b9      	ldr	r1, [r7, #24]
 8017a4a:	6878      	ldr	r0, [r7, #4]
 8017a4c:	f7ff fe26 	bl	801769c <tcp_output_control_segment>
 8017a50:	4603      	mov	r3, r0
 8017a52:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017a54:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017a58:	4618      	mov	r0, r3
 8017a5a:	372c      	adds	r7, #44	; 0x2c
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bd90      	pop	{r4, r7, pc}
 8017a60:	0801e024 	.word	0x0801e024
 8017a64:	0801e860 	.word	0x0801e860
 8017a68:	0801e0bc 	.word	0x0801e0bc

08017a6c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017a6c:	b580      	push	{r7, lr}
 8017a6e:	b082      	sub	sp, #8
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017a74:	f7fa faf8 	bl	8012068 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017a78:	4b0a      	ldr	r3, [pc, #40]	; (8017aa4 <tcpip_tcp_timer+0x38>)
 8017a7a:	681b      	ldr	r3, [r3, #0]
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d103      	bne.n	8017a88 <tcpip_tcp_timer+0x1c>
 8017a80:	4b09      	ldr	r3, [pc, #36]	; (8017aa8 <tcpip_tcp_timer+0x3c>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d005      	beq.n	8017a94 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017a88:	2200      	movs	r2, #0
 8017a8a:	4908      	ldr	r1, [pc, #32]	; (8017aac <tcpip_tcp_timer+0x40>)
 8017a8c:	20fa      	movs	r0, #250	; 0xfa
 8017a8e:	f000 f8f3 	bl	8017c78 <sys_timeout>
 8017a92:	e003      	b.n	8017a9c <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017a94:	4b06      	ldr	r3, [pc, #24]	; (8017ab0 <tcpip_tcp_timer+0x44>)
 8017a96:	2200      	movs	r2, #0
 8017a98:	601a      	str	r2, [r3, #0]
  }
}
 8017a9a:	bf00      	nop
 8017a9c:	bf00      	nop
 8017a9e:	3708      	adds	r7, #8
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bd80      	pop	{r7, pc}
 8017aa4:	2400b2a4 	.word	0x2400b2a4
 8017aa8:	2400b2b4 	.word	0x2400b2b4
 8017aac:	08017a6d 	.word	0x08017a6d
 8017ab0:	240071d8 	.word	0x240071d8

08017ab4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017ab4:	b580      	push	{r7, lr}
 8017ab6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017ab8:	4b0a      	ldr	r3, [pc, #40]	; (8017ae4 <tcp_timer_needed+0x30>)
 8017aba:	681b      	ldr	r3, [r3, #0]
 8017abc:	2b00      	cmp	r3, #0
 8017abe:	d10f      	bne.n	8017ae0 <tcp_timer_needed+0x2c>
 8017ac0:	4b09      	ldr	r3, [pc, #36]	; (8017ae8 <tcp_timer_needed+0x34>)
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	2b00      	cmp	r3, #0
 8017ac6:	d103      	bne.n	8017ad0 <tcp_timer_needed+0x1c>
 8017ac8:	4b08      	ldr	r3, [pc, #32]	; (8017aec <tcp_timer_needed+0x38>)
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d007      	beq.n	8017ae0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017ad0:	4b04      	ldr	r3, [pc, #16]	; (8017ae4 <tcp_timer_needed+0x30>)
 8017ad2:	2201      	movs	r2, #1
 8017ad4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017ad6:	2200      	movs	r2, #0
 8017ad8:	4905      	ldr	r1, [pc, #20]	; (8017af0 <tcp_timer_needed+0x3c>)
 8017ada:	20fa      	movs	r0, #250	; 0xfa
 8017adc:	f000 f8cc 	bl	8017c78 <sys_timeout>
  }
}
 8017ae0:	bf00      	nop
 8017ae2:	bd80      	pop	{r7, pc}
 8017ae4:	240071d8 	.word	0x240071d8
 8017ae8:	2400b2a4 	.word	0x2400b2a4
 8017aec:	2400b2b4 	.word	0x2400b2b4
 8017af0:	08017a6d 	.word	0x08017a6d

08017af4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017af4:	b580      	push	{r7, lr}
 8017af6:	b086      	sub	sp, #24
 8017af8:	af00      	add	r7, sp, #0
 8017afa:	60f8      	str	r0, [r7, #12]
 8017afc:	60b9      	str	r1, [r7, #8]
 8017afe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017b00:	200a      	movs	r0, #10
 8017b02:	f7f8 ff51 	bl	80109a8 <memp_malloc>
 8017b06:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017b08:	693b      	ldr	r3, [r7, #16]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d109      	bne.n	8017b22 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017b0e:	693b      	ldr	r3, [r7, #16]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d151      	bne.n	8017bb8 <sys_timeout_abs+0xc4>
 8017b14:	4b2a      	ldr	r3, [pc, #168]	; (8017bc0 <sys_timeout_abs+0xcc>)
 8017b16:	22be      	movs	r2, #190	; 0xbe
 8017b18:	492a      	ldr	r1, [pc, #168]	; (8017bc4 <sys_timeout_abs+0xd0>)
 8017b1a:	482b      	ldr	r0, [pc, #172]	; (8017bc8 <sys_timeout_abs+0xd4>)
 8017b1c:	f001 fa16 	bl	8018f4c <iprintf>
    return;
 8017b20:	e04a      	b.n	8017bb8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017b22:	693b      	ldr	r3, [r7, #16]
 8017b24:	2200      	movs	r2, #0
 8017b26:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017b28:	693b      	ldr	r3, [r7, #16]
 8017b2a:	68ba      	ldr	r2, [r7, #8]
 8017b2c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017b2e:	693b      	ldr	r3, [r7, #16]
 8017b30:	687a      	ldr	r2, [r7, #4]
 8017b32:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017b34:	693b      	ldr	r3, [r7, #16]
 8017b36:	68fa      	ldr	r2, [r7, #12]
 8017b38:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017b3a:	4b24      	ldr	r3, [pc, #144]	; (8017bcc <sys_timeout_abs+0xd8>)
 8017b3c:	681b      	ldr	r3, [r3, #0]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d103      	bne.n	8017b4a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017b42:	4a22      	ldr	r2, [pc, #136]	; (8017bcc <sys_timeout_abs+0xd8>)
 8017b44:	693b      	ldr	r3, [r7, #16]
 8017b46:	6013      	str	r3, [r2, #0]
    return;
 8017b48:	e037      	b.n	8017bba <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017b4a:	693b      	ldr	r3, [r7, #16]
 8017b4c:	685a      	ldr	r2, [r3, #4]
 8017b4e:	4b1f      	ldr	r3, [pc, #124]	; (8017bcc <sys_timeout_abs+0xd8>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	685b      	ldr	r3, [r3, #4]
 8017b54:	1ad3      	subs	r3, r2, r3
 8017b56:	0fdb      	lsrs	r3, r3, #31
 8017b58:	f003 0301 	and.w	r3, r3, #1
 8017b5c:	b2db      	uxtb	r3, r3
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d007      	beq.n	8017b72 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017b62:	4b1a      	ldr	r3, [pc, #104]	; (8017bcc <sys_timeout_abs+0xd8>)
 8017b64:	681a      	ldr	r2, [r3, #0]
 8017b66:	693b      	ldr	r3, [r7, #16]
 8017b68:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017b6a:	4a18      	ldr	r2, [pc, #96]	; (8017bcc <sys_timeout_abs+0xd8>)
 8017b6c:	693b      	ldr	r3, [r7, #16]
 8017b6e:	6013      	str	r3, [r2, #0]
 8017b70:	e023      	b.n	8017bba <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017b72:	4b16      	ldr	r3, [pc, #88]	; (8017bcc <sys_timeout_abs+0xd8>)
 8017b74:	681b      	ldr	r3, [r3, #0]
 8017b76:	617b      	str	r3, [r7, #20]
 8017b78:	e01a      	b.n	8017bb0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017b7a:	697b      	ldr	r3, [r7, #20]
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	2b00      	cmp	r3, #0
 8017b80:	d00b      	beq.n	8017b9a <sys_timeout_abs+0xa6>
 8017b82:	693b      	ldr	r3, [r7, #16]
 8017b84:	685a      	ldr	r2, [r3, #4]
 8017b86:	697b      	ldr	r3, [r7, #20]
 8017b88:	681b      	ldr	r3, [r3, #0]
 8017b8a:	685b      	ldr	r3, [r3, #4]
 8017b8c:	1ad3      	subs	r3, r2, r3
 8017b8e:	0fdb      	lsrs	r3, r3, #31
 8017b90:	f003 0301 	and.w	r3, r3, #1
 8017b94:	b2db      	uxtb	r3, r3
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d007      	beq.n	8017baa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017b9a:	697b      	ldr	r3, [r7, #20]
 8017b9c:	681a      	ldr	r2, [r3, #0]
 8017b9e:	693b      	ldr	r3, [r7, #16]
 8017ba0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017ba2:	697b      	ldr	r3, [r7, #20]
 8017ba4:	693a      	ldr	r2, [r7, #16]
 8017ba6:	601a      	str	r2, [r3, #0]
        break;
 8017ba8:	e007      	b.n	8017bba <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017baa:	697b      	ldr	r3, [r7, #20]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	617b      	str	r3, [r7, #20]
 8017bb0:	697b      	ldr	r3, [r7, #20]
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d1e1      	bne.n	8017b7a <sys_timeout_abs+0x86>
 8017bb6:	e000      	b.n	8017bba <sys_timeout_abs+0xc6>
    return;
 8017bb8:	bf00      	nop
      }
    }
  }
}
 8017bba:	3718      	adds	r7, #24
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bd80      	pop	{r7, pc}
 8017bc0:	0801e8a8 	.word	0x0801e8a8
 8017bc4:	0801e920 	.word	0x0801e920
 8017bc8:	0801e960 	.word	0x0801e960
 8017bcc:	240071d0 	.word	0x240071d0

08017bd0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b086      	sub	sp, #24
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017bdc:	697b      	ldr	r3, [r7, #20]
 8017bde:	685b      	ldr	r3, [r3, #4]
 8017be0:	4798      	blx	r3

  now = sys_now();
 8017be2:	f7e8 feaf 	bl	8000944 <sys_now>
 8017be6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017be8:	697b      	ldr	r3, [r7, #20]
 8017bea:	681a      	ldr	r2, [r3, #0]
 8017bec:	4b0f      	ldr	r3, [pc, #60]	; (8017c2c <lwip_cyclic_timer+0x5c>)
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	4413      	add	r3, r2
 8017bf2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017bf4:	68fa      	ldr	r2, [r7, #12]
 8017bf6:	693b      	ldr	r3, [r7, #16]
 8017bf8:	1ad3      	subs	r3, r2, r3
 8017bfa:	0fdb      	lsrs	r3, r3, #31
 8017bfc:	f003 0301 	and.w	r3, r3, #1
 8017c00:	b2db      	uxtb	r3, r3
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d009      	beq.n	8017c1a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017c06:	697b      	ldr	r3, [r7, #20]
 8017c08:	681a      	ldr	r2, [r3, #0]
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	4413      	add	r3, r2
 8017c0e:	687a      	ldr	r2, [r7, #4]
 8017c10:	4907      	ldr	r1, [pc, #28]	; (8017c30 <lwip_cyclic_timer+0x60>)
 8017c12:	4618      	mov	r0, r3
 8017c14:	f7ff ff6e 	bl	8017af4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017c18:	e004      	b.n	8017c24 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017c1a:	687a      	ldr	r2, [r7, #4]
 8017c1c:	4904      	ldr	r1, [pc, #16]	; (8017c30 <lwip_cyclic_timer+0x60>)
 8017c1e:	68f8      	ldr	r0, [r7, #12]
 8017c20:	f7ff ff68 	bl	8017af4 <sys_timeout_abs>
}
 8017c24:	bf00      	nop
 8017c26:	3718      	adds	r7, #24
 8017c28:	46bd      	mov	sp, r7
 8017c2a:	bd80      	pop	{r7, pc}
 8017c2c:	240071d4 	.word	0x240071d4
 8017c30:	08017bd1 	.word	0x08017bd1

08017c34 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017c34:	b580      	push	{r7, lr}
 8017c36:	b082      	sub	sp, #8
 8017c38:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c3a:	2301      	movs	r3, #1
 8017c3c:	607b      	str	r3, [r7, #4]
 8017c3e:	e00e      	b.n	8017c5e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017c40:	4a0b      	ldr	r2, [pc, #44]	; (8017c70 <sys_timeouts_init+0x3c>)
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	00db      	lsls	r3, r3, #3
 8017c4c:	4a08      	ldr	r2, [pc, #32]	; (8017c70 <sys_timeouts_init+0x3c>)
 8017c4e:	4413      	add	r3, r2
 8017c50:	461a      	mov	r2, r3
 8017c52:	4908      	ldr	r1, [pc, #32]	; (8017c74 <sys_timeouts_init+0x40>)
 8017c54:	f000 f810 	bl	8017c78 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	3301      	adds	r3, #1
 8017c5c:	607b      	str	r3, [r7, #4]
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	2b03      	cmp	r3, #3
 8017c62:	d9ed      	bls.n	8017c40 <sys_timeouts_init+0xc>
  }
}
 8017c64:	bf00      	nop
 8017c66:	bf00      	nop
 8017c68:	3708      	adds	r7, #8
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	bd80      	pop	{r7, pc}
 8017c6e:	bf00      	nop
 8017c70:	0801e884 	.word	0x0801e884
 8017c74:	08017bd1 	.word	0x08017bd1

08017c78 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017c78:	b580      	push	{r7, lr}
 8017c7a:	b086      	sub	sp, #24
 8017c7c:	af00      	add	r7, sp, #0
 8017c7e:	60f8      	str	r0, [r7, #12]
 8017c80:	60b9      	str	r1, [r7, #8]
 8017c82:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017c8a:	d306      	bcc.n	8017c9a <sys_timeout+0x22>
 8017c8c:	4b0a      	ldr	r3, [pc, #40]	; (8017cb8 <sys_timeout+0x40>)
 8017c8e:	f240 1229 	movw	r2, #297	; 0x129
 8017c92:	490a      	ldr	r1, [pc, #40]	; (8017cbc <sys_timeout+0x44>)
 8017c94:	480a      	ldr	r0, [pc, #40]	; (8017cc0 <sys_timeout+0x48>)
 8017c96:	f001 f959 	bl	8018f4c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017c9a:	f7e8 fe53 	bl	8000944 <sys_now>
 8017c9e:	4602      	mov	r2, r0
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	4413      	add	r3, r2
 8017ca4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017ca6:	687a      	ldr	r2, [r7, #4]
 8017ca8:	68b9      	ldr	r1, [r7, #8]
 8017caa:	6978      	ldr	r0, [r7, #20]
 8017cac:	f7ff ff22 	bl	8017af4 <sys_timeout_abs>
#endif
}
 8017cb0:	bf00      	nop
 8017cb2:	3718      	adds	r7, #24
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bd80      	pop	{r7, pc}
 8017cb8:	0801e8a8 	.word	0x0801e8a8
 8017cbc:	0801e988 	.word	0x0801e988
 8017cc0:	0801e960 	.word	0x0801e960

08017cc4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017cc4:	b580      	push	{r7, lr}
 8017cc6:	b084      	sub	sp, #16
 8017cc8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017cca:	f7e8 fe3b 	bl	8000944 <sys_now>
 8017cce:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017cd0:	4b17      	ldr	r3, [pc, #92]	; (8017d30 <sys_check_timeouts+0x6c>)
 8017cd2:	681b      	ldr	r3, [r3, #0]
 8017cd4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017cd6:	68bb      	ldr	r3, [r7, #8]
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d022      	beq.n	8017d22 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017cdc:	68bb      	ldr	r3, [r7, #8]
 8017cde:	685b      	ldr	r3, [r3, #4]
 8017ce0:	68fa      	ldr	r2, [r7, #12]
 8017ce2:	1ad3      	subs	r3, r2, r3
 8017ce4:	0fdb      	lsrs	r3, r3, #31
 8017ce6:	f003 0301 	and.w	r3, r3, #1
 8017cea:	b2db      	uxtb	r3, r3
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d11a      	bne.n	8017d26 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017cf0:	68bb      	ldr	r3, [r7, #8]
 8017cf2:	681b      	ldr	r3, [r3, #0]
 8017cf4:	4a0e      	ldr	r2, [pc, #56]	; (8017d30 <sys_check_timeouts+0x6c>)
 8017cf6:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017cf8:	68bb      	ldr	r3, [r7, #8]
 8017cfa:	689b      	ldr	r3, [r3, #8]
 8017cfc:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017cfe:	68bb      	ldr	r3, [r7, #8]
 8017d00:	68db      	ldr	r3, [r3, #12]
 8017d02:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017d04:	68bb      	ldr	r3, [r7, #8]
 8017d06:	685b      	ldr	r3, [r3, #4]
 8017d08:	4a0a      	ldr	r2, [pc, #40]	; (8017d34 <sys_check_timeouts+0x70>)
 8017d0a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017d0c:	68b9      	ldr	r1, [r7, #8]
 8017d0e:	200a      	movs	r0, #10
 8017d10:	f7f8 fec0 	bl	8010a94 <memp_free>
    if (handler != NULL) {
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	d0da      	beq.n	8017cd0 <sys_check_timeouts+0xc>
      handler(arg);
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	6838      	ldr	r0, [r7, #0]
 8017d1e:	4798      	blx	r3
  do {
 8017d20:	e7d6      	b.n	8017cd0 <sys_check_timeouts+0xc>
      return;
 8017d22:	bf00      	nop
 8017d24:	e000      	b.n	8017d28 <sys_check_timeouts+0x64>
      return;
 8017d26:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017d28:	3710      	adds	r7, #16
 8017d2a:	46bd      	mov	sp, r7
 8017d2c:	bd80      	pop	{r7, pc}
 8017d2e:	bf00      	nop
 8017d30:	240071d0 	.word	0x240071d0
 8017d34:	240071d4 	.word	0x240071d4

08017d38 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	b082      	sub	sp, #8
 8017d3c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017d3e:	4b16      	ldr	r3, [pc, #88]	; (8017d98 <sys_timeouts_sleeptime+0x60>)
 8017d40:	681b      	ldr	r3, [r3, #0]
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d102      	bne.n	8017d4c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017d46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d4a:	e020      	b.n	8017d8e <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017d4c:	f7e8 fdfa 	bl	8000944 <sys_now>
 8017d50:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017d52:	4b11      	ldr	r3, [pc, #68]	; (8017d98 <sys_timeouts_sleeptime+0x60>)
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	685a      	ldr	r2, [r3, #4]
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	1ad3      	subs	r3, r2, r3
 8017d5c:	0fdb      	lsrs	r3, r3, #31
 8017d5e:	f003 0301 	and.w	r3, r3, #1
 8017d62:	b2db      	uxtb	r3, r3
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d001      	beq.n	8017d6c <sys_timeouts_sleeptime+0x34>
    return 0;
 8017d68:	2300      	movs	r3, #0
 8017d6a:	e010      	b.n	8017d8e <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017d6c:	4b0a      	ldr	r3, [pc, #40]	; (8017d98 <sys_timeouts_sleeptime+0x60>)
 8017d6e:	681b      	ldr	r3, [r3, #0]
 8017d70:	685a      	ldr	r2, [r3, #4]
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	1ad3      	subs	r3, r2, r3
 8017d76:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017d78:	683b      	ldr	r3, [r7, #0]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	da06      	bge.n	8017d8c <sys_timeouts_sleeptime+0x54>
 8017d7e:	4b07      	ldr	r3, [pc, #28]	; (8017d9c <sys_timeouts_sleeptime+0x64>)
 8017d80:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017d84:	4906      	ldr	r1, [pc, #24]	; (8017da0 <sys_timeouts_sleeptime+0x68>)
 8017d86:	4807      	ldr	r0, [pc, #28]	; (8017da4 <sys_timeouts_sleeptime+0x6c>)
 8017d88:	f001 f8e0 	bl	8018f4c <iprintf>
    return ret;
 8017d8c:	683b      	ldr	r3, [r7, #0]
  }
}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	3708      	adds	r7, #8
 8017d92:	46bd      	mov	sp, r7
 8017d94:	bd80      	pop	{r7, pc}
 8017d96:	bf00      	nop
 8017d98:	240071d0 	.word	0x240071d0
 8017d9c:	0801e8a8 	.word	0x0801e8a8
 8017da0:	0801e9c0 	.word	0x0801e9c0
 8017da4:	0801e960 	.word	0x0801e960

08017da8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017da8:	b580      	push	{r7, lr}
 8017daa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017dac:	f001 f8e6 	bl	8018f7c <rand>
 8017db0:	4603      	mov	r3, r0
 8017db2:	b29b      	uxth	r3, r3
 8017db4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017db8:	b29b      	uxth	r3, r3
 8017dba:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017dbe:	b29a      	uxth	r2, r3
 8017dc0:	4b01      	ldr	r3, [pc, #4]	; (8017dc8 <udp_init+0x20>)
 8017dc2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017dc4:	bf00      	nop
 8017dc6:	bd80      	pop	{r7, pc}
 8017dc8:	2400004c 	.word	0x2400004c

08017dcc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017dcc:	b480      	push	{r7}
 8017dce:	b083      	sub	sp, #12
 8017dd0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017dd6:	4b17      	ldr	r3, [pc, #92]	; (8017e34 <udp_new_port+0x68>)
 8017dd8:	881b      	ldrh	r3, [r3, #0]
 8017dda:	1c5a      	adds	r2, r3, #1
 8017ddc:	b291      	uxth	r1, r2
 8017dde:	4a15      	ldr	r2, [pc, #84]	; (8017e34 <udp_new_port+0x68>)
 8017de0:	8011      	strh	r1, [r2, #0]
 8017de2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017de6:	4293      	cmp	r3, r2
 8017de8:	d103      	bne.n	8017df2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017dea:	4b12      	ldr	r3, [pc, #72]	; (8017e34 <udp_new_port+0x68>)
 8017dec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017df0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017df2:	4b11      	ldr	r3, [pc, #68]	; (8017e38 <udp_new_port+0x6c>)
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	603b      	str	r3, [r7, #0]
 8017df8:	e011      	b.n	8017e1e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017dfa:	683b      	ldr	r3, [r7, #0]
 8017dfc:	8a5a      	ldrh	r2, [r3, #18]
 8017dfe:	4b0d      	ldr	r3, [pc, #52]	; (8017e34 <udp_new_port+0x68>)
 8017e00:	881b      	ldrh	r3, [r3, #0]
 8017e02:	429a      	cmp	r2, r3
 8017e04:	d108      	bne.n	8017e18 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017e06:	88fb      	ldrh	r3, [r7, #6]
 8017e08:	3301      	adds	r3, #1
 8017e0a:	80fb      	strh	r3, [r7, #6]
 8017e0c:	88fb      	ldrh	r3, [r7, #6]
 8017e0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017e12:	d3e0      	bcc.n	8017dd6 <udp_new_port+0xa>
        return 0;
 8017e14:	2300      	movs	r3, #0
 8017e16:	e007      	b.n	8017e28 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e18:	683b      	ldr	r3, [r7, #0]
 8017e1a:	68db      	ldr	r3, [r3, #12]
 8017e1c:	603b      	str	r3, [r7, #0]
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d1ea      	bne.n	8017dfa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017e24:	4b03      	ldr	r3, [pc, #12]	; (8017e34 <udp_new_port+0x68>)
 8017e26:	881b      	ldrh	r3, [r3, #0]
}
 8017e28:	4618      	mov	r0, r3
 8017e2a:	370c      	adds	r7, #12
 8017e2c:	46bd      	mov	sp, r7
 8017e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e32:	4770      	bx	lr
 8017e34:	2400004c 	.word	0x2400004c
 8017e38:	2400b2bc 	.word	0x2400b2bc

08017e3c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017e3c:	b580      	push	{r7, lr}
 8017e3e:	b084      	sub	sp, #16
 8017e40:	af00      	add	r7, sp, #0
 8017e42:	60f8      	str	r0, [r7, #12]
 8017e44:	60b9      	str	r1, [r7, #8]
 8017e46:	4613      	mov	r3, r2
 8017e48:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d105      	bne.n	8017e5c <udp_input_local_match+0x20>
 8017e50:	4b27      	ldr	r3, [pc, #156]	; (8017ef0 <udp_input_local_match+0xb4>)
 8017e52:	2287      	movs	r2, #135	; 0x87
 8017e54:	4927      	ldr	r1, [pc, #156]	; (8017ef4 <udp_input_local_match+0xb8>)
 8017e56:	4828      	ldr	r0, [pc, #160]	; (8017ef8 <udp_input_local_match+0xbc>)
 8017e58:	f001 f878 	bl	8018f4c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017e5c:	68bb      	ldr	r3, [r7, #8]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d105      	bne.n	8017e6e <udp_input_local_match+0x32>
 8017e62:	4b23      	ldr	r3, [pc, #140]	; (8017ef0 <udp_input_local_match+0xb4>)
 8017e64:	2288      	movs	r2, #136	; 0x88
 8017e66:	4925      	ldr	r1, [pc, #148]	; (8017efc <udp_input_local_match+0xc0>)
 8017e68:	4823      	ldr	r0, [pc, #140]	; (8017ef8 <udp_input_local_match+0xbc>)
 8017e6a:	f001 f86f 	bl	8018f4c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e6e:	68fb      	ldr	r3, [r7, #12]
 8017e70:	7a1b      	ldrb	r3, [r3, #8]
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d00b      	beq.n	8017e8e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	7a1a      	ldrb	r2, [r3, #8]
 8017e7a:	4b21      	ldr	r3, [pc, #132]	; (8017f00 <udp_input_local_match+0xc4>)
 8017e7c:	685b      	ldr	r3, [r3, #4]
 8017e7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e82:	3301      	adds	r3, #1
 8017e84:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e86:	429a      	cmp	r2, r3
 8017e88:	d001      	beq.n	8017e8e <udp_input_local_match+0x52>
    return 0;
 8017e8a:	2300      	movs	r3, #0
 8017e8c:	e02b      	b.n	8017ee6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017e8e:	79fb      	ldrb	r3, [r7, #7]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d018      	beq.n	8017ec6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d013      	beq.n	8017ec2 <udp_input_local_match+0x86>
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d00f      	beq.n	8017ec2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017ea2:	4b17      	ldr	r3, [pc, #92]	; (8017f00 <udp_input_local_match+0xc4>)
 8017ea4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017eaa:	d00a      	beq.n	8017ec2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017eac:	68fb      	ldr	r3, [r7, #12]
 8017eae:	681a      	ldr	r2, [r3, #0]
 8017eb0:	4b13      	ldr	r3, [pc, #76]	; (8017f00 <udp_input_local_match+0xc4>)
 8017eb2:	695b      	ldr	r3, [r3, #20]
 8017eb4:	405a      	eors	r2, r3
 8017eb6:	68bb      	ldr	r3, [r7, #8]
 8017eb8:	3308      	adds	r3, #8
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d110      	bne.n	8017ee4 <udp_input_local_match+0xa8>
          return 1;
 8017ec2:	2301      	movs	r3, #1
 8017ec4:	e00f      	b.n	8017ee6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d009      	beq.n	8017ee0 <udp_input_local_match+0xa4>
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d005      	beq.n	8017ee0 <udp_input_local_match+0xa4>
 8017ed4:	68fb      	ldr	r3, [r7, #12]
 8017ed6:	681a      	ldr	r2, [r3, #0]
 8017ed8:	4b09      	ldr	r3, [pc, #36]	; (8017f00 <udp_input_local_match+0xc4>)
 8017eda:	695b      	ldr	r3, [r3, #20]
 8017edc:	429a      	cmp	r2, r3
 8017ede:	d101      	bne.n	8017ee4 <udp_input_local_match+0xa8>
        return 1;
 8017ee0:	2301      	movs	r3, #1
 8017ee2:	e000      	b.n	8017ee6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017ee4:	2300      	movs	r3, #0
}
 8017ee6:	4618      	mov	r0, r3
 8017ee8:	3710      	adds	r7, #16
 8017eea:	46bd      	mov	sp, r7
 8017eec:	bd80      	pop	{r7, pc}
 8017eee:	bf00      	nop
 8017ef0:	0801e9d4 	.word	0x0801e9d4
 8017ef4:	0801ea48 	.word	0x0801ea48
 8017ef8:	0801ea6c 	.word	0x0801ea6c
 8017efc:	0801ea94 	.word	0x0801ea94
 8017f00:	24007410 	.word	0x24007410

08017f04 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017f04:	b590      	push	{r4, r7, lr}
 8017f06:	b08d      	sub	sp, #52	; 0x34
 8017f08:	af02      	add	r7, sp, #8
 8017f0a:	6078      	str	r0, [r7, #4]
 8017f0c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017f0e:	2300      	movs	r3, #0
 8017f10:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d105      	bne.n	8017f24 <udp_input+0x20>
 8017f18:	4b7c      	ldr	r3, [pc, #496]	; (801810c <udp_input+0x208>)
 8017f1a:	22cf      	movs	r2, #207	; 0xcf
 8017f1c:	497c      	ldr	r1, [pc, #496]	; (8018110 <udp_input+0x20c>)
 8017f1e:	487d      	ldr	r0, [pc, #500]	; (8018114 <udp_input+0x210>)
 8017f20:	f001 f814 	bl	8018f4c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017f24:	683b      	ldr	r3, [r7, #0]
 8017f26:	2b00      	cmp	r3, #0
 8017f28:	d105      	bne.n	8017f36 <udp_input+0x32>
 8017f2a:	4b78      	ldr	r3, [pc, #480]	; (801810c <udp_input+0x208>)
 8017f2c:	22d0      	movs	r2, #208	; 0xd0
 8017f2e:	497a      	ldr	r1, [pc, #488]	; (8018118 <udp_input+0x214>)
 8017f30:	4878      	ldr	r0, [pc, #480]	; (8018114 <udp_input+0x210>)
 8017f32:	f001 f80b 	bl	8018f4c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	895b      	ldrh	r3, [r3, #10]
 8017f3a:	2b07      	cmp	r3, #7
 8017f3c:	d803      	bhi.n	8017f46 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017f3e:	6878      	ldr	r0, [r7, #4]
 8017f40:	f7f9 fc22 	bl	8011788 <pbuf_free>
    goto end;
 8017f44:	e0de      	b.n	8018104 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	685b      	ldr	r3, [r3, #4]
 8017f4a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017f4c:	4b73      	ldr	r3, [pc, #460]	; (801811c <udp_input+0x218>)
 8017f4e:	695b      	ldr	r3, [r3, #20]
 8017f50:	4a72      	ldr	r2, [pc, #456]	; (801811c <udp_input+0x218>)
 8017f52:	6812      	ldr	r2, [r2, #0]
 8017f54:	4611      	mov	r1, r2
 8017f56:	4618      	mov	r0, r3
 8017f58:	f7f6 f87a 	bl	800e050 <ip4_addr_isbroadcast_u32>
 8017f5c:	4603      	mov	r3, r0
 8017f5e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017f60:	697b      	ldr	r3, [r7, #20]
 8017f62:	881b      	ldrh	r3, [r3, #0]
 8017f64:	b29b      	uxth	r3, r3
 8017f66:	4618      	mov	r0, r3
 8017f68:	f7f7 f82a 	bl	800efc0 <lwip_htons>
 8017f6c:	4603      	mov	r3, r0
 8017f6e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017f70:	697b      	ldr	r3, [r7, #20]
 8017f72:	885b      	ldrh	r3, [r3, #2]
 8017f74:	b29b      	uxth	r3, r3
 8017f76:	4618      	mov	r0, r3
 8017f78:	f7f7 f822 	bl	800efc0 <lwip_htons>
 8017f7c:	4603      	mov	r3, r0
 8017f7e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017f80:	2300      	movs	r3, #0
 8017f82:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017f84:	2300      	movs	r3, #0
 8017f86:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017f88:	2300      	movs	r3, #0
 8017f8a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f8c:	4b64      	ldr	r3, [pc, #400]	; (8018120 <udp_input+0x21c>)
 8017f8e:	681b      	ldr	r3, [r3, #0]
 8017f90:	627b      	str	r3, [r7, #36]	; 0x24
 8017f92:	e054      	b.n	801803e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f96:	8a5b      	ldrh	r3, [r3, #18]
 8017f98:	89fa      	ldrh	r2, [r7, #14]
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	d14a      	bne.n	8018034 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017f9e:	7cfb      	ldrb	r3, [r7, #19]
 8017fa0:	461a      	mov	r2, r3
 8017fa2:	6839      	ldr	r1, [r7, #0]
 8017fa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017fa6:	f7ff ff49 	bl	8017e3c <udp_input_local_match>
 8017faa:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017fac:	2b00      	cmp	r3, #0
 8017fae:	d041      	beq.n	8018034 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb2:	7c1b      	ldrb	r3, [r3, #16]
 8017fb4:	f003 0304 	and.w	r3, r3, #4
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d11d      	bne.n	8017ff8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017fbc:	69fb      	ldr	r3, [r7, #28]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d102      	bne.n	8017fc8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fc4:	61fb      	str	r3, [r7, #28]
 8017fc6:	e017      	b.n	8017ff8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017fc8:	7cfb      	ldrb	r3, [r7, #19]
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	d014      	beq.n	8017ff8 <udp_input+0xf4>
 8017fce:	4b53      	ldr	r3, [pc, #332]	; (801811c <udp_input+0x218>)
 8017fd0:	695b      	ldr	r3, [r3, #20]
 8017fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017fd6:	d10f      	bne.n	8017ff8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017fd8:	69fb      	ldr	r3, [r7, #28]
 8017fda:	681a      	ldr	r2, [r3, #0]
 8017fdc:	683b      	ldr	r3, [r7, #0]
 8017fde:	3304      	adds	r3, #4
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	429a      	cmp	r2, r3
 8017fe4:	d008      	beq.n	8017ff8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe8:	681a      	ldr	r2, [r3, #0]
 8017fea:	683b      	ldr	r3, [r7, #0]
 8017fec:	3304      	adds	r3, #4
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d101      	bne.n	8017ff8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ffa:	8a9b      	ldrh	r3, [r3, #20]
 8017ffc:	8a3a      	ldrh	r2, [r7, #16]
 8017ffe:	429a      	cmp	r2, r3
 8018000:	d118      	bne.n	8018034 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018004:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018006:	2b00      	cmp	r3, #0
 8018008:	d005      	beq.n	8018016 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801800a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801800c:	685a      	ldr	r2, [r3, #4]
 801800e:	4b43      	ldr	r3, [pc, #268]	; (801811c <udp_input+0x218>)
 8018010:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018012:	429a      	cmp	r2, r3
 8018014:	d10e      	bne.n	8018034 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018016:	6a3b      	ldr	r3, [r7, #32]
 8018018:	2b00      	cmp	r3, #0
 801801a:	d014      	beq.n	8018046 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801801e:	68da      	ldr	r2, [r3, #12]
 8018020:	6a3b      	ldr	r3, [r7, #32]
 8018022:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018024:	4b3e      	ldr	r3, [pc, #248]	; (8018120 <udp_input+0x21c>)
 8018026:	681a      	ldr	r2, [r3, #0]
 8018028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801802a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801802c:	4a3c      	ldr	r2, [pc, #240]	; (8018120 <udp_input+0x21c>)
 801802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018030:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018032:	e008      	b.n	8018046 <udp_input+0x142>
      }
    }

    prev = pcb;
 8018034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018036:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801803a:	68db      	ldr	r3, [r3, #12]
 801803c:	627b      	str	r3, [r7, #36]	; 0x24
 801803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018040:	2b00      	cmp	r3, #0
 8018042:	d1a7      	bne.n	8017f94 <udp_input+0x90>
 8018044:	e000      	b.n	8018048 <udp_input+0x144>
        break;
 8018046:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801804a:	2b00      	cmp	r3, #0
 801804c:	d101      	bne.n	8018052 <udp_input+0x14e>
    pcb = uncon_pcb;
 801804e:	69fb      	ldr	r3, [r7, #28]
 8018050:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018054:	2b00      	cmp	r3, #0
 8018056:	d002      	beq.n	801805e <udp_input+0x15a>
    for_us = 1;
 8018058:	2301      	movs	r3, #1
 801805a:	76fb      	strb	r3, [r7, #27]
 801805c:	e00a      	b.n	8018074 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801805e:	683b      	ldr	r3, [r7, #0]
 8018060:	3304      	adds	r3, #4
 8018062:	681a      	ldr	r2, [r3, #0]
 8018064:	4b2d      	ldr	r3, [pc, #180]	; (801811c <udp_input+0x218>)
 8018066:	695b      	ldr	r3, [r3, #20]
 8018068:	429a      	cmp	r2, r3
 801806a:	bf0c      	ite	eq
 801806c:	2301      	moveq	r3, #1
 801806e:	2300      	movne	r3, #0
 8018070:	b2db      	uxtb	r3, r3
 8018072:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018074:	7efb      	ldrb	r3, [r7, #27]
 8018076:	2b00      	cmp	r3, #0
 8018078:	d041      	beq.n	80180fe <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801807a:	2108      	movs	r1, #8
 801807c:	6878      	ldr	r0, [r7, #4]
 801807e:	f7f9 facb 	bl	8011618 <pbuf_remove_header>
 8018082:	4603      	mov	r3, r0
 8018084:	2b00      	cmp	r3, #0
 8018086:	d00a      	beq.n	801809e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018088:	4b20      	ldr	r3, [pc, #128]	; (801810c <udp_input+0x208>)
 801808a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801808e:	4925      	ldr	r1, [pc, #148]	; (8018124 <udp_input+0x220>)
 8018090:	4820      	ldr	r0, [pc, #128]	; (8018114 <udp_input+0x210>)
 8018092:	f000 ff5b 	bl	8018f4c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018096:	6878      	ldr	r0, [r7, #4]
 8018098:	f7f9 fb76 	bl	8011788 <pbuf_free>
      goto end;
 801809c:	e032      	b.n	8018104 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801809e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d012      	beq.n	80180ca <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80180a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a6:	699b      	ldr	r3, [r3, #24]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d00a      	beq.n	80180c2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80180ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ae:	699c      	ldr	r4, [r3, #24]
 80180b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180b2:	69d8      	ldr	r0, [r3, #28]
 80180b4:	8a3b      	ldrh	r3, [r7, #16]
 80180b6:	9300      	str	r3, [sp, #0]
 80180b8:	4b1b      	ldr	r3, [pc, #108]	; (8018128 <udp_input+0x224>)
 80180ba:	687a      	ldr	r2, [r7, #4]
 80180bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80180be:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80180c0:	e021      	b.n	8018106 <udp_input+0x202>
        pbuf_free(p);
 80180c2:	6878      	ldr	r0, [r7, #4]
 80180c4:	f7f9 fb60 	bl	8011788 <pbuf_free>
        goto end;
 80180c8:	e01c      	b.n	8018104 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80180ca:	7cfb      	ldrb	r3, [r7, #19]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d112      	bne.n	80180f6 <udp_input+0x1f2>
 80180d0:	4b12      	ldr	r3, [pc, #72]	; (801811c <udp_input+0x218>)
 80180d2:	695b      	ldr	r3, [r3, #20]
 80180d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80180d8:	2be0      	cmp	r3, #224	; 0xe0
 80180da:	d00c      	beq.n	80180f6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80180dc:	4b0f      	ldr	r3, [pc, #60]	; (801811c <udp_input+0x218>)
 80180de:	899b      	ldrh	r3, [r3, #12]
 80180e0:	3308      	adds	r3, #8
 80180e2:	b29b      	uxth	r3, r3
 80180e4:	b21b      	sxth	r3, r3
 80180e6:	4619      	mov	r1, r3
 80180e8:	6878      	ldr	r0, [r7, #4]
 80180ea:	f7f9 fb08 	bl	80116fe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80180ee:	2103      	movs	r1, #3
 80180f0:	6878      	ldr	r0, [r7, #4]
 80180f2:	f7f5 fc83 	bl	800d9fc <icmp_dest_unreach>
      pbuf_free(p);
 80180f6:	6878      	ldr	r0, [r7, #4]
 80180f8:	f7f9 fb46 	bl	8011788 <pbuf_free>
  return;
 80180fc:	e003      	b.n	8018106 <udp_input+0x202>
    pbuf_free(p);
 80180fe:	6878      	ldr	r0, [r7, #4]
 8018100:	f7f9 fb42 	bl	8011788 <pbuf_free>
  return;
 8018104:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018106:	372c      	adds	r7, #44	; 0x2c
 8018108:	46bd      	mov	sp, r7
 801810a:	bd90      	pop	{r4, r7, pc}
 801810c:	0801e9d4 	.word	0x0801e9d4
 8018110:	0801eabc 	.word	0x0801eabc
 8018114:	0801ea6c 	.word	0x0801ea6c
 8018118:	0801ead4 	.word	0x0801ead4
 801811c:	24007410 	.word	0x24007410
 8018120:	2400b2bc 	.word	0x2400b2bc
 8018124:	0801eaf0 	.word	0x0801eaf0
 8018128:	24007420 	.word	0x24007420

0801812c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	b082      	sub	sp, #8
 8018130:	af00      	add	r7, sp, #0
 8018132:	6078      	str	r0, [r7, #4]
 8018134:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d109      	bne.n	8018150 <udp_send+0x24>
 801813c:	4b11      	ldr	r3, [pc, #68]	; (8018184 <udp_send+0x58>)
 801813e:	f240 12d5 	movw	r2, #469	; 0x1d5
 8018142:	4911      	ldr	r1, [pc, #68]	; (8018188 <udp_send+0x5c>)
 8018144:	4811      	ldr	r0, [pc, #68]	; (801818c <udp_send+0x60>)
 8018146:	f000 ff01 	bl	8018f4c <iprintf>
 801814a:	f06f 030f 	mvn.w	r3, #15
 801814e:	e015      	b.n	801817c <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8018150:	683b      	ldr	r3, [r7, #0]
 8018152:	2b00      	cmp	r3, #0
 8018154:	d109      	bne.n	801816a <udp_send+0x3e>
 8018156:	4b0b      	ldr	r3, [pc, #44]	; (8018184 <udp_send+0x58>)
 8018158:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801815c:	490c      	ldr	r1, [pc, #48]	; (8018190 <udp_send+0x64>)
 801815e:	480b      	ldr	r0, [pc, #44]	; (801818c <udp_send+0x60>)
 8018160:	f000 fef4 	bl	8018f4c <iprintf>
 8018164:	f06f 030f 	mvn.w	r3, #15
 8018168:	e008      	b.n	801817c <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	1d1a      	adds	r2, r3, #4
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	8a9b      	ldrh	r3, [r3, #20]
 8018172:	6839      	ldr	r1, [r7, #0]
 8018174:	6878      	ldr	r0, [r7, #4]
 8018176:	f000 f80d 	bl	8018194 <udp_sendto>
 801817a:	4603      	mov	r3, r0
}
 801817c:	4618      	mov	r0, r3
 801817e:	3708      	adds	r7, #8
 8018180:	46bd      	mov	sp, r7
 8018182:	bd80      	pop	{r7, pc}
 8018184:	0801e9d4 	.word	0x0801e9d4
 8018188:	0801eb0c 	.word	0x0801eb0c
 801818c:	0801ea6c 	.word	0x0801ea6c
 8018190:	0801eb24 	.word	0x0801eb24

08018194 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8018194:	b580      	push	{r7, lr}
 8018196:	b088      	sub	sp, #32
 8018198:	af02      	add	r7, sp, #8
 801819a:	60f8      	str	r0, [r7, #12]
 801819c:	60b9      	str	r1, [r7, #8]
 801819e:	607a      	str	r2, [r7, #4]
 80181a0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80181a2:	68fb      	ldr	r3, [r7, #12]
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	d109      	bne.n	80181bc <udp_sendto+0x28>
 80181a8:	4b23      	ldr	r3, [pc, #140]	; (8018238 <udp_sendto+0xa4>)
 80181aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80181ae:	4923      	ldr	r1, [pc, #140]	; (801823c <udp_sendto+0xa8>)
 80181b0:	4823      	ldr	r0, [pc, #140]	; (8018240 <udp_sendto+0xac>)
 80181b2:	f000 fecb 	bl	8018f4c <iprintf>
 80181b6:	f06f 030f 	mvn.w	r3, #15
 80181ba:	e038      	b.n	801822e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80181bc:	68bb      	ldr	r3, [r7, #8]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d109      	bne.n	80181d6 <udp_sendto+0x42>
 80181c2:	4b1d      	ldr	r3, [pc, #116]	; (8018238 <udp_sendto+0xa4>)
 80181c4:	f240 2219 	movw	r2, #537	; 0x219
 80181c8:	491e      	ldr	r1, [pc, #120]	; (8018244 <udp_sendto+0xb0>)
 80181ca:	481d      	ldr	r0, [pc, #116]	; (8018240 <udp_sendto+0xac>)
 80181cc:	f000 febe 	bl	8018f4c <iprintf>
 80181d0:	f06f 030f 	mvn.w	r3, #15
 80181d4:	e02b      	b.n	801822e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d109      	bne.n	80181f0 <udp_sendto+0x5c>
 80181dc:	4b16      	ldr	r3, [pc, #88]	; (8018238 <udp_sendto+0xa4>)
 80181de:	f240 221a 	movw	r2, #538	; 0x21a
 80181e2:	4919      	ldr	r1, [pc, #100]	; (8018248 <udp_sendto+0xb4>)
 80181e4:	4816      	ldr	r0, [pc, #88]	; (8018240 <udp_sendto+0xac>)
 80181e6:	f000 feb1 	bl	8018f4c <iprintf>
 80181ea:	f06f 030f 	mvn.w	r3, #15
 80181ee:	e01e      	b.n	801822e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	7a1b      	ldrb	r3, [r3, #8]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d006      	beq.n	8018206 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	7a1b      	ldrb	r3, [r3, #8]
 80181fc:	4618      	mov	r0, r3
 80181fe:	f7f8 ff5f 	bl	80110c0 <netif_get_by_index>
 8018202:	6178      	str	r0, [r7, #20]
 8018204:	e003      	b.n	801820e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8018206:	6878      	ldr	r0, [r7, #4]
 8018208:	f7f5 fc8c 	bl	800db24 <ip4_route>
 801820c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801820e:	697b      	ldr	r3, [r7, #20]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d102      	bne.n	801821a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018214:	f06f 0303 	mvn.w	r3, #3
 8018218:	e009      	b.n	801822e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801821a:	887a      	ldrh	r2, [r7, #2]
 801821c:	697b      	ldr	r3, [r7, #20]
 801821e:	9300      	str	r3, [sp, #0]
 8018220:	4613      	mov	r3, r2
 8018222:	687a      	ldr	r2, [r7, #4]
 8018224:	68b9      	ldr	r1, [r7, #8]
 8018226:	68f8      	ldr	r0, [r7, #12]
 8018228:	f000 f810 	bl	801824c <udp_sendto_if>
 801822c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801822e:	4618      	mov	r0, r3
 8018230:	3718      	adds	r7, #24
 8018232:	46bd      	mov	sp, r7
 8018234:	bd80      	pop	{r7, pc}
 8018236:	bf00      	nop
 8018238:	0801e9d4 	.word	0x0801e9d4
 801823c:	0801eb3c 	.word	0x0801eb3c
 8018240:	0801ea6c 	.word	0x0801ea6c
 8018244:	0801eb54 	.word	0x0801eb54
 8018248:	0801eb70 	.word	0x0801eb70

0801824c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b088      	sub	sp, #32
 8018250:	af02      	add	r7, sp, #8
 8018252:	60f8      	str	r0, [r7, #12]
 8018254:	60b9      	str	r1, [r7, #8]
 8018256:	607a      	str	r2, [r7, #4]
 8018258:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801825a:	68fb      	ldr	r3, [r7, #12]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d109      	bne.n	8018274 <udp_sendto_if+0x28>
 8018260:	4b2e      	ldr	r3, [pc, #184]	; (801831c <udp_sendto_if+0xd0>)
 8018262:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018266:	492e      	ldr	r1, [pc, #184]	; (8018320 <udp_sendto_if+0xd4>)
 8018268:	482e      	ldr	r0, [pc, #184]	; (8018324 <udp_sendto_if+0xd8>)
 801826a:	f000 fe6f 	bl	8018f4c <iprintf>
 801826e:	f06f 030f 	mvn.w	r3, #15
 8018272:	e04f      	b.n	8018314 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018274:	68bb      	ldr	r3, [r7, #8]
 8018276:	2b00      	cmp	r3, #0
 8018278:	d109      	bne.n	801828e <udp_sendto_if+0x42>
 801827a:	4b28      	ldr	r3, [pc, #160]	; (801831c <udp_sendto_if+0xd0>)
 801827c:	f240 2281 	movw	r2, #641	; 0x281
 8018280:	4929      	ldr	r1, [pc, #164]	; (8018328 <udp_sendto_if+0xdc>)
 8018282:	4828      	ldr	r0, [pc, #160]	; (8018324 <udp_sendto_if+0xd8>)
 8018284:	f000 fe62 	bl	8018f4c <iprintf>
 8018288:	f06f 030f 	mvn.w	r3, #15
 801828c:	e042      	b.n	8018314 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d109      	bne.n	80182a8 <udp_sendto_if+0x5c>
 8018294:	4b21      	ldr	r3, [pc, #132]	; (801831c <udp_sendto_if+0xd0>)
 8018296:	f240 2282 	movw	r2, #642	; 0x282
 801829a:	4924      	ldr	r1, [pc, #144]	; (801832c <udp_sendto_if+0xe0>)
 801829c:	4821      	ldr	r0, [pc, #132]	; (8018324 <udp_sendto_if+0xd8>)
 801829e:	f000 fe55 	bl	8018f4c <iprintf>
 80182a2:	f06f 030f 	mvn.w	r3, #15
 80182a6:	e035      	b.n	8018314 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80182a8:	6a3b      	ldr	r3, [r7, #32]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d109      	bne.n	80182c2 <udp_sendto_if+0x76>
 80182ae:	4b1b      	ldr	r3, [pc, #108]	; (801831c <udp_sendto_if+0xd0>)
 80182b0:	f240 2283 	movw	r2, #643	; 0x283
 80182b4:	491e      	ldr	r1, [pc, #120]	; (8018330 <udp_sendto_if+0xe4>)
 80182b6:	481b      	ldr	r0, [pc, #108]	; (8018324 <udp_sendto_if+0xd8>)
 80182b8:	f000 fe48 	bl	8018f4c <iprintf>
 80182bc:	f06f 030f 	mvn.w	r3, #15
 80182c0:	e028      	b.n	8018314 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d009      	beq.n	80182dc <udp_sendto_if+0x90>
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d005      	beq.n	80182dc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80182d8:	2be0      	cmp	r3, #224	; 0xe0
 80182da:	d103      	bne.n	80182e4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80182dc:	6a3b      	ldr	r3, [r7, #32]
 80182de:	3304      	adds	r3, #4
 80182e0:	617b      	str	r3, [r7, #20]
 80182e2:	e00b      	b.n	80182fc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80182e4:	68fb      	ldr	r3, [r7, #12]
 80182e6:	681a      	ldr	r2, [r3, #0]
 80182e8:	6a3b      	ldr	r3, [r7, #32]
 80182ea:	3304      	adds	r3, #4
 80182ec:	681b      	ldr	r3, [r3, #0]
 80182ee:	429a      	cmp	r2, r3
 80182f0:	d002      	beq.n	80182f8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80182f2:	f06f 0303 	mvn.w	r3, #3
 80182f6:	e00d      	b.n	8018314 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80182fc:	887a      	ldrh	r2, [r7, #2]
 80182fe:	697b      	ldr	r3, [r7, #20]
 8018300:	9301      	str	r3, [sp, #4]
 8018302:	6a3b      	ldr	r3, [r7, #32]
 8018304:	9300      	str	r3, [sp, #0]
 8018306:	4613      	mov	r3, r2
 8018308:	687a      	ldr	r2, [r7, #4]
 801830a:	68b9      	ldr	r1, [r7, #8]
 801830c:	68f8      	ldr	r0, [r7, #12]
 801830e:	f000 f811 	bl	8018334 <udp_sendto_if_src>
 8018312:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018314:	4618      	mov	r0, r3
 8018316:	3718      	adds	r7, #24
 8018318:	46bd      	mov	sp, r7
 801831a:	bd80      	pop	{r7, pc}
 801831c:	0801e9d4 	.word	0x0801e9d4
 8018320:	0801eb8c 	.word	0x0801eb8c
 8018324:	0801ea6c 	.word	0x0801ea6c
 8018328:	0801eba8 	.word	0x0801eba8
 801832c:	0801ebc4 	.word	0x0801ebc4
 8018330:	0801ebe4 	.word	0x0801ebe4

08018334 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018334:	b580      	push	{r7, lr}
 8018336:	b08c      	sub	sp, #48	; 0x30
 8018338:	af04      	add	r7, sp, #16
 801833a:	60f8      	str	r0, [r7, #12]
 801833c:	60b9      	str	r1, [r7, #8]
 801833e:	607a      	str	r2, [r7, #4]
 8018340:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d109      	bne.n	801835c <udp_sendto_if_src+0x28>
 8018348:	4b65      	ldr	r3, [pc, #404]	; (80184e0 <udp_sendto_if_src+0x1ac>)
 801834a:	f240 22d1 	movw	r2, #721	; 0x2d1
 801834e:	4965      	ldr	r1, [pc, #404]	; (80184e4 <udp_sendto_if_src+0x1b0>)
 8018350:	4865      	ldr	r0, [pc, #404]	; (80184e8 <udp_sendto_if_src+0x1b4>)
 8018352:	f000 fdfb 	bl	8018f4c <iprintf>
 8018356:	f06f 030f 	mvn.w	r3, #15
 801835a:	e0bc      	b.n	80184d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801835c:	68bb      	ldr	r3, [r7, #8]
 801835e:	2b00      	cmp	r3, #0
 8018360:	d109      	bne.n	8018376 <udp_sendto_if_src+0x42>
 8018362:	4b5f      	ldr	r3, [pc, #380]	; (80184e0 <udp_sendto_if_src+0x1ac>)
 8018364:	f240 22d2 	movw	r2, #722	; 0x2d2
 8018368:	4960      	ldr	r1, [pc, #384]	; (80184ec <udp_sendto_if_src+0x1b8>)
 801836a:	485f      	ldr	r0, [pc, #380]	; (80184e8 <udp_sendto_if_src+0x1b4>)
 801836c:	f000 fdee 	bl	8018f4c <iprintf>
 8018370:	f06f 030f 	mvn.w	r3, #15
 8018374:	e0af      	b.n	80184d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d109      	bne.n	8018390 <udp_sendto_if_src+0x5c>
 801837c:	4b58      	ldr	r3, [pc, #352]	; (80184e0 <udp_sendto_if_src+0x1ac>)
 801837e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8018382:	495b      	ldr	r1, [pc, #364]	; (80184f0 <udp_sendto_if_src+0x1bc>)
 8018384:	4858      	ldr	r0, [pc, #352]	; (80184e8 <udp_sendto_if_src+0x1b4>)
 8018386:	f000 fde1 	bl	8018f4c <iprintf>
 801838a:	f06f 030f 	mvn.w	r3, #15
 801838e:	e0a2      	b.n	80184d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8018390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018392:	2b00      	cmp	r3, #0
 8018394:	d109      	bne.n	80183aa <udp_sendto_if_src+0x76>
 8018396:	4b52      	ldr	r3, [pc, #328]	; (80184e0 <udp_sendto_if_src+0x1ac>)
 8018398:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801839c:	4955      	ldr	r1, [pc, #340]	; (80184f4 <udp_sendto_if_src+0x1c0>)
 801839e:	4852      	ldr	r0, [pc, #328]	; (80184e8 <udp_sendto_if_src+0x1b4>)
 80183a0:	f000 fdd4 	bl	8018f4c <iprintf>
 80183a4:	f06f 030f 	mvn.w	r3, #15
 80183a8:	e095      	b.n	80184d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80183aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d109      	bne.n	80183c4 <udp_sendto_if_src+0x90>
 80183b0:	4b4b      	ldr	r3, [pc, #300]	; (80184e0 <udp_sendto_if_src+0x1ac>)
 80183b2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80183b6:	4950      	ldr	r1, [pc, #320]	; (80184f8 <udp_sendto_if_src+0x1c4>)
 80183b8:	484b      	ldr	r0, [pc, #300]	; (80184e8 <udp_sendto_if_src+0x1b4>)
 80183ba:	f000 fdc7 	bl	8018f4c <iprintf>
 80183be:	f06f 030f 	mvn.w	r3, #15
 80183c2:	e088      	b.n	80184d6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	8a5b      	ldrh	r3, [r3, #18]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d10f      	bne.n	80183ec <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80183cc:	68f9      	ldr	r1, [r7, #12]
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	8a5b      	ldrh	r3, [r3, #18]
 80183d2:	461a      	mov	r2, r3
 80183d4:	68f8      	ldr	r0, [r7, #12]
 80183d6:	f000 f893 	bl	8018500 <udp_bind>
 80183da:	4603      	mov	r3, r0
 80183dc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80183de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d002      	beq.n	80183ec <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80183e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80183ea:	e074      	b.n	80184d6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	891b      	ldrh	r3, [r3, #8]
 80183f0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80183f4:	4293      	cmp	r3, r2
 80183f6:	d902      	bls.n	80183fe <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80183f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80183fc:	e06b      	b.n	80184d6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80183fe:	2108      	movs	r1, #8
 8018400:	68b8      	ldr	r0, [r7, #8]
 8018402:	f7f9 f8f9 	bl	80115f8 <pbuf_add_header>
 8018406:	4603      	mov	r3, r0
 8018408:	2b00      	cmp	r3, #0
 801840a:	d015      	beq.n	8018438 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801840c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018410:	2108      	movs	r1, #8
 8018412:	2022      	movs	r0, #34	; 0x22
 8018414:	f7f8 fea4 	bl	8011160 <pbuf_alloc>
 8018418:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801841a:	69fb      	ldr	r3, [r7, #28]
 801841c:	2b00      	cmp	r3, #0
 801841e:	d102      	bne.n	8018426 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8018420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018424:	e057      	b.n	80184d6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8018426:	68bb      	ldr	r3, [r7, #8]
 8018428:	891b      	ldrh	r3, [r3, #8]
 801842a:	2b00      	cmp	r3, #0
 801842c:	d006      	beq.n	801843c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801842e:	68b9      	ldr	r1, [r7, #8]
 8018430:	69f8      	ldr	r0, [r7, #28]
 8018432:	f7f9 facd 	bl	80119d0 <pbuf_chain>
 8018436:	e001      	b.n	801843c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018438:	68bb      	ldr	r3, [r7, #8]
 801843a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801843c:	69fb      	ldr	r3, [r7, #28]
 801843e:	895b      	ldrh	r3, [r3, #10]
 8018440:	2b07      	cmp	r3, #7
 8018442:	d806      	bhi.n	8018452 <udp_sendto_if_src+0x11e>
 8018444:	4b26      	ldr	r3, [pc, #152]	; (80184e0 <udp_sendto_if_src+0x1ac>)
 8018446:	f240 320d 	movw	r2, #781	; 0x30d
 801844a:	492c      	ldr	r1, [pc, #176]	; (80184fc <udp_sendto_if_src+0x1c8>)
 801844c:	4826      	ldr	r0, [pc, #152]	; (80184e8 <udp_sendto_if_src+0x1b4>)
 801844e:	f000 fd7d 	bl	8018f4c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8018452:	69fb      	ldr	r3, [r7, #28]
 8018454:	685b      	ldr	r3, [r3, #4]
 8018456:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	8a5b      	ldrh	r3, [r3, #18]
 801845c:	4618      	mov	r0, r3
 801845e:	f7f6 fdaf 	bl	800efc0 <lwip_htons>
 8018462:	4603      	mov	r3, r0
 8018464:	461a      	mov	r2, r3
 8018466:	697b      	ldr	r3, [r7, #20]
 8018468:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801846a:	887b      	ldrh	r3, [r7, #2]
 801846c:	4618      	mov	r0, r3
 801846e:	f7f6 fda7 	bl	800efc0 <lwip_htons>
 8018472:	4603      	mov	r3, r0
 8018474:	461a      	mov	r2, r3
 8018476:	697b      	ldr	r3, [r7, #20]
 8018478:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801847a:	697b      	ldr	r3, [r7, #20]
 801847c:	2200      	movs	r2, #0
 801847e:	719a      	strb	r2, [r3, #6]
 8018480:	2200      	movs	r2, #0
 8018482:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018484:	69fb      	ldr	r3, [r7, #28]
 8018486:	891b      	ldrh	r3, [r3, #8]
 8018488:	4618      	mov	r0, r3
 801848a:	f7f6 fd99 	bl	800efc0 <lwip_htons>
 801848e:	4603      	mov	r3, r0
 8018490:	461a      	mov	r2, r3
 8018492:	697b      	ldr	r3, [r7, #20]
 8018494:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8018496:	2311      	movs	r3, #17
 8018498:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801849a:	68fb      	ldr	r3, [r7, #12]
 801849c:	7adb      	ldrb	r3, [r3, #11]
 801849e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80184a0:	68fb      	ldr	r3, [r7, #12]
 80184a2:	7a9b      	ldrb	r3, [r3, #10]
 80184a4:	7cb9      	ldrb	r1, [r7, #18]
 80184a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184a8:	9202      	str	r2, [sp, #8]
 80184aa:	7cfa      	ldrb	r2, [r7, #19]
 80184ac:	9201      	str	r2, [sp, #4]
 80184ae:	9300      	str	r3, [sp, #0]
 80184b0:	460b      	mov	r3, r1
 80184b2:	687a      	ldr	r2, [r7, #4]
 80184b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80184b6:	69f8      	ldr	r0, [r7, #28]
 80184b8:	f7f5 fd1c 	bl	800def4 <ip4_output_if_src>
 80184bc:	4603      	mov	r3, r0
 80184be:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80184c0:	69fa      	ldr	r2, [r7, #28]
 80184c2:	68bb      	ldr	r3, [r7, #8]
 80184c4:	429a      	cmp	r2, r3
 80184c6:	d004      	beq.n	80184d2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80184c8:	69f8      	ldr	r0, [r7, #28]
 80184ca:	f7f9 f95d 	bl	8011788 <pbuf_free>
    q = NULL;
 80184ce:	2300      	movs	r3, #0
 80184d0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80184d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80184d6:	4618      	mov	r0, r3
 80184d8:	3720      	adds	r7, #32
 80184da:	46bd      	mov	sp, r7
 80184dc:	bd80      	pop	{r7, pc}
 80184de:	bf00      	nop
 80184e0:	0801e9d4 	.word	0x0801e9d4
 80184e4:	0801ec04 	.word	0x0801ec04
 80184e8:	0801ea6c 	.word	0x0801ea6c
 80184ec:	0801ec24 	.word	0x0801ec24
 80184f0:	0801ec44 	.word	0x0801ec44
 80184f4:	0801ec68 	.word	0x0801ec68
 80184f8:	0801ec8c 	.word	0x0801ec8c
 80184fc:	0801ecb0 	.word	0x0801ecb0

08018500 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b086      	sub	sp, #24
 8018504:	af00      	add	r7, sp, #0
 8018506:	60f8      	str	r0, [r7, #12]
 8018508:	60b9      	str	r1, [r7, #8]
 801850a:	4613      	mov	r3, r2
 801850c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801850e:	68bb      	ldr	r3, [r7, #8]
 8018510:	2b00      	cmp	r3, #0
 8018512:	d101      	bne.n	8018518 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018514:	4b39      	ldr	r3, [pc, #228]	; (80185fc <udp_bind+0xfc>)
 8018516:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018518:	68fb      	ldr	r3, [r7, #12]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d109      	bne.n	8018532 <udp_bind+0x32>
 801851e:	4b38      	ldr	r3, [pc, #224]	; (8018600 <udp_bind+0x100>)
 8018520:	f240 32b7 	movw	r2, #951	; 0x3b7
 8018524:	4937      	ldr	r1, [pc, #220]	; (8018604 <udp_bind+0x104>)
 8018526:	4838      	ldr	r0, [pc, #224]	; (8018608 <udp_bind+0x108>)
 8018528:	f000 fd10 	bl	8018f4c <iprintf>
 801852c:	f06f 030f 	mvn.w	r3, #15
 8018530:	e060      	b.n	80185f4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8018532:	2300      	movs	r3, #0
 8018534:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018536:	4b35      	ldr	r3, [pc, #212]	; (801860c <udp_bind+0x10c>)
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	617b      	str	r3, [r7, #20]
 801853c:	e009      	b.n	8018552 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801853e:	68fa      	ldr	r2, [r7, #12]
 8018540:	697b      	ldr	r3, [r7, #20]
 8018542:	429a      	cmp	r2, r3
 8018544:	d102      	bne.n	801854c <udp_bind+0x4c>
      rebind = 1;
 8018546:	2301      	movs	r3, #1
 8018548:	74fb      	strb	r3, [r7, #19]
      break;
 801854a:	e005      	b.n	8018558 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801854c:	697b      	ldr	r3, [r7, #20]
 801854e:	68db      	ldr	r3, [r3, #12]
 8018550:	617b      	str	r3, [r7, #20]
 8018552:	697b      	ldr	r3, [r7, #20]
 8018554:	2b00      	cmp	r3, #0
 8018556:	d1f2      	bne.n	801853e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018558:	88fb      	ldrh	r3, [r7, #6]
 801855a:	2b00      	cmp	r3, #0
 801855c:	d109      	bne.n	8018572 <udp_bind+0x72>
    port = udp_new_port();
 801855e:	f7ff fc35 	bl	8017dcc <udp_new_port>
 8018562:	4603      	mov	r3, r0
 8018564:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018566:	88fb      	ldrh	r3, [r7, #6]
 8018568:	2b00      	cmp	r3, #0
 801856a:	d12c      	bne.n	80185c6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801856c:	f06f 0307 	mvn.w	r3, #7
 8018570:	e040      	b.n	80185f4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018572:	4b26      	ldr	r3, [pc, #152]	; (801860c <udp_bind+0x10c>)
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	617b      	str	r3, [r7, #20]
 8018578:	e022      	b.n	80185c0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801857a:	68fa      	ldr	r2, [r7, #12]
 801857c:	697b      	ldr	r3, [r7, #20]
 801857e:	429a      	cmp	r2, r3
 8018580:	d01b      	beq.n	80185ba <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8018582:	697b      	ldr	r3, [r7, #20]
 8018584:	8a5b      	ldrh	r3, [r3, #18]
 8018586:	88fa      	ldrh	r2, [r7, #6]
 8018588:	429a      	cmp	r2, r3
 801858a:	d116      	bne.n	80185ba <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801858c:	697b      	ldr	r3, [r7, #20]
 801858e:	681a      	ldr	r2, [r3, #0]
 8018590:	68bb      	ldr	r3, [r7, #8]
 8018592:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018594:	429a      	cmp	r2, r3
 8018596:	d00d      	beq.n	80185b4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018598:	68bb      	ldr	r3, [r7, #8]
 801859a:	2b00      	cmp	r3, #0
 801859c:	d00a      	beq.n	80185b4 <udp_bind+0xb4>
 801859e:	68bb      	ldr	r3, [r7, #8]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d006      	beq.n	80185b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80185a6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d003      	beq.n	80185b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80185ac:	697b      	ldr	r3, [r7, #20]
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	2b00      	cmp	r3, #0
 80185b2:	d102      	bne.n	80185ba <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80185b4:	f06f 0307 	mvn.w	r3, #7
 80185b8:	e01c      	b.n	80185f4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80185ba:	697b      	ldr	r3, [r7, #20]
 80185bc:	68db      	ldr	r3, [r3, #12]
 80185be:	617b      	str	r3, [r7, #20]
 80185c0:	697b      	ldr	r3, [r7, #20]
 80185c2:	2b00      	cmp	r3, #0
 80185c4:	d1d9      	bne.n	801857a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80185c6:	68bb      	ldr	r3, [r7, #8]
 80185c8:	2b00      	cmp	r3, #0
 80185ca:	d002      	beq.n	80185d2 <udp_bind+0xd2>
 80185cc:	68bb      	ldr	r3, [r7, #8]
 80185ce:	681b      	ldr	r3, [r3, #0]
 80185d0:	e000      	b.n	80185d4 <udp_bind+0xd4>
 80185d2:	2300      	movs	r3, #0
 80185d4:	68fa      	ldr	r2, [r7, #12]
 80185d6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	88fa      	ldrh	r2, [r7, #6]
 80185dc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80185de:	7cfb      	ldrb	r3, [r7, #19]
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d106      	bne.n	80185f2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80185e4:	4b09      	ldr	r3, [pc, #36]	; (801860c <udp_bind+0x10c>)
 80185e6:	681a      	ldr	r2, [r3, #0]
 80185e8:	68fb      	ldr	r3, [r7, #12]
 80185ea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80185ec:	4a07      	ldr	r2, [pc, #28]	; (801860c <udp_bind+0x10c>)
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80185f2:	2300      	movs	r3, #0
}
 80185f4:	4618      	mov	r0, r3
 80185f6:	3718      	adds	r7, #24
 80185f8:	46bd      	mov	sp, r7
 80185fa:	bd80      	pop	{r7, pc}
 80185fc:	0801c38c 	.word	0x0801c38c
 8018600:	0801e9d4 	.word	0x0801e9d4
 8018604:	0801ece0 	.word	0x0801ece0
 8018608:	0801ea6c 	.word	0x0801ea6c
 801860c:	2400b2bc 	.word	0x2400b2bc

08018610 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018610:	b580      	push	{r7, lr}
 8018612:	b086      	sub	sp, #24
 8018614:	af00      	add	r7, sp, #0
 8018616:	60f8      	str	r0, [r7, #12]
 8018618:	60b9      	str	r1, [r7, #8]
 801861a:	4613      	mov	r3, r2
 801861c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801861e:	68fb      	ldr	r3, [r7, #12]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d109      	bne.n	8018638 <udp_connect+0x28>
 8018624:	4b2c      	ldr	r3, [pc, #176]	; (80186d8 <udp_connect+0xc8>)
 8018626:	f240 4235 	movw	r2, #1077	; 0x435
 801862a:	492c      	ldr	r1, [pc, #176]	; (80186dc <udp_connect+0xcc>)
 801862c:	482c      	ldr	r0, [pc, #176]	; (80186e0 <udp_connect+0xd0>)
 801862e:	f000 fc8d 	bl	8018f4c <iprintf>
 8018632:	f06f 030f 	mvn.w	r3, #15
 8018636:	e04b      	b.n	80186d0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8018638:	68bb      	ldr	r3, [r7, #8]
 801863a:	2b00      	cmp	r3, #0
 801863c:	d109      	bne.n	8018652 <udp_connect+0x42>
 801863e:	4b26      	ldr	r3, [pc, #152]	; (80186d8 <udp_connect+0xc8>)
 8018640:	f240 4236 	movw	r2, #1078	; 0x436
 8018644:	4927      	ldr	r1, [pc, #156]	; (80186e4 <udp_connect+0xd4>)
 8018646:	4826      	ldr	r0, [pc, #152]	; (80186e0 <udp_connect+0xd0>)
 8018648:	f000 fc80 	bl	8018f4c <iprintf>
 801864c:	f06f 030f 	mvn.w	r3, #15
 8018650:	e03e      	b.n	80186d0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8018652:	68fb      	ldr	r3, [r7, #12]
 8018654:	8a5b      	ldrh	r3, [r3, #18]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d10f      	bne.n	801867a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801865a:	68f9      	ldr	r1, [r7, #12]
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	8a5b      	ldrh	r3, [r3, #18]
 8018660:	461a      	mov	r2, r3
 8018662:	68f8      	ldr	r0, [r7, #12]
 8018664:	f7ff ff4c 	bl	8018500 <udp_bind>
 8018668:	4603      	mov	r3, r0
 801866a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801866c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018670:	2b00      	cmp	r3, #0
 8018672:	d002      	beq.n	801867a <udp_connect+0x6a>
      return err;
 8018674:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018678:	e02a      	b.n	80186d0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801867a:	68bb      	ldr	r3, [r7, #8]
 801867c:	2b00      	cmp	r3, #0
 801867e:	d002      	beq.n	8018686 <udp_connect+0x76>
 8018680:	68bb      	ldr	r3, [r7, #8]
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	e000      	b.n	8018688 <udp_connect+0x78>
 8018686:	2300      	movs	r3, #0
 8018688:	68fa      	ldr	r2, [r7, #12]
 801868a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	88fa      	ldrh	r2, [r7, #6]
 8018690:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	7c1b      	ldrb	r3, [r3, #16]
 8018696:	f043 0304 	orr.w	r3, r3, #4
 801869a:	b2da      	uxtb	r2, r3
 801869c:	68fb      	ldr	r3, [r7, #12]
 801869e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80186a0:	4b11      	ldr	r3, [pc, #68]	; (80186e8 <udp_connect+0xd8>)
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	617b      	str	r3, [r7, #20]
 80186a6:	e008      	b.n	80186ba <udp_connect+0xaa>
    if (pcb == ipcb) {
 80186a8:	68fa      	ldr	r2, [r7, #12]
 80186aa:	697b      	ldr	r3, [r7, #20]
 80186ac:	429a      	cmp	r2, r3
 80186ae:	d101      	bne.n	80186b4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80186b0:	2300      	movs	r3, #0
 80186b2:	e00d      	b.n	80186d0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80186b4:	697b      	ldr	r3, [r7, #20]
 80186b6:	68db      	ldr	r3, [r3, #12]
 80186b8:	617b      	str	r3, [r7, #20]
 80186ba:	697b      	ldr	r3, [r7, #20]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d1f3      	bne.n	80186a8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80186c0:	4b09      	ldr	r3, [pc, #36]	; (80186e8 <udp_connect+0xd8>)
 80186c2:	681a      	ldr	r2, [r3, #0]
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80186c8:	4a07      	ldr	r2, [pc, #28]	; (80186e8 <udp_connect+0xd8>)
 80186ca:	68fb      	ldr	r3, [r7, #12]
 80186cc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80186ce:	2300      	movs	r3, #0
}
 80186d0:	4618      	mov	r0, r3
 80186d2:	3718      	adds	r7, #24
 80186d4:	46bd      	mov	sp, r7
 80186d6:	bd80      	pop	{r7, pc}
 80186d8:	0801e9d4 	.word	0x0801e9d4
 80186dc:	0801ecf8 	.word	0x0801ecf8
 80186e0:	0801ea6c 	.word	0x0801ea6c
 80186e4:	0801ed14 	.word	0x0801ed14
 80186e8:	2400b2bc 	.word	0x2400b2bc

080186ec <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b082      	sub	sp, #8
 80186f0:	af00      	add	r7, sp, #0
 80186f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d107      	bne.n	801870a <udp_disconnect+0x1e>
 80186fa:	4b0d      	ldr	r3, [pc, #52]	; (8018730 <udp_disconnect+0x44>)
 80186fc:	f240 426a 	movw	r2, #1130	; 0x46a
 8018700:	490c      	ldr	r1, [pc, #48]	; (8018734 <udp_disconnect+0x48>)
 8018702:	480d      	ldr	r0, [pc, #52]	; (8018738 <udp_disconnect+0x4c>)
 8018704:	f000 fc22 	bl	8018f4c <iprintf>
 8018708:	e00f      	b.n	801872a <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	2200      	movs	r2, #0
 801870e:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	2200      	movs	r2, #0
 8018714:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	2200      	movs	r2, #0
 801871a:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	7c1b      	ldrb	r3, [r3, #16]
 8018720:	f023 0304 	bic.w	r3, r3, #4
 8018724:	b2da      	uxtb	r2, r3
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	741a      	strb	r2, [r3, #16]
}
 801872a:	3708      	adds	r7, #8
 801872c:	46bd      	mov	sp, r7
 801872e:	bd80      	pop	{r7, pc}
 8018730:	0801e9d4 	.word	0x0801e9d4
 8018734:	0801ed30 	.word	0x0801ed30
 8018738:	0801ea6c 	.word	0x0801ea6c

0801873c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801873c:	b580      	push	{r7, lr}
 801873e:	b084      	sub	sp, #16
 8018740:	af00      	add	r7, sp, #0
 8018742:	60f8      	str	r0, [r7, #12]
 8018744:	60b9      	str	r1, [r7, #8]
 8018746:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	2b00      	cmp	r3, #0
 801874c:	d107      	bne.n	801875e <udp_recv+0x22>
 801874e:	4b08      	ldr	r3, [pc, #32]	; (8018770 <udp_recv+0x34>)
 8018750:	f240 428a 	movw	r2, #1162	; 0x48a
 8018754:	4907      	ldr	r1, [pc, #28]	; (8018774 <udp_recv+0x38>)
 8018756:	4808      	ldr	r0, [pc, #32]	; (8018778 <udp_recv+0x3c>)
 8018758:	f000 fbf8 	bl	8018f4c <iprintf>
 801875c:	e005      	b.n	801876a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	68ba      	ldr	r2, [r7, #8]
 8018762:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	687a      	ldr	r2, [r7, #4]
 8018768:	61da      	str	r2, [r3, #28]
}
 801876a:	3710      	adds	r7, #16
 801876c:	46bd      	mov	sp, r7
 801876e:	bd80      	pop	{r7, pc}
 8018770:	0801e9d4 	.word	0x0801e9d4
 8018774:	0801ed4c 	.word	0x0801ed4c
 8018778:	0801ea6c 	.word	0x0801ea6c

0801877c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801877c:	b580      	push	{r7, lr}
 801877e:	b084      	sub	sp, #16
 8018780:	af00      	add	r7, sp, #0
 8018782:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	2b00      	cmp	r3, #0
 8018788:	d107      	bne.n	801879a <udp_remove+0x1e>
 801878a:	4b19      	ldr	r3, [pc, #100]	; (80187f0 <udp_remove+0x74>)
 801878c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8018790:	4918      	ldr	r1, [pc, #96]	; (80187f4 <udp_remove+0x78>)
 8018792:	4819      	ldr	r0, [pc, #100]	; (80187f8 <udp_remove+0x7c>)
 8018794:	f000 fbda 	bl	8018f4c <iprintf>
 8018798:	e026      	b.n	80187e8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801879a:	4b18      	ldr	r3, [pc, #96]	; (80187fc <udp_remove+0x80>)
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	687a      	ldr	r2, [r7, #4]
 80187a0:	429a      	cmp	r2, r3
 80187a2:	d105      	bne.n	80187b0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80187a4:	4b15      	ldr	r3, [pc, #84]	; (80187fc <udp_remove+0x80>)
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	68db      	ldr	r3, [r3, #12]
 80187aa:	4a14      	ldr	r2, [pc, #80]	; (80187fc <udp_remove+0x80>)
 80187ac:	6013      	str	r3, [r2, #0]
 80187ae:	e017      	b.n	80187e0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80187b0:	4b12      	ldr	r3, [pc, #72]	; (80187fc <udp_remove+0x80>)
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	60fb      	str	r3, [r7, #12]
 80187b6:	e010      	b.n	80187da <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	68db      	ldr	r3, [r3, #12]
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d009      	beq.n	80187d4 <udp_remove+0x58>
 80187c0:	68fb      	ldr	r3, [r7, #12]
 80187c2:	68db      	ldr	r3, [r3, #12]
 80187c4:	687a      	ldr	r2, [r7, #4]
 80187c6:	429a      	cmp	r2, r3
 80187c8:	d104      	bne.n	80187d4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	68da      	ldr	r2, [r3, #12]
 80187ce:	68fb      	ldr	r3, [r7, #12]
 80187d0:	60da      	str	r2, [r3, #12]
        break;
 80187d2:	e005      	b.n	80187e0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	68db      	ldr	r3, [r3, #12]
 80187d8:	60fb      	str	r3, [r7, #12]
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d1eb      	bne.n	80187b8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80187e0:	6879      	ldr	r1, [r7, #4]
 80187e2:	2000      	movs	r0, #0
 80187e4:	f7f8 f956 	bl	8010a94 <memp_free>
}
 80187e8:	3710      	adds	r7, #16
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}
 80187ee:	bf00      	nop
 80187f0:	0801e9d4 	.word	0x0801e9d4
 80187f4:	0801ed64 	.word	0x0801ed64
 80187f8:	0801ea6c 	.word	0x0801ea6c
 80187fc:	2400b2bc 	.word	0x2400b2bc

08018800 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018800:	b580      	push	{r7, lr}
 8018802:	b082      	sub	sp, #8
 8018804:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018806:	2000      	movs	r0, #0
 8018808:	f7f8 f8ce 	bl	80109a8 <memp_malloc>
 801880c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	2b00      	cmp	r3, #0
 8018812:	d007      	beq.n	8018824 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018814:	2220      	movs	r2, #32
 8018816:	2100      	movs	r1, #0
 8018818:	6878      	ldr	r0, [r7, #4]
 801881a:	f000 fb8f 	bl	8018f3c <memset>
    pcb->ttl = UDP_TTL;
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	22ff      	movs	r2, #255	; 0xff
 8018822:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018824:	687b      	ldr	r3, [r7, #4]
}
 8018826:	4618      	mov	r0, r3
 8018828:	3708      	adds	r7, #8
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}

0801882e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801882e:	b580      	push	{r7, lr}
 8018830:	b084      	sub	sp, #16
 8018832:	af00      	add	r7, sp, #0
 8018834:	4603      	mov	r3, r0
 8018836:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018838:	f7ff ffe2 	bl	8018800 <udp_new>
 801883c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801883e:	68fb      	ldr	r3, [r7, #12]
}
 8018840:	4618      	mov	r0, r3
 8018842:	3710      	adds	r7, #16
 8018844:	46bd      	mov	sp, r7
 8018846:	bd80      	pop	{r7, pc}

08018848 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018848:	b480      	push	{r7}
 801884a:	b085      	sub	sp, #20
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
 8018850:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d01e      	beq.n	8018896 <udp_netif_ip_addr_changed+0x4e>
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d01a      	beq.n	8018896 <udp_netif_ip_addr_changed+0x4e>
 8018860:	683b      	ldr	r3, [r7, #0]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d017      	beq.n	8018896 <udp_netif_ip_addr_changed+0x4e>
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d013      	beq.n	8018896 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801886e:	4b0d      	ldr	r3, [pc, #52]	; (80188a4 <udp_netif_ip_addr_changed+0x5c>)
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	60fb      	str	r3, [r7, #12]
 8018874:	e00c      	b.n	8018890 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018876:	68fb      	ldr	r3, [r7, #12]
 8018878:	681a      	ldr	r2, [r3, #0]
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	429a      	cmp	r2, r3
 8018880:	d103      	bne.n	801888a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018882:	683b      	ldr	r3, [r7, #0]
 8018884:	681a      	ldr	r2, [r3, #0]
 8018886:	68fb      	ldr	r3, [r7, #12]
 8018888:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	68db      	ldr	r3, [r3, #12]
 801888e:	60fb      	str	r3, [r7, #12]
 8018890:	68fb      	ldr	r3, [r7, #12]
 8018892:	2b00      	cmp	r3, #0
 8018894:	d1ef      	bne.n	8018876 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018896:	bf00      	nop
 8018898:	3714      	adds	r7, #20
 801889a:	46bd      	mov	sp, r7
 801889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a0:	4770      	bx	lr
 80188a2:	bf00      	nop
 80188a4:	2400b2bc 	.word	0x2400b2bc

080188a8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80188a8:	b580      	push	{r7, lr}
 80188aa:	b086      	sub	sp, #24
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	6078      	str	r0, [r7, #4]
 80188b0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80188b2:	230e      	movs	r3, #14
 80188b4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	895b      	ldrh	r3, [r3, #10]
 80188ba:	2b0e      	cmp	r3, #14
 80188bc:	d96e      	bls.n	801899c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	7bdb      	ldrb	r3, [r3, #15]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d106      	bne.n	80188d4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80188c6:	683b      	ldr	r3, [r7, #0]
 80188c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80188cc:	3301      	adds	r3, #1
 80188ce:	b2da      	uxtb	r2, r3
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80188d4:	687b      	ldr	r3, [r7, #4]
 80188d6:	685b      	ldr	r3, [r3, #4]
 80188d8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80188da:	693b      	ldr	r3, [r7, #16]
 80188dc:	7b1a      	ldrb	r2, [r3, #12]
 80188de:	7b5b      	ldrb	r3, [r3, #13]
 80188e0:	021b      	lsls	r3, r3, #8
 80188e2:	4313      	orrs	r3, r2
 80188e4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80188e6:	693b      	ldr	r3, [r7, #16]
 80188e8:	781b      	ldrb	r3, [r3, #0]
 80188ea:	f003 0301 	and.w	r3, r3, #1
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d023      	beq.n	801893a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80188f2:	693b      	ldr	r3, [r7, #16]
 80188f4:	781b      	ldrb	r3, [r3, #0]
 80188f6:	2b01      	cmp	r3, #1
 80188f8:	d10f      	bne.n	801891a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80188fa:	693b      	ldr	r3, [r7, #16]
 80188fc:	785b      	ldrb	r3, [r3, #1]
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d11b      	bne.n	801893a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8018902:	693b      	ldr	r3, [r7, #16]
 8018904:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8018906:	2b5e      	cmp	r3, #94	; 0x5e
 8018908:	d117      	bne.n	801893a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	7b5b      	ldrb	r3, [r3, #13]
 801890e:	f043 0310 	orr.w	r3, r3, #16
 8018912:	b2da      	uxtb	r2, r3
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	735a      	strb	r2, [r3, #13]
 8018918:	e00f      	b.n	801893a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801891a:	693b      	ldr	r3, [r7, #16]
 801891c:	2206      	movs	r2, #6
 801891e:	4928      	ldr	r1, [pc, #160]	; (80189c0 <ethernet_input+0x118>)
 8018920:	4618      	mov	r0, r3
 8018922:	f000 fad5 	bl	8018ed0 <memcmp>
 8018926:	4603      	mov	r3, r0
 8018928:	2b00      	cmp	r3, #0
 801892a:	d106      	bne.n	801893a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	7b5b      	ldrb	r3, [r3, #13]
 8018930:	f043 0308 	orr.w	r3, r3, #8
 8018934:	b2da      	uxtb	r2, r3
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801893a:	89fb      	ldrh	r3, [r7, #14]
 801893c:	2b08      	cmp	r3, #8
 801893e:	d003      	beq.n	8018948 <ethernet_input+0xa0>
 8018940:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8018944:	d014      	beq.n	8018970 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8018946:	e032      	b.n	80189ae <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018948:	683b      	ldr	r3, [r7, #0]
 801894a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801894e:	f003 0308 	and.w	r3, r3, #8
 8018952:	2b00      	cmp	r3, #0
 8018954:	d024      	beq.n	80189a0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8018956:	8afb      	ldrh	r3, [r7, #22]
 8018958:	4619      	mov	r1, r3
 801895a:	6878      	ldr	r0, [r7, #4]
 801895c:	f7f8 fe5c 	bl	8011618 <pbuf_remove_header>
 8018960:	4603      	mov	r3, r0
 8018962:	2b00      	cmp	r3, #0
 8018964:	d11e      	bne.n	80189a4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8018966:	6839      	ldr	r1, [r7, #0]
 8018968:	6878      	ldr	r0, [r7, #4]
 801896a:	f7f5 f975 	bl	800dc58 <ip4_input>
      break;
 801896e:	e013      	b.n	8018998 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8018970:	683b      	ldr	r3, [r7, #0]
 8018972:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018976:	f003 0308 	and.w	r3, r3, #8
 801897a:	2b00      	cmp	r3, #0
 801897c:	d014      	beq.n	80189a8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801897e:	8afb      	ldrh	r3, [r7, #22]
 8018980:	4619      	mov	r1, r3
 8018982:	6878      	ldr	r0, [r7, #4]
 8018984:	f7f8 fe48 	bl	8011618 <pbuf_remove_header>
 8018988:	4603      	mov	r3, r0
 801898a:	2b00      	cmp	r3, #0
 801898c:	d10e      	bne.n	80189ac <ethernet_input+0x104>
        etharp_input(p, netif);
 801898e:	6839      	ldr	r1, [r7, #0]
 8018990:	6878      	ldr	r0, [r7, #4]
 8018992:	f7f4 faf9 	bl	800cf88 <etharp_input>
      break;
 8018996:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8018998:	2300      	movs	r3, #0
 801899a:	e00c      	b.n	80189b6 <ethernet_input+0x10e>
    goto free_and_return;
 801899c:	bf00      	nop
 801899e:	e006      	b.n	80189ae <ethernet_input+0x106>
        goto free_and_return;
 80189a0:	bf00      	nop
 80189a2:	e004      	b.n	80189ae <ethernet_input+0x106>
        goto free_and_return;
 80189a4:	bf00      	nop
 80189a6:	e002      	b.n	80189ae <ethernet_input+0x106>
        goto free_and_return;
 80189a8:	bf00      	nop
 80189aa:	e000      	b.n	80189ae <ethernet_input+0x106>
        goto free_and_return;
 80189ac:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80189ae:	6878      	ldr	r0, [r7, #4]
 80189b0:	f7f8 feea 	bl	8011788 <pbuf_free>
  return ERR_OK;
 80189b4:	2300      	movs	r3, #0
}
 80189b6:	4618      	mov	r0, r3
 80189b8:	3718      	adds	r7, #24
 80189ba:	46bd      	mov	sp, r7
 80189bc:	bd80      	pop	{r7, pc}
 80189be:	bf00      	nop
 80189c0:	0801ed7c 	.word	0x0801ed7c

080189c4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80189c4:	b580      	push	{r7, lr}
 80189c6:	b086      	sub	sp, #24
 80189c8:	af00      	add	r7, sp, #0
 80189ca:	60f8      	str	r0, [r7, #12]
 80189cc:	60b9      	str	r1, [r7, #8]
 80189ce:	607a      	str	r2, [r7, #4]
 80189d0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80189d2:	8c3b      	ldrh	r3, [r7, #32]
 80189d4:	4618      	mov	r0, r3
 80189d6:	f7f6 faf3 	bl	800efc0 <lwip_htons>
 80189da:	4603      	mov	r3, r0
 80189dc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80189de:	210e      	movs	r1, #14
 80189e0:	68b8      	ldr	r0, [r7, #8]
 80189e2:	f7f8 fe09 	bl	80115f8 <pbuf_add_header>
 80189e6:	4603      	mov	r3, r0
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d125      	bne.n	8018a38 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80189ec:	68bb      	ldr	r3, [r7, #8]
 80189ee:	685b      	ldr	r3, [r3, #4]
 80189f0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80189f2:	693b      	ldr	r3, [r7, #16]
 80189f4:	8afa      	ldrh	r2, [r7, #22]
 80189f6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80189f8:	693b      	ldr	r3, [r7, #16]
 80189fa:	2206      	movs	r2, #6
 80189fc:	6839      	ldr	r1, [r7, #0]
 80189fe:	4618      	mov	r0, r3
 8018a00:	f000 fa74 	bl	8018eec <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8018a04:	693b      	ldr	r3, [r7, #16]
 8018a06:	3306      	adds	r3, #6
 8018a08:	2206      	movs	r2, #6
 8018a0a:	6879      	ldr	r1, [r7, #4]
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	f000 fa6d 	bl	8018eec <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018a18:	2b06      	cmp	r3, #6
 8018a1a:	d006      	beq.n	8018a2a <ethernet_output+0x66>
 8018a1c:	4b0a      	ldr	r3, [pc, #40]	; (8018a48 <ethernet_output+0x84>)
 8018a1e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8018a22:	490a      	ldr	r1, [pc, #40]	; (8018a4c <ethernet_output+0x88>)
 8018a24:	480a      	ldr	r0, [pc, #40]	; (8018a50 <ethernet_output+0x8c>)
 8018a26:	f000 fa91 	bl	8018f4c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	699b      	ldr	r3, [r3, #24]
 8018a2e:	68b9      	ldr	r1, [r7, #8]
 8018a30:	68f8      	ldr	r0, [r7, #12]
 8018a32:	4798      	blx	r3
 8018a34:	4603      	mov	r3, r0
 8018a36:	e002      	b.n	8018a3e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8018a38:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8018a3a:	f06f 0301 	mvn.w	r3, #1
}
 8018a3e:	4618      	mov	r0, r3
 8018a40:	3718      	adds	r7, #24
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd80      	pop	{r7, pc}
 8018a46:	bf00      	nop
 8018a48:	0801ed8c 	.word	0x0801ed8c
 8018a4c:	0801ee04 	.word	0x0801ee04
 8018a50:	0801ee38 	.word	0x0801ee38

08018a54 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8018a54:	b580      	push	{r7, lr}
 8018a56:	b084      	sub	sp, #16
 8018a58:	af00      	add	r7, sp, #0
 8018a5a:	6078      	str	r0, [r7, #4]
 8018a5c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8018a5e:	683b      	ldr	r3, [r7, #0]
 8018a60:	60bb      	str	r3, [r7, #8]
 8018a62:	2304      	movs	r3, #4
 8018a64:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8018a66:	f107 0308 	add.w	r3, r7, #8
 8018a6a:	2100      	movs	r1, #0
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f7ef fa20 	bl	8007eb2 <osMessageCreate>
 8018a72:	4602      	mov	r2, r0
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d102      	bne.n	8018a86 <sys_mbox_new+0x32>
    return ERR_MEM;
 8018a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018a84:	e000      	b.n	8018a88 <sys_mbox_new+0x34>

  return ERR_OK;
 8018a86:	2300      	movs	r3, #0
}
 8018a88:	4618      	mov	r0, r3
 8018a8a:	3710      	adds	r7, #16
 8018a8c:	46bd      	mov	sp, r7
 8018a8e:	bd80      	pop	{r7, pc}

08018a90 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8018a90:	b580      	push	{r7, lr}
 8018a92:	b082      	sub	sp, #8
 8018a94:	af00      	add	r7, sp, #0
 8018a96:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	681b      	ldr	r3, [r3, #0]
 8018a9c:	4618      	mov	r0, r3
 8018a9e:	f7ef fae6 	bl	800806e <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	4618      	mov	r0, r3
 8018aa8:	f7ef faf7 	bl	800809a <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8018aac:	bf00      	nop
 8018aae:	3708      	adds	r7, #8
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	bd80      	pop	{r7, pc}

08018ab4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8018ab4:	b580      	push	{r7, lr}
 8018ab6:	b084      	sub	sp, #16
 8018ab8:	af00      	add	r7, sp, #0
 8018aba:	6078      	str	r0, [r7, #4]
 8018abc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	681b      	ldr	r3, [r3, #0]
 8018ac2:	6839      	ldr	r1, [r7, #0]
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	4618      	mov	r0, r3
 8018ac8:	f7ef fa06 	bl	8007ed8 <osMessagePut>
 8018acc:	4603      	mov	r3, r0
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d102      	bne.n	8018ad8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8018ad2:	2300      	movs	r3, #0
 8018ad4:	73fb      	strb	r3, [r7, #15]
 8018ad6:	e001      	b.n	8018adc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8018ad8:	23ff      	movs	r3, #255	; 0xff
 8018ada:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8018adc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018ae0:	4618      	mov	r0, r3
 8018ae2:	3710      	adds	r7, #16
 8018ae4:	46bd      	mov	sp, r7
 8018ae6:	bd80      	pop	{r7, pc}

08018ae8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b08c      	sub	sp, #48	; 0x30
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	61f8      	str	r0, [r7, #28]
 8018af0:	61b9      	str	r1, [r7, #24]
 8018af2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8018af4:	f7ef f83b 	bl	8007b6e <osKernelSysTick>
 8018af8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018afa:	697b      	ldr	r3, [r7, #20]
 8018afc:	2b00      	cmp	r3, #0
 8018afe:	d017      	beq.n	8018b30 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8018b00:	69fb      	ldr	r3, [r7, #28]
 8018b02:	6819      	ldr	r1, [r3, #0]
 8018b04:	f107 0320 	add.w	r3, r7, #32
 8018b08:	697a      	ldr	r2, [r7, #20]
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	f7ef fa24 	bl	8007f58 <osMessageGet>

    if(event.status == osEventMessage)
 8018b10:	6a3b      	ldr	r3, [r7, #32]
 8018b12:	2b10      	cmp	r3, #16
 8018b14:	d109      	bne.n	8018b2a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8018b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b18:	461a      	mov	r2, r3
 8018b1a:	69bb      	ldr	r3, [r7, #24]
 8018b1c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8018b1e:	f7ef f826 	bl	8007b6e <osKernelSysTick>
 8018b22:	4602      	mov	r2, r0
 8018b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b26:	1ad3      	subs	r3, r2, r3
 8018b28:	e019      	b.n	8018b5e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b2e:	e016      	b.n	8018b5e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8018b30:	69fb      	ldr	r3, [r7, #28]
 8018b32:	6819      	ldr	r1, [r3, #0]
 8018b34:	463b      	mov	r3, r7
 8018b36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	f7ef fa0c 	bl	8007f58 <osMessageGet>
 8018b40:	f107 0320 	add.w	r3, r7, #32
 8018b44:	463a      	mov	r2, r7
 8018b46:	ca07      	ldmia	r2, {r0, r1, r2}
 8018b48:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8018b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b4e:	461a      	mov	r2, r3
 8018b50:	69bb      	ldr	r3, [r7, #24]
 8018b52:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8018b54:	f7ef f80b 	bl	8007b6e <osKernelSysTick>
 8018b58:	4602      	mov	r2, r0
 8018b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b5c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018b5e:	4618      	mov	r0, r3
 8018b60:	3730      	adds	r7, #48	; 0x30
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}

08018b66 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8018b66:	b580      	push	{r7, lr}
 8018b68:	b086      	sub	sp, #24
 8018b6a:	af00      	add	r7, sp, #0
 8018b6c:	6078      	str	r0, [r7, #4]
 8018b6e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	6819      	ldr	r1, [r3, #0]
 8018b74:	f107 030c 	add.w	r3, r7, #12
 8018b78:	2200      	movs	r2, #0
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	f7ef f9ec 	bl	8007f58 <osMessageGet>

  if(event.status == osEventMessage)
 8018b80:	68fb      	ldr	r3, [r7, #12]
 8018b82:	2b10      	cmp	r3, #16
 8018b84:	d105      	bne.n	8018b92 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8018b86:	693b      	ldr	r3, [r7, #16]
 8018b88:	461a      	mov	r2, r3
 8018b8a:	683b      	ldr	r3, [r7, #0]
 8018b8c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8018b8e:	2300      	movs	r3, #0
 8018b90:	e001      	b.n	8018b96 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8018b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8018b96:	4618      	mov	r0, r3
 8018b98:	3718      	adds	r7, #24
 8018b9a:	46bd      	mov	sp, r7
 8018b9c:	bd80      	pop	{r7, pc}

08018b9e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8018b9e:	b480      	push	{r7}
 8018ba0:	b083      	sub	sp, #12
 8018ba2:	af00      	add	r7, sp, #0
 8018ba4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8018ba6:	687b      	ldr	r3, [r7, #4]
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d101      	bne.n	8018bb2 <sys_mbox_valid+0x14>
    return 0;
 8018bae:	2300      	movs	r3, #0
 8018bb0:	e000      	b.n	8018bb4 <sys_mbox_valid+0x16>
  else
    return 1;
 8018bb2:	2301      	movs	r3, #1
}
 8018bb4:	4618      	mov	r0, r3
 8018bb6:	370c      	adds	r7, #12
 8018bb8:	46bd      	mov	sp, r7
 8018bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bbe:	4770      	bx	lr

08018bc0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8018bc0:	b480      	push	{r7}
 8018bc2:	b083      	sub	sp, #12
 8018bc4:	af00      	add	r7, sp, #0
 8018bc6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8018bc8:	687b      	ldr	r3, [r7, #4]
 8018bca:	2200      	movs	r2, #0
 8018bcc:	601a      	str	r2, [r3, #0]
}
 8018bce:	bf00      	nop
 8018bd0:	370c      	adds	r7, #12
 8018bd2:	46bd      	mov	sp, r7
 8018bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd8:	4770      	bx	lr

08018bda <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8018bda:	b580      	push	{r7, lr}
 8018bdc:	b084      	sub	sp, #16
 8018bde:	af00      	add	r7, sp, #0
 8018be0:	6078      	str	r0, [r7, #4]
 8018be2:	460b      	mov	r3, r1
 8018be4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8018be6:	2300      	movs	r3, #0
 8018be8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8018bea:	f107 030c 	add.w	r3, r7, #12
 8018bee:	2101      	movs	r1, #1
 8018bf0:	4618      	mov	r0, r3
 8018bf2:	f7ef f8a3 	bl	8007d3c <osSemaphoreCreate>
 8018bf6:	4602      	mov	r2, r0
 8018bf8:	687b      	ldr	r3, [r7, #4]
 8018bfa:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	681b      	ldr	r3, [r3, #0]
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d102      	bne.n	8018c0a <sys_sem_new+0x30>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018c04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c08:	e009      	b.n	8018c1e <sys_sem_new+0x44>
  }

  if(count == 0)	// Means it can't be taken
 8018c0a:	78fb      	ldrb	r3, [r7, #3]
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d105      	bne.n	8018c1c <sys_sem_new+0x42>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8018c10:	687b      	ldr	r3, [r7, #4]
 8018c12:	681b      	ldr	r3, [r3, #0]
 8018c14:	2100      	movs	r1, #0
 8018c16:	4618      	mov	r0, r3
 8018c18:	f7ef f8b4 	bl	8007d84 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8018c1c:	2300      	movs	r3, #0
}
 8018c1e:	4618      	mov	r0, r3
 8018c20:	3710      	adds	r7, #16
 8018c22:	46bd      	mov	sp, r7
 8018c24:	bd80      	pop	{r7, pc}

08018c26 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8018c26:	b580      	push	{r7, lr}
 8018c28:	b084      	sub	sp, #16
 8018c2a:	af00      	add	r7, sp, #0
 8018c2c:	6078      	str	r0, [r7, #4]
 8018c2e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8018c30:	f7ee ff9d 	bl	8007b6e <osKernelSysTick>
 8018c34:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8018c36:	683b      	ldr	r3, [r7, #0]
 8018c38:	2b00      	cmp	r3, #0
 8018c3a:	d011      	beq.n	8018c60 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8018c3c:	687b      	ldr	r3, [r7, #4]
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	6839      	ldr	r1, [r7, #0]
 8018c42:	4618      	mov	r0, r3
 8018c44:	f7ef f89e 	bl	8007d84 <osSemaphoreWait>
 8018c48:	4603      	mov	r3, r0
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d105      	bne.n	8018c5a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8018c4e:	f7ee ff8e 	bl	8007b6e <osKernelSysTick>
 8018c52:	4602      	mov	r2, r0
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	1ad3      	subs	r3, r2, r3
 8018c58:	e012      	b.n	8018c80 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8018c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018c5e:	e00f      	b.n	8018c80 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8018c60:	bf00      	nop
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	681b      	ldr	r3, [r3, #0]
 8018c66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018c6a:	4618      	mov	r0, r3
 8018c6c:	f7ef f88a 	bl	8007d84 <osSemaphoreWait>
 8018c70:	4603      	mov	r3, r0
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	d1f5      	bne.n	8018c62 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8018c76:	f7ee ff7a 	bl	8007b6e <osKernelSysTick>
 8018c7a:	4602      	mov	r2, r0
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8018c80:	4618      	mov	r0, r3
 8018c82:	3710      	adds	r7, #16
 8018c84:	46bd      	mov	sp, r7
 8018c86:	bd80      	pop	{r7, pc}

08018c88 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8018c88:	b580      	push	{r7, lr}
 8018c8a:	b082      	sub	sp, #8
 8018c8c:	af00      	add	r7, sp, #0
 8018c8e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	4618      	mov	r0, r3
 8018c96:	f7ef f8c3 	bl	8007e20 <osSemaphoreRelease>
}
 8018c9a:	bf00      	nop
 8018c9c:	3708      	adds	r7, #8
 8018c9e:	46bd      	mov	sp, r7
 8018ca0:	bd80      	pop	{r7, pc}

08018ca2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8018ca2:	b580      	push	{r7, lr}
 8018ca4:	b082      	sub	sp, #8
 8018ca6:	af00      	add	r7, sp, #0
 8018ca8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	4618      	mov	r0, r3
 8018cb0:	f7ef f8ec 	bl	8007e8c <osSemaphoreDelete>
}
 8018cb4:	bf00      	nop
 8018cb6:	3708      	adds	r7, #8
 8018cb8:	46bd      	mov	sp, r7
 8018cba:	bd80      	pop	{r7, pc}

08018cbc <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8018cbc:	b480      	push	{r7}
 8018cbe:	b083      	sub	sp, #12
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d101      	bne.n	8018cd0 <sys_sem_valid+0x14>
    return 0;
 8018ccc:	2300      	movs	r3, #0
 8018cce:	e000      	b.n	8018cd2 <sys_sem_valid+0x16>
  else
    return 1;
 8018cd0:	2301      	movs	r3, #1
}
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	370c      	adds	r7, #12
 8018cd6:	46bd      	mov	sp, r7
 8018cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cdc:	4770      	bx	lr

08018cde <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8018cde:	b480      	push	{r7}
 8018ce0:	b083      	sub	sp, #12
 8018ce2:	af00      	add	r7, sp, #0
 8018ce4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	2200      	movs	r2, #0
 8018cea:	601a      	str	r2, [r3, #0]
}
 8018cec:	bf00      	nop
 8018cee:	370c      	adds	r7, #12
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cf6:	4770      	bx	lr

08018cf8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8018cf8:	b580      	push	{r7, lr}
 8018cfa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8018cfc:	4803      	ldr	r0, [pc, #12]	; (8018d0c <sys_init+0x14>)
 8018cfe:	f7ee ff8d 	bl	8007c1c <osMutexCreate>
 8018d02:	4603      	mov	r3, r0
 8018d04:	4a02      	ldr	r2, [pc, #8]	; (8018d10 <sys_init+0x18>)
 8018d06:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8018d08:	bf00      	nop
 8018d0a:	bd80      	pop	{r7, pc}
 8018d0c:	0801ee60 	.word	0x0801ee60
 8018d10:	2400b2c4 	.word	0x2400b2c4

08018d14 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8018d14:	b580      	push	{r7, lr}
 8018d16:	b084      	sub	sp, #16
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8018d20:	f107 030c 	add.w	r3, r7, #12
 8018d24:	4618      	mov	r0, r3
 8018d26:	f7ee ff79 	bl	8007c1c <osMutexCreate>
 8018d2a:	4602      	mov	r2, r0
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d102      	bne.n	8018d3e <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8018d38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d3c:	e000      	b.n	8018d40 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8018d3e:	2300      	movs	r3, #0
}
 8018d40:	4618      	mov	r0, r3
 8018d42:	3710      	adds	r7, #16
 8018d44:	46bd      	mov	sp, r7
 8018d46:	bd80      	pop	{r7, pc}

08018d48 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8018d48:	b580      	push	{r7, lr}
 8018d4a:	b082      	sub	sp, #8
 8018d4c:	af00      	add	r7, sp, #0
 8018d4e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018d58:	4618      	mov	r0, r3
 8018d5a:	f7ee ff6b 	bl	8007c34 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8018d5e:	bf00      	nop
 8018d60:	3708      	adds	r7, #8
 8018d62:	46bd      	mov	sp, r7
 8018d64:	bd80      	pop	{r7, pc}

08018d66 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8018d66:	b580      	push	{r7, lr}
 8018d68:	b082      	sub	sp, #8
 8018d6a:	af00      	add	r7, sp, #0
 8018d6c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	4618      	mov	r0, r3
 8018d74:	f7ee ffac 	bl	8007cd0 <osMutexRelease>
}
 8018d78:	bf00      	nop
 8018d7a:	3708      	adds	r7, #8
 8018d7c:	46bd      	mov	sp, r7
 8018d7e:	bd80      	pop	{r7, pc}

08018d80 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b08a      	sub	sp, #40	; 0x28
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	60f8      	str	r0, [r7, #12]
 8018d88:	60b9      	str	r1, [r7, #8]
 8018d8a:	607a      	str	r2, [r7, #4]
 8018d8c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	617b      	str	r3, [r7, #20]
 8018d92:	68bb      	ldr	r3, [r7, #8]
 8018d94:	61bb      	str	r3, [r7, #24]
 8018d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d98:	b21b      	sxth	r3, r3
 8018d9a:	83bb      	strh	r3, [r7, #28]
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	623b      	str	r3, [r7, #32]
 8018da0:	683b      	ldr	r3, [r7, #0]
 8018da2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8018da4:	f107 0314 	add.w	r3, r7, #20
 8018da8:	6879      	ldr	r1, [r7, #4]
 8018daa:	4618      	mov	r0, r3
 8018dac:	f7ee feef 	bl	8007b8e <osThreadCreate>
 8018db0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8018db2:	4618      	mov	r0, r3
 8018db4:	3728      	adds	r7, #40	; 0x28
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bd80      	pop	{r7, pc}
	...

08018dbc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8018dbc:	b580      	push	{r7, lr}
 8018dbe:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8018dc0:	4b04      	ldr	r3, [pc, #16]	; (8018dd4 <sys_arch_protect+0x18>)
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8018dc8:	4618      	mov	r0, r3
 8018dca:	f7ee ff33 	bl	8007c34 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8018dce:	2301      	movs	r3, #1
}
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	bd80      	pop	{r7, pc}
 8018dd4:	2400b2c4 	.word	0x2400b2c4

08018dd8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8018dd8:	b580      	push	{r7, lr}
 8018dda:	b082      	sub	sp, #8
 8018ddc:	af00      	add	r7, sp, #0
 8018dde:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8018de0:	4b04      	ldr	r3, [pc, #16]	; (8018df4 <sys_arch_unprotect+0x1c>)
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	4618      	mov	r0, r3
 8018de6:	f7ee ff73 	bl	8007cd0 <osMutexRelease>
}
 8018dea:	bf00      	nop
 8018dec:	3708      	adds	r7, #8
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}
 8018df2:	bf00      	nop
 8018df4:	2400b2c4 	.word	0x2400b2c4

08018df8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8018df8:	b580      	push	{r7, lr}
 8018dfa:	b084      	sub	sp, #16
 8018dfc:	af00      	add	r7, sp, #0
 8018dfe:	6078      	str	r0, [r7, #4]
 8018e00:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d002      	beq.n	8018e0e <fs_open+0x16>
 8018e08:	683b      	ldr	r3, [r7, #0]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d102      	bne.n	8018e14 <fs_open+0x1c>
    return ERR_ARG;
 8018e0e:	f06f 030f 	mvn.w	r3, #15
 8018e12:	e028      	b.n	8018e66 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8018e14:	4b16      	ldr	r3, [pc, #88]	; (8018e70 <fs_open+0x78>)
 8018e16:	60fb      	str	r3, [r7, #12]
 8018e18:	e020      	b.n	8018e5c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	685b      	ldr	r3, [r3, #4]
 8018e1e:	4619      	mov	r1, r3
 8018e20:	6838      	ldr	r0, [r7, #0]
 8018e22:	f7e7 fa5d 	bl	80002e0 <strcmp>
 8018e26:	4603      	mov	r3, r0
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	d114      	bne.n	8018e56 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	689a      	ldr	r2, [r3, #8]
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8018e34:	68fb      	ldr	r3, [r7, #12]
 8018e36:	68da      	ldr	r2, [r3, #12]
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	68da      	ldr	r2, [r3, #12]
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	2200      	movs	r2, #0
 8018e48:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	7c1a      	ldrb	r2, [r3, #16]
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8018e52:	2300      	movs	r3, #0
 8018e54:	e007      	b.n	8018e66 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8018e56:	68fb      	ldr	r3, [r7, #12]
 8018e58:	681b      	ldr	r3, [r3, #0]
 8018e5a:	60fb      	str	r3, [r7, #12]
 8018e5c:	68fb      	ldr	r3, [r7, #12]
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	d1db      	bne.n	8018e1a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8018e62:	f06f 0305 	mvn.w	r3, #5
}
 8018e66:	4618      	mov	r0, r3
 8018e68:	3710      	adds	r7, #16
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	bd80      	pop	{r7, pc}
 8018e6e:	bf00      	nop
 8018e70:	0802eea0 	.word	0x0802eea0

08018e74 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8018e74:	b480      	push	{r7}
 8018e76:	b083      	sub	sp, #12
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8018e7c:	bf00      	nop
 8018e7e:	370c      	adds	r7, #12
 8018e80:	46bd      	mov	sp, r7
 8018e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e86:	4770      	bx	lr

08018e88 <__libc_init_array>:
 8018e88:	b570      	push	{r4, r5, r6, lr}
 8018e8a:	4d0d      	ldr	r5, [pc, #52]	; (8018ec0 <__libc_init_array+0x38>)
 8018e8c:	4c0d      	ldr	r4, [pc, #52]	; (8018ec4 <__libc_init_array+0x3c>)
 8018e8e:	1b64      	subs	r4, r4, r5
 8018e90:	10a4      	asrs	r4, r4, #2
 8018e92:	2600      	movs	r6, #0
 8018e94:	42a6      	cmp	r6, r4
 8018e96:	d109      	bne.n	8018eac <__libc_init_array+0x24>
 8018e98:	4d0b      	ldr	r5, [pc, #44]	; (8018ec8 <__libc_init_array+0x40>)
 8018e9a:	4c0c      	ldr	r4, [pc, #48]	; (8018ecc <__libc_init_array+0x44>)
 8018e9c:	f001 faa6 	bl	801a3ec <_init>
 8018ea0:	1b64      	subs	r4, r4, r5
 8018ea2:	10a4      	asrs	r4, r4, #2
 8018ea4:	2600      	movs	r6, #0
 8018ea6:	42a6      	cmp	r6, r4
 8018ea8:	d105      	bne.n	8018eb6 <__libc_init_array+0x2e>
 8018eaa:	bd70      	pop	{r4, r5, r6, pc}
 8018eac:	f855 3b04 	ldr.w	r3, [r5], #4
 8018eb0:	4798      	blx	r3
 8018eb2:	3601      	adds	r6, #1
 8018eb4:	e7ee      	b.n	8018e94 <__libc_init_array+0xc>
 8018eb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8018eba:	4798      	blx	r3
 8018ebc:	3601      	adds	r6, #1
 8018ebe:	e7f2      	b.n	8018ea6 <__libc_init_array+0x1e>
 8018ec0:	0802f104 	.word	0x0802f104
 8018ec4:	0802f104 	.word	0x0802f104
 8018ec8:	0802f104 	.word	0x0802f104
 8018ecc:	0802f108 	.word	0x0802f108

08018ed0 <memcmp>:
 8018ed0:	b530      	push	{r4, r5, lr}
 8018ed2:	3901      	subs	r1, #1
 8018ed4:	2400      	movs	r4, #0
 8018ed6:	42a2      	cmp	r2, r4
 8018ed8:	d101      	bne.n	8018ede <memcmp+0xe>
 8018eda:	2000      	movs	r0, #0
 8018edc:	e005      	b.n	8018eea <memcmp+0x1a>
 8018ede:	5d03      	ldrb	r3, [r0, r4]
 8018ee0:	3401      	adds	r4, #1
 8018ee2:	5d0d      	ldrb	r5, [r1, r4]
 8018ee4:	42ab      	cmp	r3, r5
 8018ee6:	d0f6      	beq.n	8018ed6 <memcmp+0x6>
 8018ee8:	1b58      	subs	r0, r3, r5
 8018eea:	bd30      	pop	{r4, r5, pc}

08018eec <memcpy>:
 8018eec:	440a      	add	r2, r1
 8018eee:	4291      	cmp	r1, r2
 8018ef0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018ef4:	d100      	bne.n	8018ef8 <memcpy+0xc>
 8018ef6:	4770      	bx	lr
 8018ef8:	b510      	push	{r4, lr}
 8018efa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018efe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018f02:	4291      	cmp	r1, r2
 8018f04:	d1f9      	bne.n	8018efa <memcpy+0xe>
 8018f06:	bd10      	pop	{r4, pc}

08018f08 <memmove>:
 8018f08:	4288      	cmp	r0, r1
 8018f0a:	b510      	push	{r4, lr}
 8018f0c:	eb01 0402 	add.w	r4, r1, r2
 8018f10:	d902      	bls.n	8018f18 <memmove+0x10>
 8018f12:	4284      	cmp	r4, r0
 8018f14:	4623      	mov	r3, r4
 8018f16:	d807      	bhi.n	8018f28 <memmove+0x20>
 8018f18:	1e43      	subs	r3, r0, #1
 8018f1a:	42a1      	cmp	r1, r4
 8018f1c:	d008      	beq.n	8018f30 <memmove+0x28>
 8018f1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018f22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018f26:	e7f8      	b.n	8018f1a <memmove+0x12>
 8018f28:	4402      	add	r2, r0
 8018f2a:	4601      	mov	r1, r0
 8018f2c:	428a      	cmp	r2, r1
 8018f2e:	d100      	bne.n	8018f32 <memmove+0x2a>
 8018f30:	bd10      	pop	{r4, pc}
 8018f32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018f36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018f3a:	e7f7      	b.n	8018f2c <memmove+0x24>

08018f3c <memset>:
 8018f3c:	4402      	add	r2, r0
 8018f3e:	4603      	mov	r3, r0
 8018f40:	4293      	cmp	r3, r2
 8018f42:	d100      	bne.n	8018f46 <memset+0xa>
 8018f44:	4770      	bx	lr
 8018f46:	f803 1b01 	strb.w	r1, [r3], #1
 8018f4a:	e7f9      	b.n	8018f40 <memset+0x4>

08018f4c <iprintf>:
 8018f4c:	b40f      	push	{r0, r1, r2, r3}
 8018f4e:	4b0a      	ldr	r3, [pc, #40]	; (8018f78 <iprintf+0x2c>)
 8018f50:	b513      	push	{r0, r1, r4, lr}
 8018f52:	681c      	ldr	r4, [r3, #0]
 8018f54:	b124      	cbz	r4, 8018f60 <iprintf+0x14>
 8018f56:	69a3      	ldr	r3, [r4, #24]
 8018f58:	b913      	cbnz	r3, 8018f60 <iprintf+0x14>
 8018f5a:	4620      	mov	r0, r4
 8018f5c:	f000 f920 	bl	80191a0 <__sinit>
 8018f60:	ab05      	add	r3, sp, #20
 8018f62:	9a04      	ldr	r2, [sp, #16]
 8018f64:	68a1      	ldr	r1, [r4, #8]
 8018f66:	9301      	str	r3, [sp, #4]
 8018f68:	4620      	mov	r0, r4
 8018f6a:	f000 fc03 	bl	8019774 <_vfiprintf_r>
 8018f6e:	b002      	add	sp, #8
 8018f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018f74:	b004      	add	sp, #16
 8018f76:	4770      	bx	lr
 8018f78:	24000050 	.word	0x24000050

08018f7c <rand>:
 8018f7c:	4b17      	ldr	r3, [pc, #92]	; (8018fdc <rand+0x60>)
 8018f7e:	b510      	push	{r4, lr}
 8018f80:	681c      	ldr	r4, [r3, #0]
 8018f82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018f84:	b9b3      	cbnz	r3, 8018fb4 <rand+0x38>
 8018f86:	2018      	movs	r0, #24
 8018f88:	f000 f9bc 	bl	8019304 <malloc>
 8018f8c:	63a0      	str	r0, [r4, #56]	; 0x38
 8018f8e:	b928      	cbnz	r0, 8018f9c <rand+0x20>
 8018f90:	4602      	mov	r2, r0
 8018f92:	4b13      	ldr	r3, [pc, #76]	; (8018fe0 <rand+0x64>)
 8018f94:	4813      	ldr	r0, [pc, #76]	; (8018fe4 <rand+0x68>)
 8018f96:	214e      	movs	r1, #78	; 0x4e
 8018f98:	f000 f88c 	bl	80190b4 <__assert_func>
 8018f9c:	4a12      	ldr	r2, [pc, #72]	; (8018fe8 <rand+0x6c>)
 8018f9e:	4b13      	ldr	r3, [pc, #76]	; (8018fec <rand+0x70>)
 8018fa0:	e9c0 2300 	strd	r2, r3, [r0]
 8018fa4:	4b12      	ldr	r3, [pc, #72]	; (8018ff0 <rand+0x74>)
 8018fa6:	6083      	str	r3, [r0, #8]
 8018fa8:	230b      	movs	r3, #11
 8018faa:	8183      	strh	r3, [r0, #12]
 8018fac:	2201      	movs	r2, #1
 8018fae:	2300      	movs	r3, #0
 8018fb0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018fb4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018fb6:	480f      	ldr	r0, [pc, #60]	; (8018ff4 <rand+0x78>)
 8018fb8:	690a      	ldr	r2, [r1, #16]
 8018fba:	694b      	ldr	r3, [r1, #20]
 8018fbc:	4c0e      	ldr	r4, [pc, #56]	; (8018ff8 <rand+0x7c>)
 8018fbe:	4350      	muls	r0, r2
 8018fc0:	fb04 0003 	mla	r0, r4, r3, r0
 8018fc4:	fba2 3404 	umull	r3, r4, r2, r4
 8018fc8:	1c5a      	adds	r2, r3, #1
 8018fca:	4404      	add	r4, r0
 8018fcc:	f144 0000 	adc.w	r0, r4, #0
 8018fd0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018fd4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018fd8:	bd10      	pop	{r4, pc}
 8018fda:	bf00      	nop
 8018fdc:	24000050 	.word	0x24000050
 8018fe0:	0802efbc 	.word	0x0802efbc
 8018fe4:	0802efd3 	.word	0x0802efd3
 8018fe8:	abcd330e 	.word	0xabcd330e
 8018fec:	e66d1234 	.word	0xe66d1234
 8018ff0:	0005deec 	.word	0x0005deec
 8018ff4:	5851f42d 	.word	0x5851f42d
 8018ff8:	4c957f2d 	.word	0x4c957f2d

08018ffc <siprintf>:
 8018ffc:	b40e      	push	{r1, r2, r3}
 8018ffe:	b500      	push	{lr}
 8019000:	b09c      	sub	sp, #112	; 0x70
 8019002:	ab1d      	add	r3, sp, #116	; 0x74
 8019004:	9002      	str	r0, [sp, #8]
 8019006:	9006      	str	r0, [sp, #24]
 8019008:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801900c:	4809      	ldr	r0, [pc, #36]	; (8019034 <siprintf+0x38>)
 801900e:	9107      	str	r1, [sp, #28]
 8019010:	9104      	str	r1, [sp, #16]
 8019012:	4909      	ldr	r1, [pc, #36]	; (8019038 <siprintf+0x3c>)
 8019014:	f853 2b04 	ldr.w	r2, [r3], #4
 8019018:	9105      	str	r1, [sp, #20]
 801901a:	6800      	ldr	r0, [r0, #0]
 801901c:	9301      	str	r3, [sp, #4]
 801901e:	a902      	add	r1, sp, #8
 8019020:	f000 fa7e 	bl	8019520 <_svfiprintf_r>
 8019024:	9b02      	ldr	r3, [sp, #8]
 8019026:	2200      	movs	r2, #0
 8019028:	701a      	strb	r2, [r3, #0]
 801902a:	b01c      	add	sp, #112	; 0x70
 801902c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019030:	b003      	add	sp, #12
 8019032:	4770      	bx	lr
 8019034:	24000050 	.word	0x24000050
 8019038:	ffff0208 	.word	0xffff0208

0801903c <strcat>:
 801903c:	b510      	push	{r4, lr}
 801903e:	4602      	mov	r2, r0
 8019040:	7814      	ldrb	r4, [r2, #0]
 8019042:	4613      	mov	r3, r2
 8019044:	3201      	adds	r2, #1
 8019046:	2c00      	cmp	r4, #0
 8019048:	d1fa      	bne.n	8019040 <strcat+0x4>
 801904a:	3b01      	subs	r3, #1
 801904c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019050:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019054:	2a00      	cmp	r2, #0
 8019056:	d1f9      	bne.n	801904c <strcat+0x10>
 8019058:	bd10      	pop	{r4, pc}

0801905a <strcpy>:
 801905a:	4603      	mov	r3, r0
 801905c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019060:	f803 2b01 	strb.w	r2, [r3], #1
 8019064:	2a00      	cmp	r2, #0
 8019066:	d1f9      	bne.n	801905c <strcpy+0x2>
 8019068:	4770      	bx	lr

0801906a <strncmp>:
 801906a:	b510      	push	{r4, lr}
 801906c:	b16a      	cbz	r2, 801908a <strncmp+0x20>
 801906e:	3901      	subs	r1, #1
 8019070:	1884      	adds	r4, r0, r2
 8019072:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019076:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801907a:	4293      	cmp	r3, r2
 801907c:	d103      	bne.n	8019086 <strncmp+0x1c>
 801907e:	42a0      	cmp	r0, r4
 8019080:	d001      	beq.n	8019086 <strncmp+0x1c>
 8019082:	2b00      	cmp	r3, #0
 8019084:	d1f5      	bne.n	8019072 <strncmp+0x8>
 8019086:	1a98      	subs	r0, r3, r2
 8019088:	bd10      	pop	{r4, pc}
 801908a:	4610      	mov	r0, r2
 801908c:	e7fc      	b.n	8019088 <strncmp+0x1e>

0801908e <strncpy>:
 801908e:	b510      	push	{r4, lr}
 8019090:	3901      	subs	r1, #1
 8019092:	4603      	mov	r3, r0
 8019094:	b132      	cbz	r2, 80190a4 <strncpy+0x16>
 8019096:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801909a:	f803 4b01 	strb.w	r4, [r3], #1
 801909e:	3a01      	subs	r2, #1
 80190a0:	2c00      	cmp	r4, #0
 80190a2:	d1f7      	bne.n	8019094 <strncpy+0x6>
 80190a4:	441a      	add	r2, r3
 80190a6:	2100      	movs	r1, #0
 80190a8:	4293      	cmp	r3, r2
 80190aa:	d100      	bne.n	80190ae <strncpy+0x20>
 80190ac:	bd10      	pop	{r4, pc}
 80190ae:	f803 1b01 	strb.w	r1, [r3], #1
 80190b2:	e7f9      	b.n	80190a8 <strncpy+0x1a>

080190b4 <__assert_func>:
 80190b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80190b6:	4614      	mov	r4, r2
 80190b8:	461a      	mov	r2, r3
 80190ba:	4b09      	ldr	r3, [pc, #36]	; (80190e0 <__assert_func+0x2c>)
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	4605      	mov	r5, r0
 80190c0:	68d8      	ldr	r0, [r3, #12]
 80190c2:	b14c      	cbz	r4, 80190d8 <__assert_func+0x24>
 80190c4:	4b07      	ldr	r3, [pc, #28]	; (80190e4 <__assert_func+0x30>)
 80190c6:	9100      	str	r1, [sp, #0]
 80190c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80190cc:	4906      	ldr	r1, [pc, #24]	; (80190e8 <__assert_func+0x34>)
 80190ce:	462b      	mov	r3, r5
 80190d0:	f000 f8e4 	bl	801929c <fiprintf>
 80190d4:	f000 ff38 	bl	8019f48 <abort>
 80190d8:	4b04      	ldr	r3, [pc, #16]	; (80190ec <__assert_func+0x38>)
 80190da:	461c      	mov	r4, r3
 80190dc:	e7f3      	b.n	80190c6 <__assert_func+0x12>
 80190de:	bf00      	nop
 80190e0:	24000050 	.word	0x24000050
 80190e4:	0802f032 	.word	0x0802f032
 80190e8:	0802f03f 	.word	0x0802f03f
 80190ec:	0802f06d 	.word	0x0802f06d

080190f0 <std>:
 80190f0:	2300      	movs	r3, #0
 80190f2:	b510      	push	{r4, lr}
 80190f4:	4604      	mov	r4, r0
 80190f6:	e9c0 3300 	strd	r3, r3, [r0]
 80190fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80190fe:	6083      	str	r3, [r0, #8]
 8019100:	8181      	strh	r1, [r0, #12]
 8019102:	6643      	str	r3, [r0, #100]	; 0x64
 8019104:	81c2      	strh	r2, [r0, #14]
 8019106:	6183      	str	r3, [r0, #24]
 8019108:	4619      	mov	r1, r3
 801910a:	2208      	movs	r2, #8
 801910c:	305c      	adds	r0, #92	; 0x5c
 801910e:	f7ff ff15 	bl	8018f3c <memset>
 8019112:	4b05      	ldr	r3, [pc, #20]	; (8019128 <std+0x38>)
 8019114:	6263      	str	r3, [r4, #36]	; 0x24
 8019116:	4b05      	ldr	r3, [pc, #20]	; (801912c <std+0x3c>)
 8019118:	62a3      	str	r3, [r4, #40]	; 0x28
 801911a:	4b05      	ldr	r3, [pc, #20]	; (8019130 <std+0x40>)
 801911c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801911e:	4b05      	ldr	r3, [pc, #20]	; (8019134 <std+0x44>)
 8019120:	6224      	str	r4, [r4, #32]
 8019122:	6323      	str	r3, [r4, #48]	; 0x30
 8019124:	bd10      	pop	{r4, pc}
 8019126:	bf00      	nop
 8019128:	08019d1d 	.word	0x08019d1d
 801912c:	08019d3f 	.word	0x08019d3f
 8019130:	08019d77 	.word	0x08019d77
 8019134:	08019d9b 	.word	0x08019d9b

08019138 <_cleanup_r>:
 8019138:	4901      	ldr	r1, [pc, #4]	; (8019140 <_cleanup_r+0x8>)
 801913a:	f000 b8c1 	b.w	80192c0 <_fwalk_reent>
 801913e:	bf00      	nop
 8019140:	0801a085 	.word	0x0801a085

08019144 <__sfmoreglue>:
 8019144:	b570      	push	{r4, r5, r6, lr}
 8019146:	1e4a      	subs	r2, r1, #1
 8019148:	2568      	movs	r5, #104	; 0x68
 801914a:	4355      	muls	r5, r2
 801914c:	460e      	mov	r6, r1
 801914e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019152:	f000 f92f 	bl	80193b4 <_malloc_r>
 8019156:	4604      	mov	r4, r0
 8019158:	b140      	cbz	r0, 801916c <__sfmoreglue+0x28>
 801915a:	2100      	movs	r1, #0
 801915c:	e9c0 1600 	strd	r1, r6, [r0]
 8019160:	300c      	adds	r0, #12
 8019162:	60a0      	str	r0, [r4, #8]
 8019164:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019168:	f7ff fee8 	bl	8018f3c <memset>
 801916c:	4620      	mov	r0, r4
 801916e:	bd70      	pop	{r4, r5, r6, pc}

08019170 <__sfp_lock_acquire>:
 8019170:	4801      	ldr	r0, [pc, #4]	; (8019178 <__sfp_lock_acquire+0x8>)
 8019172:	f000 b8c5 	b.w	8019300 <__retarget_lock_acquire_recursive>
 8019176:	bf00      	nop
 8019178:	2400b2d0 	.word	0x2400b2d0

0801917c <__sfp_lock_release>:
 801917c:	4801      	ldr	r0, [pc, #4]	; (8019184 <__sfp_lock_release+0x8>)
 801917e:	f000 b8c0 	b.w	8019302 <__retarget_lock_release_recursive>
 8019182:	bf00      	nop
 8019184:	2400b2d0 	.word	0x2400b2d0

08019188 <__sinit_lock_acquire>:
 8019188:	4801      	ldr	r0, [pc, #4]	; (8019190 <__sinit_lock_acquire+0x8>)
 801918a:	f000 b8b9 	b.w	8019300 <__retarget_lock_acquire_recursive>
 801918e:	bf00      	nop
 8019190:	2400b2cb 	.word	0x2400b2cb

08019194 <__sinit_lock_release>:
 8019194:	4801      	ldr	r0, [pc, #4]	; (801919c <__sinit_lock_release+0x8>)
 8019196:	f000 b8b4 	b.w	8019302 <__retarget_lock_release_recursive>
 801919a:	bf00      	nop
 801919c:	2400b2cb 	.word	0x2400b2cb

080191a0 <__sinit>:
 80191a0:	b510      	push	{r4, lr}
 80191a2:	4604      	mov	r4, r0
 80191a4:	f7ff fff0 	bl	8019188 <__sinit_lock_acquire>
 80191a8:	69a3      	ldr	r3, [r4, #24]
 80191aa:	b11b      	cbz	r3, 80191b4 <__sinit+0x14>
 80191ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80191b0:	f7ff bff0 	b.w	8019194 <__sinit_lock_release>
 80191b4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80191b8:	6523      	str	r3, [r4, #80]	; 0x50
 80191ba:	4b13      	ldr	r3, [pc, #76]	; (8019208 <__sinit+0x68>)
 80191bc:	4a13      	ldr	r2, [pc, #76]	; (801920c <__sinit+0x6c>)
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	62a2      	str	r2, [r4, #40]	; 0x28
 80191c2:	42a3      	cmp	r3, r4
 80191c4:	bf04      	itt	eq
 80191c6:	2301      	moveq	r3, #1
 80191c8:	61a3      	streq	r3, [r4, #24]
 80191ca:	4620      	mov	r0, r4
 80191cc:	f000 f820 	bl	8019210 <__sfp>
 80191d0:	6060      	str	r0, [r4, #4]
 80191d2:	4620      	mov	r0, r4
 80191d4:	f000 f81c 	bl	8019210 <__sfp>
 80191d8:	60a0      	str	r0, [r4, #8]
 80191da:	4620      	mov	r0, r4
 80191dc:	f000 f818 	bl	8019210 <__sfp>
 80191e0:	2200      	movs	r2, #0
 80191e2:	60e0      	str	r0, [r4, #12]
 80191e4:	2104      	movs	r1, #4
 80191e6:	6860      	ldr	r0, [r4, #4]
 80191e8:	f7ff ff82 	bl	80190f0 <std>
 80191ec:	68a0      	ldr	r0, [r4, #8]
 80191ee:	2201      	movs	r2, #1
 80191f0:	2109      	movs	r1, #9
 80191f2:	f7ff ff7d 	bl	80190f0 <std>
 80191f6:	68e0      	ldr	r0, [r4, #12]
 80191f8:	2202      	movs	r2, #2
 80191fa:	2112      	movs	r1, #18
 80191fc:	f7ff ff78 	bl	80190f0 <std>
 8019200:	2301      	movs	r3, #1
 8019202:	61a3      	str	r3, [r4, #24]
 8019204:	e7d2      	b.n	80191ac <__sinit+0xc>
 8019206:	bf00      	nop
 8019208:	0802efb8 	.word	0x0802efb8
 801920c:	08019139 	.word	0x08019139

08019210 <__sfp>:
 8019210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019212:	4607      	mov	r7, r0
 8019214:	f7ff ffac 	bl	8019170 <__sfp_lock_acquire>
 8019218:	4b1e      	ldr	r3, [pc, #120]	; (8019294 <__sfp+0x84>)
 801921a:	681e      	ldr	r6, [r3, #0]
 801921c:	69b3      	ldr	r3, [r6, #24]
 801921e:	b913      	cbnz	r3, 8019226 <__sfp+0x16>
 8019220:	4630      	mov	r0, r6
 8019222:	f7ff ffbd 	bl	80191a0 <__sinit>
 8019226:	3648      	adds	r6, #72	; 0x48
 8019228:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801922c:	3b01      	subs	r3, #1
 801922e:	d503      	bpl.n	8019238 <__sfp+0x28>
 8019230:	6833      	ldr	r3, [r6, #0]
 8019232:	b30b      	cbz	r3, 8019278 <__sfp+0x68>
 8019234:	6836      	ldr	r6, [r6, #0]
 8019236:	e7f7      	b.n	8019228 <__sfp+0x18>
 8019238:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801923c:	b9d5      	cbnz	r5, 8019274 <__sfp+0x64>
 801923e:	4b16      	ldr	r3, [pc, #88]	; (8019298 <__sfp+0x88>)
 8019240:	60e3      	str	r3, [r4, #12]
 8019242:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019246:	6665      	str	r5, [r4, #100]	; 0x64
 8019248:	f000 f859 	bl	80192fe <__retarget_lock_init_recursive>
 801924c:	f7ff ff96 	bl	801917c <__sfp_lock_release>
 8019250:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019254:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019258:	6025      	str	r5, [r4, #0]
 801925a:	61a5      	str	r5, [r4, #24]
 801925c:	2208      	movs	r2, #8
 801925e:	4629      	mov	r1, r5
 8019260:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019264:	f7ff fe6a 	bl	8018f3c <memset>
 8019268:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801926c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019270:	4620      	mov	r0, r4
 8019272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019274:	3468      	adds	r4, #104	; 0x68
 8019276:	e7d9      	b.n	801922c <__sfp+0x1c>
 8019278:	2104      	movs	r1, #4
 801927a:	4638      	mov	r0, r7
 801927c:	f7ff ff62 	bl	8019144 <__sfmoreglue>
 8019280:	4604      	mov	r4, r0
 8019282:	6030      	str	r0, [r6, #0]
 8019284:	2800      	cmp	r0, #0
 8019286:	d1d5      	bne.n	8019234 <__sfp+0x24>
 8019288:	f7ff ff78 	bl	801917c <__sfp_lock_release>
 801928c:	230c      	movs	r3, #12
 801928e:	603b      	str	r3, [r7, #0]
 8019290:	e7ee      	b.n	8019270 <__sfp+0x60>
 8019292:	bf00      	nop
 8019294:	0802efb8 	.word	0x0802efb8
 8019298:	ffff0001 	.word	0xffff0001

0801929c <fiprintf>:
 801929c:	b40e      	push	{r1, r2, r3}
 801929e:	b503      	push	{r0, r1, lr}
 80192a0:	4601      	mov	r1, r0
 80192a2:	ab03      	add	r3, sp, #12
 80192a4:	4805      	ldr	r0, [pc, #20]	; (80192bc <fiprintf+0x20>)
 80192a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80192aa:	6800      	ldr	r0, [r0, #0]
 80192ac:	9301      	str	r3, [sp, #4]
 80192ae:	f000 fa61 	bl	8019774 <_vfiprintf_r>
 80192b2:	b002      	add	sp, #8
 80192b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80192b8:	b003      	add	sp, #12
 80192ba:	4770      	bx	lr
 80192bc:	24000050 	.word	0x24000050

080192c0 <_fwalk_reent>:
 80192c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192c4:	4606      	mov	r6, r0
 80192c6:	4688      	mov	r8, r1
 80192c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80192cc:	2700      	movs	r7, #0
 80192ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80192d2:	f1b9 0901 	subs.w	r9, r9, #1
 80192d6:	d505      	bpl.n	80192e4 <_fwalk_reent+0x24>
 80192d8:	6824      	ldr	r4, [r4, #0]
 80192da:	2c00      	cmp	r4, #0
 80192dc:	d1f7      	bne.n	80192ce <_fwalk_reent+0xe>
 80192de:	4638      	mov	r0, r7
 80192e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192e4:	89ab      	ldrh	r3, [r5, #12]
 80192e6:	2b01      	cmp	r3, #1
 80192e8:	d907      	bls.n	80192fa <_fwalk_reent+0x3a>
 80192ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80192ee:	3301      	adds	r3, #1
 80192f0:	d003      	beq.n	80192fa <_fwalk_reent+0x3a>
 80192f2:	4629      	mov	r1, r5
 80192f4:	4630      	mov	r0, r6
 80192f6:	47c0      	blx	r8
 80192f8:	4307      	orrs	r7, r0
 80192fa:	3568      	adds	r5, #104	; 0x68
 80192fc:	e7e9      	b.n	80192d2 <_fwalk_reent+0x12>

080192fe <__retarget_lock_init_recursive>:
 80192fe:	4770      	bx	lr

08019300 <__retarget_lock_acquire_recursive>:
 8019300:	4770      	bx	lr

08019302 <__retarget_lock_release_recursive>:
 8019302:	4770      	bx	lr

08019304 <malloc>:
 8019304:	4b02      	ldr	r3, [pc, #8]	; (8019310 <malloc+0xc>)
 8019306:	4601      	mov	r1, r0
 8019308:	6818      	ldr	r0, [r3, #0]
 801930a:	f000 b853 	b.w	80193b4 <_malloc_r>
 801930e:	bf00      	nop
 8019310:	24000050 	.word	0x24000050

08019314 <_free_r>:
 8019314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019316:	2900      	cmp	r1, #0
 8019318:	d048      	beq.n	80193ac <_free_r+0x98>
 801931a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801931e:	9001      	str	r0, [sp, #4]
 8019320:	2b00      	cmp	r3, #0
 8019322:	f1a1 0404 	sub.w	r4, r1, #4
 8019326:	bfb8      	it	lt
 8019328:	18e4      	addlt	r4, r4, r3
 801932a:	f000 ff5d 	bl	801a1e8 <__malloc_lock>
 801932e:	4a20      	ldr	r2, [pc, #128]	; (80193b0 <_free_r+0x9c>)
 8019330:	9801      	ldr	r0, [sp, #4]
 8019332:	6813      	ldr	r3, [r2, #0]
 8019334:	4615      	mov	r5, r2
 8019336:	b933      	cbnz	r3, 8019346 <_free_r+0x32>
 8019338:	6063      	str	r3, [r4, #4]
 801933a:	6014      	str	r4, [r2, #0]
 801933c:	b003      	add	sp, #12
 801933e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019342:	f000 bf57 	b.w	801a1f4 <__malloc_unlock>
 8019346:	42a3      	cmp	r3, r4
 8019348:	d90b      	bls.n	8019362 <_free_r+0x4e>
 801934a:	6821      	ldr	r1, [r4, #0]
 801934c:	1862      	adds	r2, r4, r1
 801934e:	4293      	cmp	r3, r2
 8019350:	bf04      	itt	eq
 8019352:	681a      	ldreq	r2, [r3, #0]
 8019354:	685b      	ldreq	r3, [r3, #4]
 8019356:	6063      	str	r3, [r4, #4]
 8019358:	bf04      	itt	eq
 801935a:	1852      	addeq	r2, r2, r1
 801935c:	6022      	streq	r2, [r4, #0]
 801935e:	602c      	str	r4, [r5, #0]
 8019360:	e7ec      	b.n	801933c <_free_r+0x28>
 8019362:	461a      	mov	r2, r3
 8019364:	685b      	ldr	r3, [r3, #4]
 8019366:	b10b      	cbz	r3, 801936c <_free_r+0x58>
 8019368:	42a3      	cmp	r3, r4
 801936a:	d9fa      	bls.n	8019362 <_free_r+0x4e>
 801936c:	6811      	ldr	r1, [r2, #0]
 801936e:	1855      	adds	r5, r2, r1
 8019370:	42a5      	cmp	r5, r4
 8019372:	d10b      	bne.n	801938c <_free_r+0x78>
 8019374:	6824      	ldr	r4, [r4, #0]
 8019376:	4421      	add	r1, r4
 8019378:	1854      	adds	r4, r2, r1
 801937a:	42a3      	cmp	r3, r4
 801937c:	6011      	str	r1, [r2, #0]
 801937e:	d1dd      	bne.n	801933c <_free_r+0x28>
 8019380:	681c      	ldr	r4, [r3, #0]
 8019382:	685b      	ldr	r3, [r3, #4]
 8019384:	6053      	str	r3, [r2, #4]
 8019386:	4421      	add	r1, r4
 8019388:	6011      	str	r1, [r2, #0]
 801938a:	e7d7      	b.n	801933c <_free_r+0x28>
 801938c:	d902      	bls.n	8019394 <_free_r+0x80>
 801938e:	230c      	movs	r3, #12
 8019390:	6003      	str	r3, [r0, #0]
 8019392:	e7d3      	b.n	801933c <_free_r+0x28>
 8019394:	6825      	ldr	r5, [r4, #0]
 8019396:	1961      	adds	r1, r4, r5
 8019398:	428b      	cmp	r3, r1
 801939a:	bf04      	itt	eq
 801939c:	6819      	ldreq	r1, [r3, #0]
 801939e:	685b      	ldreq	r3, [r3, #4]
 80193a0:	6063      	str	r3, [r4, #4]
 80193a2:	bf04      	itt	eq
 80193a4:	1949      	addeq	r1, r1, r5
 80193a6:	6021      	streq	r1, [r4, #0]
 80193a8:	6054      	str	r4, [r2, #4]
 80193aa:	e7c7      	b.n	801933c <_free_r+0x28>
 80193ac:	b003      	add	sp, #12
 80193ae:	bd30      	pop	{r4, r5, pc}
 80193b0:	240071dc 	.word	0x240071dc

080193b4 <_malloc_r>:
 80193b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193b6:	1ccd      	adds	r5, r1, #3
 80193b8:	f025 0503 	bic.w	r5, r5, #3
 80193bc:	3508      	adds	r5, #8
 80193be:	2d0c      	cmp	r5, #12
 80193c0:	bf38      	it	cc
 80193c2:	250c      	movcc	r5, #12
 80193c4:	2d00      	cmp	r5, #0
 80193c6:	4606      	mov	r6, r0
 80193c8:	db01      	blt.n	80193ce <_malloc_r+0x1a>
 80193ca:	42a9      	cmp	r1, r5
 80193cc:	d903      	bls.n	80193d6 <_malloc_r+0x22>
 80193ce:	230c      	movs	r3, #12
 80193d0:	6033      	str	r3, [r6, #0]
 80193d2:	2000      	movs	r0, #0
 80193d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193d6:	f000 ff07 	bl	801a1e8 <__malloc_lock>
 80193da:	4921      	ldr	r1, [pc, #132]	; (8019460 <_malloc_r+0xac>)
 80193dc:	680a      	ldr	r2, [r1, #0]
 80193de:	4614      	mov	r4, r2
 80193e0:	b99c      	cbnz	r4, 801940a <_malloc_r+0x56>
 80193e2:	4f20      	ldr	r7, [pc, #128]	; (8019464 <_malloc_r+0xb0>)
 80193e4:	683b      	ldr	r3, [r7, #0]
 80193e6:	b923      	cbnz	r3, 80193f2 <_malloc_r+0x3e>
 80193e8:	4621      	mov	r1, r4
 80193ea:	4630      	mov	r0, r6
 80193ec:	f000 fc86 	bl	8019cfc <_sbrk_r>
 80193f0:	6038      	str	r0, [r7, #0]
 80193f2:	4629      	mov	r1, r5
 80193f4:	4630      	mov	r0, r6
 80193f6:	f000 fc81 	bl	8019cfc <_sbrk_r>
 80193fa:	1c43      	adds	r3, r0, #1
 80193fc:	d123      	bne.n	8019446 <_malloc_r+0x92>
 80193fe:	230c      	movs	r3, #12
 8019400:	6033      	str	r3, [r6, #0]
 8019402:	4630      	mov	r0, r6
 8019404:	f000 fef6 	bl	801a1f4 <__malloc_unlock>
 8019408:	e7e3      	b.n	80193d2 <_malloc_r+0x1e>
 801940a:	6823      	ldr	r3, [r4, #0]
 801940c:	1b5b      	subs	r3, r3, r5
 801940e:	d417      	bmi.n	8019440 <_malloc_r+0x8c>
 8019410:	2b0b      	cmp	r3, #11
 8019412:	d903      	bls.n	801941c <_malloc_r+0x68>
 8019414:	6023      	str	r3, [r4, #0]
 8019416:	441c      	add	r4, r3
 8019418:	6025      	str	r5, [r4, #0]
 801941a:	e004      	b.n	8019426 <_malloc_r+0x72>
 801941c:	6863      	ldr	r3, [r4, #4]
 801941e:	42a2      	cmp	r2, r4
 8019420:	bf0c      	ite	eq
 8019422:	600b      	streq	r3, [r1, #0]
 8019424:	6053      	strne	r3, [r2, #4]
 8019426:	4630      	mov	r0, r6
 8019428:	f000 fee4 	bl	801a1f4 <__malloc_unlock>
 801942c:	f104 000b 	add.w	r0, r4, #11
 8019430:	1d23      	adds	r3, r4, #4
 8019432:	f020 0007 	bic.w	r0, r0, #7
 8019436:	1ac2      	subs	r2, r0, r3
 8019438:	d0cc      	beq.n	80193d4 <_malloc_r+0x20>
 801943a:	1a1b      	subs	r3, r3, r0
 801943c:	50a3      	str	r3, [r4, r2]
 801943e:	e7c9      	b.n	80193d4 <_malloc_r+0x20>
 8019440:	4622      	mov	r2, r4
 8019442:	6864      	ldr	r4, [r4, #4]
 8019444:	e7cc      	b.n	80193e0 <_malloc_r+0x2c>
 8019446:	1cc4      	adds	r4, r0, #3
 8019448:	f024 0403 	bic.w	r4, r4, #3
 801944c:	42a0      	cmp	r0, r4
 801944e:	d0e3      	beq.n	8019418 <_malloc_r+0x64>
 8019450:	1a21      	subs	r1, r4, r0
 8019452:	4630      	mov	r0, r6
 8019454:	f000 fc52 	bl	8019cfc <_sbrk_r>
 8019458:	3001      	adds	r0, #1
 801945a:	d1dd      	bne.n	8019418 <_malloc_r+0x64>
 801945c:	e7cf      	b.n	80193fe <_malloc_r+0x4a>
 801945e:	bf00      	nop
 8019460:	240071dc 	.word	0x240071dc
 8019464:	240071e0 	.word	0x240071e0

08019468 <__ssputs_r>:
 8019468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801946c:	688e      	ldr	r6, [r1, #8]
 801946e:	429e      	cmp	r6, r3
 8019470:	4682      	mov	sl, r0
 8019472:	460c      	mov	r4, r1
 8019474:	4690      	mov	r8, r2
 8019476:	461f      	mov	r7, r3
 8019478:	d838      	bhi.n	80194ec <__ssputs_r+0x84>
 801947a:	898a      	ldrh	r2, [r1, #12]
 801947c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019480:	d032      	beq.n	80194e8 <__ssputs_r+0x80>
 8019482:	6825      	ldr	r5, [r4, #0]
 8019484:	6909      	ldr	r1, [r1, #16]
 8019486:	eba5 0901 	sub.w	r9, r5, r1
 801948a:	6965      	ldr	r5, [r4, #20]
 801948c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019490:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019494:	3301      	adds	r3, #1
 8019496:	444b      	add	r3, r9
 8019498:	106d      	asrs	r5, r5, #1
 801949a:	429d      	cmp	r5, r3
 801949c:	bf38      	it	cc
 801949e:	461d      	movcc	r5, r3
 80194a0:	0553      	lsls	r3, r2, #21
 80194a2:	d531      	bpl.n	8019508 <__ssputs_r+0xa0>
 80194a4:	4629      	mov	r1, r5
 80194a6:	f7ff ff85 	bl	80193b4 <_malloc_r>
 80194aa:	4606      	mov	r6, r0
 80194ac:	b950      	cbnz	r0, 80194c4 <__ssputs_r+0x5c>
 80194ae:	230c      	movs	r3, #12
 80194b0:	f8ca 3000 	str.w	r3, [sl]
 80194b4:	89a3      	ldrh	r3, [r4, #12]
 80194b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80194ba:	81a3      	strh	r3, [r4, #12]
 80194bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80194c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194c4:	6921      	ldr	r1, [r4, #16]
 80194c6:	464a      	mov	r2, r9
 80194c8:	f7ff fd10 	bl	8018eec <memcpy>
 80194cc:	89a3      	ldrh	r3, [r4, #12]
 80194ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80194d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80194d6:	81a3      	strh	r3, [r4, #12]
 80194d8:	6126      	str	r6, [r4, #16]
 80194da:	6165      	str	r5, [r4, #20]
 80194dc:	444e      	add	r6, r9
 80194de:	eba5 0509 	sub.w	r5, r5, r9
 80194e2:	6026      	str	r6, [r4, #0]
 80194e4:	60a5      	str	r5, [r4, #8]
 80194e6:	463e      	mov	r6, r7
 80194e8:	42be      	cmp	r6, r7
 80194ea:	d900      	bls.n	80194ee <__ssputs_r+0x86>
 80194ec:	463e      	mov	r6, r7
 80194ee:	4632      	mov	r2, r6
 80194f0:	6820      	ldr	r0, [r4, #0]
 80194f2:	4641      	mov	r1, r8
 80194f4:	f7ff fd08 	bl	8018f08 <memmove>
 80194f8:	68a3      	ldr	r3, [r4, #8]
 80194fa:	6822      	ldr	r2, [r4, #0]
 80194fc:	1b9b      	subs	r3, r3, r6
 80194fe:	4432      	add	r2, r6
 8019500:	60a3      	str	r3, [r4, #8]
 8019502:	6022      	str	r2, [r4, #0]
 8019504:	2000      	movs	r0, #0
 8019506:	e7db      	b.n	80194c0 <__ssputs_r+0x58>
 8019508:	462a      	mov	r2, r5
 801950a:	f000 fe79 	bl	801a200 <_realloc_r>
 801950e:	4606      	mov	r6, r0
 8019510:	2800      	cmp	r0, #0
 8019512:	d1e1      	bne.n	80194d8 <__ssputs_r+0x70>
 8019514:	6921      	ldr	r1, [r4, #16]
 8019516:	4650      	mov	r0, sl
 8019518:	f7ff fefc 	bl	8019314 <_free_r>
 801951c:	e7c7      	b.n	80194ae <__ssputs_r+0x46>
	...

08019520 <_svfiprintf_r>:
 8019520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019524:	4698      	mov	r8, r3
 8019526:	898b      	ldrh	r3, [r1, #12]
 8019528:	061b      	lsls	r3, r3, #24
 801952a:	b09d      	sub	sp, #116	; 0x74
 801952c:	4607      	mov	r7, r0
 801952e:	460d      	mov	r5, r1
 8019530:	4614      	mov	r4, r2
 8019532:	d50e      	bpl.n	8019552 <_svfiprintf_r+0x32>
 8019534:	690b      	ldr	r3, [r1, #16]
 8019536:	b963      	cbnz	r3, 8019552 <_svfiprintf_r+0x32>
 8019538:	2140      	movs	r1, #64	; 0x40
 801953a:	f7ff ff3b 	bl	80193b4 <_malloc_r>
 801953e:	6028      	str	r0, [r5, #0]
 8019540:	6128      	str	r0, [r5, #16]
 8019542:	b920      	cbnz	r0, 801954e <_svfiprintf_r+0x2e>
 8019544:	230c      	movs	r3, #12
 8019546:	603b      	str	r3, [r7, #0]
 8019548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801954c:	e0d1      	b.n	80196f2 <_svfiprintf_r+0x1d2>
 801954e:	2340      	movs	r3, #64	; 0x40
 8019550:	616b      	str	r3, [r5, #20]
 8019552:	2300      	movs	r3, #0
 8019554:	9309      	str	r3, [sp, #36]	; 0x24
 8019556:	2320      	movs	r3, #32
 8019558:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801955c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019560:	2330      	movs	r3, #48	; 0x30
 8019562:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801970c <_svfiprintf_r+0x1ec>
 8019566:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801956a:	f04f 0901 	mov.w	r9, #1
 801956e:	4623      	mov	r3, r4
 8019570:	469a      	mov	sl, r3
 8019572:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019576:	b10a      	cbz	r2, 801957c <_svfiprintf_r+0x5c>
 8019578:	2a25      	cmp	r2, #37	; 0x25
 801957a:	d1f9      	bne.n	8019570 <_svfiprintf_r+0x50>
 801957c:	ebba 0b04 	subs.w	fp, sl, r4
 8019580:	d00b      	beq.n	801959a <_svfiprintf_r+0x7a>
 8019582:	465b      	mov	r3, fp
 8019584:	4622      	mov	r2, r4
 8019586:	4629      	mov	r1, r5
 8019588:	4638      	mov	r0, r7
 801958a:	f7ff ff6d 	bl	8019468 <__ssputs_r>
 801958e:	3001      	adds	r0, #1
 8019590:	f000 80aa 	beq.w	80196e8 <_svfiprintf_r+0x1c8>
 8019594:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019596:	445a      	add	r2, fp
 8019598:	9209      	str	r2, [sp, #36]	; 0x24
 801959a:	f89a 3000 	ldrb.w	r3, [sl]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	f000 80a2 	beq.w	80196e8 <_svfiprintf_r+0x1c8>
 80195a4:	2300      	movs	r3, #0
 80195a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80195aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80195ae:	f10a 0a01 	add.w	sl, sl, #1
 80195b2:	9304      	str	r3, [sp, #16]
 80195b4:	9307      	str	r3, [sp, #28]
 80195b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80195ba:	931a      	str	r3, [sp, #104]	; 0x68
 80195bc:	4654      	mov	r4, sl
 80195be:	2205      	movs	r2, #5
 80195c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80195c4:	4851      	ldr	r0, [pc, #324]	; (801970c <_svfiprintf_r+0x1ec>)
 80195c6:	f7e6 fea3 	bl	8000310 <memchr>
 80195ca:	9a04      	ldr	r2, [sp, #16]
 80195cc:	b9d8      	cbnz	r0, 8019606 <_svfiprintf_r+0xe6>
 80195ce:	06d0      	lsls	r0, r2, #27
 80195d0:	bf44      	itt	mi
 80195d2:	2320      	movmi	r3, #32
 80195d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195d8:	0711      	lsls	r1, r2, #28
 80195da:	bf44      	itt	mi
 80195dc:	232b      	movmi	r3, #43	; 0x2b
 80195de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80195e2:	f89a 3000 	ldrb.w	r3, [sl]
 80195e6:	2b2a      	cmp	r3, #42	; 0x2a
 80195e8:	d015      	beq.n	8019616 <_svfiprintf_r+0xf6>
 80195ea:	9a07      	ldr	r2, [sp, #28]
 80195ec:	4654      	mov	r4, sl
 80195ee:	2000      	movs	r0, #0
 80195f0:	f04f 0c0a 	mov.w	ip, #10
 80195f4:	4621      	mov	r1, r4
 80195f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80195fa:	3b30      	subs	r3, #48	; 0x30
 80195fc:	2b09      	cmp	r3, #9
 80195fe:	d94e      	bls.n	801969e <_svfiprintf_r+0x17e>
 8019600:	b1b0      	cbz	r0, 8019630 <_svfiprintf_r+0x110>
 8019602:	9207      	str	r2, [sp, #28]
 8019604:	e014      	b.n	8019630 <_svfiprintf_r+0x110>
 8019606:	eba0 0308 	sub.w	r3, r0, r8
 801960a:	fa09 f303 	lsl.w	r3, r9, r3
 801960e:	4313      	orrs	r3, r2
 8019610:	9304      	str	r3, [sp, #16]
 8019612:	46a2      	mov	sl, r4
 8019614:	e7d2      	b.n	80195bc <_svfiprintf_r+0x9c>
 8019616:	9b03      	ldr	r3, [sp, #12]
 8019618:	1d19      	adds	r1, r3, #4
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	9103      	str	r1, [sp, #12]
 801961e:	2b00      	cmp	r3, #0
 8019620:	bfbb      	ittet	lt
 8019622:	425b      	neglt	r3, r3
 8019624:	f042 0202 	orrlt.w	r2, r2, #2
 8019628:	9307      	strge	r3, [sp, #28]
 801962a:	9307      	strlt	r3, [sp, #28]
 801962c:	bfb8      	it	lt
 801962e:	9204      	strlt	r2, [sp, #16]
 8019630:	7823      	ldrb	r3, [r4, #0]
 8019632:	2b2e      	cmp	r3, #46	; 0x2e
 8019634:	d10c      	bne.n	8019650 <_svfiprintf_r+0x130>
 8019636:	7863      	ldrb	r3, [r4, #1]
 8019638:	2b2a      	cmp	r3, #42	; 0x2a
 801963a:	d135      	bne.n	80196a8 <_svfiprintf_r+0x188>
 801963c:	9b03      	ldr	r3, [sp, #12]
 801963e:	1d1a      	adds	r2, r3, #4
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	9203      	str	r2, [sp, #12]
 8019644:	2b00      	cmp	r3, #0
 8019646:	bfb8      	it	lt
 8019648:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801964c:	3402      	adds	r4, #2
 801964e:	9305      	str	r3, [sp, #20]
 8019650:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801971c <_svfiprintf_r+0x1fc>
 8019654:	7821      	ldrb	r1, [r4, #0]
 8019656:	2203      	movs	r2, #3
 8019658:	4650      	mov	r0, sl
 801965a:	f7e6 fe59 	bl	8000310 <memchr>
 801965e:	b140      	cbz	r0, 8019672 <_svfiprintf_r+0x152>
 8019660:	2340      	movs	r3, #64	; 0x40
 8019662:	eba0 000a 	sub.w	r0, r0, sl
 8019666:	fa03 f000 	lsl.w	r0, r3, r0
 801966a:	9b04      	ldr	r3, [sp, #16]
 801966c:	4303      	orrs	r3, r0
 801966e:	3401      	adds	r4, #1
 8019670:	9304      	str	r3, [sp, #16]
 8019672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019676:	4826      	ldr	r0, [pc, #152]	; (8019710 <_svfiprintf_r+0x1f0>)
 8019678:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801967c:	2206      	movs	r2, #6
 801967e:	f7e6 fe47 	bl	8000310 <memchr>
 8019682:	2800      	cmp	r0, #0
 8019684:	d038      	beq.n	80196f8 <_svfiprintf_r+0x1d8>
 8019686:	4b23      	ldr	r3, [pc, #140]	; (8019714 <_svfiprintf_r+0x1f4>)
 8019688:	bb1b      	cbnz	r3, 80196d2 <_svfiprintf_r+0x1b2>
 801968a:	9b03      	ldr	r3, [sp, #12]
 801968c:	3307      	adds	r3, #7
 801968e:	f023 0307 	bic.w	r3, r3, #7
 8019692:	3308      	adds	r3, #8
 8019694:	9303      	str	r3, [sp, #12]
 8019696:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019698:	4433      	add	r3, r6
 801969a:	9309      	str	r3, [sp, #36]	; 0x24
 801969c:	e767      	b.n	801956e <_svfiprintf_r+0x4e>
 801969e:	fb0c 3202 	mla	r2, ip, r2, r3
 80196a2:	460c      	mov	r4, r1
 80196a4:	2001      	movs	r0, #1
 80196a6:	e7a5      	b.n	80195f4 <_svfiprintf_r+0xd4>
 80196a8:	2300      	movs	r3, #0
 80196aa:	3401      	adds	r4, #1
 80196ac:	9305      	str	r3, [sp, #20]
 80196ae:	4619      	mov	r1, r3
 80196b0:	f04f 0c0a 	mov.w	ip, #10
 80196b4:	4620      	mov	r0, r4
 80196b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80196ba:	3a30      	subs	r2, #48	; 0x30
 80196bc:	2a09      	cmp	r2, #9
 80196be:	d903      	bls.n	80196c8 <_svfiprintf_r+0x1a8>
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d0c5      	beq.n	8019650 <_svfiprintf_r+0x130>
 80196c4:	9105      	str	r1, [sp, #20]
 80196c6:	e7c3      	b.n	8019650 <_svfiprintf_r+0x130>
 80196c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80196cc:	4604      	mov	r4, r0
 80196ce:	2301      	movs	r3, #1
 80196d0:	e7f0      	b.n	80196b4 <_svfiprintf_r+0x194>
 80196d2:	ab03      	add	r3, sp, #12
 80196d4:	9300      	str	r3, [sp, #0]
 80196d6:	462a      	mov	r2, r5
 80196d8:	4b0f      	ldr	r3, [pc, #60]	; (8019718 <_svfiprintf_r+0x1f8>)
 80196da:	a904      	add	r1, sp, #16
 80196dc:	4638      	mov	r0, r7
 80196de:	f3af 8000 	nop.w
 80196e2:	1c42      	adds	r2, r0, #1
 80196e4:	4606      	mov	r6, r0
 80196e6:	d1d6      	bne.n	8019696 <_svfiprintf_r+0x176>
 80196e8:	89ab      	ldrh	r3, [r5, #12]
 80196ea:	065b      	lsls	r3, r3, #25
 80196ec:	f53f af2c 	bmi.w	8019548 <_svfiprintf_r+0x28>
 80196f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80196f2:	b01d      	add	sp, #116	; 0x74
 80196f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196f8:	ab03      	add	r3, sp, #12
 80196fa:	9300      	str	r3, [sp, #0]
 80196fc:	462a      	mov	r2, r5
 80196fe:	4b06      	ldr	r3, [pc, #24]	; (8019718 <_svfiprintf_r+0x1f8>)
 8019700:	a904      	add	r1, sp, #16
 8019702:	4638      	mov	r0, r7
 8019704:	f000 f9d4 	bl	8019ab0 <_printf_i>
 8019708:	e7eb      	b.n	80196e2 <_svfiprintf_r+0x1c2>
 801970a:	bf00      	nop
 801970c:	0802f0d0 	.word	0x0802f0d0
 8019710:	0802f0da 	.word	0x0802f0da
 8019714:	00000000 	.word	0x00000000
 8019718:	08019469 	.word	0x08019469
 801971c:	0802f0d6 	.word	0x0802f0d6

08019720 <__sfputc_r>:
 8019720:	6893      	ldr	r3, [r2, #8]
 8019722:	3b01      	subs	r3, #1
 8019724:	2b00      	cmp	r3, #0
 8019726:	b410      	push	{r4}
 8019728:	6093      	str	r3, [r2, #8]
 801972a:	da08      	bge.n	801973e <__sfputc_r+0x1e>
 801972c:	6994      	ldr	r4, [r2, #24]
 801972e:	42a3      	cmp	r3, r4
 8019730:	db01      	blt.n	8019736 <__sfputc_r+0x16>
 8019732:	290a      	cmp	r1, #10
 8019734:	d103      	bne.n	801973e <__sfputc_r+0x1e>
 8019736:	f85d 4b04 	ldr.w	r4, [sp], #4
 801973a:	f000 bb33 	b.w	8019da4 <__swbuf_r>
 801973e:	6813      	ldr	r3, [r2, #0]
 8019740:	1c58      	adds	r0, r3, #1
 8019742:	6010      	str	r0, [r2, #0]
 8019744:	7019      	strb	r1, [r3, #0]
 8019746:	4608      	mov	r0, r1
 8019748:	f85d 4b04 	ldr.w	r4, [sp], #4
 801974c:	4770      	bx	lr

0801974e <__sfputs_r>:
 801974e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019750:	4606      	mov	r6, r0
 8019752:	460f      	mov	r7, r1
 8019754:	4614      	mov	r4, r2
 8019756:	18d5      	adds	r5, r2, r3
 8019758:	42ac      	cmp	r4, r5
 801975a:	d101      	bne.n	8019760 <__sfputs_r+0x12>
 801975c:	2000      	movs	r0, #0
 801975e:	e007      	b.n	8019770 <__sfputs_r+0x22>
 8019760:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019764:	463a      	mov	r2, r7
 8019766:	4630      	mov	r0, r6
 8019768:	f7ff ffda 	bl	8019720 <__sfputc_r>
 801976c:	1c43      	adds	r3, r0, #1
 801976e:	d1f3      	bne.n	8019758 <__sfputs_r+0xa>
 8019770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019774 <_vfiprintf_r>:
 8019774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019778:	460d      	mov	r5, r1
 801977a:	b09d      	sub	sp, #116	; 0x74
 801977c:	4614      	mov	r4, r2
 801977e:	4698      	mov	r8, r3
 8019780:	4606      	mov	r6, r0
 8019782:	b118      	cbz	r0, 801978c <_vfiprintf_r+0x18>
 8019784:	6983      	ldr	r3, [r0, #24]
 8019786:	b90b      	cbnz	r3, 801978c <_vfiprintf_r+0x18>
 8019788:	f7ff fd0a 	bl	80191a0 <__sinit>
 801978c:	4b89      	ldr	r3, [pc, #548]	; (80199b4 <_vfiprintf_r+0x240>)
 801978e:	429d      	cmp	r5, r3
 8019790:	d11b      	bne.n	80197ca <_vfiprintf_r+0x56>
 8019792:	6875      	ldr	r5, [r6, #4]
 8019794:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019796:	07d9      	lsls	r1, r3, #31
 8019798:	d405      	bmi.n	80197a6 <_vfiprintf_r+0x32>
 801979a:	89ab      	ldrh	r3, [r5, #12]
 801979c:	059a      	lsls	r2, r3, #22
 801979e:	d402      	bmi.n	80197a6 <_vfiprintf_r+0x32>
 80197a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80197a2:	f7ff fdad 	bl	8019300 <__retarget_lock_acquire_recursive>
 80197a6:	89ab      	ldrh	r3, [r5, #12]
 80197a8:	071b      	lsls	r3, r3, #28
 80197aa:	d501      	bpl.n	80197b0 <_vfiprintf_r+0x3c>
 80197ac:	692b      	ldr	r3, [r5, #16]
 80197ae:	b9eb      	cbnz	r3, 80197ec <_vfiprintf_r+0x78>
 80197b0:	4629      	mov	r1, r5
 80197b2:	4630      	mov	r0, r6
 80197b4:	f000 fb5a 	bl	8019e6c <__swsetup_r>
 80197b8:	b1c0      	cbz	r0, 80197ec <_vfiprintf_r+0x78>
 80197ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80197bc:	07dc      	lsls	r4, r3, #31
 80197be:	d50e      	bpl.n	80197de <_vfiprintf_r+0x6a>
 80197c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80197c4:	b01d      	add	sp, #116	; 0x74
 80197c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197ca:	4b7b      	ldr	r3, [pc, #492]	; (80199b8 <_vfiprintf_r+0x244>)
 80197cc:	429d      	cmp	r5, r3
 80197ce:	d101      	bne.n	80197d4 <_vfiprintf_r+0x60>
 80197d0:	68b5      	ldr	r5, [r6, #8]
 80197d2:	e7df      	b.n	8019794 <_vfiprintf_r+0x20>
 80197d4:	4b79      	ldr	r3, [pc, #484]	; (80199bc <_vfiprintf_r+0x248>)
 80197d6:	429d      	cmp	r5, r3
 80197d8:	bf08      	it	eq
 80197da:	68f5      	ldreq	r5, [r6, #12]
 80197dc:	e7da      	b.n	8019794 <_vfiprintf_r+0x20>
 80197de:	89ab      	ldrh	r3, [r5, #12]
 80197e0:	0598      	lsls	r0, r3, #22
 80197e2:	d4ed      	bmi.n	80197c0 <_vfiprintf_r+0x4c>
 80197e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80197e6:	f7ff fd8c 	bl	8019302 <__retarget_lock_release_recursive>
 80197ea:	e7e9      	b.n	80197c0 <_vfiprintf_r+0x4c>
 80197ec:	2300      	movs	r3, #0
 80197ee:	9309      	str	r3, [sp, #36]	; 0x24
 80197f0:	2320      	movs	r3, #32
 80197f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80197f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80197fa:	2330      	movs	r3, #48	; 0x30
 80197fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80199c0 <_vfiprintf_r+0x24c>
 8019800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019804:	f04f 0901 	mov.w	r9, #1
 8019808:	4623      	mov	r3, r4
 801980a:	469a      	mov	sl, r3
 801980c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019810:	b10a      	cbz	r2, 8019816 <_vfiprintf_r+0xa2>
 8019812:	2a25      	cmp	r2, #37	; 0x25
 8019814:	d1f9      	bne.n	801980a <_vfiprintf_r+0x96>
 8019816:	ebba 0b04 	subs.w	fp, sl, r4
 801981a:	d00b      	beq.n	8019834 <_vfiprintf_r+0xc0>
 801981c:	465b      	mov	r3, fp
 801981e:	4622      	mov	r2, r4
 8019820:	4629      	mov	r1, r5
 8019822:	4630      	mov	r0, r6
 8019824:	f7ff ff93 	bl	801974e <__sfputs_r>
 8019828:	3001      	adds	r0, #1
 801982a:	f000 80aa 	beq.w	8019982 <_vfiprintf_r+0x20e>
 801982e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019830:	445a      	add	r2, fp
 8019832:	9209      	str	r2, [sp, #36]	; 0x24
 8019834:	f89a 3000 	ldrb.w	r3, [sl]
 8019838:	2b00      	cmp	r3, #0
 801983a:	f000 80a2 	beq.w	8019982 <_vfiprintf_r+0x20e>
 801983e:	2300      	movs	r3, #0
 8019840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019848:	f10a 0a01 	add.w	sl, sl, #1
 801984c:	9304      	str	r3, [sp, #16]
 801984e:	9307      	str	r3, [sp, #28]
 8019850:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019854:	931a      	str	r3, [sp, #104]	; 0x68
 8019856:	4654      	mov	r4, sl
 8019858:	2205      	movs	r2, #5
 801985a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801985e:	4858      	ldr	r0, [pc, #352]	; (80199c0 <_vfiprintf_r+0x24c>)
 8019860:	f7e6 fd56 	bl	8000310 <memchr>
 8019864:	9a04      	ldr	r2, [sp, #16]
 8019866:	b9d8      	cbnz	r0, 80198a0 <_vfiprintf_r+0x12c>
 8019868:	06d1      	lsls	r1, r2, #27
 801986a:	bf44      	itt	mi
 801986c:	2320      	movmi	r3, #32
 801986e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019872:	0713      	lsls	r3, r2, #28
 8019874:	bf44      	itt	mi
 8019876:	232b      	movmi	r3, #43	; 0x2b
 8019878:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801987c:	f89a 3000 	ldrb.w	r3, [sl]
 8019880:	2b2a      	cmp	r3, #42	; 0x2a
 8019882:	d015      	beq.n	80198b0 <_vfiprintf_r+0x13c>
 8019884:	9a07      	ldr	r2, [sp, #28]
 8019886:	4654      	mov	r4, sl
 8019888:	2000      	movs	r0, #0
 801988a:	f04f 0c0a 	mov.w	ip, #10
 801988e:	4621      	mov	r1, r4
 8019890:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019894:	3b30      	subs	r3, #48	; 0x30
 8019896:	2b09      	cmp	r3, #9
 8019898:	d94e      	bls.n	8019938 <_vfiprintf_r+0x1c4>
 801989a:	b1b0      	cbz	r0, 80198ca <_vfiprintf_r+0x156>
 801989c:	9207      	str	r2, [sp, #28]
 801989e:	e014      	b.n	80198ca <_vfiprintf_r+0x156>
 80198a0:	eba0 0308 	sub.w	r3, r0, r8
 80198a4:	fa09 f303 	lsl.w	r3, r9, r3
 80198a8:	4313      	orrs	r3, r2
 80198aa:	9304      	str	r3, [sp, #16]
 80198ac:	46a2      	mov	sl, r4
 80198ae:	e7d2      	b.n	8019856 <_vfiprintf_r+0xe2>
 80198b0:	9b03      	ldr	r3, [sp, #12]
 80198b2:	1d19      	adds	r1, r3, #4
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	9103      	str	r1, [sp, #12]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	bfbb      	ittet	lt
 80198bc:	425b      	neglt	r3, r3
 80198be:	f042 0202 	orrlt.w	r2, r2, #2
 80198c2:	9307      	strge	r3, [sp, #28]
 80198c4:	9307      	strlt	r3, [sp, #28]
 80198c6:	bfb8      	it	lt
 80198c8:	9204      	strlt	r2, [sp, #16]
 80198ca:	7823      	ldrb	r3, [r4, #0]
 80198cc:	2b2e      	cmp	r3, #46	; 0x2e
 80198ce:	d10c      	bne.n	80198ea <_vfiprintf_r+0x176>
 80198d0:	7863      	ldrb	r3, [r4, #1]
 80198d2:	2b2a      	cmp	r3, #42	; 0x2a
 80198d4:	d135      	bne.n	8019942 <_vfiprintf_r+0x1ce>
 80198d6:	9b03      	ldr	r3, [sp, #12]
 80198d8:	1d1a      	adds	r2, r3, #4
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	9203      	str	r2, [sp, #12]
 80198de:	2b00      	cmp	r3, #0
 80198e0:	bfb8      	it	lt
 80198e2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80198e6:	3402      	adds	r4, #2
 80198e8:	9305      	str	r3, [sp, #20]
 80198ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80199d0 <_vfiprintf_r+0x25c>
 80198ee:	7821      	ldrb	r1, [r4, #0]
 80198f0:	2203      	movs	r2, #3
 80198f2:	4650      	mov	r0, sl
 80198f4:	f7e6 fd0c 	bl	8000310 <memchr>
 80198f8:	b140      	cbz	r0, 801990c <_vfiprintf_r+0x198>
 80198fa:	2340      	movs	r3, #64	; 0x40
 80198fc:	eba0 000a 	sub.w	r0, r0, sl
 8019900:	fa03 f000 	lsl.w	r0, r3, r0
 8019904:	9b04      	ldr	r3, [sp, #16]
 8019906:	4303      	orrs	r3, r0
 8019908:	3401      	adds	r4, #1
 801990a:	9304      	str	r3, [sp, #16]
 801990c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019910:	482c      	ldr	r0, [pc, #176]	; (80199c4 <_vfiprintf_r+0x250>)
 8019912:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019916:	2206      	movs	r2, #6
 8019918:	f7e6 fcfa 	bl	8000310 <memchr>
 801991c:	2800      	cmp	r0, #0
 801991e:	d03f      	beq.n	80199a0 <_vfiprintf_r+0x22c>
 8019920:	4b29      	ldr	r3, [pc, #164]	; (80199c8 <_vfiprintf_r+0x254>)
 8019922:	bb1b      	cbnz	r3, 801996c <_vfiprintf_r+0x1f8>
 8019924:	9b03      	ldr	r3, [sp, #12]
 8019926:	3307      	adds	r3, #7
 8019928:	f023 0307 	bic.w	r3, r3, #7
 801992c:	3308      	adds	r3, #8
 801992e:	9303      	str	r3, [sp, #12]
 8019930:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019932:	443b      	add	r3, r7
 8019934:	9309      	str	r3, [sp, #36]	; 0x24
 8019936:	e767      	b.n	8019808 <_vfiprintf_r+0x94>
 8019938:	fb0c 3202 	mla	r2, ip, r2, r3
 801993c:	460c      	mov	r4, r1
 801993e:	2001      	movs	r0, #1
 8019940:	e7a5      	b.n	801988e <_vfiprintf_r+0x11a>
 8019942:	2300      	movs	r3, #0
 8019944:	3401      	adds	r4, #1
 8019946:	9305      	str	r3, [sp, #20]
 8019948:	4619      	mov	r1, r3
 801994a:	f04f 0c0a 	mov.w	ip, #10
 801994e:	4620      	mov	r0, r4
 8019950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019954:	3a30      	subs	r2, #48	; 0x30
 8019956:	2a09      	cmp	r2, #9
 8019958:	d903      	bls.n	8019962 <_vfiprintf_r+0x1ee>
 801995a:	2b00      	cmp	r3, #0
 801995c:	d0c5      	beq.n	80198ea <_vfiprintf_r+0x176>
 801995e:	9105      	str	r1, [sp, #20]
 8019960:	e7c3      	b.n	80198ea <_vfiprintf_r+0x176>
 8019962:	fb0c 2101 	mla	r1, ip, r1, r2
 8019966:	4604      	mov	r4, r0
 8019968:	2301      	movs	r3, #1
 801996a:	e7f0      	b.n	801994e <_vfiprintf_r+0x1da>
 801996c:	ab03      	add	r3, sp, #12
 801996e:	9300      	str	r3, [sp, #0]
 8019970:	462a      	mov	r2, r5
 8019972:	4b16      	ldr	r3, [pc, #88]	; (80199cc <_vfiprintf_r+0x258>)
 8019974:	a904      	add	r1, sp, #16
 8019976:	4630      	mov	r0, r6
 8019978:	f3af 8000 	nop.w
 801997c:	4607      	mov	r7, r0
 801997e:	1c78      	adds	r0, r7, #1
 8019980:	d1d6      	bne.n	8019930 <_vfiprintf_r+0x1bc>
 8019982:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019984:	07d9      	lsls	r1, r3, #31
 8019986:	d405      	bmi.n	8019994 <_vfiprintf_r+0x220>
 8019988:	89ab      	ldrh	r3, [r5, #12]
 801998a:	059a      	lsls	r2, r3, #22
 801998c:	d402      	bmi.n	8019994 <_vfiprintf_r+0x220>
 801998e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019990:	f7ff fcb7 	bl	8019302 <__retarget_lock_release_recursive>
 8019994:	89ab      	ldrh	r3, [r5, #12]
 8019996:	065b      	lsls	r3, r3, #25
 8019998:	f53f af12 	bmi.w	80197c0 <_vfiprintf_r+0x4c>
 801999c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801999e:	e711      	b.n	80197c4 <_vfiprintf_r+0x50>
 80199a0:	ab03      	add	r3, sp, #12
 80199a2:	9300      	str	r3, [sp, #0]
 80199a4:	462a      	mov	r2, r5
 80199a6:	4b09      	ldr	r3, [pc, #36]	; (80199cc <_vfiprintf_r+0x258>)
 80199a8:	a904      	add	r1, sp, #16
 80199aa:	4630      	mov	r0, r6
 80199ac:	f000 f880 	bl	8019ab0 <_printf_i>
 80199b0:	e7e4      	b.n	801997c <_vfiprintf_r+0x208>
 80199b2:	bf00      	nop
 80199b4:	0802f090 	.word	0x0802f090
 80199b8:	0802f0b0 	.word	0x0802f0b0
 80199bc:	0802f070 	.word	0x0802f070
 80199c0:	0802f0d0 	.word	0x0802f0d0
 80199c4:	0802f0da 	.word	0x0802f0da
 80199c8:	00000000 	.word	0x00000000
 80199cc:	0801974f 	.word	0x0801974f
 80199d0:	0802f0d6 	.word	0x0802f0d6

080199d4 <_printf_common>:
 80199d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80199d8:	4616      	mov	r6, r2
 80199da:	4699      	mov	r9, r3
 80199dc:	688a      	ldr	r2, [r1, #8]
 80199de:	690b      	ldr	r3, [r1, #16]
 80199e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80199e4:	4293      	cmp	r3, r2
 80199e6:	bfb8      	it	lt
 80199e8:	4613      	movlt	r3, r2
 80199ea:	6033      	str	r3, [r6, #0]
 80199ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80199f0:	4607      	mov	r7, r0
 80199f2:	460c      	mov	r4, r1
 80199f4:	b10a      	cbz	r2, 80199fa <_printf_common+0x26>
 80199f6:	3301      	adds	r3, #1
 80199f8:	6033      	str	r3, [r6, #0]
 80199fa:	6823      	ldr	r3, [r4, #0]
 80199fc:	0699      	lsls	r1, r3, #26
 80199fe:	bf42      	ittt	mi
 8019a00:	6833      	ldrmi	r3, [r6, #0]
 8019a02:	3302      	addmi	r3, #2
 8019a04:	6033      	strmi	r3, [r6, #0]
 8019a06:	6825      	ldr	r5, [r4, #0]
 8019a08:	f015 0506 	ands.w	r5, r5, #6
 8019a0c:	d106      	bne.n	8019a1c <_printf_common+0x48>
 8019a0e:	f104 0a19 	add.w	sl, r4, #25
 8019a12:	68e3      	ldr	r3, [r4, #12]
 8019a14:	6832      	ldr	r2, [r6, #0]
 8019a16:	1a9b      	subs	r3, r3, r2
 8019a18:	42ab      	cmp	r3, r5
 8019a1a:	dc26      	bgt.n	8019a6a <_printf_common+0x96>
 8019a1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019a20:	1e13      	subs	r3, r2, #0
 8019a22:	6822      	ldr	r2, [r4, #0]
 8019a24:	bf18      	it	ne
 8019a26:	2301      	movne	r3, #1
 8019a28:	0692      	lsls	r2, r2, #26
 8019a2a:	d42b      	bmi.n	8019a84 <_printf_common+0xb0>
 8019a2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019a30:	4649      	mov	r1, r9
 8019a32:	4638      	mov	r0, r7
 8019a34:	47c0      	blx	r8
 8019a36:	3001      	adds	r0, #1
 8019a38:	d01e      	beq.n	8019a78 <_printf_common+0xa4>
 8019a3a:	6823      	ldr	r3, [r4, #0]
 8019a3c:	68e5      	ldr	r5, [r4, #12]
 8019a3e:	6832      	ldr	r2, [r6, #0]
 8019a40:	f003 0306 	and.w	r3, r3, #6
 8019a44:	2b04      	cmp	r3, #4
 8019a46:	bf08      	it	eq
 8019a48:	1aad      	subeq	r5, r5, r2
 8019a4a:	68a3      	ldr	r3, [r4, #8]
 8019a4c:	6922      	ldr	r2, [r4, #16]
 8019a4e:	bf0c      	ite	eq
 8019a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019a54:	2500      	movne	r5, #0
 8019a56:	4293      	cmp	r3, r2
 8019a58:	bfc4      	itt	gt
 8019a5a:	1a9b      	subgt	r3, r3, r2
 8019a5c:	18ed      	addgt	r5, r5, r3
 8019a5e:	2600      	movs	r6, #0
 8019a60:	341a      	adds	r4, #26
 8019a62:	42b5      	cmp	r5, r6
 8019a64:	d11a      	bne.n	8019a9c <_printf_common+0xc8>
 8019a66:	2000      	movs	r0, #0
 8019a68:	e008      	b.n	8019a7c <_printf_common+0xa8>
 8019a6a:	2301      	movs	r3, #1
 8019a6c:	4652      	mov	r2, sl
 8019a6e:	4649      	mov	r1, r9
 8019a70:	4638      	mov	r0, r7
 8019a72:	47c0      	blx	r8
 8019a74:	3001      	adds	r0, #1
 8019a76:	d103      	bne.n	8019a80 <_printf_common+0xac>
 8019a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019a7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a80:	3501      	adds	r5, #1
 8019a82:	e7c6      	b.n	8019a12 <_printf_common+0x3e>
 8019a84:	18e1      	adds	r1, r4, r3
 8019a86:	1c5a      	adds	r2, r3, #1
 8019a88:	2030      	movs	r0, #48	; 0x30
 8019a8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019a8e:	4422      	add	r2, r4
 8019a90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019a94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019a98:	3302      	adds	r3, #2
 8019a9a:	e7c7      	b.n	8019a2c <_printf_common+0x58>
 8019a9c:	2301      	movs	r3, #1
 8019a9e:	4622      	mov	r2, r4
 8019aa0:	4649      	mov	r1, r9
 8019aa2:	4638      	mov	r0, r7
 8019aa4:	47c0      	blx	r8
 8019aa6:	3001      	adds	r0, #1
 8019aa8:	d0e6      	beq.n	8019a78 <_printf_common+0xa4>
 8019aaa:	3601      	adds	r6, #1
 8019aac:	e7d9      	b.n	8019a62 <_printf_common+0x8e>
	...

08019ab0 <_printf_i>:
 8019ab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019ab4:	460c      	mov	r4, r1
 8019ab6:	4691      	mov	r9, r2
 8019ab8:	7e27      	ldrb	r7, [r4, #24]
 8019aba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019abc:	2f78      	cmp	r7, #120	; 0x78
 8019abe:	4680      	mov	r8, r0
 8019ac0:	469a      	mov	sl, r3
 8019ac2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019ac6:	d807      	bhi.n	8019ad8 <_printf_i+0x28>
 8019ac8:	2f62      	cmp	r7, #98	; 0x62
 8019aca:	d80a      	bhi.n	8019ae2 <_printf_i+0x32>
 8019acc:	2f00      	cmp	r7, #0
 8019ace:	f000 80d8 	beq.w	8019c82 <_printf_i+0x1d2>
 8019ad2:	2f58      	cmp	r7, #88	; 0x58
 8019ad4:	f000 80a3 	beq.w	8019c1e <_printf_i+0x16e>
 8019ad8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019adc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019ae0:	e03a      	b.n	8019b58 <_printf_i+0xa8>
 8019ae2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019ae6:	2b15      	cmp	r3, #21
 8019ae8:	d8f6      	bhi.n	8019ad8 <_printf_i+0x28>
 8019aea:	a001      	add	r0, pc, #4	; (adr r0, 8019af0 <_printf_i+0x40>)
 8019aec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8019af0:	08019b49 	.word	0x08019b49
 8019af4:	08019b5d 	.word	0x08019b5d
 8019af8:	08019ad9 	.word	0x08019ad9
 8019afc:	08019ad9 	.word	0x08019ad9
 8019b00:	08019ad9 	.word	0x08019ad9
 8019b04:	08019ad9 	.word	0x08019ad9
 8019b08:	08019b5d 	.word	0x08019b5d
 8019b0c:	08019ad9 	.word	0x08019ad9
 8019b10:	08019ad9 	.word	0x08019ad9
 8019b14:	08019ad9 	.word	0x08019ad9
 8019b18:	08019ad9 	.word	0x08019ad9
 8019b1c:	08019c69 	.word	0x08019c69
 8019b20:	08019b8d 	.word	0x08019b8d
 8019b24:	08019c4b 	.word	0x08019c4b
 8019b28:	08019ad9 	.word	0x08019ad9
 8019b2c:	08019ad9 	.word	0x08019ad9
 8019b30:	08019c8b 	.word	0x08019c8b
 8019b34:	08019ad9 	.word	0x08019ad9
 8019b38:	08019b8d 	.word	0x08019b8d
 8019b3c:	08019ad9 	.word	0x08019ad9
 8019b40:	08019ad9 	.word	0x08019ad9
 8019b44:	08019c53 	.word	0x08019c53
 8019b48:	680b      	ldr	r3, [r1, #0]
 8019b4a:	1d1a      	adds	r2, r3, #4
 8019b4c:	681b      	ldr	r3, [r3, #0]
 8019b4e:	600a      	str	r2, [r1, #0]
 8019b50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8019b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019b58:	2301      	movs	r3, #1
 8019b5a:	e0a3      	b.n	8019ca4 <_printf_i+0x1f4>
 8019b5c:	6825      	ldr	r5, [r4, #0]
 8019b5e:	6808      	ldr	r0, [r1, #0]
 8019b60:	062e      	lsls	r6, r5, #24
 8019b62:	f100 0304 	add.w	r3, r0, #4
 8019b66:	d50a      	bpl.n	8019b7e <_printf_i+0xce>
 8019b68:	6805      	ldr	r5, [r0, #0]
 8019b6a:	600b      	str	r3, [r1, #0]
 8019b6c:	2d00      	cmp	r5, #0
 8019b6e:	da03      	bge.n	8019b78 <_printf_i+0xc8>
 8019b70:	232d      	movs	r3, #45	; 0x2d
 8019b72:	426d      	negs	r5, r5
 8019b74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019b78:	485e      	ldr	r0, [pc, #376]	; (8019cf4 <_printf_i+0x244>)
 8019b7a:	230a      	movs	r3, #10
 8019b7c:	e019      	b.n	8019bb2 <_printf_i+0x102>
 8019b7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8019b82:	6805      	ldr	r5, [r0, #0]
 8019b84:	600b      	str	r3, [r1, #0]
 8019b86:	bf18      	it	ne
 8019b88:	b22d      	sxthne	r5, r5
 8019b8a:	e7ef      	b.n	8019b6c <_printf_i+0xbc>
 8019b8c:	680b      	ldr	r3, [r1, #0]
 8019b8e:	6825      	ldr	r5, [r4, #0]
 8019b90:	1d18      	adds	r0, r3, #4
 8019b92:	6008      	str	r0, [r1, #0]
 8019b94:	0628      	lsls	r0, r5, #24
 8019b96:	d501      	bpl.n	8019b9c <_printf_i+0xec>
 8019b98:	681d      	ldr	r5, [r3, #0]
 8019b9a:	e002      	b.n	8019ba2 <_printf_i+0xf2>
 8019b9c:	0669      	lsls	r1, r5, #25
 8019b9e:	d5fb      	bpl.n	8019b98 <_printf_i+0xe8>
 8019ba0:	881d      	ldrh	r5, [r3, #0]
 8019ba2:	4854      	ldr	r0, [pc, #336]	; (8019cf4 <_printf_i+0x244>)
 8019ba4:	2f6f      	cmp	r7, #111	; 0x6f
 8019ba6:	bf0c      	ite	eq
 8019ba8:	2308      	moveq	r3, #8
 8019baa:	230a      	movne	r3, #10
 8019bac:	2100      	movs	r1, #0
 8019bae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019bb2:	6866      	ldr	r6, [r4, #4]
 8019bb4:	60a6      	str	r6, [r4, #8]
 8019bb6:	2e00      	cmp	r6, #0
 8019bb8:	bfa2      	ittt	ge
 8019bba:	6821      	ldrge	r1, [r4, #0]
 8019bbc:	f021 0104 	bicge.w	r1, r1, #4
 8019bc0:	6021      	strge	r1, [r4, #0]
 8019bc2:	b90d      	cbnz	r5, 8019bc8 <_printf_i+0x118>
 8019bc4:	2e00      	cmp	r6, #0
 8019bc6:	d04d      	beq.n	8019c64 <_printf_i+0x1b4>
 8019bc8:	4616      	mov	r6, r2
 8019bca:	fbb5 f1f3 	udiv	r1, r5, r3
 8019bce:	fb03 5711 	mls	r7, r3, r1, r5
 8019bd2:	5dc7      	ldrb	r7, [r0, r7]
 8019bd4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019bd8:	462f      	mov	r7, r5
 8019bda:	42bb      	cmp	r3, r7
 8019bdc:	460d      	mov	r5, r1
 8019bde:	d9f4      	bls.n	8019bca <_printf_i+0x11a>
 8019be0:	2b08      	cmp	r3, #8
 8019be2:	d10b      	bne.n	8019bfc <_printf_i+0x14c>
 8019be4:	6823      	ldr	r3, [r4, #0]
 8019be6:	07df      	lsls	r7, r3, #31
 8019be8:	d508      	bpl.n	8019bfc <_printf_i+0x14c>
 8019bea:	6923      	ldr	r3, [r4, #16]
 8019bec:	6861      	ldr	r1, [r4, #4]
 8019bee:	4299      	cmp	r1, r3
 8019bf0:	bfde      	ittt	le
 8019bf2:	2330      	movle	r3, #48	; 0x30
 8019bf4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019bf8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8019bfc:	1b92      	subs	r2, r2, r6
 8019bfe:	6122      	str	r2, [r4, #16]
 8019c00:	f8cd a000 	str.w	sl, [sp]
 8019c04:	464b      	mov	r3, r9
 8019c06:	aa03      	add	r2, sp, #12
 8019c08:	4621      	mov	r1, r4
 8019c0a:	4640      	mov	r0, r8
 8019c0c:	f7ff fee2 	bl	80199d4 <_printf_common>
 8019c10:	3001      	adds	r0, #1
 8019c12:	d14c      	bne.n	8019cae <_printf_i+0x1fe>
 8019c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c18:	b004      	add	sp, #16
 8019c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c1e:	4835      	ldr	r0, [pc, #212]	; (8019cf4 <_printf_i+0x244>)
 8019c20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019c24:	6823      	ldr	r3, [r4, #0]
 8019c26:	680e      	ldr	r6, [r1, #0]
 8019c28:	061f      	lsls	r7, r3, #24
 8019c2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8019c2e:	600e      	str	r6, [r1, #0]
 8019c30:	d514      	bpl.n	8019c5c <_printf_i+0x1ac>
 8019c32:	07d9      	lsls	r1, r3, #31
 8019c34:	bf44      	itt	mi
 8019c36:	f043 0320 	orrmi.w	r3, r3, #32
 8019c3a:	6023      	strmi	r3, [r4, #0]
 8019c3c:	b91d      	cbnz	r5, 8019c46 <_printf_i+0x196>
 8019c3e:	6823      	ldr	r3, [r4, #0]
 8019c40:	f023 0320 	bic.w	r3, r3, #32
 8019c44:	6023      	str	r3, [r4, #0]
 8019c46:	2310      	movs	r3, #16
 8019c48:	e7b0      	b.n	8019bac <_printf_i+0xfc>
 8019c4a:	6823      	ldr	r3, [r4, #0]
 8019c4c:	f043 0320 	orr.w	r3, r3, #32
 8019c50:	6023      	str	r3, [r4, #0]
 8019c52:	2378      	movs	r3, #120	; 0x78
 8019c54:	4828      	ldr	r0, [pc, #160]	; (8019cf8 <_printf_i+0x248>)
 8019c56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019c5a:	e7e3      	b.n	8019c24 <_printf_i+0x174>
 8019c5c:	065e      	lsls	r6, r3, #25
 8019c5e:	bf48      	it	mi
 8019c60:	b2ad      	uxthmi	r5, r5
 8019c62:	e7e6      	b.n	8019c32 <_printf_i+0x182>
 8019c64:	4616      	mov	r6, r2
 8019c66:	e7bb      	b.n	8019be0 <_printf_i+0x130>
 8019c68:	680b      	ldr	r3, [r1, #0]
 8019c6a:	6826      	ldr	r6, [r4, #0]
 8019c6c:	6960      	ldr	r0, [r4, #20]
 8019c6e:	1d1d      	adds	r5, r3, #4
 8019c70:	600d      	str	r5, [r1, #0]
 8019c72:	0635      	lsls	r5, r6, #24
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	d501      	bpl.n	8019c7c <_printf_i+0x1cc>
 8019c78:	6018      	str	r0, [r3, #0]
 8019c7a:	e002      	b.n	8019c82 <_printf_i+0x1d2>
 8019c7c:	0671      	lsls	r1, r6, #25
 8019c7e:	d5fb      	bpl.n	8019c78 <_printf_i+0x1c8>
 8019c80:	8018      	strh	r0, [r3, #0]
 8019c82:	2300      	movs	r3, #0
 8019c84:	6123      	str	r3, [r4, #16]
 8019c86:	4616      	mov	r6, r2
 8019c88:	e7ba      	b.n	8019c00 <_printf_i+0x150>
 8019c8a:	680b      	ldr	r3, [r1, #0]
 8019c8c:	1d1a      	adds	r2, r3, #4
 8019c8e:	600a      	str	r2, [r1, #0]
 8019c90:	681e      	ldr	r6, [r3, #0]
 8019c92:	6862      	ldr	r2, [r4, #4]
 8019c94:	2100      	movs	r1, #0
 8019c96:	4630      	mov	r0, r6
 8019c98:	f7e6 fb3a 	bl	8000310 <memchr>
 8019c9c:	b108      	cbz	r0, 8019ca2 <_printf_i+0x1f2>
 8019c9e:	1b80      	subs	r0, r0, r6
 8019ca0:	6060      	str	r0, [r4, #4]
 8019ca2:	6863      	ldr	r3, [r4, #4]
 8019ca4:	6123      	str	r3, [r4, #16]
 8019ca6:	2300      	movs	r3, #0
 8019ca8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019cac:	e7a8      	b.n	8019c00 <_printf_i+0x150>
 8019cae:	6923      	ldr	r3, [r4, #16]
 8019cb0:	4632      	mov	r2, r6
 8019cb2:	4649      	mov	r1, r9
 8019cb4:	4640      	mov	r0, r8
 8019cb6:	47d0      	blx	sl
 8019cb8:	3001      	adds	r0, #1
 8019cba:	d0ab      	beq.n	8019c14 <_printf_i+0x164>
 8019cbc:	6823      	ldr	r3, [r4, #0]
 8019cbe:	079b      	lsls	r3, r3, #30
 8019cc0:	d413      	bmi.n	8019cea <_printf_i+0x23a>
 8019cc2:	68e0      	ldr	r0, [r4, #12]
 8019cc4:	9b03      	ldr	r3, [sp, #12]
 8019cc6:	4298      	cmp	r0, r3
 8019cc8:	bfb8      	it	lt
 8019cca:	4618      	movlt	r0, r3
 8019ccc:	e7a4      	b.n	8019c18 <_printf_i+0x168>
 8019cce:	2301      	movs	r3, #1
 8019cd0:	4632      	mov	r2, r6
 8019cd2:	4649      	mov	r1, r9
 8019cd4:	4640      	mov	r0, r8
 8019cd6:	47d0      	blx	sl
 8019cd8:	3001      	adds	r0, #1
 8019cda:	d09b      	beq.n	8019c14 <_printf_i+0x164>
 8019cdc:	3501      	adds	r5, #1
 8019cde:	68e3      	ldr	r3, [r4, #12]
 8019ce0:	9903      	ldr	r1, [sp, #12]
 8019ce2:	1a5b      	subs	r3, r3, r1
 8019ce4:	42ab      	cmp	r3, r5
 8019ce6:	dcf2      	bgt.n	8019cce <_printf_i+0x21e>
 8019ce8:	e7eb      	b.n	8019cc2 <_printf_i+0x212>
 8019cea:	2500      	movs	r5, #0
 8019cec:	f104 0619 	add.w	r6, r4, #25
 8019cf0:	e7f5      	b.n	8019cde <_printf_i+0x22e>
 8019cf2:	bf00      	nop
 8019cf4:	0802f0e1 	.word	0x0802f0e1
 8019cf8:	0802f0f2 	.word	0x0802f0f2

08019cfc <_sbrk_r>:
 8019cfc:	b538      	push	{r3, r4, r5, lr}
 8019cfe:	4d06      	ldr	r5, [pc, #24]	; (8019d18 <_sbrk_r+0x1c>)
 8019d00:	2300      	movs	r3, #0
 8019d02:	4604      	mov	r4, r0
 8019d04:	4608      	mov	r0, r1
 8019d06:	602b      	str	r3, [r5, #0]
 8019d08:	f000 fb58 	bl	801a3bc <_sbrk>
 8019d0c:	1c43      	adds	r3, r0, #1
 8019d0e:	d102      	bne.n	8019d16 <_sbrk_r+0x1a>
 8019d10:	682b      	ldr	r3, [r5, #0]
 8019d12:	b103      	cbz	r3, 8019d16 <_sbrk_r+0x1a>
 8019d14:	6023      	str	r3, [r4, #0]
 8019d16:	bd38      	pop	{r3, r4, r5, pc}
 8019d18:	2400b2c0 	.word	0x2400b2c0

08019d1c <__sread>:
 8019d1c:	b510      	push	{r4, lr}
 8019d1e:	460c      	mov	r4, r1
 8019d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d24:	f000 fa92 	bl	801a24c <_read_r>
 8019d28:	2800      	cmp	r0, #0
 8019d2a:	bfab      	itete	ge
 8019d2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8019d30:	181b      	addge	r3, r3, r0
 8019d32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019d36:	bfac      	ite	ge
 8019d38:	6563      	strge	r3, [r4, #84]	; 0x54
 8019d3a:	81a3      	strhlt	r3, [r4, #12]
 8019d3c:	bd10      	pop	{r4, pc}

08019d3e <__swrite>:
 8019d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d42:	461f      	mov	r7, r3
 8019d44:	898b      	ldrh	r3, [r1, #12]
 8019d46:	05db      	lsls	r3, r3, #23
 8019d48:	4605      	mov	r5, r0
 8019d4a:	460c      	mov	r4, r1
 8019d4c:	4616      	mov	r6, r2
 8019d4e:	d505      	bpl.n	8019d5c <__swrite+0x1e>
 8019d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d54:	2302      	movs	r3, #2
 8019d56:	2200      	movs	r2, #0
 8019d58:	f000 f9d0 	bl	801a0fc <_lseek_r>
 8019d5c:	89a3      	ldrh	r3, [r4, #12]
 8019d5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019d62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019d66:	81a3      	strh	r3, [r4, #12]
 8019d68:	4632      	mov	r2, r6
 8019d6a:	463b      	mov	r3, r7
 8019d6c:	4628      	mov	r0, r5
 8019d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019d72:	f000 b869 	b.w	8019e48 <_write_r>

08019d76 <__sseek>:
 8019d76:	b510      	push	{r4, lr}
 8019d78:	460c      	mov	r4, r1
 8019d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d7e:	f000 f9bd 	bl	801a0fc <_lseek_r>
 8019d82:	1c43      	adds	r3, r0, #1
 8019d84:	89a3      	ldrh	r3, [r4, #12]
 8019d86:	bf15      	itete	ne
 8019d88:	6560      	strne	r0, [r4, #84]	; 0x54
 8019d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019d8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019d92:	81a3      	strheq	r3, [r4, #12]
 8019d94:	bf18      	it	ne
 8019d96:	81a3      	strhne	r3, [r4, #12]
 8019d98:	bd10      	pop	{r4, pc}

08019d9a <__sclose>:
 8019d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019d9e:	f000 b8db 	b.w	8019f58 <_close_r>
	...

08019da4 <__swbuf_r>:
 8019da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019da6:	460e      	mov	r6, r1
 8019da8:	4614      	mov	r4, r2
 8019daa:	4605      	mov	r5, r0
 8019dac:	b118      	cbz	r0, 8019db6 <__swbuf_r+0x12>
 8019dae:	6983      	ldr	r3, [r0, #24]
 8019db0:	b90b      	cbnz	r3, 8019db6 <__swbuf_r+0x12>
 8019db2:	f7ff f9f5 	bl	80191a0 <__sinit>
 8019db6:	4b21      	ldr	r3, [pc, #132]	; (8019e3c <__swbuf_r+0x98>)
 8019db8:	429c      	cmp	r4, r3
 8019dba:	d12b      	bne.n	8019e14 <__swbuf_r+0x70>
 8019dbc:	686c      	ldr	r4, [r5, #4]
 8019dbe:	69a3      	ldr	r3, [r4, #24]
 8019dc0:	60a3      	str	r3, [r4, #8]
 8019dc2:	89a3      	ldrh	r3, [r4, #12]
 8019dc4:	071a      	lsls	r2, r3, #28
 8019dc6:	d52f      	bpl.n	8019e28 <__swbuf_r+0x84>
 8019dc8:	6923      	ldr	r3, [r4, #16]
 8019dca:	b36b      	cbz	r3, 8019e28 <__swbuf_r+0x84>
 8019dcc:	6923      	ldr	r3, [r4, #16]
 8019dce:	6820      	ldr	r0, [r4, #0]
 8019dd0:	1ac0      	subs	r0, r0, r3
 8019dd2:	6963      	ldr	r3, [r4, #20]
 8019dd4:	b2f6      	uxtb	r6, r6
 8019dd6:	4283      	cmp	r3, r0
 8019dd8:	4637      	mov	r7, r6
 8019dda:	dc04      	bgt.n	8019de6 <__swbuf_r+0x42>
 8019ddc:	4621      	mov	r1, r4
 8019dde:	4628      	mov	r0, r5
 8019de0:	f000 f950 	bl	801a084 <_fflush_r>
 8019de4:	bb30      	cbnz	r0, 8019e34 <__swbuf_r+0x90>
 8019de6:	68a3      	ldr	r3, [r4, #8]
 8019de8:	3b01      	subs	r3, #1
 8019dea:	60a3      	str	r3, [r4, #8]
 8019dec:	6823      	ldr	r3, [r4, #0]
 8019dee:	1c5a      	adds	r2, r3, #1
 8019df0:	6022      	str	r2, [r4, #0]
 8019df2:	701e      	strb	r6, [r3, #0]
 8019df4:	6963      	ldr	r3, [r4, #20]
 8019df6:	3001      	adds	r0, #1
 8019df8:	4283      	cmp	r3, r0
 8019dfa:	d004      	beq.n	8019e06 <__swbuf_r+0x62>
 8019dfc:	89a3      	ldrh	r3, [r4, #12]
 8019dfe:	07db      	lsls	r3, r3, #31
 8019e00:	d506      	bpl.n	8019e10 <__swbuf_r+0x6c>
 8019e02:	2e0a      	cmp	r6, #10
 8019e04:	d104      	bne.n	8019e10 <__swbuf_r+0x6c>
 8019e06:	4621      	mov	r1, r4
 8019e08:	4628      	mov	r0, r5
 8019e0a:	f000 f93b 	bl	801a084 <_fflush_r>
 8019e0e:	b988      	cbnz	r0, 8019e34 <__swbuf_r+0x90>
 8019e10:	4638      	mov	r0, r7
 8019e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019e14:	4b0a      	ldr	r3, [pc, #40]	; (8019e40 <__swbuf_r+0x9c>)
 8019e16:	429c      	cmp	r4, r3
 8019e18:	d101      	bne.n	8019e1e <__swbuf_r+0x7a>
 8019e1a:	68ac      	ldr	r4, [r5, #8]
 8019e1c:	e7cf      	b.n	8019dbe <__swbuf_r+0x1a>
 8019e1e:	4b09      	ldr	r3, [pc, #36]	; (8019e44 <__swbuf_r+0xa0>)
 8019e20:	429c      	cmp	r4, r3
 8019e22:	bf08      	it	eq
 8019e24:	68ec      	ldreq	r4, [r5, #12]
 8019e26:	e7ca      	b.n	8019dbe <__swbuf_r+0x1a>
 8019e28:	4621      	mov	r1, r4
 8019e2a:	4628      	mov	r0, r5
 8019e2c:	f000 f81e 	bl	8019e6c <__swsetup_r>
 8019e30:	2800      	cmp	r0, #0
 8019e32:	d0cb      	beq.n	8019dcc <__swbuf_r+0x28>
 8019e34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019e38:	e7ea      	b.n	8019e10 <__swbuf_r+0x6c>
 8019e3a:	bf00      	nop
 8019e3c:	0802f090 	.word	0x0802f090
 8019e40:	0802f0b0 	.word	0x0802f0b0
 8019e44:	0802f070 	.word	0x0802f070

08019e48 <_write_r>:
 8019e48:	b538      	push	{r3, r4, r5, lr}
 8019e4a:	4d07      	ldr	r5, [pc, #28]	; (8019e68 <_write_r+0x20>)
 8019e4c:	4604      	mov	r4, r0
 8019e4e:	4608      	mov	r0, r1
 8019e50:	4611      	mov	r1, r2
 8019e52:	2200      	movs	r2, #0
 8019e54:	602a      	str	r2, [r5, #0]
 8019e56:	461a      	mov	r2, r3
 8019e58:	f000 fabe 	bl	801a3d8 <_write>
 8019e5c:	1c43      	adds	r3, r0, #1
 8019e5e:	d102      	bne.n	8019e66 <_write_r+0x1e>
 8019e60:	682b      	ldr	r3, [r5, #0]
 8019e62:	b103      	cbz	r3, 8019e66 <_write_r+0x1e>
 8019e64:	6023      	str	r3, [r4, #0]
 8019e66:	bd38      	pop	{r3, r4, r5, pc}
 8019e68:	2400b2c0 	.word	0x2400b2c0

08019e6c <__swsetup_r>:
 8019e6c:	4b32      	ldr	r3, [pc, #200]	; (8019f38 <__swsetup_r+0xcc>)
 8019e6e:	b570      	push	{r4, r5, r6, lr}
 8019e70:	681d      	ldr	r5, [r3, #0]
 8019e72:	4606      	mov	r6, r0
 8019e74:	460c      	mov	r4, r1
 8019e76:	b125      	cbz	r5, 8019e82 <__swsetup_r+0x16>
 8019e78:	69ab      	ldr	r3, [r5, #24]
 8019e7a:	b913      	cbnz	r3, 8019e82 <__swsetup_r+0x16>
 8019e7c:	4628      	mov	r0, r5
 8019e7e:	f7ff f98f 	bl	80191a0 <__sinit>
 8019e82:	4b2e      	ldr	r3, [pc, #184]	; (8019f3c <__swsetup_r+0xd0>)
 8019e84:	429c      	cmp	r4, r3
 8019e86:	d10f      	bne.n	8019ea8 <__swsetup_r+0x3c>
 8019e88:	686c      	ldr	r4, [r5, #4]
 8019e8a:	89a3      	ldrh	r3, [r4, #12]
 8019e8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019e90:	0719      	lsls	r1, r3, #28
 8019e92:	d42c      	bmi.n	8019eee <__swsetup_r+0x82>
 8019e94:	06dd      	lsls	r5, r3, #27
 8019e96:	d411      	bmi.n	8019ebc <__swsetup_r+0x50>
 8019e98:	2309      	movs	r3, #9
 8019e9a:	6033      	str	r3, [r6, #0]
 8019e9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019ea0:	81a3      	strh	r3, [r4, #12]
 8019ea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ea6:	e03e      	b.n	8019f26 <__swsetup_r+0xba>
 8019ea8:	4b25      	ldr	r3, [pc, #148]	; (8019f40 <__swsetup_r+0xd4>)
 8019eaa:	429c      	cmp	r4, r3
 8019eac:	d101      	bne.n	8019eb2 <__swsetup_r+0x46>
 8019eae:	68ac      	ldr	r4, [r5, #8]
 8019eb0:	e7eb      	b.n	8019e8a <__swsetup_r+0x1e>
 8019eb2:	4b24      	ldr	r3, [pc, #144]	; (8019f44 <__swsetup_r+0xd8>)
 8019eb4:	429c      	cmp	r4, r3
 8019eb6:	bf08      	it	eq
 8019eb8:	68ec      	ldreq	r4, [r5, #12]
 8019eba:	e7e6      	b.n	8019e8a <__swsetup_r+0x1e>
 8019ebc:	0758      	lsls	r0, r3, #29
 8019ebe:	d512      	bpl.n	8019ee6 <__swsetup_r+0x7a>
 8019ec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ec2:	b141      	cbz	r1, 8019ed6 <__swsetup_r+0x6a>
 8019ec4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019ec8:	4299      	cmp	r1, r3
 8019eca:	d002      	beq.n	8019ed2 <__swsetup_r+0x66>
 8019ecc:	4630      	mov	r0, r6
 8019ece:	f7ff fa21 	bl	8019314 <_free_r>
 8019ed2:	2300      	movs	r3, #0
 8019ed4:	6363      	str	r3, [r4, #52]	; 0x34
 8019ed6:	89a3      	ldrh	r3, [r4, #12]
 8019ed8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019edc:	81a3      	strh	r3, [r4, #12]
 8019ede:	2300      	movs	r3, #0
 8019ee0:	6063      	str	r3, [r4, #4]
 8019ee2:	6923      	ldr	r3, [r4, #16]
 8019ee4:	6023      	str	r3, [r4, #0]
 8019ee6:	89a3      	ldrh	r3, [r4, #12]
 8019ee8:	f043 0308 	orr.w	r3, r3, #8
 8019eec:	81a3      	strh	r3, [r4, #12]
 8019eee:	6923      	ldr	r3, [r4, #16]
 8019ef0:	b94b      	cbnz	r3, 8019f06 <__swsetup_r+0x9a>
 8019ef2:	89a3      	ldrh	r3, [r4, #12]
 8019ef4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019efc:	d003      	beq.n	8019f06 <__swsetup_r+0x9a>
 8019efe:	4621      	mov	r1, r4
 8019f00:	4630      	mov	r0, r6
 8019f02:	f000 f931 	bl	801a168 <__smakebuf_r>
 8019f06:	89a0      	ldrh	r0, [r4, #12]
 8019f08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019f0c:	f010 0301 	ands.w	r3, r0, #1
 8019f10:	d00a      	beq.n	8019f28 <__swsetup_r+0xbc>
 8019f12:	2300      	movs	r3, #0
 8019f14:	60a3      	str	r3, [r4, #8]
 8019f16:	6963      	ldr	r3, [r4, #20]
 8019f18:	425b      	negs	r3, r3
 8019f1a:	61a3      	str	r3, [r4, #24]
 8019f1c:	6923      	ldr	r3, [r4, #16]
 8019f1e:	b943      	cbnz	r3, 8019f32 <__swsetup_r+0xc6>
 8019f20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019f24:	d1ba      	bne.n	8019e9c <__swsetup_r+0x30>
 8019f26:	bd70      	pop	{r4, r5, r6, pc}
 8019f28:	0781      	lsls	r1, r0, #30
 8019f2a:	bf58      	it	pl
 8019f2c:	6963      	ldrpl	r3, [r4, #20]
 8019f2e:	60a3      	str	r3, [r4, #8]
 8019f30:	e7f4      	b.n	8019f1c <__swsetup_r+0xb0>
 8019f32:	2000      	movs	r0, #0
 8019f34:	e7f7      	b.n	8019f26 <__swsetup_r+0xba>
 8019f36:	bf00      	nop
 8019f38:	24000050 	.word	0x24000050
 8019f3c:	0802f090 	.word	0x0802f090
 8019f40:	0802f0b0 	.word	0x0802f0b0
 8019f44:	0802f070 	.word	0x0802f070

08019f48 <abort>:
 8019f48:	b508      	push	{r3, lr}
 8019f4a:	2006      	movs	r0, #6
 8019f4c:	f000 f9b8 	bl	801a2c0 <raise>
 8019f50:	2001      	movs	r0, #1
 8019f52:	f000 fa49 	bl	801a3e8 <_exit>
	...

08019f58 <_close_r>:
 8019f58:	b538      	push	{r3, r4, r5, lr}
 8019f5a:	4d06      	ldr	r5, [pc, #24]	; (8019f74 <_close_r+0x1c>)
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	4604      	mov	r4, r0
 8019f60:	4608      	mov	r0, r1
 8019f62:	602b      	str	r3, [r5, #0]
 8019f64:	f000 f9f2 	bl	801a34c <_close>
 8019f68:	1c43      	adds	r3, r0, #1
 8019f6a:	d102      	bne.n	8019f72 <_close_r+0x1a>
 8019f6c:	682b      	ldr	r3, [r5, #0]
 8019f6e:	b103      	cbz	r3, 8019f72 <_close_r+0x1a>
 8019f70:	6023      	str	r3, [r4, #0]
 8019f72:	bd38      	pop	{r3, r4, r5, pc}
 8019f74:	2400b2c0 	.word	0x2400b2c0

08019f78 <__sflush_r>:
 8019f78:	898a      	ldrh	r2, [r1, #12]
 8019f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f7e:	4605      	mov	r5, r0
 8019f80:	0710      	lsls	r0, r2, #28
 8019f82:	460c      	mov	r4, r1
 8019f84:	d458      	bmi.n	801a038 <__sflush_r+0xc0>
 8019f86:	684b      	ldr	r3, [r1, #4]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	dc05      	bgt.n	8019f98 <__sflush_r+0x20>
 8019f8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	dc02      	bgt.n	8019f98 <__sflush_r+0x20>
 8019f92:	2000      	movs	r0, #0
 8019f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019f9a:	2e00      	cmp	r6, #0
 8019f9c:	d0f9      	beq.n	8019f92 <__sflush_r+0x1a>
 8019f9e:	2300      	movs	r3, #0
 8019fa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019fa4:	682f      	ldr	r7, [r5, #0]
 8019fa6:	602b      	str	r3, [r5, #0]
 8019fa8:	d032      	beq.n	801a010 <__sflush_r+0x98>
 8019faa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019fac:	89a3      	ldrh	r3, [r4, #12]
 8019fae:	075a      	lsls	r2, r3, #29
 8019fb0:	d505      	bpl.n	8019fbe <__sflush_r+0x46>
 8019fb2:	6863      	ldr	r3, [r4, #4]
 8019fb4:	1ac0      	subs	r0, r0, r3
 8019fb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019fb8:	b10b      	cbz	r3, 8019fbe <__sflush_r+0x46>
 8019fba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019fbc:	1ac0      	subs	r0, r0, r3
 8019fbe:	2300      	movs	r3, #0
 8019fc0:	4602      	mov	r2, r0
 8019fc2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019fc4:	6a21      	ldr	r1, [r4, #32]
 8019fc6:	4628      	mov	r0, r5
 8019fc8:	47b0      	blx	r6
 8019fca:	1c43      	adds	r3, r0, #1
 8019fcc:	89a3      	ldrh	r3, [r4, #12]
 8019fce:	d106      	bne.n	8019fde <__sflush_r+0x66>
 8019fd0:	6829      	ldr	r1, [r5, #0]
 8019fd2:	291d      	cmp	r1, #29
 8019fd4:	d82c      	bhi.n	801a030 <__sflush_r+0xb8>
 8019fd6:	4a2a      	ldr	r2, [pc, #168]	; (801a080 <__sflush_r+0x108>)
 8019fd8:	40ca      	lsrs	r2, r1
 8019fda:	07d6      	lsls	r6, r2, #31
 8019fdc:	d528      	bpl.n	801a030 <__sflush_r+0xb8>
 8019fde:	2200      	movs	r2, #0
 8019fe0:	6062      	str	r2, [r4, #4]
 8019fe2:	04d9      	lsls	r1, r3, #19
 8019fe4:	6922      	ldr	r2, [r4, #16]
 8019fe6:	6022      	str	r2, [r4, #0]
 8019fe8:	d504      	bpl.n	8019ff4 <__sflush_r+0x7c>
 8019fea:	1c42      	adds	r2, r0, #1
 8019fec:	d101      	bne.n	8019ff2 <__sflush_r+0x7a>
 8019fee:	682b      	ldr	r3, [r5, #0]
 8019ff0:	b903      	cbnz	r3, 8019ff4 <__sflush_r+0x7c>
 8019ff2:	6560      	str	r0, [r4, #84]	; 0x54
 8019ff4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019ff6:	602f      	str	r7, [r5, #0]
 8019ff8:	2900      	cmp	r1, #0
 8019ffa:	d0ca      	beq.n	8019f92 <__sflush_r+0x1a>
 8019ffc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a000:	4299      	cmp	r1, r3
 801a002:	d002      	beq.n	801a00a <__sflush_r+0x92>
 801a004:	4628      	mov	r0, r5
 801a006:	f7ff f985 	bl	8019314 <_free_r>
 801a00a:	2000      	movs	r0, #0
 801a00c:	6360      	str	r0, [r4, #52]	; 0x34
 801a00e:	e7c1      	b.n	8019f94 <__sflush_r+0x1c>
 801a010:	6a21      	ldr	r1, [r4, #32]
 801a012:	2301      	movs	r3, #1
 801a014:	4628      	mov	r0, r5
 801a016:	47b0      	blx	r6
 801a018:	1c41      	adds	r1, r0, #1
 801a01a:	d1c7      	bne.n	8019fac <__sflush_r+0x34>
 801a01c:	682b      	ldr	r3, [r5, #0]
 801a01e:	2b00      	cmp	r3, #0
 801a020:	d0c4      	beq.n	8019fac <__sflush_r+0x34>
 801a022:	2b1d      	cmp	r3, #29
 801a024:	d001      	beq.n	801a02a <__sflush_r+0xb2>
 801a026:	2b16      	cmp	r3, #22
 801a028:	d101      	bne.n	801a02e <__sflush_r+0xb6>
 801a02a:	602f      	str	r7, [r5, #0]
 801a02c:	e7b1      	b.n	8019f92 <__sflush_r+0x1a>
 801a02e:	89a3      	ldrh	r3, [r4, #12]
 801a030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a034:	81a3      	strh	r3, [r4, #12]
 801a036:	e7ad      	b.n	8019f94 <__sflush_r+0x1c>
 801a038:	690f      	ldr	r7, [r1, #16]
 801a03a:	2f00      	cmp	r7, #0
 801a03c:	d0a9      	beq.n	8019f92 <__sflush_r+0x1a>
 801a03e:	0793      	lsls	r3, r2, #30
 801a040:	680e      	ldr	r6, [r1, #0]
 801a042:	bf08      	it	eq
 801a044:	694b      	ldreq	r3, [r1, #20]
 801a046:	600f      	str	r7, [r1, #0]
 801a048:	bf18      	it	ne
 801a04a:	2300      	movne	r3, #0
 801a04c:	eba6 0807 	sub.w	r8, r6, r7
 801a050:	608b      	str	r3, [r1, #8]
 801a052:	f1b8 0f00 	cmp.w	r8, #0
 801a056:	dd9c      	ble.n	8019f92 <__sflush_r+0x1a>
 801a058:	6a21      	ldr	r1, [r4, #32]
 801a05a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a05c:	4643      	mov	r3, r8
 801a05e:	463a      	mov	r2, r7
 801a060:	4628      	mov	r0, r5
 801a062:	47b0      	blx	r6
 801a064:	2800      	cmp	r0, #0
 801a066:	dc06      	bgt.n	801a076 <__sflush_r+0xfe>
 801a068:	89a3      	ldrh	r3, [r4, #12]
 801a06a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a06e:	81a3      	strh	r3, [r4, #12]
 801a070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a074:	e78e      	b.n	8019f94 <__sflush_r+0x1c>
 801a076:	4407      	add	r7, r0
 801a078:	eba8 0800 	sub.w	r8, r8, r0
 801a07c:	e7e9      	b.n	801a052 <__sflush_r+0xda>
 801a07e:	bf00      	nop
 801a080:	20400001 	.word	0x20400001

0801a084 <_fflush_r>:
 801a084:	b538      	push	{r3, r4, r5, lr}
 801a086:	690b      	ldr	r3, [r1, #16]
 801a088:	4605      	mov	r5, r0
 801a08a:	460c      	mov	r4, r1
 801a08c:	b913      	cbnz	r3, 801a094 <_fflush_r+0x10>
 801a08e:	2500      	movs	r5, #0
 801a090:	4628      	mov	r0, r5
 801a092:	bd38      	pop	{r3, r4, r5, pc}
 801a094:	b118      	cbz	r0, 801a09e <_fflush_r+0x1a>
 801a096:	6983      	ldr	r3, [r0, #24]
 801a098:	b90b      	cbnz	r3, 801a09e <_fflush_r+0x1a>
 801a09a:	f7ff f881 	bl	80191a0 <__sinit>
 801a09e:	4b14      	ldr	r3, [pc, #80]	; (801a0f0 <_fflush_r+0x6c>)
 801a0a0:	429c      	cmp	r4, r3
 801a0a2:	d11b      	bne.n	801a0dc <_fflush_r+0x58>
 801a0a4:	686c      	ldr	r4, [r5, #4]
 801a0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a0aa:	2b00      	cmp	r3, #0
 801a0ac:	d0ef      	beq.n	801a08e <_fflush_r+0xa>
 801a0ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a0b0:	07d0      	lsls	r0, r2, #31
 801a0b2:	d404      	bmi.n	801a0be <_fflush_r+0x3a>
 801a0b4:	0599      	lsls	r1, r3, #22
 801a0b6:	d402      	bmi.n	801a0be <_fflush_r+0x3a>
 801a0b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0ba:	f7ff f921 	bl	8019300 <__retarget_lock_acquire_recursive>
 801a0be:	4628      	mov	r0, r5
 801a0c0:	4621      	mov	r1, r4
 801a0c2:	f7ff ff59 	bl	8019f78 <__sflush_r>
 801a0c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a0c8:	07da      	lsls	r2, r3, #31
 801a0ca:	4605      	mov	r5, r0
 801a0cc:	d4e0      	bmi.n	801a090 <_fflush_r+0xc>
 801a0ce:	89a3      	ldrh	r3, [r4, #12]
 801a0d0:	059b      	lsls	r3, r3, #22
 801a0d2:	d4dd      	bmi.n	801a090 <_fflush_r+0xc>
 801a0d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a0d6:	f7ff f914 	bl	8019302 <__retarget_lock_release_recursive>
 801a0da:	e7d9      	b.n	801a090 <_fflush_r+0xc>
 801a0dc:	4b05      	ldr	r3, [pc, #20]	; (801a0f4 <_fflush_r+0x70>)
 801a0de:	429c      	cmp	r4, r3
 801a0e0:	d101      	bne.n	801a0e6 <_fflush_r+0x62>
 801a0e2:	68ac      	ldr	r4, [r5, #8]
 801a0e4:	e7df      	b.n	801a0a6 <_fflush_r+0x22>
 801a0e6:	4b04      	ldr	r3, [pc, #16]	; (801a0f8 <_fflush_r+0x74>)
 801a0e8:	429c      	cmp	r4, r3
 801a0ea:	bf08      	it	eq
 801a0ec:	68ec      	ldreq	r4, [r5, #12]
 801a0ee:	e7da      	b.n	801a0a6 <_fflush_r+0x22>
 801a0f0:	0802f090 	.word	0x0802f090
 801a0f4:	0802f0b0 	.word	0x0802f0b0
 801a0f8:	0802f070 	.word	0x0802f070

0801a0fc <_lseek_r>:
 801a0fc:	b538      	push	{r3, r4, r5, lr}
 801a0fe:	4d07      	ldr	r5, [pc, #28]	; (801a11c <_lseek_r+0x20>)
 801a100:	4604      	mov	r4, r0
 801a102:	4608      	mov	r0, r1
 801a104:	4611      	mov	r1, r2
 801a106:	2200      	movs	r2, #0
 801a108:	602a      	str	r2, [r5, #0]
 801a10a:	461a      	mov	r2, r3
 801a10c:	f000 f946 	bl	801a39c <_lseek>
 801a110:	1c43      	adds	r3, r0, #1
 801a112:	d102      	bne.n	801a11a <_lseek_r+0x1e>
 801a114:	682b      	ldr	r3, [r5, #0]
 801a116:	b103      	cbz	r3, 801a11a <_lseek_r+0x1e>
 801a118:	6023      	str	r3, [r4, #0]
 801a11a:	bd38      	pop	{r3, r4, r5, pc}
 801a11c:	2400b2c0 	.word	0x2400b2c0

0801a120 <__swhatbuf_r>:
 801a120:	b570      	push	{r4, r5, r6, lr}
 801a122:	460e      	mov	r6, r1
 801a124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a128:	2900      	cmp	r1, #0
 801a12a:	b096      	sub	sp, #88	; 0x58
 801a12c:	4614      	mov	r4, r2
 801a12e:	461d      	mov	r5, r3
 801a130:	da07      	bge.n	801a142 <__swhatbuf_r+0x22>
 801a132:	2300      	movs	r3, #0
 801a134:	602b      	str	r3, [r5, #0]
 801a136:	89b3      	ldrh	r3, [r6, #12]
 801a138:	061a      	lsls	r2, r3, #24
 801a13a:	d410      	bmi.n	801a15e <__swhatbuf_r+0x3e>
 801a13c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a140:	e00e      	b.n	801a160 <__swhatbuf_r+0x40>
 801a142:	466a      	mov	r2, sp
 801a144:	f000 f8d8 	bl	801a2f8 <_fstat_r>
 801a148:	2800      	cmp	r0, #0
 801a14a:	dbf2      	blt.n	801a132 <__swhatbuf_r+0x12>
 801a14c:	9a01      	ldr	r2, [sp, #4]
 801a14e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a152:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a156:	425a      	negs	r2, r3
 801a158:	415a      	adcs	r2, r3
 801a15a:	602a      	str	r2, [r5, #0]
 801a15c:	e7ee      	b.n	801a13c <__swhatbuf_r+0x1c>
 801a15e:	2340      	movs	r3, #64	; 0x40
 801a160:	2000      	movs	r0, #0
 801a162:	6023      	str	r3, [r4, #0]
 801a164:	b016      	add	sp, #88	; 0x58
 801a166:	bd70      	pop	{r4, r5, r6, pc}

0801a168 <__smakebuf_r>:
 801a168:	898b      	ldrh	r3, [r1, #12]
 801a16a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a16c:	079d      	lsls	r5, r3, #30
 801a16e:	4606      	mov	r6, r0
 801a170:	460c      	mov	r4, r1
 801a172:	d507      	bpl.n	801a184 <__smakebuf_r+0x1c>
 801a174:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a178:	6023      	str	r3, [r4, #0]
 801a17a:	6123      	str	r3, [r4, #16]
 801a17c:	2301      	movs	r3, #1
 801a17e:	6163      	str	r3, [r4, #20]
 801a180:	b002      	add	sp, #8
 801a182:	bd70      	pop	{r4, r5, r6, pc}
 801a184:	ab01      	add	r3, sp, #4
 801a186:	466a      	mov	r2, sp
 801a188:	f7ff ffca 	bl	801a120 <__swhatbuf_r>
 801a18c:	9900      	ldr	r1, [sp, #0]
 801a18e:	4605      	mov	r5, r0
 801a190:	4630      	mov	r0, r6
 801a192:	f7ff f90f 	bl	80193b4 <_malloc_r>
 801a196:	b948      	cbnz	r0, 801a1ac <__smakebuf_r+0x44>
 801a198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a19c:	059a      	lsls	r2, r3, #22
 801a19e:	d4ef      	bmi.n	801a180 <__smakebuf_r+0x18>
 801a1a0:	f023 0303 	bic.w	r3, r3, #3
 801a1a4:	f043 0302 	orr.w	r3, r3, #2
 801a1a8:	81a3      	strh	r3, [r4, #12]
 801a1aa:	e7e3      	b.n	801a174 <__smakebuf_r+0xc>
 801a1ac:	4b0d      	ldr	r3, [pc, #52]	; (801a1e4 <__smakebuf_r+0x7c>)
 801a1ae:	62b3      	str	r3, [r6, #40]	; 0x28
 801a1b0:	89a3      	ldrh	r3, [r4, #12]
 801a1b2:	6020      	str	r0, [r4, #0]
 801a1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a1b8:	81a3      	strh	r3, [r4, #12]
 801a1ba:	9b00      	ldr	r3, [sp, #0]
 801a1bc:	6163      	str	r3, [r4, #20]
 801a1be:	9b01      	ldr	r3, [sp, #4]
 801a1c0:	6120      	str	r0, [r4, #16]
 801a1c2:	b15b      	cbz	r3, 801a1dc <__smakebuf_r+0x74>
 801a1c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a1c8:	4630      	mov	r0, r6
 801a1ca:	f000 f8a7 	bl	801a31c <_isatty_r>
 801a1ce:	b128      	cbz	r0, 801a1dc <__smakebuf_r+0x74>
 801a1d0:	89a3      	ldrh	r3, [r4, #12]
 801a1d2:	f023 0303 	bic.w	r3, r3, #3
 801a1d6:	f043 0301 	orr.w	r3, r3, #1
 801a1da:	81a3      	strh	r3, [r4, #12]
 801a1dc:	89a0      	ldrh	r0, [r4, #12]
 801a1de:	4305      	orrs	r5, r0
 801a1e0:	81a5      	strh	r5, [r4, #12]
 801a1e2:	e7cd      	b.n	801a180 <__smakebuf_r+0x18>
 801a1e4:	08019139 	.word	0x08019139

0801a1e8 <__malloc_lock>:
 801a1e8:	4801      	ldr	r0, [pc, #4]	; (801a1f0 <__malloc_lock+0x8>)
 801a1ea:	f7ff b889 	b.w	8019300 <__retarget_lock_acquire_recursive>
 801a1ee:	bf00      	nop
 801a1f0:	2400b2cc 	.word	0x2400b2cc

0801a1f4 <__malloc_unlock>:
 801a1f4:	4801      	ldr	r0, [pc, #4]	; (801a1fc <__malloc_unlock+0x8>)
 801a1f6:	f7ff b884 	b.w	8019302 <__retarget_lock_release_recursive>
 801a1fa:	bf00      	nop
 801a1fc:	2400b2cc 	.word	0x2400b2cc

0801a200 <_realloc_r>:
 801a200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a202:	4607      	mov	r7, r0
 801a204:	4614      	mov	r4, r2
 801a206:	460e      	mov	r6, r1
 801a208:	b921      	cbnz	r1, 801a214 <_realloc_r+0x14>
 801a20a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a20e:	4611      	mov	r1, r2
 801a210:	f7ff b8d0 	b.w	80193b4 <_malloc_r>
 801a214:	b922      	cbnz	r2, 801a220 <_realloc_r+0x20>
 801a216:	f7ff f87d 	bl	8019314 <_free_r>
 801a21a:	4625      	mov	r5, r4
 801a21c:	4628      	mov	r0, r5
 801a21e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a220:	f000 f88c 	bl	801a33c <_malloc_usable_size_r>
 801a224:	42a0      	cmp	r0, r4
 801a226:	d20f      	bcs.n	801a248 <_realloc_r+0x48>
 801a228:	4621      	mov	r1, r4
 801a22a:	4638      	mov	r0, r7
 801a22c:	f7ff f8c2 	bl	80193b4 <_malloc_r>
 801a230:	4605      	mov	r5, r0
 801a232:	2800      	cmp	r0, #0
 801a234:	d0f2      	beq.n	801a21c <_realloc_r+0x1c>
 801a236:	4631      	mov	r1, r6
 801a238:	4622      	mov	r2, r4
 801a23a:	f7fe fe57 	bl	8018eec <memcpy>
 801a23e:	4631      	mov	r1, r6
 801a240:	4638      	mov	r0, r7
 801a242:	f7ff f867 	bl	8019314 <_free_r>
 801a246:	e7e9      	b.n	801a21c <_realloc_r+0x1c>
 801a248:	4635      	mov	r5, r6
 801a24a:	e7e7      	b.n	801a21c <_realloc_r+0x1c>

0801a24c <_read_r>:
 801a24c:	b538      	push	{r3, r4, r5, lr}
 801a24e:	4d07      	ldr	r5, [pc, #28]	; (801a26c <_read_r+0x20>)
 801a250:	4604      	mov	r4, r0
 801a252:	4608      	mov	r0, r1
 801a254:	4611      	mov	r1, r2
 801a256:	2200      	movs	r2, #0
 801a258:	602a      	str	r2, [r5, #0]
 801a25a:	461a      	mov	r2, r3
 801a25c:	f000 f8a6 	bl	801a3ac <_read>
 801a260:	1c43      	adds	r3, r0, #1
 801a262:	d102      	bne.n	801a26a <_read_r+0x1e>
 801a264:	682b      	ldr	r3, [r5, #0]
 801a266:	b103      	cbz	r3, 801a26a <_read_r+0x1e>
 801a268:	6023      	str	r3, [r4, #0]
 801a26a:	bd38      	pop	{r3, r4, r5, pc}
 801a26c:	2400b2c0 	.word	0x2400b2c0

0801a270 <_raise_r>:
 801a270:	291f      	cmp	r1, #31
 801a272:	b538      	push	{r3, r4, r5, lr}
 801a274:	4604      	mov	r4, r0
 801a276:	460d      	mov	r5, r1
 801a278:	d904      	bls.n	801a284 <_raise_r+0x14>
 801a27a:	2316      	movs	r3, #22
 801a27c:	6003      	str	r3, [r0, #0]
 801a27e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a282:	bd38      	pop	{r3, r4, r5, pc}
 801a284:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a286:	b112      	cbz	r2, 801a28e <_raise_r+0x1e>
 801a288:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a28c:	b94b      	cbnz	r3, 801a2a2 <_raise_r+0x32>
 801a28e:	4620      	mov	r0, r4
 801a290:	f000 f830 	bl	801a2f4 <_getpid_r>
 801a294:	462a      	mov	r2, r5
 801a296:	4601      	mov	r1, r0
 801a298:	4620      	mov	r0, r4
 801a29a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a29e:	f000 b817 	b.w	801a2d0 <_kill_r>
 801a2a2:	2b01      	cmp	r3, #1
 801a2a4:	d00a      	beq.n	801a2bc <_raise_r+0x4c>
 801a2a6:	1c59      	adds	r1, r3, #1
 801a2a8:	d103      	bne.n	801a2b2 <_raise_r+0x42>
 801a2aa:	2316      	movs	r3, #22
 801a2ac:	6003      	str	r3, [r0, #0]
 801a2ae:	2001      	movs	r0, #1
 801a2b0:	e7e7      	b.n	801a282 <_raise_r+0x12>
 801a2b2:	2400      	movs	r4, #0
 801a2b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a2b8:	4628      	mov	r0, r5
 801a2ba:	4798      	blx	r3
 801a2bc:	2000      	movs	r0, #0
 801a2be:	e7e0      	b.n	801a282 <_raise_r+0x12>

0801a2c0 <raise>:
 801a2c0:	4b02      	ldr	r3, [pc, #8]	; (801a2cc <raise+0xc>)
 801a2c2:	4601      	mov	r1, r0
 801a2c4:	6818      	ldr	r0, [r3, #0]
 801a2c6:	f7ff bfd3 	b.w	801a270 <_raise_r>
 801a2ca:	bf00      	nop
 801a2cc:	24000050 	.word	0x24000050

0801a2d0 <_kill_r>:
 801a2d0:	b538      	push	{r3, r4, r5, lr}
 801a2d2:	4d07      	ldr	r5, [pc, #28]	; (801a2f0 <_kill_r+0x20>)
 801a2d4:	2300      	movs	r3, #0
 801a2d6:	4604      	mov	r4, r0
 801a2d8:	4608      	mov	r0, r1
 801a2da:	4611      	mov	r1, r2
 801a2dc:	602b      	str	r3, [r5, #0]
 801a2de:	f000 f855 	bl	801a38c <_kill>
 801a2e2:	1c43      	adds	r3, r0, #1
 801a2e4:	d102      	bne.n	801a2ec <_kill_r+0x1c>
 801a2e6:	682b      	ldr	r3, [r5, #0]
 801a2e8:	b103      	cbz	r3, 801a2ec <_kill_r+0x1c>
 801a2ea:	6023      	str	r3, [r4, #0]
 801a2ec:	bd38      	pop	{r3, r4, r5, pc}
 801a2ee:	bf00      	nop
 801a2f0:	2400b2c0 	.word	0x2400b2c0

0801a2f4 <_getpid_r>:
 801a2f4:	f000 b83a 	b.w	801a36c <_getpid>

0801a2f8 <_fstat_r>:
 801a2f8:	b538      	push	{r3, r4, r5, lr}
 801a2fa:	4d07      	ldr	r5, [pc, #28]	; (801a318 <_fstat_r+0x20>)
 801a2fc:	2300      	movs	r3, #0
 801a2fe:	4604      	mov	r4, r0
 801a300:	4608      	mov	r0, r1
 801a302:	4611      	mov	r1, r2
 801a304:	602b      	str	r3, [r5, #0]
 801a306:	f000 f829 	bl	801a35c <_fstat>
 801a30a:	1c43      	adds	r3, r0, #1
 801a30c:	d102      	bne.n	801a314 <_fstat_r+0x1c>
 801a30e:	682b      	ldr	r3, [r5, #0]
 801a310:	b103      	cbz	r3, 801a314 <_fstat_r+0x1c>
 801a312:	6023      	str	r3, [r4, #0]
 801a314:	bd38      	pop	{r3, r4, r5, pc}
 801a316:	bf00      	nop
 801a318:	2400b2c0 	.word	0x2400b2c0

0801a31c <_isatty_r>:
 801a31c:	b538      	push	{r3, r4, r5, lr}
 801a31e:	4d06      	ldr	r5, [pc, #24]	; (801a338 <_isatty_r+0x1c>)
 801a320:	2300      	movs	r3, #0
 801a322:	4604      	mov	r4, r0
 801a324:	4608      	mov	r0, r1
 801a326:	602b      	str	r3, [r5, #0]
 801a328:	f000 f828 	bl	801a37c <_isatty>
 801a32c:	1c43      	adds	r3, r0, #1
 801a32e:	d102      	bne.n	801a336 <_isatty_r+0x1a>
 801a330:	682b      	ldr	r3, [r5, #0]
 801a332:	b103      	cbz	r3, 801a336 <_isatty_r+0x1a>
 801a334:	6023      	str	r3, [r4, #0]
 801a336:	bd38      	pop	{r3, r4, r5, pc}
 801a338:	2400b2c0 	.word	0x2400b2c0

0801a33c <_malloc_usable_size_r>:
 801a33c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a340:	1f18      	subs	r0, r3, #4
 801a342:	2b00      	cmp	r3, #0
 801a344:	bfbc      	itt	lt
 801a346:	580b      	ldrlt	r3, [r1, r0]
 801a348:	18c0      	addlt	r0, r0, r3
 801a34a:	4770      	bx	lr

0801a34c <_close>:
 801a34c:	4b02      	ldr	r3, [pc, #8]	; (801a358 <_close+0xc>)
 801a34e:	2258      	movs	r2, #88	; 0x58
 801a350:	601a      	str	r2, [r3, #0]
 801a352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a356:	4770      	bx	lr
 801a358:	2400b2c0 	.word	0x2400b2c0

0801a35c <_fstat>:
 801a35c:	4b02      	ldr	r3, [pc, #8]	; (801a368 <_fstat+0xc>)
 801a35e:	2258      	movs	r2, #88	; 0x58
 801a360:	601a      	str	r2, [r3, #0]
 801a362:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a366:	4770      	bx	lr
 801a368:	2400b2c0 	.word	0x2400b2c0

0801a36c <_getpid>:
 801a36c:	4b02      	ldr	r3, [pc, #8]	; (801a378 <_getpid+0xc>)
 801a36e:	2258      	movs	r2, #88	; 0x58
 801a370:	601a      	str	r2, [r3, #0]
 801a372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a376:	4770      	bx	lr
 801a378:	2400b2c0 	.word	0x2400b2c0

0801a37c <_isatty>:
 801a37c:	4b02      	ldr	r3, [pc, #8]	; (801a388 <_isatty+0xc>)
 801a37e:	2258      	movs	r2, #88	; 0x58
 801a380:	601a      	str	r2, [r3, #0]
 801a382:	2000      	movs	r0, #0
 801a384:	4770      	bx	lr
 801a386:	bf00      	nop
 801a388:	2400b2c0 	.word	0x2400b2c0

0801a38c <_kill>:
 801a38c:	4b02      	ldr	r3, [pc, #8]	; (801a398 <_kill+0xc>)
 801a38e:	2258      	movs	r2, #88	; 0x58
 801a390:	601a      	str	r2, [r3, #0]
 801a392:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a396:	4770      	bx	lr
 801a398:	2400b2c0 	.word	0x2400b2c0

0801a39c <_lseek>:
 801a39c:	4b02      	ldr	r3, [pc, #8]	; (801a3a8 <_lseek+0xc>)
 801a39e:	2258      	movs	r2, #88	; 0x58
 801a3a0:	601a      	str	r2, [r3, #0]
 801a3a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3a6:	4770      	bx	lr
 801a3a8:	2400b2c0 	.word	0x2400b2c0

0801a3ac <_read>:
 801a3ac:	4b02      	ldr	r3, [pc, #8]	; (801a3b8 <_read+0xc>)
 801a3ae:	2258      	movs	r2, #88	; 0x58
 801a3b0:	601a      	str	r2, [r3, #0]
 801a3b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3b6:	4770      	bx	lr
 801a3b8:	2400b2c0 	.word	0x2400b2c0

0801a3bc <_sbrk>:
 801a3bc:	4b04      	ldr	r3, [pc, #16]	; (801a3d0 <_sbrk+0x14>)
 801a3be:	6819      	ldr	r1, [r3, #0]
 801a3c0:	4602      	mov	r2, r0
 801a3c2:	b909      	cbnz	r1, 801a3c8 <_sbrk+0xc>
 801a3c4:	4903      	ldr	r1, [pc, #12]	; (801a3d4 <_sbrk+0x18>)
 801a3c6:	6019      	str	r1, [r3, #0]
 801a3c8:	6818      	ldr	r0, [r3, #0]
 801a3ca:	4402      	add	r2, r0
 801a3cc:	601a      	str	r2, [r3, #0]
 801a3ce:	4770      	bx	lr
 801a3d0:	240071e4 	.word	0x240071e4
 801a3d4:	2400b2d8 	.word	0x2400b2d8

0801a3d8 <_write>:
 801a3d8:	4b02      	ldr	r3, [pc, #8]	; (801a3e4 <_write+0xc>)
 801a3da:	2258      	movs	r2, #88	; 0x58
 801a3dc:	601a      	str	r2, [r3, #0]
 801a3de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3e2:	4770      	bx	lr
 801a3e4:	2400b2c0 	.word	0x2400b2c0

0801a3e8 <_exit>:
 801a3e8:	e7fe      	b.n	801a3e8 <_exit>
	...

0801a3ec <_init>:
 801a3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3ee:	bf00      	nop
 801a3f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3f2:	bc08      	pop	{r3}
 801a3f4:	469e      	mov	lr, r3
 801a3f6:	4770      	bx	lr

0801a3f8 <_fini>:
 801a3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3fa:	bf00      	nop
 801a3fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a3fe:	bc08      	pop	{r3}
 801a400:	469e      	mov	lr, r3
 801a402:	4770      	bx	lr
