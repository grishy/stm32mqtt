
LwIP_HTTP_Server_Netconn_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017000  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001462c  080172a0  080172a0  000272a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0802b8cc  0802b8cc  0003b8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0802b8d0  0802b8d0  0003b8d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b4  24000000  0802b8d4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000a700  240000b4  0802b988  000400b4  2**2
                  ALLOC
  7 ._user_heap_stack 00000c04  2400a7b4  0802b988  0004a7b4  2**0
                  ALLOC
  8 .lwip_sec     00041a00  30000000  0802b988  00050000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000400b4  2**0
                  CONTENTS, READONLY
 10 .debug_line   00033be3  00000000  00000000  000400e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   0004fa30  00000000  00000000  00073cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008a40  00000000  00000000  000c36f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000022b8  00000000  00000000  000cc138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0019e761  00000000  00000000  000ce3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002100  00000000  00000000  0026cb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000488fe  00000000  00000000  0026ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002b7556  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009a30  00000000  00000000  002b75ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000cc  00000000  00000000  002c0fdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  002c10a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b4 	.word	0x240000b4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017288 	.word	0x08017288

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b8 	.word	0x240000b8
 80002dc:	08017288 	.word	0x08017288

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003b6:	e003      	b.n	80003c0 <LoopCopyDataInit>

080003b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003be:	3104      	adds	r1, #4

080003c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003c8:	d3f6      	bcc.n	80003b8 <CopyDataInit>
  ldr  r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003cc:	e002      	b.n	80003d4 <LoopFillZerobss>

080003ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003d0:	f842 3b04 	str.w	r3, [r2], #4

080003d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003d8:	d3f9      	bcc.n	80003ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003da:	f001 fbaf 	bl	8001b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003de:	f015 fcb3 	bl	8015d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003e2:	f000 ff09 	bl	80011f8 <main>
  bx  lr    
 80003e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003e8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80003ec:	0802b8d4 	.word	0x0802b8d4
  ldr  r0, =_sdata
 80003f0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003f4:	240000b4 	.word	0x240000b4
  ldr  r2, =_sbss
 80003f8:	240000b4 	.word	0x240000b4
  ldr  r3, = _ebss
 80003fc:	2400a7b4 	.word	0x2400a7b4

08000400 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC3_IRQHandler>

08000402 <ethernet_link_status_updated>:
  * @brief  Notify the User about the nework interface config status 
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif) 
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	b2db      	uxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	d006      	beq.n	8000428 <ethernet_link_status_updated+0x26>
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#else
    BSP_LED_On(LED2);
 800041a:	2001      	movs	r0, #1
 800041c:	f001 fb28 	bl	8001a70 <BSP_LED_On>
    BSP_LED_Off(LED3);
 8000420:	2002      	movs	r0, #2
 8000422:	f001 fb4f 	bl	8001ac4 <BSP_LED_Off>
#else    
    BSP_LED_Off(LED2);
    BSP_LED_On(LED3); 
#endif /* LWIP_DHCP */
  } 
}
 8000426:	e005      	b.n	8000434 <ethernet_link_status_updated+0x32>
    BSP_LED_Off(LED2);
 8000428:	2001      	movs	r0, #1
 800042a:	f001 fb4b 	bl	8001ac4 <BSP_LED_Off>
    BSP_LED_On(LED3); 
 800042e:	2002      	movs	r0, #2
 8000430:	f001 fb1e 	bl	8001a70 <BSP_LED_On>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 800043c:	b5b0      	push	{r4, r5, r7, lr}
 800043e:	b0a6      	sub	sp, #152	; 0x98
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  uint32_t idx, duplex, speed = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int32_t PHYLinkState;
  ETH_MACConfigTypeDef MACConf;
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 800044a:	4a7d      	ldr	r2, [pc, #500]	; (8000640 <low_level_init+0x204>)
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000454:	6018      	str	r0, [r3, #0]
 8000456:	3304      	adds	r3, #4
 8000458:	8019      	strh	r1, [r3, #0]
  
  EthHandle.Instance = ETH;  
 800045a:	4b7a      	ldr	r3, [pc, #488]	; (8000644 <low_level_init+0x208>)
 800045c:	4a7a      	ldr	r2, [pc, #488]	; (8000648 <low_level_init+0x20c>)
 800045e:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 8000460:	4a78      	ldr	r2, [pc, #480]	; (8000644 <low_level_init+0x208>)
 8000462:	f107 031c 	add.w	r3, r7, #28
 8000466:	6053      	str	r3, [r2, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000468:	4b76      	ldr	r3, [pc, #472]	; (8000644 <low_level_init+0x208>)
 800046a:	2201      	movs	r2, #1
 800046c:	721a      	strb	r2, [r3, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 800046e:	4b75      	ldr	r3, [pc, #468]	; (8000644 <low_level_init+0x208>)
 8000470:	4a76      	ldr	r2, [pc, #472]	; (800064c <low_level_init+0x210>)
 8000472:	611a      	str	r2, [r3, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8000474:	4b73      	ldr	r3, [pc, #460]	; (8000644 <low_level_init+0x208>)
 8000476:	4a76      	ldr	r2, [pc, #472]	; (8000650 <low_level_init+0x214>)
 8000478:	60da      	str	r2, [r3, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 800047a:	4b72      	ldr	r3, [pc, #456]	; (8000644 <low_level_init+0x208>)
 800047c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000480:	615a      	str	r2, [r3, #20]
  
  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  HAL_ETH_Init(&EthHandle);
 8000482:	4870      	ldr	r0, [pc, #448]	; (8000644 <low_level_init+0x208>)
 8000484:	f001 fda2 	bl	8001fcc <HAL_ETH_Init>
  
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2206      	movs	r2, #6
 800048c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  ETH_MAC_ADDR0;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2202      	movs	r2, #2
 8000494:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  ETH_MAC_ADDR1;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2200      	movs	r2, #0
 800049c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2200      	movs	r2, #0
 80004a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  ETH_MAC_ADDR3;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2200      	movs	r2, #0
 80004ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  ETH_MAC_ADDR4;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2200      	movs	r2, #0
 80004b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  ETH_MAC_ADDR5;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2200      	movs	r2, #0
 80004bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004c6:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80004ce:	f043 030a 	orr.w	r3, r3, #10
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80004da:	2300      	movs	r3, #0
 80004dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80004e0:	e012      	b.n	8000508 <low_level_init+0xcc>
  {
    HAL_ETH_DescAssignMemory(&EthHandle, idx, Rx_Buff[idx], NULL);
 80004e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80004e6:	4613      	mov	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	4413      	add	r3, r2
 80004ec:	025b      	lsls	r3, r3, #9
 80004ee:	4a59      	ldr	r2, [pc, #356]	; (8000654 <low_level_init+0x218>)
 80004f0:	441a      	add	r2, r3
 80004f2:	2300      	movs	r3, #0
 80004f4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80004f8:	4852      	ldr	r0, [pc, #328]	; (8000644 <low_level_init+0x208>)
 80004fa:	f001 fe41 	bl	8002180 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80004fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000502:	3301      	adds	r3, #1
 8000504:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000508:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800050c:	2b03      	cmp	r3, #3
 800050e:	d9e8      	bls.n	80004e2 <low_level_init+0xa6>
  }
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000510:	4851      	ldr	r0, [pc, #324]	; (8000658 <low_level_init+0x21c>)
 8000512:	f00d fcdb 	bl	800decc <memp_init_pool>
  
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));  
 8000516:	2234      	movs	r2, #52	; 0x34
 8000518:	2100      	movs	r1, #0
 800051a:	4850      	ldr	r0, [pc, #320]	; (800065c <low_level_init+0x220>)
 800051c:	f015 fc6e 	bl	8015dfc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000520:	4b4e      	ldr	r3, [pc, #312]	; (800065c <low_level_init+0x220>)
 8000522:	2221      	movs	r2, #33	; 0x21
 8000524:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000526:	4b4d      	ldr	r3, [pc, #308]	; (800065c <low_level_init+0x220>)
 8000528:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800052c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800052e:	4b4b      	ldr	r3, [pc, #300]	; (800065c <low_level_init+0x220>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
   
  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000534:	2203      	movs	r2, #3
 8000536:	2100      	movs	r1, #0
 8000538:	2001      	movs	r0, #1
 800053a:	f005 f9ad 	bl	8005898 <xQueueGenericCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a47      	ldr	r2, [pc, #284]	; (8000660 <low_level_init+0x224>)
 8000542:	6013      	str	r3, [r2, #0]
  
  /* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000544:	4b47      	ldr	r3, [pc, #284]	; (8000664 <low_level_init+0x228>)
 8000546:	f107 0408 	add.w	r4, r7, #8
 800054a:	461d      	mov	r5, r3
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	682b      	ldr	r3, [r5, #0]
 8000552:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	6879      	ldr	r1, [r7, #4]
 800055a:	4618      	mov	r0, r3
 800055c:	f007 fb0f 	bl	8007b7e <osThreadCreate>
  
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000560:	4941      	ldr	r1, [pc, #260]	; (8000668 <low_level_init+0x22c>)
 8000562:	4842      	ldr	r0, [pc, #264]	; (800066c <low_level_init+0x230>)
 8000564:	f001 f8ac 	bl	80016c0 <LAN8742_RegisterBusIO>
  
  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8000568:	4840      	ldr	r0, [pc, #256]	; (800066c <low_level_init+0x230>)
 800056a:	f001 f8db 	bl	8001724 <LAN8742_Init>
  
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800056e:	483f      	ldr	r0, [pc, #252]	; (800066c <low_level_init+0x230>)
 8000570:	f001 f980 	bl	8001874 <LAN8742_GetLinkState>
 8000574:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  
  /* Get link state */  
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8000578:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800057c:	2b01      	cmp	r3, #1
 800057e:	dc06      	bgt.n	800058e <low_level_init+0x152>
  {
    netif_set_link_down(netif);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f00e f87d 	bl	800e680 <netif_set_link_down>
    netif_set_down(netif);
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f00e f814 	bl	800e5b4 <netif_set_down>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
    HAL_ETH_Start_IT(&EthHandle);
    netif_set_up(netif);
    netif_set_link_up(netif);
  }
}
 800058c:	e054      	b.n	8000638 <low_level_init+0x1fc>
 800058e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000592:	3b02      	subs	r3, #2
 8000594:	2b03      	cmp	r3, #3
 8000596:	d82b      	bhi.n	80005f0 <low_level_init+0x1b4>
 8000598:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <low_level_init+0x164>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	080005b1 	.word	0x080005b1
 80005a4:	080005c3 	.word	0x080005c3
 80005a8:	080005d3 	.word	0x080005d3
 80005ac:	080005e3 	.word	0x080005e3
      duplex = ETH_FULLDUPLEX_MODE;
 80005b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_100M;
 80005b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;
 80005c0:	e01f      	b.n	8000602 <low_level_init+0x1c6>
      duplex = ETH_HALFDUPLEX_MODE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_100M;
 80005c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;
 80005d0:	e017      	b.n	8000602 <low_level_init+0x1c6>
      duplex = ETH_FULLDUPLEX_MODE;
 80005d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_10M;
 80005da:	2300      	movs	r3, #0
 80005dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;
 80005e0:	e00f      	b.n	8000602 <low_level_init+0x1c6>
      duplex = ETH_HALFDUPLEX_MODE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_10M;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;
 80005ee:	e008      	b.n	8000602 <low_level_init+0x1c6>
      duplex = ETH_FULLDUPLEX_MODE;
 80005f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_100M;
 80005f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;      
 8000600:	bf00      	nop
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 8000602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000606:	4619      	mov	r1, r3
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <low_level_init+0x208>)
 800060a:	f002 fb8b 	bl	8002d24 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800060e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
    MACConf.Speed = speed;
 8000614:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000618:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 800061a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061e:	4619      	mov	r1, r3
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <low_level_init+0x208>)
 8000622:	f002 fd53 	bl	80030cc <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <low_level_init+0x208>)
 8000628:	f001 fdeb 	bl	8002202 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f00d ff55 	bl	800e4dc <netif_set_up>
    netif_set_link_up(netif);
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f00d fff0 	bl	800e618 <netif_set_link_up>
}
 8000638:	bf00      	nop
 800063a:	3798      	adds	r7, #152	; 0x98
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	080172b4 	.word	0x080172b4
 8000644:	24006804 	.word	0x24006804
 8000648:	40028000 	.word	0x40028000
 800064c:	30040000 	.word	0x30040000
 8000650:	30040060 	.word	0x30040060
 8000654:	30040200 	.word	0x30040200
 8000658:	080172a8 	.word	0x080172a8
 800065c:	24006978 	.word	0x24006978
 8000660:	240000d0 	.word	0x240000d0
 8000664:	080172bc 	.word	0x080172bc
 8000668:	24000000 	.word	0x24000000
 800066c:	24006958 	.word	0x24006958

08000670 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b092      	sub	sp, #72	; 0x48
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800067a:	2300      	movs	r3, #0
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800067e:	2300      	movs	r3, #0
 8000680:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2230      	movs	r2, #48	; 0x30
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f015 fbb5 	bl	8015dfc <memset>
  
  for(q = p; q != NULL; q = q->next)
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	643b      	str	r3, [r7, #64]	; 0x40
 8000696:	e049      	b.n	800072c <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 8000698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800069a:	2b03      	cmp	r3, #3
 800069c:	d902      	bls.n	80006a4 <low_level_output+0x34>
      return ERR_IF;
 800069e:	f06f 030b 	mvn.w	r3, #11
 80006a2:	e056      	b.n	8000752 <low_level_output+0xe2>
    
    Txbuffer[i].buffer = q->payload;
 80006a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006a6:	6859      	ldr	r1, [r3, #4]
 80006a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006b6:	4413      	add	r3, r2
 80006b8:	3b3c      	subs	r3, #60	; 0x3c
 80006ba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80006bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006be:	895b      	ldrh	r3, [r3, #10]
 80006c0:	4619      	mov	r1, r3
 80006c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006d0:	4413      	add	r3, r2
 80006d2:	3b38      	subs	r3, #56	; 0x38
 80006d4:	6019      	str	r1, [r3, #0]

    if(i>0)
 80006d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d012      	beq.n	8000702 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80006dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006de:	1e5a      	subs	r2, r3, #1
 80006e0:	f107 000c 	add.w	r0, r7, #12
 80006e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80006e6:	460b      	mov	r3, r1
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	440b      	add	r3, r1
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	18c1      	adds	r1, r0, r3
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006fc:	4413      	add	r3, r2
 80006fe:	3b34      	subs	r3, #52	; 0x34
 8000700:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 8000702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d10a      	bne.n	8000720 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800070a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000718:	4413      	add	r3, r2
 800071a:	3b34      	subs	r3, #52	; 0x34
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
    }

    i++;
 8000720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000722:	3301      	adds	r3, #1
 8000724:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8000726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
 800072c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1b2      	bne.n	8000698 <low_level_output+0x28>
  }

  TxConfig.Length = p->tot_len;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	891b      	ldrh	r3, [r3, #8]
 8000736:	461a      	mov	r2, r3
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <low_level_output+0xec>)
 800073a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <low_level_output+0xec>)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8000744:	2214      	movs	r2, #20
 8000746:	4905      	ldr	r1, [pc, #20]	; (800075c <low_level_output+0xec>)
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <low_level_output+0xf0>)
 800074a:	f001 fe59 	bl	8002400 <HAL_ETH_Transmit>
  
  return errval;
 800074e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8000752:	4618      	mov	r0, r3
 8000754:	3748      	adds	r7, #72	; 0x48
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	24006978 	.word	0x24006978
 8000760:	24006804 	.word	0x24006804

08000764 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b098      	sub	sp, #96	; 0x60
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800076c:	2300      	movs	r3, #0
 800076e:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	2300      	movs	r3, #0
 8000776:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2230      	movs	r2, #48	; 0x30
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f015 fb3b 	bl	8015dfc <memset>
  
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8000786:	2300      	movs	r3, #0
 8000788:	653b      	str	r3, [r7, #80]	; 0x50
 800078a:	e015      	b.n	80007b8 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800078c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	f107 010c 	add.w	r1, r7, #12
 8000794:	4613      	mov	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4413      	add	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4419      	add	r1, r3
 800079e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80007ac:	4413      	add	r3, r2
 80007ae:	3b44      	subs	r3, #68	; 0x44
 80007b0:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80007b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007b4:	3301      	adds	r3, #1
 80007b6:	653b      	str	r3, [r7, #80]	; 0x50
 80007b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d9e6      	bls.n	800078c <low_level_input+0x28>
  }

  if(HAL_ETH_GetRxDataBuffer(&EthHandle, RxBuff) == HAL_OK)
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	4828      	ldr	r0, [pc, #160]	; (8000868 <low_level_input+0x104>)
 80007c6:	f001 ff94 	bl	80026f2 <HAL_ETH_GetRxDataBuffer>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d145      	bne.n	800085c <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&EthHandle, &framelength);
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	4824      	ldr	r0, [pc, #144]	; (8000868 <low_level_input+0x104>)
 80007d8:	f002 f829 	bl	800282e <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&EthHandle);
 80007dc:	4822      	ldr	r0, [pc, #136]	; (8000868 <low_level_input+0x104>)
 80007de:	f002 f859 	bl	8002894 <HAL_ETH_BuildRxDescriptors>

    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80007e8:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80007ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dd1d      	ble.n	800082c <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80007f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007f2:	f003 021f 	and.w	r2, r3, #31
 80007f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007f8:	4413      	add	r3, r2
 80007fa:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80007fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000800:	f3bf 8f4f 	dsb	sy
}
 8000804:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000806:	4a19      	ldr	r2, [pc, #100]	; (800086c <low_level_input+0x108>)
 8000808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800080a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800080e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000810:	3320      	adds	r3, #32
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000816:	3b20      	subs	r3, #32
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800081a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800081c:	2b00      	cmp	r3, #0
 800081e:	dcf2      	bgt.n	8000806 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8000820:	f3bf 8f4f 	dsb	sy
}
 8000824:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000826:	f3bf 8f6f 	isb	sy
}
 800082a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800082c:	bf00      	nop
    
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800082e:	4810      	ldr	r0, [pc, #64]	; (8000870 <low_level_input+0x10c>)
 8000830:	f00d fbc8 	bl	800dfc4 <memp_malloc_pool>
 8000834:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 8000836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00f      	beq.n	800085c <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800083c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <low_level_input+0x110>)
 8000840:	611a      	str	r2, [r3, #16]

      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	b299      	uxth	r1, r3
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	b292      	uxth	r2, r2
 800084c:	9201      	str	r2, [sp, #4]
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000852:	2241      	movs	r2, #65	; 0x41
 8000854:	2000      	movs	r0, #0
 8000856:	f00e f8db 	bl	800ea10 <pbuf_alloced_custom>
 800085a:	6578      	str	r0, [r7, #84]	; 0x54
    }

  }
  
  return p;
 800085c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800085e:	4618      	mov	r0, r3
 8000860:	3758      	adds	r7, #88	; 0x58
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	24006804 	.word	0x24006804
 800086c:	e000ed00 	.word	0xe000ed00
 8000870:	080172a8 	.word	0x080172a8
 8000874:	08000925 	.word	0x08000925

08000878 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input( void const * argument )
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <ethernetif_input+0x4c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800088c:	4618      	mov	r0, r3
 800088e:	f007 fa71 	bl	8007d74 <osSemaphoreWait>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1f5      	bne.n	8000884 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f7ff ff63 	bl	8000764 <low_level_input>
 800089e:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00a      	beq.n	80008bc <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	68f9      	ldr	r1, [r7, #12]
 80008ac:	68b8      	ldr	r0, [r7, #8]
 80008ae:	4798      	blx	r3
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <ethernetif_input+0x44>
          {
            pbuf_free(p);
 80008b6:	68b8      	ldr	r0, [r7, #8]
 80008b8:	f00e fa64 	bl	800ed84 <pbuf_free>
          }
        }

      }while(p!=NULL);
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1ea      	bne.n	8000898 <ethernetif_input+0x20>
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80008c2:	e7df      	b.n	8000884 <ethernetif_input+0xc>
 80008c4:	240000d0 	.word	0x240000d0

080008c8 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d106      	bne.n	80008e4 <ethernetif_init+0x1c>
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <ethernetif_init+0x48>)
 80008d8:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80008dc:	490d      	ldr	r1, [pc, #52]	; (8000914 <ethernetif_init+0x4c>)
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <ethernetif_init+0x50>)
 80008e0:	f015 fa94 	bl	8015e0c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2273      	movs	r2, #115	; 0x73
 80008e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2274      	movs	r2, #116	; 0x74
 80008f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <ethernetif_init+0x54>)
 80008f8:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a08      	ldr	r2, [pc, #32]	; (8000920 <ethernetif_init+0x58>)
 80008fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fd9b 	bl	800043c <low_level_init>

  return ERR_OK;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	080172d0 	.word	0x080172d0
 8000914:	08017328 	.word	0x08017328
 8000918:	08017338 	.word	0x08017338
 800091c:	0800ba11 	.word	0x0800ba11
 8000920:	08000671 	.word	0x08000671

08000924 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000930:	68f9      	ldr	r1, [r7, #12]
 8000932:	4803      	ldr	r0, [pc, #12]	; (8000940 <pbuf_free_custom+0x1c>)
 8000934:	f00d fbba 	bl	800e0ac <memp_free_pool>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	080172a8 	.word	0x080172a8

08000944 <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000948:	f001 f9b8 	bl	8001cbc <HAL_GetTick>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	; 0x38
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Ethernett MSP init: RMII Mode */
  
  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b4f      	ldr	r3, [pc, #316]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000962:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096c:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	623b      	str	r3, [r7, #32]
 8000978:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	4a46      	ldr	r2, [pc, #280]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098a:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
 8000996:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000998:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099e:	4a3f      	ldr	r2, [pc, #252]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a8:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	4a37      	ldr	r2, [pc, #220]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c6:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	697b      	ldr	r3, [r7, #20]
        RMII_MII_TXD0 ---------------------> PG13
        RMII_MII_TXD1 ---------------------> PB13
  */

  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	2302      	movs	r3, #2
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 80009e0:	230b      	movs	r3, #11
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 80009e4:	2386      	movs	r3, #134	; 0x86
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	482c      	ldr	r0, [pc, #176]	; (8000aa0 <HAL_ETH_MspInit+0x14c>)
 80009f0:	f003 f998 	bl	8003d24 <HAL_GPIO_Init>
  
  /* Configure PB13 */
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	4828      	ldr	r0, [pc, #160]	; (8000aa4 <HAL_ETH_MspInit+0x150>)
 8000a02:	f003 f98f 	bl	8003d24 <HAL_GPIO_Init>
  
  /* Configure PC1, PC4 and PC5 */
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000a06:	2332      	movs	r3, #50	; 0x32
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <HAL_ETH_MspInit+0x154>)
 8000a12:	f003 f987 	bl	8003d24 <HAL_GPIO_Init>

  /* Configure PG2, PG11, PG13 and PG14 */
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 8000a16:	f642 0304 	movw	r3, #10244	; 0x2804
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);	
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4822      	ldr	r0, [pc, #136]	; (8000aac <HAL_ETH_MspInit+0x158>)
 8000a24:	f003 f97e 	bl	8003d24 <HAL_GPIO_Init>
  
  /* Enable the Ethernet global Interrupt */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2107      	movs	r1, #7
 8000a2c:	203d      	movs	r0, #61	; 0x3d
 8000a2e:	f001 fa29 	bl	8001e84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000a32:	203d      	movs	r0, #61	; 0x3d
 8000a34:	f001 fa40 	bl	8001eb8 <HAL_NVIC_EnableIRQ>
  
  /* Enable Ethernet clocks */
  __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
}
 8000a92:	bf00      	nop
 8000a94:	3738      	adds	r7, #56	; 0x38
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	58024400 	.word	0x58024400
 8000aa0:	58020000 	.word	0x58020000
 8000aa4:	58020400 	.word	0x58020400
 8000aa8:	58020800 	.word	0x58020800
 8000aac:	58021800 	.word	0x58021800

08000ab0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <HAL_ETH_RxCpltCallback+0x1c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 f9a7 	bl	8007e10 <osSemaphoreRelease>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	240000d0 	.word	0x240000d0

08000ad0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <ETH_PHY_IO_Init+0x10>)
 8000ad6:	f002 fb13 	bl	8003100 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	24006804 	.word	0x24006804

08000ae4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return 0;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	68f9      	ldr	r1, [r7, #12]
 8000b06:	4807      	ldr	r0, [pc, #28]	; (8000b24 <ETH_PHY_IO_ReadReg+0x30>)
 8000b08:	f002 f864 	bl	8002bd4 <HAL_ETH_ReadPHYRegister>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b16:	e000      	b.n	8000b1a <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24006804 	.word	0x24006804

08000b28 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	68f9      	ldr	r1, [r7, #12]
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <ETH_PHY_IO_WriteReg+0x30>)
 8000b3c:	f002 f89e 	bl	8002c7c <HAL_ETH_WritePHYRegister>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4a:	e000      	b.n	8000b4e <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	24006804 	.word	0x24006804

08000b5c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000b60:	f001 f8ac 	bl	8001cbc <HAL_GetTick>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <ethernet_link_thread>:
  * @brief  Check the ETH link state and update netif accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread( void const * argument )
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0a0      	sub	sp, #128	; 0x80
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b78:	2300      	movs	r3, #0
 8000b7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	677b      	str	r3, [r7, #116]	; 0x74
  struct netif *netif = (struct netif *) argument;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	673b      	str	r3, [r7, #112]	; 0x70
  
  for(;;)
  {
    
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b84:	483a      	ldr	r0, [pc, #232]	; (8000c70 <ethernet_link_thread+0x104>)
 8000b86:	f000 fe75 	bl	8001874 <LAN8742_GetLinkState>
 8000b8a:	66f8      	str	r0, [r7, #108]	; 0x6c
    
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00c      	beq.n	8000bb8 <ethernet_link_thread+0x4c>
 8000b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	dc09      	bgt.n	8000bb8 <ethernet_link_thread+0x4c>
    {
      HAL_ETH_Stop_IT(&EthHandle);
 8000ba4:	4833      	ldr	r0, [pc, #204]	; (8000c74 <ethernet_link_thread+0x108>)
 8000ba6:	f001 fbb1 	bl	800230c <HAL_ETH_Stop_IT>
      netif_set_down(netif);
 8000baa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000bac:	f00d fd02 	bl	800e5b4 <netif_set_down>
      netif_set_link_down(netif);
 8000bb0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000bb2:	f00d fd65 	bl	800e680 <netif_set_link_down>
 8000bb6:	e056      	b.n	8000c66 <ethernet_link_thread+0xfa>
    }
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d14f      	bne.n	8000c66 <ethernet_link_thread+0xfa>
 8000bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	dd4c      	ble.n	8000c66 <ethernet_link_thread+0xfa>
 8000bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bce:	3b02      	subs	r3, #2
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d82b      	bhi.n	8000c2c <ethernet_link_thread+0xc0>
 8000bd4:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <ethernet_link_thread+0x70>)
 8000bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bda:	bf00      	nop
 8000bdc:	08000bed 	.word	0x08000bed
 8000be0:	08000bff 	.word	0x08000bff
 8000be4:	08000c0f 	.word	0x08000c0f
 8000be8:	08000c1f 	.word	0x08000c1f
    {
      switch (PHYLinkState)
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_100M;
 8000bf2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bf6:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000bfc:	e017      	b.n	8000c2e <ethernet_link_thread+0xc2>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_100M;
 8000c02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c06:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000c0c:	e00f      	b.n	8000c2e <ethernet_link_thread+0xc2>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c12:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_10M;
 8000c14:	2300      	movs	r3, #0
 8000c16:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000c1c:	e007      	b.n	8000c2e <ethernet_link_thread+0xc2>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_10M;
 8000c22:	2300      	movs	r3, #0
 8000c24:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000c2a:	e000      	b.n	8000c2e <ethernet_link_thread+0xc2>
      default:
        break;      
 8000c2c:	bf00      	nop
      }
      
      if(linkchanged)
 8000c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d018      	beq.n	8000c66 <ethernet_link_thread+0xfa>
      {
        /* Get MAC Config MAC */
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480e      	ldr	r0, [pc, #56]	; (8000c74 <ethernet_link_thread+0x108>)
 8000c3c:	f002 f872 	bl	8002d24 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8000c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c42:	623b      	str	r3, [r7, #32]
        MACConf.Speed = speed;
 8000c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c46:	61fb      	str	r3, [r7, #28]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4809      	ldr	r0, [pc, #36]	; (8000c74 <ethernet_link_thread+0x108>)
 8000c50:	f002 fa3c 	bl	80030cc <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <ethernet_link_thread+0x108>)
 8000c56:	f001 fad4 	bl	8002202 <HAL_ETH_Start_IT>
        netif_set_up(netif);
 8000c5a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000c5c:	f00d fc3e 	bl	800e4dc <netif_set_up>
        netif_set_link_up(netif);
 8000c60:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000c62:	f00d fcd9 	bl	800e618 <netif_set_link_up>
      }
    }
    
    osDelay(100);
 8000c66:	2064      	movs	r0, #100	; 0x64
 8000c68:	f006 ffbc 	bl	8007be4 <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000c6c:	e78a      	b.n	8000b84 <ethernet_link_thread+0x18>
 8000c6e:	bf00      	nop
 8000c70:	24006958 	.word	0x24006958
 8000c74:	24006804 	.word	0x24006804

08000c78 <http_server_serve>:
  * @brief serve tcp connection  
  * @param conn: pointer on connection structure 
  * @retval None
  */
static void http_server_serve(struct netconn *conn) 
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	; 0x38
 8000c7c:	af02      	add	r7, sp, #8
 8000c7e:	6078      	str	r0, [r7, #4]
  u16_t buflen;
  struct fs_file file;
  
  /* Read the data from the port, blocking if nothing yet there. 
   We assume the request (the part we care about) is in one netbuf */
  recv_err = netconn_recv(conn, &inbuf);
 8000c80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c84:	4619      	mov	r1, r3
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f008 f9ca 	bl	8009020 <netconn_recv>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  if (recv_err == ERR_OK)
 8000c92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	f040 80bf 	bne.w	8000e1a <http_server_serve+0x1a2>
  {
    if (netconn_err(conn) == ERR_OK) 
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f008 fb48 	bl	8009332 <netconn_err>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f040 80b8 	bne.w	8000e1a <http_server_serve+0x1a2>
    {
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8000caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cac:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000cb0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f00a f89d 	bl	800adf4 <netbuf_data>
    
      /* Is this an HTTP GET command? (only check the first 5 chars, since
      there are other formats for GET, and we're keeping it very simple )*/
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000cba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000cbc:	2b04      	cmp	r3, #4
 8000cbe:	f240 80ac 	bls.w	8000e1a <http_server_serve+0x1a2>
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	495a      	ldr	r1, [pc, #360]	; (8000e30 <http_server_serve+0x1b8>)
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f015 f92e 	bl	8015f2a <strncmp>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f040 80a2 	bne.w	8000e1a <http_server_serve+0x1a2>
      {
        /* Check if request to get ST.gif */ 
        if (strncmp((char const *)buf,"GET /STM32H7xx_files/ST.gif",27)==0)
 8000cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd8:	221b      	movs	r2, #27
 8000cda:	4956      	ldr	r1, [pc, #344]	; (8000e34 <http_server_serve+0x1bc>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f015 f924 	bl	8015f2a <strncmp>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d114      	bne.n	8000d12 <http_server_serve+0x9a>
        {
          fs_open(&file, "/STM32H7xx_files/ST.gif"); 
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4952      	ldr	r1, [pc, #328]	; (8000e38 <http_server_serve+0x1c0>)
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f014 ffe2 	bl	8015cb8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000cf4:	68f9      	ldr	r1, [r7, #12]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	2300      	movs	r3, #0
 8000d00:	6878      	ldr	r0, [r7, #4]
 8000d02:	f008 fa07 	bl	8009114 <netconn_write_partly>
          fs_close(&file);
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f015 f812 	bl	8015d34 <fs_close>
 8000d10:	e083      	b.n	8000e1a <http_server_serve+0x1a2>
        }   
        /* Check if request to get stm32.jpg */
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 8000d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d14:	221e      	movs	r2, #30
 8000d16:	4949      	ldr	r1, [pc, #292]	; (8000e3c <http_server_serve+0x1c4>)
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f015 f906 	bl	8015f2a <strncmp>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d114      	bne.n	8000d4e <http_server_serve+0xd6>
        {
          fs_open(&file, "/STM32H7xx_files/stm32.jpg"); 
 8000d24:	f107 030c 	add.w	r3, r7, #12
 8000d28:	4945      	ldr	r1, [pc, #276]	; (8000e40 <http_server_serve+0x1c8>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f014 ffc4 	bl	8015cb8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000d30:	68f9      	ldr	r1, [r7, #12]
 8000d32:	693b      	ldr	r3, [r7, #16]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f008 f9e9 	bl	8009114 <netconn_write_partly>
          fs_close(&file);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4618      	mov	r0, r3
 8000d48:	f014 fff4 	bl	8015d34 <fs_close>
 8000d4c:	e065      	b.n	8000e1a <http_server_serve+0x1a2>
        }
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/logo.jpg", 29) == 0)                                           
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	221d      	movs	r2, #29
 8000d52:	493c      	ldr	r1, [pc, #240]	; (8000e44 <http_server_serve+0x1cc>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f015 f8e8 	bl	8015f2a <strncmp>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d114      	bne.n	8000d8a <http_server_serve+0x112>
        {
          /* Check if request to get ST logo.jpg */
          fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4938      	ldr	r1, [pc, #224]	; (8000e48 <http_server_serve+0x1d0>)
 8000d66:	4618      	mov	r0, r3
 8000d68:	f014 ffa6 	bl	8015cb8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000d6c:	68f9      	ldr	r1, [r7, #12]
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	461a      	mov	r2, r3
 8000d72:	2300      	movs	r3, #0
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	2300      	movs	r3, #0
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f008 f9cb 	bl	8009114 <netconn_write_partly>
          fs_close(&file);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4618      	mov	r0, r3
 8000d84:	f014 ffd6 	bl	8015d34 <fs_close>
 8000d88:	e047      	b.n	8000e1a <http_server_serve+0x1a2>
        }
        else if(strncmp(buf, "GET /STM32H7xxTASKS.html", 24) == 0)
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	2218      	movs	r2, #24
 8000d8e:	492f      	ldr	r1, [pc, #188]	; (8000e4c <http_server_serve+0x1d4>)
 8000d90:	4618      	mov	r0, r3
 8000d92:	f015 f8ca 	bl	8015f2a <strncmp>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d103      	bne.n	8000da4 <http_server_serve+0x12c>
        {
           /* Load dynamic page */
           DynWebPage(conn);
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 f93f 	bl	8001020 <DynWebPage>
 8000da2:	e03a      	b.n	8000e1a <http_server_serve+0x1a2>
        }
        else if((strncmp(buf, "GET /STM32H7xx.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0)) 
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	2213      	movs	r2, #19
 8000da8:	4929      	ldr	r1, [pc, #164]	; (8000e50 <http_server_serve+0x1d8>)
 8000daa:	4618      	mov	r0, r3
 8000dac:	f015 f8bd 	bl	8015f2a <strncmp>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d008      	beq.n	8000dc8 <http_server_serve+0x150>
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	2206      	movs	r2, #6
 8000dba:	4926      	ldr	r1, [pc, #152]	; (8000e54 <http_server_serve+0x1dc>)
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f015 f8b4 	bl	8015f2a <strncmp>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d114      	bne.n	8000df2 <http_server_serve+0x17a>
        {
          /* Load STM32H7xx page */
          fs_open(&file, "/STM32H7xx.html"); 
 8000dc8:	f107 030c 	add.w	r3, r7, #12
 8000dcc:	4922      	ldr	r1, [pc, #136]	; (8000e58 <http_server_serve+0x1e0>)
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f014 ff72 	bl	8015cb8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000dd4:	68f9      	ldr	r1, [r7, #12]
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	2300      	movs	r3, #0
 8000ddc:	9300      	str	r3, [sp, #0]
 8000dde:	2300      	movs	r3, #0
 8000de0:	6878      	ldr	r0, [r7, #4]
 8000de2:	f008 f997 	bl	8009114 <netconn_write_partly>
          fs_close(&file);
 8000de6:	f107 030c 	add.w	r3, r7, #12
 8000dea:	4618      	mov	r0, r3
 8000dec:	f014 ffa2 	bl	8015d34 <fs_close>
 8000df0:	e013      	b.n	8000e1a <http_server_serve+0x1a2>
        }
        else 
        {
          /* Load Error page */
          fs_open(&file, "/404.html"); 
 8000df2:	f107 030c 	add.w	r3, r7, #12
 8000df6:	4919      	ldr	r1, [pc, #100]	; (8000e5c <http_server_serve+0x1e4>)
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f014 ff5d 	bl	8015cb8 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000dfe:	68f9      	ldr	r1, [r7, #12]
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	461a      	mov	r2, r3
 8000e04:	2300      	movs	r3, #0
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	2300      	movs	r3, #0
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f008 f982 	bl	8009114 <netconn_write_partly>
          fs_close(&file);
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	4618      	mov	r0, r3
 8000e16:	f014 ff8d 	bl	8015d34 <fs_close>
        }
      }      
    }
  }
  /* Close the connection (server closes in HTTP) */
  netconn_close(conn);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f008 fa7c 	bl	8009318 <netconn_close>
  
  /* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
  netbuf_delete(inbuf);
 8000e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e22:	4618      	mov	r0, r3
 8000e24:	f009 ffc6 	bl	800adb4 <netbuf_delete>
}
 8000e28:	bf00      	nop
 8000e2a:	3730      	adds	r7, #48	; 0x30
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	080179ac 	.word	0x080179ac
 8000e34:	080179b4 	.word	0x080179b4
 8000e38:	080179d0 	.word	0x080179d0
 8000e3c:	080179e8 	.word	0x080179e8
 8000e40:	08017a08 	.word	0x08017a08
 8000e44:	08017a24 	.word	0x08017a24
 8000e48:	08017a44 	.word	0x08017a44
 8000e4c:	08017a60 	.word	0x08017a60
 8000e50:	08017a7c 	.word	0x08017a7c
 8000e54:	08017a90 	.word	0x08017a90
 8000e58:	08017a98 	.word	0x08017a98
 8000e5c:	08017aa8 	.word	0x08017aa8

08000e60 <http_server_netconn_thread>:
  * @brief  http server thread 
  * @param arg: pointer on argument(not used here) 
  * @retval None
  */
static void http_server_netconn_thread(void *arg)
{ 
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2010      	movs	r0, #16
 8000e6e:	f007 fd79 	bl	8008964 <netconn_new_with_proto_and_callback>
 8000e72:	6178      	str	r0, [r7, #20]
  
  if (conn!= NULL)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d023      	beq.n	8000ec2 <http_server_netconn_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 80);
 8000e7a:	2250      	movs	r2, #80	; 0x50
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f007 fe2a 	bl	8008ad8 <netconn_bind>
 8000e84:	4603      	mov	r3, r0
 8000e86:	74fb      	strb	r3, [r7, #19]
    
    if (err == ERR_OK)
 8000e88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d118      	bne.n	8000ec2 <http_server_netconn_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8000e90:	21ff      	movs	r1, #255	; 0xff
 8000e92:	6978      	ldr	r0, [r7, #20]
 8000e94:	f007 fe90 	bl	8008bb8 <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any icoming connection */
        accept_err = netconn_accept(conn, &newconn);
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	6978      	ldr	r0, [r7, #20]
 8000ea0:	f007 feb6 	bl	8008c10 <netconn_accept>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 8000ea8:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1f3      	bne.n	8000e98 <http_server_netconn_thread+0x38>
        {
          /* serve connection */
          http_server_serve(newconn);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fee0 	bl	8000c78 <http_server_serve>

          /* delete connection */
          netconn_delete(newconn);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f007 fdf0 	bl	8008aa0 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8000ec0:	e7ea      	b.n	8000e98 <http_server_netconn_thread+0x38>
        }
      }
    }
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <vTCP_Client_Task>:
 * This task gets and configures a socket to get the header of google web site
 * using HTTP protocol.
 *
 * @param param
 */
static void vTCP_Client_Task(void *param) {
 8000ecc:	b5b0      	push	{r4, r5, r7, lr}
 8000ece:	b09a      	sub	sp, #104	; 0x68
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	6078      	str	r0, [r7, #4]
	struct netconn *xNetConn = NULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	65fb      	str	r3, [r7, #92]	; 0x5c

	struct ip4_addr local_ip;
	struct ip4_addr remote_ip;
	int rc1, rc2;

	xNetConn = netconn_new ( NETCONN_TCP );
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2010      	movs	r0, #16
 8000ede:	f007 fd41 	bl	8008964 <netconn_new_with_proto_and_callback>
 8000ee2:	65f8      	str	r0, [r7, #92]	; 0x5c

	if ( xNetConn == NULL ) {
 8000ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d06c      	beq.n	8000fc4 <vTCP_Client_Task+0xf8>

	 /* No memory for new connection? */
	 return;
	}

	IP_ADDR4(&local_ip,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <vTCP_Client_Task+0x100>)
 8000eec:	653b      	str	r3, [r7, #80]	; 0x50

	rc1 = netconn_bind ( xNetConn, &local_ip, 0 );
 8000eee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000ef8:	f007 fdee 	bl	8008ad8 <netconn_bind>
 8000efc:	4603      	mov	r3, r0
 8000efe:	65bb      	str	r3, [r7, #88]	; 0x58

	IP_ADDR4(&remote_ip, IP_SERVER_ADDR0, IP_SERVER_ADDR1, IP_SERVER_ADDR2, IP_SERVER_ADDR3);
 8000f00:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <vTCP_Client_Task+0x104>)
 8000f02:	64fb      	str	r3, [r7, #76]	; 0x4c

	rc2 = netconn_connect ( xNetConn, &remote_ip, IP_SERVER_PORT);
 8000f04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f08:	f240 725b 	movw	r2, #1883	; 0x75b
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000f10:	f007 fe1a 	bl	8008b48 <netconn_connect>
 8000f14:	4603      	mov	r3, r0
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54

	if ( rc1 != ERR_OK || rc2 != ERR_OK )
 8000f18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <vTCP_Client_Task+0x58>
 8000f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <vTCP_Client_Task+0x60>
	{

	  netconn_delete ( xNetConn );
 8000f24:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000f26:	f007 fdbb 	bl	8008aa0 <netconn_delete>
	  return;
 8000f2a:	e04c      	b.n	8000fc6 <vTCP_Client_Task+0xfa>
	}

	char peer0_0[] = { /* Packet 5 */
 8000f2c:	4b29      	ldr	r3, [pc, #164]	; (8000fd4 <vTCP_Client_Task+0x108>)
 8000f2e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f34:	c407      	stmia	r4!, {r0, r1, r2}
 8000f36:	8023      	strh	r3, [r4, #0]
	0x10, 0x0c, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54,
	0x04, 0x02, 0x00, 0x1e, 0x00, 0x00 };
    char peer0_1[] = { /* Packet 9 */
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <vTCP_Client_Task+0x10c>)
 8000f3a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000f3e:	461d      	mov	r5, r3
 8000f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f44:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f48:	6020      	str	r0, [r4, #0]
 8000f4a:	3404      	adds	r4, #4
 8000f4c:	8021      	strh	r1, [r4, #0]
 8000f4e:	3402      	adds	r4, #2
 8000f50:	0c0b      	lsrs	r3, r1, #16
 8000f52:	7023      	strb	r3, [r4, #0]
    0x30, 0x15, 0x00, 0x0a, 0x74, 0x6f, 0x70, 0x69,
    0x63, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65,
    0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x30 };
    char peer0_2[] = { /* Packet 13 */
 8000f54:	4b21      	ldr	r3, [pc, #132]	; (8000fdc <vTCP_Client_Task+0x110>)
 8000f56:	f107 040c 	add.w	r4, r7, #12
 8000f5a:	461d      	mov	r5, r3
 8000f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f60:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f64:	6020      	str	r0, [r4, #0]
 8000f66:	3404      	adds	r4, #4
 8000f68:	8021      	strh	r1, [r4, #0]
 8000f6a:	3402      	adds	r4, #2
 8000f6c:	0c0b      	lsrs	r3, r1, #16
 8000f6e:	7023      	strb	r3, [r4, #0]
    0x30, 0x15, 0x00, 0x0a, 0x74, 0x6f, 0x70, 0x69,
    0x63, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x4d, 0x65,
    0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x31 };
    char peer0_3[] = { /* Packet 17 */
 8000f70:	23e0      	movs	r3, #224	; 0xe0
 8000f72:	813b      	strh	r3, [r7, #8]
    0xe0, 0x00 };

    netconn_write(xNetConn, peer0_0, sizeof(peer0_0), NETCONN_COPY);
 8000f74:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000f78:	2300      	movs	r3, #0
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	220e      	movs	r2, #14
 8000f80:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000f82:	f008 f8c7 	bl	8009114 <netconn_write_partly>
    netconn_write(xNetConn, peer0_1, sizeof(peer0_1), NETCONN_COPY);
 8000f86:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	2217      	movs	r2, #23
 8000f92:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000f94:	f008 f8be 	bl	8009114 <netconn_write_partly>
    netconn_write(xNetConn, peer0_2, sizeof(peer0_2), NETCONN_COPY);
 8000f98:	f107 010c 	add.w	r1, r7, #12
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2217      	movs	r2, #23
 8000fa4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000fa6:	f008 f8b5 	bl	8009114 <netconn_write_partly>
    netconn_write(xNetConn, peer0_3, sizeof(peer0_3), NETCONN_COPY);
 8000faa:	f107 0108 	add.w	r1, r7, #8
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000fb8:	f008 f8ac 	bl	8009114 <netconn_write_partly>

    /* take down the connection conn */
	netconn_close(xNetConn);
 8000fbc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000fbe:	f008 f9ab 	bl	8009318 <netconn_close>
 8000fc2:	e000      	b.n	8000fc6 <vTCP_Client_Task+0xfa>
	 return;
 8000fc4:	bf00      	nop
}
 8000fc6:	3760      	adds	r7, #96	; 0x60
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bdb0      	pop	{r4, r5, r7, pc}
 8000fcc:	0a47fea9 	.word	0x0a47fea9
 8000fd0:	1447fea9 	.word	0x1447fea9
 8000fd4:	08017ab4 	.word	0x08017ab4
 8000fd8:	08017ac4 	.word	0x08017ac4
 8000fdc:	08017adc 	.word	0x08017adc

08000fe0 <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread)
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fee:	2200      	movs	r2, #0
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <http_server_netconn_init+0x30>)
 8000ff2:	4808      	ldr	r0, [pc, #32]	; (8001014 <http_server_netconn_init+0x34>)
 8000ff4:	f014 fe24 	bl	8015c40 <sys_thread_new>
  sys_thread_new("TCP_Client_Task", vTCP_Client_Task, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001000:	2200      	movs	r2, #0
 8001002:	4905      	ldr	r1, [pc, #20]	; (8001018 <http_server_netconn_init+0x38>)
 8001004:	4805      	ldr	r0, [pc, #20]	; (800101c <http_server_netconn_init+0x3c>)
 8001006:	f014 fe1b 	bl	8015c40 <sys_thread_new>
}
 800100a:	bf00      	nop
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	08000e61 	.word	0x08000e61
 8001014:	08017af4 	.word	0x08017af4
 8001018:	08000ecd 	.word	0x08000ecd
 800101c:	08017afc 	.word	0x08017afc

08001020 <DynWebPage>:
  *         running tasks and the number of page hits.
  * @param  conn pointer on connection structure
  * @retval None
  */
void DynWebPage(struct netconn *conn)
{
 8001020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001022:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001026:	af02      	add	r7, sp, #8
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	6018      	str	r0, [r3, #0]
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	3304      	adds	r3, #4
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	809a      	strh	r2, [r3, #4]

  memset(PAGE_BODY, 0,512);
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f014 fed8 	bl	8015dfc <memset>

  /* Update the hit count */
  nPageHits++;
 800104c:	4b63      	ldr	r3, [pc, #396]	; (80011dc <DynWebPage+0x1bc>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	4a62      	ldr	r2, [pc, #392]	; (80011dc <DynWebPage+0x1bc>)
 8001054:	6013      	str	r3, [r2, #0]
  sprintf(pagehits, "%d", (int)nPageHits);
 8001056:	4b61      	ldr	r3, [pc, #388]	; (80011dc <DynWebPage+0x1bc>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	495f      	ldr	r1, [pc, #380]	; (80011e0 <DynWebPage+0x1c0>)
 8001062:	4618      	mov	r0, r3
 8001064:	f014 ff2a 	bl	8015ebc <siprintf>
  strcat(PAGE_BODY, pagehits);
 8001068:	f107 020c 	add.w	r2, r7, #12
 800106c:	f107 0318 	add.w	r3, r7, #24
 8001070:	4611      	mov	r1, r2
 8001072:	4618      	mov	r0, r3
 8001074:	f014 ff42 	bl	8015efc <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
 8001078:	f107 0318 	add.w	r3, r7, #24
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f939 	bl	80002f4 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	461a      	mov	r2, r3
 8001086:	f107 0318 	add.w	r3, r7, #24
 800108a:	4413      	add	r3, r2
 800108c:	4a55      	ldr	r2, [pc, #340]	; (80011e4 <DynWebPage+0x1c4>)
 800108e:	4614      	mov	r4, r2
 8001090:	469c      	mov	ip, r3
 8001092:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001096:	4665      	mov	r5, ip
 8001098:	4626      	mov	r6, r4
 800109a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800109c:	6028      	str	r0, [r5, #0]
 800109e:	6069      	str	r1, [r5, #4]
 80010a0:	60aa      	str	r2, [r5, #8]
 80010a2:	60eb      	str	r3, [r5, #12]
 80010a4:	3410      	adds	r4, #16
 80010a6:	f10c 0c10 	add.w	ip, ip, #16
 80010aa:	4574      	cmp	r4, lr
 80010ac:	d1f3      	bne.n	8001096 <DynWebPage+0x76>
 80010ae:	4663      	mov	r3, ip
 80010b0:	4622      	mov	r2, r4
 80010b2:	6810      	ldr	r0, [r2, #0]
 80010b4:	6018      	str	r0, [r3, #0]
  strcat((char *)PAGE_BODY, "<br>---------------------------------------------<br>");
 80010b6:	f107 0318 	add.w	r3, r7, #24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f91a 	bl	80002f4 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	461a      	mov	r2, r3
 80010c4:	f107 0318 	add.w	r3, r7, #24
 80010c8:	4413      	add	r3, r2
 80010ca:	4a47      	ldr	r2, [pc, #284]	; (80011e8 <DynWebPage+0x1c8>)
 80010cc:	4614      	mov	r4, r2
 80010ce:	469c      	mov	ip, r3
 80010d0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80010d4:	4665      	mov	r5, ip
 80010d6:	4626      	mov	r6, r4
 80010d8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80010da:	6028      	str	r0, [r5, #0]
 80010dc:	6069      	str	r1, [r5, #4]
 80010de:	60aa      	str	r2, [r5, #8]
 80010e0:	60eb      	str	r3, [r5, #12]
 80010e2:	3410      	adds	r4, #16
 80010e4:	f10c 0c10 	add.w	ip, ip, #16
 80010e8:	4574      	cmp	r4, lr
 80010ea:	d1f3      	bne.n	80010d4 <DynWebPage+0xb4>
 80010ec:	4663      	mov	r3, ip
 80010ee:	4622      	mov	r2, r4
 80010f0:	6810      	ldr	r0, [r2, #0]
 80010f2:	6018      	str	r0, [r3, #0]
 80010f4:	8892      	ldrh	r2, [r2, #4]
 80010f6:	809a      	strh	r2, [r3, #4]

  /* The list of tasks and their status */
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
 80010f8:	f107 0318 	add.w	r3, r7, #24
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f8f9 	bl	80002f4 <strlen>
 8001102:	4602      	mov	r2, r0
 8001104:	f107 0318 	add.w	r3, r7, #24
 8001108:	4413      	add	r3, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f006 ff9b 	bl	8008046 <osThreadList>
  strcat((char *)PAGE_BODY, "<br><br>---------------------------------------------");
 8001110:	f107 0318 	add.w	r3, r7, #24
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f8ed 	bl	80002f4 <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	461a      	mov	r2, r3
 800111e:	f107 0318 	add.w	r3, r7, #24
 8001122:	4413      	add	r3, r2
 8001124:	4a31      	ldr	r2, [pc, #196]	; (80011ec <DynWebPage+0x1cc>)
 8001126:	4614      	mov	r4, r2
 8001128:	469c      	mov	ip, r3
 800112a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800112e:	4665      	mov	r5, ip
 8001130:	4626      	mov	r6, r4
 8001132:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001134:	6028      	str	r0, [r5, #0]
 8001136:	6069      	str	r1, [r5, #4]
 8001138:	60aa      	str	r2, [r5, #8]
 800113a:	60eb      	str	r3, [r5, #12]
 800113c:	3410      	adds	r4, #16
 800113e:	f10c 0c10 	add.w	ip, ip, #16
 8001142:	4574      	cmp	r4, lr
 8001144:	d1f3      	bne.n	800112e <DynWebPage+0x10e>
 8001146:	4663      	mov	r3, ip
 8001148:	4622      	mov	r2, r4
 800114a:	6810      	ldr	r0, [r2, #0]
 800114c:	6018      	str	r0, [r3, #0]
 800114e:	8892      	ldrh	r2, [r2, #4]
 8001150:	809a      	strh	r2, [r3, #4]
  strcat((char *)PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f8cc 	bl	80002f4 <strlen>
 800115c:	4603      	mov	r3, r0
 800115e:	461a      	mov	r2, r3
 8001160:	f107 0318 	add.w	r3, r7, #24
 8001164:	4413      	add	r3, r2
 8001166:	4a22      	ldr	r2, [pc, #136]	; (80011f0 <DynWebPage+0x1d0>)
 8001168:	4614      	mov	r4, r2
 800116a:	469c      	mov	ip, r3
 800116c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001170:	4665      	mov	r5, ip
 8001172:	4626      	mov	r6, r4
 8001174:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001176:	6028      	str	r0, [r5, #0]
 8001178:	6069      	str	r1, [r5, #4]
 800117a:	60aa      	str	r2, [r5, #8]
 800117c:	60eb      	str	r3, [r5, #12]
 800117e:	3410      	adds	r4, #16
 8001180:	f10c 0c10 	add.w	ip, ip, #16
 8001184:	4574      	cmp	r4, lr
 8001186:	d1f3      	bne.n	8001170 <DynWebPage+0x150>
 8001188:	4662      	mov	r2, ip
 800118a:	4623      	mov	r3, r4
 800118c:	cb03      	ldmia	r3!, {r0, r1}
 800118e:	6010      	str	r0, [r2, #0]
 8001190:	6051      	str	r1, [r2, #4]
 8001192:	8819      	ldrh	r1, [r3, #0]
 8001194:	789b      	ldrb	r3, [r3, #2]
 8001196:	8111      	strh	r1, [r2, #8]
 8001198:	7293      	strb	r3, [r2, #10]

  /* Send the dynamically generated page */
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 800119a:	4816      	ldr	r0, [pc, #88]	; (80011f4 <DynWebPage+0x1d4>)
 800119c:	f7ff f8aa 	bl	80002f4 <strlen>
 80011a0:	4602      	mov	r2, r0
 80011a2:	1d38      	adds	r0, r7, #4
 80011a4:	2300      	movs	r3, #0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	4912      	ldr	r1, [pc, #72]	; (80011f4 <DynWebPage+0x1d4>)
 80011ac:	6800      	ldr	r0, [r0, #0]
 80011ae:	f007 ffb1 	bl	8009114 <netconn_write_partly>
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f89c 	bl	80002f4 <strlen>
 80011bc:	4602      	mov	r2, r0
 80011be:	f107 0118 	add.w	r1, r7, #24
 80011c2:	1d38      	adds	r0, r7, #4
 80011c4:	2300      	movs	r3, #0
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	6800      	ldr	r0, [r0, #0]
 80011cc:	f007 ffa2 	bl	8009114 <netconn_write_partly>
}
 80011d0:	bf00      	nop
 80011d2:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011da:	bf00      	nop
 80011dc:	240000d8 	.word	0x240000d8
 80011e0:	08017b0c 	.word	0x08017b0c
 80011e4:	08017b10 	.word	0x08017b10
 80011e8:	08017b44 	.word	0x08017b44
 80011ec:	08017b7c 	.word	0x08017b7c
 80011f0:	08017bb4 	.word	0x08017bb4
 80011f4:	08017360 	.word	0x08017360

080011f8 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Device memory for ETH DMA descriptors */
  MPU_Config();
 80011fe:	f000 f903 	bl	8001408 <MPU_Config>
  
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8001202:	f000 f945 	bl	8001490 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the TIM6 to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();  
 8001206:	f000 fd01 	bl	8001c0c <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
 800120a:	f000 f86f 	bl	80012ec <SystemClock_Config>
  
  /* Configure the LCD ...*/
  BSP_Config();
 800120e:	f000 f821 	bl	8001254 <BSP_Config>
  
  /* Init thread */
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 4);
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <main+0x38>)
 8001214:	1d3c      	adds	r4, r7, #4
 8001216:	461d      	mov	r5, r3
 8001218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f006 fcaa 	bl	8007b7e <osThreadCreate>
  
  /* Start scheduler */
  osKernelStart();
 800122a:	f006 fc91 	bl	8007b50 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */
  for( ;; );
 800122e:	e7fe      	b.n	800122e <main+0x36>
 8001230:	08017c00 	.word	0x08017c00

08001234 <StartThread>:
  * @brief  Start Thread 
  * @param  argument not used
  * @retval None
  */
static void StartThread(void const * argument)
{   
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 800123c:	2100      	movs	r1, #0
 800123e:	2000      	movs	r0, #0
 8001240:	f009 ff50 	bl	800b0e4 <tcpip_init>
  
  /* Initialize the LwIP stack */
  Netif_Config();
 8001244:	f000 f810 	bl	8001268 <Netif_Config>

  /* Initialize webserver demo */
  http_server_netconn_init();
 8001248:	f7ff feca 	bl	8000fe0 <http_server_netconn_init>
  
  for( ;; )
  {
    /* Delete the Init Thread */ 
    osThreadTerminate(NULL);
 800124c:	2000      	movs	r0, #0
 800124e:	f006 fcbd 	bl	8007bcc <osThreadTerminate>
 8001252:	e7fb      	b.n	800124c <StartThread+0x18>

08001254 <BSP_Config>:
  * @brief  BSP Configuration 
  * @param  None
  * @retval None
  */
static void BSP_Config(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED2);
 8001258:	2001      	movs	r0, #1
 800125a:	f000 fb93 	bl	8001984 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 800125e:	2002      	movs	r0, #2
 8001260:	f000 fb90 	bl	8001984 <BSP_LED_Init>
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <Netif_Config>:
  * @brief  Initializes the lwIP stack
  * @param  None
  * @retval None
  */
static void Netif_Config(void)
{
 8001268:	b5b0      	push	{r4, r5, r7, lr}
 800126a:	b08c      	sub	sp, #48	; 0x30
 800126c:	af04      	add	r7, sp, #16
#if LWIP_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
  ip_addr_set_zero_ip4(&netmask);
  ip_addr_set_zero_ip4(&gw);
#else
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <Netif_Config+0x68>)
 8001270:	61fb      	str	r3, [r7, #28]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8001272:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001276:	61bb      	str	r3, [r7, #24]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <Netif_Config+0x6c>)
 800127a:	617b      	str	r3, [r7, #20]
#endif /* LWIP_DHCP */
  
  /* add the network interface */    
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	f107 0218 	add.w	r2, r7, #24
 8001284:	f107 011c 	add.w	r1, r7, #28
 8001288:	4813      	ldr	r0, [pc, #76]	; (80012d8 <Netif_Config+0x70>)
 800128a:	9002      	str	r0, [sp, #8]
 800128c:	4813      	ldr	r0, [pc, #76]	; (80012dc <Netif_Config+0x74>)
 800128e:	9001      	str	r0, [sp, #4]
 8001290:	2000      	movs	r0, #0
 8001292:	9000      	str	r0, [sp, #0]
 8001294:	4812      	ldr	r0, [pc, #72]	; (80012e0 <Netif_Config+0x78>)
 8001296:	f00c ff5f 	bl	800e158 <netif_add>
  
  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 800129a:	4811      	ldr	r0, [pc, #68]	; (80012e0 <Netif_Config+0x78>)
 800129c:	f00d f90e 	bl	800e4bc <netif_set_default>
  
  ethernet_link_status_updated(&gnetif); 
 80012a0:	480f      	ldr	r0, [pc, #60]	; (80012e0 <Netif_Config+0x78>)
 80012a2:	f7ff f8ae 	bl	8000402 <ethernet_link_status_updated>
  
#if LWIP_NETIF_LINK_CALLBACK 
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80012a6:	490f      	ldr	r1, [pc, #60]	; (80012e4 <Netif_Config+0x7c>)
 80012a8:	480d      	ldr	r0, [pc, #52]	; (80012e0 <Netif_Config+0x78>)
 80012aa:	f00d fa19 	bl	800e6e0 <netif_set_link_callback>
  
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <Netif_Config+0x80>)
 80012b0:	463c      	mov	r4, r7
 80012b2:	461d      	mov	r5, r3
 80012b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b8:	682b      	ldr	r3, [r5, #0]
 80012ba:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 80012bc:	463b      	mov	r3, r7
 80012be:	4908      	ldr	r1, [pc, #32]	; (80012e0 <Netif_Config+0x78>)
 80012c0:	4618      	mov	r0, r3
 80012c2:	f006 fc5c 	bl	8007b7e <osThreadCreate>
#if LWIP_DHCP
  /* Start DHCPClient */
  osThreadDef(DHCP, DHCP_Thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
  osThreadCreate (osThread(DHCP), &gnetif);
#endif 
}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bdb0      	pop	{r4, r5, r7, pc}
 80012ce:	bf00      	nop
 80012d0:	0a47fea9 	.word	0x0a47fea9
 80012d4:	0100fea9 	.word	0x0100fea9
 80012d8:	0800b075 	.word	0x0800b075
 80012dc:	080008c9 	.word	0x080008c9
 80012e0:	240069ac 	.word	0x240069ac
 80012e4:	08000403 	.word	0x08000403
 80012e8:	08017c14 	.word	0x08017c14

080012ec <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b09e      	sub	sp, #120	; 0x78
 80012f0:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  
  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80012f8:	2002      	movs	r0, #2
 80012fa:	f002 fedd 	bl	80040b8 <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <SystemClock_Config+0x110>)
 8001304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001306:	4a3d      	ldr	r2, [pc, #244]	; (80013fc <SystemClock_Config+0x110>)
 8001308:	f023 0301 	bic.w	r3, r3, #1
 800130c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800130e:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <SystemClock_Config+0x110>)
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	607b      	str	r3, [r7, #4]
 8001318:	4b39      	ldr	r3, [pc, #228]	; (8001400 <SystemClock_Config+0x114>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a38      	ldr	r2, [pc, #224]	; (8001400 <SystemClock_Config+0x114>)
 800131e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b36      	ldr	r3, [pc, #216]	; (8001400 <SystemClock_Config+0x114>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001330:	bf00      	nop
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <SystemClock_Config+0x114>)
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800133a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800133e:	d1f8      	bne.n	8001332 <SystemClock_Config+0x46>
  
  /* Enable D2 domain SRAM3 Clock (0x30040000 AXI)*/
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8001340:	4b30      	ldr	r3, [pc, #192]	; (8001404 <SystemClock_Config+0x118>)
 8001342:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001346:	4a2f      	ldr	r2, [pc, #188]	; (8001404 <SystemClock_Config+0x118>)
 8001348:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800134c:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001350:	4b2c      	ldr	r3, [pc, #176]	; (8001404 <SystemClock_Config+0x118>)
 8001352:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800135e:	2301      	movs	r3, #1
 8001360:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001362:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001366:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001370:	2302      	movs	r3, #2
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001374:	2302      	movs	r3, #2
 8001376:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 4;
 8001378:	2304      	movs	r3, #4
 800137a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 800137c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001380:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001386:	2302      	movs	r3, #2
 8001388:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800138a:	2302      	movs	r3, #2
 800138c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800138e:	2304      	movs	r3, #4
 8001390:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001392:	2300      	movs	r3, #0
 8001394:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8001396:	2304      	movs	r3, #4
 8001398:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800139a:	f107 0308 	add.w	r3, r7, #8
 800139e:	4618      	mov	r0, r3
 80013a0:	f002 fec4 	bl	800412c <HAL_RCC_OscConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80013aa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d000      	beq.n	80013b4 <SystemClock_Config+0xc8>
  {
    while(1);
 80013b2:	e7fe      	b.n	80013b2 <SystemClock_Config+0xc6>
  }
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80013b4:	233f      	movs	r3, #63	; 0x3f
 80013b6:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b8:	2303      	movs	r3, #3
 80013ba:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80013bc:	2300      	movs	r3, #0
 80013be:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80013c0:	2308      	movs	r3, #8
 80013c2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 80013c4:	2340      	movs	r3, #64	; 0x40
 80013c6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 80013c8:	2340      	movs	r3, #64	; 0x40
 80013ca:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 80013cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 80013d2:	2340      	movs	r3, #64	; 0x40
 80013d4:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80013d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013da:	2104      	movs	r1, #4
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fab5 	bl	800494c <HAL_RCC_ClockConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80013e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d000      	beq.n	80013f2 <SystemClock_Config+0x106>
  {
    while(1);
 80013f0:	e7fe      	b.n	80013f0 <SystemClock_Config+0x104>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3778      	adds	r7, #120	; 0x78
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	58000400 	.word	0x58000400
 8001400:	58024800 	.word	0x58024800
 8001404:	58024400 	.word	0x58024400

08001408 <MPU_Config>:
  * @brief  Configure the MPU attributes 
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 800140e:	f000 fd61 	bl	8001ed4 <HAL_MPU_Disable>

  /* Configure the MPU attributes as Device not cacheable 
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001412:	2301      	movs	r3, #1
 8001414:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30040000;
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MPU_Config+0x80>)
 8001418:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800141a:	2307      	movs	r3, #7
 800141c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800141e:	2303      	movs	r3, #3
 8001420:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001422:	2301      	movs	r3, #1
 8001424:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800142e:	2300      	movs	r3, #0
 8001430:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001432:	2300      	movs	r3, #0
 8001434:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8001436:	2300      	movs	r3, #0
 8001438:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800143e:	463b      	mov	r3, r7
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fd7f 	bl	8001f44 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001446:	2301      	movs	r3, #1
 8001448:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30044000;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <MPU_Config+0x84>)
 800144c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 800144e:	230d      	movs	r3, #13
 8001450:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001452:	2303      	movs	r3, #3
 8001454:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800145e:	2301      	movs	r3, #1
 8001460:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001462:	2301      	movs	r3, #1
 8001464:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001466:	2301      	movs	r3, #1
 8001468:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800146a:	2300      	movs	r3, #0
 800146c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001472:	463b      	mov	r3, r7
 8001474:	4618      	mov	r0, r3
 8001476:	f000 fd65 	bl	8001f44 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800147a:	2004      	movs	r0, #4
 800147c:	f000 fd42 	bl	8001f04 <HAL_MPU_Enable>
}
 8001480:	bf00      	nop
 8001482:	3710      	adds	r7, #16
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	30040000 	.word	0x30040000
 800148c:	30044000 	.word	0x30044000

08001490 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001496:	4b34      	ldr	r3, [pc, #208]	; (8001568 <CPU_CACHE_Enable+0xd8>)
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d11b      	bne.n	80014da <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80014a2:	f3bf 8f4f 	dsb	sy
}
 80014a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014a8:	f3bf 8f6f 	isb	sy
}
 80014ac:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80014ae:	4b2e      	ldr	r3, [pc, #184]	; (8001568 <CPU_CACHE_Enable+0xd8>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80014b6:	f3bf 8f4f 	dsb	sy
}
 80014ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014bc:	f3bf 8f6f 	isb	sy
}
 80014c0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80014c2:	4b29      	ldr	r3, [pc, #164]	; (8001568 <CPU_CACHE_Enable+0xd8>)
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	4a28      	ldr	r2, [pc, #160]	; (8001568 <CPU_CACHE_Enable+0xd8>)
 80014c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80014ce:	f3bf 8f4f 	dsb	sy
}
 80014d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014d4:	f3bf 8f6f 	isb	sy
}
 80014d8:	e000      	b.n	80014dc <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80014da:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80014dc:	4b22      	ldr	r3, [pc, #136]	; (8001568 <CPU_CACHE_Enable+0xd8>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d138      	bne.n	800155a <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <CPU_CACHE_Enable+0xd8>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80014f0:	f3bf 8f4f 	dsb	sy
}
 80014f4:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <CPU_CACHE_Enable+0xd8>)
 80014f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014fc:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	0b5b      	lsrs	r3, r3, #13
 8001502:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001506:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001510:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	015a      	lsls	r2, r3, #5
 8001516:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800151a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001520:	4911      	ldr	r1, [pc, #68]	; (8001568 <CPU_CACHE_Enable+0xd8>)
 8001522:	4313      	orrs	r3, r2
 8001524:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	1e5a      	subs	r2, r3, #1
 800152c:	607a      	str	r2, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1ef      	bne.n	8001512 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	1e5a      	subs	r2, r3, #1
 8001536:	60ba      	str	r2, [r7, #8]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1e5      	bne.n	8001508 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <CPU_CACHE_Enable+0xd8>)
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <CPU_CACHE_Enable+0xd8>)
 8001548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800154c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800154e:	f3bf 8f4f 	dsb	sy
}
 8001552:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001554:	f3bf 8f6f 	isb	sy
}
 8001558:	e000      	b.n	800155c <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800155a:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 800155c:	bf00      	nop
 800155e:	3714      	adds	r7, #20
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b090      	sub	sp, #64	; 0x40
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b0f      	cmp	r3, #15
 8001578:	d827      	bhi.n	80015ca <HAL_InitTick+0x5e>
  {
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 800157a:	2200      	movs	r2, #0
 800157c:	6879      	ldr	r1, [r7, #4]
 800157e:	2036      	movs	r0, #54	; 0x36
 8001580:	f000 fc80 	bl	8001e84 <HAL_NVIC_SetPriority>
    
    /* Enable the TIM6 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001584:	2036      	movs	r0, #54	; 0x36
 8001586:	f000 fc97 	bl	8001eb8 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800158a:	4a29      	ldr	r2, [pc, #164]	; (8001630 <HAL_InitTick+0xc4>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001590:	4b28      	ldr	r3, [pc, #160]	; (8001634 <HAL_InitTick+0xc8>)
 8001592:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001596:	4a27      	ldr	r2, [pc, #156]	; (8001634 <HAL_InitTick+0xc8>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80015a0:	4b24      	ldr	r3, [pc, #144]	; (8001634 <HAL_InitTick+0xc8>)
 80015a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ae:	f107 0210 	add.w	r2, r7, #16
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f003 fd3d 	bl	8005038 <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c0:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 80015c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d106      	bne.n	80015d6 <HAL_InitTick+0x6a>
 80015c8:	e001      	b.n	80015ce <HAL_InitTick+0x62>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e02b      	b.n	8001626 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015ce:	f003 fd1d 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 80015d2:	63f8      	str	r0, [r7, #60]	; 0x3c
 80015d4:	e004      	b.n	80015e0 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015d6:	f003 fd19 	bl	800500c <HAL_RCC_GetPCLK1Freq>
 80015da:	4603      	mov	r3, r0
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015e2:	4a15      	ldr	r2, [pc, #84]	; (8001638 <HAL_InitTick+0xcc>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	0c9b      	lsrs	r3, r3, #18
 80015ea:	3b01      	subs	r3, #1
 80015ec:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 80015ee:	4b13      	ldr	r3, [pc, #76]	; (800163c <HAL_InitTick+0xd0>)
 80015f0:	4a13      	ldr	r2, [pc, #76]	; (8001640 <HAL_InitTick+0xd4>)
 80015f2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_InitTick+0xd0>)
 80015f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015fa:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 80015fc:	4a0f      	ldr	r2, [pc, #60]	; (800163c <HAL_InitTick+0xd0>)
 80015fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001600:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_InitTick+0xd0>)
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_InitTick+0xd0>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 800160e:	480b      	ldr	r0, [pc, #44]	; (800163c <HAL_InitTick+0xd0>)
 8001610:	f003 fd54 	bl	80050bc <HAL_TIM_Base_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d104      	bne.n	8001624 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800161a:	4808      	ldr	r0, [pc, #32]	; (800163c <HAL_InitTick+0xd0>)
 800161c:	f003 fdb0 	bl	8005180 <HAL_TIM_Base_Start_IT>
 8001620:	4603      	mov	r3, r0
 8001622:	e000      	b.n	8001626 <HAL_InitTick+0xba>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
}
 8001626:	4618      	mov	r0, r3
 8001628:	3740      	adds	r7, #64	; 0x40
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	24000038 	.word	0x24000038
 8001634:	58024400 	.word	0x58024400
 8001638:	431bde83 	.word	0x431bde83
 800163c:	240000dc 	.word	0x240000dc
 8001640:	40001000 	.word	0x40001000

08001644 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 800164c:	f000 fb22 	bl	8001c94 <HAL_IncTick>
}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <TIM6_DAC_IRQHandler+0x10>)
 800165e:	f003 fdff 	bl	8005260 <HAL_TIM_IRQHandler>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	240000dc 	.word	0x240000dc

0800166c <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  osSystickHandler();
 80016a4:	f006 fcc4 	bl	8008030 <osSystickHandler>
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <ETH_IRQHandler>:
  * @brief  This function handles Ethernet interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  HAL_ETH_IRQHandler(&EthHandle);
 80016b0:	4802      	ldr	r0, [pc, #8]	; (80016bc <ETH_IRQHandler+0x10>)
 80016b2:	f001 f965 	bl	8002980 <HAL_ETH_IRQHandler>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	24006804 	.word	0x24006804

080016c0 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d00b      	beq.n	80016e8 <LAN8742_RegisterBusIO+0x28>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d007      	beq.n	80016e8 <LAN8742_RegisterBusIO+0x28>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d003      	beq.n	80016e8 <LAN8742_RegisterBusIO+0x28>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d102      	bne.n	80016ee <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ec:	e014      	b.n	8001718 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685a      	ldr	r2, [r3, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	689a      	ldr	r2, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001738:	2300      	movs	r3, #0
 800173a:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d17c      	bne.n	800183e <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2220      	movs	r2, #32
 8001756:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e01c      	b.n	8001798 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f107 0208 	add.w	r2, r7, #8
 8001766:	2112      	movs	r1, #18
 8001768:	6978      	ldr	r0, [r7, #20]
 800176a:	4798      	blx	r3
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	da03      	bge.n	800177a <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001772:	f06f 0304 	mvn.w	r3, #4
 8001776:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001778:	e00b      	b.n	8001792 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	429a      	cmp	r2, r3
 8001784:	d105      	bne.n	8001792 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
         break;
 8001790:	e005      	b.n	800179e <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	2b1f      	cmp	r3, #31
 800179c:	d9df      	bls.n	800175e <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b1f      	cmp	r3, #31
 80017a4:	d902      	bls.n	80017ac <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80017a6:	f06f 0302 	mvn.w	r3, #2
 80017aa:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d145      	bne.n	800183e <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6810      	ldr	r0, [r2, #0]
 80017ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017be:	2100      	movs	r1, #0
 80017c0:	4798      	blx	r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	db37      	blt.n	8001838 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6810      	ldr	r0, [r2, #0]
 80017d0:	f107 0208 	add.w	r2, r7, #8
 80017d4:	2100      	movs	r1, #0
 80017d6:	4798      	blx	r3
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db28      	blt.n	8001830 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	4798      	blx	r3
 80017e4:	4603      	mov	r3, r0
 80017e6:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80017e8:	e01c      	b.n	8001824 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	699b      	ldr	r3, [r3, #24]
 80017ee:	4798      	blx	r3
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017fc:	d80e      	bhi.n	800181c <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6810      	ldr	r0, [r2, #0]
 8001806:	f107 0208 	add.w	r2, r7, #8
 800180a:	2100      	movs	r1, #0
 800180c:	4798      	blx	r3
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	da07      	bge.n	8001824 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001814:	f06f 0304 	mvn.w	r3, #4
 8001818:	613b      	str	r3, [r7, #16]
                 break;
 800181a:	e010      	b.n	800183e <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800181c:	f06f 0301 	mvn.w	r3, #1
 8001820:	613b      	str	r3, [r7, #16]
               break;
 8001822:	e00c      	b.n	800183e <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1dd      	bne.n	80017ea <LAN8742_Init+0xc6>
 800182e:	e006      	b.n	800183e <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001830:	f06f 0304 	mvn.w	r3, #4
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	e002      	b.n	800183e <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001838:	f06f 0303 	mvn.w	r3, #3
 800183c:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d112      	bne.n	800186a <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	4798      	blx	r3
 800184a:	4603      	mov	r3, r0
 800184c:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800184e:	bf00      	nop
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	4798      	blx	r3
 8001856:	4603      	mov	r3, r0
 8001858:	461a      	mov	r2, r3
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001862:	d9f5      	bls.n	8001850 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800186a:	693b      	ldr	r3, [r7, #16]
 }
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	6810      	ldr	r0, [r2, #0]
 8001888:	f107 020c 	add.w	r2, r7, #12
 800188c:	2101      	movs	r1, #1
 800188e:	4798      	blx	r3
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	da02      	bge.n	800189c <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001896:	f06f 0304 	mvn.w	r3, #4
 800189a:	e06e      	b.n	800197a <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6810      	ldr	r0, [r2, #0]
 80018a4:	f107 020c 	add.w	r2, r7, #12
 80018a8:	2101      	movs	r1, #1
 80018aa:	4798      	blx	r3
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	da02      	bge.n	80018b8 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018b2:	f06f 0304 	mvn.w	r3, #4
 80018b6:	e060      	b.n	800197a <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d101      	bne.n	80018c6 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80018c2:	2301      	movs	r3, #1
 80018c4:	e059      	b.n	800197a <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	695b      	ldr	r3, [r3, #20]
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6810      	ldr	r0, [r2, #0]
 80018ce:	f107 020c 	add.w	r2, r7, #12
 80018d2:	2100      	movs	r1, #0
 80018d4:	4798      	blx	r3
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	da02      	bge.n	80018e2 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80018dc:	f06f 0304 	mvn.w	r3, #4
 80018e0:	e04b      	b.n	800197a <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d11b      	bne.n	8001924 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d006      	beq.n	8001904 <LAN8742_GetLinkState+0x90>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001900:	2302      	movs	r3, #2
 8001902:	e03a      	b.n	800197a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800190e:	2303      	movs	r3, #3
 8001910:	e033      	b.n	800197a <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800191c:	2304      	movs	r3, #4
 800191e:	e02c      	b.n	800197a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001920:	2305      	movs	r3, #5
 8001922:	e02a      	b.n	800197a <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	695b      	ldr	r3, [r3, #20]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6810      	ldr	r0, [r2, #0]
 800192c:	f107 020c 	add.w	r2, r7, #12
 8001930:	211f      	movs	r1, #31
 8001932:	4798      	blx	r3
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	da02      	bge.n	8001940 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800193a:	f06f 0304 	mvn.w	r3, #4
 800193e:	e01c      	b.n	800197a <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d101      	bne.n	800194e <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800194a:	2306      	movs	r3, #6
 800194c:	e015      	b.n	800197a <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f003 031c 	and.w	r3, r3, #28
 8001954:	2b18      	cmp	r3, #24
 8001956:	d101      	bne.n	800195c <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001958:	2302      	movs	r3, #2
 800195a:	e00e      	b.n	800197a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 031c 	and.w	r3, r3, #28
 8001962:	2b08      	cmp	r3, #8
 8001964:	d101      	bne.n	800196a <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001966:	2303      	movs	r3, #3
 8001968:	e007      	b.n	800197a <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f003 031c 	and.w	r3, r3, #28
 8001970:	2b14      	cmp	r3, #20
 8001972:	d101      	bne.n	8001978 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001974:	2304      	movs	r3, #4
 8001976:	e000      	b.n	800197a <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001978:	2305      	movs	r3, #5
    }				
  }
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08c      	sub	sp, #48	; 0x30
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800198e:	2300      	movs	r3, #0
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <BSP_LED_Init+0x28>
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d006      	beq.n	80019ac <BSP_LED_Init+0x28>
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d003      	beq.n	80019ac <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019a4:	f06f 0301 	mvn.w	r3, #1
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019aa:	e055      	b.n	8001a58 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10f      	bne.n	80019d2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80019b2:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <BSP_LED_Init+0xe0>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	4a2a      	ldr	r2, [pc, #168]	; (8001a64 <BSP_LED_Init+0xe0>)
 80019ba:	f043 0302 	orr.w	r3, r3, #2
 80019be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <BSP_LED_Init+0xe0>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	e021      	b.n	8001a16 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10f      	bne.n	80019f8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80019d8:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <BSP_LED_Init+0xe0>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019de:	4a21      	ldr	r2, [pc, #132]	; (8001a64 <BSP_LED_Init+0xe0>)
 80019e0:	f043 0310 	orr.w	r3, r3, #16
 80019e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e8:	4b1e      	ldr	r3, [pc, #120]	; (8001a64 <BSP_LED_Init+0xe0>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	e00e      	b.n	8001a16 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <BSP_LED_Init+0xe0>)
 80019fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fe:	4a19      	ldr	r2, [pc, #100]	; (8001a64 <BSP_LED_Init+0xe0>)
 8001a00:	f043 0302 	orr.w	r3, r3, #2
 8001a04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <BSP_LED_Init+0xe0>)
 8001a0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4a13      	ldr	r2, [pc, #76]	; (8001a68 <BSP_LED_Init+0xe4>)
 8001a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a1e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a20:	2301      	movs	r3, #1
 8001a22:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <BSP_LED_Init+0xe8>)
 8001a30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a34:	f107 0218 	add.w	r2, r7, #24
 8001a38:	4611      	mov	r1, r2
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 f972 	bl	8003d24 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <BSP_LED_Init+0xe8>)
 8001a44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	4a07      	ldr	r2, [pc, #28]	; (8001a68 <BSP_LED_Init+0xe4>)
 8001a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a50:	2200      	movs	r2, #0
 8001a52:	4619      	mov	r1, r3
 8001a54:	f002 fb16 	bl	8004084 <HAL_GPIO_WritePin>
  }

  return ret;
 8001a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3730      	adds	r7, #48	; 0x30
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	58024400 	.word	0x58024400
 8001a68:	08017c28 	.word	0x08017c28
 8001a6c:	24000018 	.word	0x24000018

08001a70 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b084      	sub	sp, #16
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d009      	beq.n	8001a98 <BSP_LED_On+0x28>
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d006      	beq.n	8001a98 <BSP_LED_On+0x28>
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d003      	beq.n	8001a98 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a90:	f06f 0301 	mvn.w	r3, #1
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	e00b      	b.n	8001ab0 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	4a08      	ldr	r2, [pc, #32]	; (8001abc <BSP_LED_On+0x4c>)
 8001a9c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <BSP_LED_On+0x50>)
 8001aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4619      	mov	r1, r3
 8001aac:	f002 faea 	bl	8004084 <HAL_GPIO_WritePin>
  }

  return ret;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	24000018 	.word	0x24000018
 8001ac0:	08017c28 	.word	0x08017c28

08001ac4 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d009      	beq.n	8001aec <BSP_LED_Off+0x28>
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d006      	beq.n	8001aec <BSP_LED_Off+0x28>
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d003      	beq.n	8001aec <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ae4:	f06f 0301 	mvn.w	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	e00b      	b.n	8001b04 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <BSP_LED_Off+0x4c>)
 8001af0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	4a07      	ldr	r2, [pc, #28]	; (8001b14 <BSP_LED_Off+0x50>)
 8001af8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001afc:	2200      	movs	r2, #0
 8001afe:	4619      	mov	r1, r3
 8001b00:	f002 fac0 	bl	8004084 <HAL_GPIO_WritePin>
  }

  return ret;
 8001b04:	68fb      	ldr	r3, [r7, #12]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	24000018 	.word	0x24000018
 8001b14:	08017c28 	.word	0x08017c28

08001b18 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff fff0 	bl	8001b18 <BSP_PB_Callback>
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <SystemInit+0xb4>)
 8001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b46:	4a2a      	ldr	r2, [pc, #168]	; (8001bf0 <SystemInit+0xb4>)
 8001b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001b50:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <SystemInit+0xb8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a27      	ldr	r2, [pc, #156]	; (8001bf4 <SystemInit+0xb8>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <SystemInit+0xb8>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001b62:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <SystemInit+0xb8>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	4923      	ldr	r1, [pc, #140]	; (8001bf4 <SystemInit+0xb8>)
 8001b68:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <SystemInit+0xbc>)
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001b6e:	4b21      	ldr	r3, [pc, #132]	; (8001bf4 <SystemInit+0xb8>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001b74:	4b1f      	ldr	r3, [pc, #124]	; (8001bf4 <SystemInit+0xb8>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <SystemInit+0xb8>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001b80:	4b1c      	ldr	r3, [pc, #112]	; (8001bf4 <SystemInit+0xb8>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001b86:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <SystemInit+0xb8>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001b8c:	4b19      	ldr	r3, [pc, #100]	; (8001bf4 <SystemInit+0xb8>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <SystemInit+0xb8>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001b98:	4b16      	ldr	r3, [pc, #88]	; (8001bf4 <SystemInit+0xb8>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <SystemInit+0xb8>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <SystemInit+0xb8>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <SystemInit+0xb8>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <SystemInit+0xb8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <SystemInit+0xb8>)
 8001bb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <SystemInit+0xb8>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001bc2:	4b0e      	ldr	r3, [pc, #56]	; (8001bfc <SystemInit+0xc0>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <SystemInit+0xc4>)
 8001bc8:	4013      	ands	r3, r2
 8001bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bce:	d202      	bcs.n	8001bd6 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <SystemInit+0xc8>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001bd6:	4b0c      	ldr	r3, [pc, #48]	; (8001c08 <SystemInit+0xcc>)
 8001bd8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001bdc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <SystemInit+0xb4>)
 8001be0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001be4:	609a      	str	r2, [r3, #8]
#endif  


}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	e000ed00 	.word	0xe000ed00
 8001bf4:	58024400 	.word	0x58024400
 8001bf8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001bfc:	5c001000 	.word	0x5c001000
 8001c00:	ffff0000 	.word	0xffff0000
 8001c04:	51008108 	.word	0x51008108
 8001c08:	52004000 	.word	0x52004000

08001c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c12:	2003      	movs	r0, #3
 8001c14:	f000 f92b 	bl	8001e6e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c18:	f003 f84e 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_Init+0x68>)
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	0a1b      	lsrs	r3, r3, #8
 8001c24:	f003 030f 	and.w	r3, r3, #15
 8001c28:	4913      	ldr	r1, [pc, #76]	; (8001c78 <HAL_Init+0x6c>)
 8001c2a:	5ccb      	ldrb	r3, [r1, r3]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_Init+0x68>)
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	; (8001c78 <HAL_Init+0x6c>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	f003 031f 	and.w	r3, r3, #31
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	fa22 f303 	lsr.w	r3, r2, r3
 8001c4c:	4a0b      	ldr	r2, [pc, #44]	; (8001c7c <HAL_Init+0x70>)
 8001c4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c50:	4a0b      	ldr	r2, [pc, #44]	; (8001c80 <HAL_Init+0x74>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c56:	200f      	movs	r0, #15
 8001c58:	f7ff fc88 	bl	800156c <HAL_InitTick>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e002      	b.n	8001c6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001c66:	f000 f80d 	bl	8001c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	58024400 	.word	0x58024400
 8001c78:	08017c3c 	.word	0x08017c3c
 8001c7c:	24000034 	.word	0x24000034
 8001c80:	24000030 	.word	0x24000030

08001c84 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
	...

08001c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_IncTick+0x20>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <HAL_IncTick+0x24>)
 8001ca6:	6013      	str	r3, [r2, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	2400003c 	.word	0x2400003c
 8001cb8:	240069e0 	.word	0x240069e0

08001cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc0:	4b03      	ldr	r3, [pc, #12]	; (8001cd0 <HAL_GetTick+0x14>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	240069e0 	.word	0x240069e0

08001cd4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_GetREVID+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0c1b      	lsrs	r3, r3, #16
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	5c001000 	.word	0x5c001000

08001cec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001cfc:	4904      	ldr	r1, [pc, #16]	; (8001d10 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	58000400 	.word	0x58000400

08001d14 <__NVIC_SetPriorityGrouping>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <__NVIC_SetPriorityGrouping+0x40>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <__NVIC_SetPriorityGrouping+0x40>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00
 8001d58:	05fa0000 	.word	0x05fa0000

08001d5c <__NVIC_GetPriorityGrouping>:
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <__NVIC_GetPriorityGrouping+0x18>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	f003 0307 	and.w	r3, r3, #7
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_EnableIRQ>:
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	db0b      	blt.n	8001da2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	4907      	ldr	r1, [pc, #28]	; (8001db0 <__NVIC_EnableIRQ+0x38>)
 8001d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	2001      	movs	r0, #1
 8001d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_SetPriority>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	; (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	; (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b082      	sub	sp, #8
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff ff4c 	bl	8001d14 <__NVIC_SetPriorityGrouping>
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
 8001e90:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e92:	f7ff ff63 	bl	8001d5c <__NVIC_GetPriorityGrouping>
 8001e96:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	6978      	ldr	r0, [r7, #20]
 8001e9e:	f7ff ffb3 	bl	8001e08 <NVIC_EncodePriority>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ff82 	bl	8001db4 <__NVIC_SetPriority>
}
 8001eb0:	bf00      	nop
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ec2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff56 	bl	8001d78 <__NVIC_EnableIRQ>
}
 8001ecc:	bf00      	nop
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001ed8:	f3bf 8f5f 	dmb	sy
}
 8001edc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <HAL_MPU_Disable+0x28>)
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_MPU_Disable+0x28>)
 8001ee4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001eea:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_MPU_Disable+0x2c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	605a      	str	r2, [r3, #4]
}
 8001ef0:	bf00      	nop
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000ed00 	.word	0xe000ed00
 8001f00:	e000ed90 	.word	0xe000ed90

08001f04 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <HAL_MPU_Enable+0x38>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f043 0301 	orr.w	r3, r3, #1
 8001f14:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_MPU_Enable+0x3c>)
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <HAL_MPU_Enable+0x3c>)
 8001f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f20:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001f22:	f3bf 8f4f 	dsb	sy
}
 8001f26:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001f28:	f3bf 8f6f 	isb	sy
}
 8001f2c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed90 	.word	0xe000ed90
 8001f40:	e000ed00 	.word	0xe000ed00

08001f44 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	785a      	ldrb	r2, [r3, #1]
 8001f50:	4b1d      	ldr	r3, [pc, #116]	; (8001fc8 <HAL_MPU_ConfigRegion+0x84>)
 8001f52:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d029      	beq.n	8001fb0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8001f5c:	4a1a      	ldr	r2, [pc, #104]	; (8001fc8 <HAL_MPU_ConfigRegion+0x84>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7b1b      	ldrb	r3, [r3, #12]
 8001f68:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	7adb      	ldrb	r3, [r3, #11]
 8001f6e:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001f70:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	7a9b      	ldrb	r3, [r3, #10]
 8001f76:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001f78:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	7b5b      	ldrb	r3, [r3, #13]
 8001f7e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001f80:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	7b9b      	ldrb	r3, [r3, #14]
 8001f86:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001f88:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	7bdb      	ldrb	r3, [r3, #15]
 8001f8e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001f90:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	7a5b      	ldrb	r3, [r3, #9]
 8001f96:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001f98:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	7a1b      	ldrb	r3, [r3, #8]
 8001f9e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001fa0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	7812      	ldrb	r2, [r2, #0]
 8001fa6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001faa:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001fac:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001fae:	e005      	b.n	8001fbc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_MPU_ConfigRegion+0x84>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001fb6:	4b04      	ldr	r3, [pc, #16]	; (8001fc8 <HAL_MPU_ConfigRegion+0x84>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	611a      	str	r2, [r3, #16]
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed90 	.word	0xe000ed90

08001fcc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e0c6      	b.n	800216c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7fe fcb4 	bl	8000954 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2223      	movs	r2, #35	; 0x23
 8001ff0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff2:	4b60      	ldr	r3, [pc, #384]	; (8002174 <HAL_ETH_Init+0x1a8>)
 8001ff4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ff8:	4a5e      	ldr	r2, [pc, #376]	; (8002174 <HAL_ETH_Init+0x1a8>)
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002002:	4b5c      	ldr	r3, [pc, #368]	; (8002174 <HAL_ETH_Init+0x1a8>)
 8002004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7a1b      	ldrb	r3, [r3, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d103      	bne.n	8002020 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002018:	2000      	movs	r0, #0
 800201a:	f7ff fe67 	bl	8001cec <HAL_SYSCFG_ETHInterfaceSelect>
 800201e:	e003      	b.n	8002028 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002020:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002024:	f7ff fe62 	bl	8001cec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f042 0201 	orr.w	r2, r2, #1
 800203a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002040:	f7ff fe3c 	bl	8001cbc <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002046:	e00f      	b.n	8002068 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002048:	f7ff fe38 	bl	8001cbc <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002056:	d907      	bls.n	8002068 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2204      	movs	r2, #4
 800205c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	22e0      	movs	r2, #224	; 0xe0
 8002062:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e081      	b.n	800216c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1e6      	bne.n	8002048 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f001 fad8 	bl	8003630 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002080:	f002 ff94 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8002084:	4603      	mov	r3, r0
 8002086:	4a3c      	ldr	r2, [pc, #240]	; (8002178 <HAL_ETH_Init+0x1ac>)
 8002088:	fba2 2303 	umull	r2, r3, r2, r3
 800208c:	0c9a      	lsrs	r2, r3, #18
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3a01      	subs	r2, #1
 8002094:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f001 fa2b 	bl	80034f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80020b4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80020b8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d007      	beq.n	80020d6 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	22e0      	movs	r2, #224	; 0xe0
 80020d0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e04a      	b.n	800216c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	f241 1308 	movw	r3, #4360	; 0x1108
 80020de:	4413      	add	r3, r2
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b26      	ldr	r3, [pc, #152]	; (800217c <HAL_ETH_Init+0x1b0>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6952      	ldr	r2, [r2, #20]
 80020ea:	0052      	lsls	r2, r2, #1
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	6809      	ldr	r1, [r1, #0]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	f241 1308 	movw	r3, #4360	; 0x1108
 80020f6:	440b      	add	r3, r1
 80020f8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f001 faf0 	bl	80036e0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f001 fb34 	bl	800376e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	3305      	adds	r3, #5
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	021a      	lsls	r2, r3, #8
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	3304      	adds	r3, #4
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	3303      	adds	r3, #3
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	061a      	lsls	r2, r3, #24
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	3302      	adds	r3, #2
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	041b      	lsls	r3, r3, #16
 8002138:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	3301      	adds	r3, #1
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002144:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002152:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002154:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2210      	movs	r2, #16
 8002162:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2210      	movs	r2, #16
 8002168:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	58024400 	.word	0x58024400
 8002178:	431bde83 	.word	0x431bde83
 800217c:	ffff8001 	.word	0xffff8001

08002180 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	3310      	adds	r3, #16
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <HAL_ETH_DescAssignMemory+0x28>
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d904      	bls.n	80021b2 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e021      	b.n	80021f6 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d00b      	beq.n	80021e8 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002202:	b480      	push	{r7}
 8002204:	b085      	sub	sp, #20
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800220e:	2b10      	cmp	r3, #16
 8002210:	d174      	bne.n	80022fc <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2223      	movs	r2, #35	; 0x23
 8002216:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e00f      	b.n	800223e <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3310      	adds	r3, #16
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3301      	adds	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d9ec      	bls.n	800221e <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0202 	orr.w	r2, r2, #2
 8002258:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f042 0201 	orr.w	r2, r2, #1
 8002268:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f042 0201 	orr.w	r2, r2, #1
 800227a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	f241 1304 	movw	r3, #4356	; 0x1104
 8002286:	4413      	add	r3, r2
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6811      	ldr	r1, [r2, #0]
 800228e:	f043 0201 	orr.w	r2, r3, #1
 8002292:	f241 1304 	movw	r3, #4356	; 0x1104
 8002296:	440b      	add	r3, r1
 8002298:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	f241 1308 	movw	r3, #4360	; 0x1108
 80022a2:	4413      	add	r3, r2
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6811      	ldr	r1, [r2, #0]
 80022aa:	f043 0201 	orr.w	r2, r3, #1
 80022ae:	f241 1308 	movw	r3, #4360	; 0x1108
 80022b2:	440b      	add	r3, r1
 80022b4:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 80022c8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80022cc:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	f241 1334 	movw	r3, #4404	; 0x1134
 80022d6:	4413      	add	r3, r2
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6811      	ldr	r1, [r2, #0]
 80022de:	f24d 0241 	movw	r2, #53313	; 0xd041
 80022e2:	431a      	orrs	r2, r3
 80022e4:	f241 1334 	movw	r3, #4404	; 0x1134
 80022e8:	440b      	add	r3, r1
 80022ea:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2210      	movs	r2, #16
 80022f0:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2222      	movs	r2, #34	; 0x22
 80022f6:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80022f8:	2300      	movs	r3, #0
 80022fa:	e000      	b.n	80022fe <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
  }
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
	...

0800230c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d067      	beq.n	80023ec <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2223      	movs	r2, #35	; 0x23
 8002320:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	f241 1334 	movw	r3, #4404	; 0x1134
 800232a:	4413      	add	r3, r2
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6811      	ldr	r1, [r2, #0]
 8002332:	4a32      	ldr	r2, [pc, #200]	; (80023fc <HAL_ETH_Stop_IT+0xf0>)
 8002334:	401a      	ands	r2, r3
 8002336:	f241 1334 	movw	r3, #4404	; 0x1134
 800233a:	440b      	add	r3, r1
 800233c:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	f241 1304 	movw	r3, #4356	; 0x1104
 8002346:	4413      	add	r3, r2
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6811      	ldr	r1, [r2, #0]
 800234e:	f023 0201 	bic.w	r2, r3, #1
 8002352:	f241 1304 	movw	r3, #4356	; 0x1104
 8002356:	440b      	add	r3, r1
 8002358:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002362:	4413      	add	r3, r2
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6811      	ldr	r1, [r2, #0]
 800236a:	f023 0201 	bic.w	r2, r3, #1
 800236e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002372:	440b      	add	r3, r1
 8002374:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0202 	bic.w	r2, r2, #2
 80023a8:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80023aa:	2300      	movs	r3, #0
 80023ac:	60fb      	str	r3, [r7, #12]
 80023ae:	e00f      	b.n	80023d0 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3310      	adds	r3, #16
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3301      	adds	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d9ec      	bls.n	80023b0 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2210      	movs	r2, #16
 80023e0:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2210      	movs	r2, #16
 80023e6:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	e000      	b.n	80023ee <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
  }
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	ffff2fbe 	.word	0xffff2fbe

08002400 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	60b9      	str	r1, [r7, #8]
 800240a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d107      	bne.n	8002422 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e073      	b.n	800250a <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002426:	2b10      	cmp	r3, #16
 8002428:	d16e      	bne.n	8002508 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800242a:	2200      	movs	r2, #0
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f001 f9fa 	bl	8003828 <ETH_Prepare_Tx_Descriptors>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800243e:	f043 0202 	orr.w	r2, r3, #2
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e05f      	b.n	800250a <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3206      	adds	r2, #6
 8002452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002456:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002466:	2b03      	cmp	r3, #3
 8002468:	d904      	bls.n	8002474 <HAL_ETH_Transmit+0x74>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246e:	1f1a      	subs	r2, r3, #4
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	68fa      	ldr	r2, [r7, #12]
 800247e:	3106      	adds	r1, #6
 8002480:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8002484:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002488:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 800248a:	f7ff fc17 	bl	8001cbc <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002490:	e034      	b.n	80024fc <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d011      	beq.n	80024c8 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a8:	f043 0208 	orr.w	r2, r3, #8
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	22e0      	movs	r2, #224	; 0xe0
 80024c2:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e020      	b.n	800250a <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024ce:	d015      	beq.n	80024fc <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80024d0:	f7ff fbf4 	bl	8001cbc <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d302      	bcc.n	80024e6 <HAL_ETH_Transmit+0xe6>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10a      	bne.n	80024fc <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024ea:	f043 0204 	orr.w	r2, r3, #4
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	22e0      	movs	r2, #224	; 0xe0
 80024f6:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e006      	b.n	800250a <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	dbc6      	blt.n	8002492 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002504:	2300      	movs	r3, #0
 8002506:	e000      	b.n	800250a <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
  }
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002512:	b480      	push	{r7}
 8002514:	b089      	sub	sp, #36	; 0x24
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3344      	adds	r3, #68	; 0x44
 800251e:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800252e:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d06b      	beq.n	800261c <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002544:	2300      	movs	r3, #0
 8002546:	e0ce      	b.n	80026e6 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3301      	adds	r3, #1
 800254c:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d036      	beq.n	80025c8 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	3301      	adds	r3, #1
 800255e:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d101      	bne.n	800256a <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3301      	adds	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	2b03      	cmp	r3, #3
 8002574:	d902      	bls.n	800257c <HAL_ETH_IsRxDataAvailable+0x6a>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b04      	subs	r3, #4
 800257a:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	db11      	blt.n	80025b2 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00b      	beq.n	80025b2 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2201      	movs	r2, #1
 800259e:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	3301      	adds	r3, #1
 80025a4:	61fb      	str	r3, [r7, #28]
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d902      	bls.n	80025b2 <HAL_ETH_IsRxDataAvailable+0xa0>
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	3b04      	subs	r3, #4
 80025b0:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e08e      	b.n	80026e6 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d012      	beq.n	80025fa <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80025d8:	2301      	movs	r3, #1
 80025da:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	3301      	adds	r3, #1
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d902      	bls.n	80025ee <HAL_ETH_IsRxDataAvailable+0xdc>
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	3b04      	subs	r3, #4
 80025ec:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025f6:	61bb      	str	r3, [r7, #24]
 80025f8:	e010      	b.n	800261c <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	3301      	adds	r3, #1
 80025fe:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	3301      	adds	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	2b03      	cmp	r3, #3
 800260a:	d902      	bls.n	8002612 <HAL_ETH_IsRxDataAvailable+0x100>
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	3b04      	subs	r3, #4
 8002610:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	69fa      	ldr	r2, [r7, #28]
 8002616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261a:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db02      	blt.n	800262a <HAL_ETH_IsRxDataAvailable+0x118>
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	2b03      	cmp	r3, #3
 8002628:	d98e      	bls.n	8002548 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d056      	beq.n	80026de <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	e03b      	b.n	80026c8 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	691a      	ldr	r2, [r3, #16]
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800265e:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d005      	beq.n	800269c <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	3b01      	subs	r3, #1
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d20d      	bcs.n	80026c2 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3301      	adds	r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d902      	bls.n	80026b8 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b04      	subs	r3, #4
 80026b6:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026c0:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3301      	adds	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	697a      	ldr	r2, [r7, #20]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d3bf      	bcc.n	8002650 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	f241 1328 	movw	r3, #4392	; 0x1128
 80026da:	440b      	add	r3, r1
 80026dc:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2200      	movs	r2, #0
 80026e2:	619a      	str	r2, [r3, #24]

  return 0;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3724      	adds	r7, #36	; 0x24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b08a      	sub	sp, #40	; 0x28
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3344      	adds	r3, #68	; 0x44
 8002700:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8002708:	2300      	movs	r3, #0
 800270a:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002714:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d104      	bne.n	800272a <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e07d      	b.n	8002826 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10f      	bne.n	8002752 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff feed 	bl	8002512 <HAL_ETH_IsRxDataAvailable>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e071      	b.n	8002826 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002750:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002752:	2300      	movs	r3, #0
 8002754:	623b      	str	r3, [r7, #32]
 8002756:	e031      	b.n	80027bc <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	461a      	mov	r2, r3
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	695a      	ldr	r2, [r3, #20]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	461a      	mov	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695a      	ldr	r2, [r3, #20]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002792:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	3301      	adds	r3, #1
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	2b03      	cmp	r3, #3
 800279e:	d902      	bls.n	80027a6 <HAL_ETH_GetRxDataBuffer+0xb4>
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	3b04      	subs	r3, #4
 80027a4:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	3301      	adds	r3, #1
 80027ba:	623b      	str	r3, [r7, #32]
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	3b01      	subs	r3, #1
 80027c2:	6a3a      	ldr	r2, [r7, #32]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d3c7      	bcc.n	8002758 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	461a      	mov	r2, r3
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d803      	bhi.n	80027f2 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	e018      	b.n	8002824 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d012      	beq.n	8002820 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695a      	ldr	r2, [r3, #20]
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	461a      	mov	r2, r3
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	1ad2      	subs	r2, r2, r3
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	e001      	b.n	8002824 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	e000      	b.n	8002826 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3728      	adds	r7, #40	; 0x28
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
 8002836:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3344      	adds	r3, #68	; 0x44
 800283c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d107      	bne.n	800285c <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fe60 	bl	8002512 <HAL_ETH_IsRxDataAvailable>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e017      	b.n	800288c <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	699a      	ldr	r2, [r3, #24]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	4413      	add	r3, r2
 8002864:	3b01      	subs	r3, #1
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d902      	bls.n	8002874 <HAL_ETH_GetRxDataLength+0x46>
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	3b04      	subs	r3, #4
 8002872:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800287c:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	; 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3344      	adds	r3, #68	; 0x44
 80028a0:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	69fa      	ldr	r2, [r7, #28]
 80028ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028b0:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	699b      	ldr	r3, [r3, #24]
 80028b6:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e057      	b.n	8002974 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	69db      	ldr	r3, [r3, #28]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3301      	adds	r3, #1
 80028d0:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
 80028d6:	e03b      	b.n	8002950 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028e6:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d009      	beq.n	8002904 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	3b01      	subs	r3, #1
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	429a      	cmp	r2, r3
 800292c:	d20d      	bcs.n	800294a <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	3301      	adds	r3, #1
 8002932:	61fb      	str	r3, [r7, #28]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	2b03      	cmp	r3, #3
 8002938:	d902      	bls.n	8002940 <HAL_ETH_BuildRxDescriptors+0xac>
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	3b04      	subs	r3, #4
 800293e:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002948:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	3301      	adds	r3, #1
 800294e:	613b      	str	r3, [r7, #16]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	429a      	cmp	r2, r3
 8002956:	d3bf      	bcc.n	80028d8 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6819      	ldr	r1, [r3, #0]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	f241 1328 	movw	r3, #4392	; 0x1128
 8002962:	440b      	add	r3, r1
 8002964:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3724      	adds	r7, #36	; 0x24
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002996:	2b40      	cmp	r3, #64	; 0x40
 8002998:	d113      	bne.n	80029c2 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	f241 1334 	movw	r3, #4404	; 0x1134
 80029a2:	4413      	add	r3, r2
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	d109      	bne.n	80029c2 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe f87e 	bl	8000ab0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80029bc:	f248 0240 	movw	r2, #32832	; 0x8040
 80029c0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d113      	bne.n	80029fc <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	f241 1334 	movw	r3, #4404	; 0x1134
 80029dc:	4413      	add	r3, r2
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d109      	bne.n	80029fc <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f8b7 	bl	8002b5c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80029f6:	f248 0201 	movw	r2, #32769	; 0x8001
 80029fa:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a0e:	d149      	bne.n	8002aa4 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	f241 1334 	movw	r3, #4404	; 0x1134
 8002a18:	4413      	add	r3, r2
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a24:	d13e      	bne.n	8002aa4 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a2a:	f043 0208 	orr.w	r2, r3, #8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a44:	d11b      	bne.n	8002a7e <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	f241 1302 	movw	r3, #4354	; 0x1102
 8002a54:	4013      	ands	r3, r2
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002a62:	4413      	add	r3, r2
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6811      	ldr	r1, [r2, #0]
 8002a6a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a6e:	f241 1334 	movw	r3, #4404	; 0x1134
 8002a72:	440b      	add	r3, r1
 8002a74:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	22e0      	movs	r2, #224	; 0xe0
 8002a7a:	66da      	str	r2, [r3, #108]	; 0x6c
 8002a7c:	e00f      	b.n	8002a9e <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002a98:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8002a9c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f866 	bl	8002b70 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002aac:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002ab0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002ab4:	d10e      	bne.n	8002ad4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	22e0      	movs	r2, #224	; 0xe0
 8002ac6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 f85b 	bl	8002b84 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b10      	cmp	r3, #16
 8002ae2:	d10f      	bne.n	8002b04 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002aec:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f84e 	bl	8002b98 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d10f      	bne.n	8002b34 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002b1c:	f003 020f 	and.w	r2, r3, #15
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f840 	bl	8002bac <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_ETH_IRQHandler+0x1d8>)
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d006      	beq.n	8002b4e <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <HAL_ETH_IRQHandler+0x1d8>)
 8002b42:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b46:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f000 f839 	bl	8002bc0 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	58000080 	.word	0x58000080

08002b5c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
 8002be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e03e      	b.n	8002c74 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002bfe:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	055b      	lsls	r3, r3, #21
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	041b      	lsls	r3, r3, #16
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f043 030c 	orr.w	r3, r3, #12
 8002c22:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002c36:	f7ff f841 	bl	8001cbc <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002c3c:	e009      	b.n	8002c52 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002c3e:	f7ff f83d 	bl	8001cbc <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c4c:	d901      	bls.n	8002c52 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e010      	b.n	8002c74 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ed      	bne.n	8002c3e <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3718      	adds	r7, #24
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	60f8      	str	r0, [r7, #12]
 8002c84:	60b9      	str	r1, [r7, #8]
 8002c86:	607a      	str	r2, [r7, #4]
 8002c88:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e03c      	b.n	8002d18 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ca6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	055b      	lsls	r3, r3, #21
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	041b      	lsls	r3, r3, #16
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f023 030c 	bic.w	r3, r3, #12
 8002cca:	f043 0304 	orr.w	r3, r3, #4
 8002cce:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	4b10      	ldr	r3, [pc, #64]	; (8002d20 <HAL_ETH_WritePHYRegister+0xa4>)
 8002cde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002ce2:	4a0f      	ldr	r2, [pc, #60]	; (8002d20 <HAL_ETH_WritePHYRegister+0xa4>)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002cea:	f7fe ffe7 	bl	8001cbc <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002cf0:	e009      	b.n	8002d06 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002cf2:	f7fe ffe3 	bl	8001cbc <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d00:	d901      	bls.n	8002d06 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e008      	b.n	8002d18 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d1ed      	bne.n	8002cf2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3718      	adds	r7, #24
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40028000 	.word	0x40028000

08002d24 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e1c3      	b.n	80030c0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 020c 	and.w	r2, r3, #12
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0310 	and.w	r3, r3, #16
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	bf14      	ite	ne
 8002d9a:	2301      	movne	r3, #1
 8002d9c:	2300      	moveq	r3, #0
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	461a      	mov	r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	bf14      	ite	ne
 8002dce:	2301      	movne	r3, #1
 8002dd0:	2300      	moveq	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	bf14      	ite	ne
 8002de8:	2301      	movne	r3, #1
 8002dea:	2300      	moveq	r3, #0
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bf14      	ite	ne
 8002e1e:	2301      	movne	r3, #1
 8002e20:	2300      	moveq	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf0c      	ite	eq
 8002e52:	2301      	moveq	r3, #1
 8002e54:	2300      	movne	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	bf14      	ite	ne
 8002e6c:	2301      	movne	r3, #1
 8002e6e:	2300      	moveq	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	bf14      	ite	ne
 8002e86:	2301      	movne	r3, #1
 8002e88:	2300      	moveq	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf14      	ite	ne
 8002ea0:	2301      	movne	r3, #1
 8002ea2:	2300      	moveq	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	bf14      	ite	ne
 8002eba:	2301      	movne	r3, #1
 8002ebc:	2300      	moveq	r3, #0
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf14      	ite	ne
 8002ee2:	2301      	movne	r3, #1
 8002ee4:	2300      	moveq	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	461a      	mov	r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf0c      	ite	eq
 8002f18:	2301      	moveq	r3, #1
 8002f1a:	2300      	movne	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	461a      	mov	r2, r3
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	bf14      	ite	ne
 8002f50:	2301      	movne	r3, #1
 8002f52:	2300      	moveq	r3, #0
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	461a      	mov	r2, r3
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	0e5b      	lsrs	r3, r3, #25
 8002f82:	f003 021f 	and.w	r2, r3, #31
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f003 020f 	and.w	r2, r3, #15
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf14      	ite	ne
 8002fc2:	2301      	movne	r3, #1
 8002fc4:	2300      	moveq	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	b29a      	uxth	r2, r3
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	bf14      	ite	ne
 8003018:	2301      	movne	r3, #1
 800301a:	2300      	moveq	r3, #0
 800301c:	b2db      	uxtb	r3, r3
 800301e:	461a      	mov	r2, r3
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	bf14      	ite	ne
 8003036:	2301      	movne	r3, #1
 8003038:	2300      	moveq	r3, #0
 800303a:	b2db      	uxtb	r3, r3
 800303c:	461a      	mov	r2, r3
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800304c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800305c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800306c:	f003 0308 	and.w	r3, r3, #8
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf14      	ite	ne
 8003074:	2301      	movne	r3, #1
 8003076:	2300      	moveq	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e00a      	b.n	80030f6 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e4:	2b10      	cmp	r3, #16
 80030e6:	d105      	bne.n	80030f4 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80030e8:	6839      	ldr	r1, [r7, #0]
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f860 	bl	80031b0 <ETH_SetMACConfig>

    return HAL_OK;
 80030f0:	2300      	movs	r3, #0
 80030f2:	e000      	b.n	80030f6 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
  }
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
	...

08003100 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003110:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003118:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800311a:	f001 ff47 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 800311e:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	4a1e      	ldr	r2, [pc, #120]	; (800319c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d908      	bls.n	800313a <HAL_ETH_SetMDIOClockRange+0x3a>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4a1d      	ldr	r2, [pc, #116]	; (80031a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d804      	bhi.n	800313a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e027      	b.n	800318a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d908      	bls.n	8003154 <HAL_ETH_SetMDIOClockRange+0x54>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d204      	bcs.n	8003154 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	e01a      	b.n	800318a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4a13      	ldr	r2, [pc, #76]	; (80031a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d303      	bcc.n	8003164 <HAL_ETH_SetMDIOClockRange+0x64>
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d911      	bls.n	8003188 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4a10      	ldr	r2, [pc, #64]	; (80031a8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d908      	bls.n	800317e <HAL_ETH_SetMDIOClockRange+0x7e>
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	4a0f      	ldr	r2, [pc, #60]	; (80031ac <HAL_ETH_SetMDIOClockRange+0xac>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d804      	bhi.n	800317e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	e005      	b.n	800318a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	e000      	b.n	800318a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003188:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003194:	bf00      	nop
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	01312cff 	.word	0x01312cff
 80031a0:	02160ebf 	.word	0x02160ebf
 80031a4:	03938700 	.word	0x03938700
 80031a8:	05f5e0ff 	.word	0x05f5e0ff
 80031ac:	08f0d17f 	.word	0x08f0d17f

080031b0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80031c2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	791b      	ldrb	r3, [r3, #4]
 80031c8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80031ca:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	7b1b      	ldrb	r3, [r3, #12]
 80031d0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80031d2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	7b5b      	ldrb	r3, [r3, #13]
 80031d8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80031da:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	7b9b      	ldrb	r3, [r3, #14]
 80031e0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80031e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	7bdb      	ldrb	r3, [r3, #15]
 80031e8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80031ea:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	7c12      	ldrb	r2, [r2, #16]
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	d102      	bne.n	80031fa <ETH_SetMACConfig+0x4a>
 80031f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80031f8:	e000      	b.n	80031fc <ETH_SetMACConfig+0x4c>
 80031fa:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80031fc:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	7c52      	ldrb	r2, [r2, #17]
 8003202:	2a00      	cmp	r2, #0
 8003204:	d102      	bne.n	800320c <ETH_SetMACConfig+0x5c>
 8003206:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800320a:	e000      	b.n	800320e <ETH_SetMACConfig+0x5e>
 800320c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800320e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	7c9b      	ldrb	r3, [r3, #18]
 8003214:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003216:	431a      	orrs	r2, r3
                                macconf->Speed |
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800321c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003222:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	7f1b      	ldrb	r3, [r3, #28]
 8003228:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800322a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	7f5b      	ldrb	r3, [r3, #29]
 8003230:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003232:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	7f92      	ldrb	r2, [r2, #30]
 8003238:	2a00      	cmp	r2, #0
 800323a:	d102      	bne.n	8003242 <ETH_SetMACConfig+0x92>
 800323c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003240:	e000      	b.n	8003244 <ETH_SetMACConfig+0x94>
 8003242:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003244:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	7fdb      	ldrb	r3, [r3, #31]
 800324a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800324c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003254:	2a00      	cmp	r2, #0
 8003256:	d102      	bne.n	800325e <ETH_SetMACConfig+0xae>
 8003258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800325c:	e000      	b.n	8003260 <ETH_SetMACConfig+0xb0>
 800325e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8003260:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003266:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800326e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8003270:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8003276:	4313      	orrs	r3, r2
 8003278:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	4b56      	ldr	r3, [pc, #344]	; (80033dc <ETH_SetMACConfig+0x22c>)
 8003282:	4013      	ands	r3, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	68f9      	ldr	r1, [r7, #12]
 800328a:	430b      	orrs	r3, r1
 800328c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003292:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800329a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800329c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80032a6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032ae:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80032b0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80032b2:	683a      	ldr	r2, [r7, #0]
 80032b4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80032b8:	2a00      	cmp	r2, #0
 80032ba:	d102      	bne.n	80032c2 <ETH_SetMACConfig+0x112>
 80032bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80032c0:	e000      	b.n	80032c4 <ETH_SetMACConfig+0x114>
 80032c2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80032c4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	4b42      	ldr	r3, [pc, #264]	; (80033e0 <ETH_SetMACConfig+0x230>)
 80032d6:	4013      	ands	r3, r2
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6812      	ldr	r2, [r2, #0]
 80032dc:	68f9      	ldr	r1, [r7, #12]
 80032de:	430b      	orrs	r3, r1
 80032e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80032ee:	4313      	orrs	r3, r2
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	4b3a      	ldr	r3, [pc, #232]	; (80033e4 <ETH_SetMACConfig+0x234>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	68f9      	ldr	r1, [r7, #12]
 8003302:	430b      	orrs	r3, r1
 8003304:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800330c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003312:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800331a:	2a00      	cmp	r2, #0
 800331c:	d101      	bne.n	8003322 <ETH_SetMACConfig+0x172>
 800331e:	2280      	movs	r2, #128	; 0x80
 8003320:	e000      	b.n	8003324 <ETH_SetMACConfig+0x174>
 8003322:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003324:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800332c:	4313      	orrs	r3, r2
 800332e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003336:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800333a:	4013      	ands	r3, r2
 800333c:	687a      	ldr	r2, [r7, #4]
 800333e:	6812      	ldr	r2, [r2, #0]
 8003340:	68f9      	ldr	r1, [r7, #12]
 8003342:	430b      	orrs	r3, r1
 8003344:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800334c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003354:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003356:	4313      	orrs	r3, r2
 8003358:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003362:	f023 0103 	bic.w	r1, r3, #3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	430a      	orrs	r2, r1
 800336e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800337a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8003396:	2a00      	cmp	r2, #0
 8003398:	d101      	bne.n	800339e <ETH_SetMACConfig+0x1ee>
 800339a:	2240      	movs	r2, #64	; 0x40
 800339c:	e000      	b.n	80033a0 <ETH_SetMACConfig+0x1f0>
 800339e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80033a0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80033a8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80033aa:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80033b2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80033c0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	00048083 	.word	0x00048083
 80033e0:	c0f88000 	.word	0xc0f88000
 80033e4:	fffffef0 	.word	0xfffffef0

080033e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	4b38      	ldr	r3, [pc, #224]	; (80034e0 <ETH_SetDMAConfig+0xf8>)
 80033fe:	4013      	ands	r3, r2
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	6812      	ldr	r2, [r2, #0]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	6809      	ldr	r1, [r1, #0]
 8003408:	431a      	orrs	r2, r3
 800340a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800340e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	791b      	ldrb	r3, [r3, #4]
 8003414:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800341a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	7b1b      	ldrb	r3, [r3, #12]
 8003420:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	f241 0304 	movw	r3, #4100	; 0x1004
 800342e:	4413      	add	r3, r2
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	4b2c      	ldr	r3, [pc, #176]	; (80034e4 <ETH_SetDMAConfig+0xfc>)
 8003434:	4013      	ands	r3, r2
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	6811      	ldr	r1, [r2, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	431a      	orrs	r2, r3
 800343e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003442:	440b      	add	r3, r1
 8003444:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	7b5b      	ldrb	r3, [r3, #13]
 800344a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003450:	4313      	orrs	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	4b22      	ldr	r3, [pc, #136]	; (80034e8 <ETH_SetDMAConfig+0x100>)
 8003460:	4013      	ands	r3, r2
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6811      	ldr	r1, [r2, #0]
 8003466:	68fa      	ldr	r2, [r7, #12]
 8003468:	431a      	orrs	r2, r3
 800346a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800346e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	7d1b      	ldrb	r3, [r3, #20]
 8003478:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800347a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	7f5b      	ldrb	r3, [r3, #29]
 8003480:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8003482:	4313      	orrs	r3, r2
 8003484:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	f241 1304 	movw	r3, #4356	; 0x1104
 800348e:	4413      	add	r3, r2
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	4b16      	ldr	r3, [pc, #88]	; (80034ec <ETH_SetDMAConfig+0x104>)
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6811      	ldr	r1, [r2, #0]
 800349a:	68fa      	ldr	r2, [r7, #12]
 800349c:	431a      	orrs	r2, r3
 800349e:	f241 1304 	movw	r3, #4356	; 0x1104
 80034a2:	440b      	add	r3, r1
 80034a4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	7f1b      	ldrb	r3, [r3, #28]
 80034aa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80034b0:	4313      	orrs	r3, r2
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	f241 1308 	movw	r3, #4360	; 0x1108
 80034bc:	4413      	add	r3, r2
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <ETH_SetDMAConfig+0x108>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6811      	ldr	r1, [r2, #0]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	431a      	orrs	r2, r3
 80034cc:	f241 1308 	movw	r3, #4360	; 0x1108
 80034d0:	440b      	add	r3, r1
 80034d2:	601a      	str	r2, [r3, #0]
}
 80034d4:	bf00      	nop
 80034d6:	3714      	adds	r7, #20
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	ffff87fd 	.word	0xffff87fd
 80034e4:	ffff2ffe 	.word	0xffff2ffe
 80034e8:	fffec000 	.word	0xfffec000
 80034ec:	ffc0efef 	.word	0xffc0efef
 80034f0:	7fc0ffff 	.word	0x7fc0ffff

080034f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b0a4      	sub	sp, #144	; 0x90
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003502:	2300      	movs	r3, #0
 8003504:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003506:	2300      	movs	r3, #0
 8003508:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800350c:	2300      	movs	r3, #0
 800350e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800351e:	2301      	movs	r3, #1
 8003520:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003524:	2300      	movs	r3, #0
 8003526:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003534:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003536:	2300      	movs	r3, #0
 8003538:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800353c:	2300      	movs	r3, #0
 800353e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003540:	2300      	movs	r3, #0
 8003542:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8003546:	2300      	movs	r3, #0
 8003548:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800354c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003550:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003552:	2300      	movs	r3, #0
 8003554:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8003558:	2300      	movs	r3, #0
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8003562:	2300      	movs	r3, #0
 8003564:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8003568:	2300      	movs	r3, #0
 800356a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800356e:	2300      	movs	r3, #0
 8003570:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8003572:	2300      	movs	r3, #0
 8003574:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8003576:	2300      	movs	r3, #0
 8003578:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800357a:	2300      	movs	r3, #0
 800357c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003580:	2300      	movs	r3, #0
 8003582:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800358c:	2320      	movs	r3, #32
 800358e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8003598:	2300      	movs	r3, #0
 800359a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800359e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80035a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035a8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80035b0:	2302      	movs	r3, #2
 80035b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80035ce:	2300      	movs	r3, #0
 80035d0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80035d2:	2301      	movs	r3, #1
 80035d4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80035d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035dc:	4619      	mov	r1, r3
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fde6 	bl	80031b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80035e4:	2301      	movs	r3, #1
 80035e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80035e8:	2301      	movs	r3, #1
 80035ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80035f6:	2300      	movs	r3, #0
 80035f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80035fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003602:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003604:	2300      	movs	r3, #0
 8003606:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003608:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800360c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800360e:	2300      	movs	r3, #0
 8003610:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003614:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003618:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800361a:	f107 0308 	add.w	r3, r7, #8
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff fee1 	bl	80033e8 <ETH_SetDMAConfig>
}
 8003626:	bf00      	nop
 8003628:	3790      	adds	r7, #144	; 0x90
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003640:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003648:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800364a:	f001 fcaf 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 800364e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	4a1e      	ldr	r2, [pc, #120]	; (80036cc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d908      	bls.n	800366a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4a1d      	ldr	r2, [pc, #116]	; (80036d0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d804      	bhi.n	800366a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e027      	b.n	80036ba <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	4a18      	ldr	r2, [pc, #96]	; (80036d0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d908      	bls.n	8003684 <ETH_MAC_MDIO_ClkConfig+0x54>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4a17      	ldr	r2, [pc, #92]	; (80036d4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d204      	bcs.n	8003684 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e01a      	b.n	80036ba <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	4a13      	ldr	r2, [pc, #76]	; (80036d4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d303      	bcc.n	8003694 <ETH_MAC_MDIO_ClkConfig+0x64>
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d911      	bls.n	80036b8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d908      	bls.n	80036ae <ETH_MAC_MDIO_ClkConfig+0x7e>
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4a0f      	ldr	r2, [pc, #60]	; (80036dc <ETH_MAC_MDIO_ClkConfig+0xac>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d804      	bhi.n	80036ae <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e005      	b.n	80036ba <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	e000      	b.n	80036ba <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80036b8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	01312cff 	.word	0x01312cff
 80036d0:	02160ebf 	.word	0x02160ebf
 80036d4:	03938700 	.word	0x03938700
 80036d8:	05f5e0ff 	.word	0x05f5e0ff
 80036dc:	08f0d17f 	.word	0x08f0d17f

080036e0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b085      	sub	sp, #20
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	e01d      	b.n	800372a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68d9      	ldr	r1, [r3, #12]
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	440b      	add	r3, r1
 80036fe:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2200      	movs	r2, #0
 800370a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2200      	movs	r2, #0
 8003710:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2200      	movs	r2, #0
 8003716:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	3206      	adds	r2, #6
 8003720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	3301      	adds	r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b03      	cmp	r3, #3
 800372e:	d9de      	bls.n	80036ee <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	f241 132c 	movw	r3, #4396	; 0x112c
 800373e:	4413      	add	r3, r2
 8003740:	2203      	movs	r2, #3
 8003742:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68d9      	ldr	r1, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	f241 1314 	movw	r3, #4372	; 0x1114
 8003750:	4413      	add	r3, r2
 8003752:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800376e:	b480      	push	{r7}
 8003770:	b085      	sub	sp, #20
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	e024      	b.n	80037c6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6919      	ldr	r1, [r3, #16]
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	4613      	mov	r3, r2
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	4413      	add	r3, r2
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	440b      	add	r3, r1
 800378c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2200      	movs	r2, #0
 8003798:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2200      	movs	r2, #0
 800379e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2200      	movs	r2, #0
 80037a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2200      	movs	r2, #0
 80037aa:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	2200      	movs	r2, #0
 80037b0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	3310      	adds	r3, #16
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3301      	adds	r3, #1
 80037c4:	60fb      	str	r3, [r7, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d9d7      	bls.n	800377c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f241 1330 	movw	r3, #4400	; 0x1130
 80037f2:	4413      	add	r3, r2
 80037f4:	2203      	movs	r2, #3
 80037f6:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6919      	ldr	r1, [r3, #16]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	f241 131c 	movw	r3, #4380	; 0x111c
 8003804:	4413      	add	r3, r2
 8003806:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	f241 1328 	movw	r3, #4392	; 0x1128
 8003818:	4413      	add	r3, r2
 800381a:	6019      	str	r1, [r3, #0]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003828:	b480      	push	{r7}
 800382a:	b08d      	sub	sp, #52	; 0x34
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3318      	adds	r3, #24
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003846:	2300      	movs	r3, #0
 8003848:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800384e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003852:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800385e:	6a3b      	ldr	r3, [r7, #32]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800386a:	d007      	beq.n	800387c <ETH_Prepare_Tx_Descriptors+0x54>
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	3304      	adds	r3, #4
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800387c:	2302      	movs	r3, #2
 800387e:	e24a      	b.n	8003d16 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0304 	and.w	r3, r3, #4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d044      	beq.n	8003916 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800388c:	6a3b      	ldr	r3, [r7, #32]
 800388e:	68da      	ldr	r2, [r3, #12]
 8003890:	4b72      	ldr	r3, [pc, #456]	; (8003a5c <ETH_Prepare_Tx_Descriptors+0x234>)
 8003892:	4013      	ands	r3, r2
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003898:	431a      	orrs	r2, r3
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800389e:	6a3b      	ldr	r3, [r7, #32]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80038b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d027      	beq.n	8003916 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80038c6:	6a3b      	ldr	r3, [r7, #32]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	041b      	lsls	r3, r3, #16
 80038d2:	431a      	orrs	r2, r3
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	431a      	orrs	r2, r3
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003904:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003914:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0310 	and.w	r3, r3, #16
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00e      	beq.n	8003940 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	4b4e      	ldr	r3, [pc, #312]	; (8003a60 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003928:	4013      	ands	r3, r2
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	6992      	ldr	r2, [r2, #24]
 800392e:	431a      	orrs	r2, r3
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d105      	bne.n	8003958 <ETH_Prepare_Tx_Descriptors+0x130>
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	d030      	beq.n	80039ba <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800396c:	6a3b      	ldr	r3, [r7, #32]
 800396e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003972:	3301      	adds	r3, #1
 8003974:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003978:	2b03      	cmp	r3, #3
 800397a:	d902      	bls.n	8003982 <ETH_Prepare_Tx_Descriptors+0x15a>
 800397c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397e:	3b04      	subs	r3, #4
 8003980:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800398a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800398c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398e:	3301      	adds	r3, #1
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800399a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800399e:	d10c      	bne.n	80039ba <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039a8:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80039b6:	2302      	movs	r3, #2
 80039b8:	e1ad      	b.n	8003d16 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	3301      	adds	r3, #1
 80039be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	6a3b      	ldr	r3, [r7, #32]
 80039c8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	4b24      	ldr	r3, [pc, #144]	; (8003a60 <ETH_Prepare_Tx_Descriptors+0x238>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	69fa      	ldr	r2, [r7, #28]
 80039d4:	6852      	ldr	r2, [r2, #4]
 80039d6:	431a      	orrs	r2, r3
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d012      	beq.n	8003a0a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	4b1a      	ldr	r3, [pc, #104]	; (8003a64 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	6852      	ldr	r2, [r2, #4]
 8003a00:	0412      	lsls	r2, r2, #16
 8003a02:	431a      	orrs	r2, r3
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	609a      	str	r2, [r3, #8]
 8003a08:	e008      	b.n	8003a1c <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	4b13      	ldr	r3, [pc, #76]	; (8003a64 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	6a3a      	ldr	r2, [r7, #32]
 8003a1a:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d021      	beq.n	8003a6c <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	04db      	lsls	r3, r3, #19
 8003a36:	431a      	orrs	r2, r3
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	68da      	ldr	r2, [r3, #12]
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <ETH_Prepare_Tx_Descriptors+0x240>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	68ba      	ldr	r2, [r7, #8]
 8003a46:	69d2      	ldr	r2, [r2, #28]
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	6a3b      	ldr	r3, [r7, #32]
 8003a4c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	60da      	str	r2, [r3, #12]
 8003a5a:	e02e      	b.n	8003aba <ETH_Prepare_Tx_Descriptors+0x292>
 8003a5c:	ffff0000 	.word	0xffff0000
 8003a60:	ffffc000 	.word	0xffffc000
 8003a64:	c000ffff 	.word	0xc000ffff
 8003a68:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	4b93      	ldr	r3, [pc, #588]	; (8003cc0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003a72:	4013      	ands	r3, r2
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	6852      	ldr	r2, [r2, #4]
 8003a78:	431a      	orrs	r2, r3
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	695b      	ldr	r3, [r3, #20]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003aa8:	6a3b      	ldr	r3, [r7, #32]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0304 	and.w	r3, r3, #4
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d008      	beq.n	8003ad8 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003ae4:	6a3b      	ldr	r3, [r7, #32]
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80cb 	beq.w	8003ca0 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003b1c:	e0c0      	b.n	8003ca0 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b26:	6a3b      	ldr	r3, [r7, #32]
 8003b28:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d902      	bls.n	8003b3c <ETH_Prepare_Tx_Descriptors+0x314>
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	3b04      	subs	r3, #4
 8003b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b44:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b4e:	6a3b      	ldr	r3, [r7, #32]
 8003b50:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003b52:	6a3b      	ldr	r3, [r7, #32]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b5e:	d007      	beq.n	8003b70 <ETH_Prepare_Tx_Descriptors+0x348>
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	3304      	adds	r3, #4
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d026      	beq.n	8003bbe <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b7c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
 8003b82:	e016      	b.n	8003bb2 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b8c:	6a3b      	ldr	r3, [r7, #32]
 8003b8e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	3301      	adds	r3, #1
 8003b94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d902      	bls.n	8003ba2 <ETH_Prepare_Tx_Descriptors+0x37a>
 8003b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9e:	3b04      	subs	r3, #4
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003baa:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	3301      	adds	r3, #1
 8003bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d3e4      	bcc.n	8003b84 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e0ab      	b.n	8003d16 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8003bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	4b3a      	ldr	r3, [pc, #232]	; (8003cc4 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	6852      	ldr	r2, [r2, #4]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d012      	beq.n	8003c14 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	689a      	ldr	r2, [r3, #8]
 8003c02:	4b31      	ldr	r3, [pc, #196]	; (8003cc8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	6852      	ldr	r2, [r2, #4]
 8003c0a:	0412      	lsls	r2, r2, #16
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	609a      	str	r2, [r3, #8]
 8003c12:	e008      	b.n	8003c26 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	2200      	movs	r2, #0
 8003c18:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	6a3a      	ldr	r2, [r7, #32]
 8003c24:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00f      	beq.n	8003c52 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	68da      	ldr	r2, [r3, #12]
 8003c36:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	68ba      	ldr	r2, [r7, #8]
 8003c3c:	69d2      	ldr	r2, [r2, #28]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003c44:	6a3b      	ldr	r3, [r7, #32]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c4c:	6a3b      	ldr	r3, [r7, #32]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	e017      	b.n	8003c82 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003c52:	6a3b      	ldr	r3, [r7, #32]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	6852      	ldr	r2, [r2, #4]
 8003c5e:	431a      	orrs	r2, r3
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d008      	beq.n	8003c82 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	6a3b      	ldr	r3, [r7, #32]
 8003c80:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	3301      	adds	r3, #1
 8003c86:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f47f af3a 	bne.w	8003b1e <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00f      	beq.n	8003cd0 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	e00e      	b.n	8003cdc <ETH_Prepare_Tx_Descriptors+0x4b4>
 8003cbe:	bf00      	nop
 8003cc0:	ffff8000 	.word	0xffff8000
 8003cc4:	ffffc000 	.word	0xffffc000
 8003cc8:	c000ffff 	.word	0xc000ffff
 8003ccc:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cd8:	6a3b      	ldr	r3, [r7, #32]
 8003cda:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cec:	6979      	ldr	r1, [r7, #20]
 8003cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cfc:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cfe:	b672      	cpsid	i
}
 8003d00:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	4413      	add	r3, r2
 8003d0a:	1c5a      	adds	r2, r3, #1
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003d10:	b662      	cpsie	i
}
 8003d12:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3734      	adds	r7, #52	; 0x34
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	; 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003d32:	4b89      	ldr	r3, [pc, #548]	; (8003f58 <HAL_GPIO_Init+0x234>)
 8003d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003d36:	e194      	b.n	8004062 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	4013      	ands	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8186 	beq.w	800405c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d00b      	beq.n	8003d70 <HAL_GPIO_Init+0x4c>
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d007      	beq.n	8003d70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003d64:	2b11      	cmp	r3, #17
 8003d66:	d003      	beq.n	8003d70 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	2b12      	cmp	r3, #18
 8003d6e:	d130      	bne.n	8003dd2 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003da6:	2201      	movs	r2, #1
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dae:	43db      	mvns	r3, r3
 8003db0:	69ba      	ldr	r2, [r7, #24]
 8003db2:	4013      	ands	r3, r2
 8003db4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	f003 0201 	and.w	r2, r3, #1
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	2203      	movs	r2, #3
 8003dde:	fa02 f303 	lsl.w	r3, r2, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4013      	ands	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d003      	beq.n	8003e12 <HAL_GPIO_Init+0xee>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b12      	cmp	r3, #18
 8003e10:	d123      	bne.n	8003e5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	08da      	lsrs	r2, r3, #3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3208      	adds	r2, #8
 8003e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0307 	and.w	r3, r3, #7
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	220f      	movs	r2, #15
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	691a      	ldr	r2, [r3, #16]
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	08da      	lsrs	r2, r3, #3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3208      	adds	r2, #8
 8003e54:	69b9      	ldr	r1, [r7, #24]
 8003e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	2203      	movs	r2, #3
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 0203 	and.w	r2, r3, #3
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 80e0 	beq.w	800405c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e9c:	4b2f      	ldr	r3, [pc, #188]	; (8003f5c <HAL_GPIO_Init+0x238>)
 8003e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003ea2:	4a2e      	ldr	r2, [pc, #184]	; (8003f5c <HAL_GPIO_Init+0x238>)
 8003ea4:	f043 0302 	orr.w	r3, r3, #2
 8003ea8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <HAL_GPIO_Init+0x238>)
 8003eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	60fb      	str	r3, [r7, #12]
 8003eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eba:	4a29      	ldr	r2, [pc, #164]	; (8003f60 <HAL_GPIO_Init+0x23c>)
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	089b      	lsrs	r3, r3, #2
 8003ec0:	3302      	adds	r3, #2
 8003ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	f003 0303 	and.w	r3, r3, #3
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43db      	mvns	r3, r3
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	4013      	ands	r3, r2
 8003edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a20      	ldr	r2, [pc, #128]	; (8003f64 <HAL_GPIO_Init+0x240>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d052      	beq.n	8003f8c <HAL_GPIO_Init+0x268>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1f      	ldr	r2, [pc, #124]	; (8003f68 <HAL_GPIO_Init+0x244>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d031      	beq.n	8003f52 <HAL_GPIO_Init+0x22e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a1e      	ldr	r2, [pc, #120]	; (8003f6c <HAL_GPIO_Init+0x248>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d02b      	beq.n	8003f4e <HAL_GPIO_Init+0x22a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a1d      	ldr	r2, [pc, #116]	; (8003f70 <HAL_GPIO_Init+0x24c>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d025      	beq.n	8003f4a <HAL_GPIO_Init+0x226>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a1c      	ldr	r2, [pc, #112]	; (8003f74 <HAL_GPIO_Init+0x250>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d01f      	beq.n	8003f46 <HAL_GPIO_Init+0x222>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1b      	ldr	r2, [pc, #108]	; (8003f78 <HAL_GPIO_Init+0x254>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d019      	beq.n	8003f42 <HAL_GPIO_Init+0x21e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1a      	ldr	r2, [pc, #104]	; (8003f7c <HAL_GPIO_Init+0x258>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d013      	beq.n	8003f3e <HAL_GPIO_Init+0x21a>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a19      	ldr	r2, [pc, #100]	; (8003f80 <HAL_GPIO_Init+0x25c>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00d      	beq.n	8003f3a <HAL_GPIO_Init+0x216>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a18      	ldr	r2, [pc, #96]	; (8003f84 <HAL_GPIO_Init+0x260>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <HAL_GPIO_Init+0x212>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a17      	ldr	r2, [pc, #92]	; (8003f88 <HAL_GPIO_Init+0x264>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_GPIO_Init+0x20e>
 8003f2e:	2309      	movs	r3, #9
 8003f30:	e02d      	b.n	8003f8e <HAL_GPIO_Init+0x26a>
 8003f32:	230a      	movs	r3, #10
 8003f34:	e02b      	b.n	8003f8e <HAL_GPIO_Init+0x26a>
 8003f36:	2308      	movs	r3, #8
 8003f38:	e029      	b.n	8003f8e <HAL_GPIO_Init+0x26a>
 8003f3a:	2307      	movs	r3, #7
 8003f3c:	e027      	b.n	8003f8e <HAL_GPIO_Init+0x26a>
 8003f3e:	2306      	movs	r3, #6
 8003f40:	e025      	b.n	8003f8e <HAL_GPIO_Init+0x26a>
 8003f42:	2305      	movs	r3, #5
 8003f44:	e023      	b.n	8003f8e <HAL_GPIO_Init+0x26a>
 8003f46:	2304      	movs	r3, #4
 8003f48:	e021      	b.n	8003f8e <HAL_GPIO_Init+0x26a>
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e01f      	b.n	8003f8e <HAL_GPIO_Init+0x26a>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e01d      	b.n	8003f8e <HAL_GPIO_Init+0x26a>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e01b      	b.n	8003f8e <HAL_GPIO_Init+0x26a>
 8003f56:	bf00      	nop
 8003f58:	58000080 	.word	0x58000080
 8003f5c:	58024400 	.word	0x58024400
 8003f60:	58000400 	.word	0x58000400
 8003f64:	58020000 	.word	0x58020000
 8003f68:	58020400 	.word	0x58020400
 8003f6c:	58020800 	.word	0x58020800
 8003f70:	58020c00 	.word	0x58020c00
 8003f74:	58021000 	.word	0x58021000
 8003f78:	58021400 	.word	0x58021400
 8003f7c:	58021800 	.word	0x58021800
 8003f80:	58021c00 	.word	0x58021c00
 8003f84:	58022000 	.word	0x58022000
 8003f88:	58022400 	.word	0x58022400
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	f002 0203 	and.w	r2, r2, #3
 8003f94:	0092      	lsls	r2, r2, #2
 8003f96:	4093      	lsls	r3, r2
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f9e:	4938      	ldr	r1, [pc, #224]	; (8004080 <HAL_GPIO_Init+0x35c>)
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	089b      	lsrs	r3, r3, #2
 8003fa4:	3302      	adds	r3, #2
 8003fa6:	69ba      	ldr	r2, [r7, #24]
 8003fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d003      	beq.n	8003fd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	43db      	mvns	r3, r3
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d003      	beq.n	8003ffa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	43db      	mvns	r3, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4013      	ands	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004026:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800402e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 800404c:	69ba      	ldr	r2, [r7, #24]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	3301      	adds	r3, #1
 8004060:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	fa22 f303 	lsr.w	r3, r2, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	f47f ae63 	bne.w	8003d38 <HAL_GPIO_Init+0x14>
  }
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	3724      	adds	r7, #36	; 0x24
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	58000400 	.word	0x58000400

08004084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	807b      	strh	r3, [r7, #2]
 8004090:	4613      	mov	r3, r2
 8004092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004094:	787b      	ldrb	r3, [r7, #1]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800409a:	887a      	ldrh	r2, [r7, #2]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80040a0:	e003      	b.n	80040aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80040a2:	887b      	ldrh	r3, [r7, #2]
 80040a4:	041a      	lsls	r2, r3, #16
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	619a      	str	r2, [r3, #24]
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
	...

080040b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <HAL_PWREx_ConfigSupply+0x70>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0304 	and.w	r3, r3, #4
 80040c8:	2b04      	cmp	r3, #4
 80040ca:	d00a      	beq.n	80040e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80040cc:	4b16      	ldr	r3, [pc, #88]	; (8004128 <HAL_PWREx_ConfigSupply+0x70>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d001      	beq.n	80040de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e01f      	b.n	800411e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	e01d      	b.n	800411e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80040e2:	4b11      	ldr	r3, [pc, #68]	; (8004128 <HAL_PWREx_ConfigSupply+0x70>)
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	f023 0207 	bic.w	r2, r3, #7
 80040ea:	490f      	ldr	r1, [pc, #60]	; (8004128 <HAL_PWREx_ConfigSupply+0x70>)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80040f2:	f7fd fde3 	bl	8001cbc <HAL_GetTick>
 80040f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80040f8:	e009      	b.n	800410e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80040fa:	f7fd fddf 	bl	8001cbc <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004108:	d901      	bls.n	800410e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e007      	b.n	800411e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800410e:	4b06      	ldr	r3, [pc, #24]	; (8004128 <HAL_PWREx_ConfigSupply+0x70>)
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800411a:	d1ee      	bne.n	80040fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	58024800 	.word	0x58024800

0800412c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08c      	sub	sp, #48	; 0x30
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e3ff      	b.n	800493e <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 8087 	beq.w	800425a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800414c:	4b99      	ldr	r3, [pc, #612]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004156:	4b97      	ldr	r3, [pc, #604]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800415e:	2b10      	cmp	r3, #16
 8004160:	d007      	beq.n	8004172 <HAL_RCC_OscConfig+0x46>
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	2b18      	cmp	r3, #24
 8004166:	d110      	bne.n	800418a <HAL_RCC_OscConfig+0x5e>
 8004168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d10b      	bne.n	800418a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004172:	4b90      	ldr	r3, [pc, #576]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d06c      	beq.n	8004258 <HAL_RCC_OscConfig+0x12c>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d168      	bne.n	8004258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e3d9      	b.n	800493e <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004192:	d106      	bne.n	80041a2 <HAL_RCC_OscConfig+0x76>
 8004194:	4b87      	ldr	r3, [pc, #540]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a86      	ldr	r2, [pc, #536]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800419a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419e:	6013      	str	r3, [r2, #0]
 80041a0:	e02e      	b.n	8004200 <HAL_RCC_OscConfig+0xd4>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCC_OscConfig+0x98>
 80041aa:	4b82      	ldr	r3, [pc, #520]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a81      	ldr	r2, [pc, #516]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	4b7f      	ldr	r3, [pc, #508]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a7e      	ldr	r2, [pc, #504]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041c0:	6013      	str	r3, [r2, #0]
 80041c2:	e01d      	b.n	8004200 <HAL_RCC_OscConfig+0xd4>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041cc:	d10c      	bne.n	80041e8 <HAL_RCC_OscConfig+0xbc>
 80041ce:	4b79      	ldr	r3, [pc, #484]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a78      	ldr	r2, [pc, #480]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	4b76      	ldr	r3, [pc, #472]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a75      	ldr	r2, [pc, #468]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e4:	6013      	str	r3, [r2, #0]
 80041e6:	e00b      	b.n	8004200 <HAL_RCC_OscConfig+0xd4>
 80041e8:	4b72      	ldr	r3, [pc, #456]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a71      	ldr	r2, [pc, #452]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041f2:	6013      	str	r3, [r2, #0]
 80041f4:	4b6f      	ldr	r3, [pc, #444]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a6e      	ldr	r2, [pc, #440]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80041fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d013      	beq.n	8004230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fd fd58 	bl	8001cbc <HAL_GetTick>
 800420c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004210:	f7fd fd54 	bl	8001cbc <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b64      	cmp	r3, #100	; 0x64
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e38d      	b.n	800493e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004222:	4b64      	ldr	r3, [pc, #400]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0xe4>
 800422e:	e014      	b.n	800425a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7fd fd44 	bl	8001cbc <HAL_GetTick>
 8004234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004238:	f7fd fd40 	bl	8001cbc <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e379      	b.n	800493e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800424a:	4b5a      	ldr	r3, [pc, #360]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x10c>
 8004256:	e000      	b.n	800425a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 80ae 	beq.w	80043c4 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004268:	4b52      	ldr	r3, [pc, #328]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004270:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004272:	4b50      	ldr	r3, [pc, #320]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004276:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <HAL_RCC_OscConfig+0x162>
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	2b18      	cmp	r3, #24
 8004282:	d13a      	bne.n	80042fa <HAL_RCC_OscConfig+0x1ce>
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0303 	and.w	r3, r3, #3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d135      	bne.n	80042fa <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800428e:	4b49      	ldr	r3, [pc, #292]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0304 	and.w	r3, r3, #4
 8004296:	2b00      	cmp	r3, #0
 8004298:	d005      	beq.n	80042a6 <HAL_RCC_OscConfig+0x17a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e34b      	b.n	800493e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042a6:	f7fd fd15 	bl	8001cd4 <HAL_GetREVID>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d817      	bhi.n	80042e4 <HAL_RCC_OscConfig+0x1b8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	691b      	ldr	r3, [r3, #16]
 80042b8:	2b40      	cmp	r3, #64	; 0x40
 80042ba:	d108      	bne.n	80042ce <HAL_RCC_OscConfig+0x1a2>
 80042bc:	4b3d      	ldr	r3, [pc, #244]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80042c4:	4a3b      	ldr	r2, [pc, #236]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80042c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042ca:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042cc:	e07a      	b.n	80043c4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ce:	4b39      	ldr	r3, [pc, #228]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	031b      	lsls	r3, r3, #12
 80042dc:	4935      	ldr	r1, [pc, #212]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042e2:	e06f      	b.n	80043c4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e4:	4b33      	ldr	r3, [pc, #204]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	061b      	lsls	r3, r3, #24
 80042f2:	4930      	ldr	r1, [pc, #192]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 80042f4:	4313      	orrs	r3, r2
 80042f6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042f8:	e064      	b.n	80043c4 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d045      	beq.n	800438e <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004302:	4b2c      	ldr	r3, [pc, #176]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f023 0219 	bic.w	r2, r3, #25
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	4929      	ldr	r1, [pc, #164]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fd fcd2 	bl	8001cbc <HAL_GetTick>
 8004318:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431c:	f7fd fcce 	bl	8001cbc <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e307      	b.n	800493e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800432e:	4b21      	ldr	r3, [pc, #132]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0304 	and.w	r3, r3, #4
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433a:	f7fd fccb 	bl	8001cd4 <HAL_GetREVID>
 800433e:	4603      	mov	r3, r0
 8004340:	f241 0203 	movw	r2, #4099	; 0x1003
 8004344:	4293      	cmp	r3, r2
 8004346:	d817      	bhi.n	8004378 <HAL_RCC_OscConfig+0x24c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d108      	bne.n	8004362 <HAL_RCC_OscConfig+0x236>
 8004350:	4b18      	ldr	r3, [pc, #96]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004358:	4a16      	ldr	r2, [pc, #88]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800435a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800435e:	6053      	str	r3, [r2, #4]
 8004360:	e030      	b.n	80043c4 <HAL_RCC_OscConfig+0x298>
 8004362:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	031b      	lsls	r3, r3, #12
 8004370:	4910      	ldr	r1, [pc, #64]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004372:	4313      	orrs	r3, r2
 8004374:	604b      	str	r3, [r1, #4]
 8004376:	e025      	b.n	80043c4 <HAL_RCC_OscConfig+0x298>
 8004378:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	691b      	ldr	r3, [r3, #16]
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	490b      	ldr	r1, [pc, #44]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004388:	4313      	orrs	r3, r2
 800438a:	604b      	str	r3, [r1, #4]
 800438c:	e01a      	b.n	80043c4 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800438e:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <HAL_RCC_OscConfig+0x288>)
 8004394:	f023 0301 	bic.w	r3, r3, #1
 8004398:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439a:	f7fd fc8f 	bl	8001cbc <HAL_GetTick>
 800439e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043a0:	e00a      	b.n	80043b8 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043a2:	f7fd fc8b 	bl	8001cbc <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d903      	bls.n	80043b8 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e2c4      	b.n	800493e <HAL_RCC_OscConfig+0x812>
 80043b4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043b8:	4ba4      	ldr	r3, [pc, #656]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0304 	and.w	r3, r3, #4
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ee      	bne.n	80043a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a9 	beq.w	8004524 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d2:	4b9e      	ldr	r3, [pc, #632]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043da:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043dc:	4b9b      	ldr	r3, [pc, #620]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d007      	beq.n	80043f8 <HAL_RCC_OscConfig+0x2cc>
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	2b18      	cmp	r3, #24
 80043ec:	d13a      	bne.n	8004464 <HAL_RCC_OscConfig+0x338>
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d135      	bne.n	8004464 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043f8:	4b94      	ldr	r3, [pc, #592]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_RCC_OscConfig+0x2e4>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	2b80      	cmp	r3, #128	; 0x80
 800440a:	d001      	beq.n	8004410 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e296      	b.n	800493e <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004410:	f7fd fc60 	bl	8001cd4 <HAL_GetREVID>
 8004414:	4603      	mov	r3, r0
 8004416:	f241 0203 	movw	r2, #4099	; 0x1003
 800441a:	4293      	cmp	r3, r2
 800441c:	d817      	bhi.n	800444e <HAL_RCC_OscConfig+0x322>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	2b20      	cmp	r3, #32
 8004424:	d108      	bne.n	8004438 <HAL_RCC_OscConfig+0x30c>
 8004426:	4b89      	ldr	r3, [pc, #548]	; (800464c <HAL_RCC_OscConfig+0x520>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800442e:	4a87      	ldr	r2, [pc, #540]	; (800464c <HAL_RCC_OscConfig+0x520>)
 8004430:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004434:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004436:	e075      	b.n	8004524 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004438:	4b84      	ldr	r3, [pc, #528]	; (800464c <HAL_RCC_OscConfig+0x520>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	069b      	lsls	r3, r3, #26
 8004446:	4981      	ldr	r1, [pc, #516]	; (800464c <HAL_RCC_OscConfig+0x520>)
 8004448:	4313      	orrs	r3, r2
 800444a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800444c:	e06a      	b.n	8004524 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800444e:	4b7f      	ldr	r3, [pc, #508]	; (800464c <HAL_RCC_OscConfig+0x520>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	061b      	lsls	r3, r3, #24
 800445c:	497b      	ldr	r1, [pc, #492]	; (800464c <HAL_RCC_OscConfig+0x520>)
 800445e:	4313      	orrs	r3, r2
 8004460:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004462:	e05f      	b.n	8004524 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	69db      	ldr	r3, [r3, #28]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d042      	beq.n	80044f2 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800446c:	4b77      	ldr	r3, [pc, #476]	; (800464c <HAL_RCC_OscConfig+0x520>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a76      	ldr	r2, [pc, #472]	; (800464c <HAL_RCC_OscConfig+0x520>)
 8004472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004476:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004478:	f7fd fc20 	bl	8001cbc <HAL_GetTick>
 800447c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004480:	f7fd fc1c 	bl	8001cbc <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e255      	b.n	800493e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004492:	4b6e      	ldr	r3, [pc, #440]	; (800464c <HAL_RCC_OscConfig+0x520>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0f0      	beq.n	8004480 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800449e:	f7fd fc19 	bl	8001cd4 <HAL_GetREVID>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f241 0203 	movw	r2, #4099	; 0x1003
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d817      	bhi.n	80044dc <HAL_RCC_OscConfig+0x3b0>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d108      	bne.n	80044c6 <HAL_RCC_OscConfig+0x39a>
 80044b4:	4b65      	ldr	r3, [pc, #404]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80044bc:	4a63      	ldr	r2, [pc, #396]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80044be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044c2:	6053      	str	r3, [r2, #4]
 80044c4:	e02e      	b.n	8004524 <HAL_RCC_OscConfig+0x3f8>
 80044c6:	4b61      	ldr	r3, [pc, #388]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	069b      	lsls	r3, r3, #26
 80044d4:	495d      	ldr	r1, [pc, #372]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	604b      	str	r3, [r1, #4]
 80044da:	e023      	b.n	8004524 <HAL_RCC_OscConfig+0x3f8>
 80044dc:	4b5b      	ldr	r3, [pc, #364]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	061b      	lsls	r3, r3, #24
 80044ea:	4958      	ldr	r1, [pc, #352]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60cb      	str	r3, [r1, #12]
 80044f0:	e018      	b.n	8004524 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80044f2:	4b56      	ldr	r3, [pc, #344]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a55      	ldr	r2, [pc, #340]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80044f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fe:	f7fd fbdd 	bl	8001cbc <HAL_GetTick>
 8004502:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004504:	e008      	b.n	8004518 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004506:	f7fd fbd9 	bl	8001cbc <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b02      	cmp	r3, #2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e212      	b.n	800493e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004518:	4b4c      	ldr	r3, [pc, #304]	; (800464c <HAL_RCC_OscConfig+0x520>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f0      	bne.n	8004506 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0308 	and.w	r3, r3, #8
 800452c:	2b00      	cmp	r3, #0
 800452e:	d036      	beq.n	800459e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d019      	beq.n	800456c <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004538:	4b44      	ldr	r3, [pc, #272]	; (800464c <HAL_RCC_OscConfig+0x520>)
 800453a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453c:	4a43      	ldr	r2, [pc, #268]	; (800464c <HAL_RCC_OscConfig+0x520>)
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004544:	f7fd fbba 	bl	8001cbc <HAL_GetTick>
 8004548:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800454c:	f7fd fbb6 	bl	8001cbc <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e1ef      	b.n	800493e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800455e:	4b3b      	ldr	r3, [pc, #236]	; (800464c <HAL_RCC_OscConfig+0x520>)
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x420>
 800456a:	e018      	b.n	800459e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800456c:	4b37      	ldr	r3, [pc, #220]	; (800464c <HAL_RCC_OscConfig+0x520>)
 800456e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004570:	4a36      	ldr	r2, [pc, #216]	; (800464c <HAL_RCC_OscConfig+0x520>)
 8004572:	f023 0301 	bic.w	r3, r3, #1
 8004576:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004578:	f7fd fba0 	bl	8001cbc <HAL_GetTick>
 800457c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004580:	f7fd fb9c 	bl	8001cbc <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e1d5      	b.n	800493e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004592:	4b2e      	ldr	r3, [pc, #184]	; (800464c <HAL_RCC_OscConfig+0x520>)
 8004594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d036      	beq.n	8004618 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d019      	beq.n	80045e6 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80045b2:	4b26      	ldr	r3, [pc, #152]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a25      	ldr	r2, [pc, #148]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80045b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045bc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045be:	f7fd fb7d 	bl	8001cbc <HAL_GetTick>
 80045c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80045c6:	f7fd fb79 	bl	8001cbc <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e1b2      	b.n	800493e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80045d8:	4b1c      	ldr	r3, [pc, #112]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x49a>
 80045e4:	e018      	b.n	8004618 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80045e6:	4b19      	ldr	r3, [pc, #100]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a18      	ldr	r2, [pc, #96]	; (800464c <HAL_RCC_OscConfig+0x520>)
 80045ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80045f2:	f7fd fb63 	bl	8001cbc <HAL_GetTick>
 80045f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80045fa:	f7fd fb5f 	bl	8001cbc <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e198      	b.n	800493e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800460c:	4b0f      	ldr	r3, [pc, #60]	; (800464c <HAL_RCC_OscConfig+0x520>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f0      	bne.n	80045fa <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 8085 	beq.w	8004730 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004626:	4b0a      	ldr	r3, [pc, #40]	; (8004650 <HAL_RCC_OscConfig+0x524>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a09      	ldr	r2, [pc, #36]	; (8004650 <HAL_RCC_OscConfig+0x524>)
 800462c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004630:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004632:	f7fd fb43 	bl	8001cbc <HAL_GetTick>
 8004636:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004638:	e00c      	b.n	8004654 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800463a:	f7fd fb3f 	bl	8001cbc <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b64      	cmp	r3, #100	; 0x64
 8004646:	d905      	bls.n	8004654 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e178      	b.n	800493e <HAL_RCC_OscConfig+0x812>
 800464c:	58024400 	.word	0x58024400
 8004650:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004654:	4b96      	ldr	r3, [pc, #600]	; (80048b0 <HAL_RCC_OscConfig+0x784>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465c:	2b00      	cmp	r3, #0
 800465e:	d0ec      	beq.n	800463a <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d106      	bne.n	8004676 <HAL_RCC_OscConfig+0x54a>
 8004668:	4b92      	ldr	r3, [pc, #584]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	4a91      	ldr	r2, [pc, #580]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	6713      	str	r3, [r2, #112]	; 0x70
 8004674:	e02d      	b.n	80046d2 <HAL_RCC_OscConfig+0x5a6>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10c      	bne.n	8004698 <HAL_RCC_OscConfig+0x56c>
 800467e:	4b8d      	ldr	r3, [pc, #564]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	4a8c      	ldr	r2, [pc, #560]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004684:	f023 0301 	bic.w	r3, r3, #1
 8004688:	6713      	str	r3, [r2, #112]	; 0x70
 800468a:	4b8a      	ldr	r3, [pc, #552]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	4a89      	ldr	r2, [pc, #548]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004690:	f023 0304 	bic.w	r3, r3, #4
 8004694:	6713      	str	r3, [r2, #112]	; 0x70
 8004696:	e01c      	b.n	80046d2 <HAL_RCC_OscConfig+0x5a6>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	2b05      	cmp	r3, #5
 800469e:	d10c      	bne.n	80046ba <HAL_RCC_OscConfig+0x58e>
 80046a0:	4b84      	ldr	r3, [pc, #528]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80046a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a4:	4a83      	ldr	r2, [pc, #524]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80046a6:	f043 0304 	orr.w	r3, r3, #4
 80046aa:	6713      	str	r3, [r2, #112]	; 0x70
 80046ac:	4b81      	ldr	r3, [pc, #516]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	4a80      	ldr	r2, [pc, #512]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80046b2:	f043 0301 	orr.w	r3, r3, #1
 80046b6:	6713      	str	r3, [r2, #112]	; 0x70
 80046b8:	e00b      	b.n	80046d2 <HAL_RCC_OscConfig+0x5a6>
 80046ba:	4b7e      	ldr	r3, [pc, #504]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	4a7d      	ldr	r2, [pc, #500]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80046c0:	f023 0301 	bic.w	r3, r3, #1
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70
 80046c6:	4b7b      	ldr	r3, [pc, #492]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	4a7a      	ldr	r2, [pc, #488]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80046cc:	f023 0304 	bic.w	r3, r3, #4
 80046d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d015      	beq.n	8004706 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046da:	f7fd faef 	bl	8001cbc <HAL_GetTick>
 80046de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046e0:	e00a      	b.n	80046f8 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e2:	f7fd faeb 	bl	8001cbc <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d901      	bls.n	80046f8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e122      	b.n	800493e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046f8:	4b6e      	ldr	r3, [pc, #440]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80046fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0ee      	beq.n	80046e2 <HAL_RCC_OscConfig+0x5b6>
 8004704:	e014      	b.n	8004730 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004706:	f7fd fad9 	bl	8001cbc <HAL_GetTick>
 800470a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800470c:	e00a      	b.n	8004724 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800470e:	f7fd fad5 	bl	8001cbc <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	f241 3288 	movw	r2, #5000	; 0x1388
 800471c:	4293      	cmp	r3, r2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e10c      	b.n	800493e <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004724:	4b63      	ldr	r3, [pc, #396]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004728:	f003 0302 	and.w	r3, r3, #2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1ee      	bne.n	800470e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 8101 	beq.w	800493c <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800473a:	4b5e      	ldr	r3, [pc, #376]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004742:	2b18      	cmp	r3, #24
 8004744:	f000 80bc 	beq.w	80048c0 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	2b02      	cmp	r3, #2
 800474e:	f040 8095 	bne.w	800487c <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004752:	4b58      	ldr	r3, [pc, #352]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a57      	ldr	r2, [pc, #348]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004758:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800475c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800475e:	f7fd faad 	bl	8001cbc <HAL_GetTick>
 8004762:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004764:	e008      	b.n	8004778 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004766:	f7fd faa9 	bl	8001cbc <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d901      	bls.n	8004778 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e0e2      	b.n	800493e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004778:	4b4e      	ldr	r3, [pc, #312]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1f0      	bne.n	8004766 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004784:	4b4b      	ldr	r3, [pc, #300]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004786:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004788:	4b4b      	ldr	r3, [pc, #300]	; (80048b8 <HAL_RCC_OscConfig+0x78c>)
 800478a:	4013      	ands	r3, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004794:	0112      	lsls	r2, r2, #4
 8004796:	430a      	orrs	r2, r1
 8004798:	4946      	ldr	r1, [pc, #280]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800479a:	4313      	orrs	r3, r2
 800479c:	628b      	str	r3, [r1, #40]	; 0x28
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047a2:	3b01      	subs	r3, #1
 80047a4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047ac:	3b01      	subs	r3, #1
 80047ae:	025b      	lsls	r3, r3, #9
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	431a      	orrs	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b8:	3b01      	subs	r3, #1
 80047ba:	041b      	lsls	r3, r3, #16
 80047bc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80047c0:	431a      	orrs	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	3b01      	subs	r3, #1
 80047c8:	061b      	lsls	r3, r3, #24
 80047ca:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80047ce:	4939      	ldr	r1, [pc, #228]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80047d0:	4313      	orrs	r3, r2
 80047d2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80047d4:	4b37      	ldr	r3, [pc, #220]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	4a36      	ldr	r2, [pc, #216]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80047e0:	4b34      	ldr	r3, [pc, #208]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80047e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047e4:	4b35      	ldr	r3, [pc, #212]	; (80048bc <HAL_RCC_OscConfig+0x790>)
 80047e6:	4013      	ands	r3, r2
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80047ec:	00d2      	lsls	r2, r2, #3
 80047ee:	4931      	ldr	r1, [pc, #196]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80047f0:	4313      	orrs	r3, r2
 80047f2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80047f4:	4b2f      	ldr	r3, [pc, #188]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80047f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f8:	f023 020c 	bic.w	r2, r3, #12
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004800:	492c      	ldr	r1, [pc, #176]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004802:	4313      	orrs	r3, r2
 8004804:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004806:	4b2b      	ldr	r3, [pc, #172]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	f023 0202 	bic.w	r2, r3, #2
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	4928      	ldr	r1, [pc, #160]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004814:	4313      	orrs	r3, r2
 8004816:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004818:	4b26      	ldr	r3, [pc, #152]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800481a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800481c:	4a25      	ldr	r2, [pc, #148]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800481e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004822:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004824:	4b23      	ldr	r3, [pc, #140]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	4a22      	ldr	r2, [pc, #136]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800482a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800482e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004830:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	4a1f      	ldr	r2, [pc, #124]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004836:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800483a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800483c:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a1c      	ldr	r2, [pc, #112]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004848:	4b1a      	ldr	r3, [pc, #104]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800484e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004854:	f7fd fa32 	bl	8001cbc <HAL_GetTick>
 8004858:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800485c:	f7fd fa2e 	bl	8001cbc <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e067      	b.n	800493e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800486e:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0x730>
 800487a:	e05f      	b.n	800493c <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800487c:	4b0d      	ldr	r3, [pc, #52]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a0c      	ldr	r2, [pc, #48]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 8004882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004888:	f7fd fa18 	bl	8001cbc <HAL_GetTick>
 800488c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004890:	f7fd fa14 	bl	8001cbc <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e04d      	b.n	800493e <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048a2:	4b04      	ldr	r3, [pc, #16]	; (80048b4 <HAL_RCC_OscConfig+0x788>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x764>
 80048ae:	e045      	b.n	800493c <HAL_RCC_OscConfig+0x810>
 80048b0:	58024800 	.word	0x58024800
 80048b4:	58024400 	.word	0x58024400
 80048b8:	fffffc0c 	.word	0xfffffc0c
 80048bc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80048c0:	4b21      	ldr	r3, [pc, #132]	; (8004948 <HAL_RCC_OscConfig+0x81c>)
 80048c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80048c6:	4b20      	ldr	r3, [pc, #128]	; (8004948 <HAL_RCC_OscConfig+0x81c>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d031      	beq.n	8004938 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f003 0203 	and.w	r2, r3, #3
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d12a      	bne.n	8004938 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	091b      	lsrs	r3, r3, #4
 80048e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d122      	bne.n	8004938 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80048fe:	429a      	cmp	r2, r3
 8004900:	d11a      	bne.n	8004938 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	0a5b      	lsrs	r3, r3, #9
 8004906:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004910:	429a      	cmp	r2, r3
 8004912:	d111      	bne.n	8004938 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004920:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004922:	429a      	cmp	r2, r3
 8004924:	d108      	bne.n	8004938 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	0e1b      	lsrs	r3, r3, #24
 800492a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004932:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e000      	b.n	800493e <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800493c:	2300      	movs	r3, #0
}
 800493e:	4618      	mov	r0, r3
 8004940:	3730      	adds	r7, #48	; 0x30
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	58024400 	.word	0x58024400

0800494c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e19c      	b.n	8004c9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004960:	4b8a      	ldr	r3, [pc, #552]	; (8004b8c <HAL_RCC_ClockConfig+0x240>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 030f 	and.w	r3, r3, #15
 8004968:	683a      	ldr	r2, [r7, #0]
 800496a:	429a      	cmp	r2, r3
 800496c:	d910      	bls.n	8004990 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800496e:	4b87      	ldr	r3, [pc, #540]	; (8004b8c <HAL_RCC_ClockConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f023 020f 	bic.w	r2, r3, #15
 8004976:	4985      	ldr	r1, [pc, #532]	; (8004b8c <HAL_RCC_ClockConfig+0x240>)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	4313      	orrs	r3, r2
 800497c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800497e:	4b83      	ldr	r3, [pc, #524]	; (8004b8c <HAL_RCC_ClockConfig+0x240>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 030f 	and.w	r3, r3, #15
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	429a      	cmp	r2, r3
 800498a:	d001      	beq.n	8004990 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e184      	b.n	8004c9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d010      	beq.n	80049be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	4b7b      	ldr	r3, [pc, #492]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d908      	bls.n	80049be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80049ac:	4b78      	ldr	r3, [pc, #480]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 80049ae:	699b      	ldr	r3, [r3, #24]
 80049b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	4975      	ldr	r1, [pc, #468]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0308 	and.w	r3, r3, #8
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d010      	beq.n	80049ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695a      	ldr	r2, [r3, #20]
 80049ce:	4b70      	ldr	r3, [pc, #448]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d908      	bls.n	80049ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049da:	4b6d      	ldr	r3, [pc, #436]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	695b      	ldr	r3, [r3, #20]
 80049e6:	496a      	ldr	r1, [pc, #424]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d010      	beq.n	8004a1a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699a      	ldr	r2, [r3, #24]
 80049fc:	4b64      	ldr	r3, [pc, #400]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d908      	bls.n	8004a1a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004a08:	4b61      	ldr	r3, [pc, #388]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	495e      	ldr	r1, [pc, #376]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d010      	beq.n	8004a48 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69da      	ldr	r2, [r3, #28]
 8004a2a:	4b59      	ldr	r3, [pc, #356]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d908      	bls.n	8004a48 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a36:	4b56      	ldr	r3, [pc, #344]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	4953      	ldr	r1, [pc, #332]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d010      	beq.n	8004a76 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	68da      	ldr	r2, [r3, #12]
 8004a58:	4b4d      	ldr	r3, [pc, #308]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d908      	bls.n	8004a76 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a64:	4b4a      	ldr	r3, [pc, #296]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	f023 020f 	bic.w	r2, r3, #15
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	4947      	ldr	r1, [pc, #284]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d055      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a82:	4b43      	ldr	r3, [pc, #268]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	4940      	ldr	r1, [pc, #256]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d107      	bne.n	8004aac <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a9c:	4b3c      	ldr	r3, [pc, #240]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d121      	bne.n	8004aec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e0f6      	b.n	8004c9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b03      	cmp	r3, #3
 8004ab2:	d107      	bne.n	8004ac4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ab4:	4b36      	ldr	r3, [pc, #216]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d115      	bne.n	8004aec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0ea      	b.n	8004c9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d107      	bne.n	8004adc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004acc:	4b30      	ldr	r3, [pc, #192]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d109      	bne.n	8004aec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e0de      	b.n	8004c9a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004adc:	4b2c      	ldr	r3, [pc, #176]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d101      	bne.n	8004aec <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e0d6      	b.n	8004c9a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004aec:	4b28      	ldr	r3, [pc, #160]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f023 0207 	bic.w	r2, r3, #7
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4925      	ldr	r1, [pc, #148]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afe:	f7fd f8dd 	bl	8001cbc <HAL_GetTick>
 8004b02:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b06:	f7fd f8d9 	bl	8001cbc <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0be      	b.n	8004c9a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b1c:	4b1c      	ldr	r3, [pc, #112]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	00db      	lsls	r3, r3, #3
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d1eb      	bne.n	8004b06 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d010      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	4b14      	ldr	r3, [pc, #80]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d208      	bcs.n	8004b5c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f023 020f 	bic.w	r2, r3, #15
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	490e      	ldr	r1, [pc, #56]	; (8004b90 <HAL_RCC_ClockConfig+0x244>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5c:	4b0b      	ldr	r3, [pc, #44]	; (8004b8c <HAL_RCC_ClockConfig+0x240>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 030f 	and.w	r3, r3, #15
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d214      	bcs.n	8004b94 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6a:	4b08      	ldr	r3, [pc, #32]	; (8004b8c <HAL_RCC_ClockConfig+0x240>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f023 020f 	bic.w	r2, r3, #15
 8004b72:	4906      	ldr	r1, [pc, #24]	; (8004b8c <HAL_RCC_ClockConfig+0x240>)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b7a:	4b04      	ldr	r3, [pc, #16]	; (8004b8c <HAL_RCC_ClockConfig+0x240>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	683a      	ldr	r2, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e086      	b.n	8004c9a <HAL_RCC_ClockConfig+0x34e>
 8004b8c:	52002000 	.word	0x52002000
 8004b90:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d010      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691a      	ldr	r2, [r3, #16]
 8004ba4:	4b3f      	ldr	r3, [pc, #252]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d208      	bcs.n	8004bc2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004bb0:	4b3c      	ldr	r3, [pc, #240]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	4939      	ldr	r1, [pc, #228]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d010      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695a      	ldr	r2, [r3, #20]
 8004bd2:	4b34      	ldr	r3, [pc, #208]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004bd4:	69db      	ldr	r3, [r3, #28]
 8004bd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d208      	bcs.n	8004bf0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bde:	4b31      	ldr	r3, [pc, #196]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	492e      	ldr	r1, [pc, #184]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0310 	and.w	r3, r3, #16
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d010      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	4b28      	ldr	r3, [pc, #160]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004c02:	69db      	ldr	r3, [r3, #28]
 8004c04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d208      	bcs.n	8004c1e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c0c:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	4922      	ldr	r1, [pc, #136]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d010      	beq.n	8004c4c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69da      	ldr	r2, [r3, #28]
 8004c2e:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d208      	bcs.n	8004c4c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004c3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	4917      	ldr	r1, [pc, #92]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004c4c:	f000 f834 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004c50:	4602      	mov	r2, r0
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	0a1b      	lsrs	r3, r3, #8
 8004c58:	f003 030f 	and.w	r3, r3, #15
 8004c5c:	4912      	ldr	r1, [pc, #72]	; (8004ca8 <HAL_RCC_ClockConfig+0x35c>)
 8004c5e:	5ccb      	ldrb	r3, [r1, r3]
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	fa22 f303 	lsr.w	r3, r2, r3
 8004c68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c6a:	4b0e      	ldr	r3, [pc, #56]	; (8004ca4 <HAL_RCC_ClockConfig+0x358>)
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	4a0d      	ldr	r2, [pc, #52]	; (8004ca8 <HAL_RCC_ClockConfig+0x35c>)
 8004c74:	5cd3      	ldrb	r3, [r2, r3]
 8004c76:	f003 031f 	and.w	r3, r3, #31
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c80:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <HAL_RCC_ClockConfig+0x360>)
 8004c82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c84:	4a0a      	ldr	r2, [pc, #40]	; (8004cb0 <HAL_RCC_ClockConfig+0x364>)
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <HAL_RCC_ClockConfig+0x368>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fc fc6c 	bl	800156c <HAL_InitTick>
 8004c94:	4603      	mov	r3, r0
 8004c96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	bf00      	nop
 8004ca4:	58024400 	.word	0x58024400
 8004ca8:	08017c3c 	.word	0x08017c3c
 8004cac:	24000034 	.word	0x24000034
 8004cb0:	24000030 	.word	0x24000030
 8004cb4:	24000038 	.word	0x24000038

08004cb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b089      	sub	sp, #36	; 0x24
 8004cbc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cbe:	4bb3      	ldr	r3, [pc, #716]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cc6:	2b18      	cmp	r3, #24
 8004cc8:	f200 8155 	bhi.w	8004f76 <HAL_RCC_GetSysClockFreq+0x2be>
 8004ccc:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd2:	bf00      	nop
 8004cd4:	08004d39 	.word	0x08004d39
 8004cd8:	08004f77 	.word	0x08004f77
 8004cdc:	08004f77 	.word	0x08004f77
 8004ce0:	08004f77 	.word	0x08004f77
 8004ce4:	08004f77 	.word	0x08004f77
 8004ce8:	08004f77 	.word	0x08004f77
 8004cec:	08004f77 	.word	0x08004f77
 8004cf0:	08004f77 	.word	0x08004f77
 8004cf4:	08004d5f 	.word	0x08004d5f
 8004cf8:	08004f77 	.word	0x08004f77
 8004cfc:	08004f77 	.word	0x08004f77
 8004d00:	08004f77 	.word	0x08004f77
 8004d04:	08004f77 	.word	0x08004f77
 8004d08:	08004f77 	.word	0x08004f77
 8004d0c:	08004f77 	.word	0x08004f77
 8004d10:	08004f77 	.word	0x08004f77
 8004d14:	08004d65 	.word	0x08004d65
 8004d18:	08004f77 	.word	0x08004f77
 8004d1c:	08004f77 	.word	0x08004f77
 8004d20:	08004f77 	.word	0x08004f77
 8004d24:	08004f77 	.word	0x08004f77
 8004d28:	08004f77 	.word	0x08004f77
 8004d2c:	08004f77 	.word	0x08004f77
 8004d30:	08004f77 	.word	0x08004f77
 8004d34:	08004d6b 	.word	0x08004d6b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d38:	4b94      	ldr	r3, [pc, #592]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d009      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004d44:	4b91      	ldr	r3, [pc, #580]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	08db      	lsrs	r3, r3, #3
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	4a90      	ldr	r2, [pc, #576]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d50:	fa22 f303 	lsr.w	r3, r2, r3
 8004d54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004d56:	e111      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d58:	4b8d      	ldr	r3, [pc, #564]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d5a:	61bb      	str	r3, [r7, #24]
    break;
 8004d5c:	e10e      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004d5e:	4b8d      	ldr	r3, [pc, #564]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d60:	61bb      	str	r3, [r7, #24]
    break;
 8004d62:	e10b      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004d64:	4b8c      	ldr	r3, [pc, #560]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d66:	61bb      	str	r3, [r7, #24]
    break;
 8004d68:	e108      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d6a:	4b88      	ldr	r3, [pc, #544]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004d74:	4b85      	ldr	r3, [pc, #532]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d78:	091b      	lsrs	r3, r3, #4
 8004d7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d7e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d80:	4b82      	ldr	r3, [pc, #520]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004d8a:	4b80      	ldr	r3, [pc, #512]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d8e:	08db      	lsrs	r3, r3, #3
 8004d90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	fb02 f303 	mul.w	r3, r2, r3
 8004d9a:	ee07 3a90 	vmov	s15, r3
 8004d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da2:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80e1 	beq.w	8004f70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	f000 8083 	beq.w	8004ebc <HAL_RCC_GetSysClockFreq+0x204>
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	f200 80a1 	bhi.w	8004f00 <HAL_RCC_GetSysClockFreq+0x248>
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d003      	beq.n	8004dcc <HAL_RCC_GetSysClockFreq+0x114>
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d056      	beq.n	8004e78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004dca:	e099      	b.n	8004f00 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dcc:	4b6f      	ldr	r3, [pc, #444]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d02d      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004dd8:	4b6c      	ldr	r3, [pc, #432]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	08db      	lsrs	r3, r3, #3
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	4a6b      	ldr	r2, [pc, #428]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004de4:	fa22 f303 	lsr.w	r3, r2, r3
 8004de8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	ee07 3a90 	vmov	s15, r3
 8004df0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	ee07 3a90 	vmov	s15, r3
 8004dfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e02:	4b62      	ldr	r3, [pc, #392]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e0a:	ee07 3a90 	vmov	s15, r3
 8004e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e16:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004e32:	e087      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	ee07 3a90 	vmov	s15, r3
 8004e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e3e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004fa0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8004e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e46:	4b51      	ldr	r3, [pc, #324]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e56:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e5a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e76:	e065      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	ee07 3a90 	vmov	s15, r3
 8004e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e82:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004fa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e8a:	4b40      	ldr	r3, [pc, #256]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e9e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eba:	e043      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	ee07 3a90 	vmov	s15, r3
 8004ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ec6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004fa8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ece:	4b2f      	ldr	r3, [pc, #188]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ee2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004efe:	e021      	b.n	8004f44 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	ee07 3a90 	vmov	s15, r3
 8004f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f0a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004fa4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f12:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f22:	ed97 6a02 	vldr	s12, [r7, #8]
 8004f26:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004f9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f42:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004f44:	4b11      	ldr	r3, [pc, #68]	; (8004f8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f48:	0a5b      	lsrs	r3, r3, #9
 8004f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f4e:	3301      	adds	r3, #1
 8004f50:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f68:	ee17 3a90 	vmov	r3, s15
 8004f6c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004f6e:	e005      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	61bb      	str	r3, [r7, #24]
    break;
 8004f74:	e002      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004f76:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f78:	61bb      	str	r3, [r7, #24]
    break;
 8004f7a:	bf00      	nop
  }

  return sysclockfreq;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3724      	adds	r7, #36	; 0x24
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	58024400 	.word	0x58024400
 8004f90:	03d09000 	.word	0x03d09000
 8004f94:	003d0900 	.word	0x003d0900
 8004f98:	017d7840 	.word	0x017d7840
 8004f9c:	46000000 	.word	0x46000000
 8004fa0:	4c742400 	.word	0x4c742400
 8004fa4:	4a742400 	.word	0x4a742400
 8004fa8:	4bbebc20 	.word	0x4bbebc20

08004fac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004fb2:	f7ff fe81 	bl	8004cb8 <HAL_RCC_GetSysClockFreq>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	4b10      	ldr	r3, [pc, #64]	; (8004ffc <HAL_RCC_GetHCLKFreq+0x50>)
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	0a1b      	lsrs	r3, r3, #8
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	490f      	ldr	r1, [pc, #60]	; (8005000 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fc4:	5ccb      	ldrb	r3, [r1, r3]
 8004fc6:	f003 031f 	and.w	r3, r3, #31
 8004fca:	fa22 f303 	lsr.w	r3, r2, r3
 8004fce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004fd0:	4b0a      	ldr	r3, [pc, #40]	; (8004ffc <HAL_RCC_GetHCLKFreq+0x50>)
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f003 030f 	and.w	r3, r3, #15
 8004fd8:	4a09      	ldr	r2, [pc, #36]	; (8005000 <HAL_RCC_GetHCLKFreq+0x54>)
 8004fda:	5cd3      	ldrb	r3, [r2, r3]
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fe6:	4a07      	ldr	r2, [pc, #28]	; (8005004 <HAL_RCC_GetHCLKFreq+0x58>)
 8004fe8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004fea:	4a07      	ldr	r2, [pc, #28]	; (8005008 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004ff0:	4b04      	ldr	r3, [pc, #16]	; (8005004 <HAL_RCC_GetHCLKFreq+0x58>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	58024400 	.word	0x58024400
 8005000:	08017c3c 	.word	0x08017c3c
 8005004:	24000034 	.word	0x24000034
 8005008:	24000030 	.word	0x24000030

0800500c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005010:	f7ff ffcc 	bl	8004fac <HAL_RCC_GetHCLKFreq>
 8005014:	4602      	mov	r2, r0
 8005016:	4b06      	ldr	r3, [pc, #24]	; (8005030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005018:	69db      	ldr	r3, [r3, #28]
 800501a:	091b      	lsrs	r3, r3, #4
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	4904      	ldr	r1, [pc, #16]	; (8005034 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005022:	5ccb      	ldrb	r3, [r1, r3]
 8005024:	f003 031f 	and.w	r3, r3, #31
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800502c:	4618      	mov	r0, r3
 800502e:	bd80      	pop	{r7, pc}
 8005030:	58024400 	.word	0x58024400
 8005034:	08017c3c 	.word	0x08017c3c

08005038 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	223f      	movs	r2, #63	; 0x3f
 8005046:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005048:	4b1a      	ldr	r3, [pc, #104]	; (80050b4 <HAL_RCC_GetClockConfig+0x7c>)
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	f003 0207 	and.w	r2, r3, #7
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8005054:	4b17      	ldr	r3, [pc, #92]	; (80050b4 <HAL_RCC_GetClockConfig+0x7c>)
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8005060:	4b14      	ldr	r3, [pc, #80]	; (80050b4 <HAL_RCC_GetClockConfig+0x7c>)
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	f003 020f 	and.w	r2, r3, #15
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800506c:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <HAL_RCC_GetClockConfig+0x7c>)
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8005078:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <HAL_RCC_GetClockConfig+0x7c>)
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8005084:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <HAL_RCC_GetClockConfig+0x7c>)
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005090:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <HAL_RCC_GetClockConfig+0x7c>)
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800509c:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_RCC_GetClockConfig+0x80>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 020f 	and.w	r2, r3, #15
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	601a      	str	r2, [r3, #0]
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr
 80050b4:	58024400 	.word	0x58024400
 80050b8:	52002000 	.word	0x52002000

080050bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e049      	b.n	8005162 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 f841 	bl	800516a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f000 f9f8 	bl	80054f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800516a:	b480      	push	{r7}
 800516c:	b083      	sub	sp, #12
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005172:	bf00      	nop
 8005174:	370c      	adds	r7, #12
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
	...

08005180 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b085      	sub	sp, #20
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d001      	beq.n	8005198 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e04f      	b.n	8005238 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68da      	ldr	r2, [r3, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a23      	ldr	r2, [pc, #140]	; (8005244 <HAL_TIM_Base_Start_IT+0xc4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d01d      	beq.n	80051f6 <HAL_TIM_Base_Start_IT+0x76>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c2:	d018      	beq.n	80051f6 <HAL_TIM_Base_Start_IT+0x76>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a1f      	ldr	r2, [pc, #124]	; (8005248 <HAL_TIM_Base_Start_IT+0xc8>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d013      	beq.n	80051f6 <HAL_TIM_Base_Start_IT+0x76>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a1e      	ldr	r2, [pc, #120]	; (800524c <HAL_TIM_Base_Start_IT+0xcc>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d00e      	beq.n	80051f6 <HAL_TIM_Base_Start_IT+0x76>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1c      	ldr	r2, [pc, #112]	; (8005250 <HAL_TIM_Base_Start_IT+0xd0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d009      	beq.n	80051f6 <HAL_TIM_Base_Start_IT+0x76>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1b      	ldr	r2, [pc, #108]	; (8005254 <HAL_TIM_Base_Start_IT+0xd4>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d004      	beq.n	80051f6 <HAL_TIM_Base_Start_IT+0x76>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a19      	ldr	r2, [pc, #100]	; (8005258 <HAL_TIM_Base_Start_IT+0xd8>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d115      	bne.n	8005222 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689a      	ldr	r2, [r3, #8]
 80051fc:	4b17      	ldr	r3, [pc, #92]	; (800525c <HAL_TIM_Base_Start_IT+0xdc>)
 80051fe:	4013      	ands	r3, r2
 8005200:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b06      	cmp	r3, #6
 8005206:	d015      	beq.n	8005234 <HAL_TIM_Base_Start_IT+0xb4>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520e:	d011      	beq.n	8005234 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005220:	e008      	b.n	8005234 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 0201 	orr.w	r2, r2, #1
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	e000      	b.n	8005236 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005234:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr
 8005244:	40010000 	.word	0x40010000
 8005248:	40000400 	.word	0x40000400
 800524c:	40000800 	.word	0x40000800
 8005250:	40000c00 	.word	0x40000c00
 8005254:	40010400 	.word	0x40010400
 8005258:	40001800 	.word	0x40001800
 800525c:	00010007 	.word	0x00010007

08005260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b02      	cmp	r3, #2
 8005274:	d122      	bne.n	80052bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0302 	and.w	r3, r3, #2
 8005280:	2b02      	cmp	r3, #2
 8005282:	d11b      	bne.n	80052bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0202 	mvn.w	r2, #2
 800528c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699b      	ldr	r3, [r3, #24]
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d003      	beq.n	80052aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 f905 	bl	80054b2 <HAL_TIM_IC_CaptureCallback>
 80052a8:	e005      	b.n	80052b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 f8f7 	bl	800549e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f908 	bl	80054c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f003 0304 	and.w	r3, r3, #4
 80052c6:	2b04      	cmp	r3, #4
 80052c8:	d122      	bne.n	8005310 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	f003 0304 	and.w	r3, r3, #4
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d11b      	bne.n	8005310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f06f 0204 	mvn.w	r2, #4
 80052e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2202      	movs	r2, #2
 80052e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f8db 	bl	80054b2 <HAL_TIM_IC_CaptureCallback>
 80052fc:	e005      	b.n	800530a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f8cd 	bl	800549e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f8de 	bl	80054c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f003 0308 	and.w	r3, r3, #8
 800531a:	2b08      	cmp	r3, #8
 800531c:	d122      	bne.n	8005364 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0308 	and.w	r3, r3, #8
 8005328:	2b08      	cmp	r3, #8
 800532a:	d11b      	bne.n	8005364 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0208 	mvn.w	r2, #8
 8005334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2204      	movs	r2, #4
 800533a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f8b1 	bl	80054b2 <HAL_TIM_IC_CaptureCallback>
 8005350:	e005      	b.n	800535e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f8a3 	bl	800549e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f8b4 	bl	80054c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	2b10      	cmp	r3, #16
 8005370:	d122      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0310 	and.w	r3, r3, #16
 800537c:	2b10      	cmp	r3, #16
 800537e:	d11b      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0210 	mvn.w	r2, #16
 8005388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2208      	movs	r2, #8
 800538e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539a:	2b00      	cmp	r3, #0
 800539c:	d003      	beq.n	80053a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f887 	bl	80054b2 <HAL_TIM_IC_CaptureCallback>
 80053a4:	e005      	b.n	80053b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 f879 	bl	800549e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f88a 	bl	80054c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	d10e      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d107      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0201 	mvn.w	r2, #1
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f7fc f930 	bl	8001644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ee:	2b80      	cmp	r3, #128	; 0x80
 80053f0:	d10e      	bne.n	8005410 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fc:	2b80      	cmp	r3, #128	; 0x80
 80053fe:	d107      	bne.n	8005410 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f914 	bl	8005638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800541a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800541e:	d10e      	bne.n	800543e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542a:	2b80      	cmp	r3, #128	; 0x80
 800542c:	d107      	bne.n	800543e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f907 	bl	800564c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005448:	2b40      	cmp	r3, #64	; 0x40
 800544a:	d10e      	bne.n	800546a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005456:	2b40      	cmp	r3, #64	; 0x40
 8005458:	d107      	bne.n	800546a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f838 	bl	80054da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b20      	cmp	r3, #32
 8005476:	d10e      	bne.n	8005496 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b20      	cmp	r3, #32
 8005484:	d107      	bne.n	8005496 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f06f 0220 	mvn.w	r2, #32
 800548e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f8c7 	bl	8005624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005496:	bf00      	nop
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800549e:	b480      	push	{r7}
 80054a0:	b083      	sub	sp, #12
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054a6:	bf00      	nop
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b083      	sub	sp, #12
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
	...

080054f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b085      	sub	sp, #20
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a40      	ldr	r2, [pc, #256]	; (8005604 <TIM_Base_SetConfig+0x114>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d013      	beq.n	8005530 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800550e:	d00f      	beq.n	8005530 <TIM_Base_SetConfig+0x40>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a3d      	ldr	r2, [pc, #244]	; (8005608 <TIM_Base_SetConfig+0x118>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d00b      	beq.n	8005530 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a3c      	ldr	r2, [pc, #240]	; (800560c <TIM_Base_SetConfig+0x11c>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d007      	beq.n	8005530 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a3b      	ldr	r2, [pc, #236]	; (8005610 <TIM_Base_SetConfig+0x120>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_Base_SetConfig+0x40>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a3a      	ldr	r2, [pc, #232]	; (8005614 <TIM_Base_SetConfig+0x124>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d108      	bne.n	8005542 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005536:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2f      	ldr	r2, [pc, #188]	; (8005604 <TIM_Base_SetConfig+0x114>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d01f      	beq.n	800558a <TIM_Base_SetConfig+0x9a>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005550:	d01b      	beq.n	800558a <TIM_Base_SetConfig+0x9a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2c      	ldr	r2, [pc, #176]	; (8005608 <TIM_Base_SetConfig+0x118>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d017      	beq.n	800558a <TIM_Base_SetConfig+0x9a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2b      	ldr	r2, [pc, #172]	; (800560c <TIM_Base_SetConfig+0x11c>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d013      	beq.n	800558a <TIM_Base_SetConfig+0x9a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2a      	ldr	r2, [pc, #168]	; (8005610 <TIM_Base_SetConfig+0x120>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00f      	beq.n	800558a <TIM_Base_SetConfig+0x9a>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a29      	ldr	r2, [pc, #164]	; (8005614 <TIM_Base_SetConfig+0x124>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d00b      	beq.n	800558a <TIM_Base_SetConfig+0x9a>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a28      	ldr	r2, [pc, #160]	; (8005618 <TIM_Base_SetConfig+0x128>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d007      	beq.n	800558a <TIM_Base_SetConfig+0x9a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a27      	ldr	r2, [pc, #156]	; (800561c <TIM_Base_SetConfig+0x12c>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d003      	beq.n	800558a <TIM_Base_SetConfig+0x9a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a26      	ldr	r2, [pc, #152]	; (8005620 <TIM_Base_SetConfig+0x130>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d108      	bne.n	800559c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	68fa      	ldr	r2, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	689a      	ldr	r2, [r3, #8]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a10      	ldr	r2, [pc, #64]	; (8005604 <TIM_Base_SetConfig+0x114>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00f      	beq.n	80055e8 <TIM_Base_SetConfig+0xf8>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a12      	ldr	r2, [pc, #72]	; (8005614 <TIM_Base_SetConfig+0x124>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d00b      	beq.n	80055e8 <TIM_Base_SetConfig+0xf8>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a11      	ldr	r2, [pc, #68]	; (8005618 <TIM_Base_SetConfig+0x128>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d007      	beq.n	80055e8 <TIM_Base_SetConfig+0xf8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a10      	ldr	r2, [pc, #64]	; (800561c <TIM_Base_SetConfig+0x12c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d003      	beq.n	80055e8 <TIM_Base_SetConfig+0xf8>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a0f      	ldr	r2, [pc, #60]	; (8005620 <TIM_Base_SetConfig+0x130>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d103      	bne.n	80055f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	691a      	ldr	r2, [r3, #16]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	615a      	str	r2, [r3, #20]
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40010000 	.word	0x40010000
 8005608:	40000400 	.word	0x40000400
 800560c:	40000800 	.word	0x40000800
 8005610:	40000c00 	.word	0x40000c00
 8005614:	40010400 	.word	0x40010400
 8005618:	40014000 	.word	0x40014000
 800561c:	40014400 	.word	0x40014400
 8005620:	40014800 	.word	0x40014800

08005624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f103 0208 	add.w	r2, r3, #8
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005678:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f103 0208 	add.w	r2, r3, #8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f103 0208 	add.w	r2, r3, #8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056ae:	bf00      	nop
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	601a      	str	r2, [r3, #0]
}
 80056f6:	bf00      	nop
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr

08005702 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005718:	d103      	bne.n	8005722 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	e00c      	b.n	800573c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3308      	adds	r3, #8
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e002      	b.n	8005730 <vListInsert+0x2e>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	429a      	cmp	r2, r3
 800573a:	d2f6      	bcs.n	800572a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	683a      	ldr	r2, [r7, #0]
 800574a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68fa      	ldr	r2, [r7, #12]
 8005750:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	683a      	ldr	r2, [r7, #0]
 8005756:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	601a      	str	r2, [r3, #0]
}
 8005768:	bf00      	nop
 800576a:	3714      	adds	r7, #20
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	6892      	ldr	r2, [r2, #8]
 800578a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6852      	ldr	r2, [r2, #4]
 8005794:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	429a      	cmp	r2, r3
 800579e:	d103      	bne.n	80057a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	1e5a      	subs	r2, r3, #1
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10a      	bne.n	80057f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057f2:	f002 ff77 	bl	80086e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057fe:	68f9      	ldr	r1, [r7, #12]
 8005800:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005802:	fb01 f303 	mul.w	r3, r1, r3
 8005806:	441a      	add	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005822:	3b01      	subs	r3, #1
 8005824:	68f9      	ldr	r1, [r7, #12]
 8005826:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	441a      	add	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	22ff      	movs	r2, #255	; 0xff
 8005836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	22ff      	movs	r2, #255	; 0xff
 800583e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d114      	bne.n	8005872 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01a      	beq.n	8005886 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3310      	adds	r3, #16
 8005854:	4618      	mov	r0, r3
 8005856:	f001 fc31 	bl	80070bc <xTaskRemoveFromEventList>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d012      	beq.n	8005886 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005860:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <xQueueGenericReset+0xcc>)
 8005862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005866:	601a      	str	r2, [r3, #0]
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	e009      	b.n	8005886 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3310      	adds	r3, #16
 8005876:	4618      	mov	r0, r3
 8005878:	f7ff fef2 	bl	8005660 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3324      	adds	r3, #36	; 0x24
 8005880:	4618      	mov	r0, r3
 8005882:	f7ff feed 	bl	8005660 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005886:	f002 ff5d 	bl	8008744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800588a:	2301      	movs	r3, #1
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	e000ed04 	.word	0xe000ed04

08005898 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	; 0x28
 800589c:	af02      	add	r7, sp, #8
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	4613      	mov	r3, r2
 80058a4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	613b      	str	r3, [r7, #16]
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	3350      	adds	r3, #80	; 0x50
 80058d0:	4618      	mov	r0, r3
 80058d2:	f002 fbed 	bl	80080b0 <pvPortMalloc>
 80058d6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00d      	beq.n	80058fa <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	3350      	adds	r3, #80	; 0x50
 80058e6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058e8:	79fa      	ldrb	r2, [r7, #7]
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	4613      	mov	r3, r2
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	68b9      	ldr	r1, [r7, #8]
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f805 	bl	8005904 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058fa:	69bb      	ldr	r3, [r7, #24]
	}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3720      	adds	r7, #32
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d103      	bne.n	8005920 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	69ba      	ldr	r2, [r7, #24]
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e002      	b.n	8005926 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005932:	2101      	movs	r1, #1
 8005934:	69b8      	ldr	r0, [r7, #24]
 8005936:	f7ff ff47 	bl	80057c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	78fa      	ldrb	r2, [r7, #3]
 800593e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800594a:	b580      	push	{r7, lr}
 800594c:	b082      	sub	sp, #8
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00e      	beq.n	8005976 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800596a:	2300      	movs	r3, #0
 800596c:	2200      	movs	r2, #0
 800596e:	2100      	movs	r1, #0
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f84f 	bl	8005a14 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005976:	bf00      	nop
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800597e:	b580      	push	{r7, lr}
 8005980:	b086      	sub	sp, #24
 8005982:	af00      	add	r7, sp, #0
 8005984:	4603      	mov	r3, r0
 8005986:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005988:	2301      	movs	r3, #1
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	2300      	movs	r3, #0
 800598e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	461a      	mov	r2, r3
 8005994:	6939      	ldr	r1, [r7, #16]
 8005996:	6978      	ldr	r0, [r7, #20]
 8005998:	f7ff ff7e 	bl	8005898 <xQueueGenericCreate>
 800599c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f7ff ffd3 	bl	800594a <prvInitialiseMutex>

		return xNewQueue;
 80059a4:	68fb      	ldr	r3, [r7, #12]
	}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10a      	bne.n	80059d4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	613b      	str	r3, [r7, #16]
}
 80059d0:	bf00      	nop
 80059d2:	e7fe      	b.n	80059d2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d90a      	bls.n	80059f2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	60fb      	str	r3, [r7, #12]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80059f2:	2202      	movs	r2, #2
 80059f4:	2100      	movs	r1, #0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f7ff ff4e 	bl	8005898 <xQueueGenericCreate>
 80059fc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	683a      	ldr	r2, [r7, #0]
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005a0a:	697b      	ldr	r3, [r7, #20]
	}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08e      	sub	sp, #56	; 0x38
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a22:	2300      	movs	r3, #0
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d10a      	bne.n	8005a46 <xQueueGenericSend+0x32>
	__asm volatile
 8005a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a34:	f383 8811 	msr	BASEPRI, r3
 8005a38:	f3bf 8f6f 	isb	sy
 8005a3c:	f3bf 8f4f 	dsb	sy
 8005a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a42:	bf00      	nop
 8005a44:	e7fe      	b.n	8005a44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d103      	bne.n	8005a54 <xQueueGenericSend+0x40>
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <xQueueGenericSend+0x44>
 8005a54:	2301      	movs	r3, #1
 8005a56:	e000      	b.n	8005a5a <xQueueGenericSend+0x46>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <xQueueGenericSend+0x60>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a70:	bf00      	nop
 8005a72:	e7fe      	b.n	8005a72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b02      	cmp	r3, #2
 8005a78:	d103      	bne.n	8005a82 <xQueueGenericSend+0x6e>
 8005a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d101      	bne.n	8005a86 <xQueueGenericSend+0x72>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <xQueueGenericSend+0x74>
 8005a86:	2300      	movs	r3, #0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	623b      	str	r3, [r7, #32]
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aa2:	f001 fd5f 	bl	8007564 <xTaskGetSchedulerState>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <xQueueGenericSend+0x9e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d101      	bne.n	8005ab6 <xQueueGenericSend+0xa2>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <xQueueGenericSend+0xa4>
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	61fb      	str	r3, [r7, #28]
}
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ad2:	f002 fe07 	bl	80086e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d302      	bcc.n	8005ae8 <xQueueGenericSend+0xd4>
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d129      	bne.n	8005b3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ae8:	683a      	ldr	r2, [r7, #0]
 8005aea:	68b9      	ldr	r1, [r7, #8]
 8005aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aee:	f000 fc95 	bl	800641c <prvCopyDataToQueue>
 8005af2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d010      	beq.n	8005b1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	3324      	adds	r3, #36	; 0x24
 8005b00:	4618      	mov	r0, r3
 8005b02:	f001 fadb 	bl	80070bc <xTaskRemoveFromEventList>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d013      	beq.n	8005b34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b0c:	4b3f      	ldr	r3, [pc, #252]	; (8005c0c <xQueueGenericSend+0x1f8>)
 8005b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b12:	601a      	str	r2, [r3, #0]
 8005b14:	f3bf 8f4f 	dsb	sy
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	e00a      	b.n	8005b34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b24:	4b39      	ldr	r3, [pc, #228]	; (8005c0c <xQueueGenericSend+0x1f8>)
 8005b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b34:	f002 fe06 	bl	8008744 <vPortExitCritical>
				return pdPASS;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e063      	b.n	8005c04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d103      	bne.n	8005b4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b42:	f002 fdff 	bl	8008744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	e05c      	b.n	8005c04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b50:	f107 0314 	add.w	r3, r7, #20
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 fb13 	bl	8007180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b5e:	f002 fdf1 	bl	8008744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b62:	f001 f82d 	bl	8006bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b66:	f002 fdbd 	bl	80086e4 <vPortEnterCritical>
 8005b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b70:	b25b      	sxtb	r3, r3
 8005b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b76:	d103      	bne.n	8005b80 <xQueueGenericSend+0x16c>
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b86:	b25b      	sxtb	r3, r3
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b8c:	d103      	bne.n	8005b96 <xQueueGenericSend+0x182>
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b96:	f002 fdd5 	bl	8008744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b9a:	1d3a      	adds	r2, r7, #4
 8005b9c:	f107 0314 	add.w	r3, r7, #20
 8005ba0:	4611      	mov	r1, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f001 fb02 	bl	80071ac <xTaskCheckForTimeOut>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d124      	bne.n	8005bf8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bb0:	f000 fd2c 	bl	800660c <prvIsQueueFull>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d018      	beq.n	8005bec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbc:	3310      	adds	r3, #16
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	4611      	mov	r1, r2
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f001 fa56 	bl	8007074 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bca:	f000 fcb7 	bl	800653c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005bce:	f001 f805 	bl	8006bdc <xTaskResumeAll>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f47f af7c 	bne.w	8005ad2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005bda:	4b0c      	ldr	r3, [pc, #48]	; (8005c0c <xQueueGenericSend+0x1f8>)
 8005bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005be0:	601a      	str	r2, [r3, #0]
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	e772      	b.n	8005ad2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bee:	f000 fca5 	bl	800653c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bf2:	f000 fff3 	bl	8006bdc <xTaskResumeAll>
 8005bf6:	e76c      	b.n	8005ad2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bfa:	f000 fc9f 	bl	800653c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bfe:	f000 ffed 	bl	8006bdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3738      	adds	r7, #56	; 0x38
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	e000ed04 	.word	0xe000ed04

08005c10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b090      	sub	sp, #64	; 0x40
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10a      	bne.n	8005c3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c3a:	bf00      	nop
 8005c3c:	e7fe      	b.n	8005c3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <xQueueGenericSendFromISR+0x3c>
 8005c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <xQueueGenericSendFromISR+0x40>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e000      	b.n	8005c52 <xQueueGenericSendFromISR+0x42>
 8005c50:	2300      	movs	r3, #0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d103      	bne.n	8005c7a <xQueueGenericSendFromISR+0x6a>
 8005c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <xQueueGenericSendFromISR+0x6e>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <xQueueGenericSendFromISR+0x70>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	623b      	str	r3, [r7, #32]
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c9a:	f002 fe05 	bl	80088a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c9e:	f3ef 8211 	mrs	r2, BASEPRI
 8005ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	61fa      	str	r2, [r7, #28]
 8005cb4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005cb6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cb8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d302      	bcc.n	8005ccc <xQueueGenericSendFromISR+0xbc>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d12f      	bne.n	8005d2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	68b9      	ldr	r1, [r7, #8]
 8005ce0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005ce2:	f000 fb9b 	bl	800641c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ce6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cee:	d112      	bne.n	8005d16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d016      	beq.n	8005d26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfa:	3324      	adds	r3, #36	; 0x24
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 f9dd 	bl	80070bc <xTaskRemoveFromEventList>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00e      	beq.n	8005d26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00b      	beq.n	8005d26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	601a      	str	r2, [r3, #0]
 8005d14:	e007      	b.n	8005d26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	b25a      	sxtb	r2, r3
 8005d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d26:	2301      	movs	r3, #1
 8005d28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d2a:	e001      	b.n	8005d30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3740      	adds	r7, #64	; 0x40
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b08e      	sub	sp, #56	; 0x38
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10a      	bne.n	8005d70 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	623b      	str	r3, [r7, #32]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <xQueueGiveFromISR+0x48>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	61fb      	str	r3, [r7, #28]
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d103      	bne.n	8005d9e <xQueueGiveFromISR+0x58>
 8005d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <xQueueGiveFromISR+0x5c>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e000      	b.n	8005da4 <xQueueGiveFromISR+0x5e>
 8005da2:	2300      	movs	r3, #0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10a      	bne.n	8005dbe <xQueueGiveFromISR+0x78>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	61bb      	str	r3, [r7, #24]
}
 8005dba:	bf00      	nop
 8005dbc:	e7fe      	b.n	8005dbc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dbe:	f002 fd73 	bl	80088a8 <vPortValidateInterruptPriority>
	__asm volatile
 8005dc2:	f3ef 8211 	mrs	r2, BASEPRI
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	617a      	str	r2, [r7, #20]
 8005dd8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005dda:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d22b      	bcs.n	8005e46 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e00:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e08:	d112      	bne.n	8005e30 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d016      	beq.n	8005e40 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	3324      	adds	r3, #36	; 0x24
 8005e16:	4618      	mov	r0, r3
 8005e18:	f001 f950 	bl	80070bc <xTaskRemoveFromEventList>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00e      	beq.n	8005e40 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00b      	beq.n	8005e40 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e007      	b.n	8005e40 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005e34:	3301      	adds	r3, #1
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	b25a      	sxtb	r2, r3
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e40:	2301      	movs	r3, #1
 8005e42:	637b      	str	r3, [r7, #52]	; 0x34
 8005e44:	e001      	b.n	8005e4a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	637b      	str	r3, [r7, #52]	; 0x34
 8005e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e4c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f383 8811 	msr	BASEPRI, r3
}
 8005e54:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3738      	adds	r7, #56	; 0x38
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b08c      	sub	sp, #48	; 0x30
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <xQueueReceive+0x30>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	623b      	str	r3, [r7, #32]
}
 8005e8c:	bf00      	nop
 8005e8e:	e7fe      	b.n	8005e8e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d103      	bne.n	8005e9e <xQueueReceive+0x3e>
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d101      	bne.n	8005ea2 <xQueueReceive+0x42>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e000      	b.n	8005ea4 <xQueueReceive+0x44>
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10a      	bne.n	8005ebe <xQueueReceive+0x5e>
	__asm volatile
 8005ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	61fb      	str	r3, [r7, #28]
}
 8005eba:	bf00      	nop
 8005ebc:	e7fe      	b.n	8005ebc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ebe:	f001 fb51 	bl	8007564 <xTaskGetSchedulerState>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d102      	bne.n	8005ece <xQueueReceive+0x6e>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <xQueueReceive+0x72>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <xQueueReceive+0x74>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <xQueueReceive+0x8e>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	61bb      	str	r3, [r7, #24]
}
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005eee:	f002 fbf9 	bl	80086e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d01f      	beq.n	8005f3e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f02:	f000 faf5 	bl	80064f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f08:	1e5a      	subs	r2, r3, #1
 8005f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00f      	beq.n	8005f36 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f18:	3310      	adds	r3, #16
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f001 f8ce 	bl	80070bc <xTaskRemoveFromEventList>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d007      	beq.n	8005f36 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f26:	4b3d      	ldr	r3, [pc, #244]	; (800601c <xQueueReceive+0x1bc>)
 8005f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f2c:	601a      	str	r2, [r3, #0]
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f36:	f002 fc05 	bl	8008744 <vPortExitCritical>
				return pdPASS;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e069      	b.n	8006012 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d103      	bne.n	8005f4c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f44:	f002 fbfe 	bl	8008744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	e062      	b.n	8006012 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f52:	f107 0310 	add.w	r3, r7, #16
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 f912 	bl	8007180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f60:	f002 fbf0 	bl	8008744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f64:	f000 fe2c 	bl	8006bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f68:	f002 fbbc 	bl	80086e4 <vPortEnterCritical>
 8005f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f72:	b25b      	sxtb	r3, r3
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f78:	d103      	bne.n	8005f82 <xQueueReceive+0x122>
 8005f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f88:	b25b      	sxtb	r3, r3
 8005f8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f8e:	d103      	bne.n	8005f98 <xQueueReceive+0x138>
 8005f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f92:	2200      	movs	r2, #0
 8005f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f98:	f002 fbd4 	bl	8008744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f9c:	1d3a      	adds	r2, r7, #4
 8005f9e:	f107 0310 	add.w	r3, r7, #16
 8005fa2:	4611      	mov	r1, r2
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 f901 	bl	80071ac <xTaskCheckForTimeOut>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d123      	bne.n	8005ff8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb2:	f000 fb15 	bl	80065e0 <prvIsQueueEmpty>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d017      	beq.n	8005fec <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	3324      	adds	r3, #36	; 0x24
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 f855 	bl	8007074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fcc:	f000 fab6 	bl	800653c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fd0:	f000 fe04 	bl	8006bdc <xTaskResumeAll>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d189      	bne.n	8005eee <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005fda:	4b10      	ldr	r3, [pc, #64]	; (800601c <xQueueReceive+0x1bc>)
 8005fdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe0:	601a      	str	r2, [r3, #0]
 8005fe2:	f3bf 8f4f 	dsb	sy
 8005fe6:	f3bf 8f6f 	isb	sy
 8005fea:	e780      	b.n	8005eee <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fee:	f000 faa5 	bl	800653c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ff2:	f000 fdf3 	bl	8006bdc <xTaskResumeAll>
 8005ff6:	e77a      	b.n	8005eee <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ff8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ffa:	f000 fa9f 	bl	800653c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ffe:	f000 fded 	bl	8006bdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006002:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006004:	f000 faec 	bl	80065e0 <prvIsQueueEmpty>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	f43f af6f 	beq.w	8005eee <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006010:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006012:	4618      	mov	r0, r3
 8006014:	3730      	adds	r7, #48	; 0x30
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	e000ed04 	.word	0xe000ed04

08006020 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08e      	sub	sp, #56	; 0x38
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800602a:	2300      	movs	r3, #0
 800602c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006032:	2300      	movs	r3, #0
 8006034:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10a      	bne.n	8006052 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800603c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
 8006048:	f3bf 8f4f 	dsb	sy
 800604c:	623b      	str	r3, [r7, #32]
}
 800604e:	bf00      	nop
 8006050:	e7fe      	b.n	8006050 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	61fb      	str	r3, [r7, #28]
}
 800606c:	bf00      	nop
 800606e:	e7fe      	b.n	800606e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006070:	f001 fa78 	bl	8007564 <xTaskGetSchedulerState>
 8006074:	4603      	mov	r3, r0
 8006076:	2b00      	cmp	r3, #0
 8006078:	d102      	bne.n	8006080 <xQueueSemaphoreTake+0x60>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <xQueueSemaphoreTake+0x64>
 8006080:	2301      	movs	r3, #1
 8006082:	e000      	b.n	8006086 <xQueueSemaphoreTake+0x66>
 8006084:	2300      	movs	r3, #0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	61bb      	str	r3, [r7, #24]
}
 800609c:	bf00      	nop
 800609e:	e7fe      	b.n	800609e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80060a0:	f002 fb20 	bl	80086e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80060a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80060aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d024      	beq.n	80060fa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80060b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b2:	1e5a      	subs	r2, r3, #1
 80060b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80060b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80060c0:	f001 fcb4 	bl	8007a2c <pvTaskIncrementMutexHeldCount>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060cc:	691b      	ldr	r3, [r3, #16]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00f      	beq.n	80060f2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	3310      	adds	r3, #16
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fff0 	bl	80070bc <xTaskRemoveFromEventList>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d007      	beq.n	80060f2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80060e2:	4b54      	ldr	r3, [pc, #336]	; (8006234 <xQueueSemaphoreTake+0x214>)
 80060e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060f2:	f002 fb27 	bl	8008744 <vPortExitCritical>
				return pdPASS;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e097      	b.n	800622a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d111      	bne.n	8006124 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	617b      	str	r3, [r7, #20]
}
 8006118:	bf00      	nop
 800611a:	e7fe      	b.n	800611a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800611c:	f002 fb12 	bl	8008744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006120:	2300      	movs	r3, #0
 8006122:	e082      	b.n	800622a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006126:	2b00      	cmp	r3, #0
 8006128:	d106      	bne.n	8006138 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800612a:	f107 030c 	add.w	r3, r7, #12
 800612e:	4618      	mov	r0, r3
 8006130:	f001 f826 	bl	8007180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006134:	2301      	movs	r3, #1
 8006136:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006138:	f002 fb04 	bl	8008744 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800613c:	f000 fd40 	bl	8006bc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006140:	f002 fad0 	bl	80086e4 <vPortEnterCritical>
 8006144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800614a:	b25b      	sxtb	r3, r3
 800614c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006150:	d103      	bne.n	800615a <xQueueSemaphoreTake+0x13a>
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	2200      	movs	r2, #0
 8006156:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006160:	b25b      	sxtb	r3, r3
 8006162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006166:	d103      	bne.n	8006170 <xQueueSemaphoreTake+0x150>
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006170:	f002 fae8 	bl	8008744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006174:	463a      	mov	r2, r7
 8006176:	f107 030c 	add.w	r3, r7, #12
 800617a:	4611      	mov	r1, r2
 800617c:	4618      	mov	r0, r3
 800617e:	f001 f815 	bl	80071ac <xTaskCheckForTimeOut>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d132      	bne.n	80061ee <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006188:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800618a:	f000 fa29 	bl	80065e0 <prvIsQueueEmpty>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d026      	beq.n	80061e2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d109      	bne.n	80061b0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800619c:	f002 faa2 	bl	80086e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f001 f9fb 	bl	80075a0 <xTaskPriorityInherit>
 80061aa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80061ac:	f002 faca 	bl	8008744 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b2:	3324      	adds	r3, #36	; 0x24
 80061b4:	683a      	ldr	r2, [r7, #0]
 80061b6:	4611      	mov	r1, r2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 ff5b 	bl	8007074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061c0:	f000 f9bc 	bl	800653c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061c4:	f000 fd0a 	bl	8006bdc <xTaskResumeAll>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f47f af68 	bne.w	80060a0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80061d0:	4b18      	ldr	r3, [pc, #96]	; (8006234 <xQueueSemaphoreTake+0x214>)
 80061d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061d6:	601a      	str	r2, [r3, #0]
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	e75e      	b.n	80060a0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80061e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061e4:	f000 f9aa 	bl	800653c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061e8:	f000 fcf8 	bl	8006bdc <xTaskResumeAll>
 80061ec:	e758      	b.n	80060a0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80061ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061f0:	f000 f9a4 	bl	800653c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80061f4:	f000 fcf2 	bl	8006bdc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80061fa:	f000 f9f1 	bl	80065e0 <prvIsQueueEmpty>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	f43f af4d 	beq.w	80060a0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006208:	2b00      	cmp	r3, #0
 800620a:	d00d      	beq.n	8006228 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800620c:	f002 fa6a 	bl	80086e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006212:	f000 f8eb 	bl	80063ec <prvGetDisinheritPriorityAfterTimeout>
 8006216:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800621e:	4618      	mov	r0, r3
 8006220:	f001 faba 	bl	8007798 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006224:	f002 fa8e 	bl	8008744 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006228:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800622a:	4618      	mov	r0, r3
 800622c:	3738      	adds	r7, #56	; 0x38
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
 8006232:	bf00      	nop
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b08e      	sub	sp, #56	; 0x38
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624a:	2b00      	cmp	r3, #0
 800624c:	d10a      	bne.n	8006264 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	623b      	str	r3, [r7, #32]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d103      	bne.n	8006272 <xQueueReceiveFromISR+0x3a>
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <xQueueReceiveFromISR+0x3e>
 8006272:	2301      	movs	r3, #1
 8006274:	e000      	b.n	8006278 <xQueueReceiveFromISR+0x40>
 8006276:	2300      	movs	r3, #0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d10a      	bne.n	8006292 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	61fb      	str	r3, [r7, #28]
}
 800628e:	bf00      	nop
 8006290:	e7fe      	b.n	8006290 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006292:	f002 fb09 	bl	80088a8 <vPortValidateInterruptPriority>
	__asm volatile
 8006296:	f3ef 8211 	mrs	r2, BASEPRI
 800629a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629e:	f383 8811 	msr	BASEPRI, r3
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	f3bf 8f4f 	dsb	sy
 80062aa:	61ba      	str	r2, [r7, #24]
 80062ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80062ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80062b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d02f      	beq.n	800631e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80062be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062cc:	f000 f910 	bl	80064f0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062d2:	1e5a      	subs	r2, r3, #1
 80062d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062d6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80062d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062e0:	d112      	bne.n	8006308 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d016      	beq.n	8006318 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062ec:	3310      	adds	r3, #16
 80062ee:	4618      	mov	r0, r3
 80062f0:	f000 fee4 	bl	80070bc <xTaskRemoveFromEventList>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00e      	beq.n	8006318 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00b      	beq.n	8006318 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	601a      	str	r2, [r3, #0]
 8006306:	e007      	b.n	8006318 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800630c:	3301      	adds	r3, #1
 800630e:	b2db      	uxtb	r3, r3
 8006310:	b25a      	sxtb	r2, r3
 8006312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006318:	2301      	movs	r3, #1
 800631a:	637b      	str	r3, [r7, #52]	; 0x34
 800631c:	e001      	b.n	8006322 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800631e:	2300      	movs	r3, #0
 8006320:	637b      	str	r3, [r7, #52]	; 0x34
 8006322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006324:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	f383 8811 	msr	BASEPRI, r3
}
 800632c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800632e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006330:	4618      	mov	r0, r3
 8006332:	3738      	adds	r7, #56	; 0x38
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10a      	bne.n	800635c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	60bb      	str	r3, [r7, #8]
}
 8006358:	bf00      	nop
 800635a:	e7fe      	b.n	800635a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800635c:	f002 f9c2 	bl	80086e4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8006366:	f002 f9ed 	bl	8008744 <vPortExitCritical>

	return uxReturn;
 800636a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10a      	bne.n	800639c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8006386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800638a:	f383 8811 	msr	BASEPRI, r3
 800638e:	f3bf 8f6f 	isb	sy
 8006392:	f3bf 8f4f 	dsb	sy
 8006396:	60fb      	str	r3, [r7, #12]
}
 8006398:	bf00      	nop
 800639a:	e7fe      	b.n	800639a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80063a2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80063a4:	4618      	mov	r0, r3
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10a      	bne.n	80063d8 <vQueueDelete+0x28>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	60bb      	str	r3, [r7, #8]
}
 80063d4:	bf00      	nop
 80063d6:	e7fe      	b.n	80063d6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80063d8:	68f8      	ldr	r0, [r7, #12]
 80063da:	f000 f92f 	bl	800663c <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f001 ff32 	bl	8008248 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d006      	beq.n	800640a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f1c3 0307 	rsb	r3, r3, #7
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	e001      	b.n	800640e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800640e:	68fb      	ldr	r3, [r7, #12]
	}
 8006410:	4618      	mov	r0, r3
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006428:	2300      	movs	r3, #0
 800642a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10d      	bne.n	8006456 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d14d      	bne.n	80064de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	4618      	mov	r0, r3
 8006448:	f001 f920 	bl	800768c <xTaskPriorityDisinherit>
 800644c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	609a      	str	r2, [r3, #8]
 8006454:	e043      	b.n	80064de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d119      	bne.n	8006490 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6858      	ldr	r0, [r3, #4]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006464:	461a      	mov	r2, r3
 8006466:	68b9      	ldr	r1, [r7, #8]
 8006468:	f00f fca0 	bl	8015dac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	441a      	add	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	429a      	cmp	r2, r3
 8006484:	d32b      	bcc.n	80064de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	605a      	str	r2, [r3, #4]
 800648e:	e026      	b.n	80064de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	68d8      	ldr	r0, [r3, #12]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006498:	461a      	mov	r2, r3
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	f00f fc86 	bl	8015dac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a8:	425b      	negs	r3, r3
 80064aa:	441a      	add	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d207      	bcs.n	80064cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c4:	425b      	negs	r3, r3
 80064c6:	441a      	add	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d105      	bne.n	80064de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	3b01      	subs	r3, #1
 80064dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80064e6:	697b      	ldr	r3, [r7, #20]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d018      	beq.n	8006534 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650a:	441a      	add	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	429a      	cmp	r2, r3
 800651a:	d303      	bcc.n	8006524 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	68d9      	ldr	r1, [r3, #12]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800652c:	461a      	mov	r2, r3
 800652e:	6838      	ldr	r0, [r7, #0]
 8006530:	f00f fc3c 	bl	8015dac <memcpy>
	}
}
 8006534:	bf00      	nop
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006544:	f002 f8ce 	bl	80086e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800654e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006550:	e011      	b.n	8006576 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	2b00      	cmp	r3, #0
 8006558:	d012      	beq.n	8006580 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3324      	adds	r3, #36	; 0x24
 800655e:	4618      	mov	r0, r3
 8006560:	f000 fdac 	bl	80070bc <xTaskRemoveFromEventList>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d001      	beq.n	800656e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800656a:	f000 fe79 	bl	8007260 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800656e:	7bfb      	ldrb	r3, [r7, #15]
 8006570:	3b01      	subs	r3, #1
 8006572:	b2db      	uxtb	r3, r3
 8006574:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	dce9      	bgt.n	8006552 <prvUnlockQueue+0x16>
 800657e:	e000      	b.n	8006582 <prvUnlockQueue+0x46>
					break;
 8006580:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	22ff      	movs	r2, #255	; 0xff
 8006586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800658a:	f002 f8db 	bl	8008744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800658e:	f002 f8a9 	bl	80086e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006598:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800659a:	e011      	b.n	80065c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	691b      	ldr	r3, [r3, #16]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d012      	beq.n	80065ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3310      	adds	r3, #16
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fd87 	bl	80070bc <xTaskRemoveFromEventList>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80065b4:	f000 fe54 	bl	8007260 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80065b8:	7bbb      	ldrb	r3, [r7, #14]
 80065ba:	3b01      	subs	r3, #1
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80065c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	dce9      	bgt.n	800659c <prvUnlockQueue+0x60>
 80065c8:	e000      	b.n	80065cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80065ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	22ff      	movs	r2, #255	; 0xff
 80065d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80065d4:	f002 f8b6 	bl	8008744 <vPortExitCritical>
}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80065e8:	f002 f87c 	bl	80086e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80065f4:	2301      	movs	r3, #1
 80065f6:	60fb      	str	r3, [r7, #12]
 80065f8:	e001      	b.n	80065fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80065fa:	2300      	movs	r3, #0
 80065fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80065fe:	f002 f8a1 	bl	8008744 <vPortExitCritical>

	return xReturn;
 8006602:	68fb      	ldr	r3, [r7, #12]
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006614:	f002 f866 	bl	80086e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006620:	429a      	cmp	r2, r3
 8006622:	d102      	bne.n	800662a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006624:	2301      	movs	r3, #1
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	e001      	b.n	800662e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800662e:	f002 f889 	bl	8008744 <vPortExitCritical>

	return xReturn;
 8006632:	68fb      	ldr	r3, [r7, #12]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006644:	2300      	movs	r3, #0
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	e016      	b.n	8006678 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800664a:	4a10      	ldr	r2, [pc, #64]	; (800668c <vQueueUnregisterQueue+0x50>)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	00db      	lsls	r3, r3, #3
 8006650:	4413      	add	r3, r2
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	687a      	ldr	r2, [r7, #4]
 8006656:	429a      	cmp	r2, r3
 8006658:	d10b      	bne.n	8006672 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800665a:	4a0c      	ldr	r2, [pc, #48]	; (800668c <vQueueUnregisterQueue+0x50>)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2100      	movs	r1, #0
 8006660:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006664:	4a09      	ldr	r2, [pc, #36]	; (800668c <vQueueUnregisterQueue+0x50>)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	00db      	lsls	r3, r3, #3
 800666a:	4413      	add	r3, r2
 800666c:	2200      	movs	r2, #0
 800666e:	605a      	str	r2, [r3, #4]
				break;
 8006670:	e006      	b.n	8006680 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3301      	adds	r3, #1
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b07      	cmp	r3, #7
 800667c:	d9e5      	bls.n	800664a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800667e:	bf00      	nop
 8006680:	bf00      	nop
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	240069e4 	.word	0x240069e4

08006690 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	; 0x30
 8006694:	af04      	add	r7, sp, #16
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	4613      	mov	r3, r2
 800669e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066a0:	88fb      	ldrh	r3, [r7, #6]
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4618      	mov	r0, r3
 80066a6:	f001 fd03 	bl	80080b0 <pvPortMalloc>
 80066aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00e      	beq.n	80066d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066b2:	205c      	movs	r0, #92	; 0x5c
 80066b4:	f001 fcfc 	bl	80080b0 <pvPortMalloc>
 80066b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	631a      	str	r2, [r3, #48]	; 0x30
 80066c6:	e005      	b.n	80066d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066c8:	6978      	ldr	r0, [r7, #20]
 80066ca:	f001 fdbd 	bl	8008248 <vPortFree>
 80066ce:	e001      	b.n	80066d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d013      	beq.n	8006702 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066da:	88fa      	ldrh	r2, [r7, #6]
 80066dc:	2300      	movs	r3, #0
 80066de:	9303      	str	r3, [sp, #12]
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	9302      	str	r3, [sp, #8]
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	9301      	str	r3, [sp, #4]
 80066e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ea:	9300      	str	r3, [sp, #0]
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	68f8      	ldr	r0, [r7, #12]
 80066f2:	f000 f80e 	bl	8006712 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066f6:	69f8      	ldr	r0, [r7, #28]
 80066f8:	f000 f89a 	bl	8006830 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066fc:	2301      	movs	r3, #1
 80066fe:	61bb      	str	r3, [r7, #24]
 8006700:	e002      	b.n	8006708 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006706:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006708:	69bb      	ldr	r3, [r7, #24]
	}
 800670a:	4618      	mov	r0, r3
 800670c:	3720      	adds	r7, #32
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b088      	sub	sp, #32
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	607a      	str	r2, [r7, #4]
 800671e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006722:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	461a      	mov	r2, r3
 800672a:	21a5      	movs	r1, #165	; 0xa5
 800672c:	f00f fb66 	bl	8015dfc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006732:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800673a:	440b      	add	r3, r1
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	f023 0307 	bic.w	r3, r3, #7
 8006748:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	f003 0307 	and.w	r3, r3, #7
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <prvInitialiseNewTask+0x58>
	__asm volatile
 8006754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006758:	f383 8811 	msr	BASEPRI, r3
 800675c:	f3bf 8f6f 	isb	sy
 8006760:	f3bf 8f4f 	dsb	sy
 8006764:	617b      	str	r3, [r7, #20]
}
 8006766:	bf00      	nop
 8006768:	e7fe      	b.n	8006768 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d01f      	beq.n	80067b0 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006770:	2300      	movs	r3, #0
 8006772:	61fb      	str	r3, [r7, #28]
 8006774:	e012      	b.n	800679c <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	4413      	add	r3, r2
 800677c:	7819      	ldrb	r1, [r3, #0]
 800677e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	4413      	add	r3, r2
 8006784:	3334      	adds	r3, #52	; 0x34
 8006786:	460a      	mov	r2, r1
 8006788:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d006      	beq.n	80067a4 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	3301      	adds	r3, #1
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	2b0f      	cmp	r3, #15
 80067a0:	d9e9      	bls.n	8006776 <prvInitialiseNewTask+0x64>
 80067a2:	e000      	b.n	80067a6 <prvInitialiseNewTask+0x94>
			{
				break;
 80067a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80067ae:	e003      	b.n	80067b8 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067b2:	2200      	movs	r2, #0
 80067b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ba:	2b06      	cmp	r3, #6
 80067bc:	d901      	bls.n	80067c2 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067be:	2306      	movs	r3, #6
 80067c0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067c6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067cc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	2200      	movs	r2, #0
 80067d2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d6:	3304      	adds	r3, #4
 80067d8:	4618      	mov	r0, r3
 80067da:	f7fe ff61 	bl	80056a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	3318      	adds	r3, #24
 80067e2:	4618      	mov	r0, r3
 80067e4:	f7fe ff5c 	bl	80056a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f0:	f1c3 0207 	rsb	r2, r3, #7
 80067f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006800:	2200      	movs	r2, #0
 8006802:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	68f9      	ldr	r1, [r7, #12]
 8006810:	69b8      	ldr	r0, [r7, #24]
 8006812:	f001 fe37 	bl	8008484 <pxPortInitialiseStack>
 8006816:	4602      	mov	r2, r0
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800681c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681e:	2b00      	cmp	r3, #0
 8006820:	d002      	beq.n	8006828 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006826:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006828:	bf00      	nop
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006838:	f001 ff54 	bl	80086e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800683c:	4b2c      	ldr	r3, [pc, #176]	; (80068f0 <prvAddNewTaskToReadyList+0xc0>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3301      	adds	r3, #1
 8006842:	4a2b      	ldr	r2, [pc, #172]	; (80068f0 <prvAddNewTaskToReadyList+0xc0>)
 8006844:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006846:	4b2b      	ldr	r3, [pc, #172]	; (80068f4 <prvAddNewTaskToReadyList+0xc4>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d109      	bne.n	8006862 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800684e:	4a29      	ldr	r2, [pc, #164]	; (80068f4 <prvAddNewTaskToReadyList+0xc4>)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006854:	4b26      	ldr	r3, [pc, #152]	; (80068f0 <prvAddNewTaskToReadyList+0xc0>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d110      	bne.n	800687e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800685c:	f000 fd24 	bl	80072a8 <prvInitialiseTaskLists>
 8006860:	e00d      	b.n	800687e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006862:	4b25      	ldr	r3, [pc, #148]	; (80068f8 <prvAddNewTaskToReadyList+0xc8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800686a:	4b22      	ldr	r3, [pc, #136]	; (80068f4 <prvAddNewTaskToReadyList+0xc4>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	429a      	cmp	r2, r3
 8006876:	d802      	bhi.n	800687e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006878:	4a1e      	ldr	r2, [pc, #120]	; (80068f4 <prvAddNewTaskToReadyList+0xc4>)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800687e:	4b1f      	ldr	r3, [pc, #124]	; (80068fc <prvAddNewTaskToReadyList+0xcc>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3301      	adds	r3, #1
 8006884:	4a1d      	ldr	r2, [pc, #116]	; (80068fc <prvAddNewTaskToReadyList+0xcc>)
 8006886:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006888:	4b1c      	ldr	r3, [pc, #112]	; (80068fc <prvAddNewTaskToReadyList+0xcc>)
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	2201      	movs	r2, #1
 8006896:	409a      	lsls	r2, r3
 8006898:	4b19      	ldr	r3, [pc, #100]	; (8006900 <prvAddNewTaskToReadyList+0xd0>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4313      	orrs	r3, r2
 800689e:	4a18      	ldr	r2, [pc, #96]	; (8006900 <prvAddNewTaskToReadyList+0xd0>)
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a6:	4613      	mov	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4413      	add	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4a15      	ldr	r2, [pc, #84]	; (8006904 <prvAddNewTaskToReadyList+0xd4>)
 80068b0:	441a      	add	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3304      	adds	r3, #4
 80068b6:	4619      	mov	r1, r3
 80068b8:	4610      	mov	r0, r2
 80068ba:	f7fe fefe 	bl	80056ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068be:	f001 ff41 	bl	8008744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068c2:	4b0d      	ldr	r3, [pc, #52]	; (80068f8 <prvAddNewTaskToReadyList+0xc8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00e      	beq.n	80068e8 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068ca:	4b0a      	ldr	r3, [pc, #40]	; (80068f4 <prvAddNewTaskToReadyList+0xc4>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d207      	bcs.n	80068e8 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80068d8:	4b0b      	ldr	r3, [pc, #44]	; (8006908 <prvAddNewTaskToReadyList+0xd8>)
 80068da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068e8:	bf00      	nop
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	24000214 	.word	0x24000214
 80068f4:	24000128 	.word	0x24000128
 80068f8:	24000220 	.word	0x24000220
 80068fc:	24000230 	.word	0x24000230
 8006900:	2400021c 	.word	0x2400021c
 8006904:	2400012c 	.word	0x2400012c
 8006908:	e000ed04 	.word	0xe000ed04

0800690c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006914:	f001 fee6 	bl	80086e4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d102      	bne.n	8006924 <vTaskDelete+0x18>
 800691e:	4b39      	ldr	r3, [pc, #228]	; (8006a04 <vTaskDelete+0xf8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	e000      	b.n	8006926 <vTaskDelete+0x1a>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3304      	adds	r3, #4
 800692c:	4618      	mov	r0, r3
 800692e:	f7fe ff21 	bl	8005774 <uxListRemove>
 8006932:	4603      	mov	r3, r0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d115      	bne.n	8006964 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693c:	4932      	ldr	r1, [pc, #200]	; (8006a08 <vTaskDelete+0xfc>)
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	440b      	add	r3, r1
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10a      	bne.n	8006964 <vTaskDelete+0x58>
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006952:	2201      	movs	r2, #1
 8006954:	fa02 f303 	lsl.w	r3, r2, r3
 8006958:	43da      	mvns	r2, r3
 800695a:	4b2c      	ldr	r3, [pc, #176]	; (8006a0c <vTaskDelete+0x100>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4013      	ands	r3, r2
 8006960:	4a2a      	ldr	r2, [pc, #168]	; (8006a0c <vTaskDelete+0x100>)
 8006962:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	3318      	adds	r3, #24
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe feff 	bl	8005774 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006976:	4b26      	ldr	r3, [pc, #152]	; (8006a10 <vTaskDelete+0x104>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	3301      	adds	r3, #1
 800697c:	4a24      	ldr	r2, [pc, #144]	; (8006a10 <vTaskDelete+0x104>)
 800697e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006980:	4b20      	ldr	r3, [pc, #128]	; (8006a04 <vTaskDelete+0xf8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	429a      	cmp	r2, r3
 8006988:	d10b      	bne.n	80069a2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3304      	adds	r3, #4
 800698e:	4619      	mov	r1, r3
 8006990:	4820      	ldr	r0, [pc, #128]	; (8006a14 <vTaskDelete+0x108>)
 8006992:	f7fe fe92 	bl	80056ba <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006996:	4b20      	ldr	r3, [pc, #128]	; (8006a18 <vTaskDelete+0x10c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3301      	adds	r3, #1
 800699c:	4a1e      	ldr	r2, [pc, #120]	; (8006a18 <vTaskDelete+0x10c>)
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	e009      	b.n	80069b6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80069a2:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <vTaskDelete+0x110>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	3b01      	subs	r3, #1
 80069a8:	4a1c      	ldr	r2, [pc, #112]	; (8006a1c <vTaskDelete+0x110>)
 80069aa:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 fda9 	bl	8007504 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80069b2:	f000 fdb7 	bl	8007524 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80069b6:	f001 fec5 	bl	8008744 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80069ba:	4b19      	ldr	r3, [pc, #100]	; (8006a20 <vTaskDelete+0x114>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01b      	beq.n	80069fa <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 80069c2:	4b10      	ldr	r3, [pc, #64]	; (8006a04 <vTaskDelete+0xf8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d116      	bne.n	80069fa <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80069cc:	4b15      	ldr	r3, [pc, #84]	; (8006a24 <vTaskDelete+0x118>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <vTaskDelete+0xde>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	60bb      	str	r3, [r7, #8]
}
 80069e6:	bf00      	nop
 80069e8:	e7fe      	b.n	80069e8 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 80069ea:	4b0f      	ldr	r3, [pc, #60]	; (8006a28 <vTaskDelete+0x11c>)
 80069ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	f3bf 8f4f 	dsb	sy
 80069f6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80069fa:	bf00      	nop
 80069fc:	3710      	adds	r7, #16
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	24000128 	.word	0x24000128
 8006a08:	2400012c 	.word	0x2400012c
 8006a0c:	2400021c 	.word	0x2400021c
 8006a10:	24000230 	.word	0x24000230
 8006a14:	240001fc 	.word	0x240001fc
 8006a18:	24000210 	.word	0x24000210
 8006a1c:	24000214 	.word	0x24000214
 8006a20:	24000220 	.word	0x24000220
 8006a24:	2400023c 	.word	0x2400023c
 8006a28:	e000ed04 	.word	0xe000ed04

08006a2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006a34:	2300      	movs	r3, #0
 8006a36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d017      	beq.n	8006a6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006a3e:	4b13      	ldr	r3, [pc, #76]	; (8006a8c <vTaskDelay+0x60>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <vTaskDelay+0x30>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	60bb      	str	r3, [r7, #8]
}
 8006a58:	bf00      	nop
 8006a5a:	e7fe      	b.n	8006a5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006a5c:	f000 f8b0 	bl	8006bc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006a60:	2100      	movs	r1, #0
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f000 fff6 	bl	8007a54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006a68:	f000 f8b8 	bl	8006bdc <xTaskResumeAll>
 8006a6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d107      	bne.n	8006a84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006a74:	4b06      	ldr	r3, [pc, #24]	; (8006a90 <vTaskDelay+0x64>)
 8006a76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7a:	601a      	str	r2, [r3, #0]
 8006a7c:	f3bf 8f4f 	dsb	sy
 8006a80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	2400023c 	.word	0x2400023c
 8006a90:	e000ed04 	.word	0xe000ed04

08006a94 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b088      	sub	sp, #32
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10a      	bne.n	8006abc <eTaskGetState+0x28>
	__asm volatile
 8006aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aaa:	f383 8811 	msr	BASEPRI, r3
 8006aae:	f3bf 8f6f 	isb	sy
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	60bb      	str	r3, [r7, #8]
}
 8006ab8:	bf00      	nop
 8006aba:	e7fe      	b.n	8006aba <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8006abc:	4b18      	ldr	r3, [pc, #96]	; (8006b20 <eTaskGetState+0x8c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d102      	bne.n	8006acc <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	e023      	b.n	8006b14 <eTaskGetState+0x80>
		}
		else
		{
			taskENTER_CRITICAL();
 8006acc:	f001 fe0a 	bl	80086e4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	695b      	ldr	r3, [r3, #20]
 8006ad4:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006ad6:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <eTaskGetState+0x90>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8006adc:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <eTaskGetState+0x94>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006ae2:	f001 fe2f 	bl	8008744 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006ae6:	697a      	ldr	r2, [r7, #20]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d003      	beq.n	8006af6 <eTaskGetState+0x62>
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d102      	bne.n	8006afc <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006af6:	2302      	movs	r3, #2
 8006af8:	77fb      	strb	r3, [r7, #31]
 8006afa:	e00b      	b.n	8006b14 <eTaskGetState+0x80>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	4a0b      	ldr	r2, [pc, #44]	; (8006b2c <eTaskGetState+0x98>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d002      	beq.n	8006b0a <eTaskGetState+0x76>
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d102      	bne.n	8006b10 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006b0a:	2304      	movs	r3, #4
 8006b0c:	77fb      	strb	r3, [r7, #31]
 8006b0e:	e001      	b.n	8006b14 <eTaskGetState+0x80>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006b10:	2301      	movs	r3, #1
 8006b12:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006b14:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006b16:	4618      	mov	r0, r3
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	24000128 	.word	0x24000128
 8006b24:	240001e0 	.word	0x240001e0
 8006b28:	240001e4 	.word	0x240001e4
 8006b2c:	240001fc 	.word	0x240001fc

08006b30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b086      	sub	sp, #24
 8006b34:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006b36:	4b1c      	ldr	r3, [pc, #112]	; (8006ba8 <vTaskStartScheduler+0x78>)
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	2300      	movs	r3, #0
 8006b40:	2280      	movs	r2, #128	; 0x80
 8006b42:	491a      	ldr	r1, [pc, #104]	; (8006bac <vTaskStartScheduler+0x7c>)
 8006b44:	481a      	ldr	r0, [pc, #104]	; (8006bb0 <vTaskStartScheduler+0x80>)
 8006b46:	f7ff fda3 	bl	8006690 <xTaskCreate>
 8006b4a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d116      	bne.n	8006b80 <vTaskStartScheduler+0x50>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	60bb      	str	r3, [r7, #8]
}
 8006b64:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006b66:	4b13      	ldr	r3, [pc, #76]	; (8006bb4 <vTaskStartScheduler+0x84>)
 8006b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b6c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006b6e:	4b12      	ldr	r3, [pc, #72]	; (8006bb8 <vTaskStartScheduler+0x88>)
 8006b70:	2201      	movs	r2, #1
 8006b72:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006b74:	4b11      	ldr	r3, [pc, #68]	; (8006bbc <vTaskStartScheduler+0x8c>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006b7a:	f001 fd11 	bl	80085a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006b7e:	e00e      	b.n	8006b9e <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b86:	d10a      	bne.n	8006b9e <vTaskStartScheduler+0x6e>
	__asm volatile
 8006b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8c:	f383 8811 	msr	BASEPRI, r3
 8006b90:	f3bf 8f6f 	isb	sy
 8006b94:	f3bf 8f4f 	dsb	sy
 8006b98:	607b      	str	r3, [r7, #4]
}
 8006b9a:	bf00      	nop
 8006b9c:	e7fe      	b.n	8006b9c <vTaskStartScheduler+0x6c>
}
 8006b9e:	bf00      	nop
 8006ba0:	3710      	adds	r7, #16
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	bd80      	pop	{r7, pc}
 8006ba6:	bf00      	nop
 8006ba8:	24000238 	.word	0x24000238
 8006bac:	08017c4c 	.word	0x08017c4c
 8006bb0:	08007279 	.word	0x08007279
 8006bb4:	24000234 	.word	0x24000234
 8006bb8:	24000220 	.word	0x24000220
 8006bbc:	24000218 	.word	0x24000218

08006bc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006bc4:	4b04      	ldr	r3, [pc, #16]	; (8006bd8 <vTaskSuspendAll+0x18>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	4a03      	ldr	r2, [pc, #12]	; (8006bd8 <vTaskSuspendAll+0x18>)
 8006bcc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006bce:	bf00      	nop
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	2400023c 	.word	0x2400023c

08006bdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006be2:	2300      	movs	r3, #0
 8006be4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006be6:	2300      	movs	r3, #0
 8006be8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006bea:	4b41      	ldr	r3, [pc, #260]	; (8006cf0 <xTaskResumeAll+0x114>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <xTaskResumeAll+0x2c>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	603b      	str	r3, [r7, #0]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c08:	f001 fd6c 	bl	80086e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c0c:	4b38      	ldr	r3, [pc, #224]	; (8006cf0 <xTaskResumeAll+0x114>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3b01      	subs	r3, #1
 8006c12:	4a37      	ldr	r2, [pc, #220]	; (8006cf0 <xTaskResumeAll+0x114>)
 8006c14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c16:	4b36      	ldr	r3, [pc, #216]	; (8006cf0 <xTaskResumeAll+0x114>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d161      	bne.n	8006ce2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c1e:	4b35      	ldr	r3, [pc, #212]	; (8006cf4 <xTaskResumeAll+0x118>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d05d      	beq.n	8006ce2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c26:	e02e      	b.n	8006c86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c28:	4b33      	ldr	r3, [pc, #204]	; (8006cf8 <xTaskResumeAll+0x11c>)
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	3318      	adds	r3, #24
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7fe fd9d 	bl	8005774 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fd98 	bl	8005774 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c48:	2201      	movs	r2, #1
 8006c4a:	409a      	lsls	r2, r3
 8006c4c:	4b2b      	ldr	r3, [pc, #172]	; (8006cfc <xTaskResumeAll+0x120>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	4a2a      	ldr	r2, [pc, #168]	; (8006cfc <xTaskResumeAll+0x120>)
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4a27      	ldr	r2, [pc, #156]	; (8006d00 <xTaskResumeAll+0x124>)
 8006c64:	441a      	add	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3304      	adds	r3, #4
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	4610      	mov	r0, r2
 8006c6e:	f7fe fd24 	bl	80056ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c76:	4b23      	ldr	r3, [pc, #140]	; (8006d04 <xTaskResumeAll+0x128>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d302      	bcc.n	8006c86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006c80:	4b21      	ldr	r3, [pc, #132]	; (8006d08 <xTaskResumeAll+0x12c>)
 8006c82:	2201      	movs	r2, #1
 8006c84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006c86:	4b1c      	ldr	r3, [pc, #112]	; (8006cf8 <xTaskResumeAll+0x11c>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1cc      	bne.n	8006c28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006c94:	f000 fc46 	bl	8007524 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006c98:	4b1c      	ldr	r3, [pc, #112]	; (8006d0c <xTaskResumeAll+0x130>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d010      	beq.n	8006cc6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ca4:	f000 f8d2 	bl	8006e4c <xTaskIncrementTick>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006cae:	4b16      	ldr	r3, [pc, #88]	; (8006d08 <xTaskResumeAll+0x12c>)
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d1f1      	bne.n	8006ca4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006cc0:	4b12      	ldr	r3, [pc, #72]	; (8006d0c <xTaskResumeAll+0x130>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006cc6:	4b10      	ldr	r3, [pc, #64]	; (8006d08 <xTaskResumeAll+0x12c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006cd2:	4b0f      	ldr	r3, [pc, #60]	; (8006d10 <xTaskResumeAll+0x134>)
 8006cd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ce2:	f001 fd2f 	bl	8008744 <vPortExitCritical>

	return xAlreadyYielded;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3710      	adds	r7, #16
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	2400023c 	.word	0x2400023c
 8006cf4:	24000214 	.word	0x24000214
 8006cf8:	240001e8 	.word	0x240001e8
 8006cfc:	2400021c 	.word	0x2400021c
 8006d00:	2400012c 	.word	0x2400012c
 8006d04:	24000128 	.word	0x24000128
 8006d08:	24000228 	.word	0x24000228
 8006d0c:	24000224 	.word	0x24000224
 8006d10:	e000ed04 	.word	0xe000ed04

08006d14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006d1a:	4b05      	ldr	r3, [pc, #20]	; (8006d30 <xTaskGetTickCount+0x1c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006d20:	687b      	ldr	r3, [r7, #4]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	370c      	adds	r7, #12
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	24000218 	.word	0x24000218

08006d34 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d3a:	f001 fdb5 	bl	80088a8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006d3e:	2300      	movs	r3, #0
 8006d40:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006d42:	4b04      	ldr	r3, [pc, #16]	; (8006d54 <xTaskGetTickCountFromISR+0x20>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d48:	683b      	ldr	r3, [r7, #0]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3708      	adds	r7, #8
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}
 8006d52:	bf00      	nop
 8006d54:	24000218 	.word	0x24000218

08006d58 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8006d64:	2300      	movs	r3, #0
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	2307      	movs	r3, #7
 8006d6a:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8006d6c:	f7ff ff28 	bl	8006bc0 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8006d70:	4b31      	ldr	r3, [pc, #196]	; (8006e38 <uxTaskGetSystemState+0xe0>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68ba      	ldr	r2, [r7, #8]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d357      	bcc.n	8006e2a <uxTaskGetSystemState+0xd2>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4613      	mov	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	1898      	adds	r0, r3, r2
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4613      	mov	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4a28      	ldr	r2, [pc, #160]	; (8006e3c <uxTaskGetSystemState+0xe4>)
 8006d9c:	4413      	add	r3, r2
 8006d9e:	2201      	movs	r2, #1
 8006da0:	4619      	mov	r1, r3
 8006da2:	f000 fb41 	bl	8007428 <prvListTasksWithinSingleList>
 8006da6:	4602      	mov	r2, r0
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	4413      	add	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1e2      	bne.n	8006d7a <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4613      	mov	r3, r2
 8006db8:	00db      	lsls	r3, r3, #3
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	4a1e      	ldr	r2, [pc, #120]	; (8006e40 <uxTaskGetSystemState+0xe8>)
 8006dc6:	6811      	ldr	r1, [r2, #0]
 8006dc8:	2202      	movs	r2, #2
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 fb2c 	bl	8007428 <prvListTasksWithinSingleList>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	461a      	mov	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4413      	add	r3, r2
 8006de8:	4a16      	ldr	r2, [pc, #88]	; (8006e44 <uxTaskGetSystemState+0xec>)
 8006dea:	6811      	ldr	r1, [r2, #0]
 8006dec:	2202      	movs	r2, #2
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 fb1a 	bl	8007428 <prvListTasksWithinSingleList>
 8006df4:	4602      	mov	r2, r0
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	4413      	add	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	00db      	lsls	r3, r3, #3
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	461a      	mov	r2, r3
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	2204      	movs	r2, #4
 8006e0e:	490e      	ldr	r1, [pc, #56]	; (8006e48 <uxTaskGetSystemState+0xf0>)
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fb09 	bl	8007428 <prvListTasksWithinSingleList>
 8006e16:	4602      	mov	r2, r0
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <uxTaskGetSystemState+0xd2>
					{
						*pulTotalRunTime = 0;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8006e2a:	f7ff fed7 	bl	8006bdc <xTaskResumeAll>

		return uxTask;
 8006e2e:	697b      	ldr	r3, [r7, #20]
	}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	24000214 	.word	0x24000214
 8006e3c:	2400012c 	.word	0x2400012c
 8006e40:	240001e0 	.word	0x240001e0
 8006e44:	240001e4 	.word	0x240001e4
 8006e48:	240001fc 	.word	0x240001fc

08006e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b086      	sub	sp, #24
 8006e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e52:	2300      	movs	r3, #0
 8006e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e56:	4b4e      	ldr	r3, [pc, #312]	; (8006f90 <xTaskIncrementTick+0x144>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f040 808e 	bne.w	8006f7c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e60:	4b4c      	ldr	r3, [pc, #304]	; (8006f94 <xTaskIncrementTick+0x148>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3301      	adds	r3, #1
 8006e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e68:	4a4a      	ldr	r2, [pc, #296]	; (8006f94 <xTaskIncrementTick+0x148>)
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d120      	bne.n	8006eb6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e74:	4b48      	ldr	r3, [pc, #288]	; (8006f98 <xTaskIncrementTick+0x14c>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00a      	beq.n	8006e94 <xTaskIncrementTick+0x48>
	__asm volatile
 8006e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e82:	f383 8811 	msr	BASEPRI, r3
 8006e86:	f3bf 8f6f 	isb	sy
 8006e8a:	f3bf 8f4f 	dsb	sy
 8006e8e:	603b      	str	r3, [r7, #0]
}
 8006e90:	bf00      	nop
 8006e92:	e7fe      	b.n	8006e92 <xTaskIncrementTick+0x46>
 8006e94:	4b40      	ldr	r3, [pc, #256]	; (8006f98 <xTaskIncrementTick+0x14c>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	4b40      	ldr	r3, [pc, #256]	; (8006f9c <xTaskIncrementTick+0x150>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a3e      	ldr	r2, [pc, #248]	; (8006f98 <xTaskIncrementTick+0x14c>)
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	4a3e      	ldr	r2, [pc, #248]	; (8006f9c <xTaskIncrementTick+0x150>)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	4b3d      	ldr	r3, [pc, #244]	; (8006fa0 <xTaskIncrementTick+0x154>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	3301      	adds	r3, #1
 8006eae:	4a3c      	ldr	r2, [pc, #240]	; (8006fa0 <xTaskIncrementTick+0x154>)
 8006eb0:	6013      	str	r3, [r2, #0]
 8006eb2:	f000 fb37 	bl	8007524 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006eb6:	4b3b      	ldr	r3, [pc, #236]	; (8006fa4 <xTaskIncrementTick+0x158>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	693a      	ldr	r2, [r7, #16]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d348      	bcc.n	8006f52 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ec0:	4b35      	ldr	r3, [pc, #212]	; (8006f98 <xTaskIncrementTick+0x14c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d104      	bne.n	8006ed4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eca:	4b36      	ldr	r3, [pc, #216]	; (8006fa4 <xTaskIncrementTick+0x158>)
 8006ecc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ed0:	601a      	str	r2, [r3, #0]
					break;
 8006ed2:	e03e      	b.n	8006f52 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed4:	4b30      	ldr	r3, [pc, #192]	; (8006f98 <xTaskIncrementTick+0x14c>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68db      	ldr	r3, [r3, #12]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ee4:	693a      	ldr	r2, [r7, #16]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d203      	bcs.n	8006ef4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006eec:	4a2d      	ldr	r2, [pc, #180]	; (8006fa4 <xTaskIncrementTick+0x158>)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ef2:	e02e      	b.n	8006f52 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f7fe fc3b 	bl	8005774 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d004      	beq.n	8006f10 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	3318      	adds	r3, #24
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe fc32 	bl	8005774 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f14:	2201      	movs	r2, #1
 8006f16:	409a      	lsls	r2, r3
 8006f18:	4b23      	ldr	r3, [pc, #140]	; (8006fa8 <xTaskIncrementTick+0x15c>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	4a22      	ldr	r2, [pc, #136]	; (8006fa8 <xTaskIncrementTick+0x15c>)
 8006f20:	6013      	str	r3, [r2, #0]
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4a1f      	ldr	r2, [pc, #124]	; (8006fac <xTaskIncrementTick+0x160>)
 8006f30:	441a      	add	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4619      	mov	r1, r3
 8006f38:	4610      	mov	r0, r2
 8006f3a:	f7fe fbbe 	bl	80056ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f42:	4b1b      	ldr	r3, [pc, #108]	; (8006fb0 <xTaskIncrementTick+0x164>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d3b9      	bcc.n	8006ec0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f50:	e7b6      	b.n	8006ec0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f52:	4b17      	ldr	r3, [pc, #92]	; (8006fb0 <xTaskIncrementTick+0x164>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f58:	4914      	ldr	r1, [pc, #80]	; (8006fac <xTaskIncrementTick+0x160>)
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	4413      	add	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	440b      	add	r3, r1
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d901      	bls.n	8006f6e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f6e:	4b11      	ldr	r3, [pc, #68]	; (8006fb4 <xTaskIncrementTick+0x168>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d007      	beq.n	8006f86 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006f76:	2301      	movs	r3, #1
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	e004      	b.n	8006f86 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f7c:	4b0e      	ldr	r3, [pc, #56]	; (8006fb8 <xTaskIncrementTick+0x16c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	4a0d      	ldr	r2, [pc, #52]	; (8006fb8 <xTaskIncrementTick+0x16c>)
 8006f84:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f86:	697b      	ldr	r3, [r7, #20]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	2400023c 	.word	0x2400023c
 8006f94:	24000218 	.word	0x24000218
 8006f98:	240001e0 	.word	0x240001e0
 8006f9c:	240001e4 	.word	0x240001e4
 8006fa0:	2400022c 	.word	0x2400022c
 8006fa4:	24000234 	.word	0x24000234
 8006fa8:	2400021c 	.word	0x2400021c
 8006fac:	2400012c 	.word	0x2400012c
 8006fb0:	24000128 	.word	0x24000128
 8006fb4:	24000228 	.word	0x24000228
 8006fb8:	24000224 	.word	0x24000224

08006fbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fc2:	4b27      	ldr	r3, [pc, #156]	; (8007060 <vTaskSwitchContext+0xa4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fca:	4b26      	ldr	r3, [pc, #152]	; (8007064 <vTaskSwitchContext+0xa8>)
 8006fcc:	2201      	movs	r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fd0:	e03f      	b.n	8007052 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8006fd2:	4b24      	ldr	r3, [pc, #144]	; (8007064 <vTaskSwitchContext+0xa8>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd8:	4b23      	ldr	r3, [pc, #140]	; (8007068 <vTaskSwitchContext+0xac>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	fab3 f383 	clz	r3, r3
 8006fe4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fe6:	7afb      	ldrb	r3, [r7, #11]
 8006fe8:	f1c3 031f 	rsb	r3, r3, #31
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	491f      	ldr	r1, [pc, #124]	; (800706c <vTaskSwitchContext+0xb0>)
 8006ff0:	697a      	ldr	r2, [r7, #20]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	440b      	add	r3, r1
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10a      	bne.n	8007018 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007006:	f383 8811 	msr	BASEPRI, r3
 800700a:	f3bf 8f6f 	isb	sy
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	607b      	str	r3, [r7, #4]
}
 8007014:	bf00      	nop
 8007016:	e7fe      	b.n	8007016 <vTaskSwitchContext+0x5a>
 8007018:	697a      	ldr	r2, [r7, #20]
 800701a:	4613      	mov	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4413      	add	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4a12      	ldr	r2, [pc, #72]	; (800706c <vTaskSwitchContext+0xb0>)
 8007024:	4413      	add	r3, r2
 8007026:	613b      	str	r3, [r7, #16]
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	685a      	ldr	r2, [r3, #4]
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	605a      	str	r2, [r3, #4]
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	685a      	ldr	r2, [r3, #4]
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	3308      	adds	r3, #8
 800703a:	429a      	cmp	r2, r3
 800703c:	d104      	bne.n	8007048 <vTaskSwitchContext+0x8c>
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	685a      	ldr	r2, [r3, #4]
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	605a      	str	r2, [r3, #4]
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	68db      	ldr	r3, [r3, #12]
 800704e:	4a08      	ldr	r2, [pc, #32]	; (8007070 <vTaskSwitchContext+0xb4>)
 8007050:	6013      	str	r3, [r2, #0]
}
 8007052:	bf00      	nop
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	2400023c 	.word	0x2400023c
 8007064:	24000228 	.word	0x24000228
 8007068:	2400021c 	.word	0x2400021c
 800706c:	2400012c 	.word	0x2400012c
 8007070:	24000128 	.word	0x24000128

08007074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10a      	bne.n	800709a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	60fb      	str	r3, [r7, #12]
}
 8007096:	bf00      	nop
 8007098:	e7fe      	b.n	8007098 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800709a:	4b07      	ldr	r3, [pc, #28]	; (80070b8 <vTaskPlaceOnEventList+0x44>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	3318      	adds	r3, #24
 80070a0:	4619      	mov	r1, r3
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f7fe fb2d 	bl	8005702 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070a8:	2101      	movs	r1, #1
 80070aa:	6838      	ldr	r0, [r7, #0]
 80070ac:	f000 fcd2 	bl	8007a54 <prvAddCurrentTaskToDelayedList>
}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	24000128 	.word	0x24000128

080070bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	60fb      	str	r3, [r7, #12]
}
 80070e4:	bf00      	nop
 80070e6:	e7fe      	b.n	80070e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	3318      	adds	r3, #24
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fe fb41 	bl	8005774 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070f2:	4b1d      	ldr	r3, [pc, #116]	; (8007168 <xTaskRemoveFromEventList+0xac>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d11c      	bne.n	8007134 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	3304      	adds	r3, #4
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fe fb38 	bl	8005774 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007108:	2201      	movs	r2, #1
 800710a:	409a      	lsls	r2, r3
 800710c:	4b17      	ldr	r3, [pc, #92]	; (800716c <xTaskRemoveFromEventList+0xb0>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4313      	orrs	r3, r2
 8007112:	4a16      	ldr	r2, [pc, #88]	; (800716c <xTaskRemoveFromEventList+0xb0>)
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711a:	4613      	mov	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	4a13      	ldr	r2, [pc, #76]	; (8007170 <xTaskRemoveFromEventList+0xb4>)
 8007124:	441a      	add	r2, r3
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	3304      	adds	r3, #4
 800712a:	4619      	mov	r1, r3
 800712c:	4610      	mov	r0, r2
 800712e:	f7fe fac4 	bl	80056ba <vListInsertEnd>
 8007132:	e005      	b.n	8007140 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	3318      	adds	r3, #24
 8007138:	4619      	mov	r1, r3
 800713a:	480e      	ldr	r0, [pc, #56]	; (8007174 <xTaskRemoveFromEventList+0xb8>)
 800713c:	f7fe fabd 	bl	80056ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007144:	4b0c      	ldr	r3, [pc, #48]	; (8007178 <xTaskRemoveFromEventList+0xbc>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714a:	429a      	cmp	r2, r3
 800714c:	d905      	bls.n	800715a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800714e:	2301      	movs	r3, #1
 8007150:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007152:	4b0a      	ldr	r3, [pc, #40]	; (800717c <xTaskRemoveFromEventList+0xc0>)
 8007154:	2201      	movs	r2, #1
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	e001      	b.n	800715e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800715e:	697b      	ldr	r3, [r7, #20]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3718      	adds	r7, #24
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	2400023c 	.word	0x2400023c
 800716c:	2400021c 	.word	0x2400021c
 8007170:	2400012c 	.word	0x2400012c
 8007174:	240001e8 	.word	0x240001e8
 8007178:	24000128 	.word	0x24000128
 800717c:	24000228 	.word	0x24000228

08007180 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007188:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <vTaskInternalSetTimeOutState+0x24>)
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007190:	4b05      	ldr	r3, [pc, #20]	; (80071a8 <vTaskInternalSetTimeOutState+0x28>)
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	605a      	str	r2, [r3, #4]
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr
 80071a4:	2400022c 	.word	0x2400022c
 80071a8:	24000218 	.word	0x24000218

080071ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	613b      	str	r3, [r7, #16]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10a      	bne.n	80071ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	60fb      	str	r3, [r7, #12]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80071ee:	f001 fa79 	bl	80086e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071f2:	4b19      	ldr	r3, [pc, #100]	; (8007258 <xTaskCheckForTimeOut+0xac>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	4b15      	ldr	r3, [pc, #84]	; (800725c <xTaskCheckForTimeOut+0xb0>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	429a      	cmp	r2, r3
 800720c:	d007      	beq.n	800721e <xTaskCheckForTimeOut+0x72>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	429a      	cmp	r2, r3
 8007216:	d302      	bcc.n	800721e <xTaskCheckForTimeOut+0x72>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007218:	2301      	movs	r3, #1
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	e015      	b.n	800724a <xTaskCheckForTimeOut+0x9e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	429a      	cmp	r2, r3
 8007226:	d20b      	bcs.n	8007240 <xTaskCheckForTimeOut+0x94>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	1ad2      	subs	r2, r2, r3
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f7ff ffa3 	bl	8007180 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800723a:	2300      	movs	r3, #0
 800723c:	61fb      	str	r3, [r7, #28]
 800723e:	e004      	b.n	800724a <xTaskCheckForTimeOut+0x9e>
		}
		else
		{
			*pxTicksToWait = 0;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007246:	2301      	movs	r3, #1
 8007248:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800724a:	f001 fa7b 	bl	8008744 <vPortExitCritical>

	return xReturn;
 800724e:	69fb      	ldr	r3, [r7, #28]
}
 8007250:	4618      	mov	r0, r3
 8007252:	3720      	adds	r7, #32
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	24000218 	.word	0x24000218
 800725c:	2400022c 	.word	0x2400022c

08007260 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007264:	4b03      	ldr	r3, [pc, #12]	; (8007274 <vTaskMissedYield+0x14>)
 8007266:	2201      	movs	r2, #1
 8007268:	601a      	str	r2, [r3, #0]
}
 800726a:	bf00      	nop
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr
 8007274:	24000228 	.word	0x24000228

08007278 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007280:	f000 f84c 	bl	800731c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007284:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <prvIdleTask+0x28>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b01      	cmp	r3, #1
 800728a:	d9f9      	bls.n	8007280 <prvIdleTask+0x8>
			{
				taskYIELD();
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <prvIdleTask+0x2c>)
 800728e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007292:	601a      	str	r2, [r3, #0]
 8007294:	f3bf 8f4f 	dsb	sy
 8007298:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800729c:	e7f0      	b.n	8007280 <prvIdleTask+0x8>
 800729e:	bf00      	nop
 80072a0:	2400012c 	.word	0x2400012c
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b082      	sub	sp, #8
 80072ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072ae:	2300      	movs	r3, #0
 80072b0:	607b      	str	r3, [r7, #4]
 80072b2:	e00c      	b.n	80072ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	4613      	mov	r3, r2
 80072b8:	009b      	lsls	r3, r3, #2
 80072ba:	4413      	add	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4a10      	ldr	r2, [pc, #64]	; (8007300 <prvInitialiseTaskLists+0x58>)
 80072c0:	4413      	add	r3, r2
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fe f9cc 	bl	8005660 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	3301      	adds	r3, #1
 80072cc:	607b      	str	r3, [r7, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2b06      	cmp	r3, #6
 80072d2:	d9ef      	bls.n	80072b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072d4:	480b      	ldr	r0, [pc, #44]	; (8007304 <prvInitialiseTaskLists+0x5c>)
 80072d6:	f7fe f9c3 	bl	8005660 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072da:	480b      	ldr	r0, [pc, #44]	; (8007308 <prvInitialiseTaskLists+0x60>)
 80072dc:	f7fe f9c0 	bl	8005660 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072e0:	480a      	ldr	r0, [pc, #40]	; (800730c <prvInitialiseTaskLists+0x64>)
 80072e2:	f7fe f9bd 	bl	8005660 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80072e6:	480a      	ldr	r0, [pc, #40]	; (8007310 <prvInitialiseTaskLists+0x68>)
 80072e8:	f7fe f9ba 	bl	8005660 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072ec:	4b09      	ldr	r3, [pc, #36]	; (8007314 <prvInitialiseTaskLists+0x6c>)
 80072ee:	4a05      	ldr	r2, [pc, #20]	; (8007304 <prvInitialiseTaskLists+0x5c>)
 80072f0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072f2:	4b09      	ldr	r3, [pc, #36]	; (8007318 <prvInitialiseTaskLists+0x70>)
 80072f4:	4a04      	ldr	r2, [pc, #16]	; (8007308 <prvInitialiseTaskLists+0x60>)
 80072f6:	601a      	str	r2, [r3, #0]
}
 80072f8:	bf00      	nop
 80072fa:	3708      	adds	r7, #8
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}
 8007300:	2400012c 	.word	0x2400012c
 8007304:	240001b8 	.word	0x240001b8
 8007308:	240001cc 	.word	0x240001cc
 800730c:	240001e8 	.word	0x240001e8
 8007310:	240001fc 	.word	0x240001fc
 8007314:	240001e0 	.word	0x240001e0
 8007318:	240001e4 	.word	0x240001e4

0800731c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007322:	e019      	b.n	8007358 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007324:	f001 f9de 	bl	80086e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007328:	4b10      	ldr	r3, [pc, #64]	; (800736c <prvCheckTasksWaitingTermination+0x50>)
 800732a:	68db      	ldr	r3, [r3, #12]
 800732c:	68db      	ldr	r3, [r3, #12]
 800732e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3304      	adds	r3, #4
 8007334:	4618      	mov	r0, r3
 8007336:	f7fe fa1d 	bl	8005774 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800733a:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <prvCheckTasksWaitingTermination+0x54>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	3b01      	subs	r3, #1
 8007340:	4a0b      	ldr	r2, [pc, #44]	; (8007370 <prvCheckTasksWaitingTermination+0x54>)
 8007342:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007344:	4b0b      	ldr	r3, [pc, #44]	; (8007374 <prvCheckTasksWaitingTermination+0x58>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3b01      	subs	r3, #1
 800734a:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <prvCheckTasksWaitingTermination+0x58>)
 800734c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800734e:	f001 f9f9 	bl	8008744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f8d6 	bl	8007504 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007358:	4b06      	ldr	r3, [pc, #24]	; (8007374 <prvCheckTasksWaitingTermination+0x58>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d1e1      	bne.n	8007324 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	3708      	adds	r7, #8
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	240001fc 	.word	0x240001fc
 8007370:	24000214 	.word	0x24000214
 8007374:	24000210 	.word	0x24000210

08007378 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8007378:	b580      	push	{r7, lr}
 800737a:	b086      	sub	sp, #24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d102      	bne.n	8007392 <vTaskGetInfo+0x1a>
 800738c:	4b25      	ldr	r3, [pc, #148]	; (8007424 <vTaskGetInfo+0xac>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	e000      	b.n	8007394 <vTaskGetInfo+0x1c>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	697a      	ldr	r2, [r7, #20]
 800739a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	2200      	movs	r2, #0
 80073ca:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	2b05      	cmp	r3, #5
 80073d0:	d00c      	beq.n	80073ec <vTaskGetInfo+0x74>
		{
			if( pxTCB == pxCurrentTCB )
 80073d2:	4b14      	ldr	r3, [pc, #80]	; (8007424 <vTaskGetInfo+0xac>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d103      	bne.n	80073e4 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	2200      	movs	r2, #0
 80073e0:	731a      	strb	r2, [r3, #12]
 80073e2:	e00a      	b.n	80073fa <vTaskGetInfo+0x82>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	78fa      	ldrb	r2, [r7, #3]
 80073e8:	731a      	strb	r2, [r3, #12]
 80073ea:	e006      	b.n	80073fa <vTaskGetInfo+0x82>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80073ec:	6978      	ldr	r0, [r7, #20]
 80073ee:	f7ff fb51 	bl	8006a94 <eTaskGetState>
 80073f2:	4603      	mov	r3, r0
 80073f4:	461a      	mov	r2, r3
 80073f6:	68bb      	ldr	r3, [r7, #8]
 80073f8:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d009      	beq.n	8007414 <vTaskGetInfo+0x9c>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	4618      	mov	r0, r3
 8007406:	f000 f861 	bl	80074cc <prvTaskCheckFreeStackSpace>
 800740a:	4603      	mov	r3, r0
 800740c:	461a      	mov	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8007412:	e002      	b.n	800741a <vTaskGetInfo+0xa2>
			pxTaskStatus->usStackHighWaterMark = 0;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	2200      	movs	r2, #0
 8007418:	841a      	strh	r2, [r3, #32]
	}
 800741a:	bf00      	nop
 800741c:	3718      	adds	r7, #24
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	24000128 	.word	0x24000128

08007428 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08a      	sub	sp, #40	; 0x28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	4613      	mov	r3, r2
 8007434:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d03f      	beq.n	80074c2 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	623b      	str	r3, [r7, #32]
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	685a      	ldr	r2, [r3, #4]
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	605a      	str	r2, [r3, #4]
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	3308      	adds	r3, #8
 8007458:	429a      	cmp	r2, r3
 800745a:	d104      	bne.n	8007466 <prvListTasksWithinSingleList+0x3e>
 800745c:	6a3b      	ldr	r3, [r7, #32]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	605a      	str	r2, [r3, #4]
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	61bb      	str	r3, [r7, #24]
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	605a      	str	r2, [r3, #4]
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	3308      	adds	r3, #8
 8007484:	429a      	cmp	r2, r3
 8007486:	d104      	bne.n	8007492 <prvListTasksWithinSingleList+0x6a>
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	69bb      	ldr	r3, [r7, #24]
 8007490:	605a      	str	r2, [r3, #4]
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	685b      	ldr	r3, [r3, #4]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800749a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800749c:	4613      	mov	r3, r2
 800749e:	00db      	lsls	r3, r3, #3
 80074a0:	4413      	add	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	461a      	mov	r2, r3
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	1899      	adds	r1, r3, r2
 80074aa:	79fb      	ldrb	r3, [r7, #7]
 80074ac:	2201      	movs	r2, #1
 80074ae:	6978      	ldr	r0, [r7, #20]
 80074b0:	f7ff ff62 	bl	8007378 <vTaskGetInfo>
				uxTask++;
 80074b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b6:	3301      	adds	r3, #1
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d1d5      	bne.n	800746e <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3728      	adds	r7, #40	; 0x28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80074d8:	e005      	b.n	80074e6 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	3301      	adds	r3, #1
 80074de:	607b      	str	r3, [r7, #4]
			ulCount++;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	3301      	adds	r3, #1
 80074e4:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2ba5      	cmp	r3, #165	; 0xa5
 80074ec:	d0f5      	beq.n	80074da <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	089b      	lsrs	r3, r3, #2
 80074f2:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	b29b      	uxth	r3, r3
	}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007510:	4618      	mov	r0, r3
 8007512:	f000 fe99 	bl	8008248 <vPortFree>
			vPortFree( pxTCB );
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fe96 	bl	8008248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800751c:	bf00      	nop
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800752a:	4b0c      	ldr	r3, [pc, #48]	; (800755c <prvResetNextTaskUnblockTime+0x38>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007534:	4b0a      	ldr	r3, [pc, #40]	; (8007560 <prvResetNextTaskUnblockTime+0x3c>)
 8007536:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800753a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800753c:	e008      	b.n	8007550 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753e:	4b07      	ldr	r3, [pc, #28]	; (800755c <prvResetNextTaskUnblockTime+0x38>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4a04      	ldr	r2, [pc, #16]	; (8007560 <prvResetNextTaskUnblockTime+0x3c>)
 800754e:	6013      	str	r3, [r2, #0]
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	240001e0 	.word	0x240001e0
 8007560:	24000234 	.word	0x24000234

08007564 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800756a:	4b0b      	ldr	r3, [pc, #44]	; (8007598 <xTaskGetSchedulerState+0x34>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d102      	bne.n	8007578 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007572:	2301      	movs	r3, #1
 8007574:	607b      	str	r3, [r7, #4]
 8007576:	e008      	b.n	800758a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007578:	4b08      	ldr	r3, [pc, #32]	; (800759c <xTaskGetSchedulerState+0x38>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d102      	bne.n	8007586 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007580:	2302      	movs	r3, #2
 8007582:	607b      	str	r3, [r7, #4]
 8007584:	e001      	b.n	800758a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007586:	2300      	movs	r3, #0
 8007588:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800758a:	687b      	ldr	r3, [r7, #4]
	}
 800758c:	4618      	mov	r0, r3
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	24000220 	.word	0x24000220
 800759c:	2400023c 	.word	0x2400023c

080075a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d05e      	beq.n	8007674 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ba:	4b31      	ldr	r3, [pc, #196]	; (8007680 <xTaskPriorityInherit+0xe0>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d24e      	bcs.n	8007662 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	699b      	ldr	r3, [r3, #24]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	db06      	blt.n	80075da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075cc:	4b2c      	ldr	r3, [pc, #176]	; (8007680 <xTaskPriorityInherit+0xe0>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d2:	f1c3 0207 	rsb	r2, r3, #7
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	6959      	ldr	r1, [r3, #20]
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e2:	4613      	mov	r3, r2
 80075e4:	009b      	lsls	r3, r3, #2
 80075e6:	4413      	add	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4a26      	ldr	r2, [pc, #152]	; (8007684 <xTaskPriorityInherit+0xe4>)
 80075ec:	4413      	add	r3, r2
 80075ee:	4299      	cmp	r1, r3
 80075f0:	d12f      	bne.n	8007652 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	3304      	adds	r3, #4
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fe f8bc 	bl	8005774 <uxListRemove>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007606:	2201      	movs	r2, #1
 8007608:	fa02 f303 	lsl.w	r3, r2, r3
 800760c:	43da      	mvns	r2, r3
 800760e:	4b1e      	ldr	r3, [pc, #120]	; (8007688 <xTaskPriorityInherit+0xe8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4013      	ands	r3, r2
 8007614:	4a1c      	ldr	r2, [pc, #112]	; (8007688 <xTaskPriorityInherit+0xe8>)
 8007616:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007618:	4b19      	ldr	r3, [pc, #100]	; (8007680 <xTaskPriorityInherit+0xe0>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007626:	2201      	movs	r2, #1
 8007628:	409a      	lsls	r2, r3
 800762a:	4b17      	ldr	r3, [pc, #92]	; (8007688 <xTaskPriorityInherit+0xe8>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4313      	orrs	r3, r2
 8007630:	4a15      	ldr	r2, [pc, #84]	; (8007688 <xTaskPriorityInherit+0xe8>)
 8007632:	6013      	str	r3, [r2, #0]
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4a10      	ldr	r2, [pc, #64]	; (8007684 <xTaskPriorityInherit+0xe4>)
 8007642:	441a      	add	r2, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	3304      	adds	r3, #4
 8007648:	4619      	mov	r1, r3
 800764a:	4610      	mov	r0, r2
 800764c:	f7fe f835 	bl	80056ba <vListInsertEnd>
 8007650:	e004      	b.n	800765c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007652:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <xTaskPriorityInherit+0xe0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800765c:	2301      	movs	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	e008      	b.n	8007674 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007666:	4b06      	ldr	r3, [pc, #24]	; (8007680 <xTaskPriorityInherit+0xe0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800766c:	429a      	cmp	r2, r3
 800766e:	d201      	bcs.n	8007674 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007670:	2301      	movs	r3, #1
 8007672:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007674:	68fb      	ldr	r3, [r7, #12]
	}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	24000128 	.word	0x24000128
 8007684:	2400012c 	.word	0x2400012c
 8007688:	2400021c 	.word	0x2400021c

0800768c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007698:	2300      	movs	r3, #0
 800769a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d06e      	beq.n	8007780 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076a2:	4b3a      	ldr	r3, [pc, #232]	; (800778c <xTaskPriorityDisinherit+0x100>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d00a      	beq.n	80076c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	60fb      	str	r3, [r7, #12]
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	60bb      	str	r3, [r7, #8]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e4:	1e5a      	subs	r2, r3, #1
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d044      	beq.n	8007780 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d140      	bne.n	8007780 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	3304      	adds	r3, #4
 8007702:	4618      	mov	r0, r3
 8007704:	f7fe f836 	bl	8005774 <uxListRemove>
 8007708:	4603      	mov	r3, r0
 800770a:	2b00      	cmp	r3, #0
 800770c:	d115      	bne.n	800773a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007712:	491f      	ldr	r1, [pc, #124]	; (8007790 <xTaskPriorityDisinherit+0x104>)
 8007714:	4613      	mov	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	440b      	add	r3, r1
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10a      	bne.n	800773a <xTaskPriorityDisinherit+0xae>
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	2201      	movs	r2, #1
 800772a:	fa02 f303 	lsl.w	r3, r2, r3
 800772e:	43da      	mvns	r2, r3
 8007730:	4b18      	ldr	r3, [pc, #96]	; (8007794 <xTaskPriorityDisinherit+0x108>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4013      	ands	r3, r2
 8007736:	4a17      	ldr	r2, [pc, #92]	; (8007794 <xTaskPriorityDisinherit+0x108>)
 8007738:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	f1c3 0207 	rsb	r2, r3, #7
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007752:	2201      	movs	r2, #1
 8007754:	409a      	lsls	r2, r3
 8007756:	4b0f      	ldr	r3, [pc, #60]	; (8007794 <xTaskPriorityDisinherit+0x108>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4313      	orrs	r3, r2
 800775c:	4a0d      	ldr	r2, [pc, #52]	; (8007794 <xTaskPriorityDisinherit+0x108>)
 800775e:	6013      	str	r3, [r2, #0]
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4a08      	ldr	r2, [pc, #32]	; (8007790 <xTaskPriorityDisinherit+0x104>)
 800776e:	441a      	add	r2, r3
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	3304      	adds	r3, #4
 8007774:	4619      	mov	r1, r3
 8007776:	4610      	mov	r0, r2
 8007778:	f7fd ff9f 	bl	80056ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800777c:	2301      	movs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007780:	697b      	ldr	r3, [r7, #20]
	}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
 800778a:	bf00      	nop
 800778c:	24000128 	.word	0x24000128
 8007790:	2400012c 	.word	0x2400012c
 8007794:	2400021c 	.word	0x2400021c

08007798 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80077a6:	2301      	movs	r3, #1
 80077a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d077      	beq.n	80078a0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10a      	bne.n	80077ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	60fb      	str	r3, [r7, #12]
}
 80077ca:	bf00      	nop
 80077cc:	e7fe      	b.n	80077cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d902      	bls.n	80077de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	61fb      	str	r3, [r7, #28]
 80077dc:	e002      	b.n	80077e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e8:	69fa      	ldr	r2, [r7, #28]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d058      	beq.n	80078a0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d153      	bne.n	80078a0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80077f8:	4b2b      	ldr	r3, [pc, #172]	; (80078a8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	69ba      	ldr	r2, [r7, #24]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d10a      	bne.n	8007818 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	60bb      	str	r3, [r7, #8]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	69fa      	ldr	r2, [r7, #28]
 8007822:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	699b      	ldr	r3, [r3, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	db04      	blt.n	8007836 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	f1c3 0207 	rsb	r2, r3, #7
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	6959      	ldr	r1, [r3, #20]
 800783a:	693a      	ldr	r2, [r7, #16]
 800783c:	4613      	mov	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	4a19      	ldr	r2, [pc, #100]	; (80078ac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007846:	4413      	add	r3, r2
 8007848:	4299      	cmp	r1, r3
 800784a:	d129      	bne.n	80078a0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800784c:	69bb      	ldr	r3, [r7, #24]
 800784e:	3304      	adds	r3, #4
 8007850:	4618      	mov	r0, r3
 8007852:	f7fd ff8f 	bl	8005774 <uxListRemove>
 8007856:	4603      	mov	r3, r0
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10a      	bne.n	8007872 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800785c:	69bb      	ldr	r3, [r7, #24]
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	2201      	movs	r2, #1
 8007862:	fa02 f303 	lsl.w	r3, r2, r3
 8007866:	43da      	mvns	r2, r3
 8007868:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4013      	ands	r3, r2
 800786e:	4a10      	ldr	r2, [pc, #64]	; (80078b0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007870:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007876:	2201      	movs	r2, #1
 8007878:	409a      	lsls	r2, r3
 800787a:	4b0d      	ldr	r3, [pc, #52]	; (80078b0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4313      	orrs	r3, r2
 8007880:	4a0b      	ldr	r2, [pc, #44]	; (80078b0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007882:	6013      	str	r3, [r2, #0]
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007888:	4613      	mov	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	4413      	add	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4a06      	ldr	r2, [pc, #24]	; (80078ac <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007892:	441a      	add	r2, r3
 8007894:	69bb      	ldr	r3, [r7, #24]
 8007896:	3304      	adds	r3, #4
 8007898:	4619      	mov	r1, r3
 800789a:	4610      	mov	r0, r2
 800789c:	f7fd ff0d 	bl	80056ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078a0:	bf00      	nop
 80078a2:	3720      	adds	r7, #32
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	24000128 	.word	0x24000128
 80078ac:	2400012c 	.word	0x2400012c
 80078b0:	2400021c 	.word	0x2400021c

080078b4 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f00e fb2a 	bl	8015f1a <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f7f8 fd14 	bl	80002f4 <strlen>
 80078cc:	60f8      	str	r0, [r7, #12]
 80078ce:	e007      	b.n	80078e0 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	4413      	add	r3, r2
 80078d6:	2220      	movs	r2, #32
 80078d8:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3301      	adds	r3, #1
 80078de:	60fb      	str	r3, [r7, #12]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b0e      	cmp	r3, #14
 80078e4:	d9f4      	bls.n	80078d0 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	4413      	add	r3, r2
 80078ec:	2200      	movs	r2, #0
 80078ee:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4413      	add	r3, r2
	}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
	...

08007900 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8007900:	b590      	push	{r4, r7, lr}
 8007902:	b089      	sub	sp, #36	; 0x24
 8007904:	af02      	add	r7, sp, #8
 8007906:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 800790e:	4b45      	ldr	r3, [pc, #276]	; (8007a24 <vTaskList+0x124>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8007914:	4b43      	ldr	r3, [pc, #268]	; (8007a24 <vTaskList+0x124>)
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	4613      	mov	r3, r2
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4618      	mov	r0, r3
 8007922:	f000 fbc5 	bl	80080b0 <pvPortMalloc>
 8007926:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d076      	beq.n	8007a1c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 800792e:	2200      	movs	r2, #0
 8007930:	68f9      	ldr	r1, [r7, #12]
 8007932:	68b8      	ldr	r0, [r7, #8]
 8007934:	f7ff fa10 	bl	8006d58 <uxTaskGetSystemState>
 8007938:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 800793a:	2300      	movs	r3, #0
 800793c:	617b      	str	r3, [r7, #20]
 800793e:	e066      	b.n	8007a0e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	4613      	mov	r3, r2
 8007944:	00db      	lsls	r3, r3, #3
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	461a      	mov	r2, r3
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	4413      	add	r3, r2
 8007950:	7b1b      	ldrb	r3, [r3, #12]
 8007952:	2b04      	cmp	r3, #4
 8007954:	d81b      	bhi.n	800798e <vTaskList+0x8e>
 8007956:	a201      	add	r2, pc, #4	; (adr r2, 800795c <vTaskList+0x5c>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	08007971 	.word	0x08007971
 8007960:	08007977 	.word	0x08007977
 8007964:	0800797d 	.word	0x0800797d
 8007968:	08007983 	.word	0x08007983
 800796c:	08007989 	.word	0x08007989
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8007970:	2358      	movs	r3, #88	; 0x58
 8007972:	74fb      	strb	r3, [r7, #19]
										break;
 8007974:	e00e      	b.n	8007994 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8007976:	2352      	movs	r3, #82	; 0x52
 8007978:	74fb      	strb	r3, [r7, #19]
										break;
 800797a:	e00b      	b.n	8007994 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 800797c:	2342      	movs	r3, #66	; 0x42
 800797e:	74fb      	strb	r3, [r7, #19]
										break;
 8007980:	e008      	b.n	8007994 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8007982:	2353      	movs	r3, #83	; 0x53
 8007984:	74fb      	strb	r3, [r7, #19]
										break;
 8007986:	e005      	b.n	8007994 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8007988:	2344      	movs	r3, #68	; 0x44
 800798a:	74fb      	strb	r3, [r7, #19]
										break;
 800798c:	e002      	b.n	8007994 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 800798e:	2300      	movs	r3, #0
 8007990:	74fb      	strb	r3, [r7, #19]
										break;
 8007992:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8007994:	697a      	ldr	r2, [r7, #20]
 8007996:	4613      	mov	r3, r2
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	461a      	mov	r2, r3
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4413      	add	r3, r2
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	4619      	mov	r1, r3
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f7ff ff83 	bl	80078b4 <prvWriteNameToBuffer>
 80079ae:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80079b0:	7cf9      	ldrb	r1, [r7, #19]
 80079b2:	697a      	ldr	r2, [r7, #20]
 80079b4:	4613      	mov	r3, r2
 80079b6:	00db      	lsls	r3, r3, #3
 80079b8:	4413      	add	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	461a      	mov	r2, r3
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	4413      	add	r3, r2
 80079c2:	6918      	ldr	r0, [r3, #16]
 80079c4:	697a      	ldr	r2, [r7, #20]
 80079c6:	4613      	mov	r3, r2
 80079c8:	00db      	lsls	r3, r3, #3
 80079ca:	4413      	add	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	461a      	mov	r2, r3
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	4413      	add	r3, r2
 80079d4:	8c1b      	ldrh	r3, [r3, #32]
 80079d6:	461c      	mov	r4, r3
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	4613      	mov	r3, r2
 80079dc:	00db      	lsls	r3, r3, #3
 80079de:	4413      	add	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	461a      	mov	r2, r3
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	4413      	add	r3, r2
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	9301      	str	r3, [sp, #4]
 80079ec:	9400      	str	r4, [sp, #0]
 80079ee:	4603      	mov	r3, r0
 80079f0:	460a      	mov	r2, r1
 80079f2:	490d      	ldr	r1, [pc, #52]	; (8007a28 <vTaskList+0x128>)
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f00e fa61 	bl	8015ebc <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f7f8 fc7a 	bl	80002f4 <strlen>
 8007a00:	4602      	mov	r2, r0
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4413      	add	r3, r2
 8007a06:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	3301      	adds	r3, #1
 8007a0c:	617b      	str	r3, [r7, #20]
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d394      	bcc.n	8007940 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8007a16:	68b8      	ldr	r0, [r7, #8]
 8007a18:	f000 fc16 	bl	8008248 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a1c:	bf00      	nop
 8007a1e:	371c      	adds	r7, #28
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd90      	pop	{r4, r7, pc}
 8007a24:	24000214 	.word	0x24000214
 8007a28:	08017c54 	.word	0x08017c54

08007a2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d004      	beq.n	8007a42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a38:	4b05      	ldr	r3, [pc, #20]	; (8007a50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a3e:	3201      	adds	r2, #1
 8007a40:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007a42:	4b03      	ldr	r3, [pc, #12]	; (8007a50 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a44:	681b      	ldr	r3, [r3, #0]
	}
 8007a46:	4618      	mov	r0, r3
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr
 8007a50:	24000128 	.word	0x24000128

08007a54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a5e:	4b21      	ldr	r3, [pc, #132]	; (8007ae4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a64:	4b20      	ldr	r3, [pc, #128]	; (8007ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fd fe82 	bl	8005774 <uxListRemove>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10b      	bne.n	8007a8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a76:	4b1c      	ldr	r3, [pc, #112]	; (8007ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a82:	43da      	mvns	r2, r3
 8007a84:	4b19      	ldr	r3, [pc, #100]	; (8007aec <prvAddCurrentTaskToDelayedList+0x98>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4013      	ands	r3, r2
 8007a8a:	4a18      	ldr	r2, [pc, #96]	; (8007aec <prvAddCurrentTaskToDelayedList+0x98>)
 8007a8c:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4413      	add	r3, r2
 8007a94:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a96:	4b14      	ldr	r3, [pc, #80]	; (8007ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d209      	bcs.n	8007aba <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aa6:	4b12      	ldr	r3, [pc, #72]	; (8007af0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	4b0f      	ldr	r3, [pc, #60]	; (8007ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3304      	adds	r3, #4
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	f7fd fe25 	bl	8005702 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ab8:	e010      	b.n	8007adc <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aba:	4b0e      	ldr	r3, [pc, #56]	; (8007af4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007abc:	681a      	ldr	r2, [r3, #0]
 8007abe:	4b0a      	ldr	r3, [pc, #40]	; (8007ae8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	f7fd fe1b 	bl	8005702 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8007acc:	4b0a      	ldr	r3, [pc, #40]	; (8007af8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d202      	bcs.n	8007adc <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 8007ad6:	4a08      	ldr	r2, [pc, #32]	; (8007af8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	6013      	str	r3, [r2, #0]
}
 8007adc:	bf00      	nop
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	24000218 	.word	0x24000218
 8007ae8:	24000128 	.word	0x24000128
 8007aec:	2400021c 	.word	0x2400021c
 8007af0:	240001e4 	.word	0x240001e4
 8007af4:	240001e0 	.word	0x240001e0
 8007af8:	24000234 	.word	0x24000234

08007afc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b085      	sub	sp, #20
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	4603      	mov	r3, r0
 8007b04:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b0e:	2b84      	cmp	r3, #132	; 0x84
 8007b10:	d005      	beq.n	8007b1e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007b12:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	3303      	adds	r3, #3
 8007b1c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b32:	f3ef 8305 	mrs	r3, IPSR
 8007b36:	607b      	str	r3, [r7, #4]
  return(result);
 8007b38:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	bf14      	ite	ne
 8007b3e:	2301      	movne	r3, #1
 8007b40:	2300      	moveq	r3, #0
 8007b42:	b2db      	uxtb	r3, r3
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b54:	f7fe ffec 	bl	8006b30 <vTaskStartScheduler>
  
  return osOK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007b62:	f7ff ffe3 	bl	8007b2c <inHandlerMode>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d003      	beq.n	8007b74 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007b6c:	f7ff f8e2 	bl	8006d34 <xTaskGetTickCountFromISR>
 8007b70:	4603      	mov	r3, r0
 8007b72:	e002      	b.n	8007b7a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007b74:	f7ff f8ce 	bl	8006d14 <xTaskGetTickCount>
 8007b78:	4603      	mov	r3, r0
  }
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	bd80      	pop	{r7, pc}

08007b7e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b80:	b087      	sub	sp, #28
 8007b82:	af02      	add	r7, sp, #8
 8007b84:	6078      	str	r0, [r7, #4]
 8007b86:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685c      	ldr	r4, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007b94:	b29e      	uxth	r6, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7ff ffad 	bl	8007afc <makeFreeRtosPriority>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	f107 030c 	add.w	r3, r7, #12
 8007ba8:	9301      	str	r3, [sp, #4]
 8007baa:	9200      	str	r2, [sp, #0]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	4632      	mov	r2, r6
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f7fe fd6c 	bl	8006690 <xTaskCreate>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	d001      	beq.n	8007bc2 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	e000      	b.n	8007bc4 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bcc <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7fe fe99 	bl	800690c <vTaskDelete>
  return osOK;
 8007bda:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <osDelay+0x16>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	e000      	b.n	8007bfc <osDelay+0x18>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4618      	mov	r0, r3
 8007bfe:	f7fe ff15 	bl	8006a2c <vTaskDelay>
  
  return osOK;
 8007c02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8007c14:	2001      	movs	r0, #1
 8007c16:	f7fd feb2 	bl	800597e <xQueueCreateMutex>
 8007c1a:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d101      	bne.n	8007c3c <osMutexWait+0x18>
    return osErrorParameter;
 8007c38:	2380      	movs	r3, #128	; 0x80
 8007c3a:	e03a      	b.n	8007cb2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c46:	d103      	bne.n	8007c50 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c4c:	60fb      	str	r3, [r7, #12]
 8007c4e:	e009      	b.n	8007c64 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d006      	beq.n	8007c64 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d101      	bne.n	8007c64 <osMutexWait+0x40>
      ticks = 1;
 8007c60:	2301      	movs	r3, #1
 8007c62:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007c64:	f7ff ff62 	bl	8007b2c <inHandlerMode>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d017      	beq.n	8007c9e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007c6e:	f107 0308 	add.w	r3, r7, #8
 8007c72:	461a      	mov	r2, r3
 8007c74:	2100      	movs	r1, #0
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7fe fade 	bl	8006238 <xQueueReceiveFromISR>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d001      	beq.n	8007c86 <osMutexWait+0x62>
      return osErrorOS;
 8007c82:	23ff      	movs	r3, #255	; 0xff
 8007c84:	e015      	b.n	8007cb2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d011      	beq.n	8007cb0 <osMutexWait+0x8c>
 8007c8c:	4b0b      	ldr	r3, [pc, #44]	; (8007cbc <osMutexWait+0x98>)
 8007c8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	f3bf 8f4f 	dsb	sy
 8007c98:	f3bf 8f6f 	isb	sy
 8007c9c:	e008      	b.n	8007cb0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007c9e:	68f9      	ldr	r1, [r7, #12]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7fe f9bd 	bl	8006020 <xQueueSemaphoreTake>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d001      	beq.n	8007cb0 <osMutexWait+0x8c>
    return osErrorOS;
 8007cac:	23ff      	movs	r3, #255	; 0xff
 8007cae:	e000      	b.n	8007cb2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3710      	adds	r7, #16
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	e000ed04 	.word	0xe000ed04

08007cc0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007cd0:	f7ff ff2c 	bl	8007b2c <inHandlerMode>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d016      	beq.n	8007d08 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007cda:	f107 0308 	add.w	r3, r7, #8
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f7fe f830 	bl	8005d46 <xQueueGiveFromISR>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d001      	beq.n	8007cf0 <osMutexRelease+0x30>
      return osErrorOS;
 8007cec:	23ff      	movs	r3, #255	; 0xff
 8007cee:	e017      	b.n	8007d20 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d013      	beq.n	8007d1e <osMutexRelease+0x5e>
 8007cf6:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <osMutexRelease+0x68>)
 8007cf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cfc:	601a      	str	r2, [r3, #0]
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	f3bf 8f6f 	isb	sy
 8007d06:	e00a      	b.n	8007d1e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007d08:	2300      	movs	r3, #0
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	2100      	movs	r1, #0
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7fd fe80 	bl	8005a14 <xQueueGenericSend>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d001      	beq.n	8007d1e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007d1a:	23ff      	movs	r3, #255	; 0xff
 8007d1c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	e000ed04 	.word	0xe000ed04

08007d2c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d110      	bne.n	8007d5e <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8007d3c:	2203      	movs	r2, #3
 8007d3e:	2100      	movs	r1, #0
 8007d40:	2001      	movs	r0, #1
 8007d42:	f7fd fda9 	bl	8005898 <xQueueGenericCreate>
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d005      	beq.n	8007d5a <osSemaphoreCreate+0x2e>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	2200      	movs	r2, #0
 8007d52:	2100      	movs	r1, #0
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7fd fe5d 	bl	8005a14 <xQueueGenericSend>
    return sema;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	e006      	b.n	8007d6c <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	4611      	mov	r1, r2
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7fd fe22 	bl	80059ae <xQueueCreateCountingSemaphore>
 8007d6a:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d101      	bne.n	8007d8c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007d88:	2380      	movs	r3, #128	; 0x80
 8007d8a:	e03a      	b.n	8007e02 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d96:	d103      	bne.n	8007da0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8007d98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d9c:	60fb      	str	r3, [r7, #12]
 8007d9e:	e009      	b.n	8007db4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d006      	beq.n	8007db4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <osSemaphoreWait+0x40>
      ticks = 1;
 8007db0:	2301      	movs	r3, #1
 8007db2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007db4:	f7ff feba 	bl	8007b2c <inHandlerMode>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d017      	beq.n	8007dee <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007dbe:	f107 0308 	add.w	r3, r7, #8
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fe fa36 	bl	8006238 <xQueueReceiveFromISR>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d001      	beq.n	8007dd6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007dd2:	23ff      	movs	r3, #255	; 0xff
 8007dd4:	e015      	b.n	8007e02 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d011      	beq.n	8007e00 <osSemaphoreWait+0x8c>
 8007ddc:	4b0b      	ldr	r3, [pc, #44]	; (8007e0c <osSemaphoreWait+0x98>)
 8007dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	e008      	b.n	8007e00 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8007dee:	68f9      	ldr	r1, [r7, #12]
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f7fe f915 	bl	8006020 <xQueueSemaphoreTake>
 8007df6:	4603      	mov	r3, r0
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d001      	beq.n	8007e00 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8007dfc:	23ff      	movs	r3, #255	; 0xff
 8007dfe:	e000      	b.n	8007e02 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3710      	adds	r7, #16
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	e000ed04 	.word	0xe000ed04

08007e10 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007e20:	f7ff fe84 	bl	8007b2c <inHandlerMode>
 8007e24:	4603      	mov	r3, r0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d016      	beq.n	8007e58 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8007e2a:	f107 0308 	add.w	r3, r7, #8
 8007e2e:	4619      	mov	r1, r3
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f7fd ff88 	bl	8005d46 <xQueueGiveFromISR>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d001      	beq.n	8007e40 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8007e3c:	23ff      	movs	r3, #255	; 0xff
 8007e3e:	e017      	b.n	8007e70 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d013      	beq.n	8007e6e <osSemaphoreRelease+0x5e>
 8007e46:	4b0c      	ldr	r3, [pc, #48]	; (8007e78 <osSemaphoreRelease+0x68>)
 8007e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	e00a      	b.n	8007e6e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7fd fdd8 	bl	8005a14 <xQueueGenericSend>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b01      	cmp	r3, #1
 8007e68:	d001      	beq.n	8007e6e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8007e6a:	23ff      	movs	r3, #255	; 0xff
 8007e6c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	e000ed04 	.word	0xe000ed04

08007e7c <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8007e84:	f7ff fe52 	bl	8007b2c <inHandlerMode>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8007e8e:	2382      	movs	r3, #130	; 0x82
 8007e90:	e003      	b.n	8007e9a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7fe fa8c 	bl	80063b0 <vQueueDelete>

  return osOK; 
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3708      	adds	r7, #8
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}

08007ea2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007ea2:	b580      	push	{r7, lr}
 8007ea4:	b082      	sub	sp, #8
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
 8007eaa:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	f7fd fcee 	bl	8005898 <xQueueGenericCreate>
 8007ebc:	4603      	mov	r3, r0
#endif
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3708      	adds	r7, #8
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
	...

08007ec8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d101      	bne.n	8007ee6 <osMessagePut+0x1e>
    ticks = 1;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007ee6:	f7ff fe21 	bl	8007b2c <inHandlerMode>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d018      	beq.n	8007f22 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007ef0:	f107 0210 	add.w	r2, r7, #16
 8007ef4:	f107 0108 	add.w	r1, r7, #8
 8007ef8:	2300      	movs	r3, #0
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f7fd fe88 	bl	8005c10 <xQueueGenericSendFromISR>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d001      	beq.n	8007f0a <osMessagePut+0x42>
      return osErrorOS;
 8007f06:	23ff      	movs	r3, #255	; 0xff
 8007f08:	e018      	b.n	8007f3c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d014      	beq.n	8007f3a <osMessagePut+0x72>
 8007f10:	4b0c      	ldr	r3, [pc, #48]	; (8007f44 <osMessagePut+0x7c>)
 8007f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f16:	601a      	str	r2, [r3, #0]
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	e00b      	b.n	8007f3a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007f22:	f107 0108 	add.w	r1, r7, #8
 8007f26:	2300      	movs	r3, #0
 8007f28:	697a      	ldr	r2, [r7, #20]
 8007f2a:	68f8      	ldr	r0, [r7, #12]
 8007f2c:	f7fd fd72 	bl	8005a14 <xQueueGenericSend>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d001      	beq.n	8007f3a <osMessagePut+0x72>
      return osErrorOS;
 8007f36:	23ff      	movs	r3, #255	; 0xff
 8007f38:	e000      	b.n	8007f3c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3718      	adds	r7, #24
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	e000ed04 	.word	0xe000ed04

08007f48 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007f48:	b590      	push	{r4, r7, lr}
 8007f4a:	b08b      	sub	sp, #44	; 0x2c
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	60b9      	str	r1, [r7, #8]
 8007f52:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007f62:	2380      	movs	r3, #128	; 0x80
 8007f64:	617b      	str	r3, [r7, #20]
    return event;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	461c      	mov	r4, r3
 8007f6a:	f107 0314 	add.w	r3, r7, #20
 8007f6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007f72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f76:	e054      	b.n	8008022 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f86:	d103      	bne.n	8007f90 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f8e:	e009      	b.n	8007fa4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d006      	beq.n	8007fa4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <osMessageGet+0x5c>
      ticks = 1;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007fa4:	f7ff fdc2 	bl	8007b2c <inHandlerMode>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d01c      	beq.n	8007fe8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007fae:	f107 0220 	add.w	r2, r7, #32
 8007fb2:	f107 0314 	add.w	r3, r7, #20
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	68b8      	ldr	r0, [r7, #8]
 8007fbc:	f7fe f93c 	bl	8006238 <xQueueReceiveFromISR>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d102      	bne.n	8007fcc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007fc6:	2310      	movs	r3, #16
 8007fc8:	617b      	str	r3, [r7, #20]
 8007fca:	e001      	b.n	8007fd0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007fd0:	6a3b      	ldr	r3, [r7, #32]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d01d      	beq.n	8008012 <osMessageGet+0xca>
 8007fd6:	4b15      	ldr	r3, [pc, #84]	; (800802c <osMessageGet+0xe4>)
 8007fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	f3bf 8f4f 	dsb	sy
 8007fe2:	f3bf 8f6f 	isb	sy
 8007fe6:	e014      	b.n	8008012 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007fe8:	f107 0314 	add.w	r3, r7, #20
 8007fec:	3304      	adds	r3, #4
 8007fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	68b8      	ldr	r0, [r7, #8]
 8007ff4:	f7fd ff34 	bl	8005e60 <xQueueReceive>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d102      	bne.n	8008004 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007ffe:	2310      	movs	r3, #16
 8008000:	617b      	str	r3, [r7, #20]
 8008002:	e006      	b.n	8008012 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008006:	2b00      	cmp	r3, #0
 8008008:	d101      	bne.n	800800e <osMessageGet+0xc6>
 800800a:	2300      	movs	r3, #0
 800800c:	e000      	b.n	8008010 <osMessageGet+0xc8>
 800800e:	2340      	movs	r3, #64	; 0x40
 8008010:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	461c      	mov	r4, r3
 8008016:	f107 0314 	add.w	r3, r7, #20
 800801a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800801e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	372c      	adds	r7, #44	; 0x2c
 8008026:	46bd      	mov	sp, r7
 8008028:	bd90      	pop	{r4, r7, pc}
 800802a:	bf00      	nop
 800802c:	e000ed04 	.word	0xe000ed04

08008030 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8008034:	f7ff fa96 	bl	8007564 <xTaskGetSchedulerState>
 8008038:	4603      	mov	r3, r0
 800803a:	2b01      	cmp	r3, #1
 800803c:	d001      	beq.n	8008042 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800803e:	f000 fbe3 	bl	8008808 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8008042:	bf00      	nop
 8008044:	bd80      	pop	{r7, pc}

08008046 <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff fc56 	bl	8007900 <vTaskList>
#endif
  return osOK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008066:	f7ff fd61 	bl	8007b2c <inHandlerMode>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d004      	beq.n	800807a <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7fe f97f 	bl	8006374 <uxQueueMessagesWaitingFromISR>
 8008076:	4603      	mov	r3, r0
 8008078:	e003      	b.n	8008082 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f7fe f95c 	bl	8006338 <uxQueueMessagesWaiting>
 8008080:	4603      	mov	r3, r0
  }
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800808a:	b580      	push	{r7, lr}
 800808c:	b082      	sub	sp, #8
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008092:	f7ff fd4b 	bl	8007b2c <inHandlerMode>
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <osMessageDelete+0x16>
    return osErrorISR;
 800809c:	2382      	movs	r3, #130	; 0x82
 800809e:	e003      	b.n	80080a8 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7fe f985 	bl	80063b0 <vQueueDelete>

  return osOK; 
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	; 0x28
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80080b8:	2300      	movs	r3, #0
 80080ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80080bc:	f7fe fd80 	bl	8006bc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80080c0:	4b5b      	ldr	r3, [pc, #364]	; (8008230 <pvPortMalloc+0x180>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80080c8:	f000 f920 	bl	800830c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080cc:	4b59      	ldr	r3, [pc, #356]	; (8008234 <pvPortMalloc+0x184>)
 80080ce:	681a      	ldr	r2, [r3, #0]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4013      	ands	r3, r2
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f040 8093 	bne.w	8008200 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d01d      	beq.n	800811c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80080e0:	2208      	movs	r2, #8
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4413      	add	r3, r2
 80080e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f003 0307 	and.w	r3, r3, #7
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d014      	beq.n	800811c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f023 0307 	bic.w	r3, r3, #7
 80080f8:	3308      	adds	r3, #8
 80080fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <pvPortMalloc+0x6c>
	__asm volatile
 8008106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800810a:	f383 8811 	msr	BASEPRI, r3
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f3bf 8f4f 	dsb	sy
 8008116:	617b      	str	r3, [r7, #20]
}
 8008118:	bf00      	nop
 800811a:	e7fe      	b.n	800811a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d06e      	beq.n	8008200 <pvPortMalloc+0x150>
 8008122:	4b45      	ldr	r3, [pc, #276]	; (8008238 <pvPortMalloc+0x188>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	429a      	cmp	r2, r3
 800812a:	d869      	bhi.n	8008200 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800812c:	4b43      	ldr	r3, [pc, #268]	; (800823c <pvPortMalloc+0x18c>)
 800812e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008130:	4b42      	ldr	r3, [pc, #264]	; (800823c <pvPortMalloc+0x18c>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008136:	e004      	b.n	8008142 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800813c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	429a      	cmp	r2, r3
 800814a:	d903      	bls.n	8008154 <pvPortMalloc+0xa4>
 800814c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d1f1      	bne.n	8008138 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008154:	4b36      	ldr	r3, [pc, #216]	; (8008230 <pvPortMalloc+0x180>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800815a:	429a      	cmp	r2, r3
 800815c:	d050      	beq.n	8008200 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2208      	movs	r2, #8
 8008164:	4413      	add	r3, r2
 8008166:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008172:	685a      	ldr	r2, [r3, #4]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	1ad2      	subs	r2, r2, r3
 8008178:	2308      	movs	r3, #8
 800817a:	005b      	lsls	r3, r3, #1
 800817c:	429a      	cmp	r2, r3
 800817e:	d91f      	bls.n	80081c0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4413      	add	r3, r2
 8008186:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00a      	beq.n	80081a8 <pvPortMalloc+0xf8>
	__asm volatile
 8008192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008196:	f383 8811 	msr	BASEPRI, r3
 800819a:	f3bf 8f6f 	isb	sy
 800819e:	f3bf 8f4f 	dsb	sy
 80081a2:	613b      	str	r3, [r7, #16]
}
 80081a4:	bf00      	nop
 80081a6:	e7fe      	b.n	80081a6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	1ad2      	subs	r2, r2, r3
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081ba:	69b8      	ldr	r0, [r7, #24]
 80081bc:	f000 f908 	bl	80083d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081c0:	4b1d      	ldr	r3, [pc, #116]	; (8008238 <pvPortMalloc+0x188>)
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	4a1b      	ldr	r2, [pc, #108]	; (8008238 <pvPortMalloc+0x188>)
 80081cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081ce:	4b1a      	ldr	r3, [pc, #104]	; (8008238 <pvPortMalloc+0x188>)
 80081d0:	681a      	ldr	r2, [r3, #0]
 80081d2:	4b1b      	ldr	r3, [pc, #108]	; (8008240 <pvPortMalloc+0x190>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d203      	bcs.n	80081e2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081da:	4b17      	ldr	r3, [pc, #92]	; (8008238 <pvPortMalloc+0x188>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a18      	ldr	r2, [pc, #96]	; (8008240 <pvPortMalloc+0x190>)
 80081e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	4b13      	ldr	r3, [pc, #76]	; (8008234 <pvPortMalloc+0x184>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	431a      	orrs	r2, r3
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80081f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f2:	2200      	movs	r2, #0
 80081f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80081f6:	4b13      	ldr	r3, [pc, #76]	; (8008244 <pvPortMalloc+0x194>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	3301      	adds	r3, #1
 80081fc:	4a11      	ldr	r2, [pc, #68]	; (8008244 <pvPortMalloc+0x194>)
 80081fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008200:	f7fe fcec 	bl	8006bdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <pvPortMalloc+0x174>
	__asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	60fb      	str	r3, [r7, #12]
}
 8008220:	bf00      	nop
 8008222:	e7fe      	b.n	8008222 <pvPortMalloc+0x172>
	return pvReturn;
 8008224:	69fb      	ldr	r3, [r7, #28]
}
 8008226:	4618      	mov	r0, r3
 8008228:	3728      	adds	r7, #40	; 0x28
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}
 800822e:	bf00      	nop
 8008230:	24006648 	.word	0x24006648
 8008234:	2400665c 	.word	0x2400665c
 8008238:	2400664c 	.word	0x2400664c
 800823c:	24006640 	.word	0x24006640
 8008240:	24006650 	.word	0x24006650
 8008244:	24006654 	.word	0x24006654

08008248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b086      	sub	sp, #24
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d04d      	beq.n	80082f6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800825a:	2308      	movs	r3, #8
 800825c:	425b      	negs	r3, r3
 800825e:	697a      	ldr	r2, [r7, #20]
 8008260:	4413      	add	r3, r2
 8008262:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	4b24      	ldr	r3, [pc, #144]	; (8008300 <vPortFree+0xb8>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4013      	ands	r3, r2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10a      	bne.n	800828c <vPortFree+0x44>
	__asm volatile
 8008276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f3bf 8f4f 	dsb	sy
 8008286:	60fb      	str	r3, [r7, #12]
}
 8008288:	bf00      	nop
 800828a:	e7fe      	b.n	800828a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d00a      	beq.n	80082aa <vPortFree+0x62>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	60bb      	str	r3, [r7, #8]
}
 80082a6:	bf00      	nop
 80082a8:	e7fe      	b.n	80082a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082aa:	693b      	ldr	r3, [r7, #16]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	4b14      	ldr	r3, [pc, #80]	; (8008300 <vPortFree+0xb8>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4013      	ands	r3, r2
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01e      	beq.n	80082f6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d11a      	bne.n	80082f6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	4b0e      	ldr	r3, [pc, #56]	; (8008300 <vPortFree+0xb8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	43db      	mvns	r3, r3
 80082ca:	401a      	ands	r2, r3
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80082d0:	f7fe fc76 	bl	8006bc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	685a      	ldr	r2, [r3, #4]
 80082d8:	4b0a      	ldr	r3, [pc, #40]	; (8008304 <vPortFree+0xbc>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4413      	add	r3, r2
 80082de:	4a09      	ldr	r2, [pc, #36]	; (8008304 <vPortFree+0xbc>)
 80082e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082e2:	6938      	ldr	r0, [r7, #16]
 80082e4:	f000 f874 	bl	80083d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80082e8:	4b07      	ldr	r3, [pc, #28]	; (8008308 <vPortFree+0xc0>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3301      	adds	r3, #1
 80082ee:	4a06      	ldr	r2, [pc, #24]	; (8008308 <vPortFree+0xc0>)
 80082f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80082f2:	f7fe fc73 	bl	8006bdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80082f6:	bf00      	nop
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	2400665c 	.word	0x2400665c
 8008304:	2400664c 	.word	0x2400664c
 8008308:	24006658 	.word	0x24006658

0800830c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008312:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 8008316:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008318:	4b27      	ldr	r3, [pc, #156]	; (80083b8 <prvHeapInit+0xac>)
 800831a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f003 0307 	and.w	r3, r3, #7
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00c      	beq.n	8008340 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3307      	adds	r3, #7
 800832a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f023 0307 	bic.w	r3, r3, #7
 8008332:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	1ad3      	subs	r3, r2, r3
 800833a:	4a1f      	ldr	r2, [pc, #124]	; (80083b8 <prvHeapInit+0xac>)
 800833c:	4413      	add	r3, r2
 800833e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008344:	4a1d      	ldr	r2, [pc, #116]	; (80083bc <prvHeapInit+0xb0>)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800834a:	4b1c      	ldr	r3, [pc, #112]	; (80083bc <prvHeapInit+0xb0>)
 800834c:	2200      	movs	r2, #0
 800834e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68ba      	ldr	r2, [r7, #8]
 8008354:	4413      	add	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008358:	2208      	movs	r2, #8
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	1a9b      	subs	r3, r3, r2
 800835e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f023 0307 	bic.w	r3, r3, #7
 8008366:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4a15      	ldr	r2, [pc, #84]	; (80083c0 <prvHeapInit+0xb4>)
 800836c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800836e:	4b14      	ldr	r3, [pc, #80]	; (80083c0 <prvHeapInit+0xb4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	2200      	movs	r2, #0
 8008374:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008376:	4b12      	ldr	r3, [pc, #72]	; (80083c0 <prvHeapInit+0xb4>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2200      	movs	r2, #0
 800837c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	1ad2      	subs	r2, r2, r3
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800838c:	4b0c      	ldr	r3, [pc, #48]	; (80083c0 <prvHeapInit+0xb4>)
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	4a0a      	ldr	r2, [pc, #40]	; (80083c4 <prvHeapInit+0xb8>)
 800839a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	4a09      	ldr	r2, [pc, #36]	; (80083c8 <prvHeapInit+0xbc>)
 80083a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083a4:	4b09      	ldr	r3, [pc, #36]	; (80083cc <prvHeapInit+0xc0>)
 80083a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80083aa:	601a      	str	r2, [r3, #0]
}
 80083ac:	bf00      	nop
 80083ae:	3714      	adds	r7, #20
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr
 80083b8:	24000240 	.word	0x24000240
 80083bc:	24006640 	.word	0x24006640
 80083c0:	24006648 	.word	0x24006648
 80083c4:	24006650 	.word	0x24006650
 80083c8:	2400664c 	.word	0x2400664c
 80083cc:	2400665c 	.word	0x2400665c

080083d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083d8:	4b28      	ldr	r3, [pc, #160]	; (800847c <prvInsertBlockIntoFreeList+0xac>)
 80083da:	60fb      	str	r3, [r7, #12]
 80083dc:	e002      	b.n	80083e4 <prvInsertBlockIntoFreeList+0x14>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d8f7      	bhi.n	80083de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	68ba      	ldr	r2, [r7, #8]
 80083f8:	4413      	add	r3, r2
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d108      	bne.n	8008412 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	441a      	add	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	441a      	add	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d118      	bne.n	8008458 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	4b15      	ldr	r3, [pc, #84]	; (8008480 <prvInsertBlockIntoFreeList+0xb0>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	429a      	cmp	r2, r3
 8008430:	d00d      	beq.n	800844e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	441a      	add	r2, r3
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	601a      	str	r2, [r3, #0]
 800844c:	e008      	b.n	8008460 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800844e:	4b0c      	ldr	r3, [pc, #48]	; (8008480 <prvInsertBlockIntoFreeList+0xb0>)
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	601a      	str	r2, [r3, #0]
 8008456:	e003      	b.n	8008460 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	429a      	cmp	r2, r3
 8008466:	d002      	beq.n	800846e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	24006640 	.word	0x24006640
 8008480:	24006648 	.word	0x24006648

08008484 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	3b04      	subs	r3, #4
 8008494:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800849c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3b04      	subs	r3, #4
 80084a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	f023 0201 	bic.w	r2, r3, #1
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3b04      	subs	r3, #4
 80084b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80084b4:	4a0c      	ldr	r2, [pc, #48]	; (80084e8 <pxPortInitialiseStack+0x64>)
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	3b14      	subs	r3, #20
 80084be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	3b04      	subs	r3, #4
 80084ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f06f 0202 	mvn.w	r2, #2
 80084d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	3b20      	subs	r3, #32
 80084d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80084da:	68fb      	ldr	r3, [r7, #12]
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr
 80084e8:	080084ed 	.word	0x080084ed

080084ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80084ec:	b480      	push	{r7}
 80084ee:	b085      	sub	sp, #20
 80084f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80084f2:	2300      	movs	r3, #0
 80084f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80084f6:	4b12      	ldr	r3, [pc, #72]	; (8008540 <prvTaskExitError+0x54>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084fe:	d00a      	beq.n	8008516 <prvTaskExitError+0x2a>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	60fb      	str	r3, [r7, #12]
}
 8008512:	bf00      	nop
 8008514:	e7fe      	b.n	8008514 <prvTaskExitError+0x28>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	60bb      	str	r3, [r7, #8]
}
 8008528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800852a:	bf00      	nop
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d0fc      	beq.n	800852c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008532:	bf00      	nop
 8008534:	bf00      	nop
 8008536:	3714      	adds	r7, #20
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	24000040 	.word	0x24000040
	...

08008550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008550:	4b07      	ldr	r3, [pc, #28]	; (8008570 <pxCurrentTCBConst2>)
 8008552:	6819      	ldr	r1, [r3, #0]
 8008554:	6808      	ldr	r0, [r1, #0]
 8008556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800855a:	f380 8809 	msr	PSP, r0
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f04f 0000 	mov.w	r0, #0
 8008566:	f380 8811 	msr	BASEPRI, r0
 800856a:	4770      	bx	lr
 800856c:	f3af 8000 	nop.w

08008570 <pxCurrentTCBConst2>:
 8008570:	24000128 	.word	0x24000128
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008574:	bf00      	nop
 8008576:	bf00      	nop

08008578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008578:	4808      	ldr	r0, [pc, #32]	; (800859c <prvPortStartFirstTask+0x24>)
 800857a:	6800      	ldr	r0, [r0, #0]
 800857c:	6800      	ldr	r0, [r0, #0]
 800857e:	f380 8808 	msr	MSP, r0
 8008582:	f04f 0000 	mov.w	r0, #0
 8008586:	f380 8814 	msr	CONTROL, r0
 800858a:	b662      	cpsie	i
 800858c:	b661      	cpsie	f
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	df00      	svc	0
 8008598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800859a:	bf00      	nop
 800859c:	e000ed08 	.word	0xe000ed08

080085a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80085a6:	4b46      	ldr	r3, [pc, #280]	; (80086c0 <xPortStartScheduler+0x120>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a46      	ldr	r2, [pc, #280]	; (80086c4 <xPortStartScheduler+0x124>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d10a      	bne.n	80085c6 <xPortStartScheduler+0x26>
	__asm volatile
 80085b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b4:	f383 8811 	msr	BASEPRI, r3
 80085b8:	f3bf 8f6f 	isb	sy
 80085bc:	f3bf 8f4f 	dsb	sy
 80085c0:	613b      	str	r3, [r7, #16]
}
 80085c2:	bf00      	nop
 80085c4:	e7fe      	b.n	80085c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80085c6:	4b3e      	ldr	r3, [pc, #248]	; (80086c0 <xPortStartScheduler+0x120>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a3f      	ldr	r2, [pc, #252]	; (80086c8 <xPortStartScheduler+0x128>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d10a      	bne.n	80085e6 <xPortStartScheduler+0x46>
	__asm volatile
 80085d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	60fb      	str	r3, [r7, #12]
}
 80085e2:	bf00      	nop
 80085e4:	e7fe      	b.n	80085e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80085e6:	4b39      	ldr	r3, [pc, #228]	; (80086cc <xPortStartScheduler+0x12c>)
 80085e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	b2db      	uxtb	r3, r3
 80085f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	22ff      	movs	r2, #255	; 0xff
 80085f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008600:	78fb      	ldrb	r3, [r7, #3]
 8008602:	b2db      	uxtb	r3, r3
 8008604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008608:	b2da      	uxtb	r2, r3
 800860a:	4b31      	ldr	r3, [pc, #196]	; (80086d0 <xPortStartScheduler+0x130>)
 800860c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800860e:	4b31      	ldr	r3, [pc, #196]	; (80086d4 <xPortStartScheduler+0x134>)
 8008610:	2207      	movs	r2, #7
 8008612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008614:	e009      	b.n	800862a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008616:	4b2f      	ldr	r3, [pc, #188]	; (80086d4 <xPortStartScheduler+0x134>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	3b01      	subs	r3, #1
 800861c:	4a2d      	ldr	r2, [pc, #180]	; (80086d4 <xPortStartScheduler+0x134>)
 800861e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008620:	78fb      	ldrb	r3, [r7, #3]
 8008622:	b2db      	uxtb	r3, r3
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	b2db      	uxtb	r3, r3
 8008628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800862a:	78fb      	ldrb	r3, [r7, #3]
 800862c:	b2db      	uxtb	r3, r3
 800862e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008632:	2b80      	cmp	r3, #128	; 0x80
 8008634:	d0ef      	beq.n	8008616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008636:	4b27      	ldr	r3, [pc, #156]	; (80086d4 <xPortStartScheduler+0x134>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f1c3 0307 	rsb	r3, r3, #7
 800863e:	2b04      	cmp	r3, #4
 8008640:	d00a      	beq.n	8008658 <xPortStartScheduler+0xb8>
	__asm volatile
 8008642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008646:	f383 8811 	msr	BASEPRI, r3
 800864a:	f3bf 8f6f 	isb	sy
 800864e:	f3bf 8f4f 	dsb	sy
 8008652:	60bb      	str	r3, [r7, #8]
}
 8008654:	bf00      	nop
 8008656:	e7fe      	b.n	8008656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008658:	4b1e      	ldr	r3, [pc, #120]	; (80086d4 <xPortStartScheduler+0x134>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	021b      	lsls	r3, r3, #8
 800865e:	4a1d      	ldr	r2, [pc, #116]	; (80086d4 <xPortStartScheduler+0x134>)
 8008660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008662:	4b1c      	ldr	r3, [pc, #112]	; (80086d4 <xPortStartScheduler+0x134>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800866a:	4a1a      	ldr	r2, [pc, #104]	; (80086d4 <xPortStartScheduler+0x134>)
 800866c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	b2da      	uxtb	r2, r3
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008676:	4b18      	ldr	r3, [pc, #96]	; (80086d8 <xPortStartScheduler+0x138>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a17      	ldr	r2, [pc, #92]	; (80086d8 <xPortStartScheduler+0x138>)
 800867c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008682:	4b15      	ldr	r3, [pc, #84]	; (80086d8 <xPortStartScheduler+0x138>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a14      	ldr	r2, [pc, #80]	; (80086d8 <xPortStartScheduler+0x138>)
 8008688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800868c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800868e:	f000 f8dd 	bl	800884c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008692:	4b12      	ldr	r3, [pc, #72]	; (80086dc <xPortStartScheduler+0x13c>)
 8008694:	2200      	movs	r2, #0
 8008696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008698:	f000 f8fc 	bl	8008894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800869c:	4b10      	ldr	r3, [pc, #64]	; (80086e0 <xPortStartScheduler+0x140>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a0f      	ldr	r2, [pc, #60]	; (80086e0 <xPortStartScheduler+0x140>)
 80086a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80086a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80086a8:	f7ff ff66 	bl	8008578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80086ac:	f7fe fc86 	bl	8006fbc <vTaskSwitchContext>
	prvTaskExitError();
 80086b0:	f7ff ff1c 	bl	80084ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3718      	adds	r7, #24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
 80086be:	bf00      	nop
 80086c0:	e000ed00 	.word	0xe000ed00
 80086c4:	410fc271 	.word	0x410fc271
 80086c8:	410fc270 	.word	0x410fc270
 80086cc:	e000e400 	.word	0xe000e400
 80086d0:	24006660 	.word	0x24006660
 80086d4:	24006664 	.word	0x24006664
 80086d8:	e000ed20 	.word	0xe000ed20
 80086dc:	24000040 	.word	0x24000040
 80086e0:	e000ef34 	.word	0xe000ef34

080086e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	607b      	str	r3, [r7, #4]
}
 80086fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80086fe:	4b0f      	ldr	r3, [pc, #60]	; (800873c <vPortEnterCritical+0x58>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3301      	adds	r3, #1
 8008704:	4a0d      	ldr	r2, [pc, #52]	; (800873c <vPortEnterCritical+0x58>)
 8008706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008708:	4b0c      	ldr	r3, [pc, #48]	; (800873c <vPortEnterCritical+0x58>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d10f      	bne.n	8008730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008710:	4b0b      	ldr	r3, [pc, #44]	; (8008740 <vPortEnterCritical+0x5c>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <vPortEnterCritical+0x4c>
	__asm volatile
 800871a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871e:	f383 8811 	msr	BASEPRI, r3
 8008722:	f3bf 8f6f 	isb	sy
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	603b      	str	r3, [r7, #0]
}
 800872c:	bf00      	nop
 800872e:	e7fe      	b.n	800872e <vPortEnterCritical+0x4a>
	}
}
 8008730:	bf00      	nop
 8008732:	370c      	adds	r7, #12
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr
 800873c:	24000040 	.word	0x24000040
 8008740:	e000ed04 	.word	0xe000ed04

08008744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800874a:	4b12      	ldr	r3, [pc, #72]	; (8008794 <vPortExitCritical+0x50>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <vPortExitCritical+0x24>
	__asm volatile
 8008752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008756:	f383 8811 	msr	BASEPRI, r3
 800875a:	f3bf 8f6f 	isb	sy
 800875e:	f3bf 8f4f 	dsb	sy
 8008762:	607b      	str	r3, [r7, #4]
}
 8008764:	bf00      	nop
 8008766:	e7fe      	b.n	8008766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008768:	4b0a      	ldr	r3, [pc, #40]	; (8008794 <vPortExitCritical+0x50>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	3b01      	subs	r3, #1
 800876e:	4a09      	ldr	r2, [pc, #36]	; (8008794 <vPortExitCritical+0x50>)
 8008770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008772:	4b08      	ldr	r3, [pc, #32]	; (8008794 <vPortExitCritical+0x50>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d105      	bne.n	8008786 <vPortExitCritical+0x42>
 800877a:	2300      	movs	r3, #0
 800877c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	f383 8811 	msr	BASEPRI, r3
}
 8008784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr
 8008792:	bf00      	nop
 8008794:	24000040 	.word	0x24000040
	...

080087a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80087a0:	f3ef 8009 	mrs	r0, PSP
 80087a4:	f3bf 8f6f 	isb	sy
 80087a8:	4b15      	ldr	r3, [pc, #84]	; (8008800 <pxCurrentTCBConst>)
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	f01e 0f10 	tst.w	lr, #16
 80087b0:	bf08      	it	eq
 80087b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80087b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ba:	6010      	str	r0, [r2, #0]
 80087bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80087c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80087c4:	f380 8811 	msr	BASEPRI, r0
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f7fe fbf4 	bl	8006fbc <vTaskSwitchContext>
 80087d4:	f04f 0000 	mov.w	r0, #0
 80087d8:	f380 8811 	msr	BASEPRI, r0
 80087dc:	bc09      	pop	{r0, r3}
 80087de:	6819      	ldr	r1, [r3, #0]
 80087e0:	6808      	ldr	r0, [r1, #0]
 80087e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087e6:	f01e 0f10 	tst.w	lr, #16
 80087ea:	bf08      	it	eq
 80087ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80087f0:	f380 8809 	msr	PSP, r0
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	4770      	bx	lr
 80087fa:	bf00      	nop
 80087fc:	f3af 8000 	nop.w

08008800 <pxCurrentTCBConst>:
 8008800:	24000128 	.word	0x24000128
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008804:	bf00      	nop
 8008806:	bf00      	nop

08008808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	607b      	str	r3, [r7, #4]
}
 8008820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008822:	f7fe fb13 	bl	8006e4c <xTaskIncrementTick>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d003      	beq.n	8008834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800882c:	4b06      	ldr	r3, [pc, #24]	; (8008848 <xPortSysTickHandler+0x40>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	2300      	movs	r3, #0
 8008836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	f383 8811 	msr	BASEPRI, r3
}
 800883e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008840:	bf00      	nop
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	e000ed04 	.word	0xe000ed04

0800884c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008850:	4b0b      	ldr	r3, [pc, #44]	; (8008880 <vPortSetupTimerInterrupt+0x34>)
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008856:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <vPortSetupTimerInterrupt+0x38>)
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800885c:	4b0a      	ldr	r3, [pc, #40]	; (8008888 <vPortSetupTimerInterrupt+0x3c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a0a      	ldr	r2, [pc, #40]	; (800888c <vPortSetupTimerInterrupt+0x40>)
 8008862:	fba2 2303 	umull	r2, r3, r2, r3
 8008866:	099b      	lsrs	r3, r3, #6
 8008868:	4a09      	ldr	r2, [pc, #36]	; (8008890 <vPortSetupTimerInterrupt+0x44>)
 800886a:	3b01      	subs	r3, #1
 800886c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800886e:	4b04      	ldr	r3, [pc, #16]	; (8008880 <vPortSetupTimerInterrupt+0x34>)
 8008870:	2207      	movs	r2, #7
 8008872:	601a      	str	r2, [r3, #0]
}
 8008874:	bf00      	nop
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	e000e010 	.word	0xe000e010
 8008884:	e000e018 	.word	0xe000e018
 8008888:	24000030 	.word	0x24000030
 800888c:	10624dd3 	.word	0x10624dd3
 8008890:	e000e014 	.word	0xe000e014

08008894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80088a4 <vPortEnableVFP+0x10>
 8008898:	6801      	ldr	r1, [r0, #0]
 800889a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800889e:	6001      	str	r1, [r0, #0]
 80088a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80088a2:	bf00      	nop
 80088a4:	e000ed88 	.word	0xe000ed88

080088a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80088ae:	f3ef 8305 	mrs	r3, IPSR
 80088b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2b0f      	cmp	r3, #15
 80088b8:	d914      	bls.n	80088e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80088ba:	4a17      	ldr	r2, [pc, #92]	; (8008918 <vPortValidateInterruptPriority+0x70>)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4413      	add	r3, r2
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80088c4:	4b15      	ldr	r3, [pc, #84]	; (800891c <vPortValidateInterruptPriority+0x74>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	7afa      	ldrb	r2, [r7, #11]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d20a      	bcs.n	80088e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	607b      	str	r3, [r7, #4]
}
 80088e0:	bf00      	nop
 80088e2:	e7fe      	b.n	80088e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80088e4:	4b0e      	ldr	r3, [pc, #56]	; (8008920 <vPortValidateInterruptPriority+0x78>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80088ec:	4b0d      	ldr	r3, [pc, #52]	; (8008924 <vPortValidateInterruptPriority+0x7c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d90a      	bls.n	800890a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80088f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	603b      	str	r3, [r7, #0]
}
 8008906:	bf00      	nop
 8008908:	e7fe      	b.n	8008908 <vPortValidateInterruptPriority+0x60>
	}
 800890a:	bf00      	nop
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	e000e3f0 	.word	0xe000e3f0
 800891c:	24006660 	.word	0x24006660
 8008920:	e000ed0c 	.word	0xe000ed0c
 8008924:	24006664 	.word	0x24006664

08008928 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	330c      	adds	r3, #12
 8008938:	461a      	mov	r2, r3
 800893a:	6839      	ldr	r1, [r7, #0]
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f002 fbbb 	bl	800b0b8 <tcpip_send_msg_wait_sem>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d103      	bne.n	8008956 <netconn_apimsg+0x2e>
    return apimsg->err;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008954:	e001      	b.n	800895a <netconn_apimsg+0x32>
  }
  return err;
 8008956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b08c      	sub	sp, #48	; 0x30
 8008968:	af00      	add	r7, sp, #0
 800896a:	4603      	mov	r3, r0
 800896c:	603a      	str	r2, [r7, #0]
 800896e:	71fb      	strb	r3, [r7, #7]
 8008970:	460b      	mov	r3, r1
 8008972:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008974:	79fb      	ldrb	r3, [r7, #7]
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	4618      	mov	r0, r3
 800897a:	f001 f95f 	bl	8009c3c <netconn_alloc>
 800897e:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008982:	2b00      	cmp	r3, #0
 8008984:	d054      	beq.n	8008a30 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008986:	79bb      	ldrb	r3, [r7, #6]
 8008988:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800898a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800898c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800898e:	f107 0308 	add.w	r3, r7, #8
 8008992:	4619      	mov	r1, r3
 8008994:	4829      	ldr	r0, [pc, #164]	; (8008a3c <netconn_new_with_proto_and_callback+0xd8>)
 8008996:	f7ff ffc7 	bl	8008928 <netconn_apimsg>
 800899a:	4603      	mov	r3, r0
 800899c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 80089a0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d043      	beq.n	8008a30 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80089a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d005      	beq.n	80089bc <netconn_new_with_proto_and_callback+0x58>
 80089b0:	4b23      	ldr	r3, [pc, #140]	; (8008a40 <netconn_new_with_proto_and_callback+0xdc>)
 80089b2:	22a3      	movs	r2, #163	; 0xa3
 80089b4:	4923      	ldr	r1, [pc, #140]	; (8008a44 <netconn_new_with_proto_and_callback+0xe0>)
 80089b6:	4824      	ldr	r0, [pc, #144]	; (8008a48 <netconn_new_with_proto_and_callback+0xe4>)
 80089b8:	f00d fa28 	bl	8015e0c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80089bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089be:	3310      	adds	r3, #16
 80089c0:	4618      	mov	r0, r3
 80089c2:	f00d f84c 	bl	8015a5e <sys_mbox_valid>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d105      	bne.n	80089d8 <netconn_new_with_proto_and_callback+0x74>
 80089cc:	4b1c      	ldr	r3, [pc, #112]	; (8008a40 <netconn_new_with_proto_and_callback+0xdc>)
 80089ce:	22a4      	movs	r2, #164	; 0xa4
 80089d0:	491e      	ldr	r1, [pc, #120]	; (8008a4c <netconn_new_with_proto_and_callback+0xe8>)
 80089d2:	481d      	ldr	r0, [pc, #116]	; (8008a48 <netconn_new_with_proto_and_callback+0xe4>)
 80089d4:	f00d fa1a 	bl	8015e0c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80089d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089da:	3314      	adds	r3, #20
 80089dc:	4618      	mov	r0, r3
 80089de:	f00d f83e 	bl	8015a5e <sys_mbox_valid>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d005      	beq.n	80089f4 <netconn_new_with_proto_and_callback+0x90>
 80089e8:	4b15      	ldr	r3, [pc, #84]	; (8008a40 <netconn_new_with_proto_and_callback+0xdc>)
 80089ea:	22a6      	movs	r2, #166	; 0xa6
 80089ec:	4918      	ldr	r1, [pc, #96]	; (8008a50 <netconn_new_with_proto_and_callback+0xec>)
 80089ee:	4816      	ldr	r0, [pc, #88]	; (8008a48 <netconn_new_with_proto_and_callback+0xe4>)
 80089f0:	f00d fa0c 	bl	8015e0c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80089f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089f6:	330c      	adds	r3, #12
 80089f8:	4618      	mov	r0, r3
 80089fa:	f00d f8bf 	bl	8015b7c <sys_sem_valid>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d105      	bne.n	8008a10 <netconn_new_with_proto_and_callback+0xac>
 8008a04:	4b0e      	ldr	r3, [pc, #56]	; (8008a40 <netconn_new_with_proto_and_callback+0xdc>)
 8008a06:	22a9      	movs	r2, #169	; 0xa9
 8008a08:	4912      	ldr	r1, [pc, #72]	; (8008a54 <netconn_new_with_proto_and_callback+0xf0>)
 8008a0a:	480f      	ldr	r0, [pc, #60]	; (8008a48 <netconn_new_with_proto_and_callback+0xe4>)
 8008a0c:	f00d f9fe 	bl	8015e0c <iprintf>
      sys_sem_free(&conn->op_completed);
 8008a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a12:	330c      	adds	r3, #12
 8008a14:	4618      	mov	r0, r3
 8008a16:	f00d f8a4 	bl	8015b62 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1c:	3310      	adds	r3, #16
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f00c ff96 	bl	8015950 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008a24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a26:	2007      	movs	r0, #7
 8008a28:	f005 fb64 	bl	800e0f4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	e000      	b.n	8008a32 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3730      	adds	r7, #48	; 0x30
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	08009c11 	.word	0x08009c11
 8008a40:	08017c64 	.word	0x08017c64
 8008a44:	08017cdc 	.word	0x08017cdc
 8008a48:	08017d00 	.word	0x08017d00
 8008a4c:	08017d28 	.word	0x08017d28
 8008a50:	08017d40 	.word	0x08017d40
 8008a54:	08017d64 	.word	0x08017d64

08008a58 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08c      	sub	sp, #48	; 0x30
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d101      	bne.n	8008a6a <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	e014      	b.n	8008a94 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008a6e:	2329      	movs	r3, #41	; 0x29
 8008a70:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008a72:	f107 030c 	add.w	r3, r7, #12
 8008a76:	4619      	mov	r1, r3
 8008a78:	4808      	ldr	r0, [pc, #32]	; (8008a9c <netconn_prepare_delete+0x44>)
 8008a7a:	f7ff ff55 	bl	8008928 <netconn_apimsg>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008a84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <netconn_prepare_delete+0x3a>
    return err;
 8008a8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008a90:	e000      	b.n	8008a94 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008a92:	2300      	movs	r3, #0
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3730      	adds	r7, #48	; 0x30
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	0800a175 	.word	0x0800a175

08008aa0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b084      	sub	sp, #16
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d101      	bne.n	8008ab2 <netconn_delete+0x12>
    return ERR_OK;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	e00d      	b.n	8008ace <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff ffd0 	bl	8008a58 <netconn_prepare_delete>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008abc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d102      	bne.n	8008aca <netconn_delete+0x2a>
    netconn_free(conn);
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f001 f927 	bl	8009d18 <netconn_free>
  }
  return err;
 8008aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3710      	adds	r7, #16
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
	...

08008ad8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b08e      	sub	sp, #56	; 0x38
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d109      	bne.n	8008b00 <netconn_bind+0x28>
 8008aec:	4b11      	ldr	r3, [pc, #68]	; (8008b34 <netconn_bind+0x5c>)
 8008aee:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008af2:	4911      	ldr	r1, [pc, #68]	; (8008b38 <netconn_bind+0x60>)
 8008af4:	4811      	ldr	r0, [pc, #68]	; (8008b3c <netconn_bind+0x64>)
 8008af6:	f00d f989 	bl	8015e0c <iprintf>
 8008afa:	f06f 030f 	mvn.w	r3, #15
 8008afe:	e015      	b.n	8008b2c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d101      	bne.n	8008b0a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008b06:	4b0e      	ldr	r3, [pc, #56]	; (8008b40 <netconn_bind+0x68>)
 8008b08:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008b12:	88fb      	ldrh	r3, [r7, #6]
 8008b14:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008b16:	f107 0314 	add.w	r3, r7, #20
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4809      	ldr	r0, [pc, #36]	; (8008b44 <netconn_bind+0x6c>)
 8008b1e:	f7ff ff03 	bl	8008928 <netconn_apimsg>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008b28:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3738      	adds	r7, #56	; 0x38
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}
 8008b34:	08017c64 	.word	0x08017c64
 8008b38:	08017de0 	.word	0x08017de0
 8008b3c:	08017d00 	.word	0x08017d00
 8008b40:	08018d64 	.word	0x08018d64
 8008b44:	0800a33d 	.word	0x0800a33d

08008b48 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08e      	sub	sp, #56	; 0x38
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	4613      	mov	r3, r2
 8008b54:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d109      	bne.n	8008b70 <netconn_connect+0x28>
 8008b5c:	4b11      	ldr	r3, [pc, #68]	; (8008ba4 <netconn_connect+0x5c>)
 8008b5e:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008b62:	4911      	ldr	r1, [pc, #68]	; (8008ba8 <netconn_connect+0x60>)
 8008b64:	4811      	ldr	r0, [pc, #68]	; (8008bac <netconn_connect+0x64>)
 8008b66:	f00d f951 	bl	8015e0c <iprintf>
 8008b6a:	f06f 030f 	mvn.w	r3, #15
 8008b6e:	e015      	b.n	8008b9c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8008b76:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <netconn_connect+0x68>)
 8008b78:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008b82:	88fb      	ldrh	r3, [r7, #6]
 8008b84:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8008b86:	f107 0314 	add.w	r3, r7, #20
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	4809      	ldr	r0, [pc, #36]	; (8008bb4 <netconn_connect+0x6c>)
 8008b8e:	f7ff fecb 	bl	8008928 <netconn_apimsg>
 8008b92:	4603      	mov	r3, r0
 8008b94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008b98:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3738      	adds	r7, #56	; 0x38
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}
 8008ba4:	08017c64 	.word	0x08017c64
 8008ba8:	08017e1c 	.word	0x08017e1c
 8008bac:	08017d00 	.word	0x08017d00
 8008bb0:	08018d64 	.word	0x08018d64
 8008bb4:	0800a4d1 	.word	0x0800a4d1

08008bb8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08c      	sub	sp, #48	; 0x30
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	460b      	mov	r3, r1
 8008bc2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d109      	bne.n	8008bde <netconn_listen_with_backlog+0x26>
 8008bca:	4b0d      	ldr	r3, [pc, #52]	; (8008c00 <netconn_listen_with_backlog+0x48>)
 8008bcc:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008bd0:	490c      	ldr	r1, [pc, #48]	; (8008c04 <netconn_listen_with_backlog+0x4c>)
 8008bd2:	480d      	ldr	r0, [pc, #52]	; (8008c08 <netconn_listen_with_backlog+0x50>)
 8008bd4:	f00d f91a 	bl	8015e0c <iprintf>
 8008bd8:	f06f 030f 	mvn.w	r3, #15
 8008bdc:	e00c      	b.n	8008bf8 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008be2:	f107 030c 	add.w	r3, r7, #12
 8008be6:	4619      	mov	r1, r3
 8008be8:	4808      	ldr	r0, [pc, #32]	; (8008c0c <netconn_listen_with_backlog+0x54>)
 8008bea:	f7ff fe9d 	bl	8008928 <netconn_apimsg>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008bf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	3730      	adds	r7, #48	; 0x30
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	bd80      	pop	{r7, pc}
 8008c00:	08017c64 	.word	0x08017c64
 8008c04:	08017e60 	.word	0x08017e60
 8008c08:	08017d00 	.word	0x08017d00
 8008c0c:	0800a64d 	.word	0x0800a64d

08008c10 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d109      	bne.n	8008c34 <netconn_accept+0x24>
 8008c20:	4b3d      	ldr	r3, [pc, #244]	; (8008d18 <netconn_accept+0x108>)
 8008c22:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008c26:	493d      	ldr	r1, [pc, #244]	; (8008d1c <netconn_accept+0x10c>)
 8008c28:	483d      	ldr	r0, [pc, #244]	; (8008d20 <netconn_accept+0x110>)
 8008c2a:	f00d f8ef 	bl	8015e0c <iprintf>
 8008c2e:	f06f 030f 	mvn.w	r3, #15
 8008c32:	e06c      	b.n	8008d0e <netconn_accept+0xfe>
  *new_conn = NULL;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	2200      	movs	r2, #0
 8008c38:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d109      	bne.n	8008c54 <netconn_accept+0x44>
 8008c40:	4b35      	ldr	r3, [pc, #212]	; (8008d18 <netconn_accept+0x108>)
 8008c42:	f240 12e3 	movw	r2, #483	; 0x1e3
 8008c46:	4937      	ldr	r1, [pc, #220]	; (8008d24 <netconn_accept+0x114>)
 8008c48:	4835      	ldr	r0, [pc, #212]	; (8008d20 <netconn_accept+0x110>)
 8008c4a:	f00d f8df 	bl	8015e0c <iprintf>
 8008c4e:	f06f 030f 	mvn.w	r3, #15
 8008c52:	e05c      	b.n	8008d0e <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fb6c 	bl	8009332 <netconn_err>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008c5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8008c66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008c6a:	e050      	b.n	8008d0e <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3314      	adds	r3, #20
 8008c70:	4618      	mov	r0, r3
 8008c72:	f00c fef4 	bl	8015a5e <sys_mbox_valid>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d005      	beq.n	8008c88 <netconn_accept+0x78>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	7f1b      	ldrb	r3, [r3, #28]
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d002      	beq.n	8008c8e <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8008c88:	f06f 030e 	mvn.w	r3, #14
 8008c8c:	e03f      	b.n	8008d0e <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	7f1b      	ldrb	r3, [r3, #28]
 8008c92:	f003 0302 	and.w	r3, r3, #2
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00e      	beq.n	8008cb8 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	3314      	adds	r3, #20
 8008c9e:	f107 020c 	add.w	r2, r7, #12
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	f00c febe 	bl	8015a26 <sys_arch_mbox_tryfetch>
 8008caa:	4603      	mov	r3, r0
 8008cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008cb0:	d10a      	bne.n	8008cc8 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008cb2:	f06f 0306 	mvn.w	r3, #6
 8008cb6:	e02a      	b.n	8008d0e <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	3314      	adds	r3, #20
 8008cbc:	f107 010c 	add.w	r1, r7, #12
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f00c fe70 	bl	80159a8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d005      	beq.n	8008cdc <netconn_accept+0xcc>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	2101      	movs	r1, #1
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f107 0213 	add.w	r2, r7, #19
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	f000 fb75 	bl	80093d4 <lwip_netconn_is_err_msg>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d002      	beq.n	8008cf6 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008cf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008cf4:	e00b      	b.n	8008d0e <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d102      	bne.n	8008d02 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008cfc:	f06f 030e 	mvn.w	r3, #14
 8008d00:	e005      	b.n	8008d0e <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008d0c:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	08017c64 	.word	0x08017c64
 8008d1c:	08017e80 	.word	0x08017e80
 8008d20:	08017d00 	.word	0x08017d00
 8008d24:	08017ea0 	.word	0x08017ea0

08008d28 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b088      	sub	sp, #32
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	4613      	mov	r3, r2
 8008d34:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d109      	bne.n	8008d54 <netconn_recv_data+0x2c>
 8008d40:	4b58      	ldr	r3, [pc, #352]	; (8008ea4 <netconn_recv_data+0x17c>)
 8008d42:	f44f 7212 	mov.w	r2, #584	; 0x248
 8008d46:	4958      	ldr	r1, [pc, #352]	; (8008ea8 <netconn_recv_data+0x180>)
 8008d48:	4858      	ldr	r0, [pc, #352]	; (8008eac <netconn_recv_data+0x184>)
 8008d4a:	f00d f85f 	bl	8015e0c <iprintf>
 8008d4e:	f06f 030f 	mvn.w	r3, #15
 8008d52:	e0a2      	b.n	8008e9a <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	2200      	movs	r2, #0
 8008d58:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d109      	bne.n	8008d74 <netconn_recv_data+0x4c>
 8008d60:	4b50      	ldr	r3, [pc, #320]	; (8008ea4 <netconn_recv_data+0x17c>)
 8008d62:	f240 224a 	movw	r2, #586	; 0x24a
 8008d66:	4952      	ldr	r1, [pc, #328]	; (8008eb0 <netconn_recv_data+0x188>)
 8008d68:	4850      	ldr	r0, [pc, #320]	; (8008eac <netconn_recv_data+0x184>)
 8008d6a:	f00d f84f 	bl	8015e0c <iprintf>
 8008d6e:	f06f 030f 	mvn.w	r3, #15
 8008d72:	e092      	b.n	8008e9a <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	3310      	adds	r3, #16
 8008d78:	4618      	mov	r0, r3
 8008d7a:	f00c fe70 	bl	8015a5e <sys_mbox_valid>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10e      	bne.n	8008da2 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 fad4 	bl	8009332 <netconn_err>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008d8e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d002      	beq.n	8008d9c <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8008d96:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8008d9a:	e07e      	b.n	8008e9a <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8008d9c:	f06f 030a 	mvn.w	r3, #10
 8008da0:	e07b      	b.n	8008e9a <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	7f1b      	ldrb	r3, [r3, #28]
 8008da6:	f003 0302 	and.w	r3, r3, #2
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10f      	bne.n	8008dce <netconn_recv_data+0xa6>
 8008dae:	79fb      	ldrb	r3, [r7, #7]
 8008db0:	f003 0304 	and.w	r3, r3, #4
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10a      	bne.n	8008dce <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	7f1b      	ldrb	r3, [r3, #28]
 8008dbc:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d104      	bne.n	8008dce <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d023      	beq.n	8008e16 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	3310      	adds	r3, #16
 8008dd2:	f107 0218 	add.w	r2, r7, #24
 8008dd6:	4611      	mov	r1, r2
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f00c fe24 	bl	8015a26 <sys_arch_mbox_tryfetch>
 8008dde:	4603      	mov	r3, r0
 8008de0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008de4:	d11f      	bne.n	8008e26 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 faa3 	bl	8009332 <netconn_err>
 8008dec:	4603      	mov	r3, r0
 8008dee:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008df0:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8008df8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008dfc:	e04d      	b.n	8008e9a <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	7f1b      	ldrb	r3, [r3, #28]
 8008e02:	f003 0301 	and.w	r3, r3, #1
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d002      	beq.n	8008e10 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8008e0a:	f06f 030a 	mvn.w	r3, #10
 8008e0e:	e044      	b.n	8008e9a <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8008e10:	f06f 0306 	mvn.w	r3, #6
 8008e14:	e041      	b.n	8008e9a <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3310      	adds	r3, #16
 8008e1a:	f107 0118 	add.w	r1, r7, #24
 8008e1e:	2200      	movs	r2, #0
 8008e20:	4618      	mov	r0, r3
 8008e22:	f00c fdc1 	bl	80159a8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e2e:	2b10      	cmp	r3, #16
 8008e30:	d117      	bne.n	8008e62 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008e32:	69bb      	ldr	r3, [r7, #24]
 8008e34:	f107 0217 	add.w	r2, r7, #23
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 faca 	bl	80093d4 <lwip_netconn_is_err_msg>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d009      	beq.n	8008e5a <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8008e46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e4a:	f113 0f0f 	cmn.w	r3, #15
 8008e4e:	d101      	bne.n	8008e54 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008e50:	2300      	movs	r3, #0
 8008e52:	e022      	b.n	8008e9a <netconn_recv_data+0x172>
      }
      return err;
 8008e54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e58:	e01f      	b.n	8008e9a <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	891b      	ldrh	r3, [r3, #8]
 8008e5e:	83fb      	strh	r3, [r7, #30]
 8008e60:	e00d      	b.n	8008e7e <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d106      	bne.n	8008e76 <netconn_recv_data+0x14e>
 8008e68:	4b0e      	ldr	r3, [pc, #56]	; (8008ea4 <netconn_recv_data+0x17c>)
 8008e6a:	f240 2291 	movw	r2, #657	; 0x291
 8008e6e:	4911      	ldr	r1, [pc, #68]	; (8008eb4 <netconn_recv_data+0x18c>)
 8008e70:	480e      	ldr	r0, [pc, #56]	; (8008eac <netconn_recv_data+0x184>)
 8008e72:	f00c ffcb 	bl	8015e0c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8008e76:	69bb      	ldr	r3, [r7, #24]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	891b      	ldrh	r3, [r3, #8]
 8008e7c:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d005      	beq.n	8008e92 <netconn_recv_data+0x16a>
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e8a:	8bfa      	ldrh	r2, [r7, #30]
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8008e92:	69ba      	ldr	r2, [r7, #24]
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3720      	adds	r7, #32
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
 8008ea2:	bf00      	nop
 8008ea4:	08017c64 	.word	0x08017c64
 8008ea8:	08017ec0 	.word	0x08017ec0
 8008eac:	08017d00 	.word	0x08017d00
 8008eb0:	08017ee0 	.word	0x08017ee0
 8008eb4:	08017efc 	.word	0x08017efc

08008eb8 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d005      	beq.n	8008ed6 <netconn_tcp_recvd_msg+0x1e>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ed2:	2b10      	cmp	r3, #16
 8008ed4:	d009      	beq.n	8008eea <netconn_tcp_recvd_msg+0x32>
 8008ed6:	4b0c      	ldr	r3, [pc, #48]	; (8008f08 <netconn_tcp_recvd_msg+0x50>)
 8008ed8:	f240 22a7 	movw	r2, #679	; 0x2a7
 8008edc:	490b      	ldr	r1, [pc, #44]	; (8008f0c <netconn_tcp_recvd_msg+0x54>)
 8008ede:	480c      	ldr	r0, [pc, #48]	; (8008f10 <netconn_tcp_recvd_msg+0x58>)
 8008ee0:	f00c ff94 	bl	8015e0c <iprintf>
 8008ee4:	f06f 030f 	mvn.w	r3, #15
 8008ee8:	e00a      	b.n	8008f00 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	4806      	ldr	r0, [pc, #24]	; (8008f14 <netconn_tcp_recvd_msg+0x5c>)
 8008efa:	f7ff fd15 	bl	8008928 <netconn_apimsg>
 8008efe:	4603      	mov	r3, r0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3710      	adds	r7, #16
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	08017c64 	.word	0x08017c64
 8008f0c:	08017f08 	.word	0x08017f08
 8008f10:	08017d00 	.word	0x08017d00
 8008f14:	0800a77d 	.word	0x0800a77d

08008f18 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b090      	sub	sp, #64	; 0x40
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	4613      	mov	r3, r2
 8008f24:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3310      	adds	r3, #16
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f00c fd97 	bl	8015a5e <sys_mbox_valid>
 8008f30:	4603      	mov	r3, r0
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d102      	bne.n	8008f3c <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8008f36:	f06f 030a 	mvn.w	r3, #10
 8008f3a:	e06d      	b.n	8009018 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	7f1b      	ldrb	r3, [r3, #28]
 8008f40:	b25b      	sxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	da07      	bge.n	8008f56 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	7f1b      	ldrb	r3, [r3, #28]
 8008f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f4e:	b2da      	uxtb	r2, r3
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8008f54:	e039      	b.n	8008fca <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8008f56:	79fb      	ldrb	r3, [r7, #7]
 8008f58:	461a      	mov	r2, r3
 8008f5a:	68b9      	ldr	r1, [r7, #8]
 8008f5c:	68f8      	ldr	r0, [r7, #12]
 8008f5e:	f7ff fee3 	bl	8008d28 <netconn_recv_data>
 8008f62:	4603      	mov	r3, r0
 8008f64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8008f68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8008f70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008f74:	e050      	b.n	8009018 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	f003 0308 	and.w	r3, r3, #8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10e      	bne.n	8008fa4 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8008f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <netconn_recv_data_tcp+0x7a>
 8008f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8e:	891b      	ldrh	r3, [r3, #8]
 8008f90:	e000      	b.n	8008f94 <netconn_recv_data_tcp+0x7c>
 8008f92:	2301      	movs	r3, #1
 8008f94:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8008f96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008f98:	f107 0214 	add.w	r2, r7, #20
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f7ff ff8a 	bl	8008eb8 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d134      	bne.n	8009014 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	f003 0310 	and.w	r3, r3, #16
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d009      	beq.n	8008fc8 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	7f1b      	ldrb	r3, [r3, #28]
 8008fb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008fc2:	f06f 0306 	mvn.w	r3, #6
 8008fc6:	e027      	b.n	8009018 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8008fc8:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d005      	beq.n	8008fde <netconn_recv_data_tcp+0xc6>
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2101      	movs	r1, #1
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10f      	bne.n	8009006 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f000 f9a3 	bl	8009332 <netconn_err>
 8008fec:	4603      	mov	r3, r0
 8008fee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8008ff2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d002      	beq.n	8009000 <netconn_recv_data_tcp+0xe8>
          return err;
 8008ffa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008ffe:	e00b      	b.n	8009018 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009000:	f06f 030d 	mvn.w	r3, #13
 8009004:	e008      	b.n	8009018 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009006:	2101      	movs	r1, #1
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f000 f955 	bl	80092b8 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800900e:	f06f 030e 	mvn.w	r3, #14
 8009012:	e001      	b.n	8009018 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009014:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009018:	4618      	mov	r0, r3
 800901a:	3740      	adds	r7, #64	; 0x40
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d109      	bne.n	8009048 <netconn_recv+0x28>
 8009034:	4b32      	ldr	r3, [pc, #200]	; (8009100 <netconn_recv+0xe0>)
 8009036:	f240 3263 	movw	r2, #867	; 0x363
 800903a:	4932      	ldr	r1, [pc, #200]	; (8009104 <netconn_recv+0xe4>)
 800903c:	4832      	ldr	r0, [pc, #200]	; (8009108 <netconn_recv+0xe8>)
 800903e:	f00c fee5 	bl	8015e0c <iprintf>
 8009042:	f06f 030f 	mvn.w	r3, #15
 8009046:	e056      	b.n	80090f6 <netconn_recv+0xd6>
  *new_buf = NULL;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	2200      	movs	r2, #0
 800904c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d109      	bne.n	8009068 <netconn_recv+0x48>
 8009054:	4b2a      	ldr	r3, [pc, #168]	; (8009100 <netconn_recv+0xe0>)
 8009056:	f240 3265 	movw	r2, #869	; 0x365
 800905a:	492c      	ldr	r1, [pc, #176]	; (800910c <netconn_recv+0xec>)
 800905c:	482a      	ldr	r0, [pc, #168]	; (8009108 <netconn_recv+0xe8>)
 800905e:	f00c fed5 	bl	8015e0c <iprintf>
 8009062:	f06f 030f 	mvn.w	r3, #15
 8009066:	e046      	b.n	80090f6 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009070:	2b10      	cmp	r3, #16
 8009072:	d13a      	bne.n	80090ea <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009074:	2300      	movs	r3, #0
 8009076:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009078:	2006      	movs	r0, #6
 800907a:	f004 ffc5 	bl	800e008 <memp_malloc>
 800907e:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d102      	bne.n	800908c <netconn_recv+0x6c>
      return ERR_MEM;
 8009086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800908a:	e034      	b.n	80090f6 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800908c:	f107 030c 	add.w	r3, r7, #12
 8009090:	2200      	movs	r2, #0
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f7ff ff3f 	bl	8008f18 <netconn_recv_data_tcp>
 800909a:	4603      	mov	r3, r0
 800909c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800909e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d006      	beq.n	80090b4 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80090a6:	6979      	ldr	r1, [r7, #20]
 80090a8:	2006      	movs	r0, #6
 80090aa:	f005 f823 	bl	800e0f4 <memp_free>
      return err;
 80090ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80090b2:	e020      	b.n	80090f6 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d106      	bne.n	80090c8 <netconn_recv+0xa8>
 80090ba:	4b11      	ldr	r3, [pc, #68]	; (8009100 <netconn_recv+0xe0>)
 80090bc:	f240 3279 	movw	r2, #889	; 0x379
 80090c0:	4913      	ldr	r1, [pc, #76]	; (8009110 <netconn_recv+0xf0>)
 80090c2:	4811      	ldr	r0, [pc, #68]	; (8009108 <netconn_recv+0xe8>)
 80090c4:	f00c fea2 	bl	8015e0c <iprintf>

    buf->p = p;
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	2200      	movs	r2, #0
 80090d8:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	2200      	movs	r2, #0
 80090de:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80090e6:	2300      	movs	r3, #0
 80090e8:	e005      	b.n	80090f6 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80090ea:	2200      	movs	r2, #0
 80090ec:	6839      	ldr	r1, [r7, #0]
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff fe1a 	bl	8008d28 <netconn_recv_data>
 80090f4:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	08017c64 	.word	0x08017c64
 8009104:	08017ec0 	.word	0x08017ec0
 8009108:	08017d00 	.word	0x08017d00
 800910c:	08017ee0 	.word	0x08017ee0
 8009110:	08017f58 	.word	0x08017f58

08009114 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b088      	sub	sp, #32
 8009118:	af02      	add	r7, sp, #8
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
 8009120:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	f107 0110 	add.w	r1, r7, #16
 8009130:	6a3b      	ldr	r3, [r7, #32]
 8009132:	9300      	str	r3, [sp, #0]
 8009134:	4613      	mov	r3, r2
 8009136:	2201      	movs	r2, #1
 8009138:	68f8      	ldr	r0, [r7, #12]
 800913a:	f000 f805 	bl	8009148 <netconn_write_vectors_partly>
 800913e:	4603      	mov	r3, r0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3718      	adds	r7, #24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b092      	sub	sp, #72	; 0x48
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	4611      	mov	r1, r2
 8009154:	461a      	mov	r2, r3
 8009156:	460b      	mov	r3, r1
 8009158:	80fb      	strh	r3, [r7, #6]
 800915a:	4613      	mov	r3, r2
 800915c:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d109      	bne.n	8009178 <netconn_write_vectors_partly+0x30>
 8009164:	4b4e      	ldr	r3, [pc, #312]	; (80092a0 <netconn_write_vectors_partly+0x158>)
 8009166:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800916a:	494e      	ldr	r1, [pc, #312]	; (80092a4 <netconn_write_vectors_partly+0x15c>)
 800916c:	484e      	ldr	r0, [pc, #312]	; (80092a8 <netconn_write_vectors_partly+0x160>)
 800916e:	f00c fe4d 	bl	8015e0c <iprintf>
 8009172:	f06f 030f 	mvn.w	r3, #15
 8009176:	e08e      	b.n	8009296 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009180:	2b10      	cmp	r3, #16
 8009182:	d009      	beq.n	8009198 <netconn_write_vectors_partly+0x50>
 8009184:	4b46      	ldr	r3, [pc, #280]	; (80092a0 <netconn_write_vectors_partly+0x158>)
 8009186:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800918a:	4948      	ldr	r1, [pc, #288]	; (80092ac <netconn_write_vectors_partly+0x164>)
 800918c:	4846      	ldr	r0, [pc, #280]	; (80092a8 <netconn_write_vectors_partly+0x160>)
 800918e:	f00c fe3d 	bl	8015e0c <iprintf>
 8009192:	f06f 0305 	mvn.w	r3, #5
 8009196:	e07e      	b.n	8009296 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	7f1b      	ldrb	r3, [r3, #28]
 800919c:	f003 0302 	and.w	r3, r3, #2
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d104      	bne.n	80091ae <netconn_write_vectors_partly+0x66>
 80091a4:	797b      	ldrb	r3, [r7, #5]
 80091a6:	f003 0304 	and.w	r3, r3, #4
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d001      	beq.n	80091b2 <netconn_write_vectors_partly+0x6a>
 80091ae:	2301      	movs	r3, #1
 80091b0:	e000      	b.n	80091b4 <netconn_write_vectors_partly+0x6c>
 80091b2:	2300      	movs	r3, #0
 80091b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80091b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d005      	beq.n	80091cc <netconn_write_vectors_partly+0x84>
 80091c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d102      	bne.n	80091cc <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80091c6:	f06f 0305 	mvn.w	r3, #5
 80091ca:	e064      	b.n	8009296 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80091cc:	2300      	movs	r3, #0
 80091ce:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80091d0:	2300      	movs	r3, #0
 80091d2:	643b      	str	r3, [r7, #64]	; 0x40
 80091d4:	e015      	b.n	8009202 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80091d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091d8:	00db      	lsls	r3, r3, #3
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	4413      	add	r3, r2
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091e2:	4413      	add	r3, r2
 80091e4:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 80091e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091e8:	00db      	lsls	r3, r3, #3
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	4413      	add	r3, r2
 80091ee:	685b      	ldr	r3, [r3, #4]
 80091f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80091f2:	429a      	cmp	r2, r3
 80091f4:	d202      	bcs.n	80091fc <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 80091f6:	f06f 0305 	mvn.w	r3, #5
 80091fa:	e04c      	b.n	8009296 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 80091fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091fe:	3301      	adds	r3, #1
 8009200:	643b      	str	r3, [r7, #64]	; 0x40
 8009202:	88fb      	ldrh	r3, [r7, #6]
 8009204:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009206:	429a      	cmp	r2, r3
 8009208:	dbe5      	blt.n	80091d6 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800920a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800920c:	2b00      	cmp	r3, #0
 800920e:	d101      	bne.n	8009214 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	e040      	b.n	8009296 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009214:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009216:	2b00      	cmp	r3, #0
 8009218:	da0a      	bge.n	8009230 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800921a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800921c:	2b00      	cmp	r3, #0
 800921e:	d102      	bne.n	8009226 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009220:	f06f 0305 	mvn.w	r3, #5
 8009224:	e037      	b.n	8009296 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009226:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800922a:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800922c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009238:	88fb      	ldrh	r3, [r7, #6]
 800923a:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800923c:	2300      	movs	r3, #0
 800923e:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009240:	797b      	ldrb	r3, [r7, #5]
 8009242:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009248:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800924e:	f107 0314 	add.w	r3, r7, #20
 8009252:	4619      	mov	r1, r3
 8009254:	4816      	ldr	r0, [pc, #88]	; (80092b0 <netconn_write_vectors_partly+0x168>)
 8009256:	f7ff fb67 	bl	8008928 <netconn_apimsg>
 800925a:	4603      	mov	r3, r0
 800925c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009260:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009264:	2b00      	cmp	r3, #0
 8009266:	d114      	bne.n	8009292 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800926a:	2b00      	cmp	r3, #0
 800926c:	d002      	beq.n	8009274 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800926e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009272:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009274:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009278:	2b00      	cmp	r3, #0
 800927a:	d10a      	bne.n	8009292 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800927e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009280:	429a      	cmp	r2, r3
 8009282:	d006      	beq.n	8009292 <netconn_write_vectors_partly+0x14a>
 8009284:	4b06      	ldr	r3, [pc, #24]	; (80092a0 <netconn_write_vectors_partly+0x158>)
 8009286:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800928a:	490a      	ldr	r1, [pc, #40]	; (80092b4 <netconn_write_vectors_partly+0x16c>)
 800928c:	4806      	ldr	r0, [pc, #24]	; (80092a8 <netconn_write_vectors_partly+0x160>)
 800928e:	f00c fdbd 	bl	8015e0c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009292:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009296:	4618      	mov	r0, r3
 8009298:	3748      	adds	r7, #72	; 0x48
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}
 800929e:	bf00      	nop
 80092a0:	08017c64 	.word	0x08017c64
 80092a4:	08017f80 	.word	0x08017f80
 80092a8:	08017d00 	.word	0x08017d00
 80092ac:	08017f9c 	.word	0x08017f9c
 80092b0:	0800ab85 	.word	0x0800ab85
 80092b4:	08017fc0 	.word	0x08017fc0

080092b8 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08c      	sub	sp, #48	; 0x30
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	460b      	mov	r3, r1
 80092c2:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d109      	bne.n	80092de <netconn_close_shutdown+0x26>
 80092ca:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <netconn_close_shutdown+0x50>)
 80092cc:	f240 4247 	movw	r2, #1095	; 0x447
 80092d0:	490e      	ldr	r1, [pc, #56]	; (800930c <netconn_close_shutdown+0x54>)
 80092d2:	480f      	ldr	r0, [pc, #60]	; (8009310 <netconn_close_shutdown+0x58>)
 80092d4:	f00c fd9a 	bl	8015e0c <iprintf>
 80092d8:	f06f 030f 	mvn.w	r3, #15
 80092dc:	e010      	b.n	8009300 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80092e2:	78fb      	ldrb	r3, [r7, #3]
 80092e4:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80092e6:	2329      	movs	r3, #41	; 0x29
 80092e8:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80092ea:	f107 030c 	add.w	r3, r7, #12
 80092ee:	4619      	mov	r1, r3
 80092f0:	4808      	ldr	r0, [pc, #32]	; (8009314 <netconn_close_shutdown+0x5c>)
 80092f2:	f7ff fb19 	bl	8008928 <netconn_apimsg>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80092fc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009300:	4618      	mov	r0, r3
 8009302:	3730      	adds	r7, #48	; 0x30
 8009304:	46bd      	mov	sp, r7
 8009306:	bd80      	pop	{r7, pc}
 8009308:	08017c64 	.word	0x08017c64
 800930c:	08017fe4 	.word	0x08017fe4
 8009310:	08017d00 	.word	0x08017d00
 8009314:	0800ac9d 	.word	0x0800ac9d

08009318 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009320:	2103      	movs	r1, #3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff ffc8 	bl	80092b8 <netconn_close_shutdown>
 8009328:	4603      	mov	r3, r0
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b084      	sub	sp, #16
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d101      	bne.n	8009344 <netconn_err+0x12>
    return ERR_OK;
 8009340:	2300      	movs	r3, #0
 8009342:	e00d      	b.n	8009360 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009344:	f00c fc9a 	bl	8015c7c <sys_arch_protect>
 8009348:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	7a1b      	ldrb	r3, [r3, #8]
 800934e:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2200      	movs	r2, #0
 8009354:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f00c fc9e 	bl	8015c98 <sys_arch_unprotect>
  return err;
 800935c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	4603      	mov	r3, r0
 8009370:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009376:	f113 0f0d 	cmn.w	r3, #13
 800937a:	d009      	beq.n	8009390 <lwip_netconn_err_to_msg+0x28>
 800937c:	f113 0f0d 	cmn.w	r3, #13
 8009380:	dc0c      	bgt.n	800939c <lwip_netconn_err_to_msg+0x34>
 8009382:	f113 0f0f 	cmn.w	r3, #15
 8009386:	d007      	beq.n	8009398 <lwip_netconn_err_to_msg+0x30>
 8009388:	f113 0f0e 	cmn.w	r3, #14
 800938c:	d002      	beq.n	8009394 <lwip_netconn_err_to_msg+0x2c>
 800938e:	e005      	b.n	800939c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009390:	4b0a      	ldr	r3, [pc, #40]	; (80093bc <lwip_netconn_err_to_msg+0x54>)
 8009392:	e00e      	b.n	80093b2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009394:	4b0a      	ldr	r3, [pc, #40]	; (80093c0 <lwip_netconn_err_to_msg+0x58>)
 8009396:	e00c      	b.n	80093b2 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009398:	4b0a      	ldr	r3, [pc, #40]	; (80093c4 <lwip_netconn_err_to_msg+0x5c>)
 800939a:	e00a      	b.n	80093b2 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800939c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d005      	beq.n	80093b0 <lwip_netconn_err_to_msg+0x48>
 80093a4:	4b08      	ldr	r3, [pc, #32]	; (80093c8 <lwip_netconn_err_to_msg+0x60>)
 80093a6:	227d      	movs	r2, #125	; 0x7d
 80093a8:	4908      	ldr	r1, [pc, #32]	; (80093cc <lwip_netconn_err_to_msg+0x64>)
 80093aa:	4809      	ldr	r0, [pc, #36]	; (80093d0 <lwip_netconn_err_to_msg+0x68>)
 80093ac:	f00c fd2e 	bl	8015e0c <iprintf>
      return NULL;
 80093b0:	2300      	movs	r3, #0
  }
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	08018000 	.word	0x08018000
 80093c0:	08018001 	.word	0x08018001
 80093c4:	08018002 	.word	0x08018002
 80093c8:	08018004 	.word	0x08018004
 80093cc:	0801807c 	.word	0x0801807c
 80093d0:	0801808c 	.word	0x0801808c

080093d4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d105      	bne.n	80093f0 <lwip_netconn_is_err_msg+0x1c>
 80093e4:	4b12      	ldr	r3, [pc, #72]	; (8009430 <lwip_netconn_is_err_msg+0x5c>)
 80093e6:	2285      	movs	r2, #133	; 0x85
 80093e8:	4912      	ldr	r1, [pc, #72]	; (8009434 <lwip_netconn_is_err_msg+0x60>)
 80093ea:	4813      	ldr	r0, [pc, #76]	; (8009438 <lwip_netconn_is_err_msg+0x64>)
 80093ec:	f00c fd0e 	bl	8015e0c <iprintf>

  if (msg == &netconn_aborted) {
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a12      	ldr	r2, [pc, #72]	; (800943c <lwip_netconn_is_err_msg+0x68>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d104      	bne.n	8009402 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	22f3      	movs	r2, #243	; 0xf3
 80093fc:	701a      	strb	r2, [r3, #0]
    return 1;
 80093fe:	2301      	movs	r3, #1
 8009400:	e012      	b.n	8009428 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	4a0e      	ldr	r2, [pc, #56]	; (8009440 <lwip_netconn_is_err_msg+0x6c>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d104      	bne.n	8009414 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	22f2      	movs	r2, #242	; 0xf2
 800940e:	701a      	strb	r2, [r3, #0]
    return 1;
 8009410:	2301      	movs	r3, #1
 8009412:	e009      	b.n	8009428 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a0b      	ldr	r2, [pc, #44]	; (8009444 <lwip_netconn_is_err_msg+0x70>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d104      	bne.n	8009426 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	22f1      	movs	r2, #241	; 0xf1
 8009420:	701a      	strb	r2, [r3, #0]
    return 1;
 8009422:	2301      	movs	r3, #1
 8009424:	e000      	b.n	8009428 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3708      	adds	r7, #8
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}
 8009430:	08018004 	.word	0x08018004
 8009434:	080180b4 	.word	0x080180b4
 8009438:	0801808c 	.word	0x0801808c
 800943c:	08018000 	.word	0x08018000
 8009440:	08018001 	.word	0x08018001
 8009444:	08018002 	.word	0x08018002

08009448 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
 8009454:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009456:	68bb      	ldr	r3, [r7, #8]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d105      	bne.n	8009468 <recv_udp+0x20>
 800945c:	4b34      	ldr	r3, [pc, #208]	; (8009530 <recv_udp+0xe8>)
 800945e:	22e5      	movs	r2, #229	; 0xe5
 8009460:	4934      	ldr	r1, [pc, #208]	; (8009534 <recv_udp+0xec>)
 8009462:	4835      	ldr	r0, [pc, #212]	; (8009538 <recv_udp+0xf0>)
 8009464:	f00c fcd2 	bl	8015e0c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d105      	bne.n	800947a <recv_udp+0x32>
 800946e:	4b30      	ldr	r3, [pc, #192]	; (8009530 <recv_udp+0xe8>)
 8009470:	22e6      	movs	r2, #230	; 0xe6
 8009472:	4932      	ldr	r1, [pc, #200]	; (800953c <recv_udp+0xf4>)
 8009474:	4830      	ldr	r0, [pc, #192]	; (8009538 <recv_udp+0xf0>)
 8009476:	f00c fcc9 	bl	8015e0c <iprintf>
  conn = (struct netconn *)arg;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800947e:	69fb      	ldr	r3, [r7, #28]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d103      	bne.n	800948c <recv_udp+0x44>
    pbuf_free(p);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f005 fc7d 	bl	800ed84 <pbuf_free>
    return;
 800948a:	e04d      	b.n	8009528 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	68ba      	ldr	r2, [r7, #8]
 8009492:	429a      	cmp	r2, r3
 8009494:	d005      	beq.n	80094a2 <recv_udp+0x5a>
 8009496:	4b26      	ldr	r3, [pc, #152]	; (8009530 <recv_udp+0xe8>)
 8009498:	22ee      	movs	r2, #238	; 0xee
 800949a:	4929      	ldr	r1, [pc, #164]	; (8009540 <recv_udp+0xf8>)
 800949c:	4826      	ldr	r0, [pc, #152]	; (8009538 <recv_udp+0xf0>)
 800949e:	f00c fcb5 	bl	8015e0c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	3310      	adds	r3, #16
 80094a6:	4618      	mov	r0, r3
 80094a8:	f00c fad9 	bl	8015a5e <sys_mbox_valid>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d103      	bne.n	80094ba <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f005 fc66 	bl	800ed84 <pbuf_free>
    return;
 80094b8:	e036      	b.n	8009528 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80094ba:	2006      	movs	r0, #6
 80094bc:	f004 fda4 	bl	800e008 <memp_malloc>
 80094c0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80094c2:	69bb      	ldr	r3, [r7, #24]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d103      	bne.n	80094d0 <recv_udp+0x88>
    pbuf_free(p);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f005 fc5b 	bl	800ed84 <pbuf_free>
    return;
 80094ce:	e02b      	b.n	8009528 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	687a      	ldr	r2, [r7, #4]
 80094da:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <recv_udp+0xa0>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	e000      	b.n	80094ea <recv_udp+0xa2>
 80094e8:	2300      	movs	r3, #0
 80094ea:	69ba      	ldr	r2, [r7, #24]
 80094ec:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80094f2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	891b      	ldrh	r3, [r3, #8]
 80094f8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	3310      	adds	r3, #16
 80094fe:	69b9      	ldr	r1, [r7, #24]
 8009500:	4618      	mov	r0, r3
 8009502:	f00c fa37 	bl	8015974 <sys_mbox_trypost>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d003      	beq.n	8009514 <recv_udp+0xcc>
    netbuf_delete(buf);
 800950c:	69b8      	ldr	r0, [r7, #24]
 800950e:	f001 fc51 	bl	800adb4 <netbuf_delete>
    return;
 8009512:	e009      	b.n	8009528 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	2b00      	cmp	r3, #0
 800951a:	d005      	beq.n	8009528 <recv_udp+0xe0>
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	8afa      	ldrh	r2, [r7, #22]
 8009522:	2100      	movs	r1, #0
 8009524:	69f8      	ldr	r0, [r7, #28]
 8009526:	4798      	blx	r3
  }
}
 8009528:	3720      	adds	r7, #32
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	08018004 	.word	0x08018004
 8009534:	080180c0 	.word	0x080180c0
 8009538:	0801808c 	.word	0x0801808c
 800953c:	080180e4 	.word	0x080180e4
 8009540:	08018104 	.word	0x08018104

08009544 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b088      	sub	sp, #32
 8009548:	af00      	add	r7, sp, #0
 800954a:	60f8      	str	r0, [r7, #12]
 800954c:	60b9      	str	r1, [r7, #8]
 800954e:	607a      	str	r2, [r7, #4]
 8009550:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d106      	bne.n	8009566 <recv_tcp+0x22>
 8009558:	4b36      	ldr	r3, [pc, #216]	; (8009634 <recv_tcp+0xf0>)
 800955a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800955e:	4936      	ldr	r1, [pc, #216]	; (8009638 <recv_tcp+0xf4>)
 8009560:	4836      	ldr	r0, [pc, #216]	; (800963c <recv_tcp+0xf8>)
 8009562:	f00c fc53 	bl	8015e0c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d106      	bne.n	800957a <recv_tcp+0x36>
 800956c:	4b31      	ldr	r3, [pc, #196]	; (8009634 <recv_tcp+0xf0>)
 800956e:	f240 122d 	movw	r2, #301	; 0x12d
 8009572:	4933      	ldr	r1, [pc, #204]	; (8009640 <recv_tcp+0xfc>)
 8009574:	4831      	ldr	r0, [pc, #196]	; (800963c <recv_tcp+0xf8>)
 8009576:	f00c fc49 	bl	8015e0c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800957a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d006      	beq.n	8009590 <recv_tcp+0x4c>
 8009582:	4b2c      	ldr	r3, [pc, #176]	; (8009634 <recv_tcp+0xf0>)
 8009584:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8009588:	492e      	ldr	r1, [pc, #184]	; (8009644 <recv_tcp+0x100>)
 800958a:	482c      	ldr	r0, [pc, #176]	; (800963c <recv_tcp+0xf8>)
 800958c:	f00c fc3e 	bl	8015e0c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009594:	697b      	ldr	r3, [r7, #20]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d102      	bne.n	80095a0 <recv_tcp+0x5c>
    return ERR_VAL;
 800959a:	f06f 0305 	mvn.w	r3, #5
 800959e:	e045      	b.n	800962c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	429a      	cmp	r2, r3
 80095a8:	d006      	beq.n	80095b8 <recv_tcp+0x74>
 80095aa:	4b22      	ldr	r3, [pc, #136]	; (8009634 <recv_tcp+0xf0>)
 80095ac:	f240 1235 	movw	r2, #309	; 0x135
 80095b0:	4925      	ldr	r1, [pc, #148]	; (8009648 <recv_tcp+0x104>)
 80095b2:	4822      	ldr	r0, [pc, #136]	; (800963c <recv_tcp+0xf8>)
 80095b4:	f00c fc2a 	bl	8015e0c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	3310      	adds	r3, #16
 80095bc:	4618      	mov	r0, r3
 80095be:	f00c fa4e 	bl	8015a5e <sys_mbox_valid>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10d      	bne.n	80095e4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d008      	beq.n	80095e0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	891b      	ldrh	r3, [r3, #8]
 80095d2:	4619      	mov	r1, r3
 80095d4:	68b8      	ldr	r0, [r7, #8]
 80095d6:	f006 fb83 	bl	800fce0 <tcp_recved>
      pbuf_free(p);
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f005 fbd2 	bl	800ed84 <pbuf_free>
    }
    return ERR_OK;
 80095e0:	2300      	movs	r3, #0
 80095e2:	e023      	b.n	800962c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d005      	beq.n	80095f6 <recv_tcp+0xb2>
    msg = p;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	891b      	ldrh	r3, [r3, #8]
 80095f2:	83fb      	strh	r3, [r7, #30]
 80095f4:	e003      	b.n	80095fe <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80095f6:	4b15      	ldr	r3, [pc, #84]	; (800964c <recv_tcp+0x108>)
 80095f8:	61bb      	str	r3, [r7, #24]
    len = 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	3310      	adds	r3, #16
 8009602:	69b9      	ldr	r1, [r7, #24]
 8009604:	4618      	mov	r0, r3
 8009606:	f00c f9b5 	bl	8015974 <sys_mbox_trypost>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d002      	beq.n	8009616 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009610:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009614:	e00a      	b.n	800962c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800961a:	2b00      	cmp	r3, #0
 800961c:	d005      	beq.n	800962a <recv_tcp+0xe6>
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009622:	8bfa      	ldrh	r2, [r7, #30]
 8009624:	2100      	movs	r1, #0
 8009626:	6978      	ldr	r0, [r7, #20]
 8009628:	4798      	blx	r3
  }

  return ERR_OK;
 800962a:	2300      	movs	r3, #0
}
 800962c:	4618      	mov	r0, r3
 800962e:	3720      	adds	r7, #32
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}
 8009634:	08018004 	.word	0x08018004
 8009638:	08018124 	.word	0x08018124
 800963c:	0801808c 	.word	0x0801808c
 8009640:	08018148 	.word	0x08018148
 8009644:	08018168 	.word	0x08018168
 8009648:	08018180 	.word	0x08018180
 800964c:	08018002 	.word	0x08018002

08009650 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
 8009658:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d106      	bne.n	8009672 <poll_tcp+0x22>
 8009664:	4b2a      	ldr	r3, [pc, #168]	; (8009710 <poll_tcp+0xc0>)
 8009666:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800966a:	492a      	ldr	r1, [pc, #168]	; (8009714 <poll_tcp+0xc4>)
 800966c:	482a      	ldr	r0, [pc, #168]	; (8009718 <poll_tcp+0xc8>)
 800966e:	f00c fbcd 	bl	8015e0c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	785b      	ldrb	r3, [r3, #1]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d104      	bne.n	8009684 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800967a:	2101      	movs	r1, #1
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f001 f8b3 	bl	800a7e8 <lwip_netconn_do_writemore>
 8009682:	e016      	b.n	80096b2 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	785b      	ldrb	r3, [r3, #1]
 8009688:	2b04      	cmp	r3, #4
 800968a:	d112      	bne.n	80096b2 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6a1b      	ldr	r3, [r3, #32]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00a      	beq.n	80096aa <poll_tcp+0x5a>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6a1b      	ldr	r3, [r3, #32]
 8009698:	7a5b      	ldrb	r3, [r3, #9]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d005      	beq.n	80096aa <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6a1b      	ldr	r3, [r3, #32]
 80096a2:	7a5a      	ldrb	r2, [r3, #9]
 80096a4:	3a01      	subs	r2, #1
 80096a6:	b2d2      	uxtb	r2, r2
 80096a8:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80096aa:	2101      	movs	r1, #1
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f000 fbfb 	bl	8009ea8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	7f1b      	ldrb	r3, [r3, #28]
 80096b6:	f003 0310 	and.w	r3, r3, #16
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d022      	beq.n	8009704 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d01e      	beq.n	8009704 <poll_tcp+0xb4>
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80096ce:	f640 3269 	movw	r2, #2921	; 0xb69
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d916      	bls.n	8009704 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80096de:	2b04      	cmp	r3, #4
 80096e0:	d810      	bhi.n	8009704 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	7f1b      	ldrb	r3, [r3, #28]
 80096e6:	f023 0310 	bic.w	r3, r3, #16
 80096ea:	b2da      	uxtb	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d005      	beq.n	8009704 <poll_tcp+0xb4>
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	2200      	movs	r2, #0
 80096fe:	2102      	movs	r1, #2
 8009700:	68f8      	ldr	r0, [r7, #12]
 8009702:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	08018004 	.word	0x08018004
 8009714:	080181a0 	.word	0x080181a0
 8009718:	0801808c 	.word	0x0801808c

0800971c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b086      	sub	sp, #24
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	4613      	mov	r3, r2
 8009728:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d106      	bne.n	8009742 <sent_tcp+0x26>
 8009734:	4b21      	ldr	r3, [pc, #132]	; (80097bc <sent_tcp+0xa0>)
 8009736:	f240 1293 	movw	r2, #403	; 0x193
 800973a:	4921      	ldr	r1, [pc, #132]	; (80097c0 <sent_tcp+0xa4>)
 800973c:	4821      	ldr	r0, [pc, #132]	; (80097c4 <sent_tcp+0xa8>)
 800973e:	f00c fb65 	bl	8015e0c <iprintf>

  if (conn) {
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d033      	beq.n	80097b0 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	785b      	ldrb	r3, [r3, #1]
 800974c:	2b01      	cmp	r3, #1
 800974e:	d104      	bne.n	800975a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009750:	2101      	movs	r1, #1
 8009752:	6978      	ldr	r0, [r7, #20]
 8009754:	f001 f848 	bl	800a7e8 <lwip_netconn_do_writemore>
 8009758:	e007      	b.n	800976a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	785b      	ldrb	r3, [r3, #1]
 800975e:	2b04      	cmp	r3, #4
 8009760:	d103      	bne.n	800976a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009762:	2101      	movs	r1, #1
 8009764:	6978      	ldr	r0, [r7, #20]
 8009766:	f000 fb9f 	bl	8009ea8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d01e      	beq.n	80097b0 <sent_tcp+0x94>
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800977a:	f640 3269 	movw	r2, #2921	; 0xb69
 800977e:	4293      	cmp	r3, r2
 8009780:	d916      	bls.n	80097b0 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800978a:	2b04      	cmp	r3, #4
 800978c:	d810      	bhi.n	80097b0 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	7f1b      	ldrb	r3, [r3, #28]
 8009792:	f023 0310 	bic.w	r3, r3, #16
 8009796:	b2da      	uxtb	r2, r3
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d005      	beq.n	80097b0 <sent_tcp+0x94>
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a8:	88fa      	ldrh	r2, [r7, #6]
 80097aa:	2102      	movs	r1, #2
 80097ac:	6978      	ldr	r0, [r7, #20]
 80097ae:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3718      	adds	r7, #24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	08018004 	.word	0x08018004
 80097c0:	080181a0 	.word	0x080181a0
 80097c4:	0801808c 	.word	0x0801808c

080097c8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b088      	sub	sp, #32
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	460b      	mov	r3, r1
 80097d2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80097d8:	69fb      	ldr	r3, [r7, #28]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d106      	bne.n	80097ec <err_tcp+0x24>
 80097de:	4b5f      	ldr	r3, [pc, #380]	; (800995c <err_tcp+0x194>)
 80097e0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80097e4:	495e      	ldr	r1, [pc, #376]	; (8009960 <err_tcp+0x198>)
 80097e6:	485f      	ldr	r0, [pc, #380]	; (8009964 <err_tcp+0x19c>)
 80097e8:	f00c fb10 	bl	8015e0c <iprintf>

  SYS_ARCH_PROTECT(lev);
 80097ec:	f00c fa46 	bl	8015c7c <sys_arch_protect>
 80097f0:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	2200      	movs	r2, #0
 80097f6:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	78fa      	ldrb	r2, [r7, #3]
 80097fc:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	7f1b      	ldrb	r3, [r3, #28]
 8009802:	f043 0301 	orr.w	r3, r3, #1
 8009806:	b2da      	uxtb	r2, r3
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	785b      	ldrb	r3, [r3, #1]
 8009810:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	2200      	movs	r2, #0
 8009816:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009818:	69b8      	ldr	r0, [r7, #24]
 800981a:	f00c fa3d 	bl	8015c98 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009822:	2b00      	cmp	r3, #0
 8009824:	d005      	beq.n	8009832 <err_tcp+0x6a>
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982a:	2200      	movs	r2, #0
 800982c:	2104      	movs	r1, #4
 800982e:	69f8      	ldr	r0, [r7, #28]
 8009830:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	2b00      	cmp	r3, #0
 8009838:	d005      	beq.n	8009846 <err_tcp+0x7e>
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800983e:	2200      	movs	r2, #0
 8009840:	2100      	movs	r1, #0
 8009842:	69f8      	ldr	r0, [r7, #28]
 8009844:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984a:	2b00      	cmp	r3, #0
 800984c:	d005      	beq.n	800985a <err_tcp+0x92>
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009852:	2200      	movs	r2, #0
 8009854:	2102      	movs	r1, #2
 8009856:	69f8      	ldr	r0, [r7, #28]
 8009858:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800985a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff fd82 	bl	8009368 <lwip_netconn_err_to_msg>
 8009864:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	3310      	adds	r3, #16
 800986a:	4618      	mov	r0, r3
 800986c:	f00c f8f7 	bl	8015a5e <sys_mbox_valid>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d005      	beq.n	8009882 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	3310      	adds	r3, #16
 800987a:	6939      	ldr	r1, [r7, #16]
 800987c:	4618      	mov	r0, r3
 800987e:	f00c f879 	bl	8015974 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	3314      	adds	r3, #20
 8009886:	4618      	mov	r0, r3
 8009888:	f00c f8e9 	bl	8015a5e <sys_mbox_valid>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d005      	beq.n	800989e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	3314      	adds	r3, #20
 8009896:	6939      	ldr	r1, [r7, #16]
 8009898:	4618      	mov	r0, r3
 800989a:	f00c f86b 	bl	8015974 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800989e:	7dfb      	ldrb	r3, [r7, #23]
 80098a0:	2b01      	cmp	r3, #1
 80098a2:	d005      	beq.n	80098b0 <err_tcp+0xe8>
 80098a4:	7dfb      	ldrb	r3, [r7, #23]
 80098a6:	2b04      	cmp	r3, #4
 80098a8:	d002      	beq.n	80098b0 <err_tcp+0xe8>
 80098aa:	7dfb      	ldrb	r3, [r7, #23]
 80098ac:	2b03      	cmp	r3, #3
 80098ae:	d143      	bne.n	8009938 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	7f1b      	ldrb	r3, [r3, #28]
 80098b4:	f003 0304 	and.w	r3, r3, #4
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	bf14      	ite	ne
 80098bc:	2301      	movne	r3, #1
 80098be:	2300      	moveq	r3, #0
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	7f1b      	ldrb	r3, [r3, #28]
 80098c8:	f023 0304 	bic.w	r3, r3, #4
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d13b      	bne.n	8009950 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80098d8:	69fb      	ldr	r3, [r7, #28]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d106      	bne.n	80098ee <err_tcp+0x126>
 80098e0:	4b1e      	ldr	r3, [pc, #120]	; (800995c <err_tcp+0x194>)
 80098e2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80098e6:	4920      	ldr	r1, [pc, #128]	; (8009968 <err_tcp+0x1a0>)
 80098e8:	481e      	ldr	r0, [pc, #120]	; (8009964 <err_tcp+0x19c>)
 80098ea:	f00c fa8f 	bl	8015e0c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	2b04      	cmp	r3, #4
 80098f2:	d104      	bne.n	80098fe <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	6a1b      	ldr	r3, [r3, #32]
 80098f8:	2200      	movs	r2, #0
 80098fa:	711a      	strb	r2, [r3, #4]
 80098fc:	e003      	b.n	8009906 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	78fa      	ldrb	r2, [r7, #3]
 8009904:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	330c      	adds	r3, #12
 800990e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009910:	68b8      	ldr	r0, [r7, #8]
 8009912:	f00c f933 	bl	8015b7c <sys_sem_valid>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d106      	bne.n	800992a <err_tcp+0x162>
 800991c:	4b0f      	ldr	r3, [pc, #60]	; (800995c <err_tcp+0x194>)
 800991e:	f240 12ef 	movw	r2, #495	; 0x1ef
 8009922:	4912      	ldr	r1, [pc, #72]	; (800996c <err_tcp+0x1a4>)
 8009924:	480f      	ldr	r0, [pc, #60]	; (8009964 <err_tcp+0x19c>)
 8009926:	f00c fa71 	bl	8015e0c <iprintf>
      conn->current_msg = NULL;
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	2200      	movs	r2, #0
 800992e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009930:	68b8      	ldr	r0, [r7, #8]
 8009932:	f00c f909 	bl	8015b48 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009936:	e00b      	b.n	8009950 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	6a1b      	ldr	r3, [r3, #32]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d008      	beq.n	8009952 <err_tcp+0x18a>
 8009940:	4b06      	ldr	r3, [pc, #24]	; (800995c <err_tcp+0x194>)
 8009942:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009946:	490a      	ldr	r1, [pc, #40]	; (8009970 <err_tcp+0x1a8>)
 8009948:	4806      	ldr	r0, [pc, #24]	; (8009964 <err_tcp+0x19c>)
 800994a:	f00c fa5f 	bl	8015e0c <iprintf>
  }
}
 800994e:	e000      	b.n	8009952 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009950:	bf00      	nop
}
 8009952:	bf00      	nop
 8009954:	3720      	adds	r7, #32
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	08018004 	.word	0x08018004
 8009960:	080181a0 	.word	0x080181a0
 8009964:	0801808c 	.word	0x0801808c
 8009968:	080181b0 	.word	0x080181b0
 800996c:	080181cc 	.word	0x080181cc
 8009970:	080181e8 	.word	0x080181e8

08009974 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009982:	6879      	ldr	r1, [r7, #4]
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f007 f94b 	bl	8010c20 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800998a:	490a      	ldr	r1, [pc, #40]	; (80099b4 <setup_tcp+0x40>)
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f007 f959 	bl	8010c44 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009992:	4909      	ldr	r1, [pc, #36]	; (80099b8 <setup_tcp+0x44>)
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f007 f977 	bl	8010c88 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800999a:	2202      	movs	r2, #2
 800999c:	4907      	ldr	r1, [pc, #28]	; (80099bc <setup_tcp+0x48>)
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f007 f9cc 	bl	8010d3c <tcp_poll>
  tcp_err(pcb, err_tcp);
 80099a4:	4906      	ldr	r1, [pc, #24]	; (80099c0 <setup_tcp+0x4c>)
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f007 f98e 	bl	8010cc8 <tcp_err>
}
 80099ac:	bf00      	nop
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	08009545 	.word	0x08009545
 80099b8:	0800971d 	.word	0x0800971d
 80099bc:	08009651 	.word	0x08009651
 80099c0:	080097c9 	.word	0x080097c9

080099c4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80099c4:	b590      	push	{r4, r7, lr}
 80099c6:	b089      	sub	sp, #36	; 0x24
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	4613      	mov	r3, r2
 80099d0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d102      	bne.n	80099e2 <accept_function+0x1e>
    return ERR_VAL;
 80099dc:	f06f 0305 	mvn.w	r3, #5
 80099e0:	e0a1      	b.n	8009b26 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80099e2:	69fb      	ldr	r3, [r7, #28]
 80099e4:	3314      	adds	r3, #20
 80099e6:	4618      	mov	r0, r3
 80099e8:	f00c f839 	bl	8015a5e <sys_mbox_valid>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d102      	bne.n	80099f8 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80099f2:	f06f 0305 	mvn.w	r3, #5
 80099f6:	e096      	b.n	8009b26 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d11b      	bne.n	8009a36 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	f103 0414 	add.w	r4, r3, #20
 8009a04:	f06f 000c 	mvn.w	r0, #12
 8009a08:	f7ff fcae 	bl	8009368 <lwip_netconn_err_to_msg>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	4619      	mov	r1, r3
 8009a10:	4620      	mov	r0, r4
 8009a12:	f00b ffaf 	bl	8015974 <sys_mbox_trypost>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d109      	bne.n	8009a30 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d005      	beq.n	8009a30 <accept_function+0x6c>
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a28:	2200      	movs	r2, #0
 8009a2a:	2100      	movs	r1, #0
 8009a2c:	69f8      	ldr	r0, [r7, #28]
 8009a2e:	4798      	blx	r3
    }
    return ERR_VAL;
 8009a30:	f06f 0305 	mvn.w	r3, #5
 8009a34:	e077      	b.n	8009b26 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d006      	beq.n	8009a4c <accept_function+0x88>
 8009a3e:	4b3c      	ldr	r3, [pc, #240]	; (8009b30 <accept_function+0x16c>)
 8009a40:	f240 222a 	movw	r2, #554	; 0x22a
 8009a44:	493b      	ldr	r1, [pc, #236]	; (8009b34 <accept_function+0x170>)
 8009a46:	483c      	ldr	r0, [pc, #240]	; (8009b38 <accept_function+0x174>)
 8009a48:	f00c f9e0 	bl	8015e0c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	781a      	ldrb	r2, [r3, #0]
 8009a50:	69fb      	ldr	r3, [r7, #28]
 8009a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a54:	4619      	mov	r1, r3
 8009a56:	4610      	mov	r0, r2
 8009a58:	f000 f8f0 	bl	8009c3c <netconn_alloc>
 8009a5c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d11b      	bne.n	8009a9c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	f103 0414 	add.w	r4, r3, #20
 8009a6a:	f06f 000c 	mvn.w	r0, #12
 8009a6e:	f7ff fc7b 	bl	8009368 <lwip_netconn_err_to_msg>
 8009a72:	4603      	mov	r3, r0
 8009a74:	4619      	mov	r1, r3
 8009a76:	4620      	mov	r0, r4
 8009a78:	f00b ff7c 	bl	8015974 <sys_mbox_trypost>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d109      	bne.n	8009a96 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d005      	beq.n	8009a96 <accept_function+0xd2>
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8e:	2200      	movs	r2, #0
 8009a90:	2100      	movs	r1, #0
 8009a92:	69f8      	ldr	r0, [r7, #28]
 8009a94:	4798      	blx	r3
    }
    return ERR_MEM;
 8009a96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a9a:	e044      	b.n	8009b26 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009aa2:	69b8      	ldr	r0, [r7, #24]
 8009aa4:	f7ff ff66 	bl	8009974 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	3314      	adds	r3, #20
 8009aac:	69b9      	ldr	r1, [r7, #24]
 8009aae:	4618      	mov	r0, r3
 8009ab0:	f00b ff60 	bl	8015974 <sys_mbox_trypost>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d02a      	beq.n	8009b10 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009aba:	69bb      	ldr	r3, [r7, #24]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	6978      	ldr	r0, [r7, #20]
 8009ac4:	f007 f8ac 	bl	8010c20 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009ac8:	2100      	movs	r1, #0
 8009aca:	6978      	ldr	r0, [r7, #20]
 8009acc:	f007 f8ba 	bl	8010c44 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009ad0:	2100      	movs	r1, #0
 8009ad2:	6978      	ldr	r0, [r7, #20]
 8009ad4:	f007 f8d8 	bl	8010c88 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009ad8:	2200      	movs	r2, #0
 8009ada:	2100      	movs	r1, #0
 8009adc:	6978      	ldr	r0, [r7, #20]
 8009ade:	f007 f92d 	bl	8010d3c <tcp_poll>
    tcp_err(pcb, NULL);
 8009ae2:	2100      	movs	r1, #0
 8009ae4:	6978      	ldr	r0, [r7, #20]
 8009ae6:	f007 f8ef 	bl	8010cc8 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	2200      	movs	r2, #0
 8009aee:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009af0:	69bb      	ldr	r3, [r7, #24]
 8009af2:	3310      	adds	r3, #16
 8009af4:	4618      	mov	r0, r3
 8009af6:	f00b ff2b 	bl	8015950 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	3310      	adds	r3, #16
 8009afe:	4618      	mov	r0, r3
 8009b00:	f00b ffbe 	bl	8015a80 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009b04:	69b8      	ldr	r0, [r7, #24]
 8009b06:	f000 f907 	bl	8009d18 <netconn_free>
    return ERR_MEM;
 8009b0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009b0e:	e00a      	b.n	8009b26 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d005      	beq.n	8009b24 <accept_function+0x160>
 8009b18:	69fb      	ldr	r3, [r7, #28]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2100      	movs	r1, #0
 8009b20:	69f8      	ldr	r0, [r7, #28]
 8009b22:	4798      	blx	r3
  }

  return ERR_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3724      	adds	r7, #36	; 0x24
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd90      	pop	{r4, r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	08018004 	.word	0x08018004
 8009b34:	08018204 	.word	0x08018204
 8009b38:	0801808c 	.word	0x0801808c

08009b3c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009b3c:	b590      	push	{r4, r7, lr}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d006      	beq.n	8009b60 <pcb_new+0x24>
 8009b52:	4b2b      	ldr	r3, [pc, #172]	; (8009c00 <pcb_new+0xc4>)
 8009b54:	f240 2265 	movw	r2, #613	; 0x265
 8009b58:	492a      	ldr	r1, [pc, #168]	; (8009c04 <pcb_new+0xc8>)
 8009b5a:	482b      	ldr	r0, [pc, #172]	; (8009c08 <pcb_new+0xcc>)
 8009b5c:	f00c f956 	bl	8015e0c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b6a:	2b10      	cmp	r3, #16
 8009b6c:	d022      	beq.n	8009bb4 <pcb_new+0x78>
 8009b6e:	2b20      	cmp	r3, #32
 8009b70:	d133      	bne.n	8009bda <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681c      	ldr	r4, [r3, #0]
 8009b76:	7bfb      	ldrb	r3, [r7, #15]
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f00b fdb8 	bl	80156ee <udp_new_ip_type>
 8009b7e:	4603      	mov	r3, r0
 8009b80:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d02a      	beq.n	8009be2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	2b22      	cmp	r3, #34	; 0x22
 8009b94:	d104      	bne.n	8009ba0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	2201      	movs	r2, #1
 8009b9e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6858      	ldr	r0, [r3, #4]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	4917      	ldr	r1, [pc, #92]	; (8009c0c <pcb_new+0xd0>)
 8009bae:	f00b fd25 	bl	80155fc <udp_recv>
      }
      break;
 8009bb2:	e016      	b.n	8009be2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681c      	ldr	r4, [r3, #0]
 8009bb8:	7bfb      	ldrb	r3, [r7, #15]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f007 f822 	bl	8010c04 <tcp_new_ip_type>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	685b      	ldr	r3, [r3, #4]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00b      	beq.n	8009be6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7ff fece 	bl	8009974 <setup_tcp>
      }
      break;
 8009bd8:	e005      	b.n	8009be6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	22fa      	movs	r2, #250	; 0xfa
 8009bde:	711a      	strb	r2, [r3, #4]
      return;
 8009be0:	e00a      	b.n	8009bf8 <pcb_new+0xbc>
      break;
 8009be2:	bf00      	nop
 8009be4:	e000      	b.n	8009be8 <pcb_new+0xac>
      break;
 8009be6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d102      	bne.n	8009bf8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	22ff      	movs	r2, #255	; 0xff
 8009bf6:	711a      	strb	r2, [r3, #4]
  }
}
 8009bf8:	3714      	adds	r7, #20
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd90      	pop	{r4, r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	08018004 	.word	0x08018004
 8009c04:	0801822c 	.word	0x0801822c
 8009c08:	0801808c 	.word	0x0801808c
 8009c0c:	08009449 	.word	0x08009449

08009c10 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d102      	bne.n	8009c32 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f7ff ff85 	bl	8009b3c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	4603      	mov	r3, r0
 8009c44:	6039      	str	r1, [r7, #0]
 8009c46:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009c4c:	2007      	movs	r0, #7
 8009c4e:	f004 f9db 	bl	800e008 <memp_malloc>
 8009c52:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d101      	bne.n	8009c5e <netconn_alloc+0x22>
    return NULL;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	e052      	b.n	8009d04 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	79fa      	ldrb	r2, [r7, #7]
 8009c68:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009c70:	79fb      	ldrb	r3, [r7, #7]
 8009c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c76:	2b10      	cmp	r3, #16
 8009c78:	d004      	beq.n	8009c84 <netconn_alloc+0x48>
 8009c7a:	2b20      	cmp	r3, #32
 8009c7c:	d105      	bne.n	8009c8a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009c7e:	2306      	movs	r3, #6
 8009c80:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009c82:	e00a      	b.n	8009c9a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009c84:	2306      	movs	r3, #6
 8009c86:	617b      	str	r3, [r7, #20]
      break;
 8009c88:	e007      	b.n	8009c9a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009c8a:	4b20      	ldr	r3, [pc, #128]	; (8009d0c <netconn_alloc+0xd0>)
 8009c8c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009c90:	491f      	ldr	r1, [pc, #124]	; (8009d10 <netconn_alloc+0xd4>)
 8009c92:	4820      	ldr	r0, [pc, #128]	; (8009d14 <netconn_alloc+0xd8>)
 8009c94:	f00c f8ba 	bl	8015e0c <iprintf>
      goto free_and_return;
 8009c98:	e02f      	b.n	8009cfa <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3310      	adds	r3, #16
 8009c9e:	6979      	ldr	r1, [r7, #20]
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f00b fe37 	bl	8015914 <sys_mbox_new>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d125      	bne.n	8009cf8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	330c      	adds	r3, #12
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f00b fef1 	bl	8015a9a <sys_sem_new>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d005      	beq.n	8009cca <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3310      	adds	r3, #16
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f00b fe44 	bl	8015950 <sys_mbox_free>
    goto free_and_return;
 8009cc8:	e017      	b.n	8009cfa <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	3314      	adds	r3, #20
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f00b fed6 	bl	8015a80 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ce0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	683a      	ldr	r2, [r7, #0]
 8009ce6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	7cfa      	ldrb	r2, [r7, #19]
 8009cf2:	771a      	strb	r2, [r3, #28]
  return conn;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	e005      	b.n	8009d04 <netconn_alloc+0xc8>
    goto free_and_return;
 8009cf8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009cfa:	68f9      	ldr	r1, [r7, #12]
 8009cfc:	2007      	movs	r0, #7
 8009cfe:	f004 f9f9 	bl	800e0f4 <memp_free>
  return NULL;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	08018004 	.word	0x08018004
 8009d10:	0801824c 	.word	0x0801824c
 8009d14:	0801808c 	.word	0x0801808c

08009d18 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d006      	beq.n	8009d36 <netconn_free+0x1e>
 8009d28:	4b1b      	ldr	r3, [pc, #108]	; (8009d98 <netconn_free+0x80>)
 8009d2a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009d2e:	491b      	ldr	r1, [pc, #108]	; (8009d9c <netconn_free+0x84>)
 8009d30:	481b      	ldr	r0, [pc, #108]	; (8009da0 <netconn_free+0x88>)
 8009d32:	f00c f86b 	bl	8015e0c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3310      	adds	r3, #16
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f00b fe8f 	bl	8015a5e <sys_mbox_valid>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d006      	beq.n	8009d54 <netconn_free+0x3c>
 8009d46:	4b14      	ldr	r3, [pc, #80]	; (8009d98 <netconn_free+0x80>)
 8009d48:	f240 3223 	movw	r2, #803	; 0x323
 8009d4c:	4915      	ldr	r1, [pc, #84]	; (8009da4 <netconn_free+0x8c>)
 8009d4e:	4814      	ldr	r0, [pc, #80]	; (8009da0 <netconn_free+0x88>)
 8009d50:	f00c f85c 	bl	8015e0c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	3314      	adds	r3, #20
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f00b fe80 	bl	8015a5e <sys_mbox_valid>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d006      	beq.n	8009d72 <netconn_free+0x5a>
 8009d64:	4b0c      	ldr	r3, [pc, #48]	; (8009d98 <netconn_free+0x80>)
 8009d66:	f240 3226 	movw	r2, #806	; 0x326
 8009d6a:	490f      	ldr	r1, [pc, #60]	; (8009da8 <netconn_free+0x90>)
 8009d6c:	480c      	ldr	r0, [pc, #48]	; (8009da0 <netconn_free+0x88>)
 8009d6e:	f00c f84d 	bl	8015e0c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	330c      	adds	r3, #12
 8009d76:	4618      	mov	r0, r3
 8009d78:	f00b fef3 	bl	8015b62 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	330c      	adds	r3, #12
 8009d80:	4618      	mov	r0, r3
 8009d82:	f00b ff0c 	bl	8015b9e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009d86:	6879      	ldr	r1, [r7, #4]
 8009d88:	2007      	movs	r0, #7
 8009d8a:	f004 f9b3 	bl	800e0f4 <memp_free>
}
 8009d8e:	bf00      	nop
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	08018004 	.word	0x08018004
 8009d9c:	08018274 	.word	0x08018274
 8009da0:	0801808c 	.word	0x0801808c
 8009da4:	080182a4 	.word	0x080182a4
 8009da8:	080182e0 	.word	0x080182e0

08009dac <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	3310      	adds	r3, #16
 8009db8:	4618      	mov	r0, r3
 8009dba:	f00b fe50 	bl	8015a5e <sys_mbox_valid>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d02f      	beq.n	8009e24 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009dc4:	e018      	b.n	8009df8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009dce:	2b10      	cmp	r3, #16
 8009dd0:	d10e      	bne.n	8009df0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f107 020f 	add.w	r2, r7, #15
 8009dd8:	4611      	mov	r1, r2
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7ff fafa 	bl	80093d4 <lwip_netconn_is_err_msg>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d108      	bne.n	8009df8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f004 ffcb 	bl	800ed84 <pbuf_free>
 8009dee:	e003      	b.n	8009df8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f000 ffde 	bl	800adb4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	3310      	adds	r3, #16
 8009dfc:	f107 0210 	add.w	r2, r7, #16
 8009e00:	4611      	mov	r1, r2
 8009e02:	4618      	mov	r0, r3
 8009e04:	f00b fe0f 	bl	8015a26 <sys_arch_mbox_tryfetch>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e0e:	d1da      	bne.n	8009dc6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	3310      	adds	r3, #16
 8009e14:	4618      	mov	r0, r3
 8009e16:	f00b fd9b 	bl	8015950 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	3310      	adds	r3, #16
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f00b fe2e 	bl	8015a80 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	3314      	adds	r3, #20
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f00b fe18 	bl	8015a5e <sys_mbox_valid>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d034      	beq.n	8009e9e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009e34:	e01d      	b.n	8009e72 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8009e36:	693b      	ldr	r3, [r7, #16]
 8009e38:	f107 020e 	add.w	r2, r7, #14
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7ff fac8 	bl	80093d4 <lwip_netconn_is_err_msg>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d113      	bne.n	8009e72 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009e4e:	6978      	ldr	r0, [r7, #20]
 8009e50:	f7ff ffac 	bl	8009dac <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d007      	beq.n	8009e6c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	685b      	ldr	r3, [r3, #4]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f005 fd75 	bl	800f950 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009e6c:	6978      	ldr	r0, [r7, #20]
 8009e6e:	f7ff ff53 	bl	8009d18 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3314      	adds	r3, #20
 8009e76:	f107 0210 	add.w	r2, r7, #16
 8009e7a:	4611      	mov	r1, r2
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f00b fdd2 	bl	8015a26 <sys_arch_mbox_tryfetch>
 8009e82:	4603      	mov	r3, r0
 8009e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e88:	d1d5      	bne.n	8009e36 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	3314      	adds	r3, #20
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f00b fd5e 	bl	8015950 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	3314      	adds	r3, #20
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f00b fdf1 	bl	8015a80 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8009e9e:	bf00      	nop
 8009ea0:	3718      	adds	r7, #24
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
	...

08009ea8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b086      	sub	sp, #24
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	460b      	mov	r3, r1
 8009eb2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d106      	bne.n	8009ecc <lwip_netconn_do_close_internal+0x24>
 8009ebe:	4ba1      	ldr	r3, [pc, #644]	; (800a144 <lwip_netconn_do_close_internal+0x29c>)
 8009ec0:	f240 32a2 	movw	r2, #930	; 0x3a2
 8009ec4:	49a0      	ldr	r1, [pc, #640]	; (800a148 <lwip_netconn_do_close_internal+0x2a0>)
 8009ec6:	48a1      	ldr	r0, [pc, #644]	; (800a14c <lwip_netconn_do_close_internal+0x2a4>)
 8009ec8:	f00b ffa0 	bl	8015e0c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ed4:	2b10      	cmp	r3, #16
 8009ed6:	d006      	beq.n	8009ee6 <lwip_netconn_do_close_internal+0x3e>
 8009ed8:	4b9a      	ldr	r3, [pc, #616]	; (800a144 <lwip_netconn_do_close_internal+0x29c>)
 8009eda:	f240 32a3 	movw	r2, #931	; 0x3a3
 8009ede:	499c      	ldr	r1, [pc, #624]	; (800a150 <lwip_netconn_do_close_internal+0x2a8>)
 8009ee0:	489a      	ldr	r0, [pc, #616]	; (800a14c <lwip_netconn_do_close_internal+0x2a4>)
 8009ee2:	f00b ff93 	bl	8015e0c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	785b      	ldrb	r3, [r3, #1]
 8009eea:	2b04      	cmp	r3, #4
 8009eec:	d006      	beq.n	8009efc <lwip_netconn_do_close_internal+0x54>
 8009eee:	4b95      	ldr	r3, [pc, #596]	; (800a144 <lwip_netconn_do_close_internal+0x29c>)
 8009ef0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8009ef4:	4997      	ldr	r1, [pc, #604]	; (800a154 <lwip_netconn_do_close_internal+0x2ac>)
 8009ef6:	4895      	ldr	r0, [pc, #596]	; (800a14c <lwip_netconn_do_close_internal+0x2a4>)
 8009ef8:	f00b ff88 	bl	8015e0c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d106      	bne.n	8009f12 <lwip_netconn_do_close_internal+0x6a>
 8009f04:	4b8f      	ldr	r3, [pc, #572]	; (800a144 <lwip_netconn_do_close_internal+0x29c>)
 8009f06:	f240 32a5 	movw	r2, #933	; 0x3a5
 8009f0a:	4993      	ldr	r1, [pc, #588]	; (800a158 <lwip_netconn_do_close_internal+0x2b0>)
 8009f0c:	488f      	ldr	r0, [pc, #572]	; (800a14c <lwip_netconn_do_close_internal+0x2a4>)
 8009f0e:	f00b ff7d 	bl	8015e0c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a1b      	ldr	r3, [r3, #32]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d106      	bne.n	8009f28 <lwip_netconn_do_close_internal+0x80>
 8009f1a:	4b8a      	ldr	r3, [pc, #552]	; (800a144 <lwip_netconn_do_close_internal+0x29c>)
 8009f1c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8009f20:	498e      	ldr	r1, [pc, #568]	; (800a15c <lwip_netconn_do_close_internal+0x2b4>)
 8009f22:	488a      	ldr	r0, [pc, #552]	; (800a14c <lwip_netconn_do_close_internal+0x2a4>)
 8009f24:	f00b ff72 	bl	8015e0c <iprintf>

  tpcb = conn->pcb.tcp;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a1b      	ldr	r3, [r3, #32]
 8009f32:	7a1b      	ldrb	r3, [r3, #8]
 8009f34:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
 8009f38:	f003 0301 	and.w	r3, r3, #1
 8009f3c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009f3e:	7bfb      	ldrb	r3, [r7, #15]
 8009f40:	f003 0302 	and.w	r3, r3, #2
 8009f44:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	2b03      	cmp	r3, #3
 8009f4a:	d102      	bne.n	8009f52 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	75bb      	strb	r3, [r7, #22]
 8009f50:	e01f      	b.n	8009f92 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d00e      	beq.n	8009f76 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009f5c:	2b05      	cmp	r3, #5
 8009f5e:	d007      	beq.n	8009f70 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009f64:	2b06      	cmp	r3, #6
 8009f66:	d003      	beq.n	8009f70 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009f6c:	2b08      	cmp	r3, #8
 8009f6e:	d102      	bne.n	8009f76 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8009f70:	2301      	movs	r3, #1
 8009f72:	75bb      	strb	r3, [r7, #22]
 8009f74:	e00d      	b.n	8009f92 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009f76:	7b7b      	ldrb	r3, [r7, #13]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d008      	beq.n	8009f8e <lwip_netconn_do_close_internal+0xe6>
 8009f7c:	693b      	ldr	r3, [r7, #16]
 8009f7e:	8b5b      	ldrh	r3, [r3, #26]
 8009f80:	f003 0310 	and.w	r3, r3, #16
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d002      	beq.n	8009f8e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	75bb      	strb	r3, [r7, #22]
 8009f8c:	e001      	b.n	8009f92 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009f92:	7dbb      	ldrb	r3, [r7, #22]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d003      	beq.n	8009fa0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8009f98:	2100      	movs	r1, #0
 8009f9a:	6938      	ldr	r0, [r7, #16]
 8009f9c:	f006 fe40 	bl	8010c20 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	7d1b      	ldrb	r3, [r3, #20]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d104      	bne.n	8009fb2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8009fa8:	2100      	movs	r1, #0
 8009faa:	6938      	ldr	r0, [r7, #16]
 8009fac:	f006 feae 	bl	8010d0c <tcp_accept>
 8009fb0:	e01d      	b.n	8009fee <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009fb2:	7bbb      	ldrb	r3, [r7, #14]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d007      	beq.n	8009fc8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8009fb8:	2100      	movs	r1, #0
 8009fba:	6938      	ldr	r0, [r7, #16]
 8009fbc:	f006 fe42 	bl	8010c44 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	6938      	ldr	r0, [r7, #16]
 8009fc4:	f006 fea2 	bl	8010d0c <tcp_accept>
    }
    if (shut_tx) {
 8009fc8:	7b7b      	ldrb	r3, [r7, #13]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d003      	beq.n	8009fd6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8009fce:	2100      	movs	r1, #0
 8009fd0:	6938      	ldr	r0, [r7, #16]
 8009fd2:	f006 fe59 	bl	8010c88 <tcp_sent>
    }
    if (shut_close) {
 8009fd6:	7dbb      	ldrb	r3, [r7, #22]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d008      	beq.n	8009fee <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2100      	movs	r1, #0
 8009fe0:	6938      	ldr	r0, [r7, #16]
 8009fe2:	f006 feab 	bl	8010d3c <tcp_poll>
      tcp_err(tpcb, NULL);
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	6938      	ldr	r0, [r7, #16]
 8009fea:	f006 fe6d 	bl	8010cc8 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009fee:	7dbb      	ldrb	r3, [r7, #22]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d005      	beq.n	800a000 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009ff4:	6938      	ldr	r0, [r7, #16]
 8009ff6:	f005 fb6f 	bl	800f6d8 <tcp_close>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]
 8009ffe:	e007      	b.n	800a010 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a000:	7bbb      	ldrb	r3, [r7, #14]
 800a002:	7b7a      	ldrb	r2, [r7, #13]
 800a004:	4619      	mov	r1, r3
 800a006:	6938      	ldr	r0, [r7, #16]
 800a008:	f005 fb92 	bl	800f730 <tcp_shutdown>
 800a00c:	4603      	mov	r3, r0
 800a00e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a010:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d102      	bne.n	800a01e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a018:	2301      	movs	r3, #1
 800a01a:	757b      	strb	r3, [r7, #21]
 800a01c:	e016      	b.n	800a04c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a01e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a026:	d10f      	bne.n	800a048 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a1b      	ldr	r3, [r3, #32]
 800a02c:	7a5b      	ldrb	r3, [r3, #9]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10c      	bne.n	800a04c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a032:	2301      	movs	r3, #1
 800a034:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a036:	7dbb      	ldrb	r3, [r7, #22]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d007      	beq.n	800a04c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a03c:	6938      	ldr	r0, [r7, #16]
 800a03e:	f005 fc87 	bl	800f950 <tcp_abort>
          err = ERR_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	75fb      	strb	r3, [r7, #23]
 800a046:	e001      	b.n	800a04c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a048:	2301      	movs	r3, #1
 800a04a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a04c:	7d7b      	ldrb	r3, [r7, #21]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d044      	beq.n	800a0dc <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6a1b      	ldr	r3, [r3, #32]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	330c      	adds	r3, #12
 800a05a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a1b      	ldr	r3, [r3, #32]
 800a060:	7dfa      	ldrb	r2, [r7, #23]
 800a062:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a070:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d129      	bne.n	800a0cc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a078:	7dbb      	ldrb	r3, [r7, #22]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00c      	beq.n	800a098 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d005      	beq.n	800a098 <lwip_netconn_do_close_internal+0x1f0>
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	2200      	movs	r2, #0
 800a092:	2104      	movs	r1, #4
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	4798      	blx	r3
      }
      if (shut_rx) {
 800a098:	7bbb      	ldrb	r3, [r7, #14]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d009      	beq.n	800a0b2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d005      	beq.n	800a0b2 <lwip_netconn_do_close_internal+0x20a>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	2100      	movs	r1, #0
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	4798      	blx	r3
      }
      if (shut_tx) {
 800a0b2:	7b7b      	ldrb	r3, [r7, #13]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d009      	beq.n	800a0cc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d005      	beq.n	800a0cc <lwip_netconn_do_close_internal+0x224>
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	2102      	movs	r1, #2
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a0cc:	78fb      	ldrb	r3, [r7, #3]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d002      	beq.n	800a0d8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a0d2:	68b8      	ldr	r0, [r7, #8]
 800a0d4:	f00b fd38 	bl	8015b48 <sys_sem_signal>
    }
    return ERR_OK;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	e02e      	b.n	800a13a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a0dc:	7d7b      	ldrb	r3, [r7, #21]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d11e      	bne.n	800a120 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	7d1b      	ldrb	r3, [r3, #20]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d106      	bne.n	800a0f8 <lwip_netconn_do_close_internal+0x250>
 800a0ea:	4b16      	ldr	r3, [pc, #88]	; (800a144 <lwip_netconn_do_close_internal+0x29c>)
 800a0ec:	f240 4241 	movw	r2, #1089	; 0x441
 800a0f0:	491b      	ldr	r1, [pc, #108]	; (800a160 <lwip_netconn_do_close_internal+0x2b8>)
 800a0f2:	4816      	ldr	r0, [pc, #88]	; (800a14c <lwip_netconn_do_close_internal+0x2a4>)
 800a0f4:	f00b fe8a 	bl	8015e0c <iprintf>
    if (shut_tx) {
 800a0f8:	7b7b      	ldrb	r3, [r7, #13]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a0fe:	4919      	ldr	r1, [pc, #100]	; (800a164 <lwip_netconn_do_close_internal+0x2bc>)
 800a100:	6938      	ldr	r0, [r7, #16]
 800a102:	f006 fdc1 	bl	8010c88 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a106:	2201      	movs	r2, #1
 800a108:	4917      	ldr	r1, [pc, #92]	; (800a168 <lwip_netconn_do_close_internal+0x2c0>)
 800a10a:	6938      	ldr	r0, [r7, #16]
 800a10c:	f006 fe16 	bl	8010d3c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a110:	4916      	ldr	r1, [pc, #88]	; (800a16c <lwip_netconn_do_close_internal+0x2c4>)
 800a112:	6938      	ldr	r0, [r7, #16]
 800a114:	f006 fdd8 	bl	8010cc8 <tcp_err>
    tcp_arg(tpcb, conn);
 800a118:	6879      	ldr	r1, [r7, #4]
 800a11a:	6938      	ldr	r0, [r7, #16]
 800a11c:	f006 fd80 	bl	8010c20 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a120:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d106      	bne.n	800a136 <lwip_netconn_do_close_internal+0x28e>
 800a128:	4b06      	ldr	r3, [pc, #24]	; (800a144 <lwip_netconn_do_close_internal+0x29c>)
 800a12a:	f240 424d 	movw	r2, #1101	; 0x44d
 800a12e:	4910      	ldr	r1, [pc, #64]	; (800a170 <lwip_netconn_do_close_internal+0x2c8>)
 800a130:	4806      	ldr	r0, [pc, #24]	; (800a14c <lwip_netconn_do_close_internal+0x2a4>)
 800a132:	f00b fe6b 	bl	8015e0c <iprintf>
  return err;
 800a136:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	08018004 	.word	0x08018004
 800a148:	0801831c 	.word	0x0801831c
 800a14c:	0801808c 	.word	0x0801808c
 800a150:	0801832c 	.word	0x0801832c
 800a154:	0801834c 	.word	0x0801834c
 800a158:	08018370 	.word	0x08018370
 800a15c:	080181b0 	.word	0x080181b0
 800a160:	08018384 	.word	0x08018384
 800a164:	0800971d 	.word	0x0800971d
 800a168:	08009651 	.word	0x08009651
 800a16c:	080097c9 	.word	0x080097c9
 800a170:	080183a8 	.word	0x080183a8

0800a174 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b084      	sub	sp, #16
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	785b      	ldrb	r3, [r3, #1]
 800a186:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a188:	7afb      	ldrb	r3, [r7, #11]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00d      	beq.n	800a1aa <lwip_netconn_do_delconn+0x36>
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a198:	2b10      	cmp	r3, #16
 800a19a:	d006      	beq.n	800a1aa <lwip_netconn_do_delconn+0x36>
 800a19c:	4b60      	ldr	r3, [pc, #384]	; (800a320 <lwip_netconn_do_delconn+0x1ac>)
 800a19e:	f240 425e 	movw	r2, #1118	; 0x45e
 800a1a2:	4960      	ldr	r1, [pc, #384]	; (800a324 <lwip_netconn_do_delconn+0x1b0>)
 800a1a4:	4860      	ldr	r0, [pc, #384]	; (800a328 <lwip_netconn_do_delconn+0x1b4>)
 800a1a6:	f00b fe31 	bl	8015e0c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a1aa:	7afb      	ldrb	r3, [r7, #11]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <lwip_netconn_do_delconn+0x48>
 800a1b0:	7afb      	ldrb	r3, [r7, #11]
 800a1b2:	2b02      	cmp	r3, #2
 800a1b4:	d002      	beq.n	800a1bc <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a1b6:	7afb      	ldrb	r3, [r7, #11]
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d109      	bne.n	800a1d0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a1bc:	7afb      	ldrb	r3, [r7, #11]
 800a1be:	2b03      	cmp	r3, #3
 800a1c0:	d10a      	bne.n	800a1d8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	7f1b      	ldrb	r3, [r3, #28]
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d103      	bne.n	800a1d8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	22fb      	movs	r2, #251	; 0xfb
 800a1d4:	711a      	strb	r2, [r3, #4]
 800a1d6:	e097      	b.n	800a308 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a1d8:	7afb      	ldrb	r3, [r7, #11]
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	d10d      	bne.n	800a1fa <lwip_netconn_do_delconn+0x86>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	7f1b      	ldrb	r3, [r3, #28]
 800a1e4:	f003 0304 	and.w	r3, r3, #4
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d106      	bne.n	800a1fa <lwip_netconn_do_delconn+0x86>
 800a1ec:	4b4c      	ldr	r3, [pc, #304]	; (800a320 <lwip_netconn_do_delconn+0x1ac>)
 800a1ee:	f240 427a 	movw	r2, #1146	; 0x47a
 800a1f2:	494e      	ldr	r1, [pc, #312]	; (800a32c <lwip_netconn_do_delconn+0x1b8>)
 800a1f4:	484c      	ldr	r0, [pc, #304]	; (800a328 <lwip_netconn_do_delconn+0x1b4>)
 800a1f6:	f00b fe09 	bl	8015e0c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4618      	mov	r0, r3
 800a206:	f7ff fdd1 	bl	8009dac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d05f      	beq.n	800a2d4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a21e:	2b10      	cmp	r3, #16
 800a220:	d00d      	beq.n	800a23e <lwip_netconn_do_delconn+0xca>
 800a222:	2b20      	cmp	r3, #32
 800a224:	d151      	bne.n	800a2ca <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	4618      	mov	r0, r3
 800a238:	f00b fa00 	bl	801563c <udp_remove>
          break;
 800a23c:	e046      	b.n	800a2cc <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	6a1b      	ldr	r3, [r3, #32]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d006      	beq.n	800a256 <lwip_netconn_do_delconn+0xe2>
 800a248:	4b35      	ldr	r3, [pc, #212]	; (800a320 <lwip_netconn_do_delconn+0x1ac>)
 800a24a:	f240 4294 	movw	r2, #1172	; 0x494
 800a24e:	4938      	ldr	r1, [pc, #224]	; (800a330 <lwip_netconn_do_delconn+0x1bc>)
 800a250:	4835      	ldr	r0, [pc, #212]	; (800a328 <lwip_netconn_do_delconn+0x1b4>)
 800a252:	f00b fddb 	bl	8015e0c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2204      	movs	r2, #4
 800a25c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2203      	movs	r2, #3
 800a262:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	68fa      	ldr	r2, [r7, #12]
 800a26a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2100      	movs	r1, #0
 800a272:	4618      	mov	r0, r3
 800a274:	f7ff fe18 	bl	8009ea8 <lwip_netconn_do_close_internal>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d04b      	beq.n	800a316 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	785b      	ldrb	r3, [r3, #1]
 800a284:	2b04      	cmp	r3, #4
 800a286:	d006      	beq.n	800a296 <lwip_netconn_do_delconn+0x122>
 800a288:	4b25      	ldr	r3, [pc, #148]	; (800a320 <lwip_netconn_do_delconn+0x1ac>)
 800a28a:	f240 429a 	movw	r2, #1178	; 0x49a
 800a28e:	4929      	ldr	r1, [pc, #164]	; (800a334 <lwip_netconn_do_delconn+0x1c0>)
 800a290:	4825      	ldr	r0, [pc, #148]	; (800a328 <lwip_netconn_do_delconn+0x1b4>)
 800a292:	f00b fdbb 	bl	8015e0c <iprintf>
            UNLOCK_TCPIP_CORE();
 800a296:	4828      	ldr	r0, [pc, #160]	; (800a338 <lwip_netconn_do_delconn+0x1c4>)
 800a298:	f00b fcc5 	bl	8015c26 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	330c      	adds	r3, #12
 800a2a2:	2100      	movs	r1, #0
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f00b fc1e 	bl	8015ae6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a2aa:	4823      	ldr	r0, [pc, #140]	; (800a338 <lwip_netconn_do_delconn+0x1c4>)
 800a2ac:	f00b fcac 	bl	8015c08 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	785b      	ldrb	r3, [r3, #1]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d02d      	beq.n	800a316 <lwip_netconn_do_delconn+0x1a2>
 800a2ba:	4b19      	ldr	r3, [pc, #100]	; (800a320 <lwip_netconn_do_delconn+0x1ac>)
 800a2bc:	f240 429e 	movw	r2, #1182	; 0x49e
 800a2c0:	491c      	ldr	r1, [pc, #112]	; (800a334 <lwip_netconn_do_delconn+0x1c0>)
 800a2c2:	4819      	ldr	r0, [pc, #100]	; (800a328 <lwip_netconn_do_delconn+0x1b4>)
 800a2c4:	f00b fda2 	bl	8015e0c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a2c8:	e025      	b.n	800a316 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800a2ca:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d007      	beq.n	800a2ee <lwip_netconn_do_delconn+0x17a>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	6810      	ldr	r0, [r2, #0]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d007      	beq.n	800a308 <lwip_netconn_do_delconn+0x194>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	6810      	ldr	r0, [r2, #0]
 800a302:	2200      	movs	r2, #0
 800a304:	2102      	movs	r1, #2
 800a306:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	330c      	adds	r3, #12
 800a30e:	4618      	mov	r0, r3
 800a310:	f00b fc34 	bl	8015b7c <sys_sem_valid>
 800a314:	e000      	b.n	800a318 <lwip_netconn_do_delconn+0x1a4>
          return;
 800a316:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	08018004 	.word	0x08018004
 800a324:	080183b8 	.word	0x080183b8
 800a328:	0801808c 	.word	0x0801808c
 800a32c:	080183cc 	.word	0x080183cc
 800a330:	080183ec 	.word	0x080183ec
 800a334:	08018408 	.word	0x08018408
 800a338:	24006a24 	.word	0x24006a24

0800a33c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b084      	sub	sp, #16
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d025      	beq.n	800a39e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a352:	68bb      	ldr	r3, [r7, #8]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a35c:	2b10      	cmp	r3, #16
 800a35e:	d00e      	beq.n	800a37e <lwip_netconn_do_bind+0x42>
 800a360:	2b20      	cmp	r3, #32
 800a362:	d119      	bne.n	800a398 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6858      	ldr	r0, [r3, #4]
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	6899      	ldr	r1, [r3, #8]
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	899b      	ldrh	r3, [r3, #12]
 800a372:	461a      	mov	r2, r3
 800a374:	f00b f84c 	bl	8015410 <udp_bind>
 800a378:	4603      	mov	r3, r0
 800a37a:	73fb      	strb	r3, [r7, #15]
        break;
 800a37c:	e011      	b.n	800a3a2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	6858      	ldr	r0, [r3, #4]
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	6899      	ldr	r1, [r3, #8]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	899b      	ldrh	r3, [r3, #12]
 800a38c:	461a      	mov	r2, r3
 800a38e:	f005 faeb 	bl	800f968 <tcp_bind>
 800a392:	4603      	mov	r3, r0
 800a394:	73fb      	strb	r3, [r7, #15]
        break;
 800a396:	e004      	b.n	800a3a2 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a398:	23fa      	movs	r3, #250	; 0xfa
 800a39a:	73fb      	strb	r3, [r7, #15]
        break;
 800a39c:	e001      	b.n	800a3a2 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a39e:	23fa      	movs	r3, #250	; 0xfa
 800a3a0:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	7bfa      	ldrb	r2, [r7, #15]
 800a3a6:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a3a8:	bf00      	nop
 800a3aa:	3710      	adds	r7, #16
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b088      	sub	sp, #32
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800a3c6:	69bb      	ldr	r3, [r7, #24]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d102      	bne.n	800a3d2 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800a3cc:	f06f 0305 	mvn.w	r3, #5
 800a3d0:	e070      	b.n	800a4b4 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	785b      	ldrb	r3, [r3, #1]
 800a3d6:	2b03      	cmp	r3, #3
 800a3d8:	d006      	beq.n	800a3e8 <lwip_netconn_do_connected+0x38>
 800a3da:	4b38      	ldr	r3, [pc, #224]	; (800a4bc <lwip_netconn_do_connected+0x10c>)
 800a3dc:	f240 5223 	movw	r2, #1315	; 0x523
 800a3e0:	4937      	ldr	r1, [pc, #220]	; (800a4c0 <lwip_netconn_do_connected+0x110>)
 800a3e2:	4838      	ldr	r0, [pc, #224]	; (800a4c4 <lwip_netconn_do_connected+0x114>)
 800a3e4:	f00b fd12 	bl	8015e0c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	6a1b      	ldr	r3, [r3, #32]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10c      	bne.n	800a40a <lwip_netconn_do_connected+0x5a>
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	7f1b      	ldrb	r3, [r3, #28]
 800a3f4:	f003 0304 	and.w	r3, r3, #4
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d106      	bne.n	800a40a <lwip_netconn_do_connected+0x5a>
 800a3fc:	4b2f      	ldr	r3, [pc, #188]	; (800a4bc <lwip_netconn_do_connected+0x10c>)
 800a3fe:	f240 5224 	movw	r2, #1316	; 0x524
 800a402:	4931      	ldr	r1, [pc, #196]	; (800a4c8 <lwip_netconn_do_connected+0x118>)
 800a404:	482f      	ldr	r0, [pc, #188]	; (800a4c4 <lwip_netconn_do_connected+0x114>)
 800a406:	f00b fd01 	bl	8015e0c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d008      	beq.n	800a424 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	79fa      	ldrb	r2, [r7, #7]
 800a418:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	6a1b      	ldr	r3, [r3, #32]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	330c      	adds	r3, #12
 800a422:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a42c:	2b10      	cmp	r3, #16
 800a42e:	d106      	bne.n	800a43e <lwip_netconn_do_connected+0x8e>
 800a430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d102      	bne.n	800a43e <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800a438:	69b8      	ldr	r0, [r7, #24]
 800a43a:	f7ff fa9b 	bl	8009974 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800a43e:	69bb      	ldr	r3, [r7, #24]
 800a440:	7f1b      	ldrb	r3, [r3, #28]
 800a442:	f003 0304 	and.w	r3, r3, #4
 800a446:	2b00      	cmp	r3, #0
 800a448:	bf0c      	ite	eq
 800a44a:	2301      	moveq	r3, #1
 800a44c:	2300      	movne	r3, #0
 800a44e:	b2db      	uxtb	r3, r3
 800a450:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	7f1b      	ldrb	r3, [r3, #28]
 800a456:	f023 0304 	bic.w	r3, r3, #4
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d002      	beq.n	800a46c <lwip_netconn_do_connected+0xbc>
 800a466:	69fb      	ldr	r3, [r7, #28]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d10c      	bne.n	800a486 <lwip_netconn_do_connected+0xd6>
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d102      	bne.n	800a478 <lwip_netconn_do_connected+0xc8>
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d006      	beq.n	800a486 <lwip_netconn_do_connected+0xd6>
 800a478:	4b10      	ldr	r3, [pc, #64]	; (800a4bc <lwip_netconn_do_connected+0x10c>)
 800a47a:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800a47e:	4913      	ldr	r1, [pc, #76]	; (800a4cc <lwip_netconn_do_connected+0x11c>)
 800a480:	4810      	ldr	r0, [pc, #64]	; (800a4c4 <lwip_netconn_do_connected+0x114>)
 800a482:	f00b fcc3 	bl	8015e0c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	2200      	movs	r2, #0
 800a48a:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	2200      	movs	r2, #0
 800a490:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a496:	2b00      	cmp	r3, #0
 800a498:	d005      	beq.n	800a4a6 <lwip_netconn_do_connected+0xf6>
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2102      	movs	r1, #2
 800a4a2:	69b8      	ldr	r0, [r7, #24]
 800a4a4:	4798      	blx	r3

  if (was_blocking) {
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d002      	beq.n	800a4b2 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800a4ac:	69f8      	ldr	r0, [r7, #28]
 800a4ae:	f00b fb4b 	bl	8015b48 <sys_sem_signal>
  }
  return ERR_OK;
 800a4b2:	2300      	movs	r3, #0
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3720      	adds	r7, #32
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}
 800a4bc:	08018004 	.word	0x08018004
 800a4c0:	08018410 	.word	0x08018410
 800a4c4:	0801808c 	.word	0x0801808c
 800a4c8:	08018430 	.word	0x08018430
 800a4cc:	08018470 	.word	0x08018470

0800a4d0 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d102      	bne.n	800a4ec <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800a4e6:	23f1      	movs	r3, #241	; 0xf1
 800a4e8:	75fb      	strb	r3, [r7, #23]
 800a4ea:	e09b      	b.n	800a624 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4f6:	2b10      	cmp	r3, #16
 800a4f8:	d00f      	beq.n	800a51a <lwip_netconn_do_connect+0x4a>
 800a4fa:	2b20      	cmp	r3, #32
 800a4fc:	f040 8087 	bne.w	800a60e <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	6858      	ldr	r0, [r3, #4]
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	6899      	ldr	r1, [r3, #8]
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	899b      	ldrh	r3, [r3, #12]
 800a50e:	461a      	mov	r2, r3
 800a510:	f00b f806 	bl	8015520 <udp_connect>
 800a514:	4603      	mov	r3, r0
 800a516:	75fb      	strb	r3, [r7, #23]
        break;
 800a518:	e084      	b.n	800a624 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	785b      	ldrb	r3, [r3, #1]
 800a520:	2b03      	cmp	r3, #3
 800a522:	d102      	bne.n	800a52a <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800a524:	23f7      	movs	r3, #247	; 0xf7
 800a526:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800a528:	e07b      	b.n	800a622 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	785b      	ldrb	r3, [r3, #1]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800a534:	23f6      	movs	r3, #246	; 0xf6
 800a536:	75fb      	strb	r3, [r7, #23]
        break;
 800a538:	e073      	b.n	800a622 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	4618      	mov	r0, r3
 800a540:	f7ff fa18 	bl	8009974 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6858      	ldr	r0, [r3, #4]
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	6899      	ldr	r1, [r3, #8]
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	899a      	ldrh	r2, [r3, #12]
 800a552:	4b38      	ldr	r3, [pc, #224]	; (800a634 <lwip_netconn_do_connect+0x164>)
 800a554:	f005 fc5c 	bl	800fe10 <tcp_connect>
 800a558:	4603      	mov	r3, r0
 800a55a:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800a55c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d15e      	bne.n	800a622 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	7f1b      	ldrb	r3, [r3, #28]
 800a56a:	f003 0302 	and.w	r3, r3, #2
 800a56e:	2b00      	cmp	r3, #0
 800a570:	bf14      	ite	ne
 800a572:	2301      	movne	r3, #1
 800a574:	2300      	moveq	r3, #0
 800a576:	b2db      	uxtb	r3, r3
 800a578:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2203      	movs	r2, #3
 800a580:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a582:	7bfb      	ldrb	r3, [r7, #15]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d009      	beq.n	800a59c <lwip_netconn_do_connect+0xcc>
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	7f1a      	ldrb	r2, [r3, #28]
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f042 0204 	orr.w	r2, r2, #4
 800a596:	b2d2      	uxtb	r2, r2
 800a598:	771a      	strb	r2, [r3, #28]
 800a59a:	e008      	b.n	800a5ae <lwip_netconn_do_connect+0xde>
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	7f1a      	ldrb	r2, [r3, #28]
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	f022 0204 	bic.w	r2, r2, #4
 800a5aa:	b2d2      	uxtb	r2, r2
 800a5ac:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800a5ae:	7bfb      	ldrb	r3, [r7, #15]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800a5b4:	23fb      	movs	r3, #251	; 0xfb
 800a5b6:	75fb      	strb	r3, [r7, #23]
        break;
 800a5b8:	e033      	b.n	800a622 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	693a      	ldr	r2, [r7, #16]
 800a5c0:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	785b      	ldrb	r3, [r3, #1]
 800a5c8:	2b03      	cmp	r3, #3
 800a5ca:	d006      	beq.n	800a5da <lwip_netconn_do_connect+0x10a>
 800a5cc:	4b1a      	ldr	r3, [pc, #104]	; (800a638 <lwip_netconn_do_connect+0x168>)
 800a5ce:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800a5d2:	491a      	ldr	r1, [pc, #104]	; (800a63c <lwip_netconn_do_connect+0x16c>)
 800a5d4:	481a      	ldr	r0, [pc, #104]	; (800a640 <lwip_netconn_do_connect+0x170>)
 800a5d6:	f00b fc19 	bl	8015e0c <iprintf>
              UNLOCK_TCPIP_CORE();
 800a5da:	481a      	ldr	r0, [pc, #104]	; (800a644 <lwip_netconn_do_connect+0x174>)
 800a5dc:	f00b fb23 	bl	8015c26 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	330c      	adds	r3, #12
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f00b fa7c 	bl	8015ae6 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800a5ee:	4815      	ldr	r0, [pc, #84]	; (800a644 <lwip_netconn_do_connect+0x174>)
 800a5f0:	f00b fb0a 	bl	8015c08 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	785b      	ldrb	r3, [r3, #1]
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d116      	bne.n	800a62c <lwip_netconn_do_connect+0x15c>
 800a5fe:	4b0e      	ldr	r3, [pc, #56]	; (800a638 <lwip_netconn_do_connect+0x168>)
 800a600:	f240 5274 	movw	r2, #1396	; 0x574
 800a604:	490d      	ldr	r1, [pc, #52]	; (800a63c <lwip_netconn_do_connect+0x16c>)
 800a606:	480e      	ldr	r0, [pc, #56]	; (800a640 <lwip_netconn_do_connect+0x170>)
 800a608:	f00b fc00 	bl	8015e0c <iprintf>
              return;
 800a60c:	e00e      	b.n	800a62c <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800a60e:	4b0a      	ldr	r3, [pc, #40]	; (800a638 <lwip_netconn_do_connect+0x168>)
 800a610:	f240 527d 	movw	r2, #1405	; 0x57d
 800a614:	490c      	ldr	r1, [pc, #48]	; (800a648 <lwip_netconn_do_connect+0x178>)
 800a616:	480a      	ldr	r0, [pc, #40]	; (800a640 <lwip_netconn_do_connect+0x170>)
 800a618:	f00b fbf8 	bl	8015e0c <iprintf>
 800a61c:	23fa      	movs	r3, #250	; 0xfa
 800a61e:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800a620:	e000      	b.n	800a624 <lwip_netconn_do_connect+0x154>
        break;
 800a622:	bf00      	nop
    }
  }
  msg->err = err;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	7dfa      	ldrb	r2, [r7, #23]
 800a628:	711a      	strb	r2, [r3, #4]
 800a62a:	e000      	b.n	800a62e <lwip_netconn_do_connect+0x15e>
              return;
 800a62c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800a62e:	3718      	adds	r7, #24
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	0800a3b1 	.word	0x0800a3b1
 800a638:	08018004 	.word	0x08018004
 800a63c:	08018408 	.word	0x08018408
 800a640:	0801808c 	.word	0x0801808c
 800a644:	24006a24 	.word	0x24006a24
 800a648:	08018490 	.word	0x08018490

0800a64c <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b086      	sub	sp, #24
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d07f      	beq.n	800a762 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a66c:	2b10      	cmp	r3, #16
 800a66e:	d175      	bne.n	800a75c <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	785b      	ldrb	r3, [r3, #1]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d165      	bne.n	800a746 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	7d1b      	ldrb	r3, [r3, #20]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a686:	23fa      	movs	r3, #250	; 0xfa
 800a688:	72fb      	strb	r3, [r7, #11]
 800a68a:	e06c      	b.n	800a766 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a68c:	23ff      	movs	r3, #255	; 0xff
 800a68e:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f107 020b 	add.w	r2, r7, #11
 800a69a:	7cf9      	ldrb	r1, [r7, #19]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f005 fa1b 	bl	800fad8 <tcp_listen_with_backlog_and_err>
 800a6a2:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d05d      	beq.n	800a766 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	3310      	adds	r3, #16
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f00b f9d4 	bl	8015a5e <sys_mbox_valid>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00b      	beq.n	800a6d4 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	3310      	adds	r3, #16
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f00b f944 	bl	8015950 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3310      	adds	r3, #16
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f00b f9d6 	bl	8015a80 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	3314      	adds	r3, #20
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f00b f9bd 	bl	8015a5e <sys_mbox_valid>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d108      	bne.n	800a6fc <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	3314      	adds	r3, #20
 800a6f0:	2106      	movs	r1, #6
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f00b f90e 	bl	8015914 <sys_mbox_new>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a6fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d118      	bne.n	800a736 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2202      	movs	r2, #2
 800a70a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685a      	ldr	r2, [r3, #4]
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	4619      	mov	r1, r3
 800a720:	4610      	mov	r0, r2
 800a722:	f006 fa7d 	bl	8010c20 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	4912      	ldr	r1, [pc, #72]	; (800a778 <lwip_netconn_do_listen+0x12c>)
 800a72e:	4618      	mov	r0, r3
 800a730:	f006 faec 	bl	8010d0c <tcp_accept>
 800a734:	e017      	b.n	800a766 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f004 ffce 	bl	800f6d8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	2200      	movs	r2, #0
 800a742:	605a      	str	r2, [r3, #4]
 800a744:	e00f      	b.n	800a766 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	785b      	ldrb	r3, [r3, #1]
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d102      	bne.n	800a756 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a750:	2300      	movs	r3, #0
 800a752:	72fb      	strb	r3, [r7, #11]
 800a754:	e007      	b.n	800a766 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a756:	23f5      	movs	r3, #245	; 0xf5
 800a758:	72fb      	strb	r3, [r7, #11]
 800a75a:	e004      	b.n	800a766 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a75c:	23f0      	movs	r3, #240	; 0xf0
 800a75e:	72fb      	strb	r3, [r7, #11]
 800a760:	e001      	b.n	800a766 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a762:	23f5      	movs	r3, #245	; 0xf5
 800a764:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a766:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a76e:	bf00      	nop
 800a770:	3718      	adds	r7, #24
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	080099c5 	.word	0x080099c5

0800a77c <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b086      	sub	sp, #24
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	2200      	movs	r2, #0
 800a78c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d022      	beq.n	800a7de <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	781b      	ldrb	r3, [r3, #0]
 800a79e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7a2:	2b10      	cmp	r3, #16
 800a7a4:	d11b      	bne.n	800a7de <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	689b      	ldr	r3, [r3, #8]
 800a7aa:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7b2:	d202      	bcs.n	800a7ba <lwip_netconn_do_recv+0x3e>
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	b29b      	uxth	r3, r3
 800a7b8:	e001      	b.n	800a7be <lwip_netconn_do_recv+0x42>
 800a7ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a7be:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	89fa      	ldrh	r2, [r7, #14]
 800a7c8:	4611      	mov	r1, r2
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f005 fa88 	bl	800fce0 <tcp_recved>
        remaining -= recved;
 800a7d0:	89fb      	ldrh	r3, [r7, #14]
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d1e6      	bne.n	800a7ac <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a7de:	bf00      	nop
 800a7e0:	3718      	adds	r7, #24
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	bd80      	pop	{r7, pc}
	...

0800a7e8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b088      	sub	sp, #32
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d106      	bne.n	800a80c <lwip_netconn_do_writemore+0x24>
 800a7fe:	4b96      	ldr	r3, [pc, #600]	; (800aa58 <lwip_netconn_do_writemore+0x270>)
 800a800:	f240 6273 	movw	r2, #1651	; 0x673
 800a804:	4995      	ldr	r1, [pc, #596]	; (800aa5c <lwip_netconn_do_writemore+0x274>)
 800a806:	4896      	ldr	r0, [pc, #600]	; (800aa60 <lwip_netconn_do_writemore+0x278>)
 800a808:	f00b fb00 	bl	8015e0c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	785b      	ldrb	r3, [r3, #1]
 800a810:	2b01      	cmp	r3, #1
 800a812:	d006      	beq.n	800a822 <lwip_netconn_do_writemore+0x3a>
 800a814:	4b90      	ldr	r3, [pc, #576]	; (800aa58 <lwip_netconn_do_writemore+0x270>)
 800a816:	f240 6274 	movw	r2, #1652	; 0x674
 800a81a:	4992      	ldr	r1, [pc, #584]	; (800aa64 <lwip_netconn_do_writemore+0x27c>)
 800a81c:	4890      	ldr	r0, [pc, #576]	; (800aa60 <lwip_netconn_do_writemore+0x278>)
 800a81e:	f00b faf5 	bl	8015e0c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6a1b      	ldr	r3, [r3, #32]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d106      	bne.n	800a838 <lwip_netconn_do_writemore+0x50>
 800a82a:	4b8b      	ldr	r3, [pc, #556]	; (800aa58 <lwip_netconn_do_writemore+0x270>)
 800a82c:	f240 6275 	movw	r2, #1653	; 0x675
 800a830:	498d      	ldr	r1, [pc, #564]	; (800aa68 <lwip_netconn_do_writemore+0x280>)
 800a832:	488b      	ldr	r0, [pc, #556]	; (800aa60 <lwip_netconn_do_writemore+0x278>)
 800a834:	f00b faea 	bl	8015e0c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d106      	bne.n	800a84e <lwip_netconn_do_writemore+0x66>
 800a840:	4b85      	ldr	r3, [pc, #532]	; (800aa58 <lwip_netconn_do_writemore+0x270>)
 800a842:	f240 6276 	movw	r2, #1654	; 0x676
 800a846:	4989      	ldr	r1, [pc, #548]	; (800aa6c <lwip_netconn_do_writemore+0x284>)
 800a848:	4885      	ldr	r0, [pc, #532]	; (800aa60 <lwip_netconn_do_writemore+0x278>)
 800a84a:	f00b fadf 	bl	8015e0c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a1b      	ldr	r3, [r3, #32]
 800a852:	699a      	ldr	r2, [r3, #24]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6a1b      	ldr	r3, [r3, #32]
 800a858:	695b      	ldr	r3, [r3, #20]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d306      	bcc.n	800a86c <lwip_netconn_do_writemore+0x84>
 800a85e:	4b7e      	ldr	r3, [pc, #504]	; (800aa58 <lwip_netconn_do_writemore+0x270>)
 800a860:	f240 6277 	movw	r2, #1655	; 0x677
 800a864:	4982      	ldr	r1, [pc, #520]	; (800aa70 <lwip_netconn_do_writemore+0x288>)
 800a866:	487e      	ldr	r0, [pc, #504]	; (800aa60 <lwip_netconn_do_writemore+0x278>)
 800a868:	f00b fad0 	bl	8015e0c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a1b      	ldr	r3, [r3, #32]
 800a870:	899b      	ldrh	r3, [r3, #12]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d106      	bne.n	800a884 <lwip_netconn_do_writemore+0x9c>
 800a876:	4b78      	ldr	r3, [pc, #480]	; (800aa58 <lwip_netconn_do_writemore+0x270>)
 800a878:	f240 6279 	movw	r2, #1657	; 0x679
 800a87c:	497d      	ldr	r1, [pc, #500]	; (800aa74 <lwip_netconn_do_writemore+0x28c>)
 800a87e:	4878      	ldr	r0, [pc, #480]	; (800aa60 <lwip_netconn_do_writemore+0x278>)
 800a880:	f00b fac4 	bl	8015e0c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6a1b      	ldr	r3, [r3, #32]
 800a888:	7f1b      	ldrb	r3, [r3, #28]
 800a88a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	7f1b      	ldrb	r3, [r3, #28]
 800a890:	f003 0302 	and.w	r3, r3, #2
 800a894:	2b00      	cmp	r3, #0
 800a896:	d104      	bne.n	800a8a2 <lwip_netconn_do_writemore+0xba>
 800a898:	7ebb      	ldrb	r3, [r7, #26]
 800a89a:	f003 0304 	and.w	r3, r3, #4
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d001      	beq.n	800a8a6 <lwip_netconn_do_writemore+0xbe>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	e000      	b.n	800a8a8 <lwip_netconn_do_writemore+0xc0>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a1b      	ldr	r3, [r3, #32]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	681a      	ldr	r2, [r3, #0]
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a1b      	ldr	r3, [r3, #32]
 800a8b6:	691b      	ldr	r3, [r3, #16]
 800a8b8:	4413      	add	r3, r2
 800a8ba:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a1b      	ldr	r3, [r3, #32]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6a1b      	ldr	r3, [r3, #32]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	1ad3      	subs	r3, r2, r3
 800a8cc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d4:	d307      	bcc.n	800a8e6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800a8d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a8da:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a8dc:	7ebb      	ldrb	r3, [r7, #26]
 800a8de:	f043 0302 	orr.w	r3, r3, #2
 800a8e2:	76bb      	strb	r3, [r7, #26]
 800a8e4:	e001      	b.n	800a8ea <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	685b      	ldr	r3, [r3, #4]
 800a8ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a8f2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a8f4:	89fa      	ldrh	r2, [r7, #14]
 800a8f6:	8bbb      	ldrh	r3, [r7, #28]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d216      	bcs.n	800a92a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800a8fc:	89fb      	ldrh	r3, [r7, #14]
 800a8fe:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a900:	7e3b      	ldrb	r3, [r7, #24]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d00d      	beq.n	800a922 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800a906:	8bbb      	ldrh	r3, [r7, #28]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10e      	bne.n	800a92a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6a1b      	ldr	r3, [r3, #32]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d102      	bne.n	800a91c <lwip_netconn_do_writemore+0x134>
 800a916:	f06f 0306 	mvn.w	r3, #6
 800a91a:	e000      	b.n	800a91e <lwip_netconn_do_writemore+0x136>
 800a91c:	2300      	movs	r3, #0
 800a91e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a920:	e07d      	b.n	800aa1e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a922:	7ebb      	ldrb	r3, [r7, #26]
 800a924:	f043 0302 	orr.w	r3, r3, #2
 800a928:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a1b      	ldr	r3, [r3, #32]
 800a92e:	691a      	ldr	r2, [r3, #16]
 800a930:	8bbb      	ldrh	r3, [r7, #28]
 800a932:	441a      	add	r2, r3
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6a1b      	ldr	r3, [r3, #32]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	429a      	cmp	r2, r3
 800a93e:	d906      	bls.n	800a94e <lwip_netconn_do_writemore+0x166>
 800a940:	4b45      	ldr	r3, [pc, #276]	; (800aa58 <lwip_netconn_do_writemore+0x270>)
 800a942:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800a946:	494c      	ldr	r1, [pc, #304]	; (800aa78 <lwip_netconn_do_writemore+0x290>)
 800a948:	4845      	ldr	r0, [pc, #276]	; (800aa60 <lwip_netconn_do_writemore+0x278>)
 800a94a:	f00b fa5f 	bl	8015e0c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a94e:	8bbb      	ldrh	r3, [r7, #28]
 800a950:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a954:	4293      	cmp	r3, r2
 800a956:	d103      	bne.n	800a960 <lwip_netconn_do_writemore+0x178>
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a95e:	d209      	bcs.n	800a974 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a964:	8bba      	ldrh	r2, [r7, #28]
 800a966:	429a      	cmp	r2, r3
 800a968:	d10b      	bne.n	800a982 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	899b      	ldrh	r3, [r3, #12]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d906      	bls.n	800a982 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800a974:	2301      	movs	r3, #1
 800a976:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a978:	7ebb      	ldrb	r3, [r7, #26]
 800a97a:	f043 0302 	orr.w	r3, r3, #2
 800a97e:	76bb      	strb	r3, [r7, #26]
 800a980:	e001      	b.n	800a986 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6858      	ldr	r0, [r3, #4]
 800a98a:	7ebb      	ldrb	r3, [r7, #26]
 800a98c:	8bba      	ldrh	r2, [r7, #28]
 800a98e:	6979      	ldr	r1, [r7, #20]
 800a990:	f008 fca2 	bl	80132d8 <tcp_write>
 800a994:	4603      	mov	r3, r0
 800a996:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a998:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d12c      	bne.n	800a9fa <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6a1b      	ldr	r3, [r3, #32]
 800a9a4:	6999      	ldr	r1, [r3, #24]
 800a9a6:	8bba      	ldrh	r2, [r7, #28]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a1b      	ldr	r3, [r3, #32]
 800a9ac:	440a      	add	r2, r1
 800a9ae:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a1b      	ldr	r3, [r3, #32]
 800a9b4:	6919      	ldr	r1, [r3, #16]
 800a9b6:	8bba      	ldrh	r2, [r7, #28]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a1b      	ldr	r3, [r3, #32]
 800a9bc:	440a      	add	r2, r1
 800a9be:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	691a      	ldr	r2, [r3, #16]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a1b      	ldr	r3, [r3, #32]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d113      	bne.n	800a9fa <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	899a      	ldrh	r2, [r3, #12]
 800a9d8:	3a01      	subs	r2, #1
 800a9da:	b292      	uxth	r2, r2
 800a9dc:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6a1b      	ldr	r3, [r3, #32]
 800a9e2:	899b      	ldrh	r3, [r3, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d008      	beq.n	800a9fa <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a1b      	ldr	r3, [r3, #32]
 800a9ec:	689a      	ldr	r2, [r3, #8]
 800a9ee:	3208      	adds	r2, #8
 800a9f0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a9fa:	7e7b      	ldrb	r3, [r7, #25]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d004      	beq.n	800aa0a <lwip_netconn_do_writemore+0x222>
 800aa00:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	f43f af50 	beq.w	800a8aa <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800aa0a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d004      	beq.n	800aa1c <lwip_netconn_do_writemore+0x234>
 800aa12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa1a:	d147      	bne.n	800aaac <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800aa1c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800aa1e:	7e3b      	ldrb	r3, [r7, #24]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d02b      	beq.n	800aa7c <lwip_netconn_do_writemore+0x294>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6a1b      	ldr	r3, [r3, #32]
 800aa28:	699a      	ldr	r2, [r3, #24]
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	695b      	ldr	r3, [r3, #20]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d223      	bcs.n	800aa7c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d005      	beq.n	800aa48 <lwip_netconn_do_writemore+0x260>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa40:	2200      	movs	r2, #0
 800aa42:	2103      	movs	r1, #3
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	7f1b      	ldrb	r3, [r3, #28]
 800aa4c:	f043 0310 	orr.w	r3, r3, #16
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	771a      	strb	r2, [r3, #28]
 800aa56:	e029      	b.n	800aaac <lwip_netconn_do_writemore+0x2c4>
 800aa58:	08018004 	.word	0x08018004
 800aa5c:	080181a0 	.word	0x080181a0
 800aa60:	0801808c 	.word	0x0801808c
 800aa64:	080184a8 	.word	0x080184a8
 800aa68:	080181b0 	.word	0x080181b0
 800aa6c:	080184c8 	.word	0x080184c8
 800aa70:	080184e0 	.word	0x080184e0
 800aa74:	08018520 	.word	0x08018520
 800aa78:	08018548 	.word	0x08018548
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800aa84:	f640 3269 	movw	r2, #2921	; 0xb69
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d905      	bls.n	800aa98 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800aa94:	2b04      	cmp	r3, #4
 800aa96:	d909      	bls.n	800aaac <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d005      	beq.n	800aaac <lwip_netconn_do_writemore+0x2c4>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	2103      	movs	r1, #3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800aaac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d11d      	bne.n	800aaf0 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a1b      	ldr	r3, [r3, #32]
 800aab8:	699a      	ldr	r2, [r3, #24]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6a1b      	ldr	r3, [r3, #32]
 800aabe:	695b      	ldr	r3, [r3, #20]
 800aac0:	429a      	cmp	r2, r3
 800aac2:	d002      	beq.n	800aaca <lwip_netconn_do_writemore+0x2e2>
 800aac4:	7e3b      	ldrb	r3, [r7, #24]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800aaca:	2301      	movs	r3, #1
 800aacc:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	4618      	mov	r0, r3
 800aad4:	f009 f9ea 	bl	8013eac <tcp_output>
 800aad8:	4603      	mov	r3, r0
 800aada:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800aadc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800aae0:	f113 0f04 	cmn.w	r3, #4
 800aae4:	d12c      	bne.n	800ab40 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800aae6:	7b3b      	ldrb	r3, [r7, #12]
 800aae8:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800aaea:	2301      	movs	r3, #1
 800aaec:	76fb      	strb	r3, [r7, #27]
 800aaee:	e027      	b.n	800ab40 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800aaf0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800aaf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aaf8:	d120      	bne.n	800ab3c <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	685b      	ldr	r3, [r3, #4]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f009 f9d4 	bl	8013eac <tcp_output>
 800ab04:	4603      	mov	r3, r0
 800ab06:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ab08:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ab0c:	f113 0f04 	cmn.w	r3, #4
 800ab10:	d104      	bne.n	800ab1c <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ab12:	7b7b      	ldrb	r3, [r7, #13]
 800ab14:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ab16:	2301      	movs	r3, #1
 800ab18:	76fb      	strb	r3, [r7, #27]
 800ab1a:	e011      	b.n	800ab40 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800ab1c:	7e3b      	ldrb	r3, [r7, #24]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00e      	beq.n	800ab40 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	699b      	ldr	r3, [r3, #24]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d102      	bne.n	800ab32 <lwip_netconn_do_writemore+0x34a>
 800ab2c:	f06f 0306 	mvn.w	r3, #6
 800ab30:	e000      	b.n	800ab34 <lwip_netconn_do_writemore+0x34c>
 800ab32:	2300      	movs	r3, #0
 800ab34:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ab36:	2301      	movs	r3, #1
 800ab38:	76fb      	strb	r3, [r7, #27]
 800ab3a:	e001      	b.n	800ab40 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800ab40:	7efb      	ldrb	r3, [r7, #27]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d015      	beq.n	800ab72 <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6a1b      	ldr	r3, [r3, #32]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	330c      	adds	r3, #12
 800ab4e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	7ffa      	ldrb	r2, [r7, #31]
 800ab56:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800ab64:	78fb      	ldrb	r3, [r7, #3]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d006      	beq.n	800ab78 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800ab6a:	68b8      	ldr	r0, [r7, #8]
 800ab6c:	f00a ffec 	bl	8015b48 <sys_sem_signal>
 800ab70:	e002      	b.n	800ab78 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ab72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ab76:	e000      	b.n	800ab7a <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3720      	adds	r7, #32
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop

0800ab84 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4618      	mov	r0, r3
 800ab96:	f7fe fbcc 	bl	8009332 <netconn_err>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ab9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d166      	bne.n	800ac74 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	781b      	ldrb	r3, [r3, #0]
 800abac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abb0:	2b10      	cmp	r3, #16
 800abb2:	d15d      	bne.n	800ac70 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	785b      	ldrb	r3, [r3, #1]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d002      	beq.n	800abc4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800abbe:	23fb      	movs	r3, #251	; 0xfb
 800abc0:	73fb      	strb	r3, [r7, #15]
 800abc2:	e057      	b.n	800ac74 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	685b      	ldr	r3, [r3, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d04d      	beq.n	800ac6a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2201      	movs	r2, #1
 800abd4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6a1b      	ldr	r3, [r3, #32]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d006      	beq.n	800abee <lwip_netconn_do_write+0x6a>
 800abe0:	4b28      	ldr	r3, [pc, #160]	; (800ac84 <lwip_netconn_do_write+0x100>)
 800abe2:	f240 7223 	movw	r2, #1827	; 0x723
 800abe6:	4928      	ldr	r1, [pc, #160]	; (800ac88 <lwip_netconn_do_write+0x104>)
 800abe8:	4828      	ldr	r0, [pc, #160]	; (800ac8c <lwip_netconn_do_write+0x108>)
 800abea:	f00b f90f 	bl	8015e0c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d106      	bne.n	800ac04 <lwip_netconn_do_write+0x80>
 800abf6:	4b23      	ldr	r3, [pc, #140]	; (800ac84 <lwip_netconn_do_write+0x100>)
 800abf8:	f240 7224 	movw	r2, #1828	; 0x724
 800abfc:	4924      	ldr	r1, [pc, #144]	; (800ac90 <lwip_netconn_do_write+0x10c>)
 800abfe:	4823      	ldr	r0, [pc, #140]	; (800ac8c <lwip_netconn_do_write+0x108>)
 800ac00:	f00b f904 	bl	8015e0c <iprintf>
        msg->conn->current_msg = msg;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ac0c:	68bb      	ldr	r3, [r7, #8]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2100      	movs	r1, #0
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7ff fde8 	bl	800a7e8 <lwip_netconn_do_writemore>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d02e      	beq.n	800ac7c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	785b      	ldrb	r3, [r3, #1]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d006      	beq.n	800ac36 <lwip_netconn_do_write+0xb2>
 800ac28:	4b16      	ldr	r3, [pc, #88]	; (800ac84 <lwip_netconn_do_write+0x100>)
 800ac2a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ac2e:	4919      	ldr	r1, [pc, #100]	; (800ac94 <lwip_netconn_do_write+0x110>)
 800ac30:	4816      	ldr	r0, [pc, #88]	; (800ac8c <lwip_netconn_do_write+0x108>)
 800ac32:	f00b f8eb 	bl	8015e0c <iprintf>
          UNLOCK_TCPIP_CORE();
 800ac36:	4818      	ldr	r0, [pc, #96]	; (800ac98 <lwip_netconn_do_write+0x114>)
 800ac38:	f00a fff5 	bl	8015c26 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	330c      	adds	r3, #12
 800ac42:	2100      	movs	r1, #0
 800ac44:	4618      	mov	r0, r3
 800ac46:	f00a ff4e 	bl	8015ae6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800ac4a:	4813      	ldr	r0, [pc, #76]	; (800ac98 <lwip_netconn_do_write+0x114>)
 800ac4c:	f00a ffdc 	bl	8015c08 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	785b      	ldrb	r3, [r3, #1]
 800ac56:	2b01      	cmp	r3, #1
 800ac58:	d110      	bne.n	800ac7c <lwip_netconn_do_write+0xf8>
 800ac5a:	4b0a      	ldr	r3, [pc, #40]	; (800ac84 <lwip_netconn_do_write+0x100>)
 800ac5c:	f240 722c 	movw	r2, #1836	; 0x72c
 800ac60:	490c      	ldr	r1, [pc, #48]	; (800ac94 <lwip_netconn_do_write+0x110>)
 800ac62:	480a      	ldr	r0, [pc, #40]	; (800ac8c <lwip_netconn_do_write+0x108>)
 800ac64:	f00b f8d2 	bl	8015e0c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800ac68:	e008      	b.n	800ac7c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800ac6a:	23f5      	movs	r3, #245	; 0xf5
 800ac6c:	73fb      	strb	r3, [r7, #15]
 800ac6e:	e001      	b.n	800ac74 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800ac70:	23fa      	movs	r3, #250	; 0xfa
 800ac72:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	7bfa      	ldrb	r2, [r7, #15]
 800ac78:	711a      	strb	r2, [r3, #4]
 800ac7a:	e000      	b.n	800ac7e <lwip_netconn_do_write+0xfa>
        return;
 800ac7c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	08018004 	.word	0x08018004
 800ac88:	080183ec 	.word	0x080183ec
 800ac8c:	0801808c 	.word	0x0801808c
 800ac90:	08018574 	.word	0x08018574
 800ac94:	08018408 	.word	0x08018408
 800ac98:	24006a24 	.word	0x24006a24

0800ac9c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	785b      	ldrb	r3, [r3, #1]
 800acae:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d069      	beq.n	800ad8e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800acc4:	2b10      	cmp	r3, #16
 800acc6:	d162      	bne.n	800ad8e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800accc:	2b03      	cmp	r3, #3
 800acce:	d002      	beq.n	800acd6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800acd0:	7afb      	ldrb	r3, [r7, #11]
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d05b      	beq.n	800ad8e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800acd6:	7afb      	ldrb	r3, [r7, #11]
 800acd8:	2b03      	cmp	r3, #3
 800acda:	d103      	bne.n	800ace4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	22f5      	movs	r2, #245	; 0xf5
 800ace0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800ace2:	e059      	b.n	800ad98 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800ace4:	7afb      	ldrb	r3, [r7, #11]
 800ace6:	2b01      	cmp	r3, #1
 800ace8:	d103      	bne.n	800acf2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	22fb      	movs	r2, #251	; 0xfb
 800acee:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800acf0:	e052      	b.n	800ad98 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	7a1b      	ldrb	r3, [r3, #8]
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d004      	beq.n	800ad08 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7ff f852 	bl	8009dac <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6a1b      	ldr	r3, [r3, #32]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d006      	beq.n	800ad20 <lwip_netconn_do_close+0x84>
 800ad12:	4b23      	ldr	r3, [pc, #140]	; (800ada0 <lwip_netconn_do_close+0x104>)
 800ad14:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800ad18:	4922      	ldr	r1, [pc, #136]	; (800ada4 <lwip_netconn_do_close+0x108>)
 800ad1a:	4823      	ldr	r0, [pc, #140]	; (800ada8 <lwip_netconn_do_close+0x10c>)
 800ad1c:	f00b f876 	bl	8015e0c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	2204      	movs	r2, #4
 800ad26:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	2100      	movs	r1, #0
 800ad36:	4618      	mov	r0, r3
 800ad38:	f7ff f8b6 	bl	8009ea8 <lwip_netconn_do_close_internal>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d029      	beq.n	800ad96 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	785b      	ldrb	r3, [r3, #1]
 800ad48:	2b04      	cmp	r3, #4
 800ad4a:	d006      	beq.n	800ad5a <lwip_netconn_do_close+0xbe>
 800ad4c:	4b14      	ldr	r3, [pc, #80]	; (800ada0 <lwip_netconn_do_close+0x104>)
 800ad4e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800ad52:	4916      	ldr	r1, [pc, #88]	; (800adac <lwip_netconn_do_close+0x110>)
 800ad54:	4814      	ldr	r0, [pc, #80]	; (800ada8 <lwip_netconn_do_close+0x10c>)
 800ad56:	f00b f859 	bl	8015e0c <iprintf>
        UNLOCK_TCPIP_CORE();
 800ad5a:	4815      	ldr	r0, [pc, #84]	; (800adb0 <lwip_netconn_do_close+0x114>)
 800ad5c:	f00a ff63 	bl	8015c26 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	330c      	adds	r3, #12
 800ad66:	2100      	movs	r1, #0
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f00a febc 	bl	8015ae6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800ad6e:	4810      	ldr	r0, [pc, #64]	; (800adb0 <lwip_netconn_do_close+0x114>)
 800ad70:	f00a ff4a 	bl	8015c08 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	785b      	ldrb	r3, [r3, #1]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00b      	beq.n	800ad96 <lwip_netconn_do_close+0xfa>
 800ad7e:	4b08      	ldr	r3, [pc, #32]	; (800ada0 <lwip_netconn_do_close+0x104>)
 800ad80:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800ad84:	4909      	ldr	r1, [pc, #36]	; (800adac <lwip_netconn_do_close+0x110>)
 800ad86:	4808      	ldr	r0, [pc, #32]	; (800ada8 <lwip_netconn_do_close+0x10c>)
 800ad88:	f00b f840 	bl	8015e0c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800ad8c:	e003      	b.n	800ad96 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	22f5      	movs	r2, #245	; 0xf5
 800ad92:	711a      	strb	r2, [r3, #4]
 800ad94:	e000      	b.n	800ad98 <lwip_netconn_do_close+0xfc>
      return;
 800ad96:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ad98:	3710      	adds	r7, #16
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	08018004 	.word	0x08018004
 800ada4:	080183ec 	.word	0x080183ec
 800ada8:	0801808c 	.word	0x0801808c
 800adac:	08018408 	.word	0x08018408
 800adb0:	24006a24 	.word	0x24006a24

0800adb4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d013      	beq.n	800adea <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00b      	beq.n	800ade2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4618      	mov	r0, r3
 800add0:	f003 ffd8 	bl	800ed84 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2200      	movs	r2, #0
 800add8:	605a      	str	r2, [r3, #4]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	2006      	movs	r0, #6
 800ade6:	f003 f985 	bl	800e0f4 <memp_free>
  }
}
 800adea:	bf00      	nop
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
	...

0800adf4 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	60f8      	str	r0, [r7, #12]
 800adfc:	60b9      	str	r1, [r7, #8]
 800adfe:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d108      	bne.n	800ae18 <netbuf_data+0x24>
 800ae06:	4b1b      	ldr	r3, [pc, #108]	; (800ae74 <netbuf_data+0x80>)
 800ae08:	22c6      	movs	r2, #198	; 0xc6
 800ae0a:	491b      	ldr	r1, [pc, #108]	; (800ae78 <netbuf_data+0x84>)
 800ae0c:	481b      	ldr	r0, [pc, #108]	; (800ae7c <netbuf_data+0x88>)
 800ae0e:	f00a fffd 	bl	8015e0c <iprintf>
 800ae12:	f06f 030f 	mvn.w	r3, #15
 800ae16:	e029      	b.n	800ae6c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d108      	bne.n	800ae30 <netbuf_data+0x3c>
 800ae1e:	4b15      	ldr	r3, [pc, #84]	; (800ae74 <netbuf_data+0x80>)
 800ae20:	22c7      	movs	r2, #199	; 0xc7
 800ae22:	4917      	ldr	r1, [pc, #92]	; (800ae80 <netbuf_data+0x8c>)
 800ae24:	4815      	ldr	r0, [pc, #84]	; (800ae7c <netbuf_data+0x88>)
 800ae26:	f00a fff1 	bl	8015e0c <iprintf>
 800ae2a:	f06f 030f 	mvn.w	r3, #15
 800ae2e:	e01d      	b.n	800ae6c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d108      	bne.n	800ae48 <netbuf_data+0x54>
 800ae36:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <netbuf_data+0x80>)
 800ae38:	22c8      	movs	r2, #200	; 0xc8
 800ae3a:	4912      	ldr	r1, [pc, #72]	; (800ae84 <netbuf_data+0x90>)
 800ae3c:	480f      	ldr	r0, [pc, #60]	; (800ae7c <netbuf_data+0x88>)
 800ae3e:	f00a ffe5 	bl	8015e0c <iprintf>
 800ae42:	f06f 030f 	mvn.w	r3, #15
 800ae46:	e011      	b.n	800ae6c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d102      	bne.n	800ae56 <netbuf_data+0x62>
    return ERR_BUF;
 800ae50:	f06f 0301 	mvn.w	r3, #1
 800ae54:	e00a      	b.n	800ae6c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	685a      	ldr	r2, [r3, #4]
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	895a      	ldrh	r2, [r3, #10]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	080185a0 	.word	0x080185a0
 800ae78:	080186e8 	.word	0x080186e8
 800ae7c:	08018630 	.word	0x08018630
 800ae80:	08018704 	.word	0x08018704
 800ae84:	08018724 	.word	0x08018724

0800ae88 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ae92:	f00a f8c3 	bl	801501c <sys_timeouts_sleeptime>
 800ae96:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae9e:	d10b      	bne.n	800aeb8 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800aea0:	4813      	ldr	r0, [pc, #76]	; (800aef0 <tcpip_timeouts_mbox_fetch+0x68>)
 800aea2:	f00a fec0 	bl	8015c26 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800aea6:	2200      	movs	r2, #0
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f00a fd7c 	bl	80159a8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800aeb0:	480f      	ldr	r0, [pc, #60]	; (800aef0 <tcpip_timeouts_mbox_fetch+0x68>)
 800aeb2:	f00a fea9 	bl	8015c08 <sys_mutex_lock>
    return;
 800aeb6:	e018      	b.n	800aeea <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d102      	bne.n	800aec4 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800aebe:	f00a f873 	bl	8014fa8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800aec2:	e7e6      	b.n	800ae92 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800aec4:	480a      	ldr	r0, [pc, #40]	; (800aef0 <tcpip_timeouts_mbox_fetch+0x68>)
 800aec6:	f00a feae 	bl	8015c26 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800aeca:	68fa      	ldr	r2, [r7, #12]
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f00a fd6a 	bl	80159a8 <sys_arch_mbox_fetch>
 800aed4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800aed6:	4806      	ldr	r0, [pc, #24]	; (800aef0 <tcpip_timeouts_mbox_fetch+0x68>)
 800aed8:	f00a fe96 	bl	8015c08 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aee2:	d102      	bne.n	800aeea <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800aee4:	f00a f860 	bl	8014fa8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800aee8:	e7d3      	b.n	800ae92 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}
 800aef0:	24006a24 	.word	0x24006a24

0800aef4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b084      	sub	sp, #16
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800aefc:	4810      	ldr	r0, [pc, #64]	; (800af40 <tcpip_thread+0x4c>)
 800aefe:	f00a fe83 	bl	8015c08 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800af02:	4b10      	ldr	r3, [pc, #64]	; (800af44 <tcpip_thread+0x50>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d005      	beq.n	800af16 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800af0a:	4b0e      	ldr	r3, [pc, #56]	; (800af44 <tcpip_thread+0x50>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a0e      	ldr	r2, [pc, #56]	; (800af48 <tcpip_thread+0x54>)
 800af10:	6812      	ldr	r2, [r2, #0]
 800af12:	4610      	mov	r0, r2
 800af14:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800af16:	f107 030c 	add.w	r3, r7, #12
 800af1a:	4619      	mov	r1, r3
 800af1c:	480b      	ldr	r0, [pc, #44]	; (800af4c <tcpip_thread+0x58>)
 800af1e:	f7ff ffb3 	bl	800ae88 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d106      	bne.n	800af36 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800af28:	4b09      	ldr	r3, [pc, #36]	; (800af50 <tcpip_thread+0x5c>)
 800af2a:	2291      	movs	r2, #145	; 0x91
 800af2c:	4909      	ldr	r1, [pc, #36]	; (800af54 <tcpip_thread+0x60>)
 800af2e:	480a      	ldr	r0, [pc, #40]	; (800af58 <tcpip_thread+0x64>)
 800af30:	f00a ff6c 	bl	8015e0c <iprintf>
      continue;
 800af34:	e003      	b.n	800af3e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	4618      	mov	r0, r3
 800af3a:	f000 f80f 	bl	800af5c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800af3e:	e7ea      	b.n	800af16 <tcpip_thread+0x22>
 800af40:	24006a24 	.word	0x24006a24
 800af44:	24006668 	.word	0x24006668
 800af48:	2400666c 	.word	0x2400666c
 800af4c:	24006670 	.word	0x24006670
 800af50:	08018778 	.word	0x08018778
 800af54:	080187ec 	.word	0x080187ec
 800af58:	0801880c 	.word	0x0801880c

0800af5c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d026      	beq.n	800afba <tcpip_thread_handle_msg+0x5e>
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	dc2b      	bgt.n	800afc8 <tcpip_thread_handle_msg+0x6c>
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <tcpip_thread_handle_msg+0x1e>
 800af74:	2b01      	cmp	r3, #1
 800af76:	d015      	beq.n	800afa4 <tcpip_thread_handle_msg+0x48>
 800af78:	e026      	b.n	800afc8 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	6850      	ldr	r0, [r2, #4]
 800af82:	687a      	ldr	r2, [r7, #4]
 800af84:	6892      	ldr	r2, [r2, #8]
 800af86:	4611      	mov	r1, r2
 800af88:	4798      	blx	r3
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d004      	beq.n	800af9a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	4618      	mov	r0, r3
 800af96:	f003 fef5 	bl	800ed84 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800af9a:	6879      	ldr	r1, [r7, #4]
 800af9c:	2009      	movs	r0, #9
 800af9e:	f003 f8a9 	bl	800e0f4 <memp_free>
      break;
 800afa2:	e018      	b.n	800afd6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	687a      	ldr	r2, [r7, #4]
 800afaa:	6892      	ldr	r2, [r2, #8]
 800afac:	4610      	mov	r0, r2
 800afae:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800afb0:	6879      	ldr	r1, [r7, #4]
 800afb2:	2008      	movs	r0, #8
 800afb4:	f003 f89e 	bl	800e0f4 <memp_free>
      break;
 800afb8:	e00d      	b.n	800afd6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	6892      	ldr	r2, [r2, #8]
 800afc2:	4610      	mov	r0, r2
 800afc4:	4798      	blx	r3
      break;
 800afc6:	e006      	b.n	800afd6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800afc8:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <tcpip_thread_handle_msg+0x84>)
 800afca:	22cf      	movs	r2, #207	; 0xcf
 800afcc:	4905      	ldr	r1, [pc, #20]	; (800afe4 <tcpip_thread_handle_msg+0x88>)
 800afce:	4806      	ldr	r0, [pc, #24]	; (800afe8 <tcpip_thread_handle_msg+0x8c>)
 800afd0:	f00a ff1c 	bl	8015e0c <iprintf>
      break;
 800afd4:	bf00      	nop
  }
}
 800afd6:	bf00      	nop
 800afd8:	3708      	adds	r7, #8
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	08018778 	.word	0x08018778
 800afe4:	080187ec 	.word	0x080187ec
 800afe8:	0801880c 	.word	0x0801880c

0800afec <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800aff8:	481a      	ldr	r0, [pc, #104]	; (800b064 <tcpip_inpkt+0x78>)
 800affa:	f00a fd30 	bl	8015a5e <sys_mbox_valid>
 800affe:	4603      	mov	r3, r0
 800b000:	2b00      	cmp	r3, #0
 800b002:	d105      	bne.n	800b010 <tcpip_inpkt+0x24>
 800b004:	4b18      	ldr	r3, [pc, #96]	; (800b068 <tcpip_inpkt+0x7c>)
 800b006:	22fc      	movs	r2, #252	; 0xfc
 800b008:	4918      	ldr	r1, [pc, #96]	; (800b06c <tcpip_inpkt+0x80>)
 800b00a:	4819      	ldr	r0, [pc, #100]	; (800b070 <tcpip_inpkt+0x84>)
 800b00c:	f00a fefe 	bl	8015e0c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b010:	2009      	movs	r0, #9
 800b012:	f002 fff9 	bl	800e008 <memp_malloc>
 800b016:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d102      	bne.n	800b024 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b01e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b022:	e01a      	b.n	800b05a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	2200      	movs	r2, #0
 800b028:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	68ba      	ldr	r2, [r7, #8]
 800b034:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b03c:	6979      	ldr	r1, [r7, #20]
 800b03e:	4809      	ldr	r0, [pc, #36]	; (800b064 <tcpip_inpkt+0x78>)
 800b040:	f00a fc98 	bl	8015974 <sys_mbox_trypost>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d006      	beq.n	800b058 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b04a:	6979      	ldr	r1, [r7, #20]
 800b04c:	2009      	movs	r0, #9
 800b04e:	f003 f851 	bl	800e0f4 <memp_free>
    return ERR_MEM;
 800b052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b056:	e000      	b.n	800b05a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b058:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3718      	adds	r7, #24
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	24006670 	.word	0x24006670
 800b068:	08018778 	.word	0x08018778
 800b06c:	08018834 	.word	0x08018834
 800b070:	0801880c 	.word	0x0801880c

0800b074 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b07e:	683b      	ldr	r3, [r7, #0]
 800b080:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b084:	f003 0318 	and.w	r3, r3, #24
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d006      	beq.n	800b09a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b08c:	4a08      	ldr	r2, [pc, #32]	; (800b0b0 <tcpip_input+0x3c>)
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f7ff ffab 	bl	800afec <tcpip_inpkt>
 800b096:	4603      	mov	r3, r0
 800b098:	e005      	b.n	800b0a6 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b09a:	4a06      	ldr	r2, [pc, #24]	; (800b0b4 <tcpip_input+0x40>)
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7ff ffa4 	bl	800afec <tcpip_inpkt>
 800b0a4:	4603      	mov	r3, r0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	08015769 	.word	0x08015769
 800b0b4:	0800c499 	.word	0x0800c499

0800b0b8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b0c4:	4806      	ldr	r0, [pc, #24]	; (800b0e0 <tcpip_send_msg_wait_sem+0x28>)
 800b0c6:	f00a fd9f 	bl	8015c08 <sys_mutex_lock>
  fn(apimsg);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	68b8      	ldr	r0, [r7, #8]
 800b0ce:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b0d0:	4803      	ldr	r0, [pc, #12]	; (800b0e0 <tcpip_send_msg_wait_sem+0x28>)
 800b0d2:	f00a fda8 	bl	8015c26 <sys_mutex_unlock>
  return ERR_OK;
 800b0d6:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3710      	adds	r7, #16
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}
 800b0e0:	24006a24 	.word	0x24006a24

0800b0e4 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af02      	add	r7, sp, #8
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b0ee:	f002 fae6 	bl	800d6be <lwip_init>

  tcpip_init_done = initfunc;
 800b0f2:	4a17      	ldr	r2, [pc, #92]	; (800b150 <tcpip_init+0x6c>)
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b0f8:	4a16      	ldr	r2, [pc, #88]	; (800b154 <tcpip_init+0x70>)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b0fe:	2106      	movs	r1, #6
 800b100:	4815      	ldr	r0, [pc, #84]	; (800b158 <tcpip_init+0x74>)
 800b102:	f00a fc07 	bl	8015914 <sys_mbox_new>
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d006      	beq.n	800b11a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b10c:	4b13      	ldr	r3, [pc, #76]	; (800b15c <tcpip_init+0x78>)
 800b10e:	f240 2261 	movw	r2, #609	; 0x261
 800b112:	4913      	ldr	r1, [pc, #76]	; (800b160 <tcpip_init+0x7c>)
 800b114:	4813      	ldr	r0, [pc, #76]	; (800b164 <tcpip_init+0x80>)
 800b116:	f00a fe79 	bl	8015e0c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b11a:	4813      	ldr	r0, [pc, #76]	; (800b168 <tcpip_init+0x84>)
 800b11c:	f00a fd5a 	bl	8015bd4 <sys_mutex_new>
 800b120:	4603      	mov	r3, r0
 800b122:	2b00      	cmp	r3, #0
 800b124:	d006      	beq.n	800b134 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b126:	4b0d      	ldr	r3, [pc, #52]	; (800b15c <tcpip_init+0x78>)
 800b128:	f240 2265 	movw	r2, #613	; 0x265
 800b12c:	490f      	ldr	r1, [pc, #60]	; (800b16c <tcpip_init+0x88>)
 800b12e:	480d      	ldr	r0, [pc, #52]	; (800b164 <tcpip_init+0x80>)
 800b130:	f00a fe6c 	bl	8015e0c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b134:	2302      	movs	r3, #2
 800b136:	9300      	str	r3, [sp, #0]
 800b138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b13c:	2200      	movs	r2, #0
 800b13e:	490c      	ldr	r1, [pc, #48]	; (800b170 <tcpip_init+0x8c>)
 800b140:	480c      	ldr	r0, [pc, #48]	; (800b174 <tcpip_init+0x90>)
 800b142:	f00a fd7d 	bl	8015c40 <sys_thread_new>
}
 800b146:	bf00      	nop
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}
 800b14e:	bf00      	nop
 800b150:	24006668 	.word	0x24006668
 800b154:	2400666c 	.word	0x2400666c
 800b158:	24006670 	.word	0x24006670
 800b15c:	08018778 	.word	0x08018778
 800b160:	08018844 	.word	0x08018844
 800b164:	0801880c 	.word	0x0801880c
 800b168:	24006a24 	.word	0x24006a24
 800b16c:	08018868 	.word	0x08018868
 800b170:	0800aef5 	.word	0x0800aef5
 800b174:	0801888c 	.word	0x0801888c

0800b178 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b082      	sub	sp, #8
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b180:	4915      	ldr	r1, [pc, #84]	; (800b1d8 <etharp_free_entry+0x60>)
 800b182:	687a      	ldr	r2, [r7, #4]
 800b184:	4613      	mov	r3, r2
 800b186:	005b      	lsls	r3, r3, #1
 800b188:	4413      	add	r3, r2
 800b18a:	00db      	lsls	r3, r3, #3
 800b18c:	440b      	add	r3, r1
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d013      	beq.n	800b1bc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b194:	4910      	ldr	r1, [pc, #64]	; (800b1d8 <etharp_free_entry+0x60>)
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	4613      	mov	r3, r2
 800b19a:	005b      	lsls	r3, r3, #1
 800b19c:	4413      	add	r3, r2
 800b19e:	00db      	lsls	r3, r3, #3
 800b1a0:	440b      	add	r3, r1
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f003 fded 	bl	800ed84 <pbuf_free>
    arp_table[i].q = NULL;
 800b1aa:	490b      	ldr	r1, [pc, #44]	; (800b1d8 <etharp_free_entry+0x60>)
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	4613      	mov	r3, r2
 800b1b0:	005b      	lsls	r3, r3, #1
 800b1b2:	4413      	add	r3, r2
 800b1b4:	00db      	lsls	r3, r3, #3
 800b1b6:	440b      	add	r3, r1
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b1bc:	4906      	ldr	r1, [pc, #24]	; (800b1d8 <etharp_free_entry+0x60>)
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	4613      	mov	r3, r2
 800b1c2:	005b      	lsls	r3, r3, #1
 800b1c4:	4413      	add	r3, r2
 800b1c6:	00db      	lsls	r3, r3, #3
 800b1c8:	440b      	add	r3, r1
 800b1ca:	3314      	adds	r3, #20
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b1d0:	bf00      	nop
 800b1d2:	3708      	adds	r7, #8
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	24006674 	.word	0x24006674

0800b1dc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	607b      	str	r3, [r7, #4]
 800b1e6:	e096      	b.n	800b316 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b1e8:	494f      	ldr	r1, [pc, #316]	; (800b328 <etharp_tmr+0x14c>)
 800b1ea:	687a      	ldr	r2, [r7, #4]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	005b      	lsls	r3, r3, #1
 800b1f0:	4413      	add	r3, r2
 800b1f2:	00db      	lsls	r3, r3, #3
 800b1f4:	440b      	add	r3, r1
 800b1f6:	3314      	adds	r3, #20
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800b1fc:	78fb      	ldrb	r3, [r7, #3]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	f000 8086 	beq.w	800b310 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800b204:	4948      	ldr	r1, [pc, #288]	; (800b328 <etharp_tmr+0x14c>)
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	4613      	mov	r3, r2
 800b20a:	005b      	lsls	r3, r3, #1
 800b20c:	4413      	add	r3, r2
 800b20e:	00db      	lsls	r3, r3, #3
 800b210:	440b      	add	r3, r1
 800b212:	3312      	adds	r3, #18
 800b214:	881b      	ldrh	r3, [r3, #0]
 800b216:	3301      	adds	r3, #1
 800b218:	b298      	uxth	r0, r3
 800b21a:	4943      	ldr	r1, [pc, #268]	; (800b328 <etharp_tmr+0x14c>)
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	4613      	mov	r3, r2
 800b220:	005b      	lsls	r3, r3, #1
 800b222:	4413      	add	r3, r2
 800b224:	00db      	lsls	r3, r3, #3
 800b226:	440b      	add	r3, r1
 800b228:	3312      	adds	r3, #18
 800b22a:	4602      	mov	r2, r0
 800b22c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b22e:	493e      	ldr	r1, [pc, #248]	; (800b328 <etharp_tmr+0x14c>)
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	4613      	mov	r3, r2
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	4413      	add	r3, r2
 800b238:	00db      	lsls	r3, r3, #3
 800b23a:	440b      	add	r3, r1
 800b23c:	3312      	adds	r3, #18
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b244:	d215      	bcs.n	800b272 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b246:	4938      	ldr	r1, [pc, #224]	; (800b328 <etharp_tmr+0x14c>)
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	4613      	mov	r3, r2
 800b24c:	005b      	lsls	r3, r3, #1
 800b24e:	4413      	add	r3, r2
 800b250:	00db      	lsls	r3, r3, #3
 800b252:	440b      	add	r3, r1
 800b254:	3314      	adds	r3, #20
 800b256:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d10e      	bne.n	800b27a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b25c:	4932      	ldr	r1, [pc, #200]	; (800b328 <etharp_tmr+0x14c>)
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	4613      	mov	r3, r2
 800b262:	005b      	lsls	r3, r3, #1
 800b264:	4413      	add	r3, r2
 800b266:	00db      	lsls	r3, r3, #3
 800b268:	440b      	add	r3, r1
 800b26a:	3312      	adds	r3, #18
 800b26c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b26e:	2b04      	cmp	r3, #4
 800b270:	d903      	bls.n	800b27a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7ff ff80 	bl	800b178 <etharp_free_entry>
 800b278:	e04a      	b.n	800b310 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b27a:	492b      	ldr	r1, [pc, #172]	; (800b328 <etharp_tmr+0x14c>)
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	4613      	mov	r3, r2
 800b280:	005b      	lsls	r3, r3, #1
 800b282:	4413      	add	r3, r2
 800b284:	00db      	lsls	r3, r3, #3
 800b286:	440b      	add	r3, r1
 800b288:	3314      	adds	r3, #20
 800b28a:	781b      	ldrb	r3, [r3, #0]
 800b28c:	2b03      	cmp	r3, #3
 800b28e:	d10a      	bne.n	800b2a6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b290:	4925      	ldr	r1, [pc, #148]	; (800b328 <etharp_tmr+0x14c>)
 800b292:	687a      	ldr	r2, [r7, #4]
 800b294:	4613      	mov	r3, r2
 800b296:	005b      	lsls	r3, r3, #1
 800b298:	4413      	add	r3, r2
 800b29a:	00db      	lsls	r3, r3, #3
 800b29c:	440b      	add	r3, r1
 800b29e:	3314      	adds	r3, #20
 800b2a0:	2204      	movs	r2, #4
 800b2a2:	701a      	strb	r2, [r3, #0]
 800b2a4:	e034      	b.n	800b310 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b2a6:	4920      	ldr	r1, [pc, #128]	; (800b328 <etharp_tmr+0x14c>)
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	005b      	lsls	r3, r3, #1
 800b2ae:	4413      	add	r3, r2
 800b2b0:	00db      	lsls	r3, r3, #3
 800b2b2:	440b      	add	r3, r1
 800b2b4:	3314      	adds	r3, #20
 800b2b6:	781b      	ldrb	r3, [r3, #0]
 800b2b8:	2b04      	cmp	r3, #4
 800b2ba:	d10a      	bne.n	800b2d2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b2bc:	491a      	ldr	r1, [pc, #104]	; (800b328 <etharp_tmr+0x14c>)
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	4413      	add	r3, r2
 800b2c6:	00db      	lsls	r3, r3, #3
 800b2c8:	440b      	add	r3, r1
 800b2ca:	3314      	adds	r3, #20
 800b2cc:	2202      	movs	r2, #2
 800b2ce:	701a      	strb	r2, [r3, #0]
 800b2d0:	e01e      	b.n	800b310 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b2d2:	4915      	ldr	r1, [pc, #84]	; (800b328 <etharp_tmr+0x14c>)
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	4613      	mov	r3, r2
 800b2d8:	005b      	lsls	r3, r3, #1
 800b2da:	4413      	add	r3, r2
 800b2dc:	00db      	lsls	r3, r3, #3
 800b2de:	440b      	add	r3, r1
 800b2e0:	3314      	adds	r3, #20
 800b2e2:	781b      	ldrb	r3, [r3, #0]
 800b2e4:	2b01      	cmp	r3, #1
 800b2e6:	d113      	bne.n	800b310 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b2e8:	490f      	ldr	r1, [pc, #60]	; (800b328 <etharp_tmr+0x14c>)
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	005b      	lsls	r3, r3, #1
 800b2f0:	4413      	add	r3, r2
 800b2f2:	00db      	lsls	r3, r3, #3
 800b2f4:	440b      	add	r3, r1
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	6818      	ldr	r0, [r3, #0]
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	4613      	mov	r3, r2
 800b2fe:	005b      	lsls	r3, r3, #1
 800b300:	4413      	add	r3, r2
 800b302:	00db      	lsls	r3, r3, #3
 800b304:	4a08      	ldr	r2, [pc, #32]	; (800b328 <etharp_tmr+0x14c>)
 800b306:	4413      	add	r3, r2
 800b308:	3304      	adds	r3, #4
 800b30a:	4619      	mov	r1, r3
 800b30c:	f000 fe6e 	bl	800bfec <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	3301      	adds	r3, #1
 800b314:	607b      	str	r3, [r7, #4]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2b09      	cmp	r3, #9
 800b31a:	f77f af65 	ble.w	800b1e8 <etharp_tmr+0xc>
      }
    }
  }
}
 800b31e:	bf00      	nop
 800b320:	bf00      	nop
 800b322:	3708      	adds	r7, #8
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}
 800b328:	24006674 	.word	0x24006674

0800b32c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b08a      	sub	sp, #40	; 0x28
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	460b      	mov	r3, r1
 800b336:	607a      	str	r2, [r7, #4]
 800b338:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b33a:	230a      	movs	r3, #10
 800b33c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b33e:	230a      	movs	r3, #10
 800b340:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800b342:	230a      	movs	r3, #10
 800b344:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800b346:	2300      	movs	r3, #0
 800b348:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800b34a:	230a      	movs	r3, #10
 800b34c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b34e:	2300      	movs	r3, #0
 800b350:	83bb      	strh	r3, [r7, #28]
 800b352:	2300      	movs	r3, #0
 800b354:	837b      	strh	r3, [r7, #26]
 800b356:	2300      	movs	r3, #0
 800b358:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b35a:	2300      	movs	r3, #0
 800b35c:	843b      	strh	r3, [r7, #32]
 800b35e:	e0ae      	b.n	800b4be <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800b360:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b364:	49a6      	ldr	r1, [pc, #664]	; (800b600 <etharp_find_entry+0x2d4>)
 800b366:	4613      	mov	r3, r2
 800b368:	005b      	lsls	r3, r3, #1
 800b36a:	4413      	add	r3, r2
 800b36c:	00db      	lsls	r3, r3, #3
 800b36e:	440b      	add	r3, r1
 800b370:	3314      	adds	r3, #20
 800b372:	781b      	ldrb	r3, [r3, #0]
 800b374:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b376:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b37a:	2b0a      	cmp	r3, #10
 800b37c:	d105      	bne.n	800b38a <etharp_find_entry+0x5e>
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800b384:	8c3b      	ldrh	r3, [r7, #32]
 800b386:	847b      	strh	r3, [r7, #34]	; 0x22
 800b388:	e095      	b.n	800b4b6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b38a:	7dfb      	ldrb	r3, [r7, #23]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f000 8092 	beq.w	800b4b6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b392:	7dfb      	ldrb	r3, [r7, #23]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d009      	beq.n	800b3ac <etharp_find_entry+0x80>
 800b398:	7dfb      	ldrb	r3, [r7, #23]
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d806      	bhi.n	800b3ac <etharp_find_entry+0x80>
 800b39e:	4b99      	ldr	r3, [pc, #612]	; (800b604 <etharp_find_entry+0x2d8>)
 800b3a0:	f240 1223 	movw	r2, #291	; 0x123
 800b3a4:	4998      	ldr	r1, [pc, #608]	; (800b608 <etharp_find_entry+0x2dc>)
 800b3a6:	4899      	ldr	r0, [pc, #612]	; (800b60c <etharp_find_entry+0x2e0>)
 800b3a8:	f00a fd30 	bl	8015e0c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d020      	beq.n	800b3f4 <etharp_find_entry+0xc8>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	6819      	ldr	r1, [r3, #0]
 800b3b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3ba:	4891      	ldr	r0, [pc, #580]	; (800b600 <etharp_find_entry+0x2d4>)
 800b3bc:	4613      	mov	r3, r2
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	4413      	add	r3, r2
 800b3c2:	00db      	lsls	r3, r3, #3
 800b3c4:	4403      	add	r3, r0
 800b3c6:	3304      	adds	r3, #4
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4299      	cmp	r1, r3
 800b3cc:	d112      	bne.n	800b3f4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00c      	beq.n	800b3ee <etharp_find_entry+0xc2>
 800b3d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3d8:	4989      	ldr	r1, [pc, #548]	; (800b600 <etharp_find_entry+0x2d4>)
 800b3da:	4613      	mov	r3, r2
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	4413      	add	r3, r2
 800b3e0:	00db      	lsls	r3, r3, #3
 800b3e2:	440b      	add	r3, r1
 800b3e4:	3308      	adds	r3, #8
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d102      	bne.n	800b3f4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b3ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b3f2:	e100      	b.n	800b5f6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b3f4:	7dfb      	ldrb	r3, [r7, #23]
 800b3f6:	2b01      	cmp	r3, #1
 800b3f8:	d140      	bne.n	800b47c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b3fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3fe:	4980      	ldr	r1, [pc, #512]	; (800b600 <etharp_find_entry+0x2d4>)
 800b400:	4613      	mov	r3, r2
 800b402:	005b      	lsls	r3, r3, #1
 800b404:	4413      	add	r3, r2
 800b406:	00db      	lsls	r3, r3, #3
 800b408:	440b      	add	r3, r1
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d01a      	beq.n	800b446 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800b410:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b414:	497a      	ldr	r1, [pc, #488]	; (800b600 <etharp_find_entry+0x2d4>)
 800b416:	4613      	mov	r3, r2
 800b418:	005b      	lsls	r3, r3, #1
 800b41a:	4413      	add	r3, r2
 800b41c:	00db      	lsls	r3, r3, #3
 800b41e:	440b      	add	r3, r1
 800b420:	3312      	adds	r3, #18
 800b422:	881b      	ldrh	r3, [r3, #0]
 800b424:	8bba      	ldrh	r2, [r7, #28]
 800b426:	429a      	cmp	r2, r3
 800b428:	d845      	bhi.n	800b4b6 <etharp_find_entry+0x18a>
            old_queue = i;
 800b42a:	8c3b      	ldrh	r3, [r7, #32]
 800b42c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800b42e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b432:	4973      	ldr	r1, [pc, #460]	; (800b600 <etharp_find_entry+0x2d4>)
 800b434:	4613      	mov	r3, r2
 800b436:	005b      	lsls	r3, r3, #1
 800b438:	4413      	add	r3, r2
 800b43a:	00db      	lsls	r3, r3, #3
 800b43c:	440b      	add	r3, r1
 800b43e:	3312      	adds	r3, #18
 800b440:	881b      	ldrh	r3, [r3, #0]
 800b442:	83bb      	strh	r3, [r7, #28]
 800b444:	e037      	b.n	800b4b6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b446:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b44a:	496d      	ldr	r1, [pc, #436]	; (800b600 <etharp_find_entry+0x2d4>)
 800b44c:	4613      	mov	r3, r2
 800b44e:	005b      	lsls	r3, r3, #1
 800b450:	4413      	add	r3, r2
 800b452:	00db      	lsls	r3, r3, #3
 800b454:	440b      	add	r3, r1
 800b456:	3312      	adds	r3, #18
 800b458:	881b      	ldrh	r3, [r3, #0]
 800b45a:	8b7a      	ldrh	r2, [r7, #26]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d82a      	bhi.n	800b4b6 <etharp_find_entry+0x18a>
            old_pending = i;
 800b460:	8c3b      	ldrh	r3, [r7, #32]
 800b462:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800b464:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b468:	4965      	ldr	r1, [pc, #404]	; (800b600 <etharp_find_entry+0x2d4>)
 800b46a:	4613      	mov	r3, r2
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	4413      	add	r3, r2
 800b470:	00db      	lsls	r3, r3, #3
 800b472:	440b      	add	r3, r1
 800b474:	3312      	adds	r3, #18
 800b476:	881b      	ldrh	r3, [r3, #0]
 800b478:	837b      	strh	r3, [r7, #26]
 800b47a:	e01c      	b.n	800b4b6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b47c:	7dfb      	ldrb	r3, [r7, #23]
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d919      	bls.n	800b4b6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b482:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b486:	495e      	ldr	r1, [pc, #376]	; (800b600 <etharp_find_entry+0x2d4>)
 800b488:	4613      	mov	r3, r2
 800b48a:	005b      	lsls	r3, r3, #1
 800b48c:	4413      	add	r3, r2
 800b48e:	00db      	lsls	r3, r3, #3
 800b490:	440b      	add	r3, r1
 800b492:	3312      	adds	r3, #18
 800b494:	881b      	ldrh	r3, [r3, #0]
 800b496:	8b3a      	ldrh	r2, [r7, #24]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d80c      	bhi.n	800b4b6 <etharp_find_entry+0x18a>
            old_stable = i;
 800b49c:	8c3b      	ldrh	r3, [r7, #32]
 800b49e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800b4a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b4a4:	4956      	ldr	r1, [pc, #344]	; (800b600 <etharp_find_entry+0x2d4>)
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	005b      	lsls	r3, r3, #1
 800b4aa:	4413      	add	r3, r2
 800b4ac:	00db      	lsls	r3, r3, #3
 800b4ae:	440b      	add	r3, r1
 800b4b0:	3312      	adds	r3, #18
 800b4b2:	881b      	ldrh	r3, [r3, #0]
 800b4b4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b4b6:	8c3b      	ldrh	r3, [r7, #32]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	843b      	strh	r3, [r7, #32]
 800b4be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b4c2:	2b09      	cmp	r3, #9
 800b4c4:	f77f af4c 	ble.w	800b360 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b4c8:	7afb      	ldrb	r3, [r7, #11]
 800b4ca:	f003 0302 	and.w	r3, r3, #2
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d108      	bne.n	800b4e4 <etharp_find_entry+0x1b8>
 800b4d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b4d6:	2b0a      	cmp	r3, #10
 800b4d8:	d107      	bne.n	800b4ea <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b4da:	7afb      	ldrb	r3, [r7, #11]
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d102      	bne.n	800b4ea <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800b4e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4e8:	e085      	b.n	800b5f6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b4ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b4ee:	2b09      	cmp	r3, #9
 800b4f0:	dc02      	bgt.n	800b4f8 <etharp_find_entry+0x1cc>
    i = empty;
 800b4f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b4f4:	843b      	strh	r3, [r7, #32]
 800b4f6:	e039      	b.n	800b56c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b4f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b4fc:	2b09      	cmp	r3, #9
 800b4fe:	dc14      	bgt.n	800b52a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800b500:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b502:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b504:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b508:	493d      	ldr	r1, [pc, #244]	; (800b600 <etharp_find_entry+0x2d4>)
 800b50a:	4613      	mov	r3, r2
 800b50c:	005b      	lsls	r3, r3, #1
 800b50e:	4413      	add	r3, r2
 800b510:	00db      	lsls	r3, r3, #3
 800b512:	440b      	add	r3, r1
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d018      	beq.n	800b54c <etharp_find_entry+0x220>
 800b51a:	4b3a      	ldr	r3, [pc, #232]	; (800b604 <etharp_find_entry+0x2d8>)
 800b51c:	f240 126d 	movw	r2, #365	; 0x16d
 800b520:	493b      	ldr	r1, [pc, #236]	; (800b610 <etharp_find_entry+0x2e4>)
 800b522:	483a      	ldr	r0, [pc, #232]	; (800b60c <etharp_find_entry+0x2e0>)
 800b524:	f00a fc72 	bl	8015e0c <iprintf>
 800b528:	e010      	b.n	800b54c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b52a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b52e:	2b09      	cmp	r3, #9
 800b530:	dc02      	bgt.n	800b538 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800b532:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b534:	843b      	strh	r3, [r7, #32]
 800b536:	e009      	b.n	800b54c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b538:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b53c:	2b09      	cmp	r3, #9
 800b53e:	dc02      	bgt.n	800b546 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b540:	8bfb      	ldrh	r3, [r7, #30]
 800b542:	843b      	strh	r3, [r7, #32]
 800b544:	e002      	b.n	800b54c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b546:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b54a:	e054      	b.n	800b5f6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b54c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b550:	2b09      	cmp	r3, #9
 800b552:	dd06      	ble.n	800b562 <etharp_find_entry+0x236>
 800b554:	4b2b      	ldr	r3, [pc, #172]	; (800b604 <etharp_find_entry+0x2d8>)
 800b556:	f240 127f 	movw	r2, #383	; 0x17f
 800b55a:	492e      	ldr	r1, [pc, #184]	; (800b614 <etharp_find_entry+0x2e8>)
 800b55c:	482b      	ldr	r0, [pc, #172]	; (800b60c <etharp_find_entry+0x2e0>)
 800b55e:	f00a fc55 	bl	8015e0c <iprintf>
    etharp_free_entry(i);
 800b562:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b566:	4618      	mov	r0, r3
 800b568:	f7ff fe06 	bl	800b178 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b56c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b570:	2b09      	cmp	r3, #9
 800b572:	dd06      	ble.n	800b582 <etharp_find_entry+0x256>
 800b574:	4b23      	ldr	r3, [pc, #140]	; (800b604 <etharp_find_entry+0x2d8>)
 800b576:	f240 1283 	movw	r2, #387	; 0x183
 800b57a:	4926      	ldr	r1, [pc, #152]	; (800b614 <etharp_find_entry+0x2e8>)
 800b57c:	4823      	ldr	r0, [pc, #140]	; (800b60c <etharp_find_entry+0x2e0>)
 800b57e:	f00a fc45 	bl	8015e0c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b582:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b586:	491e      	ldr	r1, [pc, #120]	; (800b600 <etharp_find_entry+0x2d4>)
 800b588:	4613      	mov	r3, r2
 800b58a:	005b      	lsls	r3, r3, #1
 800b58c:	4413      	add	r3, r2
 800b58e:	00db      	lsls	r3, r3, #3
 800b590:	440b      	add	r3, r1
 800b592:	3314      	adds	r3, #20
 800b594:	781b      	ldrb	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d006      	beq.n	800b5a8 <etharp_find_entry+0x27c>
 800b59a:	4b1a      	ldr	r3, [pc, #104]	; (800b604 <etharp_find_entry+0x2d8>)
 800b59c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800b5a0:	491d      	ldr	r1, [pc, #116]	; (800b618 <etharp_find_entry+0x2ec>)
 800b5a2:	481a      	ldr	r0, [pc, #104]	; (800b60c <etharp_find_entry+0x2e0>)
 800b5a4:	f00a fc32 	bl	8015e0c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d00b      	beq.n	800b5c6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b5ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6819      	ldr	r1, [r3, #0]
 800b5b6:	4812      	ldr	r0, [pc, #72]	; (800b600 <etharp_find_entry+0x2d4>)
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	4413      	add	r3, r2
 800b5be:	00db      	lsls	r3, r3, #3
 800b5c0:	4403      	add	r3, r0
 800b5c2:	3304      	adds	r3, #4
 800b5c4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b5c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5ca:	490d      	ldr	r1, [pc, #52]	; (800b600 <etharp_find_entry+0x2d4>)
 800b5cc:	4613      	mov	r3, r2
 800b5ce:	005b      	lsls	r3, r3, #1
 800b5d0:	4413      	add	r3, r2
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	440b      	add	r3, r1
 800b5d6:	3312      	adds	r3, #18
 800b5d8:	2200      	movs	r2, #0
 800b5da:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b5dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5e0:	4907      	ldr	r1, [pc, #28]	; (800b600 <etharp_find_entry+0x2d4>)
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	005b      	lsls	r3, r3, #1
 800b5e6:	4413      	add	r3, r2
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	440b      	add	r3, r1
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b5f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3728      	adds	r7, #40	; 0x28
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	24006674 	.word	0x24006674
 800b604:	08018894 	.word	0x08018894
 800b608:	08018910 	.word	0x08018910
 800b60c:	08018950 	.word	0x08018950
 800b610:	08018978 	.word	0x08018978
 800b614:	08018990 	.word	0x08018990
 800b618:	080189a4 	.word	0x080189a4

0800b61c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b088      	sub	sp, #32
 800b620:	af02      	add	r7, sp, #8
 800b622:	60f8      	str	r0, [r7, #12]
 800b624:	60b9      	str	r1, [r7, #8]
 800b626:	607a      	str	r2, [r7, #4]
 800b628:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b630:	2b06      	cmp	r3, #6
 800b632:	d006      	beq.n	800b642 <etharp_update_arp_entry+0x26>
 800b634:	4b48      	ldr	r3, [pc, #288]	; (800b758 <etharp_update_arp_entry+0x13c>)
 800b636:	f240 12a9 	movw	r2, #425	; 0x1a9
 800b63a:	4948      	ldr	r1, [pc, #288]	; (800b75c <etharp_update_arp_entry+0x140>)
 800b63c:	4848      	ldr	r0, [pc, #288]	; (800b760 <etharp_update_arp_entry+0x144>)
 800b63e:	f00a fbe5 	bl	8015e0c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d012      	beq.n	800b66e <etharp_update_arp_entry+0x52>
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00e      	beq.n	800b66e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68f9      	ldr	r1, [r7, #12]
 800b656:	4618      	mov	r0, r3
 800b658:	f001 f91a 	bl	800c890 <ip4_addr_isbroadcast_u32>
 800b65c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d105      	bne.n	800b66e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b66a:	2be0      	cmp	r3, #224	; 0xe0
 800b66c:	d102      	bne.n	800b674 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b66e:	f06f 030f 	mvn.w	r3, #15
 800b672:	e06c      	b.n	800b74e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b674:	78fb      	ldrb	r3, [r7, #3]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	4619      	mov	r1, r3
 800b67a:	68b8      	ldr	r0, [r7, #8]
 800b67c:	f7ff fe56 	bl	800b32c <etharp_find_entry>
 800b680:	4603      	mov	r3, r0
 800b682:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b684:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	da02      	bge.n	800b692 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b68c:	8afb      	ldrh	r3, [r7, #22]
 800b68e:	b25b      	sxtb	r3, r3
 800b690:	e05d      	b.n	800b74e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b692:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b696:	4933      	ldr	r1, [pc, #204]	; (800b764 <etharp_update_arp_entry+0x148>)
 800b698:	4613      	mov	r3, r2
 800b69a:	005b      	lsls	r3, r3, #1
 800b69c:	4413      	add	r3, r2
 800b69e:	00db      	lsls	r3, r3, #3
 800b6a0:	440b      	add	r3, r1
 800b6a2:	3314      	adds	r3, #20
 800b6a4:	2202      	movs	r2, #2
 800b6a6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b6a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6ac:	492d      	ldr	r1, [pc, #180]	; (800b764 <etharp_update_arp_entry+0x148>)
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	005b      	lsls	r3, r3, #1
 800b6b2:	4413      	add	r3, r2
 800b6b4:	00db      	lsls	r3, r3, #3
 800b6b6:	440b      	add	r3, r1
 800b6b8:	3308      	adds	r3, #8
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b6be:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	005b      	lsls	r3, r3, #1
 800b6c6:	4413      	add	r3, r2
 800b6c8:	00db      	lsls	r3, r3, #3
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	4a25      	ldr	r2, [pc, #148]	; (800b764 <etharp_update_arp_entry+0x148>)
 800b6ce:	4413      	add	r3, r2
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	2206      	movs	r2, #6
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f00a fb68 	bl	8015dac <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b6dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6e0:	4920      	ldr	r1, [pc, #128]	; (800b764 <etharp_update_arp_entry+0x148>)
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	005b      	lsls	r3, r3, #1
 800b6e6:	4413      	add	r3, r2
 800b6e8:	00db      	lsls	r3, r3, #3
 800b6ea:	440b      	add	r3, r1
 800b6ec:	3312      	adds	r3, #18
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b6f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6f6:	491b      	ldr	r1, [pc, #108]	; (800b764 <etharp_update_arp_entry+0x148>)
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	4413      	add	r3, r2
 800b6fe:	00db      	lsls	r3, r3, #3
 800b700:	440b      	add	r3, r1
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d021      	beq.n	800b74c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b708:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b70c:	4915      	ldr	r1, [pc, #84]	; (800b764 <etharp_update_arp_entry+0x148>)
 800b70e:	4613      	mov	r3, r2
 800b710:	005b      	lsls	r3, r3, #1
 800b712:	4413      	add	r3, r2
 800b714:	00db      	lsls	r3, r3, #3
 800b716:	440b      	add	r3, r1
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b71c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b720:	4910      	ldr	r1, [pc, #64]	; (800b764 <etharp_update_arp_entry+0x148>)
 800b722:	4613      	mov	r3, r2
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	4413      	add	r3, r2
 800b728:	00db      	lsls	r3, r3, #3
 800b72a:	440b      	add	r3, r1
 800b72c:	2200      	movs	r2, #0
 800b72e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b736:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b73a:	9300      	str	r3, [sp, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6939      	ldr	r1, [r7, #16]
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f00a f89f 	bl	8015884 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b746:	6938      	ldr	r0, [r7, #16]
 800b748:	f003 fb1c 	bl	800ed84 <pbuf_free>
  }
  return ERR_OK;
 800b74c:	2300      	movs	r3, #0
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	08018894 	.word	0x08018894
 800b75c:	080189d0 	.word	0x080189d0
 800b760:	08018950 	.word	0x08018950
 800b764:	24006674 	.word	0x24006674

0800b768 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b084      	sub	sp, #16
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b770:	2300      	movs	r3, #0
 800b772:	60fb      	str	r3, [r7, #12]
 800b774:	e01e      	b.n	800b7b4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b776:	4913      	ldr	r1, [pc, #76]	; (800b7c4 <etharp_cleanup_netif+0x5c>)
 800b778:	68fa      	ldr	r2, [r7, #12]
 800b77a:	4613      	mov	r3, r2
 800b77c:	005b      	lsls	r3, r3, #1
 800b77e:	4413      	add	r3, r2
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	440b      	add	r3, r1
 800b784:	3314      	adds	r3, #20
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b78a:	7afb      	ldrb	r3, [r7, #11]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d00e      	beq.n	800b7ae <etharp_cleanup_netif+0x46>
 800b790:	490c      	ldr	r1, [pc, #48]	; (800b7c4 <etharp_cleanup_netif+0x5c>)
 800b792:	68fa      	ldr	r2, [r7, #12]
 800b794:	4613      	mov	r3, r2
 800b796:	005b      	lsls	r3, r3, #1
 800b798:	4413      	add	r3, r2
 800b79a:	00db      	lsls	r3, r3, #3
 800b79c:	440b      	add	r3, r1
 800b79e:	3308      	adds	r3, #8
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	687a      	ldr	r2, [r7, #4]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d102      	bne.n	800b7ae <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b7a8:	68f8      	ldr	r0, [r7, #12]
 800b7aa:	f7ff fce5 	bl	800b178 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	60fb      	str	r3, [r7, #12]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2b09      	cmp	r3, #9
 800b7b8:	dddd      	ble.n	800b776 <etharp_cleanup_netif+0xe>
    }
  }
}
 800b7ba:	bf00      	nop
 800b7bc:	bf00      	nop
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	24006674 	.word	0x24006674

0800b7c8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b7c8:	b5b0      	push	{r4, r5, r7, lr}
 800b7ca:	b08a      	sub	sp, #40	; 0x28
 800b7cc:	af04      	add	r7, sp, #16
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d107      	bne.n	800b7e8 <etharp_input+0x20>
 800b7d8:	4b3d      	ldr	r3, [pc, #244]	; (800b8d0 <etharp_input+0x108>)
 800b7da:	f240 228a 	movw	r2, #650	; 0x28a
 800b7de:	493d      	ldr	r1, [pc, #244]	; (800b8d4 <etharp_input+0x10c>)
 800b7e0:	483d      	ldr	r0, [pc, #244]	; (800b8d8 <etharp_input+0x110>)
 800b7e2:	f00a fb13 	bl	8015e0c <iprintf>
 800b7e6:	e06f      	b.n	800b8c8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685b      	ldr	r3, [r3, #4]
 800b7ec:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	881b      	ldrh	r3, [r3, #0]
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7f8:	d10c      	bne.n	800b814 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b7fe:	2b06      	cmp	r3, #6
 800b800:	d108      	bne.n	800b814 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b806:	2b04      	cmp	r3, #4
 800b808:	d104      	bne.n	800b814 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	885b      	ldrh	r3, [r3, #2]
 800b80e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b810:	2b08      	cmp	r3, #8
 800b812:	d003      	beq.n	800b81c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f003 fab5 	bl	800ed84 <pbuf_free>
    return;
 800b81a:	e055      	b.n	800b8c8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	330e      	adds	r3, #14
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	3318      	adds	r3, #24
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	3304      	adds	r3, #4
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d102      	bne.n	800b83c <etharp_input+0x74>
    for_us = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	75fb      	strb	r3, [r7, #23]
 800b83a:	e009      	b.n	800b850 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	3304      	adds	r3, #4
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	429a      	cmp	r2, r3
 800b846:	bf0c      	ite	eq
 800b848:	2301      	moveq	r3, #1
 800b84a:	2300      	movne	r3, #0
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	f103 0208 	add.w	r2, r3, #8
 800b856:	7dfb      	ldrb	r3, [r7, #23]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <etharp_input+0x98>
 800b85c:	2301      	movs	r3, #1
 800b85e:	e000      	b.n	800b862 <etharp_input+0x9a>
 800b860:	2302      	movs	r3, #2
 800b862:	f107 010c 	add.w	r1, r7, #12
 800b866:	6838      	ldr	r0, [r7, #0]
 800b868:	f7ff fed8 	bl	800b61c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	88db      	ldrh	r3, [r3, #6]
 800b870:	b29b      	uxth	r3, r3
 800b872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b876:	d003      	beq.n	800b880 <etharp_input+0xb8>
 800b878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b87c:	d01e      	beq.n	800b8bc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b87e:	e020      	b.n	800b8c2 <etharp_input+0xfa>
      if (for_us) {
 800b880:	7dfb      	ldrb	r3, [r7, #23]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d01c      	beq.n	800b8c0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b892:	683b      	ldr	r3, [r7, #0]
 800b894:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b89c:	693a      	ldr	r2, [r7, #16]
 800b89e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b8a0:	2102      	movs	r1, #2
 800b8a2:	9103      	str	r1, [sp, #12]
 800b8a4:	f107 010c 	add.w	r1, r7, #12
 800b8a8:	9102      	str	r1, [sp, #8]
 800b8aa:	9201      	str	r2, [sp, #4]
 800b8ac:	9300      	str	r3, [sp, #0]
 800b8ae:	462b      	mov	r3, r5
 800b8b0:	4622      	mov	r2, r4
 800b8b2:	4601      	mov	r1, r0
 800b8b4:	6838      	ldr	r0, [r7, #0]
 800b8b6:	f000 faeb 	bl	800be90 <etharp_raw>
      break;
 800b8ba:	e001      	b.n	800b8c0 <etharp_input+0xf8>
      break;
 800b8bc:	bf00      	nop
 800b8be:	e000      	b.n	800b8c2 <etharp_input+0xfa>
      break;
 800b8c0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f003 fa5e 	bl	800ed84 <pbuf_free>
}
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bdb0      	pop	{r4, r5, r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	08018894 	.word	0x08018894
 800b8d4:	08018a28 	.word	0x08018a28
 800b8d8:	08018950 	.word	0x08018950

0800b8dc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b086      	sub	sp, #24
 800b8e0:	af02      	add	r7, sp, #8
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b8ea:	79fa      	ldrb	r2, [r7, #7]
 800b8ec:	4944      	ldr	r1, [pc, #272]	; (800ba00 <etharp_output_to_arp_index+0x124>)
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	005b      	lsls	r3, r3, #1
 800b8f2:	4413      	add	r3, r2
 800b8f4:	00db      	lsls	r3, r3, #3
 800b8f6:	440b      	add	r3, r1
 800b8f8:	3314      	adds	r3, #20
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	d806      	bhi.n	800b90e <etharp_output_to_arp_index+0x32>
 800b900:	4b40      	ldr	r3, [pc, #256]	; (800ba04 <etharp_output_to_arp_index+0x128>)
 800b902:	f240 22ee 	movw	r2, #750	; 0x2ee
 800b906:	4940      	ldr	r1, [pc, #256]	; (800ba08 <etharp_output_to_arp_index+0x12c>)
 800b908:	4840      	ldr	r0, [pc, #256]	; (800ba0c <etharp_output_to_arp_index+0x130>)
 800b90a:	f00a fa7f 	bl	8015e0c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b90e:	79fa      	ldrb	r2, [r7, #7]
 800b910:	493b      	ldr	r1, [pc, #236]	; (800ba00 <etharp_output_to_arp_index+0x124>)
 800b912:	4613      	mov	r3, r2
 800b914:	005b      	lsls	r3, r3, #1
 800b916:	4413      	add	r3, r2
 800b918:	00db      	lsls	r3, r3, #3
 800b91a:	440b      	add	r3, r1
 800b91c:	3314      	adds	r3, #20
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	2b02      	cmp	r3, #2
 800b922:	d153      	bne.n	800b9cc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b924:	79fa      	ldrb	r2, [r7, #7]
 800b926:	4936      	ldr	r1, [pc, #216]	; (800ba00 <etharp_output_to_arp_index+0x124>)
 800b928:	4613      	mov	r3, r2
 800b92a:	005b      	lsls	r3, r3, #1
 800b92c:	4413      	add	r3, r2
 800b92e:	00db      	lsls	r3, r3, #3
 800b930:	440b      	add	r3, r1
 800b932:	3312      	adds	r3, #18
 800b934:	881b      	ldrh	r3, [r3, #0]
 800b936:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800b93a:	d919      	bls.n	800b970 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b93c:	79fa      	ldrb	r2, [r7, #7]
 800b93e:	4613      	mov	r3, r2
 800b940:	005b      	lsls	r3, r3, #1
 800b942:	4413      	add	r3, r2
 800b944:	00db      	lsls	r3, r3, #3
 800b946:	4a2e      	ldr	r2, [pc, #184]	; (800ba00 <etharp_output_to_arp_index+0x124>)
 800b948:	4413      	add	r3, r2
 800b94a:	3304      	adds	r3, #4
 800b94c:	4619      	mov	r1, r3
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f000 fb4c 	bl	800bfec <etharp_request>
 800b954:	4603      	mov	r3, r0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d138      	bne.n	800b9cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b95a:	79fa      	ldrb	r2, [r7, #7]
 800b95c:	4928      	ldr	r1, [pc, #160]	; (800ba00 <etharp_output_to_arp_index+0x124>)
 800b95e:	4613      	mov	r3, r2
 800b960:	005b      	lsls	r3, r3, #1
 800b962:	4413      	add	r3, r2
 800b964:	00db      	lsls	r3, r3, #3
 800b966:	440b      	add	r3, r1
 800b968:	3314      	adds	r3, #20
 800b96a:	2203      	movs	r2, #3
 800b96c:	701a      	strb	r2, [r3, #0]
 800b96e:	e02d      	b.n	800b9cc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b970:	79fa      	ldrb	r2, [r7, #7]
 800b972:	4923      	ldr	r1, [pc, #140]	; (800ba00 <etharp_output_to_arp_index+0x124>)
 800b974:	4613      	mov	r3, r2
 800b976:	005b      	lsls	r3, r3, #1
 800b978:	4413      	add	r3, r2
 800b97a:	00db      	lsls	r3, r3, #3
 800b97c:	440b      	add	r3, r1
 800b97e:	3312      	adds	r3, #18
 800b980:	881b      	ldrh	r3, [r3, #0]
 800b982:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800b986:	d321      	bcc.n	800b9cc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b988:	79fa      	ldrb	r2, [r7, #7]
 800b98a:	4613      	mov	r3, r2
 800b98c:	005b      	lsls	r3, r3, #1
 800b98e:	4413      	add	r3, r2
 800b990:	00db      	lsls	r3, r3, #3
 800b992:	4a1b      	ldr	r2, [pc, #108]	; (800ba00 <etharp_output_to_arp_index+0x124>)
 800b994:	4413      	add	r3, r2
 800b996:	1d19      	adds	r1, r3, #4
 800b998:	79fa      	ldrb	r2, [r7, #7]
 800b99a:	4613      	mov	r3, r2
 800b99c:	005b      	lsls	r3, r3, #1
 800b99e:	4413      	add	r3, r2
 800b9a0:	00db      	lsls	r3, r3, #3
 800b9a2:	3308      	adds	r3, #8
 800b9a4:	4a16      	ldr	r2, [pc, #88]	; (800ba00 <etharp_output_to_arp_index+0x124>)
 800b9a6:	4413      	add	r3, r2
 800b9a8:	3304      	adds	r3, #4
 800b9aa:	461a      	mov	r2, r3
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 fafb 	bl	800bfa8 <etharp_request_dst>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d109      	bne.n	800b9cc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b9b8:	79fa      	ldrb	r2, [r7, #7]
 800b9ba:	4911      	ldr	r1, [pc, #68]	; (800ba00 <etharp_output_to_arp_index+0x124>)
 800b9bc:	4613      	mov	r3, r2
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	4413      	add	r3, r2
 800b9c2:	00db      	lsls	r3, r3, #3
 800b9c4:	440b      	add	r3, r1
 800b9c6:	3314      	adds	r3, #20
 800b9c8:	2203      	movs	r2, #3
 800b9ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800b9d2:	79fa      	ldrb	r2, [r7, #7]
 800b9d4:	4613      	mov	r3, r2
 800b9d6:	005b      	lsls	r3, r3, #1
 800b9d8:	4413      	add	r3, r2
 800b9da:	00db      	lsls	r3, r3, #3
 800b9dc:	3308      	adds	r3, #8
 800b9de:	4a08      	ldr	r2, [pc, #32]	; (800ba00 <etharp_output_to_arp_index+0x124>)
 800b9e0:	4413      	add	r3, r2
 800b9e2:	3304      	adds	r3, #4
 800b9e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b9e8:	9200      	str	r2, [sp, #0]
 800b9ea:	460a      	mov	r2, r1
 800b9ec:	68b9      	ldr	r1, [r7, #8]
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f009 ff48 	bl	8015884 <ethernet_output>
 800b9f4:	4603      	mov	r3, r0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	24006674 	.word	0x24006674
 800ba04:	08018894 	.word	0x08018894
 800ba08:	08018a48 	.word	0x08018a48
 800ba0c:	08018950 	.word	0x08018950

0800ba10 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b08a      	sub	sp, #40	; 0x28
 800ba14:	af02      	add	r7, sp, #8
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d106      	bne.n	800ba34 <etharp_output+0x24>
 800ba26:	4b73      	ldr	r3, [pc, #460]	; (800bbf4 <etharp_output+0x1e4>)
 800ba28:	f240 321e 	movw	r2, #798	; 0x31e
 800ba2c:	4972      	ldr	r1, [pc, #456]	; (800bbf8 <etharp_output+0x1e8>)
 800ba2e:	4873      	ldr	r0, [pc, #460]	; (800bbfc <etharp_output+0x1ec>)
 800ba30:	f00a f9ec 	bl	8015e0c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d106      	bne.n	800ba48 <etharp_output+0x38>
 800ba3a:	4b6e      	ldr	r3, [pc, #440]	; (800bbf4 <etharp_output+0x1e4>)
 800ba3c:	f240 321f 	movw	r2, #799	; 0x31f
 800ba40:	496f      	ldr	r1, [pc, #444]	; (800bc00 <etharp_output+0x1f0>)
 800ba42:	486e      	ldr	r0, [pc, #440]	; (800bbfc <etharp_output+0x1ec>)
 800ba44:	f00a f9e2 	bl	8015e0c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d106      	bne.n	800ba5c <etharp_output+0x4c>
 800ba4e:	4b69      	ldr	r3, [pc, #420]	; (800bbf4 <etharp_output+0x1e4>)
 800ba50:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ba54:	496b      	ldr	r1, [pc, #428]	; (800bc04 <etharp_output+0x1f4>)
 800ba56:	4869      	ldr	r0, [pc, #420]	; (800bbfc <etharp_output+0x1ec>)
 800ba58:	f00a f9d8 	bl	8015e0c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	68f9      	ldr	r1, [r7, #12]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f000 ff14 	bl	800c890 <ip4_addr_isbroadcast_u32>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d002      	beq.n	800ba74 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ba6e:	4b66      	ldr	r3, [pc, #408]	; (800bc08 <etharp_output+0x1f8>)
 800ba70:	61fb      	str	r3, [r7, #28]
 800ba72:	e0af      	b.n	800bbd4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ba7c:	2be0      	cmp	r3, #224	; 0xe0
 800ba7e:	d118      	bne.n	800bab2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ba80:	2301      	movs	r3, #1
 800ba82:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ba84:	2300      	movs	r3, #0
 800ba86:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ba88:	235e      	movs	r3, #94	; 0x5e
 800ba8a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba96:	b2db      	uxtb	r3, r3
 800ba98:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	3302      	adds	r3, #2
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	3303      	adds	r3, #3
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800baaa:	f107 0310 	add.w	r3, r7, #16
 800baae:	61fb      	str	r3, [r7, #28]
 800bab0:	e090      	b.n	800bbd4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681a      	ldr	r2, [r3, #0]
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	3304      	adds	r3, #4
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	405a      	eors	r2, r3
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	3308      	adds	r3, #8
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	4013      	ands	r3, r2
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d012      	beq.n	800baf0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bad0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800bad4:	4293      	cmp	r3, r2
 800bad6:	d00b      	beq.n	800baf0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	330c      	adds	r3, #12
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d003      	beq.n	800baea <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	330c      	adds	r3, #12
 800bae6:	61bb      	str	r3, [r7, #24]
 800bae8:	e002      	b.n	800baf0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800baea:	f06f 0303 	mvn.w	r3, #3
 800baee:	e07d      	b.n	800bbec <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800baf0:	4b46      	ldr	r3, [pc, #280]	; (800bc0c <etharp_output+0x1fc>)
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	4619      	mov	r1, r3
 800baf6:	4a46      	ldr	r2, [pc, #280]	; (800bc10 <etharp_output+0x200>)
 800baf8:	460b      	mov	r3, r1
 800bafa:	005b      	lsls	r3, r3, #1
 800bafc:	440b      	add	r3, r1
 800bafe:	00db      	lsls	r3, r3, #3
 800bb00:	4413      	add	r3, r2
 800bb02:	3314      	adds	r3, #20
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d925      	bls.n	800bb56 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bb0a:	4b40      	ldr	r3, [pc, #256]	; (800bc0c <etharp_output+0x1fc>)
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	4619      	mov	r1, r3
 800bb10:	4a3f      	ldr	r2, [pc, #252]	; (800bc10 <etharp_output+0x200>)
 800bb12:	460b      	mov	r3, r1
 800bb14:	005b      	lsls	r3, r3, #1
 800bb16:	440b      	add	r3, r1
 800bb18:	00db      	lsls	r3, r3, #3
 800bb1a:	4413      	add	r3, r2
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d117      	bne.n	800bb56 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	4b38      	ldr	r3, [pc, #224]	; (800bc0c <etharp_output+0x1fc>)
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	4618      	mov	r0, r3
 800bb30:	4937      	ldr	r1, [pc, #220]	; (800bc10 <etharp_output+0x200>)
 800bb32:	4603      	mov	r3, r0
 800bb34:	005b      	lsls	r3, r3, #1
 800bb36:	4403      	add	r3, r0
 800bb38:	00db      	lsls	r3, r3, #3
 800bb3a:	440b      	add	r3, r1
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d108      	bne.n	800bb56 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bb44:	4b31      	ldr	r3, [pc, #196]	; (800bc0c <etharp_output+0x1fc>)
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	461a      	mov	r2, r3
 800bb4a:	68b9      	ldr	r1, [r7, #8]
 800bb4c:	68f8      	ldr	r0, [r7, #12]
 800bb4e:	f7ff fec5 	bl	800b8dc <etharp_output_to_arp_index>
 800bb52:	4603      	mov	r3, r0
 800bb54:	e04a      	b.n	800bbec <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bb56:	2300      	movs	r3, #0
 800bb58:	75fb      	strb	r3, [r7, #23]
 800bb5a:	e031      	b.n	800bbc0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bb5c:	7dfa      	ldrb	r2, [r7, #23]
 800bb5e:	492c      	ldr	r1, [pc, #176]	; (800bc10 <etharp_output+0x200>)
 800bb60:	4613      	mov	r3, r2
 800bb62:	005b      	lsls	r3, r3, #1
 800bb64:	4413      	add	r3, r2
 800bb66:	00db      	lsls	r3, r3, #3
 800bb68:	440b      	add	r3, r1
 800bb6a:	3314      	adds	r3, #20
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d923      	bls.n	800bbba <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800bb72:	7dfa      	ldrb	r2, [r7, #23]
 800bb74:	4926      	ldr	r1, [pc, #152]	; (800bc10 <etharp_output+0x200>)
 800bb76:	4613      	mov	r3, r2
 800bb78:	005b      	lsls	r3, r3, #1
 800bb7a:	4413      	add	r3, r2
 800bb7c:	00db      	lsls	r3, r3, #3
 800bb7e:	440b      	add	r3, r1
 800bb80:	3308      	adds	r3, #8
 800bb82:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d117      	bne.n	800bbba <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	6819      	ldr	r1, [r3, #0]
 800bb8e:	7dfa      	ldrb	r2, [r7, #23]
 800bb90:	481f      	ldr	r0, [pc, #124]	; (800bc10 <etharp_output+0x200>)
 800bb92:	4613      	mov	r3, r2
 800bb94:	005b      	lsls	r3, r3, #1
 800bb96:	4413      	add	r3, r2
 800bb98:	00db      	lsls	r3, r3, #3
 800bb9a:	4403      	add	r3, r0
 800bb9c:	3304      	adds	r3, #4
 800bb9e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800bba0:	4299      	cmp	r1, r3
 800bba2:	d10a      	bne.n	800bbba <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800bba4:	4a19      	ldr	r2, [pc, #100]	; (800bc0c <etharp_output+0x1fc>)
 800bba6:	7dfb      	ldrb	r3, [r7, #23]
 800bba8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800bbaa:	7dfb      	ldrb	r3, [r7, #23]
 800bbac:	461a      	mov	r2, r3
 800bbae:	68b9      	ldr	r1, [r7, #8]
 800bbb0:	68f8      	ldr	r0, [r7, #12]
 800bbb2:	f7ff fe93 	bl	800b8dc <etharp_output_to_arp_index>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	e018      	b.n	800bbec <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bbba:	7dfb      	ldrb	r3, [r7, #23]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	75fb      	strb	r3, [r7, #23]
 800bbc0:	7dfb      	ldrb	r3, [r7, #23]
 800bbc2:	2b09      	cmp	r3, #9
 800bbc4:	d9ca      	bls.n	800bb5c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800bbc6:	68ba      	ldr	r2, [r7, #8]
 800bbc8:	69b9      	ldr	r1, [r7, #24]
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f000 f822 	bl	800bc14 <etharp_query>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	e00b      	b.n	800bbec <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800bbda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bbde:	9300      	str	r3, [sp, #0]
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	68b9      	ldr	r1, [r7, #8]
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f009 fe4d 	bl	8015884 <ethernet_output>
 800bbea:	4603      	mov	r3, r0
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3720      	adds	r7, #32
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}
 800bbf4:	08018894 	.word	0x08018894
 800bbf8:	08018a28 	.word	0x08018a28
 800bbfc:	08018950 	.word	0x08018950
 800bc00:	08018a78 	.word	0x08018a78
 800bc04:	08018a18 	.word	0x08018a18
 800bc08:	0801b648 	.word	0x0801b648
 800bc0c:	24006764 	.word	0x24006764
 800bc10:	24006674 	.word	0x24006674

0800bc14 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b08c      	sub	sp, #48	; 0x30
 800bc18:	af02      	add	r7, sp, #8
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	3326      	adds	r3, #38	; 0x26
 800bc24:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800bc26:	23ff      	movs	r3, #255	; 0xff
 800bc28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	68f9      	ldr	r1, [r7, #12]
 800bc36:	4618      	mov	r0, r3
 800bc38:	f000 fe2a 	bl	800c890 <ip4_addr_isbroadcast_u32>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10c      	bne.n	800bc5c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bc4a:	2be0      	cmp	r3, #224	; 0xe0
 800bc4c:	d006      	beq.n	800bc5c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d003      	beq.n	800bc5c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d102      	bne.n	800bc62 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bc5c:	f06f 030f 	mvn.w	r3, #15
 800bc60:	e101      	b.n	800be66 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800bc62:	68fa      	ldr	r2, [r7, #12]
 800bc64:	2101      	movs	r1, #1
 800bc66:	68b8      	ldr	r0, [r7, #8]
 800bc68:	f7ff fb60 	bl	800b32c <etharp_find_entry>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800bc70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	da02      	bge.n	800bc7e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800bc78:	8a7b      	ldrh	r3, [r7, #18]
 800bc7a:	b25b      	sxtb	r3, r3
 800bc7c:	e0f3      	b.n	800be66 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800bc7e:	8a7b      	ldrh	r3, [r7, #18]
 800bc80:	2b7e      	cmp	r3, #126	; 0x7e
 800bc82:	d906      	bls.n	800bc92 <etharp_query+0x7e>
 800bc84:	4b7a      	ldr	r3, [pc, #488]	; (800be70 <etharp_query+0x25c>)
 800bc86:	f240 32c1 	movw	r2, #961	; 0x3c1
 800bc8a:	497a      	ldr	r1, [pc, #488]	; (800be74 <etharp_query+0x260>)
 800bc8c:	487a      	ldr	r0, [pc, #488]	; (800be78 <etharp_query+0x264>)
 800bc8e:	f00a f8bd 	bl	8015e0c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800bc92:	8a7b      	ldrh	r3, [r7, #18]
 800bc94:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800bc96:	7c7a      	ldrb	r2, [r7, #17]
 800bc98:	4978      	ldr	r1, [pc, #480]	; (800be7c <etharp_query+0x268>)
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	005b      	lsls	r3, r3, #1
 800bc9e:	4413      	add	r3, r2
 800bca0:	00db      	lsls	r3, r3, #3
 800bca2:	440b      	add	r3, r1
 800bca4:	3314      	adds	r3, #20
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d115      	bne.n	800bcd8 <etharp_query+0xc4>
    is_new_entry = 1;
 800bcac:	2301      	movs	r3, #1
 800bcae:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800bcb0:	7c7a      	ldrb	r2, [r7, #17]
 800bcb2:	4972      	ldr	r1, [pc, #456]	; (800be7c <etharp_query+0x268>)
 800bcb4:	4613      	mov	r3, r2
 800bcb6:	005b      	lsls	r3, r3, #1
 800bcb8:	4413      	add	r3, r2
 800bcba:	00db      	lsls	r3, r3, #3
 800bcbc:	440b      	add	r3, r1
 800bcbe:	3314      	adds	r3, #20
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800bcc4:	7c7a      	ldrb	r2, [r7, #17]
 800bcc6:	496d      	ldr	r1, [pc, #436]	; (800be7c <etharp_query+0x268>)
 800bcc8:	4613      	mov	r3, r2
 800bcca:	005b      	lsls	r3, r3, #1
 800bccc:	4413      	add	r3, r2
 800bcce:	00db      	lsls	r3, r3, #3
 800bcd0:	440b      	add	r3, r1
 800bcd2:	3308      	adds	r3, #8
 800bcd4:	68fa      	ldr	r2, [r7, #12]
 800bcd6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800bcd8:	7c7a      	ldrb	r2, [r7, #17]
 800bcda:	4968      	ldr	r1, [pc, #416]	; (800be7c <etharp_query+0x268>)
 800bcdc:	4613      	mov	r3, r2
 800bcde:	005b      	lsls	r3, r3, #1
 800bce0:	4413      	add	r3, r2
 800bce2:	00db      	lsls	r3, r3, #3
 800bce4:	440b      	add	r3, r1
 800bce6:	3314      	adds	r3, #20
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	2b01      	cmp	r3, #1
 800bcec:	d011      	beq.n	800bd12 <etharp_query+0xfe>
 800bcee:	7c7a      	ldrb	r2, [r7, #17]
 800bcf0:	4962      	ldr	r1, [pc, #392]	; (800be7c <etharp_query+0x268>)
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	005b      	lsls	r3, r3, #1
 800bcf6:	4413      	add	r3, r2
 800bcf8:	00db      	lsls	r3, r3, #3
 800bcfa:	440b      	add	r3, r1
 800bcfc:	3314      	adds	r3, #20
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d806      	bhi.n	800bd12 <etharp_query+0xfe>
 800bd04:	4b5a      	ldr	r3, [pc, #360]	; (800be70 <etharp_query+0x25c>)
 800bd06:	f240 32cd 	movw	r2, #973	; 0x3cd
 800bd0a:	495d      	ldr	r1, [pc, #372]	; (800be80 <etharp_query+0x26c>)
 800bd0c:	485a      	ldr	r0, [pc, #360]	; (800be78 <etharp_query+0x264>)
 800bd0e:	f00a f87d 	bl	8015e0c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800bd12:	6a3b      	ldr	r3, [r7, #32]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d102      	bne.n	800bd1e <etharp_query+0x10a>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d10c      	bne.n	800bd38 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800bd1e:	68b9      	ldr	r1, [r7, #8]
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f000 f963 	bl	800bfec <etharp_request>
 800bd26:	4603      	mov	r3, r0
 800bd28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d102      	bne.n	800bd38 <etharp_query+0x124>
      return result;
 800bd32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bd36:	e096      	b.n	800be66 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d106      	bne.n	800bd4c <etharp_query+0x138>
 800bd3e:	4b4c      	ldr	r3, [pc, #304]	; (800be70 <etharp_query+0x25c>)
 800bd40:	f240 32e1 	movw	r2, #993	; 0x3e1
 800bd44:	494f      	ldr	r1, [pc, #316]	; (800be84 <etharp_query+0x270>)
 800bd46:	484c      	ldr	r0, [pc, #304]	; (800be78 <etharp_query+0x264>)
 800bd48:	f00a f860 	bl	8015e0c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800bd4c:	7c7a      	ldrb	r2, [r7, #17]
 800bd4e:	494b      	ldr	r1, [pc, #300]	; (800be7c <etharp_query+0x268>)
 800bd50:	4613      	mov	r3, r2
 800bd52:	005b      	lsls	r3, r3, #1
 800bd54:	4413      	add	r3, r2
 800bd56:	00db      	lsls	r3, r3, #3
 800bd58:	440b      	add	r3, r1
 800bd5a:	3314      	adds	r3, #20
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	2b01      	cmp	r3, #1
 800bd60:	d917      	bls.n	800bd92 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800bd62:	4a49      	ldr	r2, [pc, #292]	; (800be88 <etharp_query+0x274>)
 800bd64:	7c7b      	ldrb	r3, [r7, #17]
 800bd66:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800bd68:	7c7a      	ldrb	r2, [r7, #17]
 800bd6a:	4613      	mov	r3, r2
 800bd6c:	005b      	lsls	r3, r3, #1
 800bd6e:	4413      	add	r3, r2
 800bd70:	00db      	lsls	r3, r3, #3
 800bd72:	3308      	adds	r3, #8
 800bd74:	4a41      	ldr	r2, [pc, #260]	; (800be7c <etharp_query+0x268>)
 800bd76:	4413      	add	r3, r2
 800bd78:	3304      	adds	r3, #4
 800bd7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bd7e:	9200      	str	r2, [sp, #0]
 800bd80:	697a      	ldr	r2, [r7, #20]
 800bd82:	6879      	ldr	r1, [r7, #4]
 800bd84:	68f8      	ldr	r0, [r7, #12]
 800bd86:	f009 fd7d 	bl	8015884 <ethernet_output>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800bd90:	e067      	b.n	800be62 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bd92:	7c7a      	ldrb	r2, [r7, #17]
 800bd94:	4939      	ldr	r1, [pc, #228]	; (800be7c <etharp_query+0x268>)
 800bd96:	4613      	mov	r3, r2
 800bd98:	005b      	lsls	r3, r3, #1
 800bd9a:	4413      	add	r3, r2
 800bd9c:	00db      	lsls	r3, r3, #3
 800bd9e:	440b      	add	r3, r1
 800bda0:	3314      	adds	r3, #20
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d15c      	bne.n	800be62 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bdb0:	e01c      	b.n	800bdec <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	895a      	ldrh	r2, [r3, #10]
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	891b      	ldrh	r3, [r3, #8]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d10a      	bne.n	800bdd4 <etharp_query+0x1c0>
 800bdbe:	69fb      	ldr	r3, [r7, #28]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d006      	beq.n	800bdd4 <etharp_query+0x1c0>
 800bdc6:	4b2a      	ldr	r3, [pc, #168]	; (800be70 <etharp_query+0x25c>)
 800bdc8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800bdcc:	492f      	ldr	r1, [pc, #188]	; (800be8c <etharp_query+0x278>)
 800bdce:	482a      	ldr	r0, [pc, #168]	; (800be78 <etharp_query+0x264>)
 800bdd0:	f00a f81c 	bl	8015e0c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	7b1b      	ldrb	r3, [r3, #12]
 800bdd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d002      	beq.n	800bde6 <etharp_query+0x1d2>
        copy_needed = 1;
 800bde0:	2301      	movs	r3, #1
 800bde2:	61bb      	str	r3, [r7, #24]
        break;
 800bde4:	e005      	b.n	800bdf2 <etharp_query+0x1de>
      }
      p = p->next;
 800bde6:	69fb      	ldr	r3, [r7, #28]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bdec:	69fb      	ldr	r3, [r7, #28]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d1df      	bne.n	800bdb2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800bdf2:	69bb      	ldr	r3, [r7, #24]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d007      	beq.n	800be08 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800bdf8:	687a      	ldr	r2, [r7, #4]
 800bdfa:	f44f 7120 	mov.w	r1, #640	; 0x280
 800bdfe:	200e      	movs	r0, #14
 800be00:	f003 fa28 	bl	800f254 <pbuf_clone>
 800be04:	61f8      	str	r0, [r7, #28]
 800be06:	e004      	b.n	800be12 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800be0c:	69f8      	ldr	r0, [r7, #28]
 800be0e:	f003 f85f 	bl	800eed0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800be12:	69fb      	ldr	r3, [r7, #28]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d021      	beq.n	800be5c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800be18:	7c7a      	ldrb	r2, [r7, #17]
 800be1a:	4918      	ldr	r1, [pc, #96]	; (800be7c <etharp_query+0x268>)
 800be1c:	4613      	mov	r3, r2
 800be1e:	005b      	lsls	r3, r3, #1
 800be20:	4413      	add	r3, r2
 800be22:	00db      	lsls	r3, r3, #3
 800be24:	440b      	add	r3, r1
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d00a      	beq.n	800be42 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800be2c:	7c7a      	ldrb	r2, [r7, #17]
 800be2e:	4913      	ldr	r1, [pc, #76]	; (800be7c <etharp_query+0x268>)
 800be30:	4613      	mov	r3, r2
 800be32:	005b      	lsls	r3, r3, #1
 800be34:	4413      	add	r3, r2
 800be36:	00db      	lsls	r3, r3, #3
 800be38:	440b      	add	r3, r1
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4618      	mov	r0, r3
 800be3e:	f002 ffa1 	bl	800ed84 <pbuf_free>
      }
      arp_table[i].q = p;
 800be42:	7c7a      	ldrb	r2, [r7, #17]
 800be44:	490d      	ldr	r1, [pc, #52]	; (800be7c <etharp_query+0x268>)
 800be46:	4613      	mov	r3, r2
 800be48:	005b      	lsls	r3, r3, #1
 800be4a:	4413      	add	r3, r2
 800be4c:	00db      	lsls	r3, r3, #3
 800be4e:	440b      	add	r3, r1
 800be50:	69fa      	ldr	r2, [r7, #28]
 800be52:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800be54:	2300      	movs	r3, #0
 800be56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800be5a:	e002      	b.n	800be62 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800be5c:	23ff      	movs	r3, #255	; 0xff
 800be5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800be62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800be66:	4618      	mov	r0, r3
 800be68:	3728      	adds	r7, #40	; 0x28
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	08018894 	.word	0x08018894
 800be74:	08018a84 	.word	0x08018a84
 800be78:	08018950 	.word	0x08018950
 800be7c:	24006674 	.word	0x24006674
 800be80:	08018a94 	.word	0x08018a94
 800be84:	08018a78 	.word	0x08018a78
 800be88:	24006764 	.word	0x24006764
 800be8c:	08018abc 	.word	0x08018abc

0800be90 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b08a      	sub	sp, #40	; 0x28
 800be94:	af02      	add	r7, sp, #8
 800be96:	60f8      	str	r0, [r7, #12]
 800be98:	60b9      	str	r1, [r7, #8]
 800be9a:	607a      	str	r2, [r7, #4]
 800be9c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800be9e:	2300      	movs	r3, #0
 800bea0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d106      	bne.n	800beb6 <etharp_raw+0x26>
 800bea8:	4b3a      	ldr	r3, [pc, #232]	; (800bf94 <etharp_raw+0x104>)
 800beaa:	f240 4257 	movw	r2, #1111	; 0x457
 800beae:	493a      	ldr	r1, [pc, #232]	; (800bf98 <etharp_raw+0x108>)
 800beb0:	483a      	ldr	r0, [pc, #232]	; (800bf9c <etharp_raw+0x10c>)
 800beb2:	f009 ffab 	bl	8015e0c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800beb6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800beba:	211c      	movs	r1, #28
 800bebc:	200e      	movs	r0, #14
 800bebe:	f002 fc7f 	bl	800e7c0 <pbuf_alloc>
 800bec2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d102      	bne.n	800bed0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800beca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bece:	e05d      	b.n	800bf8c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	895b      	ldrh	r3, [r3, #10]
 800bed4:	2b1b      	cmp	r3, #27
 800bed6:	d806      	bhi.n	800bee6 <etharp_raw+0x56>
 800bed8:	4b2e      	ldr	r3, [pc, #184]	; (800bf94 <etharp_raw+0x104>)
 800beda:	f240 4262 	movw	r2, #1122	; 0x462
 800bede:	4930      	ldr	r1, [pc, #192]	; (800bfa0 <etharp_raw+0x110>)
 800bee0:	482e      	ldr	r0, [pc, #184]	; (800bf9c <etharp_raw+0x10c>)
 800bee2:	f009 ff93 	bl	8015e0c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800beec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800beee:	4618      	mov	r0, r3
 800bef0:	f001 fb48 	bl	800d584 <lwip_htons>
 800bef4:	4603      	mov	r3, r0
 800bef6:	461a      	mov	r2, r3
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bf02:	2b06      	cmp	r3, #6
 800bf04:	d006      	beq.n	800bf14 <etharp_raw+0x84>
 800bf06:	4b23      	ldr	r3, [pc, #140]	; (800bf94 <etharp_raw+0x104>)
 800bf08:	f240 4269 	movw	r2, #1129	; 0x469
 800bf0c:	4925      	ldr	r1, [pc, #148]	; (800bfa4 <etharp_raw+0x114>)
 800bf0e:	4823      	ldr	r0, [pc, #140]	; (800bf9c <etharp_raw+0x10c>)
 800bf10:	f009 ff7c 	bl	8015e0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800bf14:	697b      	ldr	r3, [r7, #20]
 800bf16:	3308      	adds	r3, #8
 800bf18:	2206      	movs	r2, #6
 800bf1a:	6839      	ldr	r1, [r7, #0]
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f009 ff45 	bl	8015dac <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	3312      	adds	r3, #18
 800bf26:	2206      	movs	r2, #6
 800bf28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f009 ff3e 	bl	8015dac <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	330e      	adds	r3, #14
 800bf34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf36:	6812      	ldr	r2, [r2, #0]
 800bf38:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800bf3a:	697b      	ldr	r3, [r7, #20]
 800bf3c:	3318      	adds	r3, #24
 800bf3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bf40:	6812      	ldr	r2, [r2, #0]
 800bf42:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	2200      	movs	r2, #0
 800bf48:	701a      	strb	r2, [r3, #0]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	f042 0201 	orr.w	r2, r2, #1
 800bf50:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2200      	movs	r2, #0
 800bf56:	f042 0208 	orr.w	r2, r2, #8
 800bf5a:	709a      	strb	r2, [r3, #2]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	2206      	movs	r2, #6
 800bf64:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	2204      	movs	r2, #4
 800bf6a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800bf6c:	f640 0306 	movw	r3, #2054	; 0x806
 800bf70:	9300      	str	r3, [sp, #0]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	68ba      	ldr	r2, [r7, #8]
 800bf76:	69b9      	ldr	r1, [r7, #24]
 800bf78:	68f8      	ldr	r0, [r7, #12]
 800bf7a:	f009 fc83 	bl	8015884 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800bf7e:	69b8      	ldr	r0, [r7, #24]
 800bf80:	f002 ff00 	bl	800ed84 <pbuf_free>
  p = NULL;
 800bf84:	2300      	movs	r3, #0
 800bf86:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800bf88:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3720      	adds	r7, #32
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	08018894 	.word	0x08018894
 800bf98:	08018a28 	.word	0x08018a28
 800bf9c:	08018950 	.word	0x08018950
 800bfa0:	08018ad8 	.word	0x08018ad8
 800bfa4:	08018b0c 	.word	0x08018b0c

0800bfa8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b088      	sub	sp, #32
 800bfac:	af04      	add	r7, sp, #16
 800bfae:	60f8      	str	r0, [r7, #12]
 800bfb0:	60b9      	str	r1, [r7, #8]
 800bfb2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	9203      	str	r2, [sp, #12]
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	9202      	str	r2, [sp, #8]
 800bfcc:	4a06      	ldr	r2, [pc, #24]	; (800bfe8 <etharp_request_dst+0x40>)
 800bfce:	9201      	str	r2, [sp, #4]
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f7ff ff5a 	bl	800be90 <etharp_raw>
 800bfdc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	0801b650 	.word	0x0801b650

0800bfec <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800bff6:	4a05      	ldr	r2, [pc, #20]	; (800c00c <etharp_request+0x20>)
 800bff8:	6839      	ldr	r1, [r7, #0]
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f7ff ffd4 	bl	800bfa8 <etharp_request_dst>
 800c000:	4603      	mov	r3, r0
}
 800c002:	4618      	mov	r0, r3
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}
 800c00a:	bf00      	nop
 800c00c:	0801b648 	.word	0x0801b648

0800c010 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b08e      	sub	sp, #56	; 0x38
 800c014:	af04      	add	r7, sp, #16
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c01a:	4b82      	ldr	r3, [pc, #520]	; (800c224 <icmp_input+0x214>)
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	f003 030f 	and.w	r3, r3, #15
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c030:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c032:	2b13      	cmp	r3, #19
 800c034:	f240 80de 	bls.w	800c1f4 <icmp_input+0x1e4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	895b      	ldrh	r3, [r3, #10]
 800c03c:	2b03      	cmp	r3, #3
 800c03e:	f240 80db 	bls.w	800c1f8 <icmp_input+0x1e8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c04c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c050:	2b00      	cmp	r3, #0
 800c052:	f000 80c8 	beq.w	800c1e6 <icmp_input+0x1d6>
 800c056:	2b08      	cmp	r3, #8
 800c058:	f040 80c8 	bne.w	800c1ec <icmp_input+0x1dc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c05c:	4b72      	ldr	r3, [pc, #456]	; (800c228 <icmp_input+0x218>)
 800c05e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c060:	4b70      	ldr	r3, [pc, #448]	; (800c224 <icmp_input+0x214>)
 800c062:	695b      	ldr	r3, [r3, #20]
 800c064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c068:	2be0      	cmp	r3, #224	; 0xe0
 800c06a:	f000 80cc 	beq.w	800c206 <icmp_input+0x1f6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c06e:	4b6d      	ldr	r3, [pc, #436]	; (800c224 <icmp_input+0x214>)
 800c070:	695b      	ldr	r3, [r3, #20]
 800c072:	4a6c      	ldr	r2, [pc, #432]	; (800c224 <icmp_input+0x214>)
 800c074:	6812      	ldr	r2, [r2, #0]
 800c076:	4611      	mov	r1, r2
 800c078:	4618      	mov	r0, r3
 800c07a:	f000 fc09 	bl	800c890 <ip4_addr_isbroadcast_u32>
 800c07e:	4603      	mov	r3, r0
 800c080:	2b00      	cmp	r3, #0
 800c082:	f040 80c2 	bne.w	800c20a <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	891b      	ldrh	r3, [r3, #8]
 800c08a:	2b07      	cmp	r3, #7
 800c08c:	f240 80b6 	bls.w	800c1fc <icmp_input+0x1ec>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c090:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c092:	330e      	adds	r3, #14
 800c094:	4619      	mov	r1, r3
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f002 fdde 	bl	800ec58 <pbuf_add_header>
 800c09c:	4603      	mov	r3, r0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d04b      	beq.n	800c13a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	891a      	ldrh	r2, [r3, #8]
 800c0a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0a8:	4413      	add	r3, r2
 800c0aa:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	891b      	ldrh	r3, [r3, #8]
 800c0b0:	8b7a      	ldrh	r2, [r7, #26]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	f0c0 80ab 	bcc.w	800c20e <icmp_input+0x1fe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c0b8:	8b7b      	ldrh	r3, [r7, #26]
 800c0ba:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c0be:	4619      	mov	r1, r3
 800c0c0:	200e      	movs	r0, #14
 800c0c2:	f002 fb7d 	bl	800e7c0 <pbuf_alloc>
 800c0c6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c0c8:	697b      	ldr	r3, [r7, #20]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f000 80a1 	beq.w	800c212 <icmp_input+0x202>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c0d0:	697b      	ldr	r3, [r7, #20]
 800c0d2:	895b      	ldrh	r3, [r3, #10]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0d8:	3308      	adds	r3, #8
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d203      	bcs.n	800c0e6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c0de:	6978      	ldr	r0, [r7, #20]
 800c0e0:	f002 fe50 	bl	800ed84 <pbuf_free>
          goto icmperr;
 800c0e4:	e096      	b.n	800c214 <icmp_input+0x204>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c0ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f009 fe5c 	bl	8015dac <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c0f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	6978      	ldr	r0, [r7, #20]
 800c0fa:	f002 fdbd 	bl	800ec78 <pbuf_remove_header>
 800c0fe:	4603      	mov	r3, r0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d009      	beq.n	800c118 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c104:	4b49      	ldr	r3, [pc, #292]	; (800c22c <icmp_input+0x21c>)
 800c106:	22b6      	movs	r2, #182	; 0xb6
 800c108:	4949      	ldr	r1, [pc, #292]	; (800c230 <icmp_input+0x220>)
 800c10a:	484a      	ldr	r0, [pc, #296]	; (800c234 <icmp_input+0x224>)
 800c10c:	f009 fe7e 	bl	8015e0c <iprintf>
          pbuf_free(r);
 800c110:	6978      	ldr	r0, [r7, #20]
 800c112:	f002 fe37 	bl	800ed84 <pbuf_free>
          goto icmperr;
 800c116:	e07d      	b.n	800c214 <icmp_input+0x204>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c118:	6879      	ldr	r1, [r7, #4]
 800c11a:	6978      	ldr	r0, [r7, #20]
 800c11c:	f002 ff56 	bl	800efcc <pbuf_copy>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d003      	beq.n	800c12e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c126:	6978      	ldr	r0, [r7, #20]
 800c128:	f002 fe2c 	bl	800ed84 <pbuf_free>
          goto icmperr;
 800c12c:	e072      	b.n	800c214 <icmp_input+0x204>
        }
        /* free the original p */
        pbuf_free(p);
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f002 fe28 	bl	800ed84 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c134:	697b      	ldr	r3, [r7, #20]
 800c136:	607b      	str	r3, [r7, #4]
 800c138:	e00f      	b.n	800c15a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c13a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c13c:	330e      	adds	r3, #14
 800c13e:	4619      	mov	r1, r3
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f002 fd99 	bl	800ec78 <pbuf_remove_header>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d006      	beq.n	800c15a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c14c:	4b37      	ldr	r3, [pc, #220]	; (800c22c <icmp_input+0x21c>)
 800c14e:	22c7      	movs	r2, #199	; 0xc7
 800c150:	4939      	ldr	r1, [pc, #228]	; (800c238 <icmp_input+0x228>)
 800c152:	4838      	ldr	r0, [pc, #224]	; (800c234 <icmp_input+0x224>)
 800c154:	f009 fe5a 	bl	8015e0c <iprintf>
          goto icmperr;
 800c158:	e05c      	b.n	800c214 <icmp_input+0x204>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c160:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c162:	4619      	mov	r1, r3
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f002 fd77 	bl	800ec58 <pbuf_add_header>
 800c16a:	4603      	mov	r3, r0
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d13c      	bne.n	800c1ea <icmp_input+0x1da>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	681a      	ldr	r2, [r3, #0]
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c17e:	4b29      	ldr	r3, [pc, #164]	; (800c224 <icmp_input+0x214>)
 800c180:	691a      	ldr	r2, [r3, #16]
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	2200      	movs	r2, #0
 800c18a:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	885b      	ldrh	r3, [r3, #2]
 800c190:	b29b      	uxth	r3, r3
 800c192:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c196:	4293      	cmp	r3, r2
 800c198:	d907      	bls.n	800c1aa <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	885b      	ldrh	r3, [r3, #2]
 800c19e:	b29b      	uxth	r3, r3
 800c1a0:	3309      	adds	r3, #9
 800c1a2:	b29a      	uxth	r2, r3
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	805a      	strh	r2, [r3, #2]
 800c1a8:	e006      	b.n	800c1b8 <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800c1aa:	693b      	ldr	r3, [r7, #16]
 800c1ac:	885b      	ldrh	r3, [r3, #2]
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	3308      	adds	r3, #8
 800c1b2:	b29a      	uxth	r2, r3
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	22ff      	movs	r2, #255	; 0xff
 800c1bc:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	729a      	strb	r2, [r3, #10]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	9302      	str	r3, [sp, #8]
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	9301      	str	r3, [sp, #4]
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	23ff      	movs	r3, #255	; 0xff
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	69f9      	ldr	r1, [r7, #28]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f000 fa80 	bl	800c6e0 <ip4_output_if>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c1e4:	e001      	b.n	800c1ea <icmp_input+0x1da>
      break;
 800c1e6:	bf00      	nop
 800c1e8:	e000      	b.n	800c1ec <icmp_input+0x1dc>
      break;
 800c1ea:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f002 fdc9 	bl	800ed84 <pbuf_free>
  return;
 800c1f2:	e013      	b.n	800c21c <icmp_input+0x20c>
    goto lenerr;
 800c1f4:	bf00      	nop
 800c1f6:	e002      	b.n	800c1fe <icmp_input+0x1ee>
    goto lenerr;
 800c1f8:	bf00      	nop
 800c1fa:	e000      	b.n	800c1fe <icmp_input+0x1ee>
        goto lenerr;
 800c1fc:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c1fe:	6878      	ldr	r0, [r7, #4]
 800c200:	f002 fdc0 	bl	800ed84 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c204:	e00a      	b.n	800c21c <icmp_input+0x20c>
        goto icmperr;
 800c206:	bf00      	nop
 800c208:	e004      	b.n	800c214 <icmp_input+0x204>
        goto icmperr;
 800c20a:	bf00      	nop
 800c20c:	e002      	b.n	800c214 <icmp_input+0x204>
          goto icmperr;
 800c20e:	bf00      	nop
 800c210:	e000      	b.n	800c214 <icmp_input+0x204>
          goto icmperr;
 800c212:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f002 fdb5 	bl	800ed84 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c21a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c21c:	3728      	adds	r7, #40	; 0x28
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
 800c222:	bf00      	nop
 800c224:	24006a28 	.word	0x24006a28
 800c228:	24006a3c 	.word	0x24006a3c
 800c22c:	08018b50 	.word	0x08018b50
 800c230:	08018bc8 	.word	0x08018bc8
 800c234:	08018c00 	.word	0x08018c00
 800c238:	08018c28 	.word	0x08018c28

0800c23c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b082      	sub	sp, #8
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	460b      	mov	r3, r1
 800c246:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c248:	78fb      	ldrb	r3, [r7, #3]
 800c24a:	461a      	mov	r2, r3
 800c24c:	2103      	movs	r1, #3
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f814 	bl	800c27c <icmp_send_response>
}
 800c254:	bf00      	nop
 800c256:	3708      	adds	r7, #8
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}

0800c25c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	460b      	mov	r3, r1
 800c266:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c268:	78fb      	ldrb	r3, [r7, #3]
 800c26a:	461a      	mov	r2, r3
 800c26c:	210b      	movs	r1, #11
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 f804 	bl	800c27c <icmp_send_response>
}
 800c274:	bf00      	nop
 800c276:	3708      	adds	r7, #8
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}

0800c27c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b08c      	sub	sp, #48	; 0x30
 800c280:	af04      	add	r7, sp, #16
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	460b      	mov	r3, r1
 800c286:	70fb      	strb	r3, [r7, #3]
 800c288:	4613      	mov	r3, r2
 800c28a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c28c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c290:	2124      	movs	r1, #36	; 0x24
 800c292:	2022      	movs	r0, #34	; 0x22
 800c294:	f002 fa94 	bl	800e7c0 <pbuf_alloc>
 800c298:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d056      	beq.n	800c34e <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c2a0:	69fb      	ldr	r3, [r7, #28]
 800c2a2:	895b      	ldrh	r3, [r3, #10]
 800c2a4:	2b23      	cmp	r3, #35	; 0x23
 800c2a6:	d806      	bhi.n	800c2b6 <icmp_send_response+0x3a>
 800c2a8:	4b2b      	ldr	r3, [pc, #172]	; (800c358 <icmp_send_response+0xdc>)
 800c2aa:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c2ae:	492b      	ldr	r1, [pc, #172]	; (800c35c <icmp_send_response+0xe0>)
 800c2b0:	482b      	ldr	r0, [pc, #172]	; (800c360 <icmp_send_response+0xe4>)
 800c2b2:	f009 fdab 	bl	8015e0c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	685b      	ldr	r3, [r3, #4]
 800c2ba:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c2bc:	69fb      	ldr	r3, [r7, #28]
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	78fa      	ldrb	r2, [r7, #3]
 800c2c6:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c2c8:	697b      	ldr	r3, [r7, #20]
 800c2ca:	78ba      	ldrb	r2, [r7, #2]
 800c2cc:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	711a      	strb	r2, [r3, #4]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	719a      	strb	r2, [r3, #6]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c2e2:	69fb      	ldr	r3, [r7, #28]
 800c2e4:	685b      	ldr	r3, [r3, #4]
 800c2e6:	f103 0008 	add.w	r0, r3, #8
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	221c      	movs	r2, #28
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	f009 fd5b 	bl	8015dac <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c2f6:	69bb      	ldr	r3, [r7, #24]
 800c2f8:	68db      	ldr	r3, [r3, #12]
 800c2fa:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c2fc:	f107 030c 	add.w	r3, r7, #12
 800c300:	4618      	mov	r0, r3
 800c302:	f000 f82f 	bl	800c364 <ip4_route>
 800c306:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d01b      	beq.n	800c346 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	2200      	movs	r2, #0
 800c312:	709a      	strb	r2, [r3, #2]
 800c314:	2200      	movs	r2, #0
 800c316:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	895b      	ldrh	r3, [r3, #10]
 800c31c:	4619      	mov	r1, r3
 800c31e:	6978      	ldr	r0, [r7, #20]
 800c320:	f001 f9bb 	bl	800d69a <inet_chksum>
 800c324:	4603      	mov	r3, r0
 800c326:	461a      	mov	r2, r3
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c32c:	f107 020c 	add.w	r2, r7, #12
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	9302      	str	r3, [sp, #8]
 800c334:	2301      	movs	r3, #1
 800c336:	9301      	str	r3, [sp, #4]
 800c338:	2300      	movs	r3, #0
 800c33a:	9300      	str	r3, [sp, #0]
 800c33c:	23ff      	movs	r3, #255	; 0xff
 800c33e:	2100      	movs	r1, #0
 800c340:	69f8      	ldr	r0, [r7, #28]
 800c342:	f000 f9cd 	bl	800c6e0 <ip4_output_if>
  }
  pbuf_free(q);
 800c346:	69f8      	ldr	r0, [r7, #28]
 800c348:	f002 fd1c 	bl	800ed84 <pbuf_free>
 800c34c:	e000      	b.n	800c350 <icmp_send_response+0xd4>
    return;
 800c34e:	bf00      	nop
}
 800c350:	3720      	adds	r7, #32
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}
 800c356:	bf00      	nop
 800c358:	08018b50 	.word	0x08018b50
 800c35c:	08018c5c 	.word	0x08018c5c
 800c360:	08018c00 	.word	0x08018c00

0800c364 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c364:	b480      	push	{r7}
 800c366:	b085      	sub	sp, #20
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800c36c:	4b33      	ldr	r3, [pc, #204]	; (800c43c <ip4_route+0xd8>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	60fb      	str	r3, [r7, #12]
 800c372:	e036      	b.n	800c3e2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c37a:	f003 0301 	and.w	r3, r3, #1
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	2b00      	cmp	r3, #0
 800c382:	d02b      	beq.n	800c3dc <ip4_route+0x78>
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c38a:	089b      	lsrs	r3, r3, #2
 800c38c:	f003 0301 	and.w	r3, r3, #1
 800c390:	b2db      	uxtb	r3, r3
 800c392:	2b00      	cmp	r3, #0
 800c394:	d022      	beq.n	800c3dc <ip4_route+0x78>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3304      	adds	r3, #4
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d01d      	beq.n	800c3dc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	3304      	adds	r3, #4
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	405a      	eors	r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	3308      	adds	r3, #8
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d101      	bne.n	800c3bc <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	e038      	b.n	800c42e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c3c2:	f003 0302 	and.w	r3, r3, #2
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d108      	bne.n	800c3dc <ip4_route+0x78>
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	330c      	adds	r3, #12
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d101      	bne.n	800c3dc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	e028      	b.n	800c42e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	60fb      	str	r3, [r7, #12]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1c5      	bne.n	800c374 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c3e8:	4b15      	ldr	r3, [pc, #84]	; (800c440 <ip4_route+0xdc>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d01a      	beq.n	800c426 <ip4_route+0xc2>
 800c3f0:	4b13      	ldr	r3, [pc, #76]	; (800c440 <ip4_route+0xdc>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c3f8:	f003 0301 	and.w	r3, r3, #1
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d012      	beq.n	800c426 <ip4_route+0xc2>
 800c400:	4b0f      	ldr	r3, [pc, #60]	; (800c440 <ip4_route+0xdc>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c408:	f003 0304 	and.w	r3, r3, #4
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00a      	beq.n	800c426 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c410:	4b0b      	ldr	r3, [pc, #44]	; (800c440 <ip4_route+0xdc>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3304      	adds	r3, #4
 800c416:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d004      	beq.n	800c426 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	b2db      	uxtb	r3, r3
 800c422:	2b7f      	cmp	r3, #127	; 0x7f
 800c424:	d101      	bne.n	800c42a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c426:	2300      	movs	r3, #0
 800c428:	e001      	b.n	800c42e <ip4_route+0xca>
  }

  return netif_default;
 800c42a:	4b05      	ldr	r3, [pc, #20]	; (800c440 <ip4_route+0xdc>)
 800c42c:	681b      	ldr	r3, [r3, #0]
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3714      	adds	r7, #20
 800c432:	46bd      	mov	sp, r7
 800c434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	2400a778 	.word	0x2400a778
 800c440:	2400a77c 	.word	0x2400a77c

0800c444 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c452:	f003 0301 	and.w	r3, r3, #1
 800c456:	b2db      	uxtb	r3, r3
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d016      	beq.n	800c48a <ip4_input_accept+0x46>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	3304      	adds	r3, #4
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d011      	beq.n	800c48a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c466:	4b0b      	ldr	r3, [pc, #44]	; (800c494 <ip4_input_accept+0x50>)
 800c468:	695a      	ldr	r2, [r3, #20]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	3304      	adds	r3, #4
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	429a      	cmp	r2, r3
 800c472:	d008      	beq.n	800c486 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c474:	4b07      	ldr	r3, [pc, #28]	; (800c494 <ip4_input_accept+0x50>)
 800c476:	695b      	ldr	r3, [r3, #20]
 800c478:	6879      	ldr	r1, [r7, #4]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f000 fa08 	bl	800c890 <ip4_addr_isbroadcast_u32>
 800c480:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c482:	2b00      	cmp	r3, #0
 800c484:	d001      	beq.n	800c48a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800c486:	2301      	movs	r3, #1
 800c488:	e000      	b.n	800c48c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800c48a:	2300      	movs	r3, #0
}
 800c48c:	4618      	mov	r0, r3
 800c48e:	3708      	adds	r7, #8
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}
 800c494:	24006a28 	.word	0x24006a28

0800c498 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b086      	sub	sp, #24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c4a8:	697b      	ldr	r3, [r7, #20]
 800c4aa:	781b      	ldrb	r3, [r3, #0]
 800c4ac:	091b      	lsrs	r3, r3, #4
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	2b04      	cmp	r3, #4
 800c4b2:	d004      	beq.n	800c4be <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f002 fc65 	bl	800ed84 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	e107      	b.n	800c6ce <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	f003 030f 	and.w	r3, r3, #15
 800c4c6:	b2db      	uxtb	r3, r3
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	885b      	ldrh	r3, [r3, #2]
 800c4d2:	b29b      	uxth	r3, r3
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f001 f855 	bl	800d584 <lwip_htons>
 800c4da:	4603      	mov	r3, r0
 800c4dc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	891b      	ldrh	r3, [r3, #8]
 800c4e2:	89ba      	ldrh	r2, [r7, #12]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d204      	bcs.n	800c4f2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c4e8:	89bb      	ldrh	r3, [r7, #12]
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f002 fac3 	bl	800ea78 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	895b      	ldrh	r3, [r3, #10]
 800c4f6:	89fa      	ldrh	r2, [r7, #14]
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	d807      	bhi.n	800c50c <ip4_input+0x74>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	891b      	ldrh	r3, [r3, #8]
 800c500:	89ba      	ldrh	r2, [r7, #12]
 800c502:	429a      	cmp	r2, r3
 800c504:	d802      	bhi.n	800c50c <ip4_input+0x74>
 800c506:	89fb      	ldrh	r3, [r7, #14]
 800c508:	2b13      	cmp	r3, #19
 800c50a:	d804      	bhi.n	800c516 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f002 fc39 	bl	800ed84 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c512:	2300      	movs	r3, #0
 800c514:	e0db      	b.n	800c6ce <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	691b      	ldr	r3, [r3, #16]
 800c51a:	4a6f      	ldr	r2, [pc, #444]	; (800c6d8 <ip4_input+0x240>)
 800c51c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	68db      	ldr	r3, [r3, #12]
 800c522:	4a6d      	ldr	r2, [pc, #436]	; (800c6d8 <ip4_input+0x240>)
 800c524:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c526:	4b6c      	ldr	r3, [pc, #432]	; (800c6d8 <ip4_input+0x240>)
 800c528:	695b      	ldr	r3, [r3, #20]
 800c52a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c52e:	2be0      	cmp	r3, #224	; 0xe0
 800c530:	d112      	bne.n	800c558 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c538:	f003 0301 	and.w	r3, r3, #1
 800c53c:	b2db      	uxtb	r3, r3
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d007      	beq.n	800c552 <ip4_input+0xba>
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	3304      	adds	r3, #4
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d002      	beq.n	800c552 <ip4_input+0xba>
      netif = inp;
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	613b      	str	r3, [r7, #16]
 800c550:	e02a      	b.n	800c5a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c552:	2300      	movs	r3, #0
 800c554:	613b      	str	r3, [r7, #16]
 800c556:	e027      	b.n	800c5a8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800c558:	6838      	ldr	r0, [r7, #0]
 800c55a:	f7ff ff73 	bl	800c444 <ip4_input_accept>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <ip4_input+0xd2>
      netif = inp;
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	613b      	str	r3, [r7, #16]
 800c568:	e01e      	b.n	800c5a8 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c56a:	2300      	movs	r3, #0
 800c56c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c56e:	4b5a      	ldr	r3, [pc, #360]	; (800c6d8 <ip4_input+0x240>)
 800c570:	695b      	ldr	r3, [r3, #20]
 800c572:	b2db      	uxtb	r3, r3
 800c574:	2b7f      	cmp	r3, #127	; 0x7f
 800c576:	d017      	beq.n	800c5a8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c578:	4b58      	ldr	r3, [pc, #352]	; (800c6dc <ip4_input+0x244>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	613b      	str	r3, [r7, #16]
 800c57e:	e00e      	b.n	800c59e <ip4_input+0x106>
          if (netif == inp) {
 800c580:	693a      	ldr	r2, [r7, #16]
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	429a      	cmp	r2, r3
 800c586:	d006      	beq.n	800c596 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c588:	6938      	ldr	r0, [r7, #16]
 800c58a:	f7ff ff5b 	bl	800c444 <ip4_input_accept>
 800c58e:	4603      	mov	r3, r0
 800c590:	2b00      	cmp	r3, #0
 800c592:	d108      	bne.n	800c5a6 <ip4_input+0x10e>
 800c594:	e000      	b.n	800c598 <ip4_input+0x100>
            continue;
 800c596:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	613b      	str	r3, [r7, #16]
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1ed      	bne.n	800c580 <ip4_input+0xe8>
 800c5a4:	e000      	b.n	800c5a8 <ip4_input+0x110>
            break;
 800c5a6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c5a8:	4b4b      	ldr	r3, [pc, #300]	; (800c6d8 <ip4_input+0x240>)
 800c5aa:	691b      	ldr	r3, [r3, #16]
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 f96e 	bl	800c890 <ip4_addr_isbroadcast_u32>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d105      	bne.n	800c5c6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c5ba:	4b47      	ldr	r3, [pc, #284]	; (800c6d8 <ip4_input+0x240>)
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c5c2:	2be0      	cmp	r3, #224	; 0xe0
 800c5c4:	d104      	bne.n	800c5d0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f002 fbdc 	bl	800ed84 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	e07e      	b.n	800c6ce <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d104      	bne.n	800c5e0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f002 fbd4 	bl	800ed84 <pbuf_free>
    return ERR_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	e076      	b.n	800c6ce <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c5e0:	697b      	ldr	r3, [r7, #20]
 800c5e2:	88db      	ldrh	r3, [r3, #6]
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00b      	beq.n	800c60a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fc92 	bl	800cf1c <ip4_reass>
 800c5f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <ip4_input+0x16c>
      return ERR_OK;
 800c600:	2300      	movs	r3, #0
 800c602:	e064      	b.n	800c6ce <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c60a:	4a33      	ldr	r2, [pc, #204]	; (800c6d8 <ip4_input+0x240>)
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c610:	4a31      	ldr	r2, [pc, #196]	; (800c6d8 <ip4_input+0x240>)
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c616:	4a30      	ldr	r2, [pc, #192]	; (800c6d8 <ip4_input+0x240>)
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	f003 030f 	and.w	r3, r3, #15
 800c624:	b2db      	uxtb	r3, r3
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	b29a      	uxth	r2, r3
 800c62c:	4b2a      	ldr	r3, [pc, #168]	; (800c6d8 <ip4_input+0x240>)
 800c62e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c630:	89fb      	ldrh	r3, [r7, #14]
 800c632:	4619      	mov	r1, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f002 fb1f 	bl	800ec78 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	7a5b      	ldrb	r3, [r3, #9]
 800c63e:	2b11      	cmp	r3, #17
 800c640:	d006      	beq.n	800c650 <ip4_input+0x1b8>
 800c642:	2b11      	cmp	r3, #17
 800c644:	dc13      	bgt.n	800c66e <ip4_input+0x1d6>
 800c646:	2b01      	cmp	r3, #1
 800c648:	d00c      	beq.n	800c664 <ip4_input+0x1cc>
 800c64a:	2b06      	cmp	r3, #6
 800c64c:	d005      	beq.n	800c65a <ip4_input+0x1c2>
 800c64e:	e00e      	b.n	800c66e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c650:	6839      	ldr	r1, [r7, #0]
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f008 fdc8 	bl	80151e8 <udp_input>
        break;
 800c658:	e026      	b.n	800c6a8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800c65a:	6839      	ldr	r1, [r7, #0]
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f004 fd3d 	bl	80110dc <tcp_input>
        break;
 800c662:	e021      	b.n	800c6a8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c664:	6839      	ldr	r1, [r7, #0]
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f7ff fcd2 	bl	800c010 <icmp_input>
        break;
 800c66c:	e01c      	b.n	800c6a8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c66e:	4b1a      	ldr	r3, [pc, #104]	; (800c6d8 <ip4_input+0x240>)
 800c670:	695b      	ldr	r3, [r3, #20]
 800c672:	6939      	ldr	r1, [r7, #16]
 800c674:	4618      	mov	r0, r3
 800c676:	f000 f90b 	bl	800c890 <ip4_addr_isbroadcast_u32>
 800c67a:	4603      	mov	r3, r0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d10f      	bne.n	800c6a0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c680:	4b15      	ldr	r3, [pc, #84]	; (800c6d8 <ip4_input+0x240>)
 800c682:	695b      	ldr	r3, [r3, #20]
 800c684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c688:	2be0      	cmp	r3, #224	; 0xe0
 800c68a:	d009      	beq.n	800c6a0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c68c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c690:	4619      	mov	r1, r3
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f002 fb63 	bl	800ed5e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c698:	2102      	movs	r1, #2
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7ff fdce 	bl	800c23c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f002 fb6f 	bl	800ed84 <pbuf_free>
        break;
 800c6a6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c6a8:	4b0b      	ldr	r3, [pc, #44]	; (800c6d8 <ip4_input+0x240>)
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c6ae:	4b0a      	ldr	r3, [pc, #40]	; (800c6d8 <ip4_input+0x240>)
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c6b4:	4b08      	ldr	r3, [pc, #32]	; (800c6d8 <ip4_input+0x240>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c6ba:	4b07      	ldr	r3, [pc, #28]	; (800c6d8 <ip4_input+0x240>)
 800c6bc:	2200      	movs	r2, #0
 800c6be:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c6c0:	4b05      	ldr	r3, [pc, #20]	; (800c6d8 <ip4_input+0x240>)
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c6c6:	4b04      	ldr	r3, [pc, #16]	; (800c6d8 <ip4_input+0x240>)
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3718      	adds	r7, #24
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	24006a28 	.word	0x24006a28
 800c6dc:	2400a778 	.word	0x2400a778

0800c6e0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b08a      	sub	sp, #40	; 0x28
 800c6e4:	af04      	add	r7, sp, #16
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]
 800c6ec:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d009      	beq.n	800c70c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c6f8:	68bb      	ldr	r3, [r7, #8]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d003      	beq.n	800c706 <ip4_output_if+0x26>
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d102      	bne.n	800c70c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c708:	3304      	adds	r3, #4
 800c70a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c70c:	78fa      	ldrb	r2, [r7, #3]
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	9302      	str	r3, [sp, #8]
 800c712:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c716:	9301      	str	r3, [sp, #4]
 800c718:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	4613      	mov	r3, r2
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	6979      	ldr	r1, [r7, #20]
 800c724:	68f8      	ldr	r0, [r7, #12]
 800c726:	f000 f805 	bl	800c734 <ip4_output_if_src>
 800c72a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3718      	adds	r7, #24
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b088      	sub	sp, #32
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
 800c740:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	7b9b      	ldrb	r3, [r3, #14]
 800c746:	2b01      	cmp	r3, #1
 800c748:	d006      	beq.n	800c758 <ip4_output_if_src+0x24>
 800c74a:	4b4b      	ldr	r3, [pc, #300]	; (800c878 <ip4_output_if_src+0x144>)
 800c74c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800c750:	494a      	ldr	r1, [pc, #296]	; (800c87c <ip4_output_if_src+0x148>)
 800c752:	484b      	ldr	r0, [pc, #300]	; (800c880 <ip4_output_if_src+0x14c>)
 800c754:	f009 fb5a 	bl	8015e0c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d060      	beq.n	800c820 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c75e:	2314      	movs	r3, #20
 800c760:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c762:	2114      	movs	r1, #20
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f002 fa77 	bl	800ec58 <pbuf_add_header>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d002      	beq.n	800c776 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c770:	f06f 0301 	mvn.w	r3, #1
 800c774:	e07c      	b.n	800c870 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	895b      	ldrh	r3, [r3, #10]
 800c780:	2b13      	cmp	r3, #19
 800c782:	d806      	bhi.n	800c792 <ip4_output_if_src+0x5e>
 800c784:	4b3c      	ldr	r3, [pc, #240]	; (800c878 <ip4_output_if_src+0x144>)
 800c786:	f44f 7262 	mov.w	r2, #904	; 0x388
 800c78a:	493e      	ldr	r1, [pc, #248]	; (800c884 <ip4_output_if_src+0x150>)
 800c78c:	483c      	ldr	r0, [pc, #240]	; (800c880 <ip4_output_if_src+0x14c>)
 800c78e:	f009 fb3d 	bl	8015e0c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c792:	69fb      	ldr	r3, [r7, #28]
 800c794:	78fa      	ldrb	r2, [r7, #3]
 800c796:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800c79e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	69fb      	ldr	r3, [r7, #28]
 800c7a6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c7a8:	8b7b      	ldrh	r3, [r7, #26]
 800c7aa:	089b      	lsrs	r3, r3, #2
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	69fb      	ldr	r3, [r7, #28]
 800c7b8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800c7c0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	891b      	ldrh	r3, [r3, #8]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	f000 fedc 	bl	800d584 <lwip_htons>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	69fb      	ldr	r3, [r7, #28]
 800c7d2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	719a      	strb	r2, [r3, #6]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c7de:	4b2a      	ldr	r3, [pc, #168]	; (800c888 <ip4_output_if_src+0x154>)
 800c7e0:	881b      	ldrh	r3, [r3, #0]
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 fece 	bl	800d584 <lwip_htons>
 800c7e8:	4603      	mov	r3, r0
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c7f0:	4b25      	ldr	r3, [pc, #148]	; (800c888 <ip4_output_if_src+0x154>)
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	4b23      	ldr	r3, [pc, #140]	; (800c888 <ip4_output_if_src+0x154>)
 800c7fa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c7fc:	68bb      	ldr	r3, [r7, #8]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d104      	bne.n	800c80c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c802:	4b22      	ldr	r3, [pc, #136]	; (800c88c <ip4_output_if_src+0x158>)
 800c804:	681a      	ldr	r2, [r3, #0]
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	60da      	str	r2, [r3, #12]
 800c80a:	e003      	b.n	800c814 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	69fb      	ldr	r3, [r7, #28]
 800c812:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c814:	69fb      	ldr	r3, [r7, #28]
 800c816:	2200      	movs	r2, #0
 800c818:	729a      	strb	r2, [r3, #10]
 800c81a:	2200      	movs	r2, #0
 800c81c:	72da      	strb	r2, [r3, #11]
 800c81e:	e00f      	b.n	800c840 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	895b      	ldrh	r3, [r3, #10]
 800c824:	2b13      	cmp	r3, #19
 800c826:	d802      	bhi.n	800c82e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c828:	f06f 0301 	mvn.w	r3, #1
 800c82c:	e020      	b.n	800c870 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	691b      	ldr	r3, [r3, #16]
 800c838:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c83a:	f107 0314 	add.w	r3, r7, #20
 800c83e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c842:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00c      	beq.n	800c862 <ip4_output_if_src+0x12e>
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	891a      	ldrh	r2, [r3, #8]
 800c84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c84e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c850:	429a      	cmp	r2, r3
 800c852:	d906      	bls.n	800c862 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c858:	68f8      	ldr	r0, [r7, #12]
 800c85a:	f000 fd4d 	bl	800d2f8 <ip4_frag>
 800c85e:	4603      	mov	r3, r0
 800c860:	e006      	b.n	800c870 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c864:	695b      	ldr	r3, [r3, #20]
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	68f9      	ldr	r1, [r7, #12]
 800c86a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c86c:	4798      	blx	r3
 800c86e:	4603      	mov	r3, r0
}
 800c870:	4618      	mov	r0, r3
 800c872:	3720      	adds	r7, #32
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	08018c88 	.word	0x08018c88
 800c87c:	08018d00 	.word	0x08018d00
 800c880:	08018d0c 	.word	0x08018d0c
 800c884:	08018d34 	.word	0x08018d34
 800c888:	24006766 	.word	0x24006766
 800c88c:	08018d64 	.word	0x08018d64

0800c890 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c890:	b480      	push	{r7}
 800c892:	b085      	sub	sp, #20
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c8a4:	d002      	beq.n	800c8ac <ip4_addr_isbroadcast_u32+0x1c>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d101      	bne.n	800c8b0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	e02a      	b.n	800c906 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c8b6:	f003 0302 	and.w	r3, r3, #2
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d101      	bne.n	800c8c2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	e021      	b.n	800c906 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	3304      	adds	r3, #4
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d101      	bne.n	800c8d2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	e019      	b.n	800c906 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c8d2:	68fa      	ldr	r2, [r7, #12]
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	3304      	adds	r3, #4
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	405a      	eors	r2, r3
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	3308      	adds	r3, #8
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4013      	ands	r3, r2
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d10d      	bne.n	800c904 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	3308      	adds	r3, #8
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	43da      	mvns	r2, r3
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	3308      	adds	r3, #8
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d101      	bne.n	800c904 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c900:	2301      	movs	r3, #1
 800c902:	e000      	b.n	800c906 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c904:	2300      	movs	r3, #0
  }
}
 800c906:	4618      	mov	r0, r3
 800c908:	3714      	adds	r7, #20
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr
	...

0800c914 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b084      	sub	sp, #16
 800c918:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c91a:	2300      	movs	r3, #0
 800c91c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c91e:	4b12      	ldr	r3, [pc, #72]	; (800c968 <ip_reass_tmr+0x54>)
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c924:	e018      	b.n	800c958 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	7fdb      	ldrb	r3, [r3, #31]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d00b      	beq.n	800c946 <ip_reass_tmr+0x32>
      r->timer--;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	7fdb      	ldrb	r3, [r3, #31]
 800c932:	3b01      	subs	r3, #1
 800c934:	b2da      	uxtb	r2, r3
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	60fb      	str	r3, [r7, #12]
 800c944:	e008      	b.n	800c958 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c950:	68b9      	ldr	r1, [r7, #8]
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 f80a 	bl	800c96c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d1e3      	bne.n	800c926 <ip_reass_tmr+0x12>
    }
  }
}
 800c95e:	bf00      	nop
 800c960:	bf00      	nop
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	24006768 	.word	0x24006768

0800c96c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b088      	sub	sp, #32
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c976:	2300      	movs	r3, #0
 800c978:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c97a:	683a      	ldr	r2, [r7, #0]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	429a      	cmp	r2, r3
 800c980:	d105      	bne.n	800c98e <ip_reass_free_complete_datagram+0x22>
 800c982:	4b45      	ldr	r3, [pc, #276]	; (800ca98 <ip_reass_free_complete_datagram+0x12c>)
 800c984:	22ab      	movs	r2, #171	; 0xab
 800c986:	4945      	ldr	r1, [pc, #276]	; (800ca9c <ip_reass_free_complete_datagram+0x130>)
 800c988:	4845      	ldr	r0, [pc, #276]	; (800caa0 <ip_reass_free_complete_datagram+0x134>)
 800c98a:	f009 fa3f 	bl	8015e0c <iprintf>
  if (prev != NULL) {
 800c98e:	683b      	ldr	r3, [r7, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00a      	beq.n	800c9aa <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	687a      	ldr	r2, [r7, #4]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d005      	beq.n	800c9aa <ip_reass_free_complete_datagram+0x3e>
 800c99e:	4b3e      	ldr	r3, [pc, #248]	; (800ca98 <ip_reass_free_complete_datagram+0x12c>)
 800c9a0:	22ad      	movs	r2, #173	; 0xad
 800c9a2:	4940      	ldr	r1, [pc, #256]	; (800caa4 <ip_reass_free_complete_datagram+0x138>)
 800c9a4:	483e      	ldr	r0, [pc, #248]	; (800caa0 <ip_reass_free_complete_datagram+0x134>)
 800c9a6:	f009 fa31 	bl	8015e0c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	889b      	ldrh	r3, [r3, #4]
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d12a      	bne.n	800ca12 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	681a      	ldr	r2, [r3, #0]
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	6858      	ldr	r0, [r3, #4]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	3308      	adds	r3, #8
 800c9d2:	2214      	movs	r2, #20
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	f009 f9e9 	bl	8015dac <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c9da:	2101      	movs	r1, #1
 800c9dc:	69b8      	ldr	r0, [r7, #24]
 800c9de:	f7ff fc3d 	bl	800c25c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c9e2:	69b8      	ldr	r0, [r7, #24]
 800c9e4:	f002 fa5c 	bl	800eea0 <pbuf_clen>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c9ec:	8bfa      	ldrh	r2, [r7, #30]
 800c9ee:	8a7b      	ldrh	r3, [r7, #18]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9f6:	db05      	blt.n	800ca04 <ip_reass_free_complete_datagram+0x98>
 800c9f8:	4b27      	ldr	r3, [pc, #156]	; (800ca98 <ip_reass_free_complete_datagram+0x12c>)
 800c9fa:	22bc      	movs	r2, #188	; 0xbc
 800c9fc:	492a      	ldr	r1, [pc, #168]	; (800caa8 <ip_reass_free_complete_datagram+0x13c>)
 800c9fe:	4828      	ldr	r0, [pc, #160]	; (800caa0 <ip_reass_free_complete_datagram+0x134>)
 800ca00:	f009 fa04 	bl	8015e0c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ca04:	8bfa      	ldrh	r2, [r7, #30]
 800ca06:	8a7b      	ldrh	r3, [r7, #18]
 800ca08:	4413      	add	r3, r2
 800ca0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800ca0c:	69b8      	ldr	r0, [r7, #24]
 800ca0e:	f002 f9b9 	bl	800ed84 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ca18:	e01f      	b.n	800ca5a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ca1a:	69bb      	ldr	r3, [r7, #24]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ca2a:	68f8      	ldr	r0, [r7, #12]
 800ca2c:	f002 fa38 	bl	800eea0 <pbuf_clen>
 800ca30:	4603      	mov	r3, r0
 800ca32:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ca34:	8bfa      	ldrh	r2, [r7, #30]
 800ca36:	8a7b      	ldrh	r3, [r7, #18]
 800ca38:	4413      	add	r3, r2
 800ca3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca3e:	db05      	blt.n	800ca4c <ip_reass_free_complete_datagram+0xe0>
 800ca40:	4b15      	ldr	r3, [pc, #84]	; (800ca98 <ip_reass_free_complete_datagram+0x12c>)
 800ca42:	22cc      	movs	r2, #204	; 0xcc
 800ca44:	4918      	ldr	r1, [pc, #96]	; (800caa8 <ip_reass_free_complete_datagram+0x13c>)
 800ca46:	4816      	ldr	r0, [pc, #88]	; (800caa0 <ip_reass_free_complete_datagram+0x134>)
 800ca48:	f009 f9e0 	bl	8015e0c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ca4c:	8bfa      	ldrh	r2, [r7, #30]
 800ca4e:	8a7b      	ldrh	r3, [r7, #18]
 800ca50:	4413      	add	r3, r2
 800ca52:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ca54:	68f8      	ldr	r0, [r7, #12]
 800ca56:	f002 f995 	bl	800ed84 <pbuf_free>
  while (p != NULL) {
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d1dc      	bne.n	800ca1a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ca60:	6839      	ldr	r1, [r7, #0]
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 f8c2 	bl	800cbec <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ca68:	4b10      	ldr	r3, [pc, #64]	; (800caac <ip_reass_free_complete_datagram+0x140>)
 800ca6a:	881b      	ldrh	r3, [r3, #0]
 800ca6c:	8bfa      	ldrh	r2, [r7, #30]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d905      	bls.n	800ca7e <ip_reass_free_complete_datagram+0x112>
 800ca72:	4b09      	ldr	r3, [pc, #36]	; (800ca98 <ip_reass_free_complete_datagram+0x12c>)
 800ca74:	22d2      	movs	r2, #210	; 0xd2
 800ca76:	490e      	ldr	r1, [pc, #56]	; (800cab0 <ip_reass_free_complete_datagram+0x144>)
 800ca78:	4809      	ldr	r0, [pc, #36]	; (800caa0 <ip_reass_free_complete_datagram+0x134>)
 800ca7a:	f009 f9c7 	bl	8015e0c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ca7e:	4b0b      	ldr	r3, [pc, #44]	; (800caac <ip_reass_free_complete_datagram+0x140>)
 800ca80:	881a      	ldrh	r2, [r3, #0]
 800ca82:	8bfb      	ldrh	r3, [r7, #30]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	b29a      	uxth	r2, r3
 800ca88:	4b08      	ldr	r3, [pc, #32]	; (800caac <ip_reass_free_complete_datagram+0x140>)
 800ca8a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ca8c:	8bfb      	ldrh	r3, [r7, #30]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3720      	adds	r7, #32
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	08018e1c 	.word	0x08018e1c
 800ca9c:	08018e98 	.word	0x08018e98
 800caa0:	08018ea4 	.word	0x08018ea4
 800caa4:	08018ecc 	.word	0x08018ecc
 800caa8:	08018ee0 	.word	0x08018ee0
 800caac:	2400676c 	.word	0x2400676c
 800cab0:	08018f00 	.word	0x08018f00

0800cab4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b08a      	sub	sp, #40	; 0x28
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800cabe:	2300      	movs	r3, #0
 800cac0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800cac2:	2300      	movs	r3, #0
 800cac4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800cac6:	2300      	movs	r3, #0
 800cac8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800caca:	2300      	movs	r3, #0
 800cacc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800cad2:	4b28      	ldr	r3, [pc, #160]	; (800cb74 <ip_reass_remove_oldest_datagram+0xc0>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800cad8:	e030      	b.n	800cb3c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800cada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cadc:	695a      	ldr	r2, [r3, #20]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d10c      	bne.n	800cb00 <ip_reass_remove_oldest_datagram+0x4c>
 800cae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae8:	699a      	ldr	r2, [r3, #24]
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	691b      	ldr	r3, [r3, #16]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d106      	bne.n	800cb00 <ip_reass_remove_oldest_datagram+0x4c>
 800caf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caf4:	899a      	ldrh	r2, [r3, #12]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	889b      	ldrh	r3, [r3, #4]
 800cafa:	b29b      	uxth	r3, r3
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d014      	beq.n	800cb2a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	3301      	adds	r3, #1
 800cb04:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800cb06:	6a3b      	ldr	r3, [r7, #32]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d104      	bne.n	800cb16 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800cb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb0e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cb10:	69fb      	ldr	r3, [r7, #28]
 800cb12:	61bb      	str	r3, [r7, #24]
 800cb14:	e009      	b.n	800cb2a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800cb16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb18:	7fda      	ldrb	r2, [r3, #31]
 800cb1a:	6a3b      	ldr	r3, [r7, #32]
 800cb1c:	7fdb      	ldrb	r3, [r3, #31]
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d803      	bhi.n	800cb2a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800cb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb24:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cb26:	69fb      	ldr	r3, [r7, #28]
 800cb28:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800cb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d001      	beq.n	800cb36 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800cb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb34:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800cb36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800cb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1cb      	bne.n	800cada <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800cb42:	6a3b      	ldr	r3, [r7, #32]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d008      	beq.n	800cb5a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800cb48:	69b9      	ldr	r1, [r7, #24]
 800cb4a:	6a38      	ldr	r0, [r7, #32]
 800cb4c:	f7ff ff0e 	bl	800c96c <ip_reass_free_complete_datagram>
 800cb50:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800cb52:	697a      	ldr	r2, [r7, #20]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4413      	add	r3, r2
 800cb58:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	429a      	cmp	r2, r3
 800cb60:	da02      	bge.n	800cb68 <ip_reass_remove_oldest_datagram+0xb4>
 800cb62:	693b      	ldr	r3, [r7, #16]
 800cb64:	2b01      	cmp	r3, #1
 800cb66:	dcac      	bgt.n	800cac2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800cb68:	697b      	ldr	r3, [r7, #20]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3728      	adds	r7, #40	; 0x28
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	24006768 	.word	0x24006768

0800cb78 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cb82:	2004      	movs	r0, #4
 800cb84:	f001 fa40 	bl	800e008 <memp_malloc>
 800cb88:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d110      	bne.n	800cbb2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cb90:	6839      	ldr	r1, [r7, #0]
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f7ff ff8e 	bl	800cab4 <ip_reass_remove_oldest_datagram>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	dc03      	bgt.n	800cba8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cba0:	2004      	movs	r0, #4
 800cba2:	f001 fa31 	bl	800e008 <memp_malloc>
 800cba6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d101      	bne.n	800cbb2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	e016      	b.n	800cbe0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800cbb2:	2220      	movs	r2, #32
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	68f8      	ldr	r0, [r7, #12]
 800cbb8:	f009 f920 	bl	8015dfc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	220f      	movs	r2, #15
 800cbc0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800cbc2:	4b09      	ldr	r3, [pc, #36]	; (800cbe8 <ip_reass_enqueue_new_datagram+0x70>)
 800cbc4:	681a      	ldr	r2, [r3, #0]
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800cbca:	4a07      	ldr	r2, [pc, #28]	; (800cbe8 <ip_reass_enqueue_new_datagram+0x70>)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	3308      	adds	r3, #8
 800cbd4:	2214      	movs	r2, #20
 800cbd6:	6879      	ldr	r1, [r7, #4]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f009 f8e7 	bl	8015dac <memcpy>
  return ipr;
 800cbde:	68fb      	ldr	r3, [r7, #12]
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}
 800cbe8:	24006768 	.word	0x24006768

0800cbec <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
 800cbf4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cbf6:	4b10      	ldr	r3, [pc, #64]	; (800cc38 <ip_reass_dequeue_datagram+0x4c>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	687a      	ldr	r2, [r7, #4]
 800cbfc:	429a      	cmp	r2, r3
 800cbfe:	d104      	bne.n	800cc0a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	4a0c      	ldr	r2, [pc, #48]	; (800cc38 <ip_reass_dequeue_datagram+0x4c>)
 800cc06:	6013      	str	r3, [r2, #0]
 800cc08:	e00d      	b.n	800cc26 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d106      	bne.n	800cc1e <ip_reass_dequeue_datagram+0x32>
 800cc10:	4b0a      	ldr	r3, [pc, #40]	; (800cc3c <ip_reass_dequeue_datagram+0x50>)
 800cc12:	f240 1245 	movw	r2, #325	; 0x145
 800cc16:	490a      	ldr	r1, [pc, #40]	; (800cc40 <ip_reass_dequeue_datagram+0x54>)
 800cc18:	480a      	ldr	r0, [pc, #40]	; (800cc44 <ip_reass_dequeue_datagram+0x58>)
 800cc1a:	f009 f8f7 	bl	8015e0c <iprintf>
    prev->next = ipr->next;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800cc26:	6879      	ldr	r1, [r7, #4]
 800cc28:	2004      	movs	r0, #4
 800cc2a:	f001 fa63 	bl	800e0f4 <memp_free>
}
 800cc2e:	bf00      	nop
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}
 800cc36:	bf00      	nop
 800cc38:	24006768 	.word	0x24006768
 800cc3c:	08018e1c 	.word	0x08018e1c
 800cc40:	08018f24 	.word	0x08018f24
 800cc44:	08018ea4 	.word	0x08018ea4

0800cc48 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b08c      	sub	sp, #48	; 0x30
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800cc54:	2300      	movs	r3, #0
 800cc56:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800cc62:	69fb      	ldr	r3, [r7, #28]
 800cc64:	885b      	ldrh	r3, [r3, #2]
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	4618      	mov	r0, r3
 800cc6a:	f000 fc8b 	bl	800d584 <lwip_htons>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800cc72:	69fb      	ldr	r3, [r7, #28]
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	f003 030f 	and.w	r3, r3, #15
 800cc7a:	b2db      	uxtb	r3, r3
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800cc80:	7e7b      	ldrb	r3, [r7, #25]
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	8b7a      	ldrh	r2, [r7, #26]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d202      	bcs.n	800cc90 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cc8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc8e:	e135      	b.n	800cefc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800cc90:	7e7b      	ldrb	r3, [r7, #25]
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	8b7a      	ldrh	r2, [r7, #26]
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800cc9a:	69fb      	ldr	r3, [r7, #28]
 800cc9c:	88db      	ldrh	r3, [r3, #6]
 800cc9e:	b29b      	uxth	r3, r3
 800cca0:	4618      	mov	r0, r3
 800cca2:	f000 fc6f 	bl	800d584 <lwip_htons>
 800cca6:	4603      	mov	r3, r0
 800cca8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	00db      	lsls	r3, r3, #3
 800ccb0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800ccb2:	68bb      	ldr	r3, [r7, #8]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800ccb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccba:	2200      	movs	r2, #0
 800ccbc:	701a      	strb	r2, [r3, #0]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	705a      	strb	r2, [r3, #1]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	709a      	strb	r2, [r3, #2]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ccca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cccc:	8afa      	ldrh	r2, [r7, #22]
 800ccce:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ccd0:	8afa      	ldrh	r2, [r7, #22]
 800ccd2:	8b7b      	ldrh	r3, [r7, #26]
 800ccd4:	4413      	add	r3, r2
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccda:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ccdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccde:	88db      	ldrh	r3, [r3, #6]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	8afa      	ldrh	r2, [r7, #22]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d902      	bls.n	800ccee <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ccec:	e106      	b.n	800cefc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	685b      	ldr	r3, [r3, #4]
 800ccf2:	627b      	str	r3, [r7, #36]	; 0x24
 800ccf4:	e068      	b.n	800cdc8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800ccf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800ccfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfe:	889b      	ldrh	r3, [r3, #4]
 800cd00:	b29a      	uxth	r2, r3
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	889b      	ldrh	r3, [r3, #4]
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	429a      	cmp	r2, r3
 800cd0a:	d235      	bcs.n	800cd78 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd10:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800cd12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d020      	beq.n	800cd5a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	889b      	ldrh	r3, [r3, #4]
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd20:	88db      	ldrh	r3, [r3, #6]
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d307      	bcc.n	800cd38 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800cd28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd2a:	88db      	ldrh	r3, [r3, #6]
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	693b      	ldr	r3, [r7, #16]
 800cd30:	889b      	ldrh	r3, [r3, #4]
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	429a      	cmp	r2, r3
 800cd36:	d902      	bls.n	800cd3e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cd38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd3c:	e0de      	b.n	800cefc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800cd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd40:	68ba      	ldr	r2, [r7, #8]
 800cd42:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800cd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd46:	88db      	ldrh	r3, [r3, #6]
 800cd48:	b29a      	uxth	r2, r3
 800cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4c:	889b      	ldrh	r3, [r3, #4]
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	429a      	cmp	r2, r3
 800cd52:	d03d      	beq.n	800cdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cd54:	2300      	movs	r3, #0
 800cd56:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800cd58:	e03a      	b.n	800cdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800cd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5c:	88db      	ldrh	r3, [r3, #6]
 800cd5e:	b29a      	uxth	r2, r3
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	889b      	ldrh	r3, [r3, #4]
 800cd64:	b29b      	uxth	r3, r3
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d902      	bls.n	800cd70 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cd6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd6e:	e0c5      	b.n	800cefc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	605a      	str	r2, [r3, #4]
      break;
 800cd76:	e02b      	b.n	800cdd0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800cd78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd7a:	889b      	ldrh	r3, [r3, #4]
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	693b      	ldr	r3, [r7, #16]
 800cd80:	889b      	ldrh	r3, [r3, #4]
 800cd82:	b29b      	uxth	r3, r3
 800cd84:	429a      	cmp	r2, r3
 800cd86:	d102      	bne.n	800cd8e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cd88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cd8c:	e0b6      	b.n	800cefc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800cd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd90:	889b      	ldrh	r3, [r3, #4]
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	88db      	ldrh	r3, [r3, #6]
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	429a      	cmp	r2, r3
 800cd9c:	d202      	bcs.n	800cda4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cd9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cda2:	e0ab      	b.n	800cefc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800cda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d009      	beq.n	800cdbe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800cdaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdac:	88db      	ldrh	r3, [r3, #6]
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	889b      	ldrh	r3, [r3, #4]
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d001      	beq.n	800cdbe <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d193      	bne.n	800ccf6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800cdce:	e000      	b.n	800cdd2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800cdd0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d12d      	bne.n	800ce34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800cdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d01c      	beq.n	800ce18 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800cdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde0:	88db      	ldrh	r3, [r3, #6]
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde6:	889b      	ldrh	r3, [r3, #4]
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d906      	bls.n	800cdfc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800cdee:	4b45      	ldr	r3, [pc, #276]	; (800cf04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cdf0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800cdf4:	4944      	ldr	r1, [pc, #272]	; (800cf08 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cdf6:	4845      	ldr	r0, [pc, #276]	; (800cf0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cdf8:	f009 f808 	bl	8015e0c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800cdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800ce02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce04:	88db      	ldrh	r3, [r3, #6]
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce0a:	889b      	ldrh	r3, [r3, #4]
 800ce0c:	b29b      	uxth	r3, r3
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d010      	beq.n	800ce34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	623b      	str	r3, [r7, #32]
 800ce16:	e00d      	b.n	800ce34 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d006      	beq.n	800ce2e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ce20:	4b38      	ldr	r3, [pc, #224]	; (800cf04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ce22:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800ce26:	493a      	ldr	r1, [pc, #232]	; (800cf10 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ce28:	4838      	ldr	r0, [pc, #224]	; (800cf0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ce2a:	f008 ffef 	bl	8015e0c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d105      	bne.n	800ce46 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	7f9b      	ldrb	r3, [r3, #30]
 800ce3e:	f003 0301 	and.w	r3, r3, #1
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d059      	beq.n	800cefa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ce46:	6a3b      	ldr	r3, [r7, #32]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d04f      	beq.n	800ceec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d006      	beq.n	800ce62 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	685b      	ldr	r3, [r3, #4]
 800ce5a:	889b      	ldrh	r3, [r3, #4]
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d002      	beq.n	800ce68 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	623b      	str	r3, [r7, #32]
 800ce66:	e041      	b.n	800ceec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ce72:	e012      	b.n	800ce9a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ce74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce76:	685b      	ldr	r3, [r3, #4]
 800ce78:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ce7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce7c:	88db      	ldrh	r3, [r3, #6]
 800ce7e:	b29a      	uxth	r2, r3
 800ce80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce82:	889b      	ldrh	r3, [r3, #4]
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d002      	beq.n	800ce90 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	623b      	str	r3, [r7, #32]
            break;
 800ce8e:	e007      	b.n	800cea0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ce90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce92:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ce94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1e9      	bne.n	800ce74 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800cea0:	6a3b      	ldr	r3, [r7, #32]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d022      	beq.n	800ceec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d106      	bne.n	800cebc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ceae:	4b15      	ldr	r3, [pc, #84]	; (800cf04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ceb0:	f240 12df 	movw	r2, #479	; 0x1df
 800ceb4:	4917      	ldr	r1, [pc, #92]	; (800cf14 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ceb6:	4815      	ldr	r0, [pc, #84]	; (800cf0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ceb8:	f008 ffa8 	bl	8015e0c <iprintf>
          LWIP_ASSERT("sanity check",
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	685b      	ldr	r3, [r3, #4]
 800cec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cec4:	429a      	cmp	r2, r3
 800cec6:	d106      	bne.n	800ced6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800cec8:	4b0e      	ldr	r3, [pc, #56]	; (800cf04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ceca:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800cece:	4911      	ldr	r1, [pc, #68]	; (800cf14 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ced0:	480e      	ldr	r0, [pc, #56]	; (800cf0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ced2:	f008 ff9b 	bl	8015e0c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800ced6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d006      	beq.n	800ceec <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800cede:	4b09      	ldr	r3, [pc, #36]	; (800cf04 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cee0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800cee4:	490c      	ldr	r1, [pc, #48]	; (800cf18 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800cee6:	4809      	ldr	r0, [pc, #36]	; (800cf0c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cee8:	f008 ff90 	bl	8015e0c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ceec:	6a3b      	ldr	r3, [r7, #32]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	bf14      	ite	ne
 800cef2:	2301      	movne	r3, #1
 800cef4:	2300      	moveq	r3, #0
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	e000      	b.n	800cefc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800cefa:	2300      	movs	r3, #0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3730      	adds	r7, #48	; 0x30
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	08018e1c 	.word	0x08018e1c
 800cf08:	08018f40 	.word	0x08018f40
 800cf0c:	08018ea4 	.word	0x08018ea4
 800cf10:	08018f60 	.word	0x08018f60
 800cf14:	08018f98 	.word	0x08018f98
 800cf18:	08018fa8 	.word	0x08018fa8

0800cf1c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b08e      	sub	sp, #56	; 0x38
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800cf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	f003 030f 	and.w	r3, r3, #15
 800cf32:	b2db      	uxtb	r3, r3
 800cf34:	009b      	lsls	r3, r3, #2
 800cf36:	b2db      	uxtb	r3, r3
 800cf38:	2b14      	cmp	r3, #20
 800cf3a:	f040 8167 	bne.w	800d20c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800cf3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf40:	88db      	ldrh	r3, [r3, #6]
 800cf42:	b29b      	uxth	r3, r3
 800cf44:	4618      	mov	r0, r3
 800cf46:	f000 fb1d 	bl	800d584 <lwip_htons>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	00db      	lsls	r3, r3, #3
 800cf54:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800cf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf58:	885b      	ldrh	r3, [r3, #2]
 800cf5a:	b29b      	uxth	r3, r3
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f000 fb11 	bl	800d584 <lwip_htons>
 800cf62:	4603      	mov	r3, r0
 800cf64:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800cf66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf68:	781b      	ldrb	r3, [r3, #0]
 800cf6a:	f003 030f 	and.w	r3, r3, #15
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800cf76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf7a:	b29b      	uxth	r3, r3
 800cf7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf7e:	429a      	cmp	r2, r3
 800cf80:	f0c0 8146 	bcc.w	800d210 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800cf84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800cf88:	b29b      	uxth	r3, r3
 800cf8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cf8c:	1ad3      	subs	r3, r2, r3
 800cf8e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f001 ff85 	bl	800eea0 <pbuf_clen>
 800cf96:	4603      	mov	r3, r0
 800cf98:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800cf9a:	4b9f      	ldr	r3, [pc, #636]	; (800d218 <ip4_reass+0x2fc>)
 800cf9c:	881b      	ldrh	r3, [r3, #0]
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	8c3b      	ldrh	r3, [r7, #32]
 800cfa2:	4413      	add	r3, r2
 800cfa4:	2b0a      	cmp	r3, #10
 800cfa6:	dd10      	ble.n	800cfca <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cfa8:	8c3b      	ldrh	r3, [r7, #32]
 800cfaa:	4619      	mov	r1, r3
 800cfac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfae:	f7ff fd81 	bl	800cab4 <ip_reass_remove_oldest_datagram>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f000 812d 	beq.w	800d214 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800cfba:	4b97      	ldr	r3, [pc, #604]	; (800d218 <ip4_reass+0x2fc>)
 800cfbc:	881b      	ldrh	r3, [r3, #0]
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	8c3b      	ldrh	r3, [r7, #32]
 800cfc2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cfc4:	2b0a      	cmp	r3, #10
 800cfc6:	f300 8125 	bgt.w	800d214 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cfca:	4b94      	ldr	r3, [pc, #592]	; (800d21c <ip4_reass+0x300>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	633b      	str	r3, [r7, #48]	; 0x30
 800cfd0:	e015      	b.n	800cffe <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800cfd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd4:	695a      	ldr	r2, [r3, #20]
 800cfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d10c      	bne.n	800cff8 <ip4_reass+0xdc>
 800cfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe0:	699a      	ldr	r2, [r3, #24]
 800cfe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d106      	bne.n	800cff8 <ip4_reass+0xdc>
 800cfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfec:	899a      	ldrh	r2, [r3, #12]
 800cfee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cff0:	889b      	ldrh	r3, [r3, #4]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d006      	beq.n	800d006 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	633b      	str	r3, [r7, #48]	; 0x30
 800cffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1e6      	bne.n	800cfd2 <ip4_reass+0xb6>
 800d004:	e000      	b.n	800d008 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d006:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d109      	bne.n	800d022 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d00e:	8c3b      	ldrh	r3, [r7, #32]
 800d010:	4619      	mov	r1, r3
 800d012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d014:	f7ff fdb0 	bl	800cb78 <ip_reass_enqueue_new_datagram>
 800d018:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d11c      	bne.n	800d05a <ip4_reass+0x13e>
      goto nullreturn;
 800d020:	e109      	b.n	800d236 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d024:	88db      	ldrh	r3, [r3, #6]
 800d026:	b29b      	uxth	r3, r3
 800d028:	4618      	mov	r0, r3
 800d02a:	f000 faab 	bl	800d584 <lwip_htons>
 800d02e:	4603      	mov	r3, r0
 800d030:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d034:	2b00      	cmp	r3, #0
 800d036:	d110      	bne.n	800d05a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d03a:	89db      	ldrh	r3, [r3, #14]
 800d03c:	4618      	mov	r0, r3
 800d03e:	f000 faa1 	bl	800d584 <lwip_htons>
 800d042:	4603      	mov	r3, r0
 800d044:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d006      	beq.n	800d05a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d04e:	3308      	adds	r3, #8
 800d050:	2214      	movs	r2, #20
 800d052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d054:	4618      	mov	r0, r3
 800d056:	f008 fea9 	bl	8015dac <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d05c:	88db      	ldrh	r3, [r3, #6]
 800d05e:	b29b      	uxth	r3, r3
 800d060:	f003 0320 	and.w	r3, r3, #32
 800d064:	2b00      	cmp	r3, #0
 800d066:	bf0c      	ite	eq
 800d068:	2301      	moveq	r3, #1
 800d06a:	2300      	movne	r3, #0
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d070:	69fb      	ldr	r3, [r7, #28]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00e      	beq.n	800d094 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d076:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d078:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d07a:	4413      	add	r3, r2
 800d07c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d07e:	8b7a      	ldrh	r2, [r7, #26]
 800d080:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d082:	429a      	cmp	r2, r3
 800d084:	f0c0 80a0 	bcc.w	800d1c8 <ip4_reass+0x2ac>
 800d088:	8b7b      	ldrh	r3, [r7, #26]
 800d08a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d08e:	4293      	cmp	r3, r2
 800d090:	f200 809a 	bhi.w	800d1c8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d094:	69fa      	ldr	r2, [r7, #28]
 800d096:	6879      	ldr	r1, [r7, #4]
 800d098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d09a:	f7ff fdd5 	bl	800cc48 <ip_reass_chain_frag_into_datagram_and_validate>
 800d09e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d0a0:	697b      	ldr	r3, [r7, #20]
 800d0a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d0a6:	f000 8091 	beq.w	800d1cc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d0aa:	4b5b      	ldr	r3, [pc, #364]	; (800d218 <ip4_reass+0x2fc>)
 800d0ac:	881a      	ldrh	r2, [r3, #0]
 800d0ae:	8c3b      	ldrh	r3, [r7, #32]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	4b58      	ldr	r3, [pc, #352]	; (800d218 <ip4_reass+0x2fc>)
 800d0b6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d0b8:	69fb      	ldr	r3, [r7, #28]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d00d      	beq.n	800d0da <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d0be:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d0c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0c2:	4413      	add	r3, r2
 800d0c4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c8:	8a7a      	ldrh	r2, [r7, #18]
 800d0ca:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ce:	7f9b      	ldrb	r3, [r3, #30]
 800d0d0:	f043 0301 	orr.w	r3, r3, #1
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d171      	bne.n	800d1c4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e2:	8b9b      	ldrh	r3, [r3, #28]
 800d0e4:	3314      	adds	r3, #20
 800d0e6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ea:	685b      	ldr	r3, [r3, #4]
 800d0ec:	685b      	ldr	r3, [r3, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f4:	685b      	ldr	r3, [r3, #4]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fc:	3308      	adds	r3, #8
 800d0fe:	2214      	movs	r2, #20
 800d100:	4619      	mov	r1, r3
 800d102:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d104:	f008 fe52 	bl	8015dac <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d108:	8a3b      	ldrh	r3, [r7, #16]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 fa3a 	bl	800d584 <lwip_htons>
 800d110:	4603      	mov	r3, r0
 800d112:	461a      	mov	r2, r3
 800d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d116:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11a:	2200      	movs	r2, #0
 800d11c:	719a      	strb	r2, [r3, #6]
 800d11e:	2200      	movs	r2, #0
 800d120:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	2200      	movs	r2, #0
 800d126:	729a      	strb	r2, [r3, #10]
 800d128:	2200      	movs	r2, #0
 800d12a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d132:	e00d      	b.n	800d150 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d13a:	2114      	movs	r1, #20
 800d13c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d13e:	f001 fd9b 	bl	800ec78 <pbuf_remove_header>
      pbuf_cat(p, r);
 800d142:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f001 feeb 	bl	800ef20 <pbuf_cat>
      r = iprh->next_pbuf;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d152:	2b00      	cmp	r3, #0
 800d154:	d1ee      	bne.n	800d134 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d156:	4b31      	ldr	r3, [pc, #196]	; (800d21c <ip4_reass+0x300>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d15c:	429a      	cmp	r2, r3
 800d15e:	d102      	bne.n	800d166 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d160:	2300      	movs	r3, #0
 800d162:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d164:	e010      	b.n	800d188 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d166:	4b2d      	ldr	r3, [pc, #180]	; (800d21c <ip4_reass+0x300>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d16c:	e007      	b.n	800d17e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d174:	429a      	cmp	r2, r3
 800d176:	d006      	beq.n	800d186 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d180:	2b00      	cmp	r3, #0
 800d182:	d1f4      	bne.n	800d16e <ip4_reass+0x252>
 800d184:	e000      	b.n	800d188 <ip4_reass+0x26c>
          break;
 800d186:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d18a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d18c:	f7ff fd2e 	bl	800cbec <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f001 fe85 	bl	800eea0 <pbuf_clen>
 800d196:	4603      	mov	r3, r0
 800d198:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d19a:	4b1f      	ldr	r3, [pc, #124]	; (800d218 <ip4_reass+0x2fc>)
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	8c3a      	ldrh	r2, [r7, #32]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d906      	bls.n	800d1b2 <ip4_reass+0x296>
 800d1a4:	4b1e      	ldr	r3, [pc, #120]	; (800d220 <ip4_reass+0x304>)
 800d1a6:	f240 229b 	movw	r2, #667	; 0x29b
 800d1aa:	491e      	ldr	r1, [pc, #120]	; (800d224 <ip4_reass+0x308>)
 800d1ac:	481e      	ldr	r0, [pc, #120]	; (800d228 <ip4_reass+0x30c>)
 800d1ae:	f008 fe2d 	bl	8015e0c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d1b2:	4b19      	ldr	r3, [pc, #100]	; (800d218 <ip4_reass+0x2fc>)
 800d1b4:	881a      	ldrh	r2, [r3, #0]
 800d1b6:	8c3b      	ldrh	r3, [r7, #32]
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	4b16      	ldr	r3, [pc, #88]	; (800d218 <ip4_reass+0x2fc>)
 800d1be:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	e03c      	b.n	800d23e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	e03a      	b.n	800d23e <ip4_reass+0x322>
      goto nullreturn_ipr;
 800d1c8:	bf00      	nop
 800d1ca:	e000      	b.n	800d1ce <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800d1cc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d106      	bne.n	800d1e2 <ip4_reass+0x2c6>
 800d1d4:	4b12      	ldr	r3, [pc, #72]	; (800d220 <ip4_reass+0x304>)
 800d1d6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800d1da:	4914      	ldr	r1, [pc, #80]	; (800d22c <ip4_reass+0x310>)
 800d1dc:	4812      	ldr	r0, [pc, #72]	; (800d228 <ip4_reass+0x30c>)
 800d1de:	f008 fe15 	bl	8015e0c <iprintf>
  if (ipr->p == NULL) {
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d124      	bne.n	800d234 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d1ea:	4b0c      	ldr	r3, [pc, #48]	; (800d21c <ip4_reass+0x300>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d006      	beq.n	800d202 <ip4_reass+0x2e6>
 800d1f4:	4b0a      	ldr	r3, [pc, #40]	; (800d220 <ip4_reass+0x304>)
 800d1f6:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d1fa:	490d      	ldr	r1, [pc, #52]	; (800d230 <ip4_reass+0x314>)
 800d1fc:	480a      	ldr	r0, [pc, #40]	; (800d228 <ip4_reass+0x30c>)
 800d1fe:	f008 fe05 	bl	8015e0c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d202:	2100      	movs	r1, #0
 800d204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d206:	f7ff fcf1 	bl	800cbec <ip_reass_dequeue_datagram>
 800d20a:	e014      	b.n	800d236 <ip4_reass+0x31a>
    goto nullreturn;
 800d20c:	bf00      	nop
 800d20e:	e012      	b.n	800d236 <ip4_reass+0x31a>
    goto nullreturn;
 800d210:	bf00      	nop
 800d212:	e010      	b.n	800d236 <ip4_reass+0x31a>
      goto nullreturn;
 800d214:	bf00      	nop
 800d216:	e00e      	b.n	800d236 <ip4_reass+0x31a>
 800d218:	2400676c 	.word	0x2400676c
 800d21c:	24006768 	.word	0x24006768
 800d220:	08018e1c 	.word	0x08018e1c
 800d224:	08018fcc 	.word	0x08018fcc
 800d228:	08018ea4 	.word	0x08018ea4
 800d22c:	08018fe8 	.word	0x08018fe8
 800d230:	08018ff4 	.word	0x08018ff4
  }

nullreturn:
 800d234:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f001 fda4 	bl	800ed84 <pbuf_free>
  return NULL;
 800d23c:	2300      	movs	r3, #0
}
 800d23e:	4618      	mov	r0, r3
 800d240:	3738      	adds	r7, #56	; 0x38
 800d242:	46bd      	mov	sp, r7
 800d244:	bd80      	pop	{r7, pc}
 800d246:	bf00      	nop

0800d248 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d24c:	2005      	movs	r0, #5
 800d24e:	f000 fedb 	bl	800e008 <memp_malloc>
 800d252:	4603      	mov	r3, r0
}
 800d254:	4618      	mov	r0, r3
 800d256:	bd80      	pop	{r7, pc}

0800d258 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d106      	bne.n	800d274 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d266:	4b07      	ldr	r3, [pc, #28]	; (800d284 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d268:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800d26c:	4906      	ldr	r1, [pc, #24]	; (800d288 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d26e:	4807      	ldr	r0, [pc, #28]	; (800d28c <ip_frag_free_pbuf_custom_ref+0x34>)
 800d270:	f008 fdcc 	bl	8015e0c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d274:	6879      	ldr	r1, [r7, #4]
 800d276:	2005      	movs	r0, #5
 800d278:	f000 ff3c 	bl	800e0f4 <memp_free>
}
 800d27c:	bf00      	nop
 800d27e:	3708      	adds	r7, #8
 800d280:	46bd      	mov	sp, r7
 800d282:	bd80      	pop	{r7, pc}
 800d284:	08018e1c 	.word	0x08018e1c
 800d288:	08019014 	.word	0x08019014
 800d28c:	08018ea4 	.word	0x08018ea4

0800d290 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d106      	bne.n	800d2b0 <ipfrag_free_pbuf_custom+0x20>
 800d2a2:	4b11      	ldr	r3, [pc, #68]	; (800d2e8 <ipfrag_free_pbuf_custom+0x58>)
 800d2a4:	f240 22ce 	movw	r2, #718	; 0x2ce
 800d2a8:	4910      	ldr	r1, [pc, #64]	; (800d2ec <ipfrag_free_pbuf_custom+0x5c>)
 800d2aa:	4811      	ldr	r0, [pc, #68]	; (800d2f0 <ipfrag_free_pbuf_custom+0x60>)
 800d2ac:	f008 fdae 	bl	8015e0c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800d2b0:	68fa      	ldr	r2, [r7, #12]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	429a      	cmp	r2, r3
 800d2b6:	d006      	beq.n	800d2c6 <ipfrag_free_pbuf_custom+0x36>
 800d2b8:	4b0b      	ldr	r3, [pc, #44]	; (800d2e8 <ipfrag_free_pbuf_custom+0x58>)
 800d2ba:	f240 22cf 	movw	r2, #719	; 0x2cf
 800d2be:	490d      	ldr	r1, [pc, #52]	; (800d2f4 <ipfrag_free_pbuf_custom+0x64>)
 800d2c0:	480b      	ldr	r0, [pc, #44]	; (800d2f0 <ipfrag_free_pbuf_custom+0x60>)
 800d2c2:	f008 fda3 	bl	8015e0c <iprintf>
  if (pcr->original != NULL) {
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	695b      	ldr	r3, [r3, #20]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d004      	beq.n	800d2d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f001 fd56 	bl	800ed84 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d2d8:	68f8      	ldr	r0, [r7, #12]
 800d2da:	f7ff ffbd 	bl	800d258 <ip_frag_free_pbuf_custom_ref>
}
 800d2de:	bf00      	nop
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	08018e1c 	.word	0x08018e1c
 800d2ec:	08019020 	.word	0x08019020
 800d2f0:	08018ea4 	.word	0x08018ea4
 800d2f4:	0801902c 	.word	0x0801902c

0800d2f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b094      	sub	sp, #80	; 0x50
 800d2fc:	af02      	add	r7, sp, #8
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d304:	2300      	movs	r3, #0
 800d306:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d30e:	3b14      	subs	r3, #20
 800d310:	2b00      	cmp	r3, #0
 800d312:	da00      	bge.n	800d316 <ip4_frag+0x1e>
 800d314:	3307      	adds	r3, #7
 800d316:	10db      	asrs	r3, r3, #3
 800d318:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d31a:	2314      	movs	r3, #20
 800d31c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	685b      	ldr	r3, [r3, #4]
 800d322:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800d324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d326:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	f003 030f 	and.w	r3, r3, #15
 800d330:	b2db      	uxtb	r3, r3
 800d332:	009b      	lsls	r3, r3, #2
 800d334:	b2db      	uxtb	r3, r3
 800d336:	2b14      	cmp	r3, #20
 800d338:	d002      	beq.n	800d340 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800d33a:	f06f 0305 	mvn.w	r3, #5
 800d33e:	e110      	b.n	800d562 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	895b      	ldrh	r3, [r3, #10]
 800d344:	2b13      	cmp	r3, #19
 800d346:	d809      	bhi.n	800d35c <ip4_frag+0x64>
 800d348:	4b88      	ldr	r3, [pc, #544]	; (800d56c <ip4_frag+0x274>)
 800d34a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800d34e:	4988      	ldr	r1, [pc, #544]	; (800d570 <ip4_frag+0x278>)
 800d350:	4888      	ldr	r0, [pc, #544]	; (800d574 <ip4_frag+0x27c>)
 800d352:	f008 fd5b 	bl	8015e0c <iprintf>
 800d356:	f06f 0305 	mvn.w	r3, #5
 800d35a:	e102      	b.n	800d562 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d35c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35e:	88db      	ldrh	r3, [r3, #6]
 800d360:	b29b      	uxth	r3, r3
 800d362:	4618      	mov	r0, r3
 800d364:	f000 f90e 	bl	800d584 <lwip_htons>
 800d368:	4603      	mov	r3, r0
 800d36a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800d36c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d36e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d372:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800d376:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d37c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	891b      	ldrh	r3, [r3, #8]
 800d382:	3b14      	subs	r3, #20
 800d384:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800d388:	e0e1      	b.n	800d54e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d38a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d38c:	00db      	lsls	r3, r3, #3
 800d38e:	b29b      	uxth	r3, r3
 800d390:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d394:	4293      	cmp	r3, r2
 800d396:	bf28      	it	cs
 800d398:	4613      	movcs	r3, r2
 800d39a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d39c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d3a0:	2114      	movs	r1, #20
 800d3a2:	200e      	movs	r0, #14
 800d3a4:	f001 fa0c 	bl	800e7c0 <pbuf_alloc>
 800d3a8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 80d5 	beq.w	800d55c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b4:	895b      	ldrh	r3, [r3, #10]
 800d3b6:	2b13      	cmp	r3, #19
 800d3b8:	d806      	bhi.n	800d3c8 <ip4_frag+0xd0>
 800d3ba:	4b6c      	ldr	r3, [pc, #432]	; (800d56c <ip4_frag+0x274>)
 800d3bc:	f44f 7249 	mov.w	r2, #804	; 0x324
 800d3c0:	496d      	ldr	r1, [pc, #436]	; (800d578 <ip4_frag+0x280>)
 800d3c2:	486c      	ldr	r0, [pc, #432]	; (800d574 <ip4_frag+0x27c>)
 800d3c4:	f008 fd22 	bl	8015e0c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	2214      	movs	r2, #20
 800d3ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f008 fceb 	bl	8015dac <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800d3dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d3de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800d3e2:	e064      	b.n	800d4ae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	895a      	ldrh	r2, [r3, #10]
 800d3e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	895b      	ldrh	r3, [r3, #10]
 800d3f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d3f4:	429a      	cmp	r2, r3
 800d3f6:	d906      	bls.n	800d406 <ip4_frag+0x10e>
 800d3f8:	4b5c      	ldr	r3, [pc, #368]	; (800d56c <ip4_frag+0x274>)
 800d3fa:	f240 322d 	movw	r2, #813	; 0x32d
 800d3fe:	495f      	ldr	r1, [pc, #380]	; (800d57c <ip4_frag+0x284>)
 800d400:	485c      	ldr	r0, [pc, #368]	; (800d574 <ip4_frag+0x27c>)
 800d402:	f008 fd03 	bl	8015e0c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d406:	8bfa      	ldrh	r2, [r7, #30]
 800d408:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d40c:	4293      	cmp	r3, r2
 800d40e:	bf28      	it	cs
 800d410:	4613      	movcs	r3, r2
 800d412:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d416:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d105      	bne.n	800d42a <ip4_frag+0x132>
        poff = 0;
 800d41e:	2300      	movs	r3, #0
 800d420:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	60fb      	str	r3, [r7, #12]
        continue;
 800d428:	e041      	b.n	800d4ae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d42a:	f7ff ff0d 	bl	800d248 <ip_frag_alloc_pbuf_custom_ref>
 800d42e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800d430:	69bb      	ldr	r3, [r7, #24]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d103      	bne.n	800d43e <ip4_frag+0x146>
        pbuf_free(rambuf);
 800d436:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d438:	f001 fca4 	bl	800ed84 <pbuf_free>
        goto memerr;
 800d43c:	e08f      	b.n	800d55e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d43e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d444:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d446:	4413      	add	r3, r2
 800d448:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800d44c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d450:	9201      	str	r2, [sp, #4]
 800d452:	9300      	str	r3, [sp, #0]
 800d454:	4603      	mov	r3, r0
 800d456:	2241      	movs	r2, #65	; 0x41
 800d458:	2000      	movs	r0, #0
 800d45a:	f001 fad9 	bl	800ea10 <pbuf_alloced_custom>
 800d45e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d106      	bne.n	800d474 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d466:	69b8      	ldr	r0, [r7, #24]
 800d468:	f7ff fef6 	bl	800d258 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d46c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d46e:	f001 fc89 	bl	800ed84 <pbuf_free>
        goto memerr;
 800d472:	e074      	b.n	800d55e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f001 fd2b 	bl	800eed0 <pbuf_ref>
      pcr->original = p;
 800d47a:	69bb      	ldr	r3, [r7, #24]
 800d47c:	68fa      	ldr	r2, [r7, #12]
 800d47e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	4a3f      	ldr	r2, [pc, #252]	; (800d580 <ip4_frag+0x288>)
 800d484:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d486:	6979      	ldr	r1, [r7, #20]
 800d488:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d48a:	f001 fd49 	bl	800ef20 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d48e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800d492:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800d49c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d004      	beq.n	800d4ae <ip4_frag+0x1b6>
        poff = 0;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d4ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d196      	bne.n	800d3e4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800d4b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d4b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d4bc:	4413      	add	r3, r2
 800d4be:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d4c4:	f1a3 0213 	sub.w	r2, r3, #19
 800d4c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	bfcc      	ite	gt
 800d4d0:	2301      	movgt	r3, #1
 800d4d2:	2300      	movle	r3, #0
 800d4d4:	b2db      	uxtb	r3, r3
 800d4d6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d4d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d4dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800d4e2:	6a3b      	ldr	r3, [r7, #32]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <ip4_frag+0x1f6>
 800d4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d003      	beq.n	800d4f6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d4ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d4f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d4f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d4f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f000 f843 	bl	800d584 <lwip_htons>
 800d4fe:	4603      	mov	r3, r0
 800d500:	461a      	mov	r2, r3
 800d502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d504:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d506:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d508:	3314      	adds	r3, #20
 800d50a:	b29b      	uxth	r3, r3
 800d50c:	4618      	mov	r0, r3
 800d50e:	f000 f839 	bl	800d584 <lwip_htons>
 800d512:	4603      	mov	r3, r0
 800d514:	461a      	mov	r2, r3
 800d516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d518:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d51c:	2200      	movs	r2, #0
 800d51e:	729a      	strb	r2, [r3, #10]
 800d520:	2200      	movs	r2, #0
 800d522:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d524:	68bb      	ldr	r3, [r7, #8]
 800d526:	695b      	ldr	r3, [r3, #20]
 800d528:	687a      	ldr	r2, [r7, #4]
 800d52a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d52c:	68b8      	ldr	r0, [r7, #8]
 800d52e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d532:	f001 fc27 	bl	800ed84 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d536:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d53a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d53c:	1ad3      	subs	r3, r2, r3
 800d53e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800d542:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d546:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d548:	4413      	add	r3, r2
 800d54a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800d54e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d552:	2b00      	cmp	r3, #0
 800d554:	f47f af19 	bne.w	800d38a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d558:	2300      	movs	r3, #0
 800d55a:	e002      	b.n	800d562 <ip4_frag+0x26a>
      goto memerr;
 800d55c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d55e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d562:	4618      	mov	r0, r3
 800d564:	3748      	adds	r7, #72	; 0x48
 800d566:	46bd      	mov	sp, r7
 800d568:	bd80      	pop	{r7, pc}
 800d56a:	bf00      	nop
 800d56c:	08018e1c 	.word	0x08018e1c
 800d570:	08019038 	.word	0x08019038
 800d574:	08018ea4 	.word	0x08018ea4
 800d578:	08019054 	.word	0x08019054
 800d57c:	08019074 	.word	0x08019074
 800d580:	0800d291 	.word	0x0800d291

0800d584 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	4603      	mov	r3, r0
 800d58c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d58e:	88fb      	ldrh	r3, [r7, #6]
 800d590:	021b      	lsls	r3, r3, #8
 800d592:	b21a      	sxth	r2, r3
 800d594:	88fb      	ldrh	r3, [r7, #6]
 800d596:	0a1b      	lsrs	r3, r3, #8
 800d598:	b29b      	uxth	r3, r3
 800d59a:	b21b      	sxth	r3, r3
 800d59c:	4313      	orrs	r3, r2
 800d59e:	b21b      	sxth	r3, r3
 800d5a0:	b29b      	uxth	r3, r3
}
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	370c      	adds	r7, #12
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ac:	4770      	bx	lr

0800d5ae <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d5ae:	b480      	push	{r7}
 800d5b0:	b083      	sub	sp, #12
 800d5b2:	af00      	add	r7, sp, #0
 800d5b4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	061a      	lsls	r2, r3, #24
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	021b      	lsls	r3, r3, #8
 800d5be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d5c2:	431a      	orrs	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	0a1b      	lsrs	r3, r3, #8
 800d5c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d5cc:	431a      	orrs	r2, r3
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	0e1b      	lsrs	r3, r3, #24
 800d5d2:	4313      	orrs	r3, r2
}
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5de:	4770      	bx	lr

0800d5e0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b089      	sub	sp, #36	; 0x24
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	f003 0301 	and.w	r3, r3, #1
 800d5fc:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d5fe:	693b      	ldr	r3, [r7, #16]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00d      	beq.n	800d620 <lwip_standard_chksum+0x40>
 800d604:	683b      	ldr	r3, [r7, #0]
 800d606:	2b00      	cmp	r3, #0
 800d608:	dd0a      	ble.n	800d620 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d60a:	69fa      	ldr	r2, [r7, #28]
 800d60c:	1c53      	adds	r3, r2, #1
 800d60e:	61fb      	str	r3, [r7, #28]
 800d610:	f107 030e 	add.w	r3, r7, #14
 800d614:	3301      	adds	r3, #1
 800d616:	7812      	ldrb	r2, [r2, #0]
 800d618:	701a      	strb	r2, [r3, #0]
    len--;
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	3b01      	subs	r3, #1
 800d61e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d620:	69fb      	ldr	r3, [r7, #28]
 800d622:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d624:	e00a      	b.n	800d63c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	1c9a      	adds	r2, r3, #2
 800d62a:	61ba      	str	r2, [r7, #24]
 800d62c:	881b      	ldrh	r3, [r3, #0]
 800d62e:	461a      	mov	r2, r3
 800d630:	697b      	ldr	r3, [r7, #20]
 800d632:	4413      	add	r3, r2
 800d634:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d636:	683b      	ldr	r3, [r7, #0]
 800d638:	3b02      	subs	r3, #2
 800d63a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b01      	cmp	r3, #1
 800d640:	dcf1      	bgt.n	800d626 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	dd04      	ble.n	800d652 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d648:	f107 030e 	add.w	r3, r7, #14
 800d64c:	69ba      	ldr	r2, [r7, #24]
 800d64e:	7812      	ldrb	r2, [r2, #0]
 800d650:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d652:	89fb      	ldrh	r3, [r7, #14]
 800d654:	461a      	mov	r2, r3
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	4413      	add	r3, r2
 800d65a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	0c1a      	lsrs	r2, r3, #16
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	b29b      	uxth	r3, r3
 800d664:	4413      	add	r3, r2
 800d666:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d668:	697b      	ldr	r3, [r7, #20]
 800d66a:	0c1a      	lsrs	r2, r3, #16
 800d66c:	697b      	ldr	r3, [r7, #20]
 800d66e:	b29b      	uxth	r3, r3
 800d670:	4413      	add	r3, r2
 800d672:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d674:	693b      	ldr	r3, [r7, #16]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d007      	beq.n	800d68a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d67a:	697b      	ldr	r3, [r7, #20]
 800d67c:	021b      	lsls	r3, r3, #8
 800d67e:	b29a      	uxth	r2, r3
 800d680:	697b      	ldr	r3, [r7, #20]
 800d682:	0a1b      	lsrs	r3, r3, #8
 800d684:	b2db      	uxtb	r3, r3
 800d686:	4313      	orrs	r3, r2
 800d688:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d68a:	697b      	ldr	r3, [r7, #20]
 800d68c:	b29b      	uxth	r3, r3
}
 800d68e:	4618      	mov	r0, r3
 800d690:	3724      	adds	r7, #36	; 0x24
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr

0800d69a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d69a:	b580      	push	{r7, lr}
 800d69c:	b082      	sub	sp, #8
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d6a6:	887b      	ldrh	r3, [r7, #2]
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f7ff ff98 	bl	800d5e0 <lwip_standard_chksum>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	43db      	mvns	r3, r3
 800d6b4:	b29b      	uxth	r3, r3
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b082      	sub	sp, #8
 800d6c2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d6c8:	f008 fa76 	bl	8015bb8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d6cc:	f000 f8d4 	bl	800d878 <mem_init>
  memp_init();
 800d6d0:	f000 fc2c 	bl	800df2c <memp_init>
  pbuf_init();
  netif_init();
 800d6d4:	f000 fd38 	bl	800e148 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d6d8:	f007 fcd8 	bl	801508c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d6dc:	f001 fdec 	bl	800f2b8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d6e0:	f007 fc1a 	bl	8014f18 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d6e4:	bf00      	nop
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b083      	sub	sp, #12
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d6f6:	4b05      	ldr	r3, [pc, #20]	; (800d70c <ptr_to_mem+0x20>)
 800d6f8:	681a      	ldr	r2, [r3, #0]
 800d6fa:	88fb      	ldrh	r3, [r7, #6]
 800d6fc:	4413      	add	r3, r2
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	370c      	adds	r7, #12
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	24006770 	.word	0x24006770

0800d710 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d710:	b480      	push	{r7}
 800d712:	b083      	sub	sp, #12
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d718:	4b05      	ldr	r3, [pc, #20]	; (800d730 <mem_to_ptr+0x20>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	1ad3      	subs	r3, r2, r3
 800d720:	b29b      	uxth	r3, r3
}
 800d722:	4618      	mov	r0, r3
 800d724:	370c      	adds	r7, #12
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	24006770 	.word	0x24006770

0800d734 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d734:	b590      	push	{r4, r7, lr}
 800d736:	b085      	sub	sp, #20
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d73c:	4b45      	ldr	r3, [pc, #276]	; (800d854 <plug_holes+0x120>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	687a      	ldr	r2, [r7, #4]
 800d742:	429a      	cmp	r2, r3
 800d744:	d206      	bcs.n	800d754 <plug_holes+0x20>
 800d746:	4b44      	ldr	r3, [pc, #272]	; (800d858 <plug_holes+0x124>)
 800d748:	f240 12df 	movw	r2, #479	; 0x1df
 800d74c:	4943      	ldr	r1, [pc, #268]	; (800d85c <plug_holes+0x128>)
 800d74e:	4844      	ldr	r0, [pc, #272]	; (800d860 <plug_holes+0x12c>)
 800d750:	f008 fb5c 	bl	8015e0c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d754:	4b43      	ldr	r3, [pc, #268]	; (800d864 <plug_holes+0x130>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	687a      	ldr	r2, [r7, #4]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d306      	bcc.n	800d76c <plug_holes+0x38>
 800d75e:	4b3e      	ldr	r3, [pc, #248]	; (800d858 <plug_holes+0x124>)
 800d760:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d764:	4940      	ldr	r1, [pc, #256]	; (800d868 <plug_holes+0x134>)
 800d766:	483e      	ldr	r0, [pc, #248]	; (800d860 <plug_holes+0x12c>)
 800d768:	f008 fb50 	bl	8015e0c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	791b      	ldrb	r3, [r3, #4]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d006      	beq.n	800d782 <plug_holes+0x4e>
 800d774:	4b38      	ldr	r3, [pc, #224]	; (800d858 <plug_holes+0x124>)
 800d776:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d77a:	493c      	ldr	r1, [pc, #240]	; (800d86c <plug_holes+0x138>)
 800d77c:	4838      	ldr	r0, [pc, #224]	; (800d860 <plug_holes+0x12c>)
 800d77e:	f008 fb45 	bl	8015e0c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	881b      	ldrh	r3, [r3, #0]
 800d786:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d78a:	d906      	bls.n	800d79a <plug_holes+0x66>
 800d78c:	4b32      	ldr	r3, [pc, #200]	; (800d858 <plug_holes+0x124>)
 800d78e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800d792:	4937      	ldr	r1, [pc, #220]	; (800d870 <plug_holes+0x13c>)
 800d794:	4832      	ldr	r0, [pc, #200]	; (800d860 <plug_holes+0x12c>)
 800d796:	f008 fb39 	bl	8015e0c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	881b      	ldrh	r3, [r3, #0]
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7ff ffa4 	bl	800d6ec <ptr_to_mem>
 800d7a4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d024      	beq.n	800d7f8 <plug_holes+0xc4>
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	791b      	ldrb	r3, [r3, #4]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d120      	bne.n	800d7f8 <plug_holes+0xc4>
 800d7b6:	4b2b      	ldr	r3, [pc, #172]	; (800d864 <plug_holes+0x130>)
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d01b      	beq.n	800d7f8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800d7c0:	4b2c      	ldr	r3, [pc, #176]	; (800d874 <plug_holes+0x140>)
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	68fa      	ldr	r2, [r7, #12]
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d102      	bne.n	800d7d0 <plug_holes+0x9c>
      lfree = mem;
 800d7ca:	4a2a      	ldr	r2, [pc, #168]	; (800d874 <plug_holes+0x140>)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	881a      	ldrh	r2, [r3, #0]
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	881b      	ldrh	r3, [r3, #0]
 800d7dc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d7e0:	d00a      	beq.n	800d7f8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	881b      	ldrh	r3, [r3, #0]
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7ff ff80 	bl	800d6ec <ptr_to_mem>
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	f7ff ff8e 	bl	800d710 <mem_to_ptr>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	885b      	ldrh	r3, [r3, #2]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7ff ff75 	bl	800d6ec <ptr_to_mem>
 800d802:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800d804:	68ba      	ldr	r2, [r7, #8]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d01f      	beq.n	800d84c <plug_holes+0x118>
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	791b      	ldrb	r3, [r3, #4]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d11b      	bne.n	800d84c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800d814:	4b17      	ldr	r3, [pc, #92]	; (800d874 <plug_holes+0x140>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d102      	bne.n	800d824 <plug_holes+0xf0>
      lfree = pmem;
 800d81e:	4a15      	ldr	r2, [pc, #84]	; (800d874 <plug_holes+0x140>)
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	881a      	ldrh	r2, [r3, #0]
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	881b      	ldrh	r3, [r3, #0]
 800d830:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d834:	d00a      	beq.n	800d84c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	881b      	ldrh	r3, [r3, #0]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7ff ff56 	bl	800d6ec <ptr_to_mem>
 800d840:	4604      	mov	r4, r0
 800d842:	68b8      	ldr	r0, [r7, #8]
 800d844:	f7ff ff64 	bl	800d710 <mem_to_ptr>
 800d848:	4603      	mov	r3, r0
 800d84a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800d84c:	bf00      	nop
 800d84e:	3714      	adds	r7, #20
 800d850:	46bd      	mov	sp, r7
 800d852:	bd90      	pop	{r4, r7, pc}
 800d854:	24006770 	.word	0x24006770
 800d858:	08019084 	.word	0x08019084
 800d85c:	080190f8 	.word	0x080190f8
 800d860:	08019110 	.word	0x08019110
 800d864:	24006774 	.word	0x24006774
 800d868:	08019138 	.word	0x08019138
 800d86c:	08019154 	.word	0x08019154
 800d870:	08019170 	.word	0x08019170
 800d874:	2400677c 	.word	0x2400677c

0800d878 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800d87e:	4b1d      	ldr	r3, [pc, #116]	; (800d8f4 <mem_init+0x7c>)
 800d880:	4a1d      	ldr	r2, [pc, #116]	; (800d8f8 <mem_init+0x80>)
 800d882:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800d884:	4b1b      	ldr	r3, [pc, #108]	; (800d8f4 <mem_init+0x7c>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d890:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	2200      	movs	r2, #0
 800d896:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	2200      	movs	r2, #0
 800d89c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800d89e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800d8a2:	f7ff ff23 	bl	800d6ec <ptr_to_mem>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	4a14      	ldr	r2, [pc, #80]	; (800d8fc <mem_init+0x84>)
 800d8aa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800d8ac:	4b13      	ldr	r3, [pc, #76]	; (800d8fc <mem_init+0x84>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800d8b4:	4b11      	ldr	r3, [pc, #68]	; (800d8fc <mem_init+0x84>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d8bc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800d8be:	4b0f      	ldr	r3, [pc, #60]	; (800d8fc <mem_init+0x84>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800d8c6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800d8c8:	4b0a      	ldr	r3, [pc, #40]	; (800d8f4 <mem_init+0x7c>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	4a0c      	ldr	r2, [pc, #48]	; (800d900 <mem_init+0x88>)
 800d8ce:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800d8d0:	480c      	ldr	r0, [pc, #48]	; (800d904 <mem_init+0x8c>)
 800d8d2:	f008 f97f 	bl	8015bd4 <sys_mutex_new>
 800d8d6:	4603      	mov	r3, r0
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d006      	beq.n	800d8ea <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800d8dc:	4b0a      	ldr	r3, [pc, #40]	; (800d908 <mem_init+0x90>)
 800d8de:	f240 221f 	movw	r2, #543	; 0x21f
 800d8e2:	490a      	ldr	r1, [pc, #40]	; (800d90c <mem_init+0x94>)
 800d8e4:	480a      	ldr	r0, [pc, #40]	; (800d910 <mem_init+0x98>)
 800d8e6:	f008 fa91 	bl	8015e0c <iprintf>
  }
}
 800d8ea:	bf00      	nop
 800d8ec:	3708      	adds	r7, #8
 800d8ee:	46bd      	mov	sp, r7
 800d8f0:	bd80      	pop	{r7, pc}
 800d8f2:	bf00      	nop
 800d8f4:	24006770 	.word	0x24006770
 800d8f8:	30044000 	.word	0x30044000
 800d8fc:	24006774 	.word	0x24006774
 800d900:	2400677c 	.word	0x2400677c
 800d904:	24006778 	.word	0x24006778
 800d908:	08019084 	.word	0x08019084
 800d90c:	0801919c 	.word	0x0801919c
 800d910:	08019110 	.word	0x08019110

0800d914 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b086      	sub	sp, #24
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f7ff fef7 	bl	800d710 <mem_to_ptr>
 800d922:	4603      	mov	r3, r0
 800d924:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	881b      	ldrh	r3, [r3, #0]
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7ff fede 	bl	800d6ec <ptr_to_mem>
 800d930:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	885b      	ldrh	r3, [r3, #2]
 800d936:	4618      	mov	r0, r3
 800d938:	f7ff fed8 	bl	800d6ec <ptr_to_mem>
 800d93c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	881b      	ldrh	r3, [r3, #0]
 800d942:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d946:	d818      	bhi.n	800d97a <mem_link_valid+0x66>
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	885b      	ldrh	r3, [r3, #2]
 800d94c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d950:	d813      	bhi.n	800d97a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800d956:	8afa      	ldrh	r2, [r7, #22]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d004      	beq.n	800d966 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	881b      	ldrh	r3, [r3, #0]
 800d960:	8afa      	ldrh	r2, [r7, #22]
 800d962:	429a      	cmp	r2, r3
 800d964:	d109      	bne.n	800d97a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d966:	4b08      	ldr	r3, [pc, #32]	; (800d988 <mem_link_valid+0x74>)
 800d968:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800d96a:	693a      	ldr	r2, [r7, #16]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d006      	beq.n	800d97e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	885b      	ldrh	r3, [r3, #2]
 800d974:	8afa      	ldrh	r2, [r7, #22]
 800d976:	429a      	cmp	r2, r3
 800d978:	d001      	beq.n	800d97e <mem_link_valid+0x6a>
    return 0;
 800d97a:	2300      	movs	r3, #0
 800d97c:	e000      	b.n	800d980 <mem_link_valid+0x6c>
  }
  return 1;
 800d97e:	2301      	movs	r3, #1
}
 800d980:	4618      	mov	r0, r3
 800d982:	3718      	adds	r7, #24
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}
 800d988:	24006774 	.word	0x24006774

0800d98c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b088      	sub	sp, #32
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d070      	beq.n	800da7c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f003 0303 	and.w	r3, r3, #3
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d00d      	beq.n	800d9c0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800d9a4:	4b37      	ldr	r3, [pc, #220]	; (800da84 <mem_free+0xf8>)
 800d9a6:	f240 2273 	movw	r2, #627	; 0x273
 800d9aa:	4937      	ldr	r1, [pc, #220]	; (800da88 <mem_free+0xfc>)
 800d9ac:	4837      	ldr	r0, [pc, #220]	; (800da8c <mem_free+0x100>)
 800d9ae:	f008 fa2d 	bl	8015e0c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d9b2:	f008 f963 	bl	8015c7c <sys_arch_protect>
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	f008 f96d 	bl	8015c98 <sys_arch_unprotect>
    return;
 800d9be:	e05e      	b.n	800da7e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	3b08      	subs	r3, #8
 800d9c4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800d9c6:	4b32      	ldr	r3, [pc, #200]	; (800da90 <mem_free+0x104>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	69fa      	ldr	r2, [r7, #28]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d306      	bcc.n	800d9de <mem_free+0x52>
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f103 020c 	add.w	r2, r3, #12
 800d9d6:	4b2f      	ldr	r3, [pc, #188]	; (800da94 <mem_free+0x108>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d90d      	bls.n	800d9fa <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800d9de:	4b29      	ldr	r3, [pc, #164]	; (800da84 <mem_free+0xf8>)
 800d9e0:	f240 227f 	movw	r2, #639	; 0x27f
 800d9e4:	492c      	ldr	r1, [pc, #176]	; (800da98 <mem_free+0x10c>)
 800d9e6:	4829      	ldr	r0, [pc, #164]	; (800da8c <mem_free+0x100>)
 800d9e8:	f008 fa10 	bl	8015e0c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800d9ec:	f008 f946 	bl	8015c7c <sys_arch_protect>
 800d9f0:	6138      	str	r0, [r7, #16]
 800d9f2:	6938      	ldr	r0, [r7, #16]
 800d9f4:	f008 f950 	bl	8015c98 <sys_arch_unprotect>
    return;
 800d9f8:	e041      	b.n	800da7e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800d9fa:	4828      	ldr	r0, [pc, #160]	; (800da9c <mem_free+0x110>)
 800d9fc:	f008 f904 	bl	8015c08 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800da00:	69fb      	ldr	r3, [r7, #28]
 800da02:	791b      	ldrb	r3, [r3, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d110      	bne.n	800da2a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800da08:	4b1e      	ldr	r3, [pc, #120]	; (800da84 <mem_free+0xf8>)
 800da0a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800da0e:	4924      	ldr	r1, [pc, #144]	; (800daa0 <mem_free+0x114>)
 800da10:	481e      	ldr	r0, [pc, #120]	; (800da8c <mem_free+0x100>)
 800da12:	f008 f9fb 	bl	8015e0c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800da16:	4821      	ldr	r0, [pc, #132]	; (800da9c <mem_free+0x110>)
 800da18:	f008 f905 	bl	8015c26 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800da1c:	f008 f92e 	bl	8015c7c <sys_arch_protect>
 800da20:	6178      	str	r0, [r7, #20]
 800da22:	6978      	ldr	r0, [r7, #20]
 800da24:	f008 f938 	bl	8015c98 <sys_arch_unprotect>
    return;
 800da28:	e029      	b.n	800da7e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800da2a:	69f8      	ldr	r0, [r7, #28]
 800da2c:	f7ff ff72 	bl	800d914 <mem_link_valid>
 800da30:	4603      	mov	r3, r0
 800da32:	2b00      	cmp	r3, #0
 800da34:	d110      	bne.n	800da58 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800da36:	4b13      	ldr	r3, [pc, #76]	; (800da84 <mem_free+0xf8>)
 800da38:	f240 2295 	movw	r2, #661	; 0x295
 800da3c:	4919      	ldr	r1, [pc, #100]	; (800daa4 <mem_free+0x118>)
 800da3e:	4813      	ldr	r0, [pc, #76]	; (800da8c <mem_free+0x100>)
 800da40:	f008 f9e4 	bl	8015e0c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800da44:	4815      	ldr	r0, [pc, #84]	; (800da9c <mem_free+0x110>)
 800da46:	f008 f8ee 	bl	8015c26 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800da4a:	f008 f917 	bl	8015c7c <sys_arch_protect>
 800da4e:	61b8      	str	r0, [r7, #24]
 800da50:	69b8      	ldr	r0, [r7, #24]
 800da52:	f008 f921 	bl	8015c98 <sys_arch_unprotect>
    return;
 800da56:	e012      	b.n	800da7e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	2200      	movs	r2, #0
 800da5c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800da5e:	4b12      	ldr	r3, [pc, #72]	; (800daa8 <mem_free+0x11c>)
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	69fa      	ldr	r2, [r7, #28]
 800da64:	429a      	cmp	r2, r3
 800da66:	d202      	bcs.n	800da6e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800da68:	4a0f      	ldr	r2, [pc, #60]	; (800daa8 <mem_free+0x11c>)
 800da6a:	69fb      	ldr	r3, [r7, #28]
 800da6c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800da6e:	69f8      	ldr	r0, [r7, #28]
 800da70:	f7ff fe60 	bl	800d734 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800da74:	4809      	ldr	r0, [pc, #36]	; (800da9c <mem_free+0x110>)
 800da76:	f008 f8d6 	bl	8015c26 <sys_mutex_unlock>
 800da7a:	e000      	b.n	800da7e <mem_free+0xf2>
    return;
 800da7c:	bf00      	nop
}
 800da7e:	3720      	adds	r7, #32
 800da80:	46bd      	mov	sp, r7
 800da82:	bd80      	pop	{r7, pc}
 800da84:	08019084 	.word	0x08019084
 800da88:	080191b8 	.word	0x080191b8
 800da8c:	08019110 	.word	0x08019110
 800da90:	24006770 	.word	0x24006770
 800da94:	24006774 	.word	0x24006774
 800da98:	080191dc 	.word	0x080191dc
 800da9c:	24006778 	.word	0x24006778
 800daa0:	080191f8 	.word	0x080191f8
 800daa4:	08019220 	.word	0x08019220
 800daa8:	2400677c 	.word	0x2400677c

0800daac <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b088      	sub	sp, #32
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	460b      	mov	r3, r1
 800dab6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800dab8:	887b      	ldrh	r3, [r7, #2]
 800daba:	3303      	adds	r3, #3
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	f023 0303 	bic.w	r3, r3, #3
 800dac2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800dac4:	8bfb      	ldrh	r3, [r7, #30]
 800dac6:	2b0b      	cmp	r3, #11
 800dac8:	d801      	bhi.n	800dace <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800daca:	230c      	movs	r3, #12
 800dacc:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800dace:	8bfb      	ldrh	r3, [r7, #30]
 800dad0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dad4:	d803      	bhi.n	800dade <mem_trim+0x32>
 800dad6:	8bfa      	ldrh	r2, [r7, #30]
 800dad8:	887b      	ldrh	r3, [r7, #2]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d201      	bcs.n	800dae2 <mem_trim+0x36>
    return NULL;
 800dade:	2300      	movs	r3, #0
 800dae0:	e0d8      	b.n	800dc94 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800dae2:	4b6e      	ldr	r3, [pc, #440]	; (800dc9c <mem_trim+0x1f0>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	429a      	cmp	r2, r3
 800daea:	d304      	bcc.n	800daf6 <mem_trim+0x4a>
 800daec:	4b6c      	ldr	r3, [pc, #432]	; (800dca0 <mem_trim+0x1f4>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	429a      	cmp	r2, r3
 800daf4:	d306      	bcc.n	800db04 <mem_trim+0x58>
 800daf6:	4b6b      	ldr	r3, [pc, #428]	; (800dca4 <mem_trim+0x1f8>)
 800daf8:	f240 22d1 	movw	r2, #721	; 0x2d1
 800dafc:	496a      	ldr	r1, [pc, #424]	; (800dca8 <mem_trim+0x1fc>)
 800dafe:	486b      	ldr	r0, [pc, #428]	; (800dcac <mem_trim+0x200>)
 800db00:	f008 f984 	bl	8015e0c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800db04:	4b65      	ldr	r3, [pc, #404]	; (800dc9c <mem_trim+0x1f0>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d304      	bcc.n	800db18 <mem_trim+0x6c>
 800db0e:	4b64      	ldr	r3, [pc, #400]	; (800dca0 <mem_trim+0x1f4>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	687a      	ldr	r2, [r7, #4]
 800db14:	429a      	cmp	r2, r3
 800db16:	d307      	bcc.n	800db28 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800db18:	f008 f8b0 	bl	8015c7c <sys_arch_protect>
 800db1c:	60b8      	str	r0, [r7, #8]
 800db1e:	68b8      	ldr	r0, [r7, #8]
 800db20:	f008 f8ba 	bl	8015c98 <sys_arch_unprotect>
    return rmem;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	e0b5      	b.n	800dc94 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	3b08      	subs	r3, #8
 800db2c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800db2e:	69b8      	ldr	r0, [r7, #24]
 800db30:	f7ff fdee 	bl	800d710 <mem_to_ptr>
 800db34:	4603      	mov	r3, r0
 800db36:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800db38:	69bb      	ldr	r3, [r7, #24]
 800db3a:	881a      	ldrh	r2, [r3, #0]
 800db3c:	8afb      	ldrh	r3, [r7, #22]
 800db3e:	1ad3      	subs	r3, r2, r3
 800db40:	b29b      	uxth	r3, r3
 800db42:	3b08      	subs	r3, #8
 800db44:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800db46:	8bfa      	ldrh	r2, [r7, #30]
 800db48:	8abb      	ldrh	r3, [r7, #20]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d906      	bls.n	800db5c <mem_trim+0xb0>
 800db4e:	4b55      	ldr	r3, [pc, #340]	; (800dca4 <mem_trim+0x1f8>)
 800db50:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800db54:	4956      	ldr	r1, [pc, #344]	; (800dcb0 <mem_trim+0x204>)
 800db56:	4855      	ldr	r0, [pc, #340]	; (800dcac <mem_trim+0x200>)
 800db58:	f008 f958 	bl	8015e0c <iprintf>
  if (newsize > size) {
 800db5c:	8bfa      	ldrh	r2, [r7, #30]
 800db5e:	8abb      	ldrh	r3, [r7, #20]
 800db60:	429a      	cmp	r2, r3
 800db62:	d901      	bls.n	800db68 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800db64:	2300      	movs	r3, #0
 800db66:	e095      	b.n	800dc94 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800db68:	8bfa      	ldrh	r2, [r7, #30]
 800db6a:	8abb      	ldrh	r3, [r7, #20]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d101      	bne.n	800db74 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	e08f      	b.n	800dc94 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800db74:	484f      	ldr	r0, [pc, #316]	; (800dcb4 <mem_trim+0x208>)
 800db76:	f008 f847 	bl	8015c08 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800db7a:	69bb      	ldr	r3, [r7, #24]
 800db7c:	881b      	ldrh	r3, [r3, #0]
 800db7e:	4618      	mov	r0, r3
 800db80:	f7ff fdb4 	bl	800d6ec <ptr_to_mem>
 800db84:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	791b      	ldrb	r3, [r3, #4]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d13f      	bne.n	800dc0e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800db8e:	69bb      	ldr	r3, [r7, #24]
 800db90:	881b      	ldrh	r3, [r3, #0]
 800db92:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800db96:	d106      	bne.n	800dba6 <mem_trim+0xfa>
 800db98:	4b42      	ldr	r3, [pc, #264]	; (800dca4 <mem_trim+0x1f8>)
 800db9a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800db9e:	4946      	ldr	r1, [pc, #280]	; (800dcb8 <mem_trim+0x20c>)
 800dba0:	4842      	ldr	r0, [pc, #264]	; (800dcac <mem_trim+0x200>)
 800dba2:	f008 f933 	bl	8015e0c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	881b      	ldrh	r3, [r3, #0]
 800dbaa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800dbac:	8afa      	ldrh	r2, [r7, #22]
 800dbae:	8bfb      	ldrh	r3, [r7, #30]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	3308      	adds	r3, #8
 800dbb6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800dbb8:	4b40      	ldr	r3, [pc, #256]	; (800dcbc <mem_trim+0x210>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	693a      	ldr	r2, [r7, #16]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d106      	bne.n	800dbd0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800dbc2:	89fb      	ldrh	r3, [r7, #14]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7ff fd91 	bl	800d6ec <ptr_to_mem>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	4a3b      	ldr	r2, [pc, #236]	; (800dcbc <mem_trim+0x210>)
 800dbce:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800dbd0:	89fb      	ldrh	r3, [r7, #14]
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f7ff fd8a 	bl	800d6ec <ptr_to_mem>
 800dbd8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	89ba      	ldrh	r2, [r7, #12]
 800dbe4:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	8afa      	ldrh	r2, [r7, #22]
 800dbea:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	89fa      	ldrh	r2, [r7, #14]
 800dbf0:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dbf2:	693b      	ldr	r3, [r7, #16]
 800dbf4:	881b      	ldrh	r3, [r3, #0]
 800dbf6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dbfa:	d047      	beq.n	800dc8c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	881b      	ldrh	r3, [r3, #0]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7ff fd73 	bl	800d6ec <ptr_to_mem>
 800dc06:	4602      	mov	r2, r0
 800dc08:	89fb      	ldrh	r3, [r7, #14]
 800dc0a:	8053      	strh	r3, [r2, #2]
 800dc0c:	e03e      	b.n	800dc8c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800dc0e:	8bfb      	ldrh	r3, [r7, #30]
 800dc10:	f103 0214 	add.w	r2, r3, #20
 800dc14:	8abb      	ldrh	r3, [r7, #20]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d838      	bhi.n	800dc8c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800dc1a:	8afa      	ldrh	r2, [r7, #22]
 800dc1c:	8bfb      	ldrh	r3, [r7, #30]
 800dc1e:	4413      	add	r3, r2
 800dc20:	b29b      	uxth	r3, r3
 800dc22:	3308      	adds	r3, #8
 800dc24:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800dc26:	69bb      	ldr	r3, [r7, #24]
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dc2e:	d106      	bne.n	800dc3e <mem_trim+0x192>
 800dc30:	4b1c      	ldr	r3, [pc, #112]	; (800dca4 <mem_trim+0x1f8>)
 800dc32:	f240 3216 	movw	r2, #790	; 0x316
 800dc36:	4920      	ldr	r1, [pc, #128]	; (800dcb8 <mem_trim+0x20c>)
 800dc38:	481c      	ldr	r0, [pc, #112]	; (800dcac <mem_trim+0x200>)
 800dc3a:	f008 f8e7 	bl	8015e0c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800dc3e:	89fb      	ldrh	r3, [r7, #14]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff fd53 	bl	800d6ec <ptr_to_mem>
 800dc46:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800dc48:	4b1c      	ldr	r3, [pc, #112]	; (800dcbc <mem_trim+0x210>)
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	693a      	ldr	r2, [r7, #16]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d202      	bcs.n	800dc58 <mem_trim+0x1ac>
      lfree = mem2;
 800dc52:	4a1a      	ldr	r2, [pc, #104]	; (800dcbc <mem_trim+0x210>)
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800dc5e:	69bb      	ldr	r3, [r7, #24]
 800dc60:	881a      	ldrh	r2, [r3, #0]
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	8afa      	ldrh	r2, [r7, #22]
 800dc6a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800dc6c:	69bb      	ldr	r3, [r7, #24]
 800dc6e:	89fa      	ldrh	r2, [r7, #14]
 800dc70:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	881b      	ldrh	r3, [r3, #0]
 800dc76:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dc7a:	d007      	beq.n	800dc8c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	881b      	ldrh	r3, [r3, #0]
 800dc80:	4618      	mov	r0, r3
 800dc82:	f7ff fd33 	bl	800d6ec <ptr_to_mem>
 800dc86:	4602      	mov	r2, r0
 800dc88:	89fb      	ldrh	r3, [r7, #14]
 800dc8a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dc8c:	4809      	ldr	r0, [pc, #36]	; (800dcb4 <mem_trim+0x208>)
 800dc8e:	f007 ffca 	bl	8015c26 <sys_mutex_unlock>
  return rmem;
 800dc92:	687b      	ldr	r3, [r7, #4]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	3720      	adds	r7, #32
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd80      	pop	{r7, pc}
 800dc9c:	24006770 	.word	0x24006770
 800dca0:	24006774 	.word	0x24006774
 800dca4:	08019084 	.word	0x08019084
 800dca8:	08019254 	.word	0x08019254
 800dcac:	08019110 	.word	0x08019110
 800dcb0:	0801926c 	.word	0x0801926c
 800dcb4:	24006778 	.word	0x24006778
 800dcb8:	0801928c 	.word	0x0801928c
 800dcbc:	2400677c 	.word	0x2400677c

0800dcc0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b088      	sub	sp, #32
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800dcca:	88fb      	ldrh	r3, [r7, #6]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d101      	bne.n	800dcd4 <mem_malloc+0x14>
    return NULL;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	e0e2      	b.n	800de9a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800dcd4:	88fb      	ldrh	r3, [r7, #6]
 800dcd6:	3303      	adds	r3, #3
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	f023 0303 	bic.w	r3, r3, #3
 800dcde:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800dce0:	8bbb      	ldrh	r3, [r7, #28]
 800dce2:	2b0b      	cmp	r3, #11
 800dce4:	d801      	bhi.n	800dcea <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800dce6:	230c      	movs	r3, #12
 800dce8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800dcea:	8bbb      	ldrh	r3, [r7, #28]
 800dcec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dcf0:	d803      	bhi.n	800dcfa <mem_malloc+0x3a>
 800dcf2:	8bba      	ldrh	r2, [r7, #28]
 800dcf4:	88fb      	ldrh	r3, [r7, #6]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d201      	bcs.n	800dcfe <mem_malloc+0x3e>
    return NULL;
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	e0cd      	b.n	800de9a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800dcfe:	4869      	ldr	r0, [pc, #420]	; (800dea4 <mem_malloc+0x1e4>)
 800dd00:	f007 ff82 	bl	8015c08 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800dd04:	4b68      	ldr	r3, [pc, #416]	; (800dea8 <mem_malloc+0x1e8>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	4618      	mov	r0, r3
 800dd0a:	f7ff fd01 	bl	800d710 <mem_to_ptr>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	83fb      	strh	r3, [r7, #30]
 800dd12:	e0b7      	b.n	800de84 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800dd14:	8bfb      	ldrh	r3, [r7, #30]
 800dd16:	4618      	mov	r0, r3
 800dd18:	f7ff fce8 	bl	800d6ec <ptr_to_mem>
 800dd1c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800dd1e:	697b      	ldr	r3, [r7, #20]
 800dd20:	791b      	ldrb	r3, [r3, #4]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	f040 80a7 	bne.w	800de76 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	881b      	ldrh	r3, [r3, #0]
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	8bfb      	ldrh	r3, [r7, #30]
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	f1a3 0208 	sub.w	r2, r3, #8
 800dd36:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	f0c0 809c 	bcc.w	800de76 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	881b      	ldrh	r3, [r3, #0]
 800dd42:	461a      	mov	r2, r3
 800dd44:	8bfb      	ldrh	r3, [r7, #30]
 800dd46:	1ad3      	subs	r3, r2, r3
 800dd48:	f1a3 0208 	sub.w	r2, r3, #8
 800dd4c:	8bbb      	ldrh	r3, [r7, #28]
 800dd4e:	3314      	adds	r3, #20
 800dd50:	429a      	cmp	r2, r3
 800dd52:	d333      	bcc.n	800ddbc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dd54:	8bfa      	ldrh	r2, [r7, #30]
 800dd56:	8bbb      	ldrh	r3, [r7, #28]
 800dd58:	4413      	add	r3, r2
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	3308      	adds	r3, #8
 800dd5e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800dd60:	8a7b      	ldrh	r3, [r7, #18]
 800dd62:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dd66:	d106      	bne.n	800dd76 <mem_malloc+0xb6>
 800dd68:	4b50      	ldr	r3, [pc, #320]	; (800deac <mem_malloc+0x1ec>)
 800dd6a:	f240 3287 	movw	r2, #903	; 0x387
 800dd6e:	4950      	ldr	r1, [pc, #320]	; (800deb0 <mem_malloc+0x1f0>)
 800dd70:	4850      	ldr	r0, [pc, #320]	; (800deb4 <mem_malloc+0x1f4>)
 800dd72:	f008 f84b 	bl	8015e0c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800dd76:	8a7b      	ldrh	r3, [r7, #18]
 800dd78:	4618      	mov	r0, r3
 800dd7a:	f7ff fcb7 	bl	800d6ec <ptr_to_mem>
 800dd7e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	2200      	movs	r2, #0
 800dd84:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800dd86:	697b      	ldr	r3, [r7, #20]
 800dd88:	881a      	ldrh	r2, [r3, #0]
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	8bfa      	ldrh	r2, [r7, #30]
 800dd92:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	8a7a      	ldrh	r2, [r7, #18]
 800dd98:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	2201      	movs	r2, #1
 800dd9e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	881b      	ldrh	r3, [r3, #0]
 800dda4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dda8:	d00b      	beq.n	800ddc2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	881b      	ldrh	r3, [r3, #0]
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7ff fc9c 	bl	800d6ec <ptr_to_mem>
 800ddb4:	4602      	mov	r2, r0
 800ddb6:	8a7b      	ldrh	r3, [r7, #18]
 800ddb8:	8053      	strh	r3, [r2, #2]
 800ddba:	e002      	b.n	800ddc2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	2201      	movs	r2, #1
 800ddc0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ddc2:	4b39      	ldr	r3, [pc, #228]	; (800dea8 <mem_malloc+0x1e8>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	697a      	ldr	r2, [r7, #20]
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d127      	bne.n	800de1c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ddcc:	4b36      	ldr	r3, [pc, #216]	; (800dea8 <mem_malloc+0x1e8>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ddd2:	e005      	b.n	800dde0 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ddd4:	69bb      	ldr	r3, [r7, #24]
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7ff fc87 	bl	800d6ec <ptr_to_mem>
 800ddde:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800dde0:	69bb      	ldr	r3, [r7, #24]
 800dde2:	791b      	ldrb	r3, [r3, #4]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d004      	beq.n	800ddf2 <mem_malloc+0x132>
 800dde8:	4b33      	ldr	r3, [pc, #204]	; (800deb8 <mem_malloc+0x1f8>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	69ba      	ldr	r2, [r7, #24]
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d1f0      	bne.n	800ddd4 <mem_malloc+0x114>
          }
          lfree = cur;
 800ddf2:	4a2d      	ldr	r2, [pc, #180]	; (800dea8 <mem_malloc+0x1e8>)
 800ddf4:	69bb      	ldr	r3, [r7, #24]
 800ddf6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ddf8:	4b2b      	ldr	r3, [pc, #172]	; (800dea8 <mem_malloc+0x1e8>)
 800ddfa:	681a      	ldr	r2, [r3, #0]
 800ddfc:	4b2e      	ldr	r3, [pc, #184]	; (800deb8 <mem_malloc+0x1f8>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	429a      	cmp	r2, r3
 800de02:	d00b      	beq.n	800de1c <mem_malloc+0x15c>
 800de04:	4b28      	ldr	r3, [pc, #160]	; (800dea8 <mem_malloc+0x1e8>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	791b      	ldrb	r3, [r3, #4]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d006      	beq.n	800de1c <mem_malloc+0x15c>
 800de0e:	4b27      	ldr	r3, [pc, #156]	; (800deac <mem_malloc+0x1ec>)
 800de10:	f240 32b5 	movw	r2, #949	; 0x3b5
 800de14:	4929      	ldr	r1, [pc, #164]	; (800debc <mem_malloc+0x1fc>)
 800de16:	4827      	ldr	r0, [pc, #156]	; (800deb4 <mem_malloc+0x1f4>)
 800de18:	f007 fff8 	bl	8015e0c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800de1c:	4821      	ldr	r0, [pc, #132]	; (800dea4 <mem_malloc+0x1e4>)
 800de1e:	f007 ff02 	bl	8015c26 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800de22:	8bba      	ldrh	r2, [r7, #28]
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	4413      	add	r3, r2
 800de28:	3308      	adds	r3, #8
 800de2a:	4a23      	ldr	r2, [pc, #140]	; (800deb8 <mem_malloc+0x1f8>)
 800de2c:	6812      	ldr	r2, [r2, #0]
 800de2e:	4293      	cmp	r3, r2
 800de30:	d906      	bls.n	800de40 <mem_malloc+0x180>
 800de32:	4b1e      	ldr	r3, [pc, #120]	; (800deac <mem_malloc+0x1ec>)
 800de34:	f240 32b9 	movw	r2, #953	; 0x3b9
 800de38:	4921      	ldr	r1, [pc, #132]	; (800dec0 <mem_malloc+0x200>)
 800de3a:	481e      	ldr	r0, [pc, #120]	; (800deb4 <mem_malloc+0x1f4>)
 800de3c:	f007 ffe6 	bl	8015e0c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	f003 0303 	and.w	r3, r3, #3
 800de46:	2b00      	cmp	r3, #0
 800de48:	d006      	beq.n	800de58 <mem_malloc+0x198>
 800de4a:	4b18      	ldr	r3, [pc, #96]	; (800deac <mem_malloc+0x1ec>)
 800de4c:	f240 32bb 	movw	r2, #955	; 0x3bb
 800de50:	491c      	ldr	r1, [pc, #112]	; (800dec4 <mem_malloc+0x204>)
 800de52:	4818      	ldr	r0, [pc, #96]	; (800deb4 <mem_malloc+0x1f4>)
 800de54:	f007 ffda 	bl	8015e0c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800de58:	697b      	ldr	r3, [r7, #20]
 800de5a:	f003 0303 	and.w	r3, r3, #3
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d006      	beq.n	800de70 <mem_malloc+0x1b0>
 800de62:	4b12      	ldr	r3, [pc, #72]	; (800deac <mem_malloc+0x1ec>)
 800de64:	f240 32bd 	movw	r2, #957	; 0x3bd
 800de68:	4917      	ldr	r1, [pc, #92]	; (800dec8 <mem_malloc+0x208>)
 800de6a:	4812      	ldr	r0, [pc, #72]	; (800deb4 <mem_malloc+0x1f4>)
 800de6c:	f007 ffce 	bl	8015e0c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	3308      	adds	r3, #8
 800de74:	e011      	b.n	800de9a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800de76:	8bfb      	ldrh	r3, [r7, #30]
 800de78:	4618      	mov	r0, r3
 800de7a:	f7ff fc37 	bl	800d6ec <ptr_to_mem>
 800de7e:	4603      	mov	r3, r0
 800de80:	881b      	ldrh	r3, [r3, #0]
 800de82:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800de84:	8bfa      	ldrh	r2, [r7, #30]
 800de86:	8bbb      	ldrh	r3, [r7, #28]
 800de88:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800de8c:	429a      	cmp	r2, r3
 800de8e:	f4ff af41 	bcc.w	800dd14 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800de92:	4804      	ldr	r0, [pc, #16]	; (800dea4 <mem_malloc+0x1e4>)
 800de94:	f007 fec7 	bl	8015c26 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3720      	adds	r7, #32
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}
 800dea2:	bf00      	nop
 800dea4:	24006778 	.word	0x24006778
 800dea8:	2400677c 	.word	0x2400677c
 800deac:	08019084 	.word	0x08019084
 800deb0:	0801928c 	.word	0x0801928c
 800deb4:	08019110 	.word	0x08019110
 800deb8:	24006774 	.word	0x24006774
 800debc:	080192a0 	.word	0x080192a0
 800dec0:	080192bc 	.word	0x080192bc
 800dec4:	080192ec 	.word	0x080192ec
 800dec8:	0801931c 	.word	0x0801931c

0800decc <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	689b      	ldr	r3, [r3, #8]
 800ded8:	2200      	movs	r2, #0
 800deda:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	685b      	ldr	r3, [r3, #4]
 800dee0:	3303      	adds	r3, #3
 800dee2:	f023 0303 	bic.w	r3, r3, #3
 800dee6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800dee8:	2300      	movs	r3, #0
 800deea:	60fb      	str	r3, [r7, #12]
 800deec:	e011      	b.n	800df12 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	689b      	ldr	r3, [r3, #8]
 800def2:	681a      	ldr	r2, [r3, #0]
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	68ba      	ldr	r2, [r7, #8]
 800defe:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	881b      	ldrh	r3, [r3, #0]
 800df04:	461a      	mov	r2, r3
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	4413      	add	r3, r2
 800df0a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	3301      	adds	r3, #1
 800df10:	60fb      	str	r3, [r7, #12]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	885b      	ldrh	r3, [r3, #2]
 800df16:	461a      	mov	r2, r3
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	4293      	cmp	r3, r2
 800df1c:	dbe7      	blt.n	800deee <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800df1e:	bf00      	nop
 800df20:	bf00      	nop
 800df22:	3714      	adds	r7, #20
 800df24:	46bd      	mov	sp, r7
 800df26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2a:	4770      	bx	lr

0800df2c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800df32:	2300      	movs	r3, #0
 800df34:	80fb      	strh	r3, [r7, #6]
 800df36:	e009      	b.n	800df4c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800df38:	88fb      	ldrh	r3, [r7, #6]
 800df3a:	4a08      	ldr	r2, [pc, #32]	; (800df5c <memp_init+0x30>)
 800df3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df40:	4618      	mov	r0, r3
 800df42:	f7ff ffc3 	bl	800decc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800df46:	88fb      	ldrh	r3, [r7, #6]
 800df48:	3301      	adds	r3, #1
 800df4a:	80fb      	strh	r3, [r7, #6]
 800df4c:	88fb      	ldrh	r3, [r7, #6]
 800df4e:	2b0c      	cmp	r3, #12
 800df50:	d9f2      	bls.n	800df38 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800df52:	bf00      	nop
 800df54:	bf00      	nop
 800df56:	3708      	adds	r7, #8
 800df58:	46bd      	mov	sp, r7
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	080193dc 	.word	0x080193dc

0800df60 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b084      	sub	sp, #16
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800df68:	f007 fe88 	bl	8015c7c <sys_arch_protect>
 800df6c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	689b      	ldr	r3, [r3, #8]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d015      	beq.n	800dfa8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	689b      	ldr	r3, [r3, #8]
 800df80:	68ba      	ldr	r2, [r7, #8]
 800df82:	6812      	ldr	r2, [r2, #0]
 800df84:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	f003 0303 	and.w	r3, r3, #3
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d006      	beq.n	800df9e <do_memp_malloc_pool+0x3e>
 800df90:	4b09      	ldr	r3, [pc, #36]	; (800dfb8 <do_memp_malloc_pool+0x58>)
 800df92:	f44f 728c 	mov.w	r2, #280	; 0x118
 800df96:	4909      	ldr	r1, [pc, #36]	; (800dfbc <do_memp_malloc_pool+0x5c>)
 800df98:	4809      	ldr	r0, [pc, #36]	; (800dfc0 <do_memp_malloc_pool+0x60>)
 800df9a:	f007 ff37 	bl	8015e0c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800df9e:	68f8      	ldr	r0, [r7, #12]
 800dfa0:	f007 fe7a 	bl	8015c98 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	e003      	b.n	800dfb0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f007 fe75 	bl	8015c98 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800dfae:	2300      	movs	r3, #0
}
 800dfb0:	4618      	mov	r0, r3
 800dfb2:	3710      	adds	r7, #16
 800dfb4:	46bd      	mov	sp, r7
 800dfb6:	bd80      	pop	{r7, pc}
 800dfb8:	08019410 	.word	0x08019410
 800dfbc:	08019484 	.word	0x08019484
 800dfc0:	080194a8 	.word	0x080194a8

0800dfc4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d106      	bne.n	800dfe0 <memp_malloc_pool+0x1c>
 800dfd2:	4b0a      	ldr	r3, [pc, #40]	; (800dffc <memp_malloc_pool+0x38>)
 800dfd4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800dfd8:	4909      	ldr	r1, [pc, #36]	; (800e000 <memp_malloc_pool+0x3c>)
 800dfda:	480a      	ldr	r0, [pc, #40]	; (800e004 <memp_malloc_pool+0x40>)
 800dfdc:	f007 ff16 	bl	8015e0c <iprintf>
  if (desc == NULL) {
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d101      	bne.n	800dfea <memp_malloc_pool+0x26>
    return NULL;
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	e003      	b.n	800dff2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f7ff ffb8 	bl	800df60 <do_memp_malloc_pool>
 800dff0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3708      	adds	r7, #8
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	08019410 	.word	0x08019410
 800e000:	080194d0 	.word	0x080194d0
 800e004:	080194a8 	.word	0x080194a8

0800e008 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	4603      	mov	r3, r0
 800e010:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e012:	79fb      	ldrb	r3, [r7, #7]
 800e014:	2b0c      	cmp	r3, #12
 800e016:	d908      	bls.n	800e02a <memp_malloc+0x22>
 800e018:	4b0a      	ldr	r3, [pc, #40]	; (800e044 <memp_malloc+0x3c>)
 800e01a:	f240 1257 	movw	r2, #343	; 0x157
 800e01e:	490a      	ldr	r1, [pc, #40]	; (800e048 <memp_malloc+0x40>)
 800e020:	480a      	ldr	r0, [pc, #40]	; (800e04c <memp_malloc+0x44>)
 800e022:	f007 fef3 	bl	8015e0c <iprintf>
 800e026:	2300      	movs	r3, #0
 800e028:	e008      	b.n	800e03c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e02a:	79fb      	ldrb	r3, [r7, #7]
 800e02c:	4a08      	ldr	r2, [pc, #32]	; (800e050 <memp_malloc+0x48>)
 800e02e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e032:	4618      	mov	r0, r3
 800e034:	f7ff ff94 	bl	800df60 <do_memp_malloc_pool>
 800e038:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e03a:	68fb      	ldr	r3, [r7, #12]
}
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}
 800e044:	08019410 	.word	0x08019410
 800e048:	080194e4 	.word	0x080194e4
 800e04c:	080194a8 	.word	0x080194a8
 800e050:	080193dc 	.word	0x080193dc

0800e054 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	f003 0303 	and.w	r3, r3, #3
 800e064:	2b00      	cmp	r3, #0
 800e066:	d006      	beq.n	800e076 <do_memp_free_pool+0x22>
 800e068:	4b0d      	ldr	r3, [pc, #52]	; (800e0a0 <do_memp_free_pool+0x4c>)
 800e06a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e06e:	490d      	ldr	r1, [pc, #52]	; (800e0a4 <do_memp_free_pool+0x50>)
 800e070:	480d      	ldr	r0, [pc, #52]	; (800e0a8 <do_memp_free_pool+0x54>)
 800e072:	f007 fecb 	bl	8015e0c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e07a:	f007 fdff 	bl	8015c7c <sys_arch_protect>
 800e07e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	681a      	ldr	r2, [r3, #0]
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	689b      	ldr	r3, [r3, #8]
 800e08e:	68fa      	ldr	r2, [r7, #12]
 800e090:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e092:	68b8      	ldr	r0, [r7, #8]
 800e094:	f007 fe00 	bl	8015c98 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e098:	bf00      	nop
 800e09a:	3710      	adds	r7, #16
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	08019410 	.word	0x08019410
 800e0a4:	08019504 	.word	0x08019504
 800e0a8:	080194a8 	.word	0x080194a8

0800e0ac <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d106      	bne.n	800e0ca <memp_free_pool+0x1e>
 800e0bc:	4b0a      	ldr	r3, [pc, #40]	; (800e0e8 <memp_free_pool+0x3c>)
 800e0be:	f240 1295 	movw	r2, #405	; 0x195
 800e0c2:	490a      	ldr	r1, [pc, #40]	; (800e0ec <memp_free_pool+0x40>)
 800e0c4:	480a      	ldr	r0, [pc, #40]	; (800e0f0 <memp_free_pool+0x44>)
 800e0c6:	f007 fea1 	bl	8015e0c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d007      	beq.n	800e0e0 <memp_free_pool+0x34>
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d004      	beq.n	800e0e0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e0d6:	6839      	ldr	r1, [r7, #0]
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f7ff ffbb 	bl	800e054 <do_memp_free_pool>
 800e0de:	e000      	b.n	800e0e2 <memp_free_pool+0x36>
    return;
 800e0e0:	bf00      	nop
}
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}
 800e0e8:	08019410 	.word	0x08019410
 800e0ec:	080194d0 	.word	0x080194d0
 800e0f0:	080194a8 	.word	0x080194a8

0800e0f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	6039      	str	r1, [r7, #0]
 800e0fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e100:	79fb      	ldrb	r3, [r7, #7]
 800e102:	2b0c      	cmp	r3, #12
 800e104:	d907      	bls.n	800e116 <memp_free+0x22>
 800e106:	4b0c      	ldr	r3, [pc, #48]	; (800e138 <memp_free+0x44>)
 800e108:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e10c:	490b      	ldr	r1, [pc, #44]	; (800e13c <memp_free+0x48>)
 800e10e:	480c      	ldr	r0, [pc, #48]	; (800e140 <memp_free+0x4c>)
 800e110:	f007 fe7c 	bl	8015e0c <iprintf>
 800e114:	e00c      	b.n	800e130 <memp_free+0x3c>

  if (mem == NULL) {
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d008      	beq.n	800e12e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e11c:	79fb      	ldrb	r3, [r7, #7]
 800e11e:	4a09      	ldr	r2, [pc, #36]	; (800e144 <memp_free+0x50>)
 800e120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e124:	6839      	ldr	r1, [r7, #0]
 800e126:	4618      	mov	r0, r3
 800e128:	f7ff ff94 	bl	800e054 <do_memp_free_pool>
 800e12c:	e000      	b.n	800e130 <memp_free+0x3c>
    return;
 800e12e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e130:	3708      	adds	r7, #8
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	08019410 	.word	0x08019410
 800e13c:	08019524 	.word	0x08019524
 800e140:	080194a8 	.word	0x080194a8
 800e144:	080193dc 	.word	0x080193dc

0800e148 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e148:	b480      	push	{r7}
 800e14a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e14c:	bf00      	nop
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr
	...

0800e158 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b086      	sub	sp, #24
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	60f8      	str	r0, [r7, #12]
 800e160:	60b9      	str	r1, [r7, #8]
 800e162:	607a      	str	r2, [r7, #4]
 800e164:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d108      	bne.n	800e17e <netif_add+0x26>
 800e16c:	4b57      	ldr	r3, [pc, #348]	; (800e2cc <netif_add+0x174>)
 800e16e:	f240 1227 	movw	r2, #295	; 0x127
 800e172:	4957      	ldr	r1, [pc, #348]	; (800e2d0 <netif_add+0x178>)
 800e174:	4857      	ldr	r0, [pc, #348]	; (800e2d4 <netif_add+0x17c>)
 800e176:	f007 fe49 	bl	8015e0c <iprintf>
 800e17a:	2300      	movs	r3, #0
 800e17c:	e0a2      	b.n	800e2c4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e180:	2b00      	cmp	r3, #0
 800e182:	d108      	bne.n	800e196 <netif_add+0x3e>
 800e184:	4b51      	ldr	r3, [pc, #324]	; (800e2cc <netif_add+0x174>)
 800e186:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e18a:	4953      	ldr	r1, [pc, #332]	; (800e2d8 <netif_add+0x180>)
 800e18c:	4851      	ldr	r0, [pc, #324]	; (800e2d4 <netif_add+0x17c>)
 800e18e:	f007 fe3d 	bl	8015e0c <iprintf>
 800e192:	2300      	movs	r3, #0
 800e194:	e096      	b.n	800e2c4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d101      	bne.n	800e1a0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e19c:	4b4f      	ldr	r3, [pc, #316]	; (800e2dc <netif_add+0x184>)
 800e19e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e1a6:	4b4d      	ldr	r3, [pc, #308]	; (800e2dc <netif_add+0x184>)
 800e1a8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e1aa:	683b      	ldr	r3, [r7, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d101      	bne.n	800e1b4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e1b0:	4b4a      	ldr	r3, [pc, #296]	; (800e2dc <netif_add+0x184>)
 800e1b2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	4a45      	ldr	r2, [pc, #276]	; (800e2e0 <netif_add+0x188>)
 800e1ca:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	6a3a      	ldr	r2, [r7, #32]
 800e1e4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e1e6:	4b3f      	ldr	r3, [pc, #252]	; (800e2e4 <netif_add+0x18c>)
 800e1e8:	781a      	ldrb	r2, [r3, #0]
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1f4:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	68b9      	ldr	r1, [r7, #8]
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f000 f913 	bl	800e428 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e204:	68f8      	ldr	r0, [r7, #12]
 800e206:	4798      	blx	r3
 800e208:	4603      	mov	r3, r0
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d001      	beq.n	800e212 <netif_add+0xba>
    return NULL;
 800e20e:	2300      	movs	r3, #0
 800e210:	e058      	b.n	800e2c4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e218:	2bff      	cmp	r3, #255	; 0xff
 800e21a:	d103      	bne.n	800e224 <netif_add+0xcc>
        netif->num = 0;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	2200      	movs	r2, #0
 800e220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800e224:	2300      	movs	r3, #0
 800e226:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e228:	4b2f      	ldr	r3, [pc, #188]	; (800e2e8 <netif_add+0x190>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	617b      	str	r3, [r7, #20]
 800e22e:	e02b      	b.n	800e288 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e230:	697a      	ldr	r2, [r7, #20]
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	429a      	cmp	r2, r3
 800e236:	d106      	bne.n	800e246 <netif_add+0xee>
 800e238:	4b24      	ldr	r3, [pc, #144]	; (800e2cc <netif_add+0x174>)
 800e23a:	f240 128b 	movw	r2, #395	; 0x18b
 800e23e:	492b      	ldr	r1, [pc, #172]	; (800e2ec <netif_add+0x194>)
 800e240:	4824      	ldr	r0, [pc, #144]	; (800e2d4 <netif_add+0x17c>)
 800e242:	f007 fde3 	bl	8015e0c <iprintf>
        num_netifs++;
 800e246:	693b      	ldr	r3, [r7, #16]
 800e248:	3301      	adds	r3, #1
 800e24a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e24c:	693b      	ldr	r3, [r7, #16]
 800e24e:	2bff      	cmp	r3, #255	; 0xff
 800e250:	dd06      	ble.n	800e260 <netif_add+0x108>
 800e252:	4b1e      	ldr	r3, [pc, #120]	; (800e2cc <netif_add+0x174>)
 800e254:	f240 128d 	movw	r2, #397	; 0x18d
 800e258:	4925      	ldr	r1, [pc, #148]	; (800e2f0 <netif_add+0x198>)
 800e25a:	481e      	ldr	r0, [pc, #120]	; (800e2d4 <netif_add+0x17c>)
 800e25c:	f007 fdd6 	bl	8015e0c <iprintf>
        if (netif2->num == netif->num) {
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d108      	bne.n	800e282 <netif_add+0x12a>
          netif->num++;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e276:	3301      	adds	r3, #1
 800e278:	b2da      	uxtb	r2, r3
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800e280:	e005      	b.n	800e28e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	617b      	str	r3, [r7, #20]
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d1d0      	bne.n	800e230 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e28e:	697b      	ldr	r3, [r7, #20]
 800e290:	2b00      	cmp	r3, #0
 800e292:	d1be      	bne.n	800e212 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e29a:	2bfe      	cmp	r3, #254	; 0xfe
 800e29c:	d103      	bne.n	800e2a6 <netif_add+0x14e>
    netif_num = 0;
 800e29e:	4b11      	ldr	r3, [pc, #68]	; (800e2e4 <netif_add+0x18c>)
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	701a      	strb	r2, [r3, #0]
 800e2a4:	e006      	b.n	800e2b4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	b2da      	uxtb	r2, r3
 800e2b0:	4b0c      	ldr	r3, [pc, #48]	; (800e2e4 <netif_add+0x18c>)
 800e2b2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e2b4:	4b0c      	ldr	r3, [pc, #48]	; (800e2e8 <netif_add+0x190>)
 800e2b6:	681a      	ldr	r2, [r3, #0]
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e2bc:	4a0a      	ldr	r2, [pc, #40]	; (800e2e8 <netif_add+0x190>)
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3718      	adds	r7, #24
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	08019540 	.word	0x08019540
 800e2d0:	08019614 	.word	0x08019614
 800e2d4:	080195d0 	.word	0x080195d0
 800e2d8:	08019630 	.word	0x08019630
 800e2dc:	08018d64 	.word	0x08018d64
 800e2e0:	0800e703 	.word	0x0800e703
 800e2e4:	240067b4 	.word	0x240067b4
 800e2e8:	2400a778 	.word	0x2400a778
 800e2ec:	08019654 	.word	0x08019654
 800e2f0:	08019668 	.word	0x08019668

0800e2f4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e2fe:	6839      	ldr	r1, [r7, #0]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f002 fead 	bl	8011060 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e306:	6839      	ldr	r1, [r7, #0]
 800e308:	6878      	ldr	r0, [r7, #4]
 800e30a:	f007 f9fd 	bl	8015708 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e30e:	bf00      	nop
 800e310:	3708      	adds	r7, #8
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
	...

0800e318 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b086      	sub	sp, #24
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e324:	68bb      	ldr	r3, [r7, #8]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d106      	bne.n	800e338 <netif_do_set_ipaddr+0x20>
 800e32a:	4b1d      	ldr	r3, [pc, #116]	; (800e3a0 <netif_do_set_ipaddr+0x88>)
 800e32c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e330:	491c      	ldr	r1, [pc, #112]	; (800e3a4 <netif_do_set_ipaddr+0x8c>)
 800e332:	481d      	ldr	r0, [pc, #116]	; (800e3a8 <netif_do_set_ipaddr+0x90>)
 800e334:	f007 fd6a 	bl	8015e0c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d106      	bne.n	800e34c <netif_do_set_ipaddr+0x34>
 800e33e:	4b18      	ldr	r3, [pc, #96]	; (800e3a0 <netif_do_set_ipaddr+0x88>)
 800e340:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e344:	4917      	ldr	r1, [pc, #92]	; (800e3a4 <netif_do_set_ipaddr+0x8c>)
 800e346:	4818      	ldr	r0, [pc, #96]	; (800e3a8 <netif_do_set_ipaddr+0x90>)
 800e348:	f007 fd60 	bl	8015e0c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	3304      	adds	r3, #4
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	429a      	cmp	r2, r3
 800e358:	d01c      	beq.n	800e394 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	3304      	adds	r3, #4
 800e364:	681a      	ldr	r2, [r3, #0]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e36a:	f107 0314 	add.w	r3, r7, #20
 800e36e:	4619      	mov	r1, r3
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7ff ffbf 	bl	800e2f4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d002      	beq.n	800e382 <netif_do_set_ipaddr+0x6a>
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	e000      	b.n	800e384 <netif_do_set_ipaddr+0x6c>
 800e382:	2300      	movs	r3, #0
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e388:	2101      	movs	r1, #1
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f000 f8d2 	bl	800e534 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e390:	2301      	movs	r3, #1
 800e392:	e000      	b.n	800e396 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e394:	2300      	movs	r3, #0
}
 800e396:	4618      	mov	r0, r3
 800e398:	3718      	adds	r7, #24
 800e39a:	46bd      	mov	sp, r7
 800e39c:	bd80      	pop	{r7, pc}
 800e39e:	bf00      	nop
 800e3a0:	08019540 	.word	0x08019540
 800e3a4:	08019698 	.word	0x08019698
 800e3a8:	080195d0 	.word	0x080195d0

0800e3ac <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	60b9      	str	r1, [r7, #8]
 800e3b6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e3b8:	68bb      	ldr	r3, [r7, #8]
 800e3ba:	681a      	ldr	r2, [r3, #0]
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	3308      	adds	r3, #8
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d00a      	beq.n	800e3dc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e3c6:	68bb      	ldr	r3, [r7, #8]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d002      	beq.n	800e3d2 <netif_do_set_netmask+0x26>
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	e000      	b.n	800e3d4 <netif_do_set_netmask+0x28>
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e000      	b.n	800e3de <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e3dc:	2300      	movs	r3, #0
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	3714      	adds	r7, #20
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr

0800e3ea <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e3ea:	b480      	push	{r7}
 800e3ec:	b085      	sub	sp, #20
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	60f8      	str	r0, [r7, #12]
 800e3f2:	60b9      	str	r1, [r7, #8]
 800e3f4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	681a      	ldr	r2, [r3, #0]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	330c      	adds	r3, #12
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	429a      	cmp	r2, r3
 800e402:	d00a      	beq.n	800e41a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d002      	beq.n	800e410 <netif_do_set_gw+0x26>
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	e000      	b.n	800e412 <netif_do_set_gw+0x28>
 800e410:	2300      	movs	r3, #0
 800e412:	68fa      	ldr	r2, [r7, #12]
 800e414:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e416:	2301      	movs	r3, #1
 800e418:	e000      	b.n	800e41c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e41a:	2300      	movs	r3, #0
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3714      	adds	r7, #20
 800e420:	46bd      	mov	sp, r7
 800e422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e426:	4770      	bx	lr

0800e428 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b088      	sub	sp, #32
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	60f8      	str	r0, [r7, #12]
 800e430:	60b9      	str	r1, [r7, #8]
 800e432:	607a      	str	r2, [r7, #4]
 800e434:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e436:	2300      	movs	r3, #0
 800e438:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e43a:	2300      	movs	r3, #0
 800e43c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d101      	bne.n	800e448 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e444:	4b1c      	ldr	r3, [pc, #112]	; (800e4b8 <netif_set_addr+0x90>)
 800e446:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d101      	bne.n	800e452 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e44e:	4b1a      	ldr	r3, [pc, #104]	; (800e4b8 <netif_set_addr+0x90>)
 800e450:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e452:	683b      	ldr	r3, [r7, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d101      	bne.n	800e45c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e458:	4b17      	ldr	r3, [pc, #92]	; (800e4b8 <netif_set_addr+0x90>)
 800e45a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d003      	beq.n	800e46a <netif_set_addr+0x42>
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2b00      	cmp	r3, #0
 800e468:	d101      	bne.n	800e46e <netif_set_addr+0x46>
 800e46a:	2301      	movs	r3, #1
 800e46c:	e000      	b.n	800e470 <netif_set_addr+0x48>
 800e46e:	2300      	movs	r3, #0
 800e470:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e472:	697b      	ldr	r3, [r7, #20]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d006      	beq.n	800e486 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e478:	f107 0310 	add.w	r3, r7, #16
 800e47c:	461a      	mov	r2, r3
 800e47e:	68b9      	ldr	r1, [r7, #8]
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	f7ff ff49 	bl	800e318 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e486:	69fa      	ldr	r2, [r7, #28]
 800e488:	6879      	ldr	r1, [r7, #4]
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	f7ff ff8e 	bl	800e3ac <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e490:	69ba      	ldr	r2, [r7, #24]
 800e492:	6839      	ldr	r1, [r7, #0]
 800e494:	68f8      	ldr	r0, [r7, #12]
 800e496:	f7ff ffa8 	bl	800e3ea <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d106      	bne.n	800e4ae <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e4a0:	f107 0310 	add.w	r3, r7, #16
 800e4a4:	461a      	mov	r2, r3
 800e4a6:	68b9      	ldr	r1, [r7, #8]
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f7ff ff35 	bl	800e318 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e4ae:	bf00      	nop
 800e4b0:	3720      	adds	r7, #32
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	08018d64 	.word	0x08018d64

0800e4bc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e4bc:	b480      	push	{r7}
 800e4be:	b083      	sub	sp, #12
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e4c4:	4a04      	ldr	r2, [pc, #16]	; (800e4d8 <netif_set_default+0x1c>)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e4ca:	bf00      	nop
 800e4cc:	370c      	adds	r7, #12
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	2400a77c 	.word	0x2400a77c

0800e4dc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b082      	sub	sp, #8
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d107      	bne.n	800e4fa <netif_set_up+0x1e>
 800e4ea:	4b0f      	ldr	r3, [pc, #60]	; (800e528 <netif_set_up+0x4c>)
 800e4ec:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e4f0:	490e      	ldr	r1, [pc, #56]	; (800e52c <netif_set_up+0x50>)
 800e4f2:	480f      	ldr	r0, [pc, #60]	; (800e530 <netif_set_up+0x54>)
 800e4f4:	f007 fc8a 	bl	8015e0c <iprintf>
 800e4f8:	e013      	b.n	800e522 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e500:	f003 0301 	and.w	r3, r3, #1
 800e504:	2b00      	cmp	r3, #0
 800e506:	d10c      	bne.n	800e522 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e50e:	f043 0301 	orr.w	r3, r3, #1
 800e512:	b2da      	uxtb	r2, r3
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e51a:	2103      	movs	r1, #3
 800e51c:	6878      	ldr	r0, [r7, #4]
 800e51e:	f000 f809 	bl	800e534 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e522:	3708      	adds	r7, #8
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}
 800e528:	08019540 	.word	0x08019540
 800e52c:	08019708 	.word	0x08019708
 800e530:	080195d0 	.word	0x080195d0

0800e534 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b082      	sub	sp, #8
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
 800e53c:	460b      	mov	r3, r1
 800e53e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d106      	bne.n	800e554 <netif_issue_reports+0x20>
 800e546:	4b18      	ldr	r3, [pc, #96]	; (800e5a8 <netif_issue_reports+0x74>)
 800e548:	f240 326d 	movw	r2, #877	; 0x36d
 800e54c:	4917      	ldr	r1, [pc, #92]	; (800e5ac <netif_issue_reports+0x78>)
 800e54e:	4818      	ldr	r0, [pc, #96]	; (800e5b0 <netif_issue_reports+0x7c>)
 800e550:	f007 fc5c 	bl	8015e0c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e55a:	f003 0304 	and.w	r3, r3, #4
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d01e      	beq.n	800e5a0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e568:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d017      	beq.n	800e5a0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e570:	78fb      	ldrb	r3, [r7, #3]
 800e572:	f003 0301 	and.w	r3, r3, #1
 800e576:	2b00      	cmp	r3, #0
 800e578:	d013      	beq.n	800e5a2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	3304      	adds	r3, #4
 800e57e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e580:	2b00      	cmp	r3, #0
 800e582:	d00e      	beq.n	800e5a2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e58a:	f003 0308 	and.w	r3, r3, #8
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d007      	beq.n	800e5a2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	3304      	adds	r3, #4
 800e596:	4619      	mov	r1, r3
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f7fd fd27 	bl	800bfec <etharp_request>
 800e59e:	e000      	b.n	800e5a2 <netif_issue_reports+0x6e>
    return;
 800e5a0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	08019540 	.word	0x08019540
 800e5ac:	08019724 	.word	0x08019724
 800e5b0:	080195d0 	.word	0x080195d0

0800e5b4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d107      	bne.n	800e5d2 <netif_set_down+0x1e>
 800e5c2:	4b12      	ldr	r3, [pc, #72]	; (800e60c <netif_set_down+0x58>)
 800e5c4:	f240 329b 	movw	r2, #923	; 0x39b
 800e5c8:	4911      	ldr	r1, [pc, #68]	; (800e610 <netif_set_down+0x5c>)
 800e5ca:	4812      	ldr	r0, [pc, #72]	; (800e614 <netif_set_down+0x60>)
 800e5cc:	f007 fc1e 	bl	8015e0c <iprintf>
 800e5d0:	e019      	b.n	800e606 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5d8:	f003 0301 	and.w	r3, r3, #1
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d012      	beq.n	800e606 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5e6:	f023 0301 	bic.w	r3, r3, #1
 800e5ea:	b2da      	uxtb	r2, r3
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e5f8:	f003 0308 	and.w	r3, r3, #8
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f7fd f8b1 	bl	800b768 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}
 800e60c:	08019540 	.word	0x08019540
 800e610:	08019748 	.word	0x08019748
 800e614:	080195d0 	.word	0x080195d0

0800e618 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2b00      	cmp	r3, #0
 800e624:	d107      	bne.n	800e636 <netif_set_link_up+0x1e>
 800e626:	4b13      	ldr	r3, [pc, #76]	; (800e674 <netif_set_link_up+0x5c>)
 800e628:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e62c:	4912      	ldr	r1, [pc, #72]	; (800e678 <netif_set_link_up+0x60>)
 800e62e:	4813      	ldr	r0, [pc, #76]	; (800e67c <netif_set_link_up+0x64>)
 800e630:	f007 fbec 	bl	8015e0c <iprintf>
 800e634:	e01b      	b.n	800e66e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e63c:	f003 0304 	and.w	r3, r3, #4
 800e640:	2b00      	cmp	r3, #0
 800e642:	d114      	bne.n	800e66e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e64a:	f043 0304 	orr.w	r3, r3, #4
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e656:	2103      	movs	r1, #3
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f7ff ff6b 	bl	800e534 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	69db      	ldr	r3, [r3, #28]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d003      	beq.n	800e66e <netif_set_link_up+0x56>
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	69db      	ldr	r3, [r3, #28]
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e66e:	3708      	adds	r7, #8
 800e670:	46bd      	mov	sp, r7
 800e672:	bd80      	pop	{r7, pc}
 800e674:	08019540 	.word	0x08019540
 800e678:	08019768 	.word	0x08019768
 800e67c:	080195d0 	.word	0x080195d0

0800e680 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d107      	bne.n	800e69e <netif_set_link_down+0x1e>
 800e68e:	4b11      	ldr	r3, [pc, #68]	; (800e6d4 <netif_set_link_down+0x54>)
 800e690:	f240 4206 	movw	r2, #1030	; 0x406
 800e694:	4910      	ldr	r1, [pc, #64]	; (800e6d8 <netif_set_link_down+0x58>)
 800e696:	4811      	ldr	r0, [pc, #68]	; (800e6dc <netif_set_link_down+0x5c>)
 800e698:	f007 fbb8 	bl	8015e0c <iprintf>
 800e69c:	e017      	b.n	800e6ce <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6a4:	f003 0304 	and.w	r3, r3, #4
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d010      	beq.n	800e6ce <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6b2:	f023 0304 	bic.w	r3, r3, #4
 800e6b6:	b2da      	uxtb	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	69db      	ldr	r3, [r3, #28]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d003      	beq.n	800e6ce <netif_set_link_down+0x4e>
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	69db      	ldr	r3, [r3, #28]
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e6ce:	3708      	adds	r7, #8
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	08019540 	.word	0x08019540
 800e6d8:	0801978c 	.word	0x0801978c
 800e6dc:	080195d0 	.word	0x080195d0

0800e6e0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e6e0:	b480      	push	{r7}
 800e6e2:	b083      	sub	sp, #12
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
 800e6e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d002      	beq.n	800e6f6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	683a      	ldr	r2, [r7, #0]
 800e6f4:	61da      	str	r2, [r3, #28]
  }
}
 800e6f6:	bf00      	nop
 800e6f8:	370c      	adds	r7, #12
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e702:	b480      	push	{r7}
 800e704:	b085      	sub	sp, #20
 800e706:	af00      	add	r7, sp, #0
 800e708:	60f8      	str	r0, [r7, #12]
 800e70a:	60b9      	str	r1, [r7, #8]
 800e70c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e70e:	f06f 030b 	mvn.w	r3, #11
}
 800e712:	4618      	mov	r0, r3
 800e714:	3714      	adds	r7, #20
 800e716:	46bd      	mov	sp, r7
 800e718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71c:	4770      	bx	lr
	...

0800e720 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e720:	b480      	push	{r7}
 800e722:	b085      	sub	sp, #20
 800e724:	af00      	add	r7, sp, #0
 800e726:	4603      	mov	r3, r0
 800e728:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e72a:	79fb      	ldrb	r3, [r7, #7]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d013      	beq.n	800e758 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e730:	4b0d      	ldr	r3, [pc, #52]	; (800e768 <netif_get_by_index+0x48>)
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	60fb      	str	r3, [r7, #12]
 800e736:	e00c      	b.n	800e752 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e73e:	3301      	adds	r3, #1
 800e740:	b2db      	uxtb	r3, r3
 800e742:	79fa      	ldrb	r2, [r7, #7]
 800e744:	429a      	cmp	r2, r3
 800e746:	d101      	bne.n	800e74c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	e006      	b.n	800e75a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	60fb      	str	r3, [r7, #12]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d1ef      	bne.n	800e738 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e758:	2300      	movs	r3, #0
}
 800e75a:	4618      	mov	r0, r3
 800e75c:	3714      	adds	r7, #20
 800e75e:	46bd      	mov	sp, r7
 800e760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e764:	4770      	bx	lr
 800e766:	bf00      	nop
 800e768:	2400a778 	.word	0x2400a778

0800e76c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e76c:	b480      	push	{r7}
 800e76e:	b085      	sub	sp, #20
 800e770:	af00      	add	r7, sp, #0
 800e772:	60f8      	str	r0, [r7, #12]
 800e774:	60b9      	str	r1, [r7, #8]
 800e776:	4611      	mov	r1, r2
 800e778:	461a      	mov	r2, r3
 800e77a:	460b      	mov	r3, r1
 800e77c:	80fb      	strh	r3, [r7, #6]
 800e77e:	4613      	mov	r3, r2
 800e780:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	2200      	movs	r2, #0
 800e786:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	68ba      	ldr	r2, [r7, #8]
 800e78c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	88fa      	ldrh	r2, [r7, #6]
 800e792:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	88ba      	ldrh	r2, [r7, #4]
 800e798:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800e79a:	8b3b      	ldrh	r3, [r7, #24]
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	7f3a      	ldrb	r2, [r7, #28]
 800e7a6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	2201      	movs	r2, #1
 800e7ac:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	73da      	strb	r2, [r3, #15]
}
 800e7b4:	bf00      	nop
 800e7b6:	3714      	adds	r7, #20
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr

0800e7c0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b08c      	sub	sp, #48	; 0x30
 800e7c4:	af02      	add	r7, sp, #8
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	71fb      	strb	r3, [r7, #7]
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	80bb      	strh	r3, [r7, #4]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800e7d2:	79fb      	ldrb	r3, [r7, #7]
 800e7d4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800e7d6:	887b      	ldrh	r3, [r7, #2]
 800e7d8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e7dc:	d07d      	beq.n	800e8da <pbuf_alloc+0x11a>
 800e7de:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800e7e2:	f300 80c6 	bgt.w	800e972 <pbuf_alloc+0x1b2>
 800e7e6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e7ea:	d010      	beq.n	800e80e <pbuf_alloc+0x4e>
 800e7ec:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800e7f0:	f300 80bf 	bgt.w	800e972 <pbuf_alloc+0x1b2>
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d002      	beq.n	800e7fe <pbuf_alloc+0x3e>
 800e7f8:	2b41      	cmp	r3, #65	; 0x41
 800e7fa:	f040 80ba 	bne.w	800e972 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800e7fe:	887a      	ldrh	r2, [r7, #2]
 800e800:	88bb      	ldrh	r3, [r7, #4]
 800e802:	4619      	mov	r1, r3
 800e804:	2000      	movs	r0, #0
 800e806:	f000 f8cf 	bl	800e9a8 <pbuf_alloc_reference>
 800e80a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800e80c:	e0bb      	b.n	800e986 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800e80e:	2300      	movs	r3, #0
 800e810:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800e812:	2300      	movs	r3, #0
 800e814:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800e816:	88bb      	ldrh	r3, [r7, #4]
 800e818:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800e81a:	200c      	movs	r0, #12
 800e81c:	f7ff fbf4 	bl	800e008 <memp_malloc>
 800e820:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800e822:	693b      	ldr	r3, [r7, #16]
 800e824:	2b00      	cmp	r3, #0
 800e826:	d107      	bne.n	800e838 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800e828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d002      	beq.n	800e834 <pbuf_alloc+0x74>
            pbuf_free(p);
 800e82e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e830:	f000 faa8 	bl	800ed84 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800e834:	2300      	movs	r3, #0
 800e836:	e0a7      	b.n	800e988 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800e838:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e83a:	3303      	adds	r3, #3
 800e83c:	b29b      	uxth	r3, r3
 800e83e:	f023 0303 	bic.w	r3, r3, #3
 800e842:	b29b      	uxth	r3, r3
 800e844:	f5c3 63bf 	rsb	r3, r3, #1528	; 0x5f8
 800e848:	b29b      	uxth	r3, r3
 800e84a:	8b7a      	ldrh	r2, [r7, #26]
 800e84c:	4293      	cmp	r3, r2
 800e84e:	bf28      	it	cs
 800e850:	4613      	movcs	r3, r2
 800e852:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800e854:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e856:	3310      	adds	r3, #16
 800e858:	693a      	ldr	r2, [r7, #16]
 800e85a:	4413      	add	r3, r2
 800e85c:	3303      	adds	r3, #3
 800e85e:	f023 0303 	bic.w	r3, r3, #3
 800e862:	4618      	mov	r0, r3
 800e864:	89f9      	ldrh	r1, [r7, #14]
 800e866:	8b7a      	ldrh	r2, [r7, #26]
 800e868:	2300      	movs	r3, #0
 800e86a:	9301      	str	r3, [sp, #4]
 800e86c:	887b      	ldrh	r3, [r7, #2]
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	460b      	mov	r3, r1
 800e872:	4601      	mov	r1, r0
 800e874:	6938      	ldr	r0, [r7, #16]
 800e876:	f7ff ff79 	bl	800e76c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	f003 0303 	and.w	r3, r3, #3
 800e882:	2b00      	cmp	r3, #0
 800e884:	d006      	beq.n	800e894 <pbuf_alloc+0xd4>
 800e886:	4b42      	ldr	r3, [pc, #264]	; (800e990 <pbuf_alloc+0x1d0>)
 800e888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e88c:	4941      	ldr	r1, [pc, #260]	; (800e994 <pbuf_alloc+0x1d4>)
 800e88e:	4842      	ldr	r0, [pc, #264]	; (800e998 <pbuf_alloc+0x1d8>)
 800e890:	f007 fabc 	bl	8015e0c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800e894:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e896:	3303      	adds	r3, #3
 800e898:	f023 0303 	bic.w	r3, r3, #3
 800e89c:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
 800e8a0:	d106      	bne.n	800e8b0 <pbuf_alloc+0xf0>
 800e8a2:	4b3b      	ldr	r3, [pc, #236]	; (800e990 <pbuf_alloc+0x1d0>)
 800e8a4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800e8a8:	493c      	ldr	r1, [pc, #240]	; (800e99c <pbuf_alloc+0x1dc>)
 800e8aa:	483b      	ldr	r0, [pc, #236]	; (800e998 <pbuf_alloc+0x1d8>)
 800e8ac:	f007 faae 	bl	8015e0c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800e8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d102      	bne.n	800e8bc <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	627b      	str	r3, [r7, #36]	; 0x24
 800e8ba:	e002      	b.n	800e8c2 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800e8bc:	69fb      	ldr	r3, [r7, #28]
 800e8be:	693a      	ldr	r2, [r7, #16]
 800e8c0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800e8c6:	8b7a      	ldrh	r2, [r7, #26]
 800e8c8:	89fb      	ldrh	r3, [r7, #14]
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800e8d2:	8b7b      	ldrh	r3, [r7, #26]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d1a0      	bne.n	800e81a <pbuf_alloc+0x5a>
      break;
 800e8d8:	e055      	b.n	800e986 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800e8da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8dc:	3303      	adds	r3, #3
 800e8de:	b29b      	uxth	r3, r3
 800e8e0:	f023 0303 	bic.w	r3, r3, #3
 800e8e4:	b29a      	uxth	r2, r3
 800e8e6:	88bb      	ldrh	r3, [r7, #4]
 800e8e8:	3303      	adds	r3, #3
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	f023 0303 	bic.w	r3, r3, #3
 800e8f0:	b29b      	uxth	r3, r3
 800e8f2:	4413      	add	r3, r2
 800e8f4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800e8f6:	8b3b      	ldrh	r3, [r7, #24]
 800e8f8:	3310      	adds	r3, #16
 800e8fa:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e8fc:	8b3a      	ldrh	r2, [r7, #24]
 800e8fe:	88bb      	ldrh	r3, [r7, #4]
 800e900:	3303      	adds	r3, #3
 800e902:	f023 0303 	bic.w	r3, r3, #3
 800e906:	429a      	cmp	r2, r3
 800e908:	d306      	bcc.n	800e918 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800e90a:	8afa      	ldrh	r2, [r7, #22]
 800e90c:	88bb      	ldrh	r3, [r7, #4]
 800e90e:	3303      	adds	r3, #3
 800e910:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800e914:	429a      	cmp	r2, r3
 800e916:	d201      	bcs.n	800e91c <pbuf_alloc+0x15c>
        return NULL;
 800e918:	2300      	movs	r3, #0
 800e91a:	e035      	b.n	800e988 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800e91c:	8afb      	ldrh	r3, [r7, #22]
 800e91e:	4618      	mov	r0, r3
 800e920:	f7ff f9ce 	bl	800dcc0 <mem_malloc>
 800e924:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800e926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d101      	bne.n	800e930 <pbuf_alloc+0x170>
        return NULL;
 800e92c:	2300      	movs	r3, #0
 800e92e:	e02b      	b.n	800e988 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800e930:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e932:	3310      	adds	r3, #16
 800e934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e936:	4413      	add	r3, r2
 800e938:	3303      	adds	r3, #3
 800e93a:	f023 0303 	bic.w	r3, r3, #3
 800e93e:	4618      	mov	r0, r3
 800e940:	88b9      	ldrh	r1, [r7, #4]
 800e942:	88ba      	ldrh	r2, [r7, #4]
 800e944:	2300      	movs	r3, #0
 800e946:	9301      	str	r3, [sp, #4]
 800e948:	887b      	ldrh	r3, [r7, #2]
 800e94a:	9300      	str	r3, [sp, #0]
 800e94c:	460b      	mov	r3, r1
 800e94e:	4601      	mov	r1, r0
 800e950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e952:	f7ff ff0b 	bl	800e76c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800e956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	f003 0303 	and.w	r3, r3, #3
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d010      	beq.n	800e984 <pbuf_alloc+0x1c4>
 800e962:	4b0b      	ldr	r3, [pc, #44]	; (800e990 <pbuf_alloc+0x1d0>)
 800e964:	f44f 7291 	mov.w	r2, #290	; 0x122
 800e968:	490d      	ldr	r1, [pc, #52]	; (800e9a0 <pbuf_alloc+0x1e0>)
 800e96a:	480b      	ldr	r0, [pc, #44]	; (800e998 <pbuf_alloc+0x1d8>)
 800e96c:	f007 fa4e 	bl	8015e0c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800e970:	e008      	b.n	800e984 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800e972:	4b07      	ldr	r3, [pc, #28]	; (800e990 <pbuf_alloc+0x1d0>)
 800e974:	f240 1227 	movw	r2, #295	; 0x127
 800e978:	490a      	ldr	r1, [pc, #40]	; (800e9a4 <pbuf_alloc+0x1e4>)
 800e97a:	4807      	ldr	r0, [pc, #28]	; (800e998 <pbuf_alloc+0x1d8>)
 800e97c:	f007 fa46 	bl	8015e0c <iprintf>
      return NULL;
 800e980:	2300      	movs	r3, #0
 800e982:	e001      	b.n	800e988 <pbuf_alloc+0x1c8>
      break;
 800e984:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800e986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e988:	4618      	mov	r0, r3
 800e98a:	3728      	adds	r7, #40	; 0x28
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}
 800e990:	080197b0 	.word	0x080197b0
 800e994:	08019824 	.word	0x08019824
 800e998:	08019854 	.word	0x08019854
 800e99c:	0801987c 	.word	0x0801987c
 800e9a0:	080198b0 	.word	0x080198b0
 800e9a4:	080198dc 	.word	0x080198dc

0800e9a8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b086      	sub	sp, #24
 800e9ac:	af02      	add	r7, sp, #8
 800e9ae:	6078      	str	r0, [r7, #4]
 800e9b0:	460b      	mov	r3, r1
 800e9b2:	807b      	strh	r3, [r7, #2]
 800e9b4:	4613      	mov	r3, r2
 800e9b6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800e9b8:	883b      	ldrh	r3, [r7, #0]
 800e9ba:	2b41      	cmp	r3, #65	; 0x41
 800e9bc:	d009      	beq.n	800e9d2 <pbuf_alloc_reference+0x2a>
 800e9be:	883b      	ldrh	r3, [r7, #0]
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d006      	beq.n	800e9d2 <pbuf_alloc_reference+0x2a>
 800e9c4:	4b0f      	ldr	r3, [pc, #60]	; (800ea04 <pbuf_alloc_reference+0x5c>)
 800e9c6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800e9ca:	490f      	ldr	r1, [pc, #60]	; (800ea08 <pbuf_alloc_reference+0x60>)
 800e9cc:	480f      	ldr	r0, [pc, #60]	; (800ea0c <pbuf_alloc_reference+0x64>)
 800e9ce:	f007 fa1d 	bl	8015e0c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800e9d2:	200b      	movs	r0, #11
 800e9d4:	f7ff fb18 	bl	800e008 <memp_malloc>
 800e9d8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800e9e0:	2300      	movs	r3, #0
 800e9e2:	e00b      	b.n	800e9fc <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800e9e4:	8879      	ldrh	r1, [r7, #2]
 800e9e6:	887a      	ldrh	r2, [r7, #2]
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	9301      	str	r3, [sp, #4]
 800e9ec:	883b      	ldrh	r3, [r7, #0]
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	6879      	ldr	r1, [r7, #4]
 800e9f4:	68f8      	ldr	r0, [r7, #12]
 800e9f6:	f7ff feb9 	bl	800e76c <pbuf_init_alloced_pbuf>
  return p;
 800e9fa:	68fb      	ldr	r3, [r7, #12]
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3710      	adds	r7, #16
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}
 800ea04:	080197b0 	.word	0x080197b0
 800ea08:	080198f8 	.word	0x080198f8
 800ea0c:	08019854 	.word	0x08019854

0800ea10 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b088      	sub	sp, #32
 800ea14:	af02      	add	r7, sp, #8
 800ea16:	607b      	str	r3, [r7, #4]
 800ea18:	4603      	mov	r3, r0
 800ea1a:	73fb      	strb	r3, [r7, #15]
 800ea1c:	460b      	mov	r3, r1
 800ea1e:	81bb      	strh	r3, [r7, #12]
 800ea20:	4613      	mov	r3, r2
 800ea22:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ea24:	7bfb      	ldrb	r3, [r7, #15]
 800ea26:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ea28:	8a7b      	ldrh	r3, [r7, #18]
 800ea2a:	3303      	adds	r3, #3
 800ea2c:	f023 0203 	bic.w	r2, r3, #3
 800ea30:	89bb      	ldrh	r3, [r7, #12]
 800ea32:	441a      	add	r2, r3
 800ea34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d901      	bls.n	800ea3e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	e018      	b.n	800ea70 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ea3e:	6a3b      	ldr	r3, [r7, #32]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d007      	beq.n	800ea54 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ea44:	8a7b      	ldrh	r3, [r7, #18]
 800ea46:	3303      	adds	r3, #3
 800ea48:	f023 0303 	bic.w	r3, r3, #3
 800ea4c:	6a3a      	ldr	r2, [r7, #32]
 800ea4e:	4413      	add	r3, r2
 800ea50:	617b      	str	r3, [r7, #20]
 800ea52:	e001      	b.n	800ea58 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ea54:	2300      	movs	r3, #0
 800ea56:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	89b9      	ldrh	r1, [r7, #12]
 800ea5c:	89ba      	ldrh	r2, [r7, #12]
 800ea5e:	2302      	movs	r3, #2
 800ea60:	9301      	str	r3, [sp, #4]
 800ea62:	897b      	ldrh	r3, [r7, #10]
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	460b      	mov	r3, r1
 800ea68:	6979      	ldr	r1, [r7, #20]
 800ea6a:	f7ff fe7f 	bl	800e76c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ea6e:	687b      	ldr	r3, [r7, #4]
}
 800ea70:	4618      	mov	r0, r3
 800ea72:	3718      	adds	r7, #24
 800ea74:	46bd      	mov	sp, r7
 800ea76:	bd80      	pop	{r7, pc}

0800ea78 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b084      	sub	sp, #16
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
 800ea80:	460b      	mov	r3, r1
 800ea82:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d106      	bne.n	800ea98 <pbuf_realloc+0x20>
 800ea8a:	4b3a      	ldr	r3, [pc, #232]	; (800eb74 <pbuf_realloc+0xfc>)
 800ea8c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ea90:	4939      	ldr	r1, [pc, #228]	; (800eb78 <pbuf_realloc+0x100>)
 800ea92:	483a      	ldr	r0, [pc, #232]	; (800eb7c <pbuf_realloc+0x104>)
 800ea94:	f007 f9ba 	bl	8015e0c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	891b      	ldrh	r3, [r3, #8]
 800ea9c:	887a      	ldrh	r2, [r7, #2]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d263      	bcs.n	800eb6a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	891a      	ldrh	r2, [r3, #8]
 800eaa6:	887b      	ldrh	r3, [r7, #2]
 800eaa8:	1ad3      	subs	r3, r2, r3
 800eaaa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800eaac:	887b      	ldrh	r3, [r7, #2]
 800eaae:	817b      	strh	r3, [r7, #10]
  q = p;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800eab4:	e018      	b.n	800eae8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	895b      	ldrh	r3, [r3, #10]
 800eaba:	897a      	ldrh	r2, [r7, #10]
 800eabc:	1ad3      	subs	r3, r2, r3
 800eabe:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	891a      	ldrh	r2, [r3, #8]
 800eac4:	893b      	ldrh	r3, [r7, #8]
 800eac6:	1ad3      	subs	r3, r2, r3
 800eac8:	b29a      	uxth	r2, r3
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d106      	bne.n	800eae8 <pbuf_realloc+0x70>
 800eada:	4b26      	ldr	r3, [pc, #152]	; (800eb74 <pbuf_realloc+0xfc>)
 800eadc:	f240 12af 	movw	r2, #431	; 0x1af
 800eae0:	4927      	ldr	r1, [pc, #156]	; (800eb80 <pbuf_realloc+0x108>)
 800eae2:	4826      	ldr	r0, [pc, #152]	; (800eb7c <pbuf_realloc+0x104>)
 800eae4:	f007 f992 	bl	8015e0c <iprintf>
  while (rem_len > q->len) {
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	895b      	ldrh	r3, [r3, #10]
 800eaec:	897a      	ldrh	r2, [r7, #10]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d8e1      	bhi.n	800eab6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	7b1b      	ldrb	r3, [r3, #12]
 800eaf6:	f003 030f 	and.w	r3, r3, #15
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d121      	bne.n	800eb42 <pbuf_realloc+0xca>
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	895b      	ldrh	r3, [r3, #10]
 800eb02:	897a      	ldrh	r2, [r7, #10]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d01c      	beq.n	800eb42 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	7b5b      	ldrb	r3, [r3, #13]
 800eb0c:	f003 0302 	and.w	r3, r3, #2
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d116      	bne.n	800eb42 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	685a      	ldr	r2, [r3, #4]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	1ad3      	subs	r3, r2, r3
 800eb1c:	b29a      	uxth	r2, r3
 800eb1e:	897b      	ldrh	r3, [r7, #10]
 800eb20:	4413      	add	r3, r2
 800eb22:	b29b      	uxth	r3, r3
 800eb24:	4619      	mov	r1, r3
 800eb26:	68f8      	ldr	r0, [r7, #12]
 800eb28:	f7fe ffc0 	bl	800daac <mem_trim>
 800eb2c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d106      	bne.n	800eb42 <pbuf_realloc+0xca>
 800eb34:	4b0f      	ldr	r3, [pc, #60]	; (800eb74 <pbuf_realloc+0xfc>)
 800eb36:	f240 12bd 	movw	r2, #445	; 0x1bd
 800eb3a:	4912      	ldr	r1, [pc, #72]	; (800eb84 <pbuf_realloc+0x10c>)
 800eb3c:	480f      	ldr	r0, [pc, #60]	; (800eb7c <pbuf_realloc+0x104>)
 800eb3e:	f007 f965 	bl	8015e0c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	897a      	ldrh	r2, [r7, #10]
 800eb46:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	895a      	ldrh	r2, [r3, #10]
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d004      	beq.n	800eb62 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	f000 f911 	bl	800ed84 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2200      	movs	r2, #0
 800eb66:	601a      	str	r2, [r3, #0]
 800eb68:	e000      	b.n	800eb6c <pbuf_realloc+0xf4>
    return;
 800eb6a:	bf00      	nop

}
 800eb6c:	3710      	adds	r7, #16
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	bd80      	pop	{r7, pc}
 800eb72:	bf00      	nop
 800eb74:	080197b0 	.word	0x080197b0
 800eb78:	0801990c 	.word	0x0801990c
 800eb7c:	08019854 	.word	0x08019854
 800eb80:	08019924 	.word	0x08019924
 800eb84:	0801993c 	.word	0x0801993c

0800eb88 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b086      	sub	sp, #24
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	60f8      	str	r0, [r7, #12]
 800eb90:	60b9      	str	r1, [r7, #8]
 800eb92:	4613      	mov	r3, r2
 800eb94:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d106      	bne.n	800ebaa <pbuf_add_header_impl+0x22>
 800eb9c:	4b2b      	ldr	r3, [pc, #172]	; (800ec4c <pbuf_add_header_impl+0xc4>)
 800eb9e:	f240 12df 	movw	r2, #479	; 0x1df
 800eba2:	492b      	ldr	r1, [pc, #172]	; (800ec50 <pbuf_add_header_impl+0xc8>)
 800eba4:	482b      	ldr	r0, [pc, #172]	; (800ec54 <pbuf_add_header_impl+0xcc>)
 800eba6:	f007 f931 	bl	8015e0c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d003      	beq.n	800ebb8 <pbuf_add_header_impl+0x30>
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebb6:	d301      	bcc.n	800ebbc <pbuf_add_header_impl+0x34>
    return 1;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e043      	b.n	800ec44 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d101      	bne.n	800ebc6 <pbuf_add_header_impl+0x3e>
    return 0;
 800ebc2:	2300      	movs	r3, #0
 800ebc4:	e03e      	b.n	800ec44 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ebc6:	68bb      	ldr	r3, [r7, #8]
 800ebc8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	891a      	ldrh	r2, [r3, #8]
 800ebce:	8a7b      	ldrh	r3, [r7, #18]
 800ebd0:	4413      	add	r3, r2
 800ebd2:	b29b      	uxth	r3, r3
 800ebd4:	8a7a      	ldrh	r2, [r7, #18]
 800ebd6:	429a      	cmp	r2, r3
 800ebd8:	d901      	bls.n	800ebde <pbuf_add_header_impl+0x56>
    return 1;
 800ebda:	2301      	movs	r3, #1
 800ebdc:	e032      	b.n	800ec44 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	7b1b      	ldrb	r3, [r3, #12]
 800ebe2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ebe4:	8a3b      	ldrh	r3, [r7, #16]
 800ebe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d00c      	beq.n	800ec08 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	685a      	ldr	r2, [r3, #4]
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	425b      	negs	r3, r3
 800ebf6:	4413      	add	r3, r2
 800ebf8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	3310      	adds	r3, #16
 800ebfe:	697a      	ldr	r2, [r7, #20]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d20d      	bcs.n	800ec20 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ec04:	2301      	movs	r3, #1
 800ec06:	e01d      	b.n	800ec44 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ec08:	79fb      	ldrb	r3, [r7, #7]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d006      	beq.n	800ec1c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	685a      	ldr	r2, [r3, #4]
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	425b      	negs	r3, r3
 800ec16:	4413      	add	r3, r2
 800ec18:	617b      	str	r3, [r7, #20]
 800ec1a:	e001      	b.n	800ec20 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ec1c:	2301      	movs	r3, #1
 800ec1e:	e011      	b.n	800ec44 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	697a      	ldr	r2, [r7, #20]
 800ec24:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	895a      	ldrh	r2, [r3, #10]
 800ec2a:	8a7b      	ldrh	r3, [r7, #18]
 800ec2c:	4413      	add	r3, r2
 800ec2e:	b29a      	uxth	r2, r3
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	891a      	ldrh	r2, [r3, #8]
 800ec38:	8a7b      	ldrh	r3, [r7, #18]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	b29a      	uxth	r2, r3
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	811a      	strh	r2, [r3, #8]


  return 0;
 800ec42:	2300      	movs	r3, #0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3718      	adds	r7, #24
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}
 800ec4c:	080197b0 	.word	0x080197b0
 800ec50:	08019958 	.word	0x08019958
 800ec54:	08019854 	.word	0x08019854

0800ec58 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b082      	sub	sp, #8
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
 800ec60:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ec62:	2200      	movs	r2, #0
 800ec64:	6839      	ldr	r1, [r7, #0]
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f7ff ff8e 	bl	800eb88 <pbuf_add_header_impl>
 800ec6c:	4603      	mov	r3, r0
}
 800ec6e:	4618      	mov	r0, r3
 800ec70:	3708      	adds	r7, #8
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
	...

0800ec78 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d106      	bne.n	800ec96 <pbuf_remove_header+0x1e>
 800ec88:	4b20      	ldr	r3, [pc, #128]	; (800ed0c <pbuf_remove_header+0x94>)
 800ec8a:	f240 224b 	movw	r2, #587	; 0x24b
 800ec8e:	4920      	ldr	r1, [pc, #128]	; (800ed10 <pbuf_remove_header+0x98>)
 800ec90:	4820      	ldr	r0, [pc, #128]	; (800ed14 <pbuf_remove_header+0x9c>)
 800ec92:	f007 f8bb 	bl	8015e0c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d003      	beq.n	800eca4 <pbuf_remove_header+0x2c>
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eca2:	d301      	bcc.n	800eca8 <pbuf_remove_header+0x30>
    return 1;
 800eca4:	2301      	movs	r3, #1
 800eca6:	e02c      	b.n	800ed02 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d101      	bne.n	800ecb2 <pbuf_remove_header+0x3a>
    return 0;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	e027      	b.n	800ed02 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	895b      	ldrh	r3, [r3, #10]
 800ecba:	89fa      	ldrh	r2, [r7, #14]
 800ecbc:	429a      	cmp	r2, r3
 800ecbe:	d908      	bls.n	800ecd2 <pbuf_remove_header+0x5a>
 800ecc0:	4b12      	ldr	r3, [pc, #72]	; (800ed0c <pbuf_remove_header+0x94>)
 800ecc2:	f240 2255 	movw	r2, #597	; 0x255
 800ecc6:	4914      	ldr	r1, [pc, #80]	; (800ed18 <pbuf_remove_header+0xa0>)
 800ecc8:	4812      	ldr	r0, [pc, #72]	; (800ed14 <pbuf_remove_header+0x9c>)
 800ecca:	f007 f89f 	bl	8015e0c <iprintf>
 800ecce:	2301      	movs	r3, #1
 800ecd0:	e017      	b.n	800ed02 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	685a      	ldr	r2, [r3, #4]
 800ecdc:	683b      	ldr	r3, [r7, #0]
 800ecde:	441a      	add	r2, r3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	895a      	ldrh	r2, [r3, #10]
 800ece8:	89fb      	ldrh	r3, [r7, #14]
 800ecea:	1ad3      	subs	r3, r2, r3
 800ecec:	b29a      	uxth	r2, r3
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	891a      	ldrh	r2, [r3, #8]
 800ecf6:	89fb      	ldrh	r3, [r7, #14]
 800ecf8:	1ad3      	subs	r3, r2, r3
 800ecfa:	b29a      	uxth	r2, r3
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ed00:	2300      	movs	r3, #0
}
 800ed02:	4618      	mov	r0, r3
 800ed04:	3710      	adds	r7, #16
 800ed06:	46bd      	mov	sp, r7
 800ed08:	bd80      	pop	{r7, pc}
 800ed0a:	bf00      	nop
 800ed0c:	080197b0 	.word	0x080197b0
 800ed10:	08019958 	.word	0x08019958
 800ed14:	08019854 	.word	0x08019854
 800ed18:	08019964 	.word	0x08019964

0800ed1c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	460b      	mov	r3, r1
 800ed26:	807b      	strh	r3, [r7, #2]
 800ed28:	4613      	mov	r3, r2
 800ed2a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ed2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	da08      	bge.n	800ed46 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800ed34:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ed38:	425b      	negs	r3, r3
 800ed3a:	4619      	mov	r1, r3
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	f7ff ff9b 	bl	800ec78 <pbuf_remove_header>
 800ed42:	4603      	mov	r3, r0
 800ed44:	e007      	b.n	800ed56 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800ed46:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ed4a:	787a      	ldrb	r2, [r7, #1]
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7ff ff1a 	bl	800eb88 <pbuf_add_header_impl>
 800ed54:	4603      	mov	r3, r0
  }
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b082      	sub	sp, #8
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
 800ed66:	460b      	mov	r3, r1
 800ed68:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800ed6a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ed6e:	2201      	movs	r2, #1
 800ed70:	4619      	mov	r1, r3
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f7ff ffd2 	bl	800ed1c <pbuf_header_impl>
 800ed78:	4603      	mov	r3, r0
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3708      	adds	r7, #8
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}
	...

0800ed84 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b088      	sub	sp, #32
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d10b      	bne.n	800edaa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d106      	bne.n	800eda6 <pbuf_free+0x22>
 800ed98:	4b3b      	ldr	r3, [pc, #236]	; (800ee88 <pbuf_free+0x104>)
 800ed9a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800ed9e:	493b      	ldr	r1, [pc, #236]	; (800ee8c <pbuf_free+0x108>)
 800eda0:	483b      	ldr	r0, [pc, #236]	; (800ee90 <pbuf_free+0x10c>)
 800eda2:	f007 f833 	bl	8015e0c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800eda6:	2300      	movs	r3, #0
 800eda8:	e069      	b.n	800ee7e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800edaa:	2300      	movs	r3, #0
 800edac:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800edae:	e062      	b.n	800ee76 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800edb0:	f006 ff64 	bl	8015c7c <sys_arch_protect>
 800edb4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	7b9b      	ldrb	r3, [r3, #14]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d106      	bne.n	800edcc <pbuf_free+0x48>
 800edbe:	4b32      	ldr	r3, [pc, #200]	; (800ee88 <pbuf_free+0x104>)
 800edc0:	f240 22f1 	movw	r2, #753	; 0x2f1
 800edc4:	4933      	ldr	r1, [pc, #204]	; (800ee94 <pbuf_free+0x110>)
 800edc6:	4832      	ldr	r0, [pc, #200]	; (800ee90 <pbuf_free+0x10c>)
 800edc8:	f007 f820 	bl	8015e0c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	7b9b      	ldrb	r3, [r3, #14]
 800edd0:	3b01      	subs	r3, #1
 800edd2:	b2da      	uxtb	r2, r3
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	739a      	strb	r2, [r3, #14]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	7b9b      	ldrb	r3, [r3, #14]
 800eddc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800edde:	69b8      	ldr	r0, [r7, #24]
 800ede0:	f006 ff5a 	bl	8015c98 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800ede4:	7dfb      	ldrb	r3, [r7, #23]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d143      	bne.n	800ee72 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	7b1b      	ldrb	r3, [r3, #12]
 800edf4:	f003 030f 	and.w	r3, r3, #15
 800edf8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	7b5b      	ldrb	r3, [r3, #13]
 800edfe:	f003 0302 	and.w	r3, r3, #2
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d011      	beq.n	800ee2a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	691b      	ldr	r3, [r3, #16]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d106      	bne.n	800ee20 <pbuf_free+0x9c>
 800ee12:	4b1d      	ldr	r3, [pc, #116]	; (800ee88 <pbuf_free+0x104>)
 800ee14:	f240 22ff 	movw	r2, #767	; 0x2ff
 800ee18:	491f      	ldr	r1, [pc, #124]	; (800ee98 <pbuf_free+0x114>)
 800ee1a:	481d      	ldr	r0, [pc, #116]	; (800ee90 <pbuf_free+0x10c>)
 800ee1c:	f006 fff6 	bl	8015e0c <iprintf>
        pc->custom_free_function(p);
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	691b      	ldr	r3, [r3, #16]
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	4798      	blx	r3
 800ee28:	e01d      	b.n	800ee66 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800ee2a:	7bfb      	ldrb	r3, [r7, #15]
 800ee2c:	2b02      	cmp	r3, #2
 800ee2e:	d104      	bne.n	800ee3a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800ee30:	6879      	ldr	r1, [r7, #4]
 800ee32:	200c      	movs	r0, #12
 800ee34:	f7ff f95e 	bl	800e0f4 <memp_free>
 800ee38:	e015      	b.n	800ee66 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ee3a:	7bfb      	ldrb	r3, [r7, #15]
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d104      	bne.n	800ee4a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800ee40:	6879      	ldr	r1, [r7, #4]
 800ee42:	200b      	movs	r0, #11
 800ee44:	f7ff f956 	bl	800e0f4 <memp_free>
 800ee48:	e00d      	b.n	800ee66 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ee4a:	7bfb      	ldrb	r3, [r7, #15]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d103      	bne.n	800ee58 <pbuf_free+0xd4>
          mem_free(p);
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f7fe fd9b 	bl	800d98c <mem_free>
 800ee56:	e006      	b.n	800ee66 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ee58:	4b0b      	ldr	r3, [pc, #44]	; (800ee88 <pbuf_free+0x104>)
 800ee5a:	f240 320f 	movw	r2, #783	; 0x30f
 800ee5e:	490f      	ldr	r1, [pc, #60]	; (800ee9c <pbuf_free+0x118>)
 800ee60:	480b      	ldr	r0, [pc, #44]	; (800ee90 <pbuf_free+0x10c>)
 800ee62:	f006 ffd3 	bl	8015e0c <iprintf>
        }
      }
      count++;
 800ee66:	7ffb      	ldrb	r3, [r7, #31]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	607b      	str	r3, [r7, #4]
 800ee70:	e001      	b.n	800ee76 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800ee72:	2300      	movs	r3, #0
 800ee74:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	d199      	bne.n	800edb0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ee7c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ee7e:	4618      	mov	r0, r3
 800ee80:	3720      	adds	r7, #32
 800ee82:	46bd      	mov	sp, r7
 800ee84:	bd80      	pop	{r7, pc}
 800ee86:	bf00      	nop
 800ee88:	080197b0 	.word	0x080197b0
 800ee8c:	08019958 	.word	0x08019958
 800ee90:	08019854 	.word	0x08019854
 800ee94:	08019984 	.word	0x08019984
 800ee98:	0801999c 	.word	0x0801999c
 800ee9c:	080199c0 	.word	0x080199c0

0800eea0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800eea0:	b480      	push	{r7}
 800eea2:	b085      	sub	sp, #20
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800eeac:	e005      	b.n	800eeba <pbuf_clen+0x1a>
    ++len;
 800eeae:	89fb      	ldrh	r3, [r7, #14]
 800eeb0:	3301      	adds	r3, #1
 800eeb2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d1f6      	bne.n	800eeae <pbuf_clen+0xe>
  }
  return len;
 800eec0:	89fb      	ldrh	r3, [r7, #14]
}
 800eec2:	4618      	mov	r0, r3
 800eec4:	3714      	adds	r7, #20
 800eec6:	46bd      	mov	sp, r7
 800eec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eecc:	4770      	bx	lr
	...

0800eed0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800eed0:	b580      	push	{r7, lr}
 800eed2:	b084      	sub	sp, #16
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d016      	beq.n	800ef0c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800eede:	f006 fecd 	bl	8015c7c <sys_arch_protect>
 800eee2:	60f8      	str	r0, [r7, #12]
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	7b9b      	ldrb	r3, [r3, #14]
 800eee8:	3301      	adds	r3, #1
 800eeea:	b2da      	uxtb	r2, r3
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	739a      	strb	r2, [r3, #14]
 800eef0:	68f8      	ldr	r0, [r7, #12]
 800eef2:	f006 fed1 	bl	8015c98 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	7b9b      	ldrb	r3, [r3, #14]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d106      	bne.n	800ef0c <pbuf_ref+0x3c>
 800eefe:	4b05      	ldr	r3, [pc, #20]	; (800ef14 <pbuf_ref+0x44>)
 800ef00:	f240 3242 	movw	r2, #834	; 0x342
 800ef04:	4904      	ldr	r1, [pc, #16]	; (800ef18 <pbuf_ref+0x48>)
 800ef06:	4805      	ldr	r0, [pc, #20]	; (800ef1c <pbuf_ref+0x4c>)
 800ef08:	f006 ff80 	bl	8015e0c <iprintf>
  }
}
 800ef0c:	bf00      	nop
 800ef0e:	3710      	adds	r7, #16
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	080197b0 	.word	0x080197b0
 800ef18:	080199d4 	.word	0x080199d4
 800ef1c:	08019854 	.word	0x08019854

0800ef20 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b084      	sub	sp, #16
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
 800ef28:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d002      	beq.n	800ef36 <pbuf_cat+0x16>
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d107      	bne.n	800ef46 <pbuf_cat+0x26>
 800ef36:	4b20      	ldr	r3, [pc, #128]	; (800efb8 <pbuf_cat+0x98>)
 800ef38:	f240 3259 	movw	r2, #857	; 0x359
 800ef3c:	491f      	ldr	r1, [pc, #124]	; (800efbc <pbuf_cat+0x9c>)
 800ef3e:	4820      	ldr	r0, [pc, #128]	; (800efc0 <pbuf_cat+0xa0>)
 800ef40:	f006 ff64 	bl	8015e0c <iprintf>
 800ef44:	e034      	b.n	800efb0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	60fb      	str	r3, [r7, #12]
 800ef4a:	e00a      	b.n	800ef62 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	891a      	ldrh	r2, [r3, #8]
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	891b      	ldrh	r3, [r3, #8]
 800ef54:	4413      	add	r3, r2
 800ef56:	b29a      	uxth	r2, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	60fb      	str	r3, [r7, #12]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d1f0      	bne.n	800ef4c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	891a      	ldrh	r2, [r3, #8]
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	895b      	ldrh	r3, [r3, #10]
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d006      	beq.n	800ef84 <pbuf_cat+0x64>
 800ef76:	4b10      	ldr	r3, [pc, #64]	; (800efb8 <pbuf_cat+0x98>)
 800ef78:	f240 3262 	movw	r2, #866	; 0x362
 800ef7c:	4911      	ldr	r1, [pc, #68]	; (800efc4 <pbuf_cat+0xa4>)
 800ef7e:	4810      	ldr	r0, [pc, #64]	; (800efc0 <pbuf_cat+0xa0>)
 800ef80:	f006 ff44 	bl	8015e0c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d006      	beq.n	800ef9a <pbuf_cat+0x7a>
 800ef8c:	4b0a      	ldr	r3, [pc, #40]	; (800efb8 <pbuf_cat+0x98>)
 800ef8e:	f240 3263 	movw	r2, #867	; 0x363
 800ef92:	490d      	ldr	r1, [pc, #52]	; (800efc8 <pbuf_cat+0xa8>)
 800ef94:	480a      	ldr	r0, [pc, #40]	; (800efc0 <pbuf_cat+0xa0>)
 800ef96:	f006 ff39 	bl	8015e0c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	891a      	ldrh	r2, [r3, #8]
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	891b      	ldrh	r3, [r3, #8]
 800efa2:	4413      	add	r3, r2
 800efa4:	b29a      	uxth	r2, r3
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	683a      	ldr	r2, [r7, #0]
 800efae:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	080197b0 	.word	0x080197b0
 800efbc:	080199e8 	.word	0x080199e8
 800efc0:	08019854 	.word	0x08019854
 800efc4:	08019a20 	.word	0x08019a20
 800efc8:	08019a50 	.word	0x08019a50

0800efcc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b086      	sub	sp, #24
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800efd6:	2300      	movs	r3, #0
 800efd8:	617b      	str	r3, [r7, #20]
 800efda:	2300      	movs	r3, #0
 800efdc:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d008      	beq.n	800eff6 <pbuf_copy+0x2a>
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d005      	beq.n	800eff6 <pbuf_copy+0x2a>
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	891a      	ldrh	r2, [r3, #8]
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	891b      	ldrh	r3, [r3, #8]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d209      	bcs.n	800f00a <pbuf_copy+0x3e>
 800eff6:	4b57      	ldr	r3, [pc, #348]	; (800f154 <pbuf_copy+0x188>)
 800eff8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800effc:	4956      	ldr	r1, [pc, #344]	; (800f158 <pbuf_copy+0x18c>)
 800effe:	4857      	ldr	r0, [pc, #348]	; (800f15c <pbuf_copy+0x190>)
 800f000:	f006 ff04 	bl	8015e0c <iprintf>
 800f004:	f06f 030f 	mvn.w	r3, #15
 800f008:	e09f      	b.n	800f14a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	895b      	ldrh	r3, [r3, #10]
 800f00e:	461a      	mov	r2, r3
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	1ad2      	subs	r2, r2, r3
 800f014:	683b      	ldr	r3, [r7, #0]
 800f016:	895b      	ldrh	r3, [r3, #10]
 800f018:	4619      	mov	r1, r3
 800f01a:	693b      	ldr	r3, [r7, #16]
 800f01c:	1acb      	subs	r3, r1, r3
 800f01e:	429a      	cmp	r2, r3
 800f020:	d306      	bcc.n	800f030 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	895b      	ldrh	r3, [r3, #10]
 800f026:	461a      	mov	r2, r3
 800f028:	693b      	ldr	r3, [r7, #16]
 800f02a:	1ad3      	subs	r3, r2, r3
 800f02c:	60fb      	str	r3, [r7, #12]
 800f02e:	e005      	b.n	800f03c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	895b      	ldrh	r3, [r3, #10]
 800f034:	461a      	mov	r2, r3
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	1ad3      	subs	r3, r2, r3
 800f03a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	685a      	ldr	r2, [r3, #4]
 800f040:	697b      	ldr	r3, [r7, #20]
 800f042:	18d0      	adds	r0, r2, r3
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	685a      	ldr	r2, [r3, #4]
 800f048:	693b      	ldr	r3, [r7, #16]
 800f04a:	4413      	add	r3, r2
 800f04c:	68fa      	ldr	r2, [r7, #12]
 800f04e:	4619      	mov	r1, r3
 800f050:	f006 feac 	bl	8015dac <memcpy>
    offset_to += len;
 800f054:	697a      	ldr	r2, [r7, #20]
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	4413      	add	r3, r2
 800f05a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f05c:	693a      	ldr	r2, [r7, #16]
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	4413      	add	r3, r2
 800f062:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	895b      	ldrh	r3, [r3, #10]
 800f068:	461a      	mov	r2, r3
 800f06a:	697b      	ldr	r3, [r7, #20]
 800f06c:	4293      	cmp	r3, r2
 800f06e:	d906      	bls.n	800f07e <pbuf_copy+0xb2>
 800f070:	4b38      	ldr	r3, [pc, #224]	; (800f154 <pbuf_copy+0x188>)
 800f072:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f076:	493a      	ldr	r1, [pc, #232]	; (800f160 <pbuf_copy+0x194>)
 800f078:	4838      	ldr	r0, [pc, #224]	; (800f15c <pbuf_copy+0x190>)
 800f07a:	f006 fec7 	bl	8015e0c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	895b      	ldrh	r3, [r3, #10]
 800f082:	461a      	mov	r2, r3
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	4293      	cmp	r3, r2
 800f088:	d906      	bls.n	800f098 <pbuf_copy+0xcc>
 800f08a:	4b32      	ldr	r3, [pc, #200]	; (800f154 <pbuf_copy+0x188>)
 800f08c:	f240 32da 	movw	r2, #986	; 0x3da
 800f090:	4934      	ldr	r1, [pc, #208]	; (800f164 <pbuf_copy+0x198>)
 800f092:	4832      	ldr	r0, [pc, #200]	; (800f15c <pbuf_copy+0x190>)
 800f094:	f006 feba 	bl	8015e0c <iprintf>
    if (offset_from >= p_from->len) {
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	895b      	ldrh	r3, [r3, #10]
 800f09c:	461a      	mov	r2, r3
 800f09e:	693b      	ldr	r3, [r7, #16]
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d304      	bcc.n	800f0ae <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f0a8:	683b      	ldr	r3, [r7, #0]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	895b      	ldrh	r3, [r3, #10]
 800f0b2:	461a      	mov	r2, r3
 800f0b4:	697b      	ldr	r3, [r7, #20]
 800f0b6:	4293      	cmp	r3, r2
 800f0b8:	d114      	bne.n	800f0e4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d10c      	bne.n	800f0e4 <pbuf_copy+0x118>
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d009      	beq.n	800f0e4 <pbuf_copy+0x118>
 800f0d0:	4b20      	ldr	r3, [pc, #128]	; (800f154 <pbuf_copy+0x188>)
 800f0d2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f0d6:	4924      	ldr	r1, [pc, #144]	; (800f168 <pbuf_copy+0x19c>)
 800f0d8:	4820      	ldr	r0, [pc, #128]	; (800f15c <pbuf_copy+0x190>)
 800f0da:	f006 fe97 	bl	8015e0c <iprintf>
 800f0de:	f06f 030f 	mvn.w	r3, #15
 800f0e2:	e032      	b.n	800f14a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d013      	beq.n	800f112 <pbuf_copy+0x146>
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	895a      	ldrh	r2, [r3, #10]
 800f0ee:	683b      	ldr	r3, [r7, #0]
 800f0f0:	891b      	ldrh	r3, [r3, #8]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d10d      	bne.n	800f112 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d009      	beq.n	800f112 <pbuf_copy+0x146>
 800f0fe:	4b15      	ldr	r3, [pc, #84]	; (800f154 <pbuf_copy+0x188>)
 800f100:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f104:	4919      	ldr	r1, [pc, #100]	; (800f16c <pbuf_copy+0x1a0>)
 800f106:	4815      	ldr	r0, [pc, #84]	; (800f15c <pbuf_copy+0x190>)
 800f108:	f006 fe80 	bl	8015e0c <iprintf>
 800f10c:	f06f 0305 	mvn.w	r3, #5
 800f110:	e01b      	b.n	800f14a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d013      	beq.n	800f140 <pbuf_copy+0x174>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	895a      	ldrh	r2, [r3, #10]
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	891b      	ldrh	r3, [r3, #8]
 800f120:	429a      	cmp	r2, r3
 800f122:	d10d      	bne.n	800f140 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d009      	beq.n	800f140 <pbuf_copy+0x174>
 800f12c:	4b09      	ldr	r3, [pc, #36]	; (800f154 <pbuf_copy+0x188>)
 800f12e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f132:	490e      	ldr	r1, [pc, #56]	; (800f16c <pbuf_copy+0x1a0>)
 800f134:	4809      	ldr	r0, [pc, #36]	; (800f15c <pbuf_copy+0x190>)
 800f136:	f006 fe69 	bl	8015e0c <iprintf>
 800f13a:	f06f 0305 	mvn.w	r3, #5
 800f13e:	e004      	b.n	800f14a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	f47f af61 	bne.w	800f00a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f148:	2300      	movs	r3, #0
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3718      	adds	r7, #24
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
 800f152:	bf00      	nop
 800f154:	080197b0 	.word	0x080197b0
 800f158:	08019a9c 	.word	0x08019a9c
 800f15c:	08019854 	.word	0x08019854
 800f160:	08019acc 	.word	0x08019acc
 800f164:	08019ae4 	.word	0x08019ae4
 800f168:	08019b00 	.word	0x08019b00
 800f16c:	08019b10 	.word	0x08019b10

0800f170 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b088      	sub	sp, #32
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	4611      	mov	r1, r2
 800f17c:	461a      	mov	r2, r3
 800f17e:	460b      	mov	r3, r1
 800f180:	80fb      	strh	r3, [r7, #6]
 800f182:	4613      	mov	r3, r2
 800f184:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f186:	2300      	movs	r3, #0
 800f188:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f18a:	2300      	movs	r3, #0
 800f18c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d108      	bne.n	800f1a6 <pbuf_copy_partial+0x36>
 800f194:	4b2b      	ldr	r3, [pc, #172]	; (800f244 <pbuf_copy_partial+0xd4>)
 800f196:	f240 420a 	movw	r2, #1034	; 0x40a
 800f19a:	492b      	ldr	r1, [pc, #172]	; (800f248 <pbuf_copy_partial+0xd8>)
 800f19c:	482b      	ldr	r0, [pc, #172]	; (800f24c <pbuf_copy_partial+0xdc>)
 800f19e:	f006 fe35 	bl	8015e0c <iprintf>
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	e04a      	b.n	800f23c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d108      	bne.n	800f1be <pbuf_copy_partial+0x4e>
 800f1ac:	4b25      	ldr	r3, [pc, #148]	; (800f244 <pbuf_copy_partial+0xd4>)
 800f1ae:	f240 420b 	movw	r2, #1035	; 0x40b
 800f1b2:	4927      	ldr	r1, [pc, #156]	; (800f250 <pbuf_copy_partial+0xe0>)
 800f1b4:	4825      	ldr	r0, [pc, #148]	; (800f24c <pbuf_copy_partial+0xdc>)
 800f1b6:	f006 fe29 	bl	8015e0c <iprintf>
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	e03e      	b.n	800f23c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	61fb      	str	r3, [r7, #28]
 800f1c2:	e034      	b.n	800f22e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f1c4:	88bb      	ldrh	r3, [r7, #4]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d00a      	beq.n	800f1e0 <pbuf_copy_partial+0x70>
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	895b      	ldrh	r3, [r3, #10]
 800f1ce:	88ba      	ldrh	r2, [r7, #4]
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d305      	bcc.n	800f1e0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f1d4:	69fb      	ldr	r3, [r7, #28]
 800f1d6:	895b      	ldrh	r3, [r3, #10]
 800f1d8:	88ba      	ldrh	r2, [r7, #4]
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	80bb      	strh	r3, [r7, #4]
 800f1de:	e023      	b.n	800f228 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	895a      	ldrh	r2, [r3, #10]
 800f1e4:	88bb      	ldrh	r3, [r7, #4]
 800f1e6:	1ad3      	subs	r3, r2, r3
 800f1e8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f1ea:	8b3a      	ldrh	r2, [r7, #24]
 800f1ec:	88fb      	ldrh	r3, [r7, #6]
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d901      	bls.n	800f1f6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f1f2:	88fb      	ldrh	r3, [r7, #6]
 800f1f4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f1f6:	8b7b      	ldrh	r3, [r7, #26]
 800f1f8:	68ba      	ldr	r2, [r7, #8]
 800f1fa:	18d0      	adds	r0, r2, r3
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	685a      	ldr	r2, [r3, #4]
 800f200:	88bb      	ldrh	r3, [r7, #4]
 800f202:	4413      	add	r3, r2
 800f204:	8b3a      	ldrh	r2, [r7, #24]
 800f206:	4619      	mov	r1, r3
 800f208:	f006 fdd0 	bl	8015dac <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f20c:	8afa      	ldrh	r2, [r7, #22]
 800f20e:	8b3b      	ldrh	r3, [r7, #24]
 800f210:	4413      	add	r3, r2
 800f212:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f214:	8b7a      	ldrh	r2, [r7, #26]
 800f216:	8b3b      	ldrh	r3, [r7, #24]
 800f218:	4413      	add	r3, r2
 800f21a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f21c:	88fa      	ldrh	r2, [r7, #6]
 800f21e:	8b3b      	ldrh	r3, [r7, #24]
 800f220:	1ad3      	subs	r3, r2, r3
 800f222:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f224:	2300      	movs	r3, #0
 800f226:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f228:	69fb      	ldr	r3, [r7, #28]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	61fb      	str	r3, [r7, #28]
 800f22e:	88fb      	ldrh	r3, [r7, #6]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d002      	beq.n	800f23a <pbuf_copy_partial+0xca>
 800f234:	69fb      	ldr	r3, [r7, #28]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d1c4      	bne.n	800f1c4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f23a:	8afb      	ldrh	r3, [r7, #22]
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3720      	adds	r7, #32
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}
 800f244:	080197b0 	.word	0x080197b0
 800f248:	08019b3c 	.word	0x08019b3c
 800f24c:	08019854 	.word	0x08019854
 800f250:	08019b5c 	.word	0x08019b5c

0800f254 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b084      	sub	sp, #16
 800f258:	af00      	add	r7, sp, #0
 800f25a:	4603      	mov	r3, r0
 800f25c:	603a      	str	r2, [r7, #0]
 800f25e:	71fb      	strb	r3, [r7, #7]
 800f260:	460b      	mov	r3, r1
 800f262:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	8919      	ldrh	r1, [r3, #8]
 800f268:	88ba      	ldrh	r2, [r7, #4]
 800f26a:	79fb      	ldrb	r3, [r7, #7]
 800f26c:	4618      	mov	r0, r3
 800f26e:	f7ff faa7 	bl	800e7c0 <pbuf_alloc>
 800f272:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d101      	bne.n	800f27e <pbuf_clone+0x2a>
    return NULL;
 800f27a:	2300      	movs	r3, #0
 800f27c:	e011      	b.n	800f2a2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f27e:	6839      	ldr	r1, [r7, #0]
 800f280:	68f8      	ldr	r0, [r7, #12]
 800f282:	f7ff fea3 	bl	800efcc <pbuf_copy>
 800f286:	4603      	mov	r3, r0
 800f288:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f28a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d006      	beq.n	800f2a0 <pbuf_clone+0x4c>
 800f292:	4b06      	ldr	r3, [pc, #24]	; (800f2ac <pbuf_clone+0x58>)
 800f294:	f240 5224 	movw	r2, #1316	; 0x524
 800f298:	4905      	ldr	r1, [pc, #20]	; (800f2b0 <pbuf_clone+0x5c>)
 800f29a:	4806      	ldr	r0, [pc, #24]	; (800f2b4 <pbuf_clone+0x60>)
 800f29c:	f006 fdb6 	bl	8015e0c <iprintf>
  return q;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3710      	adds	r7, #16
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	080197b0 	.word	0x080197b0
 800f2b0:	08019c68 	.word	0x08019c68
 800f2b4:	08019854 	.word	0x08019854

0800f2b8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f2bc:	f006 fdbe 	bl	8015e3c <rand>
 800f2c0:	4603      	mov	r3, r0
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f2ce:	b29a      	uxth	r2, r3
 800f2d0:	4b01      	ldr	r3, [pc, #4]	; (800f2d8 <tcp_init+0x20>)
 800f2d2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f2d4:	bf00      	nop
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	24000044 	.word	0x24000044

0800f2dc <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b082      	sub	sp, #8
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	7d1b      	ldrb	r3, [r3, #20]
 800f2e8:	2b01      	cmp	r3, #1
 800f2ea:	d105      	bne.n	800f2f8 <tcp_free+0x1c>
 800f2ec:	4b06      	ldr	r3, [pc, #24]	; (800f308 <tcp_free+0x2c>)
 800f2ee:	22d4      	movs	r2, #212	; 0xd4
 800f2f0:	4906      	ldr	r1, [pc, #24]	; (800f30c <tcp_free+0x30>)
 800f2f2:	4807      	ldr	r0, [pc, #28]	; (800f310 <tcp_free+0x34>)
 800f2f4:	f006 fd8a 	bl	8015e0c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f2f8:	6879      	ldr	r1, [r7, #4]
 800f2fa:	2001      	movs	r0, #1
 800f2fc:	f7fe fefa 	bl	800e0f4 <memp_free>
}
 800f300:	bf00      	nop
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	08019d48 	.word	0x08019d48
 800f30c:	08019dbc 	.word	0x08019dbc
 800f310:	08019dd0 	.word	0x08019dd0

0800f314 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	7d1b      	ldrb	r3, [r3, #20]
 800f320:	2b01      	cmp	r3, #1
 800f322:	d105      	bne.n	800f330 <tcp_free_listen+0x1c>
 800f324:	4b06      	ldr	r3, [pc, #24]	; (800f340 <tcp_free_listen+0x2c>)
 800f326:	22df      	movs	r2, #223	; 0xdf
 800f328:	4906      	ldr	r1, [pc, #24]	; (800f344 <tcp_free_listen+0x30>)
 800f32a:	4807      	ldr	r0, [pc, #28]	; (800f348 <tcp_free_listen+0x34>)
 800f32c:	f006 fd6e 	bl	8015e0c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f330:	6879      	ldr	r1, [r7, #4]
 800f332:	2002      	movs	r0, #2
 800f334:	f7fe fede 	bl	800e0f4 <memp_free>
}
 800f338:	bf00      	nop
 800f33a:	3708      	adds	r7, #8
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	08019d48 	.word	0x08019d48
 800f344:	08019df8 	.word	0x08019df8
 800f348:	08019dd0 	.word	0x08019dd0

0800f34c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f350:	f001 f9a0 	bl	8010694 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f354:	4b07      	ldr	r3, [pc, #28]	; (800f374 <tcp_tmr+0x28>)
 800f356:	781b      	ldrb	r3, [r3, #0]
 800f358:	3301      	adds	r3, #1
 800f35a:	b2da      	uxtb	r2, r3
 800f35c:	4b05      	ldr	r3, [pc, #20]	; (800f374 <tcp_tmr+0x28>)
 800f35e:	701a      	strb	r2, [r3, #0]
 800f360:	4b04      	ldr	r3, [pc, #16]	; (800f374 <tcp_tmr+0x28>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	f003 0301 	and.w	r3, r3, #1
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d001      	beq.n	800f370 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f36c:	f000 fe68 	bl	8010040 <tcp_slowtmr>
  }
}
 800f370:	bf00      	nop
 800f372:	bd80      	pop	{r7, pc}
 800f374:	240067b5 	.word	0x240067b5

0800f378 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b084      	sub	sp, #16
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d105      	bne.n	800f394 <tcp_remove_listener+0x1c>
 800f388:	4b0d      	ldr	r3, [pc, #52]	; (800f3c0 <tcp_remove_listener+0x48>)
 800f38a:	22ff      	movs	r2, #255	; 0xff
 800f38c:	490d      	ldr	r1, [pc, #52]	; (800f3c4 <tcp_remove_listener+0x4c>)
 800f38e:	480e      	ldr	r0, [pc, #56]	; (800f3c8 <tcp_remove_listener+0x50>)
 800f390:	f006 fd3c 	bl	8015e0c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	60fb      	str	r3, [r7, #12]
 800f398:	e00a      	b.n	800f3b0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f39e:	683a      	ldr	r2, [r7, #0]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d102      	bne.n	800f3aa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2200      	movs	r2, #0
 800f3a8:	679a      	str	r2, [r3, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	68db      	ldr	r3, [r3, #12]
 800f3ae:	60fb      	str	r3, [r7, #12]
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d1f1      	bne.n	800f39a <tcp_remove_listener+0x22>
    }
  }
}
 800f3b6:	bf00      	nop
 800f3b8:	bf00      	nop
 800f3ba:	3710      	adds	r7, #16
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	08019d48 	.word	0x08019d48
 800f3c4:	08019e14 	.word	0x08019e14
 800f3c8:	08019dd0 	.word	0x08019dd0

0800f3cc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b084      	sub	sp, #16
 800f3d0:	af00      	add	r7, sp, #0
 800f3d2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d106      	bne.n	800f3e8 <tcp_listen_closed+0x1c>
 800f3da:	4b14      	ldr	r3, [pc, #80]	; (800f42c <tcp_listen_closed+0x60>)
 800f3dc:	f240 1211 	movw	r2, #273	; 0x111
 800f3e0:	4913      	ldr	r1, [pc, #76]	; (800f430 <tcp_listen_closed+0x64>)
 800f3e2:	4814      	ldr	r0, [pc, #80]	; (800f434 <tcp_listen_closed+0x68>)
 800f3e4:	f006 fd12 	bl	8015e0c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	7d1b      	ldrb	r3, [r3, #20]
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d006      	beq.n	800f3fe <tcp_listen_closed+0x32>
 800f3f0:	4b0e      	ldr	r3, [pc, #56]	; (800f42c <tcp_listen_closed+0x60>)
 800f3f2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f3f6:	4910      	ldr	r1, [pc, #64]	; (800f438 <tcp_listen_closed+0x6c>)
 800f3f8:	480e      	ldr	r0, [pc, #56]	; (800f434 <tcp_listen_closed+0x68>)
 800f3fa:	f006 fd07 	bl	8015e0c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f3fe:	2301      	movs	r3, #1
 800f400:	60fb      	str	r3, [r7, #12]
 800f402:	e00b      	b.n	800f41c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f404:	4a0d      	ldr	r2, [pc, #52]	; (800f43c <tcp_listen_closed+0x70>)
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	6879      	ldr	r1, [r7, #4]
 800f410:	4618      	mov	r0, r3
 800f412:	f7ff ffb1 	bl	800f378 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	3301      	adds	r3, #1
 800f41a:	60fb      	str	r3, [r7, #12]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	2b03      	cmp	r3, #3
 800f420:	d9f0      	bls.n	800f404 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f422:	bf00      	nop
 800f424:	bf00      	nop
 800f426:	3710      	adds	r7, #16
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	08019d48 	.word	0x08019d48
 800f430:	08019e3c 	.word	0x08019e3c
 800f434:	08019dd0 	.word	0x08019dd0
 800f438:	08019e48 	.word	0x08019e48
 800f43c:	08019d38 	.word	0x08019d38

0800f440 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f440:	b5b0      	push	{r4, r5, r7, lr}
 800f442:	b088      	sub	sp, #32
 800f444:	af04      	add	r7, sp, #16
 800f446:	6078      	str	r0, [r7, #4]
 800f448:	460b      	mov	r3, r1
 800f44a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d106      	bne.n	800f460 <tcp_close_shutdown+0x20>
 800f452:	4b63      	ldr	r3, [pc, #396]	; (800f5e0 <tcp_close_shutdown+0x1a0>)
 800f454:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f458:	4962      	ldr	r1, [pc, #392]	; (800f5e4 <tcp_close_shutdown+0x1a4>)
 800f45a:	4863      	ldr	r0, [pc, #396]	; (800f5e8 <tcp_close_shutdown+0x1a8>)
 800f45c:	f006 fcd6 	bl	8015e0c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f460:	78fb      	ldrb	r3, [r7, #3]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d067      	beq.n	800f536 <tcp_close_shutdown+0xf6>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	7d1b      	ldrb	r3, [r3, #20]
 800f46a:	2b04      	cmp	r3, #4
 800f46c:	d003      	beq.n	800f476 <tcp_close_shutdown+0x36>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	7d1b      	ldrb	r3, [r3, #20]
 800f472:	2b07      	cmp	r3, #7
 800f474:	d15f      	bne.n	800f536 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d105      	bne.n	800f48a <tcp_close_shutdown+0x4a>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f482:	f640 3268 	movw	r2, #2920	; 0xb68
 800f486:	4293      	cmp	r3, r2
 800f488:	d055      	beq.n	800f536 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	8b5b      	ldrh	r3, [r3, #26]
 800f48e:	f003 0310 	and.w	r3, r3, #16
 800f492:	2b00      	cmp	r3, #0
 800f494:	d106      	bne.n	800f4a4 <tcp_close_shutdown+0x64>
 800f496:	4b52      	ldr	r3, [pc, #328]	; (800f5e0 <tcp_close_shutdown+0x1a0>)
 800f498:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f49c:	4953      	ldr	r1, [pc, #332]	; (800f5ec <tcp_close_shutdown+0x1ac>)
 800f49e:	4852      	ldr	r0, [pc, #328]	; (800f5e8 <tcp_close_shutdown+0x1a8>)
 800f4a0:	f006 fcb4 	bl	8015e0c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f4ac:	687d      	ldr	r5, [r7, #4]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	3304      	adds	r3, #4
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	8ad2      	ldrh	r2, [r2, #22]
 800f4b6:	6879      	ldr	r1, [r7, #4]
 800f4b8:	8b09      	ldrh	r1, [r1, #24]
 800f4ba:	9102      	str	r1, [sp, #8]
 800f4bc:	9201      	str	r2, [sp, #4]
 800f4be:	9300      	str	r3, [sp, #0]
 800f4c0:	462b      	mov	r3, r5
 800f4c2:	4622      	mov	r2, r4
 800f4c4:	4601      	mov	r1, r0
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f005 faa4 	bl	8014a14 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f001 fc65 	bl	8010d9c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f4d2:	4b47      	ldr	r3, [pc, #284]	; (800f5f0 <tcp_close_shutdown+0x1b0>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	687a      	ldr	r2, [r7, #4]
 800f4d8:	429a      	cmp	r2, r3
 800f4da:	d105      	bne.n	800f4e8 <tcp_close_shutdown+0xa8>
 800f4dc:	4b44      	ldr	r3, [pc, #272]	; (800f5f0 <tcp_close_shutdown+0x1b0>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	4a43      	ldr	r2, [pc, #268]	; (800f5f0 <tcp_close_shutdown+0x1b0>)
 800f4e4:	6013      	str	r3, [r2, #0]
 800f4e6:	e013      	b.n	800f510 <tcp_close_shutdown+0xd0>
 800f4e8:	4b41      	ldr	r3, [pc, #260]	; (800f5f0 <tcp_close_shutdown+0x1b0>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	60fb      	str	r3, [r7, #12]
 800f4ee:	e00c      	b.n	800f50a <tcp_close_shutdown+0xca>
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	687a      	ldr	r2, [r7, #4]
 800f4f6:	429a      	cmp	r2, r3
 800f4f8:	d104      	bne.n	800f504 <tcp_close_shutdown+0xc4>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	68da      	ldr	r2, [r3, #12]
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	60da      	str	r2, [r3, #12]
 800f502:	e005      	b.n	800f510 <tcp_close_shutdown+0xd0>
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	60fb      	str	r3, [r7, #12]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d1ef      	bne.n	800f4f0 <tcp_close_shutdown+0xb0>
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	2200      	movs	r2, #0
 800f514:	60da      	str	r2, [r3, #12]
 800f516:	4b37      	ldr	r3, [pc, #220]	; (800f5f4 <tcp_close_shutdown+0x1b4>)
 800f518:	2201      	movs	r2, #1
 800f51a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f51c:	4b36      	ldr	r3, [pc, #216]	; (800f5f8 <tcp_close_shutdown+0x1b8>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	687a      	ldr	r2, [r7, #4]
 800f522:	429a      	cmp	r2, r3
 800f524:	d102      	bne.n	800f52c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f526:	f003 fd19 	bl	8012f5c <tcp_trigger_input_pcb_close>
 800f52a:	e002      	b.n	800f532 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800f52c:	6878      	ldr	r0, [r7, #4]
 800f52e:	f7ff fed5 	bl	800f2dc <tcp_free>
      }
      return ERR_OK;
 800f532:	2300      	movs	r3, #0
 800f534:	e050      	b.n	800f5d8 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	7d1b      	ldrb	r3, [r3, #20]
 800f53a:	2b02      	cmp	r3, #2
 800f53c:	d03b      	beq.n	800f5b6 <tcp_close_shutdown+0x176>
 800f53e:	2b02      	cmp	r3, #2
 800f540:	dc44      	bgt.n	800f5cc <tcp_close_shutdown+0x18c>
 800f542:	2b00      	cmp	r3, #0
 800f544:	d002      	beq.n	800f54c <tcp_close_shutdown+0x10c>
 800f546:	2b01      	cmp	r3, #1
 800f548:	d02a      	beq.n	800f5a0 <tcp_close_shutdown+0x160>
 800f54a:	e03f      	b.n	800f5cc <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	8adb      	ldrh	r3, [r3, #22]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d021      	beq.n	800f598 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f554:	4b29      	ldr	r3, [pc, #164]	; (800f5fc <tcp_close_shutdown+0x1bc>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	687a      	ldr	r2, [r7, #4]
 800f55a:	429a      	cmp	r2, r3
 800f55c:	d105      	bne.n	800f56a <tcp_close_shutdown+0x12a>
 800f55e:	4b27      	ldr	r3, [pc, #156]	; (800f5fc <tcp_close_shutdown+0x1bc>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	68db      	ldr	r3, [r3, #12]
 800f564:	4a25      	ldr	r2, [pc, #148]	; (800f5fc <tcp_close_shutdown+0x1bc>)
 800f566:	6013      	str	r3, [r2, #0]
 800f568:	e013      	b.n	800f592 <tcp_close_shutdown+0x152>
 800f56a:	4b24      	ldr	r3, [pc, #144]	; (800f5fc <tcp_close_shutdown+0x1bc>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	60bb      	str	r3, [r7, #8]
 800f570:	e00c      	b.n	800f58c <tcp_close_shutdown+0x14c>
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	68db      	ldr	r3, [r3, #12]
 800f576:	687a      	ldr	r2, [r7, #4]
 800f578:	429a      	cmp	r2, r3
 800f57a:	d104      	bne.n	800f586 <tcp_close_shutdown+0x146>
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	68da      	ldr	r2, [r3, #12]
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	60da      	str	r2, [r3, #12]
 800f584:	e005      	b.n	800f592 <tcp_close_shutdown+0x152>
 800f586:	68bb      	ldr	r3, [r7, #8]
 800f588:	68db      	ldr	r3, [r3, #12]
 800f58a:	60bb      	str	r3, [r7, #8]
 800f58c:	68bb      	ldr	r3, [r7, #8]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1ef      	bne.n	800f572 <tcp_close_shutdown+0x132>
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2200      	movs	r2, #0
 800f596:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f7ff fe9f 	bl	800f2dc <tcp_free>
      break;
 800f59e:	e01a      	b.n	800f5d6 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f5a0:	6878      	ldr	r0, [r7, #4]
 800f5a2:	f7ff ff13 	bl	800f3cc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f5a6:	6879      	ldr	r1, [r7, #4]
 800f5a8:	4815      	ldr	r0, [pc, #84]	; (800f600 <tcp_close_shutdown+0x1c0>)
 800f5aa:	f001 fc41 	bl	8010e30 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f7ff feb0 	bl	800f314 <tcp_free_listen>
      break;
 800f5b4:	e00f      	b.n	800f5d6 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f5b6:	6879      	ldr	r1, [r7, #4]
 800f5b8:	480d      	ldr	r0, [pc, #52]	; (800f5f0 <tcp_close_shutdown+0x1b0>)
 800f5ba:	f001 fc39 	bl	8010e30 <tcp_pcb_remove>
 800f5be:	4b0d      	ldr	r3, [pc, #52]	; (800f5f4 <tcp_close_shutdown+0x1b4>)
 800f5c0:	2201      	movs	r2, #1
 800f5c2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f7ff fe89 	bl	800f2dc <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f5ca:	e004      	b.n	800f5d6 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f5cc:	6878      	ldr	r0, [r7, #4]
 800f5ce:	f000 f819 	bl	800f604 <tcp_close_shutdown_fin>
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	e000      	b.n	800f5d8 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800f5d6:	2300      	movs	r3, #0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3710      	adds	r7, #16
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bdb0      	pop	{r4, r5, r7, pc}
 800f5e0:	08019d48 	.word	0x08019d48
 800f5e4:	08019e60 	.word	0x08019e60
 800f5e8:	08019dd0 	.word	0x08019dd0
 800f5ec:	08019e80 	.word	0x08019e80
 800f5f0:	2400a784 	.word	0x2400a784
 800f5f4:	2400a780 	.word	0x2400a780
 800f5f8:	2400a798 	.word	0x2400a798
 800f5fc:	2400a790 	.word	0x2400a790
 800f600:	2400a78c 	.word	0x2400a78c

0800f604 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b084      	sub	sp, #16
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d106      	bne.n	800f620 <tcp_close_shutdown_fin+0x1c>
 800f612:	4b2e      	ldr	r3, [pc, #184]	; (800f6cc <tcp_close_shutdown_fin+0xc8>)
 800f614:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f618:	492d      	ldr	r1, [pc, #180]	; (800f6d0 <tcp_close_shutdown_fin+0xcc>)
 800f61a:	482e      	ldr	r0, [pc, #184]	; (800f6d4 <tcp_close_shutdown_fin+0xd0>)
 800f61c:	f006 fbf6 	bl	8015e0c <iprintf>

  switch (pcb->state) {
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	7d1b      	ldrb	r3, [r3, #20]
 800f624:	2b07      	cmp	r3, #7
 800f626:	d020      	beq.n	800f66a <tcp_close_shutdown_fin+0x66>
 800f628:	2b07      	cmp	r3, #7
 800f62a:	dc2b      	bgt.n	800f684 <tcp_close_shutdown_fin+0x80>
 800f62c:	2b03      	cmp	r3, #3
 800f62e:	d002      	beq.n	800f636 <tcp_close_shutdown_fin+0x32>
 800f630:	2b04      	cmp	r3, #4
 800f632:	d00d      	beq.n	800f650 <tcp_close_shutdown_fin+0x4c>
 800f634:	e026      	b.n	800f684 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f636:	6878      	ldr	r0, [r7, #4]
 800f638:	f004 fafa 	bl	8013c30 <tcp_send_fin>
 800f63c:	4603      	mov	r3, r0
 800f63e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d11f      	bne.n	800f688 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	2205      	movs	r2, #5
 800f64c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f64e:	e01b      	b.n	800f688 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f004 faed 	bl	8013c30 <tcp_send_fin>
 800f656:	4603      	mov	r3, r0
 800f658:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f65a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d114      	bne.n	800f68c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2205      	movs	r2, #5
 800f666:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f668:	e010      	b.n	800f68c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f004 fae0 	bl	8013c30 <tcp_send_fin>
 800f670:	4603      	mov	r3, r0
 800f672:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f674:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d109      	bne.n	800f690 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2209      	movs	r2, #9
 800f680:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f682:	e005      	b.n	800f690 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f684:	2300      	movs	r3, #0
 800f686:	e01c      	b.n	800f6c2 <tcp_close_shutdown_fin+0xbe>
      break;
 800f688:	bf00      	nop
 800f68a:	e002      	b.n	800f692 <tcp_close_shutdown_fin+0x8e>
      break;
 800f68c:	bf00      	nop
 800f68e:	e000      	b.n	800f692 <tcp_close_shutdown_fin+0x8e>
      break;
 800f690:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d103      	bne.n	800f6a2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f004 fc06 	bl	8013eac <tcp_output>
 800f6a0:	e00d      	b.n	800f6be <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f6a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6aa:	d108      	bne.n	800f6be <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	8b5b      	ldrh	r3, [r3, #26]
 800f6b0:	f043 0308 	orr.w	r3, r3, #8
 800f6b4:	b29a      	uxth	r2, r3
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	e001      	b.n	800f6c2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f6be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	08019d48 	.word	0x08019d48
 800f6d0:	08019e3c 	.word	0x08019e3c
 800f6d4:	08019dd0 	.word	0x08019dd0

0800f6d8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d109      	bne.n	800f6fa <tcp_close+0x22>
 800f6e6:	4b0f      	ldr	r3, [pc, #60]	; (800f724 <tcp_close+0x4c>)
 800f6e8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f6ec:	490e      	ldr	r1, [pc, #56]	; (800f728 <tcp_close+0x50>)
 800f6ee:	480f      	ldr	r0, [pc, #60]	; (800f72c <tcp_close+0x54>)
 800f6f0:	f006 fb8c 	bl	8015e0c <iprintf>
 800f6f4:	f06f 030f 	mvn.w	r3, #15
 800f6f8:	e00f      	b.n	800f71a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	7d1b      	ldrb	r3, [r3, #20]
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d006      	beq.n	800f710 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	8b5b      	ldrh	r3, [r3, #26]
 800f706:	f043 0310 	orr.w	r3, r3, #16
 800f70a:	b29a      	uxth	r2, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f710:	2101      	movs	r1, #1
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f7ff fe94 	bl	800f440 <tcp_close_shutdown>
 800f718:	4603      	mov	r3, r0
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3708      	adds	r7, #8
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop
 800f724:	08019d48 	.word	0x08019d48
 800f728:	08019e9c 	.word	0x08019e9c
 800f72c:	08019dd0 	.word	0x08019dd0

0800f730 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b084      	sub	sp, #16
 800f734:	af00      	add	r7, sp, #0
 800f736:	60f8      	str	r0, [r7, #12]
 800f738:	60b9      	str	r1, [r7, #8]
 800f73a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d109      	bne.n	800f756 <tcp_shutdown+0x26>
 800f742:	4b26      	ldr	r3, [pc, #152]	; (800f7dc <tcp_shutdown+0xac>)
 800f744:	f240 2207 	movw	r2, #519	; 0x207
 800f748:	4925      	ldr	r1, [pc, #148]	; (800f7e0 <tcp_shutdown+0xb0>)
 800f74a:	4826      	ldr	r0, [pc, #152]	; (800f7e4 <tcp_shutdown+0xb4>)
 800f74c:	f006 fb5e 	bl	8015e0c <iprintf>
 800f750:	f06f 030f 	mvn.w	r3, #15
 800f754:	e03d      	b.n	800f7d2 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	7d1b      	ldrb	r3, [r3, #20]
 800f75a:	2b01      	cmp	r3, #1
 800f75c:	d102      	bne.n	800f764 <tcp_shutdown+0x34>
    return ERR_CONN;
 800f75e:	f06f 030a 	mvn.w	r3, #10
 800f762:	e036      	b.n	800f7d2 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f764:	68bb      	ldr	r3, [r7, #8]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d01b      	beq.n	800f7a2 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	8b5b      	ldrh	r3, [r3, #26]
 800f76e:	f043 0310 	orr.w	r3, r3, #16
 800f772:	b29a      	uxth	r2, r3
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d005      	beq.n	800f78a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f77e:	2101      	movs	r1, #1
 800f780:	68f8      	ldr	r0, [r7, #12]
 800f782:	f7ff fe5d 	bl	800f440 <tcp_close_shutdown>
 800f786:	4603      	mov	r3, r0
 800f788:	e023      	b.n	800f7d2 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d007      	beq.n	800f7a2 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f796:	4618      	mov	r0, r3
 800f798:	f7ff faf4 	bl	800ed84 <pbuf_free>
      pcb->refused_data = NULL;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d013      	beq.n	800f7d0 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	7d1b      	ldrb	r3, [r3, #20]
 800f7ac:	2b04      	cmp	r3, #4
 800f7ae:	dc02      	bgt.n	800f7b6 <tcp_shutdown+0x86>
 800f7b0:	2b03      	cmp	r3, #3
 800f7b2:	da02      	bge.n	800f7ba <tcp_shutdown+0x8a>
 800f7b4:	e009      	b.n	800f7ca <tcp_shutdown+0x9a>
 800f7b6:	2b07      	cmp	r3, #7
 800f7b8:	d107      	bne.n	800f7ca <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	4619      	mov	r1, r3
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f7ff fe3d 	bl	800f440 <tcp_close_shutdown>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	e003      	b.n	800f7d2 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800f7ca:	f06f 030a 	mvn.w	r3, #10
 800f7ce:	e000      	b.n	800f7d2 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800f7d0:	2300      	movs	r3, #0
}
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	3710      	adds	r7, #16
 800f7d6:	46bd      	mov	sp, r7
 800f7d8:	bd80      	pop	{r7, pc}
 800f7da:	bf00      	nop
 800f7dc:	08019d48 	.word	0x08019d48
 800f7e0:	08019eb4 	.word	0x08019eb4
 800f7e4:	08019dd0 	.word	0x08019dd0

0800f7e8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b08e      	sub	sp, #56	; 0x38
 800f7ec:	af04      	add	r7, sp, #16
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d107      	bne.n	800f808 <tcp_abandon+0x20>
 800f7f8:	4b4d      	ldr	r3, [pc, #308]	; (800f930 <tcp_abandon+0x148>)
 800f7fa:	f240 223d 	movw	r2, #573	; 0x23d
 800f7fe:	494d      	ldr	r1, [pc, #308]	; (800f934 <tcp_abandon+0x14c>)
 800f800:	484d      	ldr	r0, [pc, #308]	; (800f938 <tcp_abandon+0x150>)
 800f802:	f006 fb03 	bl	8015e0c <iprintf>
 800f806:	e090      	b.n	800f92a <tcp_abandon+0x142>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	7d1b      	ldrb	r3, [r3, #20]
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d106      	bne.n	800f81e <tcp_abandon+0x36>
 800f810:	4b47      	ldr	r3, [pc, #284]	; (800f930 <tcp_abandon+0x148>)
 800f812:	f44f 7210 	mov.w	r2, #576	; 0x240
 800f816:	4949      	ldr	r1, [pc, #292]	; (800f93c <tcp_abandon+0x154>)
 800f818:	4847      	ldr	r0, [pc, #284]	; (800f938 <tcp_abandon+0x150>)
 800f81a:	f006 faf7 	bl	8015e0c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	7d1b      	ldrb	r3, [r3, #20]
 800f822:	2b0a      	cmp	r3, #10
 800f824:	d107      	bne.n	800f836 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800f826:	6879      	ldr	r1, [r7, #4]
 800f828:	4845      	ldr	r0, [pc, #276]	; (800f940 <tcp_abandon+0x158>)
 800f82a:	f001 fb01 	bl	8010e30 <tcp_pcb_remove>
    tcp_free(pcb);
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	f7ff fd54 	bl	800f2dc <tcp_free>
 800f834:	e079      	b.n	800f92a <tcp_abandon+0x142>
  } else {
    int send_rst = 0;
 800f836:	2300      	movs	r3, #0
 800f838:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800f83a:	2300      	movs	r3, #0
 800f83c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f842:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f848:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f850:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	691b      	ldr	r3, [r3, #16]
 800f856:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	7d1b      	ldrb	r3, [r3, #20]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d126      	bne.n	800f8ae <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	8adb      	ldrh	r3, [r3, #22]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d02e      	beq.n	800f8c6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f868:	4b36      	ldr	r3, [pc, #216]	; (800f944 <tcp_abandon+0x15c>)
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	429a      	cmp	r2, r3
 800f870:	d105      	bne.n	800f87e <tcp_abandon+0x96>
 800f872:	4b34      	ldr	r3, [pc, #208]	; (800f944 <tcp_abandon+0x15c>)
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	4a32      	ldr	r2, [pc, #200]	; (800f944 <tcp_abandon+0x15c>)
 800f87a:	6013      	str	r3, [r2, #0]
 800f87c:	e013      	b.n	800f8a6 <tcp_abandon+0xbe>
 800f87e:	4b31      	ldr	r3, [pc, #196]	; (800f944 <tcp_abandon+0x15c>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	61fb      	str	r3, [r7, #28]
 800f884:	e00c      	b.n	800f8a0 <tcp_abandon+0xb8>
 800f886:	69fb      	ldr	r3, [r7, #28]
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	687a      	ldr	r2, [r7, #4]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d104      	bne.n	800f89a <tcp_abandon+0xb2>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	68da      	ldr	r2, [r3, #12]
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	60da      	str	r2, [r3, #12]
 800f898:	e005      	b.n	800f8a6 <tcp_abandon+0xbe>
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	61fb      	str	r3, [r7, #28]
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d1ef      	bne.n	800f886 <tcp_abandon+0x9e>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	60da      	str	r2, [r3, #12]
 800f8ac:	e00b      	b.n	800f8c6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800f8ae:	683b      	ldr	r3, [r7, #0]
 800f8b0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	8adb      	ldrh	r3, [r3, #22]
 800f8b6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f8b8:	6879      	ldr	r1, [r7, #4]
 800f8ba:	4823      	ldr	r0, [pc, #140]	; (800f948 <tcp_abandon+0x160>)
 800f8bc:	f001 fab8 	bl	8010e30 <tcp_pcb_remove>
 800f8c0:	4b22      	ldr	r3, [pc, #136]	; (800f94c <tcp_abandon+0x164>)
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d004      	beq.n	800f8d8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f000 ffc0 	bl	8010858 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d004      	beq.n	800f8ea <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	f000 ffb7 	bl	8010858 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800f8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d00e      	beq.n	800f90e <tcp_abandon+0x126>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800f8f0:	6879      	ldr	r1, [r7, #4]
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	3304      	adds	r3, #4
 800f8f6:	687a      	ldr	r2, [r7, #4]
 800f8f8:	8b12      	ldrh	r2, [r2, #24]
 800f8fa:	9202      	str	r2, [sp, #8]
 800f8fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f8fe:	9201      	str	r2, [sp, #4]
 800f900:	9300      	str	r3, [sp, #0]
 800f902:	460b      	mov	r3, r1
 800f904:	697a      	ldr	r2, [r7, #20]
 800f906:	69b9      	ldr	r1, [r7, #24]
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f005 f883 	bl	8014a14 <tcp_rst>
    }
    last_state = pcb->state;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	7d1b      	ldrb	r3, [r3, #20]
 800f912:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800f914:	6878      	ldr	r0, [r7, #4]
 800f916:	f7ff fce1 	bl	800f2dc <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800f91a:	693b      	ldr	r3, [r7, #16]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d004      	beq.n	800f92a <tcp_abandon+0x142>
 800f920:	693b      	ldr	r3, [r7, #16]
 800f922:	f06f 010c 	mvn.w	r1, #12
 800f926:	68f8      	ldr	r0, [r7, #12]
 800f928:	4798      	blx	r3
  }
}
 800f92a:	3728      	adds	r7, #40	; 0x28
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}
 800f930:	08019d48 	.word	0x08019d48
 800f934:	08019ed0 	.word	0x08019ed0
 800f938:	08019dd0 	.word	0x08019dd0
 800f93c:	08019eec 	.word	0x08019eec
 800f940:	2400a794 	.word	0x2400a794
 800f944:	2400a790 	.word	0x2400a790
 800f948:	2400a784 	.word	0x2400a784
 800f94c:	2400a780 	.word	0x2400a780

0800f950 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800f958:	2101      	movs	r1, #1
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f7ff ff44 	bl	800f7e8 <tcp_abandon>
}
 800f960:	bf00      	nop
 800f962:	3708      	adds	r7, #8
 800f964:	46bd      	mov	sp, r7
 800f966:	bd80      	pop	{r7, pc}

0800f968 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b088      	sub	sp, #32
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	4613      	mov	r3, r2
 800f974:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800f976:	2304      	movs	r3, #4
 800f978:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d101      	bne.n	800f984 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800f980:	4b3e      	ldr	r3, [pc, #248]	; (800fa7c <tcp_bind+0x114>)
 800f982:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d109      	bne.n	800f99e <tcp_bind+0x36>
 800f98a:	4b3d      	ldr	r3, [pc, #244]	; (800fa80 <tcp_bind+0x118>)
 800f98c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800f990:	493c      	ldr	r1, [pc, #240]	; (800fa84 <tcp_bind+0x11c>)
 800f992:	483d      	ldr	r0, [pc, #244]	; (800fa88 <tcp_bind+0x120>)
 800f994:	f006 fa3a 	bl	8015e0c <iprintf>
 800f998:	f06f 030f 	mvn.w	r3, #15
 800f99c:	e06a      	b.n	800fa74 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	7d1b      	ldrb	r3, [r3, #20]
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d009      	beq.n	800f9ba <tcp_bind+0x52>
 800f9a6:	4b36      	ldr	r3, [pc, #216]	; (800fa80 <tcp_bind+0x118>)
 800f9a8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f9ac:	4937      	ldr	r1, [pc, #220]	; (800fa8c <tcp_bind+0x124>)
 800f9ae:	4836      	ldr	r0, [pc, #216]	; (800fa88 <tcp_bind+0x120>)
 800f9b0:	f006 fa2c 	bl	8015e0c <iprintf>
 800f9b4:	f06f 0305 	mvn.w	r3, #5
 800f9b8:	e05c      	b.n	800fa74 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800f9ba:	88fb      	ldrh	r3, [r7, #6]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d109      	bne.n	800f9d4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800f9c0:	f000 f9e0 	bl	800fd84 <tcp_new_port>
 800f9c4:	4603      	mov	r3, r0
 800f9c6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f9c8:	88fb      	ldrh	r3, [r7, #6]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d135      	bne.n	800fa3a <tcp_bind+0xd2>
      return ERR_BUF;
 800f9ce:	f06f 0301 	mvn.w	r3, #1
 800f9d2:	e04f      	b.n	800fa74 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	61fb      	str	r3, [r7, #28]
 800f9d8:	e02b      	b.n	800fa32 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800f9da:	4a2d      	ldr	r2, [pc, #180]	; (800fa90 <tcp_bind+0x128>)
 800f9dc:	69fb      	ldr	r3, [r7, #28]
 800f9de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	61bb      	str	r3, [r7, #24]
 800f9e6:	e01e      	b.n	800fa26 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800f9e8:	69bb      	ldr	r3, [r7, #24]
 800f9ea:	8adb      	ldrh	r3, [r3, #22]
 800f9ec:	88fa      	ldrh	r2, [r7, #6]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	d116      	bne.n	800fa20 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800f9f2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d010      	beq.n	800fa1a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800f9f8:	69bb      	ldr	r3, [r7, #24]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d00c      	beq.n	800fa1a <tcp_bind+0xb2>
 800fa00:	68bb      	ldr	r3, [r7, #8]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d009      	beq.n	800fa1a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d005      	beq.n	800fa1a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800fa0e:	69bb      	ldr	r3, [r7, #24]
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fa16:	429a      	cmp	r2, r3
 800fa18:	d102      	bne.n	800fa20 <tcp_bind+0xb8>
              return ERR_USE;
 800fa1a:	f06f 0307 	mvn.w	r3, #7
 800fa1e:	e029      	b.n	800fa74 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	61bb      	str	r3, [r7, #24]
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d1dd      	bne.n	800f9e8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	3301      	adds	r3, #1
 800fa30:	61fb      	str	r3, [r7, #28]
 800fa32:	69fa      	ldr	r2, [r7, #28]
 800fa34:	697b      	ldr	r3, [r7, #20]
 800fa36:	429a      	cmp	r2, r3
 800fa38:	dbcf      	blt.n	800f9da <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d00c      	beq.n	800fa5a <tcp_bind+0xf2>
 800fa40:	68bb      	ldr	r3, [r7, #8]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d008      	beq.n	800fa5a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d002      	beq.n	800fa54 <tcp_bind+0xec>
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	681b      	ldr	r3, [r3, #0]
 800fa52:	e000      	b.n	800fa56 <tcp_bind+0xee>
 800fa54:	2300      	movs	r3, #0
 800fa56:	68fa      	ldr	r2, [r7, #12]
 800fa58:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	88fa      	ldrh	r2, [r7, #6]
 800fa5e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800fa60:	4b0c      	ldr	r3, [pc, #48]	; (800fa94 <tcp_bind+0x12c>)
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	60da      	str	r2, [r3, #12]
 800fa68:	4a0a      	ldr	r2, [pc, #40]	; (800fa94 <tcp_bind+0x12c>)
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	6013      	str	r3, [r2, #0]
 800fa6e:	f005 f993 	bl	8014d98 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800fa72:	2300      	movs	r3, #0
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3720      	adds	r7, #32
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}
 800fa7c:	08018d64 	.word	0x08018d64
 800fa80:	08019d48 	.word	0x08019d48
 800fa84:	08019f20 	.word	0x08019f20
 800fa88:	08019dd0 	.word	0x08019dd0
 800fa8c:	08019f38 	.word	0x08019f38
 800fa90:	08019d38 	.word	0x08019d38
 800fa94:	2400a790 	.word	0x2400a790

0800fa98 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b084      	sub	sp, #16
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	60f8      	str	r0, [r7, #12]
 800faa0:	60b9      	str	r1, [r7, #8]
 800faa2:	4613      	mov	r3, r2
 800faa4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800faa6:	68bb      	ldr	r3, [r7, #8]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d106      	bne.n	800faba <tcp_accept_null+0x22>
 800faac:	4b07      	ldr	r3, [pc, #28]	; (800facc <tcp_accept_null+0x34>)
 800faae:	f240 320f 	movw	r2, #783	; 0x30f
 800fab2:	4907      	ldr	r1, [pc, #28]	; (800fad0 <tcp_accept_null+0x38>)
 800fab4:	4807      	ldr	r0, [pc, #28]	; (800fad4 <tcp_accept_null+0x3c>)
 800fab6:	f006 f9a9 	bl	8015e0c <iprintf>

  tcp_abort(pcb);
 800faba:	68b8      	ldr	r0, [r7, #8]
 800fabc:	f7ff ff48 	bl	800f950 <tcp_abort>

  return ERR_ABRT;
 800fac0:	f06f 030c 	mvn.w	r3, #12
}
 800fac4:	4618      	mov	r0, r3
 800fac6:	3710      	adds	r7, #16
 800fac8:	46bd      	mov	sp, r7
 800faca:	bd80      	pop	{r7, pc}
 800facc:	08019d48 	.word	0x08019d48
 800fad0:	08019f60 	.word	0x08019f60
 800fad4:	08019dd0 	.word	0x08019dd0

0800fad8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b088      	sub	sp, #32
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	460b      	mov	r3, r1
 800fae2:	607a      	str	r2, [r7, #4]
 800fae4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800fae6:	2300      	movs	r3, #0
 800fae8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d109      	bne.n	800fb04 <tcp_listen_with_backlog_and_err+0x2c>
 800faf0:	4b47      	ldr	r3, [pc, #284]	; (800fc10 <tcp_listen_with_backlog_and_err+0x138>)
 800faf2:	f240 3259 	movw	r2, #857	; 0x359
 800faf6:	4947      	ldr	r1, [pc, #284]	; (800fc14 <tcp_listen_with_backlog_and_err+0x13c>)
 800faf8:	4847      	ldr	r0, [pc, #284]	; (800fc18 <tcp_listen_with_backlog_and_err+0x140>)
 800fafa:	f006 f987 	bl	8015e0c <iprintf>
 800fafe:	23f0      	movs	r3, #240	; 0xf0
 800fb00:	76fb      	strb	r3, [r7, #27]
 800fb02:	e079      	b.n	800fbf8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	7d1b      	ldrb	r3, [r3, #20]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d009      	beq.n	800fb20 <tcp_listen_with_backlog_and_err+0x48>
 800fb0c:	4b40      	ldr	r3, [pc, #256]	; (800fc10 <tcp_listen_with_backlog_and_err+0x138>)
 800fb0e:	f240 325a 	movw	r2, #858	; 0x35a
 800fb12:	4942      	ldr	r1, [pc, #264]	; (800fc1c <tcp_listen_with_backlog_and_err+0x144>)
 800fb14:	4840      	ldr	r0, [pc, #256]	; (800fc18 <tcp_listen_with_backlog_and_err+0x140>)
 800fb16:	f006 f979 	bl	8015e0c <iprintf>
 800fb1a:	23f1      	movs	r3, #241	; 0xf1
 800fb1c:	76fb      	strb	r3, [r7, #27]
 800fb1e:	e06b      	b.n	800fbf8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	7d1b      	ldrb	r3, [r3, #20]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d104      	bne.n	800fb32 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800fb2c:	23f7      	movs	r3, #247	; 0xf7
 800fb2e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800fb30:	e062      	b.n	800fbf8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800fb32:	2002      	movs	r0, #2
 800fb34:	f7fe fa68 	bl	800e008 <memp_malloc>
 800fb38:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800fb3a:	69fb      	ldr	r3, [r7, #28]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d102      	bne.n	800fb46 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800fb40:	23ff      	movs	r3, #255	; 0xff
 800fb42:	76fb      	strb	r3, [r7, #27]
    goto done;
 800fb44:	e058      	b.n	800fbf8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	691a      	ldr	r2, [r3, #16]
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	8ada      	ldrh	r2, [r3, #22]
 800fb52:	69fb      	ldr	r3, [r7, #28]
 800fb54:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	2201      	movs	r2, #1
 800fb5a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	7d5a      	ldrb	r2, [r3, #21]
 800fb60:	69fb      	ldr	r3, [r7, #28]
 800fb62:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	7a5a      	ldrb	r2, [r3, #9]
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800fb6c:	69fb      	ldr	r3, [r7, #28]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	7ada      	ldrb	r2, [r3, #11]
 800fb76:	69fb      	ldr	r3, [r7, #28]
 800fb78:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	7a9a      	ldrb	r2, [r3, #10]
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	8adb      	ldrh	r3, [r3, #22]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d021      	beq.n	800fbd6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800fb92:	4b23      	ldr	r3, [pc, #140]	; (800fc20 <tcp_listen_with_backlog_and_err+0x148>)
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	68fa      	ldr	r2, [r7, #12]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d105      	bne.n	800fba8 <tcp_listen_with_backlog_and_err+0xd0>
 800fb9c:	4b20      	ldr	r3, [pc, #128]	; (800fc20 <tcp_listen_with_backlog_and_err+0x148>)
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	68db      	ldr	r3, [r3, #12]
 800fba2:	4a1f      	ldr	r2, [pc, #124]	; (800fc20 <tcp_listen_with_backlog_and_err+0x148>)
 800fba4:	6013      	str	r3, [r2, #0]
 800fba6:	e013      	b.n	800fbd0 <tcp_listen_with_backlog_and_err+0xf8>
 800fba8:	4b1d      	ldr	r3, [pc, #116]	; (800fc20 <tcp_listen_with_backlog_and_err+0x148>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	617b      	str	r3, [r7, #20]
 800fbae:	e00c      	b.n	800fbca <tcp_listen_with_backlog_and_err+0xf2>
 800fbb0:	697b      	ldr	r3, [r7, #20]
 800fbb2:	68db      	ldr	r3, [r3, #12]
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	429a      	cmp	r2, r3
 800fbb8:	d104      	bne.n	800fbc4 <tcp_listen_with_backlog_and_err+0xec>
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	68da      	ldr	r2, [r3, #12]
 800fbbe:	697b      	ldr	r3, [r7, #20]
 800fbc0:	60da      	str	r2, [r3, #12]
 800fbc2:	e005      	b.n	800fbd0 <tcp_listen_with_backlog_and_err+0xf8>
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	68db      	ldr	r3, [r3, #12]
 800fbc8:	617b      	str	r3, [r7, #20]
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d1ef      	bne.n	800fbb0 <tcp_listen_with_backlog_and_err+0xd8>
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800fbd6:	68f8      	ldr	r0, [r7, #12]
 800fbd8:	f7ff fb80 	bl	800f2dc <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800fbdc:	69fb      	ldr	r3, [r7, #28]
 800fbde:	4a11      	ldr	r2, [pc, #68]	; (800fc24 <tcp_listen_with_backlog_and_err+0x14c>)
 800fbe0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800fbe2:	4b11      	ldr	r3, [pc, #68]	; (800fc28 <tcp_listen_with_backlog_and_err+0x150>)
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	69fb      	ldr	r3, [r7, #28]
 800fbe8:	60da      	str	r2, [r3, #12]
 800fbea:	4a0f      	ldr	r2, [pc, #60]	; (800fc28 <tcp_listen_with_backlog_and_err+0x150>)
 800fbec:	69fb      	ldr	r3, [r7, #28]
 800fbee:	6013      	str	r3, [r2, #0]
 800fbf0:	f005 f8d2 	bl	8014d98 <tcp_timer_needed>
  res = ERR_OK;
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	d002      	beq.n	800fc04 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	7efa      	ldrb	r2, [r7, #27]
 800fc02:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800fc04:	69fb      	ldr	r3, [r7, #28]
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3720      	adds	r7, #32
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	08019d48 	.word	0x08019d48
 800fc14:	08019f80 	.word	0x08019f80
 800fc18:	08019dd0 	.word	0x08019dd0
 800fc1c:	08019fb0 	.word	0x08019fb0
 800fc20:	2400a790 	.word	0x2400a790
 800fc24:	0800fa99 	.word	0x0800fa99
 800fc28:	2400a78c 	.word	0x2400a78c

0800fc2c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b084      	sub	sp, #16
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d106      	bne.n	800fc48 <tcp_update_rcv_ann_wnd+0x1c>
 800fc3a:	4b25      	ldr	r3, [pc, #148]	; (800fcd0 <tcp_update_rcv_ann_wnd+0xa4>)
 800fc3c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800fc40:	4924      	ldr	r1, [pc, #144]	; (800fcd4 <tcp_update_rcv_ann_wnd+0xa8>)
 800fc42:	4825      	ldr	r0, [pc, #148]	; (800fcd8 <tcp_update_rcv_ann_wnd+0xac>)
 800fc44:	f006 f8e2 	bl	8015e0c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc4c:	687a      	ldr	r2, [r7, #4]
 800fc4e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800fc50:	4413      	add	r3, r2
 800fc52:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc58:	687a      	ldr	r2, [r7, #4]
 800fc5a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800fc5c:	f240 51b4 	movw	r1, #1460	; 0x5b4
 800fc60:	428a      	cmp	r2, r1
 800fc62:	bf28      	it	cs
 800fc64:	460a      	movcs	r2, r1
 800fc66:	b292      	uxth	r2, r2
 800fc68:	4413      	add	r3, r2
 800fc6a:	68fa      	ldr	r2, [r7, #12]
 800fc6c:	1ad3      	subs	r3, r2, r3
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	db08      	blt.n	800fc84 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc7e:	68fa      	ldr	r2, [r7, #12]
 800fc80:	1ad3      	subs	r3, r2, r3
 800fc82:	e020      	b.n	800fcc6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc8c:	1ad3      	subs	r3, r2, r3
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	dd03      	ble.n	800fc9a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	2200      	movs	r2, #0
 800fc96:	855a      	strh	r2, [r3, #42]	; 0x2a
 800fc98:	e014      	b.n	800fcc4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fca2:	1ad3      	subs	r3, r2, r3
 800fca4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fcac:	d306      	bcc.n	800fcbc <tcp_update_rcv_ann_wnd+0x90>
 800fcae:	4b08      	ldr	r3, [pc, #32]	; (800fcd0 <tcp_update_rcv_ann_wnd+0xa4>)
 800fcb0:	f240 32b6 	movw	r2, #950	; 0x3b6
 800fcb4:	4909      	ldr	r1, [pc, #36]	; (800fcdc <tcp_update_rcv_ann_wnd+0xb0>)
 800fcb6:	4808      	ldr	r0, [pc, #32]	; (800fcd8 <tcp_update_rcv_ann_wnd+0xac>)
 800fcb8:	f006 f8a8 	bl	8015e0c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	b29a      	uxth	r2, r3
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800fcc4:	2300      	movs	r3, #0
  }
}
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	3710      	adds	r7, #16
 800fcca:	46bd      	mov	sp, r7
 800fccc:	bd80      	pop	{r7, pc}
 800fcce:	bf00      	nop
 800fcd0:	08019d48 	.word	0x08019d48
 800fcd4:	08019fe8 	.word	0x08019fe8
 800fcd8:	08019dd0 	.word	0x08019dd0
 800fcdc:	0801a00c 	.word	0x0801a00c

0800fce0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b084      	sub	sp, #16
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	460b      	mov	r3, r1
 800fcea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d107      	bne.n	800fd02 <tcp_recved+0x22>
 800fcf2:	4b20      	ldr	r3, [pc, #128]	; (800fd74 <tcp_recved+0x94>)
 800fcf4:	f240 32cf 	movw	r2, #975	; 0x3cf
 800fcf8:	491f      	ldr	r1, [pc, #124]	; (800fd78 <tcp_recved+0x98>)
 800fcfa:	4820      	ldr	r0, [pc, #128]	; (800fd7c <tcp_recved+0x9c>)
 800fcfc:	f006 f886 	bl	8015e0c <iprintf>
 800fd00:	e034      	b.n	800fd6c <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	7d1b      	ldrb	r3, [r3, #20]
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d106      	bne.n	800fd18 <tcp_recved+0x38>
 800fd0a:	4b1a      	ldr	r3, [pc, #104]	; (800fd74 <tcp_recved+0x94>)
 800fd0c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800fd10:	491b      	ldr	r1, [pc, #108]	; (800fd80 <tcp_recved+0xa0>)
 800fd12:	481a      	ldr	r0, [pc, #104]	; (800fd7c <tcp_recved+0x9c>)
 800fd14:	f006 f87a 	bl	8015e0c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fd1c:	887b      	ldrh	r3, [r7, #2]
 800fd1e:	4413      	add	r3, r2
 800fd20:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800fd22:	89fb      	ldrh	r3, [r7, #14]
 800fd24:	f640 3268 	movw	r2, #2920	; 0xb68
 800fd28:	4293      	cmp	r3, r2
 800fd2a:	d804      	bhi.n	800fd36 <tcp_recved+0x56>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd30:	89fa      	ldrh	r2, [r7, #14]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d204      	bcs.n	800fd40 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	f640 3268 	movw	r2, #2920	; 0xb68
 800fd3c:	851a      	strh	r2, [r3, #40]	; 0x28
 800fd3e:	e002      	b.n	800fd46 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	89fa      	ldrh	r2, [r7, #14]
 800fd44:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f7ff ff70 	bl	800fc2c <tcp_update_rcv_ann_wnd>
 800fd4c:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	f240 22d9 	movw	r2, #729	; 0x2d9
 800fd54:	4293      	cmp	r3, r2
 800fd56:	d909      	bls.n	800fd6c <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	8b5b      	ldrh	r3, [r3, #26]
 800fd5c:	f043 0302 	orr.w	r3, r3, #2
 800fd60:	b29a      	uxth	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800fd66:	6878      	ldr	r0, [r7, #4]
 800fd68:	f004 f8a0 	bl	8013eac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800fd6c:	3710      	adds	r7, #16
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}
 800fd72:	bf00      	nop
 800fd74:	08019d48 	.word	0x08019d48
 800fd78:	0801a028 	.word	0x0801a028
 800fd7c:	08019dd0 	.word	0x08019dd0
 800fd80:	0801a040 	.word	0x0801a040

0800fd84 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b083      	sub	sp, #12
 800fd88:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800fd8e:	4b1e      	ldr	r3, [pc, #120]	; (800fe08 <tcp_new_port+0x84>)
 800fd90:	881b      	ldrh	r3, [r3, #0]
 800fd92:	3301      	adds	r3, #1
 800fd94:	b29a      	uxth	r2, r3
 800fd96:	4b1c      	ldr	r3, [pc, #112]	; (800fe08 <tcp_new_port+0x84>)
 800fd98:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800fd9a:	4b1b      	ldr	r3, [pc, #108]	; (800fe08 <tcp_new_port+0x84>)
 800fd9c:	881b      	ldrh	r3, [r3, #0]
 800fd9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fda2:	4293      	cmp	r3, r2
 800fda4:	d103      	bne.n	800fdae <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800fda6:	4b18      	ldr	r3, [pc, #96]	; (800fe08 <tcp_new_port+0x84>)
 800fda8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800fdac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fdae:	2300      	movs	r3, #0
 800fdb0:	71fb      	strb	r3, [r7, #7]
 800fdb2:	e01e      	b.n	800fdf2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fdb4:	79fb      	ldrb	r3, [r7, #7]
 800fdb6:	4a15      	ldr	r2, [pc, #84]	; (800fe0c <tcp_new_port+0x88>)
 800fdb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	603b      	str	r3, [r7, #0]
 800fdc0:	e011      	b.n	800fde6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800fdc2:	683b      	ldr	r3, [r7, #0]
 800fdc4:	8ada      	ldrh	r2, [r3, #22]
 800fdc6:	4b10      	ldr	r3, [pc, #64]	; (800fe08 <tcp_new_port+0x84>)
 800fdc8:	881b      	ldrh	r3, [r3, #0]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d108      	bne.n	800fde0 <tcp_new_port+0x5c>
        n++;
 800fdce:	88bb      	ldrh	r3, [r7, #4]
 800fdd0:	3301      	adds	r3, #1
 800fdd2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800fdd4:	88bb      	ldrh	r3, [r7, #4]
 800fdd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800fdda:	d3d8      	bcc.n	800fd8e <tcp_new_port+0xa>
          return 0;
 800fddc:	2300      	movs	r3, #0
 800fdde:	e00d      	b.n	800fdfc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	603b      	str	r3, [r7, #0]
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d1ea      	bne.n	800fdc2 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800fdec:	79fb      	ldrb	r3, [r7, #7]
 800fdee:	3301      	adds	r3, #1
 800fdf0:	71fb      	strb	r3, [r7, #7]
 800fdf2:	79fb      	ldrb	r3, [r7, #7]
 800fdf4:	2b03      	cmp	r3, #3
 800fdf6:	d9dd      	bls.n	800fdb4 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800fdf8:	4b03      	ldr	r3, [pc, #12]	; (800fe08 <tcp_new_port+0x84>)
 800fdfa:	881b      	ldrh	r3, [r3, #0]
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	370c      	adds	r7, #12
 800fe00:	46bd      	mov	sp, r7
 800fe02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe06:	4770      	bx	lr
 800fe08:	24000044 	.word	0x24000044
 800fe0c:	08019d38 	.word	0x08019d38

0800fe10 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b08a      	sub	sp, #40	; 0x28
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	60b9      	str	r1, [r7, #8]
 800fe1a:	603b      	str	r3, [r7, #0]
 800fe1c:	4613      	mov	r3, r2
 800fe1e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800fe20:	2300      	movs	r3, #0
 800fe22:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d109      	bne.n	800fe3e <tcp_connect+0x2e>
 800fe2a:	4b7d      	ldr	r3, [pc, #500]	; (8010020 <tcp_connect+0x210>)
 800fe2c:	f240 4235 	movw	r2, #1077	; 0x435
 800fe30:	497c      	ldr	r1, [pc, #496]	; (8010024 <tcp_connect+0x214>)
 800fe32:	487d      	ldr	r0, [pc, #500]	; (8010028 <tcp_connect+0x218>)
 800fe34:	f005 ffea 	bl	8015e0c <iprintf>
 800fe38:	f06f 030f 	mvn.w	r3, #15
 800fe3c:	e0ec      	b.n	8010018 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800fe3e:	68bb      	ldr	r3, [r7, #8]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d109      	bne.n	800fe58 <tcp_connect+0x48>
 800fe44:	4b76      	ldr	r3, [pc, #472]	; (8010020 <tcp_connect+0x210>)
 800fe46:	f240 4236 	movw	r2, #1078	; 0x436
 800fe4a:	4978      	ldr	r1, [pc, #480]	; (801002c <tcp_connect+0x21c>)
 800fe4c:	4876      	ldr	r0, [pc, #472]	; (8010028 <tcp_connect+0x218>)
 800fe4e:	f005 ffdd 	bl	8015e0c <iprintf>
 800fe52:	f06f 030f 	mvn.w	r3, #15
 800fe56:	e0df      	b.n	8010018 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	7d1b      	ldrb	r3, [r3, #20]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d009      	beq.n	800fe74 <tcp_connect+0x64>
 800fe60:	4b6f      	ldr	r3, [pc, #444]	; (8010020 <tcp_connect+0x210>)
 800fe62:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800fe66:	4972      	ldr	r1, [pc, #456]	; (8010030 <tcp_connect+0x220>)
 800fe68:	486f      	ldr	r0, [pc, #444]	; (8010028 <tcp_connect+0x218>)
 800fe6a:	f005 ffcf 	bl	8015e0c <iprintf>
 800fe6e:	f06f 0309 	mvn.w	r3, #9
 800fe72:	e0d1      	b.n	8010018 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d002      	beq.n	800fe80 <tcp_connect+0x70>
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	e000      	b.n	800fe82 <tcp_connect+0x72>
 800fe80:	2300      	movs	r3, #0
 800fe82:	68fa      	ldr	r2, [r7, #12]
 800fe84:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	88fa      	ldrh	r2, [r7, #6]
 800fe8a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	7a1b      	ldrb	r3, [r3, #8]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d006      	beq.n	800fea2 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	7a1b      	ldrb	r3, [r3, #8]
 800fe98:	4618      	mov	r0, r3
 800fe9a:	f7fe fc41 	bl	800e720 <netif_get_by_index>
 800fe9e:	6278      	str	r0, [r7, #36]	; 0x24
 800fea0:	e005      	b.n	800feae <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	3304      	adds	r3, #4
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fc fa5c 	bl	800c364 <ip4_route>
 800feac:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800feae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d102      	bne.n	800feba <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800feb4:	f06f 0303 	mvn.w	r3, #3
 800feb8:	e0ae      	b.n	8010018 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d003      	beq.n	800fec8 <tcp_connect+0xb8>
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d111      	bne.n	800feec <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800fec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d002      	beq.n	800fed4 <tcp_connect+0xc4>
 800fece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed0:	3304      	adds	r3, #4
 800fed2:	e000      	b.n	800fed6 <tcp_connect+0xc6>
 800fed4:	2300      	movs	r3, #0
 800fed6:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800fed8:	69fb      	ldr	r3, [r7, #28]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d102      	bne.n	800fee4 <tcp_connect+0xd4>
      return ERR_RTE;
 800fede:	f06f 0303 	mvn.w	r3, #3
 800fee2:	e099      	b.n	8010018 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	681a      	ldr	r2, [r3, #0]
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	8adb      	ldrh	r3, [r3, #22]
 800fef0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	8adb      	ldrh	r3, [r3, #22]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d10c      	bne.n	800ff14 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800fefa:	f7ff ff43 	bl	800fd84 <tcp_new_port>
 800fefe:	4603      	mov	r3, r0
 800ff00:	461a      	mov	r2, r3
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	8adb      	ldrh	r3, [r3, #22]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d102      	bne.n	800ff14 <tcp_connect+0x104>
      return ERR_BUF;
 800ff0e:	f06f 0301 	mvn.w	r3, #1
 800ff12:	e081      	b.n	8010018 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800ff14:	68f8      	ldr	r0, [r7, #12]
 800ff16:	f001 f811 	bl	8010f3c <tcp_next_iss>
 800ff1a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2200      	movs	r2, #0
 800ff20:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	697a      	ldr	r2, [r7, #20]
 800ff26:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	1e5a      	subs	r2, r3, #1
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	1e5a      	subs	r2, r3, #1
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	1e5a      	subs	r2, r3, #1
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ff40:	68fb      	ldr	r3, [r7, #12]
 800ff42:	f640 3268 	movw	r2, #2920	; 0xb68
 800ff46:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ff50:	68fb      	ldr	r3, [r7, #12]
 800ff52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	f640 3268 	movw	r2, #2920	; 0xb68
 800ff5e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ff68:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	3304      	adds	r3, #4
 800ff72:	461a      	mov	r2, r3
 800ff74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ff76:	f001 f807 	bl	8010f88 <tcp_eff_send_mss_netif>
 800ff7a:	4603      	mov	r3, r0
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2201      	movs	r2, #1
 800ff86:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	683a      	ldr	r2, [r7, #0]
 800ff8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800ff92:	2102      	movs	r1, #2
 800ff94:	68f8      	ldr	r0, [r7, #12]
 800ff96:	f003 fe9b 	bl	8013cd0 <tcp_enqueue_flags>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800ff9e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d136      	bne.n	8010014 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2202      	movs	r2, #2
 800ffaa:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800ffac:	8b7b      	ldrh	r3, [r7, #26]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d021      	beq.n	800fff6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ffb2:	4b20      	ldr	r3, [pc, #128]	; (8010034 <tcp_connect+0x224>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	68fa      	ldr	r2, [r7, #12]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d105      	bne.n	800ffc8 <tcp_connect+0x1b8>
 800ffbc:	4b1d      	ldr	r3, [pc, #116]	; (8010034 <tcp_connect+0x224>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	68db      	ldr	r3, [r3, #12]
 800ffc2:	4a1c      	ldr	r2, [pc, #112]	; (8010034 <tcp_connect+0x224>)
 800ffc4:	6013      	str	r3, [r2, #0]
 800ffc6:	e013      	b.n	800fff0 <tcp_connect+0x1e0>
 800ffc8:	4b1a      	ldr	r3, [pc, #104]	; (8010034 <tcp_connect+0x224>)
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	623b      	str	r3, [r7, #32]
 800ffce:	e00c      	b.n	800ffea <tcp_connect+0x1da>
 800ffd0:	6a3b      	ldr	r3, [r7, #32]
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d104      	bne.n	800ffe4 <tcp_connect+0x1d4>
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	68da      	ldr	r2, [r3, #12]
 800ffde:	6a3b      	ldr	r3, [r7, #32]
 800ffe0:	60da      	str	r2, [r3, #12]
 800ffe2:	e005      	b.n	800fff0 <tcp_connect+0x1e0>
 800ffe4:	6a3b      	ldr	r3, [r7, #32]
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	623b      	str	r3, [r7, #32]
 800ffea:	6a3b      	ldr	r3, [r7, #32]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d1ef      	bne.n	800ffd0 <tcp_connect+0x1c0>
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2200      	movs	r2, #0
 800fff4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800fff6:	4b10      	ldr	r3, [pc, #64]	; (8010038 <tcp_connect+0x228>)
 800fff8:	681a      	ldr	r2, [r3, #0]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	60da      	str	r2, [r3, #12]
 800fffe:	4a0e      	ldr	r2, [pc, #56]	; (8010038 <tcp_connect+0x228>)
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	6013      	str	r3, [r2, #0]
 8010004:	f004 fec8 	bl	8014d98 <tcp_timer_needed>
 8010008:	4b0c      	ldr	r3, [pc, #48]	; (801003c <tcp_connect+0x22c>)
 801000a:	2201      	movs	r2, #1
 801000c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801000e:	68f8      	ldr	r0, [r7, #12]
 8010010:	f003 ff4c 	bl	8013eac <tcp_output>
  }
  return ret;
 8010014:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010018:	4618      	mov	r0, r3
 801001a:	3728      	adds	r7, #40	; 0x28
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	08019d48 	.word	0x08019d48
 8010024:	0801a068 	.word	0x0801a068
 8010028:	08019dd0 	.word	0x08019dd0
 801002c:	0801a084 	.word	0x0801a084
 8010030:	0801a0a0 	.word	0x0801a0a0
 8010034:	2400a790 	.word	0x2400a790
 8010038:	2400a784 	.word	0x2400a784
 801003c:	2400a780 	.word	0x2400a780

08010040 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010040:	b5b0      	push	{r4, r5, r7, lr}
 8010042:	b090      	sub	sp, #64	; 0x40
 8010044:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010046:	2300      	movs	r3, #0
 8010048:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801004c:	4b94      	ldr	r3, [pc, #592]	; (80102a0 <tcp_slowtmr+0x260>)
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	3301      	adds	r3, #1
 8010052:	4a93      	ldr	r2, [pc, #588]	; (80102a0 <tcp_slowtmr+0x260>)
 8010054:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010056:	4b93      	ldr	r3, [pc, #588]	; (80102a4 <tcp_slowtmr+0x264>)
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	3301      	adds	r3, #1
 801005c:	b2da      	uxtb	r2, r3
 801005e:	4b91      	ldr	r3, [pc, #580]	; (80102a4 <tcp_slowtmr+0x264>)
 8010060:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010062:	2300      	movs	r3, #0
 8010064:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010066:	4b90      	ldr	r3, [pc, #576]	; (80102a8 <tcp_slowtmr+0x268>)
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801006c:	e287      	b.n	801057e <tcp_slowtmr+0x53e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801006e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010070:	7d1b      	ldrb	r3, [r3, #20]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d106      	bne.n	8010084 <tcp_slowtmr+0x44>
 8010076:	4b8d      	ldr	r3, [pc, #564]	; (80102ac <tcp_slowtmr+0x26c>)
 8010078:	f240 42be 	movw	r2, #1214	; 0x4be
 801007c:	498c      	ldr	r1, [pc, #560]	; (80102b0 <tcp_slowtmr+0x270>)
 801007e:	488d      	ldr	r0, [pc, #564]	; (80102b4 <tcp_slowtmr+0x274>)
 8010080:	f005 fec4 	bl	8015e0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010086:	7d1b      	ldrb	r3, [r3, #20]
 8010088:	2b01      	cmp	r3, #1
 801008a:	d106      	bne.n	801009a <tcp_slowtmr+0x5a>
 801008c:	4b87      	ldr	r3, [pc, #540]	; (80102ac <tcp_slowtmr+0x26c>)
 801008e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010092:	4989      	ldr	r1, [pc, #548]	; (80102b8 <tcp_slowtmr+0x278>)
 8010094:	4887      	ldr	r0, [pc, #540]	; (80102b4 <tcp_slowtmr+0x274>)
 8010096:	f005 feb9 	bl	8015e0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801009a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801009c:	7d1b      	ldrb	r3, [r3, #20]
 801009e:	2b0a      	cmp	r3, #10
 80100a0:	d106      	bne.n	80100b0 <tcp_slowtmr+0x70>
 80100a2:	4b82      	ldr	r3, [pc, #520]	; (80102ac <tcp_slowtmr+0x26c>)
 80100a4:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80100a8:	4984      	ldr	r1, [pc, #528]	; (80102bc <tcp_slowtmr+0x27c>)
 80100aa:	4882      	ldr	r0, [pc, #520]	; (80102b4 <tcp_slowtmr+0x274>)
 80100ac:	f005 feae 	bl	8015e0c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80100b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100b2:	7f9a      	ldrb	r2, [r3, #30]
 80100b4:	4b7b      	ldr	r3, [pc, #492]	; (80102a4 <tcp_slowtmr+0x264>)
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d105      	bne.n	80100c8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80100bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80100c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100c2:	68db      	ldr	r3, [r3, #12]
 80100c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80100c6:	e25a      	b.n	801057e <tcp_slowtmr+0x53e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80100c8:	4b76      	ldr	r3, [pc, #472]	; (80102a4 <tcp_slowtmr+0x264>)
 80100ca:	781a      	ldrb	r2, [r3, #0]
 80100cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ce:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80100d0:	2300      	movs	r3, #0
 80100d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80100d6:	2300      	movs	r3, #0
 80100d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80100dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100de:	7d1b      	ldrb	r3, [r3, #20]
 80100e0:	2b02      	cmp	r3, #2
 80100e2:	d10a      	bne.n	80100fa <tcp_slowtmr+0xba>
 80100e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80100ea:	2b05      	cmp	r3, #5
 80100ec:	d905      	bls.n	80100fa <tcp_slowtmr+0xba>
      ++pcb_remove;
 80100ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100f2:	3301      	adds	r3, #1
 80100f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80100f8:	e11e      	b.n	8010338 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80100fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010100:	2b0b      	cmp	r3, #11
 8010102:	d905      	bls.n	8010110 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010104:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010108:	3301      	adds	r3, #1
 801010a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801010e:	e113      	b.n	8010338 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010112:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010116:	2b00      	cmp	r3, #0
 8010118:	d075      	beq.n	8010206 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801011a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801011e:	2b00      	cmp	r3, #0
 8010120:	d006      	beq.n	8010130 <tcp_slowtmr+0xf0>
 8010122:	4b62      	ldr	r3, [pc, #392]	; (80102ac <tcp_slowtmr+0x26c>)
 8010124:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010128:	4965      	ldr	r1, [pc, #404]	; (80102c0 <tcp_slowtmr+0x280>)
 801012a:	4862      	ldr	r0, [pc, #392]	; (80102b4 <tcp_slowtmr+0x274>)
 801012c:	f005 fe6e 	bl	8015e0c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010134:	2b00      	cmp	r3, #0
 8010136:	d106      	bne.n	8010146 <tcp_slowtmr+0x106>
 8010138:	4b5c      	ldr	r3, [pc, #368]	; (80102ac <tcp_slowtmr+0x26c>)
 801013a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801013e:	4961      	ldr	r1, [pc, #388]	; (80102c4 <tcp_slowtmr+0x284>)
 8010140:	485c      	ldr	r0, [pc, #368]	; (80102b4 <tcp_slowtmr+0x274>)
 8010142:	f005 fe63 	bl	8015e0c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010148:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 801014c:	2b0b      	cmp	r3, #11
 801014e:	d905      	bls.n	801015c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010154:	3301      	adds	r3, #1
 8010156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801015a:	e0ed      	b.n	8010338 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801015c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801015e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010162:	3b01      	subs	r3, #1
 8010164:	4a58      	ldr	r2, [pc, #352]	; (80102c8 <tcp_slowtmr+0x288>)
 8010166:	5cd3      	ldrb	r3, [r2, r3]
 8010168:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801016a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8010170:	7c7a      	ldrb	r2, [r7, #17]
 8010172:	429a      	cmp	r2, r3
 8010174:	d907      	bls.n	8010186 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8010176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010178:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801017c:	3301      	adds	r3, #1
 801017e:	b2da      	uxtb	r2, r3
 8010180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010182:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8010186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010188:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 801018c:	7c7a      	ldrb	r2, [r7, #17]
 801018e:	429a      	cmp	r2, r3
 8010190:	f200 80d2 	bhi.w	8010338 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010194:	2301      	movs	r3, #1
 8010196:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801019a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d108      	bne.n	80101b4 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80101a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101a4:	f004 fd2a 	bl	8014bfc <tcp_zero_window_probe>
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d014      	beq.n	80101d8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80101ae:	2300      	movs	r3, #0
 80101b0:	623b      	str	r3, [r7, #32]
 80101b2:	e011      	b.n	80101d8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80101b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80101ba:	4619      	mov	r1, r3
 80101bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101be:	f003 fbef 	bl	80139a0 <tcp_split_unsent_seg>
 80101c2:	4603      	mov	r3, r0
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d107      	bne.n	80101d8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80101c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80101ca:	f003 fe6f 	bl	8013eac <tcp_output>
 80101ce:	4603      	mov	r3, r0
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d101      	bne.n	80101d8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80101d4:	2300      	movs	r3, #0
 80101d6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80101d8:	6a3b      	ldr	r3, [r7, #32]
 80101da:	2b00      	cmp	r3, #0
 80101dc:	f000 80ac 	beq.w	8010338 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80101e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e2:	2200      	movs	r2, #0
 80101e4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80101e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ea:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80101ee:	2b06      	cmp	r3, #6
 80101f0:	f200 80a2 	bhi.w	8010338 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80101f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101f6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80101fa:	3301      	adds	r3, #1
 80101fc:	b2da      	uxtb	r2, r3
 80101fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010200:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8010204:	e098      	b.n	8010338 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010208:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801020c:	2b00      	cmp	r3, #0
 801020e:	db0f      	blt.n	8010230 <tcp_slowtmr+0x1f0>
 8010210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010212:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010216:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801021a:	4293      	cmp	r3, r2
 801021c:	d008      	beq.n	8010230 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801021e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010220:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010224:	b29b      	uxth	r3, r3
 8010226:	3301      	adds	r3, #1
 8010228:	b29b      	uxth	r3, r3
 801022a:	b21a      	sxth	r2, r3
 801022c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010232:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010238:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801023c:	429a      	cmp	r2, r3
 801023e:	db7b      	blt.n	8010338 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010240:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010242:	f004 f925 	bl	8014490 <tcp_rexmit_rto_prepare>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	d007      	beq.n	801025c <tcp_slowtmr+0x21c>
 801024c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801024e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010250:	2b00      	cmp	r3, #0
 8010252:	d171      	bne.n	8010338 <tcp_slowtmr+0x2f8>
 8010254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010258:	2b00      	cmp	r3, #0
 801025a:	d06d      	beq.n	8010338 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801025c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025e:	7d1b      	ldrb	r3, [r3, #20]
 8010260:	2b02      	cmp	r3, #2
 8010262:	d03a      	beq.n	80102da <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010266:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801026a:	2b0c      	cmp	r3, #12
 801026c:	bf28      	it	cs
 801026e:	230c      	movcs	r3, #12
 8010270:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010274:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010278:	10db      	asrs	r3, r3, #3
 801027a:	b21b      	sxth	r3, r3
 801027c:	461a      	mov	r2, r3
 801027e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010280:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010284:	4413      	add	r3, r2
 8010286:	7efa      	ldrb	r2, [r7, #27]
 8010288:	4910      	ldr	r1, [pc, #64]	; (80102cc <tcp_slowtmr+0x28c>)
 801028a:	5c8a      	ldrb	r2, [r1, r2]
 801028c:	4093      	lsls	r3, r2
 801028e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010296:	4293      	cmp	r3, r2
 8010298:	dc1a      	bgt.n	80102d0 <tcp_slowtmr+0x290>
 801029a:	697b      	ldr	r3, [r7, #20]
 801029c:	b21a      	sxth	r2, r3
 801029e:	e019      	b.n	80102d4 <tcp_slowtmr+0x294>
 80102a0:	2400a788 	.word	0x2400a788
 80102a4:	240067b6 	.word	0x240067b6
 80102a8:	2400a784 	.word	0x2400a784
 80102ac:	08019d48 	.word	0x08019d48
 80102b0:	0801a0d0 	.word	0x0801a0d0
 80102b4:	08019dd0 	.word	0x08019dd0
 80102b8:	0801a0fc 	.word	0x0801a0fc
 80102bc:	0801a128 	.word	0x0801a128
 80102c0:	0801a158 	.word	0x0801a158
 80102c4:	0801a18c 	.word	0x0801a18c
 80102c8:	08019d30 	.word	0x08019d30
 80102cc:	08019d20 	.word	0x08019d20
 80102d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80102d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80102da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102dc:	2200      	movs	r2, #0
 80102de:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80102e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80102e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80102ec:	4293      	cmp	r3, r2
 80102ee:	bf28      	it	cs
 80102f0:	4613      	movcs	r3, r2
 80102f2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80102f4:	8a7b      	ldrh	r3, [r7, #18]
 80102f6:	085b      	lsrs	r3, r3, #1
 80102f8:	b29a      	uxth	r2, r3
 80102fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010302:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010308:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801030a:	005b      	lsls	r3, r3, #1
 801030c:	b29b      	uxth	r3, r3
 801030e:	429a      	cmp	r2, r3
 8010310:	d206      	bcs.n	8010320 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010316:	005b      	lsls	r3, r3, #1
 8010318:	b29a      	uxth	r2, r3
 801031a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010322:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010326:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801032a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032c:	2200      	movs	r2, #0
 801032e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8010332:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010334:	f004 f91c 	bl	8014570 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801033a:	7d1b      	ldrb	r3, [r3, #20]
 801033c:	2b06      	cmp	r3, #6
 801033e:	d111      	bne.n	8010364 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010342:	8b5b      	ldrh	r3, [r3, #26]
 8010344:	f003 0310 	and.w	r3, r3, #16
 8010348:	2b00      	cmp	r3, #0
 801034a:	d00b      	beq.n	8010364 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801034c:	4b91      	ldr	r3, [pc, #580]	; (8010594 <tcp_slowtmr+0x554>)
 801034e:	681a      	ldr	r2, [r3, #0]
 8010350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010352:	6a1b      	ldr	r3, [r3, #32]
 8010354:	1ad3      	subs	r3, r2, r3
 8010356:	2b28      	cmp	r3, #40	; 0x28
 8010358:	d904      	bls.n	8010364 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801035a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801035e:	3301      	adds	r3, #1
 8010360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010366:	7a5b      	ldrb	r3, [r3, #9]
 8010368:	f003 0308 	and.w	r3, r3, #8
 801036c:	2b00      	cmp	r3, #0
 801036e:	d04a      	beq.n	8010406 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8010370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010372:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010374:	2b04      	cmp	r3, #4
 8010376:	d003      	beq.n	8010380 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801037a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801037c:	2b07      	cmp	r3, #7
 801037e:	d142      	bne.n	8010406 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010380:	4b84      	ldr	r3, [pc, #528]	; (8010594 <tcp_slowtmr+0x554>)
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010386:	6a1b      	ldr	r3, [r3, #32]
 8010388:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801038a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8010390:	4b81      	ldr	r3, [pc, #516]	; (8010598 <tcp_slowtmr+0x558>)
 8010392:	440b      	add	r3, r1
 8010394:	4981      	ldr	r1, [pc, #516]	; (801059c <tcp_slowtmr+0x55c>)
 8010396:	fba1 1303 	umull	r1, r3, r1, r3
 801039a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801039c:	429a      	cmp	r2, r3
 801039e:	d90a      	bls.n	80103b6 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80103a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103a4:	3301      	adds	r3, #1
 80103a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80103aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80103ae:	3301      	adds	r3, #1
 80103b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80103b4:	e027      	b.n	8010406 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80103b6:	4b77      	ldr	r3, [pc, #476]	; (8010594 <tcp_slowtmr+0x554>)
 80103b8:	681a      	ldr	r2, [r3, #0]
 80103ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103bc:	6a1b      	ldr	r3, [r3, #32]
 80103be:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80103c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c2:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80103c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103c8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80103cc:	4618      	mov	r0, r3
 80103ce:	4b74      	ldr	r3, [pc, #464]	; (80105a0 <tcp_slowtmr+0x560>)
 80103d0:	fb03 f300 	mul.w	r3, r3, r0
 80103d4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80103d6:	4971      	ldr	r1, [pc, #452]	; (801059c <tcp_slowtmr+0x55c>)
 80103d8:	fba1 1303 	umull	r1, r3, r1, r3
 80103dc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80103de:	429a      	cmp	r2, r3
 80103e0:	d911      	bls.n	8010406 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80103e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103e4:	f004 fbca 	bl	8014b7c <tcp_keepalive>
 80103e8:	4603      	mov	r3, r0
 80103ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80103ee:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d107      	bne.n	8010406 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80103f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f8:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 80103fc:	3301      	adds	r3, #1
 80103fe:	b2da      	uxtb	r2, r3
 8010400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010402:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      tcp_free_ooseq(pcb);
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8010406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010408:	7d1b      	ldrb	r3, [r3, #20]
 801040a:	2b03      	cmp	r3, #3
 801040c:	d10b      	bne.n	8010426 <tcp_slowtmr+0x3e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801040e:	4b61      	ldr	r3, [pc, #388]	; (8010594 <tcp_slowtmr+0x554>)
 8010410:	681a      	ldr	r2, [r3, #0]
 8010412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010414:	6a1b      	ldr	r3, [r3, #32]
 8010416:	1ad3      	subs	r3, r2, r3
 8010418:	2b28      	cmp	r3, #40	; 0x28
 801041a:	d904      	bls.n	8010426 <tcp_slowtmr+0x3e6>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801041c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010420:	3301      	adds	r3, #1
 8010422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8010426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010428:	7d1b      	ldrb	r3, [r3, #20]
 801042a:	2b09      	cmp	r3, #9
 801042c:	d10b      	bne.n	8010446 <tcp_slowtmr+0x406>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801042e:	4b59      	ldr	r3, [pc, #356]	; (8010594 <tcp_slowtmr+0x554>)
 8010430:	681a      	ldr	r2, [r3, #0]
 8010432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010434:	6a1b      	ldr	r3, [r3, #32]
 8010436:	1ad3      	subs	r3, r2, r3
 8010438:	2bf0      	cmp	r3, #240	; 0xf0
 801043a:	d904      	bls.n	8010446 <tcp_slowtmr+0x406>
        ++pcb_remove;
 801043c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010440:	3301      	adds	r3, #1
 8010442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801044a:	2b00      	cmp	r3, #0
 801044c:	d060      	beq.n	8010510 <tcp_slowtmr+0x4d0>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801044e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010454:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8010456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010458:	f000 fca0 	bl	8010d9c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801045c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801045e:	2b00      	cmp	r3, #0
 8010460:	d010      	beq.n	8010484 <tcp_slowtmr+0x444>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010462:	4b50      	ldr	r3, [pc, #320]	; (80105a4 <tcp_slowtmr+0x564>)
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010468:	429a      	cmp	r2, r3
 801046a:	d106      	bne.n	801047a <tcp_slowtmr+0x43a>
 801046c:	4b4e      	ldr	r3, [pc, #312]	; (80105a8 <tcp_slowtmr+0x568>)
 801046e:	f240 526d 	movw	r2, #1389	; 0x56d
 8010472:	494e      	ldr	r1, [pc, #312]	; (80105ac <tcp_slowtmr+0x56c>)
 8010474:	484e      	ldr	r0, [pc, #312]	; (80105b0 <tcp_slowtmr+0x570>)
 8010476:	f005 fcc9 	bl	8015e0c <iprintf>
        prev->next = pcb->next;
 801047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047c:	68da      	ldr	r2, [r3, #12]
 801047e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010480:	60da      	str	r2, [r3, #12]
 8010482:	e00f      	b.n	80104a4 <tcp_slowtmr+0x464>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010484:	4b47      	ldr	r3, [pc, #284]	; (80105a4 <tcp_slowtmr+0x564>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801048a:	429a      	cmp	r2, r3
 801048c:	d006      	beq.n	801049c <tcp_slowtmr+0x45c>
 801048e:	4b46      	ldr	r3, [pc, #280]	; (80105a8 <tcp_slowtmr+0x568>)
 8010490:	f240 5271 	movw	r2, #1393	; 0x571
 8010494:	4947      	ldr	r1, [pc, #284]	; (80105b4 <tcp_slowtmr+0x574>)
 8010496:	4846      	ldr	r0, [pc, #280]	; (80105b0 <tcp_slowtmr+0x570>)
 8010498:	f005 fcb8 	bl	8015e0c <iprintf>
        tcp_active_pcbs = pcb->next;
 801049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049e:	68db      	ldr	r3, [r3, #12]
 80104a0:	4a40      	ldr	r2, [pc, #256]	; (80105a4 <tcp_slowtmr+0x564>)
 80104a2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80104a4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d013      	beq.n	80104d4 <tcp_slowtmr+0x494>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80104ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80104b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80104b4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80104b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b8:	3304      	adds	r3, #4
 80104ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104bc:	8ad2      	ldrh	r2, [r2, #22]
 80104be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80104c0:	8b09      	ldrh	r1, [r1, #24]
 80104c2:	9102      	str	r1, [sp, #8]
 80104c4:	9201      	str	r2, [sp, #4]
 80104c6:	9300      	str	r3, [sp, #0]
 80104c8:	462b      	mov	r3, r5
 80104ca:	4622      	mov	r2, r4
 80104cc:	4601      	mov	r1, r0
 80104ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104d0:	f004 faa0 	bl	8014a14 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80104d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d6:	691b      	ldr	r3, [r3, #16]
 80104d8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80104da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104dc:	7d1b      	ldrb	r3, [r3, #20]
 80104de:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80104e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80104e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80104ea:	6838      	ldr	r0, [r7, #0]
 80104ec:	f7fe fef6 	bl	800f2dc <tcp_free>

      tcp_active_pcbs_changed = 0;
 80104f0:	4b31      	ldr	r3, [pc, #196]	; (80105b8 <tcp_slowtmr+0x578>)
 80104f2:	2200      	movs	r2, #0
 80104f4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d004      	beq.n	8010506 <tcp_slowtmr+0x4c6>
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	f06f 010c 	mvn.w	r1, #12
 8010502:	68b8      	ldr	r0, [r7, #8]
 8010504:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010506:	4b2c      	ldr	r3, [pc, #176]	; (80105b8 <tcp_slowtmr+0x578>)
 8010508:	781b      	ldrb	r3, [r3, #0]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d037      	beq.n	801057e <tcp_slowtmr+0x53e>
        goto tcp_slowtmr_start;
 801050e:	e5a8      	b.n	8010062 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010512:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801051a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051c:	7f1b      	ldrb	r3, [r3, #28]
 801051e:	3301      	adds	r3, #1
 8010520:	b2da      	uxtb	r2, r3
 8010522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010524:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010528:	7f1a      	ldrb	r2, [r3, #28]
 801052a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801052c:	7f5b      	ldrb	r3, [r3, #29]
 801052e:	429a      	cmp	r2, r3
 8010530:	d325      	bcc.n	801057e <tcp_slowtmr+0x53e>
        prev->polltmr = 0;
 8010532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010534:	2200      	movs	r2, #0
 8010536:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010538:	4b1f      	ldr	r3, [pc, #124]	; (80105b8 <tcp_slowtmr+0x578>)
 801053a:	2200      	movs	r2, #0
 801053c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801053e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010544:	2b00      	cmp	r3, #0
 8010546:	d00b      	beq.n	8010560 <tcp_slowtmr+0x520>
 8010548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801054a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801054e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010550:	6912      	ldr	r2, [r2, #16]
 8010552:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010554:	4610      	mov	r0, r2
 8010556:	4798      	blx	r3
 8010558:	4603      	mov	r3, r0
 801055a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801055e:	e002      	b.n	8010566 <tcp_slowtmr+0x526>
 8010560:	2300      	movs	r3, #0
 8010562:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010566:	4b14      	ldr	r3, [pc, #80]	; (80105b8 <tcp_slowtmr+0x578>)
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d000      	beq.n	8010570 <tcp_slowtmr+0x530>
          goto tcp_slowtmr_start;
 801056e:	e578      	b.n	8010062 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010570:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010574:	2b00      	cmp	r3, #0
 8010576:	d102      	bne.n	801057e <tcp_slowtmr+0x53e>
          tcp_output(prev);
 8010578:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801057a:	f003 fc97 	bl	8013eac <tcp_output>
  while (pcb != NULL) {
 801057e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010580:	2b00      	cmp	r3, #0
 8010582:	f47f ad74 	bne.w	801006e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010586:	2300      	movs	r3, #0
 8010588:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801058a:	4b0c      	ldr	r3, [pc, #48]	; (80105bc <tcp_slowtmr+0x57c>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010590:	e069      	b.n	8010666 <tcp_slowtmr+0x626>
 8010592:	bf00      	nop
 8010594:	2400a788 	.word	0x2400a788
 8010598:	000a4cb8 	.word	0x000a4cb8
 801059c:	10624dd3 	.word	0x10624dd3
 80105a0:	000124f8 	.word	0x000124f8
 80105a4:	2400a784 	.word	0x2400a784
 80105a8:	08019d48 	.word	0x08019d48
 80105ac:	0801a1c4 	.word	0x0801a1c4
 80105b0:	08019dd0 	.word	0x08019dd0
 80105b4:	0801a1f0 	.word	0x0801a1f0
 80105b8:	2400a780 	.word	0x2400a780
 80105bc:	2400a794 	.word	0x2400a794
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80105c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c2:	7d1b      	ldrb	r3, [r3, #20]
 80105c4:	2b0a      	cmp	r3, #10
 80105c6:	d006      	beq.n	80105d6 <tcp_slowtmr+0x596>
 80105c8:	4b2b      	ldr	r3, [pc, #172]	; (8010678 <tcp_slowtmr+0x638>)
 80105ca:	f240 52a1 	movw	r2, #1441	; 0x5a1
 80105ce:	492b      	ldr	r1, [pc, #172]	; (801067c <tcp_slowtmr+0x63c>)
 80105d0:	482b      	ldr	r0, [pc, #172]	; (8010680 <tcp_slowtmr+0x640>)
 80105d2:	f005 fc1b 	bl	8015e0c <iprintf>
    pcb_remove = 0;
 80105d6:	2300      	movs	r3, #0
 80105d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80105dc:	4b29      	ldr	r3, [pc, #164]	; (8010684 <tcp_slowtmr+0x644>)
 80105de:	681a      	ldr	r2, [r3, #0]
 80105e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e2:	6a1b      	ldr	r3, [r3, #32]
 80105e4:	1ad3      	subs	r3, r2, r3
 80105e6:	2bf0      	cmp	r3, #240	; 0xf0
 80105e8:	d904      	bls.n	80105f4 <tcp_slowtmr+0x5b4>
      ++pcb_remove;
 80105ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105ee:	3301      	adds	r3, #1
 80105f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80105f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d02f      	beq.n	801065c <tcp_slowtmr+0x61c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80105fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105fe:	f000 fbcd 	bl	8010d9c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010604:	2b00      	cmp	r3, #0
 8010606:	d010      	beq.n	801062a <tcp_slowtmr+0x5ea>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010608:	4b1f      	ldr	r3, [pc, #124]	; (8010688 <tcp_slowtmr+0x648>)
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801060e:	429a      	cmp	r2, r3
 8010610:	d106      	bne.n	8010620 <tcp_slowtmr+0x5e0>
 8010612:	4b19      	ldr	r3, [pc, #100]	; (8010678 <tcp_slowtmr+0x638>)
 8010614:	f240 52af 	movw	r2, #1455	; 0x5af
 8010618:	491c      	ldr	r1, [pc, #112]	; (801068c <tcp_slowtmr+0x64c>)
 801061a:	4819      	ldr	r0, [pc, #100]	; (8010680 <tcp_slowtmr+0x640>)
 801061c:	f005 fbf6 	bl	8015e0c <iprintf>
        prev->next = pcb->next;
 8010620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010622:	68da      	ldr	r2, [r3, #12]
 8010624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010626:	60da      	str	r2, [r3, #12]
 8010628:	e00f      	b.n	801064a <tcp_slowtmr+0x60a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801062a:	4b17      	ldr	r3, [pc, #92]	; (8010688 <tcp_slowtmr+0x648>)
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010630:	429a      	cmp	r2, r3
 8010632:	d006      	beq.n	8010642 <tcp_slowtmr+0x602>
 8010634:	4b10      	ldr	r3, [pc, #64]	; (8010678 <tcp_slowtmr+0x638>)
 8010636:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801063a:	4915      	ldr	r1, [pc, #84]	; (8010690 <tcp_slowtmr+0x650>)
 801063c:	4810      	ldr	r0, [pc, #64]	; (8010680 <tcp_slowtmr+0x640>)
 801063e:	f005 fbe5 	bl	8015e0c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010644:	68db      	ldr	r3, [r3, #12]
 8010646:	4a10      	ldr	r2, [pc, #64]	; (8010688 <tcp_slowtmr+0x648>)
 8010648:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801064a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801064c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801064e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010650:	68db      	ldr	r3, [r3, #12]
 8010652:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010654:	69f8      	ldr	r0, [r7, #28]
 8010656:	f7fe fe41 	bl	800f2dc <tcp_free>
 801065a:	e004      	b.n	8010666 <tcp_slowtmr+0x626>
    } else {
      prev = pcb;
 801065c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801065e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010662:	68db      	ldr	r3, [r3, #12]
 8010664:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010668:	2b00      	cmp	r3, #0
 801066a:	d1a9      	bne.n	80105c0 <tcp_slowtmr+0x580>
    }
  }
}
 801066c:	bf00      	nop
 801066e:	bf00      	nop
 8010670:	3730      	adds	r7, #48	; 0x30
 8010672:	46bd      	mov	sp, r7
 8010674:	bdb0      	pop	{r4, r5, r7, pc}
 8010676:	bf00      	nop
 8010678:	08019d48 	.word	0x08019d48
 801067c:	0801a21c 	.word	0x0801a21c
 8010680:	08019dd0 	.word	0x08019dd0
 8010684:	2400a788 	.word	0x2400a788
 8010688:	2400a794 	.word	0x2400a794
 801068c:	0801a24c 	.word	0x0801a24c
 8010690:	0801a274 	.word	0x0801a274

08010694 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801069a:	4b2d      	ldr	r3, [pc, #180]	; (8010750 <tcp_fasttmr+0xbc>)
 801069c:	781b      	ldrb	r3, [r3, #0]
 801069e:	3301      	adds	r3, #1
 80106a0:	b2da      	uxtb	r2, r3
 80106a2:	4b2b      	ldr	r3, [pc, #172]	; (8010750 <tcp_fasttmr+0xbc>)
 80106a4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80106a6:	4b2b      	ldr	r3, [pc, #172]	; (8010754 <tcp_fasttmr+0xc0>)
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80106ac:	e048      	b.n	8010740 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	7f9a      	ldrb	r2, [r3, #30]
 80106b2:	4b27      	ldr	r3, [pc, #156]	; (8010750 <tcp_fasttmr+0xbc>)
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	429a      	cmp	r2, r3
 80106b8:	d03f      	beq.n	801073a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80106ba:	4b25      	ldr	r3, [pc, #148]	; (8010750 <tcp_fasttmr+0xbc>)
 80106bc:	781a      	ldrb	r2, [r3, #0]
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	8b5b      	ldrh	r3, [r3, #26]
 80106c6:	f003 0301 	and.w	r3, r3, #1
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d010      	beq.n	80106f0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	8b5b      	ldrh	r3, [r3, #26]
 80106d2:	f043 0302 	orr.w	r3, r3, #2
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f003 fbe5 	bl	8013eac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	8b5b      	ldrh	r3, [r3, #26]
 80106e6:	f023 0303 	bic.w	r3, r3, #3
 80106ea:	b29a      	uxth	r2, r3
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	8b5b      	ldrh	r3, [r3, #26]
 80106f4:	f003 0308 	and.w	r3, r3, #8
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d009      	beq.n	8010710 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	8b5b      	ldrh	r3, [r3, #26]
 8010700:	f023 0308 	bic.w	r3, r3, #8
 8010704:	b29a      	uxth	r2, r3
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801070a:	6878      	ldr	r0, [r7, #4]
 801070c:	f7fe ff7a 	bl	800f604 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	68db      	ldr	r3, [r3, #12]
 8010714:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801071a:	2b00      	cmp	r3, #0
 801071c:	d00a      	beq.n	8010734 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801071e:	4b0e      	ldr	r3, [pc, #56]	; (8010758 <tcp_fasttmr+0xc4>)
 8010720:	2200      	movs	r2, #0
 8010722:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f000 f819 	bl	801075c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801072a:	4b0b      	ldr	r3, [pc, #44]	; (8010758 <tcp_fasttmr+0xc4>)
 801072c:	781b      	ldrb	r3, [r3, #0]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d000      	beq.n	8010734 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8010732:	e7b8      	b.n	80106a6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	607b      	str	r3, [r7, #4]
 8010738:	e002      	b.n	8010740 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	68db      	ldr	r3, [r3, #12]
 801073e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d1b3      	bne.n	80106ae <tcp_fasttmr+0x1a>
    }
  }
}
 8010746:	bf00      	nop
 8010748:	bf00      	nop
 801074a:	3708      	adds	r7, #8
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}
 8010750:	240067b6 	.word	0x240067b6
 8010754:	2400a784 	.word	0x2400a784
 8010758:	2400a780 	.word	0x2400a780

0801075c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801075c:	b590      	push	{r4, r7, lr}
 801075e:	b085      	sub	sp, #20
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d109      	bne.n	801077e <tcp_process_refused_data+0x22>
 801076a:	4b38      	ldr	r3, [pc, #224]	; (801084c <tcp_process_refused_data+0xf0>)
 801076c:	f240 6209 	movw	r2, #1545	; 0x609
 8010770:	4937      	ldr	r1, [pc, #220]	; (8010850 <tcp_process_refused_data+0xf4>)
 8010772:	4838      	ldr	r0, [pc, #224]	; (8010854 <tcp_process_refused_data+0xf8>)
 8010774:	f005 fb4a 	bl	8015e0c <iprintf>
 8010778:	f06f 030f 	mvn.w	r3, #15
 801077c:	e061      	b.n	8010842 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010782:	7b5b      	ldrb	r3, [r3, #13]
 8010784:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801078a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	2200      	movs	r2, #0
 8010790:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010798:	2b00      	cmp	r3, #0
 801079a:	d00b      	beq.n	80107b4 <tcp_process_refused_data+0x58>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	6918      	ldr	r0, [r3, #16]
 80107a6:	2300      	movs	r3, #0
 80107a8:	68ba      	ldr	r2, [r7, #8]
 80107aa:	6879      	ldr	r1, [r7, #4]
 80107ac:	47a0      	blx	r4
 80107ae:	4603      	mov	r3, r0
 80107b0:	73fb      	strb	r3, [r7, #15]
 80107b2:	e007      	b.n	80107c4 <tcp_process_refused_data+0x68>
 80107b4:	2300      	movs	r3, #0
 80107b6:	68ba      	ldr	r2, [r7, #8]
 80107b8:	6879      	ldr	r1, [r7, #4]
 80107ba:	2000      	movs	r0, #0
 80107bc:	f000 f87a 	bl	80108b4 <tcp_recv_null>
 80107c0:	4603      	mov	r3, r0
 80107c2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80107c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d12b      	bne.n	8010824 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80107cc:	7bbb      	ldrb	r3, [r7, #14]
 80107ce:	f003 0320 	and.w	r3, r3, #32
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d034      	beq.n	8010840 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107da:	f640 3268 	movw	r2, #2920	; 0xb68
 80107de:	4293      	cmp	r3, r2
 80107e0:	d005      	beq.n	80107ee <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107e6:	3301      	adds	r3, #1
 80107e8:	b29a      	uxth	r2, r3
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d00b      	beq.n	8010810 <tcp_process_refused_data+0xb4>
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6918      	ldr	r0, [r3, #16]
 8010802:	2300      	movs	r3, #0
 8010804:	2200      	movs	r2, #0
 8010806:	6879      	ldr	r1, [r7, #4]
 8010808:	47a0      	blx	r4
 801080a:	4603      	mov	r3, r0
 801080c:	73fb      	strb	r3, [r7, #15]
 801080e:	e001      	b.n	8010814 <tcp_process_refused_data+0xb8>
 8010810:	2300      	movs	r3, #0
 8010812:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010818:	f113 0f0d 	cmn.w	r3, #13
 801081c:	d110      	bne.n	8010840 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 801081e:	f06f 030c 	mvn.w	r3, #12
 8010822:	e00e      	b.n	8010842 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8010824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010828:	f113 0f0d 	cmn.w	r3, #13
 801082c:	d102      	bne.n	8010834 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801082e:	f06f 030c 	mvn.w	r3, #12
 8010832:	e006      	b.n	8010842 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	68ba      	ldr	r2, [r7, #8]
 8010838:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 801083a:	f06f 0304 	mvn.w	r3, #4
 801083e:	e000      	b.n	8010842 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8010840:	2300      	movs	r3, #0
}
 8010842:	4618      	mov	r0, r3
 8010844:	3714      	adds	r7, #20
 8010846:	46bd      	mov	sp, r7
 8010848:	bd90      	pop	{r4, r7, pc}
 801084a:	bf00      	nop
 801084c:	08019d48 	.word	0x08019d48
 8010850:	0801a29c 	.word	0x0801a29c
 8010854:	08019dd0 	.word	0x08019dd0

08010858 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b084      	sub	sp, #16
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010860:	e007      	b.n	8010872 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f000 f80a 	bl	8010882 <tcp_seg_free>
    seg = next;
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	2b00      	cmp	r3, #0
 8010876:	d1f4      	bne.n	8010862 <tcp_segs_free+0xa>
  }
}
 8010878:	bf00      	nop
 801087a:	bf00      	nop
 801087c:	3710      	adds	r7, #16
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}

08010882 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010882:	b580      	push	{r7, lr}
 8010884:	b082      	sub	sp, #8
 8010886:	af00      	add	r7, sp, #0
 8010888:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d00c      	beq.n	80108aa <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	685b      	ldr	r3, [r3, #4]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d004      	beq.n	80108a2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	4618      	mov	r0, r3
 801089e:	f7fe fa71 	bl	800ed84 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80108a2:	6879      	ldr	r1, [r7, #4]
 80108a4:	2003      	movs	r0, #3
 80108a6:	f7fd fc25 	bl	800e0f4 <memp_free>
  }
}
 80108aa:	bf00      	nop
 80108ac:	3708      	adds	r7, #8
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}
	...

080108b4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	b084      	sub	sp, #16
 80108b8:	af00      	add	r7, sp, #0
 80108ba:	60f8      	str	r0, [r7, #12]
 80108bc:	60b9      	str	r1, [r7, #8]
 80108be:	607a      	str	r2, [r7, #4]
 80108c0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d109      	bne.n	80108dc <tcp_recv_null+0x28>
 80108c8:	4b12      	ldr	r3, [pc, #72]	; (8010914 <tcp_recv_null+0x60>)
 80108ca:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80108ce:	4912      	ldr	r1, [pc, #72]	; (8010918 <tcp_recv_null+0x64>)
 80108d0:	4812      	ldr	r0, [pc, #72]	; (801091c <tcp_recv_null+0x68>)
 80108d2:	f005 fa9b 	bl	8015e0c <iprintf>
 80108d6:	f06f 030f 	mvn.w	r3, #15
 80108da:	e016      	b.n	801090a <tcp_recv_null+0x56>

  if (p != NULL) {
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d009      	beq.n	80108f6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	891b      	ldrh	r3, [r3, #8]
 80108e6:	4619      	mov	r1, r3
 80108e8:	68b8      	ldr	r0, [r7, #8]
 80108ea:	f7ff f9f9 	bl	800fce0 <tcp_recved>
    pbuf_free(p);
 80108ee:	6878      	ldr	r0, [r7, #4]
 80108f0:	f7fe fa48 	bl	800ed84 <pbuf_free>
 80108f4:	e008      	b.n	8010908 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80108f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d104      	bne.n	8010908 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80108fe:	68b8      	ldr	r0, [r7, #8]
 8010900:	f7fe feea 	bl	800f6d8 <tcp_close>
 8010904:	4603      	mov	r3, r0
 8010906:	e000      	b.n	801090a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010908:	2300      	movs	r3, #0
}
 801090a:	4618      	mov	r0, r3
 801090c:	3710      	adds	r7, #16
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	08019d48 	.word	0x08019d48
 8010918:	0801a2e0 	.word	0x0801a2e0
 801091c:	08019dd0 	.word	0x08019dd0

08010920 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b086      	sub	sp, #24
 8010924:	af00      	add	r7, sp, #0
 8010926:	4603      	mov	r3, r0
 8010928:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801092a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801092e:	2b00      	cmp	r3, #0
 8010930:	db01      	blt.n	8010936 <tcp_kill_prio+0x16>
 8010932:	79fb      	ldrb	r3, [r7, #7]
 8010934:	e000      	b.n	8010938 <tcp_kill_prio+0x18>
 8010936:	237f      	movs	r3, #127	; 0x7f
 8010938:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801093a:	7afb      	ldrb	r3, [r7, #11]
 801093c:	2b00      	cmp	r3, #0
 801093e:	d034      	beq.n	80109aa <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010940:	7afb      	ldrb	r3, [r7, #11]
 8010942:	3b01      	subs	r3, #1
 8010944:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010946:	2300      	movs	r3, #0
 8010948:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801094a:	2300      	movs	r3, #0
 801094c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801094e:	4b19      	ldr	r3, [pc, #100]	; (80109b4 <tcp_kill_prio+0x94>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	617b      	str	r3, [r7, #20]
 8010954:	e01f      	b.n	8010996 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010956:	697b      	ldr	r3, [r7, #20]
 8010958:	7d5b      	ldrb	r3, [r3, #21]
 801095a:	7afa      	ldrb	r2, [r7, #11]
 801095c:	429a      	cmp	r2, r3
 801095e:	d80c      	bhi.n	801097a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010964:	7afa      	ldrb	r2, [r7, #11]
 8010966:	429a      	cmp	r2, r3
 8010968:	d112      	bne.n	8010990 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801096a:	4b13      	ldr	r3, [pc, #76]	; (80109b8 <tcp_kill_prio+0x98>)
 801096c:	681a      	ldr	r2, [r3, #0]
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	6a1b      	ldr	r3, [r3, #32]
 8010972:	1ad3      	subs	r3, r2, r3
 8010974:	68fa      	ldr	r2, [r7, #12]
 8010976:	429a      	cmp	r2, r3
 8010978:	d80a      	bhi.n	8010990 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801097a:	4b0f      	ldr	r3, [pc, #60]	; (80109b8 <tcp_kill_prio+0x98>)
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	6a1b      	ldr	r3, [r3, #32]
 8010982:	1ad3      	subs	r3, r2, r3
 8010984:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801098a:	697b      	ldr	r3, [r7, #20]
 801098c:	7d5b      	ldrb	r3, [r3, #21]
 801098e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	68db      	ldr	r3, [r3, #12]
 8010994:	617b      	str	r3, [r7, #20]
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d1dc      	bne.n	8010956 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801099c:	693b      	ldr	r3, [r7, #16]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d004      	beq.n	80109ac <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80109a2:	6938      	ldr	r0, [r7, #16]
 80109a4:	f7fe ffd4 	bl	800f950 <tcp_abort>
 80109a8:	e000      	b.n	80109ac <tcp_kill_prio+0x8c>
    return;
 80109aa:	bf00      	nop
  }
}
 80109ac:	3718      	adds	r7, #24
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}
 80109b2:	bf00      	nop
 80109b4:	2400a784 	.word	0x2400a784
 80109b8:	2400a788 	.word	0x2400a788

080109bc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80109bc:	b580      	push	{r7, lr}
 80109be:	b086      	sub	sp, #24
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	4603      	mov	r3, r0
 80109c4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80109c6:	79fb      	ldrb	r3, [r7, #7]
 80109c8:	2b08      	cmp	r3, #8
 80109ca:	d009      	beq.n	80109e0 <tcp_kill_state+0x24>
 80109cc:	79fb      	ldrb	r3, [r7, #7]
 80109ce:	2b09      	cmp	r3, #9
 80109d0:	d006      	beq.n	80109e0 <tcp_kill_state+0x24>
 80109d2:	4b1a      	ldr	r3, [pc, #104]	; (8010a3c <tcp_kill_state+0x80>)
 80109d4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80109d8:	4919      	ldr	r1, [pc, #100]	; (8010a40 <tcp_kill_state+0x84>)
 80109da:	481a      	ldr	r0, [pc, #104]	; (8010a44 <tcp_kill_state+0x88>)
 80109dc:	f005 fa16 	bl	8015e0c <iprintf>

  inactivity = 0;
 80109e0:	2300      	movs	r3, #0
 80109e2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80109e4:	2300      	movs	r3, #0
 80109e6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80109e8:	4b17      	ldr	r3, [pc, #92]	; (8010a48 <tcp_kill_state+0x8c>)
 80109ea:	681b      	ldr	r3, [r3, #0]
 80109ec:	617b      	str	r3, [r7, #20]
 80109ee:	e017      	b.n	8010a20 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	7d1b      	ldrb	r3, [r3, #20]
 80109f4:	79fa      	ldrb	r2, [r7, #7]
 80109f6:	429a      	cmp	r2, r3
 80109f8:	d10f      	bne.n	8010a1a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80109fa:	4b14      	ldr	r3, [pc, #80]	; (8010a4c <tcp_kill_state+0x90>)
 80109fc:	681a      	ldr	r2, [r3, #0]
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	6a1b      	ldr	r3, [r3, #32]
 8010a02:	1ad3      	subs	r3, r2, r3
 8010a04:	68fa      	ldr	r2, [r7, #12]
 8010a06:	429a      	cmp	r2, r3
 8010a08:	d807      	bhi.n	8010a1a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010a0a:	4b10      	ldr	r3, [pc, #64]	; (8010a4c <tcp_kill_state+0x90>)
 8010a0c:	681a      	ldr	r2, [r3, #0]
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	6a1b      	ldr	r3, [r3, #32]
 8010a12:	1ad3      	subs	r3, r2, r3
 8010a14:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	68db      	ldr	r3, [r3, #12]
 8010a1e:	617b      	str	r3, [r7, #20]
 8010a20:	697b      	ldr	r3, [r7, #20]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d1e4      	bne.n	80109f0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010a26:	693b      	ldr	r3, [r7, #16]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d003      	beq.n	8010a34 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010a2c:	2100      	movs	r1, #0
 8010a2e:	6938      	ldr	r0, [r7, #16]
 8010a30:	f7fe feda 	bl	800f7e8 <tcp_abandon>
  }
}
 8010a34:	bf00      	nop
 8010a36:	3718      	adds	r7, #24
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}
 8010a3c:	08019d48 	.word	0x08019d48
 8010a40:	0801a2fc 	.word	0x0801a2fc
 8010a44:	08019dd0 	.word	0x08019dd0
 8010a48:	2400a784 	.word	0x2400a784
 8010a4c:	2400a788 	.word	0x2400a788

08010a50 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b084      	sub	sp, #16
 8010a54:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010a56:	2300      	movs	r3, #0
 8010a58:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a5e:	4b12      	ldr	r3, [pc, #72]	; (8010aa8 <tcp_kill_timewait+0x58>)
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	60fb      	str	r3, [r7, #12]
 8010a64:	e012      	b.n	8010a8c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010a66:	4b11      	ldr	r3, [pc, #68]	; (8010aac <tcp_kill_timewait+0x5c>)
 8010a68:	681a      	ldr	r2, [r3, #0]
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	6a1b      	ldr	r3, [r3, #32]
 8010a6e:	1ad3      	subs	r3, r2, r3
 8010a70:	687a      	ldr	r2, [r7, #4]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d807      	bhi.n	8010a86 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010a76:	4b0d      	ldr	r3, [pc, #52]	; (8010aac <tcp_kill_timewait+0x5c>)
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	6a1b      	ldr	r3, [r3, #32]
 8010a7e:	1ad3      	subs	r3, r2, r3
 8010a80:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	68db      	ldr	r3, [r3, #12]
 8010a8a:	60fb      	str	r3, [r7, #12]
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d1e9      	bne.n	8010a66 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d002      	beq.n	8010a9e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010a98:	68b8      	ldr	r0, [r7, #8]
 8010a9a:	f7fe ff59 	bl	800f950 <tcp_abort>
  }
}
 8010a9e:	bf00      	nop
 8010aa0:	3710      	adds	r7, #16
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
 8010aa6:	bf00      	nop
 8010aa8:	2400a794 	.word	0x2400a794
 8010aac:	2400a788 	.word	0x2400a788

08010ab0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b082      	sub	sp, #8
 8010ab4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010ab6:	4b10      	ldr	r3, [pc, #64]	; (8010af8 <tcp_handle_closepend+0x48>)
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010abc:	e014      	b.n	8010ae8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	68db      	ldr	r3, [r3, #12]
 8010ac2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	8b5b      	ldrh	r3, [r3, #26]
 8010ac8:	f003 0308 	and.w	r3, r3, #8
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d009      	beq.n	8010ae4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	8b5b      	ldrh	r3, [r3, #26]
 8010ad4:	f023 0308 	bic.w	r3, r3, #8
 8010ad8:	b29a      	uxth	r2, r3
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f7fe fd90 	bl	800f604 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010ae4:	683b      	ldr	r3, [r7, #0]
 8010ae6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d1e7      	bne.n	8010abe <tcp_handle_closepend+0xe>
  }
}
 8010aee:	bf00      	nop
 8010af0:	bf00      	nop
 8010af2:	3708      	adds	r7, #8
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd80      	pop	{r7, pc}
 8010af8:	2400a784 	.word	0x2400a784

08010afc <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	b084      	sub	sp, #16
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	4603      	mov	r3, r0
 8010b04:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010b06:	2001      	movs	r0, #1
 8010b08:	f7fd fa7e 	bl	800e008 <memp_malloc>
 8010b0c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d126      	bne.n	8010b62 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010b14:	f7ff ffcc 	bl	8010ab0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010b18:	f7ff ff9a 	bl	8010a50 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010b1c:	2001      	movs	r0, #1
 8010b1e:	f7fd fa73 	bl	800e008 <memp_malloc>
 8010b22:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d11b      	bne.n	8010b62 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010b2a:	2009      	movs	r0, #9
 8010b2c:	f7ff ff46 	bl	80109bc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010b30:	2001      	movs	r0, #1
 8010b32:	f7fd fa69 	bl	800e008 <memp_malloc>
 8010b36:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d111      	bne.n	8010b62 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010b3e:	2008      	movs	r0, #8
 8010b40:	f7ff ff3c 	bl	80109bc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010b44:	2001      	movs	r0, #1
 8010b46:	f7fd fa5f 	bl	800e008 <memp_malloc>
 8010b4a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d107      	bne.n	8010b62 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010b52:	79fb      	ldrb	r3, [r7, #7]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7ff fee3 	bl	8010920 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010b5a:	2001      	movs	r0, #1
 8010b5c:	f7fd fa54 	bl	800e008 <memp_malloc>
 8010b60:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	2b00      	cmp	r3, #0
 8010b66:	d03f      	beq.n	8010be8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010b68:	2298      	movs	r2, #152	; 0x98
 8010b6a:	2100      	movs	r1, #0
 8010b6c:	68f8      	ldr	r0, [r7, #12]
 8010b6e:	f005 f945 	bl	8015dfc <memset>
    pcb->prio = prio;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	79fa      	ldrb	r2, [r7, #7]
 8010b76:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010b7e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	f640 3268 	movw	r2, #2920	; 0xb68
 8010b88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	22ff      	movs	r2, #255	; 0xff
 8010b96:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010b9e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	2206      	movs	r2, #6
 8010ba4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	2206      	movs	r2, #6
 8010bac:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bb4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	2201      	movs	r2, #1
 8010bba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010bbe:	4b0d      	ldr	r3, [pc, #52]	; (8010bf4 <tcp_alloc+0xf8>)
 8010bc0:	681a      	ldr	r2, [r3, #0]
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010bc6:	4b0c      	ldr	r3, [pc, #48]	; (8010bf8 <tcp_alloc+0xfc>)
 8010bc8:	781a      	ldrb	r2, [r3, #0]
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010bd4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	4a08      	ldr	r2, [pc, #32]	; (8010bfc <tcp_alloc+0x100>)
 8010bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	4a07      	ldr	r2, [pc, #28]	; (8010c00 <tcp_alloc+0x104>)
 8010be4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010be8:	68fb      	ldr	r3, [r7, #12]
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3710      	adds	r7, #16
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
 8010bf2:	bf00      	nop
 8010bf4:	2400a788 	.word	0x2400a788
 8010bf8:	240067b6 	.word	0x240067b6
 8010bfc:	080108b5 	.word	0x080108b5
 8010c00:	006ddd00 	.word	0x006ddd00

08010c04 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b084      	sub	sp, #16
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010c0e:	2040      	movs	r0, #64	; 0x40
 8010c10:	f7ff ff74 	bl	8010afc <tcp_alloc>
 8010c14:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010c16:	68fb      	ldr	r3, [r7, #12]
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3710      	adds	r7, #16
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b083      	sub	sp, #12
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d002      	beq.n	8010c36 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	683a      	ldr	r2, [r7, #0]
 8010c34:	611a      	str	r2, [r3, #16]
  }
}
 8010c36:	bf00      	nop
 8010c38:	370c      	adds	r7, #12
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr
	...

08010c44 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b082      	sub	sp, #8
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d00e      	beq.n	8010c72 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	7d1b      	ldrb	r3, [r3, #20]
 8010c58:	2b01      	cmp	r3, #1
 8010c5a:	d106      	bne.n	8010c6a <tcp_recv+0x26>
 8010c5c:	4b07      	ldr	r3, [pc, #28]	; (8010c7c <tcp_recv+0x38>)
 8010c5e:	f240 72df 	movw	r2, #2015	; 0x7df
 8010c62:	4907      	ldr	r1, [pc, #28]	; (8010c80 <tcp_recv+0x3c>)
 8010c64:	4807      	ldr	r0, [pc, #28]	; (8010c84 <tcp_recv+0x40>)
 8010c66:	f005 f8d1 	bl	8015e0c <iprintf>
    pcb->recv = recv;
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	683a      	ldr	r2, [r7, #0]
 8010c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010c72:	bf00      	nop
 8010c74:	3708      	adds	r7, #8
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	08019d48 	.word	0x08019d48
 8010c80:	0801a30c 	.word	0x0801a30c
 8010c84:	08019dd0 	.word	0x08019dd0

08010c88 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b082      	sub	sp, #8
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
 8010c90:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d00d      	beq.n	8010cb4 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	7d1b      	ldrb	r3, [r3, #20]
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d106      	bne.n	8010cae <tcp_sent+0x26>
 8010ca0:	4b06      	ldr	r3, [pc, #24]	; (8010cbc <tcp_sent+0x34>)
 8010ca2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010ca6:	4906      	ldr	r1, [pc, #24]	; (8010cc0 <tcp_sent+0x38>)
 8010ca8:	4806      	ldr	r0, [pc, #24]	; (8010cc4 <tcp_sent+0x3c>)
 8010caa:	f005 f8af 	bl	8015e0c <iprintf>
    pcb->sent = sent;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	683a      	ldr	r2, [r7, #0]
 8010cb2:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8010cb4:	bf00      	nop
 8010cb6:	3708      	adds	r7, #8
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	08019d48 	.word	0x08019d48
 8010cc0:	0801a334 	.word	0x0801a334
 8010cc4:	08019dd0 	.word	0x08019dd0

08010cc8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00e      	beq.n	8010cf6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	7d1b      	ldrb	r3, [r3, #20]
 8010cdc:	2b01      	cmp	r3, #1
 8010cde:	d106      	bne.n	8010cee <tcp_err+0x26>
 8010ce0:	4b07      	ldr	r3, [pc, #28]	; (8010d00 <tcp_err+0x38>)
 8010ce2:	f640 020d 	movw	r2, #2061	; 0x80d
 8010ce6:	4907      	ldr	r1, [pc, #28]	; (8010d04 <tcp_err+0x3c>)
 8010ce8:	4807      	ldr	r0, [pc, #28]	; (8010d08 <tcp_err+0x40>)
 8010cea:	f005 f88f 	bl	8015e0c <iprintf>
    pcb->errf = err;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	683a      	ldr	r2, [r7, #0]
 8010cf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8010cf6:	bf00      	nop
 8010cf8:	3708      	adds	r7, #8
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	bd80      	pop	{r7, pc}
 8010cfe:	bf00      	nop
 8010d00:	08019d48 	.word	0x08019d48
 8010d04:	0801a35c 	.word	0x0801a35c
 8010d08:	08019dd0 	.word	0x08019dd0

08010d0c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b085      	sub	sp, #20
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
 8010d14:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d008      	beq.n	8010d2e <tcp_accept+0x22>
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	7d1b      	ldrb	r3, [r3, #20]
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d104      	bne.n	8010d2e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	683a      	ldr	r2, [r7, #0]
 8010d2c:	619a      	str	r2, [r3, #24]
  }
}
 8010d2e:	bf00      	nop
 8010d30:	3714      	adds	r7, #20
 8010d32:	46bd      	mov	sp, r7
 8010d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d38:	4770      	bx	lr
	...

08010d3c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b084      	sub	sp, #16
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	60f8      	str	r0, [r7, #12]
 8010d44:	60b9      	str	r1, [r7, #8]
 8010d46:	4613      	mov	r3, r2
 8010d48:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010d4a:	68fb      	ldr	r3, [r7, #12]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d107      	bne.n	8010d60 <tcp_poll+0x24>
 8010d50:	4b0e      	ldr	r3, [pc, #56]	; (8010d8c <tcp_poll+0x50>)
 8010d52:	f640 023d 	movw	r2, #2109	; 0x83d
 8010d56:	490e      	ldr	r1, [pc, #56]	; (8010d90 <tcp_poll+0x54>)
 8010d58:	480e      	ldr	r0, [pc, #56]	; (8010d94 <tcp_poll+0x58>)
 8010d5a:	f005 f857 	bl	8015e0c <iprintf>
 8010d5e:	e011      	b.n	8010d84 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	7d1b      	ldrb	r3, [r3, #20]
 8010d64:	2b01      	cmp	r3, #1
 8010d66:	d106      	bne.n	8010d76 <tcp_poll+0x3a>
 8010d68:	4b08      	ldr	r3, [pc, #32]	; (8010d8c <tcp_poll+0x50>)
 8010d6a:	f640 023e 	movw	r2, #2110	; 0x83e
 8010d6e:	490a      	ldr	r1, [pc, #40]	; (8010d98 <tcp_poll+0x5c>)
 8010d70:	4808      	ldr	r0, [pc, #32]	; (8010d94 <tcp_poll+0x58>)
 8010d72:	f005 f84b 	bl	8015e0c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	68ba      	ldr	r2, [r7, #8]
 8010d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	79fa      	ldrb	r2, [r7, #7]
 8010d82:	775a      	strb	r2, [r3, #29]
}
 8010d84:	3710      	adds	r7, #16
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	08019d48 	.word	0x08019d48
 8010d90:	0801a384 	.word	0x0801a384
 8010d94:	08019dd0 	.word	0x08019dd0
 8010d98:	0801a39c 	.word	0x0801a39c

08010d9c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b082      	sub	sp, #8
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d107      	bne.n	8010dba <tcp_pcb_purge+0x1e>
 8010daa:	4b1e      	ldr	r3, [pc, #120]	; (8010e24 <tcp_pcb_purge+0x88>)
 8010dac:	f640 0251 	movw	r2, #2129	; 0x851
 8010db0:	491d      	ldr	r1, [pc, #116]	; (8010e28 <tcp_pcb_purge+0x8c>)
 8010db2:	481e      	ldr	r0, [pc, #120]	; (8010e2c <tcp_pcb_purge+0x90>)
 8010db4:	f005 f82a 	bl	8015e0c <iprintf>
 8010db8:	e030      	b.n	8010e1c <tcp_pcb_purge+0x80>

  if (pcb->state != CLOSED &&
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	7d1b      	ldrb	r3, [r3, #20]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d02c      	beq.n	8010e1c <tcp_pcb_purge+0x80>
      pcb->state != TIME_WAIT &&
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8010dc6:	2b0a      	cmp	r3, #10
 8010dc8:	d028      	beq.n	8010e1c <tcp_pcb_purge+0x80>
      pcb->state != LISTEN) {
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8010dce:	2b01      	cmp	r3, #1
 8010dd0:	d024      	beq.n	8010e1c <tcp_pcb_purge+0x80>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d007      	beq.n	8010dea <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010dde:	4618      	mov	r0, r3
 8010de0:	f7fd ffd0 	bl	800ed84 <pbuf_free>
      pcb->refused_data = NULL;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2200      	movs	r2, #0
 8010de8:	675a      	str	r2, [r3, #116]	; 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010df0:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010df6:	4618      	mov	r0, r3
 8010df8:	f7ff fd2e 	bl	8010858 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7ff fd29 	bl	8010858 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2200      	movs	r2, #0
 8010e0a:	66da      	str	r2, [r3, #108]	; 0x6c
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2200      	movs	r2, #0
 8010e18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8010e1c:	3708      	adds	r7, #8
 8010e1e:	46bd      	mov	sp, r7
 8010e20:	bd80      	pop	{r7, pc}
 8010e22:	bf00      	nop
 8010e24:	08019d48 	.word	0x08019d48
 8010e28:	0801a3bc 	.word	0x0801a3bc
 8010e2c:	08019dd0 	.word	0x08019dd0

08010e30 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8010e30:	b580      	push	{r7, lr}
 8010e32:	b084      	sub	sp, #16
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8010e3a:	683b      	ldr	r3, [r7, #0]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d106      	bne.n	8010e4e <tcp_pcb_remove+0x1e>
 8010e40:	4b38      	ldr	r3, [pc, #224]	; (8010f24 <tcp_pcb_remove+0xf4>)
 8010e42:	f640 0283 	movw	r2, #2179	; 0x883
 8010e46:	4938      	ldr	r1, [pc, #224]	; (8010f28 <tcp_pcb_remove+0xf8>)
 8010e48:	4838      	ldr	r0, [pc, #224]	; (8010f2c <tcp_pcb_remove+0xfc>)
 8010e4a:	f004 ffdf 	bl	8015e0c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d106      	bne.n	8010e62 <tcp_pcb_remove+0x32>
 8010e54:	4b33      	ldr	r3, [pc, #204]	; (8010f24 <tcp_pcb_remove+0xf4>)
 8010e56:	f640 0284 	movw	r2, #2180	; 0x884
 8010e5a:	4935      	ldr	r1, [pc, #212]	; (8010f30 <tcp_pcb_remove+0x100>)
 8010e5c:	4833      	ldr	r0, [pc, #204]	; (8010f2c <tcp_pcb_remove+0xfc>)
 8010e5e:	f004 ffd5 	bl	8015e0c <iprintf>

  TCP_RMV(pcblist, pcb);
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	683a      	ldr	r2, [r7, #0]
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d105      	bne.n	8010e78 <tcp_pcb_remove+0x48>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	68da      	ldr	r2, [r3, #12]
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	601a      	str	r2, [r3, #0]
 8010e76:	e013      	b.n	8010ea0 <tcp_pcb_remove+0x70>
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	681b      	ldr	r3, [r3, #0]
 8010e7c:	60fb      	str	r3, [r7, #12]
 8010e7e:	e00c      	b.n	8010e9a <tcp_pcb_remove+0x6a>
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	68db      	ldr	r3, [r3, #12]
 8010e84:	683a      	ldr	r2, [r7, #0]
 8010e86:	429a      	cmp	r2, r3
 8010e88:	d104      	bne.n	8010e94 <tcp_pcb_remove+0x64>
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	68da      	ldr	r2, [r3, #12]
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	60da      	str	r2, [r3, #12]
 8010e92:	e005      	b.n	8010ea0 <tcp_pcb_remove+0x70>
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	60fb      	str	r3, [r7, #12]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d1ef      	bne.n	8010e80 <tcp_pcb_remove+0x50>
 8010ea0:	683b      	ldr	r3, [r7, #0]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8010ea6:	6838      	ldr	r0, [r7, #0]
 8010ea8:	f7ff ff78 	bl	8010d9c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	7d1b      	ldrb	r3, [r3, #20]
 8010eb0:	2b0a      	cmp	r3, #10
 8010eb2:	d013      	beq.n	8010edc <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8010eb8:	2b01      	cmp	r3, #1
 8010eba:	d00f      	beq.n	8010edc <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	8b5b      	ldrh	r3, [r3, #26]
 8010ec0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d009      	beq.n	8010edc <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8010ec8:	683b      	ldr	r3, [r7, #0]
 8010eca:	8b5b      	ldrh	r3, [r3, #26]
 8010ecc:	f043 0302 	orr.w	r3, r3, #2
 8010ed0:	b29a      	uxth	r2, r3
 8010ed2:	683b      	ldr	r3, [r7, #0]
 8010ed4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010ed6:	6838      	ldr	r0, [r7, #0]
 8010ed8:	f002 ffe8 	bl	8013eac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	7d1b      	ldrb	r3, [r3, #20]
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d015      	beq.n	8010f10 <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d006      	beq.n	8010efa <tcp_pcb_remove+0xca>
 8010eec:	4b0d      	ldr	r3, [pc, #52]	; (8010f24 <tcp_pcb_remove+0xf4>)
 8010eee:	f640 0293 	movw	r2, #2195	; 0x893
 8010ef2:	4910      	ldr	r1, [pc, #64]	; (8010f34 <tcp_pcb_remove+0x104>)
 8010ef4:	480d      	ldr	r0, [pc, #52]	; (8010f2c <tcp_pcb_remove+0xfc>)
 8010ef6:	f004 ff89 	bl	8015e0c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d006      	beq.n	8010f10 <tcp_pcb_remove+0xe0>
 8010f02:	4b08      	ldr	r3, [pc, #32]	; (8010f24 <tcp_pcb_remove+0xf4>)
 8010f04:	f640 0294 	movw	r2, #2196	; 0x894
 8010f08:	490b      	ldr	r1, [pc, #44]	; (8010f38 <tcp_pcb_remove+0x108>)
 8010f0a:	4808      	ldr	r0, [pc, #32]	; (8010f2c <tcp_pcb_remove+0xfc>)
 8010f0c:	f004 ff7e 	bl	8015e0c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	2200      	movs	r2, #0
 8010f14:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	2200      	movs	r2, #0
 8010f1a:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8010f1c:	bf00      	nop
 8010f1e:	3710      	adds	r7, #16
 8010f20:	46bd      	mov	sp, r7
 8010f22:	bd80      	pop	{r7, pc}
 8010f24:	08019d48 	.word	0x08019d48
 8010f28:	0801a3d8 	.word	0x0801a3d8
 8010f2c:	08019dd0 	.word	0x08019dd0
 8010f30:	0801a3f4 	.word	0x0801a3f4
 8010f34:	0801a414 	.word	0x0801a414
 8010f38:	0801a42c 	.word	0x0801a42c

08010f3c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b082      	sub	sp, #8
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d106      	bne.n	8010f58 <tcp_next_iss+0x1c>
 8010f4a:	4b0a      	ldr	r3, [pc, #40]	; (8010f74 <tcp_next_iss+0x38>)
 8010f4c:	f640 02af 	movw	r2, #2223	; 0x8af
 8010f50:	4909      	ldr	r1, [pc, #36]	; (8010f78 <tcp_next_iss+0x3c>)
 8010f52:	480a      	ldr	r0, [pc, #40]	; (8010f7c <tcp_next_iss+0x40>)
 8010f54:	f004 ff5a 	bl	8015e0c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8010f58:	4b09      	ldr	r3, [pc, #36]	; (8010f80 <tcp_next_iss+0x44>)
 8010f5a:	681a      	ldr	r2, [r3, #0]
 8010f5c:	4b09      	ldr	r3, [pc, #36]	; (8010f84 <tcp_next_iss+0x48>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	4413      	add	r3, r2
 8010f62:	4a07      	ldr	r2, [pc, #28]	; (8010f80 <tcp_next_iss+0x44>)
 8010f64:	6013      	str	r3, [r2, #0]
  return iss;
 8010f66:	4b06      	ldr	r3, [pc, #24]	; (8010f80 <tcp_next_iss+0x44>)
 8010f68:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3708      	adds	r7, #8
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
 8010f72:	bf00      	nop
 8010f74:	08019d48 	.word	0x08019d48
 8010f78:	0801a448 	.word	0x0801a448
 8010f7c:	08019dd0 	.word	0x08019dd0
 8010f80:	24000048 	.word	0x24000048
 8010f84:	2400a788 	.word	0x2400a788

08010f88 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b086      	sub	sp, #24
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	4603      	mov	r3, r0
 8010f90:	60b9      	str	r1, [r7, #8]
 8010f92:	607a      	str	r2, [r7, #4]
 8010f94:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d106      	bne.n	8010faa <tcp_eff_send_mss_netif+0x22>
 8010f9c:	4b14      	ldr	r3, [pc, #80]	; (8010ff0 <tcp_eff_send_mss_netif+0x68>)
 8010f9e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8010fa2:	4914      	ldr	r1, [pc, #80]	; (8010ff4 <tcp_eff_send_mss_netif+0x6c>)
 8010fa4:	4814      	ldr	r0, [pc, #80]	; (8010ff8 <tcp_eff_send_mss_netif+0x70>)
 8010fa6:	f004 ff31 	bl	8015e0c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d101      	bne.n	8010fb4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8010fb0:	89fb      	ldrh	r3, [r7, #14]
 8010fb2:	e019      	b.n	8010fe8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8010fb4:	68bb      	ldr	r3, [r7, #8]
 8010fb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010fb8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8010fba:	8afb      	ldrh	r3, [r7, #22]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d012      	beq.n	8010fe6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8010fc0:	2328      	movs	r3, #40	; 0x28
 8010fc2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8010fc4:	8afa      	ldrh	r2, [r7, #22]
 8010fc6:	8abb      	ldrh	r3, [r7, #20]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d904      	bls.n	8010fd6 <tcp_eff_send_mss_netif+0x4e>
 8010fcc:	8afa      	ldrh	r2, [r7, #22]
 8010fce:	8abb      	ldrh	r3, [r7, #20]
 8010fd0:	1ad3      	subs	r3, r2, r3
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	e000      	b.n	8010fd8 <tcp_eff_send_mss_netif+0x50>
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8010fda:	8a7a      	ldrh	r2, [r7, #18]
 8010fdc:	89fb      	ldrh	r3, [r7, #14]
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	bf28      	it	cs
 8010fe2:	4613      	movcs	r3, r2
 8010fe4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8010fe6:	89fb      	ldrh	r3, [r7, #14]
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3718      	adds	r7, #24
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	08019d48 	.word	0x08019d48
 8010ff4:	0801a464 	.word	0x0801a464
 8010ff8:	08019dd0 	.word	0x08019dd0

08010ffc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
 8011004:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011006:	683b      	ldr	r3, [r7, #0]
 8011008:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d119      	bne.n	8011044 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011010:	4b10      	ldr	r3, [pc, #64]	; (8011054 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011012:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011016:	4910      	ldr	r1, [pc, #64]	; (8011058 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011018:	4810      	ldr	r0, [pc, #64]	; (801105c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801101a:	f004 fef7 	bl	8015e0c <iprintf>

  while (pcb != NULL) {
 801101e:	e011      	b.n	8011044 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	429a      	cmp	r2, r3
 801102a:	d108      	bne.n	801103e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011032:	68f8      	ldr	r0, [r7, #12]
 8011034:	f7fe fc8c 	bl	800f950 <tcp_abort>
      pcb = next;
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	60fb      	str	r3, [r7, #12]
 801103c:	e002      	b.n	8011044 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	68db      	ldr	r3, [r3, #12]
 8011042:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d1ea      	bne.n	8011020 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801104a:	bf00      	nop
 801104c:	bf00      	nop
 801104e:	3710      	adds	r7, #16
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}
 8011054:	08019d48 	.word	0x08019d48
 8011058:	0801a48c 	.word	0x0801a48c
 801105c:	08019dd0 	.word	0x08019dd0

08011060 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011060:	b580      	push	{r7, lr}
 8011062:	b084      	sub	sp, #16
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d02a      	beq.n	80110c6 <tcp_netif_ip_addr_changed+0x66>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d026      	beq.n	80110c6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011078:	4b15      	ldr	r3, [pc, #84]	; (80110d0 <tcp_netif_ip_addr_changed+0x70>)
 801107a:	681b      	ldr	r3, [r3, #0]
 801107c:	4619      	mov	r1, r3
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f7ff ffbc 	bl	8010ffc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011084:	4b13      	ldr	r3, [pc, #76]	; (80110d4 <tcp_netif_ip_addr_changed+0x74>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4619      	mov	r1, r3
 801108a:	6878      	ldr	r0, [r7, #4]
 801108c:	f7ff ffb6 	bl	8010ffc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011090:	683b      	ldr	r3, [r7, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d017      	beq.n	80110c6 <tcp_netif_ip_addr_changed+0x66>
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d013      	beq.n	80110c6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801109e:	4b0e      	ldr	r3, [pc, #56]	; (80110d8 <tcp_netif_ip_addr_changed+0x78>)
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	60fb      	str	r3, [r7, #12]
 80110a4:	e00c      	b.n	80110c0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681a      	ldr	r2, [r3, #0]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681b      	ldr	r3, [r3, #0]
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d103      	bne.n	80110ba <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	681a      	ldr	r2, [r3, #0]
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	68db      	ldr	r3, [r3, #12]
 80110be:	60fb      	str	r3, [r7, #12]
 80110c0:	68fb      	ldr	r3, [r7, #12]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d1ef      	bne.n	80110a6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80110c6:	bf00      	nop
 80110c8:	3710      	adds	r7, #16
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}
 80110ce:	bf00      	nop
 80110d0:	2400a784 	.word	0x2400a784
 80110d4:	2400a790 	.word	0x2400a790
 80110d8:	2400a78c 	.word	0x2400a78c

080110dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80110dc:	b590      	push	{r4, r7, lr}
 80110de:	b08d      	sub	sp, #52	; 0x34
 80110e0:	af04      	add	r7, sp, #16
 80110e2:	6078      	str	r0, [r7, #4]
 80110e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d105      	bne.n	80110f8 <tcp_input+0x1c>
 80110ec:	4b9b      	ldr	r3, [pc, #620]	; (801135c <tcp_input+0x280>)
 80110ee:	2283      	movs	r2, #131	; 0x83
 80110f0:	499b      	ldr	r1, [pc, #620]	; (8011360 <tcp_input+0x284>)
 80110f2:	489c      	ldr	r0, [pc, #624]	; (8011364 <tcp_input+0x288>)
 80110f4:	f004 fe8a 	bl	8015e0c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	685b      	ldr	r3, [r3, #4]
 80110fc:	4a9a      	ldr	r2, [pc, #616]	; (8011368 <tcp_input+0x28c>)
 80110fe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	895b      	ldrh	r3, [r3, #10]
 8011104:	2b13      	cmp	r3, #19
 8011106:	f240 83c3 	bls.w	8011890 <tcp_input+0x7b4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801110a:	4b98      	ldr	r3, [pc, #608]	; (801136c <tcp_input+0x290>)
 801110c:	695b      	ldr	r3, [r3, #20]
 801110e:	4a97      	ldr	r2, [pc, #604]	; (801136c <tcp_input+0x290>)
 8011110:	6812      	ldr	r2, [r2, #0]
 8011112:	4611      	mov	r1, r2
 8011114:	4618      	mov	r0, r3
 8011116:	f7fb fbbb 	bl	800c890 <ip4_addr_isbroadcast_u32>
 801111a:	4603      	mov	r3, r0
 801111c:	2b00      	cmp	r3, #0
 801111e:	f040 83b9 	bne.w	8011894 <tcp_input+0x7b8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011122:	4b92      	ldr	r3, [pc, #584]	; (801136c <tcp_input+0x290>)
 8011124:	695b      	ldr	r3, [r3, #20]
 8011126:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801112a:	2be0      	cmp	r3, #224	; 0xe0
 801112c:	f000 83b2 	beq.w	8011894 <tcp_input+0x7b8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011130:	4b8d      	ldr	r3, [pc, #564]	; (8011368 <tcp_input+0x28c>)
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	899b      	ldrh	r3, [r3, #12]
 8011136:	b29b      	uxth	r3, r3
 8011138:	4618      	mov	r0, r3
 801113a:	f7fc fa23 	bl	800d584 <lwip_htons>
 801113e:	4603      	mov	r3, r0
 8011140:	0b1b      	lsrs	r3, r3, #12
 8011142:	b29b      	uxth	r3, r3
 8011144:	b2db      	uxtb	r3, r3
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801114a:	7cbb      	ldrb	r3, [r7, #18]
 801114c:	2b13      	cmp	r3, #19
 801114e:	f240 83a3 	bls.w	8011898 <tcp_input+0x7bc>
 8011152:	7cbb      	ldrb	r3, [r7, #18]
 8011154:	b29a      	uxth	r2, r3
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	891b      	ldrh	r3, [r3, #8]
 801115a:	429a      	cmp	r2, r3
 801115c:	f200 839c 	bhi.w	8011898 <tcp_input+0x7bc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011160:	7cbb      	ldrb	r3, [r7, #18]
 8011162:	b29b      	uxth	r3, r3
 8011164:	3b14      	subs	r3, #20
 8011166:	b29a      	uxth	r2, r3
 8011168:	4b81      	ldr	r3, [pc, #516]	; (8011370 <tcp_input+0x294>)
 801116a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801116c:	4b81      	ldr	r3, [pc, #516]	; (8011374 <tcp_input+0x298>)
 801116e:	2200      	movs	r2, #0
 8011170:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	895a      	ldrh	r2, [r3, #10]
 8011176:	7cbb      	ldrb	r3, [r7, #18]
 8011178:	b29b      	uxth	r3, r3
 801117a:	429a      	cmp	r2, r3
 801117c:	d309      	bcc.n	8011192 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801117e:	4b7c      	ldr	r3, [pc, #496]	; (8011370 <tcp_input+0x294>)
 8011180:	881a      	ldrh	r2, [r3, #0]
 8011182:	4b7d      	ldr	r3, [pc, #500]	; (8011378 <tcp_input+0x29c>)
 8011184:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8011186:	7cbb      	ldrb	r3, [r7, #18]
 8011188:	4619      	mov	r1, r3
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7fd fd74 	bl	800ec78 <pbuf_remove_header>
 8011190:	e04e      	b.n	8011230 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d105      	bne.n	80111a6 <tcp_input+0xca>
 801119a:	4b70      	ldr	r3, [pc, #448]	; (801135c <tcp_input+0x280>)
 801119c:	22c2      	movs	r2, #194	; 0xc2
 801119e:	4977      	ldr	r1, [pc, #476]	; (801137c <tcp_input+0x2a0>)
 80111a0:	4870      	ldr	r0, [pc, #448]	; (8011364 <tcp_input+0x288>)
 80111a2:	f004 fe33 	bl	8015e0c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80111a6:	2114      	movs	r1, #20
 80111a8:	6878      	ldr	r0, [r7, #4]
 80111aa:	f7fd fd65 	bl	800ec78 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	895a      	ldrh	r2, [r3, #10]
 80111b2:	4b71      	ldr	r3, [pc, #452]	; (8011378 <tcp_input+0x29c>)
 80111b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80111b6:	4b6e      	ldr	r3, [pc, #440]	; (8011370 <tcp_input+0x294>)
 80111b8:	881a      	ldrh	r2, [r3, #0]
 80111ba:	4b6f      	ldr	r3, [pc, #444]	; (8011378 <tcp_input+0x29c>)
 80111bc:	881b      	ldrh	r3, [r3, #0]
 80111be:	1ad3      	subs	r3, r2, r3
 80111c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80111c2:	4b6d      	ldr	r3, [pc, #436]	; (8011378 <tcp_input+0x29c>)
 80111c4:	881b      	ldrh	r3, [r3, #0]
 80111c6:	4619      	mov	r1, r3
 80111c8:	6878      	ldr	r0, [r7, #4]
 80111ca:	f7fd fd55 	bl	800ec78 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	895b      	ldrh	r3, [r3, #10]
 80111d4:	8a3a      	ldrh	r2, [r7, #16]
 80111d6:	429a      	cmp	r2, r3
 80111d8:	f200 8360 	bhi.w	801189c <tcp_input+0x7c0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	681b      	ldr	r3, [r3, #0]
 80111e0:	685b      	ldr	r3, [r3, #4]
 80111e2:	4a64      	ldr	r2, [pc, #400]	; (8011374 <tcp_input+0x298>)
 80111e4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	8a3a      	ldrh	r2, [r7, #16]
 80111ec:	4611      	mov	r1, r2
 80111ee:	4618      	mov	r0, r3
 80111f0:	f7fd fd42 	bl	800ec78 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	891a      	ldrh	r2, [r3, #8]
 80111f8:	8a3b      	ldrh	r3, [r7, #16]
 80111fa:	1ad3      	subs	r3, r2, r3
 80111fc:	b29a      	uxth	r2, r3
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	895b      	ldrh	r3, [r3, #10]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d005      	beq.n	8011216 <tcp_input+0x13a>
 801120a:	4b54      	ldr	r3, [pc, #336]	; (801135c <tcp_input+0x280>)
 801120c:	22df      	movs	r2, #223	; 0xdf
 801120e:	495c      	ldr	r1, [pc, #368]	; (8011380 <tcp_input+0x2a4>)
 8011210:	4854      	ldr	r0, [pc, #336]	; (8011364 <tcp_input+0x288>)
 8011212:	f004 fdfb 	bl	8015e0c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	891a      	ldrh	r2, [r3, #8]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	891b      	ldrh	r3, [r3, #8]
 8011220:	429a      	cmp	r2, r3
 8011222:	d005      	beq.n	8011230 <tcp_input+0x154>
 8011224:	4b4d      	ldr	r3, [pc, #308]	; (801135c <tcp_input+0x280>)
 8011226:	22e0      	movs	r2, #224	; 0xe0
 8011228:	4956      	ldr	r1, [pc, #344]	; (8011384 <tcp_input+0x2a8>)
 801122a:	484e      	ldr	r0, [pc, #312]	; (8011364 <tcp_input+0x288>)
 801122c:	f004 fdee 	bl	8015e0c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011230:	4b4d      	ldr	r3, [pc, #308]	; (8011368 <tcp_input+0x28c>)
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	881b      	ldrh	r3, [r3, #0]
 8011236:	b29b      	uxth	r3, r3
 8011238:	4a4b      	ldr	r2, [pc, #300]	; (8011368 <tcp_input+0x28c>)
 801123a:	6814      	ldr	r4, [r2, #0]
 801123c:	4618      	mov	r0, r3
 801123e:	f7fc f9a1 	bl	800d584 <lwip_htons>
 8011242:	4603      	mov	r3, r0
 8011244:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011246:	4b48      	ldr	r3, [pc, #288]	; (8011368 <tcp_input+0x28c>)
 8011248:	681b      	ldr	r3, [r3, #0]
 801124a:	885b      	ldrh	r3, [r3, #2]
 801124c:	b29b      	uxth	r3, r3
 801124e:	4a46      	ldr	r2, [pc, #280]	; (8011368 <tcp_input+0x28c>)
 8011250:	6814      	ldr	r4, [r2, #0]
 8011252:	4618      	mov	r0, r3
 8011254:	f7fc f996 	bl	800d584 <lwip_htons>
 8011258:	4603      	mov	r3, r0
 801125a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801125c:	4b42      	ldr	r3, [pc, #264]	; (8011368 <tcp_input+0x28c>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	4a41      	ldr	r2, [pc, #260]	; (8011368 <tcp_input+0x28c>)
 8011264:	6814      	ldr	r4, [r2, #0]
 8011266:	4618      	mov	r0, r3
 8011268:	f7fc f9a1 	bl	800d5ae <lwip_htonl>
 801126c:	4603      	mov	r3, r0
 801126e:	6063      	str	r3, [r4, #4]
 8011270:	6863      	ldr	r3, [r4, #4]
 8011272:	4a45      	ldr	r2, [pc, #276]	; (8011388 <tcp_input+0x2ac>)
 8011274:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011276:	4b3c      	ldr	r3, [pc, #240]	; (8011368 <tcp_input+0x28c>)
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	689b      	ldr	r3, [r3, #8]
 801127c:	4a3a      	ldr	r2, [pc, #232]	; (8011368 <tcp_input+0x28c>)
 801127e:	6814      	ldr	r4, [r2, #0]
 8011280:	4618      	mov	r0, r3
 8011282:	f7fc f994 	bl	800d5ae <lwip_htonl>
 8011286:	4603      	mov	r3, r0
 8011288:	60a3      	str	r3, [r4, #8]
 801128a:	68a3      	ldr	r3, [r4, #8]
 801128c:	4a3f      	ldr	r2, [pc, #252]	; (801138c <tcp_input+0x2b0>)
 801128e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011290:	4b35      	ldr	r3, [pc, #212]	; (8011368 <tcp_input+0x28c>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	89db      	ldrh	r3, [r3, #14]
 8011296:	b29b      	uxth	r3, r3
 8011298:	4a33      	ldr	r2, [pc, #204]	; (8011368 <tcp_input+0x28c>)
 801129a:	6814      	ldr	r4, [r2, #0]
 801129c:	4618      	mov	r0, r3
 801129e:	f7fc f971 	bl	800d584 <lwip_htons>
 80112a2:	4603      	mov	r3, r0
 80112a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80112a6:	4b30      	ldr	r3, [pc, #192]	; (8011368 <tcp_input+0x28c>)
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	899b      	ldrh	r3, [r3, #12]
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7fc f968 	bl	800d584 <lwip_htons>
 80112b4:	4603      	mov	r3, r0
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80112bc:	b2da      	uxtb	r2, r3
 80112be:	4b34      	ldr	r3, [pc, #208]	; (8011390 <tcp_input+0x2b4>)
 80112c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	891a      	ldrh	r2, [r3, #8]
 80112c6:	4b33      	ldr	r3, [pc, #204]	; (8011394 <tcp_input+0x2b8>)
 80112c8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80112ca:	4b31      	ldr	r3, [pc, #196]	; (8011390 <tcp_input+0x2b4>)
 80112cc:	781b      	ldrb	r3, [r3, #0]
 80112ce:	f003 0303 	and.w	r3, r3, #3
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d00c      	beq.n	80112f0 <tcp_input+0x214>
    tcplen++;
 80112d6:	4b2f      	ldr	r3, [pc, #188]	; (8011394 <tcp_input+0x2b8>)
 80112d8:	881b      	ldrh	r3, [r3, #0]
 80112da:	3301      	adds	r3, #1
 80112dc:	b29a      	uxth	r2, r3
 80112de:	4b2d      	ldr	r3, [pc, #180]	; (8011394 <tcp_input+0x2b8>)
 80112e0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	891a      	ldrh	r2, [r3, #8]
 80112e6:	4b2b      	ldr	r3, [pc, #172]	; (8011394 <tcp_input+0x2b8>)
 80112e8:	881b      	ldrh	r3, [r3, #0]
 80112ea:	429a      	cmp	r2, r3
 80112ec:	f200 82d8 	bhi.w	80118a0 <tcp_input+0x7c4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80112f0:	2300      	movs	r3, #0
 80112f2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80112f4:	4b28      	ldr	r3, [pc, #160]	; (8011398 <tcp_input+0x2bc>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	61fb      	str	r3, [r7, #28]
 80112fa:	e09d      	b.n	8011438 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80112fc:	69fb      	ldr	r3, [r7, #28]
 80112fe:	7d1b      	ldrb	r3, [r3, #20]
 8011300:	2b00      	cmp	r3, #0
 8011302:	d105      	bne.n	8011310 <tcp_input+0x234>
 8011304:	4b15      	ldr	r3, [pc, #84]	; (801135c <tcp_input+0x280>)
 8011306:	22fb      	movs	r2, #251	; 0xfb
 8011308:	4924      	ldr	r1, [pc, #144]	; (801139c <tcp_input+0x2c0>)
 801130a:	4816      	ldr	r0, [pc, #88]	; (8011364 <tcp_input+0x288>)
 801130c:	f004 fd7e 	bl	8015e0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011310:	69fb      	ldr	r3, [r7, #28]
 8011312:	7d1b      	ldrb	r3, [r3, #20]
 8011314:	2b0a      	cmp	r3, #10
 8011316:	d105      	bne.n	8011324 <tcp_input+0x248>
 8011318:	4b10      	ldr	r3, [pc, #64]	; (801135c <tcp_input+0x280>)
 801131a:	22fc      	movs	r2, #252	; 0xfc
 801131c:	4920      	ldr	r1, [pc, #128]	; (80113a0 <tcp_input+0x2c4>)
 801131e:	4811      	ldr	r0, [pc, #68]	; (8011364 <tcp_input+0x288>)
 8011320:	f004 fd74 	bl	8015e0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	7d1b      	ldrb	r3, [r3, #20]
 8011328:	2b01      	cmp	r3, #1
 801132a:	d105      	bne.n	8011338 <tcp_input+0x25c>
 801132c:	4b0b      	ldr	r3, [pc, #44]	; (801135c <tcp_input+0x280>)
 801132e:	22fd      	movs	r2, #253	; 0xfd
 8011330:	491c      	ldr	r1, [pc, #112]	; (80113a4 <tcp_input+0x2c8>)
 8011332:	480c      	ldr	r0, [pc, #48]	; (8011364 <tcp_input+0x288>)
 8011334:	f004 fd6a 	bl	8015e0c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011338:	69fb      	ldr	r3, [r7, #28]
 801133a:	7a1b      	ldrb	r3, [r3, #8]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d033      	beq.n	80113a8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011340:	69fb      	ldr	r3, [r7, #28]
 8011342:	7a1a      	ldrb	r2, [r3, #8]
 8011344:	4b09      	ldr	r3, [pc, #36]	; (801136c <tcp_input+0x290>)
 8011346:	685b      	ldr	r3, [r3, #4]
 8011348:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801134c:	3301      	adds	r3, #1
 801134e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011350:	429a      	cmp	r2, r3
 8011352:	d029      	beq.n	80113a8 <tcp_input+0x2cc>
      prev = pcb;
 8011354:	69fb      	ldr	r3, [r7, #28]
 8011356:	61bb      	str	r3, [r7, #24]
      continue;
 8011358:	e06b      	b.n	8011432 <tcp_input+0x356>
 801135a:	bf00      	nop
 801135c:	0801a4c0 	.word	0x0801a4c0
 8011360:	0801a538 	.word	0x0801a538
 8011364:	0801a550 	.word	0x0801a550
 8011368:	240067c8 	.word	0x240067c8
 801136c:	24006a28 	.word	0x24006a28
 8011370:	240067cc 	.word	0x240067cc
 8011374:	240067d0 	.word	0x240067d0
 8011378:	240067ce 	.word	0x240067ce
 801137c:	0801a578 	.word	0x0801a578
 8011380:	0801a588 	.word	0x0801a588
 8011384:	0801a594 	.word	0x0801a594
 8011388:	240067d8 	.word	0x240067d8
 801138c:	240067dc 	.word	0x240067dc
 8011390:	240067e4 	.word	0x240067e4
 8011394:	240067e2 	.word	0x240067e2
 8011398:	2400a784 	.word	0x2400a784
 801139c:	0801a5b4 	.word	0x0801a5b4
 80113a0:	0801a5dc 	.word	0x0801a5dc
 80113a4:	0801a608 	.word	0x0801a608
    }

    if (pcb->remote_port == tcphdr->src &&
 80113a8:	69fb      	ldr	r3, [r7, #28]
 80113aa:	8b1a      	ldrh	r2, [r3, #24]
 80113ac:	4b94      	ldr	r3, [pc, #592]	; (8011600 <tcp_input+0x524>)
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	881b      	ldrh	r3, [r3, #0]
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d13a      	bne.n	801142e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80113b8:	69fb      	ldr	r3, [r7, #28]
 80113ba:	8ada      	ldrh	r2, [r3, #22]
 80113bc:	4b90      	ldr	r3, [pc, #576]	; (8011600 <tcp_input+0x524>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	885b      	ldrh	r3, [r3, #2]
 80113c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d132      	bne.n	801142e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80113c8:	69fb      	ldr	r3, [r7, #28]
 80113ca:	685a      	ldr	r2, [r3, #4]
 80113cc:	4b8d      	ldr	r3, [pc, #564]	; (8011604 <tcp_input+0x528>)
 80113ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d12c      	bne.n	801142e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	681a      	ldr	r2, [r3, #0]
 80113d8:	4b8a      	ldr	r3, [pc, #552]	; (8011604 <tcp_input+0x528>)
 80113da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80113dc:	429a      	cmp	r2, r3
 80113de:	d126      	bne.n	801142e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80113e0:	69fb      	ldr	r3, [r7, #28]
 80113e2:	68db      	ldr	r3, [r3, #12]
 80113e4:	69fa      	ldr	r2, [r7, #28]
 80113e6:	429a      	cmp	r2, r3
 80113e8:	d106      	bne.n	80113f8 <tcp_input+0x31c>
 80113ea:	4b87      	ldr	r3, [pc, #540]	; (8011608 <tcp_input+0x52c>)
 80113ec:	f240 120d 	movw	r2, #269	; 0x10d
 80113f0:	4986      	ldr	r1, [pc, #536]	; (801160c <tcp_input+0x530>)
 80113f2:	4887      	ldr	r0, [pc, #540]	; (8011610 <tcp_input+0x534>)
 80113f4:	f004 fd0a 	bl	8015e0c <iprintf>
      if (prev != NULL) {
 80113f8:	69bb      	ldr	r3, [r7, #24]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d00a      	beq.n	8011414 <tcp_input+0x338>
        prev->next = pcb->next;
 80113fe:	69fb      	ldr	r3, [r7, #28]
 8011400:	68da      	ldr	r2, [r3, #12]
 8011402:	69bb      	ldr	r3, [r7, #24]
 8011404:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011406:	4b83      	ldr	r3, [pc, #524]	; (8011614 <tcp_input+0x538>)
 8011408:	681a      	ldr	r2, [r3, #0]
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801140e:	4a81      	ldr	r2, [pc, #516]	; (8011614 <tcp_input+0x538>)
 8011410:	69fb      	ldr	r3, [r7, #28]
 8011412:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011414:	69fb      	ldr	r3, [r7, #28]
 8011416:	68db      	ldr	r3, [r3, #12]
 8011418:	69fa      	ldr	r2, [r7, #28]
 801141a:	429a      	cmp	r2, r3
 801141c:	d111      	bne.n	8011442 <tcp_input+0x366>
 801141e:	4b7a      	ldr	r3, [pc, #488]	; (8011608 <tcp_input+0x52c>)
 8011420:	f240 1215 	movw	r2, #277	; 0x115
 8011424:	497c      	ldr	r1, [pc, #496]	; (8011618 <tcp_input+0x53c>)
 8011426:	487a      	ldr	r0, [pc, #488]	; (8011610 <tcp_input+0x534>)
 8011428:	f004 fcf0 	bl	8015e0c <iprintf>
      break;
 801142c:	e009      	b.n	8011442 <tcp_input+0x366>
    }
    prev = pcb;
 801142e:	69fb      	ldr	r3, [r7, #28]
 8011430:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	68db      	ldr	r3, [r3, #12]
 8011436:	61fb      	str	r3, [r7, #28]
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	2b00      	cmp	r3, #0
 801143c:	f47f af5e 	bne.w	80112fc <tcp_input+0x220>
 8011440:	e000      	b.n	8011444 <tcp_input+0x368>
      break;
 8011442:	bf00      	nop
  }

  if (pcb == NULL) {
 8011444:	69fb      	ldr	r3, [r7, #28]
 8011446:	2b00      	cmp	r3, #0
 8011448:	f040 8095 	bne.w	8011576 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801144c:	4b73      	ldr	r3, [pc, #460]	; (801161c <tcp_input+0x540>)
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	61fb      	str	r3, [r7, #28]
 8011452:	e03f      	b.n	80114d4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011454:	69fb      	ldr	r3, [r7, #28]
 8011456:	7d1b      	ldrb	r3, [r3, #20]
 8011458:	2b0a      	cmp	r3, #10
 801145a:	d006      	beq.n	801146a <tcp_input+0x38e>
 801145c:	4b6a      	ldr	r3, [pc, #424]	; (8011608 <tcp_input+0x52c>)
 801145e:	f240 121f 	movw	r2, #287	; 0x11f
 8011462:	496f      	ldr	r1, [pc, #444]	; (8011620 <tcp_input+0x544>)
 8011464:	486a      	ldr	r0, [pc, #424]	; (8011610 <tcp_input+0x534>)
 8011466:	f004 fcd1 	bl	8015e0c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801146a:	69fb      	ldr	r3, [r7, #28]
 801146c:	7a1b      	ldrb	r3, [r3, #8]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d009      	beq.n	8011486 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011472:	69fb      	ldr	r3, [r7, #28]
 8011474:	7a1a      	ldrb	r2, [r3, #8]
 8011476:	4b63      	ldr	r3, [pc, #396]	; (8011604 <tcp_input+0x528>)
 8011478:	685b      	ldr	r3, [r3, #4]
 801147a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801147e:	3301      	adds	r3, #1
 8011480:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011482:	429a      	cmp	r2, r3
 8011484:	d122      	bne.n	80114cc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	8b1a      	ldrh	r2, [r3, #24]
 801148a:	4b5d      	ldr	r3, [pc, #372]	; (8011600 <tcp_input+0x524>)
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	881b      	ldrh	r3, [r3, #0]
 8011490:	b29b      	uxth	r3, r3
 8011492:	429a      	cmp	r2, r3
 8011494:	d11b      	bne.n	80114ce <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011496:	69fb      	ldr	r3, [r7, #28]
 8011498:	8ada      	ldrh	r2, [r3, #22]
 801149a:	4b59      	ldr	r3, [pc, #356]	; (8011600 <tcp_input+0x524>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	885b      	ldrh	r3, [r3, #2]
 80114a0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d113      	bne.n	80114ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80114a6:	69fb      	ldr	r3, [r7, #28]
 80114a8:	685a      	ldr	r2, [r3, #4]
 80114aa:	4b56      	ldr	r3, [pc, #344]	; (8011604 <tcp_input+0x528>)
 80114ac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d10d      	bne.n	80114ce <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80114b2:	69fb      	ldr	r3, [r7, #28]
 80114b4:	681a      	ldr	r2, [r3, #0]
 80114b6:	4b53      	ldr	r3, [pc, #332]	; (8011604 <tcp_input+0x528>)
 80114b8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80114ba:	429a      	cmp	r2, r3
 80114bc:	d107      	bne.n	80114ce <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80114be:	69f8      	ldr	r0, [r7, #28]
 80114c0:	f000 fb54 	bl	8011b6c <tcp_timewait_input>
        }
        pbuf_free(p);
 80114c4:	6878      	ldr	r0, [r7, #4]
 80114c6:	f7fd fc5d 	bl	800ed84 <pbuf_free>
        return;
 80114ca:	e1ef      	b.n	80118ac <tcp_input+0x7d0>
        continue;
 80114cc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80114ce:	69fb      	ldr	r3, [r7, #28]
 80114d0:	68db      	ldr	r3, [r3, #12]
 80114d2:	61fb      	str	r3, [r7, #28]
 80114d4:	69fb      	ldr	r3, [r7, #28]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d1bc      	bne.n	8011454 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80114da:	2300      	movs	r3, #0
 80114dc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80114de:	4b51      	ldr	r3, [pc, #324]	; (8011624 <tcp_input+0x548>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	617b      	str	r3, [r7, #20]
 80114e4:	e02a      	b.n	801153c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	7a1b      	ldrb	r3, [r3, #8]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d00c      	beq.n	8011508 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80114ee:	697b      	ldr	r3, [r7, #20]
 80114f0:	7a1a      	ldrb	r2, [r3, #8]
 80114f2:	4b44      	ldr	r3, [pc, #272]	; (8011604 <tcp_input+0x528>)
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114fa:	3301      	adds	r3, #1
 80114fc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80114fe:	429a      	cmp	r2, r3
 8011500:	d002      	beq.n	8011508 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	61bb      	str	r3, [r7, #24]
        continue;
 8011506:	e016      	b.n	8011536 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	8ada      	ldrh	r2, [r3, #22]
 801150c:	4b3c      	ldr	r3, [pc, #240]	; (8011600 <tcp_input+0x524>)
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	885b      	ldrh	r3, [r3, #2]
 8011512:	b29b      	uxth	r3, r3
 8011514:	429a      	cmp	r2, r3
 8011516:	d10c      	bne.n	8011532 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011518:	697b      	ldr	r3, [r7, #20]
 801151a:	681a      	ldr	r2, [r3, #0]
 801151c:	4b39      	ldr	r3, [pc, #228]	; (8011604 <tcp_input+0x528>)
 801151e:	695b      	ldr	r3, [r3, #20]
 8011520:	429a      	cmp	r2, r3
 8011522:	d00f      	beq.n	8011544 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011524:	697b      	ldr	r3, [r7, #20]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d00d      	beq.n	8011546 <tcp_input+0x46a>
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d009      	beq.n	8011546 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011532:	697b      	ldr	r3, [r7, #20]
 8011534:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	68db      	ldr	r3, [r3, #12]
 801153a:	617b      	str	r3, [r7, #20]
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d1d1      	bne.n	80114e6 <tcp_input+0x40a>
 8011542:	e000      	b.n	8011546 <tcp_input+0x46a>
            break;
 8011544:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011546:	697b      	ldr	r3, [r7, #20]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d014      	beq.n	8011576 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801154c:	69bb      	ldr	r3, [r7, #24]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d00a      	beq.n	8011568 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	68da      	ldr	r2, [r3, #12]
 8011556:	69bb      	ldr	r3, [r7, #24]
 8011558:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801155a:	4b32      	ldr	r3, [pc, #200]	; (8011624 <tcp_input+0x548>)
 801155c:	681a      	ldr	r2, [r3, #0]
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011562:	4a30      	ldr	r2, [pc, #192]	; (8011624 <tcp_input+0x548>)
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011568:	6978      	ldr	r0, [r7, #20]
 801156a:	f000 fa01 	bl	8011970 <tcp_listen_input>
      }
      pbuf_free(p);
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f7fd fc08 	bl	800ed84 <pbuf_free>
      return;
 8011574:	e19a      	b.n	80118ac <tcp_input+0x7d0>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011576:	69fb      	ldr	r3, [r7, #28]
 8011578:	2b00      	cmp	r3, #0
 801157a:	f000 815f 	beq.w	801183c <tcp_input+0x760>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801157e:	4b2a      	ldr	r3, [pc, #168]	; (8011628 <tcp_input+0x54c>)
 8011580:	2200      	movs	r2, #0
 8011582:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	891a      	ldrh	r2, [r3, #8]
 8011588:	4b27      	ldr	r3, [pc, #156]	; (8011628 <tcp_input+0x54c>)
 801158a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801158c:	4a26      	ldr	r2, [pc, #152]	; (8011628 <tcp_input+0x54c>)
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011592:	4b1b      	ldr	r3, [pc, #108]	; (8011600 <tcp_input+0x524>)
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	4a24      	ldr	r2, [pc, #144]	; (8011628 <tcp_input+0x54c>)
 8011598:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801159a:	4b24      	ldr	r3, [pc, #144]	; (801162c <tcp_input+0x550>)
 801159c:	2200      	movs	r2, #0
 801159e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80115a0:	4b23      	ldr	r3, [pc, #140]	; (8011630 <tcp_input+0x554>)
 80115a2:	2200      	movs	r2, #0
 80115a4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80115a6:	4b23      	ldr	r3, [pc, #140]	; (8011634 <tcp_input+0x558>)
 80115a8:	2200      	movs	r2, #0
 80115aa:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80115ac:	4b22      	ldr	r3, [pc, #136]	; (8011638 <tcp_input+0x55c>)
 80115ae:	781b      	ldrb	r3, [r3, #0]
 80115b0:	f003 0308 	and.w	r3, r3, #8
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	d006      	beq.n	80115c6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	7b5b      	ldrb	r3, [r3, #13]
 80115bc:	f043 0301 	orr.w	r3, r3, #1
 80115c0:	b2da      	uxtb	r2, r3
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d038      	beq.n	8011640 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80115ce:	69f8      	ldr	r0, [r7, #28]
 80115d0:	f7ff f8c4 	bl	801075c <tcp_process_refused_data>
 80115d4:	4603      	mov	r3, r0
 80115d6:	f113 0f0d 	cmn.w	r3, #13
 80115da:	d007      	beq.n	80115ec <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80115dc:	69fb      	ldr	r3, [r7, #28]
 80115de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d02d      	beq.n	8011640 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80115e4:	4b15      	ldr	r3, [pc, #84]	; (801163c <tcp_input+0x560>)
 80115e6:	881b      	ldrh	r3, [r3, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d029      	beq.n	8011640 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80115ec:	69fb      	ldr	r3, [r7, #28]
 80115ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f040 8103 	bne.w	80117fc <tcp_input+0x720>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80115f6:	69f8      	ldr	r0, [r7, #28]
 80115f8:	f003 fa5e 	bl	8014ab8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80115fc:	e0fe      	b.n	80117fc <tcp_input+0x720>
 80115fe:	bf00      	nop
 8011600:	240067c8 	.word	0x240067c8
 8011604:	24006a28 	.word	0x24006a28
 8011608:	0801a4c0 	.word	0x0801a4c0
 801160c:	0801a630 	.word	0x0801a630
 8011610:	0801a550 	.word	0x0801a550
 8011614:	2400a784 	.word	0x2400a784
 8011618:	0801a65c 	.word	0x0801a65c
 801161c:	2400a794 	.word	0x2400a794
 8011620:	0801a688 	.word	0x0801a688
 8011624:	2400a78c 	.word	0x2400a78c
 8011628:	240067b8 	.word	0x240067b8
 801162c:	240067e8 	.word	0x240067e8
 8011630:	240067e5 	.word	0x240067e5
 8011634:	240067e0 	.word	0x240067e0
 8011638:	240067e4 	.word	0x240067e4
 801163c:	240067e2 	.word	0x240067e2
      }
    }
    tcp_input_pcb = pcb;
 8011640:	4a9c      	ldr	r2, [pc, #624]	; (80118b4 <tcp_input+0x7d8>)
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011646:	69f8      	ldr	r0, [r7, #28]
 8011648:	f000 fb0a 	bl	8011c60 <tcp_process>
 801164c:	4603      	mov	r3, r0
 801164e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011650:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011654:	f113 0f0d 	cmn.w	r3, #13
 8011658:	f000 80d2 	beq.w	8011800 <tcp_input+0x724>
      if (recv_flags & TF_RESET) {
 801165c:	4b96      	ldr	r3, [pc, #600]	; (80118b8 <tcp_input+0x7dc>)
 801165e:	781b      	ldrb	r3, [r3, #0]
 8011660:	f003 0308 	and.w	r3, r3, #8
 8011664:	2b00      	cmp	r3, #0
 8011666:	d015      	beq.n	8011694 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801166e:	2b00      	cmp	r3, #0
 8011670:	d008      	beq.n	8011684 <tcp_input+0x5a8>
 8011672:	69fb      	ldr	r3, [r7, #28]
 8011674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011678:	69fa      	ldr	r2, [r7, #28]
 801167a:	6912      	ldr	r2, [r2, #16]
 801167c:	f06f 010d 	mvn.w	r1, #13
 8011680:	4610      	mov	r0, r2
 8011682:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011684:	69f9      	ldr	r1, [r7, #28]
 8011686:	488d      	ldr	r0, [pc, #564]	; (80118bc <tcp_input+0x7e0>)
 8011688:	f7ff fbd2 	bl	8010e30 <tcp_pcb_remove>
        tcp_free(pcb);
 801168c:	69f8      	ldr	r0, [r7, #28]
 801168e:	f7fd fe25 	bl	800f2dc <tcp_free>
 8011692:	e0c0      	b.n	8011816 <tcp_input+0x73a>
      } else {
        err = ERR_OK;
 8011694:	2300      	movs	r3, #0
 8011696:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011698:	4b89      	ldr	r3, [pc, #548]	; (80118c0 <tcp_input+0x7e4>)
 801169a:	881b      	ldrh	r3, [r3, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d01b      	beq.n	80116d8 <tcp_input+0x5fc>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80116a0:	4b87      	ldr	r3, [pc, #540]	; (80118c0 <tcp_input+0x7e4>)
 80116a2:	881b      	ldrh	r3, [r3, #0]
 80116a4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d009      	beq.n	80116c2 <tcp_input+0x5e6>
 80116ae:	69fb      	ldr	r3, [r7, #28]
 80116b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80116b2:	69fa      	ldr	r2, [r7, #28]
 80116b4:	6910      	ldr	r0, [r2, #16]
 80116b6:	89fa      	ldrh	r2, [r7, #14]
 80116b8:	69f9      	ldr	r1, [r7, #28]
 80116ba:	4798      	blx	r3
 80116bc:	4603      	mov	r3, r0
 80116be:	74fb      	strb	r3, [r7, #19]
 80116c0:	e001      	b.n	80116c6 <tcp_input+0x5ea>
 80116c2:	2300      	movs	r3, #0
 80116c4:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80116c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80116ca:	f113 0f0d 	cmn.w	r3, #13
 80116ce:	f000 8099 	beq.w	8011804 <tcp_input+0x728>
              goto aborted;
            }
          }
          recv_acked = 0;
 80116d2:	4b7b      	ldr	r3, [pc, #492]	; (80118c0 <tcp_input+0x7e4>)
 80116d4:	2200      	movs	r2, #0
 80116d6:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80116d8:	69f8      	ldr	r0, [r7, #28]
 80116da:	f000 f909 	bl	80118f0 <tcp_input_delayed_close>
 80116de:	4603      	mov	r3, r0
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f040 8091 	bne.w	8011808 <tcp_input+0x72c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80116e6:	4b77      	ldr	r3, [pc, #476]	; (80118c4 <tcp_input+0x7e8>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d041      	beq.n	8011772 <tcp_input+0x696>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80116ee:	69fb      	ldr	r3, [r7, #28]
 80116f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d006      	beq.n	8011704 <tcp_input+0x628>
 80116f6:	4b74      	ldr	r3, [pc, #464]	; (80118c8 <tcp_input+0x7ec>)
 80116f8:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80116fc:	4973      	ldr	r1, [pc, #460]	; (80118cc <tcp_input+0x7f0>)
 80116fe:	4874      	ldr	r0, [pc, #464]	; (80118d0 <tcp_input+0x7f4>)
 8011700:	f004 fb84 	bl	8015e0c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011704:	69fb      	ldr	r3, [r7, #28]
 8011706:	8b5b      	ldrh	r3, [r3, #26]
 8011708:	f003 0310 	and.w	r3, r3, #16
 801170c:	2b00      	cmp	r3, #0
 801170e:	d008      	beq.n	8011722 <tcp_input+0x646>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011710:	4b6c      	ldr	r3, [pc, #432]	; (80118c4 <tcp_input+0x7e8>)
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	4618      	mov	r0, r3
 8011716:	f7fd fb35 	bl	800ed84 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801171a:	69f8      	ldr	r0, [r7, #28]
 801171c:	f7fe f918 	bl	800f950 <tcp_abort>
            goto aborted;
 8011720:	e079      	b.n	8011816 <tcp_input+0x73a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011722:	69fb      	ldr	r3, [r7, #28]
 8011724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011728:	2b00      	cmp	r3, #0
 801172a:	d00c      	beq.n	8011746 <tcp_input+0x66a>
 801172c:	69fb      	ldr	r3, [r7, #28]
 801172e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011732:	69fb      	ldr	r3, [r7, #28]
 8011734:	6918      	ldr	r0, [r3, #16]
 8011736:	4b63      	ldr	r3, [pc, #396]	; (80118c4 <tcp_input+0x7e8>)
 8011738:	681a      	ldr	r2, [r3, #0]
 801173a:	2300      	movs	r3, #0
 801173c:	69f9      	ldr	r1, [r7, #28]
 801173e:	47a0      	blx	r4
 8011740:	4603      	mov	r3, r0
 8011742:	74fb      	strb	r3, [r7, #19]
 8011744:	e008      	b.n	8011758 <tcp_input+0x67c>
 8011746:	4b5f      	ldr	r3, [pc, #380]	; (80118c4 <tcp_input+0x7e8>)
 8011748:	681a      	ldr	r2, [r3, #0]
 801174a:	2300      	movs	r3, #0
 801174c:	69f9      	ldr	r1, [r7, #28]
 801174e:	2000      	movs	r0, #0
 8011750:	f7ff f8b0 	bl	80108b4 <tcp_recv_null>
 8011754:	4603      	mov	r3, r0
 8011756:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011758:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801175c:	f113 0f0d 	cmn.w	r3, #13
 8011760:	d054      	beq.n	801180c <tcp_input+0x730>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011762:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d003      	beq.n	8011772 <tcp_input+0x696>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801176a:	4b56      	ldr	r3, [pc, #344]	; (80118c4 <tcp_input+0x7e8>)
 801176c:	681a      	ldr	r2, [r3, #0]
 801176e:	69fb      	ldr	r3, [r7, #28]
 8011770:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011772:	4b51      	ldr	r3, [pc, #324]	; (80118b8 <tcp_input+0x7dc>)
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	f003 0320 	and.w	r3, r3, #32
 801177a:	2b00      	cmp	r3, #0
 801177c:	d031      	beq.n	80117e2 <tcp_input+0x706>
          if (pcb->refused_data != NULL) {
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011782:	2b00      	cmp	r3, #0
 8011784:	d009      	beq.n	801179a <tcp_input+0x6be>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011786:	69fb      	ldr	r3, [r7, #28]
 8011788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801178a:	7b5a      	ldrb	r2, [r3, #13]
 801178c:	69fb      	ldr	r3, [r7, #28]
 801178e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011790:	f042 0220 	orr.w	r2, r2, #32
 8011794:	b2d2      	uxtb	r2, r2
 8011796:	735a      	strb	r2, [r3, #13]
 8011798:	e023      	b.n	80117e2 <tcp_input+0x706>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801179a:	69fb      	ldr	r3, [r7, #28]
 801179c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801179e:	f640 3268 	movw	r2, #2920	; 0xb68
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d005      	beq.n	80117b2 <tcp_input+0x6d6>
              pcb->rcv_wnd++;
 80117a6:	69fb      	ldr	r3, [r7, #28]
 80117a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80117aa:	3301      	adds	r3, #1
 80117ac:	b29a      	uxth	r2, r3
 80117ae:	69fb      	ldr	r3, [r7, #28]
 80117b0:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d00b      	beq.n	80117d4 <tcp_input+0x6f8>
 80117bc:	69fb      	ldr	r3, [r7, #28]
 80117be:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80117c2:	69fb      	ldr	r3, [r7, #28]
 80117c4:	6918      	ldr	r0, [r3, #16]
 80117c6:	2300      	movs	r3, #0
 80117c8:	2200      	movs	r2, #0
 80117ca:	69f9      	ldr	r1, [r7, #28]
 80117cc:	47a0      	blx	r4
 80117ce:	4603      	mov	r3, r0
 80117d0:	74fb      	strb	r3, [r7, #19]
 80117d2:	e001      	b.n	80117d8 <tcp_input+0x6fc>
 80117d4:	2300      	movs	r3, #0
 80117d6:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80117d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80117dc:	f113 0f0d 	cmn.w	r3, #13
 80117e0:	d016      	beq.n	8011810 <tcp_input+0x734>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80117e2:	4b34      	ldr	r3, [pc, #208]	; (80118b4 <tcp_input+0x7d8>)
 80117e4:	2200      	movs	r2, #0
 80117e6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80117e8:	69f8      	ldr	r0, [r7, #28]
 80117ea:	f000 f881 	bl	80118f0 <tcp_input_delayed_close>
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d10f      	bne.n	8011814 <tcp_input+0x738>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80117f4:	69f8      	ldr	r0, [r7, #28]
 80117f6:	f002 fb59 	bl	8013eac <tcp_output>
 80117fa:	e00c      	b.n	8011816 <tcp_input+0x73a>
        goto aborted;
 80117fc:	bf00      	nop
 80117fe:	e00a      	b.n	8011816 <tcp_input+0x73a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011800:	bf00      	nop
 8011802:	e008      	b.n	8011816 <tcp_input+0x73a>
              goto aborted;
 8011804:	bf00      	nop
 8011806:	e006      	b.n	8011816 <tcp_input+0x73a>
          goto aborted;
 8011808:	bf00      	nop
 801180a:	e004      	b.n	8011816 <tcp_input+0x73a>
            goto aborted;
 801180c:	bf00      	nop
 801180e:	e002      	b.n	8011816 <tcp_input+0x73a>
              goto aborted;
 8011810:	bf00      	nop
 8011812:	e000      	b.n	8011816 <tcp_input+0x73a>
          goto aborted;
 8011814:	bf00      	nop
    tcp_input_pcb = NULL;
 8011816:	4b27      	ldr	r3, [pc, #156]	; (80118b4 <tcp_input+0x7d8>)
 8011818:	2200      	movs	r2, #0
 801181a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801181c:	4b29      	ldr	r3, [pc, #164]	; (80118c4 <tcp_input+0x7e8>)
 801181e:	2200      	movs	r2, #0
 8011820:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011822:	4b2c      	ldr	r3, [pc, #176]	; (80118d4 <tcp_input+0x7f8>)
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	2b00      	cmp	r3, #0
 8011828:	d03f      	beq.n	80118aa <tcp_input+0x7ce>
      pbuf_free(inseg.p);
 801182a:	4b2a      	ldr	r3, [pc, #168]	; (80118d4 <tcp_input+0x7f8>)
 801182c:	685b      	ldr	r3, [r3, #4]
 801182e:	4618      	mov	r0, r3
 8011830:	f7fd faa8 	bl	800ed84 <pbuf_free>
      inseg.p = NULL;
 8011834:	4b27      	ldr	r3, [pc, #156]	; (80118d4 <tcp_input+0x7f8>)
 8011836:	2200      	movs	r2, #0
 8011838:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801183a:	e036      	b.n	80118aa <tcp_input+0x7ce>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801183c:	4b26      	ldr	r3, [pc, #152]	; (80118d8 <tcp_input+0x7fc>)
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	899b      	ldrh	r3, [r3, #12]
 8011842:	b29b      	uxth	r3, r3
 8011844:	4618      	mov	r0, r3
 8011846:	f7fb fe9d 	bl	800d584 <lwip_htons>
 801184a:	4603      	mov	r3, r0
 801184c:	b2db      	uxtb	r3, r3
 801184e:	f003 0304 	and.w	r3, r3, #4
 8011852:	2b00      	cmp	r3, #0
 8011854:	d118      	bne.n	8011888 <tcp_input+0x7ac>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011856:	4b21      	ldr	r3, [pc, #132]	; (80118dc <tcp_input+0x800>)
 8011858:	6819      	ldr	r1, [r3, #0]
 801185a:	4b21      	ldr	r3, [pc, #132]	; (80118e0 <tcp_input+0x804>)
 801185c:	881b      	ldrh	r3, [r3, #0]
 801185e:	461a      	mov	r2, r3
 8011860:	4b20      	ldr	r3, [pc, #128]	; (80118e4 <tcp_input+0x808>)
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011866:	4b1c      	ldr	r3, [pc, #112]	; (80118d8 <tcp_input+0x7fc>)
 8011868:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801186a:	885b      	ldrh	r3, [r3, #2]
 801186c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801186e:	4a1a      	ldr	r2, [pc, #104]	; (80118d8 <tcp_input+0x7fc>)
 8011870:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011872:	8812      	ldrh	r2, [r2, #0]
 8011874:	b292      	uxth	r2, r2
 8011876:	9202      	str	r2, [sp, #8]
 8011878:	9301      	str	r3, [sp, #4]
 801187a:	4b1b      	ldr	r3, [pc, #108]	; (80118e8 <tcp_input+0x80c>)
 801187c:	9300      	str	r3, [sp, #0]
 801187e:	4b1b      	ldr	r3, [pc, #108]	; (80118ec <tcp_input+0x810>)
 8011880:	4602      	mov	r2, r0
 8011882:	2000      	movs	r0, #0
 8011884:	f003 f8c6 	bl	8014a14 <tcp_rst>
    pbuf_free(p);
 8011888:	6878      	ldr	r0, [r7, #4]
 801188a:	f7fd fa7b 	bl	800ed84 <pbuf_free>
  return;
 801188e:	e00c      	b.n	80118aa <tcp_input+0x7ce>
    goto dropped;
 8011890:	bf00      	nop
 8011892:	e006      	b.n	80118a2 <tcp_input+0x7c6>
    goto dropped;
 8011894:	bf00      	nop
 8011896:	e004      	b.n	80118a2 <tcp_input+0x7c6>
    goto dropped;
 8011898:	bf00      	nop
 801189a:	e002      	b.n	80118a2 <tcp_input+0x7c6>
      goto dropped;
 801189c:	bf00      	nop
 801189e:	e000      	b.n	80118a2 <tcp_input+0x7c6>
      goto dropped;
 80118a0:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80118a2:	6878      	ldr	r0, [r7, #4]
 80118a4:	f7fd fa6e 	bl	800ed84 <pbuf_free>
 80118a8:	e000      	b.n	80118ac <tcp_input+0x7d0>
  return;
 80118aa:	bf00      	nop
}
 80118ac:	3724      	adds	r7, #36	; 0x24
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd90      	pop	{r4, r7, pc}
 80118b2:	bf00      	nop
 80118b4:	2400a798 	.word	0x2400a798
 80118b8:	240067e5 	.word	0x240067e5
 80118bc:	2400a784 	.word	0x2400a784
 80118c0:	240067e0 	.word	0x240067e0
 80118c4:	240067e8 	.word	0x240067e8
 80118c8:	0801a4c0 	.word	0x0801a4c0
 80118cc:	0801a6b8 	.word	0x0801a6b8
 80118d0:	0801a550 	.word	0x0801a550
 80118d4:	240067b8 	.word	0x240067b8
 80118d8:	240067c8 	.word	0x240067c8
 80118dc:	240067dc 	.word	0x240067dc
 80118e0:	240067e2 	.word	0x240067e2
 80118e4:	240067d8 	.word	0x240067d8
 80118e8:	24006a38 	.word	0x24006a38
 80118ec:	24006a3c 	.word	0x24006a3c

080118f0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b082      	sub	sp, #8
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d106      	bne.n	801190c <tcp_input_delayed_close+0x1c>
 80118fe:	4b17      	ldr	r3, [pc, #92]	; (801195c <tcp_input_delayed_close+0x6c>)
 8011900:	f240 225a 	movw	r2, #602	; 0x25a
 8011904:	4916      	ldr	r1, [pc, #88]	; (8011960 <tcp_input_delayed_close+0x70>)
 8011906:	4817      	ldr	r0, [pc, #92]	; (8011964 <tcp_input_delayed_close+0x74>)
 8011908:	f004 fa80 	bl	8015e0c <iprintf>

  if (recv_flags & TF_CLOSED) {
 801190c:	4b16      	ldr	r3, [pc, #88]	; (8011968 <tcp_input_delayed_close+0x78>)
 801190e:	781b      	ldrb	r3, [r3, #0]
 8011910:	f003 0310 	and.w	r3, r3, #16
 8011914:	2b00      	cmp	r3, #0
 8011916:	d01c      	beq.n	8011952 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	8b5b      	ldrh	r3, [r3, #26]
 801191c:	f003 0310 	and.w	r3, r3, #16
 8011920:	2b00      	cmp	r3, #0
 8011922:	d10d      	bne.n	8011940 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801192a:	2b00      	cmp	r3, #0
 801192c:	d008      	beq.n	8011940 <tcp_input_delayed_close+0x50>
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011934:	687a      	ldr	r2, [r7, #4]
 8011936:	6912      	ldr	r2, [r2, #16]
 8011938:	f06f 010e 	mvn.w	r1, #14
 801193c:	4610      	mov	r0, r2
 801193e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011940:	6879      	ldr	r1, [r7, #4]
 8011942:	480a      	ldr	r0, [pc, #40]	; (801196c <tcp_input_delayed_close+0x7c>)
 8011944:	f7ff fa74 	bl	8010e30 <tcp_pcb_remove>
    tcp_free(pcb);
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f7fd fcc7 	bl	800f2dc <tcp_free>
    return 1;
 801194e:	2301      	movs	r3, #1
 8011950:	e000      	b.n	8011954 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011952:	2300      	movs	r3, #0
}
 8011954:	4618      	mov	r0, r3
 8011956:	3708      	adds	r7, #8
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}
 801195c:	0801a4c0 	.word	0x0801a4c0
 8011960:	0801a6d4 	.word	0x0801a6d4
 8011964:	0801a550 	.word	0x0801a550
 8011968:	240067e5 	.word	0x240067e5
 801196c:	2400a784 	.word	0x2400a784

08011970 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011970:	b590      	push	{r4, r7, lr}
 8011972:	b08b      	sub	sp, #44	; 0x2c
 8011974:	af04      	add	r7, sp, #16
 8011976:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011978:	4b6f      	ldr	r3, [pc, #444]	; (8011b38 <tcp_listen_input+0x1c8>)
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	f003 0304 	and.w	r3, r3, #4
 8011980:	2b00      	cmp	r3, #0
 8011982:	f040 80d2 	bne.w	8011b2a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d106      	bne.n	801199a <tcp_listen_input+0x2a>
 801198c:	4b6b      	ldr	r3, [pc, #428]	; (8011b3c <tcp_listen_input+0x1cc>)
 801198e:	f240 2281 	movw	r2, #641	; 0x281
 8011992:	496b      	ldr	r1, [pc, #428]	; (8011b40 <tcp_listen_input+0x1d0>)
 8011994:	486b      	ldr	r0, [pc, #428]	; (8011b44 <tcp_listen_input+0x1d4>)
 8011996:	f004 fa39 	bl	8015e0c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801199a:	4b67      	ldr	r3, [pc, #412]	; (8011b38 <tcp_listen_input+0x1c8>)
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	f003 0310 	and.w	r3, r3, #16
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d019      	beq.n	80119da <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119a6:	4b68      	ldr	r3, [pc, #416]	; (8011b48 <tcp_listen_input+0x1d8>)
 80119a8:	6819      	ldr	r1, [r3, #0]
 80119aa:	4b68      	ldr	r3, [pc, #416]	; (8011b4c <tcp_listen_input+0x1dc>)
 80119ac:	881b      	ldrh	r3, [r3, #0]
 80119ae:	461a      	mov	r2, r3
 80119b0:	4b67      	ldr	r3, [pc, #412]	; (8011b50 <tcp_listen_input+0x1e0>)
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80119b6:	4b67      	ldr	r3, [pc, #412]	; (8011b54 <tcp_listen_input+0x1e4>)
 80119b8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119ba:	885b      	ldrh	r3, [r3, #2]
 80119bc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80119be:	4a65      	ldr	r2, [pc, #404]	; (8011b54 <tcp_listen_input+0x1e4>)
 80119c0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80119c2:	8812      	ldrh	r2, [r2, #0]
 80119c4:	b292      	uxth	r2, r2
 80119c6:	9202      	str	r2, [sp, #8]
 80119c8:	9301      	str	r3, [sp, #4]
 80119ca:	4b63      	ldr	r3, [pc, #396]	; (8011b58 <tcp_listen_input+0x1e8>)
 80119cc:	9300      	str	r3, [sp, #0]
 80119ce:	4b63      	ldr	r3, [pc, #396]	; (8011b5c <tcp_listen_input+0x1ec>)
 80119d0:	4602      	mov	r2, r0
 80119d2:	6878      	ldr	r0, [r7, #4]
 80119d4:	f003 f81e 	bl	8014a14 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80119d8:	e0a9      	b.n	8011b2e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80119da:	4b57      	ldr	r3, [pc, #348]	; (8011b38 <tcp_listen_input+0x1c8>)
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	f003 0302 	and.w	r3, r3, #2
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	f000 80a3 	beq.w	8011b2e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	7d5b      	ldrb	r3, [r3, #21]
 80119ec:	4618      	mov	r0, r3
 80119ee:	f7ff f885 	bl	8010afc <tcp_alloc>
 80119f2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80119f4:	697b      	ldr	r3, [r7, #20]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d111      	bne.n	8011a1e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	699b      	ldr	r3, [r3, #24]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d00a      	beq.n	8011a18 <tcp_listen_input+0xa8>
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	699b      	ldr	r3, [r3, #24]
 8011a06:	687a      	ldr	r2, [r7, #4]
 8011a08:	6910      	ldr	r0, [r2, #16]
 8011a0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011a0e:	2100      	movs	r1, #0
 8011a10:	4798      	blx	r3
 8011a12:	4603      	mov	r3, r0
 8011a14:	73bb      	strb	r3, [r7, #14]
      return;
 8011a16:	e08b      	b.n	8011b30 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011a18:	23f0      	movs	r3, #240	; 0xf0
 8011a1a:	73bb      	strb	r3, [r7, #14]
      return;
 8011a1c:	e088      	b.n	8011b30 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011a1e:	4b50      	ldr	r3, [pc, #320]	; (8011b60 <tcp_listen_input+0x1f0>)
 8011a20:	695a      	ldr	r2, [r3, #20]
 8011a22:	697b      	ldr	r3, [r7, #20]
 8011a24:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011a26:	4b4e      	ldr	r3, [pc, #312]	; (8011b60 <tcp_listen_input+0x1f0>)
 8011a28:	691a      	ldr	r2, [r3, #16]
 8011a2a:	697b      	ldr	r3, [r7, #20]
 8011a2c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	8ada      	ldrh	r2, [r3, #22]
 8011a32:	697b      	ldr	r3, [r7, #20]
 8011a34:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011a36:	4b47      	ldr	r3, [pc, #284]	; (8011b54 <tcp_listen_input+0x1e4>)
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	881b      	ldrh	r3, [r3, #0]
 8011a3c:	b29a      	uxth	r2, r3
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	2203      	movs	r2, #3
 8011a46:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011a48:	4b41      	ldr	r3, [pc, #260]	; (8011b50 <tcp_listen_input+0x1e0>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	1c5a      	adds	r2, r3, #1
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011a52:	697b      	ldr	r3, [r7, #20]
 8011a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011a5a:	6978      	ldr	r0, [r7, #20]
 8011a5c:	f7ff fa6e 	bl	8010f3c <tcp_next_iss>
 8011a60:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011a62:	697b      	ldr	r3, [r7, #20]
 8011a64:	693a      	ldr	r2, [r7, #16]
 8011a66:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	693a      	ldr	r2, [r7, #16]
 8011a6c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011a6e:	697b      	ldr	r3, [r7, #20]
 8011a70:	693a      	ldr	r2, [r7, #16]
 8011a72:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011a74:	697b      	ldr	r3, [r7, #20]
 8011a76:	693a      	ldr	r2, [r7, #16]
 8011a78:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011a7a:	4b35      	ldr	r3, [pc, #212]	; (8011b50 <tcp_listen_input+0x1e0>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	1e5a      	subs	r2, r3, #1
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	691a      	ldr	r2, [r3, #16]
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	7a5b      	ldrb	r3, [r3, #9]
 8011a96:	f003 030c 	and.w	r3, r3, #12
 8011a9a:	b2da      	uxtb	r2, r3
 8011a9c:	697b      	ldr	r3, [r7, #20]
 8011a9e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	7a1a      	ldrb	r2, [r3, #8]
 8011aa4:	697b      	ldr	r3, [r7, #20]
 8011aa6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011aa8:	4b2e      	ldr	r3, [pc, #184]	; (8011b64 <tcp_listen_input+0x1f4>)
 8011aaa:	681a      	ldr	r2, [r3, #0]
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	60da      	str	r2, [r3, #12]
 8011ab0:	4a2c      	ldr	r2, [pc, #176]	; (8011b64 <tcp_listen_input+0x1f4>)
 8011ab2:	697b      	ldr	r3, [r7, #20]
 8011ab4:	6013      	str	r3, [r2, #0]
 8011ab6:	f003 f96f 	bl	8014d98 <tcp_timer_needed>
 8011aba:	4b2b      	ldr	r3, [pc, #172]	; (8011b68 <tcp_listen_input+0x1f8>)
 8011abc:	2201      	movs	r2, #1
 8011abe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011ac0:	6978      	ldr	r0, [r7, #20]
 8011ac2:	f001 f9d5 	bl	8012e70 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011ac6:	4b23      	ldr	r3, [pc, #140]	; (8011b54 <tcp_listen_input+0x1e4>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	89db      	ldrh	r3, [r3, #14]
 8011acc:	b29a      	uxth	r2, r3
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011ae0:	697b      	ldr	r3, [r7, #20]
 8011ae2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011ae4:	697b      	ldr	r3, [r7, #20]
 8011ae6:	3304      	adds	r3, #4
 8011ae8:	4618      	mov	r0, r3
 8011aea:	f7fa fc3b 	bl	800c364 <ip4_route>
 8011aee:	4601      	mov	r1, r0
 8011af0:	697b      	ldr	r3, [r7, #20]
 8011af2:	3304      	adds	r3, #4
 8011af4:	461a      	mov	r2, r3
 8011af6:	4620      	mov	r0, r4
 8011af8:	f7ff fa46 	bl	8010f88 <tcp_eff_send_mss_netif>
 8011afc:	4603      	mov	r3, r0
 8011afe:	461a      	mov	r2, r3
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011b04:	2112      	movs	r1, #18
 8011b06:	6978      	ldr	r0, [r7, #20]
 8011b08:	f002 f8e2 	bl	8013cd0 <tcp_enqueue_flags>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d004      	beq.n	8011b22 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011b18:	2100      	movs	r1, #0
 8011b1a:	6978      	ldr	r0, [r7, #20]
 8011b1c:	f7fd fe64 	bl	800f7e8 <tcp_abandon>
      return;
 8011b20:	e006      	b.n	8011b30 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011b22:	6978      	ldr	r0, [r7, #20]
 8011b24:	f002 f9c2 	bl	8013eac <tcp_output>
  return;
 8011b28:	e001      	b.n	8011b2e <tcp_listen_input+0x1be>
    return;
 8011b2a:	bf00      	nop
 8011b2c:	e000      	b.n	8011b30 <tcp_listen_input+0x1c0>
  return;
 8011b2e:	bf00      	nop
}
 8011b30:	371c      	adds	r7, #28
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd90      	pop	{r4, r7, pc}
 8011b36:	bf00      	nop
 8011b38:	240067e4 	.word	0x240067e4
 8011b3c:	0801a4c0 	.word	0x0801a4c0
 8011b40:	0801a6fc 	.word	0x0801a6fc
 8011b44:	0801a550 	.word	0x0801a550
 8011b48:	240067dc 	.word	0x240067dc
 8011b4c:	240067e2 	.word	0x240067e2
 8011b50:	240067d8 	.word	0x240067d8
 8011b54:	240067c8 	.word	0x240067c8
 8011b58:	24006a38 	.word	0x24006a38
 8011b5c:	24006a3c 	.word	0x24006a3c
 8011b60:	24006a28 	.word	0x24006a28
 8011b64:	2400a784 	.word	0x2400a784
 8011b68:	2400a780 	.word	0x2400a780

08011b6c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b086      	sub	sp, #24
 8011b70:	af04      	add	r7, sp, #16
 8011b72:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011b74:	4b2f      	ldr	r3, [pc, #188]	; (8011c34 <tcp_timewait_input+0xc8>)
 8011b76:	781b      	ldrb	r3, [r3, #0]
 8011b78:	f003 0304 	and.w	r3, r3, #4
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d153      	bne.n	8011c28 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d106      	bne.n	8011b94 <tcp_timewait_input+0x28>
 8011b86:	4b2c      	ldr	r3, [pc, #176]	; (8011c38 <tcp_timewait_input+0xcc>)
 8011b88:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011b8c:	492b      	ldr	r1, [pc, #172]	; (8011c3c <tcp_timewait_input+0xd0>)
 8011b8e:	482c      	ldr	r0, [pc, #176]	; (8011c40 <tcp_timewait_input+0xd4>)
 8011b90:	f004 f93c 	bl	8015e0c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011b94:	4b27      	ldr	r3, [pc, #156]	; (8011c34 <tcp_timewait_input+0xc8>)
 8011b96:	781b      	ldrb	r3, [r3, #0]
 8011b98:	f003 0302 	and.w	r3, r3, #2
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d02a      	beq.n	8011bf6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011ba0:	4b28      	ldr	r3, [pc, #160]	; (8011c44 <tcp_timewait_input+0xd8>)
 8011ba2:	681a      	ldr	r2, [r3, #0]
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba8:	1ad3      	subs	r3, r2, r3
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	db2d      	blt.n	8011c0a <tcp_timewait_input+0x9e>
 8011bae:	4b25      	ldr	r3, [pc, #148]	; (8011c44 <tcp_timewait_input+0xd8>)
 8011bb0:	681a      	ldr	r2, [r3, #0]
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011bb6:	6879      	ldr	r1, [r7, #4]
 8011bb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011bba:	440b      	add	r3, r1
 8011bbc:	1ad3      	subs	r3, r2, r3
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	dc23      	bgt.n	8011c0a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bc2:	4b21      	ldr	r3, [pc, #132]	; (8011c48 <tcp_timewait_input+0xdc>)
 8011bc4:	6819      	ldr	r1, [r3, #0]
 8011bc6:	4b21      	ldr	r3, [pc, #132]	; (8011c4c <tcp_timewait_input+0xe0>)
 8011bc8:	881b      	ldrh	r3, [r3, #0]
 8011bca:	461a      	mov	r2, r3
 8011bcc:	4b1d      	ldr	r3, [pc, #116]	; (8011c44 <tcp_timewait_input+0xd8>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bd2:	4b1f      	ldr	r3, [pc, #124]	; (8011c50 <tcp_timewait_input+0xe4>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bd6:	885b      	ldrh	r3, [r3, #2]
 8011bd8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011bda:	4a1d      	ldr	r2, [pc, #116]	; (8011c50 <tcp_timewait_input+0xe4>)
 8011bdc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011bde:	8812      	ldrh	r2, [r2, #0]
 8011be0:	b292      	uxth	r2, r2
 8011be2:	9202      	str	r2, [sp, #8]
 8011be4:	9301      	str	r3, [sp, #4]
 8011be6:	4b1b      	ldr	r3, [pc, #108]	; (8011c54 <tcp_timewait_input+0xe8>)
 8011be8:	9300      	str	r3, [sp, #0]
 8011bea:	4b1b      	ldr	r3, [pc, #108]	; (8011c58 <tcp_timewait_input+0xec>)
 8011bec:	4602      	mov	r2, r0
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	f002 ff10 	bl	8014a14 <tcp_rst>
      return;
 8011bf4:	e01b      	b.n	8011c2e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011bf6:	4b0f      	ldr	r3, [pc, #60]	; (8011c34 <tcp_timewait_input+0xc8>)
 8011bf8:	781b      	ldrb	r3, [r3, #0]
 8011bfa:	f003 0301 	and.w	r3, r3, #1
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d003      	beq.n	8011c0a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011c02:	4b16      	ldr	r3, [pc, #88]	; (8011c5c <tcp_timewait_input+0xf0>)
 8011c04:	681a      	ldr	r2, [r3, #0]
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011c0a:	4b10      	ldr	r3, [pc, #64]	; (8011c4c <tcp_timewait_input+0xe0>)
 8011c0c:	881b      	ldrh	r3, [r3, #0]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d00c      	beq.n	8011c2c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	8b5b      	ldrh	r3, [r3, #26]
 8011c16:	f043 0302 	orr.w	r3, r3, #2
 8011c1a:	b29a      	uxth	r2, r3
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011c20:	6878      	ldr	r0, [r7, #4]
 8011c22:	f002 f943 	bl	8013eac <tcp_output>
  }
  return;
 8011c26:	e001      	b.n	8011c2c <tcp_timewait_input+0xc0>
    return;
 8011c28:	bf00      	nop
 8011c2a:	e000      	b.n	8011c2e <tcp_timewait_input+0xc2>
  return;
 8011c2c:	bf00      	nop
}
 8011c2e:	3708      	adds	r7, #8
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	240067e4 	.word	0x240067e4
 8011c38:	0801a4c0 	.word	0x0801a4c0
 8011c3c:	0801a71c 	.word	0x0801a71c
 8011c40:	0801a550 	.word	0x0801a550
 8011c44:	240067d8 	.word	0x240067d8
 8011c48:	240067dc 	.word	0x240067dc
 8011c4c:	240067e2 	.word	0x240067e2
 8011c50:	240067c8 	.word	0x240067c8
 8011c54:	24006a38 	.word	0x24006a38
 8011c58:	24006a3c 	.word	0x24006a3c
 8011c5c:	2400a788 	.word	0x2400a788

08011c60 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011c60:	b590      	push	{r4, r7, lr}
 8011c62:	b08d      	sub	sp, #52	; 0x34
 8011c64:	af04      	add	r7, sp, #16
 8011c66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011c68:	2300      	movs	r3, #0
 8011c6a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d106      	bne.n	8011c84 <tcp_process+0x24>
 8011c76:	4ba5      	ldr	r3, [pc, #660]	; (8011f0c <tcp_process+0x2ac>)
 8011c78:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011c7c:	49a4      	ldr	r1, [pc, #656]	; (8011f10 <tcp_process+0x2b0>)
 8011c7e:	48a5      	ldr	r0, [pc, #660]	; (8011f14 <tcp_process+0x2b4>)
 8011c80:	f004 f8c4 	bl	8015e0c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011c84:	4ba4      	ldr	r3, [pc, #656]	; (8011f18 <tcp_process+0x2b8>)
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	f003 0304 	and.w	r3, r3, #4
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d04e      	beq.n	8011d2e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	7d1b      	ldrb	r3, [r3, #20]
 8011c94:	2b02      	cmp	r3, #2
 8011c96:	d108      	bne.n	8011caa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c9c:	4b9f      	ldr	r3, [pc, #636]	; (8011f1c <tcp_process+0x2bc>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d123      	bne.n	8011cec <tcp_process+0x8c>
        acceptable = 1;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	76fb      	strb	r3, [r7, #27]
 8011ca8:	e020      	b.n	8011cec <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011cae:	4b9c      	ldr	r3, [pc, #624]	; (8011f20 <tcp_process+0x2c0>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	429a      	cmp	r2, r3
 8011cb4:	d102      	bne.n	8011cbc <tcp_process+0x5c>
        acceptable = 1;
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	76fb      	strb	r3, [r7, #27]
 8011cba:	e017      	b.n	8011cec <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011cbc:	4b98      	ldr	r3, [pc, #608]	; (8011f20 <tcp_process+0x2c0>)
 8011cbe:	681a      	ldr	r2, [r3, #0]
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cc4:	1ad3      	subs	r3, r2, r3
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	db10      	blt.n	8011cec <tcp_process+0x8c>
 8011cca:	4b95      	ldr	r3, [pc, #596]	; (8011f20 <tcp_process+0x2c0>)
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cd2:	6879      	ldr	r1, [r7, #4]
 8011cd4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011cd6:	440b      	add	r3, r1
 8011cd8:	1ad3      	subs	r3, r2, r3
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	dc06      	bgt.n	8011cec <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011cde:	687b      	ldr	r3, [r7, #4]
 8011ce0:	8b5b      	ldrh	r3, [r3, #26]
 8011ce2:	f043 0302 	orr.w	r3, r3, #2
 8011ce6:	b29a      	uxth	r2, r3
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011cec:	7efb      	ldrb	r3, [r7, #27]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d01b      	beq.n	8011d2a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	7d1b      	ldrb	r3, [r3, #20]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d106      	bne.n	8011d08 <tcp_process+0xa8>
 8011cfa:	4b84      	ldr	r3, [pc, #528]	; (8011f0c <tcp_process+0x2ac>)
 8011cfc:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011d00:	4988      	ldr	r1, [pc, #544]	; (8011f24 <tcp_process+0x2c4>)
 8011d02:	4884      	ldr	r0, [pc, #528]	; (8011f14 <tcp_process+0x2b4>)
 8011d04:	f004 f882 	bl	8015e0c <iprintf>
      recv_flags |= TF_RESET;
 8011d08:	4b87      	ldr	r3, [pc, #540]	; (8011f28 <tcp_process+0x2c8>)
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	f043 0308 	orr.w	r3, r3, #8
 8011d10:	b2da      	uxtb	r2, r3
 8011d12:	4b85      	ldr	r3, [pc, #532]	; (8011f28 <tcp_process+0x2c8>)
 8011d14:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	8b5b      	ldrh	r3, [r3, #26]
 8011d1a:	f023 0301 	bic.w	r3, r3, #1
 8011d1e:	b29a      	uxth	r2, r3
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011d24:	f06f 030d 	mvn.w	r3, #13
 8011d28:	e37a      	b.n	8012420 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	e378      	b.n	8012420 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011d2e:	4b7a      	ldr	r3, [pc, #488]	; (8011f18 <tcp_process+0x2b8>)
 8011d30:	781b      	ldrb	r3, [r3, #0]
 8011d32:	f003 0302 	and.w	r3, r3, #2
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d010      	beq.n	8011d5c <tcp_process+0xfc>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	7d1b      	ldrb	r3, [r3, #20]
 8011d3e:	2b02      	cmp	r3, #2
 8011d40:	d00c      	beq.n	8011d5c <tcp_process+0xfc>
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	7d1b      	ldrb	r3, [r3, #20]
 8011d46:	2b03      	cmp	r3, #3
 8011d48:	d008      	beq.n	8011d5c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	8b5b      	ldrh	r3, [r3, #26]
 8011d4e:	f043 0302 	orr.w	r3, r3, #2
 8011d52:	b29a      	uxth	r2, r3
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	e361      	b.n	8012420 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	8b5b      	ldrh	r3, [r3, #26]
 8011d60:	f003 0310 	and.w	r3, r3, #16
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d103      	bne.n	8011d70 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011d68:	4b70      	ldr	r3, [pc, #448]	; (8011f2c <tcp_process+0x2cc>)
 8011d6a:	681a      	ldr	r2, [r3, #0]
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2200      	movs	r2, #0
 8011d74:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pcb->persist_probe = 0;
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f001 f875 	bl	8012e70 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	7d1b      	ldrb	r3, [r3, #20]
 8011d8a:	3b02      	subs	r3, #2
 8011d8c:	2b07      	cmp	r3, #7
 8011d8e:	f200 8337 	bhi.w	8012400 <tcp_process+0x7a0>
 8011d92:	a201      	add	r2, pc, #4	; (adr r2, 8011d98 <tcp_process+0x138>)
 8011d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d98:	08011db9 	.word	0x08011db9
 8011d9c:	08011fe9 	.word	0x08011fe9
 8011da0:	08012161 	.word	0x08012161
 8011da4:	0801218b 	.word	0x0801218b
 8011da8:	080122af 	.word	0x080122af
 8011dac:	08012161 	.word	0x08012161
 8011db0:	0801233b 	.word	0x0801233b
 8011db4:	080123cb 	.word	0x080123cb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8011db8:	4b57      	ldr	r3, [pc, #348]	; (8011f18 <tcp_process+0x2b8>)
 8011dba:	781b      	ldrb	r3, [r3, #0]
 8011dbc:	f003 0310 	and.w	r3, r3, #16
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	f000 80e4 	beq.w	8011f8e <tcp_process+0x32e>
 8011dc6:	4b54      	ldr	r3, [pc, #336]	; (8011f18 <tcp_process+0x2b8>)
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	f003 0302 	and.w	r3, r3, #2
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	f000 80dd 	beq.w	8011f8e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011dd8:	1c5a      	adds	r2, r3, #1
 8011dda:	4b50      	ldr	r3, [pc, #320]	; (8011f1c <tcp_process+0x2bc>)
 8011ddc:	681b      	ldr	r3, [r3, #0]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	f040 80d5 	bne.w	8011f8e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8011de4:	4b4e      	ldr	r3, [pc, #312]	; (8011f20 <tcp_process+0x2c0>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	1c5a      	adds	r2, r3, #1
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8011df6:	4b49      	ldr	r3, [pc, #292]	; (8011f1c <tcp_process+0x2bc>)
 8011df8:	681a      	ldr	r2, [r3, #0]
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8011dfe:	4b4c      	ldr	r3, [pc, #304]	; (8011f30 <tcp_process+0x2d0>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	89db      	ldrh	r3, [r3, #14]
 8011e04:	b29a      	uxth	r2, r3
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8011e18:	4b41      	ldr	r3, [pc, #260]	; (8011f20 <tcp_process+0x2c0>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	1e5a      	subs	r2, r3, #1
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	2204      	movs	r2, #4
 8011e26:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	3304      	adds	r3, #4
 8011e30:	4618      	mov	r0, r3
 8011e32:	f7fa fa97 	bl	800c364 <ip4_route>
 8011e36:	4601      	mov	r1, r0
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	3304      	adds	r3, #4
 8011e3c:	461a      	mov	r2, r3
 8011e3e:	4620      	mov	r0, r4
 8011e40:	f7ff f8a2 	bl	8010f88 <tcp_eff_send_mss_netif>
 8011e44:	4603      	mov	r3, r0
 8011e46:	461a      	mov	r2, r3
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e50:	009a      	lsls	r2, r3, #2
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e56:	005b      	lsls	r3, r3, #1
 8011e58:	f241 111c 	movw	r1, #4380	; 0x111c
 8011e5c:	428b      	cmp	r3, r1
 8011e5e:	bf38      	it	cc
 8011e60:	460b      	movcc	r3, r1
 8011e62:	429a      	cmp	r2, r3
 8011e64:	d204      	bcs.n	8011e70 <tcp_process+0x210>
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e6a:	009b      	lsls	r3, r3, #2
 8011e6c:	b29b      	uxth	r3, r3
 8011e6e:	e00d      	b.n	8011e8c <tcp_process+0x22c>
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e74:	005b      	lsls	r3, r3, #1
 8011e76:	f241 121c 	movw	r2, #4380	; 0x111c
 8011e7a:	4293      	cmp	r3, r2
 8011e7c:	d904      	bls.n	8011e88 <tcp_process+0x228>
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e82:	005b      	lsls	r3, r3, #1
 8011e84:	b29b      	uxth	r3, r3
 8011e86:	e001      	b.n	8011e8c <tcp_process+0x22c>
 8011e88:	f241 131c 	movw	r3, #4380	; 0x111c
 8011e8c:	687a      	ldr	r2, [r7, #4]
 8011e8e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d106      	bne.n	8011eaa <tcp_process+0x24a>
 8011e9c:	4b1b      	ldr	r3, [pc, #108]	; (8011f0c <tcp_process+0x2ac>)
 8011e9e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8011ea2:	4924      	ldr	r1, [pc, #144]	; (8011f34 <tcp_process+0x2d4>)
 8011ea4:	481b      	ldr	r0, [pc, #108]	; (8011f14 <tcp_process+0x2b4>)
 8011ea6:	f003 ffb1 	bl	8015e0c <iprintf>
        --pcb->snd_queuelen;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011eb0:	3b01      	subs	r3, #1
 8011eb2:	b29a      	uxth	r2, r3
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ebe:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8011ec0:	69fb      	ldr	r3, [r7, #28]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d111      	bne.n	8011eea <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011eca:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8011ecc:	69fb      	ldr	r3, [r7, #28]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d106      	bne.n	8011ee0 <tcp_process+0x280>
 8011ed2:	4b0e      	ldr	r3, [pc, #56]	; (8011f0c <tcp_process+0x2ac>)
 8011ed4:	f44f 725d 	mov.w	r2, #884	; 0x374
 8011ed8:	4917      	ldr	r1, [pc, #92]	; (8011f38 <tcp_process+0x2d8>)
 8011eda:	480e      	ldr	r0, [pc, #56]	; (8011f14 <tcp_process+0x2b4>)
 8011edc:	f003 ff96 	bl	8015e0c <iprintf>
          pcb->unsent = rseg->next;
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	681a      	ldr	r2, [r3, #0]
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	66da      	str	r2, [r3, #108]	; 0x6c
 8011ee8:	e003      	b.n	8011ef2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8011eea:	69fb      	ldr	r3, [r7, #28]
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8011ef2:	69f8      	ldr	r0, [r7, #28]
 8011ef4:	f7fe fcc5 	bl	8010882 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d11d      	bne.n	8011f3c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011f06:	861a      	strh	r2, [r3, #48]	; 0x30
 8011f08:	e01f      	b.n	8011f4a <tcp_process+0x2ea>
 8011f0a:	bf00      	nop
 8011f0c:	0801a4c0 	.word	0x0801a4c0
 8011f10:	0801a73c 	.word	0x0801a73c
 8011f14:	0801a550 	.word	0x0801a550
 8011f18:	240067e4 	.word	0x240067e4
 8011f1c:	240067dc 	.word	0x240067dc
 8011f20:	240067d8 	.word	0x240067d8
 8011f24:	0801a758 	.word	0x0801a758
 8011f28:	240067e5 	.word	0x240067e5
 8011f2c:	2400a788 	.word	0x2400a788
 8011f30:	240067c8 	.word	0x240067c8
 8011f34:	0801a778 	.word	0x0801a778
 8011f38:	0801a790 	.word	0x0801a790
        } else {
          pcb->rtime = 0;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	2200      	movs	r2, #0
 8011f40:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	2200      	movs	r2, #0
 8011f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d00a      	beq.n	8011f6a <tcp_process+0x30a>
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	6910      	ldr	r0, [r2, #16]
 8011f5e:	2200      	movs	r2, #0
 8011f60:	6879      	ldr	r1, [r7, #4]
 8011f62:	4798      	blx	r3
 8011f64:	4603      	mov	r3, r0
 8011f66:	76bb      	strb	r3, [r7, #26]
 8011f68:	e001      	b.n	8011f6e <tcp_process+0x30e>
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8011f6e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8011f72:	f113 0f0d 	cmn.w	r3, #13
 8011f76:	d102      	bne.n	8011f7e <tcp_process+0x31e>
          return ERR_ABRT;
 8011f78:	f06f 030c 	mvn.w	r3, #12
 8011f7c:	e250      	b.n	8012420 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	8b5b      	ldrh	r3, [r3, #26]
 8011f82:	f043 0302 	orr.w	r3, r3, #2
 8011f86:	b29a      	uxth	r2, r3
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8011f8c:	e23a      	b.n	8012404 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8011f8e:	4b9d      	ldr	r3, [pc, #628]	; (8012204 <tcp_process+0x5a4>)
 8011f90:	781b      	ldrb	r3, [r3, #0]
 8011f92:	f003 0310 	and.w	r3, r3, #16
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	f000 8234 	beq.w	8012404 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011f9c:	4b9a      	ldr	r3, [pc, #616]	; (8012208 <tcp_process+0x5a8>)
 8011f9e:	6819      	ldr	r1, [r3, #0]
 8011fa0:	4b9a      	ldr	r3, [pc, #616]	; (801220c <tcp_process+0x5ac>)
 8011fa2:	881b      	ldrh	r3, [r3, #0]
 8011fa4:	461a      	mov	r2, r3
 8011fa6:	4b9a      	ldr	r3, [pc, #616]	; (8012210 <tcp_process+0x5b0>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011fac:	4b99      	ldr	r3, [pc, #612]	; (8012214 <tcp_process+0x5b4>)
 8011fae:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fb0:	885b      	ldrh	r3, [r3, #2]
 8011fb2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011fb4:	4a97      	ldr	r2, [pc, #604]	; (8012214 <tcp_process+0x5b4>)
 8011fb6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011fb8:	8812      	ldrh	r2, [r2, #0]
 8011fba:	b292      	uxth	r2, r2
 8011fbc:	9202      	str	r2, [sp, #8]
 8011fbe:	9301      	str	r3, [sp, #4]
 8011fc0:	4b95      	ldr	r3, [pc, #596]	; (8012218 <tcp_process+0x5b8>)
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	4b95      	ldr	r3, [pc, #596]	; (801221c <tcp_process+0x5bc>)
 8011fc6:	4602      	mov	r2, r0
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f002 fd23 	bl	8014a14 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011fd4:	2b05      	cmp	r3, #5
 8011fd6:	f200 8215 	bhi.w	8012404 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2200      	movs	r2, #0
 8011fde:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f002 faed 	bl	80145c0 <tcp_rexmit_rto>
      break;
 8011fe6:	e20d      	b.n	8012404 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8011fe8:	4b86      	ldr	r3, [pc, #536]	; (8012204 <tcp_process+0x5a4>)
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	f003 0310 	and.w	r3, r3, #16
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	f000 80a1 	beq.w	8012138 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011ff6:	4b84      	ldr	r3, [pc, #528]	; (8012208 <tcp_process+0x5a8>)
 8011ff8:	681a      	ldr	r2, [r3, #0]
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ffe:	1ad3      	subs	r3, r2, r3
 8012000:	3b01      	subs	r3, #1
 8012002:	2b00      	cmp	r3, #0
 8012004:	db7e      	blt.n	8012104 <tcp_process+0x4a4>
 8012006:	4b80      	ldr	r3, [pc, #512]	; (8012208 <tcp_process+0x5a8>)
 8012008:	681a      	ldr	r2, [r3, #0]
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801200e:	1ad3      	subs	r3, r2, r3
 8012010:	2b00      	cmp	r3, #0
 8012012:	dc77      	bgt.n	8012104 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	2204      	movs	r2, #4
 8012018:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801201e:	2b00      	cmp	r3, #0
 8012020:	d102      	bne.n	8012028 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012022:	23fa      	movs	r3, #250	; 0xfa
 8012024:	76bb      	strb	r3, [r7, #26]
 8012026:	e01d      	b.n	8012064 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801202c:	699b      	ldr	r3, [r3, #24]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d106      	bne.n	8012040 <tcp_process+0x3e0>
 8012032:	4b7b      	ldr	r3, [pc, #492]	; (8012220 <tcp_process+0x5c0>)
 8012034:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012038:	497a      	ldr	r1, [pc, #488]	; (8012224 <tcp_process+0x5c4>)
 801203a:	487b      	ldr	r0, [pc, #492]	; (8012228 <tcp_process+0x5c8>)
 801203c:	f003 fee6 	bl	8015e0c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012044:	699b      	ldr	r3, [r3, #24]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d00a      	beq.n	8012060 <tcp_process+0x400>
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801204e:	699b      	ldr	r3, [r3, #24]
 8012050:	687a      	ldr	r2, [r7, #4]
 8012052:	6910      	ldr	r0, [r2, #16]
 8012054:	2200      	movs	r2, #0
 8012056:	6879      	ldr	r1, [r7, #4]
 8012058:	4798      	blx	r3
 801205a:	4603      	mov	r3, r0
 801205c:	76bb      	strb	r3, [r7, #26]
 801205e:	e001      	b.n	8012064 <tcp_process+0x404>
 8012060:	23f0      	movs	r3, #240	; 0xf0
 8012062:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012064:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d00a      	beq.n	8012082 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801206c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012070:	f113 0f0d 	cmn.w	r3, #13
 8012074:	d002      	beq.n	801207c <tcp_process+0x41c>
              tcp_abort(pcb);
 8012076:	6878      	ldr	r0, [r7, #4]
 8012078:	f7fd fc6a 	bl	800f950 <tcp_abort>
            }
            return ERR_ABRT;
 801207c:	f06f 030c 	mvn.w	r3, #12
 8012080:	e1ce      	b.n	8012420 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8012082:	6878      	ldr	r0, [r7, #4]
 8012084:	f000 fa58 	bl	8012538 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8012088:	4b68      	ldr	r3, [pc, #416]	; (801222c <tcp_process+0x5cc>)
 801208a:	881b      	ldrh	r3, [r3, #0]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d005      	beq.n	801209c <tcp_process+0x43c>
            recv_acked--;
 8012090:	4b66      	ldr	r3, [pc, #408]	; (801222c <tcp_process+0x5cc>)
 8012092:	881b      	ldrh	r3, [r3, #0]
 8012094:	3b01      	subs	r3, #1
 8012096:	b29a      	uxth	r2, r3
 8012098:	4b64      	ldr	r3, [pc, #400]	; (801222c <tcp_process+0x5cc>)
 801209a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120a0:	009a      	lsls	r2, r3, #2
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120a6:	005b      	lsls	r3, r3, #1
 80120a8:	f241 111c 	movw	r1, #4380	; 0x111c
 80120ac:	428b      	cmp	r3, r1
 80120ae:	bf38      	it	cc
 80120b0:	460b      	movcc	r3, r1
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d204      	bcs.n	80120c0 <tcp_process+0x460>
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120ba:	009b      	lsls	r3, r3, #2
 80120bc:	b29b      	uxth	r3, r3
 80120be:	e00d      	b.n	80120dc <tcp_process+0x47c>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120c4:	005b      	lsls	r3, r3, #1
 80120c6:	f241 121c 	movw	r2, #4380	; 0x111c
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d904      	bls.n	80120d8 <tcp_process+0x478>
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120d2:	005b      	lsls	r3, r3, #1
 80120d4:	b29b      	uxth	r3, r3
 80120d6:	e001      	b.n	80120dc <tcp_process+0x47c>
 80120d8:	f241 131c 	movw	r3, #4380	; 0x111c
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80120e2:	4b53      	ldr	r3, [pc, #332]	; (8012230 <tcp_process+0x5d0>)
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	f003 0320 	and.w	r3, r3, #32
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d037      	beq.n	801215e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	8b5b      	ldrh	r3, [r3, #26]
 80120f2:	f043 0302 	orr.w	r3, r3, #2
 80120f6:	b29a      	uxth	r2, r3
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	2207      	movs	r2, #7
 8012100:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012102:	e02c      	b.n	801215e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012104:	4b40      	ldr	r3, [pc, #256]	; (8012208 <tcp_process+0x5a8>)
 8012106:	6819      	ldr	r1, [r3, #0]
 8012108:	4b40      	ldr	r3, [pc, #256]	; (801220c <tcp_process+0x5ac>)
 801210a:	881b      	ldrh	r3, [r3, #0]
 801210c:	461a      	mov	r2, r3
 801210e:	4b40      	ldr	r3, [pc, #256]	; (8012210 <tcp_process+0x5b0>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012114:	4b3f      	ldr	r3, [pc, #252]	; (8012214 <tcp_process+0x5b4>)
 8012116:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012118:	885b      	ldrh	r3, [r3, #2]
 801211a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801211c:	4a3d      	ldr	r2, [pc, #244]	; (8012214 <tcp_process+0x5b4>)
 801211e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012120:	8812      	ldrh	r2, [r2, #0]
 8012122:	b292      	uxth	r2, r2
 8012124:	9202      	str	r2, [sp, #8]
 8012126:	9301      	str	r3, [sp, #4]
 8012128:	4b3b      	ldr	r3, [pc, #236]	; (8012218 <tcp_process+0x5b8>)
 801212a:	9300      	str	r3, [sp, #0]
 801212c:	4b3b      	ldr	r3, [pc, #236]	; (801221c <tcp_process+0x5bc>)
 801212e:	4602      	mov	r2, r0
 8012130:	6878      	ldr	r0, [r7, #4]
 8012132:	f002 fc6f 	bl	8014a14 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012136:	e167      	b.n	8012408 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012138:	4b32      	ldr	r3, [pc, #200]	; (8012204 <tcp_process+0x5a4>)
 801213a:	781b      	ldrb	r3, [r3, #0]
 801213c:	f003 0302 	and.w	r3, r3, #2
 8012140:	2b00      	cmp	r3, #0
 8012142:	f000 8161 	beq.w	8012408 <tcp_process+0x7a8>
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801214a:	1e5a      	subs	r2, r3, #1
 801214c:	4b30      	ldr	r3, [pc, #192]	; (8012210 <tcp_process+0x5b0>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	429a      	cmp	r2, r3
 8012152:	f040 8159 	bne.w	8012408 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f002 fa54 	bl	8014604 <tcp_rexmit>
      break;
 801215c:	e154      	b.n	8012408 <tcp_process+0x7a8>
 801215e:	e153      	b.n	8012408 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f000 f9e9 	bl	8012538 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012166:	4b32      	ldr	r3, [pc, #200]	; (8012230 <tcp_process+0x5d0>)
 8012168:	781b      	ldrb	r3, [r3, #0]
 801216a:	f003 0320 	and.w	r3, r3, #32
 801216e:	2b00      	cmp	r3, #0
 8012170:	f000 814c 	beq.w	801240c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	8b5b      	ldrh	r3, [r3, #26]
 8012178:	f043 0302 	orr.w	r3, r3, #2
 801217c:	b29a      	uxth	r2, r3
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	2207      	movs	r2, #7
 8012186:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012188:	e140      	b.n	801240c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f000 f9d4 	bl	8012538 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012190:	4b27      	ldr	r3, [pc, #156]	; (8012230 <tcp_process+0x5d0>)
 8012192:	781b      	ldrb	r3, [r3, #0]
 8012194:	f003 0320 	and.w	r3, r3, #32
 8012198:	2b00      	cmp	r3, #0
 801219a:	d071      	beq.n	8012280 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801219c:	4b19      	ldr	r3, [pc, #100]	; (8012204 <tcp_process+0x5a4>)
 801219e:	781b      	ldrb	r3, [r3, #0]
 80121a0:	f003 0310 	and.w	r3, r3, #16
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d060      	beq.n	801226a <tcp_process+0x60a>
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80121ac:	4b16      	ldr	r3, [pc, #88]	; (8012208 <tcp_process+0x5a8>)
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	429a      	cmp	r2, r3
 80121b2:	d15a      	bne.n	801226a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d156      	bne.n	801226a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	8b5b      	ldrh	r3, [r3, #26]
 80121c0:	f043 0302 	orr.w	r3, r3, #2
 80121c4:	b29a      	uxth	r2, r3
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f7fe fde6 	bl	8010d9c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80121d0:	4b18      	ldr	r3, [pc, #96]	; (8012234 <tcp_process+0x5d4>)
 80121d2:	681b      	ldr	r3, [r3, #0]
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d105      	bne.n	80121e6 <tcp_process+0x586>
 80121da:	4b16      	ldr	r3, [pc, #88]	; (8012234 <tcp_process+0x5d4>)
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	68db      	ldr	r3, [r3, #12]
 80121e0:	4a14      	ldr	r2, [pc, #80]	; (8012234 <tcp_process+0x5d4>)
 80121e2:	6013      	str	r3, [r2, #0]
 80121e4:	e02e      	b.n	8012244 <tcp_process+0x5e4>
 80121e6:	4b13      	ldr	r3, [pc, #76]	; (8012234 <tcp_process+0x5d4>)
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	617b      	str	r3, [r7, #20]
 80121ec:	e027      	b.n	801223e <tcp_process+0x5de>
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	68db      	ldr	r3, [r3, #12]
 80121f2:	687a      	ldr	r2, [r7, #4]
 80121f4:	429a      	cmp	r2, r3
 80121f6:	d11f      	bne.n	8012238 <tcp_process+0x5d8>
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	68da      	ldr	r2, [r3, #12]
 80121fc:	697b      	ldr	r3, [r7, #20]
 80121fe:	60da      	str	r2, [r3, #12]
 8012200:	e020      	b.n	8012244 <tcp_process+0x5e4>
 8012202:	bf00      	nop
 8012204:	240067e4 	.word	0x240067e4
 8012208:	240067dc 	.word	0x240067dc
 801220c:	240067e2 	.word	0x240067e2
 8012210:	240067d8 	.word	0x240067d8
 8012214:	240067c8 	.word	0x240067c8
 8012218:	24006a38 	.word	0x24006a38
 801221c:	24006a3c 	.word	0x24006a3c
 8012220:	0801a4c0 	.word	0x0801a4c0
 8012224:	0801a7a4 	.word	0x0801a7a4
 8012228:	0801a550 	.word	0x0801a550
 801222c:	240067e0 	.word	0x240067e0
 8012230:	240067e5 	.word	0x240067e5
 8012234:	2400a784 	.word	0x2400a784
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	68db      	ldr	r3, [r3, #12]
 801223c:	617b      	str	r3, [r7, #20]
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d1d4      	bne.n	80121ee <tcp_process+0x58e>
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	2200      	movs	r2, #0
 8012248:	60da      	str	r2, [r3, #12]
 801224a:	4b77      	ldr	r3, [pc, #476]	; (8012428 <tcp_process+0x7c8>)
 801224c:	2201      	movs	r2, #1
 801224e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	220a      	movs	r2, #10
 8012254:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012256:	4b75      	ldr	r3, [pc, #468]	; (801242c <tcp_process+0x7cc>)
 8012258:	681a      	ldr	r2, [r3, #0]
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	60da      	str	r2, [r3, #12]
 801225e:	4a73      	ldr	r2, [pc, #460]	; (801242c <tcp_process+0x7cc>)
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	6013      	str	r3, [r2, #0]
 8012264:	f002 fd98 	bl	8014d98 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012268:	e0d2      	b.n	8012410 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	8b5b      	ldrh	r3, [r3, #26]
 801226e:	f043 0302 	orr.w	r3, r3, #2
 8012272:	b29a      	uxth	r2, r3
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	2208      	movs	r2, #8
 801227c:	751a      	strb	r2, [r3, #20]
      break;
 801227e:	e0c7      	b.n	8012410 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012280:	4b6b      	ldr	r3, [pc, #428]	; (8012430 <tcp_process+0x7d0>)
 8012282:	781b      	ldrb	r3, [r3, #0]
 8012284:	f003 0310 	and.w	r3, r3, #16
 8012288:	2b00      	cmp	r3, #0
 801228a:	f000 80c1 	beq.w	8012410 <tcp_process+0x7b0>
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012292:	4b68      	ldr	r3, [pc, #416]	; (8012434 <tcp_process+0x7d4>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	429a      	cmp	r2, r3
 8012298:	f040 80ba 	bne.w	8012410 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	f040 80b5 	bne.w	8012410 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	2206      	movs	r2, #6
 80122aa:	751a      	strb	r2, [r3, #20]
      break;
 80122ac:	e0b0      	b.n	8012410 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 f942 	bl	8012538 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80122b4:	4b60      	ldr	r3, [pc, #384]	; (8012438 <tcp_process+0x7d8>)
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	f003 0320 	and.w	r3, r3, #32
 80122bc:	2b00      	cmp	r3, #0
 80122be:	f000 80a9 	beq.w	8012414 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	8b5b      	ldrh	r3, [r3, #26]
 80122c6:	f043 0302 	orr.w	r3, r3, #2
 80122ca:	b29a      	uxth	r2, r3
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f7fe fd63 	bl	8010d9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80122d6:	4b59      	ldr	r3, [pc, #356]	; (801243c <tcp_process+0x7dc>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	687a      	ldr	r2, [r7, #4]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d105      	bne.n	80122ec <tcp_process+0x68c>
 80122e0:	4b56      	ldr	r3, [pc, #344]	; (801243c <tcp_process+0x7dc>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	68db      	ldr	r3, [r3, #12]
 80122e6:	4a55      	ldr	r2, [pc, #340]	; (801243c <tcp_process+0x7dc>)
 80122e8:	6013      	str	r3, [r2, #0]
 80122ea:	e013      	b.n	8012314 <tcp_process+0x6b4>
 80122ec:	4b53      	ldr	r3, [pc, #332]	; (801243c <tcp_process+0x7dc>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	613b      	str	r3, [r7, #16]
 80122f2:	e00c      	b.n	801230e <tcp_process+0x6ae>
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	68db      	ldr	r3, [r3, #12]
 80122f8:	687a      	ldr	r2, [r7, #4]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d104      	bne.n	8012308 <tcp_process+0x6a8>
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	68da      	ldr	r2, [r3, #12]
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	60da      	str	r2, [r3, #12]
 8012306:	e005      	b.n	8012314 <tcp_process+0x6b4>
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	68db      	ldr	r3, [r3, #12]
 801230c:	613b      	str	r3, [r7, #16]
 801230e:	693b      	ldr	r3, [r7, #16]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d1ef      	bne.n	80122f4 <tcp_process+0x694>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	2200      	movs	r2, #0
 8012318:	60da      	str	r2, [r3, #12]
 801231a:	4b43      	ldr	r3, [pc, #268]	; (8012428 <tcp_process+0x7c8>)
 801231c:	2201      	movs	r2, #1
 801231e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	220a      	movs	r2, #10
 8012324:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012326:	4b41      	ldr	r3, [pc, #260]	; (801242c <tcp_process+0x7cc>)
 8012328:	681a      	ldr	r2, [r3, #0]
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	60da      	str	r2, [r3, #12]
 801232e:	4a3f      	ldr	r2, [pc, #252]	; (801242c <tcp_process+0x7cc>)
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	6013      	str	r3, [r2, #0]
 8012334:	f002 fd30 	bl	8014d98 <tcp_timer_needed>
      }
      break;
 8012338:	e06c      	b.n	8012414 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801233a:	6878      	ldr	r0, [r7, #4]
 801233c:	f000 f8fc 	bl	8012538 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012340:	4b3b      	ldr	r3, [pc, #236]	; (8012430 <tcp_process+0x7d0>)
 8012342:	781b      	ldrb	r3, [r3, #0]
 8012344:	f003 0310 	and.w	r3, r3, #16
 8012348:	2b00      	cmp	r3, #0
 801234a:	d065      	beq.n	8012418 <tcp_process+0x7b8>
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012350:	4b38      	ldr	r3, [pc, #224]	; (8012434 <tcp_process+0x7d4>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	429a      	cmp	r2, r3
 8012356:	d15f      	bne.n	8012418 <tcp_process+0x7b8>
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801235c:	2b00      	cmp	r3, #0
 801235e:	d15b      	bne.n	8012418 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f7fe fd1b 	bl	8010d9c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012366:	4b35      	ldr	r3, [pc, #212]	; (801243c <tcp_process+0x7dc>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	687a      	ldr	r2, [r7, #4]
 801236c:	429a      	cmp	r2, r3
 801236e:	d105      	bne.n	801237c <tcp_process+0x71c>
 8012370:	4b32      	ldr	r3, [pc, #200]	; (801243c <tcp_process+0x7dc>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	68db      	ldr	r3, [r3, #12]
 8012376:	4a31      	ldr	r2, [pc, #196]	; (801243c <tcp_process+0x7dc>)
 8012378:	6013      	str	r3, [r2, #0]
 801237a:	e013      	b.n	80123a4 <tcp_process+0x744>
 801237c:	4b2f      	ldr	r3, [pc, #188]	; (801243c <tcp_process+0x7dc>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	60fb      	str	r3, [r7, #12]
 8012382:	e00c      	b.n	801239e <tcp_process+0x73e>
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	68db      	ldr	r3, [r3, #12]
 8012388:	687a      	ldr	r2, [r7, #4]
 801238a:	429a      	cmp	r2, r3
 801238c:	d104      	bne.n	8012398 <tcp_process+0x738>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	68da      	ldr	r2, [r3, #12]
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	60da      	str	r2, [r3, #12]
 8012396:	e005      	b.n	80123a4 <tcp_process+0x744>
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	68db      	ldr	r3, [r3, #12]
 801239c:	60fb      	str	r3, [r7, #12]
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d1ef      	bne.n	8012384 <tcp_process+0x724>
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2200      	movs	r2, #0
 80123a8:	60da      	str	r2, [r3, #12]
 80123aa:	4b1f      	ldr	r3, [pc, #124]	; (8012428 <tcp_process+0x7c8>)
 80123ac:	2201      	movs	r2, #1
 80123ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	220a      	movs	r2, #10
 80123b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80123b6:	4b1d      	ldr	r3, [pc, #116]	; (801242c <tcp_process+0x7cc>)
 80123b8:	681a      	ldr	r2, [r3, #0]
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	60da      	str	r2, [r3, #12]
 80123be:	4a1b      	ldr	r2, [pc, #108]	; (801242c <tcp_process+0x7cc>)
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6013      	str	r3, [r2, #0]
 80123c4:	f002 fce8 	bl	8014d98 <tcp_timer_needed>
      }
      break;
 80123c8:	e026      	b.n	8012418 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 f8b4 	bl	8012538 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80123d0:	4b17      	ldr	r3, [pc, #92]	; (8012430 <tcp_process+0x7d0>)
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	f003 0310 	and.w	r3, r3, #16
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d01f      	beq.n	801241c <tcp_process+0x7bc>
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80123e0:	4b14      	ldr	r3, [pc, #80]	; (8012434 <tcp_process+0x7d4>)
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	429a      	cmp	r2, r3
 80123e6:	d119      	bne.n	801241c <tcp_process+0x7bc>
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d115      	bne.n	801241c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80123f0:	4b11      	ldr	r3, [pc, #68]	; (8012438 <tcp_process+0x7d8>)
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	f043 0310 	orr.w	r3, r3, #16
 80123f8:	b2da      	uxtb	r2, r3
 80123fa:	4b0f      	ldr	r3, [pc, #60]	; (8012438 <tcp_process+0x7d8>)
 80123fc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80123fe:	e00d      	b.n	801241c <tcp_process+0x7bc>
    default:
      break;
 8012400:	bf00      	nop
 8012402:	e00c      	b.n	801241e <tcp_process+0x7be>
      break;
 8012404:	bf00      	nop
 8012406:	e00a      	b.n	801241e <tcp_process+0x7be>
      break;
 8012408:	bf00      	nop
 801240a:	e008      	b.n	801241e <tcp_process+0x7be>
      break;
 801240c:	bf00      	nop
 801240e:	e006      	b.n	801241e <tcp_process+0x7be>
      break;
 8012410:	bf00      	nop
 8012412:	e004      	b.n	801241e <tcp_process+0x7be>
      break;
 8012414:	bf00      	nop
 8012416:	e002      	b.n	801241e <tcp_process+0x7be>
      break;
 8012418:	bf00      	nop
 801241a:	e000      	b.n	801241e <tcp_process+0x7be>
      break;
 801241c:	bf00      	nop
  }
  return ERR_OK;
 801241e:	2300      	movs	r3, #0
}
 8012420:	4618      	mov	r0, r3
 8012422:	3724      	adds	r7, #36	; 0x24
 8012424:	46bd      	mov	sp, r7
 8012426:	bd90      	pop	{r4, r7, pc}
 8012428:	2400a780 	.word	0x2400a780
 801242c:	2400a794 	.word	0x2400a794
 8012430:	240067e4 	.word	0x240067e4
 8012434:	240067dc 	.word	0x240067dc
 8012438:	240067e5 	.word	0x240067e5
 801243c:	2400a784 	.word	0x2400a784

08012440 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012440:	b5b0      	push	{r4, r5, r7, lr}
 8012442:	b086      	sub	sp, #24
 8012444:	af00      	add	r7, sp, #0
 8012446:	60f8      	str	r0, [r7, #12]
 8012448:	60b9      	str	r1, [r7, #8]
 801244a:	607a      	str	r2, [r7, #4]
 801244c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801244e:	e03e      	b.n	80124ce <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	4618      	mov	r0, r3
 8012460:	f7fc fd1e 	bl	800eea0 <pbuf_clen>
 8012464:	4603      	mov	r3, r0
 8012466:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801246e:	8a7a      	ldrh	r2, [r7, #18]
 8012470:	429a      	cmp	r2, r3
 8012472:	d906      	bls.n	8012482 <tcp_free_acked_segments+0x42>
 8012474:	4b2a      	ldr	r3, [pc, #168]	; (8012520 <tcp_free_acked_segments+0xe0>)
 8012476:	f240 4257 	movw	r2, #1111	; 0x457
 801247a:	492a      	ldr	r1, [pc, #168]	; (8012524 <tcp_free_acked_segments+0xe4>)
 801247c:	482a      	ldr	r0, [pc, #168]	; (8012528 <tcp_free_acked_segments+0xe8>)
 801247e:	f003 fcc5 	bl	8015e0c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012482:	68fb      	ldr	r3, [r7, #12]
 8012484:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012488:	8a7b      	ldrh	r3, [r7, #18]
 801248a:	1ad3      	subs	r3, r2, r3
 801248c:	b29a      	uxth	r2, r3
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012494:	697b      	ldr	r3, [r7, #20]
 8012496:	891a      	ldrh	r2, [r3, #8]
 8012498:	4b24      	ldr	r3, [pc, #144]	; (801252c <tcp_free_acked_segments+0xec>)
 801249a:	881b      	ldrh	r3, [r3, #0]
 801249c:	4413      	add	r3, r2
 801249e:	b29a      	uxth	r2, r3
 80124a0:	4b22      	ldr	r3, [pc, #136]	; (801252c <tcp_free_acked_segments+0xec>)
 80124a2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80124a4:	6978      	ldr	r0, [r7, #20]
 80124a6:	f7fe f9ec 	bl	8010882 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d00c      	beq.n	80124ce <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80124b4:	68bb      	ldr	r3, [r7, #8]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d109      	bne.n	80124ce <tcp_free_acked_segments+0x8e>
 80124ba:	683b      	ldr	r3, [r7, #0]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d106      	bne.n	80124ce <tcp_free_acked_segments+0x8e>
 80124c0:	4b17      	ldr	r3, [pc, #92]	; (8012520 <tcp_free_acked_segments+0xe0>)
 80124c2:	f240 4261 	movw	r2, #1121	; 0x461
 80124c6:	491a      	ldr	r1, [pc, #104]	; (8012530 <tcp_free_acked_segments+0xf0>)
 80124c8:	4817      	ldr	r0, [pc, #92]	; (8012528 <tcp_free_acked_segments+0xe8>)
 80124ca:	f003 fc9f 	bl	8015e0c <iprintf>
  while (seg_list != NULL &&
 80124ce:	68bb      	ldr	r3, [r7, #8]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d020      	beq.n	8012516 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	68db      	ldr	r3, [r3, #12]
 80124d8:	685b      	ldr	r3, [r3, #4]
 80124da:	4618      	mov	r0, r3
 80124dc:	f7fb f867 	bl	800d5ae <lwip_htonl>
 80124e0:	4604      	mov	r4, r0
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	891b      	ldrh	r3, [r3, #8]
 80124e6:	461d      	mov	r5, r3
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	68db      	ldr	r3, [r3, #12]
 80124ec:	899b      	ldrh	r3, [r3, #12]
 80124ee:	b29b      	uxth	r3, r3
 80124f0:	4618      	mov	r0, r3
 80124f2:	f7fb f847 	bl	800d584 <lwip_htons>
 80124f6:	4603      	mov	r3, r0
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	f003 0303 	and.w	r3, r3, #3
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d001      	beq.n	8012506 <tcp_free_acked_segments+0xc6>
 8012502:	2301      	movs	r3, #1
 8012504:	e000      	b.n	8012508 <tcp_free_acked_segments+0xc8>
 8012506:	2300      	movs	r3, #0
 8012508:	442b      	add	r3, r5
 801250a:	18e2      	adds	r2, r4, r3
 801250c:	4b09      	ldr	r3, [pc, #36]	; (8012534 <tcp_free_acked_segments+0xf4>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012512:	2b00      	cmp	r3, #0
 8012514:	dd9c      	ble.n	8012450 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012516:	68bb      	ldr	r3, [r7, #8]
}
 8012518:	4618      	mov	r0, r3
 801251a:	3718      	adds	r7, #24
 801251c:	46bd      	mov	sp, r7
 801251e:	bdb0      	pop	{r4, r5, r7, pc}
 8012520:	0801a4c0 	.word	0x0801a4c0
 8012524:	0801a7c4 	.word	0x0801a7c4
 8012528:	0801a550 	.word	0x0801a550
 801252c:	240067e0 	.word	0x240067e0
 8012530:	0801a7ec 	.word	0x0801a7ec
 8012534:	240067dc 	.word	0x240067dc

08012538 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012538:	b590      	push	{r4, r7, lr}
 801253a:	b08d      	sub	sp, #52	; 0x34
 801253c:	af00      	add	r7, sp, #0
 801253e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012540:	2300      	movs	r3, #0
 8012542:	62bb      	str	r3, [r7, #40]	; 0x28

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2b00      	cmp	r3, #0
 8012548:	d106      	bne.n	8012558 <tcp_receive+0x20>
 801254a:	4ba5      	ldr	r3, [pc, #660]	; (80127e0 <tcp_receive+0x2a8>)
 801254c:	f240 427b 	movw	r2, #1147	; 0x47b
 8012550:	49a4      	ldr	r1, [pc, #656]	; (80127e4 <tcp_receive+0x2ac>)
 8012552:	48a5      	ldr	r0, [pc, #660]	; (80127e8 <tcp_receive+0x2b0>)
 8012554:	f003 fc5a 	bl	8015e0c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	7d1b      	ldrb	r3, [r3, #20]
 801255c:	2b03      	cmp	r3, #3
 801255e:	d806      	bhi.n	801256e <tcp_receive+0x36>
 8012560:	4b9f      	ldr	r3, [pc, #636]	; (80127e0 <tcp_receive+0x2a8>)
 8012562:	f240 427c 	movw	r2, #1148	; 0x47c
 8012566:	49a1      	ldr	r1, [pc, #644]	; (80127ec <tcp_receive+0x2b4>)
 8012568:	489f      	ldr	r0, [pc, #636]	; (80127e8 <tcp_receive+0x2b0>)
 801256a:	f003 fc4f 	bl	8015e0c <iprintf>

  if (flags & TCP_ACK) {
 801256e:	4ba0      	ldr	r3, [pc, #640]	; (80127f0 <tcp_receive+0x2b8>)
 8012570:	781b      	ldrb	r3, [r3, #0]
 8012572:	f003 0310 	and.w	r3, r3, #16
 8012576:	2b00      	cmp	r3, #0
 8012578:	f000 8258 	beq.w	8012a2c <tcp_receive+0x4f4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012582:	461a      	mov	r2, r3
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012588:	4413      	add	r3, r2
 801258a:	61fb      	str	r3, [r7, #28]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012590:	4b98      	ldr	r3, [pc, #608]	; (80127f4 <tcp_receive+0x2bc>)
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	1ad3      	subs	r3, r2, r3
 8012596:	2b00      	cmp	r3, #0
 8012598:	db1b      	blt.n	80125d2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801259e:	4b95      	ldr	r3, [pc, #596]	; (80127f4 <tcp_receive+0x2bc>)
 80125a0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d106      	bne.n	80125b4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80125aa:	4b93      	ldr	r3, [pc, #588]	; (80127f8 <tcp_receive+0x2c0>)
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	1ad3      	subs	r3, r2, r3
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	db0e      	blt.n	80125d2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80125b8:	4b8f      	ldr	r3, [pc, #572]	; (80127f8 <tcp_receive+0x2c0>)
 80125ba:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80125bc:	429a      	cmp	r2, r3
 80125be:	d125      	bne.n	801260c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80125c0:	4b8e      	ldr	r3, [pc, #568]	; (80127fc <tcp_receive+0x2c4>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	89db      	ldrh	r3, [r3, #14]
 80125c6:	b29a      	uxth	r2, r3
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d91c      	bls.n	801260c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80125d2:	4b8a      	ldr	r3, [pc, #552]	; (80127fc <tcp_receive+0x2c4>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	89db      	ldrh	r3, [r3, #14]
 80125d8:	b29a      	uxth	r2, r3
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d205      	bcs.n	80125fc <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80125fc:	4b7d      	ldr	r3, [pc, #500]	; (80127f4 <tcp_receive+0x2bc>)
 80125fe:	681a      	ldr	r2, [r3, #0]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012604:	4b7c      	ldr	r3, [pc, #496]	; (80127f8 <tcp_receive+0x2c0>)
 8012606:	681a      	ldr	r2, [r3, #0]
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801260c:	4b7a      	ldr	r3, [pc, #488]	; (80127f8 <tcp_receive+0x2c0>)
 801260e:	681a      	ldr	r2, [r3, #0]
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012614:	1ad3      	subs	r3, r2, r3
 8012616:	2b00      	cmp	r3, #0
 8012618:	dc58      	bgt.n	80126cc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801261a:	4b79      	ldr	r3, [pc, #484]	; (8012800 <tcp_receive+0x2c8>)
 801261c:	881b      	ldrh	r3, [r3, #0]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d14b      	bne.n	80126ba <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012626:	687a      	ldr	r2, [r7, #4]
 8012628:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801262c:	4413      	add	r3, r2
 801262e:	69fa      	ldr	r2, [r7, #28]
 8012630:	429a      	cmp	r2, r3
 8012632:	d142      	bne.n	80126ba <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801263a:	2b00      	cmp	r3, #0
 801263c:	db3d      	blt.n	80126ba <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012642:	4b6d      	ldr	r3, [pc, #436]	; (80127f8 <tcp_receive+0x2c0>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	429a      	cmp	r2, r3
 8012648:	d137      	bne.n	80126ba <tcp_receive+0x182>
              found_dupack = 1;
 801264a:	2301      	movs	r3, #1
 801264c:	62bb      	str	r3, [r7, #40]	; 0x28
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012654:	2bff      	cmp	r3, #255	; 0xff
 8012656:	d007      	beq.n	8012668 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801265e:	3301      	adds	r3, #1
 8012660:	b2da      	uxtb	r2, r3
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801266e:	2b03      	cmp	r3, #3
 8012670:	d91b      	bls.n	80126aa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801267c:	4413      	add	r3, r2
 801267e:	b29a      	uxth	r2, r3
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012686:	429a      	cmp	r2, r3
 8012688:	d30a      	bcc.n	80126a0 <tcp_receive+0x168>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012694:	4413      	add	r3, r2
 8012696:	b29a      	uxth	r2, r3
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801269e:	e004      	b.n	80126aa <tcp_receive+0x172>
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80126a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80126b0:	2b02      	cmp	r3, #2
 80126b2:	d902      	bls.n	80126ba <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80126b4:	6878      	ldr	r0, [r7, #4]
 80126b6:	f002 f811 	bl	80146dc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80126ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126bc:	2b00      	cmp	r3, #0
 80126be:	f040 815e 	bne.w	801297e <tcp_receive+0x446>
        pcb->dupacks = 0;
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	2200      	movs	r2, #0
 80126c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80126ca:	e158      	b.n	801297e <tcp_receive+0x446>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80126cc:	4b4a      	ldr	r3, [pc, #296]	; (80127f8 <tcp_receive+0x2c0>)
 80126ce:	681a      	ldr	r2, [r3, #0]
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80126d4:	1ad3      	subs	r3, r2, r3
 80126d6:	3b01      	subs	r3, #1
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f2c0 814b 	blt.w	8012974 <tcp_receive+0x43c>
 80126de:	4b46      	ldr	r3, [pc, #280]	; (80127f8 <tcp_receive+0x2c0>)
 80126e0:	681a      	ldr	r2, [r3, #0]
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80126e6:	1ad3      	subs	r3, r2, r3
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	f300 8143 	bgt.w	8012974 <tcp_receive+0x43c>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	8b5b      	ldrh	r3, [r3, #26]
 80126f2:	f003 0304 	and.w	r3, r3, #4
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d010      	beq.n	801271c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	8b5b      	ldrh	r3, [r3, #26]
 80126fe:	f023 0304 	bic.w	r3, r3, #4
 8012702:	b29a      	uxth	r2, r3
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2200      	movs	r2, #0
 8012718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2200      	movs	r2, #0
 8012720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801272a:	10db      	asrs	r3, r3, #3
 801272c:	b21b      	sxth	r3, r3
 801272e:	b29a      	uxth	r2, r3
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012736:	b29b      	uxth	r3, r3
 8012738:	4413      	add	r3, r2
 801273a:	b29b      	uxth	r3, r3
 801273c:	b21a      	sxth	r2, r3
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8012744:	4b2c      	ldr	r3, [pc, #176]	; (80127f8 <tcp_receive+0x2c0>)
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	b29a      	uxth	r2, r3
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801274e:	b29b      	uxth	r3, r3
 8012750:	1ad3      	subs	r3, r2, r3
 8012752:	837b      	strh	r3, [r7, #26]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	2200      	movs	r2, #0
 8012758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801275c:	4b26      	ldr	r3, [pc, #152]	; (80127f8 <tcp_receive+0x2c0>)
 801275e:	681a      	ldr	r2, [r3, #0]
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	7d1b      	ldrb	r3, [r3, #20]
 8012768:	2b03      	cmp	r3, #3
 801276a:	f240 8094 	bls.w	8012896 <tcp_receive+0x35e>
        if (pcb->cwnd < pcb->ssthresh) {
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801277a:	429a      	cmp	r2, r3
 801277c:	d242      	bcs.n	8012804 <tcp_receive+0x2cc>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	8b5b      	ldrh	r3, [r3, #26]
 8012782:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012786:	2b00      	cmp	r3, #0
 8012788:	d001      	beq.n	801278e <tcp_receive+0x256>
 801278a:	2301      	movs	r3, #1
 801278c:	e000      	b.n	8012790 <tcp_receive+0x258>
 801278e:	2302      	movs	r3, #2
 8012790:	767b      	strb	r3, [r7, #25]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012792:	7e7b      	ldrb	r3, [r7, #25]
 8012794:	b29a      	uxth	r2, r3
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801279a:	fb12 f303 	smulbb	r3, r2, r3
 801279e:	b29b      	uxth	r3, r3
 80127a0:	8b7a      	ldrh	r2, [r7, #26]
 80127a2:	4293      	cmp	r3, r2
 80127a4:	bf28      	it	cs
 80127a6:	4613      	movcs	r3, r2
 80127a8:	82fb      	strh	r3, [r7, #22]
          TCP_WND_INC(pcb->cwnd, increase);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80127b0:	8afb      	ldrh	r3, [r7, #22]
 80127b2:	4413      	add	r3, r2
 80127b4:	b29a      	uxth	r2, r3
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80127bc:	429a      	cmp	r2, r3
 80127be:	d309      	bcc.n	80127d4 <tcp_receive+0x29c>
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80127c6:	8afb      	ldrh	r3, [r7, #22]
 80127c8:	4413      	add	r3, r2
 80127ca:	b29a      	uxth	r2, r3
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80127d2:	e060      	b.n	8012896 <tcp_receive+0x35e>
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80127da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80127de:	e05a      	b.n	8012896 <tcp_receive+0x35e>
 80127e0:	0801a4c0 	.word	0x0801a4c0
 80127e4:	0801a80c 	.word	0x0801a80c
 80127e8:	0801a550 	.word	0x0801a550
 80127ec:	0801a828 	.word	0x0801a828
 80127f0:	240067e4 	.word	0x240067e4
 80127f4:	240067d8 	.word	0x240067d8
 80127f8:	240067dc 	.word	0x240067dc
 80127fc:	240067c8 	.word	0x240067c8
 8012800:	240067e2 	.word	0x240067e2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801280a:	8b7b      	ldrh	r3, [r7, #26]
 801280c:	4413      	add	r3, r2
 801280e:	b29a      	uxth	r2, r3
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012816:	429a      	cmp	r2, r3
 8012818:	d309      	bcc.n	801282e <tcp_receive+0x2f6>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012820:	8b7b      	ldrh	r3, [r7, #26]
 8012822:	4413      	add	r3, r2
 8012824:	b29a      	uxth	r2, r3
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801282c:	e004      	b.n	8012838 <tcp_receive+0x300>
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012834:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012844:	429a      	cmp	r2, r3
 8012846:	d326      	bcc.n	8012896 <tcp_receive+0x35e>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012854:	1ad3      	subs	r3, r2, r3
 8012856:	b29a      	uxth	r2, r3
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012868:	4413      	add	r3, r2
 801286a:	b29a      	uxth	r2, r3
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012872:	429a      	cmp	r2, r3
 8012874:	d30a      	bcc.n	801288c <tcp_receive+0x354>
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012880:	4413      	add	r3, r2
 8012882:	b29a      	uxth	r2, r3
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801288a:	e004      	b.n	8012896 <tcp_receive+0x35e>
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012892:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801289e:	4a91      	ldr	r2, [pc, #580]	; (8012ae4 <tcp_receive+0x5ac>)
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f7ff fdcd 	bl	8012440 <tcp_free_acked_segments>
 80128a6:	4602      	mov	r2, r0
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128b4:	4a8c      	ldr	r2, [pc, #560]	; (8012ae8 <tcp_receive+0x5b0>)
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f7ff fdc2 	bl	8012440 <tcp_free_acked_segments>
 80128bc:	4602      	mov	r2, r0
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d104      	bne.n	80128d4 <tcp_receive+0x39c>
        pcb->rtime = -1;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80128d0:	861a      	strh	r2, [r3, #48]	; 0x30
 80128d2:	e002      	b.n	80128da <tcp_receive+0x3a2>
      } else {
        pcb->rtime = 0;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2200      	movs	r2, #0
 80128d8:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d103      	bne.n	80128f0 <tcp_receive+0x3b8>
        pcb->unsent_oversize = 0;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2200      	movs	r2, #0
 80128ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80128f6:	4b7d      	ldr	r3, [pc, #500]	; (8012aec <tcp_receive+0x5b4>)
 80128f8:	881b      	ldrh	r3, [r3, #0]
 80128fa:	4413      	add	r3, r2
 80128fc:	b29a      	uxth	r2, r3
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	8b5b      	ldrh	r3, [r3, #26]
 8012908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801290c:	2b00      	cmp	r3, #0
 801290e:	d035      	beq.n	801297c <tcp_receive+0x444>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012914:	2b00      	cmp	r3, #0
 8012916:	d118      	bne.n	801294a <tcp_receive+0x412>
          if ((pcb->unsent == NULL) ||
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801291c:	2b00      	cmp	r3, #0
 801291e:	d00c      	beq.n	801293a <tcp_receive+0x402>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012928:	68db      	ldr	r3, [r3, #12]
 801292a:	685b      	ldr	r3, [r3, #4]
 801292c:	4618      	mov	r0, r3
 801292e:	f7fa fe3e 	bl	800d5ae <lwip_htonl>
 8012932:	4603      	mov	r3, r0
 8012934:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012936:	2b00      	cmp	r3, #0
 8012938:	dc20      	bgt.n	801297c <tcp_receive+0x444>
            tcp_clear_flags(pcb, TF_RTO);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	8b5b      	ldrh	r3, [r3, #26]
 801293e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012942:	b29a      	uxth	r2, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012948:	e018      	b.n	801297c <tcp_receive+0x444>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012952:	68db      	ldr	r3, [r3, #12]
 8012954:	685b      	ldr	r3, [r3, #4]
 8012956:	4618      	mov	r0, r3
 8012958:	f7fa fe29 	bl	800d5ae <lwip_htonl>
 801295c:	4603      	mov	r3, r0
 801295e:	1ae3      	subs	r3, r4, r3
 8012960:	2b00      	cmp	r3, #0
 8012962:	dc0b      	bgt.n	801297c <tcp_receive+0x444>
          tcp_clear_flags(pcb, TF_RTO);
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	8b5b      	ldrh	r3, [r3, #26]
 8012968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801296c:	b29a      	uxth	r2, r3
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012972:	e003      	b.n	801297c <tcp_receive+0x444>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012974:	6878      	ldr	r0, [r7, #4]
 8012976:	f002 f89f 	bl	8014ab8 <tcp_send_empty_ack>
 801297a:	e000      	b.n	801297e <tcp_receive+0x446>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801297c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012982:	2b00      	cmp	r3, #0
 8012984:	d052      	beq.n	8012a2c <tcp_receive+0x4f4>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801298a:	4b59      	ldr	r3, [pc, #356]	; (8012af0 <tcp_receive+0x5b8>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	1ad3      	subs	r3, r2, r3
 8012990:	2b00      	cmp	r3, #0
 8012992:	da4b      	bge.n	8012a2c <tcp_receive+0x4f4>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012994:	4b57      	ldr	r3, [pc, #348]	; (8012af4 <tcp_receive+0x5bc>)
 8012996:	681b      	ldr	r3, [r3, #0]
 8012998:	b29a      	uxth	r2, r3
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801299e:	b29b      	uxth	r3, r3
 80129a0:	1ad3      	subs	r3, r2, r3
 80129a2:	b29b      	uxth	r3, r3
 80129a4:	85fb      	strh	r3, [r7, #46]	; 0x2e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80129a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80129ae:	10db      	asrs	r3, r3, #3
 80129b0:	b21b      	sxth	r3, r3
 80129b2:	b29b      	uxth	r3, r3
 80129b4:	1ad3      	subs	r3, r2, r3
 80129b6:	b29b      	uxth	r3, r3
 80129b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sa = (s16_t)(pcb->sa + m);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80129c0:	b29a      	uxth	r2, r3
 80129c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80129c4:	4413      	add	r3, r2
 80129c6:	b29b      	uxth	r3, r3
 80129c8:	b21a      	sxth	r2, r3
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80129ce:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80129d2:	2b00      	cmp	r3, #0
 80129d4:	da03      	bge.n	80129de <tcp_receive+0x4a6>
        m = (s16_t) - m;
 80129d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80129d8:	425b      	negs	r3, r3
 80129da:	b29b      	uxth	r3, r3
 80129dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80129de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80129e6:	109b      	asrs	r3, r3, #2
 80129e8:	b21b      	sxth	r3, r3
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	1ad3      	subs	r3, r2, r3
 80129ee:	b29b      	uxth	r3, r3
 80129f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sv = (s16_t)(pcb->sv + m);
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80129f8:	b29a      	uxth	r2, r3
 80129fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80129fc:	4413      	add	r3, r2
 80129fe:	b29b      	uxth	r3, r3
 8012a00:	b21a      	sxth	r2, r3
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012a0c:	10db      	asrs	r3, r3, #3
 8012a0e:	b21b      	sxth	r3, r3
 8012a10:	b29a      	uxth	r2, r3
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012a18:	b29b      	uxth	r3, r3
 8012a1a:	4413      	add	r3, r2
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	b21a      	sxth	r2, r3
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	2200      	movs	r2, #0
 8012a2a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012a2c:	4b32      	ldr	r3, [pc, #200]	; (8012af8 <tcp_receive+0x5c0>)
 8012a2e:	881b      	ldrh	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f000 81c7 	beq.w	8012dc4 <tcp_receive+0x88c>
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	7d1b      	ldrb	r3, [r3, #20]
 8012a3a:	2b06      	cmp	r3, #6
 8012a3c:	f200 81c2 	bhi.w	8012dc4 <tcp_receive+0x88c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a44:	4b2d      	ldr	r3, [pc, #180]	; (8012afc <tcp_receive+0x5c4>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	1ad3      	subs	r3, r2, r3
 8012a4a:	3b01      	subs	r3, #1
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	f2c0 8085 	blt.w	8012b5c <tcp_receive+0x624>
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a56:	4b28      	ldr	r3, [pc, #160]	; (8012af8 <tcp_receive+0x5c0>)
 8012a58:	881b      	ldrh	r3, [r3, #0]
 8012a5a:	4619      	mov	r1, r3
 8012a5c:	4b27      	ldr	r3, [pc, #156]	; (8012afc <tcp_receive+0x5c4>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	440b      	add	r3, r1
 8012a62:	1ad3      	subs	r3, r2, r3
 8012a64:	3301      	adds	r3, #1
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	dc78      	bgt.n	8012b5c <tcp_receive+0x624>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012a6a:	4b25      	ldr	r3, [pc, #148]	; (8012b00 <tcp_receive+0x5c8>)
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	627b      	str	r3, [r7, #36]	; 0x24
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012a74:	4b21      	ldr	r3, [pc, #132]	; (8012afc <tcp_receive+0x5c4>)
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	1ad3      	subs	r3, r2, r3
 8012a7a:	613b      	str	r3, [r7, #16]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012a7c:	4b20      	ldr	r3, [pc, #128]	; (8012b00 <tcp_receive+0x5c8>)
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d106      	bne.n	8012a92 <tcp_receive+0x55a>
 8012a84:	4b1f      	ldr	r3, [pc, #124]	; (8012b04 <tcp_receive+0x5cc>)
 8012a86:	f240 5294 	movw	r2, #1428	; 0x594
 8012a8a:	491f      	ldr	r1, [pc, #124]	; (8012b08 <tcp_receive+0x5d0>)
 8012a8c:	481f      	ldr	r0, [pc, #124]	; (8012b0c <tcp_receive+0x5d4>)
 8012a8e:	f003 f9bd 	bl	8015e0c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012a92:	693b      	ldr	r3, [r7, #16]
 8012a94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012a98:	4293      	cmp	r3, r2
 8012a9a:	d906      	bls.n	8012aaa <tcp_receive+0x572>
 8012a9c:	4b19      	ldr	r3, [pc, #100]	; (8012b04 <tcp_receive+0x5cc>)
 8012a9e:	f240 5295 	movw	r2, #1429	; 0x595
 8012aa2:	491b      	ldr	r1, [pc, #108]	; (8012b10 <tcp_receive+0x5d8>)
 8012aa4:	4819      	ldr	r0, [pc, #100]	; (8012b0c <tcp_receive+0x5d4>)
 8012aa6:	f003 f9b1 	bl	8015e0c <iprintf>
      off = (u16_t)off32;
 8012aaa:	693b      	ldr	r3, [r7, #16]
 8012aac:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012aae:	4b14      	ldr	r3, [pc, #80]	; (8012b00 <tcp_receive+0x5c8>)
 8012ab0:	685b      	ldr	r3, [r3, #4]
 8012ab2:	891b      	ldrh	r3, [r3, #8]
 8012ab4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012ab6:	429a      	cmp	r2, r3
 8012ab8:	d906      	bls.n	8012ac8 <tcp_receive+0x590>
 8012aba:	4b12      	ldr	r3, [pc, #72]	; (8012b04 <tcp_receive+0x5cc>)
 8012abc:	f240 5297 	movw	r2, #1431	; 0x597
 8012ac0:	4914      	ldr	r1, [pc, #80]	; (8012b14 <tcp_receive+0x5dc>)
 8012ac2:	4812      	ldr	r0, [pc, #72]	; (8012b0c <tcp_receive+0x5d4>)
 8012ac4:	f003 f9a2 	bl	8015e0c <iprintf>
      inseg.len -= off;
 8012ac8:	4b0d      	ldr	r3, [pc, #52]	; (8012b00 <tcp_receive+0x5c8>)
 8012aca:	891a      	ldrh	r2, [r3, #8]
 8012acc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ace:	1ad3      	subs	r3, r2, r3
 8012ad0:	b29a      	uxth	r2, r3
 8012ad2:	4b0b      	ldr	r3, [pc, #44]	; (8012b00 <tcp_receive+0x5c8>)
 8012ad4:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012ad6:	4b0a      	ldr	r3, [pc, #40]	; (8012b00 <tcp_receive+0x5c8>)
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	891a      	ldrh	r2, [r3, #8]
 8012adc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ade:	1ad3      	subs	r3, r2, r3
 8012ae0:	81fb      	strh	r3, [r7, #14]
      while (p->len < off) {
 8012ae2:	e027      	b.n	8012b34 <tcp_receive+0x5fc>
 8012ae4:	0801a844 	.word	0x0801a844
 8012ae8:	0801a84c 	.word	0x0801a84c
 8012aec:	240067e0 	.word	0x240067e0
 8012af0:	240067dc 	.word	0x240067dc
 8012af4:	2400a788 	.word	0x2400a788
 8012af8:	240067e2 	.word	0x240067e2
 8012afc:	240067d8 	.word	0x240067d8
 8012b00:	240067b8 	.word	0x240067b8
 8012b04:	0801a4c0 	.word	0x0801a4c0
 8012b08:	0801a854 	.word	0x0801a854
 8012b0c:	0801a550 	.word	0x0801a550
 8012b10:	0801a864 	.word	0x0801a864
 8012b14:	0801a874 	.word	0x0801a874
        off -= p->len;
 8012b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1a:	895b      	ldrh	r3, [r3, #10]
 8012b1c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012b1e:	1ad3      	subs	r3, r2, r3
 8012b20:	847b      	strh	r3, [r7, #34]	; 0x22
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b24:	89fa      	ldrh	r2, [r7, #14]
 8012b26:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	627b      	str	r3, [r7, #36]	; 0x24
      while (p->len < off) {
 8012b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b36:	895b      	ldrh	r3, [r3, #10]
 8012b38:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012b3a:	429a      	cmp	r2, r3
 8012b3c:	d8ec      	bhi.n	8012b18 <tcp_receive+0x5e0>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012b3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b40:	4619      	mov	r1, r3
 8012b42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b44:	f7fc f898 	bl	800ec78 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b4c:	4a94      	ldr	r2, [pc, #592]	; (8012da0 <tcp_receive+0x868>)
 8012b4e:	6013      	str	r3, [r2, #0]
 8012b50:	4b94      	ldr	r3, [pc, #592]	; (8012da4 <tcp_receive+0x86c>)
 8012b52:	68db      	ldr	r3, [r3, #12]
 8012b54:	4a92      	ldr	r2, [pc, #584]	; (8012da0 <tcp_receive+0x868>)
 8012b56:	6812      	ldr	r2, [r2, #0]
 8012b58:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012b5a:	e00d      	b.n	8012b78 <tcp_receive+0x640>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012b5c:	4b90      	ldr	r3, [pc, #576]	; (8012da0 <tcp_receive+0x868>)
 8012b5e:	681a      	ldr	r2, [r3, #0]
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b64:	1ad3      	subs	r3, r2, r3
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	da06      	bge.n	8012b78 <tcp_receive+0x640>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	8b5b      	ldrh	r3, [r3, #26]
 8012b6e:	f043 0302 	orr.w	r3, r3, #2
 8012b72:	b29a      	uxth	r2, r3
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012b78:	4b89      	ldr	r3, [pc, #548]	; (8012da0 <tcp_receive+0x868>)
 8012b7a:	681a      	ldr	r2, [r3, #0]
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b80:	1ad3      	subs	r3, r2, r3
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	f2c0 8106 	blt.w	8012d94 <tcp_receive+0x85c>
 8012b88:	4b85      	ldr	r3, [pc, #532]	; (8012da0 <tcp_receive+0x868>)
 8012b8a:	681a      	ldr	r2, [r3, #0]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b90:	6879      	ldr	r1, [r7, #4]
 8012b92:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012b94:	440b      	add	r3, r1
 8012b96:	1ad3      	subs	r3, r2, r3
 8012b98:	3301      	adds	r3, #1
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	f300 80fa 	bgt.w	8012d94 <tcp_receive+0x85c>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ba4:	4b7e      	ldr	r3, [pc, #504]	; (8012da0 <tcp_receive+0x868>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	429a      	cmp	r2, r3
 8012baa:	f040 80ef 	bne.w	8012d8c <tcp_receive+0x854>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012bae:	4b7d      	ldr	r3, [pc, #500]	; (8012da4 <tcp_receive+0x86c>)
 8012bb0:	891c      	ldrh	r4, [r3, #8]
 8012bb2:	4b7c      	ldr	r3, [pc, #496]	; (8012da4 <tcp_receive+0x86c>)
 8012bb4:	68db      	ldr	r3, [r3, #12]
 8012bb6:	899b      	ldrh	r3, [r3, #12]
 8012bb8:	b29b      	uxth	r3, r3
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7fa fce2 	bl	800d584 <lwip_htons>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	b2db      	uxtb	r3, r3
 8012bc4:	f003 0303 	and.w	r3, r3, #3
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d001      	beq.n	8012bd0 <tcp_receive+0x698>
 8012bcc:	2301      	movs	r3, #1
 8012bce:	e000      	b.n	8012bd2 <tcp_receive+0x69a>
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	4423      	add	r3, r4
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	4b74      	ldr	r3, [pc, #464]	; (8012da8 <tcp_receive+0x870>)
 8012bd8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012bde:	4b72      	ldr	r3, [pc, #456]	; (8012da8 <tcp_receive+0x870>)
 8012be0:	881b      	ldrh	r3, [r3, #0]
 8012be2:	429a      	cmp	r2, r3
 8012be4:	d275      	bcs.n	8012cd2 <tcp_receive+0x79a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012be6:	4b6f      	ldr	r3, [pc, #444]	; (8012da4 <tcp_receive+0x86c>)
 8012be8:	68db      	ldr	r3, [r3, #12]
 8012bea:	899b      	ldrh	r3, [r3, #12]
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f7fa fcc8 	bl	800d584 <lwip_htons>
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	b2db      	uxtb	r3, r3
 8012bf8:	f003 0301 	and.w	r3, r3, #1
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d01f      	beq.n	8012c40 <tcp_receive+0x708>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012c00:	4b68      	ldr	r3, [pc, #416]	; (8012da4 <tcp_receive+0x86c>)
 8012c02:	68db      	ldr	r3, [r3, #12]
 8012c04:	899b      	ldrh	r3, [r3, #12]
 8012c06:	b29b      	uxth	r3, r3
 8012c08:	b21b      	sxth	r3, r3
 8012c0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012c0e:	b21c      	sxth	r4, r3
 8012c10:	4b64      	ldr	r3, [pc, #400]	; (8012da4 <tcp_receive+0x86c>)
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	899b      	ldrh	r3, [r3, #12]
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fa fcb3 	bl	800d584 <lwip_htons>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	b2db      	uxtb	r3, r3
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	f7fa fcaa 	bl	800d584 <lwip_htons>
 8012c30:	4603      	mov	r3, r0
 8012c32:	b21b      	sxth	r3, r3
 8012c34:	4323      	orrs	r3, r4
 8012c36:	b21a      	sxth	r2, r3
 8012c38:	4b5a      	ldr	r3, [pc, #360]	; (8012da4 <tcp_receive+0x86c>)
 8012c3a:	68db      	ldr	r3, [r3, #12]
 8012c3c:	b292      	uxth	r2, r2
 8012c3e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012c44:	4b57      	ldr	r3, [pc, #348]	; (8012da4 <tcp_receive+0x86c>)
 8012c46:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012c48:	4b56      	ldr	r3, [pc, #344]	; (8012da4 <tcp_receive+0x86c>)
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	899b      	ldrh	r3, [r3, #12]
 8012c4e:	b29b      	uxth	r3, r3
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7fa fc97 	bl	800d584 <lwip_htons>
 8012c56:	4603      	mov	r3, r0
 8012c58:	b2db      	uxtb	r3, r3
 8012c5a:	f003 0302 	and.w	r3, r3, #2
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d005      	beq.n	8012c6e <tcp_receive+0x736>
            inseg.len -= 1;
 8012c62:	4b50      	ldr	r3, [pc, #320]	; (8012da4 <tcp_receive+0x86c>)
 8012c64:	891b      	ldrh	r3, [r3, #8]
 8012c66:	3b01      	subs	r3, #1
 8012c68:	b29a      	uxth	r2, r3
 8012c6a:	4b4e      	ldr	r3, [pc, #312]	; (8012da4 <tcp_receive+0x86c>)
 8012c6c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012c6e:	4b4d      	ldr	r3, [pc, #308]	; (8012da4 <tcp_receive+0x86c>)
 8012c70:	685b      	ldr	r3, [r3, #4]
 8012c72:	4a4c      	ldr	r2, [pc, #304]	; (8012da4 <tcp_receive+0x86c>)
 8012c74:	8912      	ldrh	r2, [r2, #8]
 8012c76:	4611      	mov	r1, r2
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7fb fefd 	bl	800ea78 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012c7e:	4b49      	ldr	r3, [pc, #292]	; (8012da4 <tcp_receive+0x86c>)
 8012c80:	891c      	ldrh	r4, [r3, #8]
 8012c82:	4b48      	ldr	r3, [pc, #288]	; (8012da4 <tcp_receive+0x86c>)
 8012c84:	68db      	ldr	r3, [r3, #12]
 8012c86:	899b      	ldrh	r3, [r3, #12]
 8012c88:	b29b      	uxth	r3, r3
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7fa fc7a 	bl	800d584 <lwip_htons>
 8012c90:	4603      	mov	r3, r0
 8012c92:	b2db      	uxtb	r3, r3
 8012c94:	f003 0303 	and.w	r3, r3, #3
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d001      	beq.n	8012ca0 <tcp_receive+0x768>
 8012c9c:	2301      	movs	r3, #1
 8012c9e:	e000      	b.n	8012ca2 <tcp_receive+0x76a>
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	4423      	add	r3, r4
 8012ca4:	b29a      	uxth	r2, r3
 8012ca6:	4b40      	ldr	r3, [pc, #256]	; (8012da8 <tcp_receive+0x870>)
 8012ca8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012caa:	4b3f      	ldr	r3, [pc, #252]	; (8012da8 <tcp_receive+0x870>)
 8012cac:	881b      	ldrh	r3, [r3, #0]
 8012cae:	461a      	mov	r2, r3
 8012cb0:	4b3b      	ldr	r3, [pc, #236]	; (8012da0 <tcp_receive+0x868>)
 8012cb2:	681b      	ldr	r3, [r3, #0]
 8012cb4:	441a      	add	r2, r3
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cba:	6879      	ldr	r1, [r7, #4]
 8012cbc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012cbe:	440b      	add	r3, r1
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	d006      	beq.n	8012cd2 <tcp_receive+0x79a>
 8012cc4:	4b39      	ldr	r3, [pc, #228]	; (8012dac <tcp_receive+0x874>)
 8012cc6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012cca:	4939      	ldr	r1, [pc, #228]	; (8012db0 <tcp_receive+0x878>)
 8012ccc:	4839      	ldr	r0, [pc, #228]	; (8012db4 <tcp_receive+0x87c>)
 8012cce:	f003 f89d 	bl	8015e0c <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012cd2:	4b35      	ldr	r3, [pc, #212]	; (8012da8 <tcp_receive+0x870>)
 8012cd4:	881b      	ldrh	r3, [r3, #0]
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	4b31      	ldr	r3, [pc, #196]	; (8012da0 <tcp_receive+0x868>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	441a      	add	r2, r3
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012ce6:	4b30      	ldr	r3, [pc, #192]	; (8012da8 <tcp_receive+0x870>)
 8012ce8:	881b      	ldrh	r3, [r3, #0]
 8012cea:	429a      	cmp	r2, r3
 8012cec:	d206      	bcs.n	8012cfc <tcp_receive+0x7c4>
 8012cee:	4b2f      	ldr	r3, [pc, #188]	; (8012dac <tcp_receive+0x874>)
 8012cf0:	f240 6207 	movw	r2, #1543	; 0x607
 8012cf4:	4930      	ldr	r1, [pc, #192]	; (8012db8 <tcp_receive+0x880>)
 8012cf6:	482f      	ldr	r0, [pc, #188]	; (8012db4 <tcp_receive+0x87c>)
 8012cf8:	f003 f888 	bl	8015e0c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012d00:	4b29      	ldr	r3, [pc, #164]	; (8012da8 <tcp_receive+0x870>)
 8012d02:	881b      	ldrh	r3, [r3, #0]
 8012d04:	1ad3      	subs	r3, r2, r3
 8012d06:	b29a      	uxth	r2, r3
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012d0c:	6878      	ldr	r0, [r7, #4]
 8012d0e:	f7fc ff8d 	bl	800fc2c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012d12:	4b24      	ldr	r3, [pc, #144]	; (8012da4 <tcp_receive+0x86c>)
 8012d14:	685b      	ldr	r3, [r3, #4]
 8012d16:	891b      	ldrh	r3, [r3, #8]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d006      	beq.n	8012d2a <tcp_receive+0x7f2>
          recv_data = inseg.p;
 8012d1c:	4b21      	ldr	r3, [pc, #132]	; (8012da4 <tcp_receive+0x86c>)
 8012d1e:	685b      	ldr	r3, [r3, #4]
 8012d20:	4a26      	ldr	r2, [pc, #152]	; (8012dbc <tcp_receive+0x884>)
 8012d22:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012d24:	4b1f      	ldr	r3, [pc, #124]	; (8012da4 <tcp_receive+0x86c>)
 8012d26:	2200      	movs	r2, #0
 8012d28:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012d2a:	4b1e      	ldr	r3, [pc, #120]	; (8012da4 <tcp_receive+0x86c>)
 8012d2c:	68db      	ldr	r3, [r3, #12]
 8012d2e:	899b      	ldrh	r3, [r3, #12]
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7fa fc26 	bl	800d584 <lwip_htons>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	b2db      	uxtb	r3, r3
 8012d3c:	f003 0301 	and.w	r3, r3, #1
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d006      	beq.n	8012d52 <tcp_receive+0x81a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012d44:	4b1e      	ldr	r3, [pc, #120]	; (8012dc0 <tcp_receive+0x888>)
 8012d46:	781b      	ldrb	r3, [r3, #0]
 8012d48:	f043 0320 	orr.w	r3, r3, #32
 8012d4c:	b2da      	uxtb	r2, r3
 8012d4e:	4b1c      	ldr	r3, [pc, #112]	; (8012dc0 <tcp_receive+0x888>)
 8012d50:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	8b5b      	ldrh	r3, [r3, #26]
 8012d56:	f003 0301 	and.w	r3, r3, #1
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d00e      	beq.n	8012d7c <tcp_receive+0x844>
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	8b5b      	ldrh	r3, [r3, #26]
 8012d62:	f023 0301 	bic.w	r3, r3, #1
 8012d66:	b29a      	uxth	r2, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	835a      	strh	r2, [r3, #26]
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	8b5b      	ldrh	r3, [r3, #26]
 8012d70:	f043 0302 	orr.w	r3, r3, #2
 8012d74:	b29a      	uxth	r2, r3
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012d7a:	e00f      	b.n	8012d9c <tcp_receive+0x864>
        tcp_ack(pcb);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	8b5b      	ldrh	r3, [r3, #26]
 8012d80:	f043 0301 	orr.w	r3, r3, #1
 8012d84:	b29a      	uxth	r2, r3
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012d8a:	e007      	b.n	8012d9c <tcp_receive+0x864>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f001 fe93 	bl	8014ab8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8012d92:	e003      	b.n	8012d9c <tcp_receive+0x864>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f001 fe8f 	bl	8014ab8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012d9a:	e02d      	b.n	8012df8 <tcp_receive+0x8c0>
 8012d9c:	e02c      	b.n	8012df8 <tcp_receive+0x8c0>
 8012d9e:	bf00      	nop
 8012da0:	240067d8 	.word	0x240067d8
 8012da4:	240067b8 	.word	0x240067b8
 8012da8:	240067e2 	.word	0x240067e2
 8012dac:	0801a4c0 	.word	0x0801a4c0
 8012db0:	0801a884 	.word	0x0801a884
 8012db4:	0801a550 	.word	0x0801a550
 8012db8:	0801a8bc 	.word	0x0801a8bc
 8012dbc:	240067e8 	.word	0x240067e8
 8012dc0:	240067e5 	.word	0x240067e5
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8012dc4:	4b0e      	ldr	r3, [pc, #56]	; (8012e00 <tcp_receive+0x8c8>)
 8012dc6:	681a      	ldr	r2, [r3, #0]
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dcc:	1ad3      	subs	r3, r2, r3
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	db0a      	blt.n	8012de8 <tcp_receive+0x8b0>
 8012dd2:	4b0b      	ldr	r3, [pc, #44]	; (8012e00 <tcp_receive+0x8c8>)
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dda:	6879      	ldr	r1, [r7, #4]
 8012ddc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012dde:	440b      	add	r3, r1
 8012de0:	1ad3      	subs	r3, r2, r3
 8012de2:	3301      	adds	r3, #1
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	dd07      	ble.n	8012df8 <tcp_receive+0x8c0>
      tcp_ack_now(pcb);
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	8b5b      	ldrh	r3, [r3, #26]
 8012dec:	f043 0302 	orr.w	r3, r3, #2
 8012df0:	b29a      	uxth	r2, r3
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8012df6:	e7ff      	b.n	8012df8 <tcp_receive+0x8c0>
 8012df8:	bf00      	nop
 8012dfa:	3734      	adds	r7, #52	; 0x34
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	bd90      	pop	{r4, r7, pc}
 8012e00:	240067d8 	.word	0x240067d8

08012e04 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8012e04:	b480      	push	{r7}
 8012e06:	b083      	sub	sp, #12
 8012e08:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8012e0a:	4b15      	ldr	r3, [pc, #84]	; (8012e60 <tcp_get_next_optbyte+0x5c>)
 8012e0c:	881b      	ldrh	r3, [r3, #0]
 8012e0e:	1c5a      	adds	r2, r3, #1
 8012e10:	b291      	uxth	r1, r2
 8012e12:	4a13      	ldr	r2, [pc, #76]	; (8012e60 <tcp_get_next_optbyte+0x5c>)
 8012e14:	8011      	strh	r1, [r2, #0]
 8012e16:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8012e18:	4b12      	ldr	r3, [pc, #72]	; (8012e64 <tcp_get_next_optbyte+0x60>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d004      	beq.n	8012e2a <tcp_get_next_optbyte+0x26>
 8012e20:	4b11      	ldr	r3, [pc, #68]	; (8012e68 <tcp_get_next_optbyte+0x64>)
 8012e22:	881b      	ldrh	r3, [r3, #0]
 8012e24:	88fa      	ldrh	r2, [r7, #6]
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d208      	bcs.n	8012e3c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8012e2a:	4b10      	ldr	r3, [pc, #64]	; (8012e6c <tcp_get_next_optbyte+0x68>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	3314      	adds	r3, #20
 8012e30:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8012e32:	88fb      	ldrh	r3, [r7, #6]
 8012e34:	683a      	ldr	r2, [r7, #0]
 8012e36:	4413      	add	r3, r2
 8012e38:	781b      	ldrb	r3, [r3, #0]
 8012e3a:	e00b      	b.n	8012e54 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8012e3c:	88fb      	ldrh	r3, [r7, #6]
 8012e3e:	b2da      	uxtb	r2, r3
 8012e40:	4b09      	ldr	r3, [pc, #36]	; (8012e68 <tcp_get_next_optbyte+0x64>)
 8012e42:	881b      	ldrh	r3, [r3, #0]
 8012e44:	b2db      	uxtb	r3, r3
 8012e46:	1ad3      	subs	r3, r2, r3
 8012e48:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8012e4a:	4b06      	ldr	r3, [pc, #24]	; (8012e64 <tcp_get_next_optbyte+0x60>)
 8012e4c:	681a      	ldr	r2, [r3, #0]
 8012e4e:	797b      	ldrb	r3, [r7, #5]
 8012e50:	4413      	add	r3, r2
 8012e52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	370c      	adds	r7, #12
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e5e:	4770      	bx	lr
 8012e60:	240067d4 	.word	0x240067d4
 8012e64:	240067d0 	.word	0x240067d0
 8012e68:	240067ce 	.word	0x240067ce
 8012e6c:	240067c8 	.word	0x240067c8

08012e70 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b084      	sub	sp, #16
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d106      	bne.n	8012e8c <tcp_parseopt+0x1c>
 8012e7e:	4b32      	ldr	r3, [pc, #200]	; (8012f48 <tcp_parseopt+0xd8>)
 8012e80:	f240 727d 	movw	r2, #1917	; 0x77d
 8012e84:	4931      	ldr	r1, [pc, #196]	; (8012f4c <tcp_parseopt+0xdc>)
 8012e86:	4832      	ldr	r0, [pc, #200]	; (8012f50 <tcp_parseopt+0xe0>)
 8012e88:	f002 ffc0 	bl	8015e0c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012e8c:	4b31      	ldr	r3, [pc, #196]	; (8012f54 <tcp_parseopt+0xe4>)
 8012e8e:	881b      	ldrh	r3, [r3, #0]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d056      	beq.n	8012f42 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012e94:	4b30      	ldr	r3, [pc, #192]	; (8012f58 <tcp_parseopt+0xe8>)
 8012e96:	2200      	movs	r2, #0
 8012e98:	801a      	strh	r2, [r3, #0]
 8012e9a:	e046      	b.n	8012f2a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8012e9c:	f7ff ffb2 	bl	8012e04 <tcp_get_next_optbyte>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8012ea4:	7bfb      	ldrb	r3, [r7, #15]
 8012ea6:	2b02      	cmp	r3, #2
 8012ea8:	d006      	beq.n	8012eb8 <tcp_parseopt+0x48>
 8012eaa:	2b02      	cmp	r3, #2
 8012eac:	dc2c      	bgt.n	8012f08 <tcp_parseopt+0x98>
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d042      	beq.n	8012f38 <tcp_parseopt+0xc8>
 8012eb2:	2b01      	cmp	r3, #1
 8012eb4:	d128      	bne.n	8012f08 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8012eb6:	e038      	b.n	8012f2a <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012eb8:	f7ff ffa4 	bl	8012e04 <tcp_get_next_optbyte>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	2b04      	cmp	r3, #4
 8012ec0:	d13c      	bne.n	8012f3c <tcp_parseopt+0xcc>
 8012ec2:	4b25      	ldr	r3, [pc, #148]	; (8012f58 <tcp_parseopt+0xe8>)
 8012ec4:	881b      	ldrh	r3, [r3, #0]
 8012ec6:	3301      	adds	r3, #1
 8012ec8:	4a22      	ldr	r2, [pc, #136]	; (8012f54 <tcp_parseopt+0xe4>)
 8012eca:	8812      	ldrh	r2, [r2, #0]
 8012ecc:	4293      	cmp	r3, r2
 8012ece:	da35      	bge.n	8012f3c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8012ed0:	f7ff ff98 	bl	8012e04 <tcp_get_next_optbyte>
 8012ed4:	4603      	mov	r3, r0
 8012ed6:	b29b      	uxth	r3, r3
 8012ed8:	021b      	lsls	r3, r3, #8
 8012eda:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8012edc:	f7ff ff92 	bl	8012e04 <tcp_get_next_optbyte>
 8012ee0:	4603      	mov	r3, r0
 8012ee2:	b29a      	uxth	r2, r3
 8012ee4:	89bb      	ldrh	r3, [r7, #12]
 8012ee6:	4313      	orrs	r3, r2
 8012ee8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8012eea:	89bb      	ldrh	r3, [r7, #12]
 8012eec:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8012ef0:	4293      	cmp	r3, r2
 8012ef2:	d804      	bhi.n	8012efe <tcp_parseopt+0x8e>
 8012ef4:	89bb      	ldrh	r3, [r7, #12]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d001      	beq.n	8012efe <tcp_parseopt+0x8e>
 8012efa:	89ba      	ldrh	r2, [r7, #12]
 8012efc:	e001      	b.n	8012f02 <tcp_parseopt+0x92>
 8012efe:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8012f06:	e010      	b.n	8012f2a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8012f08:	f7ff ff7c 	bl	8012e04 <tcp_get_next_optbyte>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8012f10:	7afb      	ldrb	r3, [r7, #11]
 8012f12:	2b01      	cmp	r3, #1
 8012f14:	d914      	bls.n	8012f40 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012f16:	7afb      	ldrb	r3, [r7, #11]
 8012f18:	b29a      	uxth	r2, r3
 8012f1a:	4b0f      	ldr	r3, [pc, #60]	; (8012f58 <tcp_parseopt+0xe8>)
 8012f1c:	881b      	ldrh	r3, [r3, #0]
 8012f1e:	4413      	add	r3, r2
 8012f20:	b29b      	uxth	r3, r3
 8012f22:	3b02      	subs	r3, #2
 8012f24:	b29a      	uxth	r2, r3
 8012f26:	4b0c      	ldr	r3, [pc, #48]	; (8012f58 <tcp_parseopt+0xe8>)
 8012f28:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8012f2a:	4b0b      	ldr	r3, [pc, #44]	; (8012f58 <tcp_parseopt+0xe8>)
 8012f2c:	881a      	ldrh	r2, [r3, #0]
 8012f2e:	4b09      	ldr	r3, [pc, #36]	; (8012f54 <tcp_parseopt+0xe4>)
 8012f30:	881b      	ldrh	r3, [r3, #0]
 8012f32:	429a      	cmp	r2, r3
 8012f34:	d3b2      	bcc.n	8012e9c <tcp_parseopt+0x2c>
 8012f36:	e004      	b.n	8012f42 <tcp_parseopt+0xd2>
          return;
 8012f38:	bf00      	nop
 8012f3a:	e002      	b.n	8012f42 <tcp_parseopt+0xd2>
            return;
 8012f3c:	bf00      	nop
 8012f3e:	e000      	b.n	8012f42 <tcp_parseopt+0xd2>
            return;
 8012f40:	bf00      	nop
      }
    }
  }
}
 8012f42:	3710      	adds	r7, #16
 8012f44:	46bd      	mov	sp, r7
 8012f46:	bd80      	pop	{r7, pc}
 8012f48:	0801a4c0 	.word	0x0801a4c0
 8012f4c:	0801a8dc 	.word	0x0801a8dc
 8012f50:	0801a550 	.word	0x0801a550
 8012f54:	240067cc 	.word	0x240067cc
 8012f58:	240067d4 	.word	0x240067d4

08012f5c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012f5c:	b480      	push	{r7}
 8012f5e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8012f60:	4b05      	ldr	r3, [pc, #20]	; (8012f78 <tcp_trigger_input_pcb_close+0x1c>)
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	f043 0310 	orr.w	r3, r3, #16
 8012f68:	b2da      	uxtb	r2, r3
 8012f6a:	4b03      	ldr	r3, [pc, #12]	; (8012f78 <tcp_trigger_input_pcb_close+0x1c>)
 8012f6c:	701a      	strb	r2, [r3, #0]
}
 8012f6e:	bf00      	nop
 8012f70:	46bd      	mov	sp, r7
 8012f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f76:	4770      	bx	lr
 8012f78:	240067e5 	.word	0x240067e5

08012f7c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b084      	sub	sp, #16
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	60b9      	str	r1, [r7, #8]
 8012f86:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d00a      	beq.n	8012fa4 <tcp_route+0x28>
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	7a1b      	ldrb	r3, [r3, #8]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d006      	beq.n	8012fa4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	7a1b      	ldrb	r3, [r3, #8]
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	f7fb fbc0 	bl	800e720 <netif_get_by_index>
 8012fa0:	4603      	mov	r3, r0
 8012fa2:	e003      	b.n	8012fac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8012fa4:	6878      	ldr	r0, [r7, #4]
 8012fa6:	f7f9 f9dd 	bl	800c364 <ip4_route>
 8012faa:	4603      	mov	r3, r0
  }
}
 8012fac:	4618      	mov	r0, r3
 8012fae:	3710      	adds	r7, #16
 8012fb0:	46bd      	mov	sp, r7
 8012fb2:	bd80      	pop	{r7, pc}

08012fb4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8012fb4:	b590      	push	{r4, r7, lr}
 8012fb6:	b087      	sub	sp, #28
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	60f8      	str	r0, [r7, #12]
 8012fbc:	60b9      	str	r1, [r7, #8]
 8012fbe:	603b      	str	r3, [r7, #0]
 8012fc0:	4613      	mov	r3, r2
 8012fc2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d105      	bne.n	8012fd6 <tcp_create_segment+0x22>
 8012fca:	4b44      	ldr	r3, [pc, #272]	; (80130dc <tcp_create_segment+0x128>)
 8012fcc:	22a3      	movs	r2, #163	; 0xa3
 8012fce:	4944      	ldr	r1, [pc, #272]	; (80130e0 <tcp_create_segment+0x12c>)
 8012fd0:	4844      	ldr	r0, [pc, #272]	; (80130e4 <tcp_create_segment+0x130>)
 8012fd2:	f002 ff1b 	bl	8015e0c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d105      	bne.n	8012fe8 <tcp_create_segment+0x34>
 8012fdc:	4b3f      	ldr	r3, [pc, #252]	; (80130dc <tcp_create_segment+0x128>)
 8012fde:	22a4      	movs	r2, #164	; 0xa4
 8012fe0:	4941      	ldr	r1, [pc, #260]	; (80130e8 <tcp_create_segment+0x134>)
 8012fe2:	4840      	ldr	r0, [pc, #256]	; (80130e4 <tcp_create_segment+0x130>)
 8012fe4:	f002 ff12 	bl	8015e0c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012fe8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012fec:	009b      	lsls	r3, r3, #2
 8012fee:	b2db      	uxtb	r3, r3
 8012ff0:	f003 0304 	and.w	r3, r3, #4
 8012ff4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8012ff6:	2003      	movs	r0, #3
 8012ff8:	f7fb f806 	bl	800e008 <memp_malloc>
 8012ffc:	6138      	str	r0, [r7, #16]
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d104      	bne.n	801300e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013004:	68b8      	ldr	r0, [r7, #8]
 8013006:	f7fb febd 	bl	800ed84 <pbuf_free>
    return NULL;
 801300a:	2300      	movs	r3, #0
 801300c:	e061      	b.n	80130d2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801300e:	693b      	ldr	r3, [r7, #16]
 8013010:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013014:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	2200      	movs	r2, #0
 801301a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801301c:	693b      	ldr	r3, [r7, #16]
 801301e:	68ba      	ldr	r2, [r7, #8]
 8013020:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013022:	68bb      	ldr	r3, [r7, #8]
 8013024:	891a      	ldrh	r2, [r3, #8]
 8013026:	7dfb      	ldrb	r3, [r7, #23]
 8013028:	b29b      	uxth	r3, r3
 801302a:	429a      	cmp	r2, r3
 801302c:	d205      	bcs.n	801303a <tcp_create_segment+0x86>
 801302e:	4b2b      	ldr	r3, [pc, #172]	; (80130dc <tcp_create_segment+0x128>)
 8013030:	22b0      	movs	r2, #176	; 0xb0
 8013032:	492e      	ldr	r1, [pc, #184]	; (80130ec <tcp_create_segment+0x138>)
 8013034:	482b      	ldr	r0, [pc, #172]	; (80130e4 <tcp_create_segment+0x130>)
 8013036:	f002 fee9 	bl	8015e0c <iprintf>
  seg->len = p->tot_len - optlen;
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	891a      	ldrh	r2, [r3, #8]
 801303e:	7dfb      	ldrb	r3, [r7, #23]
 8013040:	b29b      	uxth	r3, r3
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	b29a      	uxth	r2, r3
 8013046:	693b      	ldr	r3, [r7, #16]
 8013048:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801304a:	2114      	movs	r1, #20
 801304c:	68b8      	ldr	r0, [r7, #8]
 801304e:	f7fb fe03 	bl	800ec58 <pbuf_add_header>
 8013052:	4603      	mov	r3, r0
 8013054:	2b00      	cmp	r3, #0
 8013056:	d004      	beq.n	8013062 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013058:	6938      	ldr	r0, [r7, #16]
 801305a:	f7fd fc12 	bl	8010882 <tcp_seg_free>
    return NULL;
 801305e:	2300      	movs	r3, #0
 8013060:	e037      	b.n	80130d2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	685b      	ldr	r3, [r3, #4]
 8013066:	685a      	ldr	r2, [r3, #4]
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	8ada      	ldrh	r2, [r3, #22]
 8013070:	693b      	ldr	r3, [r7, #16]
 8013072:	68dc      	ldr	r4, [r3, #12]
 8013074:	4610      	mov	r0, r2
 8013076:	f7fa fa85 	bl	800d584 <lwip_htons>
 801307a:	4603      	mov	r3, r0
 801307c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	8b1a      	ldrh	r2, [r3, #24]
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	68dc      	ldr	r4, [r3, #12]
 8013086:	4610      	mov	r0, r2
 8013088:	f7fa fa7c 	bl	800d584 <lwip_htons>
 801308c:	4603      	mov	r3, r0
 801308e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013090:	693b      	ldr	r3, [r7, #16]
 8013092:	68dc      	ldr	r4, [r3, #12]
 8013094:	6838      	ldr	r0, [r7, #0]
 8013096:	f7fa fa8a 	bl	800d5ae <lwip_htonl>
 801309a:	4603      	mov	r3, r0
 801309c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801309e:	7dfb      	ldrb	r3, [r7, #23]
 80130a0:	089b      	lsrs	r3, r3, #2
 80130a2:	b2db      	uxtb	r3, r3
 80130a4:	b29b      	uxth	r3, r3
 80130a6:	3305      	adds	r3, #5
 80130a8:	b29b      	uxth	r3, r3
 80130aa:	031b      	lsls	r3, r3, #12
 80130ac:	b29a      	uxth	r2, r3
 80130ae:	79fb      	ldrb	r3, [r7, #7]
 80130b0:	b29b      	uxth	r3, r3
 80130b2:	4313      	orrs	r3, r2
 80130b4:	b29a      	uxth	r2, r3
 80130b6:	693b      	ldr	r3, [r7, #16]
 80130b8:	68dc      	ldr	r4, [r3, #12]
 80130ba:	4610      	mov	r0, r2
 80130bc:	f7fa fa62 	bl	800d584 <lwip_htons>
 80130c0:	4603      	mov	r3, r0
 80130c2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80130c4:	693b      	ldr	r3, [r7, #16]
 80130c6:	68db      	ldr	r3, [r3, #12]
 80130c8:	2200      	movs	r2, #0
 80130ca:	749a      	strb	r2, [r3, #18]
 80130cc:	2200      	movs	r2, #0
 80130ce:	74da      	strb	r2, [r3, #19]
  return seg;
 80130d0:	693b      	ldr	r3, [r7, #16]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	371c      	adds	r7, #28
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd90      	pop	{r4, r7, pc}
 80130da:	bf00      	nop
 80130dc:	0801a8f8 	.word	0x0801a8f8
 80130e0:	0801a970 	.word	0x0801a970
 80130e4:	0801a990 	.word	0x0801a990
 80130e8:	0801a9b8 	.word	0x0801a9b8
 80130ec:	0801a9dc 	.word	0x0801a9dc

080130f0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b086      	sub	sp, #24
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	607b      	str	r3, [r7, #4]
 80130f8:	4603      	mov	r3, r0
 80130fa:	73fb      	strb	r3, [r7, #15]
 80130fc:	460b      	mov	r3, r1
 80130fe:	81bb      	strh	r3, [r7, #12]
 8013100:	4613      	mov	r3, r2
 8013102:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013104:	89bb      	ldrh	r3, [r7, #12]
 8013106:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d105      	bne.n	801311a <tcp_pbuf_prealloc+0x2a>
 801310e:	4b30      	ldr	r3, [pc, #192]	; (80131d0 <tcp_pbuf_prealloc+0xe0>)
 8013110:	22e8      	movs	r2, #232	; 0xe8
 8013112:	4930      	ldr	r1, [pc, #192]	; (80131d4 <tcp_pbuf_prealloc+0xe4>)
 8013114:	4830      	ldr	r0, [pc, #192]	; (80131d8 <tcp_pbuf_prealloc+0xe8>)
 8013116:	f002 fe79 	bl	8015e0c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801311a:	6a3b      	ldr	r3, [r7, #32]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d105      	bne.n	801312c <tcp_pbuf_prealloc+0x3c>
 8013120:	4b2b      	ldr	r3, [pc, #172]	; (80131d0 <tcp_pbuf_prealloc+0xe0>)
 8013122:	22e9      	movs	r2, #233	; 0xe9
 8013124:	492d      	ldr	r1, [pc, #180]	; (80131dc <tcp_pbuf_prealloc+0xec>)
 8013126:	482c      	ldr	r0, [pc, #176]	; (80131d8 <tcp_pbuf_prealloc+0xe8>)
 8013128:	f002 fe70 	bl	8015e0c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801312c:	89ba      	ldrh	r2, [r7, #12]
 801312e:	897b      	ldrh	r3, [r7, #10]
 8013130:	429a      	cmp	r2, r3
 8013132:	d221      	bcs.n	8013178 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013134:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013138:	f003 0302 	and.w	r3, r3, #2
 801313c:	2b00      	cmp	r3, #0
 801313e:	d111      	bne.n	8013164 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8013140:	6a3b      	ldr	r3, [r7, #32]
 8013142:	8b5b      	ldrh	r3, [r3, #26]
 8013144:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8013148:	2b00      	cmp	r3, #0
 801314a:	d115      	bne.n	8013178 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801314c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013150:	2b00      	cmp	r3, #0
 8013152:	d007      	beq.n	8013164 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8013154:	6a3b      	ldr	r3, [r7, #32]
 8013156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8013158:	2b00      	cmp	r3, #0
 801315a:	d103      	bne.n	8013164 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801315c:	6a3b      	ldr	r3, [r7, #32]
 801315e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8013160:	2b00      	cmp	r3, #0
 8013162:	d009      	beq.n	8013178 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8013164:	89bb      	ldrh	r3, [r7, #12]
 8013166:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 801316a:	f023 0203 	bic.w	r2, r3, #3
 801316e:	897b      	ldrh	r3, [r7, #10]
 8013170:	4293      	cmp	r3, r2
 8013172:	bf28      	it	cs
 8013174:	4613      	movcs	r3, r2
 8013176:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8013178:	8af9      	ldrh	r1, [r7, #22]
 801317a:	7bfb      	ldrb	r3, [r7, #15]
 801317c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013180:	4618      	mov	r0, r3
 8013182:	f7fb fb1d 	bl	800e7c0 <pbuf_alloc>
 8013186:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013188:	693b      	ldr	r3, [r7, #16]
 801318a:	2b00      	cmp	r3, #0
 801318c:	d101      	bne.n	8013192 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801318e:	2300      	movs	r3, #0
 8013190:	e019      	b.n	80131c6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	681b      	ldr	r3, [r3, #0]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d006      	beq.n	80131a8 <tcp_pbuf_prealloc+0xb8>
 801319a:	4b0d      	ldr	r3, [pc, #52]	; (80131d0 <tcp_pbuf_prealloc+0xe0>)
 801319c:	f240 120b 	movw	r2, #267	; 0x10b
 80131a0:	490f      	ldr	r1, [pc, #60]	; (80131e0 <tcp_pbuf_prealloc+0xf0>)
 80131a2:	480d      	ldr	r0, [pc, #52]	; (80131d8 <tcp_pbuf_prealloc+0xe8>)
 80131a4:	f002 fe32 	bl	8015e0c <iprintf>
  *oversize = p->len - length;
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	895a      	ldrh	r2, [r3, #10]
 80131ac:	89bb      	ldrh	r3, [r7, #12]
 80131ae:	1ad3      	subs	r3, r2, r3
 80131b0:	b29a      	uxth	r2, r3
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80131b6:	693b      	ldr	r3, [r7, #16]
 80131b8:	89ba      	ldrh	r2, [r7, #12]
 80131ba:	811a      	strh	r2, [r3, #8]
 80131bc:	693b      	ldr	r3, [r7, #16]
 80131be:	891a      	ldrh	r2, [r3, #8]
 80131c0:	693b      	ldr	r3, [r7, #16]
 80131c2:	815a      	strh	r2, [r3, #10]
  return p;
 80131c4:	693b      	ldr	r3, [r7, #16]
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	3718      	adds	r7, #24
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}
 80131ce:	bf00      	nop
 80131d0:	0801a8f8 	.word	0x0801a8f8
 80131d4:	0801a9f4 	.word	0x0801a9f4
 80131d8:	0801a990 	.word	0x0801a990
 80131dc:	0801aa18 	.word	0x0801aa18
 80131e0:	0801aa38 	.word	0x0801aa38

080131e4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b082      	sub	sp, #8
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	460b      	mov	r3, r1
 80131ee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d106      	bne.n	8013204 <tcp_write_checks+0x20>
 80131f6:	4b33      	ldr	r3, [pc, #204]	; (80132c4 <tcp_write_checks+0xe0>)
 80131f8:	f240 1233 	movw	r2, #307	; 0x133
 80131fc:	4932      	ldr	r1, [pc, #200]	; (80132c8 <tcp_write_checks+0xe4>)
 80131fe:	4833      	ldr	r0, [pc, #204]	; (80132cc <tcp_write_checks+0xe8>)
 8013200:	f002 fe04 	bl	8015e0c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013204:	687b      	ldr	r3, [r7, #4]
 8013206:	7d1b      	ldrb	r3, [r3, #20]
 8013208:	2b04      	cmp	r3, #4
 801320a:	d00e      	beq.n	801322a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013210:	2b07      	cmp	r3, #7
 8013212:	d00a      	beq.n	801322a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013218:	2b02      	cmp	r3, #2
 801321a:	d006      	beq.n	801322a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013220:	2b03      	cmp	r3, #3
 8013222:	d002      	beq.n	801322a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013224:	f06f 030a 	mvn.w	r3, #10
 8013228:	e048      	b.n	80132bc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801322a:	887b      	ldrh	r3, [r7, #2]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d101      	bne.n	8013234 <tcp_write_checks+0x50>
    return ERR_OK;
 8013230:	2300      	movs	r3, #0
 8013232:	e043      	b.n	80132bc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801323a:	887a      	ldrh	r2, [r7, #2]
 801323c:	429a      	cmp	r2, r3
 801323e:	d909      	bls.n	8013254 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	8b5b      	ldrh	r3, [r3, #26]
 8013244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013248:	b29a      	uxth	r2, r3
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801324e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013252:	e033      	b.n	80132bc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801325a:	2b07      	cmp	r3, #7
 801325c:	d909      	bls.n	8013272 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	8b5b      	ldrh	r3, [r3, #26]
 8013262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013266:	b29a      	uxth	r2, r3
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801326c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013270:	e024      	b.n	80132bc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013278:	2b00      	cmp	r3, #0
 801327a:	d00f      	beq.n	801329c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013280:	2b00      	cmp	r3, #0
 8013282:	d11a      	bne.n	80132ba <tcp_write_checks+0xd6>
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013288:	2b00      	cmp	r3, #0
 801328a:	d116      	bne.n	80132ba <tcp_write_checks+0xd6>
 801328c:	4b0d      	ldr	r3, [pc, #52]	; (80132c4 <tcp_write_checks+0xe0>)
 801328e:	f240 1255 	movw	r2, #341	; 0x155
 8013292:	490f      	ldr	r1, [pc, #60]	; (80132d0 <tcp_write_checks+0xec>)
 8013294:	480d      	ldr	r0, [pc, #52]	; (80132cc <tcp_write_checks+0xe8>)
 8013296:	f002 fdb9 	bl	8015e0c <iprintf>
 801329a:	e00e      	b.n	80132ba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d103      	bne.n	80132ac <tcp_write_checks+0xc8>
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d006      	beq.n	80132ba <tcp_write_checks+0xd6>
 80132ac:	4b05      	ldr	r3, [pc, #20]	; (80132c4 <tcp_write_checks+0xe0>)
 80132ae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80132b2:	4908      	ldr	r1, [pc, #32]	; (80132d4 <tcp_write_checks+0xf0>)
 80132b4:	4805      	ldr	r0, [pc, #20]	; (80132cc <tcp_write_checks+0xe8>)
 80132b6:	f002 fda9 	bl	8015e0c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80132ba:	2300      	movs	r3, #0
}
 80132bc:	4618      	mov	r0, r3
 80132be:	3708      	adds	r7, #8
 80132c0:	46bd      	mov	sp, r7
 80132c2:	bd80      	pop	{r7, pc}
 80132c4:	0801a8f8 	.word	0x0801a8f8
 80132c8:	0801aa4c 	.word	0x0801aa4c
 80132cc:	0801a990 	.word	0x0801a990
 80132d0:	0801aa6c 	.word	0x0801aa6c
 80132d4:	0801aaa8 	.word	0x0801aaa8

080132d8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80132d8:	b590      	push	{r4, r7, lr}
 80132da:	b09b      	sub	sp, #108	; 0x6c
 80132dc:	af04      	add	r7, sp, #16
 80132de:	60f8      	str	r0, [r7, #12]
 80132e0:	60b9      	str	r1, [r7, #8]
 80132e2:	4611      	mov	r1, r2
 80132e4:	461a      	mov	r2, r3
 80132e6:	460b      	mov	r3, r1
 80132e8:	80fb      	strh	r3, [r7, #6]
 80132ea:	4613      	mov	r3, r2
 80132ec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80132ee:	2300      	movs	r3, #0
 80132f0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80132f2:	2300      	movs	r3, #0
 80132f4:	653b      	str	r3, [r7, #80]	; 0x50
 80132f6:	2300      	movs	r3, #0
 80132f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80132fa:	2300      	movs	r3, #0
 80132fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80132fe:	2300      	movs	r3, #0
 8013300:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013302:	2300      	movs	r3, #0
 8013304:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013308:	2300      	movs	r3, #0
 801330a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801330e:	2300      	movs	r3, #0
 8013310:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013312:	2300      	movs	r3, #0
 8013314:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013316:	2300      	movs	r3, #0
 8013318:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d109      	bne.n	8013334 <tcp_write+0x5c>
 8013320:	4ba4      	ldr	r3, [pc, #656]	; (80135b4 <tcp_write+0x2dc>)
 8013322:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013326:	49a4      	ldr	r1, [pc, #656]	; (80135b8 <tcp_write+0x2e0>)
 8013328:	48a4      	ldr	r0, [pc, #656]	; (80135bc <tcp_write+0x2e4>)
 801332a:	f002 fd6f 	bl	8015e0c <iprintf>
 801332e:	f06f 030f 	mvn.w	r3, #15
 8013332:	e32a      	b.n	801398a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801333a:	085b      	lsrs	r3, r3, #1
 801333c:	b29a      	uxth	r2, r3
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013342:	4293      	cmp	r3, r2
 8013344:	bf28      	it	cs
 8013346:	4613      	movcs	r3, r2
 8013348:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801334a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801334c:	2b00      	cmp	r3, #0
 801334e:	d102      	bne.n	8013356 <tcp_write+0x7e>
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013354:	e000      	b.n	8013358 <tcp_write+0x80>
 8013356:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013358:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801335a:	68bb      	ldr	r3, [r7, #8]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d109      	bne.n	8013374 <tcp_write+0x9c>
 8013360:	4b94      	ldr	r3, [pc, #592]	; (80135b4 <tcp_write+0x2dc>)
 8013362:	f240 12ad 	movw	r2, #429	; 0x1ad
 8013366:	4996      	ldr	r1, [pc, #600]	; (80135c0 <tcp_write+0x2e8>)
 8013368:	4894      	ldr	r0, [pc, #592]	; (80135bc <tcp_write+0x2e4>)
 801336a:	f002 fd4f 	bl	8015e0c <iprintf>
 801336e:	f06f 030f 	mvn.w	r3, #15
 8013372:	e30a      	b.n	801398a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8013374:	88fb      	ldrh	r3, [r7, #6]
 8013376:	4619      	mov	r1, r3
 8013378:	68f8      	ldr	r0, [r7, #12]
 801337a:	f7ff ff33 	bl	80131e4 <tcp_write_checks>
 801337e:	4603      	mov	r3, r0
 8013380:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8013384:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013388:	2b00      	cmp	r3, #0
 801338a:	d002      	beq.n	8013392 <tcp_write+0xba>
    return err;
 801338c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013390:	e2fb      	b.n	801398a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013398:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801339c:	2300      	movs	r3, #0
 801339e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	f000 80f6 	beq.w	8013598 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133b0:	653b      	str	r3, [r7, #80]	; 0x50
 80133b2:	e002      	b.n	80133ba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80133b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80133ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d1f8      	bne.n	80133b4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80133c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133c4:	7a9b      	ldrb	r3, [r3, #10]
 80133c6:	009b      	lsls	r3, r3, #2
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	f003 0304 	and.w	r3, r3, #4
 80133ce:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80133d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80133d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133d4:	891b      	ldrh	r3, [r3, #8]
 80133d6:	4619      	mov	r1, r3
 80133d8:	8c3b      	ldrh	r3, [r7, #32]
 80133da:	440b      	add	r3, r1
 80133dc:	429a      	cmp	r2, r3
 80133de:	da06      	bge.n	80133ee <tcp_write+0x116>
 80133e0:	4b74      	ldr	r3, [pc, #464]	; (80135b4 <tcp_write+0x2dc>)
 80133e2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80133e6:	4977      	ldr	r1, [pc, #476]	; (80135c4 <tcp_write+0x2ec>)
 80133e8:	4874      	ldr	r0, [pc, #464]	; (80135bc <tcp_write+0x2e4>)
 80133ea:	f002 fd0f 	bl	8015e0c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80133ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133f0:	891a      	ldrh	r2, [r3, #8]
 80133f2:	8c3b      	ldrh	r3, [r7, #32]
 80133f4:	4413      	add	r3, r2
 80133f6:	b29b      	uxth	r3, r3
 80133f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80133fa:	1ad3      	subs	r3, r2, r3
 80133fc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013404:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013406:	8a7b      	ldrh	r3, [r7, #18]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d026      	beq.n	801345a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801340c:	8a7b      	ldrh	r3, [r7, #18]
 801340e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013410:	429a      	cmp	r2, r3
 8013412:	d206      	bcs.n	8013422 <tcp_write+0x14a>
 8013414:	4b67      	ldr	r3, [pc, #412]	; (80135b4 <tcp_write+0x2dc>)
 8013416:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801341a:	496b      	ldr	r1, [pc, #428]	; (80135c8 <tcp_write+0x2f0>)
 801341c:	4867      	ldr	r0, [pc, #412]	; (80135bc <tcp_write+0x2e4>)
 801341e:	f002 fcf5 	bl	8015e0c <iprintf>
      seg = last_unsent;
 8013422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013424:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013426:	8a7b      	ldrh	r3, [r7, #18]
 8013428:	88fa      	ldrh	r2, [r7, #6]
 801342a:	4293      	cmp	r3, r2
 801342c:	bf28      	it	cs
 801342e:	4613      	movcs	r3, r2
 8013430:	b29b      	uxth	r3, r3
 8013432:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013434:	4293      	cmp	r3, r2
 8013436:	bf28      	it	cs
 8013438:	4613      	movcs	r3, r2
 801343a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801343c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013440:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013442:	4413      	add	r3, r2
 8013444:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8013448:	8a7a      	ldrh	r2, [r7, #18]
 801344a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801344c:	1ad3      	subs	r3, r2, r3
 801344e:	b29b      	uxth	r3, r3
 8013450:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8013452:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013454:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013456:	1ad3      	subs	r3, r2, r3
 8013458:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801345a:	8a7b      	ldrh	r3, [r7, #18]
 801345c:	2b00      	cmp	r3, #0
 801345e:	d00b      	beq.n	8013478 <tcp_write+0x1a0>
 8013460:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013464:	88fb      	ldrh	r3, [r7, #6]
 8013466:	429a      	cmp	r2, r3
 8013468:	d006      	beq.n	8013478 <tcp_write+0x1a0>
 801346a:	4b52      	ldr	r3, [pc, #328]	; (80135b4 <tcp_write+0x2dc>)
 801346c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013470:	4956      	ldr	r1, [pc, #344]	; (80135cc <tcp_write+0x2f4>)
 8013472:	4852      	ldr	r0, [pc, #328]	; (80135bc <tcp_write+0x2e4>)
 8013474:	f002 fcca 	bl	8015e0c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8013478:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801347c:	88fb      	ldrh	r3, [r7, #6]
 801347e:	429a      	cmp	r2, r3
 8013480:	f080 8167 	bcs.w	8013752 <tcp_write+0x47a>
 8013484:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013486:	2b00      	cmp	r3, #0
 8013488:	f000 8163 	beq.w	8013752 <tcp_write+0x47a>
 801348c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801348e:	891b      	ldrh	r3, [r3, #8]
 8013490:	2b00      	cmp	r3, #0
 8013492:	f000 815e 	beq.w	8013752 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013496:	88fa      	ldrh	r2, [r7, #6]
 8013498:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801349c:	1ad2      	subs	r2, r2, r3
 801349e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80134a0:	4293      	cmp	r3, r2
 80134a2:	bfa8      	it	ge
 80134a4:	4613      	movge	r3, r2
 80134a6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80134a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80134aa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80134ac:	797b      	ldrb	r3, [r7, #5]
 80134ae:	f003 0301 	and.w	r3, r3, #1
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d027      	beq.n	8013506 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80134b6:	f107 0012 	add.w	r0, r7, #18
 80134ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80134bc:	8bf9      	ldrh	r1, [r7, #30]
 80134be:	2301      	movs	r3, #1
 80134c0:	9302      	str	r3, [sp, #8]
 80134c2:	797b      	ldrb	r3, [r7, #5]
 80134c4:	9301      	str	r3, [sp, #4]
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	9300      	str	r3, [sp, #0]
 80134ca:	4603      	mov	r3, r0
 80134cc:	2000      	movs	r0, #0
 80134ce:	f7ff fe0f 	bl	80130f0 <tcp_pbuf_prealloc>
 80134d2:	6578      	str	r0, [r7, #84]	; 0x54
 80134d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	f000 8225 	beq.w	8013926 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80134dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134de:	6858      	ldr	r0, [r3, #4]
 80134e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80134e4:	68ba      	ldr	r2, [r7, #8]
 80134e6:	4413      	add	r3, r2
 80134e8:	8bfa      	ldrh	r2, [r7, #30]
 80134ea:	4619      	mov	r1, r3
 80134ec:	f002 fc5e 	bl	8015dac <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80134f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80134f2:	f7fb fcd5 	bl	800eea0 <pbuf_clen>
 80134f6:	4603      	mov	r3, r0
 80134f8:	461a      	mov	r2, r3
 80134fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80134fe:	4413      	add	r3, r2
 8013500:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013504:	e041      	b.n	801358a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	637b      	str	r3, [r7, #52]	; 0x34
 801350c:	e002      	b.n	8013514 <tcp_write+0x23c>
 801350e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	637b      	str	r3, [r7, #52]	; 0x34
 8013514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d1f8      	bne.n	801350e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801351c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801351e:	7b1b      	ldrb	r3, [r3, #12]
 8013520:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013524:	2b00      	cmp	r3, #0
 8013526:	d115      	bne.n	8013554 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801352a:	685b      	ldr	r3, [r3, #4]
 801352c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801352e:	8952      	ldrh	r2, [r2, #10]
 8013530:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8013532:	68ba      	ldr	r2, [r7, #8]
 8013534:	429a      	cmp	r2, r3
 8013536:	d10d      	bne.n	8013554 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8013538:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801353c:	2b00      	cmp	r3, #0
 801353e:	d006      	beq.n	801354e <tcp_write+0x276>
 8013540:	4b1c      	ldr	r3, [pc, #112]	; (80135b4 <tcp_write+0x2dc>)
 8013542:	f240 2231 	movw	r2, #561	; 0x231
 8013546:	4922      	ldr	r1, [pc, #136]	; (80135d0 <tcp_write+0x2f8>)
 8013548:	481c      	ldr	r0, [pc, #112]	; (80135bc <tcp_write+0x2e4>)
 801354a:	f002 fc5f 	bl	8015e0c <iprintf>
          extendlen = seglen;
 801354e:	8bfb      	ldrh	r3, [r7, #30]
 8013550:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8013552:	e01a      	b.n	801358a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8013554:	8bfb      	ldrh	r3, [r7, #30]
 8013556:	2201      	movs	r2, #1
 8013558:	4619      	mov	r1, r3
 801355a:	2000      	movs	r0, #0
 801355c:	f7fb f930 	bl	800e7c0 <pbuf_alloc>
 8013560:	6578      	str	r0, [r7, #84]	; 0x54
 8013562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013564:	2b00      	cmp	r3, #0
 8013566:	f000 81e0 	beq.w	801392a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801356a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801356e:	68ba      	ldr	r2, [r7, #8]
 8013570:	441a      	add	r2, r3
 8013572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013574:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8013576:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013578:	f7fb fc92 	bl	800eea0 <pbuf_clen>
 801357c:	4603      	mov	r3, r0
 801357e:	461a      	mov	r2, r3
 8013580:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013584:	4413      	add	r3, r2
 8013586:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801358a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801358e:	8bfb      	ldrh	r3, [r7, #30]
 8013590:	4413      	add	r3, r2
 8013592:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013596:	e0dc      	b.n	8013752 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801359e:	2b00      	cmp	r3, #0
 80135a0:	f000 80d7 	beq.w	8013752 <tcp_write+0x47a>
 80135a4:	4b03      	ldr	r3, [pc, #12]	; (80135b4 <tcp_write+0x2dc>)
 80135a6:	f240 224a 	movw	r2, #586	; 0x24a
 80135aa:	490a      	ldr	r1, [pc, #40]	; (80135d4 <tcp_write+0x2fc>)
 80135ac:	4803      	ldr	r0, [pc, #12]	; (80135bc <tcp_write+0x2e4>)
 80135ae:	f002 fc2d 	bl	8015e0c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80135b2:	e0ce      	b.n	8013752 <tcp_write+0x47a>
 80135b4:	0801a8f8 	.word	0x0801a8f8
 80135b8:	0801aadc 	.word	0x0801aadc
 80135bc:	0801a990 	.word	0x0801a990
 80135c0:	0801aaf4 	.word	0x0801aaf4
 80135c4:	0801ab28 	.word	0x0801ab28
 80135c8:	0801ab40 	.word	0x0801ab40
 80135cc:	0801ab60 	.word	0x0801ab60
 80135d0:	0801ab80 	.word	0x0801ab80
 80135d4:	0801abac 	.word	0x0801abac
    struct pbuf *p;
    u16_t left = len - pos;
 80135d8:	88fa      	ldrh	r2, [r7, #6]
 80135da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80135de:	1ad3      	subs	r3, r2, r3
 80135e0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80135e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135ea:	1ad3      	subs	r3, r2, r3
 80135ec:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80135ee:	8b7a      	ldrh	r2, [r7, #26]
 80135f0:	8bbb      	ldrh	r3, [r7, #28]
 80135f2:	4293      	cmp	r3, r2
 80135f4:	bf28      	it	cs
 80135f6:	4613      	movcs	r3, r2
 80135f8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80135fa:	797b      	ldrb	r3, [r7, #5]
 80135fc:	f003 0301 	and.w	r3, r3, #1
 8013600:	2b00      	cmp	r3, #0
 8013602:	d036      	beq.n	8013672 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013604:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013608:	b29a      	uxth	r2, r3
 801360a:	8b3b      	ldrh	r3, [r7, #24]
 801360c:	4413      	add	r3, r2
 801360e:	b299      	uxth	r1, r3
 8013610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013612:	2b00      	cmp	r3, #0
 8013614:	bf0c      	ite	eq
 8013616:	2301      	moveq	r3, #1
 8013618:	2300      	movne	r3, #0
 801361a:	b2db      	uxtb	r3, r3
 801361c:	f107 0012 	add.w	r0, r7, #18
 8013620:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013622:	9302      	str	r3, [sp, #8]
 8013624:	797b      	ldrb	r3, [r7, #5]
 8013626:	9301      	str	r3, [sp, #4]
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	9300      	str	r3, [sp, #0]
 801362c:	4603      	mov	r3, r0
 801362e:	2036      	movs	r0, #54	; 0x36
 8013630:	f7ff fd5e 	bl	80130f0 <tcp_pbuf_prealloc>
 8013634:	6338      	str	r0, [r7, #48]	; 0x30
 8013636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013638:	2b00      	cmp	r3, #0
 801363a:	f000 8178 	beq.w	801392e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013640:	895b      	ldrh	r3, [r3, #10]
 8013642:	8b3a      	ldrh	r2, [r7, #24]
 8013644:	429a      	cmp	r2, r3
 8013646:	d906      	bls.n	8013656 <tcp_write+0x37e>
 8013648:	4b8c      	ldr	r3, [pc, #560]	; (801387c <tcp_write+0x5a4>)
 801364a:	f240 2266 	movw	r2, #614	; 0x266
 801364e:	498c      	ldr	r1, [pc, #560]	; (8013880 <tcp_write+0x5a8>)
 8013650:	488c      	ldr	r0, [pc, #560]	; (8013884 <tcp_write+0x5ac>)
 8013652:	f002 fbdb 	bl	8015e0c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8013656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013658:	685a      	ldr	r2, [r3, #4]
 801365a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801365e:	18d0      	adds	r0, r2, r3
 8013660:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013664:	68ba      	ldr	r2, [r7, #8]
 8013666:	4413      	add	r3, r2
 8013668:	8b3a      	ldrh	r2, [r7, #24]
 801366a:	4619      	mov	r1, r3
 801366c:	f002 fb9e 	bl	8015dac <memcpy>
 8013670:	e02f      	b.n	80136d2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8013672:	8a7b      	ldrh	r3, [r7, #18]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d006      	beq.n	8013686 <tcp_write+0x3ae>
 8013678:	4b80      	ldr	r3, [pc, #512]	; (801387c <tcp_write+0x5a4>)
 801367a:	f240 2271 	movw	r2, #625	; 0x271
 801367e:	4982      	ldr	r1, [pc, #520]	; (8013888 <tcp_write+0x5b0>)
 8013680:	4880      	ldr	r0, [pc, #512]	; (8013884 <tcp_write+0x5ac>)
 8013682:	f002 fbc3 	bl	8015e0c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8013686:	8b3b      	ldrh	r3, [r7, #24]
 8013688:	2201      	movs	r2, #1
 801368a:	4619      	mov	r1, r3
 801368c:	2036      	movs	r0, #54	; 0x36
 801368e:	f7fb f897 	bl	800e7c0 <pbuf_alloc>
 8013692:	6178      	str	r0, [r7, #20]
 8013694:	697b      	ldr	r3, [r7, #20]
 8013696:	2b00      	cmp	r3, #0
 8013698:	f000 814b 	beq.w	8013932 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801369c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136a0:	68ba      	ldr	r2, [r7, #8]
 80136a2:	441a      	add	r2, r3
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80136a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80136ac:	b29b      	uxth	r3, r3
 80136ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80136b2:	4619      	mov	r1, r3
 80136b4:	2036      	movs	r0, #54	; 0x36
 80136b6:	f7fb f883 	bl	800e7c0 <pbuf_alloc>
 80136ba:	6338      	str	r0, [r7, #48]	; 0x30
 80136bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d103      	bne.n	80136ca <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80136c2:	6978      	ldr	r0, [r7, #20]
 80136c4:	f7fb fb5e 	bl	800ed84 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80136c8:	e136      	b.n	8013938 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80136ca:	6979      	ldr	r1, [r7, #20]
 80136cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136ce:	f7fb fc27 	bl	800ef20 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80136d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136d4:	f7fb fbe4 	bl	800eea0 <pbuf_clen>
 80136d8:	4603      	mov	r3, r0
 80136da:	461a      	mov	r2, r3
 80136dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80136e0:	4413      	add	r3, r2
 80136e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80136e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80136ea:	2b08      	cmp	r3, #8
 80136ec:	d903      	bls.n	80136f6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80136ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136f0:	f7fb fb48 	bl	800ed84 <pbuf_free>
      goto memerr;
 80136f4:	e120      	b.n	8013938 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80136fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80136fe:	441a      	add	r2, r3
 8013700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013704:	9300      	str	r3, [sp, #0]
 8013706:	4613      	mov	r3, r2
 8013708:	2200      	movs	r2, #0
 801370a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801370c:	68f8      	ldr	r0, [r7, #12]
 801370e:	f7ff fc51 	bl	8012fb4 <tcp_create_segment>
 8013712:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013716:	2b00      	cmp	r3, #0
 8013718:	f000 810d 	beq.w	8013936 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801371c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801371e:	2b00      	cmp	r3, #0
 8013720:	d102      	bne.n	8013728 <tcp_write+0x450>
      queue = seg;
 8013722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013724:	647b      	str	r3, [r7, #68]	; 0x44
 8013726:	e00c      	b.n	8013742 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801372a:	2b00      	cmp	r3, #0
 801372c:	d106      	bne.n	801373c <tcp_write+0x464>
 801372e:	4b53      	ldr	r3, [pc, #332]	; (801387c <tcp_write+0x5a4>)
 8013730:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013734:	4955      	ldr	r1, [pc, #340]	; (801388c <tcp_write+0x5b4>)
 8013736:	4853      	ldr	r0, [pc, #332]	; (8013884 <tcp_write+0x5ac>)
 8013738:	f002 fb68 	bl	8015e0c <iprintf>
      prev_seg->next = seg;
 801373c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801373e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013740:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8013742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013744:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8013746:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801374a:	8b3b      	ldrh	r3, [r7, #24]
 801374c:	4413      	add	r3, r2
 801374e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8013752:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013756:	88fb      	ldrh	r3, [r7, #6]
 8013758:	429a      	cmp	r2, r3
 801375a:	f4ff af3d 	bcc.w	80135d8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801375e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013760:	2b00      	cmp	r3, #0
 8013762:	d02c      	beq.n	80137be <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8013764:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013766:	685b      	ldr	r3, [r3, #4]
 8013768:	62fb      	str	r3, [r7, #44]	; 0x2c
 801376a:	e01e      	b.n	80137aa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801376e:	891a      	ldrh	r2, [r3, #8]
 8013770:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013772:	4413      	add	r3, r2
 8013774:	b29a      	uxth	r2, r3
 8013776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013778:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801377a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d110      	bne.n	80137a4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8013782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013784:	685b      	ldr	r3, [r3, #4]
 8013786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013788:	8952      	ldrh	r2, [r2, #10]
 801378a:	4413      	add	r3, r2
 801378c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801378e:	68b9      	ldr	r1, [r7, #8]
 8013790:	4618      	mov	r0, r3
 8013792:	f002 fb0b 	bl	8015dac <memcpy>
        p->len += oversize_used;
 8013796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013798:	895a      	ldrh	r2, [r3, #10]
 801379a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801379c:	4413      	add	r3, r2
 801379e:	b29a      	uxth	r2, r3
 80137a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80137a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137a6:	681b      	ldr	r3, [r3, #0]
 80137a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d1dd      	bne.n	801376c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80137b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137b2:	891a      	ldrh	r2, [r3, #8]
 80137b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80137b6:	4413      	add	r3, r2
 80137b8:	b29a      	uxth	r2, r3
 80137ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137bc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80137be:	8a7a      	ldrh	r2, [r7, #18]
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80137c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d018      	beq.n	80137fe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80137cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d106      	bne.n	80137e0 <tcp_write+0x508>
 80137d2:	4b2a      	ldr	r3, [pc, #168]	; (801387c <tcp_write+0x5a4>)
 80137d4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80137d8:	492d      	ldr	r1, [pc, #180]	; (8013890 <tcp_write+0x5b8>)
 80137da:	482a      	ldr	r0, [pc, #168]	; (8013884 <tcp_write+0x5ac>)
 80137dc:	f002 fb16 	bl	8015e0c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80137e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137e2:	685b      	ldr	r3, [r3, #4]
 80137e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80137e6:	4618      	mov	r0, r3
 80137e8:	f7fb fb9a 	bl	800ef20 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80137ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137ee:	891a      	ldrh	r2, [r3, #8]
 80137f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137f2:	891b      	ldrh	r3, [r3, #8]
 80137f4:	4413      	add	r3, r2
 80137f6:	b29a      	uxth	r2, r3
 80137f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80137fa:	811a      	strh	r2, [r3, #8]
 80137fc:	e037      	b.n	801386e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80137fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013800:	2b00      	cmp	r3, #0
 8013802:	d034      	beq.n	801386e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013806:	2b00      	cmp	r3, #0
 8013808:	d003      	beq.n	8013812 <tcp_write+0x53a>
 801380a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801380c:	685b      	ldr	r3, [r3, #4]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d106      	bne.n	8013820 <tcp_write+0x548>
 8013812:	4b1a      	ldr	r3, [pc, #104]	; (801387c <tcp_write+0x5a4>)
 8013814:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013818:	491e      	ldr	r1, [pc, #120]	; (8013894 <tcp_write+0x5bc>)
 801381a:	481a      	ldr	r0, [pc, #104]	; (8013884 <tcp_write+0x5ac>)
 801381c:	f002 faf6 	bl	8015e0c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013822:	685b      	ldr	r3, [r3, #4]
 8013824:	62bb      	str	r3, [r7, #40]	; 0x28
 8013826:	e009      	b.n	801383c <tcp_write+0x564>
      p->tot_len += extendlen;
 8013828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801382a:	891a      	ldrh	r2, [r3, #8]
 801382c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801382e:	4413      	add	r3, r2
 8013830:	b29a      	uxth	r2, r3
 8013832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013834:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	62bb      	str	r3, [r7, #40]	; 0x28
 801383c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d1f1      	bne.n	8013828 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013846:	891a      	ldrh	r2, [r3, #8]
 8013848:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801384a:	4413      	add	r3, r2
 801384c:	b29a      	uxth	r2, r3
 801384e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013850:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013854:	895a      	ldrh	r2, [r3, #10]
 8013856:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013858:	4413      	add	r3, r2
 801385a:	b29a      	uxth	r2, r3
 801385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801385e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013862:	891a      	ldrh	r2, [r3, #8]
 8013864:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013866:	4413      	add	r3, r2
 8013868:	b29a      	uxth	r2, r3
 801386a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801386c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801386e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013870:	2b00      	cmp	r3, #0
 8013872:	d111      	bne.n	8013898 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013878:	66da      	str	r2, [r3, #108]	; 0x6c
 801387a:	e010      	b.n	801389e <tcp_write+0x5c6>
 801387c:	0801a8f8 	.word	0x0801a8f8
 8013880:	0801abdc 	.word	0x0801abdc
 8013884:	0801a990 	.word	0x0801a990
 8013888:	0801ac1c 	.word	0x0801ac1c
 801388c:	0801ac2c 	.word	0x0801ac2c
 8013890:	0801ac40 	.word	0x0801ac40
 8013894:	0801ac78 	.word	0x0801ac78
  } else {
    last_unsent->next = queue;
 8013898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801389a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801389c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801389e:	68fb      	ldr	r3, [r7, #12]
 80138a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80138a2:	88fb      	ldrh	r3, [r7, #6]
 80138a4:	441a      	add	r2, r3
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80138b0:	88fb      	ldrh	r3, [r7, #6]
 80138b2:	1ad3      	subs	r3, r2, r3
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80138c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80138c6:	68fb      	ldr	r3, [r7, #12]
 80138c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d00e      	beq.n	80138ee <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d10a      	bne.n	80138ee <tcp_write+0x616>
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d106      	bne.n	80138ee <tcp_write+0x616>
 80138e0:	4b2c      	ldr	r3, [pc, #176]	; (8013994 <tcp_write+0x6bc>)
 80138e2:	f240 3212 	movw	r2, #786	; 0x312
 80138e6:	492c      	ldr	r1, [pc, #176]	; (8013998 <tcp_write+0x6c0>)
 80138e8:	482c      	ldr	r0, [pc, #176]	; (801399c <tcp_write+0x6c4>)
 80138ea:	f002 fa8f 	bl	8015e0c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80138ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d016      	beq.n	8013922 <tcp_write+0x64a>
 80138f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138f6:	68db      	ldr	r3, [r3, #12]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d012      	beq.n	8013922 <tcp_write+0x64a>
 80138fc:	797b      	ldrb	r3, [r7, #5]
 80138fe:	f003 0302 	and.w	r3, r3, #2
 8013902:	2b00      	cmp	r3, #0
 8013904:	d10d      	bne.n	8013922 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013908:	68db      	ldr	r3, [r3, #12]
 801390a:	899b      	ldrh	r3, [r3, #12]
 801390c:	b29c      	uxth	r4, r3
 801390e:	2008      	movs	r0, #8
 8013910:	f7f9 fe38 	bl	800d584 <lwip_htons>
 8013914:	4603      	mov	r3, r0
 8013916:	461a      	mov	r2, r3
 8013918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801391a:	68db      	ldr	r3, [r3, #12]
 801391c:	4322      	orrs	r2, r4
 801391e:	b292      	uxth	r2, r2
 8013920:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013922:	2300      	movs	r3, #0
 8013924:	e031      	b.n	801398a <tcp_write+0x6b2>
          goto memerr;
 8013926:	bf00      	nop
 8013928:	e006      	b.n	8013938 <tcp_write+0x660>
            goto memerr;
 801392a:	bf00      	nop
 801392c:	e004      	b.n	8013938 <tcp_write+0x660>
        goto memerr;
 801392e:	bf00      	nop
 8013930:	e002      	b.n	8013938 <tcp_write+0x660>
        goto memerr;
 8013932:	bf00      	nop
 8013934:	e000      	b.n	8013938 <tcp_write+0x660>
      goto memerr;
 8013936:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	8b5b      	ldrh	r3, [r3, #26]
 801393c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013940:	b29a      	uxth	r2, r3
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013948:	2b00      	cmp	r3, #0
 801394a:	d002      	beq.n	8013952 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801394c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801394e:	f7fb fa19 	bl	800ed84 <pbuf_free>
  }
  if (queue != NULL) {
 8013952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013954:	2b00      	cmp	r3, #0
 8013956:	d002      	beq.n	801395e <tcp_write+0x686>
    tcp_segs_free(queue);
 8013958:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801395a:	f7fc ff7d 	bl	8010858 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013964:	2b00      	cmp	r3, #0
 8013966:	d00e      	beq.n	8013986 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801396c:	2b00      	cmp	r3, #0
 801396e:	d10a      	bne.n	8013986 <tcp_write+0x6ae>
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013974:	2b00      	cmp	r3, #0
 8013976:	d106      	bne.n	8013986 <tcp_write+0x6ae>
 8013978:	4b06      	ldr	r3, [pc, #24]	; (8013994 <tcp_write+0x6bc>)
 801397a:	f240 3227 	movw	r2, #807	; 0x327
 801397e:	4906      	ldr	r1, [pc, #24]	; (8013998 <tcp_write+0x6c0>)
 8013980:	4806      	ldr	r0, [pc, #24]	; (801399c <tcp_write+0x6c4>)
 8013982:	f002 fa43 	bl	8015e0c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013986:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801398a:	4618      	mov	r0, r3
 801398c:	375c      	adds	r7, #92	; 0x5c
 801398e:	46bd      	mov	sp, r7
 8013990:	bd90      	pop	{r4, r7, pc}
 8013992:	bf00      	nop
 8013994:	0801a8f8 	.word	0x0801a8f8
 8013998:	0801acb0 	.word	0x0801acb0
 801399c:	0801a990 	.word	0x0801a990

080139a0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80139a0:	b590      	push	{r4, r7, lr}
 80139a2:	b08b      	sub	sp, #44	; 0x2c
 80139a4:	af02      	add	r7, sp, #8
 80139a6:	6078      	str	r0, [r7, #4]
 80139a8:	460b      	mov	r3, r1
 80139aa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80139ac:	2300      	movs	r3, #0
 80139ae:	61fb      	str	r3, [r7, #28]
 80139b0:	2300      	movs	r3, #0
 80139b2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80139b4:	2300      	movs	r3, #0
 80139b6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d106      	bne.n	80139cc <tcp_split_unsent_seg+0x2c>
 80139be:	4b95      	ldr	r3, [pc, #596]	; (8013c14 <tcp_split_unsent_seg+0x274>)
 80139c0:	f240 324b 	movw	r2, #843	; 0x34b
 80139c4:	4994      	ldr	r1, [pc, #592]	; (8013c18 <tcp_split_unsent_seg+0x278>)
 80139c6:	4895      	ldr	r0, [pc, #596]	; (8013c1c <tcp_split_unsent_seg+0x27c>)
 80139c8:	f002 fa20 	bl	8015e0c <iprintf>

  useg = pcb->unsent;
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80139d0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80139d2:	697b      	ldr	r3, [r7, #20]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d102      	bne.n	80139de <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80139d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80139dc:	e116      	b.n	8013c0c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80139de:	887b      	ldrh	r3, [r7, #2]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d109      	bne.n	80139f8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80139e4:	4b8b      	ldr	r3, [pc, #556]	; (8013c14 <tcp_split_unsent_seg+0x274>)
 80139e6:	f240 3253 	movw	r2, #851	; 0x353
 80139ea:	498d      	ldr	r1, [pc, #564]	; (8013c20 <tcp_split_unsent_seg+0x280>)
 80139ec:	488b      	ldr	r0, [pc, #556]	; (8013c1c <tcp_split_unsent_seg+0x27c>)
 80139ee:	f002 fa0d 	bl	8015e0c <iprintf>
    return ERR_VAL;
 80139f2:	f06f 0305 	mvn.w	r3, #5
 80139f6:	e109      	b.n	8013c0c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80139f8:	697b      	ldr	r3, [r7, #20]
 80139fa:	891b      	ldrh	r3, [r3, #8]
 80139fc:	887a      	ldrh	r2, [r7, #2]
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d301      	bcc.n	8013a06 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013a02:	2300      	movs	r3, #0
 8013a04:	e102      	b.n	8013c0c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013a0a:	887a      	ldrh	r2, [r7, #2]
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d906      	bls.n	8013a1e <tcp_split_unsent_seg+0x7e>
 8013a10:	4b80      	ldr	r3, [pc, #512]	; (8013c14 <tcp_split_unsent_seg+0x274>)
 8013a12:	f240 325b 	movw	r2, #859	; 0x35b
 8013a16:	4983      	ldr	r1, [pc, #524]	; (8013c24 <tcp_split_unsent_seg+0x284>)
 8013a18:	4880      	ldr	r0, [pc, #512]	; (8013c1c <tcp_split_unsent_seg+0x27c>)
 8013a1a:	f002 f9f7 	bl	8015e0c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	891b      	ldrh	r3, [r3, #8]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d106      	bne.n	8013a34 <tcp_split_unsent_seg+0x94>
 8013a26:	4b7b      	ldr	r3, [pc, #492]	; (8013c14 <tcp_split_unsent_seg+0x274>)
 8013a28:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013a2c:	497e      	ldr	r1, [pc, #504]	; (8013c28 <tcp_split_unsent_seg+0x288>)
 8013a2e:	487b      	ldr	r0, [pc, #492]	; (8013c1c <tcp_split_unsent_seg+0x27c>)
 8013a30:	f002 f9ec 	bl	8015e0c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013a34:	697b      	ldr	r3, [r7, #20]
 8013a36:	7a9b      	ldrb	r3, [r3, #10]
 8013a38:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013a3a:	7bfb      	ldrb	r3, [r7, #15]
 8013a3c:	009b      	lsls	r3, r3, #2
 8013a3e:	b2db      	uxtb	r3, r3
 8013a40:	f003 0304 	and.w	r3, r3, #4
 8013a44:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013a46:	697b      	ldr	r3, [r7, #20]
 8013a48:	891a      	ldrh	r2, [r3, #8]
 8013a4a:	887b      	ldrh	r3, [r7, #2]
 8013a4c:	1ad3      	subs	r3, r2, r3
 8013a4e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013a50:	7bbb      	ldrb	r3, [r7, #14]
 8013a52:	b29a      	uxth	r2, r3
 8013a54:	89bb      	ldrh	r3, [r7, #12]
 8013a56:	4413      	add	r3, r2
 8013a58:	b29b      	uxth	r3, r3
 8013a5a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013a5e:	4619      	mov	r1, r3
 8013a60:	2036      	movs	r0, #54	; 0x36
 8013a62:	f7fa fead 	bl	800e7c0 <pbuf_alloc>
 8013a66:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013a68:	693b      	ldr	r3, [r7, #16]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	f000 80b7 	beq.w	8013bde <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	685b      	ldr	r3, [r3, #4]
 8013a74:	891a      	ldrh	r2, [r3, #8]
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	891b      	ldrh	r3, [r3, #8]
 8013a7a:	1ad3      	subs	r3, r2, r3
 8013a7c:	b29a      	uxth	r2, r3
 8013a7e:	887b      	ldrh	r3, [r7, #2]
 8013a80:	4413      	add	r3, r2
 8013a82:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013a84:	697b      	ldr	r3, [r7, #20]
 8013a86:	6858      	ldr	r0, [r3, #4]
 8013a88:	693b      	ldr	r3, [r7, #16]
 8013a8a:	685a      	ldr	r2, [r3, #4]
 8013a8c:	7bbb      	ldrb	r3, [r7, #14]
 8013a8e:	18d1      	adds	r1, r2, r3
 8013a90:	897b      	ldrh	r3, [r7, #10]
 8013a92:	89ba      	ldrh	r2, [r7, #12]
 8013a94:	f7fb fb6c 	bl	800f170 <pbuf_copy_partial>
 8013a98:	4603      	mov	r3, r0
 8013a9a:	461a      	mov	r2, r3
 8013a9c:	89bb      	ldrh	r3, [r7, #12]
 8013a9e:	4293      	cmp	r3, r2
 8013aa0:	f040 809f 	bne.w	8013be2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	68db      	ldr	r3, [r3, #12]
 8013aa8:	899b      	ldrh	r3, [r3, #12]
 8013aaa:	b29b      	uxth	r3, r3
 8013aac:	4618      	mov	r0, r3
 8013aae:	f7f9 fd69 	bl	800d584 <lwip_htons>
 8013ab2:	4603      	mov	r3, r0
 8013ab4:	b2db      	uxtb	r3, r3
 8013ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013aba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013abc:	2300      	movs	r3, #0
 8013abe:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013ac0:	7efb      	ldrb	r3, [r7, #27]
 8013ac2:	f003 0308 	and.w	r3, r3, #8
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d007      	beq.n	8013ada <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013aca:	7efb      	ldrb	r3, [r7, #27]
 8013acc:	f023 0308 	bic.w	r3, r3, #8
 8013ad0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013ad2:	7ebb      	ldrb	r3, [r7, #26]
 8013ad4:	f043 0308 	orr.w	r3, r3, #8
 8013ad8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013ada:	7efb      	ldrb	r3, [r7, #27]
 8013adc:	f003 0301 	and.w	r3, r3, #1
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d007      	beq.n	8013af4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013ae4:	7efb      	ldrb	r3, [r7, #27]
 8013ae6:	f023 0301 	bic.w	r3, r3, #1
 8013aea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013aec:	7ebb      	ldrb	r3, [r7, #26]
 8013aee:	f043 0301 	orr.w	r3, r3, #1
 8013af2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013af4:	697b      	ldr	r3, [r7, #20]
 8013af6:	68db      	ldr	r3, [r3, #12]
 8013af8:	685b      	ldr	r3, [r3, #4]
 8013afa:	4618      	mov	r0, r3
 8013afc:	f7f9 fd57 	bl	800d5ae <lwip_htonl>
 8013b00:	4602      	mov	r2, r0
 8013b02:	887b      	ldrh	r3, [r7, #2]
 8013b04:	18d1      	adds	r1, r2, r3
 8013b06:	7eba      	ldrb	r2, [r7, #26]
 8013b08:	7bfb      	ldrb	r3, [r7, #15]
 8013b0a:	9300      	str	r3, [sp, #0]
 8013b0c:	460b      	mov	r3, r1
 8013b0e:	6939      	ldr	r1, [r7, #16]
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f7ff fa4f 	bl	8012fb4 <tcp_create_segment>
 8013b16:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013b18:	69fb      	ldr	r3, [r7, #28]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d063      	beq.n	8013be6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	685b      	ldr	r3, [r3, #4]
 8013b22:	4618      	mov	r0, r3
 8013b24:	f7fb f9bc 	bl	800eea0 <pbuf_clen>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	461a      	mov	r2, r3
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b32:	1a9b      	subs	r3, r3, r2
 8013b34:	b29a      	uxth	r2, r3
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	6858      	ldr	r0, [r3, #4]
 8013b40:	697b      	ldr	r3, [r7, #20]
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	891a      	ldrh	r2, [r3, #8]
 8013b46:	89bb      	ldrh	r3, [r7, #12]
 8013b48:	1ad3      	subs	r3, r2, r3
 8013b4a:	b29b      	uxth	r3, r3
 8013b4c:	4619      	mov	r1, r3
 8013b4e:	f7fa ff93 	bl	800ea78 <pbuf_realloc>
  useg->len -= remainder;
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	891a      	ldrh	r2, [r3, #8]
 8013b56:	89bb      	ldrh	r3, [r7, #12]
 8013b58:	1ad3      	subs	r3, r2, r3
 8013b5a:	b29a      	uxth	r2, r3
 8013b5c:	697b      	ldr	r3, [r7, #20]
 8013b5e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013b60:	697b      	ldr	r3, [r7, #20]
 8013b62:	68db      	ldr	r3, [r3, #12]
 8013b64:	899b      	ldrh	r3, [r3, #12]
 8013b66:	b29c      	uxth	r4, r3
 8013b68:	7efb      	ldrb	r3, [r7, #27]
 8013b6a:	b29b      	uxth	r3, r3
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7f9 fd09 	bl	800d584 <lwip_htons>
 8013b72:	4603      	mov	r3, r0
 8013b74:	461a      	mov	r2, r3
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	68db      	ldr	r3, [r3, #12]
 8013b7a:	4322      	orrs	r2, r4
 8013b7c:	b292      	uxth	r2, r2
 8013b7e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	685b      	ldr	r3, [r3, #4]
 8013b84:	4618      	mov	r0, r3
 8013b86:	f7fb f98b 	bl	800eea0 <pbuf_clen>
 8013b8a:	4603      	mov	r3, r0
 8013b8c:	461a      	mov	r2, r3
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b94:	4413      	add	r3, r2
 8013b96:	b29a      	uxth	r2, r3
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013b9e:	69fb      	ldr	r3, [r7, #28]
 8013ba0:	685b      	ldr	r3, [r3, #4]
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f7fb f97c 	bl	800eea0 <pbuf_clen>
 8013ba8:	4603      	mov	r3, r0
 8013baa:	461a      	mov	r2, r3
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013bb2:	4413      	add	r3, r2
 8013bb4:	b29a      	uxth	r2, r3
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013bbc:	697b      	ldr	r3, [r7, #20]
 8013bbe:	681a      	ldr	r2, [r3, #0]
 8013bc0:	69fb      	ldr	r3, [r7, #28]
 8013bc2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013bc4:	697b      	ldr	r3, [r7, #20]
 8013bc6:	69fa      	ldr	r2, [r7, #28]
 8013bc8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013bca:	69fb      	ldr	r3, [r7, #28]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d103      	bne.n	8013bda <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013bda:	2300      	movs	r3, #0
 8013bdc:	e016      	b.n	8013c0c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013bde:	bf00      	nop
 8013be0:	e002      	b.n	8013be8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013be2:	bf00      	nop
 8013be4:	e000      	b.n	8013be8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013be6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013be8:	69fb      	ldr	r3, [r7, #28]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d006      	beq.n	8013bfc <tcp_split_unsent_seg+0x25c>
 8013bee:	4b09      	ldr	r3, [pc, #36]	; (8013c14 <tcp_split_unsent_seg+0x274>)
 8013bf0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013bf4:	490d      	ldr	r1, [pc, #52]	; (8013c2c <tcp_split_unsent_seg+0x28c>)
 8013bf6:	4809      	ldr	r0, [pc, #36]	; (8013c1c <tcp_split_unsent_seg+0x27c>)
 8013bf8:	f002 f908 	bl	8015e0c <iprintf>
  if (p != NULL) {
 8013bfc:	693b      	ldr	r3, [r7, #16]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d002      	beq.n	8013c08 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013c02:	6938      	ldr	r0, [r7, #16]
 8013c04:	f7fb f8be 	bl	800ed84 <pbuf_free>
  }

  return ERR_MEM;
 8013c08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3724      	adds	r7, #36	; 0x24
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd90      	pop	{r4, r7, pc}
 8013c14:	0801a8f8 	.word	0x0801a8f8
 8013c18:	0801acd0 	.word	0x0801acd0
 8013c1c:	0801a990 	.word	0x0801a990
 8013c20:	0801acf4 	.word	0x0801acf4
 8013c24:	0801ad18 	.word	0x0801ad18
 8013c28:	0801ad28 	.word	0x0801ad28
 8013c2c:	0801ad38 	.word	0x0801ad38

08013c30 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013c30:	b590      	push	{r4, r7, lr}
 8013c32:	b085      	sub	sp, #20
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d106      	bne.n	8013c4c <tcp_send_fin+0x1c>
 8013c3e:	4b21      	ldr	r3, [pc, #132]	; (8013cc4 <tcp_send_fin+0x94>)
 8013c40:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013c44:	4920      	ldr	r1, [pc, #128]	; (8013cc8 <tcp_send_fin+0x98>)
 8013c46:	4821      	ldr	r0, [pc, #132]	; (8013ccc <tcp_send_fin+0x9c>)
 8013c48:	f002 f8e0 	bl	8015e0c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d02e      	beq.n	8013cb2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c58:	60fb      	str	r3, [r7, #12]
 8013c5a:	e002      	b.n	8013c62 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013c62:	68fb      	ldr	r3, [r7, #12]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d1f8      	bne.n	8013c5c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	68db      	ldr	r3, [r3, #12]
 8013c6e:	899b      	ldrh	r3, [r3, #12]
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	4618      	mov	r0, r3
 8013c74:	f7f9 fc86 	bl	800d584 <lwip_htons>
 8013c78:	4603      	mov	r3, r0
 8013c7a:	b2db      	uxtb	r3, r3
 8013c7c:	f003 0307 	and.w	r3, r3, #7
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d116      	bne.n	8013cb2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	68db      	ldr	r3, [r3, #12]
 8013c88:	899b      	ldrh	r3, [r3, #12]
 8013c8a:	b29c      	uxth	r4, r3
 8013c8c:	2001      	movs	r0, #1
 8013c8e:	f7f9 fc79 	bl	800d584 <lwip_htons>
 8013c92:	4603      	mov	r3, r0
 8013c94:	461a      	mov	r2, r3
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	68db      	ldr	r3, [r3, #12]
 8013c9a:	4322      	orrs	r2, r4
 8013c9c:	b292      	uxth	r2, r2
 8013c9e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	8b5b      	ldrh	r3, [r3, #26]
 8013ca4:	f043 0320 	orr.w	r3, r3, #32
 8013ca8:	b29a      	uxth	r2, r3
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	e004      	b.n	8013cbc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013cb2:	2101      	movs	r1, #1
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f000 f80b 	bl	8013cd0 <tcp_enqueue_flags>
 8013cba:	4603      	mov	r3, r0
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3714      	adds	r7, #20
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd90      	pop	{r4, r7, pc}
 8013cc4:	0801a8f8 	.word	0x0801a8f8
 8013cc8:	0801ad44 	.word	0x0801ad44
 8013ccc:	0801a990 	.word	0x0801a990

08013cd0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b08a      	sub	sp, #40	; 0x28
 8013cd4:	af02      	add	r7, sp, #8
 8013cd6:	6078      	str	r0, [r7, #4]
 8013cd8:	460b      	mov	r3, r1
 8013cda:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013cdc:	2300      	movs	r3, #0
 8013cde:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013ce4:	78fb      	ldrb	r3, [r7, #3]
 8013ce6:	f003 0303 	and.w	r3, r3, #3
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d106      	bne.n	8013cfc <tcp_enqueue_flags+0x2c>
 8013cee:	4b67      	ldr	r3, [pc, #412]	; (8013e8c <tcp_enqueue_flags+0x1bc>)
 8013cf0:	f240 4211 	movw	r2, #1041	; 0x411
 8013cf4:	4966      	ldr	r1, [pc, #408]	; (8013e90 <tcp_enqueue_flags+0x1c0>)
 8013cf6:	4867      	ldr	r0, [pc, #412]	; (8013e94 <tcp_enqueue_flags+0x1c4>)
 8013cf8:	f002 f888 	bl	8015e0c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d106      	bne.n	8013d10 <tcp_enqueue_flags+0x40>
 8013d02:	4b62      	ldr	r3, [pc, #392]	; (8013e8c <tcp_enqueue_flags+0x1bc>)
 8013d04:	f240 4213 	movw	r2, #1043	; 0x413
 8013d08:	4963      	ldr	r1, [pc, #396]	; (8013e98 <tcp_enqueue_flags+0x1c8>)
 8013d0a:	4862      	ldr	r0, [pc, #392]	; (8013e94 <tcp_enqueue_flags+0x1c4>)
 8013d0c:	f002 f87e 	bl	8015e0c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013d10:	78fb      	ldrb	r3, [r7, #3]
 8013d12:	f003 0302 	and.w	r3, r3, #2
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d001      	beq.n	8013d1e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013d1e:	7ffb      	ldrb	r3, [r7, #31]
 8013d20:	009b      	lsls	r3, r3, #2
 8013d22:	b2db      	uxtb	r3, r3
 8013d24:	f003 0304 	and.w	r3, r3, #4
 8013d28:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013d2a:	7dfb      	ldrb	r3, [r7, #23]
 8013d2c:	b29b      	uxth	r3, r3
 8013d2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d32:	4619      	mov	r1, r3
 8013d34:	2036      	movs	r0, #54	; 0x36
 8013d36:	f7fa fd43 	bl	800e7c0 <pbuf_alloc>
 8013d3a:	6138      	str	r0, [r7, #16]
 8013d3c:	693b      	ldr	r3, [r7, #16]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d109      	bne.n	8013d56 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	8b5b      	ldrh	r3, [r3, #26]
 8013d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d4a:	b29a      	uxth	r2, r3
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d54:	e095      	b.n	8013e82 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013d56:	693b      	ldr	r3, [r7, #16]
 8013d58:	895a      	ldrh	r2, [r3, #10]
 8013d5a:	7dfb      	ldrb	r3, [r7, #23]
 8013d5c:	b29b      	uxth	r3, r3
 8013d5e:	429a      	cmp	r2, r3
 8013d60:	d206      	bcs.n	8013d70 <tcp_enqueue_flags+0xa0>
 8013d62:	4b4a      	ldr	r3, [pc, #296]	; (8013e8c <tcp_enqueue_flags+0x1bc>)
 8013d64:	f240 4239 	movw	r2, #1081	; 0x439
 8013d68:	494c      	ldr	r1, [pc, #304]	; (8013e9c <tcp_enqueue_flags+0x1cc>)
 8013d6a:	484a      	ldr	r0, [pc, #296]	; (8013e94 <tcp_enqueue_flags+0x1c4>)
 8013d6c:	f002 f84e 	bl	8015e0c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013d74:	78fa      	ldrb	r2, [r7, #3]
 8013d76:	7ffb      	ldrb	r3, [r7, #31]
 8013d78:	9300      	str	r3, [sp, #0]
 8013d7a:	460b      	mov	r3, r1
 8013d7c:	6939      	ldr	r1, [r7, #16]
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f7ff f918 	bl	8012fb4 <tcp_create_segment>
 8013d84:	60f8      	str	r0, [r7, #12]
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d109      	bne.n	8013da0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	8b5b      	ldrh	r3, [r3, #26]
 8013d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013d94:	b29a      	uxth	r2, r3
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d9e:	e070      	b.n	8013e82 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	68db      	ldr	r3, [r3, #12]
 8013da4:	f003 0303 	and.w	r3, r3, #3
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d006      	beq.n	8013dba <tcp_enqueue_flags+0xea>
 8013dac:	4b37      	ldr	r3, [pc, #220]	; (8013e8c <tcp_enqueue_flags+0x1bc>)
 8013dae:	f240 4242 	movw	r2, #1090	; 0x442
 8013db2:	493b      	ldr	r1, [pc, #236]	; (8013ea0 <tcp_enqueue_flags+0x1d0>)
 8013db4:	4837      	ldr	r0, [pc, #220]	; (8013e94 <tcp_enqueue_flags+0x1c4>)
 8013db6:	f002 f829 	bl	8015e0c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	891b      	ldrh	r3, [r3, #8]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d006      	beq.n	8013dd0 <tcp_enqueue_flags+0x100>
 8013dc2:	4b32      	ldr	r3, [pc, #200]	; (8013e8c <tcp_enqueue_flags+0x1bc>)
 8013dc4:	f240 4243 	movw	r2, #1091	; 0x443
 8013dc8:	4936      	ldr	r1, [pc, #216]	; (8013ea4 <tcp_enqueue_flags+0x1d4>)
 8013dca:	4832      	ldr	r0, [pc, #200]	; (8013e94 <tcp_enqueue_flags+0x1c4>)
 8013dcc:	f002 f81e 	bl	8015e0c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d103      	bne.n	8013de0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	68fa      	ldr	r2, [r7, #12]
 8013ddc:	66da      	str	r2, [r3, #108]	; 0x6c
 8013dde:	e00d      	b.n	8013dfc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013de4:	61bb      	str	r3, [r7, #24]
 8013de6:	e002      	b.n	8013dee <tcp_enqueue_flags+0x11e>
 8013de8:	69bb      	ldr	r3, [r7, #24]
 8013dea:	681b      	ldr	r3, [r3, #0]
 8013dec:	61bb      	str	r3, [r7, #24]
 8013dee:	69bb      	ldr	r3, [r7, #24]
 8013df0:	681b      	ldr	r3, [r3, #0]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d1f8      	bne.n	8013de8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8013df6:	69bb      	ldr	r3, [r7, #24]
 8013df8:	68fa      	ldr	r2, [r7, #12]
 8013dfa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2200      	movs	r2, #0
 8013e00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8013e04:	78fb      	ldrb	r3, [r7, #3]
 8013e06:	f003 0302 	and.w	r3, r3, #2
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d104      	bne.n	8013e18 <tcp_enqueue_flags+0x148>
 8013e0e:	78fb      	ldrb	r3, [r7, #3]
 8013e10:	f003 0301 	and.w	r3, r3, #1
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d004      	beq.n	8013e22 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8013e1c:	1c5a      	adds	r2, r3, #1
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8013e22:	78fb      	ldrb	r3, [r7, #3]
 8013e24:	f003 0301 	and.w	r3, r3, #1
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d006      	beq.n	8013e3a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	8b5b      	ldrh	r3, [r3, #26]
 8013e30:	f043 0320 	orr.w	r3, r3, #32
 8013e34:	b29a      	uxth	r2, r3
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	685b      	ldr	r3, [r3, #4]
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f7fb f82e 	bl	800eea0 <pbuf_clen>
 8013e44:	4603      	mov	r3, r0
 8013e46:	461a      	mov	r2, r3
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e4e:	4413      	add	r3, r2
 8013e50:	b29a      	uxth	r2, r3
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d00e      	beq.n	8013e80 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013e62:	687b      	ldr	r3, [r7, #4]
 8013e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d10a      	bne.n	8013e80 <tcp_enqueue_flags+0x1b0>
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d106      	bne.n	8013e80 <tcp_enqueue_flags+0x1b0>
 8013e72:	4b06      	ldr	r3, [pc, #24]	; (8013e8c <tcp_enqueue_flags+0x1bc>)
 8013e74:	f240 4265 	movw	r2, #1125	; 0x465
 8013e78:	490b      	ldr	r1, [pc, #44]	; (8013ea8 <tcp_enqueue_flags+0x1d8>)
 8013e7a:	4806      	ldr	r0, [pc, #24]	; (8013e94 <tcp_enqueue_flags+0x1c4>)
 8013e7c:	f001 ffc6 	bl	8015e0c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013e80:	2300      	movs	r3, #0
}
 8013e82:	4618      	mov	r0, r3
 8013e84:	3720      	adds	r7, #32
 8013e86:	46bd      	mov	sp, r7
 8013e88:	bd80      	pop	{r7, pc}
 8013e8a:	bf00      	nop
 8013e8c:	0801a8f8 	.word	0x0801a8f8
 8013e90:	0801ad60 	.word	0x0801ad60
 8013e94:	0801a990 	.word	0x0801a990
 8013e98:	0801adb8 	.word	0x0801adb8
 8013e9c:	0801add8 	.word	0x0801add8
 8013ea0:	0801ae14 	.word	0x0801ae14
 8013ea4:	0801ae2c 	.word	0x0801ae2c
 8013ea8:	0801ae58 	.word	0x0801ae58

08013eac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8013eac:	b5b0      	push	{r4, r5, r7, lr}
 8013eae:	b08a      	sub	sp, #40	; 0x28
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d106      	bne.n	8013ec8 <tcp_output+0x1c>
 8013eba:	4b9e      	ldr	r3, [pc, #632]	; (8014134 <tcp_output+0x288>)
 8013ebc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8013ec0:	499d      	ldr	r1, [pc, #628]	; (8014138 <tcp_output+0x28c>)
 8013ec2:	489e      	ldr	r0, [pc, #632]	; (801413c <tcp_output+0x290>)
 8013ec4:	f001 ffa2 	bl	8015e0c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	7d1b      	ldrb	r3, [r3, #20]
 8013ecc:	2b01      	cmp	r3, #1
 8013ece:	d106      	bne.n	8013ede <tcp_output+0x32>
 8013ed0:	4b98      	ldr	r3, [pc, #608]	; (8014134 <tcp_output+0x288>)
 8013ed2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8013ed6:	499a      	ldr	r1, [pc, #616]	; (8014140 <tcp_output+0x294>)
 8013ed8:	4898      	ldr	r0, [pc, #608]	; (801413c <tcp_output+0x290>)
 8013eda:	f001 ff97 	bl	8015e0c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8013ede:	4b99      	ldr	r3, [pc, #612]	; (8014144 <tcp_output+0x298>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	687a      	ldr	r2, [r7, #4]
 8013ee4:	429a      	cmp	r2, r3
 8013ee6:	d101      	bne.n	8013eec <tcp_output+0x40>
    return ERR_OK;
 8013ee8:	2300      	movs	r3, #0
 8013eea:	e1ce      	b.n	801428a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013ef8:	4293      	cmp	r3, r2
 8013efa:	bf28      	it	cs
 8013efc:	4613      	movcs	r3, r2
 8013efe:	b29b      	uxth	r3, r3
 8013f00:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f06:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8013f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	d10b      	bne.n	8013f26 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	8b5b      	ldrh	r3, [r3, #26]
 8013f12:	f003 0302 	and.w	r3, r3, #2
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	f000 81aa 	beq.w	8014270 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	f000 fdcb 	bl	8014ab8 <tcp_send_empty_ack>
 8013f22:	4603      	mov	r3, r0
 8013f24:	e1b1      	b.n	801428a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013f26:	6879      	ldr	r1, [r7, #4]
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	3304      	adds	r3, #4
 8013f2c:	461a      	mov	r2, r3
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f7ff f824 	bl	8012f7c <tcp_route>
 8013f34:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8013f36:	697b      	ldr	r3, [r7, #20]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d102      	bne.n	8013f42 <tcp_output+0x96>
    return ERR_RTE;
 8013f3c:	f06f 0303 	mvn.w	r3, #3
 8013f40:	e1a3      	b.n	801428a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d003      	beq.n	8013f50 <tcp_output+0xa4>
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d111      	bne.n	8013f74 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8013f50:	697b      	ldr	r3, [r7, #20]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d002      	beq.n	8013f5c <tcp_output+0xb0>
 8013f56:	697b      	ldr	r3, [r7, #20]
 8013f58:	3304      	adds	r3, #4
 8013f5a:	e000      	b.n	8013f5e <tcp_output+0xb2>
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8013f60:	693b      	ldr	r3, [r7, #16]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d102      	bne.n	8013f6c <tcp_output+0xc0>
      return ERR_RTE;
 8013f66:	f06f 0303 	mvn.w	r3, #3
 8013f6a:	e18e      	b.n	801428a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8013f6c:	693b      	ldr	r3, [r7, #16]
 8013f6e:	681a      	ldr	r2, [r3, #0]
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8013f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f76:	68db      	ldr	r3, [r3, #12]
 8013f78:	685b      	ldr	r3, [r3, #4]
 8013f7a:	4618      	mov	r0, r3
 8013f7c:	f7f9 fb17 	bl	800d5ae <lwip_htonl>
 8013f80:	4602      	mov	r2, r0
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f86:	1ad3      	subs	r3, r2, r3
 8013f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f8a:	8912      	ldrh	r2, [r2, #8]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	69ba      	ldr	r2, [r7, #24]
 8013f90:	429a      	cmp	r2, r3
 8013f92:	d227      	bcs.n	8013fe4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013f9a:	461a      	mov	r2, r3
 8013f9c:	69bb      	ldr	r3, [r7, #24]
 8013f9e:	4293      	cmp	r3, r2
 8013fa0:	d114      	bne.n	8013fcc <tcp_output+0x120>
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d110      	bne.n	8013fcc <tcp_output+0x120>
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d10b      	bne.n	8013fcc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2200      	movs	r2, #0
 8013fb8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
      pcb->persist_probe = 0;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	8b5b      	ldrh	r3, [r3, #26]
 8013fd0:	f003 0302 	and.w	r3, r3, #2
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	f000 814d 	beq.w	8014274 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8013fda:	6878      	ldr	r0, [r7, #4]
 8013fdc:	f000 fd6c 	bl	8014ab8 <tcp_send_empty_ack>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	e152      	b.n	801428a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ff0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8013ff2:	6a3b      	ldr	r3, [r7, #32]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	f000 811c 	beq.w	8014232 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8013ffa:	e002      	b.n	8014002 <tcp_output+0x156>
 8013ffc:	6a3b      	ldr	r3, [r7, #32]
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	623b      	str	r3, [r7, #32]
 8014002:	6a3b      	ldr	r3, [r7, #32]
 8014004:	681b      	ldr	r3, [r3, #0]
 8014006:	2b00      	cmp	r3, #0
 8014008:	d1f8      	bne.n	8013ffc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801400a:	e112      	b.n	8014232 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801400c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801400e:	68db      	ldr	r3, [r3, #12]
 8014010:	899b      	ldrh	r3, [r3, #12]
 8014012:	b29b      	uxth	r3, r3
 8014014:	4618      	mov	r0, r3
 8014016:	f7f9 fab5 	bl	800d584 <lwip_htons>
 801401a:	4603      	mov	r3, r0
 801401c:	b2db      	uxtb	r3, r3
 801401e:	f003 0304 	and.w	r3, r3, #4
 8014022:	2b00      	cmp	r3, #0
 8014024:	d006      	beq.n	8014034 <tcp_output+0x188>
 8014026:	4b43      	ldr	r3, [pc, #268]	; (8014134 <tcp_output+0x288>)
 8014028:	f240 5236 	movw	r2, #1334	; 0x536
 801402c:	4946      	ldr	r1, [pc, #280]	; (8014148 <tcp_output+0x29c>)
 801402e:	4843      	ldr	r0, [pc, #268]	; (801413c <tcp_output+0x290>)
 8014030:	f001 feec 	bl	8015e0c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014038:	2b00      	cmp	r3, #0
 801403a:	d01f      	beq.n	801407c <tcp_output+0x1d0>
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	8b5b      	ldrh	r3, [r3, #26]
 8014040:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014044:	2b00      	cmp	r3, #0
 8014046:	d119      	bne.n	801407c <tcp_output+0x1d0>
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801404c:	2b00      	cmp	r3, #0
 801404e:	d00b      	beq.n	8014068 <tcp_output+0x1bc>
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d110      	bne.n	801407c <tcp_output+0x1d0>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801405e:	891a      	ldrh	r2, [r3, #8]
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014064:	429a      	cmp	r2, r3
 8014066:	d209      	bcs.n	801407c <tcp_output+0x1d0>
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801406e:	2b00      	cmp	r3, #0
 8014070:	d004      	beq.n	801407c <tcp_output+0x1d0>
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014078:	2b07      	cmp	r3, #7
 801407a:	d901      	bls.n	8014080 <tcp_output+0x1d4>
 801407c:	2301      	movs	r3, #1
 801407e:	e000      	b.n	8014082 <tcp_output+0x1d6>
 8014080:	2300      	movs	r3, #0
 8014082:	2b00      	cmp	r3, #0
 8014084:	d106      	bne.n	8014094 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	8b5b      	ldrh	r3, [r3, #26]
 801408a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801408e:	2b00      	cmp	r3, #0
 8014090:	f000 80e4 	beq.w	801425c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014094:	687b      	ldr	r3, [r7, #4]
 8014096:	7d1b      	ldrb	r3, [r3, #20]
 8014098:	2b02      	cmp	r3, #2
 801409a:	d00d      	beq.n	80140b8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801409e:	68db      	ldr	r3, [r3, #12]
 80140a0:	899b      	ldrh	r3, [r3, #12]
 80140a2:	b29c      	uxth	r4, r3
 80140a4:	2010      	movs	r0, #16
 80140a6:	f7f9 fa6d 	bl	800d584 <lwip_htons>
 80140aa:	4603      	mov	r3, r0
 80140ac:	461a      	mov	r2, r3
 80140ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b0:	68db      	ldr	r3, [r3, #12]
 80140b2:	4322      	orrs	r2, r4
 80140b4:	b292      	uxth	r2, r2
 80140b6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80140b8:	697a      	ldr	r2, [r7, #20]
 80140ba:	6879      	ldr	r1, [r7, #4]
 80140bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80140be:	f000 f909 	bl	80142d4 <tcp_output_segment>
 80140c2:	4603      	mov	r3, r0
 80140c4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80140c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d009      	beq.n	80140e2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	8b5b      	ldrh	r3, [r3, #26]
 80140d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	835a      	strh	r2, [r3, #26]
      return err;
 80140dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140e0:	e0d3      	b.n	801428a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80140e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e4:	681a      	ldr	r2, [r3, #0]
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	7d1b      	ldrb	r3, [r3, #20]
 80140ee:	2b02      	cmp	r3, #2
 80140f0:	d006      	beq.n	8014100 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	8b5b      	ldrh	r3, [r3, #26]
 80140f6:	f023 0303 	bic.w	r3, r3, #3
 80140fa:	b29a      	uxth	r2, r3
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014102:	68db      	ldr	r3, [r3, #12]
 8014104:	685b      	ldr	r3, [r3, #4]
 8014106:	4618      	mov	r0, r3
 8014108:	f7f9 fa51 	bl	800d5ae <lwip_htonl>
 801410c:	4604      	mov	r4, r0
 801410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014110:	891b      	ldrh	r3, [r3, #8]
 8014112:	461d      	mov	r5, r3
 8014114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014116:	68db      	ldr	r3, [r3, #12]
 8014118:	899b      	ldrh	r3, [r3, #12]
 801411a:	b29b      	uxth	r3, r3
 801411c:	4618      	mov	r0, r3
 801411e:	f7f9 fa31 	bl	800d584 <lwip_htons>
 8014122:	4603      	mov	r3, r0
 8014124:	b2db      	uxtb	r3, r3
 8014126:	f003 0303 	and.w	r3, r3, #3
 801412a:	2b00      	cmp	r3, #0
 801412c:	d00e      	beq.n	801414c <tcp_output+0x2a0>
 801412e:	2301      	movs	r3, #1
 8014130:	e00d      	b.n	801414e <tcp_output+0x2a2>
 8014132:	bf00      	nop
 8014134:	0801a8f8 	.word	0x0801a8f8
 8014138:	0801ae80 	.word	0x0801ae80
 801413c:	0801a990 	.word	0x0801a990
 8014140:	0801ae98 	.word	0x0801ae98
 8014144:	2400a798 	.word	0x2400a798
 8014148:	0801aec0 	.word	0x0801aec0
 801414c:	2300      	movs	r3, #0
 801414e:	442b      	add	r3, r5
 8014150:	4423      	add	r3, r4
 8014152:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	1ad3      	subs	r3, r2, r3
 801415c:	2b00      	cmp	r3, #0
 801415e:	da02      	bge.n	8014166 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	68ba      	ldr	r2, [r7, #8]
 8014164:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014168:	891b      	ldrh	r3, [r3, #8]
 801416a:	461c      	mov	r4, r3
 801416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801416e:	68db      	ldr	r3, [r3, #12]
 8014170:	899b      	ldrh	r3, [r3, #12]
 8014172:	b29b      	uxth	r3, r3
 8014174:	4618      	mov	r0, r3
 8014176:	f7f9 fa05 	bl	800d584 <lwip_htons>
 801417a:	4603      	mov	r3, r0
 801417c:	b2db      	uxtb	r3, r3
 801417e:	f003 0303 	and.w	r3, r3, #3
 8014182:	2b00      	cmp	r3, #0
 8014184:	d001      	beq.n	801418a <tcp_output+0x2de>
 8014186:	2301      	movs	r3, #1
 8014188:	e000      	b.n	801418c <tcp_output+0x2e0>
 801418a:	2300      	movs	r3, #0
 801418c:	4423      	add	r3, r4
 801418e:	2b00      	cmp	r3, #0
 8014190:	d049      	beq.n	8014226 <tcp_output+0x37a>
      seg->next = NULL;
 8014192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014194:	2200      	movs	r2, #0
 8014196:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801419c:	2b00      	cmp	r3, #0
 801419e:	d105      	bne.n	80141ac <tcp_output+0x300>
        pcb->unacked = seg;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141a4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80141a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a8:	623b      	str	r3, [r7, #32]
 80141aa:	e03f      	b.n	801422c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80141ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ae:	68db      	ldr	r3, [r3, #12]
 80141b0:	685b      	ldr	r3, [r3, #4]
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7f9 f9fb 	bl	800d5ae <lwip_htonl>
 80141b8:	4604      	mov	r4, r0
 80141ba:	6a3b      	ldr	r3, [r7, #32]
 80141bc:	68db      	ldr	r3, [r3, #12]
 80141be:	685b      	ldr	r3, [r3, #4]
 80141c0:	4618      	mov	r0, r3
 80141c2:	f7f9 f9f4 	bl	800d5ae <lwip_htonl>
 80141c6:	4603      	mov	r3, r0
 80141c8:	1ae3      	subs	r3, r4, r3
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	da24      	bge.n	8014218 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	3370      	adds	r3, #112	; 0x70
 80141d2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80141d4:	e002      	b.n	80141dc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80141d6:	69fb      	ldr	r3, [r7, #28]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80141dc:	69fb      	ldr	r3, [r7, #28]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d011      	beq.n	8014208 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80141e4:	69fb      	ldr	r3, [r7, #28]
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	68db      	ldr	r3, [r3, #12]
 80141ea:	685b      	ldr	r3, [r3, #4]
 80141ec:	4618      	mov	r0, r3
 80141ee:	f7f9 f9de 	bl	800d5ae <lwip_htonl>
 80141f2:	4604      	mov	r4, r0
 80141f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141f6:	68db      	ldr	r3, [r3, #12]
 80141f8:	685b      	ldr	r3, [r3, #4]
 80141fa:	4618      	mov	r0, r3
 80141fc:	f7f9 f9d7 	bl	800d5ae <lwip_htonl>
 8014200:	4603      	mov	r3, r0
 8014202:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014204:	2b00      	cmp	r3, #0
 8014206:	dbe6      	blt.n	80141d6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014208:	69fb      	ldr	r3, [r7, #28]
 801420a:	681a      	ldr	r2, [r3, #0]
 801420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014210:	69fb      	ldr	r3, [r7, #28]
 8014212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014214:	601a      	str	r2, [r3, #0]
 8014216:	e009      	b.n	801422c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014218:	6a3b      	ldr	r3, [r7, #32]
 801421a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801421c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801421e:	6a3b      	ldr	r3, [r7, #32]
 8014220:	681b      	ldr	r3, [r3, #0]
 8014222:	623b      	str	r3, [r7, #32]
 8014224:	e002      	b.n	801422c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014226:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014228:	f7fc fb2b 	bl	8010882 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014230:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014234:	2b00      	cmp	r3, #0
 8014236:	d012      	beq.n	801425e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423a:	68db      	ldr	r3, [r3, #12]
 801423c:	685b      	ldr	r3, [r3, #4]
 801423e:	4618      	mov	r0, r3
 8014240:	f7f9 f9b5 	bl	800d5ae <lwip_htonl>
 8014244:	4602      	mov	r2, r0
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801424a:	1ad3      	subs	r3, r2, r3
 801424c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801424e:	8912      	ldrh	r2, [r2, #8]
 8014250:	4413      	add	r3, r2
  while (seg != NULL &&
 8014252:	69ba      	ldr	r2, [r7, #24]
 8014254:	429a      	cmp	r2, r3
 8014256:	f4bf aed9 	bcs.w	801400c <tcp_output+0x160>
 801425a:	e000      	b.n	801425e <tcp_output+0x3b2>
      break;
 801425c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014262:	2b00      	cmp	r3, #0
 8014264:	d108      	bne.n	8014278 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	2200      	movs	r2, #0
 801426a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801426e:	e004      	b.n	801427a <tcp_output+0x3ce>
    goto output_done;
 8014270:	bf00      	nop
 8014272:	e002      	b.n	801427a <tcp_output+0x3ce>
    goto output_done;
 8014274:	bf00      	nop
 8014276:	e000      	b.n	801427a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014278:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	8b5b      	ldrh	r3, [r3, #26]
 801427e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014282:	b29a      	uxth	r2, r3
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014288:	2300      	movs	r3, #0
}
 801428a:	4618      	mov	r0, r3
 801428c:	3728      	adds	r7, #40	; 0x28
 801428e:	46bd      	mov	sp, r7
 8014290:	bdb0      	pop	{r4, r5, r7, pc}
 8014292:	bf00      	nop

08014294 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b082      	sub	sp, #8
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d106      	bne.n	80142b0 <tcp_output_segment_busy+0x1c>
 80142a2:	4b09      	ldr	r3, [pc, #36]	; (80142c8 <tcp_output_segment_busy+0x34>)
 80142a4:	f240 529a 	movw	r2, #1434	; 0x59a
 80142a8:	4908      	ldr	r1, [pc, #32]	; (80142cc <tcp_output_segment_busy+0x38>)
 80142aa:	4809      	ldr	r0, [pc, #36]	; (80142d0 <tcp_output_segment_busy+0x3c>)
 80142ac:	f001 fdae 	bl	8015e0c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	685b      	ldr	r3, [r3, #4]
 80142b4:	7b9b      	ldrb	r3, [r3, #14]
 80142b6:	2b01      	cmp	r3, #1
 80142b8:	d001      	beq.n	80142be <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80142ba:	2301      	movs	r3, #1
 80142bc:	e000      	b.n	80142c0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80142be:	2300      	movs	r3, #0
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3708      	adds	r7, #8
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}
 80142c8:	0801a8f8 	.word	0x0801a8f8
 80142cc:	0801aed8 	.word	0x0801aed8
 80142d0:	0801a990 	.word	0x0801a990

080142d4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80142d4:	b5b0      	push	{r4, r5, r7, lr}
 80142d6:	b08c      	sub	sp, #48	; 0x30
 80142d8:	af04      	add	r7, sp, #16
 80142da:	60f8      	str	r0, [r7, #12]
 80142dc:	60b9      	str	r1, [r7, #8]
 80142de:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d106      	bne.n	80142f4 <tcp_output_segment+0x20>
 80142e6:	4b63      	ldr	r3, [pc, #396]	; (8014474 <tcp_output_segment+0x1a0>)
 80142e8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80142ec:	4962      	ldr	r1, [pc, #392]	; (8014478 <tcp_output_segment+0x1a4>)
 80142ee:	4863      	ldr	r0, [pc, #396]	; (801447c <tcp_output_segment+0x1a8>)
 80142f0:	f001 fd8c 	bl	8015e0c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d106      	bne.n	8014308 <tcp_output_segment+0x34>
 80142fa:	4b5e      	ldr	r3, [pc, #376]	; (8014474 <tcp_output_segment+0x1a0>)
 80142fc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014300:	495f      	ldr	r1, [pc, #380]	; (8014480 <tcp_output_segment+0x1ac>)
 8014302:	485e      	ldr	r0, [pc, #376]	; (801447c <tcp_output_segment+0x1a8>)
 8014304:	f001 fd82 	bl	8015e0c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d106      	bne.n	801431c <tcp_output_segment+0x48>
 801430e:	4b59      	ldr	r3, [pc, #356]	; (8014474 <tcp_output_segment+0x1a0>)
 8014310:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014314:	495b      	ldr	r1, [pc, #364]	; (8014484 <tcp_output_segment+0x1b0>)
 8014316:	4859      	ldr	r0, [pc, #356]	; (801447c <tcp_output_segment+0x1a8>)
 8014318:	f001 fd78 	bl	8015e0c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801431c:	68f8      	ldr	r0, [r7, #12]
 801431e:	f7ff ffb9 	bl	8014294 <tcp_output_segment_busy>
 8014322:	4603      	mov	r3, r0
 8014324:	2b00      	cmp	r3, #0
 8014326:	d001      	beq.n	801432c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014328:	2300      	movs	r3, #0
 801432a:	e09f      	b.n	801446c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	68dc      	ldr	r4, [r3, #12]
 8014334:	4610      	mov	r0, r2
 8014336:	f7f9 f93a 	bl	800d5ae <lwip_htonl>
 801433a:	4603      	mov	r3, r0
 801433c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801433e:	68bb      	ldr	r3, [r7, #8]
 8014340:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	68dc      	ldr	r4, [r3, #12]
 8014346:	4610      	mov	r0, r2
 8014348:	f7f9 f91c 	bl	800d584 <lwip_htons>
 801434c:	4603      	mov	r3, r0
 801434e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014350:	68bb      	ldr	r3, [r7, #8]
 8014352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014354:	68ba      	ldr	r2, [r7, #8]
 8014356:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014358:	441a      	add	r2, r3
 801435a:	68bb      	ldr	r3, [r7, #8]
 801435c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801435e:	68fb      	ldr	r3, [r7, #12]
 8014360:	68db      	ldr	r3, [r3, #12]
 8014362:	3314      	adds	r3, #20
 8014364:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	7a9b      	ldrb	r3, [r3, #10]
 801436a:	f003 0301 	and.w	r3, r3, #1
 801436e:	2b00      	cmp	r3, #0
 8014370:	d015      	beq.n	801439e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014372:	68bb      	ldr	r3, [r7, #8]
 8014374:	3304      	adds	r3, #4
 8014376:	461a      	mov	r2, r3
 8014378:	6879      	ldr	r1, [r7, #4]
 801437a:	f240 50b4 	movw	r0, #1460	; 0x5b4
 801437e:	f7fc fe03 	bl	8010f88 <tcp_eff_send_mss_netif>
 8014382:	4603      	mov	r3, r0
 8014384:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014386:	8b7b      	ldrh	r3, [r7, #26]
 8014388:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801438c:	4618      	mov	r0, r3
 801438e:	f7f9 f90e 	bl	800d5ae <lwip_htonl>
 8014392:	4602      	mov	r2, r0
 8014394:	69fb      	ldr	r3, [r7, #28]
 8014396:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	3304      	adds	r3, #4
 801439c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	da02      	bge.n	80143ae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80143a8:	68bb      	ldr	r3, [r7, #8]
 80143aa:	2200      	movs	r2, #0
 80143ac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80143ae:	68bb      	ldr	r3, [r7, #8]
 80143b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d10c      	bne.n	80143d0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80143b6:	4b34      	ldr	r3, [pc, #208]	; (8014488 <tcp_output_segment+0x1b4>)
 80143b8:	681a      	ldr	r2, [r3, #0]
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80143be:	68fb      	ldr	r3, [r7, #12]
 80143c0:	68db      	ldr	r3, [r3, #12]
 80143c2:	685b      	ldr	r3, [r3, #4]
 80143c4:	4618      	mov	r0, r3
 80143c6:	f7f9 f8f2 	bl	800d5ae <lwip_htonl>
 80143ca:	4602      	mov	r2, r0
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	68da      	ldr	r2, [r3, #12]
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	1ad3      	subs	r3, r2, r3
 80143dc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	685b      	ldr	r3, [r3, #4]
 80143e2:	8959      	ldrh	r1, [r3, #10]
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	685b      	ldr	r3, [r3, #4]
 80143e8:	8b3a      	ldrh	r2, [r7, #24]
 80143ea:	1a8a      	subs	r2, r1, r2
 80143ec:	b292      	uxth	r2, r2
 80143ee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	685b      	ldr	r3, [r3, #4]
 80143f4:	8919      	ldrh	r1, [r3, #8]
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	685b      	ldr	r3, [r3, #4]
 80143fa:	8b3a      	ldrh	r2, [r7, #24]
 80143fc:	1a8a      	subs	r2, r1, r2
 80143fe:	b292      	uxth	r2, r2
 8014400:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014402:	68fb      	ldr	r3, [r7, #12]
 8014404:	685b      	ldr	r3, [r3, #4]
 8014406:	68fa      	ldr	r2, [r7, #12]
 8014408:	68d2      	ldr	r2, [r2, #12]
 801440a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	68db      	ldr	r3, [r3, #12]
 8014410:	2200      	movs	r2, #0
 8014412:	741a      	strb	r2, [r3, #16]
 8014414:	2200      	movs	r2, #0
 8014416:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	68db      	ldr	r3, [r3, #12]
 801441c:	f103 0214 	add.w	r2, r3, #20
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	7a9b      	ldrb	r3, [r3, #10]
 8014424:	009b      	lsls	r3, r3, #2
 8014426:	f003 0304 	and.w	r3, r3, #4
 801442a:	4413      	add	r3, r2
 801442c:	69fa      	ldr	r2, [r7, #28]
 801442e:	429a      	cmp	r2, r3
 8014430:	d006      	beq.n	8014440 <tcp_output_segment+0x16c>
 8014432:	4b10      	ldr	r3, [pc, #64]	; (8014474 <tcp_output_segment+0x1a0>)
 8014434:	f240 621c 	movw	r2, #1564	; 0x61c
 8014438:	4914      	ldr	r1, [pc, #80]	; (801448c <tcp_output_segment+0x1b8>)
 801443a:	4810      	ldr	r0, [pc, #64]	; (801447c <tcp_output_segment+0x1a8>)
 801443c:	f001 fce6 	bl	8015e0c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	6858      	ldr	r0, [r3, #4]
 8014444:	68b9      	ldr	r1, [r7, #8]
 8014446:	68bb      	ldr	r3, [r7, #8]
 8014448:	1d1c      	adds	r4, r3, #4
 801444a:	68bb      	ldr	r3, [r7, #8]
 801444c:	7add      	ldrb	r5, [r3, #11]
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	7a9b      	ldrb	r3, [r3, #10]
 8014452:	687a      	ldr	r2, [r7, #4]
 8014454:	9202      	str	r2, [sp, #8]
 8014456:	2206      	movs	r2, #6
 8014458:	9201      	str	r2, [sp, #4]
 801445a:	9300      	str	r3, [sp, #0]
 801445c:	462b      	mov	r3, r5
 801445e:	4622      	mov	r2, r4
 8014460:	f7f8 f93e 	bl	800c6e0 <ip4_output_if>
 8014464:	4603      	mov	r3, r0
 8014466:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014468:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801446c:	4618      	mov	r0, r3
 801446e:	3720      	adds	r7, #32
 8014470:	46bd      	mov	sp, r7
 8014472:	bdb0      	pop	{r4, r5, r7, pc}
 8014474:	0801a8f8 	.word	0x0801a8f8
 8014478:	0801af00 	.word	0x0801af00
 801447c:	0801a990 	.word	0x0801a990
 8014480:	0801af20 	.word	0x0801af20
 8014484:	0801af40 	.word	0x0801af40
 8014488:	2400a788 	.word	0x2400a788
 801448c:	0801af64 	.word	0x0801af64

08014490 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014490:	b5b0      	push	{r4, r5, r7, lr}
 8014492:	b084      	sub	sp, #16
 8014494:	af00      	add	r7, sp, #0
 8014496:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	2b00      	cmp	r3, #0
 801449c:	d106      	bne.n	80144ac <tcp_rexmit_rto_prepare+0x1c>
 801449e:	4b31      	ldr	r3, [pc, #196]	; (8014564 <tcp_rexmit_rto_prepare+0xd4>)
 80144a0:	f240 6263 	movw	r2, #1635	; 0x663
 80144a4:	4930      	ldr	r1, [pc, #192]	; (8014568 <tcp_rexmit_rto_prepare+0xd8>)
 80144a6:	4831      	ldr	r0, [pc, #196]	; (801456c <tcp_rexmit_rto_prepare+0xdc>)
 80144a8:	f001 fcb0 	bl	8015e0c <iprintf>

  if (pcb->unacked == NULL) {
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d102      	bne.n	80144ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80144b4:	f06f 0305 	mvn.w	r3, #5
 80144b8:	e050      	b.n	801455c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144be:	60fb      	str	r3, [r7, #12]
 80144c0:	e00b      	b.n	80144da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80144c2:	68f8      	ldr	r0, [r7, #12]
 80144c4:	f7ff fee6 	bl	8014294 <tcp_output_segment_busy>
 80144c8:	4603      	mov	r3, r0
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d002      	beq.n	80144d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80144ce:	f06f 0305 	mvn.w	r3, #5
 80144d2:	e043      	b.n	801455c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	60fb      	str	r3, [r7, #12]
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d1ef      	bne.n	80144c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80144e2:	68f8      	ldr	r0, [r7, #12]
 80144e4:	f7ff fed6 	bl	8014294 <tcp_output_segment_busy>
 80144e8:	4603      	mov	r3, r0
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d002      	beq.n	80144f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80144ee:	f06f 0305 	mvn.w	r3, #5
 80144f2:	e033      	b.n	801455c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2200      	movs	r2, #0
 8014508:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	8b5b      	ldrh	r3, [r3, #26]
 801450e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014512:	b29a      	uxth	r2, r3
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	68db      	ldr	r3, [r3, #12]
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	4618      	mov	r0, r3
 8014520:	f7f9 f845 	bl	800d5ae <lwip_htonl>
 8014524:	4604      	mov	r4, r0
 8014526:	68fb      	ldr	r3, [r7, #12]
 8014528:	891b      	ldrh	r3, [r3, #8]
 801452a:	461d      	mov	r5, r3
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	68db      	ldr	r3, [r3, #12]
 8014530:	899b      	ldrh	r3, [r3, #12]
 8014532:	b29b      	uxth	r3, r3
 8014534:	4618      	mov	r0, r3
 8014536:	f7f9 f825 	bl	800d584 <lwip_htons>
 801453a:	4603      	mov	r3, r0
 801453c:	b2db      	uxtb	r3, r3
 801453e:	f003 0303 	and.w	r3, r3, #3
 8014542:	2b00      	cmp	r3, #0
 8014544:	d001      	beq.n	801454a <tcp_rexmit_rto_prepare+0xba>
 8014546:	2301      	movs	r3, #1
 8014548:	e000      	b.n	801454c <tcp_rexmit_rto_prepare+0xbc>
 801454a:	2300      	movs	r3, #0
 801454c:	442b      	add	r3, r5
 801454e:	18e2      	adds	r2, r4, r3
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	2200      	movs	r2, #0
 8014558:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801455a:	2300      	movs	r3, #0
}
 801455c:	4618      	mov	r0, r3
 801455e:	3710      	adds	r7, #16
 8014560:	46bd      	mov	sp, r7
 8014562:	bdb0      	pop	{r4, r5, r7, pc}
 8014564:	0801a8f8 	.word	0x0801a8f8
 8014568:	0801af78 	.word	0x0801af78
 801456c:	0801a990 	.word	0x0801a990

08014570 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b082      	sub	sp, #8
 8014574:	af00      	add	r7, sp, #0
 8014576:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d106      	bne.n	801458c <tcp_rexmit_rto_commit+0x1c>
 801457e:	4b0d      	ldr	r3, [pc, #52]	; (80145b4 <tcp_rexmit_rto_commit+0x44>)
 8014580:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014584:	490c      	ldr	r1, [pc, #48]	; (80145b8 <tcp_rexmit_rto_commit+0x48>)
 8014586:	480d      	ldr	r0, [pc, #52]	; (80145bc <tcp_rexmit_rto_commit+0x4c>)
 8014588:	f001 fc40 	bl	8015e0c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014592:	2bff      	cmp	r3, #255	; 0xff
 8014594:	d007      	beq.n	80145a6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801459c:	3301      	adds	r3, #1
 801459e:	b2da      	uxtb	r2, r3
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80145a6:	6878      	ldr	r0, [r7, #4]
 80145a8:	f7ff fc80 	bl	8013eac <tcp_output>
}
 80145ac:	bf00      	nop
 80145ae:	3708      	adds	r7, #8
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}
 80145b4:	0801a8f8 	.word	0x0801a8f8
 80145b8:	0801af9c 	.word	0x0801af9c
 80145bc:	0801a990 	.word	0x0801a990

080145c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b082      	sub	sp, #8
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d106      	bne.n	80145dc <tcp_rexmit_rto+0x1c>
 80145ce:	4b0a      	ldr	r3, [pc, #40]	; (80145f8 <tcp_rexmit_rto+0x38>)
 80145d0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80145d4:	4909      	ldr	r1, [pc, #36]	; (80145fc <tcp_rexmit_rto+0x3c>)
 80145d6:	480a      	ldr	r0, [pc, #40]	; (8014600 <tcp_rexmit_rto+0x40>)
 80145d8:	f001 fc18 	bl	8015e0c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80145dc:	6878      	ldr	r0, [r7, #4]
 80145de:	f7ff ff57 	bl	8014490 <tcp_rexmit_rto_prepare>
 80145e2:	4603      	mov	r3, r0
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d102      	bne.n	80145ee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80145e8:	6878      	ldr	r0, [r7, #4]
 80145ea:	f7ff ffc1 	bl	8014570 <tcp_rexmit_rto_commit>
  }
}
 80145ee:	bf00      	nop
 80145f0:	3708      	adds	r7, #8
 80145f2:	46bd      	mov	sp, r7
 80145f4:	bd80      	pop	{r7, pc}
 80145f6:	bf00      	nop
 80145f8:	0801a8f8 	.word	0x0801a8f8
 80145fc:	0801afc0 	.word	0x0801afc0
 8014600:	0801a990 	.word	0x0801a990

08014604 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014604:	b590      	push	{r4, r7, lr}
 8014606:	b085      	sub	sp, #20
 8014608:	af00      	add	r7, sp, #0
 801460a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d106      	bne.n	8014620 <tcp_rexmit+0x1c>
 8014612:	4b2f      	ldr	r3, [pc, #188]	; (80146d0 <tcp_rexmit+0xcc>)
 8014614:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014618:	492e      	ldr	r1, [pc, #184]	; (80146d4 <tcp_rexmit+0xd0>)
 801461a:	482f      	ldr	r0, [pc, #188]	; (80146d8 <tcp_rexmit+0xd4>)
 801461c:	f001 fbf6 	bl	8015e0c <iprintf>

  if (pcb->unacked == NULL) {
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014624:	2b00      	cmp	r3, #0
 8014626:	d102      	bne.n	801462e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014628:	f06f 0305 	mvn.w	r3, #5
 801462c:	e04c      	b.n	80146c8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014632:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014634:	68b8      	ldr	r0, [r7, #8]
 8014636:	f7ff fe2d 	bl	8014294 <tcp_output_segment_busy>
 801463a:	4603      	mov	r3, r0
 801463c:	2b00      	cmp	r3, #0
 801463e:	d002      	beq.n	8014646 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014640:	f06f 0305 	mvn.w	r3, #5
 8014644:	e040      	b.n	80146c8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014646:	68bb      	ldr	r3, [r7, #8]
 8014648:	681a      	ldr	r2, [r3, #0]
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	336c      	adds	r3, #108	; 0x6c
 8014652:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014654:	e002      	b.n	801465c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d011      	beq.n	8014688 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	68db      	ldr	r3, [r3, #12]
 801466a:	685b      	ldr	r3, [r3, #4]
 801466c:	4618      	mov	r0, r3
 801466e:	f7f8 ff9e 	bl	800d5ae <lwip_htonl>
 8014672:	4604      	mov	r4, r0
 8014674:	68bb      	ldr	r3, [r7, #8]
 8014676:	68db      	ldr	r3, [r3, #12]
 8014678:	685b      	ldr	r3, [r3, #4]
 801467a:	4618      	mov	r0, r3
 801467c:	f7f8 ff97 	bl	800d5ae <lwip_htonl>
 8014680:	4603      	mov	r3, r0
 8014682:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014684:	2b00      	cmp	r3, #0
 8014686:	dbe6      	blt.n	8014656 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	681a      	ldr	r2, [r3, #0]
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	68ba      	ldr	r2, [r7, #8]
 8014694:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014696:	68bb      	ldr	r3, [r7, #8]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d103      	bne.n	80146a6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	2200      	movs	r2, #0
 80146a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80146ac:	2bff      	cmp	r3, #255	; 0xff
 80146ae:	d007      	beq.n	80146c0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80146b6:	3301      	adds	r3, #1
 80146b8:	b2da      	uxtb	r2, r3
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	2200      	movs	r2, #0
 80146c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80146c6:	2300      	movs	r3, #0
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	3714      	adds	r7, #20
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd90      	pop	{r4, r7, pc}
 80146d0:	0801a8f8 	.word	0x0801a8f8
 80146d4:	0801afdc 	.word	0x0801afdc
 80146d8:	0801a990 	.word	0x0801a990

080146dc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d106      	bne.n	80146f8 <tcp_rexmit_fast+0x1c>
 80146ea:	4b2a      	ldr	r3, [pc, #168]	; (8014794 <tcp_rexmit_fast+0xb8>)
 80146ec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80146f0:	4929      	ldr	r1, [pc, #164]	; (8014798 <tcp_rexmit_fast+0xbc>)
 80146f2:	482a      	ldr	r0, [pc, #168]	; (801479c <tcp_rexmit_fast+0xc0>)
 80146f4:	f001 fb8a 	bl	8015e0c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d045      	beq.n	801478c <tcp_rexmit_fast+0xb0>
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	8b5b      	ldrh	r3, [r3, #26]
 8014704:	f003 0304 	and.w	r3, r3, #4
 8014708:	2b00      	cmp	r3, #0
 801470a:	d13f      	bne.n	801478c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801470c:	6878      	ldr	r0, [r7, #4]
 801470e:	f7ff ff79 	bl	8014604 <tcp_rexmit>
 8014712:	4603      	mov	r3, r0
 8014714:	2b00      	cmp	r3, #0
 8014716:	d139      	bne.n	801478c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014724:	4293      	cmp	r3, r2
 8014726:	bf28      	it	cs
 8014728:	4613      	movcs	r3, r2
 801472a:	b29b      	uxth	r3, r3
 801472c:	2b00      	cmp	r3, #0
 801472e:	da00      	bge.n	8014732 <tcp_rexmit_fast+0x56>
 8014730:	3301      	adds	r3, #1
 8014732:	105b      	asrs	r3, r3, #1
 8014734:	b29a      	uxth	r2, r3
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014742:	461a      	mov	r2, r3
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014748:	005b      	lsls	r3, r3, #1
 801474a:	429a      	cmp	r2, r3
 801474c:	d206      	bcs.n	801475c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014752:	005b      	lsls	r3, r3, #1
 8014754:	b29a      	uxth	r2, r3
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014766:	4619      	mov	r1, r3
 8014768:	0049      	lsls	r1, r1, #1
 801476a:	440b      	add	r3, r1
 801476c:	b29b      	uxth	r3, r3
 801476e:	4413      	add	r3, r2
 8014770:	b29a      	uxth	r2, r3
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	8b5b      	ldrh	r3, [r3, #26]
 801477c:	f043 0304 	orr.w	r3, r3, #4
 8014780:	b29a      	uxth	r2, r3
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	2200      	movs	r2, #0
 801478a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801478c:	bf00      	nop
 801478e:	3708      	adds	r7, #8
 8014790:	46bd      	mov	sp, r7
 8014792:	bd80      	pop	{r7, pc}
 8014794:	0801a8f8 	.word	0x0801a8f8
 8014798:	0801aff4 	.word	0x0801aff4
 801479c:	0801a990 	.word	0x0801a990

080147a0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80147a0:	b580      	push	{r7, lr}
 80147a2:	b086      	sub	sp, #24
 80147a4:	af00      	add	r7, sp, #0
 80147a6:	60f8      	str	r0, [r7, #12]
 80147a8:	607b      	str	r3, [r7, #4]
 80147aa:	460b      	mov	r3, r1
 80147ac:	817b      	strh	r3, [r7, #10]
 80147ae:	4613      	mov	r3, r2
 80147b0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80147b2:	897a      	ldrh	r2, [r7, #10]
 80147b4:	893b      	ldrh	r3, [r7, #8]
 80147b6:	4413      	add	r3, r2
 80147b8:	b29b      	uxth	r3, r3
 80147ba:	3314      	adds	r3, #20
 80147bc:	b29b      	uxth	r3, r3
 80147be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80147c2:	4619      	mov	r1, r3
 80147c4:	2022      	movs	r0, #34	; 0x22
 80147c6:	f7f9 fffb 	bl	800e7c0 <pbuf_alloc>
 80147ca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80147cc:	697b      	ldr	r3, [r7, #20]
 80147ce:	2b00      	cmp	r3, #0
 80147d0:	d04d      	beq.n	801486e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80147d2:	897b      	ldrh	r3, [r7, #10]
 80147d4:	3313      	adds	r3, #19
 80147d6:	697a      	ldr	r2, [r7, #20]
 80147d8:	8952      	ldrh	r2, [r2, #10]
 80147da:	4293      	cmp	r3, r2
 80147dc:	db06      	blt.n	80147ec <tcp_output_alloc_header_common+0x4c>
 80147de:	4b26      	ldr	r3, [pc, #152]	; (8014878 <tcp_output_alloc_header_common+0xd8>)
 80147e0:	f240 7223 	movw	r2, #1827	; 0x723
 80147e4:	4925      	ldr	r1, [pc, #148]	; (801487c <tcp_output_alloc_header_common+0xdc>)
 80147e6:	4826      	ldr	r0, [pc, #152]	; (8014880 <tcp_output_alloc_header_common+0xe0>)
 80147e8:	f001 fb10 	bl	8015e0c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80147ec:	697b      	ldr	r3, [r7, #20]
 80147ee:	685b      	ldr	r3, [r3, #4]
 80147f0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80147f2:	8c3b      	ldrh	r3, [r7, #32]
 80147f4:	4618      	mov	r0, r3
 80147f6:	f7f8 fec5 	bl	800d584 <lwip_htons>
 80147fa:	4603      	mov	r3, r0
 80147fc:	461a      	mov	r2, r3
 80147fe:	693b      	ldr	r3, [r7, #16]
 8014800:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014802:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014804:	4618      	mov	r0, r3
 8014806:	f7f8 febd 	bl	800d584 <lwip_htons>
 801480a:	4603      	mov	r3, r0
 801480c:	461a      	mov	r2, r3
 801480e:	693b      	ldr	r3, [r7, #16]
 8014810:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014812:	693b      	ldr	r3, [r7, #16]
 8014814:	687a      	ldr	r2, [r7, #4]
 8014816:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014818:	68f8      	ldr	r0, [r7, #12]
 801481a:	f7f8 fec8 	bl	800d5ae <lwip_htonl>
 801481e:	4602      	mov	r2, r0
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014824:	897b      	ldrh	r3, [r7, #10]
 8014826:	089b      	lsrs	r3, r3, #2
 8014828:	b29b      	uxth	r3, r3
 801482a:	3305      	adds	r3, #5
 801482c:	b29b      	uxth	r3, r3
 801482e:	031b      	lsls	r3, r3, #12
 8014830:	b29a      	uxth	r2, r3
 8014832:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014836:	b29b      	uxth	r3, r3
 8014838:	4313      	orrs	r3, r2
 801483a:	b29b      	uxth	r3, r3
 801483c:	4618      	mov	r0, r3
 801483e:	f7f8 fea1 	bl	800d584 <lwip_htons>
 8014842:	4603      	mov	r3, r0
 8014844:	461a      	mov	r2, r3
 8014846:	693b      	ldr	r3, [r7, #16]
 8014848:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801484a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801484c:	4618      	mov	r0, r3
 801484e:	f7f8 fe99 	bl	800d584 <lwip_htons>
 8014852:	4603      	mov	r3, r0
 8014854:	461a      	mov	r2, r3
 8014856:	693b      	ldr	r3, [r7, #16]
 8014858:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801485a:	693b      	ldr	r3, [r7, #16]
 801485c:	2200      	movs	r2, #0
 801485e:	741a      	strb	r2, [r3, #16]
 8014860:	2200      	movs	r2, #0
 8014862:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014864:	693b      	ldr	r3, [r7, #16]
 8014866:	2200      	movs	r2, #0
 8014868:	749a      	strb	r2, [r3, #18]
 801486a:	2200      	movs	r2, #0
 801486c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801486e:	697b      	ldr	r3, [r7, #20]
}
 8014870:	4618      	mov	r0, r3
 8014872:	3718      	adds	r7, #24
 8014874:	46bd      	mov	sp, r7
 8014876:	bd80      	pop	{r7, pc}
 8014878:	0801a8f8 	.word	0x0801a8f8
 801487c:	0801b014 	.word	0x0801b014
 8014880:	0801a990 	.word	0x0801a990

08014884 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014884:	b5b0      	push	{r4, r5, r7, lr}
 8014886:	b08a      	sub	sp, #40	; 0x28
 8014888:	af04      	add	r7, sp, #16
 801488a:	60f8      	str	r0, [r7, #12]
 801488c:	607b      	str	r3, [r7, #4]
 801488e:	460b      	mov	r3, r1
 8014890:	817b      	strh	r3, [r7, #10]
 8014892:	4613      	mov	r3, r2
 8014894:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d106      	bne.n	80148aa <tcp_output_alloc_header+0x26>
 801489c:	4b15      	ldr	r3, [pc, #84]	; (80148f4 <tcp_output_alloc_header+0x70>)
 801489e:	f240 7242 	movw	r2, #1858	; 0x742
 80148a2:	4915      	ldr	r1, [pc, #84]	; (80148f8 <tcp_output_alloc_header+0x74>)
 80148a4:	4815      	ldr	r0, [pc, #84]	; (80148fc <tcp_output_alloc_header+0x78>)
 80148a6:	f001 fab1 	bl	8015e0c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	8adb      	ldrh	r3, [r3, #22]
 80148b2:	68fa      	ldr	r2, [r7, #12]
 80148b4:	8b12      	ldrh	r2, [r2, #24]
 80148b6:	68f9      	ldr	r1, [r7, #12]
 80148b8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80148ba:	893d      	ldrh	r5, [r7, #8]
 80148bc:	897c      	ldrh	r4, [r7, #10]
 80148be:	9103      	str	r1, [sp, #12]
 80148c0:	2110      	movs	r1, #16
 80148c2:	9102      	str	r1, [sp, #8]
 80148c4:	9201      	str	r2, [sp, #4]
 80148c6:	9300      	str	r3, [sp, #0]
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	462a      	mov	r2, r5
 80148cc:	4621      	mov	r1, r4
 80148ce:	f7ff ff67 	bl	80147a0 <tcp_output_alloc_header_common>
 80148d2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80148d4:	697b      	ldr	r3, [r7, #20]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d006      	beq.n	80148e8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148de:	68fa      	ldr	r2, [r7, #12]
 80148e0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80148e2:	441a      	add	r2, r3
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80148e8:	697b      	ldr	r3, [r7, #20]
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	3718      	adds	r7, #24
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bdb0      	pop	{r4, r5, r7, pc}
 80148f2:	bf00      	nop
 80148f4:	0801a8f8 	.word	0x0801a8f8
 80148f8:	0801b044 	.word	0x0801b044
 80148fc:	0801a990 	.word	0x0801a990

08014900 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014900:	b580      	push	{r7, lr}
 8014902:	b088      	sub	sp, #32
 8014904:	af00      	add	r7, sp, #0
 8014906:	60f8      	str	r0, [r7, #12]
 8014908:	60b9      	str	r1, [r7, #8]
 801490a:	4611      	mov	r1, r2
 801490c:	461a      	mov	r2, r3
 801490e:	460b      	mov	r3, r1
 8014910:	71fb      	strb	r3, [r7, #7]
 8014912:	4613      	mov	r3, r2
 8014914:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014916:	2300      	movs	r3, #0
 8014918:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801491a:	68bb      	ldr	r3, [r7, #8]
 801491c:	2b00      	cmp	r3, #0
 801491e:	d106      	bne.n	801492e <tcp_output_fill_options+0x2e>
 8014920:	4b13      	ldr	r3, [pc, #76]	; (8014970 <tcp_output_fill_options+0x70>)
 8014922:	f240 7256 	movw	r2, #1878	; 0x756
 8014926:	4913      	ldr	r1, [pc, #76]	; (8014974 <tcp_output_fill_options+0x74>)
 8014928:	4813      	ldr	r0, [pc, #76]	; (8014978 <tcp_output_fill_options+0x78>)
 801492a:	f001 fa6f 	bl	8015e0c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	685b      	ldr	r3, [r3, #4]
 8014932:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014934:	69bb      	ldr	r3, [r7, #24]
 8014936:	3314      	adds	r3, #20
 8014938:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801493a:	69bb      	ldr	r3, [r7, #24]
 801493c:	f103 0214 	add.w	r2, r3, #20
 8014940:	8bfb      	ldrh	r3, [r7, #30]
 8014942:	009b      	lsls	r3, r3, #2
 8014944:	4619      	mov	r1, r3
 8014946:	79fb      	ldrb	r3, [r7, #7]
 8014948:	009b      	lsls	r3, r3, #2
 801494a:	f003 0304 	and.w	r3, r3, #4
 801494e:	440b      	add	r3, r1
 8014950:	4413      	add	r3, r2
 8014952:	697a      	ldr	r2, [r7, #20]
 8014954:	429a      	cmp	r2, r3
 8014956:	d006      	beq.n	8014966 <tcp_output_fill_options+0x66>
 8014958:	4b05      	ldr	r3, [pc, #20]	; (8014970 <tcp_output_fill_options+0x70>)
 801495a:	f240 7275 	movw	r2, #1909	; 0x775
 801495e:	4907      	ldr	r1, [pc, #28]	; (801497c <tcp_output_fill_options+0x7c>)
 8014960:	4805      	ldr	r0, [pc, #20]	; (8014978 <tcp_output_fill_options+0x78>)
 8014962:	f001 fa53 	bl	8015e0c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014966:	bf00      	nop
 8014968:	3720      	adds	r7, #32
 801496a:	46bd      	mov	sp, r7
 801496c:	bd80      	pop	{r7, pc}
 801496e:	bf00      	nop
 8014970:	0801a8f8 	.word	0x0801a8f8
 8014974:	0801b06c 	.word	0x0801b06c
 8014978:	0801a990 	.word	0x0801a990
 801497c:	0801af64 	.word	0x0801af64

08014980 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b08a      	sub	sp, #40	; 0x28
 8014984:	af04      	add	r7, sp, #16
 8014986:	60f8      	str	r0, [r7, #12]
 8014988:	60b9      	str	r1, [r7, #8]
 801498a:	607a      	str	r2, [r7, #4]
 801498c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801498e:	68bb      	ldr	r3, [r7, #8]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d106      	bne.n	80149a2 <tcp_output_control_segment+0x22>
 8014994:	4b1c      	ldr	r3, [pc, #112]	; (8014a08 <tcp_output_control_segment+0x88>)
 8014996:	f240 7287 	movw	r2, #1927	; 0x787
 801499a:	491c      	ldr	r1, [pc, #112]	; (8014a0c <tcp_output_control_segment+0x8c>)
 801499c:	481c      	ldr	r0, [pc, #112]	; (8014a10 <tcp_output_control_segment+0x90>)
 801499e:	f001 fa35 	bl	8015e0c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80149a2:	683a      	ldr	r2, [r7, #0]
 80149a4:	6879      	ldr	r1, [r7, #4]
 80149a6:	68f8      	ldr	r0, [r7, #12]
 80149a8:	f7fe fae8 	bl	8012f7c <tcp_route>
 80149ac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d102      	bne.n	80149ba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80149b4:	23fc      	movs	r3, #252	; 0xfc
 80149b6:	75fb      	strb	r3, [r7, #23]
 80149b8:	e01c      	b.n	80149f4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80149ba:	68fb      	ldr	r3, [r7, #12]
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d006      	beq.n	80149ce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	7adb      	ldrb	r3, [r3, #11]
 80149c4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	7a9b      	ldrb	r3, [r3, #10]
 80149ca:	757b      	strb	r3, [r7, #21]
 80149cc:	e003      	b.n	80149d6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80149ce:	23ff      	movs	r3, #255	; 0xff
 80149d0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80149d2:	2300      	movs	r3, #0
 80149d4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80149d6:	7dba      	ldrb	r2, [r7, #22]
 80149d8:	693b      	ldr	r3, [r7, #16]
 80149da:	9302      	str	r3, [sp, #8]
 80149dc:	2306      	movs	r3, #6
 80149de:	9301      	str	r3, [sp, #4]
 80149e0:	7d7b      	ldrb	r3, [r7, #21]
 80149e2:	9300      	str	r3, [sp, #0]
 80149e4:	4613      	mov	r3, r2
 80149e6:	683a      	ldr	r2, [r7, #0]
 80149e8:	6879      	ldr	r1, [r7, #4]
 80149ea:	68b8      	ldr	r0, [r7, #8]
 80149ec:	f7f7 fe78 	bl	800c6e0 <ip4_output_if>
 80149f0:	4603      	mov	r3, r0
 80149f2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80149f4:	68b8      	ldr	r0, [r7, #8]
 80149f6:	f7fa f9c5 	bl	800ed84 <pbuf_free>
  return err;
 80149fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	3718      	adds	r7, #24
 8014a02:	46bd      	mov	sp, r7
 8014a04:	bd80      	pop	{r7, pc}
 8014a06:	bf00      	nop
 8014a08:	0801a8f8 	.word	0x0801a8f8
 8014a0c:	0801b094 	.word	0x0801b094
 8014a10:	0801a990 	.word	0x0801a990

08014a14 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014a14:	b590      	push	{r4, r7, lr}
 8014a16:	b08b      	sub	sp, #44	; 0x2c
 8014a18:	af04      	add	r7, sp, #16
 8014a1a:	60f8      	str	r0, [r7, #12]
 8014a1c:	60b9      	str	r1, [r7, #8]
 8014a1e:	607a      	str	r2, [r7, #4]
 8014a20:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d106      	bne.n	8014a36 <tcp_rst+0x22>
 8014a28:	4b1f      	ldr	r3, [pc, #124]	; (8014aa8 <tcp_rst+0x94>)
 8014a2a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014a2e:	491f      	ldr	r1, [pc, #124]	; (8014aac <tcp_rst+0x98>)
 8014a30:	481f      	ldr	r0, [pc, #124]	; (8014ab0 <tcp_rst+0x9c>)
 8014a32:	f001 f9eb 	bl	8015e0c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d106      	bne.n	8014a4a <tcp_rst+0x36>
 8014a3c:	4b1a      	ldr	r3, [pc, #104]	; (8014aa8 <tcp_rst+0x94>)
 8014a3e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014a42:	491c      	ldr	r1, [pc, #112]	; (8014ab4 <tcp_rst+0xa0>)
 8014a44:	481a      	ldr	r0, [pc, #104]	; (8014ab0 <tcp_rst+0x9c>)
 8014a46:	f001 f9e1 	bl	8015e0c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014a4a:	2300      	movs	r3, #0
 8014a4c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014a4e:	f646 030b 	movw	r3, #26635	; 0x680b
 8014a52:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014a54:	7dfb      	ldrb	r3, [r7, #23]
 8014a56:	b29c      	uxth	r4, r3
 8014a58:	68b8      	ldr	r0, [r7, #8]
 8014a5a:	f7f8 fda8 	bl	800d5ae <lwip_htonl>
 8014a5e:	4602      	mov	r2, r0
 8014a60:	8abb      	ldrh	r3, [r7, #20]
 8014a62:	9303      	str	r3, [sp, #12]
 8014a64:	2314      	movs	r3, #20
 8014a66:	9302      	str	r3, [sp, #8]
 8014a68:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014a6a:	9301      	str	r3, [sp, #4]
 8014a6c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014a6e:	9300      	str	r3, [sp, #0]
 8014a70:	4613      	mov	r3, r2
 8014a72:	2200      	movs	r2, #0
 8014a74:	4621      	mov	r1, r4
 8014a76:	6878      	ldr	r0, [r7, #4]
 8014a78:	f7ff fe92 	bl	80147a0 <tcp_output_alloc_header_common>
 8014a7c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014a7e:	693b      	ldr	r3, [r7, #16]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d00c      	beq.n	8014a9e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014a84:	7dfb      	ldrb	r3, [r7, #23]
 8014a86:	2200      	movs	r2, #0
 8014a88:	6939      	ldr	r1, [r7, #16]
 8014a8a:	68f8      	ldr	r0, [r7, #12]
 8014a8c:	f7ff ff38 	bl	8014900 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a92:	683a      	ldr	r2, [r7, #0]
 8014a94:	6939      	ldr	r1, [r7, #16]
 8014a96:	68f8      	ldr	r0, [r7, #12]
 8014a98:	f7ff ff72 	bl	8014980 <tcp_output_control_segment>
 8014a9c:	e000      	b.n	8014aa0 <tcp_rst+0x8c>
    return;
 8014a9e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014aa0:	371c      	adds	r7, #28
 8014aa2:	46bd      	mov	sp, r7
 8014aa4:	bd90      	pop	{r4, r7, pc}
 8014aa6:	bf00      	nop
 8014aa8:	0801a8f8 	.word	0x0801a8f8
 8014aac:	0801b0c0 	.word	0x0801b0c0
 8014ab0:	0801a990 	.word	0x0801a990
 8014ab4:	0801b0dc 	.word	0x0801b0dc

08014ab8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014ab8:	b590      	push	{r4, r7, lr}
 8014aba:	b087      	sub	sp, #28
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014ac0:	2300      	movs	r3, #0
 8014ac2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014ac8:	687b      	ldr	r3, [r7, #4]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d106      	bne.n	8014adc <tcp_send_empty_ack+0x24>
 8014ace:	4b28      	ldr	r3, [pc, #160]	; (8014b70 <tcp_send_empty_ack+0xb8>)
 8014ad0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014ad4:	4927      	ldr	r1, [pc, #156]	; (8014b74 <tcp_send_empty_ack+0xbc>)
 8014ad6:	4828      	ldr	r0, [pc, #160]	; (8014b78 <tcp_send_empty_ack+0xc0>)
 8014ad8:	f001 f998 	bl	8015e0c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014adc:	7dfb      	ldrb	r3, [r7, #23]
 8014ade:	009b      	lsls	r3, r3, #2
 8014ae0:	b2db      	uxtb	r3, r3
 8014ae2:	f003 0304 	and.w	r3, r3, #4
 8014ae6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014ae8:	7d7b      	ldrb	r3, [r7, #21]
 8014aea:	b29c      	uxth	r4, r3
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014af0:	4618      	mov	r0, r3
 8014af2:	f7f8 fd5c 	bl	800d5ae <lwip_htonl>
 8014af6:	4603      	mov	r3, r0
 8014af8:	2200      	movs	r2, #0
 8014afa:	4621      	mov	r1, r4
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f7ff fec1 	bl	8014884 <tcp_output_alloc_header>
 8014b02:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014b04:	693b      	ldr	r3, [r7, #16]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d109      	bne.n	8014b1e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	8b5b      	ldrh	r3, [r3, #26]
 8014b0e:	f043 0303 	orr.w	r3, r3, #3
 8014b12:	b29a      	uxth	r2, r3
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014b18:	f06f 0301 	mvn.w	r3, #1
 8014b1c:	e023      	b.n	8014b66 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014b1e:	7dbb      	ldrb	r3, [r7, #22]
 8014b20:	7dfa      	ldrb	r2, [r7, #23]
 8014b22:	6939      	ldr	r1, [r7, #16]
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f7ff feeb 	bl	8014900 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014b2a:	687a      	ldr	r2, [r7, #4]
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	3304      	adds	r3, #4
 8014b30:	6939      	ldr	r1, [r7, #16]
 8014b32:	6878      	ldr	r0, [r7, #4]
 8014b34:	f7ff ff24 	bl	8014980 <tcp_output_control_segment>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d007      	beq.n	8014b54 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	8b5b      	ldrh	r3, [r3, #26]
 8014b48:	f043 0303 	orr.w	r3, r3, #3
 8014b4c:	b29a      	uxth	r2, r3
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	835a      	strh	r2, [r3, #26]
 8014b52:	e006      	b.n	8014b62 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	8b5b      	ldrh	r3, [r3, #26]
 8014b58:	f023 0303 	bic.w	r3, r3, #3
 8014b5c:	b29a      	uxth	r2, r3
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014b66:	4618      	mov	r0, r3
 8014b68:	371c      	adds	r7, #28
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd90      	pop	{r4, r7, pc}
 8014b6e:	bf00      	nop
 8014b70:	0801a8f8 	.word	0x0801a8f8
 8014b74:	0801b0f8 	.word	0x0801b0f8
 8014b78:	0801a990 	.word	0x0801a990

08014b7c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014b7c:	b590      	push	{r4, r7, lr}
 8014b7e:	b087      	sub	sp, #28
 8014b80:	af00      	add	r7, sp, #0
 8014b82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014b84:	2300      	movs	r3, #0
 8014b86:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d106      	bne.n	8014b9c <tcp_keepalive+0x20>
 8014b8e:	4b18      	ldr	r3, [pc, #96]	; (8014bf0 <tcp_keepalive+0x74>)
 8014b90:	f640 0224 	movw	r2, #2084	; 0x824
 8014b94:	4917      	ldr	r1, [pc, #92]	; (8014bf4 <tcp_keepalive+0x78>)
 8014b96:	4818      	ldr	r0, [pc, #96]	; (8014bf8 <tcp_keepalive+0x7c>)
 8014b98:	f001 f938 	bl	8015e0c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014b9c:	7dfb      	ldrb	r3, [r7, #23]
 8014b9e:	b29c      	uxth	r4, r3
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014ba4:	3b01      	subs	r3, #1
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7f8 fd01 	bl	800d5ae <lwip_htonl>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2200      	movs	r2, #0
 8014bb0:	4621      	mov	r1, r4
 8014bb2:	6878      	ldr	r0, [r7, #4]
 8014bb4:	f7ff fe66 	bl	8014884 <tcp_output_alloc_header>
 8014bb8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014bba:	693b      	ldr	r3, [r7, #16]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d102      	bne.n	8014bc6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bc4:	e010      	b.n	8014be8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014bc6:	7dfb      	ldrb	r3, [r7, #23]
 8014bc8:	2200      	movs	r2, #0
 8014bca:	6939      	ldr	r1, [r7, #16]
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f7ff fe97 	bl	8014900 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014bd2:	687a      	ldr	r2, [r7, #4]
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	3304      	adds	r3, #4
 8014bd8:	6939      	ldr	r1, [r7, #16]
 8014bda:	6878      	ldr	r0, [r7, #4]
 8014bdc:	f7ff fed0 	bl	8014980 <tcp_output_control_segment>
 8014be0:	4603      	mov	r3, r0
 8014be2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014be8:	4618      	mov	r0, r3
 8014bea:	371c      	adds	r7, #28
 8014bec:	46bd      	mov	sp, r7
 8014bee:	bd90      	pop	{r4, r7, pc}
 8014bf0:	0801a8f8 	.word	0x0801a8f8
 8014bf4:	0801b118 	.word	0x0801b118
 8014bf8:	0801a990 	.word	0x0801a990

08014bfc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014bfc:	b590      	push	{r4, r7, lr}
 8014bfe:	b08b      	sub	sp, #44	; 0x2c
 8014c00:	af00      	add	r7, sp, #0
 8014c02:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014c04:	2300      	movs	r3, #0
 8014c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d106      	bne.n	8014c1e <tcp_zero_window_probe+0x22>
 8014c10:	4b4c      	ldr	r3, [pc, #304]	; (8014d44 <tcp_zero_window_probe+0x148>)
 8014c12:	f640 024f 	movw	r2, #2127	; 0x84f
 8014c16:	494c      	ldr	r1, [pc, #304]	; (8014d48 <tcp_zero_window_probe+0x14c>)
 8014c18:	484c      	ldr	r0, [pc, #304]	; (8014d4c <tcp_zero_window_probe+0x150>)
 8014c1a:	f001 f8f7 	bl	8015e0c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c22:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014c24:	6a3b      	ldr	r3, [r7, #32]
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d101      	bne.n	8014c2e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014c2a:	2300      	movs	r3, #0
 8014c2c:	e086      	b.n	8014d3c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8014c34:	2bff      	cmp	r3, #255	; 0xff
 8014c36:	d007      	beq.n	8014c48 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8014c3e:	3301      	adds	r3, #1
 8014c40:	b2da      	uxtb	r2, r3
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014c48:	6a3b      	ldr	r3, [r7, #32]
 8014c4a:	68db      	ldr	r3, [r3, #12]
 8014c4c:	899b      	ldrh	r3, [r3, #12]
 8014c4e:	b29b      	uxth	r3, r3
 8014c50:	4618      	mov	r0, r3
 8014c52:	f7f8 fc97 	bl	800d584 <lwip_htons>
 8014c56:	4603      	mov	r3, r0
 8014c58:	b2db      	uxtb	r3, r3
 8014c5a:	f003 0301 	and.w	r3, r3, #1
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d005      	beq.n	8014c6e <tcp_zero_window_probe+0x72>
 8014c62:	6a3b      	ldr	r3, [r7, #32]
 8014c64:	891b      	ldrh	r3, [r3, #8]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d101      	bne.n	8014c6e <tcp_zero_window_probe+0x72>
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	e000      	b.n	8014c70 <tcp_zero_window_probe+0x74>
 8014c6e:	2300      	movs	r3, #0
 8014c70:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014c72:	7ffb      	ldrb	r3, [r7, #31]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	bf0c      	ite	eq
 8014c78:	2301      	moveq	r3, #1
 8014c7a:	2300      	movne	r3, #0
 8014c7c:	b2db      	uxtb	r3, r3
 8014c7e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c84:	b299      	uxth	r1, r3
 8014c86:	6a3b      	ldr	r3, [r7, #32]
 8014c88:	68db      	ldr	r3, [r3, #12]
 8014c8a:	685b      	ldr	r3, [r3, #4]
 8014c8c:	8bba      	ldrh	r2, [r7, #28]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f7ff fdf8 	bl	8014884 <tcp_output_alloc_header>
 8014c94:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014c96:	69bb      	ldr	r3, [r7, #24]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d102      	bne.n	8014ca2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014c9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ca0:	e04c      	b.n	8014d3c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014ca2:	69bb      	ldr	r3, [r7, #24]
 8014ca4:	685b      	ldr	r3, [r3, #4]
 8014ca6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014ca8:	7ffb      	ldrb	r3, [r7, #31]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d011      	beq.n	8014cd2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	899b      	ldrh	r3, [r3, #12]
 8014cb2:	b29b      	uxth	r3, r3
 8014cb4:	b21b      	sxth	r3, r3
 8014cb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014cba:	b21c      	sxth	r4, r3
 8014cbc:	2011      	movs	r0, #17
 8014cbe:	f7f8 fc61 	bl	800d584 <lwip_htons>
 8014cc2:	4603      	mov	r3, r0
 8014cc4:	b21b      	sxth	r3, r3
 8014cc6:	4323      	orrs	r3, r4
 8014cc8:	b21b      	sxth	r3, r3
 8014cca:	b29a      	uxth	r2, r3
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	819a      	strh	r2, [r3, #12]
 8014cd0:	e010      	b.n	8014cf4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014cd2:	69bb      	ldr	r3, [r7, #24]
 8014cd4:	685b      	ldr	r3, [r3, #4]
 8014cd6:	3314      	adds	r3, #20
 8014cd8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014cda:	6a3b      	ldr	r3, [r7, #32]
 8014cdc:	6858      	ldr	r0, [r3, #4]
 8014cde:	6a3b      	ldr	r3, [r7, #32]
 8014ce0:	685b      	ldr	r3, [r3, #4]
 8014ce2:	891a      	ldrh	r2, [r3, #8]
 8014ce4:	6a3b      	ldr	r3, [r7, #32]
 8014ce6:	891b      	ldrh	r3, [r3, #8]
 8014ce8:	1ad3      	subs	r3, r2, r3
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	2201      	movs	r2, #1
 8014cee:	6939      	ldr	r1, [r7, #16]
 8014cf0:	f7fa fa3e 	bl	800f170 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014cf4:	6a3b      	ldr	r3, [r7, #32]
 8014cf6:	68db      	ldr	r3, [r3, #12]
 8014cf8:	685b      	ldr	r3, [r3, #4]
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	f7f8 fc57 	bl	800d5ae <lwip_htonl>
 8014d00:	4603      	mov	r3, r0
 8014d02:	3301      	adds	r3, #1
 8014d04:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014d0a:	68fb      	ldr	r3, [r7, #12]
 8014d0c:	1ad3      	subs	r3, r2, r3
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	da02      	bge.n	8014d18 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	68fa      	ldr	r2, [r7, #12]
 8014d16:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d1c:	2200      	movs	r2, #0
 8014d1e:	69b9      	ldr	r1, [r7, #24]
 8014d20:	6878      	ldr	r0, [r7, #4]
 8014d22:	f7ff fded 	bl	8014900 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d26:	687a      	ldr	r2, [r7, #4]
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	3304      	adds	r3, #4
 8014d2c:	69b9      	ldr	r1, [r7, #24]
 8014d2e:	6878      	ldr	r0, [r7, #4]
 8014d30:	f7ff fe26 	bl	8014980 <tcp_output_control_segment>
 8014d34:	4603      	mov	r3, r0
 8014d36:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014d38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	372c      	adds	r7, #44	; 0x2c
 8014d40:	46bd      	mov	sp, r7
 8014d42:	bd90      	pop	{r4, r7, pc}
 8014d44:	0801a8f8 	.word	0x0801a8f8
 8014d48:	0801b134 	.word	0x0801b134
 8014d4c:	0801a990 	.word	0x0801a990

08014d50 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014d58:	f7fa faf8 	bl	800f34c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014d5c:	4b0a      	ldr	r3, [pc, #40]	; (8014d88 <tcpip_tcp_timer+0x38>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d103      	bne.n	8014d6c <tcpip_tcp_timer+0x1c>
 8014d64:	4b09      	ldr	r3, [pc, #36]	; (8014d8c <tcpip_tcp_timer+0x3c>)
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d005      	beq.n	8014d78 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	4908      	ldr	r1, [pc, #32]	; (8014d90 <tcpip_tcp_timer+0x40>)
 8014d70:	20fa      	movs	r0, #250	; 0xfa
 8014d72:	f000 f8f3 	bl	8014f5c <sys_timeout>
 8014d76:	e003      	b.n	8014d80 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014d78:	4b06      	ldr	r3, [pc, #24]	; (8014d94 <tcpip_tcp_timer+0x44>)
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	601a      	str	r2, [r3, #0]
  }
}
 8014d7e:	bf00      	nop
 8014d80:	bf00      	nop
 8014d82:	3708      	adds	r7, #8
 8014d84:	46bd      	mov	sp, r7
 8014d86:	bd80      	pop	{r7, pc}
 8014d88:	2400a784 	.word	0x2400a784
 8014d8c:	2400a794 	.word	0x2400a794
 8014d90:	08014d51 	.word	0x08014d51
 8014d94:	240067f4 	.word	0x240067f4

08014d98 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8014d98:	b580      	push	{r7, lr}
 8014d9a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014d9c:	4b0a      	ldr	r3, [pc, #40]	; (8014dc8 <tcp_timer_needed+0x30>)
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d10f      	bne.n	8014dc4 <tcp_timer_needed+0x2c>
 8014da4:	4b09      	ldr	r3, [pc, #36]	; (8014dcc <tcp_timer_needed+0x34>)
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d103      	bne.n	8014db4 <tcp_timer_needed+0x1c>
 8014dac:	4b08      	ldr	r3, [pc, #32]	; (8014dd0 <tcp_timer_needed+0x38>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d007      	beq.n	8014dc4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014db4:	4b04      	ldr	r3, [pc, #16]	; (8014dc8 <tcp_timer_needed+0x30>)
 8014db6:	2201      	movs	r2, #1
 8014db8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014dba:	2200      	movs	r2, #0
 8014dbc:	4905      	ldr	r1, [pc, #20]	; (8014dd4 <tcp_timer_needed+0x3c>)
 8014dbe:	20fa      	movs	r0, #250	; 0xfa
 8014dc0:	f000 f8cc 	bl	8014f5c <sys_timeout>
  }
}
 8014dc4:	bf00      	nop
 8014dc6:	bd80      	pop	{r7, pc}
 8014dc8:	240067f4 	.word	0x240067f4
 8014dcc:	2400a784 	.word	0x2400a784
 8014dd0:	2400a794 	.word	0x2400a794
 8014dd4:	08014d51 	.word	0x08014d51

08014dd8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b086      	sub	sp, #24
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	60f8      	str	r0, [r7, #12]
 8014de0:	60b9      	str	r1, [r7, #8]
 8014de2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8014de4:	200a      	movs	r0, #10
 8014de6:	f7f9 f90f 	bl	800e008 <memp_malloc>
 8014dea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8014dec:	693b      	ldr	r3, [r7, #16]
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d109      	bne.n	8014e06 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8014df2:	693b      	ldr	r3, [r7, #16]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d151      	bne.n	8014e9c <sys_timeout_abs+0xc4>
 8014df8:	4b2a      	ldr	r3, [pc, #168]	; (8014ea4 <sys_timeout_abs+0xcc>)
 8014dfa:	22be      	movs	r2, #190	; 0xbe
 8014dfc:	492a      	ldr	r1, [pc, #168]	; (8014ea8 <sys_timeout_abs+0xd0>)
 8014dfe:	482b      	ldr	r0, [pc, #172]	; (8014eac <sys_timeout_abs+0xd4>)
 8014e00:	f001 f804 	bl	8015e0c <iprintf>
    return;
 8014e04:	e04a      	b.n	8014e9c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8014e06:	693b      	ldr	r3, [r7, #16]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8014e0c:	693b      	ldr	r3, [r7, #16]
 8014e0e:	68ba      	ldr	r2, [r7, #8]
 8014e10:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8014e12:	693b      	ldr	r3, [r7, #16]
 8014e14:	687a      	ldr	r2, [r7, #4]
 8014e16:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8014e18:	693b      	ldr	r3, [r7, #16]
 8014e1a:	68fa      	ldr	r2, [r7, #12]
 8014e1c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8014e1e:	4b24      	ldr	r3, [pc, #144]	; (8014eb0 <sys_timeout_abs+0xd8>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d103      	bne.n	8014e2e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8014e26:	4a22      	ldr	r2, [pc, #136]	; (8014eb0 <sys_timeout_abs+0xd8>)
 8014e28:	693b      	ldr	r3, [r7, #16]
 8014e2a:	6013      	str	r3, [r2, #0]
    return;
 8014e2c:	e037      	b.n	8014e9e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8014e2e:	693b      	ldr	r3, [r7, #16]
 8014e30:	685a      	ldr	r2, [r3, #4]
 8014e32:	4b1f      	ldr	r3, [pc, #124]	; (8014eb0 <sys_timeout_abs+0xd8>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	685b      	ldr	r3, [r3, #4]
 8014e38:	1ad3      	subs	r3, r2, r3
 8014e3a:	0fdb      	lsrs	r3, r3, #31
 8014e3c:	f003 0301 	and.w	r3, r3, #1
 8014e40:	b2db      	uxtb	r3, r3
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d007      	beq.n	8014e56 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8014e46:	4b1a      	ldr	r3, [pc, #104]	; (8014eb0 <sys_timeout_abs+0xd8>)
 8014e48:	681a      	ldr	r2, [r3, #0]
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8014e4e:	4a18      	ldr	r2, [pc, #96]	; (8014eb0 <sys_timeout_abs+0xd8>)
 8014e50:	693b      	ldr	r3, [r7, #16]
 8014e52:	6013      	str	r3, [r2, #0]
 8014e54:	e023      	b.n	8014e9e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014e56:	4b16      	ldr	r3, [pc, #88]	; (8014eb0 <sys_timeout_abs+0xd8>)
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	617b      	str	r3, [r7, #20]
 8014e5c:	e01a      	b.n	8014e94 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8014e5e:	697b      	ldr	r3, [r7, #20]
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d00b      	beq.n	8014e7e <sys_timeout_abs+0xa6>
 8014e66:	693b      	ldr	r3, [r7, #16]
 8014e68:	685a      	ldr	r2, [r3, #4]
 8014e6a:	697b      	ldr	r3, [r7, #20]
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	685b      	ldr	r3, [r3, #4]
 8014e70:	1ad3      	subs	r3, r2, r3
 8014e72:	0fdb      	lsrs	r3, r3, #31
 8014e74:	f003 0301 	and.w	r3, r3, #1
 8014e78:	b2db      	uxtb	r3, r3
 8014e7a:	2b00      	cmp	r3, #0
 8014e7c:	d007      	beq.n	8014e8e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8014e7e:	697b      	ldr	r3, [r7, #20]
 8014e80:	681a      	ldr	r2, [r3, #0]
 8014e82:	693b      	ldr	r3, [r7, #16]
 8014e84:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014e86:	697b      	ldr	r3, [r7, #20]
 8014e88:	693a      	ldr	r2, [r7, #16]
 8014e8a:	601a      	str	r2, [r3, #0]
        break;
 8014e8c:	e007      	b.n	8014e9e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8014e8e:	697b      	ldr	r3, [r7, #20]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	617b      	str	r3, [r7, #20]
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d1e1      	bne.n	8014e5e <sys_timeout_abs+0x86>
 8014e9a:	e000      	b.n	8014e9e <sys_timeout_abs+0xc6>
    return;
 8014e9c:	bf00      	nop
      }
    }
  }
}
 8014e9e:	3718      	adds	r7, #24
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	0801b174 	.word	0x0801b174
 8014ea8:	0801b1ec 	.word	0x0801b1ec
 8014eac:	0801b22c 	.word	0x0801b22c
 8014eb0:	240067ec 	.word	0x240067ec

08014eb4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b086      	sub	sp, #24
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8014ec0:	697b      	ldr	r3, [r7, #20]
 8014ec2:	685b      	ldr	r3, [r3, #4]
 8014ec4:	4798      	blx	r3

  now = sys_now();
 8014ec6:	f7eb fd3d 	bl	8000944 <sys_now>
 8014eca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8014ecc:	697b      	ldr	r3, [r7, #20]
 8014ece:	681a      	ldr	r2, [r3, #0]
 8014ed0:	4b0f      	ldr	r3, [pc, #60]	; (8014f10 <lwip_cyclic_timer+0x5c>)
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	4413      	add	r3, r2
 8014ed6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8014ed8:	68fa      	ldr	r2, [r7, #12]
 8014eda:	693b      	ldr	r3, [r7, #16]
 8014edc:	1ad3      	subs	r3, r2, r3
 8014ede:	0fdb      	lsrs	r3, r3, #31
 8014ee0:	f003 0301 	and.w	r3, r3, #1
 8014ee4:	b2db      	uxtb	r3, r3
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d009      	beq.n	8014efe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8014eea:	697b      	ldr	r3, [r7, #20]
 8014eec:	681a      	ldr	r2, [r3, #0]
 8014eee:	693b      	ldr	r3, [r7, #16]
 8014ef0:	4413      	add	r3, r2
 8014ef2:	687a      	ldr	r2, [r7, #4]
 8014ef4:	4907      	ldr	r1, [pc, #28]	; (8014f14 <lwip_cyclic_timer+0x60>)
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f7ff ff6e 	bl	8014dd8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014efc:	e004      	b.n	8014f08 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8014efe:	687a      	ldr	r2, [r7, #4]
 8014f00:	4904      	ldr	r1, [pc, #16]	; (8014f14 <lwip_cyclic_timer+0x60>)
 8014f02:	68f8      	ldr	r0, [r7, #12]
 8014f04:	f7ff ff68 	bl	8014dd8 <sys_timeout_abs>
}
 8014f08:	bf00      	nop
 8014f0a:	3718      	adds	r7, #24
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}
 8014f10:	240067f0 	.word	0x240067f0
 8014f14:	08014eb5 	.word	0x08014eb5

08014f18 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014f18:	b580      	push	{r7, lr}
 8014f1a:	b082      	sub	sp, #8
 8014f1c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014f1e:	2301      	movs	r3, #1
 8014f20:	607b      	str	r3, [r7, #4]
 8014f22:	e00e      	b.n	8014f42 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014f24:	4a0b      	ldr	r2, [pc, #44]	; (8014f54 <sys_timeouts_init+0x3c>)
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	00db      	lsls	r3, r3, #3
 8014f30:	4a08      	ldr	r2, [pc, #32]	; (8014f54 <sys_timeouts_init+0x3c>)
 8014f32:	4413      	add	r3, r2
 8014f34:	461a      	mov	r2, r3
 8014f36:	4908      	ldr	r1, [pc, #32]	; (8014f58 <sys_timeouts_init+0x40>)
 8014f38:	f000 f810 	bl	8014f5c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	3301      	adds	r3, #1
 8014f40:	607b      	str	r3, [r7, #4]
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	2b02      	cmp	r3, #2
 8014f46:	d9ed      	bls.n	8014f24 <sys_timeouts_init+0xc>
  }
}
 8014f48:	bf00      	nop
 8014f4a:	bf00      	nop
 8014f4c:	3708      	adds	r7, #8
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	bf00      	nop
 8014f54:	0801b158 	.word	0x0801b158
 8014f58:	08014eb5 	.word	0x08014eb5

08014f5c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b086      	sub	sp, #24
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	60f8      	str	r0, [r7, #12]
 8014f64:	60b9      	str	r1, [r7, #8]
 8014f66:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014f6e:	d306      	bcc.n	8014f7e <sys_timeout+0x22>
 8014f70:	4b0a      	ldr	r3, [pc, #40]	; (8014f9c <sys_timeout+0x40>)
 8014f72:	f240 1229 	movw	r2, #297	; 0x129
 8014f76:	490a      	ldr	r1, [pc, #40]	; (8014fa0 <sys_timeout+0x44>)
 8014f78:	480a      	ldr	r0, [pc, #40]	; (8014fa4 <sys_timeout+0x48>)
 8014f7a:	f000 ff47 	bl	8015e0c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8014f7e:	f7eb fce1 	bl	8000944 <sys_now>
 8014f82:	4602      	mov	r2, r0
 8014f84:	68fb      	ldr	r3, [r7, #12]
 8014f86:	4413      	add	r3, r2
 8014f88:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8014f8a:	687a      	ldr	r2, [r7, #4]
 8014f8c:	68b9      	ldr	r1, [r7, #8]
 8014f8e:	6978      	ldr	r0, [r7, #20]
 8014f90:	f7ff ff22 	bl	8014dd8 <sys_timeout_abs>
#endif
}
 8014f94:	bf00      	nop
 8014f96:	3718      	adds	r7, #24
 8014f98:	46bd      	mov	sp, r7
 8014f9a:	bd80      	pop	{r7, pc}
 8014f9c:	0801b174 	.word	0x0801b174
 8014fa0:	0801b254 	.word	0x0801b254
 8014fa4:	0801b22c 	.word	0x0801b22c

08014fa8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	b084      	sub	sp, #16
 8014fac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8014fae:	f7eb fcc9 	bl	8000944 <sys_now>
 8014fb2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8014fb4:	4b17      	ldr	r3, [pc, #92]	; (8015014 <sys_check_timeouts+0x6c>)
 8014fb6:	681b      	ldr	r3, [r3, #0]
 8014fb8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8014fba:	68bb      	ldr	r3, [r7, #8]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d022      	beq.n	8015006 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8014fc0:	68bb      	ldr	r3, [r7, #8]
 8014fc2:	685b      	ldr	r3, [r3, #4]
 8014fc4:	68fa      	ldr	r2, [r7, #12]
 8014fc6:	1ad3      	subs	r3, r2, r3
 8014fc8:	0fdb      	lsrs	r3, r3, #31
 8014fca:	f003 0301 	and.w	r3, r3, #1
 8014fce:	b2db      	uxtb	r3, r3
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d11a      	bne.n	801500a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	4a0e      	ldr	r2, [pc, #56]	; (8015014 <sys_check_timeouts+0x6c>)
 8014fda:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	689b      	ldr	r3, [r3, #8]
 8014fe0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014fe2:	68bb      	ldr	r3, [r7, #8]
 8014fe4:	68db      	ldr	r3, [r3, #12]
 8014fe6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014fe8:	68bb      	ldr	r3, [r7, #8]
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	4a0a      	ldr	r2, [pc, #40]	; (8015018 <sys_check_timeouts+0x70>)
 8014fee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014ff0:	68b9      	ldr	r1, [r7, #8]
 8014ff2:	200a      	movs	r0, #10
 8014ff4:	f7f9 f87e 	bl	800e0f4 <memp_free>
    if (handler != NULL) {
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d0da      	beq.n	8014fb4 <sys_check_timeouts+0xc>
      handler(arg);
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	6838      	ldr	r0, [r7, #0]
 8015002:	4798      	blx	r3
  do {
 8015004:	e7d6      	b.n	8014fb4 <sys_check_timeouts+0xc>
      return;
 8015006:	bf00      	nop
 8015008:	e000      	b.n	801500c <sys_check_timeouts+0x64>
      return;
 801500a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801500c:	3710      	adds	r7, #16
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
 8015012:	bf00      	nop
 8015014:	240067ec 	.word	0x240067ec
 8015018:	240067f0 	.word	0x240067f0

0801501c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015022:	4b16      	ldr	r3, [pc, #88]	; (801507c <sys_timeouts_sleeptime+0x60>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d102      	bne.n	8015030 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801502a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801502e:	e020      	b.n	8015072 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8015030:	f7eb fc88 	bl	8000944 <sys_now>
 8015034:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8015036:	4b11      	ldr	r3, [pc, #68]	; (801507c <sys_timeouts_sleeptime+0x60>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	685a      	ldr	r2, [r3, #4]
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	1ad3      	subs	r3, r2, r3
 8015040:	0fdb      	lsrs	r3, r3, #31
 8015042:	f003 0301 	and.w	r3, r3, #1
 8015046:	b2db      	uxtb	r3, r3
 8015048:	2b00      	cmp	r3, #0
 801504a:	d001      	beq.n	8015050 <sys_timeouts_sleeptime+0x34>
    return 0;
 801504c:	2300      	movs	r3, #0
 801504e:	e010      	b.n	8015072 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8015050:	4b0a      	ldr	r3, [pc, #40]	; (801507c <sys_timeouts_sleeptime+0x60>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	685a      	ldr	r2, [r3, #4]
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	1ad3      	subs	r3, r2, r3
 801505a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	2b00      	cmp	r3, #0
 8015060:	da06      	bge.n	8015070 <sys_timeouts_sleeptime+0x54>
 8015062:	4b07      	ldr	r3, [pc, #28]	; (8015080 <sys_timeouts_sleeptime+0x64>)
 8015064:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015068:	4906      	ldr	r1, [pc, #24]	; (8015084 <sys_timeouts_sleeptime+0x68>)
 801506a:	4807      	ldr	r0, [pc, #28]	; (8015088 <sys_timeouts_sleeptime+0x6c>)
 801506c:	f000 fece 	bl	8015e0c <iprintf>
    return ret;
 8015070:	683b      	ldr	r3, [r7, #0]
  }
}
 8015072:	4618      	mov	r0, r3
 8015074:	3708      	adds	r7, #8
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}
 801507a:	bf00      	nop
 801507c:	240067ec 	.word	0x240067ec
 8015080:	0801b174 	.word	0x0801b174
 8015084:	0801b28c 	.word	0x0801b28c
 8015088:	0801b22c 	.word	0x0801b22c

0801508c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015090:	f000 fed4 	bl	8015e3c <rand>
 8015094:	4603      	mov	r3, r0
 8015096:	b29b      	uxth	r3, r3
 8015098:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801509c:	b29b      	uxth	r3, r3
 801509e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80150a2:	b29a      	uxth	r2, r3
 80150a4:	4b01      	ldr	r3, [pc, #4]	; (80150ac <udp_init+0x20>)
 80150a6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80150a8:	bf00      	nop
 80150aa:	bd80      	pop	{r7, pc}
 80150ac:	2400004c 	.word	0x2400004c

080150b0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80150b0:	b480      	push	{r7}
 80150b2:	b083      	sub	sp, #12
 80150b4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80150b6:	2300      	movs	r3, #0
 80150b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80150ba:	4b17      	ldr	r3, [pc, #92]	; (8015118 <udp_new_port+0x68>)
 80150bc:	881b      	ldrh	r3, [r3, #0]
 80150be:	1c5a      	adds	r2, r3, #1
 80150c0:	b291      	uxth	r1, r2
 80150c2:	4a15      	ldr	r2, [pc, #84]	; (8015118 <udp_new_port+0x68>)
 80150c4:	8011      	strh	r1, [r2, #0]
 80150c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80150ca:	4293      	cmp	r3, r2
 80150cc:	d103      	bne.n	80150d6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80150ce:	4b12      	ldr	r3, [pc, #72]	; (8015118 <udp_new_port+0x68>)
 80150d0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80150d4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80150d6:	4b11      	ldr	r3, [pc, #68]	; (801511c <udp_new_port+0x6c>)
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	603b      	str	r3, [r7, #0]
 80150dc:	e011      	b.n	8015102 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80150de:	683b      	ldr	r3, [r7, #0]
 80150e0:	8a5a      	ldrh	r2, [r3, #18]
 80150e2:	4b0d      	ldr	r3, [pc, #52]	; (8015118 <udp_new_port+0x68>)
 80150e4:	881b      	ldrh	r3, [r3, #0]
 80150e6:	429a      	cmp	r2, r3
 80150e8:	d108      	bne.n	80150fc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80150ea:	88fb      	ldrh	r3, [r7, #6]
 80150ec:	3301      	adds	r3, #1
 80150ee:	80fb      	strh	r3, [r7, #6]
 80150f0:	88fb      	ldrh	r3, [r7, #6]
 80150f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80150f6:	d3e0      	bcc.n	80150ba <udp_new_port+0xa>
        return 0;
 80150f8:	2300      	movs	r3, #0
 80150fa:	e007      	b.n	801510c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80150fc:	683b      	ldr	r3, [r7, #0]
 80150fe:	68db      	ldr	r3, [r3, #12]
 8015100:	603b      	str	r3, [r7, #0]
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d1ea      	bne.n	80150de <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015108:	4b03      	ldr	r3, [pc, #12]	; (8015118 <udp_new_port+0x68>)
 801510a:	881b      	ldrh	r3, [r3, #0]
}
 801510c:	4618      	mov	r0, r3
 801510e:	370c      	adds	r7, #12
 8015110:	46bd      	mov	sp, r7
 8015112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015116:	4770      	bx	lr
 8015118:	2400004c 	.word	0x2400004c
 801511c:	2400a79c 	.word	0x2400a79c

08015120 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015120:	b580      	push	{r7, lr}
 8015122:	b084      	sub	sp, #16
 8015124:	af00      	add	r7, sp, #0
 8015126:	60f8      	str	r0, [r7, #12]
 8015128:	60b9      	str	r1, [r7, #8]
 801512a:	4613      	mov	r3, r2
 801512c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801512e:	68fb      	ldr	r3, [r7, #12]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d105      	bne.n	8015140 <udp_input_local_match+0x20>
 8015134:	4b27      	ldr	r3, [pc, #156]	; (80151d4 <udp_input_local_match+0xb4>)
 8015136:	2287      	movs	r2, #135	; 0x87
 8015138:	4927      	ldr	r1, [pc, #156]	; (80151d8 <udp_input_local_match+0xb8>)
 801513a:	4828      	ldr	r0, [pc, #160]	; (80151dc <udp_input_local_match+0xbc>)
 801513c:	f000 fe66 	bl	8015e0c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8015140:	68bb      	ldr	r3, [r7, #8]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d105      	bne.n	8015152 <udp_input_local_match+0x32>
 8015146:	4b23      	ldr	r3, [pc, #140]	; (80151d4 <udp_input_local_match+0xb4>)
 8015148:	2288      	movs	r2, #136	; 0x88
 801514a:	4925      	ldr	r1, [pc, #148]	; (80151e0 <udp_input_local_match+0xc0>)
 801514c:	4823      	ldr	r0, [pc, #140]	; (80151dc <udp_input_local_match+0xbc>)
 801514e:	f000 fe5d 	bl	8015e0c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	7a1b      	ldrb	r3, [r3, #8]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d00b      	beq.n	8015172 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	7a1a      	ldrb	r2, [r3, #8]
 801515e:	4b21      	ldr	r3, [pc, #132]	; (80151e4 <udp_input_local_match+0xc4>)
 8015160:	685b      	ldr	r3, [r3, #4]
 8015162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015166:	3301      	adds	r3, #1
 8015168:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801516a:	429a      	cmp	r2, r3
 801516c:	d001      	beq.n	8015172 <udp_input_local_match+0x52>
    return 0;
 801516e:	2300      	movs	r3, #0
 8015170:	e02b      	b.n	80151ca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8015172:	79fb      	ldrb	r3, [r7, #7]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d018      	beq.n	80151aa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d013      	beq.n	80151a6 <udp_input_local_match+0x86>
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d00f      	beq.n	80151a6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015186:	4b17      	ldr	r3, [pc, #92]	; (80151e4 <udp_input_local_match+0xc4>)
 8015188:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801518a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801518e:	d00a      	beq.n	80151a6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	681a      	ldr	r2, [r3, #0]
 8015194:	4b13      	ldr	r3, [pc, #76]	; (80151e4 <udp_input_local_match+0xc4>)
 8015196:	695b      	ldr	r3, [r3, #20]
 8015198:	405a      	eors	r2, r3
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	3308      	adds	r3, #8
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d110      	bne.n	80151c8 <udp_input_local_match+0xa8>
          return 1;
 80151a6:	2301      	movs	r3, #1
 80151a8:	e00f      	b.n	80151ca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d009      	beq.n	80151c4 <udp_input_local_match+0xa4>
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	681b      	ldr	r3, [r3, #0]
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	d005      	beq.n	80151c4 <udp_input_local_match+0xa4>
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	681a      	ldr	r2, [r3, #0]
 80151bc:	4b09      	ldr	r3, [pc, #36]	; (80151e4 <udp_input_local_match+0xc4>)
 80151be:	695b      	ldr	r3, [r3, #20]
 80151c0:	429a      	cmp	r2, r3
 80151c2:	d101      	bne.n	80151c8 <udp_input_local_match+0xa8>
        return 1;
 80151c4:	2301      	movs	r3, #1
 80151c6:	e000      	b.n	80151ca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80151c8:	2300      	movs	r3, #0
}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3710      	adds	r7, #16
 80151ce:	46bd      	mov	sp, r7
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	bf00      	nop
 80151d4:	0801b2a0 	.word	0x0801b2a0
 80151d8:	0801b314 	.word	0x0801b314
 80151dc:	0801b338 	.word	0x0801b338
 80151e0:	0801b360 	.word	0x0801b360
 80151e4:	24006a28 	.word	0x24006a28

080151e8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80151e8:	b590      	push	{r4, r7, lr}
 80151ea:	b08d      	sub	sp, #52	; 0x34
 80151ec:	af02      	add	r7, sp, #8
 80151ee:	6078      	str	r0, [r7, #4]
 80151f0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80151f2:	2300      	movs	r3, #0
 80151f4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d105      	bne.n	8015208 <udp_input+0x20>
 80151fc:	4b7c      	ldr	r3, [pc, #496]	; (80153f0 <udp_input+0x208>)
 80151fe:	22cf      	movs	r2, #207	; 0xcf
 8015200:	497c      	ldr	r1, [pc, #496]	; (80153f4 <udp_input+0x20c>)
 8015202:	487d      	ldr	r0, [pc, #500]	; (80153f8 <udp_input+0x210>)
 8015204:	f000 fe02 	bl	8015e0c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015208:	683b      	ldr	r3, [r7, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d105      	bne.n	801521a <udp_input+0x32>
 801520e:	4b78      	ldr	r3, [pc, #480]	; (80153f0 <udp_input+0x208>)
 8015210:	22d0      	movs	r2, #208	; 0xd0
 8015212:	497a      	ldr	r1, [pc, #488]	; (80153fc <udp_input+0x214>)
 8015214:	4878      	ldr	r0, [pc, #480]	; (80153f8 <udp_input+0x210>)
 8015216:	f000 fdf9 	bl	8015e0c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	895b      	ldrh	r3, [r3, #10]
 801521e:	2b07      	cmp	r3, #7
 8015220:	d803      	bhi.n	801522a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015222:	6878      	ldr	r0, [r7, #4]
 8015224:	f7f9 fdae 	bl	800ed84 <pbuf_free>
    goto end;
 8015228:	e0de      	b.n	80153e8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	685b      	ldr	r3, [r3, #4]
 801522e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8015230:	4b73      	ldr	r3, [pc, #460]	; (8015400 <udp_input+0x218>)
 8015232:	695b      	ldr	r3, [r3, #20]
 8015234:	4a72      	ldr	r2, [pc, #456]	; (8015400 <udp_input+0x218>)
 8015236:	6812      	ldr	r2, [r2, #0]
 8015238:	4611      	mov	r1, r2
 801523a:	4618      	mov	r0, r3
 801523c:	f7f7 fb28 	bl	800c890 <ip4_addr_isbroadcast_u32>
 8015240:	4603      	mov	r3, r0
 8015242:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8015244:	697b      	ldr	r3, [r7, #20]
 8015246:	881b      	ldrh	r3, [r3, #0]
 8015248:	b29b      	uxth	r3, r3
 801524a:	4618      	mov	r0, r3
 801524c:	f7f8 f99a 	bl	800d584 <lwip_htons>
 8015250:	4603      	mov	r3, r0
 8015252:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8015254:	697b      	ldr	r3, [r7, #20]
 8015256:	885b      	ldrh	r3, [r3, #2]
 8015258:	b29b      	uxth	r3, r3
 801525a:	4618      	mov	r0, r3
 801525c:	f7f8 f992 	bl	800d584 <lwip_htons>
 8015260:	4603      	mov	r3, r0
 8015262:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8015264:	2300      	movs	r3, #0
 8015266:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8015268:	2300      	movs	r3, #0
 801526a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801526c:	2300      	movs	r3, #0
 801526e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015270:	4b64      	ldr	r3, [pc, #400]	; (8015404 <udp_input+0x21c>)
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	627b      	str	r3, [r7, #36]	; 0x24
 8015276:	e054      	b.n	8015322 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801527a:	8a5b      	ldrh	r3, [r3, #18]
 801527c:	89fa      	ldrh	r2, [r7, #14]
 801527e:	429a      	cmp	r2, r3
 8015280:	d14a      	bne.n	8015318 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8015282:	7cfb      	ldrb	r3, [r7, #19]
 8015284:	461a      	mov	r2, r3
 8015286:	6839      	ldr	r1, [r7, #0]
 8015288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801528a:	f7ff ff49 	bl	8015120 <udp_input_local_match>
 801528e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015290:	2b00      	cmp	r3, #0
 8015292:	d041      	beq.n	8015318 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015296:	7c1b      	ldrb	r3, [r3, #16]
 8015298:	f003 0304 	and.w	r3, r3, #4
 801529c:	2b00      	cmp	r3, #0
 801529e:	d11d      	bne.n	80152dc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80152a0:	69fb      	ldr	r3, [r7, #28]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d102      	bne.n	80152ac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80152a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a8:	61fb      	str	r3, [r7, #28]
 80152aa:	e017      	b.n	80152dc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80152ac:	7cfb      	ldrb	r3, [r7, #19]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d014      	beq.n	80152dc <udp_input+0xf4>
 80152b2:	4b53      	ldr	r3, [pc, #332]	; (8015400 <udp_input+0x218>)
 80152b4:	695b      	ldr	r3, [r3, #20]
 80152b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152ba:	d10f      	bne.n	80152dc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80152bc:	69fb      	ldr	r3, [r7, #28]
 80152be:	681a      	ldr	r2, [r3, #0]
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	3304      	adds	r3, #4
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	429a      	cmp	r2, r3
 80152c8:	d008      	beq.n	80152dc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80152ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152cc:	681a      	ldr	r2, [r3, #0]
 80152ce:	683b      	ldr	r3, [r7, #0]
 80152d0:	3304      	adds	r3, #4
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d101      	bne.n	80152dc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80152d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152da:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80152dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152de:	8a9b      	ldrh	r3, [r3, #20]
 80152e0:	8a3a      	ldrh	r2, [r7, #16]
 80152e2:	429a      	cmp	r2, r3
 80152e4:	d118      	bne.n	8015318 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80152e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80152ea:	2b00      	cmp	r3, #0
 80152ec:	d005      	beq.n	80152fa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80152ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152f0:	685a      	ldr	r2, [r3, #4]
 80152f2:	4b43      	ldr	r3, [pc, #268]	; (8015400 <udp_input+0x218>)
 80152f4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80152f6:	429a      	cmp	r2, r3
 80152f8:	d10e      	bne.n	8015318 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80152fa:	6a3b      	ldr	r3, [r7, #32]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d014      	beq.n	801532a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015302:	68da      	ldr	r2, [r3, #12]
 8015304:	6a3b      	ldr	r3, [r7, #32]
 8015306:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015308:	4b3e      	ldr	r3, [pc, #248]	; (8015404 <udp_input+0x21c>)
 801530a:	681a      	ldr	r2, [r3, #0]
 801530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801530e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015310:	4a3c      	ldr	r2, [pc, #240]	; (8015404 <udp_input+0x21c>)
 8015312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015314:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015316:	e008      	b.n	801532a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801531a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801531e:	68db      	ldr	r3, [r3, #12]
 8015320:	627b      	str	r3, [r7, #36]	; 0x24
 8015322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015324:	2b00      	cmp	r3, #0
 8015326:	d1a7      	bne.n	8015278 <udp_input+0x90>
 8015328:	e000      	b.n	801532c <udp_input+0x144>
        break;
 801532a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801532e:	2b00      	cmp	r3, #0
 8015330:	d101      	bne.n	8015336 <udp_input+0x14e>
    pcb = uncon_pcb;
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8015336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015338:	2b00      	cmp	r3, #0
 801533a:	d002      	beq.n	8015342 <udp_input+0x15a>
    for_us = 1;
 801533c:	2301      	movs	r3, #1
 801533e:	76fb      	strb	r3, [r7, #27]
 8015340:	e00a      	b.n	8015358 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8015342:	683b      	ldr	r3, [r7, #0]
 8015344:	3304      	adds	r3, #4
 8015346:	681a      	ldr	r2, [r3, #0]
 8015348:	4b2d      	ldr	r3, [pc, #180]	; (8015400 <udp_input+0x218>)
 801534a:	695b      	ldr	r3, [r3, #20]
 801534c:	429a      	cmp	r2, r3
 801534e:	bf0c      	ite	eq
 8015350:	2301      	moveq	r3, #1
 8015352:	2300      	movne	r3, #0
 8015354:	b2db      	uxtb	r3, r3
 8015356:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8015358:	7efb      	ldrb	r3, [r7, #27]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d041      	beq.n	80153e2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801535e:	2108      	movs	r1, #8
 8015360:	6878      	ldr	r0, [r7, #4]
 8015362:	f7f9 fc89 	bl	800ec78 <pbuf_remove_header>
 8015366:	4603      	mov	r3, r0
 8015368:	2b00      	cmp	r3, #0
 801536a:	d00a      	beq.n	8015382 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801536c:	4b20      	ldr	r3, [pc, #128]	; (80153f0 <udp_input+0x208>)
 801536e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8015372:	4925      	ldr	r1, [pc, #148]	; (8015408 <udp_input+0x220>)
 8015374:	4820      	ldr	r0, [pc, #128]	; (80153f8 <udp_input+0x210>)
 8015376:	f000 fd49 	bl	8015e0c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801537a:	6878      	ldr	r0, [r7, #4]
 801537c:	f7f9 fd02 	bl	800ed84 <pbuf_free>
      goto end;
 8015380:	e032      	b.n	80153e8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8015382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015384:	2b00      	cmp	r3, #0
 8015386:	d012      	beq.n	80153ae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801538a:	699b      	ldr	r3, [r3, #24]
 801538c:	2b00      	cmp	r3, #0
 801538e:	d00a      	beq.n	80153a6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015392:	699c      	ldr	r4, [r3, #24]
 8015394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015396:	69d8      	ldr	r0, [r3, #28]
 8015398:	8a3b      	ldrh	r3, [r7, #16]
 801539a:	9300      	str	r3, [sp, #0]
 801539c:	4b1b      	ldr	r3, [pc, #108]	; (801540c <udp_input+0x224>)
 801539e:	687a      	ldr	r2, [r7, #4]
 80153a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80153a2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80153a4:	e021      	b.n	80153ea <udp_input+0x202>
        pbuf_free(p);
 80153a6:	6878      	ldr	r0, [r7, #4]
 80153a8:	f7f9 fcec 	bl	800ed84 <pbuf_free>
        goto end;
 80153ac:	e01c      	b.n	80153e8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80153ae:	7cfb      	ldrb	r3, [r7, #19]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d112      	bne.n	80153da <udp_input+0x1f2>
 80153b4:	4b12      	ldr	r3, [pc, #72]	; (8015400 <udp_input+0x218>)
 80153b6:	695b      	ldr	r3, [r3, #20]
 80153b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80153bc:	2be0      	cmp	r3, #224	; 0xe0
 80153be:	d00c      	beq.n	80153da <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80153c0:	4b0f      	ldr	r3, [pc, #60]	; (8015400 <udp_input+0x218>)
 80153c2:	899b      	ldrh	r3, [r3, #12]
 80153c4:	3308      	adds	r3, #8
 80153c6:	b29b      	uxth	r3, r3
 80153c8:	b21b      	sxth	r3, r3
 80153ca:	4619      	mov	r1, r3
 80153cc:	6878      	ldr	r0, [r7, #4]
 80153ce:	f7f9 fcc6 	bl	800ed5e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80153d2:	2103      	movs	r1, #3
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f7f6 ff31 	bl	800c23c <icmp_dest_unreach>
      pbuf_free(p);
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f7f9 fcd2 	bl	800ed84 <pbuf_free>
  return;
 80153e0:	e003      	b.n	80153ea <udp_input+0x202>
    pbuf_free(p);
 80153e2:	6878      	ldr	r0, [r7, #4]
 80153e4:	f7f9 fcce 	bl	800ed84 <pbuf_free>
  return;
 80153e8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80153ea:	372c      	adds	r7, #44	; 0x2c
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd90      	pop	{r4, r7, pc}
 80153f0:	0801b2a0 	.word	0x0801b2a0
 80153f4:	0801b388 	.word	0x0801b388
 80153f8:	0801b338 	.word	0x0801b338
 80153fc:	0801b3a0 	.word	0x0801b3a0
 8015400:	24006a28 	.word	0x24006a28
 8015404:	2400a79c 	.word	0x2400a79c
 8015408:	0801b3bc 	.word	0x0801b3bc
 801540c:	24006a38 	.word	0x24006a38

08015410 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015410:	b580      	push	{r7, lr}
 8015412:	b086      	sub	sp, #24
 8015414:	af00      	add	r7, sp, #0
 8015416:	60f8      	str	r0, [r7, #12]
 8015418:	60b9      	str	r1, [r7, #8]
 801541a:	4613      	mov	r3, r2
 801541c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801541e:	68bb      	ldr	r3, [r7, #8]
 8015420:	2b00      	cmp	r3, #0
 8015422:	d101      	bne.n	8015428 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015424:	4b39      	ldr	r3, [pc, #228]	; (801550c <udp_bind+0xfc>)
 8015426:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d109      	bne.n	8015442 <udp_bind+0x32>
 801542e:	4b38      	ldr	r3, [pc, #224]	; (8015510 <udp_bind+0x100>)
 8015430:	f240 32b7 	movw	r2, #951	; 0x3b7
 8015434:	4937      	ldr	r1, [pc, #220]	; (8015514 <udp_bind+0x104>)
 8015436:	4838      	ldr	r0, [pc, #224]	; (8015518 <udp_bind+0x108>)
 8015438:	f000 fce8 	bl	8015e0c <iprintf>
 801543c:	f06f 030f 	mvn.w	r3, #15
 8015440:	e060      	b.n	8015504 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8015442:	2300      	movs	r3, #0
 8015444:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015446:	4b35      	ldr	r3, [pc, #212]	; (801551c <udp_bind+0x10c>)
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	617b      	str	r3, [r7, #20]
 801544c:	e009      	b.n	8015462 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801544e:	68fa      	ldr	r2, [r7, #12]
 8015450:	697b      	ldr	r3, [r7, #20]
 8015452:	429a      	cmp	r2, r3
 8015454:	d102      	bne.n	801545c <udp_bind+0x4c>
      rebind = 1;
 8015456:	2301      	movs	r3, #1
 8015458:	74fb      	strb	r3, [r7, #19]
      break;
 801545a:	e005      	b.n	8015468 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	68db      	ldr	r3, [r3, #12]
 8015460:	617b      	str	r3, [r7, #20]
 8015462:	697b      	ldr	r3, [r7, #20]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d1f2      	bne.n	801544e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8015468:	88fb      	ldrh	r3, [r7, #6]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d109      	bne.n	8015482 <udp_bind+0x72>
    port = udp_new_port();
 801546e:	f7ff fe1f 	bl	80150b0 <udp_new_port>
 8015472:	4603      	mov	r3, r0
 8015474:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8015476:	88fb      	ldrh	r3, [r7, #6]
 8015478:	2b00      	cmp	r3, #0
 801547a:	d12c      	bne.n	80154d6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801547c:	f06f 0307 	mvn.w	r3, #7
 8015480:	e040      	b.n	8015504 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015482:	4b26      	ldr	r3, [pc, #152]	; (801551c <udp_bind+0x10c>)
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	617b      	str	r3, [r7, #20]
 8015488:	e022      	b.n	80154d0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801548a:	68fa      	ldr	r2, [r7, #12]
 801548c:	697b      	ldr	r3, [r7, #20]
 801548e:	429a      	cmp	r2, r3
 8015490:	d01b      	beq.n	80154ca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015492:	697b      	ldr	r3, [r7, #20]
 8015494:	8a5b      	ldrh	r3, [r3, #18]
 8015496:	88fa      	ldrh	r2, [r7, #6]
 8015498:	429a      	cmp	r2, r3
 801549a:	d116      	bne.n	80154ca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	681a      	ldr	r2, [r3, #0]
 80154a0:	68bb      	ldr	r3, [r7, #8]
 80154a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80154a4:	429a      	cmp	r2, r3
 80154a6:	d00d      	beq.n	80154c4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80154a8:	68bb      	ldr	r3, [r7, #8]
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d00a      	beq.n	80154c4 <udp_bind+0xb4>
 80154ae:	68bb      	ldr	r3, [r7, #8]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d006      	beq.n	80154c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80154b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d003      	beq.n	80154c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80154bc:	697b      	ldr	r3, [r7, #20]
 80154be:	681b      	ldr	r3, [r3, #0]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d102      	bne.n	80154ca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80154c4:	f06f 0307 	mvn.w	r3, #7
 80154c8:	e01c      	b.n	8015504 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80154ca:	697b      	ldr	r3, [r7, #20]
 80154cc:	68db      	ldr	r3, [r3, #12]
 80154ce:	617b      	str	r3, [r7, #20]
 80154d0:	697b      	ldr	r3, [r7, #20]
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d1d9      	bne.n	801548a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80154d6:	68bb      	ldr	r3, [r7, #8]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d002      	beq.n	80154e2 <udp_bind+0xd2>
 80154dc:	68bb      	ldr	r3, [r7, #8]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	e000      	b.n	80154e4 <udp_bind+0xd4>
 80154e2:	2300      	movs	r3, #0
 80154e4:	68fa      	ldr	r2, [r7, #12]
 80154e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80154e8:	68fb      	ldr	r3, [r7, #12]
 80154ea:	88fa      	ldrh	r2, [r7, #6]
 80154ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80154ee:	7cfb      	ldrb	r3, [r7, #19]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d106      	bne.n	8015502 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80154f4:	4b09      	ldr	r3, [pc, #36]	; (801551c <udp_bind+0x10c>)
 80154f6:	681a      	ldr	r2, [r3, #0]
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80154fc:	4a07      	ldr	r2, [pc, #28]	; (801551c <udp_bind+0x10c>)
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015502:	2300      	movs	r3, #0
}
 8015504:	4618      	mov	r0, r3
 8015506:	3718      	adds	r7, #24
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}
 801550c:	08018d64 	.word	0x08018d64
 8015510:	0801b2a0 	.word	0x0801b2a0
 8015514:	0801b5ac 	.word	0x0801b5ac
 8015518:	0801b338 	.word	0x0801b338
 801551c:	2400a79c 	.word	0x2400a79c

08015520 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015520:	b580      	push	{r7, lr}
 8015522:	b086      	sub	sp, #24
 8015524:	af00      	add	r7, sp, #0
 8015526:	60f8      	str	r0, [r7, #12]
 8015528:	60b9      	str	r1, [r7, #8]
 801552a:	4613      	mov	r3, r2
 801552c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d109      	bne.n	8015548 <udp_connect+0x28>
 8015534:	4b2c      	ldr	r3, [pc, #176]	; (80155e8 <udp_connect+0xc8>)
 8015536:	f240 4235 	movw	r2, #1077	; 0x435
 801553a:	492c      	ldr	r1, [pc, #176]	; (80155ec <udp_connect+0xcc>)
 801553c:	482c      	ldr	r0, [pc, #176]	; (80155f0 <udp_connect+0xd0>)
 801553e:	f000 fc65 	bl	8015e0c <iprintf>
 8015542:	f06f 030f 	mvn.w	r3, #15
 8015546:	e04b      	b.n	80155e0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d109      	bne.n	8015562 <udp_connect+0x42>
 801554e:	4b26      	ldr	r3, [pc, #152]	; (80155e8 <udp_connect+0xc8>)
 8015550:	f240 4236 	movw	r2, #1078	; 0x436
 8015554:	4927      	ldr	r1, [pc, #156]	; (80155f4 <udp_connect+0xd4>)
 8015556:	4826      	ldr	r0, [pc, #152]	; (80155f0 <udp_connect+0xd0>)
 8015558:	f000 fc58 	bl	8015e0c <iprintf>
 801555c:	f06f 030f 	mvn.w	r3, #15
 8015560:	e03e      	b.n	80155e0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	8a5b      	ldrh	r3, [r3, #18]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d10f      	bne.n	801558a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801556a:	68f9      	ldr	r1, [r7, #12]
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	8a5b      	ldrh	r3, [r3, #18]
 8015570:	461a      	mov	r2, r3
 8015572:	68f8      	ldr	r0, [r7, #12]
 8015574:	f7ff ff4c 	bl	8015410 <udp_bind>
 8015578:	4603      	mov	r3, r0
 801557a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801557c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015580:	2b00      	cmp	r3, #0
 8015582:	d002      	beq.n	801558a <udp_connect+0x6a>
      return err;
 8015584:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015588:	e02a      	b.n	80155e0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801558a:	68bb      	ldr	r3, [r7, #8]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d002      	beq.n	8015596 <udp_connect+0x76>
 8015590:	68bb      	ldr	r3, [r7, #8]
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	e000      	b.n	8015598 <udp_connect+0x78>
 8015596:	2300      	movs	r3, #0
 8015598:	68fa      	ldr	r2, [r7, #12]
 801559a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	88fa      	ldrh	r2, [r7, #6]
 80155a0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	7c1b      	ldrb	r3, [r3, #16]
 80155a6:	f043 0304 	orr.w	r3, r3, #4
 80155aa:	b2da      	uxtb	r2, r3
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80155b0:	4b11      	ldr	r3, [pc, #68]	; (80155f8 <udp_connect+0xd8>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	617b      	str	r3, [r7, #20]
 80155b6:	e008      	b.n	80155ca <udp_connect+0xaa>
    if (pcb == ipcb) {
 80155b8:	68fa      	ldr	r2, [r7, #12]
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	429a      	cmp	r2, r3
 80155be:	d101      	bne.n	80155c4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80155c0:	2300      	movs	r3, #0
 80155c2:	e00d      	b.n	80155e0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	68db      	ldr	r3, [r3, #12]
 80155c8:	617b      	str	r3, [r7, #20]
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d1f3      	bne.n	80155b8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80155d0:	4b09      	ldr	r3, [pc, #36]	; (80155f8 <udp_connect+0xd8>)
 80155d2:	681a      	ldr	r2, [r3, #0]
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80155d8:	4a07      	ldr	r2, [pc, #28]	; (80155f8 <udp_connect+0xd8>)
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80155de:	2300      	movs	r3, #0
}
 80155e0:	4618      	mov	r0, r3
 80155e2:	3718      	adds	r7, #24
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd80      	pop	{r7, pc}
 80155e8:	0801b2a0 	.word	0x0801b2a0
 80155ec:	0801b5c4 	.word	0x0801b5c4
 80155f0:	0801b338 	.word	0x0801b338
 80155f4:	0801b5e0 	.word	0x0801b5e0
 80155f8:	2400a79c 	.word	0x2400a79c

080155fc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80155fc:	b580      	push	{r7, lr}
 80155fe:	b084      	sub	sp, #16
 8015600:	af00      	add	r7, sp, #0
 8015602:	60f8      	str	r0, [r7, #12]
 8015604:	60b9      	str	r1, [r7, #8]
 8015606:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d107      	bne.n	801561e <udp_recv+0x22>
 801560e:	4b08      	ldr	r3, [pc, #32]	; (8015630 <udp_recv+0x34>)
 8015610:	f240 428a 	movw	r2, #1162	; 0x48a
 8015614:	4907      	ldr	r1, [pc, #28]	; (8015634 <udp_recv+0x38>)
 8015616:	4808      	ldr	r0, [pc, #32]	; (8015638 <udp_recv+0x3c>)
 8015618:	f000 fbf8 	bl	8015e0c <iprintf>
 801561c:	e005      	b.n	801562a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	68ba      	ldr	r2, [r7, #8]
 8015622:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	687a      	ldr	r2, [r7, #4]
 8015628:	61da      	str	r2, [r3, #28]
}
 801562a:	3710      	adds	r7, #16
 801562c:	46bd      	mov	sp, r7
 801562e:	bd80      	pop	{r7, pc}
 8015630:	0801b2a0 	.word	0x0801b2a0
 8015634:	0801b618 	.word	0x0801b618
 8015638:	0801b338 	.word	0x0801b338

0801563c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b084      	sub	sp, #16
 8015640:	af00      	add	r7, sp, #0
 8015642:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d107      	bne.n	801565a <udp_remove+0x1e>
 801564a:	4b19      	ldr	r3, [pc, #100]	; (80156b0 <udp_remove+0x74>)
 801564c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8015650:	4918      	ldr	r1, [pc, #96]	; (80156b4 <udp_remove+0x78>)
 8015652:	4819      	ldr	r0, [pc, #100]	; (80156b8 <udp_remove+0x7c>)
 8015654:	f000 fbda 	bl	8015e0c <iprintf>
 8015658:	e026      	b.n	80156a8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801565a:	4b18      	ldr	r3, [pc, #96]	; (80156bc <udp_remove+0x80>)
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	687a      	ldr	r2, [r7, #4]
 8015660:	429a      	cmp	r2, r3
 8015662:	d105      	bne.n	8015670 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8015664:	4b15      	ldr	r3, [pc, #84]	; (80156bc <udp_remove+0x80>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	68db      	ldr	r3, [r3, #12]
 801566a:	4a14      	ldr	r2, [pc, #80]	; (80156bc <udp_remove+0x80>)
 801566c:	6013      	str	r3, [r2, #0]
 801566e:	e017      	b.n	80156a0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015670:	4b12      	ldr	r3, [pc, #72]	; (80156bc <udp_remove+0x80>)
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	60fb      	str	r3, [r7, #12]
 8015676:	e010      	b.n	801569a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	68db      	ldr	r3, [r3, #12]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d009      	beq.n	8015694 <udp_remove+0x58>
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	68db      	ldr	r3, [r3, #12]
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	429a      	cmp	r2, r3
 8015688:	d104      	bne.n	8015694 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	68da      	ldr	r2, [r3, #12]
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	60da      	str	r2, [r3, #12]
        break;
 8015692:	e005      	b.n	80156a0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	68db      	ldr	r3, [r3, #12]
 8015698:	60fb      	str	r3, [r7, #12]
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	2b00      	cmp	r3, #0
 801569e:	d1eb      	bne.n	8015678 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80156a0:	6879      	ldr	r1, [r7, #4]
 80156a2:	2000      	movs	r0, #0
 80156a4:	f7f8 fd26 	bl	800e0f4 <memp_free>
}
 80156a8:	3710      	adds	r7, #16
 80156aa:	46bd      	mov	sp, r7
 80156ac:	bd80      	pop	{r7, pc}
 80156ae:	bf00      	nop
 80156b0:	0801b2a0 	.word	0x0801b2a0
 80156b4:	0801b630 	.word	0x0801b630
 80156b8:	0801b338 	.word	0x0801b338
 80156bc:	2400a79c 	.word	0x2400a79c

080156c0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b082      	sub	sp, #8
 80156c4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80156c6:	2000      	movs	r0, #0
 80156c8:	f7f8 fc9e 	bl	800e008 <memp_malloc>
 80156cc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d007      	beq.n	80156e4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80156d4:	2220      	movs	r2, #32
 80156d6:	2100      	movs	r1, #0
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f000 fb8f 	bl	8015dfc <memset>
    pcb->ttl = UDP_TTL;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	22ff      	movs	r2, #255	; 0xff
 80156e2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80156e4:	687b      	ldr	r3, [r7, #4]
}
 80156e6:	4618      	mov	r0, r3
 80156e8:	3708      	adds	r7, #8
 80156ea:	46bd      	mov	sp, r7
 80156ec:	bd80      	pop	{r7, pc}

080156ee <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80156ee:	b580      	push	{r7, lr}
 80156f0:	b084      	sub	sp, #16
 80156f2:	af00      	add	r7, sp, #0
 80156f4:	4603      	mov	r3, r0
 80156f6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80156f8:	f7ff ffe2 	bl	80156c0 <udp_new>
 80156fc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80156fe:	68fb      	ldr	r3, [r7, #12]
}
 8015700:	4618      	mov	r0, r3
 8015702:	3710      	adds	r7, #16
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}

08015708 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015708:	b480      	push	{r7}
 801570a:	b085      	sub	sp, #20
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
 8015710:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d01e      	beq.n	8015756 <udp_netif_ip_addr_changed+0x4e>
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d01a      	beq.n	8015756 <udp_netif_ip_addr_changed+0x4e>
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d017      	beq.n	8015756 <udp_netif_ip_addr_changed+0x4e>
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	2b00      	cmp	r3, #0
 801572c:	d013      	beq.n	8015756 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801572e:	4b0d      	ldr	r3, [pc, #52]	; (8015764 <udp_netif_ip_addr_changed+0x5c>)
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	60fb      	str	r3, [r7, #12]
 8015734:	e00c      	b.n	8015750 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	429a      	cmp	r2, r3
 8015740:	d103      	bne.n	801574a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	681a      	ldr	r2, [r3, #0]
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	68db      	ldr	r3, [r3, #12]
 801574e:	60fb      	str	r3, [r7, #12]
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d1ef      	bne.n	8015736 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8015756:	bf00      	nop
 8015758:	3714      	adds	r7, #20
 801575a:	46bd      	mov	sp, r7
 801575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015760:	4770      	bx	lr
 8015762:	bf00      	nop
 8015764:	2400a79c 	.word	0x2400a79c

08015768 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b086      	sub	sp, #24
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
 8015770:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015772:	230e      	movs	r3, #14
 8015774:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	895b      	ldrh	r3, [r3, #10]
 801577a:	2b0e      	cmp	r3, #14
 801577c:	d96e      	bls.n	801585c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	7bdb      	ldrb	r3, [r3, #15]
 8015782:	2b00      	cmp	r3, #0
 8015784:	d106      	bne.n	8015794 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015786:	683b      	ldr	r3, [r7, #0]
 8015788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801578c:	3301      	adds	r3, #1
 801578e:	b2da      	uxtb	r2, r3
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	685b      	ldr	r3, [r3, #4]
 8015798:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801579a:	693b      	ldr	r3, [r7, #16]
 801579c:	7b1a      	ldrb	r2, [r3, #12]
 801579e:	7b5b      	ldrb	r3, [r3, #13]
 80157a0:	021b      	lsls	r3, r3, #8
 80157a2:	4313      	orrs	r3, r2
 80157a4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80157a6:	693b      	ldr	r3, [r7, #16]
 80157a8:	781b      	ldrb	r3, [r3, #0]
 80157aa:	f003 0301 	and.w	r3, r3, #1
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d023      	beq.n	80157fa <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80157b2:	693b      	ldr	r3, [r7, #16]
 80157b4:	781b      	ldrb	r3, [r3, #0]
 80157b6:	2b01      	cmp	r3, #1
 80157b8:	d10f      	bne.n	80157da <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80157ba:	693b      	ldr	r3, [r7, #16]
 80157bc:	785b      	ldrb	r3, [r3, #1]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d11b      	bne.n	80157fa <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80157c2:	693b      	ldr	r3, [r7, #16]
 80157c4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80157c6:	2b5e      	cmp	r3, #94	; 0x5e
 80157c8:	d117      	bne.n	80157fa <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	7b5b      	ldrb	r3, [r3, #13]
 80157ce:	f043 0310 	orr.w	r3, r3, #16
 80157d2:	b2da      	uxtb	r2, r3
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	735a      	strb	r2, [r3, #13]
 80157d8:	e00f      	b.n	80157fa <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80157da:	693b      	ldr	r3, [r7, #16]
 80157dc:	2206      	movs	r2, #6
 80157de:	4928      	ldr	r1, [pc, #160]	; (8015880 <ethernet_input+0x118>)
 80157e0:	4618      	mov	r0, r3
 80157e2:	f000 fad5 	bl	8015d90 <memcmp>
 80157e6:	4603      	mov	r3, r0
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d106      	bne.n	80157fa <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	7b5b      	ldrb	r3, [r3, #13]
 80157f0:	f043 0308 	orr.w	r3, r3, #8
 80157f4:	b2da      	uxtb	r2, r3
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80157fa:	89fb      	ldrh	r3, [r7, #14]
 80157fc:	2b08      	cmp	r3, #8
 80157fe:	d003      	beq.n	8015808 <ethernet_input+0xa0>
 8015800:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015804:	d014      	beq.n	8015830 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015806:	e032      	b.n	801586e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015808:	683b      	ldr	r3, [r7, #0]
 801580a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801580e:	f003 0308 	and.w	r3, r3, #8
 8015812:	2b00      	cmp	r3, #0
 8015814:	d024      	beq.n	8015860 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015816:	8afb      	ldrh	r3, [r7, #22]
 8015818:	4619      	mov	r1, r3
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f7f9 fa2c 	bl	800ec78 <pbuf_remove_header>
 8015820:	4603      	mov	r3, r0
 8015822:	2b00      	cmp	r3, #0
 8015824:	d11e      	bne.n	8015864 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015826:	6839      	ldr	r1, [r7, #0]
 8015828:	6878      	ldr	r0, [r7, #4]
 801582a:	f7f6 fe35 	bl	800c498 <ip4_input>
      break;
 801582e:	e013      	b.n	8015858 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015830:	683b      	ldr	r3, [r7, #0]
 8015832:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015836:	f003 0308 	and.w	r3, r3, #8
 801583a:	2b00      	cmp	r3, #0
 801583c:	d014      	beq.n	8015868 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801583e:	8afb      	ldrh	r3, [r7, #22]
 8015840:	4619      	mov	r1, r3
 8015842:	6878      	ldr	r0, [r7, #4]
 8015844:	f7f9 fa18 	bl	800ec78 <pbuf_remove_header>
 8015848:	4603      	mov	r3, r0
 801584a:	2b00      	cmp	r3, #0
 801584c:	d10e      	bne.n	801586c <ethernet_input+0x104>
        etharp_input(p, netif);
 801584e:	6839      	ldr	r1, [r7, #0]
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f7f5 ffb9 	bl	800b7c8 <etharp_input>
      break;
 8015856:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015858:	2300      	movs	r3, #0
 801585a:	e00c      	b.n	8015876 <ethernet_input+0x10e>
    goto free_and_return;
 801585c:	bf00      	nop
 801585e:	e006      	b.n	801586e <ethernet_input+0x106>
        goto free_and_return;
 8015860:	bf00      	nop
 8015862:	e004      	b.n	801586e <ethernet_input+0x106>
        goto free_and_return;
 8015864:	bf00      	nop
 8015866:	e002      	b.n	801586e <ethernet_input+0x106>
        goto free_and_return;
 8015868:	bf00      	nop
 801586a:	e000      	b.n	801586e <ethernet_input+0x106>
        goto free_and_return;
 801586c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801586e:	6878      	ldr	r0, [r7, #4]
 8015870:	f7f9 fa88 	bl	800ed84 <pbuf_free>
  return ERR_OK;
 8015874:	2300      	movs	r3, #0
}
 8015876:	4618      	mov	r0, r3
 8015878:	3718      	adds	r7, #24
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop
 8015880:	0801b648 	.word	0x0801b648

08015884 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015884:	b580      	push	{r7, lr}
 8015886:	b086      	sub	sp, #24
 8015888:	af00      	add	r7, sp, #0
 801588a:	60f8      	str	r0, [r7, #12]
 801588c:	60b9      	str	r1, [r7, #8]
 801588e:	607a      	str	r2, [r7, #4]
 8015890:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015892:	8c3b      	ldrh	r3, [r7, #32]
 8015894:	4618      	mov	r0, r3
 8015896:	f7f7 fe75 	bl	800d584 <lwip_htons>
 801589a:	4603      	mov	r3, r0
 801589c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801589e:	210e      	movs	r1, #14
 80158a0:	68b8      	ldr	r0, [r7, #8]
 80158a2:	f7f9 f9d9 	bl	800ec58 <pbuf_add_header>
 80158a6:	4603      	mov	r3, r0
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d125      	bne.n	80158f8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80158ac:	68bb      	ldr	r3, [r7, #8]
 80158ae:	685b      	ldr	r3, [r3, #4]
 80158b0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80158b2:	693b      	ldr	r3, [r7, #16]
 80158b4:	8afa      	ldrh	r2, [r7, #22]
 80158b6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80158b8:	693b      	ldr	r3, [r7, #16]
 80158ba:	2206      	movs	r2, #6
 80158bc:	6839      	ldr	r1, [r7, #0]
 80158be:	4618      	mov	r0, r3
 80158c0:	f000 fa74 	bl	8015dac <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80158c4:	693b      	ldr	r3, [r7, #16]
 80158c6:	3306      	adds	r3, #6
 80158c8:	2206      	movs	r2, #6
 80158ca:	6879      	ldr	r1, [r7, #4]
 80158cc:	4618      	mov	r0, r3
 80158ce:	f000 fa6d 	bl	8015dac <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80158d8:	2b06      	cmp	r3, #6
 80158da:	d006      	beq.n	80158ea <ethernet_output+0x66>
 80158dc:	4b0a      	ldr	r3, [pc, #40]	; (8015908 <ethernet_output+0x84>)
 80158de:	f44f 7299 	mov.w	r2, #306	; 0x132
 80158e2:	490a      	ldr	r1, [pc, #40]	; (801590c <ethernet_output+0x88>)
 80158e4:	480a      	ldr	r0, [pc, #40]	; (8015910 <ethernet_output+0x8c>)
 80158e6:	f000 fa91 	bl	8015e0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	699b      	ldr	r3, [r3, #24]
 80158ee:	68b9      	ldr	r1, [r7, #8]
 80158f0:	68f8      	ldr	r0, [r7, #12]
 80158f2:	4798      	blx	r3
 80158f4:	4603      	mov	r3, r0
 80158f6:	e002      	b.n	80158fe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80158f8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80158fa:	f06f 0301 	mvn.w	r3, #1
}
 80158fe:	4618      	mov	r0, r3
 8015900:	3718      	adds	r7, #24
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
 8015906:	bf00      	nop
 8015908:	0801b658 	.word	0x0801b658
 801590c:	0801b6d0 	.word	0x0801b6d0
 8015910:	0801b704 	.word	0x0801b704

08015914 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015914:	b580      	push	{r7, lr}
 8015916:	b084      	sub	sp, #16
 8015918:	af00      	add	r7, sp, #0
 801591a:	6078      	str	r0, [r7, #4]
 801591c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801591e:	683b      	ldr	r3, [r7, #0]
 8015920:	60bb      	str	r3, [r7, #8]
 8015922:	2304      	movs	r3, #4
 8015924:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015926:	f107 0308 	add.w	r3, r7, #8
 801592a:	2100      	movs	r1, #0
 801592c:	4618      	mov	r0, r3
 801592e:	f7f2 fab8 	bl	8007ea2 <osMessageCreate>
 8015932:	4602      	mov	r2, r0
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d102      	bne.n	8015946 <sys_mbox_new+0x32>
    return ERR_MEM;
 8015940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015944:	e000      	b.n	8015948 <sys_mbox_new+0x34>

  return ERR_OK;
 8015946:	2300      	movs	r3, #0
}
 8015948:	4618      	mov	r0, r3
 801594a:	3710      	adds	r7, #16
 801594c:	46bd      	mov	sp, r7
 801594e:	bd80      	pop	{r7, pc}

08015950 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015950:	b580      	push	{r7, lr}
 8015952:	b082      	sub	sp, #8
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	4618      	mov	r0, r3
 801595e:	f7f2 fb7e 	bl	800805e <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	4618      	mov	r0, r3
 8015968:	f7f2 fb8f 	bl	800808a <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801596c:	bf00      	nop
 801596e:	3708      	adds	r7, #8
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}

08015974 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b084      	sub	sp, #16
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
 801597c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	6839      	ldr	r1, [r7, #0]
 8015984:	2200      	movs	r2, #0
 8015986:	4618      	mov	r0, r3
 8015988:	f7f2 fa9e 	bl	8007ec8 <osMessagePut>
 801598c:	4603      	mov	r3, r0
 801598e:	2b00      	cmp	r3, #0
 8015990:	d102      	bne.n	8015998 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015992:	2300      	movs	r3, #0
 8015994:	73fb      	strb	r3, [r7, #15]
 8015996:	e001      	b.n	801599c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015998:	23ff      	movs	r3, #255	; 0xff
 801599a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801599c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80159a0:	4618      	mov	r0, r3
 80159a2:	3710      	adds	r7, #16
 80159a4:	46bd      	mov	sp, r7
 80159a6:	bd80      	pop	{r7, pc}

080159a8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80159a8:	b580      	push	{r7, lr}
 80159aa:	b08c      	sub	sp, #48	; 0x30
 80159ac:	af00      	add	r7, sp, #0
 80159ae:	61f8      	str	r0, [r7, #28]
 80159b0:	61b9      	str	r1, [r7, #24]
 80159b2:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80159b4:	f7f2 f8d3 	bl	8007b5e <osKernelSysTick>
 80159b8:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80159ba:	697b      	ldr	r3, [r7, #20]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d017      	beq.n	80159f0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80159c0:	69fb      	ldr	r3, [r7, #28]
 80159c2:	6819      	ldr	r1, [r3, #0]
 80159c4:	f107 0320 	add.w	r3, r7, #32
 80159c8:	697a      	ldr	r2, [r7, #20]
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7f2 fabc 	bl	8007f48 <osMessageGet>

    if(event.status == osEventMessage)
 80159d0:	6a3b      	ldr	r3, [r7, #32]
 80159d2:	2b10      	cmp	r3, #16
 80159d4:	d109      	bne.n	80159ea <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80159d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159d8:	461a      	mov	r2, r3
 80159da:	69bb      	ldr	r3, [r7, #24]
 80159dc:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80159de:	f7f2 f8be 	bl	8007b5e <osKernelSysTick>
 80159e2:	4602      	mov	r2, r0
 80159e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159e6:	1ad3      	subs	r3, r2, r3
 80159e8:	e019      	b.n	8015a1e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80159ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80159ee:	e016      	b.n	8015a1e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80159f0:	69fb      	ldr	r3, [r7, #28]
 80159f2:	6819      	ldr	r1, [r3, #0]
 80159f4:	463b      	mov	r3, r7
 80159f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80159fa:	4618      	mov	r0, r3
 80159fc:	f7f2 faa4 	bl	8007f48 <osMessageGet>
 8015a00:	f107 0320 	add.w	r3, r7, #32
 8015a04:	463a      	mov	r2, r7
 8015a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8015a08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a0e:	461a      	mov	r2, r3
 8015a10:	69bb      	ldr	r3, [r7, #24]
 8015a12:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015a14:	f7f2 f8a3 	bl	8007b5e <osKernelSysTick>
 8015a18:	4602      	mov	r2, r0
 8015a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a1c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015a1e:	4618      	mov	r0, r3
 8015a20:	3730      	adds	r7, #48	; 0x30
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd80      	pop	{r7, pc}

08015a26 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015a26:	b580      	push	{r7, lr}
 8015a28:	b086      	sub	sp, #24
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	6078      	str	r0, [r7, #4]
 8015a2e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	6819      	ldr	r1, [r3, #0]
 8015a34:	f107 030c 	add.w	r3, r7, #12
 8015a38:	2200      	movs	r2, #0
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f7f2 fa84 	bl	8007f48 <osMessageGet>

  if(event.status == osEventMessage)
 8015a40:	68fb      	ldr	r3, [r7, #12]
 8015a42:	2b10      	cmp	r3, #16
 8015a44:	d105      	bne.n	8015a52 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8015a46:	693b      	ldr	r3, [r7, #16]
 8015a48:	461a      	mov	r2, r3
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	e001      	b.n	8015a56 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8015a56:	4618      	mov	r0, r3
 8015a58:	3718      	adds	r7, #24
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	bd80      	pop	{r7, pc}

08015a5e <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015a5e:	b480      	push	{r7}
 8015a60:	b083      	sub	sp, #12
 8015a62:	af00      	add	r7, sp, #0
 8015a64:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d101      	bne.n	8015a72 <sys_mbox_valid+0x14>
    return 0;
 8015a6e:	2300      	movs	r3, #0
 8015a70:	e000      	b.n	8015a74 <sys_mbox_valid+0x16>
  else
    return 1;
 8015a72:	2301      	movs	r3, #1
}
 8015a74:	4618      	mov	r0, r3
 8015a76:	370c      	adds	r7, #12
 8015a78:	46bd      	mov	sp, r7
 8015a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7e:	4770      	bx	lr

08015a80 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015a80:	b480      	push	{r7}
 8015a82:	b083      	sub	sp, #12
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	2200      	movs	r2, #0
 8015a8c:	601a      	str	r2, [r3, #0]
}
 8015a8e:	bf00      	nop
 8015a90:	370c      	adds	r7, #12
 8015a92:	46bd      	mov	sp, r7
 8015a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a98:	4770      	bx	lr

08015a9a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015a9a:	b580      	push	{r7, lr}
 8015a9c:	b084      	sub	sp, #16
 8015a9e:	af00      	add	r7, sp, #0
 8015aa0:	6078      	str	r0, [r7, #4]
 8015aa2:	460b      	mov	r3, r1
 8015aa4:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8015aa6:	2300      	movs	r3, #0
 8015aa8:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8015aaa:	f107 030c 	add.w	r3, r7, #12
 8015aae:	2101      	movs	r1, #1
 8015ab0:	4618      	mov	r0, r3
 8015ab2:	f7f2 f93b 	bl	8007d2c <osSemaphoreCreate>
 8015ab6:	4602      	mov	r2, r0
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	2b00      	cmp	r3, #0
 8015ac2:	d102      	bne.n	8015aca <sys_sem_new+0x30>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015ac4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015ac8:	e009      	b.n	8015ade <sys_sem_new+0x44>
  }

  if(count == 0)	// Means it can't be taken
 8015aca:	78fb      	ldrb	r3, [r7, #3]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d105      	bne.n	8015adc <sys_sem_new+0x42>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	2100      	movs	r1, #0
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f7f2 f94c 	bl	8007d74 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015adc:	2300      	movs	r3, #0
}
 8015ade:	4618      	mov	r0, r3
 8015ae0:	3710      	adds	r7, #16
 8015ae2:	46bd      	mov	sp, r7
 8015ae4:	bd80      	pop	{r7, pc}

08015ae6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015ae6:	b580      	push	{r7, lr}
 8015ae8:	b084      	sub	sp, #16
 8015aea:	af00      	add	r7, sp, #0
 8015aec:	6078      	str	r0, [r7, #4]
 8015aee:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8015af0:	f7f2 f835 	bl	8007b5e <osKernelSysTick>
 8015af4:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015af6:	683b      	ldr	r3, [r7, #0]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	d011      	beq.n	8015b20 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	6839      	ldr	r1, [r7, #0]
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7f2 f936 	bl	8007d74 <osSemaphoreWait>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d105      	bne.n	8015b1a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015b0e:	f7f2 f826 	bl	8007b5e <osKernelSysTick>
 8015b12:	4602      	mov	r2, r0
 8015b14:	68fb      	ldr	r3, [r7, #12]
 8015b16:	1ad3      	subs	r3, r2, r3
 8015b18:	e012      	b.n	8015b40 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015b1e:	e00f      	b.n	8015b40 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015b20:	bf00      	nop
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015b2a:	4618      	mov	r0, r3
 8015b2c:	f7f2 f922 	bl	8007d74 <osSemaphoreWait>
 8015b30:	4603      	mov	r3, r0
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d1f5      	bne.n	8015b22 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8015b36:	f7f2 f812 	bl	8007b5e <osKernelSysTick>
 8015b3a:	4602      	mov	r2, r0
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015b40:	4618      	mov	r0, r3
 8015b42:	3710      	adds	r7, #16
 8015b44:	46bd      	mov	sp, r7
 8015b46:	bd80      	pop	{r7, pc}

08015b48 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b082      	sub	sp, #8
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	681b      	ldr	r3, [r3, #0]
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7f2 f95b 	bl	8007e10 <osSemaphoreRelease>
}
 8015b5a:	bf00      	nop
 8015b5c:	3708      	adds	r7, #8
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}

08015b62 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015b62:	b580      	push	{r7, lr}
 8015b64:	b082      	sub	sp, #8
 8015b66:	af00      	add	r7, sp, #0
 8015b68:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	4618      	mov	r0, r3
 8015b70:	f7f2 f984 	bl	8007e7c <osSemaphoreDelete>
}
 8015b74:	bf00      	nop
 8015b76:	3708      	adds	r7, #8
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	bd80      	pop	{r7, pc}

08015b7c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015b7c:	b480      	push	{r7}
 8015b7e:	b083      	sub	sp, #12
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d101      	bne.n	8015b90 <sys_sem_valid+0x14>
    return 0;
 8015b8c:	2300      	movs	r3, #0
 8015b8e:	e000      	b.n	8015b92 <sys_sem_valid+0x16>
  else
    return 1;
 8015b90:	2301      	movs	r3, #1
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	370c      	adds	r7, #12
 8015b96:	46bd      	mov	sp, r7
 8015b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9c:	4770      	bx	lr

08015b9e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015b9e:	b480      	push	{r7}
 8015ba0:	b083      	sub	sp, #12
 8015ba2:	af00      	add	r7, sp, #0
 8015ba4:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	2200      	movs	r2, #0
 8015baa:	601a      	str	r2, [r3, #0]
}
 8015bac:	bf00      	nop
 8015bae:	370c      	adds	r7, #12
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb6:	4770      	bx	lr

08015bb8 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015bbc:	4803      	ldr	r0, [pc, #12]	; (8015bcc <sys_init+0x14>)
 8015bbe:	f7f2 f825 	bl	8007c0c <osMutexCreate>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	4a02      	ldr	r2, [pc, #8]	; (8015bd0 <sys_init+0x18>)
 8015bc6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015bc8:	bf00      	nop
 8015bca:	bd80      	pop	{r7, pc}
 8015bcc:	0801b72c 	.word	0x0801b72c
 8015bd0:	2400a7a4 	.word	0x2400a7a4

08015bd4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b084      	sub	sp, #16
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015bdc:	2300      	movs	r3, #0
 8015bde:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015be0:	f107 030c 	add.w	r3, r7, #12
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7f2 f811 	bl	8007c0c <osMutexCreate>
 8015bea:	4602      	mov	r2, r0
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d102      	bne.n	8015bfe <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015bfc:	e000      	b.n	8015c00 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015bfe:	2300      	movs	r3, #0
}
 8015c00:	4618      	mov	r0, r3
 8015c02:	3710      	adds	r7, #16
 8015c04:	46bd      	mov	sp, r7
 8015c06:	bd80      	pop	{r7, pc}

08015c08 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b082      	sub	sp, #8
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f7f2 f803 	bl	8007c24 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015c1e:	bf00      	nop
 8015c20:	3708      	adds	r7, #8
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}

08015c26 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015c26:	b580      	push	{r7, lr}
 8015c28:	b082      	sub	sp, #8
 8015c2a:	af00      	add	r7, sp, #0
 8015c2c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	4618      	mov	r0, r3
 8015c34:	f7f2 f844 	bl	8007cc0 <osMutexRelease>
}
 8015c38:	bf00      	nop
 8015c3a:	3708      	adds	r7, #8
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd80      	pop	{r7, pc}

08015c40 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b08a      	sub	sp, #40	; 0x28
 8015c44:	af00      	add	r7, sp, #0
 8015c46:	60f8      	str	r0, [r7, #12]
 8015c48:	60b9      	str	r1, [r7, #8]
 8015c4a:	607a      	str	r2, [r7, #4]
 8015c4c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	617b      	str	r3, [r7, #20]
 8015c52:	68bb      	ldr	r3, [r7, #8]
 8015c54:	61bb      	str	r3, [r7, #24]
 8015c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c58:	b21b      	sxth	r3, r3
 8015c5a:	83bb      	strh	r3, [r7, #28]
 8015c5c:	2300      	movs	r3, #0
 8015c5e:	623b      	str	r3, [r7, #32]
 8015c60:	683b      	ldr	r3, [r7, #0]
 8015c62:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015c64:	f107 0314 	add.w	r3, r7, #20
 8015c68:	6879      	ldr	r1, [r7, #4]
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	f7f1 ff87 	bl	8007b7e <osThreadCreate>
 8015c70:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015c72:	4618      	mov	r0, r3
 8015c74:	3728      	adds	r7, #40	; 0x28
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}
	...

08015c7c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015c80:	4b04      	ldr	r3, [pc, #16]	; (8015c94 <sys_arch_protect+0x18>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f7f1 ffcb 	bl	8007c24 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015c8e:	2301      	movs	r3, #1
}
 8015c90:	4618      	mov	r0, r3
 8015c92:	bd80      	pop	{r7, pc}
 8015c94:	2400a7a4 	.word	0x2400a7a4

08015c98 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015c98:	b580      	push	{r7, lr}
 8015c9a:	b082      	sub	sp, #8
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015ca0:	4b04      	ldr	r3, [pc, #16]	; (8015cb4 <sys_arch_unprotect+0x1c>)
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	f7f2 f80b 	bl	8007cc0 <osMutexRelease>
}
 8015caa:	bf00      	nop
 8015cac:	3708      	adds	r7, #8
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	bd80      	pop	{r7, pc}
 8015cb2:	bf00      	nop
 8015cb4:	2400a7a4 	.word	0x2400a7a4

08015cb8 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8015cb8:	b580      	push	{r7, lr}
 8015cba:	b084      	sub	sp, #16
 8015cbc:	af00      	add	r7, sp, #0
 8015cbe:	6078      	str	r0, [r7, #4]
 8015cc0:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d002      	beq.n	8015cce <fs_open+0x16>
 8015cc8:	683b      	ldr	r3, [r7, #0]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d102      	bne.n	8015cd4 <fs_open+0x1c>
    return ERR_ARG;
 8015cce:	f06f 030f 	mvn.w	r3, #15
 8015cd2:	e028      	b.n	8015d26 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8015cd4:	4b16      	ldr	r3, [pc, #88]	; (8015d30 <fs_open+0x78>)
 8015cd6:	60fb      	str	r3, [r7, #12]
 8015cd8:	e020      	b.n	8015d1c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	685b      	ldr	r3, [r3, #4]
 8015cde:	4619      	mov	r1, r3
 8015ce0:	6838      	ldr	r0, [r7, #0]
 8015ce2:	f7ea fafd 	bl	80002e0 <strcmp>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d114      	bne.n	8015d16 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	689a      	ldr	r2, [r3, #8]
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	68da      	ldr	r2, [r3, #12]
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8015cfc:	68fb      	ldr	r3, [r7, #12]
 8015cfe:	68da      	ldr	r2, [r3, #12]
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	2200      	movs	r2, #0
 8015d08:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	7c1a      	ldrb	r2, [r3, #16]
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8015d12:	2300      	movs	r3, #0
 8015d14:	e007      	b.n	8015d26 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8015d16:	68fb      	ldr	r3, [r7, #12]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	60fb      	str	r3, [r7, #12]
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d1db      	bne.n	8015cda <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8015d22:	f06f 0305 	mvn.w	r3, #5
}
 8015d26:	4618      	mov	r0, r3
 8015d28:	3710      	adds	r7, #16
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	bf00      	nop
 8015d30:	0802b76c 	.word	0x0802b76c

08015d34 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8015d34:	b480      	push	{r7}
 8015d36:	b083      	sub	sp, #12
 8015d38:	af00      	add	r7, sp, #0
 8015d3a:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8015d3c:	bf00      	nop
 8015d3e:	370c      	adds	r7, #12
 8015d40:	46bd      	mov	sp, r7
 8015d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d46:	4770      	bx	lr

08015d48 <__libc_init_array>:
 8015d48:	b570      	push	{r4, r5, r6, lr}
 8015d4a:	4d0d      	ldr	r5, [pc, #52]	; (8015d80 <__libc_init_array+0x38>)
 8015d4c:	4c0d      	ldr	r4, [pc, #52]	; (8015d84 <__libc_init_array+0x3c>)
 8015d4e:	1b64      	subs	r4, r4, r5
 8015d50:	10a4      	asrs	r4, r4, #2
 8015d52:	2600      	movs	r6, #0
 8015d54:	42a6      	cmp	r6, r4
 8015d56:	d109      	bne.n	8015d6c <__libc_init_array+0x24>
 8015d58:	4d0b      	ldr	r5, [pc, #44]	; (8015d88 <__libc_init_array+0x40>)
 8015d5a:	4c0c      	ldr	r4, [pc, #48]	; (8015d8c <__libc_init_array+0x44>)
 8015d5c:	f001 fa94 	bl	8017288 <_init>
 8015d60:	1b64      	subs	r4, r4, r5
 8015d62:	10a4      	asrs	r4, r4, #2
 8015d64:	2600      	movs	r6, #0
 8015d66:	42a6      	cmp	r6, r4
 8015d68:	d105      	bne.n	8015d76 <__libc_init_array+0x2e>
 8015d6a:	bd70      	pop	{r4, r5, r6, pc}
 8015d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d70:	4798      	blx	r3
 8015d72:	3601      	adds	r6, #1
 8015d74:	e7ee      	b.n	8015d54 <__libc_init_array+0xc>
 8015d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d7a:	4798      	blx	r3
 8015d7c:	3601      	adds	r6, #1
 8015d7e:	e7f2      	b.n	8015d66 <__libc_init_array+0x1e>
 8015d80:	0802b8cc 	.word	0x0802b8cc
 8015d84:	0802b8cc 	.word	0x0802b8cc
 8015d88:	0802b8cc 	.word	0x0802b8cc
 8015d8c:	0802b8d0 	.word	0x0802b8d0

08015d90 <memcmp>:
 8015d90:	b530      	push	{r4, r5, lr}
 8015d92:	3901      	subs	r1, #1
 8015d94:	2400      	movs	r4, #0
 8015d96:	42a2      	cmp	r2, r4
 8015d98:	d101      	bne.n	8015d9e <memcmp+0xe>
 8015d9a:	2000      	movs	r0, #0
 8015d9c:	e005      	b.n	8015daa <memcmp+0x1a>
 8015d9e:	5d03      	ldrb	r3, [r0, r4]
 8015da0:	3401      	adds	r4, #1
 8015da2:	5d0d      	ldrb	r5, [r1, r4]
 8015da4:	42ab      	cmp	r3, r5
 8015da6:	d0f6      	beq.n	8015d96 <memcmp+0x6>
 8015da8:	1b58      	subs	r0, r3, r5
 8015daa:	bd30      	pop	{r4, r5, pc}

08015dac <memcpy>:
 8015dac:	440a      	add	r2, r1
 8015dae:	4291      	cmp	r1, r2
 8015db0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015db4:	d100      	bne.n	8015db8 <memcpy+0xc>
 8015db6:	4770      	bx	lr
 8015db8:	b510      	push	{r4, lr}
 8015dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015dbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015dc2:	4291      	cmp	r1, r2
 8015dc4:	d1f9      	bne.n	8015dba <memcpy+0xe>
 8015dc6:	bd10      	pop	{r4, pc}

08015dc8 <memmove>:
 8015dc8:	4288      	cmp	r0, r1
 8015dca:	b510      	push	{r4, lr}
 8015dcc:	eb01 0402 	add.w	r4, r1, r2
 8015dd0:	d902      	bls.n	8015dd8 <memmove+0x10>
 8015dd2:	4284      	cmp	r4, r0
 8015dd4:	4623      	mov	r3, r4
 8015dd6:	d807      	bhi.n	8015de8 <memmove+0x20>
 8015dd8:	1e43      	subs	r3, r0, #1
 8015dda:	42a1      	cmp	r1, r4
 8015ddc:	d008      	beq.n	8015df0 <memmove+0x28>
 8015dde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015de2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015de6:	e7f8      	b.n	8015dda <memmove+0x12>
 8015de8:	4402      	add	r2, r0
 8015dea:	4601      	mov	r1, r0
 8015dec:	428a      	cmp	r2, r1
 8015dee:	d100      	bne.n	8015df2 <memmove+0x2a>
 8015df0:	bd10      	pop	{r4, pc}
 8015df2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015df6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015dfa:	e7f7      	b.n	8015dec <memmove+0x24>

08015dfc <memset>:
 8015dfc:	4402      	add	r2, r0
 8015dfe:	4603      	mov	r3, r0
 8015e00:	4293      	cmp	r3, r2
 8015e02:	d100      	bne.n	8015e06 <memset+0xa>
 8015e04:	4770      	bx	lr
 8015e06:	f803 1b01 	strb.w	r1, [r3], #1
 8015e0a:	e7f9      	b.n	8015e00 <memset+0x4>

08015e0c <iprintf>:
 8015e0c:	b40f      	push	{r0, r1, r2, r3}
 8015e0e:	4b0a      	ldr	r3, [pc, #40]	; (8015e38 <iprintf+0x2c>)
 8015e10:	b513      	push	{r0, r1, r4, lr}
 8015e12:	681c      	ldr	r4, [r3, #0]
 8015e14:	b124      	cbz	r4, 8015e20 <iprintf+0x14>
 8015e16:	69a3      	ldr	r3, [r4, #24]
 8015e18:	b913      	cbnz	r3, 8015e20 <iprintf+0x14>
 8015e1a:	4620      	mov	r0, r4
 8015e1c:	f000 f90e 	bl	801603c <__sinit>
 8015e20:	ab05      	add	r3, sp, #20
 8015e22:	9a04      	ldr	r2, [sp, #16]
 8015e24:	68a1      	ldr	r1, [r4, #8]
 8015e26:	9301      	str	r3, [sp, #4]
 8015e28:	4620      	mov	r0, r4
 8015e2a:	f000 fbf1 	bl	8016610 <_vfiprintf_r>
 8015e2e:	b002      	add	sp, #8
 8015e30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e34:	b004      	add	sp, #16
 8015e36:	4770      	bx	lr
 8015e38:	24000050 	.word	0x24000050

08015e3c <rand>:
 8015e3c:	4b17      	ldr	r3, [pc, #92]	; (8015e9c <rand+0x60>)
 8015e3e:	b510      	push	{r4, lr}
 8015e40:	681c      	ldr	r4, [r3, #0]
 8015e42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015e44:	b9b3      	cbnz	r3, 8015e74 <rand+0x38>
 8015e46:	2018      	movs	r0, #24
 8015e48:	f000 f9aa 	bl	80161a0 <malloc>
 8015e4c:	63a0      	str	r0, [r4, #56]	; 0x38
 8015e4e:	b928      	cbnz	r0, 8015e5c <rand+0x20>
 8015e50:	4602      	mov	r2, r0
 8015e52:	4b13      	ldr	r3, [pc, #76]	; (8015ea0 <rand+0x64>)
 8015e54:	4813      	ldr	r0, [pc, #76]	; (8015ea4 <rand+0x68>)
 8015e56:	214e      	movs	r1, #78	; 0x4e
 8015e58:	f000 f87a 	bl	8015f50 <__assert_func>
 8015e5c:	4a12      	ldr	r2, [pc, #72]	; (8015ea8 <rand+0x6c>)
 8015e5e:	4b13      	ldr	r3, [pc, #76]	; (8015eac <rand+0x70>)
 8015e60:	e9c0 2300 	strd	r2, r3, [r0]
 8015e64:	4b12      	ldr	r3, [pc, #72]	; (8015eb0 <rand+0x74>)
 8015e66:	6083      	str	r3, [r0, #8]
 8015e68:	230b      	movs	r3, #11
 8015e6a:	8183      	strh	r3, [r0, #12]
 8015e6c:	2201      	movs	r2, #1
 8015e6e:	2300      	movs	r3, #0
 8015e70:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015e74:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015e76:	480f      	ldr	r0, [pc, #60]	; (8015eb4 <rand+0x78>)
 8015e78:	690a      	ldr	r2, [r1, #16]
 8015e7a:	694b      	ldr	r3, [r1, #20]
 8015e7c:	4c0e      	ldr	r4, [pc, #56]	; (8015eb8 <rand+0x7c>)
 8015e7e:	4350      	muls	r0, r2
 8015e80:	fb04 0003 	mla	r0, r4, r3, r0
 8015e84:	fba2 3404 	umull	r3, r4, r2, r4
 8015e88:	1c5a      	adds	r2, r3, #1
 8015e8a:	4404      	add	r4, r0
 8015e8c:	f144 0000 	adc.w	r0, r4, #0
 8015e90:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8015e94:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015e98:	bd10      	pop	{r4, pc}
 8015e9a:	bf00      	nop
 8015e9c:	24000050 	.word	0x24000050
 8015ea0:	0802b784 	.word	0x0802b784
 8015ea4:	0802b79b 	.word	0x0802b79b
 8015ea8:	abcd330e 	.word	0xabcd330e
 8015eac:	e66d1234 	.word	0xe66d1234
 8015eb0:	0005deec 	.word	0x0005deec
 8015eb4:	5851f42d 	.word	0x5851f42d
 8015eb8:	4c957f2d 	.word	0x4c957f2d

08015ebc <siprintf>:
 8015ebc:	b40e      	push	{r1, r2, r3}
 8015ebe:	b500      	push	{lr}
 8015ec0:	b09c      	sub	sp, #112	; 0x70
 8015ec2:	ab1d      	add	r3, sp, #116	; 0x74
 8015ec4:	9002      	str	r0, [sp, #8]
 8015ec6:	9006      	str	r0, [sp, #24]
 8015ec8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015ecc:	4809      	ldr	r0, [pc, #36]	; (8015ef4 <siprintf+0x38>)
 8015ece:	9107      	str	r1, [sp, #28]
 8015ed0:	9104      	str	r1, [sp, #16]
 8015ed2:	4909      	ldr	r1, [pc, #36]	; (8015ef8 <siprintf+0x3c>)
 8015ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8015ed8:	9105      	str	r1, [sp, #20]
 8015eda:	6800      	ldr	r0, [r0, #0]
 8015edc:	9301      	str	r3, [sp, #4]
 8015ede:	a902      	add	r1, sp, #8
 8015ee0:	f000 fa6c 	bl	80163bc <_svfiprintf_r>
 8015ee4:	9b02      	ldr	r3, [sp, #8]
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	701a      	strb	r2, [r3, #0]
 8015eea:	b01c      	add	sp, #112	; 0x70
 8015eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8015ef0:	b003      	add	sp, #12
 8015ef2:	4770      	bx	lr
 8015ef4:	24000050 	.word	0x24000050
 8015ef8:	ffff0208 	.word	0xffff0208

08015efc <strcat>:
 8015efc:	b510      	push	{r4, lr}
 8015efe:	4602      	mov	r2, r0
 8015f00:	7814      	ldrb	r4, [r2, #0]
 8015f02:	4613      	mov	r3, r2
 8015f04:	3201      	adds	r2, #1
 8015f06:	2c00      	cmp	r4, #0
 8015f08:	d1fa      	bne.n	8015f00 <strcat+0x4>
 8015f0a:	3b01      	subs	r3, #1
 8015f0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f10:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015f14:	2a00      	cmp	r2, #0
 8015f16:	d1f9      	bne.n	8015f0c <strcat+0x10>
 8015f18:	bd10      	pop	{r4, pc}

08015f1a <strcpy>:
 8015f1a:	4603      	mov	r3, r0
 8015f1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015f20:	f803 2b01 	strb.w	r2, [r3], #1
 8015f24:	2a00      	cmp	r2, #0
 8015f26:	d1f9      	bne.n	8015f1c <strcpy+0x2>
 8015f28:	4770      	bx	lr

08015f2a <strncmp>:
 8015f2a:	b510      	push	{r4, lr}
 8015f2c:	b16a      	cbz	r2, 8015f4a <strncmp+0x20>
 8015f2e:	3901      	subs	r1, #1
 8015f30:	1884      	adds	r4, r0, r2
 8015f32:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015f36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8015f3a:	4293      	cmp	r3, r2
 8015f3c:	d103      	bne.n	8015f46 <strncmp+0x1c>
 8015f3e:	42a0      	cmp	r0, r4
 8015f40:	d001      	beq.n	8015f46 <strncmp+0x1c>
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d1f5      	bne.n	8015f32 <strncmp+0x8>
 8015f46:	1a98      	subs	r0, r3, r2
 8015f48:	bd10      	pop	{r4, pc}
 8015f4a:	4610      	mov	r0, r2
 8015f4c:	e7fc      	b.n	8015f48 <strncmp+0x1e>
	...

08015f50 <__assert_func>:
 8015f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015f52:	4614      	mov	r4, r2
 8015f54:	461a      	mov	r2, r3
 8015f56:	4b09      	ldr	r3, [pc, #36]	; (8015f7c <__assert_func+0x2c>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	4605      	mov	r5, r0
 8015f5c:	68d8      	ldr	r0, [r3, #12]
 8015f5e:	b14c      	cbz	r4, 8015f74 <__assert_func+0x24>
 8015f60:	4b07      	ldr	r3, [pc, #28]	; (8015f80 <__assert_func+0x30>)
 8015f62:	9100      	str	r1, [sp, #0]
 8015f64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015f68:	4906      	ldr	r1, [pc, #24]	; (8015f84 <__assert_func+0x34>)
 8015f6a:	462b      	mov	r3, r5
 8015f6c:	f000 f8e4 	bl	8016138 <fiprintf>
 8015f70:	f000 ff38 	bl	8016de4 <abort>
 8015f74:	4b04      	ldr	r3, [pc, #16]	; (8015f88 <__assert_func+0x38>)
 8015f76:	461c      	mov	r4, r3
 8015f78:	e7f3      	b.n	8015f62 <__assert_func+0x12>
 8015f7a:	bf00      	nop
 8015f7c:	24000050 	.word	0x24000050
 8015f80:	0802b7fa 	.word	0x0802b7fa
 8015f84:	0802b807 	.word	0x0802b807
 8015f88:	0802b835 	.word	0x0802b835

08015f8c <std>:
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	b510      	push	{r4, lr}
 8015f90:	4604      	mov	r4, r0
 8015f92:	e9c0 3300 	strd	r3, r3, [r0]
 8015f96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015f9a:	6083      	str	r3, [r0, #8]
 8015f9c:	8181      	strh	r1, [r0, #12]
 8015f9e:	6643      	str	r3, [r0, #100]	; 0x64
 8015fa0:	81c2      	strh	r2, [r0, #14]
 8015fa2:	6183      	str	r3, [r0, #24]
 8015fa4:	4619      	mov	r1, r3
 8015fa6:	2208      	movs	r2, #8
 8015fa8:	305c      	adds	r0, #92	; 0x5c
 8015faa:	f7ff ff27 	bl	8015dfc <memset>
 8015fae:	4b05      	ldr	r3, [pc, #20]	; (8015fc4 <std+0x38>)
 8015fb0:	6263      	str	r3, [r4, #36]	; 0x24
 8015fb2:	4b05      	ldr	r3, [pc, #20]	; (8015fc8 <std+0x3c>)
 8015fb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8015fb6:	4b05      	ldr	r3, [pc, #20]	; (8015fcc <std+0x40>)
 8015fb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015fba:	4b05      	ldr	r3, [pc, #20]	; (8015fd0 <std+0x44>)
 8015fbc:	6224      	str	r4, [r4, #32]
 8015fbe:	6323      	str	r3, [r4, #48]	; 0x30
 8015fc0:	bd10      	pop	{r4, pc}
 8015fc2:	bf00      	nop
 8015fc4:	08016bb9 	.word	0x08016bb9
 8015fc8:	08016bdb 	.word	0x08016bdb
 8015fcc:	08016c13 	.word	0x08016c13
 8015fd0:	08016c37 	.word	0x08016c37

08015fd4 <_cleanup_r>:
 8015fd4:	4901      	ldr	r1, [pc, #4]	; (8015fdc <_cleanup_r+0x8>)
 8015fd6:	f000 b8c1 	b.w	801615c <_fwalk_reent>
 8015fda:	bf00      	nop
 8015fdc:	08016f21 	.word	0x08016f21

08015fe0 <__sfmoreglue>:
 8015fe0:	b570      	push	{r4, r5, r6, lr}
 8015fe2:	1e4a      	subs	r2, r1, #1
 8015fe4:	2568      	movs	r5, #104	; 0x68
 8015fe6:	4355      	muls	r5, r2
 8015fe8:	460e      	mov	r6, r1
 8015fea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015fee:	f000 f92f 	bl	8016250 <_malloc_r>
 8015ff2:	4604      	mov	r4, r0
 8015ff4:	b140      	cbz	r0, 8016008 <__sfmoreglue+0x28>
 8015ff6:	2100      	movs	r1, #0
 8015ff8:	e9c0 1600 	strd	r1, r6, [r0]
 8015ffc:	300c      	adds	r0, #12
 8015ffe:	60a0      	str	r0, [r4, #8]
 8016000:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016004:	f7ff fefa 	bl	8015dfc <memset>
 8016008:	4620      	mov	r0, r4
 801600a:	bd70      	pop	{r4, r5, r6, pc}

0801600c <__sfp_lock_acquire>:
 801600c:	4801      	ldr	r0, [pc, #4]	; (8016014 <__sfp_lock_acquire+0x8>)
 801600e:	f000 b8c5 	b.w	801619c <__retarget_lock_acquire_recursive>
 8016012:	bf00      	nop
 8016014:	2400a7b0 	.word	0x2400a7b0

08016018 <__sfp_lock_release>:
 8016018:	4801      	ldr	r0, [pc, #4]	; (8016020 <__sfp_lock_release+0x8>)
 801601a:	f000 b8c0 	b.w	801619e <__retarget_lock_release_recursive>
 801601e:	bf00      	nop
 8016020:	2400a7b0 	.word	0x2400a7b0

08016024 <__sinit_lock_acquire>:
 8016024:	4801      	ldr	r0, [pc, #4]	; (801602c <__sinit_lock_acquire+0x8>)
 8016026:	f000 b8b9 	b.w	801619c <__retarget_lock_acquire_recursive>
 801602a:	bf00      	nop
 801602c:	2400a7ab 	.word	0x2400a7ab

08016030 <__sinit_lock_release>:
 8016030:	4801      	ldr	r0, [pc, #4]	; (8016038 <__sinit_lock_release+0x8>)
 8016032:	f000 b8b4 	b.w	801619e <__retarget_lock_release_recursive>
 8016036:	bf00      	nop
 8016038:	2400a7ab 	.word	0x2400a7ab

0801603c <__sinit>:
 801603c:	b510      	push	{r4, lr}
 801603e:	4604      	mov	r4, r0
 8016040:	f7ff fff0 	bl	8016024 <__sinit_lock_acquire>
 8016044:	69a3      	ldr	r3, [r4, #24]
 8016046:	b11b      	cbz	r3, 8016050 <__sinit+0x14>
 8016048:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801604c:	f7ff bff0 	b.w	8016030 <__sinit_lock_release>
 8016050:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016054:	6523      	str	r3, [r4, #80]	; 0x50
 8016056:	4b13      	ldr	r3, [pc, #76]	; (80160a4 <__sinit+0x68>)
 8016058:	4a13      	ldr	r2, [pc, #76]	; (80160a8 <__sinit+0x6c>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	62a2      	str	r2, [r4, #40]	; 0x28
 801605e:	42a3      	cmp	r3, r4
 8016060:	bf04      	itt	eq
 8016062:	2301      	moveq	r3, #1
 8016064:	61a3      	streq	r3, [r4, #24]
 8016066:	4620      	mov	r0, r4
 8016068:	f000 f820 	bl	80160ac <__sfp>
 801606c:	6060      	str	r0, [r4, #4]
 801606e:	4620      	mov	r0, r4
 8016070:	f000 f81c 	bl	80160ac <__sfp>
 8016074:	60a0      	str	r0, [r4, #8]
 8016076:	4620      	mov	r0, r4
 8016078:	f000 f818 	bl	80160ac <__sfp>
 801607c:	2200      	movs	r2, #0
 801607e:	60e0      	str	r0, [r4, #12]
 8016080:	2104      	movs	r1, #4
 8016082:	6860      	ldr	r0, [r4, #4]
 8016084:	f7ff ff82 	bl	8015f8c <std>
 8016088:	68a0      	ldr	r0, [r4, #8]
 801608a:	2201      	movs	r2, #1
 801608c:	2109      	movs	r1, #9
 801608e:	f7ff ff7d 	bl	8015f8c <std>
 8016092:	68e0      	ldr	r0, [r4, #12]
 8016094:	2202      	movs	r2, #2
 8016096:	2112      	movs	r1, #18
 8016098:	f7ff ff78 	bl	8015f8c <std>
 801609c:	2301      	movs	r3, #1
 801609e:	61a3      	str	r3, [r4, #24]
 80160a0:	e7d2      	b.n	8016048 <__sinit+0xc>
 80160a2:	bf00      	nop
 80160a4:	0802b780 	.word	0x0802b780
 80160a8:	08015fd5 	.word	0x08015fd5

080160ac <__sfp>:
 80160ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160ae:	4607      	mov	r7, r0
 80160b0:	f7ff ffac 	bl	801600c <__sfp_lock_acquire>
 80160b4:	4b1e      	ldr	r3, [pc, #120]	; (8016130 <__sfp+0x84>)
 80160b6:	681e      	ldr	r6, [r3, #0]
 80160b8:	69b3      	ldr	r3, [r6, #24]
 80160ba:	b913      	cbnz	r3, 80160c2 <__sfp+0x16>
 80160bc:	4630      	mov	r0, r6
 80160be:	f7ff ffbd 	bl	801603c <__sinit>
 80160c2:	3648      	adds	r6, #72	; 0x48
 80160c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80160c8:	3b01      	subs	r3, #1
 80160ca:	d503      	bpl.n	80160d4 <__sfp+0x28>
 80160cc:	6833      	ldr	r3, [r6, #0]
 80160ce:	b30b      	cbz	r3, 8016114 <__sfp+0x68>
 80160d0:	6836      	ldr	r6, [r6, #0]
 80160d2:	e7f7      	b.n	80160c4 <__sfp+0x18>
 80160d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80160d8:	b9d5      	cbnz	r5, 8016110 <__sfp+0x64>
 80160da:	4b16      	ldr	r3, [pc, #88]	; (8016134 <__sfp+0x88>)
 80160dc:	60e3      	str	r3, [r4, #12]
 80160de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80160e2:	6665      	str	r5, [r4, #100]	; 0x64
 80160e4:	f000 f859 	bl	801619a <__retarget_lock_init_recursive>
 80160e8:	f7ff ff96 	bl	8016018 <__sfp_lock_release>
 80160ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80160f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80160f4:	6025      	str	r5, [r4, #0]
 80160f6:	61a5      	str	r5, [r4, #24]
 80160f8:	2208      	movs	r2, #8
 80160fa:	4629      	mov	r1, r5
 80160fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016100:	f7ff fe7c 	bl	8015dfc <memset>
 8016104:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016108:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801610c:	4620      	mov	r0, r4
 801610e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016110:	3468      	adds	r4, #104	; 0x68
 8016112:	e7d9      	b.n	80160c8 <__sfp+0x1c>
 8016114:	2104      	movs	r1, #4
 8016116:	4638      	mov	r0, r7
 8016118:	f7ff ff62 	bl	8015fe0 <__sfmoreglue>
 801611c:	4604      	mov	r4, r0
 801611e:	6030      	str	r0, [r6, #0]
 8016120:	2800      	cmp	r0, #0
 8016122:	d1d5      	bne.n	80160d0 <__sfp+0x24>
 8016124:	f7ff ff78 	bl	8016018 <__sfp_lock_release>
 8016128:	230c      	movs	r3, #12
 801612a:	603b      	str	r3, [r7, #0]
 801612c:	e7ee      	b.n	801610c <__sfp+0x60>
 801612e:	bf00      	nop
 8016130:	0802b780 	.word	0x0802b780
 8016134:	ffff0001 	.word	0xffff0001

08016138 <fiprintf>:
 8016138:	b40e      	push	{r1, r2, r3}
 801613a:	b503      	push	{r0, r1, lr}
 801613c:	4601      	mov	r1, r0
 801613e:	ab03      	add	r3, sp, #12
 8016140:	4805      	ldr	r0, [pc, #20]	; (8016158 <fiprintf+0x20>)
 8016142:	f853 2b04 	ldr.w	r2, [r3], #4
 8016146:	6800      	ldr	r0, [r0, #0]
 8016148:	9301      	str	r3, [sp, #4]
 801614a:	f000 fa61 	bl	8016610 <_vfiprintf_r>
 801614e:	b002      	add	sp, #8
 8016150:	f85d eb04 	ldr.w	lr, [sp], #4
 8016154:	b003      	add	sp, #12
 8016156:	4770      	bx	lr
 8016158:	24000050 	.word	0x24000050

0801615c <_fwalk_reent>:
 801615c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016160:	4606      	mov	r6, r0
 8016162:	4688      	mov	r8, r1
 8016164:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016168:	2700      	movs	r7, #0
 801616a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801616e:	f1b9 0901 	subs.w	r9, r9, #1
 8016172:	d505      	bpl.n	8016180 <_fwalk_reent+0x24>
 8016174:	6824      	ldr	r4, [r4, #0]
 8016176:	2c00      	cmp	r4, #0
 8016178:	d1f7      	bne.n	801616a <_fwalk_reent+0xe>
 801617a:	4638      	mov	r0, r7
 801617c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016180:	89ab      	ldrh	r3, [r5, #12]
 8016182:	2b01      	cmp	r3, #1
 8016184:	d907      	bls.n	8016196 <_fwalk_reent+0x3a>
 8016186:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801618a:	3301      	adds	r3, #1
 801618c:	d003      	beq.n	8016196 <_fwalk_reent+0x3a>
 801618e:	4629      	mov	r1, r5
 8016190:	4630      	mov	r0, r6
 8016192:	47c0      	blx	r8
 8016194:	4307      	orrs	r7, r0
 8016196:	3568      	adds	r5, #104	; 0x68
 8016198:	e7e9      	b.n	801616e <_fwalk_reent+0x12>

0801619a <__retarget_lock_init_recursive>:
 801619a:	4770      	bx	lr

0801619c <__retarget_lock_acquire_recursive>:
 801619c:	4770      	bx	lr

0801619e <__retarget_lock_release_recursive>:
 801619e:	4770      	bx	lr

080161a0 <malloc>:
 80161a0:	4b02      	ldr	r3, [pc, #8]	; (80161ac <malloc+0xc>)
 80161a2:	4601      	mov	r1, r0
 80161a4:	6818      	ldr	r0, [r3, #0]
 80161a6:	f000 b853 	b.w	8016250 <_malloc_r>
 80161aa:	bf00      	nop
 80161ac:	24000050 	.word	0x24000050

080161b0 <_free_r>:
 80161b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80161b2:	2900      	cmp	r1, #0
 80161b4:	d048      	beq.n	8016248 <_free_r+0x98>
 80161b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80161ba:	9001      	str	r0, [sp, #4]
 80161bc:	2b00      	cmp	r3, #0
 80161be:	f1a1 0404 	sub.w	r4, r1, #4
 80161c2:	bfb8      	it	lt
 80161c4:	18e4      	addlt	r4, r4, r3
 80161c6:	f000 ff5d 	bl	8017084 <__malloc_lock>
 80161ca:	4a20      	ldr	r2, [pc, #128]	; (801624c <_free_r+0x9c>)
 80161cc:	9801      	ldr	r0, [sp, #4]
 80161ce:	6813      	ldr	r3, [r2, #0]
 80161d0:	4615      	mov	r5, r2
 80161d2:	b933      	cbnz	r3, 80161e2 <_free_r+0x32>
 80161d4:	6063      	str	r3, [r4, #4]
 80161d6:	6014      	str	r4, [r2, #0]
 80161d8:	b003      	add	sp, #12
 80161da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80161de:	f000 bf57 	b.w	8017090 <__malloc_unlock>
 80161e2:	42a3      	cmp	r3, r4
 80161e4:	d90b      	bls.n	80161fe <_free_r+0x4e>
 80161e6:	6821      	ldr	r1, [r4, #0]
 80161e8:	1862      	adds	r2, r4, r1
 80161ea:	4293      	cmp	r3, r2
 80161ec:	bf04      	itt	eq
 80161ee:	681a      	ldreq	r2, [r3, #0]
 80161f0:	685b      	ldreq	r3, [r3, #4]
 80161f2:	6063      	str	r3, [r4, #4]
 80161f4:	bf04      	itt	eq
 80161f6:	1852      	addeq	r2, r2, r1
 80161f8:	6022      	streq	r2, [r4, #0]
 80161fa:	602c      	str	r4, [r5, #0]
 80161fc:	e7ec      	b.n	80161d8 <_free_r+0x28>
 80161fe:	461a      	mov	r2, r3
 8016200:	685b      	ldr	r3, [r3, #4]
 8016202:	b10b      	cbz	r3, 8016208 <_free_r+0x58>
 8016204:	42a3      	cmp	r3, r4
 8016206:	d9fa      	bls.n	80161fe <_free_r+0x4e>
 8016208:	6811      	ldr	r1, [r2, #0]
 801620a:	1855      	adds	r5, r2, r1
 801620c:	42a5      	cmp	r5, r4
 801620e:	d10b      	bne.n	8016228 <_free_r+0x78>
 8016210:	6824      	ldr	r4, [r4, #0]
 8016212:	4421      	add	r1, r4
 8016214:	1854      	adds	r4, r2, r1
 8016216:	42a3      	cmp	r3, r4
 8016218:	6011      	str	r1, [r2, #0]
 801621a:	d1dd      	bne.n	80161d8 <_free_r+0x28>
 801621c:	681c      	ldr	r4, [r3, #0]
 801621e:	685b      	ldr	r3, [r3, #4]
 8016220:	6053      	str	r3, [r2, #4]
 8016222:	4421      	add	r1, r4
 8016224:	6011      	str	r1, [r2, #0]
 8016226:	e7d7      	b.n	80161d8 <_free_r+0x28>
 8016228:	d902      	bls.n	8016230 <_free_r+0x80>
 801622a:	230c      	movs	r3, #12
 801622c:	6003      	str	r3, [r0, #0]
 801622e:	e7d3      	b.n	80161d8 <_free_r+0x28>
 8016230:	6825      	ldr	r5, [r4, #0]
 8016232:	1961      	adds	r1, r4, r5
 8016234:	428b      	cmp	r3, r1
 8016236:	bf04      	itt	eq
 8016238:	6819      	ldreq	r1, [r3, #0]
 801623a:	685b      	ldreq	r3, [r3, #4]
 801623c:	6063      	str	r3, [r4, #4]
 801623e:	bf04      	itt	eq
 8016240:	1949      	addeq	r1, r1, r5
 8016242:	6021      	streq	r1, [r4, #0]
 8016244:	6054      	str	r4, [r2, #4]
 8016246:	e7c7      	b.n	80161d8 <_free_r+0x28>
 8016248:	b003      	add	sp, #12
 801624a:	bd30      	pop	{r4, r5, pc}
 801624c:	240067f8 	.word	0x240067f8

08016250 <_malloc_r>:
 8016250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016252:	1ccd      	adds	r5, r1, #3
 8016254:	f025 0503 	bic.w	r5, r5, #3
 8016258:	3508      	adds	r5, #8
 801625a:	2d0c      	cmp	r5, #12
 801625c:	bf38      	it	cc
 801625e:	250c      	movcc	r5, #12
 8016260:	2d00      	cmp	r5, #0
 8016262:	4606      	mov	r6, r0
 8016264:	db01      	blt.n	801626a <_malloc_r+0x1a>
 8016266:	42a9      	cmp	r1, r5
 8016268:	d903      	bls.n	8016272 <_malloc_r+0x22>
 801626a:	230c      	movs	r3, #12
 801626c:	6033      	str	r3, [r6, #0]
 801626e:	2000      	movs	r0, #0
 8016270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016272:	f000 ff07 	bl	8017084 <__malloc_lock>
 8016276:	4921      	ldr	r1, [pc, #132]	; (80162fc <_malloc_r+0xac>)
 8016278:	680a      	ldr	r2, [r1, #0]
 801627a:	4614      	mov	r4, r2
 801627c:	b99c      	cbnz	r4, 80162a6 <_malloc_r+0x56>
 801627e:	4f20      	ldr	r7, [pc, #128]	; (8016300 <_malloc_r+0xb0>)
 8016280:	683b      	ldr	r3, [r7, #0]
 8016282:	b923      	cbnz	r3, 801628e <_malloc_r+0x3e>
 8016284:	4621      	mov	r1, r4
 8016286:	4630      	mov	r0, r6
 8016288:	f000 fc86 	bl	8016b98 <_sbrk_r>
 801628c:	6038      	str	r0, [r7, #0]
 801628e:	4629      	mov	r1, r5
 8016290:	4630      	mov	r0, r6
 8016292:	f000 fc81 	bl	8016b98 <_sbrk_r>
 8016296:	1c43      	adds	r3, r0, #1
 8016298:	d123      	bne.n	80162e2 <_malloc_r+0x92>
 801629a:	230c      	movs	r3, #12
 801629c:	6033      	str	r3, [r6, #0]
 801629e:	4630      	mov	r0, r6
 80162a0:	f000 fef6 	bl	8017090 <__malloc_unlock>
 80162a4:	e7e3      	b.n	801626e <_malloc_r+0x1e>
 80162a6:	6823      	ldr	r3, [r4, #0]
 80162a8:	1b5b      	subs	r3, r3, r5
 80162aa:	d417      	bmi.n	80162dc <_malloc_r+0x8c>
 80162ac:	2b0b      	cmp	r3, #11
 80162ae:	d903      	bls.n	80162b8 <_malloc_r+0x68>
 80162b0:	6023      	str	r3, [r4, #0]
 80162b2:	441c      	add	r4, r3
 80162b4:	6025      	str	r5, [r4, #0]
 80162b6:	e004      	b.n	80162c2 <_malloc_r+0x72>
 80162b8:	6863      	ldr	r3, [r4, #4]
 80162ba:	42a2      	cmp	r2, r4
 80162bc:	bf0c      	ite	eq
 80162be:	600b      	streq	r3, [r1, #0]
 80162c0:	6053      	strne	r3, [r2, #4]
 80162c2:	4630      	mov	r0, r6
 80162c4:	f000 fee4 	bl	8017090 <__malloc_unlock>
 80162c8:	f104 000b 	add.w	r0, r4, #11
 80162cc:	1d23      	adds	r3, r4, #4
 80162ce:	f020 0007 	bic.w	r0, r0, #7
 80162d2:	1ac2      	subs	r2, r0, r3
 80162d4:	d0cc      	beq.n	8016270 <_malloc_r+0x20>
 80162d6:	1a1b      	subs	r3, r3, r0
 80162d8:	50a3      	str	r3, [r4, r2]
 80162da:	e7c9      	b.n	8016270 <_malloc_r+0x20>
 80162dc:	4622      	mov	r2, r4
 80162de:	6864      	ldr	r4, [r4, #4]
 80162e0:	e7cc      	b.n	801627c <_malloc_r+0x2c>
 80162e2:	1cc4      	adds	r4, r0, #3
 80162e4:	f024 0403 	bic.w	r4, r4, #3
 80162e8:	42a0      	cmp	r0, r4
 80162ea:	d0e3      	beq.n	80162b4 <_malloc_r+0x64>
 80162ec:	1a21      	subs	r1, r4, r0
 80162ee:	4630      	mov	r0, r6
 80162f0:	f000 fc52 	bl	8016b98 <_sbrk_r>
 80162f4:	3001      	adds	r0, #1
 80162f6:	d1dd      	bne.n	80162b4 <_malloc_r+0x64>
 80162f8:	e7cf      	b.n	801629a <_malloc_r+0x4a>
 80162fa:	bf00      	nop
 80162fc:	240067f8 	.word	0x240067f8
 8016300:	240067fc 	.word	0x240067fc

08016304 <__ssputs_r>:
 8016304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016308:	688e      	ldr	r6, [r1, #8]
 801630a:	429e      	cmp	r6, r3
 801630c:	4682      	mov	sl, r0
 801630e:	460c      	mov	r4, r1
 8016310:	4690      	mov	r8, r2
 8016312:	461f      	mov	r7, r3
 8016314:	d838      	bhi.n	8016388 <__ssputs_r+0x84>
 8016316:	898a      	ldrh	r2, [r1, #12]
 8016318:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801631c:	d032      	beq.n	8016384 <__ssputs_r+0x80>
 801631e:	6825      	ldr	r5, [r4, #0]
 8016320:	6909      	ldr	r1, [r1, #16]
 8016322:	eba5 0901 	sub.w	r9, r5, r1
 8016326:	6965      	ldr	r5, [r4, #20]
 8016328:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801632c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016330:	3301      	adds	r3, #1
 8016332:	444b      	add	r3, r9
 8016334:	106d      	asrs	r5, r5, #1
 8016336:	429d      	cmp	r5, r3
 8016338:	bf38      	it	cc
 801633a:	461d      	movcc	r5, r3
 801633c:	0553      	lsls	r3, r2, #21
 801633e:	d531      	bpl.n	80163a4 <__ssputs_r+0xa0>
 8016340:	4629      	mov	r1, r5
 8016342:	f7ff ff85 	bl	8016250 <_malloc_r>
 8016346:	4606      	mov	r6, r0
 8016348:	b950      	cbnz	r0, 8016360 <__ssputs_r+0x5c>
 801634a:	230c      	movs	r3, #12
 801634c:	f8ca 3000 	str.w	r3, [sl]
 8016350:	89a3      	ldrh	r3, [r4, #12]
 8016352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016356:	81a3      	strh	r3, [r4, #12]
 8016358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801635c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016360:	6921      	ldr	r1, [r4, #16]
 8016362:	464a      	mov	r2, r9
 8016364:	f7ff fd22 	bl	8015dac <memcpy>
 8016368:	89a3      	ldrh	r3, [r4, #12]
 801636a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801636e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016372:	81a3      	strh	r3, [r4, #12]
 8016374:	6126      	str	r6, [r4, #16]
 8016376:	6165      	str	r5, [r4, #20]
 8016378:	444e      	add	r6, r9
 801637a:	eba5 0509 	sub.w	r5, r5, r9
 801637e:	6026      	str	r6, [r4, #0]
 8016380:	60a5      	str	r5, [r4, #8]
 8016382:	463e      	mov	r6, r7
 8016384:	42be      	cmp	r6, r7
 8016386:	d900      	bls.n	801638a <__ssputs_r+0x86>
 8016388:	463e      	mov	r6, r7
 801638a:	4632      	mov	r2, r6
 801638c:	6820      	ldr	r0, [r4, #0]
 801638e:	4641      	mov	r1, r8
 8016390:	f7ff fd1a 	bl	8015dc8 <memmove>
 8016394:	68a3      	ldr	r3, [r4, #8]
 8016396:	6822      	ldr	r2, [r4, #0]
 8016398:	1b9b      	subs	r3, r3, r6
 801639a:	4432      	add	r2, r6
 801639c:	60a3      	str	r3, [r4, #8]
 801639e:	6022      	str	r2, [r4, #0]
 80163a0:	2000      	movs	r0, #0
 80163a2:	e7db      	b.n	801635c <__ssputs_r+0x58>
 80163a4:	462a      	mov	r2, r5
 80163a6:	f000 fe79 	bl	801709c <_realloc_r>
 80163aa:	4606      	mov	r6, r0
 80163ac:	2800      	cmp	r0, #0
 80163ae:	d1e1      	bne.n	8016374 <__ssputs_r+0x70>
 80163b0:	6921      	ldr	r1, [r4, #16]
 80163b2:	4650      	mov	r0, sl
 80163b4:	f7ff fefc 	bl	80161b0 <_free_r>
 80163b8:	e7c7      	b.n	801634a <__ssputs_r+0x46>
	...

080163bc <_svfiprintf_r>:
 80163bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80163c0:	4698      	mov	r8, r3
 80163c2:	898b      	ldrh	r3, [r1, #12]
 80163c4:	061b      	lsls	r3, r3, #24
 80163c6:	b09d      	sub	sp, #116	; 0x74
 80163c8:	4607      	mov	r7, r0
 80163ca:	460d      	mov	r5, r1
 80163cc:	4614      	mov	r4, r2
 80163ce:	d50e      	bpl.n	80163ee <_svfiprintf_r+0x32>
 80163d0:	690b      	ldr	r3, [r1, #16]
 80163d2:	b963      	cbnz	r3, 80163ee <_svfiprintf_r+0x32>
 80163d4:	2140      	movs	r1, #64	; 0x40
 80163d6:	f7ff ff3b 	bl	8016250 <_malloc_r>
 80163da:	6028      	str	r0, [r5, #0]
 80163dc:	6128      	str	r0, [r5, #16]
 80163de:	b920      	cbnz	r0, 80163ea <_svfiprintf_r+0x2e>
 80163e0:	230c      	movs	r3, #12
 80163e2:	603b      	str	r3, [r7, #0]
 80163e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80163e8:	e0d1      	b.n	801658e <_svfiprintf_r+0x1d2>
 80163ea:	2340      	movs	r3, #64	; 0x40
 80163ec:	616b      	str	r3, [r5, #20]
 80163ee:	2300      	movs	r3, #0
 80163f0:	9309      	str	r3, [sp, #36]	; 0x24
 80163f2:	2320      	movs	r3, #32
 80163f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80163f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80163fc:	2330      	movs	r3, #48	; 0x30
 80163fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80165a8 <_svfiprintf_r+0x1ec>
 8016402:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016406:	f04f 0901 	mov.w	r9, #1
 801640a:	4623      	mov	r3, r4
 801640c:	469a      	mov	sl, r3
 801640e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016412:	b10a      	cbz	r2, 8016418 <_svfiprintf_r+0x5c>
 8016414:	2a25      	cmp	r2, #37	; 0x25
 8016416:	d1f9      	bne.n	801640c <_svfiprintf_r+0x50>
 8016418:	ebba 0b04 	subs.w	fp, sl, r4
 801641c:	d00b      	beq.n	8016436 <_svfiprintf_r+0x7a>
 801641e:	465b      	mov	r3, fp
 8016420:	4622      	mov	r2, r4
 8016422:	4629      	mov	r1, r5
 8016424:	4638      	mov	r0, r7
 8016426:	f7ff ff6d 	bl	8016304 <__ssputs_r>
 801642a:	3001      	adds	r0, #1
 801642c:	f000 80aa 	beq.w	8016584 <_svfiprintf_r+0x1c8>
 8016430:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016432:	445a      	add	r2, fp
 8016434:	9209      	str	r2, [sp, #36]	; 0x24
 8016436:	f89a 3000 	ldrb.w	r3, [sl]
 801643a:	2b00      	cmp	r3, #0
 801643c:	f000 80a2 	beq.w	8016584 <_svfiprintf_r+0x1c8>
 8016440:	2300      	movs	r3, #0
 8016442:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016446:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801644a:	f10a 0a01 	add.w	sl, sl, #1
 801644e:	9304      	str	r3, [sp, #16]
 8016450:	9307      	str	r3, [sp, #28]
 8016452:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016456:	931a      	str	r3, [sp, #104]	; 0x68
 8016458:	4654      	mov	r4, sl
 801645a:	2205      	movs	r2, #5
 801645c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016460:	4851      	ldr	r0, [pc, #324]	; (80165a8 <_svfiprintf_r+0x1ec>)
 8016462:	f7e9 ff55 	bl	8000310 <memchr>
 8016466:	9a04      	ldr	r2, [sp, #16]
 8016468:	b9d8      	cbnz	r0, 80164a2 <_svfiprintf_r+0xe6>
 801646a:	06d0      	lsls	r0, r2, #27
 801646c:	bf44      	itt	mi
 801646e:	2320      	movmi	r3, #32
 8016470:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016474:	0711      	lsls	r1, r2, #28
 8016476:	bf44      	itt	mi
 8016478:	232b      	movmi	r3, #43	; 0x2b
 801647a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801647e:	f89a 3000 	ldrb.w	r3, [sl]
 8016482:	2b2a      	cmp	r3, #42	; 0x2a
 8016484:	d015      	beq.n	80164b2 <_svfiprintf_r+0xf6>
 8016486:	9a07      	ldr	r2, [sp, #28]
 8016488:	4654      	mov	r4, sl
 801648a:	2000      	movs	r0, #0
 801648c:	f04f 0c0a 	mov.w	ip, #10
 8016490:	4621      	mov	r1, r4
 8016492:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016496:	3b30      	subs	r3, #48	; 0x30
 8016498:	2b09      	cmp	r3, #9
 801649a:	d94e      	bls.n	801653a <_svfiprintf_r+0x17e>
 801649c:	b1b0      	cbz	r0, 80164cc <_svfiprintf_r+0x110>
 801649e:	9207      	str	r2, [sp, #28]
 80164a0:	e014      	b.n	80164cc <_svfiprintf_r+0x110>
 80164a2:	eba0 0308 	sub.w	r3, r0, r8
 80164a6:	fa09 f303 	lsl.w	r3, r9, r3
 80164aa:	4313      	orrs	r3, r2
 80164ac:	9304      	str	r3, [sp, #16]
 80164ae:	46a2      	mov	sl, r4
 80164b0:	e7d2      	b.n	8016458 <_svfiprintf_r+0x9c>
 80164b2:	9b03      	ldr	r3, [sp, #12]
 80164b4:	1d19      	adds	r1, r3, #4
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	9103      	str	r1, [sp, #12]
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	bfbb      	ittet	lt
 80164be:	425b      	neglt	r3, r3
 80164c0:	f042 0202 	orrlt.w	r2, r2, #2
 80164c4:	9307      	strge	r3, [sp, #28]
 80164c6:	9307      	strlt	r3, [sp, #28]
 80164c8:	bfb8      	it	lt
 80164ca:	9204      	strlt	r2, [sp, #16]
 80164cc:	7823      	ldrb	r3, [r4, #0]
 80164ce:	2b2e      	cmp	r3, #46	; 0x2e
 80164d0:	d10c      	bne.n	80164ec <_svfiprintf_r+0x130>
 80164d2:	7863      	ldrb	r3, [r4, #1]
 80164d4:	2b2a      	cmp	r3, #42	; 0x2a
 80164d6:	d135      	bne.n	8016544 <_svfiprintf_r+0x188>
 80164d8:	9b03      	ldr	r3, [sp, #12]
 80164da:	1d1a      	adds	r2, r3, #4
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	9203      	str	r2, [sp, #12]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	bfb8      	it	lt
 80164e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80164e8:	3402      	adds	r4, #2
 80164ea:	9305      	str	r3, [sp, #20]
 80164ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80165b8 <_svfiprintf_r+0x1fc>
 80164f0:	7821      	ldrb	r1, [r4, #0]
 80164f2:	2203      	movs	r2, #3
 80164f4:	4650      	mov	r0, sl
 80164f6:	f7e9 ff0b 	bl	8000310 <memchr>
 80164fa:	b140      	cbz	r0, 801650e <_svfiprintf_r+0x152>
 80164fc:	2340      	movs	r3, #64	; 0x40
 80164fe:	eba0 000a 	sub.w	r0, r0, sl
 8016502:	fa03 f000 	lsl.w	r0, r3, r0
 8016506:	9b04      	ldr	r3, [sp, #16]
 8016508:	4303      	orrs	r3, r0
 801650a:	3401      	adds	r4, #1
 801650c:	9304      	str	r3, [sp, #16]
 801650e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016512:	4826      	ldr	r0, [pc, #152]	; (80165ac <_svfiprintf_r+0x1f0>)
 8016514:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016518:	2206      	movs	r2, #6
 801651a:	f7e9 fef9 	bl	8000310 <memchr>
 801651e:	2800      	cmp	r0, #0
 8016520:	d038      	beq.n	8016594 <_svfiprintf_r+0x1d8>
 8016522:	4b23      	ldr	r3, [pc, #140]	; (80165b0 <_svfiprintf_r+0x1f4>)
 8016524:	bb1b      	cbnz	r3, 801656e <_svfiprintf_r+0x1b2>
 8016526:	9b03      	ldr	r3, [sp, #12]
 8016528:	3307      	adds	r3, #7
 801652a:	f023 0307 	bic.w	r3, r3, #7
 801652e:	3308      	adds	r3, #8
 8016530:	9303      	str	r3, [sp, #12]
 8016532:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016534:	4433      	add	r3, r6
 8016536:	9309      	str	r3, [sp, #36]	; 0x24
 8016538:	e767      	b.n	801640a <_svfiprintf_r+0x4e>
 801653a:	fb0c 3202 	mla	r2, ip, r2, r3
 801653e:	460c      	mov	r4, r1
 8016540:	2001      	movs	r0, #1
 8016542:	e7a5      	b.n	8016490 <_svfiprintf_r+0xd4>
 8016544:	2300      	movs	r3, #0
 8016546:	3401      	adds	r4, #1
 8016548:	9305      	str	r3, [sp, #20]
 801654a:	4619      	mov	r1, r3
 801654c:	f04f 0c0a 	mov.w	ip, #10
 8016550:	4620      	mov	r0, r4
 8016552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016556:	3a30      	subs	r2, #48	; 0x30
 8016558:	2a09      	cmp	r2, #9
 801655a:	d903      	bls.n	8016564 <_svfiprintf_r+0x1a8>
 801655c:	2b00      	cmp	r3, #0
 801655e:	d0c5      	beq.n	80164ec <_svfiprintf_r+0x130>
 8016560:	9105      	str	r1, [sp, #20]
 8016562:	e7c3      	b.n	80164ec <_svfiprintf_r+0x130>
 8016564:	fb0c 2101 	mla	r1, ip, r1, r2
 8016568:	4604      	mov	r4, r0
 801656a:	2301      	movs	r3, #1
 801656c:	e7f0      	b.n	8016550 <_svfiprintf_r+0x194>
 801656e:	ab03      	add	r3, sp, #12
 8016570:	9300      	str	r3, [sp, #0]
 8016572:	462a      	mov	r2, r5
 8016574:	4b0f      	ldr	r3, [pc, #60]	; (80165b4 <_svfiprintf_r+0x1f8>)
 8016576:	a904      	add	r1, sp, #16
 8016578:	4638      	mov	r0, r7
 801657a:	f3af 8000 	nop.w
 801657e:	1c42      	adds	r2, r0, #1
 8016580:	4606      	mov	r6, r0
 8016582:	d1d6      	bne.n	8016532 <_svfiprintf_r+0x176>
 8016584:	89ab      	ldrh	r3, [r5, #12]
 8016586:	065b      	lsls	r3, r3, #25
 8016588:	f53f af2c 	bmi.w	80163e4 <_svfiprintf_r+0x28>
 801658c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801658e:	b01d      	add	sp, #116	; 0x74
 8016590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016594:	ab03      	add	r3, sp, #12
 8016596:	9300      	str	r3, [sp, #0]
 8016598:	462a      	mov	r2, r5
 801659a:	4b06      	ldr	r3, [pc, #24]	; (80165b4 <_svfiprintf_r+0x1f8>)
 801659c:	a904      	add	r1, sp, #16
 801659e:	4638      	mov	r0, r7
 80165a0:	f000 f9d4 	bl	801694c <_printf_i>
 80165a4:	e7eb      	b.n	801657e <_svfiprintf_r+0x1c2>
 80165a6:	bf00      	nop
 80165a8:	0802b898 	.word	0x0802b898
 80165ac:	0802b8a2 	.word	0x0802b8a2
 80165b0:	00000000 	.word	0x00000000
 80165b4:	08016305 	.word	0x08016305
 80165b8:	0802b89e 	.word	0x0802b89e

080165bc <__sfputc_r>:
 80165bc:	6893      	ldr	r3, [r2, #8]
 80165be:	3b01      	subs	r3, #1
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	b410      	push	{r4}
 80165c4:	6093      	str	r3, [r2, #8]
 80165c6:	da08      	bge.n	80165da <__sfputc_r+0x1e>
 80165c8:	6994      	ldr	r4, [r2, #24]
 80165ca:	42a3      	cmp	r3, r4
 80165cc:	db01      	blt.n	80165d2 <__sfputc_r+0x16>
 80165ce:	290a      	cmp	r1, #10
 80165d0:	d103      	bne.n	80165da <__sfputc_r+0x1e>
 80165d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80165d6:	f000 bb33 	b.w	8016c40 <__swbuf_r>
 80165da:	6813      	ldr	r3, [r2, #0]
 80165dc:	1c58      	adds	r0, r3, #1
 80165de:	6010      	str	r0, [r2, #0]
 80165e0:	7019      	strb	r1, [r3, #0]
 80165e2:	4608      	mov	r0, r1
 80165e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80165e8:	4770      	bx	lr

080165ea <__sfputs_r>:
 80165ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ec:	4606      	mov	r6, r0
 80165ee:	460f      	mov	r7, r1
 80165f0:	4614      	mov	r4, r2
 80165f2:	18d5      	adds	r5, r2, r3
 80165f4:	42ac      	cmp	r4, r5
 80165f6:	d101      	bne.n	80165fc <__sfputs_r+0x12>
 80165f8:	2000      	movs	r0, #0
 80165fa:	e007      	b.n	801660c <__sfputs_r+0x22>
 80165fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016600:	463a      	mov	r2, r7
 8016602:	4630      	mov	r0, r6
 8016604:	f7ff ffda 	bl	80165bc <__sfputc_r>
 8016608:	1c43      	adds	r3, r0, #1
 801660a:	d1f3      	bne.n	80165f4 <__sfputs_r+0xa>
 801660c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016610 <_vfiprintf_r>:
 8016610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016614:	460d      	mov	r5, r1
 8016616:	b09d      	sub	sp, #116	; 0x74
 8016618:	4614      	mov	r4, r2
 801661a:	4698      	mov	r8, r3
 801661c:	4606      	mov	r6, r0
 801661e:	b118      	cbz	r0, 8016628 <_vfiprintf_r+0x18>
 8016620:	6983      	ldr	r3, [r0, #24]
 8016622:	b90b      	cbnz	r3, 8016628 <_vfiprintf_r+0x18>
 8016624:	f7ff fd0a 	bl	801603c <__sinit>
 8016628:	4b89      	ldr	r3, [pc, #548]	; (8016850 <_vfiprintf_r+0x240>)
 801662a:	429d      	cmp	r5, r3
 801662c:	d11b      	bne.n	8016666 <_vfiprintf_r+0x56>
 801662e:	6875      	ldr	r5, [r6, #4]
 8016630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016632:	07d9      	lsls	r1, r3, #31
 8016634:	d405      	bmi.n	8016642 <_vfiprintf_r+0x32>
 8016636:	89ab      	ldrh	r3, [r5, #12]
 8016638:	059a      	lsls	r2, r3, #22
 801663a:	d402      	bmi.n	8016642 <_vfiprintf_r+0x32>
 801663c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801663e:	f7ff fdad 	bl	801619c <__retarget_lock_acquire_recursive>
 8016642:	89ab      	ldrh	r3, [r5, #12]
 8016644:	071b      	lsls	r3, r3, #28
 8016646:	d501      	bpl.n	801664c <_vfiprintf_r+0x3c>
 8016648:	692b      	ldr	r3, [r5, #16]
 801664a:	b9eb      	cbnz	r3, 8016688 <_vfiprintf_r+0x78>
 801664c:	4629      	mov	r1, r5
 801664e:	4630      	mov	r0, r6
 8016650:	f000 fb5a 	bl	8016d08 <__swsetup_r>
 8016654:	b1c0      	cbz	r0, 8016688 <_vfiprintf_r+0x78>
 8016656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016658:	07dc      	lsls	r4, r3, #31
 801665a:	d50e      	bpl.n	801667a <_vfiprintf_r+0x6a>
 801665c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016660:	b01d      	add	sp, #116	; 0x74
 8016662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016666:	4b7b      	ldr	r3, [pc, #492]	; (8016854 <_vfiprintf_r+0x244>)
 8016668:	429d      	cmp	r5, r3
 801666a:	d101      	bne.n	8016670 <_vfiprintf_r+0x60>
 801666c:	68b5      	ldr	r5, [r6, #8]
 801666e:	e7df      	b.n	8016630 <_vfiprintf_r+0x20>
 8016670:	4b79      	ldr	r3, [pc, #484]	; (8016858 <_vfiprintf_r+0x248>)
 8016672:	429d      	cmp	r5, r3
 8016674:	bf08      	it	eq
 8016676:	68f5      	ldreq	r5, [r6, #12]
 8016678:	e7da      	b.n	8016630 <_vfiprintf_r+0x20>
 801667a:	89ab      	ldrh	r3, [r5, #12]
 801667c:	0598      	lsls	r0, r3, #22
 801667e:	d4ed      	bmi.n	801665c <_vfiprintf_r+0x4c>
 8016680:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016682:	f7ff fd8c 	bl	801619e <__retarget_lock_release_recursive>
 8016686:	e7e9      	b.n	801665c <_vfiprintf_r+0x4c>
 8016688:	2300      	movs	r3, #0
 801668a:	9309      	str	r3, [sp, #36]	; 0x24
 801668c:	2320      	movs	r3, #32
 801668e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016692:	f8cd 800c 	str.w	r8, [sp, #12]
 8016696:	2330      	movs	r3, #48	; 0x30
 8016698:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801685c <_vfiprintf_r+0x24c>
 801669c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80166a0:	f04f 0901 	mov.w	r9, #1
 80166a4:	4623      	mov	r3, r4
 80166a6:	469a      	mov	sl, r3
 80166a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80166ac:	b10a      	cbz	r2, 80166b2 <_vfiprintf_r+0xa2>
 80166ae:	2a25      	cmp	r2, #37	; 0x25
 80166b0:	d1f9      	bne.n	80166a6 <_vfiprintf_r+0x96>
 80166b2:	ebba 0b04 	subs.w	fp, sl, r4
 80166b6:	d00b      	beq.n	80166d0 <_vfiprintf_r+0xc0>
 80166b8:	465b      	mov	r3, fp
 80166ba:	4622      	mov	r2, r4
 80166bc:	4629      	mov	r1, r5
 80166be:	4630      	mov	r0, r6
 80166c0:	f7ff ff93 	bl	80165ea <__sfputs_r>
 80166c4:	3001      	adds	r0, #1
 80166c6:	f000 80aa 	beq.w	801681e <_vfiprintf_r+0x20e>
 80166ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80166cc:	445a      	add	r2, fp
 80166ce:	9209      	str	r2, [sp, #36]	; 0x24
 80166d0:	f89a 3000 	ldrb.w	r3, [sl]
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	f000 80a2 	beq.w	801681e <_vfiprintf_r+0x20e>
 80166da:	2300      	movs	r3, #0
 80166dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80166e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80166e4:	f10a 0a01 	add.w	sl, sl, #1
 80166e8:	9304      	str	r3, [sp, #16]
 80166ea:	9307      	str	r3, [sp, #28]
 80166ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80166f0:	931a      	str	r3, [sp, #104]	; 0x68
 80166f2:	4654      	mov	r4, sl
 80166f4:	2205      	movs	r2, #5
 80166f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166fa:	4858      	ldr	r0, [pc, #352]	; (801685c <_vfiprintf_r+0x24c>)
 80166fc:	f7e9 fe08 	bl	8000310 <memchr>
 8016700:	9a04      	ldr	r2, [sp, #16]
 8016702:	b9d8      	cbnz	r0, 801673c <_vfiprintf_r+0x12c>
 8016704:	06d1      	lsls	r1, r2, #27
 8016706:	bf44      	itt	mi
 8016708:	2320      	movmi	r3, #32
 801670a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801670e:	0713      	lsls	r3, r2, #28
 8016710:	bf44      	itt	mi
 8016712:	232b      	movmi	r3, #43	; 0x2b
 8016714:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016718:	f89a 3000 	ldrb.w	r3, [sl]
 801671c:	2b2a      	cmp	r3, #42	; 0x2a
 801671e:	d015      	beq.n	801674c <_vfiprintf_r+0x13c>
 8016720:	9a07      	ldr	r2, [sp, #28]
 8016722:	4654      	mov	r4, sl
 8016724:	2000      	movs	r0, #0
 8016726:	f04f 0c0a 	mov.w	ip, #10
 801672a:	4621      	mov	r1, r4
 801672c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016730:	3b30      	subs	r3, #48	; 0x30
 8016732:	2b09      	cmp	r3, #9
 8016734:	d94e      	bls.n	80167d4 <_vfiprintf_r+0x1c4>
 8016736:	b1b0      	cbz	r0, 8016766 <_vfiprintf_r+0x156>
 8016738:	9207      	str	r2, [sp, #28]
 801673a:	e014      	b.n	8016766 <_vfiprintf_r+0x156>
 801673c:	eba0 0308 	sub.w	r3, r0, r8
 8016740:	fa09 f303 	lsl.w	r3, r9, r3
 8016744:	4313      	orrs	r3, r2
 8016746:	9304      	str	r3, [sp, #16]
 8016748:	46a2      	mov	sl, r4
 801674a:	e7d2      	b.n	80166f2 <_vfiprintf_r+0xe2>
 801674c:	9b03      	ldr	r3, [sp, #12]
 801674e:	1d19      	adds	r1, r3, #4
 8016750:	681b      	ldr	r3, [r3, #0]
 8016752:	9103      	str	r1, [sp, #12]
 8016754:	2b00      	cmp	r3, #0
 8016756:	bfbb      	ittet	lt
 8016758:	425b      	neglt	r3, r3
 801675a:	f042 0202 	orrlt.w	r2, r2, #2
 801675e:	9307      	strge	r3, [sp, #28]
 8016760:	9307      	strlt	r3, [sp, #28]
 8016762:	bfb8      	it	lt
 8016764:	9204      	strlt	r2, [sp, #16]
 8016766:	7823      	ldrb	r3, [r4, #0]
 8016768:	2b2e      	cmp	r3, #46	; 0x2e
 801676a:	d10c      	bne.n	8016786 <_vfiprintf_r+0x176>
 801676c:	7863      	ldrb	r3, [r4, #1]
 801676e:	2b2a      	cmp	r3, #42	; 0x2a
 8016770:	d135      	bne.n	80167de <_vfiprintf_r+0x1ce>
 8016772:	9b03      	ldr	r3, [sp, #12]
 8016774:	1d1a      	adds	r2, r3, #4
 8016776:	681b      	ldr	r3, [r3, #0]
 8016778:	9203      	str	r2, [sp, #12]
 801677a:	2b00      	cmp	r3, #0
 801677c:	bfb8      	it	lt
 801677e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016782:	3402      	adds	r4, #2
 8016784:	9305      	str	r3, [sp, #20]
 8016786:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801686c <_vfiprintf_r+0x25c>
 801678a:	7821      	ldrb	r1, [r4, #0]
 801678c:	2203      	movs	r2, #3
 801678e:	4650      	mov	r0, sl
 8016790:	f7e9 fdbe 	bl	8000310 <memchr>
 8016794:	b140      	cbz	r0, 80167a8 <_vfiprintf_r+0x198>
 8016796:	2340      	movs	r3, #64	; 0x40
 8016798:	eba0 000a 	sub.w	r0, r0, sl
 801679c:	fa03 f000 	lsl.w	r0, r3, r0
 80167a0:	9b04      	ldr	r3, [sp, #16]
 80167a2:	4303      	orrs	r3, r0
 80167a4:	3401      	adds	r4, #1
 80167a6:	9304      	str	r3, [sp, #16]
 80167a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80167ac:	482c      	ldr	r0, [pc, #176]	; (8016860 <_vfiprintf_r+0x250>)
 80167ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80167b2:	2206      	movs	r2, #6
 80167b4:	f7e9 fdac 	bl	8000310 <memchr>
 80167b8:	2800      	cmp	r0, #0
 80167ba:	d03f      	beq.n	801683c <_vfiprintf_r+0x22c>
 80167bc:	4b29      	ldr	r3, [pc, #164]	; (8016864 <_vfiprintf_r+0x254>)
 80167be:	bb1b      	cbnz	r3, 8016808 <_vfiprintf_r+0x1f8>
 80167c0:	9b03      	ldr	r3, [sp, #12]
 80167c2:	3307      	adds	r3, #7
 80167c4:	f023 0307 	bic.w	r3, r3, #7
 80167c8:	3308      	adds	r3, #8
 80167ca:	9303      	str	r3, [sp, #12]
 80167cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167ce:	443b      	add	r3, r7
 80167d0:	9309      	str	r3, [sp, #36]	; 0x24
 80167d2:	e767      	b.n	80166a4 <_vfiprintf_r+0x94>
 80167d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80167d8:	460c      	mov	r4, r1
 80167da:	2001      	movs	r0, #1
 80167dc:	e7a5      	b.n	801672a <_vfiprintf_r+0x11a>
 80167de:	2300      	movs	r3, #0
 80167e0:	3401      	adds	r4, #1
 80167e2:	9305      	str	r3, [sp, #20]
 80167e4:	4619      	mov	r1, r3
 80167e6:	f04f 0c0a 	mov.w	ip, #10
 80167ea:	4620      	mov	r0, r4
 80167ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80167f0:	3a30      	subs	r2, #48	; 0x30
 80167f2:	2a09      	cmp	r2, #9
 80167f4:	d903      	bls.n	80167fe <_vfiprintf_r+0x1ee>
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d0c5      	beq.n	8016786 <_vfiprintf_r+0x176>
 80167fa:	9105      	str	r1, [sp, #20]
 80167fc:	e7c3      	b.n	8016786 <_vfiprintf_r+0x176>
 80167fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8016802:	4604      	mov	r4, r0
 8016804:	2301      	movs	r3, #1
 8016806:	e7f0      	b.n	80167ea <_vfiprintf_r+0x1da>
 8016808:	ab03      	add	r3, sp, #12
 801680a:	9300      	str	r3, [sp, #0]
 801680c:	462a      	mov	r2, r5
 801680e:	4b16      	ldr	r3, [pc, #88]	; (8016868 <_vfiprintf_r+0x258>)
 8016810:	a904      	add	r1, sp, #16
 8016812:	4630      	mov	r0, r6
 8016814:	f3af 8000 	nop.w
 8016818:	4607      	mov	r7, r0
 801681a:	1c78      	adds	r0, r7, #1
 801681c:	d1d6      	bne.n	80167cc <_vfiprintf_r+0x1bc>
 801681e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016820:	07d9      	lsls	r1, r3, #31
 8016822:	d405      	bmi.n	8016830 <_vfiprintf_r+0x220>
 8016824:	89ab      	ldrh	r3, [r5, #12]
 8016826:	059a      	lsls	r2, r3, #22
 8016828:	d402      	bmi.n	8016830 <_vfiprintf_r+0x220>
 801682a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801682c:	f7ff fcb7 	bl	801619e <__retarget_lock_release_recursive>
 8016830:	89ab      	ldrh	r3, [r5, #12]
 8016832:	065b      	lsls	r3, r3, #25
 8016834:	f53f af12 	bmi.w	801665c <_vfiprintf_r+0x4c>
 8016838:	9809      	ldr	r0, [sp, #36]	; 0x24
 801683a:	e711      	b.n	8016660 <_vfiprintf_r+0x50>
 801683c:	ab03      	add	r3, sp, #12
 801683e:	9300      	str	r3, [sp, #0]
 8016840:	462a      	mov	r2, r5
 8016842:	4b09      	ldr	r3, [pc, #36]	; (8016868 <_vfiprintf_r+0x258>)
 8016844:	a904      	add	r1, sp, #16
 8016846:	4630      	mov	r0, r6
 8016848:	f000 f880 	bl	801694c <_printf_i>
 801684c:	e7e4      	b.n	8016818 <_vfiprintf_r+0x208>
 801684e:	bf00      	nop
 8016850:	0802b858 	.word	0x0802b858
 8016854:	0802b878 	.word	0x0802b878
 8016858:	0802b838 	.word	0x0802b838
 801685c:	0802b898 	.word	0x0802b898
 8016860:	0802b8a2 	.word	0x0802b8a2
 8016864:	00000000 	.word	0x00000000
 8016868:	080165eb 	.word	0x080165eb
 801686c:	0802b89e 	.word	0x0802b89e

08016870 <_printf_common>:
 8016870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016874:	4616      	mov	r6, r2
 8016876:	4699      	mov	r9, r3
 8016878:	688a      	ldr	r2, [r1, #8]
 801687a:	690b      	ldr	r3, [r1, #16]
 801687c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016880:	4293      	cmp	r3, r2
 8016882:	bfb8      	it	lt
 8016884:	4613      	movlt	r3, r2
 8016886:	6033      	str	r3, [r6, #0]
 8016888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801688c:	4607      	mov	r7, r0
 801688e:	460c      	mov	r4, r1
 8016890:	b10a      	cbz	r2, 8016896 <_printf_common+0x26>
 8016892:	3301      	adds	r3, #1
 8016894:	6033      	str	r3, [r6, #0]
 8016896:	6823      	ldr	r3, [r4, #0]
 8016898:	0699      	lsls	r1, r3, #26
 801689a:	bf42      	ittt	mi
 801689c:	6833      	ldrmi	r3, [r6, #0]
 801689e:	3302      	addmi	r3, #2
 80168a0:	6033      	strmi	r3, [r6, #0]
 80168a2:	6825      	ldr	r5, [r4, #0]
 80168a4:	f015 0506 	ands.w	r5, r5, #6
 80168a8:	d106      	bne.n	80168b8 <_printf_common+0x48>
 80168aa:	f104 0a19 	add.w	sl, r4, #25
 80168ae:	68e3      	ldr	r3, [r4, #12]
 80168b0:	6832      	ldr	r2, [r6, #0]
 80168b2:	1a9b      	subs	r3, r3, r2
 80168b4:	42ab      	cmp	r3, r5
 80168b6:	dc26      	bgt.n	8016906 <_printf_common+0x96>
 80168b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80168bc:	1e13      	subs	r3, r2, #0
 80168be:	6822      	ldr	r2, [r4, #0]
 80168c0:	bf18      	it	ne
 80168c2:	2301      	movne	r3, #1
 80168c4:	0692      	lsls	r2, r2, #26
 80168c6:	d42b      	bmi.n	8016920 <_printf_common+0xb0>
 80168c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80168cc:	4649      	mov	r1, r9
 80168ce:	4638      	mov	r0, r7
 80168d0:	47c0      	blx	r8
 80168d2:	3001      	adds	r0, #1
 80168d4:	d01e      	beq.n	8016914 <_printf_common+0xa4>
 80168d6:	6823      	ldr	r3, [r4, #0]
 80168d8:	68e5      	ldr	r5, [r4, #12]
 80168da:	6832      	ldr	r2, [r6, #0]
 80168dc:	f003 0306 	and.w	r3, r3, #6
 80168e0:	2b04      	cmp	r3, #4
 80168e2:	bf08      	it	eq
 80168e4:	1aad      	subeq	r5, r5, r2
 80168e6:	68a3      	ldr	r3, [r4, #8]
 80168e8:	6922      	ldr	r2, [r4, #16]
 80168ea:	bf0c      	ite	eq
 80168ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80168f0:	2500      	movne	r5, #0
 80168f2:	4293      	cmp	r3, r2
 80168f4:	bfc4      	itt	gt
 80168f6:	1a9b      	subgt	r3, r3, r2
 80168f8:	18ed      	addgt	r5, r5, r3
 80168fa:	2600      	movs	r6, #0
 80168fc:	341a      	adds	r4, #26
 80168fe:	42b5      	cmp	r5, r6
 8016900:	d11a      	bne.n	8016938 <_printf_common+0xc8>
 8016902:	2000      	movs	r0, #0
 8016904:	e008      	b.n	8016918 <_printf_common+0xa8>
 8016906:	2301      	movs	r3, #1
 8016908:	4652      	mov	r2, sl
 801690a:	4649      	mov	r1, r9
 801690c:	4638      	mov	r0, r7
 801690e:	47c0      	blx	r8
 8016910:	3001      	adds	r0, #1
 8016912:	d103      	bne.n	801691c <_printf_common+0xac>
 8016914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801691c:	3501      	adds	r5, #1
 801691e:	e7c6      	b.n	80168ae <_printf_common+0x3e>
 8016920:	18e1      	adds	r1, r4, r3
 8016922:	1c5a      	adds	r2, r3, #1
 8016924:	2030      	movs	r0, #48	; 0x30
 8016926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801692a:	4422      	add	r2, r4
 801692c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016934:	3302      	adds	r3, #2
 8016936:	e7c7      	b.n	80168c8 <_printf_common+0x58>
 8016938:	2301      	movs	r3, #1
 801693a:	4622      	mov	r2, r4
 801693c:	4649      	mov	r1, r9
 801693e:	4638      	mov	r0, r7
 8016940:	47c0      	blx	r8
 8016942:	3001      	adds	r0, #1
 8016944:	d0e6      	beq.n	8016914 <_printf_common+0xa4>
 8016946:	3601      	adds	r6, #1
 8016948:	e7d9      	b.n	80168fe <_printf_common+0x8e>
	...

0801694c <_printf_i>:
 801694c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016950:	460c      	mov	r4, r1
 8016952:	4691      	mov	r9, r2
 8016954:	7e27      	ldrb	r7, [r4, #24]
 8016956:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016958:	2f78      	cmp	r7, #120	; 0x78
 801695a:	4680      	mov	r8, r0
 801695c:	469a      	mov	sl, r3
 801695e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016962:	d807      	bhi.n	8016974 <_printf_i+0x28>
 8016964:	2f62      	cmp	r7, #98	; 0x62
 8016966:	d80a      	bhi.n	801697e <_printf_i+0x32>
 8016968:	2f00      	cmp	r7, #0
 801696a:	f000 80d8 	beq.w	8016b1e <_printf_i+0x1d2>
 801696e:	2f58      	cmp	r7, #88	; 0x58
 8016970:	f000 80a3 	beq.w	8016aba <_printf_i+0x16e>
 8016974:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801697c:	e03a      	b.n	80169f4 <_printf_i+0xa8>
 801697e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016982:	2b15      	cmp	r3, #21
 8016984:	d8f6      	bhi.n	8016974 <_printf_i+0x28>
 8016986:	a001      	add	r0, pc, #4	; (adr r0, 801698c <_printf_i+0x40>)
 8016988:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801698c:	080169e5 	.word	0x080169e5
 8016990:	080169f9 	.word	0x080169f9
 8016994:	08016975 	.word	0x08016975
 8016998:	08016975 	.word	0x08016975
 801699c:	08016975 	.word	0x08016975
 80169a0:	08016975 	.word	0x08016975
 80169a4:	080169f9 	.word	0x080169f9
 80169a8:	08016975 	.word	0x08016975
 80169ac:	08016975 	.word	0x08016975
 80169b0:	08016975 	.word	0x08016975
 80169b4:	08016975 	.word	0x08016975
 80169b8:	08016b05 	.word	0x08016b05
 80169bc:	08016a29 	.word	0x08016a29
 80169c0:	08016ae7 	.word	0x08016ae7
 80169c4:	08016975 	.word	0x08016975
 80169c8:	08016975 	.word	0x08016975
 80169cc:	08016b27 	.word	0x08016b27
 80169d0:	08016975 	.word	0x08016975
 80169d4:	08016a29 	.word	0x08016a29
 80169d8:	08016975 	.word	0x08016975
 80169dc:	08016975 	.word	0x08016975
 80169e0:	08016aef 	.word	0x08016aef
 80169e4:	680b      	ldr	r3, [r1, #0]
 80169e6:	1d1a      	adds	r2, r3, #4
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	600a      	str	r2, [r1, #0]
 80169ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80169f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80169f4:	2301      	movs	r3, #1
 80169f6:	e0a3      	b.n	8016b40 <_printf_i+0x1f4>
 80169f8:	6825      	ldr	r5, [r4, #0]
 80169fa:	6808      	ldr	r0, [r1, #0]
 80169fc:	062e      	lsls	r6, r5, #24
 80169fe:	f100 0304 	add.w	r3, r0, #4
 8016a02:	d50a      	bpl.n	8016a1a <_printf_i+0xce>
 8016a04:	6805      	ldr	r5, [r0, #0]
 8016a06:	600b      	str	r3, [r1, #0]
 8016a08:	2d00      	cmp	r5, #0
 8016a0a:	da03      	bge.n	8016a14 <_printf_i+0xc8>
 8016a0c:	232d      	movs	r3, #45	; 0x2d
 8016a0e:	426d      	negs	r5, r5
 8016a10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016a14:	485e      	ldr	r0, [pc, #376]	; (8016b90 <_printf_i+0x244>)
 8016a16:	230a      	movs	r3, #10
 8016a18:	e019      	b.n	8016a4e <_printf_i+0x102>
 8016a1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016a1e:	6805      	ldr	r5, [r0, #0]
 8016a20:	600b      	str	r3, [r1, #0]
 8016a22:	bf18      	it	ne
 8016a24:	b22d      	sxthne	r5, r5
 8016a26:	e7ef      	b.n	8016a08 <_printf_i+0xbc>
 8016a28:	680b      	ldr	r3, [r1, #0]
 8016a2a:	6825      	ldr	r5, [r4, #0]
 8016a2c:	1d18      	adds	r0, r3, #4
 8016a2e:	6008      	str	r0, [r1, #0]
 8016a30:	0628      	lsls	r0, r5, #24
 8016a32:	d501      	bpl.n	8016a38 <_printf_i+0xec>
 8016a34:	681d      	ldr	r5, [r3, #0]
 8016a36:	e002      	b.n	8016a3e <_printf_i+0xf2>
 8016a38:	0669      	lsls	r1, r5, #25
 8016a3a:	d5fb      	bpl.n	8016a34 <_printf_i+0xe8>
 8016a3c:	881d      	ldrh	r5, [r3, #0]
 8016a3e:	4854      	ldr	r0, [pc, #336]	; (8016b90 <_printf_i+0x244>)
 8016a40:	2f6f      	cmp	r7, #111	; 0x6f
 8016a42:	bf0c      	ite	eq
 8016a44:	2308      	moveq	r3, #8
 8016a46:	230a      	movne	r3, #10
 8016a48:	2100      	movs	r1, #0
 8016a4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016a4e:	6866      	ldr	r6, [r4, #4]
 8016a50:	60a6      	str	r6, [r4, #8]
 8016a52:	2e00      	cmp	r6, #0
 8016a54:	bfa2      	ittt	ge
 8016a56:	6821      	ldrge	r1, [r4, #0]
 8016a58:	f021 0104 	bicge.w	r1, r1, #4
 8016a5c:	6021      	strge	r1, [r4, #0]
 8016a5e:	b90d      	cbnz	r5, 8016a64 <_printf_i+0x118>
 8016a60:	2e00      	cmp	r6, #0
 8016a62:	d04d      	beq.n	8016b00 <_printf_i+0x1b4>
 8016a64:	4616      	mov	r6, r2
 8016a66:	fbb5 f1f3 	udiv	r1, r5, r3
 8016a6a:	fb03 5711 	mls	r7, r3, r1, r5
 8016a6e:	5dc7      	ldrb	r7, [r0, r7]
 8016a70:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016a74:	462f      	mov	r7, r5
 8016a76:	42bb      	cmp	r3, r7
 8016a78:	460d      	mov	r5, r1
 8016a7a:	d9f4      	bls.n	8016a66 <_printf_i+0x11a>
 8016a7c:	2b08      	cmp	r3, #8
 8016a7e:	d10b      	bne.n	8016a98 <_printf_i+0x14c>
 8016a80:	6823      	ldr	r3, [r4, #0]
 8016a82:	07df      	lsls	r7, r3, #31
 8016a84:	d508      	bpl.n	8016a98 <_printf_i+0x14c>
 8016a86:	6923      	ldr	r3, [r4, #16]
 8016a88:	6861      	ldr	r1, [r4, #4]
 8016a8a:	4299      	cmp	r1, r3
 8016a8c:	bfde      	ittt	le
 8016a8e:	2330      	movle	r3, #48	; 0x30
 8016a90:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016a94:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8016a98:	1b92      	subs	r2, r2, r6
 8016a9a:	6122      	str	r2, [r4, #16]
 8016a9c:	f8cd a000 	str.w	sl, [sp]
 8016aa0:	464b      	mov	r3, r9
 8016aa2:	aa03      	add	r2, sp, #12
 8016aa4:	4621      	mov	r1, r4
 8016aa6:	4640      	mov	r0, r8
 8016aa8:	f7ff fee2 	bl	8016870 <_printf_common>
 8016aac:	3001      	adds	r0, #1
 8016aae:	d14c      	bne.n	8016b4a <_printf_i+0x1fe>
 8016ab0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016ab4:	b004      	add	sp, #16
 8016ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016aba:	4835      	ldr	r0, [pc, #212]	; (8016b90 <_printf_i+0x244>)
 8016abc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016ac0:	6823      	ldr	r3, [r4, #0]
 8016ac2:	680e      	ldr	r6, [r1, #0]
 8016ac4:	061f      	lsls	r7, r3, #24
 8016ac6:	f856 5b04 	ldr.w	r5, [r6], #4
 8016aca:	600e      	str	r6, [r1, #0]
 8016acc:	d514      	bpl.n	8016af8 <_printf_i+0x1ac>
 8016ace:	07d9      	lsls	r1, r3, #31
 8016ad0:	bf44      	itt	mi
 8016ad2:	f043 0320 	orrmi.w	r3, r3, #32
 8016ad6:	6023      	strmi	r3, [r4, #0]
 8016ad8:	b91d      	cbnz	r5, 8016ae2 <_printf_i+0x196>
 8016ada:	6823      	ldr	r3, [r4, #0]
 8016adc:	f023 0320 	bic.w	r3, r3, #32
 8016ae0:	6023      	str	r3, [r4, #0]
 8016ae2:	2310      	movs	r3, #16
 8016ae4:	e7b0      	b.n	8016a48 <_printf_i+0xfc>
 8016ae6:	6823      	ldr	r3, [r4, #0]
 8016ae8:	f043 0320 	orr.w	r3, r3, #32
 8016aec:	6023      	str	r3, [r4, #0]
 8016aee:	2378      	movs	r3, #120	; 0x78
 8016af0:	4828      	ldr	r0, [pc, #160]	; (8016b94 <_printf_i+0x248>)
 8016af2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016af6:	e7e3      	b.n	8016ac0 <_printf_i+0x174>
 8016af8:	065e      	lsls	r6, r3, #25
 8016afa:	bf48      	it	mi
 8016afc:	b2ad      	uxthmi	r5, r5
 8016afe:	e7e6      	b.n	8016ace <_printf_i+0x182>
 8016b00:	4616      	mov	r6, r2
 8016b02:	e7bb      	b.n	8016a7c <_printf_i+0x130>
 8016b04:	680b      	ldr	r3, [r1, #0]
 8016b06:	6826      	ldr	r6, [r4, #0]
 8016b08:	6960      	ldr	r0, [r4, #20]
 8016b0a:	1d1d      	adds	r5, r3, #4
 8016b0c:	600d      	str	r5, [r1, #0]
 8016b0e:	0635      	lsls	r5, r6, #24
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	d501      	bpl.n	8016b18 <_printf_i+0x1cc>
 8016b14:	6018      	str	r0, [r3, #0]
 8016b16:	e002      	b.n	8016b1e <_printf_i+0x1d2>
 8016b18:	0671      	lsls	r1, r6, #25
 8016b1a:	d5fb      	bpl.n	8016b14 <_printf_i+0x1c8>
 8016b1c:	8018      	strh	r0, [r3, #0]
 8016b1e:	2300      	movs	r3, #0
 8016b20:	6123      	str	r3, [r4, #16]
 8016b22:	4616      	mov	r6, r2
 8016b24:	e7ba      	b.n	8016a9c <_printf_i+0x150>
 8016b26:	680b      	ldr	r3, [r1, #0]
 8016b28:	1d1a      	adds	r2, r3, #4
 8016b2a:	600a      	str	r2, [r1, #0]
 8016b2c:	681e      	ldr	r6, [r3, #0]
 8016b2e:	6862      	ldr	r2, [r4, #4]
 8016b30:	2100      	movs	r1, #0
 8016b32:	4630      	mov	r0, r6
 8016b34:	f7e9 fbec 	bl	8000310 <memchr>
 8016b38:	b108      	cbz	r0, 8016b3e <_printf_i+0x1f2>
 8016b3a:	1b80      	subs	r0, r0, r6
 8016b3c:	6060      	str	r0, [r4, #4]
 8016b3e:	6863      	ldr	r3, [r4, #4]
 8016b40:	6123      	str	r3, [r4, #16]
 8016b42:	2300      	movs	r3, #0
 8016b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016b48:	e7a8      	b.n	8016a9c <_printf_i+0x150>
 8016b4a:	6923      	ldr	r3, [r4, #16]
 8016b4c:	4632      	mov	r2, r6
 8016b4e:	4649      	mov	r1, r9
 8016b50:	4640      	mov	r0, r8
 8016b52:	47d0      	blx	sl
 8016b54:	3001      	adds	r0, #1
 8016b56:	d0ab      	beq.n	8016ab0 <_printf_i+0x164>
 8016b58:	6823      	ldr	r3, [r4, #0]
 8016b5a:	079b      	lsls	r3, r3, #30
 8016b5c:	d413      	bmi.n	8016b86 <_printf_i+0x23a>
 8016b5e:	68e0      	ldr	r0, [r4, #12]
 8016b60:	9b03      	ldr	r3, [sp, #12]
 8016b62:	4298      	cmp	r0, r3
 8016b64:	bfb8      	it	lt
 8016b66:	4618      	movlt	r0, r3
 8016b68:	e7a4      	b.n	8016ab4 <_printf_i+0x168>
 8016b6a:	2301      	movs	r3, #1
 8016b6c:	4632      	mov	r2, r6
 8016b6e:	4649      	mov	r1, r9
 8016b70:	4640      	mov	r0, r8
 8016b72:	47d0      	blx	sl
 8016b74:	3001      	adds	r0, #1
 8016b76:	d09b      	beq.n	8016ab0 <_printf_i+0x164>
 8016b78:	3501      	adds	r5, #1
 8016b7a:	68e3      	ldr	r3, [r4, #12]
 8016b7c:	9903      	ldr	r1, [sp, #12]
 8016b7e:	1a5b      	subs	r3, r3, r1
 8016b80:	42ab      	cmp	r3, r5
 8016b82:	dcf2      	bgt.n	8016b6a <_printf_i+0x21e>
 8016b84:	e7eb      	b.n	8016b5e <_printf_i+0x212>
 8016b86:	2500      	movs	r5, #0
 8016b88:	f104 0619 	add.w	r6, r4, #25
 8016b8c:	e7f5      	b.n	8016b7a <_printf_i+0x22e>
 8016b8e:	bf00      	nop
 8016b90:	0802b8a9 	.word	0x0802b8a9
 8016b94:	0802b8ba 	.word	0x0802b8ba

08016b98 <_sbrk_r>:
 8016b98:	b538      	push	{r3, r4, r5, lr}
 8016b9a:	4d06      	ldr	r5, [pc, #24]	; (8016bb4 <_sbrk_r+0x1c>)
 8016b9c:	2300      	movs	r3, #0
 8016b9e:	4604      	mov	r4, r0
 8016ba0:	4608      	mov	r0, r1
 8016ba2:	602b      	str	r3, [r5, #0]
 8016ba4:	f000 fb58 	bl	8017258 <_sbrk>
 8016ba8:	1c43      	adds	r3, r0, #1
 8016baa:	d102      	bne.n	8016bb2 <_sbrk_r+0x1a>
 8016bac:	682b      	ldr	r3, [r5, #0]
 8016bae:	b103      	cbz	r3, 8016bb2 <_sbrk_r+0x1a>
 8016bb0:	6023      	str	r3, [r4, #0]
 8016bb2:	bd38      	pop	{r3, r4, r5, pc}
 8016bb4:	2400a7a0 	.word	0x2400a7a0

08016bb8 <__sread>:
 8016bb8:	b510      	push	{r4, lr}
 8016bba:	460c      	mov	r4, r1
 8016bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bc0:	f000 fa92 	bl	80170e8 <_read_r>
 8016bc4:	2800      	cmp	r0, #0
 8016bc6:	bfab      	itete	ge
 8016bc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016bca:	89a3      	ldrhlt	r3, [r4, #12]
 8016bcc:	181b      	addge	r3, r3, r0
 8016bce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016bd2:	bfac      	ite	ge
 8016bd4:	6563      	strge	r3, [r4, #84]	; 0x54
 8016bd6:	81a3      	strhlt	r3, [r4, #12]
 8016bd8:	bd10      	pop	{r4, pc}

08016bda <__swrite>:
 8016bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016bde:	461f      	mov	r7, r3
 8016be0:	898b      	ldrh	r3, [r1, #12]
 8016be2:	05db      	lsls	r3, r3, #23
 8016be4:	4605      	mov	r5, r0
 8016be6:	460c      	mov	r4, r1
 8016be8:	4616      	mov	r6, r2
 8016bea:	d505      	bpl.n	8016bf8 <__swrite+0x1e>
 8016bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bf0:	2302      	movs	r3, #2
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	f000 f9d0 	bl	8016f98 <_lseek_r>
 8016bf8:	89a3      	ldrh	r3, [r4, #12]
 8016bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016bfe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c02:	81a3      	strh	r3, [r4, #12]
 8016c04:	4632      	mov	r2, r6
 8016c06:	463b      	mov	r3, r7
 8016c08:	4628      	mov	r0, r5
 8016c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c0e:	f000 b869 	b.w	8016ce4 <_write_r>

08016c12 <__sseek>:
 8016c12:	b510      	push	{r4, lr}
 8016c14:	460c      	mov	r4, r1
 8016c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c1a:	f000 f9bd 	bl	8016f98 <_lseek_r>
 8016c1e:	1c43      	adds	r3, r0, #1
 8016c20:	89a3      	ldrh	r3, [r4, #12]
 8016c22:	bf15      	itete	ne
 8016c24:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c2e:	81a3      	strheq	r3, [r4, #12]
 8016c30:	bf18      	it	ne
 8016c32:	81a3      	strhne	r3, [r4, #12]
 8016c34:	bd10      	pop	{r4, pc}

08016c36 <__sclose>:
 8016c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c3a:	f000 b8db 	b.w	8016df4 <_close_r>
	...

08016c40 <__swbuf_r>:
 8016c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c42:	460e      	mov	r6, r1
 8016c44:	4614      	mov	r4, r2
 8016c46:	4605      	mov	r5, r0
 8016c48:	b118      	cbz	r0, 8016c52 <__swbuf_r+0x12>
 8016c4a:	6983      	ldr	r3, [r0, #24]
 8016c4c:	b90b      	cbnz	r3, 8016c52 <__swbuf_r+0x12>
 8016c4e:	f7ff f9f5 	bl	801603c <__sinit>
 8016c52:	4b21      	ldr	r3, [pc, #132]	; (8016cd8 <__swbuf_r+0x98>)
 8016c54:	429c      	cmp	r4, r3
 8016c56:	d12b      	bne.n	8016cb0 <__swbuf_r+0x70>
 8016c58:	686c      	ldr	r4, [r5, #4]
 8016c5a:	69a3      	ldr	r3, [r4, #24]
 8016c5c:	60a3      	str	r3, [r4, #8]
 8016c5e:	89a3      	ldrh	r3, [r4, #12]
 8016c60:	071a      	lsls	r2, r3, #28
 8016c62:	d52f      	bpl.n	8016cc4 <__swbuf_r+0x84>
 8016c64:	6923      	ldr	r3, [r4, #16]
 8016c66:	b36b      	cbz	r3, 8016cc4 <__swbuf_r+0x84>
 8016c68:	6923      	ldr	r3, [r4, #16]
 8016c6a:	6820      	ldr	r0, [r4, #0]
 8016c6c:	1ac0      	subs	r0, r0, r3
 8016c6e:	6963      	ldr	r3, [r4, #20]
 8016c70:	b2f6      	uxtb	r6, r6
 8016c72:	4283      	cmp	r3, r0
 8016c74:	4637      	mov	r7, r6
 8016c76:	dc04      	bgt.n	8016c82 <__swbuf_r+0x42>
 8016c78:	4621      	mov	r1, r4
 8016c7a:	4628      	mov	r0, r5
 8016c7c:	f000 f950 	bl	8016f20 <_fflush_r>
 8016c80:	bb30      	cbnz	r0, 8016cd0 <__swbuf_r+0x90>
 8016c82:	68a3      	ldr	r3, [r4, #8]
 8016c84:	3b01      	subs	r3, #1
 8016c86:	60a3      	str	r3, [r4, #8]
 8016c88:	6823      	ldr	r3, [r4, #0]
 8016c8a:	1c5a      	adds	r2, r3, #1
 8016c8c:	6022      	str	r2, [r4, #0]
 8016c8e:	701e      	strb	r6, [r3, #0]
 8016c90:	6963      	ldr	r3, [r4, #20]
 8016c92:	3001      	adds	r0, #1
 8016c94:	4283      	cmp	r3, r0
 8016c96:	d004      	beq.n	8016ca2 <__swbuf_r+0x62>
 8016c98:	89a3      	ldrh	r3, [r4, #12]
 8016c9a:	07db      	lsls	r3, r3, #31
 8016c9c:	d506      	bpl.n	8016cac <__swbuf_r+0x6c>
 8016c9e:	2e0a      	cmp	r6, #10
 8016ca0:	d104      	bne.n	8016cac <__swbuf_r+0x6c>
 8016ca2:	4621      	mov	r1, r4
 8016ca4:	4628      	mov	r0, r5
 8016ca6:	f000 f93b 	bl	8016f20 <_fflush_r>
 8016caa:	b988      	cbnz	r0, 8016cd0 <__swbuf_r+0x90>
 8016cac:	4638      	mov	r0, r7
 8016cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016cb0:	4b0a      	ldr	r3, [pc, #40]	; (8016cdc <__swbuf_r+0x9c>)
 8016cb2:	429c      	cmp	r4, r3
 8016cb4:	d101      	bne.n	8016cba <__swbuf_r+0x7a>
 8016cb6:	68ac      	ldr	r4, [r5, #8]
 8016cb8:	e7cf      	b.n	8016c5a <__swbuf_r+0x1a>
 8016cba:	4b09      	ldr	r3, [pc, #36]	; (8016ce0 <__swbuf_r+0xa0>)
 8016cbc:	429c      	cmp	r4, r3
 8016cbe:	bf08      	it	eq
 8016cc0:	68ec      	ldreq	r4, [r5, #12]
 8016cc2:	e7ca      	b.n	8016c5a <__swbuf_r+0x1a>
 8016cc4:	4621      	mov	r1, r4
 8016cc6:	4628      	mov	r0, r5
 8016cc8:	f000 f81e 	bl	8016d08 <__swsetup_r>
 8016ccc:	2800      	cmp	r0, #0
 8016cce:	d0cb      	beq.n	8016c68 <__swbuf_r+0x28>
 8016cd0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016cd4:	e7ea      	b.n	8016cac <__swbuf_r+0x6c>
 8016cd6:	bf00      	nop
 8016cd8:	0802b858 	.word	0x0802b858
 8016cdc:	0802b878 	.word	0x0802b878
 8016ce0:	0802b838 	.word	0x0802b838

08016ce4 <_write_r>:
 8016ce4:	b538      	push	{r3, r4, r5, lr}
 8016ce6:	4d07      	ldr	r5, [pc, #28]	; (8016d04 <_write_r+0x20>)
 8016ce8:	4604      	mov	r4, r0
 8016cea:	4608      	mov	r0, r1
 8016cec:	4611      	mov	r1, r2
 8016cee:	2200      	movs	r2, #0
 8016cf0:	602a      	str	r2, [r5, #0]
 8016cf2:	461a      	mov	r2, r3
 8016cf4:	f000 fabe 	bl	8017274 <_write>
 8016cf8:	1c43      	adds	r3, r0, #1
 8016cfa:	d102      	bne.n	8016d02 <_write_r+0x1e>
 8016cfc:	682b      	ldr	r3, [r5, #0]
 8016cfe:	b103      	cbz	r3, 8016d02 <_write_r+0x1e>
 8016d00:	6023      	str	r3, [r4, #0]
 8016d02:	bd38      	pop	{r3, r4, r5, pc}
 8016d04:	2400a7a0 	.word	0x2400a7a0

08016d08 <__swsetup_r>:
 8016d08:	4b32      	ldr	r3, [pc, #200]	; (8016dd4 <__swsetup_r+0xcc>)
 8016d0a:	b570      	push	{r4, r5, r6, lr}
 8016d0c:	681d      	ldr	r5, [r3, #0]
 8016d0e:	4606      	mov	r6, r0
 8016d10:	460c      	mov	r4, r1
 8016d12:	b125      	cbz	r5, 8016d1e <__swsetup_r+0x16>
 8016d14:	69ab      	ldr	r3, [r5, #24]
 8016d16:	b913      	cbnz	r3, 8016d1e <__swsetup_r+0x16>
 8016d18:	4628      	mov	r0, r5
 8016d1a:	f7ff f98f 	bl	801603c <__sinit>
 8016d1e:	4b2e      	ldr	r3, [pc, #184]	; (8016dd8 <__swsetup_r+0xd0>)
 8016d20:	429c      	cmp	r4, r3
 8016d22:	d10f      	bne.n	8016d44 <__swsetup_r+0x3c>
 8016d24:	686c      	ldr	r4, [r5, #4]
 8016d26:	89a3      	ldrh	r3, [r4, #12]
 8016d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016d2c:	0719      	lsls	r1, r3, #28
 8016d2e:	d42c      	bmi.n	8016d8a <__swsetup_r+0x82>
 8016d30:	06dd      	lsls	r5, r3, #27
 8016d32:	d411      	bmi.n	8016d58 <__swsetup_r+0x50>
 8016d34:	2309      	movs	r3, #9
 8016d36:	6033      	str	r3, [r6, #0]
 8016d38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016d3c:	81a3      	strh	r3, [r4, #12]
 8016d3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d42:	e03e      	b.n	8016dc2 <__swsetup_r+0xba>
 8016d44:	4b25      	ldr	r3, [pc, #148]	; (8016ddc <__swsetup_r+0xd4>)
 8016d46:	429c      	cmp	r4, r3
 8016d48:	d101      	bne.n	8016d4e <__swsetup_r+0x46>
 8016d4a:	68ac      	ldr	r4, [r5, #8]
 8016d4c:	e7eb      	b.n	8016d26 <__swsetup_r+0x1e>
 8016d4e:	4b24      	ldr	r3, [pc, #144]	; (8016de0 <__swsetup_r+0xd8>)
 8016d50:	429c      	cmp	r4, r3
 8016d52:	bf08      	it	eq
 8016d54:	68ec      	ldreq	r4, [r5, #12]
 8016d56:	e7e6      	b.n	8016d26 <__swsetup_r+0x1e>
 8016d58:	0758      	lsls	r0, r3, #29
 8016d5a:	d512      	bpl.n	8016d82 <__swsetup_r+0x7a>
 8016d5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d5e:	b141      	cbz	r1, 8016d72 <__swsetup_r+0x6a>
 8016d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016d64:	4299      	cmp	r1, r3
 8016d66:	d002      	beq.n	8016d6e <__swsetup_r+0x66>
 8016d68:	4630      	mov	r0, r6
 8016d6a:	f7ff fa21 	bl	80161b0 <_free_r>
 8016d6e:	2300      	movs	r3, #0
 8016d70:	6363      	str	r3, [r4, #52]	; 0x34
 8016d72:	89a3      	ldrh	r3, [r4, #12]
 8016d74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016d78:	81a3      	strh	r3, [r4, #12]
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	6063      	str	r3, [r4, #4]
 8016d7e:	6923      	ldr	r3, [r4, #16]
 8016d80:	6023      	str	r3, [r4, #0]
 8016d82:	89a3      	ldrh	r3, [r4, #12]
 8016d84:	f043 0308 	orr.w	r3, r3, #8
 8016d88:	81a3      	strh	r3, [r4, #12]
 8016d8a:	6923      	ldr	r3, [r4, #16]
 8016d8c:	b94b      	cbnz	r3, 8016da2 <__swsetup_r+0x9a>
 8016d8e:	89a3      	ldrh	r3, [r4, #12]
 8016d90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016d94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016d98:	d003      	beq.n	8016da2 <__swsetup_r+0x9a>
 8016d9a:	4621      	mov	r1, r4
 8016d9c:	4630      	mov	r0, r6
 8016d9e:	f000 f931 	bl	8017004 <__smakebuf_r>
 8016da2:	89a0      	ldrh	r0, [r4, #12]
 8016da4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016da8:	f010 0301 	ands.w	r3, r0, #1
 8016dac:	d00a      	beq.n	8016dc4 <__swsetup_r+0xbc>
 8016dae:	2300      	movs	r3, #0
 8016db0:	60a3      	str	r3, [r4, #8]
 8016db2:	6963      	ldr	r3, [r4, #20]
 8016db4:	425b      	negs	r3, r3
 8016db6:	61a3      	str	r3, [r4, #24]
 8016db8:	6923      	ldr	r3, [r4, #16]
 8016dba:	b943      	cbnz	r3, 8016dce <__swsetup_r+0xc6>
 8016dbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016dc0:	d1ba      	bne.n	8016d38 <__swsetup_r+0x30>
 8016dc2:	bd70      	pop	{r4, r5, r6, pc}
 8016dc4:	0781      	lsls	r1, r0, #30
 8016dc6:	bf58      	it	pl
 8016dc8:	6963      	ldrpl	r3, [r4, #20]
 8016dca:	60a3      	str	r3, [r4, #8]
 8016dcc:	e7f4      	b.n	8016db8 <__swsetup_r+0xb0>
 8016dce:	2000      	movs	r0, #0
 8016dd0:	e7f7      	b.n	8016dc2 <__swsetup_r+0xba>
 8016dd2:	bf00      	nop
 8016dd4:	24000050 	.word	0x24000050
 8016dd8:	0802b858 	.word	0x0802b858
 8016ddc:	0802b878 	.word	0x0802b878
 8016de0:	0802b838 	.word	0x0802b838

08016de4 <abort>:
 8016de4:	b508      	push	{r3, lr}
 8016de6:	2006      	movs	r0, #6
 8016de8:	f000 f9b8 	bl	801715c <raise>
 8016dec:	2001      	movs	r0, #1
 8016dee:	f000 fa49 	bl	8017284 <_exit>
	...

08016df4 <_close_r>:
 8016df4:	b538      	push	{r3, r4, r5, lr}
 8016df6:	4d06      	ldr	r5, [pc, #24]	; (8016e10 <_close_r+0x1c>)
 8016df8:	2300      	movs	r3, #0
 8016dfa:	4604      	mov	r4, r0
 8016dfc:	4608      	mov	r0, r1
 8016dfe:	602b      	str	r3, [r5, #0]
 8016e00:	f000 f9f2 	bl	80171e8 <_close>
 8016e04:	1c43      	adds	r3, r0, #1
 8016e06:	d102      	bne.n	8016e0e <_close_r+0x1a>
 8016e08:	682b      	ldr	r3, [r5, #0]
 8016e0a:	b103      	cbz	r3, 8016e0e <_close_r+0x1a>
 8016e0c:	6023      	str	r3, [r4, #0]
 8016e0e:	bd38      	pop	{r3, r4, r5, pc}
 8016e10:	2400a7a0 	.word	0x2400a7a0

08016e14 <__sflush_r>:
 8016e14:	898a      	ldrh	r2, [r1, #12]
 8016e16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e1a:	4605      	mov	r5, r0
 8016e1c:	0710      	lsls	r0, r2, #28
 8016e1e:	460c      	mov	r4, r1
 8016e20:	d458      	bmi.n	8016ed4 <__sflush_r+0xc0>
 8016e22:	684b      	ldr	r3, [r1, #4]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	dc05      	bgt.n	8016e34 <__sflush_r+0x20>
 8016e28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	dc02      	bgt.n	8016e34 <__sflush_r+0x20>
 8016e2e:	2000      	movs	r0, #0
 8016e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e36:	2e00      	cmp	r6, #0
 8016e38:	d0f9      	beq.n	8016e2e <__sflush_r+0x1a>
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016e40:	682f      	ldr	r7, [r5, #0]
 8016e42:	602b      	str	r3, [r5, #0]
 8016e44:	d032      	beq.n	8016eac <__sflush_r+0x98>
 8016e46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016e48:	89a3      	ldrh	r3, [r4, #12]
 8016e4a:	075a      	lsls	r2, r3, #29
 8016e4c:	d505      	bpl.n	8016e5a <__sflush_r+0x46>
 8016e4e:	6863      	ldr	r3, [r4, #4]
 8016e50:	1ac0      	subs	r0, r0, r3
 8016e52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016e54:	b10b      	cbz	r3, 8016e5a <__sflush_r+0x46>
 8016e56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016e58:	1ac0      	subs	r0, r0, r3
 8016e5a:	2300      	movs	r3, #0
 8016e5c:	4602      	mov	r2, r0
 8016e5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016e60:	6a21      	ldr	r1, [r4, #32]
 8016e62:	4628      	mov	r0, r5
 8016e64:	47b0      	blx	r6
 8016e66:	1c43      	adds	r3, r0, #1
 8016e68:	89a3      	ldrh	r3, [r4, #12]
 8016e6a:	d106      	bne.n	8016e7a <__sflush_r+0x66>
 8016e6c:	6829      	ldr	r1, [r5, #0]
 8016e6e:	291d      	cmp	r1, #29
 8016e70:	d82c      	bhi.n	8016ecc <__sflush_r+0xb8>
 8016e72:	4a2a      	ldr	r2, [pc, #168]	; (8016f1c <__sflush_r+0x108>)
 8016e74:	40ca      	lsrs	r2, r1
 8016e76:	07d6      	lsls	r6, r2, #31
 8016e78:	d528      	bpl.n	8016ecc <__sflush_r+0xb8>
 8016e7a:	2200      	movs	r2, #0
 8016e7c:	6062      	str	r2, [r4, #4]
 8016e7e:	04d9      	lsls	r1, r3, #19
 8016e80:	6922      	ldr	r2, [r4, #16]
 8016e82:	6022      	str	r2, [r4, #0]
 8016e84:	d504      	bpl.n	8016e90 <__sflush_r+0x7c>
 8016e86:	1c42      	adds	r2, r0, #1
 8016e88:	d101      	bne.n	8016e8e <__sflush_r+0x7a>
 8016e8a:	682b      	ldr	r3, [r5, #0]
 8016e8c:	b903      	cbnz	r3, 8016e90 <__sflush_r+0x7c>
 8016e8e:	6560      	str	r0, [r4, #84]	; 0x54
 8016e90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e92:	602f      	str	r7, [r5, #0]
 8016e94:	2900      	cmp	r1, #0
 8016e96:	d0ca      	beq.n	8016e2e <__sflush_r+0x1a>
 8016e98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016e9c:	4299      	cmp	r1, r3
 8016e9e:	d002      	beq.n	8016ea6 <__sflush_r+0x92>
 8016ea0:	4628      	mov	r0, r5
 8016ea2:	f7ff f985 	bl	80161b0 <_free_r>
 8016ea6:	2000      	movs	r0, #0
 8016ea8:	6360      	str	r0, [r4, #52]	; 0x34
 8016eaa:	e7c1      	b.n	8016e30 <__sflush_r+0x1c>
 8016eac:	6a21      	ldr	r1, [r4, #32]
 8016eae:	2301      	movs	r3, #1
 8016eb0:	4628      	mov	r0, r5
 8016eb2:	47b0      	blx	r6
 8016eb4:	1c41      	adds	r1, r0, #1
 8016eb6:	d1c7      	bne.n	8016e48 <__sflush_r+0x34>
 8016eb8:	682b      	ldr	r3, [r5, #0]
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d0c4      	beq.n	8016e48 <__sflush_r+0x34>
 8016ebe:	2b1d      	cmp	r3, #29
 8016ec0:	d001      	beq.n	8016ec6 <__sflush_r+0xb2>
 8016ec2:	2b16      	cmp	r3, #22
 8016ec4:	d101      	bne.n	8016eca <__sflush_r+0xb6>
 8016ec6:	602f      	str	r7, [r5, #0]
 8016ec8:	e7b1      	b.n	8016e2e <__sflush_r+0x1a>
 8016eca:	89a3      	ldrh	r3, [r4, #12]
 8016ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ed0:	81a3      	strh	r3, [r4, #12]
 8016ed2:	e7ad      	b.n	8016e30 <__sflush_r+0x1c>
 8016ed4:	690f      	ldr	r7, [r1, #16]
 8016ed6:	2f00      	cmp	r7, #0
 8016ed8:	d0a9      	beq.n	8016e2e <__sflush_r+0x1a>
 8016eda:	0793      	lsls	r3, r2, #30
 8016edc:	680e      	ldr	r6, [r1, #0]
 8016ede:	bf08      	it	eq
 8016ee0:	694b      	ldreq	r3, [r1, #20]
 8016ee2:	600f      	str	r7, [r1, #0]
 8016ee4:	bf18      	it	ne
 8016ee6:	2300      	movne	r3, #0
 8016ee8:	eba6 0807 	sub.w	r8, r6, r7
 8016eec:	608b      	str	r3, [r1, #8]
 8016eee:	f1b8 0f00 	cmp.w	r8, #0
 8016ef2:	dd9c      	ble.n	8016e2e <__sflush_r+0x1a>
 8016ef4:	6a21      	ldr	r1, [r4, #32]
 8016ef6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016ef8:	4643      	mov	r3, r8
 8016efa:	463a      	mov	r2, r7
 8016efc:	4628      	mov	r0, r5
 8016efe:	47b0      	blx	r6
 8016f00:	2800      	cmp	r0, #0
 8016f02:	dc06      	bgt.n	8016f12 <__sflush_r+0xfe>
 8016f04:	89a3      	ldrh	r3, [r4, #12]
 8016f06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016f0a:	81a3      	strh	r3, [r4, #12]
 8016f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016f10:	e78e      	b.n	8016e30 <__sflush_r+0x1c>
 8016f12:	4407      	add	r7, r0
 8016f14:	eba8 0800 	sub.w	r8, r8, r0
 8016f18:	e7e9      	b.n	8016eee <__sflush_r+0xda>
 8016f1a:	bf00      	nop
 8016f1c:	20400001 	.word	0x20400001

08016f20 <_fflush_r>:
 8016f20:	b538      	push	{r3, r4, r5, lr}
 8016f22:	690b      	ldr	r3, [r1, #16]
 8016f24:	4605      	mov	r5, r0
 8016f26:	460c      	mov	r4, r1
 8016f28:	b913      	cbnz	r3, 8016f30 <_fflush_r+0x10>
 8016f2a:	2500      	movs	r5, #0
 8016f2c:	4628      	mov	r0, r5
 8016f2e:	bd38      	pop	{r3, r4, r5, pc}
 8016f30:	b118      	cbz	r0, 8016f3a <_fflush_r+0x1a>
 8016f32:	6983      	ldr	r3, [r0, #24]
 8016f34:	b90b      	cbnz	r3, 8016f3a <_fflush_r+0x1a>
 8016f36:	f7ff f881 	bl	801603c <__sinit>
 8016f3a:	4b14      	ldr	r3, [pc, #80]	; (8016f8c <_fflush_r+0x6c>)
 8016f3c:	429c      	cmp	r4, r3
 8016f3e:	d11b      	bne.n	8016f78 <_fflush_r+0x58>
 8016f40:	686c      	ldr	r4, [r5, #4]
 8016f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d0ef      	beq.n	8016f2a <_fflush_r+0xa>
 8016f4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016f4c:	07d0      	lsls	r0, r2, #31
 8016f4e:	d404      	bmi.n	8016f5a <_fflush_r+0x3a>
 8016f50:	0599      	lsls	r1, r3, #22
 8016f52:	d402      	bmi.n	8016f5a <_fflush_r+0x3a>
 8016f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f56:	f7ff f921 	bl	801619c <__retarget_lock_acquire_recursive>
 8016f5a:	4628      	mov	r0, r5
 8016f5c:	4621      	mov	r1, r4
 8016f5e:	f7ff ff59 	bl	8016e14 <__sflush_r>
 8016f62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016f64:	07da      	lsls	r2, r3, #31
 8016f66:	4605      	mov	r5, r0
 8016f68:	d4e0      	bmi.n	8016f2c <_fflush_r+0xc>
 8016f6a:	89a3      	ldrh	r3, [r4, #12]
 8016f6c:	059b      	lsls	r3, r3, #22
 8016f6e:	d4dd      	bmi.n	8016f2c <_fflush_r+0xc>
 8016f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016f72:	f7ff f914 	bl	801619e <__retarget_lock_release_recursive>
 8016f76:	e7d9      	b.n	8016f2c <_fflush_r+0xc>
 8016f78:	4b05      	ldr	r3, [pc, #20]	; (8016f90 <_fflush_r+0x70>)
 8016f7a:	429c      	cmp	r4, r3
 8016f7c:	d101      	bne.n	8016f82 <_fflush_r+0x62>
 8016f7e:	68ac      	ldr	r4, [r5, #8]
 8016f80:	e7df      	b.n	8016f42 <_fflush_r+0x22>
 8016f82:	4b04      	ldr	r3, [pc, #16]	; (8016f94 <_fflush_r+0x74>)
 8016f84:	429c      	cmp	r4, r3
 8016f86:	bf08      	it	eq
 8016f88:	68ec      	ldreq	r4, [r5, #12]
 8016f8a:	e7da      	b.n	8016f42 <_fflush_r+0x22>
 8016f8c:	0802b858 	.word	0x0802b858
 8016f90:	0802b878 	.word	0x0802b878
 8016f94:	0802b838 	.word	0x0802b838

08016f98 <_lseek_r>:
 8016f98:	b538      	push	{r3, r4, r5, lr}
 8016f9a:	4d07      	ldr	r5, [pc, #28]	; (8016fb8 <_lseek_r+0x20>)
 8016f9c:	4604      	mov	r4, r0
 8016f9e:	4608      	mov	r0, r1
 8016fa0:	4611      	mov	r1, r2
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	602a      	str	r2, [r5, #0]
 8016fa6:	461a      	mov	r2, r3
 8016fa8:	f000 f946 	bl	8017238 <_lseek>
 8016fac:	1c43      	adds	r3, r0, #1
 8016fae:	d102      	bne.n	8016fb6 <_lseek_r+0x1e>
 8016fb0:	682b      	ldr	r3, [r5, #0]
 8016fb2:	b103      	cbz	r3, 8016fb6 <_lseek_r+0x1e>
 8016fb4:	6023      	str	r3, [r4, #0]
 8016fb6:	bd38      	pop	{r3, r4, r5, pc}
 8016fb8:	2400a7a0 	.word	0x2400a7a0

08016fbc <__swhatbuf_r>:
 8016fbc:	b570      	push	{r4, r5, r6, lr}
 8016fbe:	460e      	mov	r6, r1
 8016fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fc4:	2900      	cmp	r1, #0
 8016fc6:	b096      	sub	sp, #88	; 0x58
 8016fc8:	4614      	mov	r4, r2
 8016fca:	461d      	mov	r5, r3
 8016fcc:	da07      	bge.n	8016fde <__swhatbuf_r+0x22>
 8016fce:	2300      	movs	r3, #0
 8016fd0:	602b      	str	r3, [r5, #0]
 8016fd2:	89b3      	ldrh	r3, [r6, #12]
 8016fd4:	061a      	lsls	r2, r3, #24
 8016fd6:	d410      	bmi.n	8016ffa <__swhatbuf_r+0x3e>
 8016fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016fdc:	e00e      	b.n	8016ffc <__swhatbuf_r+0x40>
 8016fde:	466a      	mov	r2, sp
 8016fe0:	f000 f8d8 	bl	8017194 <_fstat_r>
 8016fe4:	2800      	cmp	r0, #0
 8016fe6:	dbf2      	blt.n	8016fce <__swhatbuf_r+0x12>
 8016fe8:	9a01      	ldr	r2, [sp, #4]
 8016fea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016fee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016ff2:	425a      	negs	r2, r3
 8016ff4:	415a      	adcs	r2, r3
 8016ff6:	602a      	str	r2, [r5, #0]
 8016ff8:	e7ee      	b.n	8016fd8 <__swhatbuf_r+0x1c>
 8016ffa:	2340      	movs	r3, #64	; 0x40
 8016ffc:	2000      	movs	r0, #0
 8016ffe:	6023      	str	r3, [r4, #0]
 8017000:	b016      	add	sp, #88	; 0x58
 8017002:	bd70      	pop	{r4, r5, r6, pc}

08017004 <__smakebuf_r>:
 8017004:	898b      	ldrh	r3, [r1, #12]
 8017006:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017008:	079d      	lsls	r5, r3, #30
 801700a:	4606      	mov	r6, r0
 801700c:	460c      	mov	r4, r1
 801700e:	d507      	bpl.n	8017020 <__smakebuf_r+0x1c>
 8017010:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017014:	6023      	str	r3, [r4, #0]
 8017016:	6123      	str	r3, [r4, #16]
 8017018:	2301      	movs	r3, #1
 801701a:	6163      	str	r3, [r4, #20]
 801701c:	b002      	add	sp, #8
 801701e:	bd70      	pop	{r4, r5, r6, pc}
 8017020:	ab01      	add	r3, sp, #4
 8017022:	466a      	mov	r2, sp
 8017024:	f7ff ffca 	bl	8016fbc <__swhatbuf_r>
 8017028:	9900      	ldr	r1, [sp, #0]
 801702a:	4605      	mov	r5, r0
 801702c:	4630      	mov	r0, r6
 801702e:	f7ff f90f 	bl	8016250 <_malloc_r>
 8017032:	b948      	cbnz	r0, 8017048 <__smakebuf_r+0x44>
 8017034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017038:	059a      	lsls	r2, r3, #22
 801703a:	d4ef      	bmi.n	801701c <__smakebuf_r+0x18>
 801703c:	f023 0303 	bic.w	r3, r3, #3
 8017040:	f043 0302 	orr.w	r3, r3, #2
 8017044:	81a3      	strh	r3, [r4, #12]
 8017046:	e7e3      	b.n	8017010 <__smakebuf_r+0xc>
 8017048:	4b0d      	ldr	r3, [pc, #52]	; (8017080 <__smakebuf_r+0x7c>)
 801704a:	62b3      	str	r3, [r6, #40]	; 0x28
 801704c:	89a3      	ldrh	r3, [r4, #12]
 801704e:	6020      	str	r0, [r4, #0]
 8017050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017054:	81a3      	strh	r3, [r4, #12]
 8017056:	9b00      	ldr	r3, [sp, #0]
 8017058:	6163      	str	r3, [r4, #20]
 801705a:	9b01      	ldr	r3, [sp, #4]
 801705c:	6120      	str	r0, [r4, #16]
 801705e:	b15b      	cbz	r3, 8017078 <__smakebuf_r+0x74>
 8017060:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017064:	4630      	mov	r0, r6
 8017066:	f000 f8a7 	bl	80171b8 <_isatty_r>
 801706a:	b128      	cbz	r0, 8017078 <__smakebuf_r+0x74>
 801706c:	89a3      	ldrh	r3, [r4, #12]
 801706e:	f023 0303 	bic.w	r3, r3, #3
 8017072:	f043 0301 	orr.w	r3, r3, #1
 8017076:	81a3      	strh	r3, [r4, #12]
 8017078:	89a0      	ldrh	r0, [r4, #12]
 801707a:	4305      	orrs	r5, r0
 801707c:	81a5      	strh	r5, [r4, #12]
 801707e:	e7cd      	b.n	801701c <__smakebuf_r+0x18>
 8017080:	08015fd5 	.word	0x08015fd5

08017084 <__malloc_lock>:
 8017084:	4801      	ldr	r0, [pc, #4]	; (801708c <__malloc_lock+0x8>)
 8017086:	f7ff b889 	b.w	801619c <__retarget_lock_acquire_recursive>
 801708a:	bf00      	nop
 801708c:	2400a7ac 	.word	0x2400a7ac

08017090 <__malloc_unlock>:
 8017090:	4801      	ldr	r0, [pc, #4]	; (8017098 <__malloc_unlock+0x8>)
 8017092:	f7ff b884 	b.w	801619e <__retarget_lock_release_recursive>
 8017096:	bf00      	nop
 8017098:	2400a7ac 	.word	0x2400a7ac

0801709c <_realloc_r>:
 801709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801709e:	4607      	mov	r7, r0
 80170a0:	4614      	mov	r4, r2
 80170a2:	460e      	mov	r6, r1
 80170a4:	b921      	cbnz	r1, 80170b0 <_realloc_r+0x14>
 80170a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80170aa:	4611      	mov	r1, r2
 80170ac:	f7ff b8d0 	b.w	8016250 <_malloc_r>
 80170b0:	b922      	cbnz	r2, 80170bc <_realloc_r+0x20>
 80170b2:	f7ff f87d 	bl	80161b0 <_free_r>
 80170b6:	4625      	mov	r5, r4
 80170b8:	4628      	mov	r0, r5
 80170ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80170bc:	f000 f88c 	bl	80171d8 <_malloc_usable_size_r>
 80170c0:	42a0      	cmp	r0, r4
 80170c2:	d20f      	bcs.n	80170e4 <_realloc_r+0x48>
 80170c4:	4621      	mov	r1, r4
 80170c6:	4638      	mov	r0, r7
 80170c8:	f7ff f8c2 	bl	8016250 <_malloc_r>
 80170cc:	4605      	mov	r5, r0
 80170ce:	2800      	cmp	r0, #0
 80170d0:	d0f2      	beq.n	80170b8 <_realloc_r+0x1c>
 80170d2:	4631      	mov	r1, r6
 80170d4:	4622      	mov	r2, r4
 80170d6:	f7fe fe69 	bl	8015dac <memcpy>
 80170da:	4631      	mov	r1, r6
 80170dc:	4638      	mov	r0, r7
 80170de:	f7ff f867 	bl	80161b0 <_free_r>
 80170e2:	e7e9      	b.n	80170b8 <_realloc_r+0x1c>
 80170e4:	4635      	mov	r5, r6
 80170e6:	e7e7      	b.n	80170b8 <_realloc_r+0x1c>

080170e8 <_read_r>:
 80170e8:	b538      	push	{r3, r4, r5, lr}
 80170ea:	4d07      	ldr	r5, [pc, #28]	; (8017108 <_read_r+0x20>)
 80170ec:	4604      	mov	r4, r0
 80170ee:	4608      	mov	r0, r1
 80170f0:	4611      	mov	r1, r2
 80170f2:	2200      	movs	r2, #0
 80170f4:	602a      	str	r2, [r5, #0]
 80170f6:	461a      	mov	r2, r3
 80170f8:	f000 f8a6 	bl	8017248 <_read>
 80170fc:	1c43      	adds	r3, r0, #1
 80170fe:	d102      	bne.n	8017106 <_read_r+0x1e>
 8017100:	682b      	ldr	r3, [r5, #0]
 8017102:	b103      	cbz	r3, 8017106 <_read_r+0x1e>
 8017104:	6023      	str	r3, [r4, #0]
 8017106:	bd38      	pop	{r3, r4, r5, pc}
 8017108:	2400a7a0 	.word	0x2400a7a0

0801710c <_raise_r>:
 801710c:	291f      	cmp	r1, #31
 801710e:	b538      	push	{r3, r4, r5, lr}
 8017110:	4604      	mov	r4, r0
 8017112:	460d      	mov	r5, r1
 8017114:	d904      	bls.n	8017120 <_raise_r+0x14>
 8017116:	2316      	movs	r3, #22
 8017118:	6003      	str	r3, [r0, #0]
 801711a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801711e:	bd38      	pop	{r3, r4, r5, pc}
 8017120:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017122:	b112      	cbz	r2, 801712a <_raise_r+0x1e>
 8017124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017128:	b94b      	cbnz	r3, 801713e <_raise_r+0x32>
 801712a:	4620      	mov	r0, r4
 801712c:	f000 f830 	bl	8017190 <_getpid_r>
 8017130:	462a      	mov	r2, r5
 8017132:	4601      	mov	r1, r0
 8017134:	4620      	mov	r0, r4
 8017136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801713a:	f000 b817 	b.w	801716c <_kill_r>
 801713e:	2b01      	cmp	r3, #1
 8017140:	d00a      	beq.n	8017158 <_raise_r+0x4c>
 8017142:	1c59      	adds	r1, r3, #1
 8017144:	d103      	bne.n	801714e <_raise_r+0x42>
 8017146:	2316      	movs	r3, #22
 8017148:	6003      	str	r3, [r0, #0]
 801714a:	2001      	movs	r0, #1
 801714c:	e7e7      	b.n	801711e <_raise_r+0x12>
 801714e:	2400      	movs	r4, #0
 8017150:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017154:	4628      	mov	r0, r5
 8017156:	4798      	blx	r3
 8017158:	2000      	movs	r0, #0
 801715a:	e7e0      	b.n	801711e <_raise_r+0x12>

0801715c <raise>:
 801715c:	4b02      	ldr	r3, [pc, #8]	; (8017168 <raise+0xc>)
 801715e:	4601      	mov	r1, r0
 8017160:	6818      	ldr	r0, [r3, #0]
 8017162:	f7ff bfd3 	b.w	801710c <_raise_r>
 8017166:	bf00      	nop
 8017168:	24000050 	.word	0x24000050

0801716c <_kill_r>:
 801716c:	b538      	push	{r3, r4, r5, lr}
 801716e:	4d07      	ldr	r5, [pc, #28]	; (801718c <_kill_r+0x20>)
 8017170:	2300      	movs	r3, #0
 8017172:	4604      	mov	r4, r0
 8017174:	4608      	mov	r0, r1
 8017176:	4611      	mov	r1, r2
 8017178:	602b      	str	r3, [r5, #0]
 801717a:	f000 f855 	bl	8017228 <_kill>
 801717e:	1c43      	adds	r3, r0, #1
 8017180:	d102      	bne.n	8017188 <_kill_r+0x1c>
 8017182:	682b      	ldr	r3, [r5, #0]
 8017184:	b103      	cbz	r3, 8017188 <_kill_r+0x1c>
 8017186:	6023      	str	r3, [r4, #0]
 8017188:	bd38      	pop	{r3, r4, r5, pc}
 801718a:	bf00      	nop
 801718c:	2400a7a0 	.word	0x2400a7a0

08017190 <_getpid_r>:
 8017190:	f000 b83a 	b.w	8017208 <_getpid>

08017194 <_fstat_r>:
 8017194:	b538      	push	{r3, r4, r5, lr}
 8017196:	4d07      	ldr	r5, [pc, #28]	; (80171b4 <_fstat_r+0x20>)
 8017198:	2300      	movs	r3, #0
 801719a:	4604      	mov	r4, r0
 801719c:	4608      	mov	r0, r1
 801719e:	4611      	mov	r1, r2
 80171a0:	602b      	str	r3, [r5, #0]
 80171a2:	f000 f829 	bl	80171f8 <_fstat>
 80171a6:	1c43      	adds	r3, r0, #1
 80171a8:	d102      	bne.n	80171b0 <_fstat_r+0x1c>
 80171aa:	682b      	ldr	r3, [r5, #0]
 80171ac:	b103      	cbz	r3, 80171b0 <_fstat_r+0x1c>
 80171ae:	6023      	str	r3, [r4, #0]
 80171b0:	bd38      	pop	{r3, r4, r5, pc}
 80171b2:	bf00      	nop
 80171b4:	2400a7a0 	.word	0x2400a7a0

080171b8 <_isatty_r>:
 80171b8:	b538      	push	{r3, r4, r5, lr}
 80171ba:	4d06      	ldr	r5, [pc, #24]	; (80171d4 <_isatty_r+0x1c>)
 80171bc:	2300      	movs	r3, #0
 80171be:	4604      	mov	r4, r0
 80171c0:	4608      	mov	r0, r1
 80171c2:	602b      	str	r3, [r5, #0]
 80171c4:	f000 f828 	bl	8017218 <_isatty>
 80171c8:	1c43      	adds	r3, r0, #1
 80171ca:	d102      	bne.n	80171d2 <_isatty_r+0x1a>
 80171cc:	682b      	ldr	r3, [r5, #0]
 80171ce:	b103      	cbz	r3, 80171d2 <_isatty_r+0x1a>
 80171d0:	6023      	str	r3, [r4, #0]
 80171d2:	bd38      	pop	{r3, r4, r5, pc}
 80171d4:	2400a7a0 	.word	0x2400a7a0

080171d8 <_malloc_usable_size_r>:
 80171d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171dc:	1f18      	subs	r0, r3, #4
 80171de:	2b00      	cmp	r3, #0
 80171e0:	bfbc      	itt	lt
 80171e2:	580b      	ldrlt	r3, [r1, r0]
 80171e4:	18c0      	addlt	r0, r0, r3
 80171e6:	4770      	bx	lr

080171e8 <_close>:
 80171e8:	4b02      	ldr	r3, [pc, #8]	; (80171f4 <_close+0xc>)
 80171ea:	2258      	movs	r2, #88	; 0x58
 80171ec:	601a      	str	r2, [r3, #0]
 80171ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80171f2:	4770      	bx	lr
 80171f4:	2400a7a0 	.word	0x2400a7a0

080171f8 <_fstat>:
 80171f8:	4b02      	ldr	r3, [pc, #8]	; (8017204 <_fstat+0xc>)
 80171fa:	2258      	movs	r2, #88	; 0x58
 80171fc:	601a      	str	r2, [r3, #0]
 80171fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017202:	4770      	bx	lr
 8017204:	2400a7a0 	.word	0x2400a7a0

08017208 <_getpid>:
 8017208:	4b02      	ldr	r3, [pc, #8]	; (8017214 <_getpid+0xc>)
 801720a:	2258      	movs	r2, #88	; 0x58
 801720c:	601a      	str	r2, [r3, #0]
 801720e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017212:	4770      	bx	lr
 8017214:	2400a7a0 	.word	0x2400a7a0

08017218 <_isatty>:
 8017218:	4b02      	ldr	r3, [pc, #8]	; (8017224 <_isatty+0xc>)
 801721a:	2258      	movs	r2, #88	; 0x58
 801721c:	601a      	str	r2, [r3, #0]
 801721e:	2000      	movs	r0, #0
 8017220:	4770      	bx	lr
 8017222:	bf00      	nop
 8017224:	2400a7a0 	.word	0x2400a7a0

08017228 <_kill>:
 8017228:	4b02      	ldr	r3, [pc, #8]	; (8017234 <_kill+0xc>)
 801722a:	2258      	movs	r2, #88	; 0x58
 801722c:	601a      	str	r2, [r3, #0]
 801722e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017232:	4770      	bx	lr
 8017234:	2400a7a0 	.word	0x2400a7a0

08017238 <_lseek>:
 8017238:	4b02      	ldr	r3, [pc, #8]	; (8017244 <_lseek+0xc>)
 801723a:	2258      	movs	r2, #88	; 0x58
 801723c:	601a      	str	r2, [r3, #0]
 801723e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017242:	4770      	bx	lr
 8017244:	2400a7a0 	.word	0x2400a7a0

08017248 <_read>:
 8017248:	4b02      	ldr	r3, [pc, #8]	; (8017254 <_read+0xc>)
 801724a:	2258      	movs	r2, #88	; 0x58
 801724c:	601a      	str	r2, [r3, #0]
 801724e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017252:	4770      	bx	lr
 8017254:	2400a7a0 	.word	0x2400a7a0

08017258 <_sbrk>:
 8017258:	4b04      	ldr	r3, [pc, #16]	; (801726c <_sbrk+0x14>)
 801725a:	6819      	ldr	r1, [r3, #0]
 801725c:	4602      	mov	r2, r0
 801725e:	b909      	cbnz	r1, 8017264 <_sbrk+0xc>
 8017260:	4903      	ldr	r1, [pc, #12]	; (8017270 <_sbrk+0x18>)
 8017262:	6019      	str	r1, [r3, #0]
 8017264:	6818      	ldr	r0, [r3, #0]
 8017266:	4402      	add	r2, r0
 8017268:	601a      	str	r2, [r3, #0]
 801726a:	4770      	bx	lr
 801726c:	24006800 	.word	0x24006800
 8017270:	2400a7b8 	.word	0x2400a7b8

08017274 <_write>:
 8017274:	4b02      	ldr	r3, [pc, #8]	; (8017280 <_write+0xc>)
 8017276:	2258      	movs	r2, #88	; 0x58
 8017278:	601a      	str	r2, [r3, #0]
 801727a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801727e:	4770      	bx	lr
 8017280:	2400a7a0 	.word	0x2400a7a0

08017284 <_exit>:
 8017284:	e7fe      	b.n	8017284 <_exit>
	...

08017288 <_init>:
 8017288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801728a:	bf00      	nop
 801728c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801728e:	bc08      	pop	{r3}
 8017290:	469e      	mov	lr, r3
 8017292:	4770      	bx	lr

08017294 <_fini>:
 8017294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017296:	bf00      	nop
 8017298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801729a:	bc08      	pop	{r3}
 801729c:	469e      	mov	lr, r3
 801729e:	4770      	bx	lr
