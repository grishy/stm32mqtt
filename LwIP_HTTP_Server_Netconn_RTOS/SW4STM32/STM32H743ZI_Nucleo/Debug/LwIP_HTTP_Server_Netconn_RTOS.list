
LwIP_HTTP_Server_Netconn_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d848  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013c44  0800dae8  0800dae8  0001dae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0802172c  0802172c  0003172c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08021730  08021730  00031730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000098  24000000  08021734  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000a6ec  24000098  080217cc  00040098  2**2
                  ALLOC
  7 ._user_heap_stack 00000c04  2400a784  080217cc  0004a784  2**0
                  ALLOC
  8 .lwip_sec     00041a00  30000000  080217cc  00050000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 10 .debug_line   0003eb35  00000000  00000000  000400c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   00060898  00000000  00000000  0007ebfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000b258  00000000  00000000  000df493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00001df0  00000000  00000000  000ea6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0019ca6d  00000000  00000000  000ec4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003128  00000000  00000000  00288f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    00021145  00000000  00000000  0028c078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00047c6a  00000000  00000000  002ad1bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002f4e27  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000067fc  00000000  00000000  002f4e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .stab         000000cc  00000000  00000000  002fb678  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      000001b9  00000000  00000000  002fb744  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000098 	.word	0x24000098
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800dad0 	.word	0x0800dad0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400009c 	.word	0x2400009c
 80002dc:	0800dad0 	.word	0x0800dad0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003b6:	e003      	b.n	80003c0 <LoopCopyDataInit>

080003b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003be:	3104      	adds	r1, #4

080003c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003c8:	d3f6      	bcc.n	80003b8 <CopyDataInit>
  ldr  r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003cc:	e002      	b.n	80003d4 <LoopFillZerobss>

080003ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003d0:	f842 3b04 	str.w	r3, [r2], #4

080003d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003d8:	d3f9      	bcc.n	80003ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003da:	f000 fe51 	bl	8001080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003de:	f00c f8d7 	bl	800c590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003e2:	f000 fbd7 	bl	8000b94 <main>
  bx  lr    
 80003e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003e8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80003ec:	08021734 	.word	0x08021734
  ldr  r0, =_sdata
 80003f0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003f4:	24000098 	.word	0x24000098
  ldr  r2, =_sbss
 80003f8:	24000098 	.word	0x24000098
  ldr  r3, = _ebss
 80003fc:	2400a784 	.word	0x2400a784

08000400 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC3_IRQHandler>

08000402 <ethernet_link_status_updated>:
  * @brief  Notify the User about the nework interface config status 
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif) 
{
 8000402:	b508      	push	{r3, lr}
  if (netif_is_up(netif))
 8000404:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#else
    BSP_LED_On(LED2);
 8000408:	2001      	movs	r0, #1
  if (netif_is_up(netif))
 800040a:	07db      	lsls	r3, r3, #31
 800040c:	d506      	bpl.n	800041c <ethernet_link_status_updated+0x1a>
    BSP_LED_On(LED2);
 800040e:	f000 fe0f 	bl	8001030 <BSP_LED_On>
    BSP_LED_Off(LED3);
 8000412:	2002      	movs	r0, #2
#else    
    BSP_LED_Off(LED2);
    BSP_LED_On(LED3); 
#endif /* LWIP_DHCP */
  } 
}
 8000414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BSP_LED_Off(LED3);
 8000418:	f000 be1e 	b.w	8001058 <BSP_LED_Off>
    BSP_LED_Off(LED2);
 800041c:	f000 fe1c 	bl	8001058 <BSP_LED_Off>
    BSP_LED_On(LED3); 
 8000420:	2002      	movs	r0, #2
}
 8000422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    BSP_LED_On(LED3); 
 8000426:	f000 be03 	b.w	8001030 <BSP_LED_On>

0800042a <ETH_PHY_IO_DeInit>:
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
  return 0;
}
 800042a:	2000      	movs	r0, #0
 800042c:	4770      	bx	lr
	...

08000430 <low_level_output>:
{
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	b08d      	sub	sp, #52	; 0x34
 8000434:	460d      	mov	r5, r1
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000436:	2230      	movs	r2, #48	; 0x30
 8000438:	2100      	movs	r1, #0
 800043a:	4668      	mov	r0, sp
  for(q = p; q != NULL; q = q->next)
 800043c:	462c      	mov	r4, r5
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800043e:	f00c f901 	bl	800c644 <memset>
  for(q = p; q != NULL; q = q->next)
 8000442:	466b      	mov	r3, sp
  uint32_t i=0;
 8000444:	2200      	movs	r2, #0
  for(q = p; q != NULL; q = q->next)
 8000446:	b95c      	cbnz	r4, 8000460 <low_level_output+0x30>
  TxConfig.Length = p->tot_len;
 8000448:	490e      	ldr	r1, [pc, #56]	; (8000484 <low_level_output+0x54>)
  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800044a:	2214      	movs	r2, #20
  TxConfig.Length = p->tot_len;
 800044c:	892b      	ldrh	r3, [r5, #8]
  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800044e:	480e      	ldr	r0, [pc, #56]	; (8000488 <low_level_output+0x58>)
  TxConfig.Length = p->tot_len;
 8000450:	604b      	str	r3, [r1, #4]
  TxConfig.TxBuffer = Txbuffer;
 8000452:	f8c1 d008 	str.w	sp, [r1, #8]
  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8000456:	f001 fa85 	bl	8001964 <HAL_ETH_Transmit>
  return errval;
 800045a:	4620      	mov	r0, r4
}
 800045c:	b00d      	add	sp, #52	; 0x34
 800045e:	bd30      	pop	{r4, r5, pc}
    if(i >= ETH_TX_DESC_CNT)	
 8000460:	2a04      	cmp	r2, #4
 8000462:	d00c      	beq.n	800047e <low_level_output+0x4e>
    Txbuffer[i].buffer = q->payload;
 8000464:	6861      	ldr	r1, [r4, #4]
 8000466:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8000468:	8961      	ldrh	r1, [r4, #10]
 800046a:	6059      	str	r1, [r3, #4]
    if(i>0)
 800046c:	b10a      	cbz	r2, 8000472 <low_level_output+0x42>
      Txbuffer[i-1].next = &Txbuffer[i];
 800046e:	f843 3c04 	str.w	r3, [r3, #-4]
    if(q->next == NULL)
 8000472:	6824      	ldr	r4, [r4, #0]
 8000474:	b904      	cbnz	r4, 8000478 <low_level_output+0x48>
      Txbuffer[i].next = NULL;
 8000476:	609c      	str	r4, [r3, #8]
    i++;
 8000478:	3201      	adds	r2, #1
  for(q = p; q != NULL; q = q->next)
 800047a:	330c      	adds	r3, #12
 800047c:	e7e3      	b.n	8000446 <low_level_output+0x16>
      return ERR_IF;
 800047e:	f06f 000b 	mvn.w	r0, #11
 8000482:	e7eb      	b.n	800045c <low_level_output+0x2c>
 8000484:	24006964 	.word	0x24006964
 8000488:	240067f0 	.word	0x240067f0

0800048c <pbuf_free_custom>:
{
 800048c:	4601      	mov	r1, r0
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800048e:	4801      	ldr	r0, [pc, #4]	; (8000494 <pbuf_free_custom+0x8>)
 8000490:	f007 bda8 	b.w	8007fe4 <memp_free_pool>
 8000494:	0800dae8 	.word	0x0800dae8

08000498 <ETH_PHY_IO_GetTick>:
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
  return HAL_GetTick();
 8000498:	f000 be70 	b.w	800117c <HAL_GetTick>

0800049c <ETH_PHY_IO_Init>:
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 800049c:	4802      	ldr	r0, [pc, #8]	; (80004a8 <ETH_PHY_IO_Init+0xc>)
{  
 800049e:	b508      	push	{r3, lr}
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 80004a0:	f001 fd96 	bl	8001fd0 <HAL_ETH_SetMDIOClockRange>
}
 80004a4:	2000      	movs	r0, #0
 80004a6:	bd08      	pop	{r3, pc}
 80004a8:	240067f0 	.word	0x240067f0

080004ac <ETH_PHY_IO_ReadReg>:
{
 80004ac:	b508      	push	{r3, lr}
 80004ae:	4613      	mov	r3, r2
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80004b0:	460a      	mov	r2, r1
 80004b2:	4601      	mov	r1, r0
 80004b4:	4803      	ldr	r0, [pc, #12]	; (80004c4 <ETH_PHY_IO_ReadReg+0x18>)
 80004b6:	f001 fc59 	bl	8001d6c <HAL_ETH_ReadPHYRegister>
 80004ba:	3800      	subs	r0, #0
 80004bc:	bf18      	it	ne
 80004be:	2001      	movne	r0, #1
}
 80004c0:	4240      	negs	r0, r0
 80004c2:	bd08      	pop	{r3, pc}
 80004c4:	240067f0 	.word	0x240067f0

080004c8 <ETH_PHY_IO_WriteReg>:
{
 80004c8:	b508      	push	{r3, lr}
 80004ca:	4613      	mov	r3, r2
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 80004cc:	460a      	mov	r2, r1
 80004ce:	4601      	mov	r1, r0
 80004d0:	4803      	ldr	r0, [pc, #12]	; (80004e0 <ETH_PHY_IO_WriteReg+0x18>)
 80004d2:	f001 fc79 	bl	8001dc8 <HAL_ETH_WritePHYRegister>
 80004d6:	3800      	subs	r0, #0
 80004d8:	bf18      	it	ne
 80004da:	2001      	movne	r0, #1
}
 80004dc:	4240      	negs	r0, r0
 80004de:	bd08      	pop	{r3, pc}
 80004e0:	240067f0 	.word	0x240067f0

080004e4 <ethernetif_input>:
{
 80004e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004e8:	4604      	mov	r4, r0
 80004ea:	b091      	sub	sp, #68	; 0x44
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80004ec:	4e2a      	ldr	r6, [pc, #168]	; (8000598 <ethernetif_input+0xb4>)
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80004ee:	4f2b      	ldr	r7, [pc, #172]	; (800059c <ethernetif_input+0xb8>)
 80004f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80004f4:	6830      	ldr	r0, [r6, #0]
 80004f6:	f004 f967 	bl	80047c8 <osSemaphoreWait>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d1f8      	bne.n	80004f0 <ethernetif_input+0xc>
  if(HAL_ETH_GetRxDataBuffer(&EthHandle, RxBuff) == HAL_OK)
 80004fe:	4d28      	ldr	r5, [pc, #160]	; (80005a0 <ethernetif_input+0xbc>)
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 8000500:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80005a8 <ethernetif_input+0xc4>
  uint32_t framelength = 0, i = 0;;
 8000504:	2100      	movs	r1, #0
  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	a804      	add	r0, sp, #16
  uint32_t framelength = 0, i = 0;;
 800050a:	9103      	str	r1, [sp, #12]
  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800050c:	f00c f89a 	bl	800c644 <memset>
    RxBuff[i].next=&RxBuff[i+1];
 8000510:	ab07      	add	r3, sp, #28
  if(HAL_ETH_GetRxDataBuffer(&EthHandle, RxBuff) == HAL_OK)
 8000512:	a904      	add	r1, sp, #16
 8000514:	4628      	mov	r0, r5
    RxBuff[i].next=&RxBuff[i+1];
 8000516:	9306      	str	r3, [sp, #24]
 8000518:	ab0a      	add	r3, sp, #40	; 0x28
 800051a:	9309      	str	r3, [sp, #36]	; 0x24
 800051c:	ab0d      	add	r3, sp, #52	; 0x34
 800051e:	930c      	str	r3, [sp, #48]	; 0x30
  if(HAL_ETH_GetRxDataBuffer(&EthHandle, RxBuff) == HAL_OK)
 8000520:	f001 fae8 	bl	8001af4 <HAL_ETH_GetRxDataBuffer>
 8000524:	2800      	cmp	r0, #0
 8000526:	d1e3      	bne.n	80004f0 <ethernetif_input+0xc>
    HAL_ETH_GetRxDataLength(&EthHandle, &framelength);
 8000528:	a903      	add	r1, sp, #12
 800052a:	4628      	mov	r0, r5
 800052c:	f001 fb29 	bl	8001b82 <HAL_ETH_GetRxDataLength>
    HAL_ETH_BuildRxDescriptors(&EthHandle);
 8000530:	4628      	mov	r0, r5
 8000532:	f001 fb42 	bl	8001bba <HAL_ETH_BuildRxDescriptors>
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 8000536:	9903      	ldr	r1, [sp, #12]
    if ( dsize > 0 ) { 
 8000538:	2900      	cmp	r1, #0
 800053a:	dd10      	ble.n	800055e <ethernetif_input+0x7a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800053c:	9b04      	ldr	r3, [sp, #16]
 800053e:	f003 021f 	and.w	r2, r3, #31
 8000542:	440a      	add	r2, r1
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000544:	f3bf 8f4f 	dsb	sy
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8000548:	441a      	add	r2, r3
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800054a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800054e:	3320      	adds	r3, #32
      } while ( op_size > 0 );
 8000550:	1ad1      	subs	r1, r2, r3
 8000552:	2900      	cmp	r1, #0
 8000554:	dcf9      	bgt.n	800054a <ethernetif_input+0x66>
 8000556:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800055a:	f3bf 8f6f 	isb	sy
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800055e:	4640      	mov	r0, r8
 8000560:	f007 fd0c 	bl	8007f7c <memp_malloc_pool>
    if(custom_pbuf != NULL)
 8000564:	4603      	mov	r3, r0
 8000566:	2800      	cmp	r0, #0
 8000568:	d0c2      	beq.n	80004f0 <ethernetif_input+0xc>
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800056a:	4a0e      	ldr	r2, [pc, #56]	; (80005a4 <ethernetif_input+0xc0>)
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800056c:	f8bd 100c 	ldrh.w	r1, [sp, #12]
      custom_pbuf->custom_free_function = pbuf_free_custom;
 8000570:	6102      	str	r2, [r0, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8000572:	2000      	movs	r0, #0
 8000574:	9a04      	ldr	r2, [sp, #16]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	9200      	str	r2, [sp, #0]
 800057a:	2241      	movs	r2, #65	; 0x41
 800057c:	f007 ff5e 	bl	800843c <pbuf_alloced_custom>
        if (p != NULL)
 8000580:	4681      	mov	r9, r0
 8000582:	2800      	cmp	r0, #0
 8000584:	d0b4      	beq.n	80004f0 <ethernetif_input+0xc>
          if (netif->input( p, netif) != ERR_OK )
 8000586:	6923      	ldr	r3, [r4, #16]
 8000588:	4621      	mov	r1, r4
 800058a:	4798      	blx	r3
 800058c:	2800      	cmp	r0, #0
 800058e:	d0b9      	beq.n	8000504 <ethernetif_input+0x20>
            pbuf_free(p);
 8000590:	4648      	mov	r0, r9
 8000592:	f007 ffa5 	bl	80084e0 <pbuf_free>
 8000596:	e7b3      	b.n	8000500 <ethernetif_input+0x1c>
 8000598:	240000b4 	.word	0x240000b4
 800059c:	e000ed00 	.word	0xe000ed00
 80005a0:	240067f0 	.word	0x240067f0
 80005a4:	0800048d 	.word	0x0800048d
 80005a8:	0800dae8 	.word	0x0800dae8

080005ac <ethernetif_init>:
{
 80005ac:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80005ae:	4604      	mov	r4, r0
{
 80005b0:	b0a1      	sub	sp, #132	; 0x84
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80005b2:	b930      	cbnz	r0, 80005c2 <ethernetif_init+0x16>
 80005b4:	4b4a      	ldr	r3, [pc, #296]	; (80006e0 <ethernetif_init+0x134>)
 80005b6:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80005ba:	494a      	ldr	r1, [pc, #296]	; (80006e4 <ethernetif_init+0x138>)
 80005bc:	484a      	ldr	r0, [pc, #296]	; (80006e8 <ethernetif_init+0x13c>)
 80005be:	f00c f849 	bl	800c654 <iprintf>
  netif->name[0] = IFNAME0;
 80005c2:	f247 4373 	movw	r3, #29811	; 0x7473
  EthHandle.Instance = ETH;  
 80005c6:	4d49      	ldr	r5, [pc, #292]	; (80006ec <ethernetif_init+0x140>)
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 80005c8:	2600      	movs	r6, #0
 80005ca:	4f49      	ldr	r7, [pc, #292]	; (80006f0 <ethernetif_init+0x144>)
  netif->name[0] = IFNAME0;
 80005cc:	85e3      	strh	r3, [r4, #46]	; 0x2e
  netif->output = etharp_output;
 80005ce:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <ethernetif_init+0x148>)
  EthHandle.Init.MACAddr = macaddress;
 80005d0:	f8c5 d004 	str.w	sp, [r5, #4]
  netif->output = etharp_output;
 80005d4:	6163      	str	r3, [r4, #20]
  netif->linkoutput = low_level_output;
 80005d6:	4b48      	ldr	r3, [pc, #288]	; (80006f8 <ethernetif_init+0x14c>)
 80005d8:	61a3      	str	r3, [r4, #24]
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80005da:	4b48      	ldr	r3, [pc, #288]	; (80006fc <ethernetif_init+0x150>)
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	889b      	ldrh	r3, [r3, #4]
 80005e0:	9000      	str	r0, [sp, #0]
  HAL_ETH_Init(&EthHandle);
 80005e2:	4628      	mov	r0, r5
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 80005e4:	f8ad 3004 	strh.w	r3, [sp, #4]
  EthHandle.Instance = ETH;  
 80005e8:	4b45      	ldr	r3, [pc, #276]	; (8000700 <ethernetif_init+0x154>)
 80005ea:	602b      	str	r3, [r5, #0]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80005ec:	2301      	movs	r3, #1
 80005ee:	722b      	strb	r3, [r5, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 80005f0:	4b44      	ldr	r3, [pc, #272]	; (8000704 <ethernetif_init+0x158>)
 80005f2:	612b      	str	r3, [r5, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 80005f4:	4b44      	ldr	r3, [pc, #272]	; (8000708 <ethernetif_init+0x15c>)
 80005f6:	60eb      	str	r3, [r5, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 80005f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80005fc:	616b      	str	r3, [r5, #20]
  HAL_ETH_Init(&EthHandle);
 80005fe:	f001 fd23 	bl	8002048 <HAL_ETH_Init>
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 8000602:	4b42      	ldr	r3, [pc, #264]	; (800070c <ethernetif_init+0x160>)
 8000604:	e9c4 3609 	strd	r3, r6, [r4, #36]	; 0x24
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000608:	2306      	movs	r3, #6
 800060a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800060e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8000612:	f043 030a 	orr.w	r3, r3, #10
 8000616:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    HAL_ETH_DescAssignMemory(&EthHandle, idx, Rx_Buff[idx], NULL);
 800061a:	4631      	mov	r1, r6
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800061c:	3601      	adds	r6, #1
    HAL_ETH_DescAssignMemory(&EthHandle, idx, Rx_Buff[idx], NULL);
 800061e:	463a      	mov	r2, r7
 8000620:	2300      	movs	r3, #0
 8000622:	4628      	mov	r0, r5
 8000624:	f507 67c0 	add.w	r7, r7, #1536	; 0x600
 8000628:	f001 f8fc 	bl	8001824 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800062c:	2e04      	cmp	r6, #4
 800062e:	d1f4      	bne.n	800061a <ethernetif_init+0x6e>
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000630:	4f37      	ldr	r7, [pc, #220]	; (8000710 <ethernetif_init+0x164>)
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000632:	ad02      	add	r5, sp, #8
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000634:	4638      	mov	r0, r7
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000636:	f107 0614 	add.w	r6, r7, #20
  LWIP_MEMPOOL_INIT(RX_POOL);
 800063a:	f007 fc7d 	bl	8007f38 <memp_init_pool>
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));  
 800063e:	4b35      	ldr	r3, [pc, #212]	; (8000714 <ethernetif_init+0x168>)
 8000640:	2230      	movs	r2, #48	; 0x30
 8000642:	2100      	movs	r1, #0
 8000644:	4618      	mov	r0, r3
 8000646:	f00b fffd 	bl	800c644 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800064a:	2221      	movs	r2, #33	; 0x21
  RxPktSemaphore = xSemaphoreCreateBinary();
 800064c:	2100      	movs	r1, #0
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800064e:	f840 2c04 	str.w	r2, [r0, #-4]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000652:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000656:	6102      	str	r2, [r0, #16]
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000658:	2203      	movs	r2, #3
 800065a:	2001      	movs	r0, #1
 800065c:	f002 fe60 	bl	8003320 <xQueueGenericCreate>
 8000660:	4b2d      	ldr	r3, [pc, #180]	; (8000718 <ethernetif_init+0x16c>)
 8000662:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000664:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000668:	6833      	ldr	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 800066a:	4621      	mov	r1, r4
 800066c:	a802      	add	r0, sp, #8
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800066e:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000670:	f004 f818 	bl	80046a4 <osThreadCreate>
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000674:	4929      	ldr	r1, [pc, #164]	; (800071c <ethernetif_init+0x170>)
 8000676:	482a      	ldr	r0, [pc, #168]	; (8000720 <ethernetif_init+0x174>)
 8000678:	f000 fbd0 	bl	8000e1c <LAN8742_RegisterBusIO>
  LAN8742_Init(&LAN8742);
 800067c:	4828      	ldr	r0, [pc, #160]	; (8000720 <ethernetif_init+0x174>)
 800067e:	f000 fbe1 	bl	8000e44 <LAN8742_Init>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000682:	4827      	ldr	r0, [pc, #156]	; (8000720 <ethernetif_init+0x174>)
 8000684:	f000 fc3f 	bl	8000f06 <LAN8742_GetLinkState>
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8000688:	2801      	cmp	r0, #1
 800068a:	dc08      	bgt.n	800069e <ethernetif_init+0xf2>
    netif_set_link_down(netif);
 800068c:	4620      	mov	r0, r4
 800068e:	f007 fe4f 	bl	8008330 <netif_set_link_down>
    netif_set_down(netif);
 8000692:	4620      	mov	r0, r4
 8000694:	f007 fe0c 	bl	80082b0 <netif_set_down>
}
 8000698:	2000      	movs	r0, #0
 800069a:	b021      	add	sp, #132	; 0x84
 800069c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (PHYLinkState)
 800069e:	3803      	subs	r0, #3
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 80006a0:	a907      	add	r1, sp, #28
 80006a2:	2802      	cmp	r0, #2
 80006a4:	bf93      	iteet	ls
 80006a6:	eb07 0040 	addls.w	r0, r7, r0, lsl #1
    switch (PHYLinkState)
 80006aa:	f44f 4580 	movhi.w	r5, #16384	; 0x4000
 80006ae:	f44f 5600 	movhi.w	r6, #8192	; 0x2000
 80006b2:	8d06      	ldrhls	r6, [r0, #40]	; 0x28
 80006b4:	bf98      	it	ls
 80006b6:	8dc5      	ldrhls	r5, [r0, #46]	; 0x2e
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <ethernetif_init+0x140>)
 80006ba:	f001 fbb7 	bl	8001e2c <HAL_ETH_GetMACConfig>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 80006be:	a907      	add	r1, sp, #28
 80006c0:	480a      	ldr	r0, [pc, #40]	; (80006ec <ethernetif_init+0x140>)
    MACConf.Speed = speed;
 80006c2:	e9cd 560c 	strd	r5, r6, [sp, #48]	; 0x30
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 80006c6:	f001 fc77 	bl	8001fb8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 80006ca:	4808      	ldr	r0, [pc, #32]	; (80006ec <ethernetif_init+0x140>)
 80006cc:	f001 f8c7 	bl	800185e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80006d0:	4620      	mov	r0, r4
 80006d2:	f007 fdd3 	bl	800827c <netif_set_up>
    netif_set_link_up(netif);
 80006d6:	4620      	mov	r0, r4
 80006d8:	f007 fe06 	bl	80082e8 <netif_set_link_up>
 80006dc:	e7dc      	b.n	8000698 <ethernetif_init+0xec>
 80006de:	bf00      	nop
 80006e0:	0801e36e 	.word	0x0801e36e
 80006e4:	0801e3c5 	.word	0x0801e3c5
 80006e8:	0801e3d3 	.word	0x0801e3d3
 80006ec:	240067f0 	.word	0x240067f0
 80006f0:	30040200 	.word	0x30040200
 80006f4:	08006b61 	.word	0x08006b61
 80006f8:	08000431 	.word	0x08000431
 80006fc:	0800daf4 	.word	0x0800daf4
 8000700:	40028000 	.word	0x40028000
 8000704:	30040000 	.word	0x30040000
 8000708:	30040060 	.word	0x30040060
 800070c:	000205dc 	.word	0x000205dc
 8000710:	0800dae8 	.word	0x0800dae8
 8000714:	24006968 	.word	0x24006968
 8000718:	240000b4 	.word	0x240000b4
 800071c:	24000000 	.word	0x24000000
 8000720:	24006944 	.word	0x24006944

08000724 <sys_now>:
  return HAL_GetTick();
 8000724:	f000 bd2a 	b.w	800117c <HAL_GetTick>

08000728 <HAL_ETH_MspInit>:
{
 8000728:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4c40      	ldr	r4, [pc, #256]	; (800082c <HAL_ETH_MspInit+0x104>)
{
 800072c:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 800072e:	2500      	movs	r5, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000730:	483f      	ldr	r0, [pc, #252]	; (8000830 <HAL_ETH_MspInit+0x108>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000736:	a907      	add	r1, sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000740:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000758:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800075c:	f003 0302 	and.w	r3, r3, #2
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000764:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000770:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	9302      	str	r3, [sp, #8]
 800077a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8000780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000784:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8000788:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 800078c:	9509      	str	r5, [sp, #36]	; 0x24
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800078e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000792:	9303      	str	r3, [sp, #12]
 8000794:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000796:	2302      	movs	r3, #2
 8000798:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800079a:	9308      	str	r3, [sp, #32]
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 800079c:	230b      	movs	r3, #11
 800079e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 80007a0:	2386      	movs	r3, #134	; 0x86
 80007a2:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80007a4:	f001 fd58 	bl	8002258 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 80007a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007ac:	a907      	add	r1, sp, #28
 80007ae:	4821      	ldr	r0, [pc, #132]	; (8000834 <HAL_ETH_MspInit+0x10c>)
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 80007b0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80007b2:	f001 fd51 	bl	8002258 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 80007b6:	2332      	movs	r3, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80007b8:	a907      	add	r1, sp, #28
 80007ba:	481f      	ldr	r0, [pc, #124]	; (8000838 <HAL_ETH_MspInit+0x110>)
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 80007bc:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80007be:	f001 fd4b 	bl	8002258 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 80007c2:	f642 0304 	movw	r3, #10244	; 0x2804
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);	
 80007c6:	a907      	add	r1, sp, #28
 80007c8:	481c      	ldr	r0, [pc, #112]	; (800083c <HAL_ETH_MspInit+0x114>)
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 80007ca:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);	
 80007cc:	f001 fd44 	bl	8002258 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 80007d0:	462a      	mov	r2, r5
 80007d2:	2107      	movs	r1, #7
 80007d4:	203d      	movs	r0, #61	; 0x3d
 80007d6:	f000 fcf9 	bl	80011cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 80007da:	203d      	movs	r0, #61	; 0x3d
 80007dc:	f000 fd28 	bl	8001230 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80007e0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80007e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007e8:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 80007ec:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80007f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007f4:	9304      	str	r3, [sp, #16]
 80007f6:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_ETH1TX_CLK_ENABLE();
 80007f8:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 80007fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000800:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8000804:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800080c:	9305      	str	r3, [sp, #20]
 800080e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000810:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000818:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 800081c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
 8000820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000824:	9306      	str	r3, [sp, #24]
 8000826:	9b06      	ldr	r3, [sp, #24]
}
 8000828:	b00d      	add	sp, #52	; 0x34
 800082a:	bd30      	pop	{r4, r5, pc}
 800082c:	58024400 	.word	0x58024400
 8000830:	58020000 	.word	0x58020000
 8000834:	58020400 	.word	0x58020400
 8000838:	58020800 	.word	0x58020800
 800083c:	58021800 	.word	0x58021800

08000840 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(RxPktSemaphore);
 8000840:	4b01      	ldr	r3, [pc, #4]	; (8000848 <HAL_ETH_RxCpltCallback+0x8>)
 8000842:	6818      	ldr	r0, [r3, #0]
 8000844:	f003 bfe6 	b.w	8004814 <osSemaphoreRelease>
 8000848:	240000b4 	.word	0x240000b4

0800084c <ethernet_link_thread>:
  * @brief  Check the ETH link state and update netif accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread( void const * argument )
{
 800084c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8000850:	2500      	movs	r5, #0
{
 8000852:	b09a      	sub	sp, #104	; 0x68
 8000854:	4604      	mov	r4, r0
  struct netif *netif = (struct netif *) argument;
  
  for(;;)
  {
    
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000856:	f8df 8088 	ldr.w	r8, [pc, #136]	; 80008e0 <ethernet_link_thread+0x94>
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800085a:	462f      	mov	r7, r5
 800085c:	46aa      	mov	sl, r5
      }
      
      if(linkchanged)
      {
        /* Get MAC Config MAC */
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 800085e:	4e1f      	ldr	r6, [pc, #124]	; (80008dc <ethernet_link_thread+0x90>)
 8000860:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80008e4 <ethernet_link_thread+0x98>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000864:	4640      	mov	r0, r8
 8000866:	f000 fb4e 	bl	8000f06 <LAN8742_GetLinkState>
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800086a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800086e:	075a      	lsls	r2, r3, #29
 8000870:	d510      	bpl.n	8000894 <ethernet_link_thread+0x48>
 8000872:	2801      	cmp	r0, #1
 8000874:	dc0c      	bgt.n	8000890 <ethernet_link_thread+0x44>
      HAL_ETH_Stop_IT(&EthHandle);
 8000876:	4630      	mov	r0, r6
 8000878:	f001 f836 	bl	80018e8 <HAL_ETH_Stop_IT>
      netif_set_down(netif);
 800087c:	4620      	mov	r0, r4
 800087e:	f007 fd17 	bl	80082b0 <netif_set_down>
      netif_set_link_down(netif);
 8000882:	4620      	mov	r0, r4
 8000884:	f007 fd54 	bl	8008330 <netif_set_link_down>
        netif_set_up(netif);
        netif_set_link_up(netif);
      }
    }
    
    osDelay(100);
 8000888:	2064      	movs	r0, #100	; 0x64
 800088a:	f003 ff28 	bl	80046de <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800088e:	e7e9      	b.n	8000864 <ethernet_link_thread+0x18>
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000890:	075b      	lsls	r3, r3, #29
 8000892:	d4f9      	bmi.n	8000888 <ethernet_link_thread+0x3c>
 8000894:	2801      	cmp	r0, #1
 8000896:	ddf7      	ble.n	8000888 <ethernet_link_thread+0x3c>
      switch (PHYLinkState)
 8000898:	3802      	subs	r0, #2
 800089a:	2803      	cmp	r0, #3
 800089c:	d819      	bhi.n	80008d2 <ethernet_link_thread+0x86>
 800089e:	eb09 0340 	add.w	r3, r9, r0, lsl #1
 80008a2:	8e9f      	ldrh	r7, [r3, #52]	; 0x34
 80008a4:	8f9d      	ldrh	r5, [r3, #60]	; 0x3c
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 80008a6:	a901      	add	r1, sp, #4
 80008a8:	4630      	mov	r0, r6
 80008aa:	f001 fabf 	bl	8001e2c <HAL_ETH_GetMACConfig>
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 80008ae:	a901      	add	r1, sp, #4
 80008b0:	4630      	mov	r0, r6
        netif_set_link_up(netif);
 80008b2:	f04f 0a01 	mov.w	sl, #1
        MACConf.Speed = speed;
 80008b6:	e9cd 7506 	strd	r7, r5, [sp, #24]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 80008ba:	f001 fb7d 	bl	8001fb8 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 80008be:	4630      	mov	r0, r6
 80008c0:	f000 ffcd 	bl	800185e <HAL_ETH_Start_IT>
        netif_set_up(netif);
 80008c4:	4620      	mov	r0, r4
 80008c6:	f007 fcd9 	bl	800827c <netif_set_up>
        netif_set_link_up(netif);
 80008ca:	4620      	mov	r0, r4
 80008cc:	f007 fd0c 	bl	80082e8 <netif_set_link_up>
 80008d0:	e7da      	b.n	8000888 <ethernet_link_thread+0x3c>
      if(linkchanged)
 80008d2:	f1ba 0f00 	cmp.w	sl, #0
 80008d6:	d0d7      	beq.n	8000888 <ethernet_link_thread+0x3c>
 80008d8:	e7e5      	b.n	80008a6 <ethernet_link_thread+0x5a>
 80008da:	bf00      	nop
 80008dc:	240067f0 	.word	0x240067f0
 80008e0:	24006944 	.word	0x24006944
 80008e4:	0800dae8 	.word	0x0800dae8

080008e8 <http_server_netconn_init>:
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80008e8:	2301      	movs	r3, #1
{
 80008ea:	b507      	push	{r0, r1, r2, lr}
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 80008ec:	2200      	movs	r2, #0
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	4904      	ldr	r1, [pc, #16]	; (8000904 <http_server_netconn_init+0x1c>)
 80008f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008f6:	4804      	ldr	r0, [pc, #16]	; (8000908 <http_server_netconn_init+0x20>)
 80008f8:	f00b fe06 	bl	800c508 <sys_thread_new>
}
 80008fc:	b003      	add	sp, #12
 80008fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8000902:	bf00      	nop
 8000904:	080009bd 	.word	0x080009bd
 8000908:	0801e3fb 	.word	0x0801e3fb

0800090c <DynWebPage>:
  *         running tasks and the number of page hits. 
  * @param  conn pointer on connection structure 
  * @retval None
  */
void DynWebPage(struct netconn *conn)
{
 800090c:	b530      	push	{r4, r5, lr}
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 800090e:	2400      	movs	r4, #0
{
 8000910:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8000914:	4605      	mov	r5, r0

  memset(PAGE_BODY, 0,512);
 8000916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091a:	4621      	mov	r1, r4
 800091c:	a806      	add	r0, sp, #24
  portCHAR pagehits[10] = {0};
 800091e:	f8ad 4014 	strh.w	r4, [sp, #20]
 8000922:	e9cd 4403 	strd	r4, r4, [sp, #12]
  memset(PAGE_BODY, 0,512);
 8000926:	f00b fe8d 	bl	800c644 <memset>

  /* Update the hit count */
  nPageHits++;
 800092a:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <DynWebPage+0x94>)
  sprintf(pagehits, "%d", (int)nPageHits);
 800092c:	491d      	ldr	r1, [pc, #116]	; (80009a4 <DynWebPage+0x98>)
 800092e:	a803      	add	r0, sp, #12
  nPageHits++;
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	3201      	adds	r2, #1
 8000934:	601a      	str	r2, [r3, #0]
  sprintf(pagehits, "%d", (int)nPageHits);
 8000936:	f00b fee5 	bl	800c704 <siprintf>
  strcat(PAGE_BODY, pagehits);
 800093a:	a903      	add	r1, sp, #12
 800093c:	a806      	add	r0, sp, #24
 800093e:	f00b ff01 	bl	800c744 <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
 8000942:	4919      	ldr	r1, [pc, #100]	; (80009a8 <DynWebPage+0x9c>)
 8000944:	a806      	add	r0, sp, #24
 8000946:	f00b fefd 	bl	800c744 <strcat>
  strcat((char *)PAGE_BODY, "<br>---------------------------------------------<br>");
 800094a:	4918      	ldr	r1, [pc, #96]	; (80009ac <DynWebPage+0xa0>)
 800094c:	a806      	add	r0, sp, #24
 800094e:	f00b fef9 	bl	800c744 <strcat>
    
  /* The list of tasks and their status */
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8000952:	a806      	add	r0, sp, #24
 8000954:	f7ff fcce 	bl	80002f4 <strlen>
 8000958:	ab06      	add	r3, sp, #24
 800095a:	4418      	add	r0, r3
 800095c:	f003 ffce 	bl	80048fc <osThreadList>
  strcat((char *)PAGE_BODY, "<br><br>---------------------------------------------");
 8000960:	4913      	ldr	r1, [pc, #76]	; (80009b0 <DynWebPage+0xa4>)
 8000962:	a806      	add	r0, sp, #24
 8000964:	f00b feee 	bl	800c744 <strcat>
  strcat((char *)PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8000968:	4912      	ldr	r1, [pc, #72]	; (80009b4 <DynWebPage+0xa8>)
 800096a:	a806      	add	r0, sp, #24
 800096c:	f00b feea 	bl	800c744 <strcat>

  /* Send the dynamically generated page */
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 8000970:	4911      	ldr	r1, [pc, #68]	; (80009b8 <DynWebPage+0xac>)
 8000972:	4608      	mov	r0, r1
 8000974:	f7ff fcbe 	bl	80002f4 <strlen>
 8000978:	2301      	movs	r3, #1
 800097a:	4602      	mov	r2, r0
 800097c:	490e      	ldr	r1, [pc, #56]	; (80009b8 <DynWebPage+0xac>)
 800097e:	4628      	mov	r0, r5
 8000980:	9400      	str	r4, [sp, #0]
 8000982:	f004 fb9d 	bl	80050c0 <netconn_write_partly>
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 8000986:	a806      	add	r0, sp, #24
 8000988:	f7ff fcb4 	bl	80002f4 <strlen>
 800098c:	2301      	movs	r3, #1
 800098e:	4602      	mov	r2, r0
 8000990:	a906      	add	r1, sp, #24
 8000992:	4628      	mov	r0, r5
 8000994:	9400      	str	r4, [sp, #0]
 8000996:	f004 fb93 	bl	80050c0 <netconn_write_partly>
}
 800099a:	f50d 7d07 	add.w	sp, sp, #540	; 0x21c
 800099e:	bd30      	pop	{r4, r5, pc}
 80009a0:	240000bc 	.word	0x240000bc
 80009a4:	0801e400 	.word	0x0801e400
 80009a8:	0801e403 	.word	0x0801e403
 80009ac:	0801e437 	.word	0x0801e437
 80009b0:	0801e46d 	.word	0x0801e46d
 80009b4:	0801e4a3 	.word	0x0801e4a3
 80009b8:	0800db2c 	.word	0x0800db2c

080009bc <http_server_netconn_thread>:
  conn = netconn_new(NETCONN_TCP);
 80009bc:	2200      	movs	r2, #0
 80009be:	2010      	movs	r0, #16
{ 
 80009c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  conn = netconn_new(NETCONN_TCP);
 80009c4:	4611      	mov	r1, r2
{ 
 80009c6:	b08c      	sub	sp, #48	; 0x30
  conn = netconn_new(NETCONN_TCP);
 80009c8:	f004 fa52 	bl	8004e70 <netconn_new_with_proto_and_callback>
  if (conn!= NULL)
 80009cc:	4606      	mov	r6, r0
 80009ce:	2800      	cmp	r0, #0
 80009d0:	f000 8083 	beq.w	8000ada <http_server_netconn_thread+0x11e>
    err = netconn_bind(conn, NULL, 80);
 80009d4:	2250      	movs	r2, #80	; 0x50
 80009d6:	2100      	movs	r1, #0
 80009d8:	f004 fac2 	bl	8004f60 <netconn_bind>
    if (err == ERR_OK)
 80009dc:	2800      	cmp	r0, #0
 80009de:	d17c      	bne.n	8000ada <http_server_netconn_thread+0x11e>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 80009e0:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8000b04 <http_server_netconn_thread+0x148>
      netconn_listen(conn);
 80009e4:	21ff      	movs	r1, #255	; 0xff
        if (strncmp((char const *)buf,"GET /STM32H7xx_files/ST.gif",27)==0)
 80009e6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8000b08 <http_server_netconn_thread+0x14c>
      netconn_listen(conn);
 80009ea:	4630      	mov	r0, r6
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 80009ec:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8000b0c <http_server_netconn_thread+0x150>
      netconn_listen(conn);
 80009f0:	f004 fadc 	bl	8004fac <netconn_listen_with_backlog>
        accept_err = netconn_accept(conn, &newconn);
 80009f4:	a904      	add	r1, sp, #16
 80009f6:	4630      	mov	r0, r6
 80009f8:	f004 fb80 	bl	80050fc <netconn_accept>
        if(accept_err == ERR_OK)
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d1f9      	bne.n	80009f4 <http_server_netconn_thread+0x38>
          http_server_serve(newconn);
 8000a00:	9c04      	ldr	r4, [sp, #16]
  recv_err = netconn_recv(conn, &inbuf);
 8000a02:	a905      	add	r1, sp, #20
 8000a04:	4620      	mov	r0, r4
 8000a06:	f004 fca9 	bl	800535c <netconn_recv>
  if (recv_err == ERR_OK)
 8000a0a:	2800      	cmp	r0, #0
 8000a0c:	d146      	bne.n	8000a9c <http_server_netconn_thread+0xe0>
    if (netconn_err(conn) == ERR_OK) 
 8000a0e:	4620      	mov	r0, r4
 8000a10:	f004 fb65 	bl	80050de <netconn_err>
 8000a14:	2800      	cmp	r0, #0
 8000a16:	d141      	bne.n	8000a9c <http_server_netconn_thread+0xe0>
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8000a18:	f10d 020e 	add.w	r2, sp, #14
 8000a1c:	a906      	add	r1, sp, #24
 8000a1e:	9805      	ldr	r0, [sp, #20]
 8000a20:	f005 fc98 	bl	8006354 <netbuf_data>
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000a24:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8000a28:	2b04      	cmp	r3, #4
 8000a2a:	d937      	bls.n	8000a9c <http_server_netconn_thread+0xe0>
 8000a2c:	9d06      	ldr	r5, [sp, #24]
 8000a2e:	2205      	movs	r2, #5
 8000a30:	4641      	mov	r1, r8
 8000a32:	4628      	mov	r0, r5
 8000a34:	f00b fe9d 	bl	800c772 <strncmp>
 8000a38:	bb80      	cbnz	r0, 8000a9c <http_server_netconn_thread+0xe0>
        if (strncmp((char const *)buf,"GET /STM32H7xx_files/ST.gif",27)==0)
 8000a3a:	221b      	movs	r2, #27
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	4628      	mov	r0, r5
 8000a40:	f00b fe97 	bl	800c772 <strncmp>
 8000a44:	4607      	mov	r7, r0
 8000a46:	b970      	cbnz	r0, 8000a66 <http_server_netconn_thread+0xaa>
          fs_open(&file, "/STM32H7xx_files/ST.gif"); 
 8000a48:	4925      	ldr	r1, [pc, #148]	; (8000ae0 <http_server_netconn_thread+0x124>)
          fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 8000a4a:	a807      	add	r0, sp, #28
 8000a4c:	f00b fd7e 	bl	800c54c <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000a50:	463b      	mov	r3, r7
 8000a52:	9700      	str	r7, [sp, #0]
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000a54:	4620      	mov	r0, r4
 8000a56:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8000a5a:	f004 fb31 	bl	80050c0 <netconn_write_partly>
          fs_close(&file);
 8000a5e:	a807      	add	r0, sp, #28
 8000a60:	f00b fd94 	bl	800c58c <fs_close>
 8000a64:	e01a      	b.n	8000a9c <http_server_netconn_thread+0xe0>
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 8000a66:	221e      	movs	r2, #30
 8000a68:	4651      	mov	r1, sl
 8000a6a:	4628      	mov	r0, r5
 8000a6c:	f00b fe81 	bl	800c772 <strncmp>
 8000a70:	4607      	mov	r7, r0
 8000a72:	b908      	cbnz	r0, 8000a78 <http_server_netconn_thread+0xbc>
          fs_open(&file, "/STM32H7xx_files/stm32.jpg"); 
 8000a74:	491b      	ldr	r1, [pc, #108]	; (8000ae4 <http_server_netconn_thread+0x128>)
 8000a76:	e7e8      	b.n	8000a4a <http_server_netconn_thread+0x8e>
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/logo.jpg", 29) == 0)                                           
 8000a78:	221d      	movs	r2, #29
 8000a7a:	491b      	ldr	r1, [pc, #108]	; (8000ae8 <http_server_netconn_thread+0x12c>)
 8000a7c:	4628      	mov	r0, r5
 8000a7e:	f00b fe78 	bl	800c772 <strncmp>
 8000a82:	4607      	mov	r7, r0
 8000a84:	b908      	cbnz	r0, 8000a8a <http_server_netconn_thread+0xce>
          fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 8000a86:	4919      	ldr	r1, [pc, #100]	; (8000aec <http_server_netconn_thread+0x130>)
 8000a88:	e7df      	b.n	8000a4a <http_server_netconn_thread+0x8e>
        else if(strncmp(buf, "GET /STM32H7xxTASKS.html", 24) == 0)
 8000a8a:	2218      	movs	r2, #24
 8000a8c:	4918      	ldr	r1, [pc, #96]	; (8000af0 <http_server_netconn_thread+0x134>)
 8000a8e:	4628      	mov	r0, r5
 8000a90:	f00b fe6f 	bl	800c772 <strncmp>
 8000a94:	b960      	cbnz	r0, 8000ab0 <http_server_netconn_thread+0xf4>
           DynWebPage(conn);
 8000a96:	4620      	mov	r0, r4
 8000a98:	f7ff ff38 	bl	800090c <DynWebPage>
  netconn_close(conn);
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	f004 fb1b 	bl	80050d8 <netconn_close>
  netbuf_delete(inbuf);
 8000aa2:	9805      	ldr	r0, [sp, #20]
 8000aa4:	f005 fc44 	bl	8006330 <netbuf_delete>
          netconn_delete(newconn);
 8000aa8:	9804      	ldr	r0, [sp, #16]
 8000aaa:	f004 fa4b 	bl	8004f44 <netconn_delete>
 8000aae:	e7a1      	b.n	80009f4 <http_server_netconn_thread+0x38>
        else if((strncmp(buf, "GET /STM32H7xx.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0)) 
 8000ab0:	2213      	movs	r2, #19
 8000ab2:	4910      	ldr	r1, [pc, #64]	; (8000af4 <http_server_netconn_thread+0x138>)
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	f00b fe5c 	bl	800c772 <strncmp>
 8000aba:	b128      	cbz	r0, 8000ac8 <http_server_netconn_thread+0x10c>
 8000abc:	2206      	movs	r2, #6
 8000abe:	490e      	ldr	r1, [pc, #56]	; (8000af8 <http_server_netconn_thread+0x13c>)
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	f00b fe56 	bl	800c772 <strncmp>
 8000ac6:	b930      	cbnz	r0, 8000ad6 <http_server_netconn_thread+0x11a>
          fs_open(&file, "/STM32H7xx.html"); 
 8000ac8:	490c      	ldr	r1, [pc, #48]	; (8000afc <http_server_netconn_thread+0x140>)
          fs_open(&file, "/404.html"); 
 8000aca:	a807      	add	r0, sp, #28
 8000acc:	f00b fd3e 	bl	800c54c <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	9300      	str	r3, [sp, #0]
 8000ad4:	e7be      	b.n	8000a54 <http_server_netconn_thread+0x98>
          fs_open(&file, "/404.html"); 
 8000ad6:	490a      	ldr	r1, [pc, #40]	; (8000b00 <http_server_netconn_thread+0x144>)
 8000ad8:	e7f7      	b.n	8000aca <http_server_netconn_thread+0x10e>
}
 8000ada:	b00c      	add	sp, #48	; 0x30
 8000adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae0:	0801e4e8 	.word	0x0801e4e8
 8000ae4:	0801e504 	.word	0x0801e504
 8000ae8:	0801e51f 	.word	0x0801e51f
 8000aec:	0801e523 	.word	0x0801e523
 8000af0:	0801e53d 	.word	0x0801e53d
 8000af4:	0801e556 	.word	0x0801e556
 8000af8:	0801e56a 	.word	0x0801e56a
 8000afc:	0801e55a 	.word	0x0801e55a
 8000b00:	0801e571 	.word	0x0801e571
 8000b04:	0801e4de 	.word	0x0801e4de
 8000b08:	0801e4e4 	.word	0x0801e4e4
 8000b0c:	0801e500 	.word	0x0801e500

08000b10 <StartThread>:
  * @retval None
  */
static void StartThread(void const * argument)
{   
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8000b10:	2100      	movs	r1, #0
  ethernet_link_status_updated(&gnetif); 
  
#if LWIP_NETIF_LINK_CALLBACK 
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
  
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000b12:	4d1a      	ldr	r5, [pc, #104]	; (8000b7c <StartThread+0x6c>)
{   
 8000b14:	b500      	push	{lr}
  tcpip_init(NULL, NULL);
 8000b16:	4608      	mov	r0, r1
{   
 8000b18:	b08d      	sub	sp, #52	; 0x34
  tcpip_init(NULL, NULL);
 8000b1a:	f005 fcf5 	bl	8006508 <tcpip_init>
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8000b1e:	4a18      	ldr	r2, [pc, #96]	; (8000b80 <StartThread+0x70>)
 8000b20:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000b24:	a904      	add	r1, sp, #16
 8000b26:	4817      	ldr	r0, [pc, #92]	; (8000b84 <StartThread+0x74>)
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000b28:	ac07      	add	r4, sp, #28
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 8000b2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8000b2e:	f503 437e 	add.w	r3, r3, #65024	; 0xfe00
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000b32:	aa05      	add	r2, sp, #20
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 8000b34:	33aa      	adds	r3, #170	; 0xaa
 8000b36:	9306      	str	r3, [sp, #24]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <StartThread+0x78>)
 8000b3a:	9302      	str	r3, [sp, #8]
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <StartThread+0x7c>)
 8000b3e:	9301      	str	r3, [sp, #4]
 8000b40:	2300      	movs	r3, #0
 8000b42:	9300      	str	r3, [sp, #0]
 8000b44:	ab06      	add	r3, sp, #24
 8000b46:	f007 fafd 	bl	8008144 <netif_add>
  netif_set_default(&gnetif);
 8000b4a:	480e      	ldr	r0, [pc, #56]	; (8000b84 <StartThread+0x74>)
 8000b4c:	f007 fb90 	bl	8008270 <netif_set_default>
  ethernet_link_status_updated(&gnetif); 
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <StartThread+0x74>)
 8000b52:	f7ff fc56 	bl	8000402 <ethernet_link_status_updated>
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8000b56:	490e      	ldr	r1, [pc, #56]	; (8000b90 <StartThread+0x80>)
 8000b58:	480a      	ldr	r0, [pc, #40]	; (8000b84 <StartThread+0x74>)
 8000b5a:	f007 fc03 	bl	8008364 <netif_set_link_callback>
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000b5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b62:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 8000b64:	a807      	add	r0, sp, #28
 8000b66:	4907      	ldr	r1, [pc, #28]	; (8000b84 <StartThread+0x74>)
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 8000b68:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 8000b6a:	f003 fd9b 	bl	80046a4 <osThreadCreate>
  http_server_netconn_init();
 8000b6e:	f7ff febb 	bl	80008e8 <http_server_netconn_init>
    osThreadTerminate(NULL);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f003 fdae 	bl	80046d4 <osThreadTerminate>
  for( ;; )
 8000b78:	e7fb      	b.n	8000b72 <StartThread+0x62>
 8000b7a:	bf00      	nop
 8000b7c:	0800e178 	.word	0x0800e178
 8000b80:	0a47fea9 	.word	0x0a47fea9
 8000b84:	24006998 	.word	0x24006998
 8000b88:	080064cd 	.word	0x080064cd
 8000b8c:	080005ad 	.word	0x080005ad
 8000b90:	08000403 	.word	0x08000403

08000b94 <main>:
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b09e      	sub	sp, #120	; 0x78

  /* Configure the MPU attributes as Device not cacheable 
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x30040000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000b98:	4c66      	ldr	r4, [pc, #408]	; (8000d34 <main+0x1a0>)
  HAL_MPU_Disable();
 8000b9a:	f000 fb57 	bl	800124c <HAL_MPU_Disable>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b9e:	2301      	movs	r3, #1
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ba0:	a80b      	add	r0, sp, #44	; 0x2c
  
  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.BaseAddress = 0x30044000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000ba2:	4d65      	ldr	r5, [pc, #404]	; (8000d38 <main+0x1a4>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ba4:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 8000ba8:	4b64      	ldr	r3, [pc, #400]	; (8000d3c <main+0x1a8>)
 8000baa:	e9cd 430c 	strd	r4, r3, [sp, #48]	; 0x30
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bb2:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bb4:	f000 fb6c 	bl	8001290 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bb8:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.SubRegionDisable = 0x00;
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bbc:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bbe:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000bc2:	4b5f      	ldr	r3, [pc, #380]	; (8000d40 <main+0x1ac>)
 8000bc4:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bcc:	930e      	str	r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bce:	f000 fb5f 	bl	8001290 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bd2:	2004      	movs	r0, #4
 8000bd4:	f000 fb4a 	bl	800126c <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000bd8:	4b5a      	ldr	r3, [pc, #360]	; (8000d44 <main+0x1b0>)
 8000bda:	695a      	ldr	r2, [r3, #20]
 8000bdc:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8000be0:	d111      	bne.n	8000c06 <main+0x72>
  __ASM volatile ("dsb 0xF":::"memory");
 8000be2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000be6:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000bea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000bee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bf2:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000bf6:	695a      	ldr	r2, [r3, #20]
 8000bf8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000bfc:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000bfe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c02:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c06:	4a4f      	ldr	r2, [pc, #316]	; (8000d44 <main+0x1b0>)
 8000c08:	6953      	ldr	r3, [r2, #20]
 8000c0a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8000c0e:	d123      	bne.n	8000c58 <main+0xc4>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000c10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c14:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8000c18:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c1c:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c20:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c24:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000c28:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c2a:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c2e:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c30:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8000c34:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c36:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000c3a:	d2f9      	bcs.n	8000c30 <main+0x9c>
    } while(sets-- != 0U);
 8000c3c:	3b20      	subs	r3, #32
 8000c3e:	f113 0f20 	cmn.w	r3, #32
 8000c42:	d1f2      	bne.n	8000c2a <main+0x96>
 8000c44:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c48:	6953      	ldr	r3, [r2, #20]
 8000c4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c4e:	6153      	str	r3, [r2, #20]
 8000c50:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c54:	f3bf 8f6f 	isb	sy
  HAL_Init();  
 8000c58:	f000 fa56 	bl	8001108 <HAL_Init>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f001 fbe7 	bl	8002430 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c62:	2300      	movs	r3, #0
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	4b38      	ldr	r3, [pc, #224]	; (8000d48 <main+0x1b4>)
 8000c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c6a:	f022 0201 	bic.w	r2, r2, #1
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	9301      	str	r3, [sp, #4]
 8000c78:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <main+0x1b8>)
 8000c7a:	699a      	ldr	r2, [r3, #24]
 8000c7c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000c80:	619a      	str	r2, [r3, #24]
 8000c82:	699a      	ldr	r2, [r3, #24]
 8000c84:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000c88:	9201      	str	r2, [sp, #4]
 8000c8a:	9a01      	ldr	r2, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c8c:	699a      	ldr	r2, [r3, #24]
 8000c8e:	0490      	lsls	r0, r2, #18
 8000c90:	d5fc      	bpl.n	8000c8c <main+0xf8>
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <main+0x1bc>)
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c94:	2701      	movs	r7, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c96:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000c98:	2504      	movs	r5, #4
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000c9a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000c9e:	a80b      	add	r0, sp, #44	; 0x2c
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000ca0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ca4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000ca8:	f44f 72c8 	mov.w	r2, #400	; 0x190
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000cac:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cb0:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8000cb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000cb6:	9302      	str	r3, [sp, #8]
 8000cb8:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cbe:	e9cd 730b 	strd	r7, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000cc2:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc4:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8000cc8:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8000cca:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ccc:	931d      	str	r3, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000cce:	e9cd 5216 	strd	r5, r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000cd2:	e9cd 5419 	strd	r5, r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000cd6:	e9cd 531b 	strd	r5, r3, [sp, #108]	; 0x6c
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000cda:	f001 fbcd 	bl	8002478 <HAL_RCC_OscConfig>
  if(ret != HAL_OK)
 8000cde:	b100      	cbz	r0, 8000ce2 <main+0x14e>
    while(1);
 8000ce0:	e7fe      	b.n	8000ce0 <main+0x14c>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce2:	223f      	movs	r2, #63	; 0x3f
 8000ce4:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8000ce6:	2108      	movs	r1, #8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ce8:	9005      	str	r0, [sp, #20]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000cea:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cec:	e9cd 2303 	strd	r2, r3, [sp, #12]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8000cf0:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 8000cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8000cf6:	e9cd 1306 	strd	r1, r3, [sp, #24]
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000cfa:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 8000cfc:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 8000cfe:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000d02:	f001 fef1 	bl	8002ae8 <HAL_RCC_ClockConfig>
  if(ret != HAL_OK)
 8000d06:	4606      	mov	r6, r0
 8000d08:	b100      	cbz	r0, 8000d0c <main+0x178>
    while(1);
 8000d0a:	e7fe      	b.n	8000d0a <main+0x176>
  BSP_LED_Init(LED2);
 8000d0c:	4638      	mov	r0, r7
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 4);
 8000d0e:	4d11      	ldr	r5, [pc, #68]	; (8000d54 <main+0x1c0>)
  BSP_LED_Init(LED2);
 8000d10:	f000 f944 	bl	8000f9c <BSP_LED_Init>
  BSP_LED_Init(LED3);
 8000d14:	4620      	mov	r0, r4
 8000d16:	f000 f941 	bl	8000f9c <BSP_LED_Init>
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 4);
 8000d1a:	ac0b      	add	r4, sp, #44	; 0x2c
 8000d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d20:	682b      	ldr	r3, [r5, #0]
  osThreadCreate (osThread(Start), NULL);
 8000d22:	4631      	mov	r1, r6
 8000d24:	a80b      	add	r0, sp, #44	; 0x2c
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 4);
 8000d26:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8000d28:	f003 fcbc 	bl	80046a4 <osThreadCreate>
  osKernelStart();
 8000d2c:	f003 fcae 	bl	800468c <osKernelStart>
  for( ;; );
 8000d30:	e7fe      	b.n	8000d30 <main+0x19c>
 8000d32:	bf00      	nop
 8000d34:	30040000 	.word	0x30040000
 8000d38:	30044000 	.word	0x30044000
 8000d3c:	03000007 	.word	0x03000007
 8000d40:	0301000d 	.word	0x0301000d
 8000d44:	e000ed00 	.word	0xe000ed00
 8000d48:	58000400 	.word	0x58000400
 8000d4c:	58024800 	.word	0x58024800
 8000d50:	58024400 	.word	0x58024400
 8000d54:	0800e18c 	.word	0x0800e18c

08000d58 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d58:	280f      	cmp	r0, #15
{
 8000d5a:	b510      	push	{r4, lr}
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	b08a      	sub	sp, #40	; 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d60:	d902      	bls.n	8000d68 <HAL_InitTick+0x10>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000d62:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&TimHandle);
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8000d64:	b00a      	add	sp, #40	; 0x28
 8000d66:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8000d68:	4601      	mov	r1, r0
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2036      	movs	r0, #54	; 0x36
 8000d6e:	f000 fa2d 	bl	80011cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d72:	2036      	movs	r0, #54	; 0x36
 8000d74:	f000 fa5c 	bl	8001230 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d7a:	4669      	mov	r1, sp
 8000d7c:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
 8000d7e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d80:	4b17      	ldr	r3, [pc, #92]	; (8000de0 <HAL_InitTick+0x88>)
 8000d82:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000d86:	f042 0210 	orr.w	r2, r2, #16
 8000d8a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8000d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d92:	f003 0310 	and.w	r3, r3, #16
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d9a:	f001 ffff 	bl	8002d9c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8000d9e:	9b07      	ldr	r3, [sp, #28]
 8000da0:	b9c3      	cbnz	r3, 8000dd4 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000da2:	f001 ffe9 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
  TimHandle.Instance = TIM6;
 8000da6:	4c0f      	ldr	r4, [pc, #60]	; (8000de4 <HAL_InitTick+0x8c>)
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_InitTick+0x90>)
 8000daa:	6023      	str	r3, [r4, #0]
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8000dac:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000db0:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <HAL_InitTick+0x94>)
 8000db4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000db8:	3801      	subs	r0, #1
  TimHandle.Init.ClockDivision = 0;
 8000dba:	2300      	movs	r3, #0
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8000dbc:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000dbe:	4620      	mov	r0, r4
  TimHandle.Init.ClockDivision = 0;
 8000dc0:	6123      	str	r3, [r4, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8000dc4:	f002 f96a 	bl	800309c <HAL_TIM_Base_Init>
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1ca      	bne.n	8000d62 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&TimHandle);
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f002 f811 	bl	8002df4 <HAL_TIM_Base_Start_IT>
 8000dd2:	e7c7      	b.n	8000d64 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dd4:	f001 ffd0 	bl	8002d78 <HAL_RCC_GetPCLK1Freq>
 8000dd8:	0040      	lsls	r0, r0, #1
 8000dda:	e7e4      	b.n	8000da6 <HAL_InitTick+0x4e>
 8000ddc:	24000020 	.word	0x24000020
 8000de0:	58024400 	.word	0x58024400
 8000de4:	240000c0 	.word	0x240000c0
 8000de8:	40001000 	.word	0x40001000
 8000dec:	000f4240 	.word	0x000f4240

08000df0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8000df0:	f000 b9b8 	b.w	8001164 <HAL_IncTick>

08000df4 <TIM6_DAC_IRQHandler>:
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
  HAL_TIM_IRQHandler(&TimHandle);
 8000df4:	4801      	ldr	r0, [pc, #4]	; (8000dfc <TIM6_DAC_IRQHandler+0x8>)
 8000df6:	f002 b83b 	b.w	8002e70 <HAL_TIM_IRQHandler>
 8000dfa:	bf00      	nop
 8000dfc:	240000c0 	.word	0x240000c0

08000e00 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000e00:	4770      	bx	lr

08000e02 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler>

08000e04 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <MemManage_Handler>

08000e06 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <BusFault_Handler>

08000e08 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler>

08000e0a <DebugMon_Handler>:
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  osSystickHandler();
 8000e0c:	f003 bd6c 	b.w	80048e8 <osSystickHandler>

08000e10 <ETH_IRQHandler>:
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
  HAL_ETH_IRQHandler(&EthHandle);
 8000e10:	4801      	ldr	r0, [pc, #4]	; (8000e18 <ETH_IRQHandler+0x8>)
 8000e12:	f000 bf15 	b.w	8001c40 <HAL_ETH_IRQHandler>
 8000e16:	bf00      	nop
 8000e18:	240067f0 	.word	0x240067f0

08000e1c <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000e1c:	b530      	push	{r4, r5, lr}
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000e1e:	b170      	cbz	r0, 8000e3e <LAN8742_RegisterBusIO+0x22>
 8000e20:	68cc      	ldr	r4, [r1, #12]
 8000e22:	b164      	cbz	r4, 8000e3e <LAN8742_RegisterBusIO+0x22>
 8000e24:	688a      	ldr	r2, [r1, #8]
 8000e26:	b152      	cbz	r2, 8000e3e <LAN8742_RegisterBusIO+0x22>
 8000e28:	690b      	ldr	r3, [r1, #16]
 8000e2a:	b143      	cbz	r3, 8000e3e <LAN8742_RegisterBusIO+0x22>
  {
    return LAN8742_STATUS_ERROR;
  }
  
  pObj->IO.Init = ioctx->Init;
 8000e2c:	680d      	ldr	r5, [r1, #0]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e2e:	6849      	ldr	r1, [r1, #4]
  pObj->IO.Init = ioctx->Init;
 8000e30:	6085      	str	r5, [r0, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000e32:	60c1      	str	r1, [r0, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
  pObj->IO.WriteReg = ioctx->WriteReg;
  pObj->IO.GetTick = ioctx->GetTick;
 8000e34:	6183      	str	r3, [r0, #24]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000e36:	e9c0 2404 	strd	r2, r4, [r0, #16]
  
  return LAN8742_STATUS_OK;
 8000e3a:	2000      	movs	r0, #0
}
 8000e3c:	bd30      	pop	{r4, r5, pc}
    return LAN8742_STATUS_ERROR;
 8000e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e42:	e7fb      	b.n	8000e3c <LAN8742_RegisterBusIO+0x20>

08000e44 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000e44:	b573      	push	{r0, r1, r4, r5, r6, lr}
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000e46:	2300      	movs	r3, #0
   int32_t status = LAN8742_STATUS_OK;
   
   if(pObj->Is_Initialized == 0)
 8000e48:	6846      	ldr	r6, [r0, #4]
 {
 8000e4a:	4604      	mov	r4, r0
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8000e4c:	9301      	str	r3, [sp, #4]
   if(pObj->Is_Initialized == 0)
 8000e4e:	b166      	cbz	r6, 8000e6a <LAN8742_Init+0x26>
     }
   }
      
   if(status == LAN8742_STATUS_OK)
   {
     tickstart =  pObj->IO.GetTick();
 8000e50:	69a3      	ldr	r3, [r4, #24]
 8000e52:	4798      	blx	r3
 8000e54:	4605      	mov	r5, r0
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8000e56:	69a3      	ldr	r3, [r4, #24]
 8000e58:	4798      	blx	r3
 8000e5a:	1b43      	subs	r3, r0, r5
 8000e5c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000e60:	d9f9      	bls.n	8000e56 <LAN8742_Init+0x12>
     {
     }
     pObj->Is_Initialized = 1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	2500      	movs	r5, #0
 8000e66:	6063      	str	r3, [r4, #4]
 8000e68:	e027      	b.n	8000eba <LAN8742_Init+0x76>
     if(pObj->IO.Init != 0)
 8000e6a:	6883      	ldr	r3, [r0, #8]
 8000e6c:	b103      	cbz	r3, 8000e70 <LAN8742_Init+0x2c>
       pObj->IO.Init();
 8000e6e:	4798      	blx	r3
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e70:	2320      	movs	r3, #32
   int32_t status = LAN8742_STATUS_OK;
 8000e72:	2500      	movs	r5, #0
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000e74:	6023      	str	r3, [r4, #0]
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000e76:	6963      	ldr	r3, [r4, #20]
 8000e78:	aa01      	add	r2, sp, #4
 8000e7a:	2112      	movs	r1, #18
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	4798      	blx	r3
 8000e80:	2800      	cmp	r0, #0
 8000e82:	db1d      	blt.n	8000ec0 <LAN8742_Init+0x7c>
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000e84:	9b01      	ldr	r3, [sp, #4]
 8000e86:	f003 031f 	and.w	r3, r3, #31
 8000e8a:	42b3      	cmp	r3, r6
 8000e8c:	d11a      	bne.n	8000ec4 <LAN8742_Init+0x80>
         status = LAN8742_STATUS_OK;
 8000e8e:	2500      	movs	r5, #0
         pObj->DevAddr = addr;
 8000e90:	6026      	str	r6, [r4, #0]
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000e92:	6820      	ldr	r0, [r4, #0]
 8000e94:	281f      	cmp	r0, #31
 8000e96:	d82d      	bhi.n	8000ef4 <LAN8742_Init+0xb0>
     if(status == LAN8742_STATUS_OK)
 8000e98:	b97d      	cbnz	r5, 8000eba <LAN8742_Init+0x76>
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8000e9a:	6923      	ldr	r3, [r4, #16]
 8000e9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ea0:	4629      	mov	r1, r5
 8000ea2:	4798      	blx	r3
 8000ea4:	2800      	cmp	r0, #0
 8000ea6:	db28      	blt.n	8000efa <LAN8742_Init+0xb6>
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8000ea8:	6963      	ldr	r3, [r4, #20]
 8000eaa:	aa01      	add	r2, sp, #4
 8000eac:	4629      	mov	r1, r5
 8000eae:	6820      	ldr	r0, [r4, #0]
 8000eb0:	4798      	blx	r3
 8000eb2:	2800      	cmp	r0, #0
 8000eb4:	da0a      	bge.n	8000ecc <LAN8742_Init+0x88>
           status = LAN8742_STATUS_READ_ERROR;
 8000eb6:	f06f 0504 	mvn.w	r5, #4
   }
   
   return status;
 }
 8000eba:	4628      	mov	r0, r5
 8000ebc:	b002      	add	sp, #8
 8000ebe:	bd70      	pop	{r4, r5, r6, pc}
         status = LAN8742_STATUS_READ_ERROR;
 8000ec0:	f06f 0504 	mvn.w	r5, #4
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ec4:	3601      	adds	r6, #1
 8000ec6:	2e20      	cmp	r6, #32
 8000ec8:	d1d5      	bne.n	8000e76 <LAN8742_Init+0x32>
 8000eca:	e7e2      	b.n	8000e92 <LAN8742_Init+0x4e>
           tickstart = pObj->IO.GetTick();
 8000ecc:	69a3      	ldr	r3, [r4, #24]
 8000ece:	4798      	blx	r3
 8000ed0:	4605      	mov	r5, r0
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8000ed2:	9b01      	ldr	r3, [sp, #4]
 8000ed4:	69a2      	ldr	r2, [r4, #24]
 8000ed6:	041b      	lsls	r3, r3, #16
 8000ed8:	d5ba      	bpl.n	8000e50 <LAN8742_Init+0xc>
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8000eda:	4790      	blx	r2
 8000edc:	1b40      	subs	r0, r0, r5
 8000ede:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000ee2:	d80d      	bhi.n	8000f00 <LAN8742_Init+0xbc>
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8000ee4:	6963      	ldr	r3, [r4, #20]
 8000ee6:	aa01      	add	r2, sp, #4
 8000ee8:	2100      	movs	r1, #0
 8000eea:	6820      	ldr	r0, [r4, #0]
 8000eec:	4798      	blx	r3
 8000eee:	2800      	cmp	r0, #0
 8000ef0:	daef      	bge.n	8000ed2 <LAN8742_Init+0x8e>
 8000ef2:	e7e0      	b.n	8000eb6 <LAN8742_Init+0x72>
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000ef4:	f06f 0502 	mvn.w	r5, #2
 8000ef8:	e7df      	b.n	8000eba <LAN8742_Init+0x76>
         status = LAN8742_STATUS_WRITE_ERROR;
 8000efa:	f06f 0503 	mvn.w	r5, #3
 8000efe:	e7dc      	b.n	8000eba <LAN8742_Init+0x76>
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8000f00:	f06f 0501 	mvn.w	r5, #1
   return status;
 8000f04:	e7d9      	b.n	8000eba <LAN8742_Init+0x76>

08000f06 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000f06:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t readval = 0;
 8000f08:	2500      	movs	r5, #0
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f0a:	6943      	ldr	r3, [r0, #20]
{
 8000f0c:	4604      	mov	r4, r0
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f0e:	aa01      	add	r2, sp, #4
 8000f10:	2101      	movs	r1, #1
 8000f12:	6800      	ldr	r0, [r0, #0]
  uint32_t readval = 0;
 8000f14:	9501      	str	r5, [sp, #4]
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f16:	4798      	blx	r3
 8000f18:	42a8      	cmp	r0, r5
 8000f1a:	da03      	bge.n	8000f24 <LAN8742_GetLinkState+0x1e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000f1c:	f06f 0004 	mvn.w	r0, #4
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
    }				
  }
}
 8000f20:	b003      	add	sp, #12
 8000f22:	bd30      	pop	{r4, r5, pc}
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000f24:	6963      	ldr	r3, [r4, #20]
 8000f26:	aa01      	add	r2, sp, #4
 8000f28:	2101      	movs	r1, #1
 8000f2a:	6820      	ldr	r0, [r4, #0]
 8000f2c:	4798      	blx	r3
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	dbf4      	blt.n	8000f1c <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000f32:	9b01      	ldr	r3, [sp, #4]
 8000f34:	075b      	lsls	r3, r3, #29
 8000f36:	d52c      	bpl.n	8000f92 <LAN8742_GetLinkState+0x8c>
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000f38:	6963      	ldr	r3, [r4, #20]
 8000f3a:	aa01      	add	r2, sp, #4
 8000f3c:	4629      	mov	r1, r5
 8000f3e:	6820      	ldr	r0, [r4, #0]
 8000f40:	4798      	blx	r3
 8000f42:	2800      	cmp	r0, #0
 8000f44:	dbea      	blt.n	8000f1c <LAN8742_GetLinkState+0x16>
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000f46:	9b01      	ldr	r3, [sp, #4]
 8000f48:	04dd      	lsls	r5, r3, #19
 8000f4a:	d40e      	bmi.n	8000f6a <LAN8742_GetLinkState+0x64>
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8000f4c:	f403 5204 	and.w	r2, r3, #8448	; 0x2100
 8000f50:	f5b2 5f04 	cmp.w	r2, #8448	; 0x2100
 8000f54:	d101      	bne.n	8000f5a <LAN8742_GetLinkState+0x54>
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000f56:	2002      	movs	r0, #2
 8000f58:	e7e2      	b.n	8000f20 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000f5a:	0498      	lsls	r0, r3, #18
 8000f5c:	d501      	bpl.n	8000f62 <LAN8742_GetLinkState+0x5c>
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000f5e:	2003      	movs	r0, #3
 8000f60:	e7de      	b.n	8000f20 <LAN8742_GetLinkState+0x1a>
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000f62:	05d9      	lsls	r1, r3, #23
 8000f64:	d513      	bpl.n	8000f8e <LAN8742_GetLinkState+0x88>
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f66:	2004      	movs	r0, #4
 8000f68:	e7da      	b.n	8000f20 <LAN8742_GetLinkState+0x1a>
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000f6a:	6963      	ldr	r3, [r4, #20]
 8000f6c:	aa01      	add	r2, sp, #4
 8000f6e:	211f      	movs	r1, #31
 8000f70:	6820      	ldr	r0, [r4, #0]
 8000f72:	4798      	blx	r3
 8000f74:	2800      	cmp	r0, #0
 8000f76:	dbd1      	blt.n	8000f1c <LAN8742_GetLinkState+0x16>
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000f78:	9b01      	ldr	r3, [sp, #4]
 8000f7a:	04da      	lsls	r2, r3, #19
 8000f7c:	d50b      	bpl.n	8000f96 <LAN8742_GetLinkState+0x90>
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000f7e:	f003 031c 	and.w	r3, r3, #28
 8000f82:	2b18      	cmp	r3, #24
 8000f84:	d0e7      	beq.n	8000f56 <LAN8742_GetLinkState+0x50>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000f86:	2b08      	cmp	r3, #8
 8000f88:	d0e9      	beq.n	8000f5e <LAN8742_GetLinkState+0x58>
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f8a:	2b14      	cmp	r3, #20
 8000f8c:	d0eb      	beq.n	8000f66 <LAN8742_GetLinkState+0x60>
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f8e:	2005      	movs	r0, #5
 8000f90:	e7c6      	b.n	8000f20 <LAN8742_GetLinkState+0x1a>
    return LAN8742_STATUS_LINK_DOWN;    
 8000f92:	2001      	movs	r0, #1
 8000f94:	e7c4      	b.n	8000f20 <LAN8742_GetLinkState+0x1a>
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000f96:	2006      	movs	r0, #6
 8000f98:	e7c2      	b.n	8000f20 <LAN8742_GetLinkState+0x1a>
	...

08000f9c <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000f9c:	2802      	cmp	r0, #2
{
 8000f9e:	b530      	push	{r4, r5, lr}
 8000fa0:	b08b      	sub	sp, #44	; 0x2c
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000fa2:	d83e      	bhi.n	8001022 <BSP_LED_Init+0x86>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <BSP_LED_Init+0x8c>)
    {
      LED1_GPIO_CLK_ENABLE();
 8000fa6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
    if(Led == LED1)
 8000faa:	bb10      	cbnz	r0, 8000ff2 <BSP_LED_Init+0x56>
      LED1_GPIO_CLK_ENABLE();
 8000fac:	f042 0202 	orr.w	r2, r2, #2
 8000fb0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	9302      	str	r3, [sp, #8]
 8000fbe:	9b02      	ldr	r3, [sp, #8]
    else
    {
      LED3_GPIO_CLK_ENABLE();
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <BSP_LED_Init+0x90>)
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000fc2:	2400      	movs	r4, #0
 8000fc4:	2201      	movs	r2, #1
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000fc6:	a905      	add	r1, sp, #20
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000fc8:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000fcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000fd0:	e9cd 2406 	strd	r2, r4, [sp, #24]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000fd4:	6880      	ldr	r0, [r0, #8]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2203      	movs	r2, #3
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000fd8:	9505      	str	r5, [sp, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fda:	9208      	str	r2, [sp, #32]
    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000fdc:	9001      	str	r0, [sp, #4]
 8000fde:	f001 f93b 	bl	8002258 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000fe2:	9801      	ldr	r0, [sp, #4]
 8000fe4:	4622      	mov	r2, r4
 8000fe6:	4629      	mov	r1, r5
 8000fe8:	f001 fa1c 	bl	8002424 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8000fec:	4620      	mov	r0, r4
  }

  return ret;
}
 8000fee:	b00b      	add	sp, #44	; 0x2c
 8000ff0:	bd30      	pop	{r4, r5, pc}
    else if(Led == LED2)
 8000ff2:	2801      	cmp	r0, #1
 8000ff4:	d10a      	bne.n	800100c <BSP_LED_Init+0x70>
      LED2_GPIO_CLK_ENABLE();
 8000ff6:	f042 0210 	orr.w	r2, r2, #16
 8000ffa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	f003 0310 	and.w	r3, r3, #16
 8001006:	9303      	str	r3, [sp, #12]
 8001008:	9b03      	ldr	r3, [sp, #12]
 800100a:	e7d9      	b.n	8000fc0 <BSP_LED_Init+0x24>
      LED3_GPIO_CLK_ENABLE();
 800100c:	f042 0202 	orr.w	r2, r2, #2
 8001010:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	9304      	str	r3, [sp, #16]
 800101e:	9b04      	ldr	r3, [sp, #16]
 8001020:	e7ce      	b.n	8000fc0 <BSP_LED_Init+0x24>
    ret = BSP_ERROR_WRONG_PARAM;
 8001022:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8001026:	e7e2      	b.n	8000fee <BSP_LED_Init+0x52>
 8001028:	58024400 	.word	0x58024400
 800102c:	0800e1a0 	.word	0x0800e1a0

08001030 <BSP_LED_On>:
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001030:	2802      	cmp	r0, #2
{
 8001032:	b510      	push	{r4, lr}
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001034:	d80a      	bhi.n	800104c <BSP_LED_On+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <BSP_LED_On+0x24>)
 8001038:	2201      	movs	r2, #1
 800103a:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 800103e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8001042:	68a0      	ldr	r0, [r4, #8]
 8001044:	f001 f9ee 	bl	8002424 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8001048:	2000      	movs	r0, #0
  }

  return ret;
}
 800104a:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 800104c:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8001050:	e7fb      	b.n	800104a <BSP_LED_On+0x1a>
 8001052:	bf00      	nop
 8001054:	0800e1a0 	.word	0x0800e1a0

08001058 <BSP_LED_Off>:
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
  int32_t ret = BSP_ERROR_NONE;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001058:	2802      	cmp	r0, #2
{
 800105a:	b510      	push	{r4, lr}
  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800105c:	d80a      	bhi.n	8001074 <BSP_LED_Off+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800105e:	4b07      	ldr	r3, [pc, #28]	; (800107c <BSP_LED_Off+0x24>)
 8001060:	2200      	movs	r2, #0
 8001062:	eb03 0480 	add.w	r4, r3, r0, lsl #2
 8001066:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800106a:	68a0      	ldr	r0, [r4, #8]
 800106c:	f001 f9da 	bl	8002424 <HAL_GPIO_WritePin>
  int32_t ret = BSP_ERROR_NONE;
 8001070:	2000      	movs	r0, #0
  }

  return ret;
}
 8001072:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8001074:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8001078:	e7fb      	b.n	8001072 <BSP_LED_Off+0x1a>
 800107a:	bf00      	nop
 800107c:	0800e1a0 	.word	0x0800e1a0

08001080 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001080:	491a      	ldr	r1, [pc, #104]	; (80010ec <SystemInit+0x6c>)
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001082:	481b      	ldr	r0, [pc, #108]	; (80010f0 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001084:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
{
 800108c:	b510      	push	{r4, lr}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800108e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <SystemInit+0x74>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	f042 0201 	orr.w	r2, r2, #1
 800109a:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 80010a0:	681c      	ldr	r4, [r3, #0]
 80010a2:	4020      	ands	r0, r4
 80010a4:	6018      	str	r0, [r3, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010a8:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010aa:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80010ae:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80010b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 80010b6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80010b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ba:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010bc:	6818      	ldr	r0, [r3, #0]
 80010be:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 80010c2:	6018      	str	r0, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <SystemInit+0x78>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	0c1b      	lsrs	r3, r3, #16
 80010cc:	041b      	lsls	r3, r3, #16
 80010ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010d2:	d202      	bcs.n	80010da <SystemInit+0x5a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <SystemInit+0x7c>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <SystemInit+0x80>)
 80010dc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010e0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80010e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80010e6:	608b      	str	r3, [r1, #8]
#endif  


}
 80010e8:	bd10      	pop	{r4, pc}
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80010f4:	58024400 	.word	0x58024400
 80010f8:	5c001000 	.word	0x5c001000
 80010fc:	51008108 	.word	0x51008108
 8001100:	52004000 	.word	0x52004000

08001104 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001104:	4770      	bx	lr
	...

08001108 <HAL_Init>:
{
 8001108:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110a:	2003      	movs	r0, #3
 800110c:	f000 f84c 	bl	80011a8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001110:	f001 fc4a 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8001114:	490f      	ldr	r1, [pc, #60]	; (8001154 <HAL_Init+0x4c>)
 8001116:	4a10      	ldr	r2, [pc, #64]	; (8001158 <HAL_Init+0x50>)
 8001118:	698b      	ldr	r3, [r1, #24]
 800111a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800111e:	5cd3      	ldrb	r3, [r2, r3]
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001126:	698b      	ldr	r3, [r1, #24]
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	5cd3      	ldrb	r3, [r2, r3]
 800112e:	4a0b      	ldr	r2, [pc, #44]	; (800115c <HAL_Init+0x54>)
 8001130:	f003 031f 	and.w	r3, r3, #31
 8001134:	fa20 f303 	lsr.w	r3, r0, r3
 8001138:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <HAL_Init+0x58>)
 800113c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113e:	200f      	movs	r0, #15
 8001140:	f7ff fe0a 	bl	8000d58 <HAL_InitTick>
 8001144:	4604      	mov	r4, r0
 8001146:	b918      	cbnz	r0, 8001150 <HAL_Init+0x48>
  HAL_MspInit();
 8001148:	f7ff ffdc 	bl	8001104 <HAL_MspInit>
}
 800114c:	4620      	mov	r0, r4
 800114e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001150:	2401      	movs	r4, #1
 8001152:	e7fb      	b.n	800114c <HAL_Init+0x44>
 8001154:	58024400 	.word	0x58024400
 8001158:	0800e1b4 	.word	0x0800e1b4
 800115c:	24000018 	.word	0x24000018
 8001160:	24000014 	.word	0x24000014

08001164 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001164:	4a03      	ldr	r2, [pc, #12]	; (8001174 <HAL_IncTick+0x10>)
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <HAL_IncTick+0x14>)
 8001168:	6811      	ldr	r1, [r2, #0]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	440b      	add	r3, r1
 800116e:	6013      	str	r3, [r2, #0]
}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	240069cc 	.word	0x240069cc
 8001178:	2400001c 	.word	0x2400001c

0800117c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800117c:	4b01      	ldr	r3, [pc, #4]	; (8001184 <HAL_GetTick+0x8>)
 800117e:	6818      	ldr	r0, [r3, #0]
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	240069cc 	.word	0x240069cc

08001188 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8001188:	4b01      	ldr	r3, [pc, #4]	; (8001190 <HAL_GetREVID+0x8>)
 800118a:	6818      	ldr	r0, [r3, #0]
}
 800118c:	0c00      	lsrs	r0, r0, #16
 800118e:	4770      	bx	lr
 8001190:	5c001000 	.word	0x5c001000

08001194 <HAL_SYSCFG_ETHInterfaceSelect>:
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001194:	4a03      	ldr	r2, [pc, #12]	; (80011a4 <HAL_SYSCFG_ETHInterfaceSelect+0x10>)
 8001196:	6853      	ldr	r3, [r2, #4]
 8001198:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800119c:	4318      	orrs	r0, r3
 800119e:	6050      	str	r0, [r2, #4]
}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	58000400 	.word	0x58000400

080011a8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4907      	ldr	r1, [pc, #28]	; (80011c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011aa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80011b6:	0412      	lsls	r2, r2, #16
 80011b8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80011c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ce:	b530      	push	{r4, r5, lr}
 80011d0:	68dc      	ldr	r4, [r3, #12]
 80011d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d6:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011da:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	2d04      	cmp	r5, #4
 80011de:	bf28      	it	cs
 80011e0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	2b06      	cmp	r3, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e8:	bf8c      	ite	hi
 80011ea:	3c03      	subhi	r4, #3
 80011ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ee:	fa03 f505 	lsl.w	r5, r3, r5
  if ((int32_t)(IRQn) >= 0)
 80011f2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f4:	fa03 f304 	lsl.w	r3, r3, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f8:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	fa01 f104 	lsl.w	r1, r1, r4
 8001204:	ea41 0302 	orr.w	r3, r1, r2
 8001208:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800120c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800120e:	db06      	blt.n	800121e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001210:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001214:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001218:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800121c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121e:	f000 000f 	and.w	r0, r0, #15
 8001222:	4a02      	ldr	r2, [pc, #8]	; (800122c <HAL_NVIC_SetPriority+0x60>)
 8001224:	5413      	strb	r3, [r2, r0]
 8001226:	e7f9      	b.n	800121c <HAL_NVIC_SetPriority+0x50>
 8001228:	e000ed00 	.word	0xe000ed00
 800122c:	e000ed14 	.word	0xe000ed14

08001230 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001230:	2800      	cmp	r0, #0
 8001232:	db08      	blt.n	8001246 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001234:	2301      	movs	r3, #1
 8001236:	0942      	lsrs	r2, r0, #5
 8001238:	f000 001f 	and.w	r0, r0, #31
 800123c:	fa03 f000 	lsl.w	r0, r3, r0
 8001240:	4b01      	ldr	r3, [pc, #4]	; (8001248 <HAL_NVIC_EnableIRQ+0x18>)
 8001242:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100

0800124c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800124c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_MPU_Disable+0x18>)
 8001252:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001258:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800125a:	2200      	movs	r2, #0
 800125c:	4b02      	ldr	r3, [pc, #8]	; (8001268 <HAL_MPU_Disable+0x1c>)
 800125e:	605a      	str	r2, [r3, #4]
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	e000ed00 	.word	0xe000ed00
 8001268:	e000ed90 	.word	0xe000ed90

0800126c <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800126e:	f040 0001 	orr.w	r0, r0, #1
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_MPU_Enable+0x20>)
 8001274:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001276:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8001278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800127c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800127e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001282:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00
 800128c:	e000ed90 	.word	0xe000ed90

08001290 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001290:	7843      	ldrb	r3, [r0, #1]
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <HAL_MPU_ConfigRegion+0x4c>)
{
 8001294:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 8001296:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != 0UL)
 8001298:	7801      	ldrb	r1, [r0, #0]
 800129a:	b1d9      	cbz	r1, 80012d4 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800129c:	6843      	ldr	r3, [r0, #4]
 800129e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012a0:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012a2:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80012a4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012a6:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012aa:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80012ac:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012ae:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80012b2:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012b4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80012b8:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012ba:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80012be:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012c0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80012c4:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80012c6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80012ca:	7a01      	ldrb	r1, [r0, #8]
 80012cc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80012d0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80012d2:	bd10      	pop	{r4, pc}
    MPU->RBAR = 0x00;
 80012d4:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80012d6:	6111      	str	r1, [r2, #16]
}
 80012d8:	e7fb      	b.n	80012d2 <HAL_MPU_ConfigRegion+0x42>
 80012da:	bf00      	nop
 80012dc:	e000ed90 	.word	0xe000ed90

080012e0 <ETH_SetMACConfig>:
static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80012e0:	688b      	ldr	r3, [r1, #8]
 80012e2:	680a      	ldr	r2, [r1, #0]
{
 80012e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012e8:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
                    ((uint32_t)macconf->Support2KPacket  << 22) |
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80012ea:	7c0b      	ldrb	r3, [r1, #16]
{
 80012ec:	b085      	sub	sp, #20
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80012ee:	f891 a004 	ldrb.w	sl, [r1, #4]
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80012f2:	2b00      	cmp	r3, #0
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80012f4:	f891 900c 	ldrb.w	r9, [r1, #12]
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80012f8:	f891 800d 	ldrb.w	r8, [r1, #13]
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80012fc:	bf0c      	ite	eq
 80012fe:	f44f 2300 	moveq.w	r3, #524288	; 0x80000
 8001302:	2300      	movne	r3, #0
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001304:	f891 e00e 	ldrb.w	lr, [r1, #14]
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001308:	9301      	str	r3, [sp, #4]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800130a:	7c4b      	ldrb	r3, [r1, #17]
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800130c:	f891 c00f 	ldrb.w	ip, [r1, #15]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001310:	2b00      	cmp	r3, #0
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001312:	7c8e      	ldrb	r6, [r1, #18]
                                macconf->Speed |
                                  macconf->DuplexMode |
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001314:	7f0d      	ldrb	r5, [r1, #28]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001316:	bf0c      	ite	eq
 8001318:	f44f 3300 	moveq.w	r3, #131072	; 0x20000
 800131c:	2300      	movne	r3, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800131e:	f891 b01d 	ldrb.w	fp, [r1, #29]
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001322:	9302      	str	r3, [sp, #8]
 8001324:	694b      	ldr	r3, [r1, #20]
 8001326:	431a      	orrs	r2, r3
 8001328:	698b      	ldr	r3, [r1, #24]
 800132a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800132c:	7f8a      	ldrb	r2, [r1, #30]
 800132e:	2a00      	cmp	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001330:	7fca      	ldrb	r2, [r1, #31]
 8001332:	9203      	str	r2, [sp, #12]
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001334:	bf08      	it	eq
 8001336:	f44f 6780 	moveq.w	r7, #1024	; 0x400
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800133a:	f891 2020 	ldrb.w	r2, [r1, #32]
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800133e:	bf18      	it	ne
 8001340:	2700      	movne	r7, #0
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001342:	2a00      	cmp	r2, #0
                                              macconf->BackOffLimit |
                                                ((uint32_t)macconf->DeferralCheck << 4)|
                                                  macconf->PreambleLength);

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001344:	6802      	ldr	r2, [r0, #0]
 8001346:	6810      	ldr	r0, [r2, #0]
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001348:	bf0c      	ite	eq
 800134a:	f44f 7480 	moveq.w	r4, #256	; 0x100
 800134e:	2400      	movne	r4, #0
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001350:	9000      	str	r0, [sp, #0]
 8001352:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8001354:	4303      	orrs	r3, r0
 8001356:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 8001358:	4303      	orrs	r3, r0
 800135a:	9800      	ldr	r0, [sp, #0]
 800135c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8001360:	f420 007b 	bic.w	r0, r0, #16449536	; 0xfb0000
 8001364:	f420 40fe 	bic.w	r0, r0, #32512	; 0x7f00
 8001368:	f020 007c 	bic.w	r0, r0, #124	; 0x7c
 800136c:	4303      	orrs	r3, r0
 800136e:	9803      	ldr	r0, [sp, #12]
 8001370:	ea43 63ca 	orr.w	r3, r3, sl, lsl #27
 8001374:	ea43 53c9 	orr.w	r3, r3, r9, lsl #23
 8001378:	ea43 5388 	orr.w	r3, r3, r8, lsl #22
 800137c:	ea43 534e 	orr.w	r3, r3, lr, lsl #21
 8001380:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8001384:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8001388:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 800138c:	ea43 23cb 	orr.w	r3, r3, fp, lsl #11
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001390:	f891 b028 	ldrb.w	fp, [r1, #40]	; 0x28
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001394:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8001398:	9801      	ldr	r0, [sp, #4]
 800139a:	ea43 130b 	orr.w	r3, r3, fp, lsl #4
 800139e:	4303      	orrs	r3, r0
 80013a0:	9802      	ldr	r0, [sp, #8]
 80013a2:	4303      	orrs	r3, r0
 80013a4:	433b      	orrs	r3, r7
 80013a6:	431c      	orrs	r4, r3
 80013a8:	6014      	str	r4, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80013aa:	6bce      	ldr	r6, [r1, #60]	; 0x3c
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80013ac:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80013b0:	f891 7038 	ldrb.w	r7, [r1, #56]	; 0x38
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80013b4:	2b00      	cmp	r3, #0
                       macconf->GiantPacketSizeLimit);

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80013b6:	6853      	ldr	r3, [r2, #4]
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80013b8:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80013bc:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80013c0:	f891 4031 	ldrb.w	r4, [r1, #49]	; 0x31
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80013c4:	bf0c      	ite	eq
 80013c6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 80013ca:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80013cc:	f423 23ef 	bic.w	r3, r3, #489472	; 0x77800
 80013d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80013d4:	f023 0307 	bic.w	r3, r3, #7
 80013d8:	ea43 6346 	orr.w	r3, r3, r6, lsl #25
 80013dc:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80013de:	4333      	orrs	r3, r6

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
               macconf->PauseLowThreshold |
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
                   (macconf->PauseTime << 16));
 80013e0:	6c8e      	ldr	r6, [r1, #72]	; 0x48
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80013e2:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
 80013e6:	ea43 4385 	orr.w	r3, r3, r5, lsl #18
               macconf->PauseLowThreshold |
 80013ea:	6d0d      	ldr	r5, [r1, #80]	; 0x50
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80013ec:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
 80013f0:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80013f2:	6c48      	ldr	r0, [r1, #68]	; 0x44
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80013f4:	6053      	str	r3, [r2, #4]
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80013f6:	68d3      	ldr	r3, [r2, #12]
 80013f8:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	4303      	orrs	r3, r0
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001402:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001406:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800140a:	60d3      	str	r3, [r2, #12]
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800140c:	f891 304c 	ldrb.w	r3, [r1, #76]	; 0x4c
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001410:	f891 4054 	ldrb.w	r4, [r1, #84]	; 0x54
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001414:	2b00      	cmp	r3, #0

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001416:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001418:	f023 03f2 	bic.w	r3, r3, #242	; 0xf2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800141c:	bf0c      	ite	eq
 800141e:	2080      	moveq	r0, #128	; 0x80
 8001420:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001422:	041b      	lsls	r3, r3, #16
 8001424:	0c1b      	lsrs	r3, r3, #16
 8001426:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800142a:	432b      	orrs	r3, r5
  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800142c:	6dcd      	ldr	r5, [r1, #92]	; 0x5c
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800142e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 8001432:	4303      	orrs	r3, r0
 8001434:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001436:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800143a:	f891 3056 	ldrb.w	r3, [r1, #86]	; 0x56
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800143e:	f020 0003 	bic.w	r0, r0, #3
 8001442:	4303      	orrs	r3, r0
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001444:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001448:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800144c:	6d88      	ldr	r0, [r1, #88]	; 0x58
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800144e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001452:	f8d2 3d00 	ldr.w	r3, [r2, #3328]	; 0xd00
 8001456:	f023 0372 	bic.w	r3, r3, #114	; 0x72
 800145a:	4303      	orrs	r3, r0
 800145c:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001460:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001464:	f891 4061 	ldrb.w	r4, [r1, #97]	; 0x61
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001468:	2b00      	cmp	r3, #0
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800146a:	f8d2 3d30 	ldr.w	r3, [r2, #3376]	; 0xd30
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800146e:	f891 1062 	ldrb.w	r1, [r1, #98]	; 0x62
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001472:	f023 037b 	bic.w	r3, r3, #123	; 0x7b
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001476:	bf0c      	ite	eq
 8001478:	2040      	moveq	r0, #64	; 0x40
 800147a:	2000      	movne	r0, #0
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800147c:	432b      	orrs	r3, r5
 800147e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8001482:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001486:	4303      	orrs	r3, r0
 8001488:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
}
 800148c:	b005      	add	sp, #20
 800148e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001494 <ETH_SetDMAConfig>:
static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001494:	6802      	ldr	r2, [r0, #0]
 8001496:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
 800149a:	6803      	ldr	r3, [r0, #0]
 800149c:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
{
 80014a0:	b530      	push	{r4, r5, lr}
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80014a2:	f023 0302 	bic.w	r3, r3, #2
 80014a6:	680c      	ldr	r4, [r1, #0]
 80014a8:	4323      	orrs	r3, r4
  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
               dmaconf->BurstMode |
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80014aa:	f241 0404 	movw	r4, #4100	; 0x1004
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80014ae:	6003      	str	r3, [r0, #0]
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80014b0:	7b0b      	ldrb	r3, [r1, #12]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80014b2:	5910      	ldr	r0, [r2, r4]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80014b4:	790d      	ldrb	r5, [r1, #4]
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80014b6:	03db      	lsls	r3, r3, #15
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80014b8:	f420 4050 	bic.w	r0, r0, #53248	; 0xd000
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80014bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 80014c0:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80014c2:	f020 0001 	bic.w	r0, r0, #1
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80014c6:	432b      	orrs	r3, r5
  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80014c8:	4303      	orrs	r3, r0
 80014ca:	5113      	str	r3, [r2, r4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
               dmaconf->MaximumSegmentSize);

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80014cc:	f502 5488 	add.w	r4, r2, #4352	; 0x1100
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80014d0:	7b48      	ldrb	r0, [r1, #13]
 80014d2:	6a0b      	ldr	r3, [r1, #32]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80014d4:	6825      	ldr	r5, [r4, #0]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80014d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80014da:	4810      	ldr	r0, [pc, #64]	; (800151c <ETH_SetDMAConfig+0x88>)
 80014dc:	4028      	ands	r0, r5
 80014de:	4303      	orrs	r3, r0
 80014e0:	6023      	str	r3, [r4, #0]
  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
                 ((uint32_t)dmaconf->TCPSegmentation << 12));

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80014e2:	f241 1404 	movw	r4, #4356	; 0x1104
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80014e6:	7f4b      	ldrb	r3, [r1, #29]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80014e8:	7d08      	ldrb	r0, [r1, #20]
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80014ea:	031b      	lsls	r3, r3, #12
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80014ec:	5915      	ldr	r5, [r2, r4]
  dmaregval = (dmaconf->TxDMABurstLength |
 80014ee:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80014f2:	6908      	ldr	r0, [r1, #16]
 80014f4:	4303      	orrs	r3, r0
  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80014f6:	480a      	ldr	r0, [pc, #40]	; (8001520 <ETH_SetDMAConfig+0x8c>)
 80014f8:	4028      	ands	r0, r5
 80014fa:	4303      	orrs	r3, r0
 80014fc:	5113      	str	r3, [r2, r4]
  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
               dmaconf->RxDMABurstLength);

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80014fe:	f241 1408 	movw	r4, #4360	; 0x1108
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001502:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001504:	5910      	ldr	r0, [r2, r4]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001506:	698b      	ldr	r3, [r1, #24]
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001508:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800150c:	ea43 73c5 	orr.w	r3, r3, r5, lsl #31
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001510:	f421 117c 	bic.w	r1, r1, #4128768	; 0x3f0000
 8001514:	430b      	orrs	r3, r1
 8001516:	5113      	str	r3, [r2, r4]
}
 8001518:	bd30      	pop	{r4, r5, pc}
 800151a:	bf00      	nop
 800151c:	fffec000 	.word	0xfffec000
 8001520:	ffc0efef 	.word	0xffc0efef

08001524 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8001524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8001528:	f8d0 e028 	ldr.w	lr, [r0, #40]	; 0x28
{
 800152c:	b085      	sub	sp, #20
 800152e:	eb00 038e 	add.w	r3, r0, lr, lsl #2
 8001532:	9202      	str	r2, [sp, #8]
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
  uint32_t descnbr = 0, idx;
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001534:	699a      	ldr	r2, [r3, #24]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
  uint32_t           bd_count = 0;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001536:	68d4      	ldr	r4, [r2, #12]
 8001538:	2c00      	cmp	r4, #0
 800153a:	da03      	bge.n	8001544 <ETH_Prepare_Tx_Descriptors+0x20>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);

      return HAL_ETH_ERROR_BUSY;
 800153c:	2002      	movs	r0, #2
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
}
 800153e:	b005      	add	sp, #20
 8001540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1f8      	bne.n	800153c <ETH_Prepare_Tx_Descriptors+0x18>
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800154a:	680d      	ldr	r5, [r1, #0]
  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800154c:	688f      	ldr	r7, [r1, #8]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800154e:	f015 0c04 	ands.w	ip, r5, #4
 8001552:	d028      	beq.n	80015a6 <ETH_Prepare_Tx_Descriptors+0x82>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8001554:	68d4      	ldr	r4, [r2, #12]
 8001556:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8001558:	0c24      	lsrs	r4, r4, #16
 800155a:	0424      	lsls	r4, r4, #16
 800155c:	4323      	orrs	r3, r4
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800155e:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8001560:	60d3      	str	r3, [r2, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8001562:	68d3      	ldr	r3, [r2, #12]
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	60d3      	str	r3, [r2, #12]
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800156a:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800156c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001570:	6623      	str	r3, [r4, #96]	; 0x60
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8001572:	072b      	lsls	r3, r5, #28
 8001574:	d517      	bpl.n	80015a6 <ETH_Prepare_Tx_Descriptors+0x82>
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8001576:	6896      	ldr	r6, [r2, #8]
 8001578:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800157a:	b2b6      	uxth	r6, r6
 800157c:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
 8001580:	6093      	str	r3, [r2, #8]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8001582:	68d3      	ldr	r3, [r2, #12]
 8001584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001588:	60d3      	str	r3, [r2, #12]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 800158a:	68d6      	ldr	r6, [r2, #12]
 800158c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800158e:	f426 2640 	bic.w	r6, r6, #786432	; 0xc0000
 8001592:	4333      	orrs	r3, r6
 8001594:	60d3      	str	r3, [r2, #12]
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8001596:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800159c:	6663      	str	r3, [r4, #100]	; 0x64
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800159e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80015a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015a4:	6523      	str	r3, [r4, #80]	; 0x50
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80015a6:	f015 0910 	ands.w	r9, r5, #16
 80015aa:	d00b      	beq.n	80015c4 <ETH_Prepare_Tx_Descriptors+0xa0>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80015ac:	6894      	ldr	r4, [r2, #8]
 80015ae:	698b      	ldr	r3, [r1, #24]
 80015b0:	f424 547f 	bic.w	r4, r4, #16320	; 0x3fc0
 80015b4:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 80015b8:	4323      	orrs	r3, r4
 80015ba:	6093      	str	r3, [r2, #8]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80015bc:	68d3      	ldr	r3, [r2, #12]
 80015be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80015c2:	60d3      	str	r3, [r2, #12]
  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80015c4:	f015 0414 	ands.w	r4, r5, #20
 80015c8:	d018      	beq.n	80015fc <ETH_Prepare_Tx_Descriptors+0xd8>
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80015ca:	68d3      	ldr	r3, [r2, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80015cc:	f10e 0601 	add.w	r6, lr, #1
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80015d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 80015d4:	2e03      	cmp	r6, #3
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80015d6:	60d3      	str	r3, [r2, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 80015d8:	bf88      	it	hi
 80015da:	f1ae 0603 	subhi.w	r6, lr, #3
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80015de:	68d3      	ldr	r3, [r2, #12]
 80015e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015e4:	60d3      	str	r3, [r2, #12]
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80015e6:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 80015ea:	699b      	ldr	r3, [r3, #24]
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80015ec:	68dc      	ldr	r4, [r3, #12]
 80015ee:	2c00      	cmp	r4, #0
 80015f0:	da7e      	bge.n	80016f0 <ETH_Prepare_Tx_Descriptors+0x1cc>
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80015f2:	68d3      	ldr	r3, [r2, #12]
 80015f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015f8:	60d3      	str	r3, [r2, #12]
 80015fa:	e79f      	b.n	800153c <ETH_Prepare_Tx_Descriptors+0x18>
 80015fc:	4613      	mov	r3, r2
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80015fe:	4676      	mov	r6, lr
  descnbr += 1U;
 8001600:	3401      	adds	r4, #1
 8001602:	9401      	str	r4, [sp, #4]
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8001604:	683c      	ldr	r4, [r7, #0]
 8001606:	601c      	str	r4, [r3, #0]
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001608:	689c      	ldr	r4, [r3, #8]
 800160a:	f424 587f 	bic.w	r8, r4, #16320	; 0x3fc0
 800160e:	687c      	ldr	r4, [r7, #4]
 8001610:	f028 083f 	bic.w	r8, r8, #63	; 0x3f
 8001614:	ea48 0404 	orr.w	r4, r8, r4
 8001618:	f8df 8200 	ldr.w	r8, [pc, #512]	; 800181c <ETH_Prepare_Tx_Descriptors+0x2f8>
 800161c:	609c      	str	r4, [r3, #8]
  if(txbuffer->next != NULL)
 800161e:	68bc      	ldr	r4, [r7, #8]
 8001620:	2c00      	cmp	r4, #0
 8001622:	d067      	beq.n	80016f4 <ETH_Prepare_Tx_Descriptors+0x1d0>
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8001624:	6827      	ldr	r7, [r4, #0]
 8001626:	605f      	str	r7, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8001628:	689f      	ldr	r7, [r3, #8]
 800162a:	ea07 0808 	and.w	r8, r7, r8
 800162e:	6867      	ldr	r7, [r4, #4]
 8001630:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8001634:	609f      	str	r7, [r3, #8]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8001636:	68df      	ldr	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8001638:	f1b9 0f00 	cmp.w	r9, #0
 800163c:	d061      	beq.n	8001702 <ETH_Prepare_Tx_Descriptors+0x1de>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 800163e:	f427 08f0 	bic.w	r8, r7, #7864320	; 0x780000
 8001642:	6a0f      	ldr	r7, [r1, #32]
 8001644:	ea48 47c7 	orr.w	r7, r8, r7, lsl #19
 8001648:	60df      	str	r7, [r3, #12]
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800164a:	68df      	ldr	r7, [r3, #12]
 800164c:	ea4f 4897 	mov.w	r8, r7, lsr #18
 8001650:	69cf      	ldr	r7, [r1, #28]
 8001652:	ea4f 4888 	mov.w	r8, r8, lsl #18
 8001656:	ea48 0707 	orr.w	r7, r8, r7
 800165a:	60df      	str	r7, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800165c:	68df      	ldr	r7, [r3, #12]
 800165e:	f447 2780 	orr.w	r7, r7, #262144	; 0x40000
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8001662:	60df      	str	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8001664:	f1bc 0f00 	cmp.w	ip, #0
 8001668:	d006      	beq.n	8001678 <ETH_Prepare_Tx_Descriptors+0x154>
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800166a:	689f      	ldr	r7, [r3, #8]
 800166c:	f427 4c40 	bic.w	ip, r7, #49152	; 0xc000
 8001670:	6a8f      	ldr	r7, [r1, #40]	; 0x28
 8001672:	ea4c 0707 	orr.w	r7, ip, r7
 8001676:	609f      	str	r7, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8001678:	68df      	ldr	r7, [r3, #12]
 800167a:	f047 5700 	orr.w	r7, r7, #536870912	; 0x20000000
 800167e:	60df      	str	r7, [r3, #12]
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8001680:	68df      	ldr	r7, [r3, #12]
 8001682:	f027 4780 	bic.w	r7, r7, #1073741824	; 0x40000000
 8001686:	60df      	str	r7, [r3, #12]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001688:	68df      	ldr	r7, [r3, #12]
 800168a:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 800168e:	60df      	str	r7, [r3, #12]
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8001690:	07af      	lsls	r7, r5, #30
 8001692:	d506      	bpl.n	80016a2 <ETH_Prepare_Tx_Descriptors+0x17e>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8001694:	68df      	ldr	r7, [r3, #12]
 8001696:	f027 7c60 	bic.w	ip, r7, #58720256	; 0x3800000
 800169a:	68cf      	ldr	r7, [r1, #12]
 800169c:	ea4c 0707 	orr.w	r7, ip, r7
 80016a0:	60df      	str	r7, [r3, #12]
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80016a2:	f005 0501 	and.w	r5, r5, #1
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80016a6:	2700      	movs	r7, #0
 80016a8:	f8df 8170 	ldr.w	r8, [pc, #368]	; 800181c <ETH_Prepare_Tx_Descriptors+0x2f8>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80016ac:	f8df a170 	ldr.w	sl, [pc, #368]	; 8001820 <ETH_Prepare_Tx_Descriptors+0x2fc>
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80016b0:	9503      	str	r5, [sp, #12]
 80016b2:	9d01      	ldr	r5, [sp, #4]
 80016b4:	eb07 0b05 	add.w	fp, r7, r5
  while (txbuffer->next != NULL)
 80016b8:	68a5      	ldr	r5, [r4, #8]
 80016ba:	2d00      	cmp	r5, #0
 80016bc:	d13b      	bne.n	8001736 <ETH_Prepare_Tx_Descriptors+0x212>
  if(ItMode != ((uint32_t)RESET))
 80016be:	9a02      	ldr	r2, [sp, #8]
 80016c0:	2a00      	cmp	r2, #0
 80016c2:	f000 80a7 	beq.w	8001814 <ETH_Prepare_Tx_Descriptors+0x2f0>
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80016cc:	609a      	str	r2, [r3, #8]
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016d4:	60da      	str	r2, [r3, #12]
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80016d6:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 80016da:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80016dc:	62da      	str	r2, [r3, #44]	; 0x2c
  dmatxdesclist->CurTxDesc = descidx;
 80016de:	6286      	str	r6, [r0, #40]	; 0x28
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80016e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80016e4:	3301      	adds	r3, #1
 80016e6:	441f      	add	r7, r3
 80016e8:	6407      	str	r7, [r0, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80016ea:	b662      	cpsie	i
  return HAL_ETH_ERROR_NONE;
 80016ec:	2000      	movs	r0, #0
 80016ee:	e726      	b.n	800153e <ETH_Prepare_Tx_Descriptors+0x1a>
    descnbr += 1U;
 80016f0:	2401      	movs	r4, #1
 80016f2:	e785      	b.n	8001600 <ETH_Prepare_Tx_Descriptors+0xdc>
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80016f4:	605c      	str	r4, [r3, #4]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80016f6:	689c      	ldr	r4, [r3, #8]
 80016f8:	ea04 0408 	and.w	r4, r4, r8
 80016fc:	609c      	str	r4, [r3, #8]
 80016fe:	463c      	mov	r4, r7
 8001700:	e799      	b.n	8001636 <ETH_Prepare_Tx_Descriptors+0x112>
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8001702:	f427 48ff 	bic.w	r8, r7, #32640	; 0x7f80
 8001706:	684f      	ldr	r7, [r1, #4]
 8001708:	f028 087f 	bic.w	r8, r8, #127	; 0x7f
 800170c:	ea48 0707 	orr.w	r7, r8, r7
 8001710:	60df      	str	r7, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001712:	07ef      	lsls	r7, r5, #31
 8001714:	d506      	bpl.n	8001724 <ETH_Prepare_Tx_Descriptors+0x200>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8001716:	68df      	ldr	r7, [r3, #12]
 8001718:	f427 3840 	bic.w	r8, r7, #196608	; 0x30000
 800171c:	694f      	ldr	r7, [r1, #20]
 800171e:	ea48 0707 	orr.w	r7, r8, r7
 8001722:	60df      	str	r7, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8001724:	06af      	lsls	r7, r5, #26
 8001726:	d59d      	bpl.n	8001664 <ETH_Prepare_Tx_Descriptors+0x140>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8001728:	68df      	ldr	r7, [r3, #12]
 800172a:	f027 6840 	bic.w	r8, r7, #201326592	; 0xc000000
 800172e:	690f      	ldr	r7, [r1, #16]
 8001730:	ea48 0707 	orr.w	r7, r8, r7
 8001734:	e795      	b.n	8001662 <ETH_Prepare_Tx_Descriptors+0x13e>
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001736:	f106 0c01 	add.w	ip, r6, #1
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800173a:	68dc      	ldr	r4, [r3, #12]
    INCR_TX_DESC_INDEX(descidx, 1U);
 800173c:	f1bc 0f03 	cmp.w	ip, #3
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8001740:	f024 5480 	bic.w	r4, r4, #268435456	; 0x10000000
    INCR_TX_DESC_INDEX(descidx, 1U);
 8001744:	bf88      	it	hi
 8001746:	f1a6 0c03 	subhi.w	ip, r6, #3
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 800174a:	60dc      	str	r4, [r3, #12]
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800174c:	eb00 068c 	add.w	r6, r0, ip, lsl #2
 8001750:	69b3      	ldr	r3, [r6, #24]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8001752:	68dc      	ldr	r4, [r3, #12]
 8001754:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 8001758:	60dc      	str	r4, [r3, #12]
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800175a:	68dc      	ldr	r4, [r3, #12]
 800175c:	2c00      	cmp	r4, #0
 800175e:	db01      	blt.n	8001764 <ETH_Prepare_Tx_Descriptors+0x240>
 8001760:	6af4      	ldr	r4, [r6, #44]	; 0x2c
 8001762:	b19c      	cbz	r4, 800178c <ETH_Prepare_Tx_Descriptors+0x268>
 8001764:	2300      	movs	r3, #0
 8001766:	e00e      	b.n	8001786 <ETH_Prepare_Tx_Descriptors+0x262>
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8001768:	68d1      	ldr	r1, [r2, #12]
      for(idx = 0; idx < descnbr; idx ++)
 800176a:	3301      	adds	r3, #1
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800176c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001770:	60d1      	str	r1, [r2, #12]
        INCR_TX_DESC_INDEX(descidx, 1U);
 8001772:	f10e 0101 	add.w	r1, lr, #1
 8001776:	2903      	cmp	r1, #3
 8001778:	bf88      	it	hi
 800177a:	f1ae 0103 	subhi.w	r1, lr, #3
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800177e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
      for(idx = 0; idx < descnbr; idx ++)
 8001782:	468e      	mov	lr, r1
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8001784:	6992      	ldr	r2, [r2, #24]
      for(idx = 0; idx < descnbr; idx ++)
 8001786:	459b      	cmp	fp, r3
 8001788:	d1ee      	bne.n	8001768 <ETH_Prepare_Tx_Descriptors+0x244>
 800178a:	e6d7      	b.n	800153c <ETH_Prepare_Tx_Descriptors+0x18>
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 800178c:	682c      	ldr	r4, [r5, #0]
 800178e:	601c      	str	r4, [r3, #0]
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8001790:	689e      	ldr	r6, [r3, #8]
 8001792:	686c      	ldr	r4, [r5, #4]
 8001794:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
 8001798:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 800179c:	4334      	orrs	r4, r6
 800179e:	609c      	str	r4, [r3, #8]
    if (txbuffer->next != NULL)
 80017a0:	68ac      	ldr	r4, [r5, #8]
 80017a2:	b304      	cbz	r4, 80017e6 <ETH_Prepare_Tx_Descriptors+0x2c2>
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80017a4:	6825      	ldr	r5, [r4, #0]
 80017a6:	605d      	str	r5, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80017a8:	689e      	ldr	r6, [r3, #8]
 80017aa:	6865      	ldr	r5, [r4, #4]
 80017ac:	ea06 0608 	and.w	r6, r6, r8
 80017b0:	ea46 4505 	orr.w	r5, r6, r5, lsl #16
 80017b4:	609d      	str	r5, [r3, #8]
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80017b6:	68de      	ldr	r6, [r3, #12]
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80017b8:	f1b9 0f00 	cmp.w	r9, #0
 80017bc:	d01a      	beq.n	80017f4 <ETH_Prepare_Tx_Descriptors+0x2d0>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80017be:	69cd      	ldr	r5, [r1, #28]
 80017c0:	ea06 060a 	and.w	r6, r6, sl
 80017c4:	4335      	orrs	r5, r6
 80017c6:	60dd      	str	r5, [r3, #12]
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80017c8:	68dd      	ldr	r5, [r3, #12]
 80017ca:	f445 2580 	orr.w	r5, r5, #262144	; 0x40000
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80017ce:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80017d0:	68dd      	ldr	r5, [r3, #12]
    bd_count += 1U;
 80017d2:	3701      	adds	r7, #1
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80017d4:	4666      	mov	r6, ip
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80017d6:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80017da:	60dd      	str	r5, [r3, #12]
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80017dc:	68dd      	ldr	r5, [r3, #12]
 80017de:	f025 4580 	bic.w	r5, r5, #1073741824	; 0x40000000
 80017e2:	60dd      	str	r5, [r3, #12]
 80017e4:	e765      	b.n	80016b2 <ETH_Prepare_Tx_Descriptors+0x18e>
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80017e6:	605c      	str	r4, [r3, #4]
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80017e8:	689c      	ldr	r4, [r3, #8]
 80017ea:	ea04 0408 	and.w	r4, r4, r8
 80017ee:	609c      	str	r4, [r3, #8]
 80017f0:	462c      	mov	r4, r5
 80017f2:	e7e0      	b.n	80017b6 <ETH_Prepare_Tx_Descriptors+0x292>
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80017f4:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 80017f8:	684d      	ldr	r5, [r1, #4]
 80017fa:	f026 067f 	bic.w	r6, r6, #127	; 0x7f
 80017fe:	4335      	orrs	r5, r6
 8001800:	60dd      	str	r5, [r3, #12]
      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8001802:	9d03      	ldr	r5, [sp, #12]
 8001804:	2d00      	cmp	r5, #0
 8001806:	d0e3      	beq.n	80017d0 <ETH_Prepare_Tx_Descriptors+0x2ac>
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8001808:	68de      	ldr	r6, [r3, #12]
 800180a:	694d      	ldr	r5, [r1, #20]
 800180c:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
 8001810:	4335      	orrs	r5, r6
 8001812:	e7dc      	b.n	80017ce <ETH_Prepare_Tx_Descriptors+0x2aa>
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8001814:	689a      	ldr	r2, [r3, #8]
 8001816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800181a:	e757      	b.n	80016cc <ETH_Prepare_Tx_Descriptors+0x1a8>
 800181c:	c000ffff 	.word	0xc000ffff
 8001820:	fffc0000 	.word	0xfffc0000

08001824 <HAL_ETH_DescAssignMemory>:
  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8001824:	b10a      	cbz	r2, 800182a <HAL_ETH_DescAssignMemory+0x6>
 8001826:	2903      	cmp	r1, #3
 8001828:	d903      	bls.n	8001832 <HAL_ETH_DescAssignMemory+0xe>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800182a:	2301      	movs	r3, #1
 800182c:	6743      	str	r3, [r0, #116]	; 0x74
    return HAL_ERROR;
 800182e:	4618      	mov	r0, r3
 8001830:	4770      	bx	lr
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8001832:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8001836:	6c49      	ldr	r1, [r1, #68]	; 0x44
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8001838:	600a      	str	r2, [r1, #0]
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 800183a:	610a      	str	r2, [r1, #16]
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800183c:	68ca      	ldr	r2, [r1, #12]
 800183e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001842:	60ca      	str	r2, [r1, #12]
  if(pBuffer2 != NULL)
 8001844:	b12b      	cbz	r3, 8001852 <HAL_ETH_DescAssignMemory+0x2e>
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8001846:	608b      	str	r3, [r1, #8]
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8001848:	614b      	str	r3, [r1, #20]
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800184a:	68cb      	ldr	r3, [r1, #12]
 800184c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001850:	60cb      	str	r3, [r1, #12]
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001852:	68cb      	ldr	r3, [r1, #12]
  return HAL_OK;
 8001854:	2000      	movs	r0, #0
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800185a:	60cb      	str	r3, [r1, #12]
}
 800185c:	4770      	bx	lr

0800185e <HAL_ETH_Start_IT>:
  if(heth->gState == HAL_ETH_STATE_READY)
 800185e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8001860:	2b10      	cmp	r3, #16
{
 8001862:	b510      	push	{r4, lr}
  if(heth->gState == HAL_ETH_STATE_READY)
 8001864:	d13e      	bne.n	80018e4 <HAL_ETH_Start_IT+0x86>
    heth->gState = HAL_ETH_STATE_BUSY;
 8001866:	2323      	movs	r3, #35	; 0x23
 8001868:	f100 0454 	add.w	r4, r0, #84	; 0x54
 800186c:	66c3      	str	r3, [r0, #108]	; 0x6c
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800186e:	f100 0344 	add.w	r3, r0, #68	; 0x44
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001872:	f853 1b04 	ldr.w	r1, [r3], #4
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001876:	68ca      	ldr	r2, [r1, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001878:	42a3      	cmp	r3, r4
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800187a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800187e:	60ca      	str	r2, [r1, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001880:	d1f7      	bne.n	8001872 <HAL_ETH_Start_IT+0x14>
    heth->RxDescList.ItMode = 1U;
 8001882:	2301      	movs	r3, #1
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8001884:	f241 1104 	movw	r1, #4356	; 0x1104
    heth->RxDescList.ItMode = 1U;
 8001888:	6643      	str	r3, [r0, #100]	; 0x64
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800188a:	6803      	ldr	r3, [r0, #0]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	f042 0202 	orr.w	r2, r2, #2
 8001892:	601a      	str	r2, [r3, #0]
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	601a      	str	r2, [r3, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800189c:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80018a0:	f042 0201 	orr.w	r2, r2, #1
 80018a4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80018a8:	585a      	ldr	r2, [r3, r1]
 80018aa:	f042 0201 	orr.w	r2, r2, #1
 80018ae:	505a      	str	r2, [r3, r1]
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80018b0:	f241 1108 	movw	r1, #4360	; 0x1108
 80018b4:	585a      	ldr	r2, [r3, r1]
 80018b6:	f042 0201 	orr.w	r2, r2, #1
 80018ba:	505a      	str	r2, [r3, r1]
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80018bc:	f503 518b 	add.w	r1, r3, #4448	; 0x1160
 80018c0:	680a      	ldr	r2, [r1, #0]
 80018c2:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 80018c6:	600a      	str	r2, [r1, #0]
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80018c8:	f241 1134 	movw	r1, #4404	; 0x1134
 80018cc:	585a      	ldr	r2, [r3, r1]
 80018ce:	f442 4250 	orr.w	r2, r2, #53248	; 0xd000
 80018d2:	f042 0241 	orr.w	r2, r2, #65	; 0x41
 80018d6:	505a      	str	r2, [r3, r1]
    heth->gState = HAL_ETH_STATE_READY;
 80018d8:	2310      	movs	r3, #16
 80018da:	66c3      	str	r3, [r0, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80018dc:	2322      	movs	r3, #34	; 0x22
 80018de:	6703      	str	r3, [r0, #112]	; 0x70
    return HAL_OK;
 80018e0:	2000      	movs	r0, #0
}
 80018e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80018e4:	2001      	movs	r0, #1
 80018e6:	e7fc      	b.n	80018e2 <HAL_ETH_Start_IT+0x84>

080018e8 <HAL_ETH_Stop_IT>:
  if(heth->gState != HAL_ETH_STATE_RESET)
 80018e8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 80018ea:	b510      	push	{r4, lr}
  if(heth->gState != HAL_ETH_STATE_RESET)
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d037      	beq.n	8001960 <HAL_ETH_Stop_IT+0x78>
    heth->gState = HAL_ETH_STATE_BUSY;
 80018f0:	2323      	movs	r3, #35	; 0x23
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80018f2:	4602      	mov	r2, r0
 80018f4:	f241 1434 	movw	r4, #4404	; 0x1134
    heth->gState = HAL_ETH_STATE_BUSY;
 80018f8:	66c3      	str	r3, [r0, #108]	; 0x6c
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80018fa:	f852 3b44 	ldr.w	r3, [r2], #68
 80018fe:	5919      	ldr	r1, [r3, r4]
 8001900:	f421 4150 	bic.w	r1, r1, #53248	; 0xd000
 8001904:	f021 0141 	bic.w	r1, r1, #65	; 0x41
 8001908:	5119      	str	r1, [r3, r4]
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800190a:	f241 1404 	movw	r4, #4356	; 0x1104
 800190e:	5919      	ldr	r1, [r3, r4]
 8001910:	f021 0101 	bic.w	r1, r1, #1
 8001914:	5119      	str	r1, [r3, r4]
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8001916:	f241 1408 	movw	r4, #4360	; 0x1108
 800191a:	5919      	ldr	r1, [r3, r4]
 800191c:	f021 0101 	bic.w	r1, r1, #1
 8001920:	5119      	str	r1, [r3, r4]
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8001922:	f100 0454 	add.w	r4, r0, #84	; 0x54
 8001926:	6819      	ldr	r1, [r3, #0]
 8001928:	f021 0101 	bic.w	r1, r1, #1
 800192c:	6019      	str	r1, [r3, #0]
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800192e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
 8001932:	f041 0101 	orr.w	r1, r1, #1
 8001936:	f8c3 1d00 	str.w	r1, [r3, #3328]	; 0xd00
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800193a:	6819      	ldr	r1, [r3, #0]
 800193c:	f021 0102 	bic.w	r1, r1, #2
 8001940:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001942:	f852 1b04 	ldr.w	r1, [r2], #4
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001946:	68cb      	ldr	r3, [r1, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001948:	42a2      	cmp	r2, r4
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800194a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800194e:	60cb      	str	r3, [r1, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001950:	d1f7      	bne.n	8001942 <HAL_ETH_Stop_IT+0x5a>
    heth->RxDescList.ItMode = 0U;
 8001952:	2300      	movs	r3, #0
    heth->gState = HAL_ETH_STATE_READY;
 8001954:	2210      	movs	r2, #16
    heth->RxDescList.ItMode = 0U;
 8001956:	6643      	str	r3, [r0, #100]	; 0x64
    heth->gState = HAL_ETH_STATE_READY;
 8001958:	66c2      	str	r2, [r0, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 800195a:	6702      	str	r2, [r0, #112]	; 0x70
    return HAL_OK;
 800195c:	4618      	mov	r0, r3
}
 800195e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001960:	2001      	movs	r0, #1
 8001962:	e7fc      	b.n	800195e <HAL_ETH_Stop_IT+0x76>

08001964 <HAL_ETH_Transmit>:
{
 8001964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001966:	4604      	mov	r4, r0
 8001968:	4615      	mov	r5, r2
  if(pTxConfig == NULL)
 800196a:	b929      	cbnz	r1, 8001978 <HAL_ETH_Transmit+0x14>
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800196c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800196e:	f043 0301 	orr.w	r3, r3, #1
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001972:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_ERROR;
 8001974:	2001      	movs	r0, #1
 8001976:	e023      	b.n	80019c0 <HAL_ETH_Transmit+0x5c>
  if(heth->gState == HAL_ETH_STATE_READY)
 8001978:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800197a:	2b10      	cmp	r3, #16
 800197c:	d1fa      	bne.n	8001974 <HAL_ETH_Transmit+0x10>
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800197e:	2200      	movs	r2, #0
 8001980:	f7ff fdd0 	bl	8001524 <ETH_Prepare_Tx_Descriptors>
 8001984:	b118      	cbz	r0, 800198e <HAL_ETH_Transmit+0x2a>
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001986:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8001988:	f043 0302 	orr.w	r3, r3, #2
 800198c:	e7f1      	b.n	8001972 <HAL_ETH_Transmit+0xe>
    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800198e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001990:	1d9a      	adds	r2, r3, #6
 8001992:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	2a03      	cmp	r2, #3
 800199a:	bf8a      	itet	hi
 800199c:	3b03      	subhi	r3, #3
 800199e:	62a2      	strls	r2, [r4, #40]	; 0x28
 80019a0:	62a3      	strhi	r3, [r4, #40]	; 0x28
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80019a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	3206      	adds	r2, #6
 80019a8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80019ac:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80019b0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80019b2:	f7ff fbe3 	bl	800117c <HAL_GetTick>
 80019b6:	4606      	mov	r6, r0
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	db01      	blt.n	80019c2 <HAL_ETH_Transmit+0x5e>
    return HAL_OK;
 80019be:	2000      	movs	r0, #0
}
 80019c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80019c2:	6823      	ldr	r3, [r4, #0]
 80019c4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	04d2      	lsls	r2, r2, #19
 80019cc:	d508      	bpl.n	80019e0 <HAL_ETH_Transmit+0x7c>
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80019ce:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80019d0:	f042 0208 	orr.w	r2, r2, #8
 80019d4:	6762      	str	r2, [r4, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	67a3      	str	r3, [r4, #120]	; 0x78
          heth->gState = HAL_ETH_STATE_ERROR;
 80019da:	23e0      	movs	r3, #224	; 0xe0
 80019dc:	66e3      	str	r3, [r4, #108]	; 0x6c
          return HAL_ERROR;
 80019de:	e7c9      	b.n	8001974 <HAL_ETH_Transmit+0x10>
      if(Timeout != HAL_MAX_DELAY)
 80019e0:	1c6b      	adds	r3, r5, #1
 80019e2:	d0e9      	beq.n	80019b8 <HAL_ETH_Transmit+0x54>
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80019e4:	f7ff fbca 	bl	800117c <HAL_GetTick>
 80019e8:	1b80      	subs	r0, r0, r6
 80019ea:	42a8      	cmp	r0, r5
 80019ec:	d801      	bhi.n	80019f2 <HAL_ETH_Transmit+0x8e>
 80019ee:	2d00      	cmp	r5, #0
 80019f0:	d1e2      	bne.n	80019b8 <HAL_ETH_Transmit+0x54>
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80019f2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6763      	str	r3, [r4, #116]	; 0x74
 80019fa:	e7ee      	b.n	80019da <HAL_ETH_Transmit+0x76>

080019fc <HAL_ETH_IsRxDataAvailable>:
{
 80019fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(dmarxdesclist->AppDescNbr != 0U)
 80019fe:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8001a00:	2d00      	cmp	r5, #0
 8001a02:	d13b      	bne.n	8001a7c <HAL_ETH_IsRxDataAvailable+0x80>
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8001a04:	6d41      	ldr	r1, [r0, #84]	; 0x54
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8001a06:	462a      	mov	r2, r5
 8001a08:	462c      	mov	r4, r5
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001a0a:	2705      	movs	r7, #5
 8001a0c:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001a10:	6c5e      	ldr	r6, [r3, #68]	; 0x44
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8001a12:	68f3      	ldr	r3, [r6, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db01      	blt.n	8001a1c <HAL_ETH_IsRxDataAvailable+0x20>
 8001a18:	3f01      	subs	r7, #1
 8001a1a:	d131      	bne.n	8001a80 <HAL_ETH_IsRxDataAvailable+0x84>
  if(appdesccnt > 0U)
 8001a1c:	b364      	cbz	r4, 8001a78 <HAL_ETH_IsRxDataAvailable+0x7c>
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001a1e:	eb00 0382 	add.w	r3, r0, r2, lsl #2
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001a22:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
      if(descscancnt < (appdesccnt - 1U))
 8001a26:	1e67      	subs	r7, r4, #1
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001a2a:	e9c0 1215 	strd	r1, r2, [r0, #84]	; 0x54
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001a2e:	6919      	ldr	r1, [r3, #16]
 8001a30:	6019      	str	r1, [r3, #0]
      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001a32:	6959      	ldr	r1, [r3, #20]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001a34:	60de      	str	r6, [r3, #12]
      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8001a36:	b121      	cbz	r1, 8001a42 <HAL_ETH_IsRxDataAvailable+0x46>
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001a38:	6099      	str	r1, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001a3a:	68d9      	ldr	r1, [r3, #12]
 8001a3c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001a40:	60d9      	str	r1, [r3, #12]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001a42:	68d9      	ldr	r1, [r3, #12]
 8001a44:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8001a48:	60d9      	str	r1, [r3, #12]
      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8001a4a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001a4c:	b119      	cbz	r1, 8001a56 <HAL_ETH_IsRxDataAvailable+0x5a>
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001a4e:	68d9      	ldr	r1, [r3, #12]
 8001a50:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8001a54:	60d9      	str	r1, [r3, #12]
      if(descscancnt < (appdesccnt - 1U))
 8001a56:	42af      	cmp	r7, r5
 8001a58:	d907      	bls.n	8001a6a <HAL_ETH_IsRxDataAvailable+0x6e>
        INCR_RX_DESC_INDEX(descidx, 1U);
 8001a5a:	1c51      	adds	r1, r2, #1
 8001a5c:	2903      	cmp	r1, #3
 8001a5e:	bf88      	it	hi
 8001a60:	1ed1      	subhi	r1, r2, #3
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001a62:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8001a66:	460a      	mov	r2, r1
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8001a6a:	3501      	adds	r5, #1
 8001a6c:	42ac      	cmp	r4, r5
 8001a6e:	d1de      	bne.n	8001a2e <HAL_ETH_IsRxDataAvailable+0x32>
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001a70:	6801      	ldr	r1, [r0, #0]
 8001a72:	f241 1228 	movw	r2, #4392	; 0x1128
 8001a76:	508b      	str	r3, [r1, r2]
  dmarxdesclist->AppDescNbr = 0U;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	65c3      	str	r3, [r0, #92]	; 0x5c
    return 0;
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	e021      	b.n	8001ac4 <HAL_ETH_IsRxDataAvailable+0xc8>
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8001a80:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8001a84:	1c4b      	adds	r3, r1, #1
 8001a86:	f01c 5f80 	tst.w	ip, #268435456	; 0x10000000
 8001a8a:	d01c      	beq.n	8001ac6 <HAL_ETH_IsRxDataAvailable+0xca>
      if(appdesccnt == 1U)
 8001a8c:	2c00      	cmp	r4, #0
 8001a8e:	bf08      	it	eq
 8001a90:	460a      	moveq	r2, r1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a92:	2b03      	cmp	r3, #3
      appdesccnt += 1U;
 8001a94:	f104 0501 	add.w	r5, r4, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001a98:	bf88      	it	hi
 8001a9a:	1ecb      	subhi	r3, r1, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001a9c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8001aa0:	6c49      	ldr	r1, [r1, #68]	; 0x44
      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8001aa2:	68cc      	ldr	r4, [r1, #12]
 8001aa4:	2c00      	cmp	r4, #0
 8001aa6:	db09      	blt.n	8001abc <HAL_ETH_IsRxDataAvailable+0xc0>
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8001aa8:	68c9      	ldr	r1, [r1, #12]
 8001aaa:	004f      	lsls	r7, r1, #1
 8001aac:	d506      	bpl.n	8001abc <HAL_ETH_IsRxDataAvailable+0xc0>
          dmarxdesclist->AppContextDesc = 1;
 8001aae:	2101      	movs	r1, #1
 8001ab0:	6601      	str	r1, [r0, #96]	; 0x60
          INCR_RX_DESC_INDEX(descidx, 1U);
 8001ab2:	1859      	adds	r1, r3, r1
 8001ab4:	2903      	cmp	r1, #3
 8001ab6:	bf8c      	ite	hi
 8001ab8:	3b03      	subhi	r3, #3
 8001aba:	460b      	movls	r3, r1
      dmarxdesclist->AppDescNbr = appdesccnt;
 8001abc:	65c5      	str	r5, [r0, #92]	; 0x5c
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8001abe:	e9c0 3215 	strd	r3, r2, [r0, #84]	; 0x54
      return 1;
 8001ac2:	2001      	movs	r0, #1
}
 8001ac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8001ac6:	68f6      	ldr	r6, [r6, #12]
 8001ac8:	00b6      	lsls	r6, r6, #2
 8001aca:	d50a      	bpl.n	8001ae2 <HAL_ETH_IsRxDataAvailable+0xe6>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001acc:	2b03      	cmp	r3, #3
      appdesccnt = 1U;
 8001ace:	f04f 0401 	mov.w	r4, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ad2:	bf88      	it	hi
 8001ad4:	1ecb      	subhi	r3, r1, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001ad6:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8001ada:	6c56      	ldr	r6, [r2, #68]	; 0x44
 8001adc:	460a      	mov	r2, r1
      appdesccnt = 1U;
 8001ade:	4619      	mov	r1, r3
 8001ae0:	e797      	b.n	8001a12 <HAL_ETH_IsRxDataAvailable+0x16>
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ae2:	2b03      	cmp	r3, #3
      appdesccnt += 1U;
 8001ae4:	f104 0401 	add.w	r4, r4, #1
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001ae8:	bf88      	it	hi
 8001aea:	1ecb      	subhi	r3, r1, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001aec:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8001af0:	6c4e      	ldr	r6, [r1, #68]	; 0x44
 8001af2:	e7f4      	b.n	8001ade <HAL_ETH_IsRxDataAvailable+0xe2>

08001af4 <HAL_ETH_GetRxDataBuffer>:
{
 8001af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001af6:	4605      	mov	r5, r0
  if(rxbuff == NULL)
 8001af8:	460c      	mov	r4, r1
 8001afa:	b911      	cbnz	r1, 8001b02 <HAL_ETH_GetRxDataBuffer+0xe>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001afc:	2001      	movs	r0, #1
 8001afe:	6768      	str	r0, [r5, #116]	; 0x74
}
 8001b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(dmarxdesclist->AppDescNbr == 0U)
 8001b02:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001b04:	b1b3      	cbz	r3, 8001b34 <HAL_ETH_GetRxDataBuffer+0x40>
      descidx = dmarxdesclist->FirstAppDesc;
 8001b06:	6da9      	ldr	r1, [r5, #88]	; 0x58
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001b08:	2600      	movs	r6, #0
 8001b0a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001b0c:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8001b10:	6968      	ldr	r0, [r5, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001b12:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8001b16:	4637      	mov	r7, r6
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001b1a:	45bc      	cmp	ip, r7
 8001b1c:	d810      	bhi.n	8001b40 <HAL_ETH_GetRxDataBuffer+0x4c>
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001b1e:	68da      	ldr	r2, [r3, #12]
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001b20:	6919      	ldr	r1, [r3, #16]
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001b22:	f3c2 020e 	ubfx	r2, r2, #0, #15
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001b26:	6021      	str	r1, [r4, #0]
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8001b28:	1b92      	subs	r2, r2, r6
  if(lastdesclen <= heth->Init.RxBuffLen)
 8001b2a:	4290      	cmp	r0, r2
 8001b2c:	d31f      	bcc.n	8001b6e <HAL_ETH_GetRxDataBuffer+0x7a>
    rxbuff->len = lastdesclen;
 8001b2e:	6062      	str	r2, [r4, #4]
  return HAL_OK;
 8001b30:	2000      	movs	r0, #0
 8001b32:	e7e5      	b.n	8001b00 <HAL_ETH_GetRxDataBuffer+0xc>
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001b34:	f7ff ff62 	bl	80019fc <HAL_ETH_IsRxDataAvailable>
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d1e4      	bne.n	8001b06 <HAL_ETH_GetRxDataBuffer+0x12>
      return HAL_ERROR;
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	e7df      	b.n	8001b00 <HAL_ETH_GetRxDataBuffer+0xc>
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8001b40:	691a      	ldr	r2, [r3, #16]
    rxbuff->len =  heth->Init.RxBuffLen;
 8001b42:	e9c4 2000 	strd	r2, r0, [r4]
    if(dmarxdesc->BackupAddr1 != 0U)
 8001b46:	695a      	ldr	r2, [r3, #20]
 8001b48:	b11a      	cbz	r2, 8001b52 <HAL_ETH_GetRxDataBuffer+0x5e>
 8001b4a:	68a4      	ldr	r4, [r4, #8]
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001b4c:	695a      	ldr	r2, [r3, #20]
      rxbuff->len =  heth->Init.RxBuffLen;
 8001b4e:	e9c4 2000 	strd	r2, r0, [r4]
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b52:	1c4a      	adds	r2, r1, #1
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001b54:	68de      	ldr	r6, [r3, #12]
    rxbuff = rxbuff->next;
 8001b56:	68a4      	ldr	r4, [r4, #8]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001b58:	3701      	adds	r7, #1
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b5a:	2a03      	cmp	r2, #3
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001b5c:	f3c6 060e 	ubfx	r6, r6, #0, #15
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001b60:	bf88      	it	hi
 8001b62:	1eca      	subhi	r2, r1, #3
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001b64:	eb05 0382 	add.w	r3, r5, r2, lsl #2
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001b68:	4611      	mov	r1, r2
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8001b6c:	e7d5      	b.n	8001b1a <HAL_ETH_GetRxDataBuffer+0x26>
  else if(dmarxdesc->BackupAddr1 != 0U)
 8001b6e:	6959      	ldr	r1, [r3, #20]
 8001b70:	2900      	cmp	r1, #0
 8001b72:	d0e3      	beq.n	8001b3c <HAL_ETH_GetRxDataBuffer+0x48>
    rxbuff = rxbuff->next;
 8001b74:	68a1      	ldr	r1, [r4, #8]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8001b76:	1a12      	subs	r2, r2, r0
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001b78:	695b      	ldr	r3, [r3, #20]
    rxbuff->len = heth->Init.RxBuffLen;
 8001b7a:	6060      	str	r0, [r4, #4]
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8001b7c:	600b      	str	r3, [r1, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8001b7e:	604a      	str	r2, [r1, #4]
 8001b80:	e7d6      	b.n	8001b30 <HAL_ETH_GetRxDataBuffer+0x3c>

08001b82 <HAL_ETH_GetRxDataLength>:
{
 8001b82:	b570      	push	{r4, r5, r6, lr}
  if(dmarxdesclist->AppDescNbr == 0U)
 8001b84:	e9d0 5316 	ldrd	r5, r3, [r0, #88]	; 0x58
{
 8001b88:	4604      	mov	r4, r0
 8001b8a:	460e      	mov	r6, r1
  if(dmarxdesclist->AppDescNbr == 0U)
 8001b8c:	b16b      	cbz	r3, 8001baa <HAL_ETH_GetRxDataLength+0x28>
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001b8e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b90:	442b      	add	r3, r5
 8001b92:	1e58      	subs	r0, r3, #1
 8001b94:	2803      	cmp	r0, #3
 8001b96:	d80e      	bhi.n	8001bb6 <HAL_ETH_GetRxDataLength+0x34>
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001b98:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  return HAL_OK;
 8001b9c:	2000      	movs	r0, #0
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8001b9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001ba6:	6033      	str	r3, [r6, #0]
}
 8001ba8:	bd70      	pop	{r4, r5, r6, pc}
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8001baa:	f7ff ff27 	bl	80019fc <HAL_ETH_IsRxDataAvailable>
 8001bae:	2800      	cmp	r0, #0
 8001bb0:	d1ed      	bne.n	8001b8e <HAL_ETH_GetRxDataLength+0xc>
      return HAL_ERROR;
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	e7f8      	b.n	8001ba8 <HAL_ETH_GetRxDataLength+0x26>
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8001bb6:	1f58      	subs	r0, r3, #5
 8001bb8:	e7ee      	b.n	8001b98 <HAL_ETH_GetRxDataLength+0x16>

08001bba <HAL_ETH_BuildRxDescriptors>:
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8001bba:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
{
 8001bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(dmarxdesclist->AppDescNbr == 0U)
 8001bbe:	2a00      	cmp	r2, #0
 8001bc0:	d036      	beq.n	8001c30 <HAL_ETH_BuildRxDescriptors+0x76>
  if(dmarxdesclist->AppContextDesc != 0U)
 8001bc2:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001bc4:	b103      	cbz	r3, 8001bc8 <HAL_ETH_BuildRxDescriptors+0xe>
    totalappdescnbr += 1U;
 8001bc6:	3201      	adds	r2, #1
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8001bc8:	6d84      	ldr	r4, [r0, #88]	; 0x58
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001bca:	2100      	movs	r1, #0
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001bcc:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    if(descscan < (totalappdescnbr - 1U))
 8001bd0:	1e57      	subs	r7, r2, #1
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001bd2:	eb00 0384 	add.w	r3, r0, r4, lsl #2
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001bd8:	428a      	cmp	r2, r1
 8001bda:	d108      	bne.n	8001bee <HAL_ETH_BuildRxDescriptors+0x34>
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8001bdc:	6801      	ldr	r1, [r0, #0]
 8001bde:	f241 1228 	movw	r2, #4392	; 0x1128
 8001be2:	508b      	str	r3, [r1, r2]
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8001be4:	2300      	movs	r3, #0
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001be6:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  return HAL_OK;
 8001bea:	4618      	mov	r0, r3
}
 8001bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8001bee:	691d      	ldr	r5, [r3, #16]
 8001bf0:	601d      	str	r5, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8001bf2:	60de      	str	r6, [r3, #12]
    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8001bf4:	695d      	ldr	r5, [r3, #20]
 8001bf6:	b12d      	cbz	r5, 8001c04 <HAL_ETH_BuildRxDescriptors+0x4a>
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8001bf8:	695d      	ldr	r5, [r3, #20]
 8001bfa:	609d      	str	r5, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8001bfc:	68dd      	ldr	r5, [r3, #12]
 8001bfe:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
 8001c02:	60dd      	str	r5, [r3, #12]
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8001c04:	68dd      	ldr	r5, [r3, #12]
 8001c06:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001c0a:	60dd      	str	r5, [r3, #12]
    if(dmarxdesclist->ItMode != 0U)
 8001c0c:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8001c0e:	b11d      	cbz	r5, 8001c18 <HAL_ETH_BuildRxDescriptors+0x5e>
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8001c10:	68dd      	ldr	r5, [r3, #12]
 8001c12:	f045 4580 	orr.w	r5, r5, #1073741824	; 0x40000000
 8001c16:	60dd      	str	r5, [r3, #12]
    if(descscan < (totalappdescnbr - 1U))
 8001c18:	428f      	cmp	r7, r1
 8001c1a:	d907      	bls.n	8001c2c <HAL_ETH_BuildRxDescriptors+0x72>
      INCR_RX_DESC_INDEX(descindex, 1U);
 8001c1c:	1c65      	adds	r5, r4, #1
 8001c1e:	2d03      	cmp	r5, #3
 8001c20:	bf88      	it	hi
 8001c22:	1ee5      	subhi	r5, r4, #3
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8001c24:	eb00 0385 	add.w	r3, r0, r5, lsl #2
 8001c28:	462c      	mov	r4, r5
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8001c2c:	3101      	adds	r1, #1
 8001c2e:	e7d3      	b.n	8001bd8 <HAL_ETH_BuildRxDescriptors+0x1e>
    return HAL_ERROR;
 8001c30:	2001      	movs	r0, #1
 8001c32:	e7db      	b.n	8001bec <HAL_ETH_BuildRxDescriptors+0x32>

08001c34 <HAL_ETH_TxCpltCallback>:
 8001c34:	4770      	bx	lr

08001c36 <HAL_ETH_DMAErrorCallback>:
 8001c36:	4770      	bx	lr

08001c38 <HAL_ETH_MACErrorCallback>:
 8001c38:	4770      	bx	lr

08001c3a <HAL_ETH_PMTCallback>:
 8001c3a:	4770      	bx	lr

08001c3c <HAL_ETH_EEECallback>:
 8001c3c:	4770      	bx	lr

08001c3e <HAL_ETH_WakeUpCallback>:
 8001c3e:	4770      	bx	lr

08001c40 <HAL_ETH_IRQHandler>:
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001c40:	6803      	ldr	r3, [r0, #0]
 8001c42:	f503 528b 	add.w	r2, r3, #4448	; 0x1160
 8001c46:	6812      	ldr	r2, [r2, #0]
 8001c48:	0652      	lsls	r2, r2, #25
{
 8001c4a:	b510      	push	{r4, lr}
 8001c4c:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8001c4e:	d50c      	bpl.n	8001c6a <HAL_ETH_IRQHandler+0x2a>
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8001c50:	f241 1234 	movw	r2, #4404	; 0x1134
 8001c54:	589b      	ldr	r3, [r3, r2]
 8001c56:	0659      	lsls	r1, r3, #25
 8001c58:	d507      	bpl.n	8001c6a <HAL_ETH_IRQHandler+0x2a>
      HAL_ETH_RxCpltCallback(heth);
 8001c5a:	f7fe fdf1 	bl	8000840 <HAL_ETH_RxCpltCallback>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	f248 0240 	movw	r2, #32832	; 0x8040
 8001c64:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001c68:	601a      	str	r2, [r3, #0]
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8001c6a:	6823      	ldr	r3, [r4, #0]
 8001c6c:	f503 528b 	add.w	r2, r3, #4448	; 0x1160
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	07d2      	lsls	r2, r2, #31
 8001c74:	d50d      	bpl.n	8001c92 <HAL_ETH_IRQHandler+0x52>
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8001c76:	f241 1234 	movw	r2, #4404	; 0x1134
 8001c7a:	589b      	ldr	r3, [r3, r2]
 8001c7c:	07d8      	lsls	r0, r3, #31
 8001c7e:	d508      	bpl.n	8001c92 <HAL_ETH_IRQHandler+0x52>
      HAL_ETH_TxCpltCallback(heth);
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7ff ffd7 	bl	8001c34 <HAL_ETH_TxCpltCallback>
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	f248 0201 	movw	r2, #32769	; 0x8001
 8001c8c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8001c90:	601a      	str	r2, [r3, #0]
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8001c92:	6822      	ldr	r2, [r4, #0]
 8001c94:	f502 538b 	add.w	r3, r2, #4448	; 0x1160
 8001c98:	6819      	ldr	r1, [r3, #0]
 8001c9a:	0449      	lsls	r1, r1, #17
 8001c9c:	d51c      	bpl.n	8001cd8 <HAL_ETH_IRQHandler+0x98>
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8001c9e:	f241 1134 	movw	r1, #4404	; 0x1134
 8001ca2:	5850      	ldr	r0, [r2, r1]
 8001ca4:	0440      	lsls	r0, r0, #17
 8001ca6:	d517      	bpl.n	8001cd8 <HAL_ETH_IRQHandler+0x98>
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001ca8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001caa:	f040 0008 	orr.w	r0, r0, #8
 8001cae:	6760      	str	r0, [r4, #116]	; 0x74
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8001cb0:	6818      	ldr	r0, [r3, #0]
 8001cb2:	04c0      	lsls	r0, r0, #19
 8001cb4:	d54f      	bpl.n	8001d56 <HAL_ETH_IRQHandler+0x116>
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f423 636f 	bic.w	r3, r3, #3824	; 0xef0
 8001cbc:	f023 030d 	bic.w	r3, r3, #13
 8001cc0:	04db      	lsls	r3, r3, #19
 8001cc2:	0cdb      	lsrs	r3, r3, #19
 8001cc4:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8001cc6:	5853      	ldr	r3, [r2, r1]
 8001cc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001ccc:	5053      	str	r3, [r2, r1]
        heth->gState = HAL_ETH_STATE_ERROR;
 8001cce:	23e0      	movs	r3, #224	; 0xe0
 8001cd0:	66e3      	str	r3, [r4, #108]	; 0x6c
      HAL_ETH_DMAErrorCallback(heth);
 8001cd2:	4620      	mov	r0, r4
 8001cd4:	f7ff ffaf 	bl	8001c36 <HAL_ETH_DMAErrorCallback>
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8001cd8:	6822      	ldr	r2, [r4, #0]
 8001cda:	f8d2 30b0 	ldr.w	r3, [r2, #176]	; 0xb0
 8001cde:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8001ce2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8001ce6:	d109      	bne.n	8001cfc <HAL_ETH_IRQHandler+0xbc>
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001ce8:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
    HAL_ETH_MACErrorCallback(heth);
 8001cec:	4620      	mov	r0, r4
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8001cee:	67e3      	str	r3, [r4, #124]	; 0x7c
    heth->gState = HAL_ETH_STATE_ERROR;
 8001cf0:	23e0      	movs	r3, #224	; 0xe0
 8001cf2:	66e3      	str	r3, [r4, #108]	; 0x6c
    HAL_ETH_MACErrorCallback(heth);
 8001cf4:	f7ff ffa0 	bl	8001c38 <HAL_ETH_MACErrorCallback>
    heth->MACErrorCode = (uint32_t)(0x0U);
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	67e3      	str	r3, [r4, #124]	; 0x7c
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d02:	06d0      	lsls	r0, r2, #27
 8001d04:	d50b      	bpl.n	8001d1e <HAL_ETH_IRQHandler+0xde>
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001d06:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_PMTCallback(heth);
 8001d0a:	4620      	mov	r0, r4
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8001d0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001d10:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    HAL_ETH_PMTCallback(heth);
 8001d14:	f7ff ff91 	bl	8001c3a <HAL_ETH_PMTCallback>
    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d24:	0691      	lsls	r1, r2, #26
 8001d26:	d50b      	bpl.n	8001d40 <HAL_ETH_IRQHandler+0x100>
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001d28:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    HAL_ETH_EEECallback(heth);
 8001d2c:	4620      	mov	r0, r4
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    HAL_ETH_EEECallback(heth);
 8001d36:	f7ff ff81 	bl	8001c3c <HAL_ETH_EEECallback>
    heth->MACLPIEvent = (uint32_t)(0x0U);
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_ETH_IRQHandler+0x128>)
 8001d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d44:	0252      	lsls	r2, r2, #9
 8001d46:	d505      	bpl.n	8001d54 <HAL_ETH_IRQHandler+0x114>
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d48:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
      HAL_ETH_WakeUpCallback(heth);
 8001d4c:	4620      	mov	r0, r4
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
      HAL_ETH_WakeUpCallback(heth);
 8001d50:	f7ff ff75 	bl	8001c3e <HAL_ETH_WakeUpCallback>
}
 8001d54:	bd10      	pop	{r4, pc}
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	f402 42cd 	and.w	r2, r2, #26240	; 0x6680
 8001d5c:	67a2      	str	r2, [r4, #120]	; 0x78
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8001d5e:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	e7b5      	b.n	8001cd2 <HAL_ETH_IRQHandler+0x92>
 8001d66:	bf00      	nop
 8001d68:	58000080 	.word	0x58000080

08001d6c <HAL_ETH_ReadPHYRegister>:
{
 8001d6c:	b570      	push	{r4, r5, r6, lr}
 8001d6e:	461e      	mov	r6, r3
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001d70:	6803      	ldr	r3, [r0, #0]
{
 8001d72:	4605      	mov	r5, r0
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001d74:	f8d3 0200 	ldr.w	r0, [r3, #512]	; 0x200
 8001d78:	07c0      	lsls	r0, r0, #31
 8001d7a:	d501      	bpl.n	8001d80 <HAL_ETH_ReadPHYRegister+0x14>
    return HAL_ERROR;
 8001d7c:	2001      	movs	r0, #1
}
 8001d7e:	bd70      	pop	{r4, r5, r6, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001d80:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001d84:	f024 7478 	bic.w	r4, r4, #65011712	; 0x3e00000
 8001d88:	ea44 5141 	orr.w	r1, r4, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001d8c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001d90:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001d94:	f042 020d 	orr.w	r2, r2, #13
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8001d98:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  tickstart = HAL_GetTick();
 8001d9c:	f7ff f9ee 	bl	800117c <HAL_GetTick>
 8001da0:	4604      	mov	r4, r0
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001da2:	682a      	ldr	r2, [r5, #0]
 8001da4:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 8001da8:	f013 0301 	ands.w	r3, r3, #1
 8001dac:	d105      	bne.n	8001dba <HAL_ETH_ReadPHYRegister+0x4e>
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001dae:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  return HAL_OK;
 8001db2:	4618      	mov	r0, r3
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8001db4:	b292      	uxth	r2, r2
 8001db6:	6032      	str	r2, [r6, #0]
  return HAL_OK;
 8001db8:	e7e1      	b.n	8001d7e <HAL_ETH_ReadPHYRegister+0x12>
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001dba:	f7ff f9df 	bl	800117c <HAL_GetTick>
 8001dbe:	1b00      	subs	r0, r0, r4
 8001dc0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001dc4:	d9ed      	bls.n	8001da2 <HAL_ETH_ReadPHYRegister+0x36>
 8001dc6:	e7d9      	b.n	8001d7c <HAL_ETH_ReadPHYRegister+0x10>

08001dc8 <HAL_ETH_WritePHYRegister>:
{
 8001dc8:	b538      	push	{r3, r4, r5, lr}
 8001dca:	4605      	mov	r5, r0
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8001dcc:	6800      	ldr	r0, [r0, #0]
 8001dce:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
 8001dd2:	07e4      	lsls	r4, r4, #31
 8001dd4:	d501      	bpl.n	8001dda <HAL_ETH_WritePHYRegister+0x12>
    return HAL_ERROR;
 8001dd6:	2001      	movs	r0, #1
}
 8001dd8:	bd38      	pop	{r3, r4, r5, pc}
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8001dda:	f8d0 4200 	ldr.w	r4, [r0, #512]	; 0x200
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8001dde:	b29b      	uxth	r3, r3
 8001de0:	f024 7478 	bic.w	r4, r4, #65011712	; 0x3e00000
 8001de4:	ea44 5141 	orr.w	r1, r4, r1, lsl #21
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8001de8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001dec:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001df0:	490d      	ldr	r1, [pc, #52]	; (8001e28 <HAL_ETH_WritePHYRegister+0x60>)
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8001df2:	f022 020c 	bic.w	r2, r2, #12
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8001df6:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8001dfa:	f042 0205 	orr.w	r2, r2, #5
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8001dfe:	f8c1 2200 	str.w	r2, [r1, #512]	; 0x200
  tickstart = HAL_GetTick();
 8001e02:	f7ff f9bb 	bl	800117c <HAL_GetTick>
 8001e06:	4604      	mov	r4, r0
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8001e08:	682b      	ldr	r3, [r5, #0]
 8001e0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e0e:	f013 0301 	ands.w	r3, r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_ETH_WritePHYRegister+0x50>
  return HAL_OK;
 8001e14:	4618      	mov	r0, r3
 8001e16:	e7df      	b.n	8001dd8 <HAL_ETH_WritePHYRegister+0x10>
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8001e18:	f7ff f9b0 	bl	800117c <HAL_GetTick>
 8001e1c:	1b00      	subs	r0, r0, r4
 8001e1e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001e22:	d9f1      	bls.n	8001e08 <HAL_ETH_WritePHYRegister+0x40>
 8001e24:	e7d7      	b.n	8001dd6 <HAL_ETH_WritePHYRegister+0xe>
 8001e26:	bf00      	nop
 8001e28:	40028000 	.word	0x40028000

08001e2c <HAL_ETH_GetMACConfig>:
  if (macconf == NULL)
 8001e2c:	2900      	cmp	r1, #0
 8001e2e:	f000 80c1 	beq.w	8001fb4 <HAL_ETH_GetMACConfig+0x188>
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001e32:	6803      	ldr	r3, [r0, #0]
  return HAL_OK;
 8001e34:	2000      	movs	r0, #0
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	f002 020c 	and.w	r2, r2, #12
 8001e3c:	62ca      	str	r2, [r1, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001e44:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8001e4e:	624a      	str	r2, [r1, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	f482 7280 	eor.w	r2, r2, #256	; 0x100
 8001e56:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8001e5a:	f881 2020 	strb.w	r2, [r1, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001e64:	77ca      	strb	r2, [r1, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	f482 6280 	eor.w	r2, r2, #1024	; 0x400
 8001e6c:	f3c2 2280 	ubfx	r2, r2, #10, #1
 8001e70:	778a      	strb	r2, [r1, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	f3c2 22c0 	ubfx	r2, r2, #11, #1
 8001e78:	774a      	strb	r2, [r1, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	f3c2 3200 	ubfx	r2, r2, #12, #1
 8001e80:	770a      	strb	r2, [r1, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001e88:	618a      	str	r2, [r1, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e90:	614a      	str	r2, [r1, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8001e98:	748a      	strb	r2, [r1, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	f482 3200 	eor.w	r2, r2, #131072	; 0x20000
 8001ea0:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001ea4:	744a      	strb	r2, [r1, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8001eac:	f3c2 42c0 	ubfx	r2, r2, #19, #1
 8001eb0:	740a      	strb	r2, [r1, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	f3c2 5200 	ubfx	r2, r2, #20, #1
 8001eb8:	73ca      	strb	r2, [r1, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8001ec0:	738a      	strb	r2, [r1, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	f3c2 5280 	ubfx	r2, r2, #22, #1
 8001ec8:	734a      	strb	r2, [r1, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	f3c2 52c0 	ubfx	r2, r2, #23, #1
 8001ed0:	730a      	strb	r2, [r1, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	f002 62e0 	and.w	r2, r2, #117440512	; 0x7000000
 8001ed8:	608a      	str	r2, [r1, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	f3c2 62c0 	ubfx	r2, r2, #27, #1
 8001ee0:	710a      	strb	r2, [r1, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8001ee8:	600a      	str	r2, [r1, #0]
  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	f3c2 020d 	ubfx	r2, r2, #0, #14
 8001ef0:	634a      	str	r2, [r1, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	f482 3280 	eor.w	r2, r2, #65536	; 0x10000
 8001ef8:	f3c2 4200 	ubfx	r2, r2, #16, #1
 8001efc:	f881 2032 	strb.w	r2, [r1, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	f3c2 4240 	ubfx	r2, r2, #17, #1
 8001f06:	f881 2031 	strb.w	r2, [r1, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	f3c2 4280 	ubfx	r2, r2, #18, #1
 8001f10:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	f3c2 6200 	ubfx	r2, r2, #24, #1
 8001f1a:	f881 2038 	strb.w	r2, [r1, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	f3c2 6244 	ubfx	r2, r2, #25, #5
 8001f24:	63ca      	str	r2, [r1, #60]	; 0x3c
  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	f3c2 2200 	ubfx	r2, r2, #8, #1
 8001f2c:	f881 2040 	strb.w	r2, [r1, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	f002 020f 	and.w	r2, r2, #15
 8001f36:	644a      	str	r2, [r1, #68]	; 0x44
  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f3a:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001f3e:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8001f42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f44:	f082 0280 	eor.w	r2, r2, #128	; 0x80
 8001f48:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8001f4c:	f881 204c 	strb.w	r2, [r1, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8001f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f52:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001f56:	650a      	str	r2, [r1, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8001f58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001f5a:	0c12      	lsrs	r2, r2, #16
 8001f5c:	648a      	str	r2, [r1, #72]	; 0x48
  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8001f5e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001f62:	f002 0201 	and.w	r2, r2, #1
 8001f66:	f881 2056 	strb.w	r2, [r1, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8001f6a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001f6e:	f3c2 0240 	ubfx	r2, r2, #1, #1
 8001f72:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8001f76:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8001f7a:	f002 0272 	and.w	r2, r2, #114	; 0x72
 8001f7e:	658a      	str	r2, [r1, #88]	; 0x58
  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8001f80:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8001f84:	f002 0223 	and.w	r2, r2, #35	; 0x23
 8001f88:	65ca      	str	r2, [r1, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8001f8a:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8001f8e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 8001f92:	f881 2062 	strb.w	r2, [r1, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8001f96:	f8d3 2d30 	ldr.w	r2, [r3, #3376]	; 0xd30
 8001f9a:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001f9e:	f881 2061 	strb.w	r2, [r1, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8001fa2:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001fa6:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8001faa:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001fae:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
  return HAL_OK;
 8001fb2:	4770      	bx	lr
    return HAL_ERROR;
 8001fb4:	2001      	movs	r0, #1
}
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_ETH_SetMACConfig>:
{
 8001fb8:	b508      	push	{r3, lr}
  if(macconf == NULL)
 8001fba:	b131      	cbz	r1, 8001fca <HAL_ETH_SetMACConfig+0x12>
  if(heth->RxState == HAL_ETH_STATE_READY)
 8001fbc:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001fbe:	2b10      	cmp	r3, #16
 8001fc0:	d103      	bne.n	8001fca <HAL_ETH_SetMACConfig+0x12>
    ETH_SetMACConfig(heth, macconf);
 8001fc2:	f7ff f98d 	bl	80012e0 <ETH_SetMACConfig>
    return HAL_OK;
 8001fc6:	2000      	movs	r0, #0
}
 8001fc8:	bd08      	pop	{r3, pc}
    return HAL_ERROR;
 8001fca:	2001      	movs	r0, #1
 8001fcc:	e7fc      	b.n	8001fc8 <HAL_ETH_SetMACConfig+0x10>
	...

08001fd0 <HAL_ETH_SetMDIOClockRange>:
{
 8001fd0:	b538      	push	{r3, r4, r5, lr}
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001fd2:	6803      	ldr	r3, [r0, #0]
{
 8001fd4:	4605      	mov	r5, r0
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001fd6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
  hclk = HAL_RCC_GetHCLKFreq();
 8001fda:	f000 feab 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_ETH_SetMDIOClockRange+0x58>)
 8001fe0:	4a12      	ldr	r2, [pc, #72]	; (800202c <HAL_ETH_SetMDIOClockRange+0x5c>)
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001fe2:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001fe6:	4403      	add	r3, r0
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d205      	bcs.n	8001ff8 <HAL_ETH_SetMDIOClockRange+0x28>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001fec:	f444 7400 	orr.w	r4, r4, #512	; 0x200
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001ff0:	682b      	ldr	r3, [r5, #0]
 8001ff2:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
 8001ff6:	bd38      	pop	{r3, r4, r5, pc}
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_ETH_SetMDIOClockRange+0x60>)
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_ETH_SetMDIOClockRange+0x64>)
 8001ffc:	4403      	add	r3, r0
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d802      	bhi.n	8002008 <HAL_ETH_SetMDIOClockRange+0x38>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8002002:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8002006:	e7f3      	b.n	8001ff0 <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002008:	4b0b      	ldr	r3, [pc, #44]	; (8002038 <HAL_ETH_SetMDIOClockRange+0x68>)
 800200a:	4a0c      	ldr	r2, [pc, #48]	; (800203c <HAL_ETH_SetMDIOClockRange+0x6c>)
 800200c:	4403      	add	r3, r0
 800200e:	4293      	cmp	r3, r2
 8002010:	d3ee      	bcc.n	8001ff0 <HAL_ETH_SetMDIOClockRange+0x20>
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_ETH_SetMDIOClockRange+0x70>)
 8002014:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002016:	4403      	add	r3, r0
 8002018:	4293      	cmp	r3, r2
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800201a:	bf94      	ite	ls
 800201c:	f444 7480 	orrls.w	r4, r4, #256	; 0x100
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002020:	f444 6480 	orrhi.w	r4, r4, #1024	; 0x400
 8002024:	e7e4      	b.n	8001ff0 <HAL_ETH_SetMDIOClockRange+0x20>
 8002026:	bf00      	nop
 8002028:	feced300 	.word	0xfeced300
 800202c:	00e4e1c0 	.word	0x00e4e1c0
 8002030:	fde9f140 	.word	0xfde9f140
 8002034:	017d783f 	.word	0x017d783f
 8002038:	fc6c7900 	.word	0xfc6c7900
 800203c:	02625a00 	.word	0x02625a00
 8002040:	fa0a1f00 	.word	0xfa0a1f00
 8002044:	02faf07f 	.word	0x02faf07f

08002048 <HAL_ETH_Init>:
{
 8002048:	b570      	push	{r4, r5, r6, lr}
  if(heth == NULL)
 800204a:	4604      	mov	r4, r0
{
 800204c:	b0a4      	sub	sp, #144	; 0x90
  if(heth == NULL)
 800204e:	2800      	cmp	r0, #0
 8002050:	f000 80a6 	beq.w	80021a0 <HAL_ETH_Init+0x158>
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002054:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002056:	b90b      	cbnz	r3, 800205c <HAL_ETH_Init+0x14>
    HAL_ETH_MspInit(heth);
 8002058:	f7fe fb66 	bl	8000728 <HAL_ETH_MspInit>
  heth->gState = HAL_ETH_STATE_BUSY;
 800205c:	2323      	movs	r3, #35	; 0x23
 800205e:	66e3      	str	r3, [r4, #108]	; 0x6c
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002060:	4b7a      	ldr	r3, [pc, #488]	; (800224c <HAL_ETH_Init+0x204>)
 8002062:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8002066:	f042 0202 	orr.w	r2, r2, #2
 800206a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800206e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002072:	7a20      	ldrb	r0, [r4, #8]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	9301      	str	r3, [sp, #4]
 800207a:	9b01      	ldr	r3, [sp, #4]
  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800207c:	2800      	cmp	r0, #0
 800207e:	f040 8082 	bne.w	8002186 <HAL_ETH_Init+0x13e>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002082:	f7ff f887 	bl	8001194 <HAL_SYSCFG_ETHInterfaceSelect>
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	f042 0201 	orr.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8002094:	f7ff f872 	bl	800117c <HAL_GetTick>
 8002098:	4606      	mov	r6, r0
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800209a:	6823      	ldr	r3, [r4, #0]
 800209c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a0:	681d      	ldr	r5, [r3, #0]
 80020a2:	f015 0501 	ands.w	r5, r5, #1
 80020a6:	d171      	bne.n	800218c <HAL_ETH_Init+0x144>
  ETH_MAC_MDIO_ClkConfig(heth);
 80020a8:	4620      	mov	r0, r4
  macDefaultConf.ChecksumOffload = ENABLE;
 80020aa:	2601      	movs	r6, #1
  ETH_MAC_MDIO_ClkConfig(heth);
 80020ac:	f7ff ff90 	bl	8001fd0 <HAL_ETH_SetMDIOClockRange>
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80020b0:	f000 fe40 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 80020b4:	4a66      	ldr	r2, [pc, #408]	; (8002250 <HAL_ETH_Init+0x208>)
 80020b6:	6823      	ldr	r3, [r4, #0]
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80020b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80020bc:	9514      	str	r5, [sp, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80020be:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
  macDefaultConf.DeferralCheck = DISABLE;
 80020c2:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80020c6:	f88d 5064 	strb.w	r5, [sp, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80020ca:	951a      	str	r5, [sp, #104]	; 0x68
  macDefaultConf.PauseTime = 0x0;
 80020cc:	951d      	str	r5, [sp, #116]	; 0x74
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80020ce:	f88d 506c 	strb.w	r5, [sp, #108]	; 0x6c
  macDefaultConf.RetryTransmission = ENABLE;
 80020d2:	f88d 604c 	strb.w	r6, [sp, #76]	; 0x4c
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80020d6:	f8ad 608c 	strh.w	r6, [sp, #140]	; 0x8c
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80020da:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80020de:	951f      	str	r5, [sp, #124]	; 0x7c
  macDefaultConf.TransmitFlowControl = DISABLE;
 80020e0:	f8ad 5080 	strh.w	r5, [sp, #128]	; 0x80
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80020e4:	f88d 5082 	strb.w	r5, [sp, #130]	; 0x82
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80020e8:	9516      	str	r5, [sp, #88]	; 0x58
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80020ea:	f8ad 505c 	strh.w	r5, [sp, #92]	; 0x5c
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80020ee:	f88d 605e 	strb.w	r6, [sp, #94]	; 0x5e
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80020f2:	950d      	str	r5, [sp, #52]	; 0x34
  macDefaultConf.JumboPacket = DISABLE;
 80020f4:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80020f8:	951c      	str	r5, [sp, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80020fa:	f88d 6078 	strb.w	r6, [sp, #120]	; 0x78
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80020fe:	fbb0 f0f2 	udiv	r0, r0, r2
 8002102:	3801      	subs	r0, #1
 8002104:	f8c3 00dc 	str.w	r0, [r3, #220]	; 0xdc
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002108:	f44f 63c3 	mov.w	r3, #1560	; 0x618
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800210c:	2002      	movs	r0, #2
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800210e:	9318      	str	r3, [sp, #96]	; 0x60
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002110:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8002114:	930b      	str	r3, [sp, #44]	; 0x2c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002116:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800211a:	e9cd 1310 	strd	r1, r3, [sp, #64]	; 0x40
  macDefaultConf.LoopbackMode = DISABLE;
 800211e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002122:	a90b      	add	r1, sp, #44	; 0x2c
  macDefaultConf.LoopbackMode = DISABLE;
 8002124:	9312      	str	r3, [sp, #72]	; 0x48
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8002126:	2320      	movs	r3, #32
 8002128:	e9cd 0321 	strd	r0, r3, [sp, #132]	; 0x84
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800212c:	4b49      	ldr	r3, [pc, #292]	; (8002254 <HAL_ETH_Init+0x20c>)
  ETH_SetMACConfig(heth, &macDefaultConf);
 800212e:	4620      	mov	r0, r4
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8002130:	930e      	str	r3, [sp, #56]	; 0x38
  macDefaultConf.Watchdog = ENABLE;
 8002132:	f240 1301 	movw	r3, #257	; 0x101
 8002136:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
  ETH_SetMACConfig(heth, &macDefaultConf);
 800213a:	f7ff f8d1 	bl	80012e0 <ETH_SetMACConfig>
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800213e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002142:	a902      	add	r1, sp, #8
 8002144:	4620      	mov	r0, r4
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002146:	f88d 600c 	strb.w	r6, [sp, #12]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800214a:	9306      	str	r3, [sp, #24]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800214c:	9308      	str	r3, [sp, #32]
  dmaDefaultConf.MaximumSegmentSize = 536;
 800214e:	f44f 7306 	mov.w	r3, #536	; 0x218
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002152:	9502      	str	r5, [sp, #8]
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002154:	930a      	str	r3, [sp, #40]	; 0x28
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002156:	9604      	str	r6, [sp, #16]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002158:	f8ad 5014 	strh.w	r5, [sp, #20]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800215c:	f88d 501c 	strb.w	r5, [sp, #28]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002160:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002164:	f7ff f996 	bl	8001494 <ETH_SetDMAConfig>
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002168:	6823      	ldr	r3, [r4, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800216a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800216c:	f503 5188 	add.w	r1, r3, #4352	; 0x1100
 8002170:	680a      	ldr	r2, [r1, #0]
 8002172:	f422 12e0 	bic.w	r2, r2, #1835008	; 0x1c0000
 8002176:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800217a:	600a      	str	r2, [r1, #0]
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800217c:	f010 0103 	ands.w	r1, r0, #3
 8002180:	d010      	beq.n	80021a4 <HAL_ETH_Init+0x15c>
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002182:	6766      	str	r6, [r4, #116]	; 0x74
 8002184:	e00a      	b.n	800219c <HAL_ETH_Init+0x154>
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002186:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800218a:	e77a      	b.n	8002082 <HAL_ETH_Init+0x3a>
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800218c:	f7fe fff6 	bl	800117c <HAL_GetTick>
 8002190:	1b80      	subs	r0, r0, r6
 8002192:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8002196:	d980      	bls.n	800209a <HAL_ETH_Init+0x52>
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002198:	2304      	movs	r3, #4
 800219a:	6763      	str	r3, [r4, #116]	; 0x74
    heth->gState = HAL_ETH_STATE_ERROR;
 800219c:	23e0      	movs	r3, #224	; 0xe0
 800219e:	66e3      	str	r3, [r4, #108]	; 0x6c
    return HAL_ERROR;
 80021a0:	2001      	movs	r0, #1
 80021a2:	e051      	b.n	8002248 <HAL_ETH_Init+0x200>
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80021a4:	f241 1508 	movw	r5, #4360	; 0x1108
 80021a8:	595a      	ldr	r2, [r3, r5]
 80021aa:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80021ae:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80021b2:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80021b6:	68e0      	ldr	r0, [r4, #12]
 80021b8:	515a      	str	r2, [r3, r5]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021ba:	f100 0660 	add.w	r6, r0, #96	; 0x60
 80021be:	f104 0518 	add.w	r5, r4, #24
    dmatxdesc = heth->Init.TxDesc + i;
 80021c2:	4602      	mov	r2, r0
    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80021c4:	6011      	str	r1, [r2, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80021c6:	6051      	str	r1, [r2, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80021c8:	6091      	str	r1, [r2, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80021ca:	60d1      	str	r1, [r2, #12]
    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80021cc:	f845 2b04 	str.w	r2, [r5], #4
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80021d0:	3218      	adds	r2, #24
 80021d2:	42b2      	cmp	r2, r6
 80021d4:	d1f6      	bne.n	80021c4 <HAL_ETH_Init+0x17c>
  heth->TxDescList.CurTxDesc = 0;
 80021d6:	62a1      	str	r1, [r4, #40]	; 0x28
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80021d8:	f241 122c 	movw	r2, #4396	; 0x112c
 80021dc:	2103      	movs	r1, #3
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80021de:	2500      	movs	r5, #0
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80021e0:	5099      	str	r1, [r3, r2]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80021e2:	f241 1214 	movw	r2, #4372	; 0x1114
    dmarxdesc =  heth->Init.RxDesc + i;
 80021e6:	6921      	ldr	r1, [r4, #16]
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80021e8:	5098      	str	r0, [r3, r2]
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80021ea:	f503 5289 	add.w	r2, r3, #4384	; 0x1120
 80021ee:	f101 0660 	add.w	r6, r1, #96	; 0x60
 80021f2:	6010      	str	r0, [r2, #0]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021f4:	f104 0044 	add.w	r0, r4, #68	; 0x44
    dmarxdesc =  heth->Init.RxDesc + i;
 80021f8:	460a      	mov	r2, r1
    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80021fa:	6015      	str	r5, [r2, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80021fc:	6055      	str	r5, [r2, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80021fe:	6095      	str	r5, [r2, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002200:	60d5      	str	r5, [r2, #12]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002202:	e9c2 5504 	strd	r5, r5, [r2, #16]
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002206:	f840 2b04 	str.w	r2, [r0], #4
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800220a:	3218      	adds	r2, #24
 800220c:	42b2      	cmp	r2, r6
 800220e:	d1f4      	bne.n	80021fa <HAL_ETH_Init+0x1b2>
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002210:	f241 1230 	movw	r2, #4400	; 0x1130
 8002214:	2003      	movs	r0, #3
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002216:	65e5      	str	r5, [r4, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8002218:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800221c:	e9c4 5518 	strd	r5, r5, [r4, #96]	; 0x60
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002220:	5098      	str	r0, [r3, r2]
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002222:	f241 121c 	movw	r2, #4380	; 0x111c
  return HAL_OK;
 8002226:	2000      	movs	r0, #0
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002228:	5099      	str	r1, [r3, r2]
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 800222a:	3148      	adds	r1, #72	; 0x48
 800222c:	f241 1228 	movw	r2, #4392	; 0x1128
 8002230:	5099      	str	r1, [r3, r2]
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002232:	6862      	ldr	r2, [r4, #4]
 8002234:	8891      	ldrh	r1, [r2, #4]
 8002236:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800223a:	6812      	ldr	r2, [r2, #0]
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800223c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  heth->gState = HAL_ETH_STATE_READY;
 8002240:	2310      	movs	r3, #16
  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002242:	6765      	str	r5, [r4, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002244:	66e3      	str	r3, [r4, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002246:	6723      	str	r3, [r4, #112]	; 0x70
}
 8002248:	b024      	add	sp, #144	; 0x90
 800224a:	bd70      	pop	{r4, r5, r6, pc}
 800224c:	58024400 	.word	0x58024400
 8002250:	000f4240 	.word	0x000f4240
 8002254:	01010000 	.word	0x01010000

08002258 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002258:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800225c:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800241c <HAL_GPIO_Init+0x1c4>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002262:	f8df c1bc 	ldr.w	ip, [pc, #444]	; 8002420 <HAL_GPIO_Init+0x1c8>
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002266:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800226a:	680a      	ldr	r2, [r1, #0]
 800226c:	fa32 f403 	lsrs.w	r4, r2, r3
 8002270:	d102      	bne.n	8002278 <HAL_GPIO_Init+0x20>
      }
    }

    position++;
  }
}
 8002272:	b003      	add	sp, #12
 8002274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002278:	2701      	movs	r7, #1
 800227a:	409f      	lsls	r7, r3
    if (iocurrent != 0x00U)
 800227c:	403a      	ands	r2, r7
 800227e:	f000 80b6 	beq.w	80023ee <HAL_GPIO_Init+0x196>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002282:	684c      	ldr	r4, [r1, #4]
 8002284:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002288:	2503      	movs	r5, #3
 800228a:	f024 0a10 	bic.w	sl, r4, #16
 800228e:	fa05 f50e 	lsl.w	r5, r5, lr
 8002292:	f10a 36ff 	add.w	r6, sl, #4294967295	; 0xffffffff
 8002296:	43ed      	mvns	r5, r5
 8002298:	2e01      	cmp	r6, #1
 800229a:	d810      	bhi.n	80022be <HAL_GPIO_Init+0x66>
        temp = GPIOx->OSPEEDR;
 800229c:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800229e:	ea06 0b05 	and.w	fp, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022a2:	68ce      	ldr	r6, [r1, #12]
 80022a4:	fa06 f60e 	lsl.w	r6, r6, lr
 80022a8:	ea46 060b 	orr.w	r6, r6, fp
        GPIOx->OSPEEDR = temp;
 80022ac:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80022ae:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022b0:	ea26 0707 	bic.w	r7, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80022b4:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80022b8:	409e      	lsls	r6, r3
 80022ba:	4337      	orrs	r7, r6
        GPIOx->OTYPER = temp;
 80022bc:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80022be:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022c0:	f1ba 0f02 	cmp.w	sl, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022c4:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022c6:	ea07 0705 	and.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ca:	fa06 f60e 	lsl.w	r6, r6, lr
 80022ce:	ea46 0607 	orr.w	r6, r6, r7
      GPIOx->PUPDR = temp;
 80022d2:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d4:	d114      	bne.n	8002300 <HAL_GPIO_Init+0xa8>
        temp = GPIOx->AFR[position >> 3U];
 80022d6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022da:	f003 0b07 	and.w	fp, r3, #7
 80022de:	270f      	movs	r7, #15
 80022e0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80022e4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80022e8:	f8da 6020 	ldr.w	r6, [sl, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022ec:	fa07 f70b 	lsl.w	r7, r7, fp
 80022f0:	ea26 0707 	bic.w	r7, r6, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80022f4:	690e      	ldr	r6, [r1, #16]
 80022f6:	fa06 f60b 	lsl.w	r6, r6, fp
 80022fa:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80022fc:	f8ca 6020 	str.w	r6, [sl, #32]
      temp = GPIOx->MODER;
 8002300:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002302:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002304:	f004 0603 	and.w	r6, r4, #3
 8002308:	fa06 fe0e 	lsl.w	lr, r6, lr
 800230c:	ea4e 0505 	orr.w	r5, lr, r5
      GPIOx->MODER = temp;
 8002310:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002312:	00e5      	lsls	r5, r4, #3
 8002314:	d56b      	bpl.n	80023ee <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002316:	f8d8 50f4 	ldr.w	r5, [r8, #244]	; 0xf4
 800231a:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800231e:	f003 0703 	and.w	r7, r3, #3
 8002322:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002326:	f045 0502 	orr.w	r5, r5, #2
 800232a:	f106 46b0 	add.w	r6, r6, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800232e:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002330:	f8c8 50f4 	str.w	r5, [r8, #244]	; 0xf4
 8002334:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002338:	f8d8 50f4 	ldr.w	r5, [r8, #244]	; 0xf4
 800233c:	f005 0502 	and.w	r5, r5, #2
 8002340:	9501      	str	r5, [sp, #4]
 8002342:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002344:	fa0e f507 	lsl.w	r5, lr, r7
        temp = SYSCFG->EXTICR[position >> 2U];
 8002348:	f8d6 a008 	ldr.w	sl, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800234c:	ea2a 0e05 	bic.w	lr, sl, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002350:	4d31      	ldr	r5, [pc, #196]	; (8002418 <HAL_GPIO_Init+0x1c0>)
 8002352:	42a8      	cmp	r0, r5
 8002354:	d04d      	beq.n	80023f2 <HAL_GPIO_Init+0x19a>
 8002356:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800235a:	42a8      	cmp	r0, r5
 800235c:	d04b      	beq.n	80023f6 <HAL_GPIO_Init+0x19e>
 800235e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002362:	42a8      	cmp	r0, r5
 8002364:	d049      	beq.n	80023fa <HAL_GPIO_Init+0x1a2>
 8002366:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800236a:	42a8      	cmp	r0, r5
 800236c:	d047      	beq.n	80023fe <HAL_GPIO_Init+0x1a6>
 800236e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002372:	42a8      	cmp	r0, r5
 8002374:	d045      	beq.n	8002402 <HAL_GPIO_Init+0x1aa>
 8002376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800237a:	42a8      	cmp	r0, r5
 800237c:	d043      	beq.n	8002406 <HAL_GPIO_Init+0x1ae>
 800237e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002382:	42a8      	cmp	r0, r5
 8002384:	d041      	beq.n	800240a <HAL_GPIO_Init+0x1b2>
 8002386:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800238a:	42a8      	cmp	r0, r5
 800238c:	d03f      	beq.n	800240e <HAL_GPIO_Init+0x1b6>
 800238e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002392:	42a8      	cmp	r0, r5
 8002394:	d03d      	beq.n	8002412 <HAL_GPIO_Init+0x1ba>
 8002396:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800239a:	42a8      	cmp	r0, r5
 800239c:	bf0c      	ite	eq
 800239e:	2509      	moveq	r5, #9
 80023a0:	250a      	movne	r5, #10
 80023a2:	40bd      	lsls	r5, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023a4:	03e7      	lsls	r7, r4, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023a6:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023aa:	60b5      	str	r5, [r6, #8]
        temp &= ~(iocurrent);
 80023ac:	ea6f 0602 	mvn.w	r6, r2
        temp = EXTI_CurrentCPU->IMR1;
 80023b0:	f8dc 5000 	ldr.w	r5, [ip]
        temp &= ~(iocurrent);
 80023b4:	bf54      	ite	pl
 80023b6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80023b8:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023ba:	03a7      	lsls	r7, r4, #14
        EXTI_CurrentCPU->IMR1 = temp;
 80023bc:	f8cc 5000 	str.w	r5, [ip]
        temp = EXTI_CurrentCPU->EMR1;
 80023c0:	f8dc 5004 	ldr.w	r5, [ip, #4]
        temp &= ~(iocurrent);
 80023c4:	bf54      	ite	pl
 80023c6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80023c8:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ca:	02e7      	lsls	r7, r4, #11
        EXTI->RTSR1 = temp;
 80023cc:	f04f 47b0 	mov.w	r7, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
 80023d0:	f8cc 5004 	str.w	r5, [ip, #4]
        temp = EXTI->RTSR1;
 80023d4:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~(iocurrent);
 80023d8:	bf54      	ite	pl
 80023da:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80023dc:	4315      	orrmi	r5, r2
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023de:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR1 = temp;
 80023e0:	603d      	str	r5, [r7, #0]
        temp = EXTI->FTSR1;
 80023e2:	687d      	ldr	r5, [r7, #4]
        temp &= ~(iocurrent);
 80023e4:	bf54      	ite	pl
 80023e6:	4035      	andpl	r5, r6
          temp |= iocurrent;
 80023e8:	4315      	orrmi	r5, r2
        EXTI->FTSR1 = temp;
 80023ea:	f8c9 5004 	str.w	r5, [r9, #4]
    position++;
 80023ee:	3301      	adds	r3, #1
 80023f0:	e73b      	b.n	800226a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023f2:	2500      	movs	r5, #0
 80023f4:	e7d5      	b.n	80023a2 <HAL_GPIO_Init+0x14a>
 80023f6:	2501      	movs	r5, #1
 80023f8:	e7d3      	b.n	80023a2 <HAL_GPIO_Init+0x14a>
 80023fa:	2502      	movs	r5, #2
 80023fc:	e7d1      	b.n	80023a2 <HAL_GPIO_Init+0x14a>
 80023fe:	2503      	movs	r5, #3
 8002400:	e7cf      	b.n	80023a2 <HAL_GPIO_Init+0x14a>
 8002402:	2504      	movs	r5, #4
 8002404:	e7cd      	b.n	80023a2 <HAL_GPIO_Init+0x14a>
 8002406:	2505      	movs	r5, #5
 8002408:	e7cb      	b.n	80023a2 <HAL_GPIO_Init+0x14a>
 800240a:	2506      	movs	r5, #6
 800240c:	e7c9      	b.n	80023a2 <HAL_GPIO_Init+0x14a>
 800240e:	2507      	movs	r5, #7
 8002410:	e7c7      	b.n	80023a2 <HAL_GPIO_Init+0x14a>
 8002412:	2508      	movs	r5, #8
 8002414:	e7c5      	b.n	80023a2 <HAL_GPIO_Init+0x14a>
 8002416:	bf00      	nop
 8002418:	58020000 	.word	0x58020000
 800241c:	58024400 	.word	0x58024400
 8002420:	58000080 	.word	0x58000080

08002424 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002424:	b10a      	cbz	r2, 800242a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002426:	6181      	str	r1, [r0, #24]
  }
}
 8002428:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800242a:	0409      	lsls	r1, r1, #16
 800242c:	e7fb      	b.n	8002426 <HAL_GPIO_WritePin+0x2>
	...

08002430 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002430:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002432:	4c10      	ldr	r4, [pc, #64]	; (8002474 <HAL_PWREx_ConfigSupply+0x44>)
 8002434:	68e3      	ldr	r3, [r4, #12]
 8002436:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800243a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800243c:	d105      	bne.n	800244a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800243e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002442:	1a18      	subs	r0, r3, r0
 8002444:	bf18      	it	ne
 8002446:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002448:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800244a:	f023 0307 	bic.w	r3, r3, #7
 800244e:	4318      	orrs	r0, r3
 8002450:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8002452:	f7fe fe93 	bl	800117c <HAL_GetTick>
 8002456:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002458:	6863      	ldr	r3, [r4, #4]
 800245a:	049b      	lsls	r3, r3, #18
 800245c:	d501      	bpl.n	8002462 <HAL_PWREx_ConfigSupply+0x32>
  return HAL_OK;
 800245e:	2000      	movs	r0, #0
 8002460:	e7f2      	b.n	8002448 <HAL_PWREx_ConfigSupply+0x18>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002462:	f7fe fe8b 	bl	800117c <HAL_GetTick>
 8002466:	1b40      	subs	r0, r0, r5
 8002468:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800246c:	d9f4      	bls.n	8002458 <HAL_PWREx_ConfigSupply+0x28>
      return HAL_ERROR;
 800246e:	2001      	movs	r0, #1
 8002470:	e7ea      	b.n	8002448 <HAL_PWREx_ConfigSupply+0x18>
 8002472:	bf00      	nop
 8002474:	58024800 	.word	0x58024800

08002478 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800247a:	4604      	mov	r4, r0
 800247c:	2800      	cmp	r0, #0
 800247e:	d074      	beq.n	800256a <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002480:	6803      	ldr	r3, [r0, #0]
 8002482:	07d8      	lsls	r0, r3, #31
 8002484:	d45e      	bmi.n	8002544 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002486:	6823      	ldr	r3, [r4, #0]
 8002488:	0799      	lsls	r1, r3, #30
 800248a:	f100 80b0 	bmi.w	80025ee <HAL_RCC_OscConfig+0x176>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800248e:	6823      	ldr	r3, [r4, #0]
 8002490:	06da      	lsls	r2, r3, #27
 8002492:	d527      	bpl.n	80024e4 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002494:	4baa      	ldr	r3, [pc, #680]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
 8002496:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002498:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800249e:	2a08      	cmp	r2, #8
 80024a0:	d007      	beq.n	80024b2 <HAL_RCC_OscConfig+0x3a>
 80024a2:	2a18      	cmp	r2, #24
 80024a4:	f040 810e 	bne.w	80026c4 <HAL_RCC_OscConfig+0x24c>
 80024a8:	f001 0203 	and.w	r2, r1, #3
 80024ac:	2a01      	cmp	r2, #1
 80024ae:	f040 8109 	bne.w	80026c4 <HAL_RCC_OscConfig+0x24c>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	05db      	lsls	r3, r3, #23
 80024b6:	d502      	bpl.n	80024be <HAL_RCC_OscConfig+0x46>
 80024b8:	69e3      	ldr	r3, [r4, #28]
 80024ba:	2b80      	cmp	r3, #128	; 0x80
 80024bc:	d155      	bne.n	800256a <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024be:	f7fe fe63 	bl	8001188 <HAL_GetREVID>
 80024c2:	f241 0303 	movw	r3, #4099	; 0x1003
 80024c6:	6a21      	ldr	r1, [r4, #32]
 80024c8:	4298      	cmp	r0, r3
 80024ca:	4b9d      	ldr	r3, [pc, #628]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
 80024cc:	f200 80f3 	bhi.w	80026b6 <HAL_RCC_OscConfig+0x23e>
 80024d0:	685a      	ldr	r2, [r3, #4]
 80024d2:	2920      	cmp	r1, #32
 80024d4:	f022 42f8 	bic.w	r2, r2, #2080374784	; 0x7c000000
 80024d8:	bf0c      	ite	eq
 80024da:	f042 4280 	orreq.w	r2, r2, #1073741824	; 0x40000000
 80024de:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80024e2:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	0719      	lsls	r1, r3, #28
 80024e8:	f100 812e 	bmi.w	8002748 <HAL_RCC_OscConfig+0x2d0>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	069a      	lsls	r2, r3, #26
 80024f0:	f100 814f 	bmi.w	8002792 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024f4:	6823      	ldr	r3, [r4, #0]
 80024f6:	075d      	lsls	r5, r3, #29
 80024f8:	d51e      	bpl.n	8002538 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024fa:	4d92      	ldr	r5, [pc, #584]	; (8002744 <HAL_RCC_OscConfig+0x2cc>)
 80024fc:	682b      	ldr	r3, [r5, #0]
 80024fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002502:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002504:	f7fe fe3a 	bl	800117c <HAL_GetTick>
 8002508:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800250a:	682b      	ldr	r3, [r5, #0]
 800250c:	05da      	lsls	r2, r3, #23
 800250e:	f140 8165 	bpl.w	80027dc <HAL_RCC_OscConfig+0x364>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002512:	68a3      	ldr	r3, [r4, #8]
 8002514:	4d8a      	ldr	r5, [pc, #552]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
 8002516:	2b01      	cmp	r3, #1
 8002518:	f040 8167 	bne.w	80027ea <HAL_RCC_OscConfig+0x372>
 800251c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002528:	f7fe fe28 	bl	800117c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800252c:	4e84      	ldr	r6, [pc, #528]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 800252e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002530:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002532:	079b      	lsls	r3, r3, #30
 8002534:	f140 817f 	bpl.w	8002836 <HAL_RCC_OscConfig+0x3be>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002538:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800253a:	2900      	cmp	r1, #0
 800253c:	f040 8182 	bne.w	8002844 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8002540:	2000      	movs	r0, #0
 8002542:	e02a      	b.n	800259a <HAL_RCC_OscConfig+0x122>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002544:	4b7e      	ldr	r3, [pc, #504]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
 8002546:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002548:	6a99      	ldr	r1, [r3, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254a:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800254e:	2a10      	cmp	r2, #16
 8002550:	d005      	beq.n	800255e <HAL_RCC_OscConfig+0xe6>
 8002552:	2a18      	cmp	r2, #24
 8002554:	d10b      	bne.n	800256e <HAL_RCC_OscConfig+0xf6>
 8002556:	f001 0203 	and.w	r2, r1, #3
 800255a:	2a02      	cmp	r2, #2
 800255c:	d107      	bne.n	800256e <HAL_RCC_OscConfig+0xf6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	039a      	lsls	r2, r3, #14
 8002562:	d590      	bpl.n	8002486 <HAL_RCC_OscConfig+0xe>
 8002564:	6863      	ldr	r3, [r4, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d18d      	bne.n	8002486 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 800256a:	2001      	movs	r0, #1
 800256c:	e015      	b.n	800259a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256e:	6862      	ldr	r2, [r4, #4]
 8002570:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002574:	d112      	bne.n	800259c <HAL_RCC_OscConfig+0x124>
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800257c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800257e:	f7fe fdfd 	bl	800117c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002582:	4e6f      	ldr	r6, [pc, #444]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8002584:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002586:	6833      	ldr	r3, [r6, #0]
 8002588:	039b      	lsls	r3, r3, #14
 800258a:	f53f af7c 	bmi.w	8002486 <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800258e:	f7fe fdf5 	bl	800117c <HAL_GetTick>
 8002592:	1b40      	subs	r0, r0, r5
 8002594:	2864      	cmp	r0, #100	; 0x64
 8002596:	d9f6      	bls.n	8002586 <HAL_RCC_OscConfig+0x10e>
            return HAL_TIMEOUT;
 8002598:	2003      	movs	r0, #3
}
 800259a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259c:	4d68      	ldr	r5, [pc, #416]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
 800259e:	682b      	ldr	r3, [r5, #0]
 80025a0:	b99a      	cbnz	r2, 80025ca <HAL_RCC_OscConfig+0x152>
 80025a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a6:	602b      	str	r3, [r5, #0]
 80025a8:	682b      	ldr	r3, [r5, #0]
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80025b0:	f7fe fde4 	bl	800117c <HAL_GetTick>
 80025b4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025b6:	682b      	ldr	r3, [r5, #0]
 80025b8:	039f      	lsls	r7, r3, #14
 80025ba:	f57f af64 	bpl.w	8002486 <HAL_RCC_OscConfig+0xe>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025be:	f7fe fddd 	bl	800117c <HAL_GetTick>
 80025c2:	1b80      	subs	r0, r0, r6
 80025c4:	2864      	cmp	r0, #100	; 0x64
 80025c6:	d9f6      	bls.n	80025b6 <HAL_RCC_OscConfig+0x13e>
 80025c8:	e7e6      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ca:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80025ce:	d107      	bne.n	80025e0 <HAL_RCC_OscConfig+0x168>
 80025d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d4:	602b      	str	r3, [r5, #0]
 80025d6:	682b      	ldr	r3, [r5, #0]
 80025d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025dc:	602b      	str	r3, [r5, #0]
 80025de:	e7ce      	b.n	800257e <HAL_RCC_OscConfig+0x106>
 80025e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e4:	602b      	str	r3, [r5, #0]
 80025e6:	682b      	ldr	r3, [r5, #0]
 80025e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ec:	e7f6      	b.n	80025dc <HAL_RCC_OscConfig+0x164>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ee:	4b54      	ldr	r3, [pc, #336]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
 80025f0:	691a      	ldr	r2, [r3, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025f2:	6a99      	ldr	r1, [r3, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025f4:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 80025f8:	d003      	beq.n	8002602 <HAL_RCC_OscConfig+0x18a>
 80025fa:	2a18      	cmp	r2, #24
 80025fc:	d11f      	bne.n	800263e <HAL_RCC_OscConfig+0x1c6>
 80025fe:	078e      	lsls	r6, r1, #30
 8002600:	d11d      	bne.n	800263e <HAL_RCC_OscConfig+0x1c6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	075d      	lsls	r5, r3, #29
 8002606:	d502      	bpl.n	800260e <HAL_RCC_OscConfig+0x196>
 8002608:	68e3      	ldr	r3, [r4, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0ad      	beq.n	800256a <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260e:	f7fe fdbb 	bl	8001188 <HAL_GetREVID>
 8002612:	f241 0303 	movw	r3, #4099	; 0x1003
 8002616:	6921      	ldr	r1, [r4, #16]
 8002618:	4298      	cmp	r0, r3
 800261a:	4b49      	ldr	r3, [pc, #292]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	d809      	bhi.n	8002634 <HAL_RCC_OscConfig+0x1bc>
 8002620:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8002624:	2940      	cmp	r1, #64	; 0x40
 8002626:	bf0c      	ite	eq
 8002628:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
 800262c:	ea42 3201 	orrne.w	r2, r2, r1, lsl #12
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	e72c      	b.n	800248e <HAL_RCC_OscConfig+0x16>
 8002634:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8002638:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800263c:	e7f8      	b.n	8002630 <HAL_RCC_OscConfig+0x1b8>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800263e:	68e1      	ldr	r1, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002640:	681a      	ldr	r2, [r3, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002642:	b339      	cbz	r1, 8002694 <HAL_RCC_OscConfig+0x21c>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002644:	f022 0219 	bic.w	r2, r2, #25
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002648:	4d3d      	ldr	r5, [pc, #244]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800264e:	f7fe fd95 	bl	800117c <HAL_GetTick>
 8002652:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002654:	682b      	ldr	r3, [r5, #0]
 8002656:	0758      	lsls	r0, r3, #29
 8002658:	d511      	bpl.n	800267e <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265a:	f7fe fd95 	bl	8001188 <HAL_GetREVID>
 800265e:	f241 0303 	movw	r3, #4099	; 0x1003
 8002662:	6922      	ldr	r2, [r4, #16]
 8002664:	4298      	cmp	r0, r3
 8002666:	686b      	ldr	r3, [r5, #4]
 8002668:	d80f      	bhi.n	800268a <HAL_RCC_OscConfig+0x212>
 800266a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800266e:	2a40      	cmp	r2, #64	; 0x40
 8002670:	bf0c      	ite	eq
 8002672:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 8002676:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800267a:	606b      	str	r3, [r5, #4]
 800267c:	e707      	b.n	800248e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267e:	f7fe fd7d 	bl	800117c <HAL_GetTick>
 8002682:	1b80      	subs	r0, r0, r6
 8002684:	2802      	cmp	r0, #2
 8002686:	d9e5      	bls.n	8002654 <HAL_RCC_OscConfig+0x1dc>
 8002688:	e786      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800268e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002692:	e7f2      	b.n	800267a <HAL_RCC_OscConfig+0x202>
        __HAL_RCC_HSI_DISABLE();
 8002694:	f022 0201 	bic.w	r2, r2, #1
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002698:	4e29      	ldr	r6, [pc, #164]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 800269a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800269c:	f7fe fd6e 	bl	800117c <HAL_GetTick>
 80026a0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026a2:	6833      	ldr	r3, [r6, #0]
 80026a4:	0759      	lsls	r1, r3, #29
 80026a6:	f57f aef2 	bpl.w	800248e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026aa:	f7fe fd67 	bl	800117c <HAL_GetTick>
 80026ae:	1b40      	subs	r0, r0, r5
 80026b0:	2802      	cmp	r0, #2
 80026b2:	d9f6      	bls.n	80026a2 <HAL_RCC_OscConfig+0x22a>
 80026b4:	e770      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	f022 527c 	bic.w	r2, r2, #1056964608	; 0x3f000000
 80026bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026c0:	60da      	str	r2, [r3, #12]
 80026c2:	e70f      	b.n	80024e4 <HAL_RCC_OscConfig+0x6c>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80026c4:	69e2      	ldr	r2, [r4, #28]
 80026c6:	b34a      	cbz	r2, 800271c <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_CSI_ENABLE();
 80026c8:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026ca:	4d1d      	ldr	r5, [pc, #116]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_CSI_ENABLE();
 80026cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026d2:	f7fe fd53 	bl	800117c <HAL_GetTick>
 80026d6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026d8:	682b      	ldr	r3, [r5, #0]
 80026da:	05df      	lsls	r7, r3, #23
 80026dc:	d511      	bpl.n	8002702 <HAL_RCC_OscConfig+0x28a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026de:	f7fe fd53 	bl	8001188 <HAL_GetREVID>
 80026e2:	f241 0303 	movw	r3, #4099	; 0x1003
 80026e6:	6a22      	ldr	r2, [r4, #32]
 80026e8:	4298      	cmp	r0, r3
 80026ea:	d810      	bhi.n	800270e <HAL_RCC_OscConfig+0x296>
 80026ec:	686b      	ldr	r3, [r5, #4]
 80026ee:	2a20      	cmp	r2, #32
 80026f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80026f4:	bf0c      	ite	eq
 80026f6:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 80026fa:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 80026fe:	606b      	str	r3, [r5, #4]
 8002700:	e6f0      	b.n	80024e4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002702:	f7fe fd3b 	bl	800117c <HAL_GetTick>
 8002706:	1b80      	subs	r0, r0, r6
 8002708:	2802      	cmp	r0, #2
 800270a:	d9e5      	bls.n	80026d8 <HAL_RCC_OscConfig+0x260>
 800270c:	e744      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800270e:	68eb      	ldr	r3, [r5, #12]
 8002710:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002714:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002718:	60eb      	str	r3, [r5, #12]
 800271a:	e6e3      	b.n	80024e4 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_CSI_DISABLE();
 800271c:	681a      	ldr	r2, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800271e:	4e08      	ldr	r6, [pc, #32]	; (8002740 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_CSI_DISABLE();
 8002720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002724:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002726:	f7fe fd29 	bl	800117c <HAL_GetTick>
 800272a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800272c:	6833      	ldr	r3, [r6, #0]
 800272e:	05d8      	lsls	r0, r3, #23
 8002730:	f57f aed8 	bpl.w	80024e4 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002734:	f7fe fd22 	bl	800117c <HAL_GetTick>
 8002738:	1b40      	subs	r0, r0, r5
 800273a:	2802      	cmp	r0, #2
 800273c:	d9f6      	bls.n	800272c <HAL_RCC_OscConfig+0x2b4>
 800273e:	e72b      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
 8002740:	58024400 	.word	0x58024400
 8002744:	58024800 	.word	0x58024800
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002748:	6963      	ldr	r3, [r4, #20]
 800274a:	4d96      	ldr	r5, [pc, #600]	; (80029a4 <HAL_RCC_OscConfig+0x52c>)
 800274c:	b183      	cbz	r3, 8002770 <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_LSI_ENABLE();
 800274e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002750:	f043 0301 	orr.w	r3, r3, #1
 8002754:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002756:	f7fe fd11 	bl	800117c <HAL_GetTick>
 800275a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800275c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800275e:	079b      	lsls	r3, r3, #30
 8002760:	f53f aec4 	bmi.w	80024ec <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002764:	f7fe fd0a 	bl	800117c <HAL_GetTick>
 8002768:	1b80      	subs	r0, r0, r6
 800276a:	2802      	cmp	r0, #2
 800276c:	d9f6      	bls.n	800275c <HAL_RCC_OscConfig+0x2e4>
 800276e:	e713      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_LSI_DISABLE();
 8002770:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002778:	f7fe fd00 	bl	800117c <HAL_GetTick>
 800277c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800277e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002780:	079f      	lsls	r7, r3, #30
 8002782:	f57f aeb3 	bpl.w	80024ec <HAL_RCC_OscConfig+0x74>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002786:	f7fe fcf9 	bl	800117c <HAL_GetTick>
 800278a:	1b80      	subs	r0, r0, r6
 800278c:	2802      	cmp	r0, #2
 800278e:	d9f6      	bls.n	800277e <HAL_RCC_OscConfig+0x306>
 8002790:	e702      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002792:	69a3      	ldr	r3, [r4, #24]
 8002794:	4d83      	ldr	r5, [pc, #524]	; (80029a4 <HAL_RCC_OscConfig+0x52c>)
 8002796:	b183      	cbz	r3, 80027ba <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 8002798:	682b      	ldr	r3, [r5, #0]
 800279a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800279e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80027a0:	f7fe fcec 	bl	800117c <HAL_GetTick>
 80027a4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027a6:	682b      	ldr	r3, [r5, #0]
 80027a8:	0498      	lsls	r0, r3, #18
 80027aa:	f53f aea3 	bmi.w	80024f4 <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80027ae:	f7fe fce5 	bl	800117c <HAL_GetTick>
 80027b2:	1b80      	subs	r0, r0, r6
 80027b4:	2802      	cmp	r0, #2
 80027b6:	d9f6      	bls.n	80027a6 <HAL_RCC_OscConfig+0x32e>
 80027b8:	e6ee      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
      __HAL_RCC_HSI48_DISABLE();
 80027ba:	682b      	ldr	r3, [r5, #0]
 80027bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027c0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80027c2:	f7fe fcdb 	bl	800117c <HAL_GetTick>
 80027c6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027c8:	682b      	ldr	r3, [r5, #0]
 80027ca:	0499      	lsls	r1, r3, #18
 80027cc:	f57f ae92 	bpl.w	80024f4 <HAL_RCC_OscConfig+0x7c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80027d0:	f7fe fcd4 	bl	800117c <HAL_GetTick>
 80027d4:	1b80      	subs	r0, r0, r6
 80027d6:	2802      	cmp	r0, #2
 80027d8:	d9f6      	bls.n	80027c8 <HAL_RCC_OscConfig+0x350>
 80027da:	e6dd      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80027dc:	f7fe fcce 	bl	800117c <HAL_GetTick>
 80027e0:	1b80      	subs	r0, r0, r6
 80027e2:	2864      	cmp	r0, #100	; 0x64
 80027e4:	f67f ae91 	bls.w	800250a <HAL_RCC_OscConfig+0x92>
 80027e8:	e6d6      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ea:	b9b3      	cbnz	r3, 800281a <HAL_RCC_OscConfig+0x3a2>
 80027ec:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ee:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	672b      	str	r3, [r5, #112]	; 0x70
 80027f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80027fa:	f023 0304 	bic.w	r3, r3, #4
 80027fe:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002800:	f7fe fcbc 	bl	800117c <HAL_GetTick>
 8002804:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002806:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002808:	0798      	lsls	r0, r3, #30
 800280a:	f57f ae95 	bpl.w	8002538 <HAL_RCC_OscConfig+0xc0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe fcb5 	bl	800117c <HAL_GetTick>
 8002812:	1b80      	subs	r0, r0, r6
 8002814:	42b8      	cmp	r0, r7
 8002816:	d9f6      	bls.n	8002806 <HAL_RCC_OscConfig+0x38e>
 8002818:	e6be      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800281a:	2b05      	cmp	r3, #5
 800281c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800281e:	d103      	bne.n	8002828 <HAL_RCC_OscConfig+0x3b0>
 8002820:	f043 0304 	orr.w	r3, r3, #4
 8002824:	672b      	str	r3, [r5, #112]	; 0x70
 8002826:	e679      	b.n	800251c <HAL_RCC_OscConfig+0xa4>
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	672b      	str	r3, [r5, #112]	; 0x70
 800282e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002830:	f023 0304 	bic.w	r3, r3, #4
 8002834:	e675      	b.n	8002522 <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe fca1 	bl	800117c <HAL_GetTick>
 800283a:	1b40      	subs	r0, r0, r5
 800283c:	42b8      	cmp	r0, r7
 800283e:	f67f ae77 	bls.w	8002530 <HAL_RCC_OscConfig+0xb8>
 8002842:	e6a9      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002844:	4d57      	ldr	r5, [pc, #348]	; (80029a4 <HAL_RCC_OscConfig+0x52c>)
 8002846:	692b      	ldr	r3, [r5, #16]
 8002848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800284c:	2b18      	cmp	r3, #24
 800284e:	d07a      	beq.n	8002946 <HAL_RCC_OscConfig+0x4ce>
        __HAL_RCC_PLL_DISABLE();
 8002850:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002852:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8002854:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002858:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285a:	d167      	bne.n	800292c <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
 800285c:	f7fe fc8e 	bl	800117c <HAL_GetTick>
 8002860:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002862:	682b      	ldr	r3, [r5, #0]
 8002864:	0199      	lsls	r1, r3, #6
 8002866:	d45b      	bmi.n	8002920 <HAL_RCC_OscConfig+0x4a8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002868:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800286a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800286c:	f423 737c 	bic.w	r3, r3, #1008	; 0x3f0
 8002870:	f023 0303 	bic.w	r3, r3, #3
 8002874:	4313      	orrs	r3, r2
 8002876:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002878:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800287c:	62ab      	str	r3, [r5, #40]	; 0x28
 800287e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002880:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002882:	3b01      	subs	r3, #1
 8002884:	3a01      	subs	r2, #1
 8002886:	025b      	lsls	r3, r3, #9
 8002888:	0412      	lsls	r2, r2, #16
 800288a:	b29b      	uxth	r3, r3
 800288c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002890:	4313      	orrs	r3, r2
 8002892:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002894:	3a01      	subs	r2, #1
 8002896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800289a:	4313      	orrs	r3, r2
 800289c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800289e:	3a01      	subs	r2, #1
 80028a0:	0612      	lsls	r2, r2, #24
 80028a2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80028a6:	4313      	orrs	r3, r2
 80028a8:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80028aa:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80028ac:	f023 0301 	bic.w	r3, r3, #1
 80028b0:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80028b4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80028b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028be:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80028c2:	636b      	str	r3, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80028c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80028c8:	f023 030c 	bic.w	r3, r3, #12
 80028cc:	4313      	orrs	r3, r2
 80028ce:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80028d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80028d4:	f023 0302 	bic.w	r3, r3, #2
 80028d8:	4313      	orrs	r3, r2
 80028da:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028dc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80028de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80028e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ea:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80028ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f2:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 80028f4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 80028fc:	682b      	ldr	r3, [r5, #0]
 80028fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002902:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002904:	f7fe fc3a 	bl	800117c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002908:	4d26      	ldr	r5, [pc, #152]	; (80029a4 <HAL_RCC_OscConfig+0x52c>)
        tickstart = HAL_GetTick();
 800290a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800290c:	682b      	ldr	r3, [r5, #0]
 800290e:	019a      	lsls	r2, r3, #6
 8002910:	f53f ae16 	bmi.w	8002540 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe fc32 	bl	800117c <HAL_GetTick>
 8002918:	1b00      	subs	r0, r0, r4
 800291a:	2802      	cmp	r0, #2
 800291c:	d9f6      	bls.n	800290c <HAL_RCC_OscConfig+0x494>
 800291e:	e63b      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fc2c 	bl	800117c <HAL_GetTick>
 8002924:	1b80      	subs	r0, r0, r6
 8002926:	2802      	cmp	r0, #2
 8002928:	d99b      	bls.n	8002862 <HAL_RCC_OscConfig+0x3ea>
 800292a:	e635      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
        tickstart = HAL_GetTick();
 800292c:	f7fe fc26 	bl	800117c <HAL_GetTick>
 8002930:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002932:	682b      	ldr	r3, [r5, #0]
 8002934:	019b      	lsls	r3, r3, #6
 8002936:	f57f ae03 	bpl.w	8002540 <HAL_RCC_OscConfig+0xc8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293a:	f7fe fc1f 	bl	800117c <HAL_GetTick>
 800293e:	1b00      	subs	r0, r0, r4
 8002940:	2802      	cmp	r0, #2
 8002942:	d9f6      	bls.n	8002932 <HAL_RCC_OscConfig+0x4ba>
 8002944:	e628      	b.n	8002598 <HAL_RCC_OscConfig+0x120>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002946:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002948:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800294a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800294c:	f43f ae0d 	beq.w	800256a <HAL_RCC_OscConfig+0xf2>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002950:	f002 0103 	and.w	r1, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002954:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002956:	4281      	cmp	r1, r0
 8002958:	f47f ae07 	bne.w	800256a <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800295c:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002960:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002962:	428a      	cmp	r2, r1
 8002964:	f47f ae01 	bne.w	800256a <HAL_RCC_OscConfig+0xf2>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002968:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800296a:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800296e:	3a01      	subs	r2, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002970:	4291      	cmp	r1, r2
 8002972:	f47f adfa 	bne.w	800256a <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002976:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002978:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800297c:	3a01      	subs	r2, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800297e:	4291      	cmp	r1, r2
 8002980:	f47f adf3 	bne.w	800256a <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002984:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002986:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800298a:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800298c:	4291      	cmp	r1, r2
 800298e:	f47f adec 	bne.w	800256a <HAL_RCC_OscConfig+0xf2>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002992:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002994:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002998:	3a01      	subs	r2, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800299a:	4293      	cmp	r3, r2
 800299c:	f43f add0 	beq.w	8002540 <HAL_RCC_OscConfig+0xc8>
 80029a0:	e5e3      	b.n	800256a <HAL_RCC_OscConfig+0xf2>
 80029a2:	bf00      	nop
 80029a4:	58024400 	.word	0x58024400

080029a8 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029a8:	4b48      	ldr	r3, [pc, #288]	; (8002acc <HAL_RCC_GetSysClockFreq+0x124>)
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80029b0:	2a10      	cmp	r2, #16
{
 80029b2:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b4:	f000 8086 	beq.w	8002ac4 <HAL_RCC_GetSysClockFreq+0x11c>
 80029b8:	2a18      	cmp	r2, #24
 80029ba:	d00c      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0x2e>
 80029bc:	2a00      	cmp	r2, #0
 80029be:	f040 8083 	bne.w	8002ac8 <HAL_RCC_GetSysClockFreq+0x120>
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	4842      	ldr	r0, [pc, #264]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x128>)
 80029c6:	f012 0f20 	tst.w	r2, #32
 80029ca:	d003      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80029d2:	40d8      	lsrs	r0, r3
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80029d4:	bd30      	pop	{r4, r5, pc}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029d6:	6a99      	ldr	r1, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80029d8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    if (pllm != 0U)
 80029dc:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80029e0:	f3c5 1005 	ubfx	r0, r5, #4, #6
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80029e4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    if (pllm != 0U)
 80029e6:	d0f5      	beq.n	80029d4 <HAL_RCC_GetSysClockFreq+0x2c>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80029e8:	f3c4 04cc 	ubfx	r4, r4, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029ec:	f002 0201 	and.w	r2, r2, #1
 80029f0:	ee07 0a90 	vmov	s15, r0
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029f4:	f001 0103 	and.w	r1, r1, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80029f8:	4362      	muls	r2, r4
 80029fa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80029fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a02:	2901      	cmp	r1, #1
 8002a04:	ee07 2a90 	vmov	s15, r2
 8002a08:	eefa 7ae9 	vcvt.f32.s32	s15, s15, #13
 8002a0c:	d04c      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x100>
 8002a0e:	2902      	cmp	r1, #2
 8002a10:	d03c      	beq.n	8002a8c <HAL_RCC_GetSysClockFreq+0xe4>
 8002a12:	2900      	cmp	r1, #0
 8002a14:	d148      	bne.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x100>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	0692      	lsls	r2, r2, #26
 8002a1a:	d527      	bpl.n	8002a6c <HAL_RCC_GetSysClockFreq+0xc4>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a1c:	6819      	ldr	r1, [r3, #0]
 8002a1e:	4a2c      	ldr	r2, [pc, #176]	; (8002ad0 <HAL_RCC_GetSysClockFreq+0x128>)
 8002a20:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002a26:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2c:	ee07 2a10 	vmov	s14, r2
 8002a30:	eef8 5ac7 	vcvt.f32.s32	s11, s14
 8002a34:	ee85 7aa6 	vdiv.f32	s14, s11, s13
 8002a38:	ee06 3a90 	vmov	s13, r3
 8002a3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002a40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a44:	ee77 7a86 	vadd.f32	s15, s15, s12
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_RCC_GetSysClockFreq+0x124>)
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a4a:	ee67 7a87 	vmul.f32	s15, s15, s14
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a50:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002a54:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002a56:	ee07 3a10 	vmov	s14, r3
 8002a5a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8002a5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a62:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8002a66:	ee17 0a90 	vmov	r0, s15
 8002a6a:	e7b3      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x2c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a72:	ee07 3a10 	vmov	s14, r3
 8002a76:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002a82:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8002ad4 <HAL_RCC_GetSysClockFreq+0x12c>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a86:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002a8a:	e7dd      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0xa0>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a92:	ee07 3a10 	vmov	s14, r3
 8002a96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002aa2:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 8002ad8 <HAL_RCC_GetSysClockFreq+0x130>
 8002aa6:	e7ee      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xde>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aae:	ee07 3a10 	vmov	s14, r3
 8002ab2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aba:	ee77 7a86 	vadd.f32	s15, s15, s12
 8002abe:	ed9f 6a07 	vldr	s12, [pc, #28]	; 8002adc <HAL_RCC_GetSysClockFreq+0x134>
 8002ac2:	e7e0      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac4:	4806      	ldr	r0, [pc, #24]	; (8002ae0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ac6:	e785      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x2c>
    sysclockfreq = CSI_VALUE;
 8002ac8:	4806      	ldr	r0, [pc, #24]	; (8002ae4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002aca:	e783      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x2c>
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	03d09000 	.word	0x03d09000
 8002ad4:	4c742400 	.word	0x4c742400
 8002ad8:	4bbebc20 	.word	0x4bbebc20
 8002adc:	4a742400 	.word	0x4a742400
 8002ae0:	017d7840 	.word	0x017d7840
 8002ae4:	003d0900 	.word	0x003d0900

08002ae8 <HAL_RCC_ClockConfig>:
{
 8002ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aec:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002aee:	4604      	mov	r4, r0
 8002af0:	b910      	cbnz	r0, 8002af8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002af2:	2001      	movs	r0, #1
}
 8002af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af8:	4a88      	ldr	r2, [pc, #544]	; (8002d1c <HAL_RCC_ClockConfig+0x234>)
 8002afa:	6813      	ldr	r3, [r2, #0]
 8002afc:	f003 030f 	and.w	r3, r3, #15
 8002b00:	428b      	cmp	r3, r1
 8002b02:	f0c0 8093 	bcc.w	8002c2c <HAL_RCC_ClockConfig+0x144>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b06:	6823      	ldr	r3, [r4, #0]
 8002b08:	075f      	lsls	r7, r3, #29
 8002b0a:	f100 809b 	bmi.w	8002c44 <HAL_RCC_ClockConfig+0x15c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0e:	071e      	lsls	r6, r3, #28
 8002b10:	d50b      	bpl.n	8002b2a <HAL_RCC_ClockConfig+0x42>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b12:	4983      	ldr	r1, [pc, #524]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
 8002b14:	6966      	ldr	r6, [r4, #20]
 8002b16:	69c8      	ldr	r0, [r1, #28]
 8002b18:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002b1c:	4286      	cmp	r6, r0
 8002b1e:	d904      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b20:	69ca      	ldr	r2, [r1, #28]
 8002b22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b26:	4332      	orrs	r2, r6
 8002b28:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	06d8      	lsls	r0, r3, #27
 8002b2c:	d50b      	bpl.n	8002b46 <HAL_RCC_ClockConfig+0x5e>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b2e:	497c      	ldr	r1, [pc, #496]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
 8002b30:	69a6      	ldr	r6, [r4, #24]
 8002b32:	69c8      	ldr	r0, [r1, #28]
 8002b34:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002b38:	4286      	cmp	r6, r0
 8002b3a:	d904      	bls.n	8002b46 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b3c:	69ca      	ldr	r2, [r1, #28]
 8002b3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002b42:	4332      	orrs	r2, r6
 8002b44:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b46:	0699      	lsls	r1, r3, #26
 8002b48:	d50b      	bpl.n	8002b62 <HAL_RCC_ClockConfig+0x7a>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b4a:	4975      	ldr	r1, [pc, #468]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
 8002b4c:	69e6      	ldr	r6, [r4, #28]
 8002b4e:	6a08      	ldr	r0, [r1, #32]
 8002b50:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002b54:	4286      	cmp	r6, r0
 8002b56:	d904      	bls.n	8002b62 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002b58:	6a0a      	ldr	r2, [r1, #32]
 8002b5a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b5e:	4332      	orrs	r2, r6
 8002b60:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b62:	079a      	lsls	r2, r3, #30
 8002b64:	d50b      	bpl.n	8002b7e <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b66:	496e      	ldr	r1, [pc, #440]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
 8002b68:	68e6      	ldr	r6, [r4, #12]
 8002b6a:	6988      	ldr	r0, [r1, #24]
 8002b6c:	f000 000f 	and.w	r0, r0, #15
 8002b70:	4286      	cmp	r6, r0
 8002b72:	d904      	bls.n	8002b7e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b74:	698a      	ldr	r2, [r1, #24]
 8002b76:	f022 020f 	bic.w	r2, r2, #15
 8002b7a:	4332      	orrs	r2, r6
 8002b7c:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7e:	07df      	lsls	r7, r3, #31
 8002b80:	d46e      	bmi.n	8002c60 <HAL_RCC_ClockConfig+0x178>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	079e      	lsls	r6, r3, #30
 8002b86:	f100 80a1 	bmi.w	8002ccc <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8a:	4964      	ldr	r1, [pc, #400]	; (8002d1c <HAL_RCC_ClockConfig+0x234>)
 8002b8c:	680a      	ldr	r2, [r1, #0]
 8002b8e:	f002 020f 	and.w	r2, r2, #15
 8002b92:	42aa      	cmp	r2, r5
 8002b94:	f200 80a8 	bhi.w	8002ce8 <HAL_RCC_ClockConfig+0x200>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b98:	0758      	lsls	r0, r3, #29
 8002b9a:	f100 80b1 	bmi.w	8002d00 <HAL_RCC_ClockConfig+0x218>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9e:	0719      	lsls	r1, r3, #28
 8002ba0:	d50b      	bpl.n	8002bba <HAL_RCC_ClockConfig+0xd2>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ba2:	495f      	ldr	r1, [pc, #380]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
 8002ba4:	6965      	ldr	r5, [r4, #20]
 8002ba6:	69c8      	ldr	r0, [r1, #28]
 8002ba8:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002bac:	4285      	cmp	r5, r0
 8002bae:	d204      	bcs.n	8002bba <HAL_RCC_ClockConfig+0xd2>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bb0:	69ca      	ldr	r2, [r1, #28]
 8002bb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002bb6:	432a      	orrs	r2, r5
 8002bb8:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bba:	06da      	lsls	r2, r3, #27
 8002bbc:	d50b      	bpl.n	8002bd6 <HAL_RCC_ClockConfig+0xee>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bbe:	4958      	ldr	r1, [pc, #352]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
 8002bc0:	69a5      	ldr	r5, [r4, #24]
 8002bc2:	69c8      	ldr	r0, [r1, #28]
 8002bc4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002bc8:	4285      	cmp	r5, r0
 8002bca:	d204      	bcs.n	8002bd6 <HAL_RCC_ClockConfig+0xee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bcc:	69ca      	ldr	r2, [r1, #28]
 8002bce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002bd2:	432a      	orrs	r2, r5
 8002bd4:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bd6:	069b      	lsls	r3, r3, #26
 8002bd8:	d50b      	bpl.n	8002bf2 <HAL_RCC_ClockConfig+0x10a>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bda:	4a51      	ldr	r2, [pc, #324]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
 8002bdc:	69e0      	ldr	r0, [r4, #28]
 8002bde:	6a11      	ldr	r1, [r2, #32]
 8002be0:	f001 0170 	and.w	r1, r1, #112	; 0x70
 8002be4:	4288      	cmp	r0, r1
 8002be6:	d204      	bcs.n	8002bf2 <HAL_RCC_ClockConfig+0x10a>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002be8:	6a13      	ldr	r3, [r2, #32]
 8002bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bee:	4303      	orrs	r3, r0
 8002bf0:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bf2:	f7ff fed9 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002bf6:	494a      	ldr	r1, [pc, #296]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
 8002bf8:	4a4a      	ldr	r2, [pc, #296]	; (8002d24 <HAL_RCC_ClockConfig+0x23c>)
 8002bfa:	698b      	ldr	r3, [r1, #24]
 8002bfc:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002c00:	5cd3      	ldrb	r3, [r2, r3]
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c08:	698b      	ldr	r3, [r1, #24]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	4a45      	ldr	r2, [pc, #276]	; (8002d28 <HAL_RCC_ClockConfig+0x240>)
 8002c12:	f003 031f 	and.w	r3, r3, #31
 8002c16:	fa20 f303 	lsr.w	r3, r0, r3
 8002c1a:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8002c1c:	4b43      	ldr	r3, [pc, #268]	; (8002d2c <HAL_RCC_ClockConfig+0x244>)
 8002c1e:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 8002c20:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <HAL_RCC_ClockConfig+0x248>)
}
 8002c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8002c26:	6818      	ldr	r0, [r3, #0]
 8002c28:	f7fe b896 	b.w	8000d58 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2c:	6813      	ldr	r3, [r2, #0]
 8002c2e:	f023 030f 	bic.w	r3, r3, #15
 8002c32:	430b      	orrs	r3, r1
 8002c34:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c36:	6813      	ldr	r3, [r2, #0]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	428b      	cmp	r3, r1
 8002c3e:	f47f af58 	bne.w	8002af2 <HAL_RCC_ClockConfig+0xa>
 8002c42:	e760      	b.n	8002b06 <HAL_RCC_ClockConfig+0x1e>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c44:	4936      	ldr	r1, [pc, #216]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
 8002c46:	6926      	ldr	r6, [r4, #16]
 8002c48:	6988      	ldr	r0, [r1, #24]
 8002c4a:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002c4e:	4286      	cmp	r6, r0
 8002c50:	f67f af5d 	bls.w	8002b0e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c54:	698a      	ldr	r2, [r1, #24]
 8002c56:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c5a:	4332      	orrs	r2, r6
 8002c5c:	618a      	str	r2, [r1, #24]
 8002c5e:	e756      	b.n	8002b0e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c60:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
 8002c62:	68a1      	ldr	r1, [r4, #8]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	619a      	str	r2, [r3, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6e:	6862      	ldr	r2, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c70:	681b      	ldr	r3, [r3, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c72:	2a02      	cmp	r2, #2
 8002c74:	d11d      	bne.n	8002cb2 <HAL_RCC_ClockConfig+0x1ca>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c76:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c7a:	f43f af3a 	beq.w	8002af2 <HAL_RCC_ClockConfig+0xa>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c7e:	4e28      	ldr	r6, [pc, #160]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c80:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c84:	6933      	ldr	r3, [r6, #16]
 8002c86:	f023 0307 	bic.w	r3, r3, #7
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8002c8e:	f7fe fa75 	bl	800117c <HAL_GetTick>
 8002c92:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c94:	6933      	ldr	r3, [r6, #16]
 8002c96:	6862      	ldr	r2, [r4, #4]
 8002c98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c9c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002ca0:	f43f af6f 	beq.w	8002b82 <HAL_RCC_ClockConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca4:	f7fe fa6a 	bl	800117c <HAL_GetTick>
 8002ca8:	1bc0      	subs	r0, r0, r7
 8002caa:	4540      	cmp	r0, r8
 8002cac:	d9f2      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x1ac>
            return HAL_TIMEOUT;
 8002cae:	2003      	movs	r0, #3
 8002cb0:	e720      	b.n	8002af4 <HAL_RCC_ClockConfig+0xc>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb2:	2a03      	cmp	r2, #3
 8002cb4:	d102      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x1d4>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cb6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002cba:	e7de      	b.n	8002c7a <HAL_RCC_ClockConfig+0x192>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002cbc:	2a01      	cmp	r2, #1
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0x1de>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cc0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002cc4:	e7d9      	b.n	8002c7a <HAL_RCC_ClockConfig+0x192>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cc6:	f013 0f04 	tst.w	r3, #4
 8002cca:	e7d6      	b.n	8002c7a <HAL_RCC_ClockConfig+0x192>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ccc:	4914      	ldr	r1, [pc, #80]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
 8002cce:	68e6      	ldr	r6, [r4, #12]
 8002cd0:	6988      	ldr	r0, [r1, #24]
 8002cd2:	f000 000f 	and.w	r0, r0, #15
 8002cd6:	4286      	cmp	r6, r0
 8002cd8:	f4bf af57 	bcs.w	8002b8a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cdc:	698a      	ldr	r2, [r1, #24]
 8002cde:	f022 020f 	bic.w	r2, r2, #15
 8002ce2:	4332      	orrs	r2, r6
 8002ce4:	618a      	str	r2, [r1, #24]
 8002ce6:	e750      	b.n	8002b8a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce8:	680a      	ldr	r2, [r1, #0]
 8002cea:	f022 020f 	bic.w	r2, r2, #15
 8002cee:	432a      	orrs	r2, r5
 8002cf0:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	680a      	ldr	r2, [r1, #0]
 8002cf4:	f002 020f 	and.w	r2, r2, #15
 8002cf8:	42aa      	cmp	r2, r5
 8002cfa:	f47f aefa 	bne.w	8002af2 <HAL_RCC_ClockConfig+0xa>
 8002cfe:	e74b      	b.n	8002b98 <HAL_RCC_ClockConfig+0xb0>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d00:	4907      	ldr	r1, [pc, #28]	; (8002d20 <HAL_RCC_ClockConfig+0x238>)
 8002d02:	6925      	ldr	r5, [r4, #16]
 8002d04:	6988      	ldr	r0, [r1, #24]
 8002d06:	f000 0070 	and.w	r0, r0, #112	; 0x70
 8002d0a:	4285      	cmp	r5, r0
 8002d0c:	f4bf af47 	bcs.w	8002b9e <HAL_RCC_ClockConfig+0xb6>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d10:	698a      	ldr	r2, [r1, #24]
 8002d12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002d16:	432a      	orrs	r2, r5
 8002d18:	618a      	str	r2, [r1, #24]
 8002d1a:	e740      	b.n	8002b9e <HAL_RCC_ClockConfig+0xb6>
 8002d1c:	52002000 	.word	0x52002000
 8002d20:	58024400 	.word	0x58024400
 8002d24:	0800e1b4 	.word	0x0800e1b4
 8002d28:	24000018 	.word	0x24000018
 8002d2c:	24000014 	.word	0x24000014
 8002d30:	24000020 	.word	0x24000020

08002d34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d34:	b510      	push	{r4, lr}
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d36:	4c0c      	ldr	r4, [pc, #48]	; (8002d68 <HAL_RCC_GetHCLKFreq+0x34>)
 8002d38:	f7ff fe36 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002d3c:	490b      	ldr	r1, [pc, #44]	; (8002d6c <HAL_RCC_GetHCLKFreq+0x38>)
 8002d3e:	69a3      	ldr	r3, [r4, #24]
 8002d40:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8002d44:	5cca      	ldrb	r2, [r1, r3]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d46:	69a3      	ldr	r3, [r4, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d48:	f002 021f 	and.w	r2, r2, #31
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d4c:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d50:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d54:	5ccb      	ldrb	r3, [r1, r3]
 8002d56:	f003 031f 	and.w	r3, r3, #31
 8002d5a:	fa22 f003 	lsr.w	r0, r2, r3
 8002d5e:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <HAL_RCC_GetHCLKFreq+0x3c>)
 8002d60:	6018      	str	r0, [r3, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d62:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <HAL_RCC_GetHCLKFreq+0x40>)
 8002d64:	601a      	str	r2, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002d66:	bd10      	pop	{r4, pc}
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	0800e1b4 	.word	0x0800e1b4
 8002d70:	24000018 	.word	0x24000018
 8002d74:	24000014 	.word	0x24000014

08002d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d78:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d7a:	f7ff ffdb 	bl	8002d34 <HAL_RCC_GetHCLKFreq>
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002d80:	4a05      	ldr	r2, [pc, #20]	; (8002d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002d88:	5cd3      	ldrb	r3, [r2, r3]
 8002d8a:	f003 031f 	and.w	r3, r3, #31
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002d8e:	40d8      	lsrs	r0, r3
 8002d90:	bd08      	pop	{r3, pc}
 8002d92:	bf00      	nop
 8002d94:	58024400 	.word	0x58024400
 8002d98:	0800e1b4 	.word	0x0800e1b4

08002d9c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8002d9c:	233f      	movs	r3, #63	; 0x3f
 8002d9e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002da0:	4b11      	ldr	r3, [pc, #68]	; (8002de8 <HAL_RCC_GetClockConfig+0x4c>)
 8002da2:	691a      	ldr	r2, [r3, #16]
 8002da4:	f002 0207 	and.w	r2, r2, #7
 8002da8:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8002daa:	699a      	ldr	r2, [r3, #24]
 8002dac:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8002db0:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8002db2:	699a      	ldr	r2, [r3, #24]
 8002db4:	f002 020f 	and.w	r2, r2, #15
 8002db8:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8002dba:	699a      	ldr	r2, [r3, #24]
 8002dbc:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002dc0:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8002dc2:	69da      	ldr	r2, [r3, #28]
 8002dc4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002dc8:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002dd0:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dd8:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002dda:	4b04      	ldr	r3, [pc, #16]	; (8002dec <HAL_RCC_GetClockConfig+0x50>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 030f 	and.w	r3, r3, #15
 8002de2:	600b      	str	r3, [r1, #0]
}
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	58024400 	.word	0x58024400
 8002dec:	52002000 	.word	0x52002000

08002df0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002df0:	4770      	bx	lr
	...

08002df4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002df4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d12f      	bne.n	8002e5c <HAL_TIM_Base_Start_IT+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e02:	6803      	ldr	r3, [r0, #0]
 8002e04:	68da      	ldr	r2, [r3, #12]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0c:	4a14      	ldr	r2, [pc, #80]	; (8002e60 <HAL_TIM_Base_Start_IT+0x6c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d016      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x4c>
 8002e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e16:	d013      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x4c>
 8002e18:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00f      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x4c>
 8002e20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d00b      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x4c>
 8002e28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d007      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x4c>
 8002e30:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d003      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x4c>
 8002e38:	f5a2 426c 	sub.w	r2, r2, #60416	; 0xec00
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d107      	bne.n	8002e50 <HAL_TIM_Base_Start_IT+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e40:	6899      	ldr	r1, [r3, #8]
 8002e42:	4a08      	ldr	r2, [pc, #32]	; (8002e64 <HAL_TIM_Base_Start_IT+0x70>)
 8002e44:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e46:	2a06      	cmp	r2, #6
 8002e48:	d006      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x64>
 8002e4a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002e4e:	d003      	beq.n	8002e58 <HAL_TIM_Base_Start_IT+0x64>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e58:	2000      	movs	r0, #0
}
 8002e5a:	4770      	bx	lr
    return HAL_ERROR;
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	4770      	bx	lr
 8002e60:	40010000 	.word	0x40010000
 8002e64:	00010007 	.word	0x00010007

08002e68 <HAL_TIM_OC_DelayElapsedCallback>:
 8002e68:	4770      	bx	lr

08002e6a <HAL_TIM_IC_CaptureCallback>:
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIM_PWM_PulseFinishedCallback>:
 8002e6c:	4770      	bx	lr

08002e6e <HAL_TIM_TriggerCallback>:
 8002e6e:	4770      	bx	lr

08002e70 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e70:	6803      	ldr	r3, [r0, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	0791      	lsls	r1, r2, #30
{
 8002e76:	b510      	push	{r4, lr}
 8002e78:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e7a:	d50f      	bpl.n	8002e9c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e7c:	68da      	ldr	r2, [r3, #12]
 8002e7e:	0792      	lsls	r2, r2, #30
 8002e80:	d50c      	bpl.n	8002e9c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e82:	f06f 0202 	mvn.w	r2, #2
 8002e86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e88:	2201      	movs	r2, #1
 8002e8a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	0799      	lsls	r1, r3, #30
 8002e90:	f000 8085 	beq.w	8002f9e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e94:	f7ff ffe9 	bl	8002e6a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e9c:	6823      	ldr	r3, [r4, #0]
 8002e9e:	691a      	ldr	r2, [r3, #16]
 8002ea0:	0752      	lsls	r2, r2, #29
 8002ea2:	d510      	bpl.n	8002ec6 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ea4:	68da      	ldr	r2, [r3, #12]
 8002ea6:	0750      	lsls	r0, r2, #29
 8002ea8:	d50d      	bpl.n	8002ec6 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eaa:	f06f 0204 	mvn.w	r2, #4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002ebc:	d075      	beq.n	8002faa <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ebe:	f7ff ffd4 	bl	8002e6a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	0711      	lsls	r1, r2, #28
 8002ecc:	d50f      	bpl.n	8002eee <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ece:	68da      	ldr	r2, [r3, #12]
 8002ed0:	0712      	lsls	r2, r2, #28
 8002ed2:	d50c      	bpl.n	8002eee <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ed4:	f06f 0208 	mvn.w	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002edc:	2204      	movs	r2, #4
 8002ede:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	079b      	lsls	r3, r3, #30
 8002ee4:	d067      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	f7ff ffc0 	bl	8002e6a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eea:	2300      	movs	r3, #0
 8002eec:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eee:	6823      	ldr	r3, [r4, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	06d0      	lsls	r0, r2, #27
 8002ef4:	d510      	bpl.n	8002f18 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	06d1      	lsls	r1, r2, #27
 8002efa:	d50d      	bpl.n	8002f18 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002efc:	f06f 0210 	mvn.w	r2, #16
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f00:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f04:	2208      	movs	r2, #8
 8002f06:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002f0e:	d058      	beq.n	8002fc2 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f10:	f7ff ffab 	bl	8002e6a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f14:	2300      	movs	r3, #0
 8002f16:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f18:	6823      	ldr	r3, [r4, #0]
 8002f1a:	691a      	ldr	r2, [r3, #16]
 8002f1c:	07d2      	lsls	r2, r2, #31
 8002f1e:	d508      	bpl.n	8002f32 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	07d0      	lsls	r0, r2, #31
 8002f24:	d505      	bpl.n	8002f32 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f26:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f2e:	f7fd ff5f 	bl	8000df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f32:	6823      	ldr	r3, [r4, #0]
 8002f34:	691a      	ldr	r2, [r3, #16]
 8002f36:	0611      	lsls	r1, r2, #24
 8002f38:	d508      	bpl.n	8002f4c <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f3a:	68da      	ldr	r2, [r3, #12]
 8002f3c:	0612      	lsls	r2, r2, #24
 8002f3e:	d505      	bpl.n	8002f4c <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f40:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f44:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f46:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002f48:	f000 f8d9 	bl	80030fe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	05d0      	lsls	r0, r2, #23
 8002f52:	d508      	bpl.n	8002f66 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	0611      	lsls	r1, r2, #24
 8002f58:	d505      	bpl.n	8002f66 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f5a:	f46f 7280 	mvn.w	r2, #256	; 0x100
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002f5e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002f60:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002f62:	f000 f8cd 	bl	8003100 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	0652      	lsls	r2, r2, #25
 8002f6c:	d508      	bpl.n	8002f80 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	0650      	lsls	r0, r2, #25
 8002f72:	d505      	bpl.n	8002f80 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f74:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f78:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f7a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002f7c:	f7ff ff77 	bl	8002e6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f80:	6823      	ldr	r3, [r4, #0]
 8002f82:	691a      	ldr	r2, [r3, #16]
 8002f84:	0691      	lsls	r1, r2, #26
 8002f86:	d522      	bpl.n	8002fce <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	0692      	lsls	r2, r2, #26
 8002f8c:	d51f      	bpl.n	8002fce <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f8e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f92:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f94:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002f9a:	f000 b8af 	b.w	80030fc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9e:	f7ff ff63 	bl	8002e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7ff ff62 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
 8002fa8:	e776      	b.n	8002e98 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	f7ff ff5d 	bl	8002e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fae:	4620      	mov	r0, r4
 8002fb0:	f7ff ff5c 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
 8002fb4:	e785      	b.n	8002ec2 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	f7ff ff57 	bl	8002e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7ff ff56 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
 8002fc0:	e793      	b.n	8002eea <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc2:	f7ff ff51 	bl	8002e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	f7ff ff50 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
 8002fcc:	e7a2      	b.n	8002f14 <HAL_TIM_IRQHandler+0xa4>
}
 8002fce:	bd10      	pop	{r4, pc}

08002fd0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd0:	4a30      	ldr	r2, [pc, #192]	; (8003094 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002fd2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd4:	4290      	cmp	r0, r2
 8002fd6:	d012      	beq.n	8002ffe <TIM_Base_SetConfig+0x2e>
 8002fd8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002fdc:	d00f      	beq.n	8002ffe <TIM_Base_SetConfig+0x2e>
 8002fde:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002fe2:	4290      	cmp	r0, r2
 8002fe4:	d00b      	beq.n	8002ffe <TIM_Base_SetConfig+0x2e>
 8002fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fea:	4290      	cmp	r0, r2
 8002fec:	d007      	beq.n	8002ffe <TIM_Base_SetConfig+0x2e>
 8002fee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ff2:	4290      	cmp	r0, r2
 8002ff4:	d003      	beq.n	8002ffe <TIM_Base_SetConfig+0x2e>
 8002ff6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002ffa:	4290      	cmp	r0, r2
 8002ffc:	d119      	bne.n	8003032 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002ffe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003004:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003006:	4a23      	ldr	r2, [pc, #140]	; (8003094 <TIM_Base_SetConfig+0xc4>)
 8003008:	4290      	cmp	r0, r2
 800300a:	d01d      	beq.n	8003048 <TIM_Base_SetConfig+0x78>
 800300c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003010:	d01a      	beq.n	8003048 <TIM_Base_SetConfig+0x78>
 8003012:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003016:	4290      	cmp	r0, r2
 8003018:	d016      	beq.n	8003048 <TIM_Base_SetConfig+0x78>
 800301a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800301e:	4290      	cmp	r0, r2
 8003020:	d012      	beq.n	8003048 <TIM_Base_SetConfig+0x78>
 8003022:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003026:	4290      	cmp	r0, r2
 8003028:	d00e      	beq.n	8003048 <TIM_Base_SetConfig+0x78>
 800302a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800302e:	4290      	cmp	r0, r2
 8003030:	d00a      	beq.n	8003048 <TIM_Base_SetConfig+0x78>
 8003032:	4a19      	ldr	r2, [pc, #100]	; (8003098 <TIM_Base_SetConfig+0xc8>)
 8003034:	4290      	cmp	r0, r2
 8003036:	d007      	beq.n	8003048 <TIM_Base_SetConfig+0x78>
 8003038:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800303c:	4290      	cmp	r0, r2
 800303e:	d003      	beq.n	8003048 <TIM_Base_SetConfig+0x78>
 8003040:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003044:	4290      	cmp	r0, r2
 8003046:	d103      	bne.n	8003050 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304c:	68ca      	ldr	r2, [r1, #12]
 800304e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003050:	694a      	ldr	r2, [r1, #20]
 8003052:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003056:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8003058:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800305a:	688b      	ldr	r3, [r1, #8]
 800305c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800305e:	680b      	ldr	r3, [r1, #0]
 8003060:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <TIM_Base_SetConfig+0xc4>)
 8003064:	4298      	cmp	r0, r3
 8003066:	d00f      	beq.n	8003088 <TIM_Base_SetConfig+0xb8>
 8003068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800306c:	4298      	cmp	r0, r3
 800306e:	d00b      	beq.n	8003088 <TIM_Base_SetConfig+0xb8>
 8003070:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8003074:	4298      	cmp	r0, r3
 8003076:	d007      	beq.n	8003088 <TIM_Base_SetConfig+0xb8>
 8003078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800307c:	4298      	cmp	r0, r3
 800307e:	d003      	beq.n	8003088 <TIM_Base_SetConfig+0xb8>
 8003080:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003084:	4298      	cmp	r0, r3
 8003086:	d101      	bne.n	800308c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003088:	690b      	ldr	r3, [r1, #16]
 800308a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800308c:	2301      	movs	r3, #1
 800308e:	6143      	str	r3, [r0, #20]
}
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40010000 	.word	0x40010000
 8003098:	40014000 	.word	0x40014000

0800309c <HAL_TIM_Base_Init>:
{
 800309c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800309e:	4604      	mov	r4, r0
 80030a0:	b350      	cbz	r0, 80030f8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 80030a2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80030a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80030aa:	b91b      	cbnz	r3, 80030b4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80030ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80030b0:	f7ff fe9e 	bl	8002df0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80030b4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b6:	6820      	ldr	r0, [r4, #0]
 80030b8:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80030ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030be:	f7ff ff87 	bl	8002fd0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c2:	2301      	movs	r3, #1
  return HAL_OK;
 80030c4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c6:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80030ce:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80030d2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80030d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80030da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80030e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030ea:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80030ee:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80030f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80030f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030f8:	2001      	movs	r0, #1
 80030fa:	e7fc      	b.n	80030f6 <HAL_TIM_Base_Init+0x5a>

080030fc <HAL_TIMEx_CommutCallback>:
 80030fc:	4770      	bx	lr

080030fe <HAL_TIMEx_BreakCallback>:
 80030fe:	4770      	bx	lr

08003100 <HAL_TIMEx_Break2Callback>:
 8003100:	4770      	bx	lr

08003102 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003102:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003106:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800310a:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800310c:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800310e:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003116:	4770      	bx	lr

08003118 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003118:	2300      	movs	r3, #0
 800311a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800311c:	4770      	bx	lr

0800311e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800311e:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003120:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8003122:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003124:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800312a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800312c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800312e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003130:	3301      	adds	r3, #1
 8003132:	6003      	str	r3, [r0, #0]
}
 8003134:	4770      	bx	lr

08003136 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003136:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003138:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800313a:	1c63      	adds	r3, r4, #1
 800313c:	d10a      	bne.n	8003154 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800313e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003144:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003146:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003148:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800314a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800314c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800314e:	3301      	adds	r3, #1
 8003150:	6003      	str	r3, [r0, #0]
}
 8003152:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003154:	f100 0208 	add.w	r2, r0, #8
 8003158:	4613      	mov	r3, r2
 800315a:	6852      	ldr	r2, [r2, #4]
 800315c:	6815      	ldr	r5, [r2, #0]
 800315e:	42a5      	cmp	r5, r4
 8003160:	d9fa      	bls.n	8003158 <vListInsert+0x22>
 8003162:	e7ed      	b.n	8003140 <vListInsert+0xa>

08003164 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003164:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003166:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800316a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800316c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003172:	bf08      	it	eq
 8003174:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003176:	2200      	movs	r2, #0
 8003178:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	3a01      	subs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003180:	6818      	ldr	r0, [r3, #0]
}
 8003182:	4770      	bx	lr

08003184 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003184:	b510      	push	{r4, lr}
 8003186:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003188:	f001 fd04 	bl	8004b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800318c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800318e:	f001 fd23 	bl	8004bd8 <vPortExitCritical>

	return xReturn;
}
 8003192:	fab4 f084 	clz	r0, r4
 8003196:	0940      	lsrs	r0, r0, #5
 8003198:	bd10      	pop	{r4, pc}

0800319a <prvCopyDataToQueue>:
{
 800319a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319c:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800319e:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80031a0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031a2:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031a4:	b952      	cbnz	r2, 80031bc <prvCopyDataToQueue+0x22>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031a6:	6807      	ldr	r7, [r0, #0]
 80031a8:	bb47      	cbnz	r7, 80031fc <prvCopyDataToQueue+0x62>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031aa:	6880      	ldr	r0, [r0, #8]
 80031ac:	f001 f95a 	bl	8004464 <xTaskPriorityDisinherit>
 80031b0:	4605      	mov	r5, r0
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031b2:	60a7      	str	r7, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031b4:	3601      	adds	r6, #1
}
 80031b6:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80031b8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80031ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80031bc:	b965      	cbnz	r5, 80031d8 <prvCopyDataToQueue+0x3e>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031be:	6840      	ldr	r0, [r0, #4]
 80031c0:	f009 fa18 	bl	800c5f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031c4:	6863      	ldr	r3, [r4, #4]
 80031c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80031c8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031ca:	68a2      	ldr	r2, [r4, #8]
 80031cc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031ce:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031d0:	d3f0      	bcc.n	80031b4 <prvCopyDataToQueue+0x1a>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80031d2:	6823      	ldr	r3, [r4, #0]
 80031d4:	6063      	str	r3, [r4, #4]
 80031d6:	e7ed      	b.n	80031b4 <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031d8:	68c0      	ldr	r0, [r0, #12]
 80031da:	f009 fa0b 	bl	800c5f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80031e0:	68e3      	ldr	r3, [r4, #12]
 80031e2:	4251      	negs	r1, r2
 80031e4:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031ea:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031ec:	bf3e      	ittt	cc
 80031ee:	68a3      	ldrcc	r3, [r4, #8]
 80031f0:	185b      	addcc	r3, r3, r1
 80031f2:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80031f4:	2d02      	cmp	r5, #2
 80031f6:	d101      	bne.n	80031fc <prvCopyDataToQueue+0x62>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031f8:	b116      	cbz	r6, 8003200 <prvCopyDataToQueue+0x66>
				--uxMessagesWaiting;
 80031fa:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80031fc:	2500      	movs	r5, #0
 80031fe:	e7d9      	b.n	80031b4 <prvCopyDataToQueue+0x1a>
 8003200:	4635      	mov	r5, r6
 8003202:	e7d7      	b.n	80031b4 <prvCopyDataToQueue+0x1a>

08003204 <prvCopyDataFromQueue>:
{
 8003204:	4603      	mov	r3, r0
 8003206:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800320a:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800320c:	b162      	cbz	r2, 8003228 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800320e:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003210:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003212:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003214:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003216:	60dc      	str	r4, [r3, #12]
}
 8003218:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800321c:	bf24      	itt	cs
 800321e:	6819      	ldrcs	r1, [r3, #0]
 8003220:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003222:	68d9      	ldr	r1, [r3, #12]
 8003224:	f009 b9e6 	b.w	800c5f4 <memcpy>
}
 8003228:	f85d 4b04 	ldr.w	r4, [sp], #4
 800322c:	4770      	bx	lr

0800322e <prvUnlockQueue>:
{
 800322e:	b570      	push	{r4, r5, r6, lr}
 8003230:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003232:	f001 fcaf 	bl	8004b94 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003236:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800323a:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800323e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003240:	2d00      	cmp	r5, #0
 8003242:	dc14      	bgt.n	800326e <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8003244:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003246:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800324a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800324e:	f001 fcc3 	bl	8004bd8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003252:	f001 fc9f 	bl	8004b94 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003256:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800325a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800325c:	2d00      	cmp	r5, #0
 800325e:	dc12      	bgt.n	8003286 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8003260:	23ff      	movs	r3, #255	; 0xff
 8003262:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8003266:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800326a:	f001 bcb5 	b.w	8004bd8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800326e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003270:	2b00      	cmp	r3, #0
 8003272:	d0e7      	beq.n	8003244 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003274:	4630      	mov	r0, r6
 8003276:	f000 ff71 	bl	800415c <xTaskRemoveFromEventList>
 800327a:	b108      	cbz	r0, 8003280 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800327c:	f000 ffec 	bl	8004258 <vTaskMissedYield>
			--cTxLock;
 8003280:	3d01      	subs	r5, #1
 8003282:	b26d      	sxtb	r5, r5
 8003284:	e7dc      	b.n	8003240 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003286:	6923      	ldr	r3, [r4, #16]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0e9      	beq.n	8003260 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800328c:	4630      	mov	r0, r6
 800328e:	f000 ff65 	bl	800415c <xTaskRemoveFromEventList>
 8003292:	b108      	cbz	r0, 8003298 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003294:	f000 ffe0 	bl	8004258 <vTaskMissedYield>
				--cRxLock;
 8003298:	3d01      	subs	r5, #1
 800329a:	b26d      	sxtb	r5, r5
 800329c:	e7de      	b.n	800325c <prvUnlockQueue+0x2e>
	...

080032a0 <xQueueGenericReset>:
{
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80032a4:	4604      	mov	r4, r0
 80032a6:	b940      	cbnz	r0, 80032ba <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	e7fe      	b.n	80032b8 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80032ba:	f001 fc6b 	bl	8004b94 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032be:	6822      	ldr	r2, [r4, #0]
 80032c0:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80032c4:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032c6:	434b      	muls	r3, r1
 80032c8:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032ca:	1a5b      	subs	r3, r3, r1
 80032cc:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032ce:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032d0:	2000      	movs	r0, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80032d2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80032d4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80032d6:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80032d8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80032dc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80032e0:	b995      	cbnz	r5, 8003308 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032e2:	6923      	ldr	r3, [r4, #16]
 80032e4:	b163      	cbz	r3, 8003300 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032e6:	f104 0010 	add.w	r0, r4, #16
 80032ea:	f000 ff37 	bl	800415c <xTaskRemoveFromEventList>
 80032ee:	b138      	cbz	r0, 8003300 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80032f0:	4b0a      	ldr	r3, [pc, #40]	; (800331c <xQueueGenericReset+0x7c>)
 80032f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	f3bf 8f4f 	dsb	sy
 80032fc:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003300:	f001 fc6a 	bl	8004bd8 <vPortExitCritical>
}
 8003304:	2001      	movs	r0, #1
 8003306:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003308:	f104 0010 	add.w	r0, r4, #16
 800330c:	f7ff fef9 	bl	8003102 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003310:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003314:	f7ff fef5 	bl	8003102 <vListInitialise>
 8003318:	e7f2      	b.n	8003300 <xQueueGenericReset+0x60>
 800331a:	bf00      	nop
 800331c:	e000ed04 	.word	0xe000ed04

08003320 <xQueueGenericCreate>:
	{
 8003320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003322:	460d      	mov	r5, r1
 8003324:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003326:	4606      	mov	r6, r0
 8003328:	b940      	cbnz	r0, 800333c <xQueueGenericCreate+0x1c>
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	e7fe      	b.n	800333a <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800333c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800333e:	3050      	adds	r0, #80	; 0x50
 8003340:	f001 fb0c 	bl	800495c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003344:	4604      	mov	r4, r0
 8003346:	b158      	cbz	r0, 8003360 <xQueueGenericCreate+0x40>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003348:	b165      	cbz	r5, 8003364 <xQueueGenericCreate+0x44>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800334a:	f100 0350 	add.w	r3, r0, #80	; 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800334e:	2101      	movs	r1, #1
 8003350:	4620      	mov	r0, r4
 8003352:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8003354:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003358:	f7ff ffa2 	bl	80032a0 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800335c:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
 8003360:	4620      	mov	r0, r4
 8003362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003364:	4603      	mov	r3, r0
 8003366:	e7f2      	b.n	800334e <xQueueGenericCreate+0x2e>

08003368 <xQueueCreateCountingSemaphore>:
	{
 8003368:	b510      	push	{r4, lr}
 800336a:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800336c:	b940      	cbnz	r0, 8003380 <xQueueCreateCountingSemaphore+0x18>
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	e7fe      	b.n	800337e <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003380:	4288      	cmp	r0, r1
 8003382:	d208      	bcs.n	8003396 <xQueueCreateCountingSemaphore+0x2e>
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	e7fe      	b.n	8003394 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003396:	2202      	movs	r2, #2
 8003398:	2100      	movs	r1, #0
 800339a:	f7ff ffc1 	bl	8003320 <xQueueGenericCreate>
		if( xHandle != NULL )
 800339e:	b100      	cbz	r0, 80033a2 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80033a0:	6384      	str	r4, [r0, #56]	; 0x38
	}
 80033a2:	bd10      	pop	{r4, pc}

080033a4 <xQueueGenericSend>:
{
 80033a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033a8:	4688      	mov	r8, r1
 80033aa:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80033ac:	4604      	mov	r4, r0
{
 80033ae:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80033b0:	b940      	cbnz	r0, 80033c4 <xQueueGenericSend+0x20>
 80033b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b6:	f383 8811 	msr	BASEPRI, r3
 80033ba:	f3bf 8f6f 	isb	sy
 80033be:	f3bf 8f4f 	dsb	sy
 80033c2:	e7fe      	b.n	80033c2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c4:	b951      	cbnz	r1, 80033dc <xQueueGenericSend+0x38>
 80033c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80033c8:	b143      	cbz	r3, 80033dc <xQueueGenericSend+0x38>
 80033ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	e7fe      	b.n	80033da <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033dc:	2f02      	cmp	r7, #2
 80033de:	d10b      	bne.n	80033f8 <xQueueGenericSend+0x54>
 80033e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d008      	beq.n	80033f8 <xQueueGenericSend+0x54>
 80033e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	e7fe      	b.n	80033f6 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033f8:	f000 ffda 	bl	80043b0 <xTaskGetSchedulerState>
 80033fc:	4606      	mov	r6, r0
 80033fe:	b950      	cbnz	r0, 8003416 <xQueueGenericSend+0x72>
 8003400:	9b01      	ldr	r3, [sp, #4]
 8003402:	b14b      	cbz	r3, 8003418 <xQueueGenericSend+0x74>
 8003404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003408:	f383 8811 	msr	BASEPRI, r3
 800340c:	f3bf 8f6f 	isb	sy
 8003410:	f3bf 8f4f 	dsb	sy
 8003414:	e7fe      	b.n	8003414 <xQueueGenericSend+0x70>
 8003416:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003418:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800341c:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003504 <xQueueGenericSend+0x160>
 8003420:	e037      	b.n	8003492 <xQueueGenericSend+0xee>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003422:	9d01      	ldr	r5, [sp, #4]
 8003424:	b91d      	cbnz	r5, 800342e <xQueueGenericSend+0x8a>
					taskEXIT_CRITICAL();
 8003426:	f001 fbd7 	bl	8004bd8 <vPortExitCritical>
			return errQUEUE_FULL;
 800342a:	2000      	movs	r0, #0
 800342c:	e050      	b.n	80034d0 <xQueueGenericSend+0x12c>
				else if( xEntryTimeSet == pdFALSE )
 800342e:	b916      	cbnz	r6, 8003436 <xQueueGenericSend+0x92>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003430:	a802      	add	r0, sp, #8
 8003432:	f000 fecf 	bl	80041d4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003436:	f001 fbcf 	bl	8004bd8 <vPortExitCritical>
		vTaskSuspendAll();
 800343a:	f000 fd25 	bl	8003e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800343e:	f001 fba9 	bl	8004b94 <vPortEnterCritical>
 8003442:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003446:	2bff      	cmp	r3, #255	; 0xff
 8003448:	d101      	bne.n	800344e <xQueueGenericSend+0xaa>
 800344a:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 800344e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003452:	2bff      	cmp	r3, #255	; 0xff
 8003454:	d101      	bne.n	800345a <xQueueGenericSend+0xb6>
 8003456:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 800345a:	f001 fbbd 	bl	8004bd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800345e:	a901      	add	r1, sp, #4
 8003460:	a802      	add	r0, sp, #8
 8003462:	f000 fec1 	bl	80041e8 <xTaskCheckForTimeOut>
 8003466:	2800      	cmp	r0, #0
 8003468:	d146      	bne.n	80034f8 <xQueueGenericSend+0x154>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800346a:	f001 fb93 	bl	8004b94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800346e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003470:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003472:	429a      	cmp	r2, r3
 8003474:	d12f      	bne.n	80034d6 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003476:	f001 fbaf 	bl	8004bd8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800347a:	9901      	ldr	r1, [sp, #4]
 800347c:	f104 0010 	add.w	r0, r4, #16
 8003480:	f000 fe54 	bl	800412c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003484:	4620      	mov	r0, r4
 8003486:	f7ff fed2 	bl	800322e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800348a:	f000 fd89 	bl	8003fa0 <xTaskResumeAll>
 800348e:	b350      	cbz	r0, 80034e6 <xQueueGenericSend+0x142>
 8003490:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003492:	f001 fb7f 	bl	8004b94 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003496:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003498:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800349a:	429a      	cmp	r2, r3
 800349c:	d301      	bcc.n	80034a2 <xQueueGenericSend+0xfe>
 800349e:	2f02      	cmp	r7, #2
 80034a0:	d1bf      	bne.n	8003422 <xQueueGenericSend+0x7e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034a2:	463a      	mov	r2, r7
 80034a4:	4641      	mov	r1, r8
 80034a6:	4620      	mov	r0, r4
 80034a8:	f7ff fe77 	bl	800319a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034ae:	b11b      	cbz	r3, 80034b8 <xQueueGenericSend+0x114>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034b4:	f000 fe52 	bl	800415c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80034b8:	b138      	cbz	r0, 80034ca <xQueueGenericSend+0x126>
						queueYIELD_IF_USING_PREEMPTION();
 80034ba:	4b12      	ldr	r3, [pc, #72]	; (8003504 <xQueueGenericSend+0x160>)
 80034bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	f3bf 8f4f 	dsb	sy
 80034c6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80034ca:	f001 fb85 	bl	8004bd8 <vPortExitCritical>
				return pdPASS;
 80034ce:	2001      	movs	r0, #1
}
 80034d0:	b004      	add	sp, #16
 80034d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 80034d6:	f001 fb7f 	bl	8004bd8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80034da:	4620      	mov	r0, r4
 80034dc:	f7ff fea7 	bl	800322e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80034e0:	f000 fd5e 	bl	8003fa0 <xTaskResumeAll>
 80034e4:	e7d4      	b.n	8003490 <xQueueGenericSend+0xec>
					portYIELD_WITHIN_API();
 80034e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034ea:	f8ca 3000 	str.w	r3, [sl]
 80034ee:	f3bf 8f4f 	dsb	sy
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	e7cb      	b.n	8003490 <xQueueGenericSend+0xec>
			prvUnlockQueue( pxQueue );
 80034f8:	4620      	mov	r0, r4
 80034fa:	f7ff fe98 	bl	800322e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80034fe:	f000 fd4f 	bl	8003fa0 <xTaskResumeAll>
 8003502:	e792      	b.n	800342a <xQueueGenericSend+0x86>
 8003504:	e000ed04 	.word	0xe000ed04

08003508 <xQueueCreateMutex>:
	{
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800350c:	2050      	movs	r0, #80	; 0x50
 800350e:	f001 fa25 	bl	800495c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8003512:	4604      	mov	r4, r0
 8003514:	b188      	cbz	r0, 800353a <xQueueCreateMutex+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
 8003516:	2500      	movs	r5, #0
 8003518:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800351a:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800351c:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003520:	f7ff febe 	bl	80032a0 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003524:	462b      	mov	r3, r5
 8003526:	462a      	mov	r2, r5
 8003528:	4629      	mov	r1, r5
 800352a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800352c:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003530:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003532:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003534:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003536:	f7ff ff35 	bl	80033a4 <xQueueGenericSend>
	}
 800353a:	4620      	mov	r0, r4
 800353c:	bd70      	pop	{r4, r5, r6, pc}

0800353e <xQueueGenericSendFromISR>:
{
 800353e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003542:	4689      	mov	r9, r1
 8003544:	4690      	mov	r8, r2
 8003546:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003548:	4604      	mov	r4, r0
 800354a:	b940      	cbnz	r0, 800355e <xQueueGenericSendFromISR+0x20>
 800354c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003550:	f383 8811 	msr	BASEPRI, r3
 8003554:	f3bf 8f6f 	isb	sy
 8003558:	f3bf 8f4f 	dsb	sy
 800355c:	e7fe      	b.n	800355c <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800355e:	b951      	cbnz	r1, 8003576 <xQueueGenericSendFromISR+0x38>
 8003560:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003562:	b143      	cbz	r3, 8003576 <xQueueGenericSendFromISR+0x38>
 8003564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003568:	f383 8811 	msr	BASEPRI, r3
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f3bf 8f4f 	dsb	sy
 8003574:	e7fe      	b.n	8003574 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003576:	2f02      	cmp	r7, #2
 8003578:	d10b      	bne.n	8003592 <xQueueGenericSendFromISR+0x54>
 800357a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d008      	beq.n	8003592 <xQueueGenericSendFromISR+0x54>
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	e7fe      	b.n	8003590 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003592:	f001 fc17 	bl	8004dc4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003596:	f3ef 8611 	mrs	r6, BASEPRI
 800359a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359e:	f383 8811 	msr	BASEPRI, r3
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80035aa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80035ac:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d301      	bcc.n	80035b6 <xQueueGenericSendFromISR+0x78>
 80035b2:	2f02      	cmp	r7, #2
 80035b4:	d123      	bne.n	80035fe <xQueueGenericSendFromISR+0xc0>
			const int8_t cTxLock = pxQueue->cTxLock;
 80035b6:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035ba:	463a      	mov	r2, r7
 80035bc:	4649      	mov	r1, r9
 80035be:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80035c0:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80035c4:	f7ff fde9 	bl	800319a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80035c8:	1c6b      	adds	r3, r5, #1
 80035ca:	d113      	bne.n	80035f4 <xQueueGenericSendFromISR+0xb6>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035ce:	b90b      	cbnz	r3, 80035d4 <xQueueGenericSendFromISR+0x96>
			xReturn = pdPASS;
 80035d0:	2001      	movs	r0, #1
 80035d2:	e00b      	b.n	80035ec <xQueueGenericSendFromISR+0xae>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80035d8:	f000 fdc0 	bl	800415c <xTaskRemoveFromEventList>
 80035dc:	2800      	cmp	r0, #0
 80035de:	d0f7      	beq.n	80035d0 <xQueueGenericSendFromISR+0x92>
							if( pxHigherPriorityTaskWoken != NULL )
 80035e0:	f1b8 0f00 	cmp.w	r8, #0
 80035e4:	d0f4      	beq.n	80035d0 <xQueueGenericSendFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035e6:	2001      	movs	r0, #1
 80035e8:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035ec:	f386 8811 	msr	BASEPRI, r6
}
 80035f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035f4:	3501      	adds	r5, #1
 80035f6:	b26d      	sxtb	r5, r5
 80035f8:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80035fc:	e7e8      	b.n	80035d0 <xQueueGenericSendFromISR+0x92>
			xReturn = errQUEUE_FULL;
 80035fe:	2000      	movs	r0, #0
 8003600:	e7f4      	b.n	80035ec <xQueueGenericSendFromISR+0xae>

08003602 <xQueueGiveFromISR>:
{
 8003602:	b570      	push	{r4, r5, r6, lr}
 8003604:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003606:	4604      	mov	r4, r0
 8003608:	b940      	cbnz	r0, 800361c <xQueueGiveFromISR+0x1a>
	__asm volatile
 800360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	e7fe      	b.n	800361a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800361c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800361e:	b143      	cbz	r3, 8003632 <xQueueGiveFromISR+0x30>
 8003620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	e7fe      	b.n	8003630 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003632:	6803      	ldr	r3, [r0, #0]
 8003634:	b953      	cbnz	r3, 800364c <xQueueGiveFromISR+0x4a>
 8003636:	6883      	ldr	r3, [r0, #8]
 8003638:	b143      	cbz	r3, 800364c <xQueueGiveFromISR+0x4a>
 800363a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363e:	f383 8811 	msr	BASEPRI, r3
 8003642:	f3bf 8f6f 	isb	sy
 8003646:	f3bf 8f4f 	dsb	sy
 800364a:	e7fe      	b.n	800364a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800364c:	f001 fbba 	bl	8004dc4 <vPortValidateInterruptPriority>
	__asm volatile
 8003650:	f3ef 8611 	mrs	r6, BASEPRI
 8003654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003658:	f383 8811 	msr	BASEPRI, r3
 800365c:	f3bf 8f6f 	isb	sy
 8003660:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003664:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003666:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003668:	4293      	cmp	r3, r2
 800366a:	d91c      	bls.n	80036a6 <xQueueGiveFromISR+0xa4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800366c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003670:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 8003672:	29ff      	cmp	r1, #255	; 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 8003674:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003676:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8003678:	d110      	bne.n	800369c <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800367a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800367c:	b90b      	cbnz	r3, 8003682 <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 800367e:	2001      	movs	r0, #1
 8003680:	e009      	b.n	8003696 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003682:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003686:	f000 fd69 	bl	800415c <xTaskRemoveFromEventList>
 800368a:	2800      	cmp	r0, #0
 800368c:	d0f7      	beq.n	800367e <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 800368e:	2d00      	cmp	r5, #0
 8003690:	d0f5      	beq.n	800367e <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003692:	2001      	movs	r0, #1
 8003694:	6028      	str	r0, [r5, #0]
	__asm volatile
 8003696:	f386 8811 	msr	BASEPRI, r6
}
 800369a:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800369c:	3301      	adds	r3, #1
 800369e:	b25b      	sxtb	r3, r3
 80036a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036a4:	e7eb      	b.n	800367e <xQueueGiveFromISR+0x7c>
			xReturn = errQUEUE_FULL;
 80036a6:	2000      	movs	r0, #0
 80036a8:	e7f5      	b.n	8003696 <xQueueGiveFromISR+0x94>
	...

080036ac <xQueueReceive>:
{
 80036ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036b0:	b085      	sub	sp, #20
 80036b2:	460f      	mov	r7, r1
	configASSERT( ( pxQueue ) );
 80036b4:	4604      	mov	r4, r0
{
 80036b6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80036b8:	b940      	cbnz	r0, 80036cc <xQueueReceive+0x20>
	__asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	e7fe      	b.n	80036ca <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036cc:	b951      	cbnz	r1, 80036e4 <xQueueReceive+0x38>
 80036ce:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80036d0:	b143      	cbz	r3, 80036e4 <xQueueReceive+0x38>
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	e7fe      	b.n	80036e2 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036e4:	f000 fe64 	bl	80043b0 <xTaskGetSchedulerState>
 80036e8:	4606      	mov	r6, r0
 80036ea:	b950      	cbnz	r0, 8003702 <xQueueReceive+0x56>
 80036ec:	9b01      	ldr	r3, [sp, #4]
 80036ee:	b14b      	cbz	r3, 8003704 <xQueueReceive+0x58>
 80036f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	e7fe      	b.n	8003700 <xQueueReceive+0x54>
 8003702:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003704:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8003708:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 80037e8 <xQueueReceive+0x13c>
 800370c:	e03b      	b.n	8003786 <xQueueReceive+0xda>
				if( xTicksToWait == ( TickType_t ) 0 )
 800370e:	9d01      	ldr	r5, [sp, #4]
 8003710:	b91d      	cbnz	r5, 800371a <xQueueReceive+0x6e>
					taskEXIT_CRITICAL();
 8003712:	f001 fa61 	bl	8004bd8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8003716:	2000      	movs	r0, #0
 8003718:	e052      	b.n	80037c0 <xQueueReceive+0x114>
				else if( xEntryTimeSet == pdFALSE )
 800371a:	b916      	cbnz	r6, 8003722 <xQueueReceive+0x76>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800371c:	a802      	add	r0, sp, #8
 800371e:	f000 fd59 	bl	80041d4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003722:	f001 fa59 	bl	8004bd8 <vPortExitCritical>
		vTaskSuspendAll();
 8003726:	f000 fbaf 	bl	8003e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800372a:	f001 fa33 	bl	8004b94 <vPortEnterCritical>
 800372e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003732:	2bff      	cmp	r3, #255	; 0xff
 8003734:	d101      	bne.n	800373a <xQueueReceive+0x8e>
 8003736:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800373a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800373e:	2bff      	cmp	r3, #255	; 0xff
 8003740:	d101      	bne.n	8003746 <xQueueReceive+0x9a>
 8003742:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8003746:	f001 fa47 	bl	8004bd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800374a:	a901      	add	r1, sp, #4
 800374c:	a802      	add	r0, sp, #8
 800374e:	f000 fd4b 	bl	80041e8 <xTaskCheckForTimeOut>
 8003752:	2800      	cmp	r0, #0
 8003754:	d13d      	bne.n	80037d2 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003756:	4620      	mov	r0, r4
 8003758:	f7ff fd14 	bl	8003184 <prvIsQueueEmpty>
 800375c:	b398      	cbz	r0, 80037c6 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800375e:	9901      	ldr	r1, [sp, #4]
 8003760:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003764:	f000 fce2 	bl	800412c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003768:	4620      	mov	r0, r4
 800376a:	f7ff fd60 	bl	800322e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800376e:	f000 fc17 	bl	8003fa0 <xTaskResumeAll>
 8003772:	b938      	cbnz	r0, 8003784 <xQueueReceive+0xd8>
					portYIELD_WITHIN_API();
 8003774:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003778:	f8c9 3000 	str.w	r3, [r9]
 800377c:	f3bf 8f4f 	dsb	sy
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8003786:	f001 fa05 	bl	8004b94 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800378a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800378c:	2d00      	cmp	r5, #0
 800378e:	d0be      	beq.n	800370e <xQueueReceive+0x62>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003790:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003792:	4639      	mov	r1, r7
 8003794:	4620      	mov	r0, r4
 8003796:	f7ff fd35 	bl	8003204 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800379a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800379c:	6923      	ldr	r3, [r4, #16]
 800379e:	b163      	cbz	r3, 80037ba <xQueueReceive+0x10e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037a0:	f104 0010 	add.w	r0, r4, #16
 80037a4:	f000 fcda 	bl	800415c <xTaskRemoveFromEventList>
 80037a8:	b138      	cbz	r0, 80037ba <xQueueReceive+0x10e>
						queueYIELD_IF_USING_PREEMPTION();
 80037aa:	4b0f      	ldr	r3, [pc, #60]	; (80037e8 <xQueueReceive+0x13c>)
 80037ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80037ba:	f001 fa0d 	bl	8004bd8 <vPortExitCritical>
				return pdPASS;
 80037be:	2001      	movs	r0, #1
}
 80037c0:	b005      	add	sp, #20
 80037c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 80037c6:	4620      	mov	r0, r4
 80037c8:	f7ff fd31 	bl	800322e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80037cc:	f000 fbe8 	bl	8003fa0 <xTaskResumeAll>
 80037d0:	e7d8      	b.n	8003784 <xQueueReceive+0xd8>
			prvUnlockQueue( pxQueue );
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7ff fd2b 	bl	800322e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80037d8:	f000 fbe2 	bl	8003fa0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037dc:	4620      	mov	r0, r4
 80037de:	f7ff fcd1 	bl	8003184 <prvIsQueueEmpty>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d0ce      	beq.n	8003784 <xQueueReceive+0xd8>
 80037e6:	e796      	b.n	8003716 <xQueueReceive+0x6a>
 80037e8:	e000ed04 	.word	0xe000ed04

080037ec <xQueueSemaphoreTake>:
{
 80037ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 80037f0:	4604      	mov	r4, r0
{
 80037f2:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 80037f4:	b940      	cbnz	r0, 8003808 <xQueueSemaphoreTake+0x1c>
 80037f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fa:	f383 8811 	msr	BASEPRI, r3
 80037fe:	f3bf 8f6f 	isb	sy
 8003802:	f3bf 8f4f 	dsb	sy
 8003806:	e7fe      	b.n	8003806 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8003808:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800380a:	b145      	cbz	r5, 800381e <xQueueSemaphoreTake+0x32>
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	e7fe      	b.n	800381c <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800381e:	f000 fdc7 	bl	80043b0 <xTaskGetSchedulerState>
 8003822:	4606      	mov	r6, r0
 8003824:	b950      	cbnz	r0, 800383c <xQueueSemaphoreTake+0x50>
 8003826:	9b01      	ldr	r3, [sp, #4]
 8003828:	b16b      	cbz	r3, 8003846 <xQueueSemaphoreTake+0x5a>
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	e7fe      	b.n	800383a <xQueueSemaphoreTake+0x4e>
 800383c:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800383e:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8003840:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8003970 <xQueueSemaphoreTake+0x184>
 8003844:	e051      	b.n	80038ea <xQueueSemaphoreTake+0xfe>
 8003846:	4605      	mov	r5, r0
 8003848:	e7f9      	b.n	800383e <xQueueSemaphoreTake+0x52>
				if( xTicksToWait == ( TickType_t ) 0 )
 800384a:	9b01      	ldr	r3, [sp, #4]
 800384c:	b963      	cbnz	r3, 8003868 <xQueueSemaphoreTake+0x7c>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800384e:	b145      	cbz	r5, 8003862 <xQueueSemaphoreTake+0x76>
 8003850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003854:	f383 8811 	msr	BASEPRI, r3
 8003858:	f3bf 8f6f 	isb	sy
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	e7fe      	b.n	8003860 <xQueueSemaphoreTake+0x74>
					taskEXIT_CRITICAL();
 8003862:	f001 f9b9 	bl	8004bd8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003866:	e05e      	b.n	8003926 <xQueueSemaphoreTake+0x13a>
				else if( xEntryTimeSet == pdFALSE )
 8003868:	b916      	cbnz	r6, 8003870 <xQueueSemaphoreTake+0x84>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800386a:	a802      	add	r0, sp, #8
 800386c:	f000 fcb2 	bl	80041d4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003870:	f001 f9b2 	bl	8004bd8 <vPortExitCritical>
		vTaskSuspendAll();
 8003874:	f000 fb08 	bl	8003e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003878:	f001 f98c 	bl	8004b94 <vPortEnterCritical>
 800387c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003880:	2bff      	cmp	r3, #255	; 0xff
 8003882:	d101      	bne.n	8003888 <xQueueSemaphoreTake+0x9c>
 8003884:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8003888:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800388c:	2bff      	cmp	r3, #255	; 0xff
 800388e:	d101      	bne.n	8003894 <xQueueSemaphoreTake+0xa8>
 8003890:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003894:	f001 f9a0 	bl	8004bd8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003898:	a901      	add	r1, sp, #4
 800389a:	a802      	add	r0, sp, #8
 800389c:	f000 fca4 	bl	80041e8 <xTaskCheckForTimeOut>
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d14a      	bne.n	800393a <xQueueSemaphoreTake+0x14e>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038a4:	4620      	mov	r0, r4
 80038a6:	f7ff fc6d 	bl	8003184 <prvIsQueueEmpty>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d03f      	beq.n	800392e <xQueueSemaphoreTake+0x142>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038ae:	6823      	ldr	r3, [r4, #0]
 80038b0:	b93b      	cbnz	r3, 80038c2 <xQueueSemaphoreTake+0xd6>
						taskENTER_CRITICAL();
 80038b2:	f001 f96f 	bl	8004b94 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80038b6:	68a0      	ldr	r0, [r4, #8]
 80038b8:	f000 fd8a 	bl	80043d0 <xTaskPriorityInherit>
 80038bc:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80038be:	f001 f98b 	bl	8004bd8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80038c2:	9901      	ldr	r1, [sp, #4]
 80038c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80038c8:	f000 fc30 	bl	800412c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038cc:	4620      	mov	r0, r4
 80038ce:	f7ff fcae 	bl	800322e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038d2:	f000 fb65 	bl	8003fa0 <xTaskResumeAll>
 80038d6:	b938      	cbnz	r0, 80038e8 <xQueueSemaphoreTake+0xfc>
					portYIELD_WITHIN_API();
 80038d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038dc:	f8c8 3000 	str.w	r3, [r8]
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80038ea:	f001 f953 	bl	8004b94 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80038ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0aa      	beq.n	800384a <xQueueSemaphoreTake+0x5e>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80038f4:	3b01      	subs	r3, #1
 80038f6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	b913      	cbnz	r3, 8003902 <xQueueSemaphoreTake+0x116>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80038fc:	f000 feba 	bl	8004674 <pvTaskIncrementMutexHeldCount>
 8003900:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003902:	6923      	ldr	r3, [r4, #16]
 8003904:	b163      	cbz	r3, 8003920 <xQueueSemaphoreTake+0x134>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003906:	f104 0010 	add.w	r0, r4, #16
 800390a:	f000 fc27 	bl	800415c <xTaskRemoveFromEventList>
 800390e:	b138      	cbz	r0, 8003920 <xQueueSemaphoreTake+0x134>
						queueYIELD_IF_USING_PREEMPTION();
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <xQueueSemaphoreTake+0x184>)
 8003912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	f3bf 8f6f 	isb	sy
				return pdPASS;
 8003920:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8003922:	f001 f959 	bl	8004bd8 <vPortExitCritical>
}
 8003926:	4628      	mov	r0, r5
 8003928:	b004      	add	sp, #16
 800392a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 800392e:	4620      	mov	r0, r4
 8003930:	f7ff fc7d 	bl	800322e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003934:	f000 fb34 	bl	8003fa0 <xTaskResumeAll>
 8003938:	e7d6      	b.n	80038e8 <xQueueSemaphoreTake+0xfc>
			prvUnlockQueue( pxQueue );
 800393a:	4620      	mov	r0, r4
 800393c:	f7ff fc77 	bl	800322e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003940:	f000 fb2e 	bl	8003fa0 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003944:	4620      	mov	r0, r4
 8003946:	f7ff fc1d 	bl	8003184 <prvIsQueueEmpty>
 800394a:	2800      	cmp	r0, #0
 800394c:	d0cc      	beq.n	80038e8 <xQueueSemaphoreTake+0xfc>
					if( xInheritanceOccurred != pdFALSE )
 800394e:	2d00      	cmp	r5, #0
 8003950:	d0e9      	beq.n	8003926 <xQueueSemaphoreTake+0x13a>
						taskENTER_CRITICAL();
 8003952:	f001 f91f 	bl	8004b94 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003956:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003958:	b119      	cbz	r1, 8003962 <xQueueSemaphoreTake+0x176>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800395a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800395c:	6819      	ldr	r1, [r3, #0]
 800395e:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003962:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8003964:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003966:	f000 fdcd 	bl	8004504 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800396a:	f001 f935 	bl	8004bd8 <vPortExitCritical>
 800396e:	e7da      	b.n	8003926 <xQueueSemaphoreTake+0x13a>
 8003970:	e000ed04 	.word	0xe000ed04

08003974 <xQueueReceiveFromISR>:
{
 8003974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003978:	4689      	mov	r9, r1
 800397a:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800397c:	4605      	mov	r5, r0
 800397e:	b940      	cbnz	r0, 8003992 <xQueueReceiveFromISR+0x1e>
 8003980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003984:	f383 8811 	msr	BASEPRI, r3
 8003988:	f3bf 8f6f 	isb	sy
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	e7fe      	b.n	8003990 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003992:	b951      	cbnz	r1, 80039aa <xQueueReceiveFromISR+0x36>
 8003994:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003996:	b143      	cbz	r3, 80039aa <xQueueReceiveFromISR+0x36>
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	e7fe      	b.n	80039a8 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039aa:	f001 fa0b 	bl	8004dc4 <vPortValidateInterruptPriority>
	__asm volatile
 80039ae:	f3ef 8711 	mrs	r7, BASEPRI
 80039b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b6:	f383 8811 	msr	BASEPRI, r3
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039c2:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039c4:	b31c      	cbz	r4, 8003a0e <xQueueReceiveFromISR+0x9a>
			const int8_t cRxLock = pxQueue->cRxLock;
 80039c6:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039ca:	4649      	mov	r1, r9
 80039cc:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039ce:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 80039d0:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80039d2:	f7ff fc17 	bl	8003204 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80039d6:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80039d8:	1c73      	adds	r3, r6, #1
 80039da:	d113      	bne.n	8003a04 <xQueueReceiveFromISR+0x90>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039dc:	692b      	ldr	r3, [r5, #16]
 80039de:	b90b      	cbnz	r3, 80039e4 <xQueueReceiveFromISR+0x70>
			xReturn = pdPASS;
 80039e0:	2001      	movs	r0, #1
 80039e2:	e00b      	b.n	80039fc <xQueueReceiveFromISR+0x88>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039e4:	f105 0010 	add.w	r0, r5, #16
 80039e8:	f000 fbb8 	bl	800415c <xTaskRemoveFromEventList>
 80039ec:	2800      	cmp	r0, #0
 80039ee:	d0f7      	beq.n	80039e0 <xQueueReceiveFromISR+0x6c>
						if( pxHigherPriorityTaskWoken != NULL )
 80039f0:	f1b8 0f00 	cmp.w	r8, #0
 80039f4:	d0f4      	beq.n	80039e0 <xQueueReceiveFromISR+0x6c>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80039f6:	2001      	movs	r0, #1
 80039f8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80039fc:	f387 8811 	msr	BASEPRI, r7
}
 8003a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003a04:	3601      	adds	r6, #1
 8003a06:	b276      	sxtb	r6, r6
 8003a08:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8003a0c:	e7e8      	b.n	80039e0 <xQueueReceiveFromISR+0x6c>
			xReturn = pdFAIL;
 8003a0e:	4620      	mov	r0, r4
 8003a10:	e7f4      	b.n	80039fc <xQueueReceiveFromISR+0x88>

08003a12 <uxQueueMessagesWaiting>:
{
 8003a12:	b513      	push	{r0, r1, r4, lr}
	configASSERT( xQueue );
 8003a14:	4604      	mov	r4, r0
 8003a16:	b940      	cbnz	r0, 8003a2a <uxQueueMessagesWaiting+0x18>
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	f383 8811 	msr	BASEPRI, r3
 8003a20:	f3bf 8f6f 	isb	sy
 8003a24:	f3bf 8f4f 	dsb	sy
 8003a28:	e7fe      	b.n	8003a28 <uxQueueMessagesWaiting+0x16>
	taskENTER_CRITICAL();
 8003a2a:	f001 f8b3 	bl	8004b94 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003a2e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003a30:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 8003a32:	f001 f8d1 	bl	8004bd8 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003a36:	9801      	ldr	r0, [sp, #4]
 8003a38:	b002      	add	sp, #8
 8003a3a:	bd10      	pop	{r4, pc}

08003a3c <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
 8003a3c:	b940      	cbnz	r0, 8003a50 <uxQueueMessagesWaitingFromISR+0x14>
 8003a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a42:	f383 8811 	msr	BASEPRI, r3
 8003a46:	f3bf 8f6f 	isb	sy
 8003a4a:	f3bf 8f4f 	dsb	sy
 8003a4e:	e7fe      	b.n	8003a4e <uxQueueMessagesWaitingFromISR+0x12>
	uxReturn = pxQueue->uxMessagesWaiting;
 8003a50:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003a52:	4770      	bx	lr

08003a54 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a54:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003a56:	4909      	ldr	r1, [pc, #36]	; (8003a7c <vQueueUnregisterQueue+0x28>)
	{
 8003a58:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003a5a:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8003a5e:	00dc      	lsls	r4, r3, #3
 8003a60:	4282      	cmp	r2, r0
 8003a62:	d106      	bne.n	8003a72 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003a64:	4a06      	ldr	r2, [pc, #24]	; (8003a80 <vQueueUnregisterQueue+0x2c>)
 8003a66:	2100      	movs	r1, #0
 8003a68:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003a6c:	4422      	add	r2, r4
 8003a6e:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003a70:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a72:	3301      	adds	r3, #1
 8003a74:	2b08      	cmp	r3, #8
 8003a76:	d1f0      	bne.n	8003a5a <vQueueUnregisterQueue+0x6>
 8003a78:	e7fa      	b.n	8003a70 <vQueueUnregisterQueue+0x1c>
 8003a7a:	bf00      	nop
 8003a7c:	240069d4 	.word	0x240069d4
 8003a80:	240069d0 	.word	0x240069d0

08003a84 <vQueueDelete>:
{
 8003a84:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 8003a86:	b940      	cbnz	r0, 8003a9a <vQueueDelete+0x16>
 8003a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a8c:	f383 8811 	msr	BASEPRI, r3
 8003a90:	f3bf 8f6f 	isb	sy
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	e7fe      	b.n	8003a98 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 8003a9a:	f7ff ffdb 	bl	8003a54 <vQueueUnregisterQueue>
}
 8003a9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		vPortFree( pxQueue );
 8003aa2:	f000 bfd9 	b.w	8004a58 <vPortFree>
	...

08003aa8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <prvResetNextTaskUnblockTime+0x1c>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	6812      	ldr	r2, [r2, #0]
 8003aae:	b91a      	cbnz	r2, 8003ab8 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ab4:	605a      	str	r2, [r3, #4]
	}
}
 8003ab6:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003abc:	68d2      	ldr	r2, [r2, #12]
 8003abe:	6852      	ldr	r2, [r2, #4]
 8003ac0:	e7f8      	b.n	8003ab4 <prvResetNextTaskUnblockTime+0xc>
 8003ac2:	bf00      	nop
 8003ac4:	2400010c 	.word	0x2400010c

08003ac8 <prvAddCurrentTaskToDelayedList.isra.0>:
	}

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8003ac8:	b570      	push	{r4, r5, r6, lr}
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003aca:	4c12      	ldr	r4, [pc, #72]	; (8003b14 <prvAddCurrentTaskToDelayedList.isra.0+0x4c>)
static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8003acc:	4605      	mov	r5, r0
const TickType_t xConstTickCount = xTickCount;
 8003ace:	68a6      	ldr	r6, [r4, #8]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ad0:	68e0      	ldr	r0, [r4, #12]
 8003ad2:	3004      	adds	r0, #4
 8003ad4:	f7ff fb46 	bl	8003164 <uxListRemove>
 8003ad8:	b938      	cbnz	r0, 8003aea <prvAddCurrentTaskToDelayedList.isra.0+0x22>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003ada:	68e2      	ldr	r2, [r4, #12]
 8003adc:	6923      	ldr	r3, [r4, #16]
 8003ade:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	408a      	lsls	r2, r1
 8003ae4:	ea23 0302 	bic.w	r3, r3, r2
 8003ae8:	6123      	str	r3, [r4, #16]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8003aea:	1975      	adds	r5, r6, r5

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003aec:	68e3      	ldr	r3, [r4, #12]
 8003aee:	605d      	str	r5, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8003af0:	d306      	bcc.n	8003b00 <prvAddCurrentTaskToDelayedList.isra.0+0x38>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003af2:	6960      	ldr	r0, [r4, #20]
 8003af4:	68e1      	ldr	r1, [r4, #12]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003af6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003afa:	3104      	adds	r1, #4
 8003afc:	f7ff bb1b 	b.w	8003136 <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b00:	6820      	ldr	r0, [r4, #0]
 8003b02:	68e1      	ldr	r1, [r4, #12]
 8003b04:	3104      	adds	r1, #4
 8003b06:	f7ff fb16 	bl	8003136 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8003b0a:	6863      	ldr	r3, [r4, #4]
 8003b0c:	429d      	cmp	r5, r3
 8003b0e:	d200      	bcs.n	8003b12 <prvAddCurrentTaskToDelayedList.isra.0+0x4a>
				xNextTaskUnblockTime = xTimeToWake;
 8003b10:	6065      	str	r5, [r4, #4]
}
 8003b12:	bd70      	pop	{r4, r5, r6, pc}
 8003b14:	2400010c 	.word	0x2400010c

08003b18 <prvIdleTask>:
{
 8003b18:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b1a:	4c12      	ldr	r4, [pc, #72]	; (8003b64 <prvIdleTask+0x4c>)
				taskYIELD();
 8003b1c:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 8003b20:	4e11      	ldr	r6, [pc, #68]	; (8003b68 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b24:	b943      	cbnz	r3, 8003b38 <prvIdleTask+0x20>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d9fa      	bls.n	8003b22 <prvIdleTask+0xa>
				taskYIELD();
 8003b2c:	6037      	str	r7, [r6, #0]
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	e7f4      	b.n	8003b22 <prvIdleTask+0xa>
			taskENTER_CRITICAL();
 8003b38:	f001 f82c 	bl	8004b94 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b3e:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b40:	1d28      	adds	r0, r5, #4
 8003b42:	f7ff fb0f 	bl	8003164 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	62e3      	str	r3, [r4, #44]	; 0x2c
				--uxDeletedTasksWaitingCleanUp;
 8003b4c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b4e:	3b01      	subs	r3, #1
 8003b50:	6323      	str	r3, [r4, #48]	; 0x30
			taskEXIT_CRITICAL();
 8003b52:	f001 f841 	bl	8004bd8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003b56:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003b58:	f000 ff7e 	bl	8004a58 <vPortFree>
			vPortFree( pxTCB );
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	f000 ff7b 	bl	8004a58 <vPortFree>
	}
 8003b62:	e7de      	b.n	8003b22 <prvIdleTask+0xa>
 8003b64:	2400010c 	.word	0x2400010c
 8003b68:	e000ed04 	.word	0xe000ed04

08003b6c <xTaskCreate>:
	{
 8003b6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b70:	0096      	lsls	r6, r2, #2
	{
 8003b72:	4607      	mov	r7, r0
 8003b74:	460c      	mov	r4, r1
 8003b76:	4698      	mov	r8, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b78:	4630      	mov	r0, r6
 8003b7a:	f000 feef 	bl	800495c <pvPortMalloc>
			if( pxStack != NULL )
 8003b7e:	4681      	mov	r9, r0
 8003b80:	b1a0      	cbz	r0, 8003bac <xTaskCreate+0x40>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b82:	205c      	movs	r0, #92	; 0x5c
 8003b84:	f000 feea 	bl	800495c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003b88:	4605      	mov	r5, r0
 8003b8a:	b160      	cbz	r0, 8003ba6 <xTaskCreate+0x3a>
					pxNewTCB->pxStack = pxStack;
 8003b8c:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b90:	4632      	mov	r2, r6
 8003b92:	21a5      	movs	r1, #165	; 0xa5
 8003b94:	4648      	mov	r0, r9
 8003b96:	f008 fd55 	bl	800c644 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b9a:	f8d5 b030 	ldr.w	fp, [r5, #48]	; 0x30
	if( pcName != NULL )
 8003b9e:	b944      	cbnz	r4, 8003bb2 <xTaskCreate+0x46>
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003ba0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
 8003ba4:	e014      	b.n	8003bd0 <xTaskCreate+0x64>
					vPortFree( pxStack );
 8003ba6:	4648      	mov	r0, r9
 8003ba8:	f000 ff56 	bl	8004a58 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bac:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003bb0:	e09a      	b.n	8003ce8 <xTaskCreate+0x17c>
 8003bb2:	1e63      	subs	r3, r4, #1
 8003bb4:	f105 0234 	add.w	r2, r5, #52	; 0x34
 8003bb8:	340f      	adds	r4, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003bbe:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8003bc2:	7819      	ldrb	r1, [r3, #0]
 8003bc4:	b109      	cbz	r1, 8003bca <xTaskCreate+0x5e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc6:	429c      	cmp	r4, r3
 8003bc8:	d1f7      	bne.n	8003bba <xTaskCreate+0x4e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bca:	2300      	movs	r3, #0
 8003bcc:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003bd0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 8003bd2:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bd6:	f105 0904 	add.w	r9, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bda:	3e04      	subs	r6, #4
 8003bdc:	2c06      	cmp	r4, #6
		pxNewTCB->uxMutexesHeld = 0;
 8003bde:	f8c5 a050 	str.w	sl, [r5, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003be2:	4648      	mov	r0, r9
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003be4:	445e      	add	r6, fp
 8003be6:	bf28      	it	cs
 8003be8:	2406      	movcs	r4, #6
	pxNewTCB->uxPriority = uxPriority;
 8003bea:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003bec:	64ec      	str	r4, [r5, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bee:	f1c4 0407 	rsb	r4, r4, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003bf2:	f7ff fa91 	bl	8003118 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003bf6:	f105 0018 	add.w	r0, r5, #24
 8003bfa:	f7ff fa8d 	bl	8003118 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003bfe:	f8c5 a054 	str.w	sl, [r5, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c02:	4642      	mov	r2, r8
 8003c04:	4639      	mov	r1, r7
 8003c06:	f026 0007 	bic.w	r0, r6, #7
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c0a:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c0c:	61ac      	str	r4, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c0e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c10:	f885 a058 	strb.w	sl, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c14:	f000 ff96 	bl	8004b44 <pxPortInitialiseStack>
	if( pxCreatedTask != NULL )
 8003c18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c1a:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 8003c1c:	b103      	cbz	r3, 8003c20 <xTaskCreate+0xb4>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c1e:	601d      	str	r5, [r3, #0]
		uxCurrentNumberOfTasks++;
 8003c20:	4c38      	ldr	r4, [pc, #224]	; (8003d04 <xTaskCreate+0x198>)
	taskENTER_CRITICAL();
 8003c22:	f000 ffb7 	bl	8004b94 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003c26:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c28:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8003c2c:	3301      	adds	r3, #1
 8003c2e:	62e3      	str	r3, [r4, #44]	; 0x2c
		if( pxCurrentTCB == NULL )
 8003c30:	68e3      	ldr	r3, [r4, #12]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d15b      	bne.n	8003cee <xTaskCreate+0x182>
			pxCurrentTCB = pxNewTCB;
 8003c36:	60e5      	str	r5, [r4, #12]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c38:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d12f      	bne.n	8003c9e <xTaskCreate+0x132>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c3e:	4638      	mov	r0, r7
	vListInitialise( &xDelayedTaskList1 );
 8003c40:	f104 08c0 	add.w	r8, r4, #192	; 0xc0
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c44:	f7ff fa5d 	bl	8003102 <vListInitialise>
 8003c48:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8003c4c:	f7ff fa59 	bl	8003102 <vListInitialise>
 8003c50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003c54:	f7ff fa55 	bl	8003102 <vListInitialise>
 8003c58:	f104 0070 	add.w	r0, r4, #112	; 0x70
 8003c5c:	f7ff fa51 	bl	8003102 <vListInitialise>
 8003c60:	f104 0084 	add.w	r0, r4, #132	; 0x84
 8003c64:	f7ff fa4d 	bl	8003102 <vListInitialise>
 8003c68:	f104 0098 	add.w	r0, r4, #152	; 0x98
	vListInitialise( &xDelayedTaskList2 );
 8003c6c:	f104 06d4 	add.w	r6, r4, #212	; 0xd4
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c70:	f7ff fa47 	bl	8003102 <vListInitialise>
 8003c74:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8003c78:	f7ff fa43 	bl	8003102 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	f7ff fa40 	bl	8003102 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c82:	4630      	mov	r0, r6
 8003c84:	f7ff fa3d 	bl	8003102 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c88:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8003c8c:	f7ff fa39 	bl	8003102 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003c90:	f104 0018 	add.w	r0, r4, #24
 8003c94:	f7ff fa35 	bl	8003102 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c98:	f8c4 8000 	str.w	r8, [r4]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c9c:	6166      	str	r6, [r4, #20]
		uxTaskNumber++;
 8003c9e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
		prvAddTaskToReadyList( pxNewTCB );
 8003ca2:	2601      	movs	r6, #1
 8003ca4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003ca6:	2014      	movs	r0, #20
		uxTaskNumber++;
 8003ca8:	3301      	adds	r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 8003caa:	6921      	ldr	r1, [r4, #16]
 8003cac:	fb00 7002 	mla	r0, r0, r2, r7
		uxTaskNumber++;
 8003cb0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cb4:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 8003cb6:	fa06 f302 	lsl.w	r3, r6, r2
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	6123      	str	r3, [r4, #16]
 8003cc0:	f7ff fa2d 	bl	800311e <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003cc4:	f000 ff88 	bl	8004bd8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003cc8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8003ccc:	b163      	cbz	r3, 8003ce8 <xTaskCreate+0x17c>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003cce:	68e3      	ldr	r3, [r4, #12]
 8003cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d207      	bcs.n	8003ce8 <xTaskCreate+0x17c>
			taskYIELD_IF_USING_PREEMPTION();
 8003cd8:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <xTaskCreate+0x19c>)
 8003cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cde:	601a      	str	r2, [r3, #0]
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	f3bf 8f6f 	isb	sy
	}
 8003ce8:	4630      	mov	r0, r6
 8003cea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if( xSchedulerRunning == pdFALSE )
 8003cee:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1d3      	bne.n	8003c9e <xTaskCreate+0x132>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cf6:	68e3      	ldr	r3, [r4, #12]
 8003cf8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d3ce      	bcc.n	8003c9e <xTaskCreate+0x132>
					pxCurrentTCB = pxNewTCB;
 8003d00:	60e5      	str	r5, [r4, #12]
 8003d02:	e7cc      	b.n	8003c9e <xTaskCreate+0x132>
 8003d04:	2400010c 	.word	0x2400010c
 8003d08:	e000ed04 	.word	0xe000ed04

08003d0c <vTaskDelete>:
	{
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	4605      	mov	r5, r0
 8003d10:	4c29      	ldr	r4, [pc, #164]	; (8003db8 <vTaskDelete+0xac>)
		taskENTER_CRITICAL();
 8003d12:	f000 ff3f 	bl	8004b94 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003d16:	b905      	cbnz	r5, 8003d1a <vTaskDelete+0xe>
 8003d18:	68e5      	ldr	r5, [r4, #12]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d1a:	1d2e      	adds	r6, r5, #4
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f7ff fa21 	bl	8003164 <uxListRemove>
 8003d22:	b958      	cbnz	r0, 8003d3c <vTaskDelete+0x30>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d24:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8003d26:	2014      	movs	r0, #20
 8003d28:	fb00 4001 	mla	r0, r0, r1, r4
 8003d2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003d2e:	b92b      	cbnz	r3, 8003d3c <vTaskDelete+0x30>
 8003d30:	2201      	movs	r2, #1
 8003d32:	6923      	ldr	r3, [r4, #16]
 8003d34:	408a      	lsls	r2, r1
 8003d36:	ea23 0302 	bic.w	r3, r3, r2
 8003d3a:	6123      	str	r3, [r4, #16]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003d3e:	b11b      	cbz	r3, 8003d48 <vTaskDelete+0x3c>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d40:	f105 0018 	add.w	r0, r5, #24
 8003d44:	f7ff fa0e 	bl	8003164 <uxListRemove>
			uxTaskNumber++;
 8003d48:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			if( pxTCB == pxCurrentTCB )
 8003d52:	68e3      	ldr	r3, [r4, #12]
 8003d54:	42ab      	cmp	r3, r5
 8003d56:	d11a      	bne.n	8003d8e <vTaskDelete+0x82>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003d58:	4631      	mov	r1, r6
 8003d5a:	4818      	ldr	r0, [pc, #96]	; (8003dbc <vTaskDelete+0xb0>)
 8003d5c:	f7ff f9df 	bl	800311e <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8003d60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003d62:	3301      	adds	r3, #1
 8003d64:	6323      	str	r3, [r4, #48]	; 0x30
		taskEXIT_CRITICAL();
 8003d66:	f000 ff37 	bl	8004bd8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003d6a:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
 8003d6e:	b313      	cbz	r3, 8003db6 <vTaskDelete+0xaa>
			if( pxTCB == pxCurrentTCB )
 8003d70:	68e3      	ldr	r3, [r4, #12]
 8003d72:	42ab      	cmp	r3, r5
 8003d74:	d11f      	bne.n	8003db6 <vTaskDelete+0xaa>
				configASSERT( uxSchedulerSuspended == 0 );
 8003d76:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003d7a:	b1a3      	cbz	r3, 8003da6 <vTaskDelete+0x9a>
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	e7fe      	b.n	8003d8c <vTaskDelete+0x80>
				--uxCurrentNumberOfTasks;
 8003d8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8003d90:	6b28      	ldr	r0, [r5, #48]	; 0x30
				--uxCurrentNumberOfTasks;
 8003d92:	3b01      	subs	r3, #1
 8003d94:	62e3      	str	r3, [r4, #44]	; 0x2c
			vPortFree( pxTCB->pxStack );
 8003d96:	f000 fe5f 	bl	8004a58 <vPortFree>
			vPortFree( pxTCB );
 8003d9a:	4628      	mov	r0, r5
 8003d9c:	f000 fe5c 	bl	8004a58 <vPortFree>
				prvResetNextTaskUnblockTime();
 8003da0:	f7ff fe82 	bl	8003aa8 <prvResetNextTaskUnblockTime>
 8003da4:	e7df      	b.n	8003d66 <vTaskDelete+0x5a>
				portYIELD_WITHIN_API();
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <vTaskDelete+0xb4>)
 8003da8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	f3bf 8f6f 	isb	sy
	}
 8003db6:	bd70      	pop	{r4, r5, r6, pc}
 8003db8:	2400010c 	.word	0x2400010c
 8003dbc:	24000124 	.word	0x24000124
 8003dc0:	e000ed04 	.word	0xe000ed04

08003dc4 <eTaskGetState>:
	{
 8003dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( pxTCB );
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	b940      	cbnz	r0, 8003ddc <eTaskGetState+0x18>
 8003dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dce:	f383 8811 	msr	BASEPRI, r3
 8003dd2:	f3bf 8f6f 	isb	sy
 8003dd6:	f3bf 8f4f 	dsb	sy
 8003dda:	e7fe      	b.n	8003dda <eTaskGetState+0x16>
		if( pxTCB == pxCurrentTCB )
 8003ddc:	4c0e      	ldr	r4, [pc, #56]	; (8003e18 <eTaskGetState+0x54>)
 8003dde:	68e3      	ldr	r3, [r4, #12]
 8003de0:	4283      	cmp	r3, r0
 8003de2:	d012      	beq.n	8003e0a <eTaskGetState+0x46>
			taskENTER_CRITICAL();
 8003de4:	f000 fed6 	bl	8004b94 <vPortEnterCritical>
				pxDelayedList = pxDelayedTaskList;
 8003de8:	6827      	ldr	r7, [r4, #0]
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8003dea:	696d      	ldr	r5, [r5, #20]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8003dec:	6966      	ldr	r6, [r4, #20]
			taskEXIT_CRITICAL();
 8003dee:	f000 fef3 	bl	8004bd8 <vPortExitCritical>
			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8003df2:	42bd      	cmp	r5, r7
 8003df4:	d00b      	beq.n	8003e0e <eTaskGetState+0x4a>
 8003df6:	42b5      	cmp	r5, r6
 8003df8:	d009      	beq.n	8003e0e <eTaskGetState+0x4a>
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8003dfa:	3418      	adds	r4, #24
 8003dfc:	42a5      	cmp	r5, r4
 8003dfe:	d008      	beq.n	8003e12 <eTaskGetState+0x4e>
				eReturn = eReady;
 8003e00:	2d00      	cmp	r5, #0
 8003e02:	bf0c      	ite	eq
 8003e04:	2004      	moveq	r0, #4
 8003e06:	2001      	movne	r0, #1
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			eReturn = eRunning;
 8003e0a:	2000      	movs	r0, #0
 8003e0c:	e7fc      	b.n	8003e08 <eTaskGetState+0x44>
				eReturn = eBlocked;
 8003e0e:	2002      	movs	r0, #2
 8003e10:	e7fa      	b.n	8003e08 <eTaskGetState+0x44>
					eReturn = eDeleted;
 8003e12:	2004      	movs	r0, #4
 8003e14:	e7f8      	b.n	8003e08 <eTaskGetState+0x44>
 8003e16:	bf00      	nop
 8003e18:	2400010c 	.word	0x2400010c

08003e1c <vTaskStartScheduler>:
{
 8003e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8003e1e:	4c17      	ldr	r4, [pc, #92]	; (8003e7c <vTaskStartScheduler+0x60>)
 8003e20:	2500      	movs	r5, #0
 8003e22:	2280      	movs	r2, #128	; 0x80
 8003e24:	4916      	ldr	r1, [pc, #88]	; (8003e80 <vTaskStartScheduler+0x64>)
 8003e26:	f504 7384 	add.w	r3, r4, #264	; 0x108
 8003e2a:	4816      	ldr	r0, [pc, #88]	; (8003e84 <vTaskStartScheduler+0x68>)
 8003e2c:	9500      	str	r5, [sp, #0]
 8003e2e:	9301      	str	r3, [sp, #4]
 8003e30:	462b      	mov	r3, r5
 8003e32:	f7ff fe9b 	bl	8003b6c <xTaskCreate>
	if( xReturn == pdPASS )
 8003e36:	2801      	cmp	r0, #1
 8003e38:	d112      	bne.n	8003e60 <vTaskStartScheduler+0x44>
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e4e:	6063      	str	r3, [r4, #4]
		xSchedulerRunning = pdTRUE;
 8003e50:	f8c4 00fc 	str.w	r0, [r4, #252]	; 0xfc
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e54:	60a5      	str	r5, [r4, #8]
}
 8003e56:	b003      	add	sp, #12
 8003e58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003e5c:	f000 bf32 	b.w	8004cc4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e60:	3001      	adds	r0, #1
 8003e62:	d108      	bne.n	8003e76 <vTaskStartScheduler+0x5a>
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	e7fe      	b.n	8003e74 <vTaskStartScheduler+0x58>
}
 8003e76:	b003      	add	sp, #12
 8003e78:	bd30      	pop	{r4, r5, pc}
 8003e7a:	bf00      	nop
 8003e7c:	2400010c 	.word	0x2400010c
 8003e80:	0801e589 	.word	0x0801e589
 8003e84:	08003b19 	.word	0x08003b19

08003e88 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003e88:	4a03      	ldr	r2, [pc, #12]	; (8003e98 <vTaskSuspendAll+0x10>)
 8003e8a:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
 8003e8e:	3301      	adds	r3, #1
 8003e90:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
}
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	2400010c 	.word	0x2400010c

08003e9c <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003e9c:	4b01      	ldr	r3, [pc, #4]	; (8003ea4 <xTaskGetTickCount+0x8>)
 8003e9e:	6898      	ldr	r0, [r3, #8]
}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	2400010c 	.word	0x2400010c

08003ea8 <xTaskGetTickCountFromISR>:
{
 8003ea8:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003eaa:	f000 ff8b 	bl	8004dc4 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003eae:	4b01      	ldr	r3, [pc, #4]	; (8003eb4 <xTaskGetTickCountFromISR+0xc>)
 8003eb0:	6898      	ldr	r0, [r3, #8]
}
 8003eb2:	bd08      	pop	{r3, pc}
 8003eb4:	2400010c 	.word	0x2400010c

08003eb8 <xTaskIncrementTick>:
{
 8003eb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ebc:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <xTaskIncrementTick+0xe0>)
 8003ebe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003ec2:	461c      	mov	r4, r3
 8003ec4:	2a00      	cmp	r2, #0
 8003ec6:	d15f      	bne.n	8003f88 <xTaskIncrementTick+0xd0>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ec8:	689f      	ldr	r7, [r3, #8]
 8003eca:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8003ecc:	609f      	str	r7, [r3, #8]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ece:	b9b7      	cbnz	r7, 8003efe <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	b143      	cbz	r3, 8003ee8 <xTaskIncrementTick+0x30>
 8003ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eda:	f383 8811 	msr	BASEPRI, r3
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	e7fe      	b.n	8003ee6 <xTaskIncrementTick+0x2e>
 8003ee8:	6823      	ldr	r3, [r4, #0]
 8003eea:	6962      	ldr	r2, [r4, #20]
 8003eec:	6022      	str	r2, [r4, #0]
 8003eee:	6163      	str	r3, [r4, #20]
 8003ef0:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
 8003efa:	f7ff fdd5 	bl	8003aa8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003efe:	6863      	ldr	r3, [r4, #4]
BaseType_t xSwitchRequired = pdFALSE;
 8003f00:	2500      	movs	r5, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f02:	429f      	cmp	r7, r3
 8003f04:	d210      	bcs.n	8003f28 <xTaskIncrementTick+0x70>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f06:	68e3      	ldr	r3, [r4, #12]
 8003f08:	2214      	movs	r2, #20
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	fb02 4303 	mla	r3, r2, r3, r4
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
				xSwitchRequired = pdTRUE;
 8003f12:	2b02      	cmp	r3, #2
			if( xYieldPending != pdFALSE )
 8003f14:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
				xSwitchRequired = pdTRUE;
 8003f18:	bf28      	it	cs
 8003f1a:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	bf18      	it	ne
 8003f20:	2501      	movne	r5, #1
}
 8003f22:	4628      	mov	r0, r5
 8003f24:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8003f28:	f04f 0a01 	mov.w	sl, #1
 8003f2c:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8003f9c <xTaskIncrementTick+0xe4>
 8003f30:	f04f 0914 	mov.w	r9, #20
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f34:	6823      	ldr	r3, [r4, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	b91b      	cbnz	r3, 8003f42 <xTaskIncrementTick+0x8a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
						xNextTaskUnblockTime = xItemValue;
 8003f3e:	6063      	str	r3, [r4, #4]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003f40:	e7e1      	b.n	8003f06 <xTaskIncrementTick+0x4e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003f48:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003f4a:	429f      	cmp	r7, r3
 8003f4c:	d3f7      	bcc.n	8003f3e <xTaskIncrementTick+0x86>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f4e:	f106 0b04 	add.w	fp, r6, #4
 8003f52:	4658      	mov	r0, fp
 8003f54:	f7ff f906 	bl	8003164 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f58:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8003f5a:	b11b      	cbz	r3, 8003f64 <xTaskIncrementTick+0xac>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f5c:	f106 0018 	add.w	r0, r6, #24
 8003f60:	f7ff f900 	bl	8003164 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f64:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003f66:	4659      	mov	r1, fp
 8003f68:	6922      	ldr	r2, [r4, #16]
 8003f6a:	fa0a f300 	lsl.w	r3, sl, r0
 8003f6e:	fb09 8000 	mla	r0, r9, r0, r8
 8003f72:	4313      	orrs	r3, r2
 8003f74:	6123      	str	r3, [r4, #16]
 8003f76:	f7ff f8d2 	bl	800311e <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f7a:	68e3      	ldr	r3, [r4, #12]
 8003f7c:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8003f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003f80:	429a      	cmp	r2, r3
 8003f82:	bf28      	it	cs
 8003f84:	2501      	movcs	r5, #1
 8003f86:	e7d5      	b.n	8003f34 <xTaskIncrementTick+0x7c>
		++xPendedTicks;
 8003f88:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
BaseType_t xSwitchRequired = pdFALSE;
 8003f8c:	2500      	movs	r5, #0
		++xPendedTicks;
 8003f8e:	3201      	adds	r2, #1
 8003f90:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	return xSwitchRequired;
 8003f94:	e7c5      	b.n	8003f22 <xTaskIncrementTick+0x6a>
 8003f96:	bf00      	nop
 8003f98:	2400010c 	.word	0x2400010c
 8003f9c:	24000140 	.word	0x24000140

08003fa0 <xTaskResumeAll>:
{
 8003fa0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8003fa4:	4c33      	ldr	r4, [pc, #204]	; (8004074 <xTaskResumeAll+0xd4>)
 8003fa6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003faa:	b943      	cbnz	r3, 8003fbe <xTaskResumeAll+0x1e>
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	e7fe      	b.n	8003fbc <xTaskResumeAll+0x1c>
	taskENTER_CRITICAL();
 8003fbe:	f000 fde9 	bl	8004b94 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003fc2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fcc:	f8d4 5104 	ldr.w	r5, [r4, #260]	; 0x104
 8003fd0:	b135      	cbz	r5, 8003fe0 <xTaskResumeAll+0x40>
BaseType_t xAlreadyYielded = pdFALSE;
 8003fd2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003fd4:	f000 fe00 	bl	8004bd8 <vPortExitCritical>
}
 8003fd8:	4620      	mov	r0, r4
 8003fda:	b002      	add	sp, #8
 8003fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fe0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d0f5      	beq.n	8003fd2 <xTaskResumeAll+0x32>
					prvAddTaskToReadyList( pxTCB );
 8003fe6:	2601      	movs	r6, #1
 8003fe8:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8003fec:	f04f 0814 	mov.w	r8, #20
 8003ff0:	e01d      	b.n	800402e <xTaskResumeAll+0x8e>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff2:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
 8003ff6:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003ff8:	f105 0018 	add.w	r0, r5, #24
 8003ffc:	f7ff f8b2 	bl	8003164 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004000:	1d29      	adds	r1, r5, #4
 8004002:	4608      	mov	r0, r1
 8004004:	9101      	str	r1, [sp, #4]
 8004006:	f7ff f8ad 	bl	8003164 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800400a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
 800400c:	6922      	ldr	r2, [r4, #16]
 800400e:	fa06 f300 	lsl.w	r3, r6, r0
 8004012:	9901      	ldr	r1, [sp, #4]
 8004014:	fb08 7000 	mla	r0, r8, r0, r7
 8004018:	4313      	orrs	r3, r2
 800401a:	6123      	str	r3, [r4, #16]
 800401c:	f7ff f87f 	bl	800311e <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004020:	68e3      	ldr	r3, [r4, #12]
 8004022:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004026:	429a      	cmp	r2, r3
 8004028:	d301      	bcc.n	800402e <xTaskResumeAll+0x8e>
						xYieldPending = pdTRUE;
 800402a:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800402e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1dd      	bne.n	8003ff2 <xTaskResumeAll+0x52>
				if( pxTCB != NULL )
 8004036:	b10d      	cbz	r5, 800403c <xTaskResumeAll+0x9c>
					prvResetNextTaskUnblockTime();
 8004038:	f7ff fd36 	bl	8003aa8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800403c:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
					if( xPendedCounts > ( TickType_t ) 0U )
 8004040:	b14d      	cbz	r5, 8004056 <xTaskResumeAll+0xb6>
								xYieldPending = pdTRUE;
 8004042:	2601      	movs	r6, #1
							if( xTaskIncrementTick() != pdFALSE )
 8004044:	f7ff ff38 	bl	8003eb8 <xTaskIncrementTick>
 8004048:	b108      	cbz	r0, 800404e <xTaskResumeAll+0xae>
								xYieldPending = pdTRUE;
 800404a:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
						} while( xPendedCounts > ( TickType_t ) 0U );
 800404e:	3d01      	subs	r5, #1
 8004050:	d1f8      	bne.n	8004044 <xTaskResumeAll+0xa4>
						xPendedTicks = 0;
 8004052:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
				if( xYieldPending != pdFALSE )
 8004056:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0b9      	beq.n	8003fd2 <xTaskResumeAll+0x32>
					taskYIELD_IF_USING_PREEMPTION();
 800405e:	4b06      	ldr	r3, [pc, #24]	; (8004078 <xTaskResumeAll+0xd8>)
 8004060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800406e:	2401      	movs	r4, #1
 8004070:	e7b0      	b.n	8003fd4 <xTaskResumeAll+0x34>
 8004072:	bf00      	nop
 8004074:	2400010c 	.word	0x2400010c
 8004078:	e000ed04 	.word	0xe000ed04

0800407c <vTaskDelay>:
	{
 800407c:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800407e:	b940      	cbnz	r0, 8004092 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <vTaskDelay+0x44>)
 8004082:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004086:	601a      	str	r2, [r3, #0]
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	f3bf 8f6f 	isb	sy
	}
 8004090:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8004092:	4b0c      	ldr	r3, [pc, #48]	; (80040c4 <vTaskDelay+0x48>)
 8004094:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8004098:	b143      	cbz	r3, 80040ac <vTaskDelay+0x30>
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	e7fe      	b.n	80040aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80040ac:	f7ff feec 	bl	8003e88 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80040b0:	f7ff fd0a 	bl	8003ac8 <prvAddCurrentTaskToDelayedList.isra.0>
			xAlreadyYielded = xTaskResumeAll();
 80040b4:	f7ff ff74 	bl	8003fa0 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80040b8:	2800      	cmp	r0, #0
 80040ba:	d0e1      	beq.n	8004080 <vTaskDelay+0x4>
 80040bc:	e7e8      	b.n	8004090 <vTaskDelay+0x14>
 80040be:	bf00      	nop
 80040c0:	e000ed04 	.word	0xe000ed04
 80040c4:	2400010c 	.word	0x2400010c

080040c8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040c8:	4b17      	ldr	r3, [pc, #92]	; (8004128 <vTaskSwitchContext+0x60>)
 80040ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80040ce:	4618      	mov	r0, r3
{
 80040d0:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040d2:	b11a      	cbz	r2, 80040dc <vTaskSwitchContext+0x14>
		xYieldPending = pdTRUE;
 80040d4:	2201      	movs	r2, #1
 80040d6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 80040da:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80040dc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040e0:	691a      	ldr	r2, [r3, #16]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040e2:	fab2 f282 	clz	r2, r2
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	2114      	movs	r1, #20
 80040ea:	f1c2 021f 	rsb	r2, r2, #31
 80040ee:	4351      	muls	r1, r2
 80040f0:	440b      	add	r3, r1
 80040f2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80040f4:	b944      	cbnz	r4, 8004108 <vTaskSwitchContext+0x40>
	__asm volatile
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	e7fe      	b.n	8004106 <vTaskSwitchContext+0x3e>
 8004108:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800410a:	4401      	add	r1, r0
 800410c:	6864      	ldr	r4, [r4, #4]
 800410e:	313c      	adds	r1, #60	; 0x3c
 8004110:	428c      	cmp	r4, r1
 8004112:	639c      	str	r4, [r3, #56]	; 0x38
 8004114:	bf04      	itt	eq
 8004116:	6861      	ldreq	r1, [r4, #4]
 8004118:	6399      	streq	r1, [r3, #56]	; 0x38
 800411a:	2314      	movs	r3, #20
 800411c:	fb03 0202 	mla	r2, r3, r2, r0
 8004120:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	60c3      	str	r3, [r0, #12]
}
 8004126:	e7d8      	b.n	80040da <vTaskSwitchContext+0x12>
 8004128:	2400010c 	.word	0x2400010c

0800412c <vTaskPlaceOnEventList>:
{
 800412c:	b510      	push	{r4, lr}
 800412e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004130:	b940      	cbnz	r0, 8004144 <vTaskPlaceOnEventList+0x18>
 8004132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004136:	f383 8811 	msr	BASEPRI, r3
 800413a:	f3bf 8f6f 	isb	sy
 800413e:	f3bf 8f4f 	dsb	sy
 8004142:	e7fe      	b.n	8004142 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004144:	4b04      	ldr	r3, [pc, #16]	; (8004158 <vTaskPlaceOnEventList+0x2c>)
 8004146:	68d9      	ldr	r1, [r3, #12]
 8004148:	3118      	adds	r1, #24
 800414a:	f7fe fff4 	bl	8003136 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800414e:	4620      	mov	r0, r4
}
 8004150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004154:	f7ff bcb8 	b.w	8003ac8 <prvAddCurrentTaskToDelayedList.isra.0>
 8004158:	2400010c 	.word	0x2400010c

0800415c <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800415c:	68c3      	ldr	r3, [r0, #12]
{
 800415e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004160:	68dd      	ldr	r5, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004162:	b945      	cbnz	r5, 8004176 <xTaskRemoveFromEventList+0x1a>
 8004164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	e7fe      	b.n	8004174 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004176:	f105 0118 	add.w	r1, r5, #24
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800417a:	4c15      	ldr	r4, [pc, #84]	; (80041d0 <xTaskRemoveFromEventList+0x74>)
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800417c:	4608      	mov	r0, r1
 800417e:	9101      	str	r1, [sp, #4]
 8004180:	f7fe fff0 	bl	8003164 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004184:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8004188:	9901      	ldr	r1, [sp, #4]
 800418a:	b9e3      	cbnz	r3, 80041c6 <xTaskRemoveFromEventList+0x6a>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800418c:	1d29      	adds	r1, r5, #4
 800418e:	4608      	mov	r0, r1
 8004190:	9101      	str	r1, [sp, #4]
 8004192:	f7fe ffe7 	bl	8003164 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004196:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004198:	2301      	movs	r3, #1
 800419a:	6920      	ldr	r0, [r4, #16]
 800419c:	9901      	ldr	r1, [sp, #4]
 800419e:	4093      	lsls	r3, r2
 80041a0:	4303      	orrs	r3, r0
 80041a2:	2014      	movs	r0, #20
 80041a4:	6123      	str	r3, [r4, #16]
 80041a6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 80041aa:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041ae:	f7fe ffb6 	bl	800311e <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80041b2:	68e3      	ldr	r3, [r4, #12]
 80041b4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d907      	bls.n	80041cc <xTaskRemoveFromEventList+0x70>
		xYieldPending = pdTRUE;
 80041bc:	2001      	movs	r0, #1
 80041be:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
}
 80041c2:	b003      	add	sp, #12
 80041c4:	bd30      	pop	{r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041c6:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80041ca:	e7f0      	b.n	80041ae <xTaskRemoveFromEventList+0x52>
		xReturn = pdFALSE;
 80041cc:	2000      	movs	r0, #0
	return xReturn;
 80041ce:	e7f8      	b.n	80041c2 <xTaskRemoveFromEventList+0x66>
 80041d0:	2400010c 	.word	0x2400010c

080041d4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <vTaskInternalSetTimeOutState+0x10>)
 80041d6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041da:	689b      	ldr	r3, [r3, #8]
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80041dc:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80041de:	6043      	str	r3, [r0, #4]
}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	2400010c 	.word	0x2400010c

080041e8 <xTaskCheckForTimeOut>:
{
 80041e8:	b538      	push	{r3, r4, r5, lr}
 80041ea:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80041ec:	4605      	mov	r5, r0
 80041ee:	b940      	cbnz	r0, 8004202 <xTaskCheckForTimeOut+0x1a>
 80041f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	e7fe      	b.n	8004200 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8004202:	b941      	cbnz	r1, 8004216 <xTaskCheckForTimeOut+0x2e>
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	e7fe      	b.n	8004214 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8004216:	f000 fcbd 	bl	8004b94 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800421a:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <xTaskCheckForTimeOut+0x6c>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800421c:	6828      	ldr	r0, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800421e:	6899      	ldr	r1, [r3, #8]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004220:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004224:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004226:	4298      	cmp	r0, r3
 8004228:	d001      	beq.n	800422e <xTaskCheckForTimeOut+0x46>
 800422a:	428a      	cmp	r2, r1
 800422c:	d910      	bls.n	8004250 <xTaskCheckForTimeOut+0x68>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800422e:	6823      	ldr	r3, [r4, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004230:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004232:	4283      	cmp	r3, r0
 8004234:	d90a      	bls.n	800424c <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
 8004236:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004238:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800423a:	4413      	add	r3, r2
 800423c:	6023      	str	r3, [r4, #0]
			xReturn = pdFALSE;
 800423e:	2400      	movs	r4, #0
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004240:	f7ff ffc8 	bl	80041d4 <vTaskInternalSetTimeOutState>
	taskEXIT_CRITICAL();
 8004244:	f000 fcc8 	bl	8004bd8 <vPortExitCritical>
}
 8004248:	4620      	mov	r0, r4
 800424a:	bd38      	pop	{r3, r4, r5, pc}
			*pxTicksToWait = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004250:	2401      	movs	r4, #1
 8004252:	e7f7      	b.n	8004244 <xTaskCheckForTimeOut+0x5c>
 8004254:	2400010c 	.word	0x2400010c

08004258 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004258:	4b02      	ldr	r3, [pc, #8]	; (8004264 <vTaskMissedYield+0xc>)
 800425a:	2201      	movs	r2, #1
 800425c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	2400010c 	.word	0x2400010c

08004268 <vTaskGetInfo>:
	{
 8004268:	b570      	push	{r4, r5, r6, lr}
 800426a:	460c      	mov	r4, r1
 800426c:	4616      	mov	r6, r2
		pxTCB = prvGetTCBFromHandle( xTask );
 800426e:	4605      	mov	r5, r0
 8004270:	b908      	cbnz	r0, 8004276 <vTaskGetInfo+0xe>
 8004272:	4a15      	ldr	r2, [pc, #84]	; (80042c8 <vTaskGetInfo+0x60>)
 8004274:	68d5      	ldr	r5, [r2, #12]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8004276:	f105 0234 	add.w	r2, r5, #52	; 0x34
		if( eState != eInvalid )
 800427a:	2b05      	cmp	r3, #5
		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800427c:	6025      	str	r5, [r4, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 800427e:	6062      	str	r2, [r4, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8004280:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8004282:	6122      	str	r2, [r4, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8004284:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004286:	61e2      	str	r2, [r4, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8004288:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800428a:	60a2      	str	r2, [r4, #8]
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 800428c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 800428e:	6162      	str	r2, [r4, #20]
			pxTaskStatus->ulRunTimeCounter = 0;
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	61a2      	str	r2, [r4, #24]
		if( eState != eInvalid )
 8004296:	d00e      	beq.n	80042b6 <vTaskGetInfo+0x4e>
			if( pxTCB == pxCurrentTCB )
 8004298:	490b      	ldr	r1, [pc, #44]	; (80042c8 <vTaskGetInfo+0x60>)
 800429a:	68c9      	ldr	r1, [r1, #12]
 800429c:	42a9      	cmp	r1, r5
				pxTaskStatus->eCurrentState = eRunning;
 800429e:	bf0c      	ite	eq
 80042a0:	7322      	strbeq	r2, [r4, #12]
				pxTaskStatus->eCurrentState = eState;
 80042a2:	7323      	strbne	r3, [r4, #12]
		if( xGetFreeStackSpace != pdFALSE )
 80042a4:	b176      	cbz	r6, 80042c4 <vTaskGetInfo+0x5c>
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80042a6:	6b29      	ldr	r1, [r5, #48]	; 0x30
	uint32_t ulCount = 0U;
 80042a8:	2300      	movs	r3, #0
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80042aa:	5cca      	ldrb	r2, [r1, r3]
 80042ac:	2aa5      	cmp	r2, #165	; 0xa5
 80042ae:	d007      	beq.n	80042c0 <vTaskGetInfo+0x58>
		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80042b0:	089b      	lsrs	r3, r3, #2
		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80042b2:	8423      	strh	r3, [r4, #32]
	}
 80042b4:	bd70      	pop	{r4, r5, r6, pc}
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80042b6:	4628      	mov	r0, r5
 80042b8:	f7ff fd84 	bl	8003dc4 <eTaskGetState>
 80042bc:	7320      	strb	r0, [r4, #12]
 80042be:	e7f1      	b.n	80042a4 <vTaskGetInfo+0x3c>
			ulCount++;
 80042c0:	3301      	adds	r3, #1
 80042c2:	e7f2      	b.n	80042aa <vTaskGetInfo+0x42>
			pxTaskStatus->usStackHighWaterMark = 0;
 80042c4:	8426      	strh	r6, [r4, #32]
	}
 80042c6:	e7f5      	b.n	80042b4 <vTaskGetInfo+0x4c>
 80042c8:	2400010c 	.word	0x2400010c

080042cc <prvListTasksWithinSingleList>:
	{
 80042cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80042d0:	680d      	ldr	r5, [r1, #0]
	{
 80042d2:	4606      	mov	r6, r0
 80042d4:	460c      	mov	r4, r1
 80042d6:	4617      	mov	r7, r2
		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80042d8:	b31d      	cbz	r5, 8004322 <prvListTasksWithinSingleList+0x56>
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042da:	684b      	ldr	r3, [r1, #4]
 80042dc:	f101 0808 	add.w	r8, r1, #8
	UBaseType_t uxTask = 0;
 80042e0:	2500      	movs	r5, #0
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80042e2:	f04f 0b24 	mov.w	fp, #36	; 0x24
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	4543      	cmp	r3, r8
 80042ea:	604b      	str	r3, [r1, #4]
 80042ec:	bf04      	itt	eq
 80042ee:	68cb      	ldreq	r3, [r1, #12]
 80042f0:	604b      	streq	r3, [r1, #4]
 80042f2:	684b      	ldr	r3, [r1, #4]
 80042f4:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042f8:	6863      	ldr	r3, [r4, #4]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 80042fa:	fb0b 6105 	mla	r1, fp, r5, r6
 80042fe:	2201      	movs	r2, #1
				uxTask++;
 8004300:	3501      	adds	r5, #1
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	4598      	cmp	r8, r3
 8004306:	6063      	str	r3, [r4, #4]
 8004308:	bf04      	itt	eq
 800430a:	f8d8 3004 	ldreq.w	r3, [r8, #4]
 800430e:	6063      	streq	r3, [r4, #4]
 8004310:	6863      	ldr	r3, [r4, #4]
 8004312:	f8d3 900c 	ldr.w	r9, [r3, #12]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8004316:	463b      	mov	r3, r7
 8004318:	4648      	mov	r0, r9
 800431a:	f7ff ffa5 	bl	8004268 <vTaskGetInfo>
			} while( pxNextTCB != pxFirstTCB );
 800431e:	45ca      	cmp	sl, r9
 8004320:	d1ea      	bne.n	80042f8 <prvListTasksWithinSingleList+0x2c>
	}
 8004322:	4628      	mov	r0, r5
 8004324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004328 <uxTaskGetSystemState>:
	{
 8004328:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			if( uxArraySize >= uxCurrentNumberOfTasks )
 800432c:	4e1e      	ldr	r6, [pc, #120]	; (80043a8 <uxTaskGetSystemState+0x80>)
	{
 800432e:	4605      	mov	r5, r0
 8004330:	4617      	mov	r7, r2
		vTaskSuspendAll();
 8004332:	f7ff fda9 	bl	8003e88 <vTaskSuspendAll>
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8004336:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004338:	428b      	cmp	r3, r1
 800433a:	d832      	bhi.n	80043a2 <uxTaskGetSystemState+0x7a>
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 800433c:	f04f 0807 	mov.w	r8, #7
 8004340:	2400      	movs	r4, #0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8004342:	f04f 0b14 	mov.w	fp, #20
 8004346:	f106 0a34 	add.w	sl, r6, #52	; 0x34
 800434a:	f04f 0924 	mov.w	r9, #36	; 0x24
					uxQueue--;
 800434e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8004352:	fb09 5004 	mla	r0, r9, r4, r5
 8004356:	2201      	movs	r2, #1
 8004358:	fb0b a108 	mla	r1, fp, r8, sl
 800435c:	f7ff ffb6 	bl	80042cc <prvListTasksWithinSingleList>
 8004360:	4404      	add	r4, r0
				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004362:	f1b8 0f00 	cmp.w	r8, #0
 8004366:	d1f2      	bne.n	800434e <uxTaskGetSystemState+0x26>
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8004368:	6831      	ldr	r1, [r6, #0]
 800436a:	2202      	movs	r2, #2
 800436c:	fb09 5004 	mla	r0, r9, r4, r5
 8004370:	f7ff ffac 	bl	80042cc <prvListTasksWithinSingleList>
 8004374:	4404      	add	r4, r0
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8004376:	6971      	ldr	r1, [r6, #20]
 8004378:	2202      	movs	r2, #2
 800437a:	fb09 5004 	mla	r0, r9, r4, r5
 800437e:	f7ff ffa5 	bl	80042cc <prvListTasksWithinSingleList>
 8004382:	4404      	add	r4, r0
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8004384:	2204      	movs	r2, #4
 8004386:	4909      	ldr	r1, [pc, #36]	; (80043ac <uxTaskGetSystemState+0x84>)
 8004388:	fb09 5004 	mla	r0, r9, r4, r5
 800438c:	f7ff ff9e 	bl	80042cc <prvListTasksWithinSingleList>
 8004390:	4404      	add	r4, r0
					if( pulTotalRunTime != NULL )
 8004392:	b10f      	cbz	r7, 8004398 <uxTaskGetSystemState+0x70>
						*pulTotalRunTime = 0;
 8004394:	f8c7 8000 	str.w	r8, [r7]
		( void ) xTaskResumeAll();
 8004398:	f7ff fe02 	bl	8003fa0 <xTaskResumeAll>
	}
 800439c:	4620      	mov	r0, r4
 800439e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80043a2:	2400      	movs	r4, #0
 80043a4:	e7f8      	b.n	8004398 <uxTaskGetSystemState+0x70>
 80043a6:	bf00      	nop
 80043a8:	2400010c 	.word	0x2400010c
 80043ac:	24000124 	.word	0x24000124

080043b0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80043b0:	4b06      	ldr	r3, [pc, #24]	; (80043cc <xTaskGetSchedulerState+0x1c>)
 80043b2:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
 80043b6:	b132      	cbz	r2, 80043c6 <xTaskGetSchedulerState+0x16>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043b8:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80043bc:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80043be:	bf0c      	ite	eq
 80043c0:	2002      	moveq	r0, #2
 80043c2:	2000      	movne	r0, #0
 80043c4:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043c6:	2001      	movs	r0, #1
	}
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	2400010c 	.word	0x2400010c

080043d0 <xTaskPriorityInherit>:
	{
 80043d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80043d2:	4604      	mov	r4, r0
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d031      	beq.n	800443c <xTaskPriorityInherit+0x6c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80043d8:	4a20      	ldr	r2, [pc, #128]	; (800445c <xTaskPriorityInherit+0x8c>)
 80043da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80043dc:	68d1      	ldr	r1, [r2, #12]
 80043de:	4615      	mov	r5, r2
 80043e0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80043e2:	428b      	cmp	r3, r1
 80043e4:	d232      	bcs.n	800444c <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80043e6:	6982      	ldr	r2, [r0, #24]
 80043e8:	2a00      	cmp	r2, #0
 80043ea:	db04      	blt.n	80043f6 <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043ec:	68ea      	ldr	r2, [r5, #12]
 80043ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043f0:	f1c2 0207 	rsb	r2, r2, #7
 80043f4:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80043f6:	2214      	movs	r2, #20
 80043f8:	4e19      	ldr	r6, [pc, #100]	; (8004460 <xTaskPriorityInherit+0x90>)
 80043fa:	fb02 6303 	mla	r3, r2, r3, r6
 80043fe:	6962      	ldr	r2, [r4, #20]
 8004400:	429a      	cmp	r2, r3
 8004402:	d11d      	bne.n	8004440 <xTaskPriorityInherit+0x70>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004404:	1d21      	adds	r1, r4, #4
 8004406:	4608      	mov	r0, r1
 8004408:	9101      	str	r1, [sp, #4]
 800440a:	f7fe feab 	bl	8003164 <uxListRemove>
 800440e:	9901      	ldr	r1, [sp, #4]
 8004410:	b930      	cbnz	r0, 8004420 <xTaskPriorityInherit+0x50>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004412:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004414:	2201      	movs	r2, #1
 8004416:	692b      	ldr	r3, [r5, #16]
 8004418:	4082      	lsls	r2, r0
 800441a:	ea23 0302 	bic.w	r3, r3, r2
 800441e:	612b      	str	r3, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004420:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004422:	6928      	ldr	r0, [r5, #16]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004428:	2401      	movs	r4, #1
 800442a:	fa04 f203 	lsl.w	r2, r4, r3
 800442e:	4302      	orrs	r2, r0
 8004430:	2014      	movs	r0, #20
 8004432:	fb00 6003 	mla	r0, r0, r3, r6
 8004436:	612a      	str	r2, [r5, #16]
 8004438:	f7fe fe71 	bl	800311e <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 800443c:	4620      	mov	r0, r4
		return xReturn;
 800443e:	e003      	b.n	8004448 <xTaskPriorityInherit+0x78>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004440:	68eb      	ldr	r3, [r5, #12]
				xReturn = pdTRUE;
 8004442:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8004448:	b002      	add	sp, #8
 800444a:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800444c:	68d3      	ldr	r3, [r2, #12]
 800444e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8004450:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004452:	42a0      	cmp	r0, r4
 8004454:	bf2c      	ite	cs
 8004456:	2000      	movcs	r0, #0
 8004458:	2001      	movcc	r0, #1
 800445a:	e7f5      	b.n	8004448 <xTaskPriorityInherit+0x78>
 800445c:	2400010c 	.word	0x2400010c
 8004460:	24000140 	.word	0x24000140

08004464 <xTaskPriorityDisinherit>:
	{
 8004464:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8004466:	4604      	mov	r4, r0
 8004468:	b910      	cbnz	r0, 8004470 <xTaskPriorityDisinherit+0xc>
	BaseType_t xReturn = pdFALSE;
 800446a:	2000      	movs	r0, #0
	}
 800446c:	b002      	add	sp, #8
 800446e:	bd70      	pop	{r4, r5, r6, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004470:	4d22      	ldr	r5, [pc, #136]	; (80044fc <xTaskPriorityDisinherit+0x98>)
 8004472:	68eb      	ldr	r3, [r5, #12]
 8004474:	4283      	cmp	r3, r0
 8004476:	d008      	beq.n	800448a <xTaskPriorityDisinherit+0x26>
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	e7fe      	b.n	8004488 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800448a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800448c:	b943      	cbnz	r3, 80044a0 <xTaskPriorityDisinherit+0x3c>
 800448e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	e7fe      	b.n	800449e <xTaskPriorityDisinherit+0x3a>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044a0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 80044a2:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044a4:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80044a6:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044a8:	4291      	cmp	r1, r2
 80044aa:	d0de      	beq.n	800446a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1dc      	bne.n	800446a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044b0:	1d01      	adds	r1, r0, #4
 80044b2:	4608      	mov	r0, r1
 80044b4:	9101      	str	r1, [sp, #4]
 80044b6:	f7fe fe55 	bl	8003164 <uxListRemove>
 80044ba:	9901      	ldr	r1, [sp, #4]
 80044bc:	b958      	cbnz	r0, 80044d6 <xTaskPriorityDisinherit+0x72>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80044be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80044c0:	2014      	movs	r0, #20
 80044c2:	fb00 5006 	mla	r0, r0, r6, r5
 80044c6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80044c8:	b92b      	cbnz	r3, 80044d6 <xTaskPriorityDisinherit+0x72>
 80044ca:	2201      	movs	r2, #1
 80044cc:	692b      	ldr	r3, [r5, #16]
 80044ce:	40b2      	lsls	r2, r6
 80044d0:	ea23 0302 	bic.w	r3, r3, r2
 80044d4:	612b      	str	r3, [r5, #16]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044d6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 80044d8:	6928      	ldr	r0, [r5, #16]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044da:	f1c3 0207 	rsb	r2, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044de:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e0:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80044e2:	2401      	movs	r4, #1
 80044e4:	fa04 f203 	lsl.w	r2, r4, r3
 80044e8:	4302      	orrs	r2, r0
 80044ea:	2014      	movs	r0, #20
 80044ec:	612a      	str	r2, [r5, #16]
 80044ee:	4a04      	ldr	r2, [pc, #16]	; (8004500 <xTaskPriorityDisinherit+0x9c>)
 80044f0:	fb00 2003 	mla	r0, r0, r3, r2
 80044f4:	f7fe fe13 	bl	800311e <vListInsertEnd>
					xReturn = pdTRUE;
 80044f8:	4620      	mov	r0, r4
		return xReturn;
 80044fa:	e7b7      	b.n	800446c <xTaskPriorityDisinherit+0x8>
 80044fc:	2400010c 	.word	0x2400010c
 8004500:	24000140 	.word	0x24000140

08004504 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8004504:	b573      	push	{r0, r1, r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8004506:	4604      	mov	r4, r0
 8004508:	2800      	cmp	r0, #0
 800450a:	d04b      	beq.n	80045a4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
			configASSERT( pxTCB->uxMutexesHeld );
 800450c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800450e:	b942      	cbnz	r2, 8004522 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8004510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	e7fe      	b.n	8004520 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004522:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004524:	4299      	cmp	r1, r3
 8004526:	bf38      	it	cc
 8004528:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800452a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800452c:	428b      	cmp	r3, r1
 800452e:	d039      	beq.n	80045a4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004530:	2a01      	cmp	r2, #1
 8004532:	d137      	bne.n	80045a4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					configASSERT( pxTCB != pxCurrentTCB );
 8004534:	4d1c      	ldr	r5, [pc, #112]	; (80045a8 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8004536:	68ea      	ldr	r2, [r5, #12]
 8004538:	4282      	cmp	r2, r0
 800453a:	d108      	bne.n	800454e <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800453c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004540:	f383 8811 	msr	BASEPRI, r3
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	e7fe      	b.n	800454c <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800454e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004550:	4e16      	ldr	r6, [pc, #88]	; (80045ac <vTaskPriorityDisinheritAfterTimeout+0xa8>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004552:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004554:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 8004558:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800455a:	fb02 6303 	mla	r3, r2, r3, r6
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800455e:	bfa8      	it	ge
 8004560:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004564:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004566:	bfa8      	it	ge
 8004568:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800456a:	429a      	cmp	r2, r3
 800456c:	d11a      	bne.n	80045a4 <vTaskPriorityDisinheritAfterTimeout+0xa0>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800456e:	1d01      	adds	r1, r0, #4
 8004570:	4608      	mov	r0, r1
 8004572:	9101      	str	r1, [sp, #4]
 8004574:	f7fe fdf6 	bl	8003164 <uxListRemove>
 8004578:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800457a:	9901      	ldr	r1, [sp, #4]
 800457c:	b928      	cbnz	r0, 800458a <vTaskPriorityDisinheritAfterTimeout+0x86>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800457e:	2001      	movs	r0, #1
 8004580:	692b      	ldr	r3, [r5, #16]
 8004582:	4090      	lsls	r0, r2
 8004584:	ea23 0300 	bic.w	r3, r3, r0
 8004588:	612b      	str	r3, [r5, #16]
						prvAddTaskToReadyList( pxTCB );
 800458a:	2301      	movs	r3, #1
 800458c:	6928      	ldr	r0, [r5, #16]
 800458e:	4093      	lsls	r3, r2
 8004590:	4303      	orrs	r3, r0
 8004592:	2014      	movs	r0, #20
 8004594:	fb00 6002 	mla	r0, r0, r2, r6
 8004598:	612b      	str	r3, [r5, #16]
	}
 800459a:	b002      	add	sp, #8
 800459c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 80045a0:	f7fe bdbd 	b.w	800311e <vListInsertEnd>
	}
 80045a4:	b002      	add	sp, #8
 80045a6:	bd70      	pop	{r4, r5, r6, pc}
 80045a8:	2400010c 	.word	0x2400010c
 80045ac:	24000140 	.word	0x24000140

080045b0 <vTaskList>:
	{
 80045b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uxArraySize = uxCurrentNumberOfTasks;
 80045b4:	4b2c      	ldr	r3, [pc, #176]	; (8004668 <vTaskList+0xb8>)
		*pcWriteBuffer = ( char ) 0x00;
 80045b6:	2500      	movs	r5, #0
	{
 80045b8:	4604      	mov	r4, r0
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80045ba:	2724      	movs	r7, #36	; 0x24
		uxArraySize = uxCurrentNumberOfTasks;
 80045bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	{
 80045be:	b085      	sub	sp, #20
		*pcWriteBuffer = ( char ) 0x00;
 80045c0:	7005      	strb	r5, [r0, #0]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80045c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
		uxArraySize = uxCurrentNumberOfTasks;
 80045c4:	9103      	str	r1, [sp, #12]
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80045c6:	4378      	muls	r0, r7
 80045c8:	f000 f9c8 	bl	800495c <pvPortMalloc>
		if( pxTaskStatusArray != NULL )
 80045cc:	4606      	mov	r6, r0
 80045ce:	2800      	cmp	r0, #0
 80045d0:	d046      	beq.n	8004660 <vTaskList+0xb0>
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 80045d2:	462a      	mov	r2, r5
 80045d4:	9903      	ldr	r1, [sp, #12]
 80045d6:	f7ff fea7 	bl	8004328 <uxTaskGetSystemState>
			for( x = 0; x < uxArraySize; x++ )
 80045da:	4635      	mov	r5, r6
 80045dc:	fb07 6700 	mla	r7, r7, r0, r6
 80045e0:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8004670 <vTaskList+0xc0>
			pcBuffer[ x ] = ' ';
 80045e4:	f04f 0a20 	mov.w	sl, #32
			for( x = 0; x < uxArraySize; x++ )
 80045e8:	42af      	cmp	r7, r5
 80045ea:	d105      	bne.n	80045f8 <vTaskList+0x48>
			vPortFree( pxTaskStatusArray );
 80045ec:	4630      	mov	r0, r6
	}
 80045ee:	b005      	add	sp, #20
 80045f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			vPortFree( pxTaskStatusArray );
 80045f4:	f000 ba30 	b.w	8004a58 <vPortFree>
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80045f8:	7b2b      	ldrb	r3, [r5, #12]
		strcpy( pcBuffer, pcTaskName );
 80045fa:	4620      	mov	r0, r4
 80045fc:	6869      	ldr	r1, [r5, #4]
 80045fe:	2b04      	cmp	r3, #4
 8004600:	bf94      	ite	ls
 8004602:	f819 b003 	ldrbls.w	fp, [r9, r3]
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8004606:	f04f 0b00 	movhi.w	fp, #0
		strcpy( pcBuffer, pcTaskName );
 800460a:	f008 f8aa 	bl	800c762 <strcpy>
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800460e:	4620      	mov	r0, r4
 8004610:	f7fb fe70 	bl	80002f4 <strlen>
 8004614:	4603      	mov	r3, r0
 8004616:	2b0e      	cmp	r3, #14
 8004618:	d91e      	bls.n	8004658 <vTaskList+0xa8>
 800461a:	280f      	cmp	r0, #15
 800461c:	f1c0 030f 	rsb	r3, r0, #15
		pcBuffer[ x ] = ( char ) 0x00;
 8004620:	f04f 0200 	mov.w	r2, #0
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8004624:	4911      	ldr	r1, [pc, #68]	; (800466c <vTaskList+0xbc>)
 8004626:	bf88      	it	hi
 8004628:	2300      	movhi	r3, #0
 800462a:	3524      	adds	r5, #36	; 0x24
 800462c:	4403      	add	r3, r0
		pcBuffer[ x ] = ( char ) 0x00;
 800462e:	54e2      	strb	r2, [r4, r3]
 8004630:	eb04 0803 	add.w	r8, r4, r3
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8004634:	f855 3c1c 	ldr.w	r3, [r5, #-28]
 8004638:	465a      	mov	r2, fp
 800463a:	4640      	mov	r0, r8
 800463c:	9301      	str	r3, [sp, #4]
 800463e:	f835 3c04 	ldrh.w	r3, [r5, #-4]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	f855 3c14 	ldr.w	r3, [r5, #-20]
 8004648:	f008 f85c 	bl	800c704 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 800464c:	4640      	mov	r0, r8
 800464e:	f7fb fe51 	bl	80002f4 <strlen>
 8004652:	eb08 0400 	add.w	r4, r8, r0
			for( x = 0; x < uxArraySize; x++ )
 8004656:	e7c7      	b.n	80045e8 <vTaskList+0x38>
			pcBuffer[ x ] = ' ';
 8004658:	f804 a003 	strb.w	sl, [r4, r3]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 800465c:	3301      	adds	r3, #1
 800465e:	e7da      	b.n	8004616 <vTaskList+0x66>
	}
 8004660:	b005      	add	sp, #20
 8004662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004666:	bf00      	nop
 8004668:	2400010c 	.word	0x2400010c
 800466c:	0801e58e 	.word	0x0801e58e
 8004670:	0800e1c4 	.word	0x0800e1c4

08004674 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <pvTaskIncrementMutexHeldCount+0x14>)
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	b11a      	cbz	r2, 8004682 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800467a:	68d9      	ldr	r1, [r3, #12]
 800467c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800467e:	3201      	adds	r2, #1
 8004680:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8004682:	68d8      	ldr	r0, [r3, #12]
	}
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	2400010c 	.word	0x2400010c

0800468c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800468c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800468e:	f7ff fbc5 	bl	8003e1c <vTaskStartScheduler>
  
  return osOK;
}
 8004692:	2000      	movs	r0, #0
 8004694:	bd08      	pop	{r3, pc}

08004696 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004696:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 800469a:	b10b      	cbz	r3, 80046a0 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 800469c:	f7ff bc04 	b.w	8003ea8 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80046a0:	f7ff bbfc 	b.w	8003e9c <xTaskGetTickCount>

080046a4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80046a4:	b530      	push	{r4, r5, lr}
 80046a6:	4604      	mov	r4, r0
 80046a8:	b085      	sub	sp, #20
 80046aa:	460b      	mov	r3, r1

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046ac:	8a22      	ldrh	r2, [r4, #16]
 80046ae:	ad03      	add	r5, sp, #12
 80046b0:	f9b4 4008 	ldrsh.w	r4, [r4, #8]
  if (priority != osPriorityError) {
 80046b4:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80046b6:	bf14      	ite	ne
 80046b8:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80046ba:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046bc:	e9d0 1000 	ldrd	r1, r0, [r0]
 80046c0:	e9cd 4500 	strd	r4, r5, [sp]
 80046c4:	f7ff fa52 	bl	8003b6c <xTaskCreate>
 80046c8:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046ca:	bf0c      	ite	eq
 80046cc:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 80046ce:	2000      	movne	r0, #0
}
 80046d0:	b005      	add	sp, #20
 80046d2:	bd30      	pop	{r4, r5, pc}

080046d4 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 80046d4:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 80046d6:	f7ff fb19 	bl	8003d0c <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 80046da:	2000      	movs	r0, #0
 80046dc:	bd08      	pop	{r3, pc}

080046de <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046de:	2801      	cmp	r0, #1
{
 80046e0:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046e2:	bf38      	it	cc
 80046e4:	2001      	movcc	r0, #1
 80046e6:	f7ff fcc9 	bl	800407c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80046ea:	2000      	movs	r0, #0
 80046ec:	bd08      	pop	{r3, pc}

080046ee <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 80046ee:	2001      	movs	r0, #1
 80046f0:	f7fe bf0a 	b.w	8003508 <xQueueCreateMutex>

080046f4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80046f4:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80046f6:	2400      	movs	r4, #0
 80046f8:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 80046fa:	b1e0      	cbz	r0, 8004736 <osMutexWait+0x42>
 80046fc:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004700:	b19b      	cbz	r3, 800472a <osMutexWait+0x36>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004702:	aa01      	add	r2, sp, #4
 8004704:	4621      	mov	r1, r4
 8004706:	f7ff f935 	bl	8003974 <xQueueReceiveFromISR>
 800470a:	2801      	cmp	r0, #1
 800470c:	d111      	bne.n	8004732 <osMutexWait+0x3e>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 800470e:	9b01      	ldr	r3, [sp, #4]
 8004710:	b913      	cbnz	r3, 8004718 <osMutexWait+0x24>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8004712:	2000      	movs	r0, #0
}
 8004714:	b002      	add	sp, #8
 8004716:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8004718:	4b08      	ldr	r3, [pc, #32]	; (800473c <osMutexWait+0x48>)
 800471a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	e7f3      	b.n	8004712 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800472a:	f7ff f85f 	bl	80037ec <xQueueSemaphoreTake>
 800472e:	2801      	cmp	r0, #1
 8004730:	d0ef      	beq.n	8004712 <osMutexWait+0x1e>
    return osErrorOS;
 8004732:	20ff      	movs	r0, #255	; 0xff
 8004734:	e7ee      	b.n	8004714 <osMutexWait+0x20>
    return osErrorParameter;
 8004736:	2080      	movs	r0, #128	; 0x80
 8004738:	e7ec      	b.n	8004714 <osMutexWait+0x20>
 800473a:	bf00      	nop
 800473c:	e000ed04 	.word	0xe000ed04

08004740 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004740:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8004742:	2400      	movs	r4, #0
 8004744:	9401      	str	r4, [sp, #4]
 8004746:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 800474a:	b193      	cbz	r3, 8004772 <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800474c:	a901      	add	r1, sp, #4
 800474e:	f7fe ff58 	bl	8003602 <xQueueGiveFromISR>
 8004752:	2801      	cmp	r0, #1
 8004754:	d113      	bne.n	800477e <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004756:	9b01      	ldr	r3, [sp, #4]
 8004758:	b913      	cbnz	r3, 8004760 <osMutexRelease+0x20>
  osStatus result = osOK;
 800475a:	2000      	movs	r0, #0
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 800475c:	b002      	add	sp, #8
 800475e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8004760:	4b08      	ldr	r3, [pc, #32]	; (8004784 <osMutexRelease+0x44>)
 8004762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	e7f3      	b.n	800475a <osMutexRelease+0x1a>
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004772:	461a      	mov	r2, r3
 8004774:	4619      	mov	r1, r3
 8004776:	f7fe fe15 	bl	80033a4 <xQueueGenericSend>
 800477a:	2801      	cmp	r0, #1
 800477c:	d0ed      	beq.n	800475a <osMutexRelease+0x1a>
    result = osErrorOS;
 800477e:	20ff      	movs	r0, #255	; 0xff
 8004780:	e7ec      	b.n	800475c <osMutexRelease+0x1c>
 8004782:	bf00      	nop
 8004784:	e000ed04 	.word	0xe000ed04

08004788 <osMutexDelete>:
* @param mutex_id  mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexDelete (osMutexId mutex_id)
{
 8004788:	b510      	push	{r4, lr}
 800478a:	f3ef 8405 	mrs	r4, IPSR
  if (inHandlerMode()) {
 800478e:	b91c      	cbnz	r4, 8004798 <osMutexDelete+0x10>
    return osErrorISR;
  }

  vQueueDelete(mutex_id);
 8004790:	f7ff f978 	bl	8003a84 <vQueueDelete>

  return osOK;
}
 8004794:	4620      	mov	r0, r4
 8004796:	bd10      	pop	{r4, pc}
    return osErrorISR;
 8004798:	2482      	movs	r4, #130	; 0x82
 800479a:	e7fb      	b.n	8004794 <osMutexDelete+0xc>

0800479c <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800479c:	2901      	cmp	r1, #1
{ 
 800479e:	4608      	mov	r0, r1
 80047a0:	b510      	push	{r4, lr}
  if (count == 1) {
 80047a2:	d10c      	bne.n	80047be <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 80047a4:	2203      	movs	r2, #3
 80047a6:	2100      	movs	r1, #0
 80047a8:	f7fe fdba 	bl	8003320 <xQueueGenericCreate>
 80047ac:	4604      	mov	r4, r0
 80047ae:	b120      	cbz	r0, 80047ba <osSemaphoreCreate+0x1e>
 80047b0:	2300      	movs	r3, #0
 80047b2:	461a      	mov	r2, r3
 80047b4:	4619      	mov	r1, r3
 80047b6:	f7fe fdf5 	bl	80033a4 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80047ba:	4620      	mov	r0, r4
 80047bc:	bd10      	pop	{r4, pc}
 80047be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xSemaphoreCreateCounting(count, count);
 80047c2:	f7fe bdd1 	b.w	8003368 <xQueueCreateCountingSemaphore>
	...

080047c8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80047c8:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80047ca:	2400      	movs	r4, #0
 80047cc:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80047ce:	b1e0      	cbz	r0, 800480a <osSemaphoreWait+0x42>
 80047d0:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80047d4:	b19b      	cbz	r3, 80047fe <osSemaphoreWait+0x36>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80047d6:	aa01      	add	r2, sp, #4
 80047d8:	4621      	mov	r1, r4
 80047da:	f7ff f8cb 	bl	8003974 <xQueueReceiveFromISR>
 80047de:	2801      	cmp	r0, #1
 80047e0:	d111      	bne.n	8004806 <osSemaphoreWait+0x3e>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 80047e2:	9b01      	ldr	r3, [sp, #4]
 80047e4:	b913      	cbnz	r3, 80047ec <osSemaphoreWait+0x24>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 80047e6:	2000      	movs	r0, #0
}
 80047e8:	b002      	add	sp, #8
 80047ea:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80047ec:	4b08      	ldr	r3, [pc, #32]	; (8004810 <osSemaphoreWait+0x48>)
 80047ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	e7f3      	b.n	80047e6 <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80047fe:	f7fe fff5 	bl	80037ec <xQueueSemaphoreTake>
 8004802:	2801      	cmp	r0, #1
 8004804:	d0ef      	beq.n	80047e6 <osSemaphoreWait+0x1e>
    return osErrorOS;
 8004806:	20ff      	movs	r0, #255	; 0xff
 8004808:	e7ee      	b.n	80047e8 <osSemaphoreWait+0x20>
    return osErrorParameter;
 800480a:	2080      	movs	r0, #128	; 0x80
 800480c:	e7ec      	b.n	80047e8 <osSemaphoreWait+0x20>
 800480e:	bf00      	nop
 8004810:	e000ed04 	.word	0xe000ed04

08004814 <osSemaphoreRelease>:
 8004814:	f7ff bf94 	b.w	8004740 <osMutexRelease>

08004818 <osSemaphoreDelete>:
 8004818:	f7ff bfb6 	b.w	8004788 <osMutexDelete>

0800481c <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800481c:	2200      	movs	r2, #0
 800481e:	e9d0 0100 	ldrd	r0, r1, [r0]
 8004822:	f7fe bd7d 	b.w	8003320 <xQueueGenericCreate>
	...

08004828 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 800482a:	2400      	movs	r4, #0
{
 800482c:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800482e:	9403      	str	r4, [sp, #12]
 8004830:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8004834:	b1a3      	cbz	r3, 8004860 <osMessagePut+0x38>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004836:	4623      	mov	r3, r4
 8004838:	aa03      	add	r2, sp, #12
 800483a:	a901      	add	r1, sp, #4
 800483c:	f7fe fe7f 	bl	800353e <xQueueGenericSendFromISR>
 8004840:	2801      	cmp	r0, #1
 8004842:	d115      	bne.n	8004870 <osMessagePut+0x48>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004844:	9b03      	ldr	r3, [sp, #12]
 8004846:	b913      	cbnz	r3, 800484e <osMessagePut+0x26>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8004848:	2000      	movs	r0, #0
}
 800484a:	b004      	add	sp, #16
 800484c:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <osMessagePut+0x4c>)
 8004850:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	e7f3      	b.n	8004848 <osMessagePut+0x20>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004860:	2a01      	cmp	r2, #1
 8004862:	a901      	add	r1, sp, #4
 8004864:	bf38      	it	cc
 8004866:	2201      	movcc	r2, #1
 8004868:	f7fe fd9c 	bl	80033a4 <xQueueGenericSend>
 800486c:	2801      	cmp	r0, #1
 800486e:	d0eb      	beq.n	8004848 <osMessagePut+0x20>
      return osErrorOS;
 8004870:	20ff      	movs	r0, #255	; 0xff
 8004872:	e7ea      	b.n	800484a <osMessagePut+0x22>
 8004874:	e000ed04 	.word	0xe000ed04

08004878 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004878:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800487a:	2300      	movs	r3, #0
{
 800487c:	4604      	mov	r4, r0
 800487e:	4616      	mov	r6, r2
 8004880:	4608      	mov	r0, r1
 8004882:	ad01      	add	r5, sp, #4
  event.def.message_id = queue_id;
 8004884:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8004886:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8004888:	b911      	cbnz	r1, 8004890 <osMessageGet+0x18>
    event.status = osErrorParameter;
 800488a:	2380      	movs	r3, #128	; 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	e016      	b.n	80048be <osMessageGet+0x46>
  taskWoken = pdFALSE;
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8004896:	b1cb      	cbz	r3, 80048cc <osMessageGet+0x54>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004898:	466a      	mov	r2, sp
 800489a:	a902      	add	r1, sp, #8
 800489c:	f7ff f86a 	bl	8003974 <xQueueReceiveFromISR>
      event.status = osOK;
 80048a0:	2801      	cmp	r0, #1
 80048a2:	bf0c      	ite	eq
 80048a4:	2310      	moveq	r3, #16
 80048a6:	2300      	movne	r3, #0
 80048a8:	9301      	str	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80048aa:	9b00      	ldr	r3, [sp, #0]
 80048ac:	b13b      	cbz	r3, 80048be <osMessageGet+0x46>
 80048ae:	4b0d      	ldr	r3, [pc, #52]	; (80048e4 <osMessageGet+0x6c>)
 80048b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	f3bf 8f4f 	dsb	sy
 80048ba:	f3bf 8f6f 	isb	sy
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
 80048be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80048c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80048c6:	4620      	mov	r0, r4
 80048c8:	b004      	add	sp, #16
 80048ca:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80048cc:	a902      	add	r1, sp, #8
 80048ce:	f7fe feed 	bl	80036ac <xQueueReceive>
 80048d2:	2801      	cmp	r0, #1
 80048d4:	d101      	bne.n	80048da <osMessageGet+0x62>
      event.status = osEventMessage;
 80048d6:	2310      	movs	r3, #16
 80048d8:	e7d8      	b.n	800488c <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80048da:	2e00      	cmp	r6, #0
 80048dc:	bf18      	it	ne
 80048de:	2640      	movne	r6, #64	; 0x40
 80048e0:	9601      	str	r6, [sp, #4]
 80048e2:	e7ec      	b.n	80048be <osMessageGet+0x46>
 80048e4:	e000ed04 	.word	0xe000ed04

080048e8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80048e8:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80048ea:	f7ff fd61 	bl	80043b0 <xTaskGetSchedulerState>
 80048ee:	2801      	cmp	r0, #1
 80048f0:	d003      	beq.n	80048fa <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80048f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80048f6:	f000 b9b5 	b.w	8004c64 <xPortSysTickHandler>
}
 80048fa:	bd08      	pop	{r3, pc}

080048fc <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 80048fc:	b508      	push	{r3, lr}
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 80048fe:	f7ff fe57 	bl	80045b0 <vTaskList>
#endif
  return osOK;
}
 8004902:	2000      	movs	r0, #0
 8004904:	bd08      	pop	{r3, pc}

08004906 <osMessageWaiting>:
 8004906:	f3ef 8305 	mrs	r3, IPSR
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
  if (inHandlerMode()) {
 800490a:	b10b      	cbz	r3, 8004910 <osMessageWaiting+0xa>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800490c:	f7ff b896 	b.w	8003a3c <uxQueueMessagesWaitingFromISR>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004910:	f7ff b87f 	b.w	8003a12 <uxQueueMessagesWaiting>

08004914 <osMessageDelete>:
 8004914:	f7ff bf38 	b.w	8004788 <osMutexDelete>

08004918 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <prvInsertBlockIntoFreeList+0x40>)
{
 800491a:	b530      	push	{r4, r5, lr}
 800491c:	461d      	mov	r5, r3
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800491e:	461a      	mov	r2, r3
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4283      	cmp	r3, r0
 8004924:	d3fb      	bcc.n	800491e <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004926:	6854      	ldr	r4, [r2, #4]
 8004928:	1911      	adds	r1, r2, r4
 800492a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800492c:	bf01      	itttt	eq
 800492e:	6841      	ldreq	r1, [r0, #4]
 8004930:	4610      	moveq	r0, r2
 8004932:	1909      	addeq	r1, r1, r4
 8004934:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004936:	6844      	ldr	r4, [r0, #4]
 8004938:	1901      	adds	r1, r0, r4
 800493a:	428b      	cmp	r3, r1
 800493c:	d106      	bne.n	800494c <prvInsertBlockIntoFreeList+0x34>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800493e:	68a9      	ldr	r1, [r5, #8]
 8004940:	428b      	cmp	r3, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004942:	bf1f      	itttt	ne
 8004944:	6859      	ldrne	r1, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004946:	681b      	ldrne	r3, [r3, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004948:	1909      	addne	r1, r1, r4
 800494a:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800494c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800494e:	6003      	str	r3, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004950:	bf18      	it	ne
 8004952:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004954:	bd30      	pop	{r4, r5, pc}
 8004956:	bf00      	nop
 8004958:	24000224 	.word	0x24000224

0800495c <pvPortMalloc>:
{
 800495c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxEnd == NULL )
 8004960:	4d3a      	ldr	r5, [pc, #232]	; (8004a4c <pvPortMalloc+0xf0>)
{
 8004962:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004964:	f7ff fa90 	bl	8003e88 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004968:	68ab      	ldr	r3, [r5, #8]
 800496a:	b9bb      	cbnz	r3, 800499c <pvPortMalloc+0x40>
	uxAddress = ( size_t ) ucHeap;
 800496c:	4a38      	ldr	r2, [pc, #224]	; (8004a50 <pvPortMalloc+0xf4>)
	xStart.xBlockSize = ( size_t ) 0;
 800496e:	2100      	movs	r1, #0
	uxAddress -= xHeapStructSize;
 8004970:	4b38      	ldr	r3, [pc, #224]	; (8004a54 <pvPortMalloc+0xf8>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004972:	0756      	lsls	r6, r2, #29
	xStart.xBlockSize = ( size_t ) 0;
 8004974:	6069      	str	r1, [r5, #4]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004976:	f023 0307 	bic.w	r3, r3, #7
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800497a:	bf18      	it	ne
 800497c:	3207      	addne	r2, #7
	pxEnd = ( void * ) uxAddress;
 800497e:	60ab      	str	r3, [r5, #8]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004980:	bf18      	it	ne
 8004982:	f022 0207 	bicne.w	r2, r2, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004986:	602a      	str	r2, [r5, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8004988:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800498c:	1a99      	subs	r1, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800498e:	e9c2 3100 	strd	r3, r1, [r2]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004992:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004996:	e9c5 1103 	strd	r1, r1, [r5, #12]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800499a:	616b      	str	r3, [r5, #20]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800499c:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80049a0:	ea18 0f04 	tst.w	r8, r4
 80049a4:	d14d      	bne.n	8004a42 <pvPortMalloc+0xe6>
			if( xWantedSize > 0 )
 80049a6:	2c00      	cmp	r4, #0
 80049a8:	d03e      	beq.n	8004a28 <pvPortMalloc+0xcc>
				xWantedSize += xHeapStructSize;
 80049aa:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049ae:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049b0:	bf1c      	itt	ne
 80049b2:	f023 0307 	bicne.w	r3, r3, #7
 80049b6:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d042      	beq.n	8004a42 <pvPortMalloc+0xe6>
 80049bc:	692f      	ldr	r7, [r5, #16]
 80049be:	429f      	cmp	r7, r3
 80049c0:	d33f      	bcc.n	8004a42 <pvPortMalloc+0xe6>
				pxBlock = xStart.pxNextFreeBlock;
 80049c2:	682e      	ldr	r6, [r5, #0]
				pxPreviousBlock = &xStart;
 80049c4:	4821      	ldr	r0, [pc, #132]	; (8004a4c <pvPortMalloc+0xf0>)
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049c6:	6872      	ldr	r2, [r6, #4]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d201      	bcs.n	80049d0 <pvPortMalloc+0x74>
 80049cc:	6831      	ldr	r1, [r6, #0]
 80049ce:	b9a1      	cbnz	r1, 80049fa <pvPortMalloc+0x9e>
				if( pxBlock != pxEnd )
 80049d0:	68a9      	ldr	r1, [r5, #8]
 80049d2:	42b1      	cmp	r1, r6
 80049d4:	d035      	beq.n	8004a42 <pvPortMalloc+0xe6>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049d6:	1ad2      	subs	r2, r2, r3
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049d8:	6831      	ldr	r1, [r6, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049da:	6804      	ldr	r4, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049dc:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049de:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049e0:	d912      	bls.n	8004a08 <pvPortMalloc+0xac>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049e2:	18f0      	adds	r0, r6, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e4:	0741      	lsls	r1, r0, #29
 80049e6:	d00b      	beq.n	8004a00 <pvPortMalloc+0xa4>
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	e7fe      	b.n	80049f8 <pvPortMalloc+0x9c>
 80049fa:	4630      	mov	r0, r6
 80049fc:	460e      	mov	r6, r1
 80049fe:	e7e2      	b.n	80049c6 <pvPortMalloc+0x6a>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a00:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a02:	6073      	str	r3, [r6, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a04:	f7ff ff88 	bl	8004918 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a08:	6873      	ldr	r3, [r6, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a0a:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a0c:	68e9      	ldr	r1, [r5, #12]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a0e:	1aff      	subs	r7, r7, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a10:	ea48 0303 	orr.w	r3, r8, r3
 8004a14:	6073      	str	r3, [r6, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a16:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a18:	428f      	cmp	r7, r1
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a1a:	612f      	str	r7, [r5, #16]
					pxBlock->pxNextFreeBlock = NULL;
 8004a1c:	6033      	str	r3, [r6, #0]
					xNumberOfSuccessfulAllocations++;
 8004a1e:	69ab      	ldr	r3, [r5, #24]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a20:	bf38      	it	cc
 8004a22:	60ef      	strcc	r7, [r5, #12]
					xNumberOfSuccessfulAllocations++;
 8004a24:	3301      	adds	r3, #1
 8004a26:	61ab      	str	r3, [r5, #24]
	( void ) xTaskResumeAll();
 8004a28:	f7ff faba 	bl	8003fa0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a2c:	0763      	lsls	r3, r4, #29
 8004a2e:	d00a      	beq.n	8004a46 <pvPortMalloc+0xea>
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	e7fe      	b.n	8004a40 <pvPortMalloc+0xe4>
void *pvReturn = NULL;
 8004a42:	2400      	movs	r4, #0
 8004a44:	e7f0      	b.n	8004a28 <pvPortMalloc+0xcc>
}
 8004a46:	4620      	mov	r0, r4
 8004a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a4c:	24000224 	.word	0x24000224
 8004a50:	24000244 	.word	0x24000244
 8004a54:	2400663c 	.word	0x2400663c

08004a58 <vPortFree>:
{
 8004a58:	b538      	push	{r3, r4, r5, lr}
	if( pv != NULL )
 8004a5a:	4604      	mov	r4, r0
 8004a5c:	b380      	cbz	r0, 8004ac0 <vPortFree+0x68>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a5e:	4d19      	ldr	r5, [pc, #100]	; (8004ac4 <vPortFree+0x6c>)
 8004a60:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004a64:	696a      	ldr	r2, [r5, #20]
 8004a66:	4213      	tst	r3, r2
 8004a68:	d108      	bne.n	8004a7c <vPortFree+0x24>
 8004a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	e7fe      	b.n	8004a7a <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a7c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004a80:	b141      	cbz	r1, 8004a94 <vPortFree+0x3c>
 8004a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	e7fe      	b.n	8004a92 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a94:	ea23 0302 	bic.w	r3, r3, r2
 8004a98:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004a9c:	f7ff f9f4 	bl	8003e88 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004aa0:	692a      	ldr	r2, [r5, #16]
 8004aa2:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aa6:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004aaa:	4413      	add	r3, r2
 8004aac:	612b      	str	r3, [r5, #16]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004aae:	f7ff ff33 	bl	8004918 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004ab2:	69eb      	ldr	r3, [r5, #28]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61eb      	str	r3, [r5, #28]
}
 8004ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 8004abc:	f7ff ba70 	b.w	8003fa0 <xTaskResumeAll>
}
 8004ac0:	bd38      	pop	{r3, r4, r5, pc}
 8004ac2:	bf00      	nop
 8004ac4:	24000224 	.word	0x24000224

08004ac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004ac8:	4808      	ldr	r0, [pc, #32]	; (8004aec <prvPortStartFirstTask+0x24>)
 8004aca:	6800      	ldr	r0, [r0, #0]
 8004acc:	6800      	ldr	r0, [r0, #0]
 8004ace:	f380 8808 	msr	MSP, r0
 8004ad2:	f04f 0000 	mov.w	r0, #0
 8004ad6:	f380 8814 	msr	CONTROL, r0
 8004ada:	b662      	cpsie	i
 8004adc:	b661      	cpsie	f
 8004ade:	f3bf 8f4f 	dsb	sy
 8004ae2:	f3bf 8f6f 	isb	sy
 8004ae6:	df00      	svc	0
 8004ae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aea:	0000      	.short	0x0000
 8004aec:	e000ed08 	.word	0xe000ed08

08004af0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004af0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004b00 <vPortEnableVFP+0x10>
 8004af4:	6801      	ldr	r1, [r0, #0]
 8004af6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004afa:	6001      	str	r1, [r0, #0]
 8004afc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004afe:	0000      	.short	0x0000
 8004b00:	e000ed88 	.word	0xe000ed88

08004b04 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 8004b04:	2300      	movs	r3, #0
{
 8004b06:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8004b08:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <prvTaskExitError+0x3c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	d008      	beq.n	8004b24 <prvTaskExitError+0x20>
 8004b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b16:	f383 8811 	msr	BASEPRI, r3
 8004b1a:	f3bf 8f6f 	isb	sy
 8004b1e:	f3bf 8f4f 	dsb	sy
 8004b22:	e7fe      	b.n	8004b22 <prvTaskExitError+0x1e>
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8004b34:	9b01      	ldr	r3, [sp, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0fc      	beq.n	8004b34 <prvTaskExitError+0x30>
}
 8004b3a:	b002      	add	sp, #8
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	24000024 	.word	0x24000024

08004b44 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b48:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b4c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8004b50:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b52:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b54:	4b03      	ldr	r3, [pc, #12]	; (8004b64 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b56:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b58:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b5a:	f06f 0302 	mvn.w	r3, #2
 8004b5e:	6203      	str	r3, [r0, #32]
}
 8004b60:	4770      	bx	lr
 8004b62:	bf00      	nop
 8004b64:	08004b05 	.word	0x08004b05
	...

08004b70 <SVC_Handler>:
	__asm volatile (
 8004b70:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <pxCurrentTCBConst2>)
 8004b72:	6819      	ldr	r1, [r3, #0]
 8004b74:	6808      	ldr	r0, [r1, #0]
 8004b76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7a:	f380 8809 	msr	PSP, r0
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f380 8811 	msr	BASEPRI, r0
 8004b8a:	4770      	bx	lr
 8004b8c:	f3af 8000 	nop.w

08004b90 <pxCurrentTCBConst2>:
 8004b90:	24000118 	.word	0x24000118

08004b94 <vPortEnterCritical>:
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004ba4:	4a0a      	ldr	r2, [pc, #40]	; (8004bd0 <vPortEnterCritical+0x3c>)
 8004ba6:	6813      	ldr	r3, [r2, #0]
 8004ba8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8004baa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004bac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004bae:	d10d      	bne.n	8004bcc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bb0:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <vPortEnterCritical+0x40>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004bb8:	d008      	beq.n	8004bcc <vPortEnterCritical+0x38>
 8004bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbe:	f383 8811 	msr	BASEPRI, r3
 8004bc2:	f3bf 8f6f 	isb	sy
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	e7fe      	b.n	8004bca <vPortEnterCritical+0x36>
}
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	24000024 	.word	0x24000024
 8004bd4:	e000ed04 	.word	0xe000ed04

08004bd8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004bd8:	4a08      	ldr	r2, [pc, #32]	; (8004bfc <vPortExitCritical+0x24>)
 8004bda:	6813      	ldr	r3, [r2, #0]
 8004bdc:	b943      	cbnz	r3, 8004bf0 <vPortExitCritical+0x18>
 8004bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be2:	f383 8811 	msr	BASEPRI, r3
 8004be6:	f3bf 8f6f 	isb	sy
 8004bea:	f3bf 8f4f 	dsb	sy
 8004bee:	e7fe      	b.n	8004bee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004bf4:	b90b      	cbnz	r3, 8004bfa <vPortExitCritical+0x22>
	__asm volatile
 8004bf6:	f383 8811 	msr	BASEPRI, r3
}
 8004bfa:	4770      	bx	lr
 8004bfc:	24000024 	.word	0x24000024

08004c00 <PendSV_Handler>:
	__asm volatile
 8004c00:	f3ef 8009 	mrs	r0, PSP
 8004c04:	f3bf 8f6f 	isb	sy
 8004c08:	4b15      	ldr	r3, [pc, #84]	; (8004c60 <pxCurrentTCBConst>)
 8004c0a:	681a      	ldr	r2, [r3, #0]
 8004c0c:	f01e 0f10 	tst.w	lr, #16
 8004c10:	bf08      	it	eq
 8004c12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	6010      	str	r0, [r2, #0]
 8004c1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c24:	f380 8811 	msr	BASEPRI, r0
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f7ff fa4a 	bl	80040c8 <vTaskSwitchContext>
 8004c34:	f04f 0000 	mov.w	r0, #0
 8004c38:	f380 8811 	msr	BASEPRI, r0
 8004c3c:	bc09      	pop	{r0, r3}
 8004c3e:	6819      	ldr	r1, [r3, #0]
 8004c40:	6808      	ldr	r0, [r1, #0]
 8004c42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c46:	f01e 0f10 	tst.w	lr, #16
 8004c4a:	bf08      	it	eq
 8004c4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c50:	f380 8809 	msr	PSP, r0
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	f3af 8000 	nop.w

08004c60 <pxCurrentTCBConst>:
 8004c60:	24000118 	.word	0x24000118

08004c64 <xPortSysTickHandler>:
{
 8004c64:	b508      	push	{r3, lr}
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004c76:	f7ff f91f 	bl	8003eb8 <xTaskIncrementTick>
 8004c7a:	b118      	cbz	r0, 8004c84 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c7c:	4b03      	ldr	r3, [pc, #12]	; (8004c8c <xPortSysTickHandler+0x28>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004c84:	2300      	movs	r3, #0
 8004c86:	f383 8811 	msr	BASEPRI, r3
}
 8004c8a:	bd08      	pop	{r3, pc}
 8004c8c:	e000ed04 	.word	0xe000ed04

08004c90 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	4a08      	ldr	r2, [pc, #32]	; (8004cb4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c94:	4908      	ldr	r1, [pc, #32]	; (8004cb8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c98:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c9e:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <vPortSetupTimerInterrupt+0x2c>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ca6:	4906      	ldr	r1, [pc, #24]	; (8004cc0 <vPortSetupTimerInterrupt+0x30>)
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cac:	2307      	movs	r3, #7
 8004cae:	6013      	str	r3, [r2, #0]
}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	e000e010 	.word	0xe000e010
 8004cb8:	e000e018 	.word	0xe000e018
 8004cbc:	24000014 	.word	0x24000014
 8004cc0:	e000e014 	.word	0xe000e014

08004cc4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cc4:	4b37      	ldr	r3, [pc, #220]	; (8004da4 <xPortStartScheduler+0xe0>)
 8004cc6:	4a38      	ldr	r2, [pc, #224]	; (8004da8 <xPortStartScheduler+0xe4>)
{
 8004cc8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004cca:	6819      	ldr	r1, [r3, #0]
 8004ccc:	4291      	cmp	r1, r2
 8004cce:	d108      	bne.n	8004ce2 <xPortStartScheduler+0x1e>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	e7fe      	b.n	8004ce0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	4b31      	ldr	r3, [pc, #196]	; (8004dac <xPortStartScheduler+0xe8>)
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d108      	bne.n	8004cfc <xPortStartScheduler+0x38>
 8004cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cee:	f383 8811 	msr	BASEPRI, r3
 8004cf2:	f3bf 8f6f 	isb	sy
 8004cf6:	f3bf 8f4f 	dsb	sy
 8004cfa:	e7fe      	b.n	8004cfa <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cfc:	4b2c      	ldr	r3, [pc, #176]	; (8004db0 <xPortStartScheduler+0xec>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cfe:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d00:	781a      	ldrb	r2, [r3, #0]
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d06:	22ff      	movs	r2, #255	; 0xff
 8004d08:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d0a:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d0c:	4a29      	ldr	r2, [pc, #164]	; (8004db4 <xPortStartScheduler+0xf0>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d14:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004d18:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d1c:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d1e:	2307      	movs	r3, #7
 8004d20:	6053      	str	r3, [r2, #4]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d22:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004d26:	1e5c      	subs	r4, r3, #1
 8004d28:	0600      	lsls	r0, r0, #24
 8004d2a:	d40c      	bmi.n	8004d46 <xPortStartScheduler+0x82>
 8004d2c:	b111      	cbz	r1, 8004d34 <xPortStartScheduler+0x70>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	6053      	str	r3, [r2, #4]
 8004d32:	d011      	beq.n	8004d58 <xPortStartScheduler+0x94>
 8004d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	e7fe      	b.n	8004d44 <xPortStartScheduler+0x80>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d46:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004d4a:	2101      	movs	r1, #1
 8004d4c:	005b      	lsls	r3, r3, #1
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	f88d 3003 	strb.w	r3, [sp, #3]
 8004d54:	4623      	mov	r3, r4
 8004d56:	e7e4      	b.n	8004d22 <xPortStartScheduler+0x5e>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d58:	f44f 7340 	mov.w	r3, #768	; 0x300
	uxCriticalNesting = 0;
 8004d5c:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d5e:	6053      	str	r3, [r2, #4]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d60:	9b01      	ldr	r3, [sp, #4]
 8004d62:	4a13      	ldr	r2, [pc, #76]	; (8004db0 <xPortStartScheduler+0xec>)
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d68:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <xPortStartScheduler+0xf4>)
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004d70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004d78:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004d7a:	f7ff ff89 	bl	8004c90 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <xPortStartScheduler+0xf8>)
 8004d80:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8004d82:	f7ff feb5 	bl	8004af0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d86:	4a0e      	ldr	r2, [pc, #56]	; (8004dc0 <xPortStartScheduler+0xfc>)
 8004d88:	6813      	ldr	r3, [r2, #0]
 8004d8a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d8e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004d90:	f7ff fe9a 	bl	8004ac8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004d94:	f7ff f998 	bl	80040c8 <vTaskSwitchContext>
	prvTaskExitError();
 8004d98:	f7ff feb4 	bl	8004b04 <prvTaskExitError>
}
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	b002      	add	sp, #8
 8004da0:	bd10      	pop	{r4, pc}
 8004da2:	bf00      	nop
 8004da4:	e000ed00 	.word	0xe000ed00
 8004da8:	410fc271 	.word	0x410fc271
 8004dac:	410fc270 	.word	0x410fc270
 8004db0:	e000e400 	.word	0xe000e400
 8004db4:	24006644 	.word	0x24006644
 8004db8:	e000ed20 	.word	0xe000ed20
 8004dbc:	24000024 	.word	0x24000024
 8004dc0:	e000ef34 	.word	0xe000ef34

08004dc4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004dc4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004dc8:	2b0f      	cmp	r3, #15
 8004dca:	4a10      	ldr	r2, [pc, #64]	; (8004e0c <vPortValidateInterruptPriority+0x48>)
 8004dcc:	d90d      	bls.n	8004dea <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004dce:	4910      	ldr	r1, [pc, #64]	; (8004e10 <vPortValidateInterruptPriority+0x4c>)
 8004dd0:	5c5b      	ldrb	r3, [r3, r1]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004dd2:	7811      	ldrb	r1, [r2, #0]
 8004dd4:	4299      	cmp	r1, r3
 8004dd6:	d908      	bls.n	8004dea <vPortValidateInterruptPriority+0x26>
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	e7fe      	b.n	8004de8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004dea:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <vPortValidateInterruptPriority+0x50>)
 8004dec:	6852      	ldr	r2, [r2, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d908      	bls.n	8004e0a <vPortValidateInterruptPriority+0x46>
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	e7fe      	b.n	8004e08 <vPortValidateInterruptPriority+0x44>
	}
 8004e0a:	4770      	bx	lr
 8004e0c:	24006644 	.word	0x24006644
 8004e10:	e000e3f0 	.word	0xe000e3f0
 8004e14:	e000ed0c 	.word	0xe000ed0c

08004e18 <netconn_apimsg>:

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004e18:	680a      	ldr	r2, [r1, #0]
{
 8004e1a:	b510      	push	{r4, lr}
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004e1c:	320c      	adds	r2, #12
{
 8004e1e:	460c      	mov	r4, r1
  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8004e20:	f001 fb62 	bl	80064e8 <tcpip_send_msg_wait_sem>
  if (err == ERR_OK) {
 8004e24:	b908      	cbnz	r0, 8004e2a <netconn_apimsg+0x12>
    return apimsg->err;
 8004e26:	f994 0004 	ldrsb.w	r0, [r4, #4]
  }
  return err;
}
 8004e2a:	bd10      	pop	{r4, pc}

08004e2c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8004e2c:	b500      	push	{lr}
 8004e2e:	b089      	sub	sp, #36	; 0x24
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004e30:	b958      	cbnz	r0, 8004e4a <netconn_close_shutdown+0x1e>
 8004e32:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <netconn_close_shutdown+0x34>)
 8004e34:	f240 4247 	movw	r2, #1095	; 0x447
 8004e38:	490a      	ldr	r1, [pc, #40]	; (8004e64 <netconn_close_shutdown+0x38>)
 8004e3a:	480b      	ldr	r0, [pc, #44]	; (8004e68 <netconn_close_shutdown+0x3c>)
 8004e3c:	f007 fc0a 	bl	800c654 <iprintf>
 8004e40:	f06f 000f 	mvn.w	r0, #15
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);

  return err;
}
 8004e44:	b009      	add	sp, #36	; 0x24
 8004e46:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004e4a:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8004e4c:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8004e4e:	f88d 1008 	strb.w	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8004e52:	4669      	mov	r1, sp
 8004e54:	4805      	ldr	r0, [pc, #20]	; (8004e6c <netconn_close_shutdown+0x40>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004e56:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8004e5a:	f7ff ffdd 	bl	8004e18 <netconn_apimsg>
  return err;
 8004e5e:	e7f1      	b.n	8004e44 <netconn_close_shutdown+0x18>
 8004e60:	0801e59d 	.word	0x0801e59d
 8004e64:	0801e612 	.word	0x0801e612
 8004e68:	0801e3d3 	.word	0x0801e3d3
 8004e6c:	08006275 	.word	0x08006275

08004e70 <netconn_new_with_proto_and_callback>:
{
 8004e70:	b570      	push	{r4, r5, r6, lr}
 8004e72:	460d      	mov	r5, r1
 8004e74:	b088      	sub	sp, #32
  conn = netconn_alloc(t, callback);
 8004e76:	4611      	mov	r1, r2
 8004e78:	f000 ff36 	bl	8005ce8 <netconn_alloc>
  if (conn != NULL) {
 8004e7c:	4604      	mov	r4, r0
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	d03e      	beq.n	8004f00 <netconn_new_with_proto_and_callback+0x90>
    API_MSG_VAR_REF(msg).conn = conn;
 8004e82:	9000      	str	r0, [sp, #0]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8004e84:	4669      	mov	r1, sp
 8004e86:	4820      	ldr	r0, [pc, #128]	; (8004f08 <netconn_new_with_proto_and_callback+0x98>)
    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8004e88:	f88d 5008 	strb.w	r5, [sp, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8004e8c:	f7ff ffc4 	bl	8004e18 <netconn_apimsg>
    if (err != ERR_OK) {
 8004e90:	2800      	cmp	r0, #0
 8004e92:	d035      	beq.n	8004f00 <netconn_new_with_proto_and_callback+0x90>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8004e94:	6863      	ldr	r3, [r4, #4]
 8004e96:	b12b      	cbz	r3, 8004ea4 <netconn_new_with_proto_and_callback+0x34>
 8004e98:	4b1c      	ldr	r3, [pc, #112]	; (8004f0c <netconn_new_with_proto_and_callback+0x9c>)
 8004e9a:	22a3      	movs	r2, #163	; 0xa3
 8004e9c:	491c      	ldr	r1, [pc, #112]	; (8004f10 <netconn_new_with_proto_and_callback+0xa0>)
 8004e9e:	481d      	ldr	r0, [pc, #116]	; (8004f14 <netconn_new_with_proto_and_callback+0xa4>)
 8004ea0:	f007 fbd8 	bl	800c654 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8004ea4:	f104 0510 	add.w	r5, r4, #16
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	f007 fac2 	bl	800c432 <sys_mbox_valid>
 8004eae:	b928      	cbnz	r0, 8004ebc <netconn_new_with_proto_and_callback+0x4c>
 8004eb0:	4b16      	ldr	r3, [pc, #88]	; (8004f0c <netconn_new_with_proto_and_callback+0x9c>)
 8004eb2:	22a4      	movs	r2, #164	; 0xa4
 8004eb4:	4918      	ldr	r1, [pc, #96]	; (8004f18 <netconn_new_with_proto_and_callback+0xa8>)
 8004eb6:	4817      	ldr	r0, [pc, #92]	; (8004f14 <netconn_new_with_proto_and_callback+0xa4>)
 8004eb8:	f007 fbcc 	bl	800c654 <iprintf>
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8004ebc:	f104 0014 	add.w	r0, r4, #20
 8004ec0:	f007 fab7 	bl	800c432 <sys_mbox_valid>
 8004ec4:	b128      	cbz	r0, 8004ed2 <netconn_new_with_proto_and_callback+0x62>
 8004ec6:	4b11      	ldr	r3, [pc, #68]	; (8004f0c <netconn_new_with_proto_and_callback+0x9c>)
 8004ec8:	22a6      	movs	r2, #166	; 0xa6
 8004eca:	4914      	ldr	r1, [pc, #80]	; (8004f1c <netconn_new_with_proto_and_callback+0xac>)
 8004ecc:	4811      	ldr	r0, [pc, #68]	; (8004f14 <netconn_new_with_proto_and_callback+0xa4>)
 8004ece:	f007 fbc1 	bl	800c654 <iprintf>
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8004ed2:	f104 060c 	add.w	r6, r4, #12
 8004ed6:	4630      	mov	r0, r6
 8004ed8:	f007 faeb 	bl	800c4b2 <sys_sem_valid>
 8004edc:	b928      	cbnz	r0, 8004eea <netconn_new_with_proto_and_callback+0x7a>
 8004ede:	4b0b      	ldr	r3, [pc, #44]	; (8004f0c <netconn_new_with_proto_and_callback+0x9c>)
 8004ee0:	22a9      	movs	r2, #169	; 0xa9
 8004ee2:	490f      	ldr	r1, [pc, #60]	; (8004f20 <netconn_new_with_proto_and_callback+0xb0>)
 8004ee4:	480b      	ldr	r0, [pc, #44]	; (8004f14 <netconn_new_with_proto_and_callback+0xa4>)
 8004ee6:	f007 fbb5 	bl	800c654 <iprintf>
      sys_sem_free(&conn->op_completed);
 8004eea:	4630      	mov	r0, r6
 8004eec:	f007 fade 	bl	800c4ac <sys_sem_free>
      sys_mbox_free(&conn->recvmbox);
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f007 fa57 	bl	800c3a4 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8004ef6:	4621      	mov	r1, r4
      return NULL;
 8004ef8:	2400      	movs	r4, #0
      memp_free(MEMP_NETCONN, conn);
 8004efa:	2007      	movs	r0, #7
 8004efc:	f003 f886 	bl	800800c <memp_free>
}
 8004f00:	4620      	mov	r0, r4
 8004f02:	b008      	add	sp, #32
 8004f04:	bd70      	pop	{r4, r5, r6, pc}
 8004f06:	bf00      	nop
 8004f08:	08005c89 	.word	0x08005c89
 8004f0c:	0801e59d 	.word	0x0801e59d
 8004f10:	0801e62e 	.word	0x0801e62e
 8004f14:	0801e3d3 	.word	0x0801e3d3
 8004f18:	0801e64f 	.word	0x0801e64f
 8004f1c:	0801e664 	.word	0x0801e664
 8004f20:	0801e685 	.word	0x0801e685

08004f24 <netconn_prepare_delete>:
{
 8004f24:	b500      	push	{lr}
 8004f26:	b089      	sub	sp, #36	; 0x24
  if (conn == NULL) {
 8004f28:	b138      	cbz	r0, 8004f3a <netconn_prepare_delete+0x16>
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004f2a:	2329      	movs	r3, #41	; 0x29
  API_MSG_VAR_REF(msg).conn = conn;
 8004f2c:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8004f2e:	4669      	mov	r1, sp
 8004f30:	4803      	ldr	r0, [pc, #12]	; (8004f40 <netconn_prepare_delete+0x1c>)
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8004f32:	f88d 3009 	strb.w	r3, [sp, #9]
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8004f36:	f7ff ff6f 	bl	8004e18 <netconn_apimsg>
}
 8004f3a:	b009      	add	sp, #36	; 0x24
 8004f3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f40:	08005f79 	.word	0x08005f79

08004f44 <netconn_delete>:
{
 8004f44:	b538      	push	{r3, r4, r5, lr}
  if (conn == NULL) {
 8004f46:	4605      	mov	r5, r0
 8004f48:	b140      	cbz	r0, 8004f5c <netconn_delete+0x18>
    err = netconn_prepare_delete(conn);
 8004f4a:	f7ff ffeb 	bl	8004f24 <netconn_prepare_delete>
  if (err == ERR_OK) {
 8004f4e:	4604      	mov	r4, r0
 8004f50:	b910      	cbnz	r0, 8004f58 <netconn_delete+0x14>
    netconn_free(conn);
 8004f52:	4628      	mov	r0, r5
 8004f54:	f000 ff0a 	bl	8005d6c <netconn_free>
}
 8004f58:	4620      	mov	r0, r4
 8004f5a:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	e7fb      	b.n	8004f58 <netconn_delete+0x14>

08004f60 <netconn_bind>:
{
 8004f60:	b500      	push	{lr}
 8004f62:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8004f64:	b958      	cbnz	r0, 8004f7e <netconn_bind+0x1e>
 8004f66:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <netconn_bind+0x38>)
 8004f68:	f44f 729c 	mov.w	r2, #312	; 0x138
 8004f6c:	490b      	ldr	r1, [pc, #44]	; (8004f9c <netconn_bind+0x3c>)
 8004f6e:	480c      	ldr	r0, [pc, #48]	; (8004fa0 <netconn_bind+0x40>)
 8004f70:	f007 fb70 	bl	800c654 <iprintf>
 8004f74:	f06f 000f 	mvn.w	r0, #15
}
 8004f78:	b009      	add	sp, #36	; 0x24
 8004f7a:	f85d fb04 	ldr.w	pc, [sp], #4
    addr = IP4_ADDR_ANY;
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <netconn_bind+0x44>)
  API_MSG_VAR_REF(msg).conn = conn;
 8004f80:	9000      	str	r0, [sp, #0]
    addr = IP4_ADDR_ANY;
 8004f82:	2900      	cmp	r1, #0
 8004f84:	bf08      	it	eq
 8004f86:	4619      	moveq	r1, r3
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8004f88:	4807      	ldr	r0, [pc, #28]	; (8004fa8 <netconn_bind+0x48>)
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8004f8a:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8004f8e:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8004f90:	4669      	mov	r1, sp
 8004f92:	f7ff ff41 	bl	8004e18 <netconn_apimsg>
  return err;
 8004f96:	e7ef      	b.n	8004f78 <netconn_bind+0x18>
 8004f98:	0801e59d 	.word	0x0801e59d
 8004f9c:	0801e6f8 	.word	0x0801e6f8
 8004fa0:	0801e3d3 	.word	0x0801e3d3
 8004fa4:	0800e1e4 	.word	0x0800e1e4
 8004fa8:	08006085 	.word	0x08006085

08004fac <netconn_listen_with_backlog>:
{
 8004fac:	b500      	push	{lr}
 8004fae:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8004fb0:	b958      	cbnz	r0, 8004fca <netconn_listen_with_backlog+0x1e>
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <netconn_listen_with_backlog+0x2c>)
 8004fb4:	f240 12bb 	movw	r2, #443	; 0x1bb
 8004fb8:	4908      	ldr	r1, [pc, #32]	; (8004fdc <netconn_listen_with_backlog+0x30>)
 8004fba:	4809      	ldr	r0, [pc, #36]	; (8004fe0 <netconn_listen_with_backlog+0x34>)
 8004fbc:	f007 fb4a 	bl	800c654 <iprintf>
 8004fc0:	f06f 000f 	mvn.w	r0, #15
}
 8004fc4:	b009      	add	sp, #36	; 0x24
 8004fc6:	f85d fb04 	ldr.w	pc, [sp], #4
  API_MSG_VAR_REF(msg).conn = conn;
 8004fca:	9000      	str	r0, [sp, #0]
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8004fcc:	4669      	mov	r1, sp
 8004fce:	4805      	ldr	r0, [pc, #20]	; (8004fe4 <netconn_listen_with_backlog+0x38>)
 8004fd0:	f7ff ff22 	bl	8004e18 <netconn_apimsg>
  return err;
 8004fd4:	e7f6      	b.n	8004fc4 <netconn_listen_with_backlog+0x18>
 8004fd6:	bf00      	nop
 8004fd8:	0801e59d 	.word	0x0801e59d
 8004fdc:	0801e770 	.word	0x0801e770
 8004fe0:	0801e3d3 	.word	0x0801e3d3
 8004fe4:	080060b9 	.word	0x080060b9

08004fe8 <netconn_write_vectors_partly>:
{
 8004fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fea:	b089      	sub	sp, #36	; 0x24
 8004fec:	469e      	mov	lr, r3
 8004fee:	9f0e      	ldr	r7, [sp, #56]	; 0x38
  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8004ff0:	b958      	cbnz	r0, 800500a <netconn_write_vectors_partly+0x22>
 8004ff2:	f06f 040f 	mvn.w	r4, #15
 8004ff6:	4b2c      	ldr	r3, [pc, #176]	; (80050a8 <netconn_write_vectors_partly+0xc0>)
 8004ff8:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8004ffc:	492b      	ldr	r1, [pc, #172]	; (80050ac <netconn_write_vectors_partly+0xc4>)
 8004ffe:	482c      	ldr	r0, [pc, #176]	; (80050b0 <netconn_write_vectors_partly+0xc8>)
 8005000:	f007 fb28 	bl	800c654 <iprintf>
}
 8005004:	4620      	mov	r0, r4
 8005006:	b009      	add	sp, #36	; 0x24
 8005008:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800500a:	7804      	ldrb	r4, [r0, #0]
 800500c:	f004 04f0 	and.w	r4, r4, #240	; 0xf0
 8005010:	2c10      	cmp	r4, #16
 8005012:	d009      	beq.n	8005028 <netconn_write_vectors_partly+0x40>
 8005014:	4b24      	ldr	r3, [pc, #144]	; (80050a8 <netconn_write_vectors_partly+0xc0>)
 8005016:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800501a:	4926      	ldr	r1, [pc, #152]	; (80050b4 <netconn_write_vectors_partly+0xcc>)
 800501c:	4824      	ldr	r0, [pc, #144]	; (80050b0 <netconn_write_vectors_partly+0xc8>)
 800501e:	f007 fb19 	bl	800c654 <iprintf>
    return ERR_VAL;
 8005022:	f06f 0405 	mvn.w	r4, #5
 8005026:	e7ed      	b.n	8005004 <netconn_write_vectors_partly+0x1c>
  if (dontblock && !bytes_written) {
 8005028:	7e05      	ldrb	r5, [r0, #24]
 800502a:	f003 0404 	and.w	r4, r3, #4
 800502e:	f005 0502 	and.w	r5, r5, #2
 8005032:	4325      	orrs	r5, r4
 8005034:	d002      	beq.n	800503c <netconn_write_vectors_partly+0x54>
 8005036:	2f00      	cmp	r7, #0
 8005038:	d0f3      	beq.n	8005022 <netconn_write_vectors_partly+0x3a>
 800503a:	2501      	movs	r5, #1
 800503c:	2400      	movs	r4, #0
    size += vectors[i].len;
 800503e:	f101 0c04 	add.w	ip, r1, #4
 8005042:	4626      	mov	r6, r4
 8005044:	e004      	b.n	8005050 <netconn_write_vectors_partly+0x68>
    if (size < vectors[i].len) {
 8005046:	f85c 3034 	ldr.w	r3, [ip, r4, lsl #3]
 800504a:	199e      	adds	r6, r3, r6
 800504c:	d2e9      	bcs.n	8005022 <netconn_write_vectors_partly+0x3a>
  for (i = 0; i < vectorcnt; i++) {
 800504e:	3401      	adds	r4, #1
 8005050:	42a2      	cmp	r2, r4
 8005052:	dcf8      	bgt.n	8005046 <netconn_write_vectors_partly+0x5e>
  if (size == 0) {
 8005054:	2e00      	cmp	r6, #0
 8005056:	d101      	bne.n	800505c <netconn_write_vectors_partly+0x74>
    return ERR_OK;
 8005058:	2400      	movs	r4, #0
 800505a:	e7d3      	b.n	8005004 <netconn_write_vectors_partly+0x1c>
  } else if (size > SSIZE_MAX) {
 800505c:	da03      	bge.n	8005066 <netconn_write_vectors_partly+0x7e>
    if (!bytes_written) {
 800505e:	2f00      	cmp	r7, #0
 8005060:	d0df      	beq.n	8005022 <netconn_write_vectors_partly+0x3a>
    size = (size_t)limited;
 8005062:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8005066:	f8ad 200c 	strh.w	r2, [sp, #12]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800506a:	2200      	movs	r2, #0
  API_MSG_VAR_REF(msg).conn = conn;
 800506c:	9000      	str	r0, [sp, #0]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800506e:	9102      	str	r1, [sp, #8]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8005070:	4669      	mov	r1, sp
 8005072:	4811      	ldr	r0, [pc, #68]	; (80050b8 <netconn_write_vectors_partly+0xd0>)
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8005074:	9204      	str	r2, [sp, #16]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8005076:	f88d e01c 	strb.w	lr, [sp, #28]
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800507a:	e9cd 6205 	strd	r6, r2, [sp, #20]
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800507e:	f7ff fecb 	bl	8004e18 <netconn_apimsg>
  if (err == ERR_OK) {
 8005082:	4604      	mov	r4, r0
 8005084:	2800      	cmp	r0, #0
 8005086:	d1bd      	bne.n	8005004 <netconn_write_vectors_partly+0x1c>
    if (bytes_written != NULL) {
 8005088:	b10f      	cbz	r7, 800508e <netconn_write_vectors_partly+0xa6>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800508a:	9b06      	ldr	r3, [sp, #24]
 800508c:	603b      	str	r3, [r7, #0]
    if (!dontblock) {
 800508e:	2d00      	cmp	r5, #0
 8005090:	d1e2      	bne.n	8005058 <netconn_write_vectors_partly+0x70>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8005092:	9b06      	ldr	r3, [sp, #24]
 8005094:	42b3      	cmp	r3, r6
 8005096:	d0df      	beq.n	8005058 <netconn_write_vectors_partly+0x70>
 8005098:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <netconn_write_vectors_partly+0xc0>)
 800509a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800509e:	4907      	ldr	r1, [pc, #28]	; (80050bc <netconn_write_vectors_partly+0xd4>)
 80050a0:	4803      	ldr	r0, [pc, #12]	; (80050b0 <netconn_write_vectors_partly+0xc8>)
 80050a2:	f007 fad7 	bl	800c654 <iprintf>
 80050a6:	e7ad      	b.n	8005004 <netconn_write_vectors_partly+0x1c>
 80050a8:	0801e59d 	.word	0x0801e59d
 80050ac:	0801e7cc 	.word	0x0801e7cc
 80050b0:	0801e3d3 	.word	0x0801e3d3
 80050b4:	0801e7e8 	.word	0x0801e7e8
 80050b8:	080061a9 	.word	0x080061a9
 80050bc:	0801e80a 	.word	0x0801e80a

080050c0 <netconn_write_partly>:
{
 80050c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  vector.len = size;
 80050c2:	e9cd 1202 	strd	r1, r2, [sp, #8]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80050c6:	9a06      	ldr	r2, [sp, #24]
 80050c8:	a902      	add	r1, sp, #8
 80050ca:	9200      	str	r2, [sp, #0]
 80050cc:	2201      	movs	r2, #1
 80050ce:	f7ff ff8b 	bl	8004fe8 <netconn_write_vectors_partly>
}
 80050d2:	b005      	add	sp, #20
 80050d4:	f85d fb04 	ldr.w	pc, [sp], #4

080050d8 <netconn_close>:
 */
err_t
netconn_close(struct netconn *conn)
{
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80050d8:	2103      	movs	r1, #3
 80050da:	f7ff bea7 	b.w	8004e2c <netconn_close_shutdown>

080050de <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80050de:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80050e0:	4604      	mov	r4, r0
 80050e2:	b148      	cbz	r0, 80050f8 <netconn_err+0x1a>
    return ERR_OK;
  }
  SYS_ARCH_PROTECT(lev);
 80050e4:	f007 fa20 	bl	800c528 <sys_arch_protect>
  err = conn->pending_err;
  conn->pending_err = ERR_OK;
 80050e8:	2300      	movs	r3, #0
  err = conn->pending_err;
 80050ea:	f994 5008 	ldrsb.w	r5, [r4, #8]
  conn->pending_err = ERR_OK;
 80050ee:	7223      	strb	r3, [r4, #8]
  SYS_ARCH_UNPROTECT(lev);
 80050f0:	f007 fa26 	bl	800c540 <sys_arch_unprotect>
  return err;
}
 80050f4:	4628      	mov	r0, r5
 80050f6:	bd38      	pop	{r3, r4, r5, pc}
    return ERR_OK;
 80050f8:	4605      	mov	r5, r0
 80050fa:	e7fb      	b.n	80050f4 <netconn_err+0x16>

080050fc <netconn_accept>:
{
 80050fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050fe:	4605      	mov	r5, r0
  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8005100:	460e      	mov	r6, r1
 8005102:	b959      	cbnz	r1, 800511c <netconn_accept+0x20>
 8005104:	4b25      	ldr	r3, [pc, #148]	; (800519c <netconn_accept+0xa0>)
 8005106:	f240 12e1 	movw	r2, #481	; 0x1e1
 800510a:	4925      	ldr	r1, [pc, #148]	; (80051a0 <netconn_accept+0xa4>)
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800510c:	f06f 040f 	mvn.w	r4, #15
 8005110:	4824      	ldr	r0, [pc, #144]	; (80051a4 <netconn_accept+0xa8>)
 8005112:	f007 fa9f 	bl	800c654 <iprintf>
}
 8005116:	4620      	mov	r0, r4
 8005118:	b003      	add	sp, #12
 800511a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_conn = NULL;
 800511c:	2300      	movs	r3, #0
 800511e:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8005120:	b920      	cbnz	r0, 800512c <netconn_accept+0x30>
 8005122:	4b1e      	ldr	r3, [pc, #120]	; (800519c <netconn_accept+0xa0>)
 8005124:	f240 12e3 	movw	r2, #483	; 0x1e3
 8005128:	491f      	ldr	r1, [pc, #124]	; (80051a8 <netconn_accept+0xac>)
 800512a:	e7ef      	b.n	800510c <netconn_accept+0x10>
  err = netconn_err(conn);
 800512c:	f7ff ffd7 	bl	80050de <netconn_err>
 8005130:	4604      	mov	r4, r0
 8005132:	f88d 0003 	strb.w	r0, [sp, #3]
  if (err != ERR_OK) {
 8005136:	2800      	cmp	r0, #0
 8005138:	d1ed      	bne.n	8005116 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800513a:	f105 0714 	add.w	r7, r5, #20
 800513e:	4638      	mov	r0, r7
 8005140:	f007 f977 	bl	800c432 <sys_mbox_valid>
 8005144:	b910      	cbnz	r0, 800514c <netconn_accept+0x50>
    return ERR_CLSD;
 8005146:	f06f 040e 	mvn.w	r4, #14
 800514a:	e7e4      	b.n	8005116 <netconn_accept+0x1a>
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 800514c:	7e2b      	ldrb	r3, [r5, #24]
 800514e:	07da      	lsls	r2, r3, #31
 8005150:	d4f9      	bmi.n	8005146 <netconn_accept+0x4a>
  if (netconn_is_nonblocking(conn)) {
 8005152:	079b      	lsls	r3, r3, #30
 8005154:	d508      	bpl.n	8005168 <netconn_accept+0x6c>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8005156:	a901      	add	r1, sp, #4
 8005158:	4638      	mov	r0, r7
 800515a:	f007 f959 	bl	800c410 <sys_arch_mbox_tryfetch>
 800515e:	3001      	adds	r0, #1
 8005160:	d107      	bne.n	8005172 <netconn_accept+0x76>
      return ERR_WOULDBLOCK;
 8005162:	f06f 0406 	mvn.w	r4, #6
 8005166:	e7d6      	b.n	8005116 <netconn_accept+0x1a>
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8005168:	4622      	mov	r2, r4
 800516a:	a901      	add	r1, sp, #4
 800516c:	4638      	mov	r0, r7
 800516e:	f007 f92d 	bl	800c3cc <sys_arch_mbox_fetch>
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8005172:	6a2b      	ldr	r3, [r5, #32]
 8005174:	b11b      	cbz	r3, 800517e <netconn_accept+0x82>
 8005176:	2200      	movs	r2, #0
 8005178:	2101      	movs	r1, #1
 800517a:	4628      	mov	r0, r5
 800517c:	4798      	blx	r3
  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 800517e:	f10d 0103 	add.w	r1, sp, #3
 8005182:	9801      	ldr	r0, [sp, #4]
 8005184:	f000 fd58 	bl	8005c38 <lwip_netconn_is_err_msg>
 8005188:	b110      	cbz	r0, 8005190 <netconn_accept+0x94>
    return err;
 800518a:	f99d 4003 	ldrsb.w	r4, [sp, #3]
 800518e:	e7c2      	b.n	8005116 <netconn_accept+0x1a>
  if (accept_ptr == NULL) {
 8005190:	9b01      	ldr	r3, [sp, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0d7      	beq.n	8005146 <netconn_accept+0x4a>
  *new_conn = newconn;
 8005196:	6033      	str	r3, [r6, #0]
  return ERR_OK;
 8005198:	e7bd      	b.n	8005116 <netconn_accept+0x1a>
 800519a:	bf00      	nop
 800519c:	0801e59d 	.word	0x0801e59d
 80051a0:	0801e82d 	.word	0x0801e82d
 80051a4:	0801e3d3 	.word	0x0801e3d3
 80051a8:	0801e84d 	.word	0x0801e84d

080051ac <netconn_recv_data>:
  void *buf = NULL;
 80051ac:	2300      	movs	r3, #0
{
 80051ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051b0:	4604      	mov	r4, r0
 80051b2:	4616      	mov	r6, r2
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80051b4:	460d      	mov	r5, r1
  void *buf = NULL;
 80051b6:	9301      	str	r3, [sp, #4]
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80051b8:	b951      	cbnz	r1, 80051d0 <netconn_recv_data+0x24>
 80051ba:	4b32      	ldr	r3, [pc, #200]	; (8005284 <netconn_recv_data+0xd8>)
 80051bc:	f44f 7212 	mov.w	r2, #584	; 0x248
 80051c0:	4931      	ldr	r1, [pc, #196]	; (8005288 <netconn_recv_data+0xdc>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80051c2:	4832      	ldr	r0, [pc, #200]	; (800528c <netconn_recv_data+0xe0>)
 80051c4:	f007 fa46 	bl	800c654 <iprintf>
 80051c8:	f06f 000f 	mvn.w	r0, #15
}
 80051cc:	b003      	add	sp, #12
 80051ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 80051d0:	600b      	str	r3, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80051d2:	b920      	cbnz	r0, 80051de <netconn_recv_data+0x32>
 80051d4:	4b2b      	ldr	r3, [pc, #172]	; (8005284 <netconn_recv_data+0xd8>)
 80051d6:	f240 224a 	movw	r2, #586	; 0x24a
 80051da:	492d      	ldr	r1, [pc, #180]	; (8005290 <netconn_recv_data+0xe4>)
 80051dc:	e7f1      	b.n	80051c2 <netconn_recv_data+0x16>
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80051de:	f100 0710 	add.w	r7, r0, #16
 80051e2:	4638      	mov	r0, r7
 80051e4:	f007 f925 	bl	800c432 <sys_mbox_valid>
 80051e8:	b938      	cbnz	r0, 80051fa <netconn_recv_data+0x4e>
    err_t err = netconn_err(conn);
 80051ea:	4620      	mov	r0, r4
 80051ec:	f7ff ff77 	bl	80050de <netconn_err>
    if (err != ERR_OK) {
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d1eb      	bne.n	80051cc <netconn_recv_data+0x20>
    return ERR_CONN;
 80051f4:	f06f 000a 	mvn.w	r0, #10
 80051f8:	e7e8      	b.n	80051cc <netconn_recv_data+0x20>
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80051fa:	7e23      	ldrb	r3, [r4, #24]
 80051fc:	f006 0604 	and.w	r6, r6, #4
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005200:	a901      	add	r1, sp, #4
 8005202:	4638      	mov	r0, r7
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8005204:	f003 0303 	and.w	r3, r3, #3
 8005208:	4333      	orrs	r3, r6
 800520a:	d102      	bne.n	8005212 <netconn_recv_data+0x66>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800520c:	f994 2008 	ldrsb.w	r2, [r4, #8]
 8005210:	b172      	cbz	r2, 8005230 <netconn_recv_data+0x84>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005212:	f007 f8fd 	bl	800c410 <sys_arch_mbox_tryfetch>
 8005216:	3001      	adds	r0, #1
 8005218:	d10c      	bne.n	8005234 <netconn_recv_data+0x88>
      err = netconn_err(conn);
 800521a:	4620      	mov	r0, r4
 800521c:	f7ff ff5f 	bl	80050de <netconn_err>
      if (err != ERR_OK) {
 8005220:	2800      	cmp	r0, #0
 8005222:	d1d3      	bne.n	80051cc <netconn_recv_data+0x20>
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8005224:	7e23      	ldrb	r3, [r4, #24]
 8005226:	07db      	lsls	r3, r3, #31
 8005228:	d4e4      	bmi.n	80051f4 <netconn_recv_data+0x48>
      return ERR_WOULDBLOCK;
 800522a:	f06f 0006 	mvn.w	r0, #6
 800522e:	e7cd      	b.n	80051cc <netconn_recv_data+0x20>
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8005230:	f007 f8cc 	bl	800c3cc <sys_arch_mbox_fetch>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005234:	7823      	ldrb	r3, [r4, #0]
 8005236:	9801      	ldr	r0, [sp, #4]
 8005238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800523c:	2b10      	cmp	r3, #16
 800523e:	d116      	bne.n	800526e <netconn_recv_data+0xc2>
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8005240:	f10d 0103 	add.w	r1, sp, #3
 8005244:	f000 fcf8 	bl	8005c38 <lwip_netconn_is_err_msg>
 8005248:	b130      	cbz	r0, 8005258 <netconn_recv_data+0xac>
      if (err == ERR_CLSD) {
 800524a:	f99d 0003 	ldrsb.w	r0, [sp, #3]
        return ERR_OK;
 800524e:	f110 0f0f 	cmn.w	r0, #15
 8005252:	bf08      	it	eq
 8005254:	2000      	moveq	r0, #0
 8005256:	e7b9      	b.n	80051cc <netconn_recv_data+0x20>
    len = ((struct pbuf *)buf)->tot_len;
 8005258:	9b01      	ldr	r3, [sp, #4]
    len = netbuf_len((struct netbuf *)buf);
 800525a:	891a      	ldrh	r2, [r3, #8]
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800525c:	6a23      	ldr	r3, [r4, #32]
 800525e:	b113      	cbz	r3, 8005266 <netconn_recv_data+0xba>
 8005260:	2101      	movs	r1, #1
 8005262:	4620      	mov	r0, r4
 8005264:	4798      	blx	r3
  *new_buf = buf;
 8005266:	9b01      	ldr	r3, [sp, #4]
  return ERR_OK;
 8005268:	2000      	movs	r0, #0
  *new_buf = buf;
 800526a:	602b      	str	r3, [r5, #0]
  return ERR_OK;
 800526c:	e7ae      	b.n	80051cc <netconn_recv_data+0x20>
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800526e:	b930      	cbnz	r0, 800527e <netconn_recv_data+0xd2>
 8005270:	4b04      	ldr	r3, [pc, #16]	; (8005284 <netconn_recv_data+0xd8>)
 8005272:	f240 2291 	movw	r2, #657	; 0x291
 8005276:	4907      	ldr	r1, [pc, #28]	; (8005294 <netconn_recv_data+0xe8>)
 8005278:	4804      	ldr	r0, [pc, #16]	; (800528c <netconn_recv_data+0xe0>)
 800527a:	f007 f9eb 	bl	800c654 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800527e:	9b01      	ldr	r3, [sp, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	e7ea      	b.n	800525a <netconn_recv_data+0xae>
 8005284:	0801e59d 	.word	0x0801e59d
 8005288:	0801e86a 	.word	0x0801e86a
 800528c:	0801e3d3 	.word	0x0801e3d3
 8005290:	0801e888 	.word	0x0801e888
 8005294:	0801e8a3 	.word	0x0801e8a3

08005298 <netconn_recv_data_tcp>:
{
 8005298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800529a:	4604      	mov	r4, r0
 800529c:	b089      	sub	sp, #36	; 0x24
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800529e:	3010      	adds	r0, #16
{
 80052a0:	460f      	mov	r7, r1
 80052a2:	4616      	mov	r6, r2
  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80052a4:	f007 f8c5 	bl	800c432 <sys_mbox_valid>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d04c      	beq.n	8005346 <netconn_recv_data_tcp+0xae>
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80052ac:	f994 2018 	ldrsb.w	r2, [r4, #24]
 80052b0:	7e23      	ldrb	r3, [r4, #24]
 80052b2:	2a00      	cmp	r2, #0
 80052b4:	da13      	bge.n	80052de <netconn_recv_data_tcp+0x46>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80052b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052ba:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80052bc:	6a23      	ldr	r3, [r4, #32]
 80052be:	b11b      	cbz	r3, 80052c8 <netconn_recv_data_tcp+0x30>
 80052c0:	2200      	movs	r2, #0
 80052c2:	2101      	movs	r1, #1
 80052c4:	4620      	mov	r0, r4
 80052c6:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80052c8:	6863      	ldr	r3, [r4, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d134      	bne.n	8005338 <netconn_recv_data_tcp+0xa0>
        err = netconn_err(conn);
 80052ce:	4620      	mov	r0, r4
 80052d0:	f7ff ff05 	bl	80050de <netconn_err>
        return ERR_RST;
 80052d4:	1e05      	subs	r5, r0, #0
 80052d6:	bf08      	it	eq
 80052d8:	f06f 050d 	mvneq.w	r5, #13
 80052dc:	e020      	b.n	8005320 <netconn_recv_data_tcp+0x88>
  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80052de:	4632      	mov	r2, r6
 80052e0:	4639      	mov	r1, r7
 80052e2:	4620      	mov	r0, r4
 80052e4:	f7ff ff62 	bl	80051ac <netconn_recv_data>
  if (err != ERR_OK) {
 80052e8:	4605      	mov	r5, r0
 80052ea:	b9c8      	cbnz	r0, 8005320 <netconn_recv_data_tcp+0x88>
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80052ec:	0732      	lsls	r2, r6, #28
  buf = *new_buf;
 80052ee:	683f      	ldr	r7, [r7, #0]
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80052f0:	d40d      	bmi.n	800530e <netconn_recv_data_tcp+0x76>
    u16_t len = buf ? buf->tot_len : 1;
 80052f2:	b1c7      	cbz	r7, 8005326 <netconn_recv_data_tcp+0x8e>
 80052f4:	893a      	ldrh	r2, [r7, #8]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80052f6:	7823      	ldrb	r3, [r4, #0]
 80052f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d014      	beq.n	800532a <netconn_recv_data_tcp+0x92>
 8005300:	4b12      	ldr	r3, [pc, #72]	; (800534c <netconn_recv_data_tcp+0xb4>)
 8005302:	f240 22a7 	movw	r2, #679	; 0x2a7
 8005306:	4912      	ldr	r1, [pc, #72]	; (8005350 <netconn_recv_data_tcp+0xb8>)
 8005308:	4812      	ldr	r0, [pc, #72]	; (8005354 <netconn_recv_data_tcp+0xbc>)
 800530a:	f007 f9a3 	bl	800c654 <iprintf>
  if (buf == NULL) {
 800530e:	b93f      	cbnz	r7, 8005320 <netconn_recv_data_tcp+0x88>
    if (apiflags & NETCONN_NOFIN) {
 8005310:	06f3      	lsls	r3, r6, #27
 8005312:	d5d3      	bpl.n	80052bc <netconn_recv_data_tcp+0x24>
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8005314:	7e23      	ldrb	r3, [r4, #24]
      return ERR_WOULDBLOCK;
 8005316:	f06f 0506 	mvn.w	r5, #6
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800531a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800531e:	7623      	strb	r3, [r4, #24]
}
 8005320:	4628      	mov	r0, r5
 8005322:	b009      	add	sp, #36	; 0x24
 8005324:	bdf0      	pop	{r4, r5, r6, r7, pc}
    u16_t len = buf ? buf->tot_len : 1;
 8005326:	2201      	movs	r2, #1
 8005328:	e7e5      	b.n	80052f6 <netconn_recv_data_tcp+0x5e>
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800532a:	4669      	mov	r1, sp
 800532c:	480a      	ldr	r0, [pc, #40]	; (8005358 <netconn_recv_data_tcp+0xc0>)
  msg->conn = conn;
 800532e:	9400      	str	r4, [sp, #0]
  msg->msg.r.len = len;
 8005330:	9202      	str	r2, [sp, #8]
  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8005332:	f7ff fd71 	bl	8004e18 <netconn_apimsg>
 8005336:	e7ea      	b.n	800530e <netconn_recv_data_tcp+0x76>
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8005338:	2101      	movs	r1, #1
 800533a:	4620      	mov	r0, r4
      return ERR_CLSD;
 800533c:	f06f 050e 	mvn.w	r5, #14
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8005340:	f7ff fd74 	bl	8004e2c <netconn_close_shutdown>
      return ERR_CLSD;
 8005344:	e7ec      	b.n	8005320 <netconn_recv_data_tcp+0x88>
    return ERR_CONN;
 8005346:	f06f 050a 	mvn.w	r5, #10
 800534a:	e7e9      	b.n	8005320 <netconn_recv_data_tcp+0x88>
 800534c:	0801e59d 	.word	0x0801e59d
 8005350:	0801e78d 	.word	0x0801e78d
 8005354:	0801e3d3 	.word	0x0801e3d3
 8005358:	08006171 	.word	0x08006171

0800535c <netconn_recv>:
{
 800535c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800535e:	4604      	mov	r4, r0
  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005360:	460e      	mov	r6, r1
 8005362:	b959      	cbnz	r1, 800537c <netconn_recv+0x20>
 8005364:	4b21      	ldr	r3, [pc, #132]	; (80053ec <netconn_recv+0x90>)
 8005366:	f240 3263 	movw	r2, #867	; 0x363
 800536a:	4921      	ldr	r1, [pc, #132]	; (80053f0 <netconn_recv+0x94>)
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800536c:	f06f 040f 	mvn.w	r4, #15
 8005370:	4820      	ldr	r0, [pc, #128]	; (80053f4 <netconn_recv+0x98>)
 8005372:	f007 f96f 	bl	800c654 <iprintf>
}
 8005376:	4620      	mov	r0, r4
 8005378:	b003      	add	sp, #12
 800537a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *new_buf = NULL;
 800537c:	2700      	movs	r7, #0
 800537e:	600f      	str	r7, [r1, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005380:	b920      	cbnz	r0, 800538c <netconn_recv+0x30>
 8005382:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <netconn_recv+0x90>)
 8005384:	f240 3265 	movw	r2, #869	; 0x365
 8005388:	491b      	ldr	r1, [pc, #108]	; (80053f8 <netconn_recv+0x9c>)
 800538a:	e7ef      	b.n	800536c <netconn_recv+0x10>
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800538c:	7803      	ldrb	r3, [r0, #0]
 800538e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005392:	2b10      	cmp	r3, #16
 8005394:	d125      	bne.n	80053e2 <netconn_recv+0x86>
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005396:	2006      	movs	r0, #6
    struct pbuf *p = NULL;
 8005398:	9701      	str	r7, [sp, #4]
    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800539a:	f002 fe07 	bl	8007fac <memp_malloc>
    if (buf == NULL) {
 800539e:	4605      	mov	r5, r0
 80053a0:	b1e0      	cbz	r0, 80053dc <netconn_recv+0x80>
    err = netconn_recv_data_tcp(conn, &p, 0);
 80053a2:	4620      	mov	r0, r4
 80053a4:	463a      	mov	r2, r7
 80053a6:	a901      	add	r1, sp, #4
 80053a8:	f7ff ff76 	bl	8005298 <netconn_recv_data_tcp>
    if (err != ERR_OK) {
 80053ac:	4604      	mov	r4, r0
 80053ae:	b120      	cbz	r0, 80053ba <netconn_recv+0x5e>
      memp_free(MEMP_NETBUF, buf);
 80053b0:	4629      	mov	r1, r5
 80053b2:	2006      	movs	r0, #6
 80053b4:	f002 fe2a 	bl	800800c <memp_free>
      return err;
 80053b8:	e7dd      	b.n	8005376 <netconn_recv+0x1a>
    LWIP_ASSERT("p != NULL", p != NULL);
 80053ba:	9b01      	ldr	r3, [sp, #4]
 80053bc:	b933      	cbnz	r3, 80053cc <netconn_recv+0x70>
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <netconn_recv+0x90>)
 80053c0:	f240 3279 	movw	r2, #889	; 0x379
 80053c4:	490d      	ldr	r1, [pc, #52]	; (80053fc <netconn_recv+0xa0>)
 80053c6:	480b      	ldr	r0, [pc, #44]	; (80053f4 <netconn_recv+0x98>)
 80053c8:	f007 f944 	bl	800c654 <iprintf>
    buf->p = p;
 80053cc:	9b01      	ldr	r3, [sp, #4]
    buf->ptr = p;
 80053ce:	e9c5 3300 	strd	r3, r3, [r5]
    buf->port = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	81ab      	strh	r3, [r5, #12]
    ip_addr_set_zero(&buf->addr);
 80053d6:	60ab      	str	r3, [r5, #8]
    *new_buf = buf;
 80053d8:	6035      	str	r5, [r6, #0]
    return ERR_OK;
 80053da:	e7cc      	b.n	8005376 <netconn_recv+0x1a>
      return ERR_MEM;
 80053dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80053e0:	e7c9      	b.n	8005376 <netconn_recv+0x1a>
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80053e2:	463a      	mov	r2, r7
 80053e4:	f7ff fee2 	bl	80051ac <netconn_recv_data>
 80053e8:	4604      	mov	r4, r0
 80053ea:	e7c4      	b.n	8005376 <netconn_recv+0x1a>
 80053ec:	0801e59d 	.word	0x0801e59d
 80053f0:	0801e86a 	.word	0x0801e86a
 80053f4:	0801e3d3 	.word	0x0801e3d3
 80053f8:	0801e888 	.word	0x0801e888
 80053fc:	0801fc95 	.word	0x0801fc95

08005400 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8005400:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005404:	4606      	mov	r6, r0
 8005406:	4617      	mov	r7, r2
 8005408:	461d      	mov	r5, r3
 800540a:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800540e:	460c      	mov	r4, r1
 8005410:	b929      	cbnz	r1, 800541e <recv_udp+0x1e>
 8005412:	4b25      	ldr	r3, [pc, #148]	; (80054a8 <recv_udp+0xa8>)
 8005414:	22e5      	movs	r2, #229	; 0xe5
 8005416:	4925      	ldr	r1, [pc, #148]	; (80054ac <recv_udp+0xac>)
 8005418:	4825      	ldr	r0, [pc, #148]	; (80054b0 <recv_udp+0xb0>)
 800541a:	f007 f91b 	bl	800c654 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800541e:	b99e      	cbnz	r6, 8005448 <recv_udp+0x48>
 8005420:	4b21      	ldr	r3, [pc, #132]	; (80054a8 <recv_udp+0xa8>)
 8005422:	22e6      	movs	r2, #230	; 0xe6
 8005424:	4923      	ldr	r1, [pc, #140]	; (80054b4 <recv_udp+0xb4>)
 8005426:	4822      	ldr	r0, [pc, #136]	; (80054b0 <recv_udp+0xb0>)
 8005428:	f007 f914 	bl	800c654 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800542c:	4638      	mov	r0, r7
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
  }
}
 800542e:	b003      	add	sp, #12
 8005430:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pbuf_free(p);
 8005434:	f003 b854 	b.w	80084e0 <pbuf_free>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005438:	6a33      	ldr	r3, [r6, #32]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d031      	beq.n	80054a2 <recv_udp+0xa2>
 800543e:	4630      	mov	r0, r6
}
 8005440:	b003      	add	sp, #12
 8005442:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005446:	4718      	bx	r3
  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8005448:	6873      	ldr	r3, [r6, #4]
 800544a:	42a3      	cmp	r3, r4
 800544c:	d005      	beq.n	800545a <recv_udp+0x5a>
 800544e:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <recv_udp+0xa8>)
 8005450:	22ee      	movs	r2, #238	; 0xee
 8005452:	4919      	ldr	r1, [pc, #100]	; (80054b8 <recv_udp+0xb8>)
 8005454:	4816      	ldr	r0, [pc, #88]	; (80054b0 <recv_udp+0xb0>)
 8005456:	f007 f8fd 	bl	800c654 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800545a:	f106 0910 	add.w	r9, r6, #16
 800545e:	4648      	mov	r0, r9
 8005460:	f006 ffe7 	bl	800c432 <sys_mbox_valid>
 8005464:	2800      	cmp	r0, #0
 8005466:	d0e1      	beq.n	800542c <recv_udp+0x2c>
  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8005468:	2006      	movs	r0, #6
 800546a:	f002 fd9f 	bl	8007fac <memp_malloc>
  if (buf == NULL) {
 800546e:	4604      	mov	r4, r0
 8005470:	2800      	cmp	r0, #0
 8005472:	d0db      	beq.n	800542c <recv_udp+0x2c>
    buf->ptr = p;
 8005474:	e9c0 7700 	strd	r7, r7, [r0]
    ip_addr_set(&buf->addr, addr);
 8005478:	b105      	cbz	r5, 800547c <recv_udp+0x7c>
 800547a:	682d      	ldr	r5, [r5, #0]
  len = p->tot_len;
 800547c:	893a      	ldrh	r2, [r7, #8]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800547e:	4621      	mov	r1, r4
 8005480:	4648      	mov	r0, r9
    ip_addr_set(&buf->addr, addr);
 8005482:	60a5      	str	r5, [r4, #8]
    buf->port = port;
 8005484:	f8a4 800c 	strh.w	r8, [r4, #12]
  len = p->tot_len;
 8005488:	9201      	str	r2, [sp, #4]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800548a:	f006 ff95 	bl	800c3b8 <sys_mbox_trypost>
 800548e:	9a01      	ldr	r2, [sp, #4]
 8005490:	4601      	mov	r1, r0
 8005492:	2800      	cmp	r0, #0
 8005494:	d0d0      	beq.n	8005438 <recv_udp+0x38>
    netbuf_delete(buf);
 8005496:	4620      	mov	r0, r4
}
 8005498:	b003      	add	sp, #12
 800549a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    netbuf_delete(buf);
 800549e:	f000 bf47 	b.w	8006330 <netbuf_delete>
}
 80054a2:	b003      	add	sp, #12
 80054a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80054a8:	0801e8d9 	.word	0x0801e8d9
 80054ac:	0801e94e 	.word	0x0801e94e
 80054b0:	0801e3d3 	.word	0x0801e3d3
 80054b4:	0801e970 	.word	0x0801e970
 80054b8:	0801e98f 	.word	0x0801e98f

080054bc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80054bc:	b507      	push	{r0, r1, r2, lr}
 80054be:	4601      	mov	r1, r0
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80054c0:	6840      	ldr	r0, [r0, #4]
  tcp_arg(pcb, conn);
 80054c2:	9001      	str	r0, [sp, #4]
 80054c4:	f003 fc4c 	bl	8008d60 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80054c8:	9801      	ldr	r0, [sp, #4]
 80054ca:	4909      	ldr	r1, [pc, #36]	; (80054f0 <setup_tcp+0x34>)
 80054cc:	f003 fc4c 	bl	8008d68 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80054d0:	9801      	ldr	r0, [sp, #4]
 80054d2:	4908      	ldr	r1, [pc, #32]	; (80054f4 <setup_tcp+0x38>)
 80054d4:	f003 fc60 	bl	8008d98 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80054d8:	9801      	ldr	r0, [sp, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	4906      	ldr	r1, [pc, #24]	; (80054f8 <setup_tcp+0x3c>)
 80054de:	f003 fc8f 	bl	8008e00 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80054e2:	4906      	ldr	r1, [pc, #24]	; (80054fc <setup_tcp+0x40>)
 80054e4:	9801      	ldr	r0, [sp, #4]
}
 80054e6:	b003      	add	sp, #12
 80054e8:	f85d eb04 	ldr.w	lr, [sp], #4
  tcp_err(pcb, err_tcp);
 80054ec:	f003 bc6a 	b.w	8008dc4 <tcp_err>
 80054f0:	080059b9 	.word	0x080059b9
 80054f4:	08005bc9 	.word	0x08005bc9
 80054f8:	0800593d 	.word	0x0800593d
 80054fc:	08005a89 	.word	0x08005a89

08005500 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8005500:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005504:	460f      	mov	r7, r1
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8005506:	4604      	mov	r4, r0
 8005508:	b930      	cbnz	r0, 8005518 <lwip_netconn_do_writemore+0x18>
 800550a:	4b89      	ldr	r3, [pc, #548]	; (8005730 <lwip_netconn_do_writemore+0x230>)
 800550c:	f240 6273 	movw	r2, #1651	; 0x673
 8005510:	4988      	ldr	r1, [pc, #544]	; (8005734 <lwip_netconn_do_writemore+0x234>)
 8005512:	4889      	ldr	r0, [pc, #548]	; (8005738 <lwip_netconn_do_writemore+0x238>)
 8005514:	f007 f89e 	bl	800c654 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8005518:	7863      	ldrb	r3, [r4, #1]
 800551a:	2b01      	cmp	r3, #1
 800551c:	d006      	beq.n	800552c <lwip_netconn_do_writemore+0x2c>
 800551e:	4b84      	ldr	r3, [pc, #528]	; (8005730 <lwip_netconn_do_writemore+0x230>)
 8005520:	f240 6274 	movw	r2, #1652	; 0x674
 8005524:	4985      	ldr	r1, [pc, #532]	; (800573c <lwip_netconn_do_writemore+0x23c>)
 8005526:	4884      	ldr	r0, [pc, #528]	; (8005738 <lwip_netconn_do_writemore+0x238>)
 8005528:	f007 f894 	bl	800c654 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800552c:	69e3      	ldr	r3, [r4, #28]
 800552e:	b933      	cbnz	r3, 800553e <lwip_netconn_do_writemore+0x3e>
 8005530:	4b7f      	ldr	r3, [pc, #508]	; (8005730 <lwip_netconn_do_writemore+0x230>)
 8005532:	f240 6275 	movw	r2, #1653	; 0x675
 8005536:	4982      	ldr	r1, [pc, #520]	; (8005740 <lwip_netconn_do_writemore+0x240>)
 8005538:	487f      	ldr	r0, [pc, #508]	; (8005738 <lwip_netconn_do_writemore+0x238>)
 800553a:	f007 f88b 	bl	800c654 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800553e:	6863      	ldr	r3, [r4, #4]
 8005540:	b933      	cbnz	r3, 8005550 <lwip_netconn_do_writemore+0x50>
 8005542:	4b7b      	ldr	r3, [pc, #492]	; (8005730 <lwip_netconn_do_writemore+0x230>)
 8005544:	f240 6276 	movw	r2, #1654	; 0x676
 8005548:	497e      	ldr	r1, [pc, #504]	; (8005744 <lwip_netconn_do_writemore+0x244>)
 800554a:	487b      	ldr	r0, [pc, #492]	; (8005738 <lwip_netconn_do_writemore+0x238>)
 800554c:	f007 f882 	bl	800c654 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8005550:	69e3      	ldr	r3, [r4, #28]
 8005552:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005556:	429a      	cmp	r2, r3
 8005558:	d306      	bcc.n	8005568 <lwip_netconn_do_writemore+0x68>
 800555a:	4b75      	ldr	r3, [pc, #468]	; (8005730 <lwip_netconn_do_writemore+0x230>)
 800555c:	f240 6277 	movw	r2, #1655	; 0x677
 8005560:	4979      	ldr	r1, [pc, #484]	; (8005748 <lwip_netconn_do_writemore+0x248>)
 8005562:	4875      	ldr	r0, [pc, #468]	; (8005738 <lwip_netconn_do_writemore+0x238>)
 8005564:	f007 f876 	bl	800c654 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8005568:	69e3      	ldr	r3, [r4, #28]
 800556a:	899b      	ldrh	r3, [r3, #12]
 800556c:	b933      	cbnz	r3, 800557c <lwip_netconn_do_writemore+0x7c>
 800556e:	4b70      	ldr	r3, [pc, #448]	; (8005730 <lwip_netconn_do_writemore+0x230>)
 8005570:	f240 6279 	movw	r2, #1657	; 0x679
 8005574:	4975      	ldr	r1, [pc, #468]	; (800574c <lwip_netconn_do_writemore+0x24c>)
 8005576:	4870      	ldr	r0, [pc, #448]	; (8005738 <lwip_netconn_do_writemore+0x238>)
 8005578:	f007 f86c 	bl	800c654 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800557c:	69e3      	ldr	r3, [r4, #28]
 800557e:	7e26      	ldrb	r6, [r4, #24]
 8005580:	f893 801c 	ldrb.w	r8, [r3, #28]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8005584:	f006 0602 	and.w	r6, r6, #2
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8005588:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8005738 <lwip_netconn_do_writemore+0x238>
 800558c:	f008 0304 	and.w	r3, r8, #4
 8005590:	431e      	orrs	r6, r3
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005592:	69e1      	ldr	r1, [r4, #28]
      available = tcp_sndbuf(conn->pcb.tcp);
 8005594:	6865      	ldr	r5, [r4, #4]
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8005596:	688a      	ldr	r2, [r1, #8]
 8005598:	690b      	ldr	r3, [r1, #16]
 800559a:	6810      	ldr	r0, [r2, #0]
      available = tcp_sndbuf(conn->pcb.tcp);
 800559c:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80055a0:	eb00 0a03 	add.w	sl, r0, r3
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80055a4:	6850      	ldr	r0, [r2, #4]
 80055a6:	eba0 0903 	sub.w	r9, r0, r3
      if (diff > 0xffffUL) { /* max_u16_t */
 80055aa:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
        len = 0xffff;
 80055ae:	bf2a      	itet	cs
 80055b0:	f64f 72ff 	movwcs	r2, #65535	; 0xffff
        len = (u16_t)diff;
 80055b4:	fa1f f289 	uxthcc.w	r2, r9
        apiflags |= TCP_WRITE_FLAG_MORE;
 80055b8:	f048 0802 	orrcs.w	r8, r8, #2
      if (available < len) {
 80055bc:	42aa      	cmp	r2, r5
 80055be:	d979      	bls.n	80056b4 <lwip_netconn_do_writemore+0x1b4>
        if (dontblock) {
 80055c0:	2e00      	cmp	r6, #0
 80055c2:	d038      	beq.n	8005636 <lwip_netconn_do_writemore+0x136>
          if (!len) {
 80055c4:	2d00      	cmp	r5, #0
 80055c6:	d138      	bne.n	800563a <lwip_netconn_do_writemore+0x13a>
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80055c8:	698b      	ldr	r3, [r1, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf0c      	ite	eq
 80055ce:	f06f 0a06 	mvneq.w	sl, #6
 80055d2:	f04f 0a00 	movne.w	sl, #0
      }
    } while (write_more && err == ERR_OK);
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
err_mem:
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80055d6:	69e3      	ldr	r3, [r4, #28]
 80055d8:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d276      	bcs.n	80056ce <lwip_netconn_do_writemore+0x1ce>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80055e0:	6a23      	ldr	r3, [r4, #32]
 80055e2:	b11b      	cbz	r3, 80055ec <lwip_netconn_do_writemore+0xec>
 80055e4:	2200      	movs	r2, #0
 80055e6:	2103      	movs	r1, #3
 80055e8:	4620      	mov	r0, r4
 80055ea:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80055ec:	7e23      	ldrb	r3, [r4, #24]
 80055ee:	f043 0310 	orr.w	r3, r3, #16
 80055f2:	7623      	strb	r3, [r4, #24]
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
      }
    }

    if (err == ERR_OK) {
 80055f4:	f1ba 0f00 	cmp.w	sl, #0
 80055f8:	d17e      	bne.n	80056f8 <lwip_netconn_do_writemore+0x1f8>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80055fa:	69e3      	ldr	r3, [r4, #28]
 80055fc:	e9d3 3205 	ldrd	r3, r2, [r3, #20]
 8005600:	429a      	cmp	r2, r3
 8005602:	d077      	beq.n	80056f4 <lwip_netconn_do_writemore+0x1f4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8005604:	3e00      	subs	r6, #0
 8005606:	bf18      	it	ne
 8005608:	2601      	movne	r6, #1
      }
      out_err = tcp_output(conn->pcb.tcp);
 800560a:	6860      	ldr	r0, [r4, #4]
 800560c:	f006 f938 	bl	800b880 <tcp_output>
      if (out_err == ERR_RTE) {
 8005610:	3004      	adds	r0, #4
 8005612:	f040 8084 	bne.w	800571e <lwip_netconn_do_writemore+0x21e>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8005616:	f06f 0a03 	mvn.w	sl, #3
    }
  }
  if (write_finished) {
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800561a:	69e3      	ldr	r3, [r4, #28]
    conn->current_msg->err = err;
    conn->current_msg = NULL;
 800561c:	2500      	movs	r5, #0
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800561e:	6818      	ldr	r0, [r3, #0]
    conn->current_msg->err = err;
 8005620:	f883 a004 	strb.w	sl, [r3, #4]
    conn->current_msg = NULL;
 8005624:	61e5      	str	r5, [r4, #28]
    conn->state = NETCONN_NONE;
 8005626:	7065      	strb	r5, [r4, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8005628:	2f00      	cmp	r7, #0
 800562a:	d07e      	beq.n	800572a <lwip_netconn_do_writemore+0x22a>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800562c:	300c      	adds	r0, #12
 800562e:	f006 ff3a 	bl	800c4a6 <sys_sem_signal>
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
  }
#endif
  return ERR_OK;
 8005632:	4628      	mov	r0, r5
 8005634:	e06b      	b.n	800570e <lwip_netconn_do_writemore+0x20e>
          apiflags |= TCP_WRITE_FLAG_MORE;
 8005636:	f048 0802 	orr.w	r8, r8, #2
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800563a:	442b      	add	r3, r5
 800563c:	4298      	cmp	r0, r3
 800563e:	d206      	bcs.n	800564e <lwip_netconn_do_writemore+0x14e>
 8005640:	4b3b      	ldr	r3, [pc, #236]	; (8005730 <lwip_netconn_do_writemore+0x230>)
 8005642:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8005646:	4942      	ldr	r1, [pc, #264]	; (8005750 <lwip_netconn_do_writemore+0x250>)
 8005648:	4658      	mov	r0, fp
 800564a:	f007 f803 	bl	800c654 <iprintf>
      if ((len == 0xffff && diff > 0xffffUL) ||
 800564e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005652:	429d      	cmp	r5, r3
 8005654:	d102      	bne.n	800565c <lwip_netconn_do_writemore+0x15c>
 8005656:	f5b9 3f80 	cmp.w	r9, #65536	; 0x10000
 800565a:	d207      	bcs.n	800566c <lwip_netconn_do_writemore+0x16c>
 800565c:	fa1f f989 	uxth.w	r9, r9
 8005660:	45a9      	cmp	r9, r5
 8005662:	d129      	bne.n	80056b8 <lwip_netconn_do_writemore+0x1b8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8005664:	69e3      	ldr	r3, [r4, #28]
 8005666:	899b      	ldrh	r3, [r3, #12]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d925      	bls.n	80056b8 <lwip_netconn_do_writemore+0x1b8>
        apiflags |= TCP_WRITE_FLAG_MORE;
 800566c:	f048 0802 	orr.w	r8, r8, #2
        write_more = 1;
 8005670:	f04f 0901 	mov.w	r9, #1
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8005674:	4651      	mov	r1, sl
 8005676:	4643      	mov	r3, r8
 8005678:	462a      	mov	r2, r5
 800567a:	6860      	ldr	r0, [r4, #4]
 800567c:	f005 fba0 	bl	800adc0 <tcp_write>
      if (err == ERR_OK) {
 8005680:	4682      	mov	sl, r0
 8005682:	b9e0      	cbnz	r0, 80056be <lwip_netconn_do_writemore+0x1be>
        conn->current_msg->msg.w.offset += len;
 8005684:	69e3      	ldr	r3, [r4, #28]
 8005686:	699a      	ldr	r2, [r3, #24]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005688:	6899      	ldr	r1, [r3, #8]
        conn->current_msg->msg.w.offset += len;
 800568a:	442a      	add	r2, r5
 800568c:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800568e:	691a      	ldr	r2, [r3, #16]
 8005690:	4415      	add	r5, r2
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005692:	684a      	ldr	r2, [r1, #4]
 8005694:	4295      	cmp	r5, r2
        conn->current_msg->msg.w.vector_off += len;
 8005696:	611d      	str	r5, [r3, #16]
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8005698:	d107      	bne.n	80056aa <lwip_netconn_do_writemore+0x1aa>
          conn->current_msg->msg.w.vector_cnt--;
 800569a:	899a      	ldrh	r2, [r3, #12]
 800569c:	3a01      	subs	r2, #1
 800569e:	b292      	uxth	r2, r2
 80056a0:	819a      	strh	r2, [r3, #12]
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80056a2:	b112      	cbz	r2, 80056aa <lwip_netconn_do_writemore+0x1aa>
            conn->current_msg->msg.w.vector++;
 80056a4:	3108      	adds	r1, #8
            conn->current_msg->msg.w.vector_off = 0;
 80056a6:	6118      	str	r0, [r3, #16]
            conn->current_msg->msg.w.vector++;
 80056a8:	6099      	str	r1, [r3, #8]
    } while (write_more && err == ERR_OK);
 80056aa:	f1b9 0f00 	cmp.w	r9, #0
 80056ae:	f47f af70 	bne.w	8005592 <lwip_netconn_do_writemore+0x92>
 80056b2:	e00a      	b.n	80056ca <lwip_netconn_do_writemore+0x1ca>
 80056b4:	4615      	mov	r5, r2
 80056b6:	e7c0      	b.n	800563a <lwip_netconn_do_writemore+0x13a>
        write_more = 0;
 80056b8:	f04f 0900 	mov.w	r9, #0
 80056bc:	e7da      	b.n	8005674 <lwip_netconn_do_writemore+0x174>
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80056be:	1c43      	adds	r3, r0, #1
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d8a9      	bhi.n	800561a <lwip_netconn_do_writemore+0x11a>
err_mem:
 80056c6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80056ca:	2e00      	cmp	r6, #0
 80056cc:	d183      	bne.n	80055d6 <lwip_netconn_do_writemore+0xd6>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80056ce:	6863      	ldr	r3, [r4, #4]
 80056d0:	f640 3269 	movw	r2, #2921	; 0xb69
 80056d4:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 80056d8:	4291      	cmp	r1, r2
 80056da:	d903      	bls.n	80056e4 <lwip_netconn_do_writemore+0x1e4>
 80056dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80056e0:	2b04      	cmp	r3, #4
 80056e2:	d987      	bls.n	80055f4 <lwip_netconn_do_writemore+0xf4>
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80056e4:	6a23      	ldr	r3, [r4, #32]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d084      	beq.n	80055f4 <lwip_netconn_do_writemore+0xf4>
 80056ea:	2200      	movs	r2, #0
 80056ec:	2103      	movs	r1, #3
 80056ee:	4620      	mov	r0, r4
 80056f0:	4798      	blx	r3
 80056f2:	e77f      	b.n	80055f4 <lwip_netconn_do_writemore+0xf4>
        write_finished = 1;
 80056f4:	2601      	movs	r6, #1
 80056f6:	e788      	b.n	800560a <lwip_netconn_do_writemore+0x10a>
    } else if (err == ERR_MEM) {
 80056f8:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80056fc:	d18d      	bne.n	800561a <lwip_netconn_do_writemore+0x11a>
      err_t out_err = tcp_output(conn->pcb.tcp);
 80056fe:	6860      	ldr	r0, [r4, #4]
 8005700:	f006 f8be 	bl	800b880 <tcp_output>
      if (out_err == ERR_RTE) {
 8005704:	3004      	adds	r0, #4
 8005706:	d086      	beq.n	8005616 <lwip_netconn_do_writemore+0x116>
      } else if (dontblock) {
 8005708:	b91e      	cbnz	r6, 8005712 <lwip_netconn_do_writemore+0x212>
    return ERR_MEM;
 800570a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800570e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005712:	69e3      	ldr	r3, [r4, #28]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	b12b      	cbz	r3, 8005724 <lwip_netconn_do_writemore+0x224>
 8005718:	f04f 0a00 	mov.w	sl, #0
 800571c:	e77d      	b.n	800561a <lwip_netconn_do_writemore+0x11a>
  if (write_finished) {
 800571e:	2e00      	cmp	r6, #0
 8005720:	d1fa      	bne.n	8005718 <lwip_netconn_do_writemore+0x218>
 8005722:	e7f2      	b.n	800570a <lwip_netconn_do_writemore+0x20a>
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8005724:	f06f 0a06 	mvn.w	sl, #6
 8005728:	e777      	b.n	800561a <lwip_netconn_do_writemore+0x11a>
  return ERR_OK;
 800572a:	4638      	mov	r0, r7
 800572c:	e7ef      	b.n	800570e <lwip_netconn_do_writemore+0x20e>
 800572e:	bf00      	nop
 8005730:	0801e8d9 	.word	0x0801e8d9
 8005734:	0801ea26 	.word	0x0801ea26
 8005738:	0801e3d3 	.word	0x0801e3d3
 800573c:	0801ea33 	.word	0x0801ea33
 8005740:	0801ea50 	.word	0x0801ea50
 8005744:	0801ea6a 	.word	0x0801ea6a
 8005748:	0801ea80 	.word	0x0801ea80
 800574c:	0801eabf 	.word	0x0801eabf
 8005750:	0801eae7 	.word	0x0801eae7

08005754 <lwip_netconn_do_close_internal>:
{
 8005754:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005758:	4689      	mov	r9, r1
  LWIP_ASSERT("invalid conn", (conn != NULL));
 800575a:	4604      	mov	r4, r0
 800575c:	b930      	cbnz	r0, 800576c <lwip_netconn_do_close_internal+0x18>
 800575e:	4b6c      	ldr	r3, [pc, #432]	; (8005910 <lwip_netconn_do_close_internal+0x1bc>)
 8005760:	f240 32a2 	movw	r2, #930	; 0x3a2
 8005764:	496b      	ldr	r1, [pc, #428]	; (8005914 <lwip_netconn_do_close_internal+0x1c0>)
 8005766:	486c      	ldr	r0, [pc, #432]	; (8005918 <lwip_netconn_do_close_internal+0x1c4>)
 8005768:	f006 ff74 	bl	800c654 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800576c:	7823      	ldrb	r3, [r4, #0]
 800576e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005772:	2b10      	cmp	r3, #16
 8005774:	d006      	beq.n	8005784 <lwip_netconn_do_close_internal+0x30>
 8005776:	4b66      	ldr	r3, [pc, #408]	; (8005910 <lwip_netconn_do_close_internal+0x1bc>)
 8005778:	f240 32a3 	movw	r2, #931	; 0x3a3
 800577c:	4967      	ldr	r1, [pc, #412]	; (800591c <lwip_netconn_do_close_internal+0x1c8>)
 800577e:	4866      	ldr	r0, [pc, #408]	; (8005918 <lwip_netconn_do_close_internal+0x1c4>)
 8005780:	f006 ff68 	bl	800c654 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8005784:	7863      	ldrb	r3, [r4, #1]
 8005786:	2b04      	cmp	r3, #4
 8005788:	d006      	beq.n	8005798 <lwip_netconn_do_close_internal+0x44>
 800578a:	4b61      	ldr	r3, [pc, #388]	; (8005910 <lwip_netconn_do_close_internal+0x1bc>)
 800578c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8005790:	4963      	ldr	r1, [pc, #396]	; (8005920 <lwip_netconn_do_close_internal+0x1cc>)
 8005792:	4861      	ldr	r0, [pc, #388]	; (8005918 <lwip_netconn_do_close_internal+0x1c4>)
 8005794:	f006 ff5e 	bl	800c654 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8005798:	6863      	ldr	r3, [r4, #4]
 800579a:	b933      	cbnz	r3, 80057aa <lwip_netconn_do_close_internal+0x56>
 800579c:	4b5c      	ldr	r3, [pc, #368]	; (8005910 <lwip_netconn_do_close_internal+0x1bc>)
 800579e:	f240 32a5 	movw	r2, #933	; 0x3a5
 80057a2:	4960      	ldr	r1, [pc, #384]	; (8005924 <lwip_netconn_do_close_internal+0x1d0>)
 80057a4:	485c      	ldr	r0, [pc, #368]	; (8005918 <lwip_netconn_do_close_internal+0x1c4>)
 80057a6:	f006 ff55 	bl	800c654 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80057aa:	69e3      	ldr	r3, [r4, #28]
 80057ac:	b933      	cbnz	r3, 80057bc <lwip_netconn_do_close_internal+0x68>
 80057ae:	4b58      	ldr	r3, [pc, #352]	; (8005910 <lwip_netconn_do_close_internal+0x1bc>)
 80057b0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80057b4:	495c      	ldr	r1, [pc, #368]	; (8005928 <lwip_netconn_do_close_internal+0x1d4>)
 80057b6:	4858      	ldr	r0, [pc, #352]	; (8005918 <lwip_netconn_do_close_internal+0x1c4>)
 80057b8:	f006 ff4c 	bl	800c654 <iprintf>
  shut = conn->current_msg->msg.sd.shut;
 80057bc:	69e3      	ldr	r3, [r4, #28]
  tpcb = conn->pcb.tcp;
 80057be:	6865      	ldr	r5, [r4, #4]
  shut = conn->current_msg->msg.sd.shut;
 80057c0:	7a1b      	ldrb	r3, [r3, #8]
  if (shut == NETCONN_SHUT_RDWR) {
 80057c2:	2b03      	cmp	r3, #3
  shut_rx = shut & NETCONN_SHUT_RD;
 80057c4:	f003 0a01 	and.w	sl, r3, #1
  shut_tx = shut & NETCONN_SHUT_WR;
 80057c8:	f003 0802 	and.w	r8, r3, #2
  if (shut == NETCONN_SHUT_RDWR) {
 80057cc:	d00f      	beq.n	80057ee <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_rx &&
 80057ce:	f1ba 0f00 	cmp.w	sl, #0
 80057d2:	d005      	beq.n	80057e0 <lwip_netconn_do_close_internal+0x8c>
             ((tpcb->state == FIN_WAIT_1) ||
 80057d4:	7d2b      	ldrb	r3, [r5, #20]
  } else if (shut_rx &&
 80057d6:	1f5a      	subs	r2, r3, #5
 80057d8:	2a01      	cmp	r2, #1
 80057da:	d908      	bls.n	80057ee <lwip_netconn_do_close_internal+0x9a>
              (tpcb->state == FIN_WAIT_2) ||
 80057dc:	2b08      	cmp	r3, #8
 80057de:	d006      	beq.n	80057ee <lwip_netconn_do_close_internal+0x9a>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80057e0:	f1b8 0f00 	cmp.w	r8, #0
 80057e4:	d016      	beq.n	8005814 <lwip_netconn_do_close_internal+0xc0>
 80057e6:	8b6f      	ldrh	r7, [r5, #26]
 80057e8:	f017 0710 	ands.w	r7, r7, #16
 80057ec:	d004      	beq.n	80057f8 <lwip_netconn_do_close_internal+0xa4>
    tcp_arg(tpcb, NULL);
 80057ee:	2701      	movs	r7, #1
 80057f0:	2100      	movs	r1, #0
 80057f2:	4628      	mov	r0, r5
 80057f4:	f003 fab4 	bl	8008d60 <tcp_arg>
  if (tpcb->state == LISTEN) {
 80057f8:	7d2b      	ldrb	r3, [r5, #20]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d10c      	bne.n	8005818 <lwip_netconn_do_close_internal+0xc4>
    tcp_accept(tpcb, NULL);
 80057fe:	2100      	movs	r1, #0
 8005800:	4628      	mov	r0, r5
 8005802:	f003 faf7 	bl	8008df4 <tcp_accept>
  if (shut_close) {
 8005806:	bb27      	cbnz	r7, 8005852 <lwip_netconn_do_close_internal+0xfe>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8005808:	4642      	mov	r2, r8
 800580a:	4651      	mov	r1, sl
 800580c:	4628      	mov	r0, r5
 800580e:	f003 ff3b 	bl	8009688 <tcp_shutdown>
 8005812:	e021      	b.n	8005858 <lwip_netconn_do_close_internal+0x104>
    shut_close = 0;
 8005814:	4647      	mov	r7, r8
 8005816:	e7ef      	b.n	80057f8 <lwip_netconn_do_close_internal+0xa4>
    if (shut_rx) {
 8005818:	f1ba 0f00 	cmp.w	sl, #0
 800581c:	d007      	beq.n	800582e <lwip_netconn_do_close_internal+0xda>
      tcp_recv(tpcb, NULL);
 800581e:	2100      	movs	r1, #0
 8005820:	4628      	mov	r0, r5
 8005822:	f003 faa1 	bl	8008d68 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8005826:	2100      	movs	r1, #0
 8005828:	4628      	mov	r0, r5
 800582a:	f003 fae3 	bl	8008df4 <tcp_accept>
    if (shut_tx) {
 800582e:	f1b8 0f00 	cmp.w	r8, #0
 8005832:	d003      	beq.n	800583c <lwip_netconn_do_close_internal+0xe8>
      tcp_sent(tpcb, NULL);
 8005834:	2100      	movs	r1, #0
 8005836:	4628      	mov	r0, r5
 8005838:	f003 faae 	bl	8008d98 <tcp_sent>
    if (shut_close) {
 800583c:	2f00      	cmp	r7, #0
 800583e:	d0e3      	beq.n	8005808 <lwip_netconn_do_close_internal+0xb4>
      tcp_poll(tpcb, NULL, 0);
 8005840:	2200      	movs	r2, #0
 8005842:	4628      	mov	r0, r5
 8005844:	4611      	mov	r1, r2
 8005846:	f003 fadb 	bl	8008e00 <tcp_poll>
      tcp_err(tpcb, NULL);
 800584a:	2100      	movs	r1, #0
 800584c:	4628      	mov	r0, r5
 800584e:	f003 fab9 	bl	8008dc4 <tcp_err>
      err = tcp_close(tpcb);
 8005852:	4628      	mov	r0, r5
 8005854:	f003 fe3e 	bl	80094d4 <tcp_close>
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8005858:	4606      	mov	r6, r0
  if (err == ERR_OK) {
 800585a:	b160      	cbz	r0, 8005876 <lwip_netconn_do_close_internal+0x122>
    if (err == ERR_MEM) {
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d10a      	bne.n	8005876 <lwip_netconn_do_close_internal+0x122>
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8005860:	69e3      	ldr	r3, [r4, #28]
 8005862:	f893 b009 	ldrb.w	fp, [r3, #9]
 8005866:	f1bb 0f00 	cmp.w	fp, #0
 800586a:	d130      	bne.n	80058ce <lwip_netconn_do_close_internal+0x17a>
        if (shut_close) {
 800586c:	b11f      	cbz	r7, 8005876 <lwip_netconn_do_close_internal+0x122>
          err = ERR_OK;
 800586e:	465e      	mov	r6, fp
          tcp_abort(tpcb);
 8005870:	4628      	mov	r0, r5
 8005872:	f003 ffbf 	bl	80097f4 <tcp_abort>
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005876:	69e3      	ldr	r3, [r4, #28]
 8005878:	681d      	ldr	r5, [r3, #0]
    conn->current_msg->err = err;
 800587a:	711e      	strb	r6, [r3, #4]
    conn->current_msg = NULL;
 800587c:	2300      	movs	r3, #0
 800587e:	61e3      	str	r3, [r4, #28]
    conn->state = NETCONN_NONE;
 8005880:	7063      	strb	r3, [r4, #1]
    if (err == ERR_OK) {
 8005882:	b9ce      	cbnz	r6, 80058b8 <lwip_netconn_do_close_internal+0x164>
      if (shut_close) {
 8005884:	b137      	cbz	r7, 8005894 <lwip_netconn_do_close_internal+0x140>
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005886:	6a23      	ldr	r3, [r4, #32]
        conn->pcb.tcp = NULL;
 8005888:	6066      	str	r6, [r4, #4]
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800588a:	b11b      	cbz	r3, 8005894 <lwip_netconn_do_close_internal+0x140>
 800588c:	4632      	mov	r2, r6
 800588e:	2104      	movs	r1, #4
 8005890:	4620      	mov	r0, r4
 8005892:	4798      	blx	r3
      if (shut_rx) {
 8005894:	f1ba 0f00 	cmp.w	sl, #0
 8005898:	d005      	beq.n	80058a6 <lwip_netconn_do_close_internal+0x152>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800589a:	6a23      	ldr	r3, [r4, #32]
 800589c:	b11b      	cbz	r3, 80058a6 <lwip_netconn_do_close_internal+0x152>
 800589e:	2200      	movs	r2, #0
 80058a0:	4620      	mov	r0, r4
 80058a2:	4611      	mov	r1, r2
 80058a4:	4798      	blx	r3
      if (shut_tx) {
 80058a6:	f1b8 0f00 	cmp.w	r8, #0
 80058aa:	d005      	beq.n	80058b8 <lwip_netconn_do_close_internal+0x164>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80058ac:	6a23      	ldr	r3, [r4, #32]
 80058ae:	b11b      	cbz	r3, 80058b8 <lwip_netconn_do_close_internal+0x164>
 80058b0:	2200      	movs	r2, #0
 80058b2:	2102      	movs	r1, #2
 80058b4:	4620      	mov	r0, r4
 80058b6:	4798      	blx	r3
    if (delayed)
 80058b8:	f1b9 0f00 	cmp.w	r9, #0
 80058bc:	d026      	beq.n	800590c <lwip_netconn_do_close_internal+0x1b8>
    return ERR_OK;
 80058be:	2600      	movs	r6, #0
      sys_sem_signal(op_completed_sem);
 80058c0:	f105 000c 	add.w	r0, r5, #12
 80058c4:	f006 fdef 	bl	800c4a6 <sys_sem_signal>
}
 80058c8:	4630      	mov	r0, r6
 80058ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80058ce:	7d2b      	ldrb	r3, [r5, #20]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d106      	bne.n	80058e2 <lwip_netconn_do_close_internal+0x18e>
 80058d4:	4b0e      	ldr	r3, [pc, #56]	; (8005910 <lwip_netconn_do_close_internal+0x1bc>)
 80058d6:	f240 4241 	movw	r2, #1089	; 0x441
 80058da:	4914      	ldr	r1, [pc, #80]	; (800592c <lwip_netconn_do_close_internal+0x1d8>)
 80058dc:	480e      	ldr	r0, [pc, #56]	; (8005918 <lwip_netconn_do_close_internal+0x1c4>)
 80058de:	f006 feb9 	bl	800c654 <iprintf>
    if (shut_tx) {
 80058e2:	f1b8 0f00 	cmp.w	r8, #0
 80058e6:	d003      	beq.n	80058f0 <lwip_netconn_do_close_internal+0x19c>
      tcp_sent(tpcb, sent_tcp);
 80058e8:	4911      	ldr	r1, [pc, #68]	; (8005930 <lwip_netconn_do_close_internal+0x1dc>)
 80058ea:	4628      	mov	r0, r5
 80058ec:	f003 fa54 	bl	8008d98 <tcp_sent>
    tcp_poll(tpcb, poll_tcp, 1);
 80058f0:	2201      	movs	r2, #1
 80058f2:	4628      	mov	r0, r5
 80058f4:	490f      	ldr	r1, [pc, #60]	; (8005934 <lwip_netconn_do_close_internal+0x1e0>)
 80058f6:	f003 fa83 	bl	8008e00 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80058fa:	4628      	mov	r0, r5
 80058fc:	490e      	ldr	r1, [pc, #56]	; (8005938 <lwip_netconn_do_close_internal+0x1e4>)
 80058fe:	f003 fa61 	bl	8008dc4 <tcp_err>
    tcp_arg(tpcb, conn);
 8005902:	4621      	mov	r1, r4
 8005904:	4628      	mov	r0, r5
 8005906:	f003 fa2b 	bl	8008d60 <tcp_arg>
  return err;
 800590a:	e7dd      	b.n	80058c8 <lwip_netconn_do_close_internal+0x174>
    return ERR_OK;
 800590c:	464e      	mov	r6, r9
 800590e:	e7db      	b.n	80058c8 <lwip_netconn_do_close_internal+0x174>
 8005910:	0801e8d9 	.word	0x0801e8d9
 8005914:	0801e7bf 	.word	0x0801e7bf
 8005918:	0801e3d3 	.word	0x0801e3d3
 800591c:	0801eb12 	.word	0x0801eb12
 8005920:	0801eb30 	.word	0x0801eb30
 8005924:	0801eb54 	.word	0x0801eb54
 8005928:	0801ea50 	.word	0x0801ea50
 800592c:	0801eb67 	.word	0x0801eb67
 8005930:	08005bc9 	.word	0x08005bc9
 8005934:	0800593d 	.word	0x0800593d
 8005938:	08005a89 	.word	0x08005a89

0800593c <poll_tcp>:
{
 800593c:	b510      	push	{r4, lr}
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800593e:	4604      	mov	r4, r0
 8005940:	b930      	cbnz	r0, 8005950 <poll_tcp+0x14>
 8005942:	4b1a      	ldr	r3, [pc, #104]	; (80059ac <poll_tcp+0x70>)
 8005944:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8005948:	4919      	ldr	r1, [pc, #100]	; (80059b0 <poll_tcp+0x74>)
 800594a:	481a      	ldr	r0, [pc, #104]	; (80059b4 <poll_tcp+0x78>)
 800594c:	f006 fe82 	bl	800c654 <iprintf>
  if (conn->state == NETCONN_WRITE) {
 8005950:	7861      	ldrb	r1, [r4, #1]
 8005952:	2901      	cmp	r1, #1
 8005954:	d11c      	bne.n	8005990 <poll_tcp+0x54>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8005956:	4620      	mov	r0, r4
 8005958:	f7ff fdd2 	bl	8005500 <lwip_netconn_do_writemore>
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800595c:	7e23      	ldrb	r3, [r4, #24]
 800595e:	06da      	lsls	r2, r3, #27
 8005960:	d514      	bpl.n	800598c <poll_tcp+0x50>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005962:	6862      	ldr	r2, [r4, #4]
 8005964:	b192      	cbz	r2, 800598c <poll_tcp+0x50>
 8005966:	f8b2 0064 	ldrh.w	r0, [r2, #100]	; 0x64
 800596a:	f640 3169 	movw	r1, #2921	; 0xb69
 800596e:	4288      	cmp	r0, r1
 8005970:	d90c      	bls.n	800598c <poll_tcp+0x50>
 8005972:	f8b2 2066 	ldrh.w	r2, [r2, #102]	; 0x66
 8005976:	2a04      	cmp	r2, #4
 8005978:	d808      	bhi.n	800598c <poll_tcp+0x50>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800597a:	f023 0310 	bic.w	r3, r3, #16
 800597e:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005980:	6a23      	ldr	r3, [r4, #32]
 8005982:	b11b      	cbz	r3, 800598c <poll_tcp+0x50>
 8005984:	2200      	movs	r2, #0
 8005986:	2102      	movs	r1, #2
 8005988:	4620      	mov	r0, r4
 800598a:	4798      	blx	r3
}
 800598c:	2000      	movs	r0, #0
 800598e:	bd10      	pop	{r4, pc}
  } else if (conn->state == NETCONN_CLOSE) {
 8005990:	2904      	cmp	r1, #4
 8005992:	d1e3      	bne.n	800595c <poll_tcp+0x20>
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8005994:	69e2      	ldr	r2, [r4, #28]
 8005996:	b11a      	cbz	r2, 80059a0 <poll_tcp+0x64>
 8005998:	7a53      	ldrb	r3, [r2, #9]
 800599a:	b10b      	cbz	r3, 80059a0 <poll_tcp+0x64>
      conn->current_msg->msg.sd.polls_left--;
 800599c:	3b01      	subs	r3, #1
 800599e:	7253      	strb	r3, [r2, #9]
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80059a0:	2101      	movs	r1, #1
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7ff fed6 	bl	8005754 <lwip_netconn_do_close_internal>
 80059a8:	e7d8      	b.n	800595c <poll_tcp+0x20>
 80059aa:	bf00      	nop
 80059ac:	0801e8d9 	.word	0x0801e8d9
 80059b0:	0801ea26 	.word	0x0801ea26
 80059b4:	0801e3d3 	.word	0x0801e3d3

080059b8 <recv_tcp>:
{
 80059b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059bc:	4606      	mov	r6, r0
 80059be:	4615      	mov	r5, r2
 80059c0:	461c      	mov	r4, r3
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80059c2:	460f      	mov	r7, r1
 80059c4:	b931      	cbnz	r1, 80059d4 <recv_tcp+0x1c>
 80059c6:	4b29      	ldr	r3, [pc, #164]	; (8005a6c <recv_tcp+0xb4>)
 80059c8:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80059cc:	4928      	ldr	r1, [pc, #160]	; (8005a70 <recv_tcp+0xb8>)
 80059ce:	4829      	ldr	r0, [pc, #164]	; (8005a74 <recv_tcp+0xbc>)
 80059d0:	f006 fe40 	bl	800c654 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80059d4:	bb4e      	cbnz	r6, 8005a2a <recv_tcp+0x72>
 80059d6:	4b25      	ldr	r3, [pc, #148]	; (8005a6c <recv_tcp+0xb4>)
 80059d8:	f240 122d 	movw	r2, #301	; 0x12d
 80059dc:	4926      	ldr	r1, [pc, #152]	; (8005a78 <recv_tcp+0xc0>)
 80059de:	4825      	ldr	r0, [pc, #148]	; (8005a74 <recv_tcp+0xbc>)
 80059e0:	f006 fe38 	bl	800c654 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80059e4:	bb14      	cbnz	r4, 8005a2c <recv_tcp+0x74>
    return ERR_VAL;
 80059e6:	f06f 0405 	mvn.w	r4, #5
}
 80059ea:	4620      	mov	r0, r4
 80059ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcp_recved(pcb, p->tot_len);
 80059f0:	4638      	mov	r0, r7
 80059f2:	8929      	ldrh	r1, [r5, #8]
 80059f4:	f003 f960 	bl	8008cb8 <tcp_recved>
      pbuf_free(p);
 80059f8:	4628      	mov	r0, r5
 80059fa:	f002 fd71 	bl	80084e0 <pbuf_free>
 80059fe:	e7f4      	b.n	80059ea <recv_tcp+0x32>
  if (p != NULL) {
 8005a00:	b16d      	cbz	r5, 8005a1e <recv_tcp+0x66>
    len = p->tot_len;
 8005a02:	892f      	ldrh	r7, [r5, #8]
  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8005a04:	4629      	mov	r1, r5
 8005a06:	4640      	mov	r0, r8
 8005a08:	f006 fcd6 	bl	800c3b8 <sys_mbox_trypost>
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	b948      	cbnz	r0, 8005a24 <recv_tcp+0x6c>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8005a10:	6a33      	ldr	r3, [r6, #32]
 8005a12:	b343      	cbz	r3, 8005a66 <recv_tcp+0xae>
 8005a14:	4601      	mov	r1, r0
 8005a16:	463a      	mov	r2, r7
 8005a18:	4630      	mov	r0, r6
 8005a1a:	4798      	blx	r3
 8005a1c:	e7e5      	b.n	80059ea <recv_tcp+0x32>
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8005a1e:	4d17      	ldr	r5, [pc, #92]	; (8005a7c <recv_tcp+0xc4>)
    len = 0;
 8005a20:	2700      	movs	r7, #0
 8005a22:	e7ef      	b.n	8005a04 <recv_tcp+0x4c>
    return ERR_MEM;
 8005a24:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005a28:	e7df      	b.n	80059ea <recv_tcp+0x32>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8005a2a:	b144      	cbz	r4, 8005a3e <recv_tcp+0x86>
 8005a2c:	4b0f      	ldr	r3, [pc, #60]	; (8005a6c <recv_tcp+0xb4>)
 8005a2e:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8005a32:	4913      	ldr	r1, [pc, #76]	; (8005a80 <recv_tcp+0xc8>)
 8005a34:	480f      	ldr	r0, [pc, #60]	; (8005a74 <recv_tcp+0xbc>)
 8005a36:	f006 fe0d 	bl	800c654 <iprintf>
  if (conn == NULL) {
 8005a3a:	2e00      	cmp	r6, #0
 8005a3c:	d0d3      	beq.n	80059e6 <recv_tcp+0x2e>
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8005a3e:	6873      	ldr	r3, [r6, #4]
 8005a40:	42bb      	cmp	r3, r7
 8005a42:	d006      	beq.n	8005a52 <recv_tcp+0x9a>
 8005a44:	4b09      	ldr	r3, [pc, #36]	; (8005a6c <recv_tcp+0xb4>)
 8005a46:	f240 1235 	movw	r2, #309	; 0x135
 8005a4a:	490e      	ldr	r1, [pc, #56]	; (8005a84 <recv_tcp+0xcc>)
 8005a4c:	4809      	ldr	r0, [pc, #36]	; (8005a74 <recv_tcp+0xbc>)
 8005a4e:	f006 fe01 	bl	800c654 <iprintf>
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005a52:	f106 0810 	add.w	r8, r6, #16
 8005a56:	4640      	mov	r0, r8
 8005a58:	f006 fceb 	bl	800c432 <sys_mbox_valid>
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d1ce      	bne.n	8005a00 <recv_tcp+0x48>
    if (p != NULL) {
 8005a62:	2d00      	cmp	r5, #0
 8005a64:	d1c4      	bne.n	80059f0 <recv_tcp+0x38>
    return ERR_OK;
 8005a66:	2400      	movs	r4, #0
 8005a68:	e7bf      	b.n	80059ea <recv_tcp+0x32>
 8005a6a:	bf00      	nop
 8005a6c:	0801e8d9 	.word	0x0801e8d9
 8005a70:	0801eb8a 	.word	0x0801eb8a
 8005a74:	0801e3d3 	.word	0x0801e3d3
 8005a78:	0801ebac 	.word	0x0801ebac
 8005a7c:	0800e1cc 	.word	0x0800e1cc
 8005a80:	0801ebcb 	.word	0x0801ebcb
 8005a84:	0801ebe3 	.word	0x0801ebe3

08005a88 <err_tcp>:
{
 8005a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a8c:	460d      	mov	r5, r1
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005a8e:	4604      	mov	r4, r0
 8005a90:	b930      	cbnz	r0, 8005aa0 <err_tcp+0x18>
 8005a92:	4b45      	ldr	r3, [pc, #276]	; (8005ba8 <err_tcp+0x120>)
 8005a94:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8005a98:	4944      	ldr	r1, [pc, #272]	; (8005bac <err_tcp+0x124>)
 8005a9a:	4845      	ldr	r0, [pc, #276]	; (8005bb0 <err_tcp+0x128>)
 8005a9c:	f006 fdda 	bl	800c654 <iprintf>
  SYS_ARCH_PROTECT(lev);
 8005aa0:	f006 fd42 	bl	800c528 <sys_arch_protect>
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005aa4:	7e23      	ldrb	r3, [r4, #24]
  conn->pcb.tcp = NULL;
 8005aa6:	2600      	movs	r6, #0
  old_state = conn->state;
 8005aa8:	7867      	ldrb	r7, [r4, #1]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005aaa:	f043 0301 	orr.w	r3, r3, #1
  conn->pending_err = err;
 8005aae:	7225      	strb	r5, [r4, #8]
  conn->pcb.tcp = NULL;
 8005ab0:	6066      	str	r6, [r4, #4]
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8005ab2:	7623      	strb	r3, [r4, #24]
  conn->state = NETCONN_NONE;
 8005ab4:	7066      	strb	r6, [r4, #1]
  SYS_ARCH_UNPROTECT(lev);
 8005ab6:	f006 fd43 	bl	800c540 <sys_arch_unprotect>
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8005aba:	6a23      	ldr	r3, [r4, #32]
 8005abc:	b11b      	cbz	r3, 8005ac6 <err_tcp+0x3e>
 8005abe:	4632      	mov	r2, r6
 8005ac0:	2104      	movs	r1, #4
 8005ac2:	4620      	mov	r0, r4
 8005ac4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005ac6:	6a23      	ldr	r3, [r4, #32]
 8005ac8:	b11b      	cbz	r3, 8005ad2 <err_tcp+0x4a>
 8005aca:	2200      	movs	r2, #0
 8005acc:	4620      	mov	r0, r4
 8005ace:	4611      	mov	r1, r2
 8005ad0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8005ad2:	6a23      	ldr	r3, [r4, #32]
 8005ad4:	b11b      	cbz	r3, 8005ade <err_tcp+0x56>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2102      	movs	r1, #2
 8005ada:	4620      	mov	r0, r4
 8005adc:	4798      	blx	r3
  switch (err) {
 8005ade:	f105 030f 	add.w	r3, r5, #15
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b02      	cmp	r3, #2
 8005ae6:	d846      	bhi.n	8005b76 <err_tcp+0xee>
 8005ae8:	4a32      	ldr	r2, [pc, #200]	; (8005bb4 <err_tcp+0x12c>)
 8005aea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005aee:	685e      	ldr	r6, [r3, #4]
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8005af0:	f104 0810 	add.w	r8, r4, #16
 8005af4:	4640      	mov	r0, r8
 8005af6:	f006 fc9c 	bl	800c432 <sys_mbox_valid>
 8005afa:	b118      	cbz	r0, 8005b04 <err_tcp+0x7c>
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8005afc:	4631      	mov	r1, r6
 8005afe:	4640      	mov	r0, r8
 8005b00:	f006 fc5a 	bl	800c3b8 <sys_mbox_trypost>
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8005b04:	f104 0814 	add.w	r8, r4, #20
 8005b08:	4640      	mov	r0, r8
 8005b0a:	f006 fc92 	bl	800c432 <sys_mbox_valid>
 8005b0e:	b118      	cbz	r0, 8005b18 <err_tcp+0x90>
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8005b10:	4631      	mov	r1, r6
 8005b12:	4640      	mov	r0, r8
 8005b14:	f006 fc50 	bl	800c3b8 <sys_mbox_trypost>
  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8005b18:	2f01      	cmp	r7, #1
 8005b1a:	d002      	beq.n	8005b22 <err_tcp+0x9a>
 8005b1c:	1efb      	subs	r3, r7, #3
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d834      	bhi.n	8005b8c <err_tcp+0x104>
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8005b22:	7e23      	ldrb	r3, [r4, #24]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8005b24:	f023 0204 	bic.w	r2, r3, #4
    if (!was_nonblocking_connect) {
 8005b28:	075b      	lsls	r3, r3, #29
    SET_NONBLOCKING_CONNECT(conn, 0);
 8005b2a:	7622      	strb	r2, [r4, #24]
    if (!was_nonblocking_connect) {
 8005b2c:	d439      	bmi.n	8005ba2 <err_tcp+0x11a>
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8005b2e:	69e3      	ldr	r3, [r4, #28]
 8005b30:	b933      	cbnz	r3, 8005b40 <err_tcp+0xb8>
 8005b32:	4b1d      	ldr	r3, [pc, #116]	; (8005ba8 <err_tcp+0x120>)
 8005b34:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8005b38:	491f      	ldr	r1, [pc, #124]	; (8005bb8 <err_tcp+0x130>)
 8005b3a:	481d      	ldr	r0, [pc, #116]	; (8005bb0 <err_tcp+0x128>)
 8005b3c:	f006 fd8a 	bl	800c654 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8005b40:	2f04      	cmp	r7, #4
        conn->current_msg->err = ERR_OK;
 8005b42:	69e3      	ldr	r3, [r4, #28]
        conn->current_msg->err = err;
 8005b44:	bf14      	ite	ne
 8005b46:	711d      	strbne	r5, [r3, #4]
        conn->current_msg->err = ERR_OK;
 8005b48:	2200      	moveq	r2, #0
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005b4a:	681d      	ldr	r5, [r3, #0]
        conn->current_msg->err = ERR_OK;
 8005b4c:	bf08      	it	eq
 8005b4e:	711a      	strbeq	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8005b50:	350c      	adds	r5, #12
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8005b52:	4628      	mov	r0, r5
 8005b54:	f006 fcad 	bl	800c4b2 <sys_sem_valid>
 8005b58:	b930      	cbnz	r0, 8005b68 <err_tcp+0xe0>
 8005b5a:	4b13      	ldr	r3, [pc, #76]	; (8005ba8 <err_tcp+0x120>)
 8005b5c:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005b60:	4916      	ldr	r1, [pc, #88]	; (8005bbc <err_tcp+0x134>)
 8005b62:	4813      	ldr	r0, [pc, #76]	; (8005bb0 <err_tcp+0x128>)
 8005b64:	f006 fd76 	bl	800c654 <iprintf>
      conn->current_msg = NULL;
 8005b68:	2300      	movs	r3, #0
      sys_sem_signal(op_completed_sem);
 8005b6a:	4628      	mov	r0, r5
      conn->current_msg = NULL;
 8005b6c:	61e3      	str	r3, [r4, #28]
}
 8005b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      sys_sem_signal(op_completed_sem);
 8005b72:	f006 bc98 	b.w	800c4a6 <sys_sem_signal>
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8005b76:	b13d      	cbz	r5, 8005b88 <err_tcp+0x100>
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <err_tcp+0x120>)
 8005b7a:	227d      	movs	r2, #125	; 0x7d
 8005b7c:	4910      	ldr	r1, [pc, #64]	; (8005bc0 <err_tcp+0x138>)
 8005b7e:	2600      	movs	r6, #0
 8005b80:	480b      	ldr	r0, [pc, #44]	; (8005bb0 <err_tcp+0x128>)
 8005b82:	f006 fd67 	bl	800c654 <iprintf>
 8005b86:	e7b3      	b.n	8005af0 <err_tcp+0x68>
      return NULL;
 8005b88:	462e      	mov	r6, r5
 8005b8a:	e7b1      	b.n	8005af0 <err_tcp+0x68>
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8005b8c:	69e3      	ldr	r3, [r4, #28]
 8005b8e:	b143      	cbz	r3, 8005ba2 <err_tcp+0x11a>
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <err_tcp+0x120>)
 8005b92:	f240 12f7 	movw	r2, #503	; 0x1f7
 8005b96:	490b      	ldr	r1, [pc, #44]	; (8005bc4 <err_tcp+0x13c>)
 8005b98:	4805      	ldr	r0, [pc, #20]	; (8005bb0 <err_tcp+0x128>)
}
 8005b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8005b9e:	f006 bd59 	b.w	800c654 <iprintf>
}
 8005ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba6:	bf00      	nop
 8005ba8:	0801e8d9 	.word	0x0801e8d9
 8005bac:	0801ea26 	.word	0x0801ea26
 8005bb0:	0801e3d3 	.word	0x0801e3d3
 8005bb4:	0800e1cc 	.word	0x0800e1cc
 8005bb8:	0801ea50 	.word	0x0801ea50
 8005bbc:	0801ec11 	.word	0x0801ec11
 8005bc0:	0801ec01 	.word	0x0801ec01
 8005bc4:	0801ec2a 	.word	0x0801ec2a

08005bc8 <sent_tcp>:
{
 8005bc8:	b538      	push	{r3, r4, r5, lr}
 8005bca:	4615      	mov	r5, r2
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8005bcc:	4604      	mov	r4, r0
 8005bce:	b970      	cbnz	r0, 8005bee <sent_tcp+0x26>
 8005bd0:	4b16      	ldr	r3, [pc, #88]	; (8005c2c <sent_tcp+0x64>)
 8005bd2:	f240 1293 	movw	r2, #403	; 0x193
 8005bd6:	4916      	ldr	r1, [pc, #88]	; (8005c30 <sent_tcp+0x68>)
 8005bd8:	4816      	ldr	r0, [pc, #88]	; (8005c34 <sent_tcp+0x6c>)
 8005bda:	f006 fd3b 	bl	800c654 <iprintf>
}
 8005bde:	2000      	movs	r0, #0
 8005be0:	bd38      	pop	{r3, r4, r5, pc}
    } else if (conn->state == NETCONN_CLOSE) {
 8005be2:	2904      	cmp	r1, #4
 8005be4:	d108      	bne.n	8005bf8 <sent_tcp+0x30>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8005be6:	2101      	movs	r1, #1
 8005be8:	f7ff fdb4 	bl	8005754 <lwip_netconn_do_close_internal>
 8005bec:	e004      	b.n	8005bf8 <sent_tcp+0x30>
    if (conn->state == NETCONN_WRITE) {
 8005bee:	7841      	ldrb	r1, [r0, #1]
 8005bf0:	2901      	cmp	r1, #1
 8005bf2:	d1f6      	bne.n	8005be2 <sent_tcp+0x1a>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8005bf4:	f7ff fc84 	bl	8005500 <lwip_netconn_do_writemore>
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8005bf8:	6863      	ldr	r3, [r4, #4]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d0ef      	beq.n	8005bde <sent_tcp+0x16>
 8005bfe:	f8b3 1064 	ldrh.w	r1, [r3, #100]	; 0x64
 8005c02:	f640 3269 	movw	r2, #2921	; 0xb69
 8005c06:	4291      	cmp	r1, r2
 8005c08:	d9e9      	bls.n	8005bde <sent_tcp+0x16>
 8005c0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d8e5      	bhi.n	8005bde <sent_tcp+0x16>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8005c12:	7e23      	ldrb	r3, [r4, #24]
 8005c14:	f023 0310 	bic.w	r3, r3, #16
 8005c18:	7623      	strb	r3, [r4, #24]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8005c1a:	6a23      	ldr	r3, [r4, #32]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d0de      	beq.n	8005bde <sent_tcp+0x16>
 8005c20:	462a      	mov	r2, r5
 8005c22:	2102      	movs	r1, #2
 8005c24:	4620      	mov	r0, r4
 8005c26:	4798      	blx	r3
  return ERR_OK;
 8005c28:	e7d9      	b.n	8005bde <sent_tcp+0x16>
 8005c2a:	bf00      	nop
 8005c2c:	0801e8d9 	.word	0x0801e8d9
 8005c30:	0801ea26 	.word	0x0801ea26
 8005c34:	0801e3d3 	.word	0x0801e3d3

08005c38 <lwip_netconn_is_err_msg>:
{
 8005c38:	b538      	push	{r3, r4, r5, lr}
 8005c3a:	4605      	mov	r5, r0
  LWIP_ASSERT("err != NULL", err != NULL);
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	b929      	cbnz	r1, 8005c4c <lwip_netconn_is_err_msg+0x14>
 8005c40:	4b0d      	ldr	r3, [pc, #52]	; (8005c78 <lwip_netconn_is_err_msg+0x40>)
 8005c42:	2285      	movs	r2, #133	; 0x85
 8005c44:	490d      	ldr	r1, [pc, #52]	; (8005c7c <lwip_netconn_is_err_msg+0x44>)
 8005c46:	480e      	ldr	r0, [pc, #56]	; (8005c80 <lwip_netconn_is_err_msg+0x48>)
 8005c48:	f006 fd04 	bl	800c654 <iprintf>
  if (msg == &netconn_aborted) {
 8005c4c:	4b0d      	ldr	r3, [pc, #52]	; (8005c84 <lwip_netconn_is_err_msg+0x4c>)
 8005c4e:	f103 0210 	add.w	r2, r3, #16
 8005c52:	4295      	cmp	r5, r2
 8005c54:	d103      	bne.n	8005c5e <lwip_netconn_is_err_msg+0x26>
    *err = ERR_ABRT;
 8005c56:	23f3      	movs	r3, #243	; 0xf3
    return 1;
 8005c58:	2001      	movs	r0, #1
    *err = ERR_CLSD;
 8005c5a:	7023      	strb	r3, [r4, #0]
}
 8005c5c:	bd38      	pop	{r3, r4, r5, pc}
  } else if (msg == &netconn_reset) {
 8005c5e:	f103 0211 	add.w	r2, r3, #17
 8005c62:	4295      	cmp	r5, r2
 8005c64:	d101      	bne.n	8005c6a <lwip_netconn_is_err_msg+0x32>
    *err = ERR_RST;
 8005c66:	23f2      	movs	r3, #242	; 0xf2
 8005c68:	e7f6      	b.n	8005c58 <lwip_netconn_is_err_msg+0x20>
  } else if (msg == &netconn_closed) {
 8005c6a:	429d      	cmp	r5, r3
 8005c6c:	d101      	bne.n	8005c72 <lwip_netconn_is_err_msg+0x3a>
    *err = ERR_CLSD;
 8005c6e:	23f1      	movs	r3, #241	; 0xf1
 8005c70:	e7f2      	b.n	8005c58 <lwip_netconn_is_err_msg+0x20>
  return 0;
 8005c72:	2000      	movs	r0, #0
 8005c74:	e7f2      	b.n	8005c5c <lwip_netconn_is_err_msg+0x24>
 8005c76:	bf00      	nop
 8005c78:	0801e8d9 	.word	0x0801e8d9
 8005c7c:	0801ec44 	.word	0x0801ec44
 8005c80:	0801e3d3 	.word	0x0801e3d3
 8005c84:	0800e1cc 	.word	0x0800e1cc

08005c88 <lwip_netconn_do_newconn>:
{
 8005c88:	b538      	push	{r3, r4, r5, lr}
  msg->err = ERR_OK;
 8005c8a:	2300      	movs	r3, #0
  if (msg->conn->pcb.tcp == NULL) {
 8005c8c:	6805      	ldr	r5, [r0, #0]
{
 8005c8e:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8005c90:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8005c92:	6868      	ldr	r0, [r5, #4]
 8005c94:	bb28      	cbnz	r0, 8005ce2 <lwip_netconn_do_newconn+0x5a>
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005c96:	782b      	ldrb	r3, [r5, #0]
 8005c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c9c:	2b10      	cmp	r3, #16
 8005c9e:	d014      	beq.n	8005cca <lwip_netconn_do_newconn+0x42>
 8005ca0:	2b20      	cmp	r3, #32
 8005ca2:	d11c      	bne.n	8005cde <lwip_netconn_do_newconn+0x56>
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8005ca4:	f006 face 	bl	800c244 <udp_new_ip_type>
      if (msg->conn->pcb.udp != NULL) {
 8005ca8:	6822      	ldr	r2, [r4, #0]
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8005caa:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.udp != NULL) {
 8005cac:	6850      	ldr	r0, [r2, #4]
 8005cae:	b150      	cbz	r0, 8005cc6 <lwip_netconn_do_newconn+0x3e>
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8005cb0:	7813      	ldrb	r3, [r2, #0]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8005cb2:	490c      	ldr	r1, [pc, #48]	; (8005ce4 <lwip_netconn_do_newconn+0x5c>)
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8005cb4:	2b22      	cmp	r3, #34	; 0x22
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8005cb6:	bf04      	itt	eq
 8005cb8:	2301      	moveq	r3, #1
 8005cba:	7403      	strbeq	r3, [r0, #16]
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8005cbc:	f006 fa7c 	bl	800c1b8 <udp_recv>
  if (msg->conn->pcb.ip == NULL) {
 8005cc0:	6823      	ldr	r3, [r4, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	b96b      	cbnz	r3, 8005ce2 <lwip_netconn_do_newconn+0x5a>
    msg->err = ERR_MEM;
 8005cc6:	23ff      	movs	r3, #255	; 0xff
 8005cc8:	e00a      	b.n	8005ce0 <lwip_netconn_do_newconn+0x58>
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8005cca:	f003 fe83 	bl	80099d4 <tcp_new_ip_type>
 8005cce:	6068      	str	r0, [r5, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8005cd0:	6820      	ldr	r0, [r4, #0]
 8005cd2:	6843      	ldr	r3, [r0, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d0f6      	beq.n	8005cc6 <lwip_netconn_do_newconn+0x3e>
        setup_tcp(msg->conn);
 8005cd8:	f7ff fbf0 	bl	80054bc <setup_tcp>
 8005cdc:	e7f0      	b.n	8005cc0 <lwip_netconn_do_newconn+0x38>
      msg->err = ERR_VAL;
 8005cde:	23fa      	movs	r3, #250	; 0xfa
    msg->err = ERR_MEM;
 8005ce0:	7123      	strb	r3, [r4, #4]
}
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	08005401 	.word	0x08005401

08005ce8 <netconn_alloc>:
{
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	4605      	mov	r5, r0
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005cec:	2007      	movs	r0, #7
{
 8005cee:	460e      	mov	r6, r1
  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8005cf0:	f002 f95c 	bl	8007fac <memp_malloc>
  if (conn == NULL) {
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	b388      	cbz	r0, 8005d5c <netconn_alloc+0x74>
  conn->type = t;
 8005cf8:	7005      	strb	r5, [r0, #0]
 8005cfa:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
  conn->pending_err = ERR_OK;
 8005cfe:	2300      	movs	r3, #0
  switch (NETCONNTYPE_GROUP(t)) {
 8005d00:	2d10      	cmp	r5, #16
  conn->pending_err = ERR_OK;
 8005d02:	7203      	strb	r3, [r0, #8]
  conn->pcb.tcp = NULL;
 8005d04:	6043      	str	r3, [r0, #4]
  switch (NETCONNTYPE_GROUP(t)) {
 8005d06:	d00e      	beq.n	8005d26 <netconn_alloc+0x3e>
 8005d08:	2d20      	cmp	r5, #32
 8005d0a:	d00c      	beq.n	8005d26 <netconn_alloc+0x3e>
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8005d0c:	4b14      	ldr	r3, [pc, #80]	; (8005d60 <netconn_alloc+0x78>)
 8005d0e:	f240 22e5 	movw	r2, #741	; 0x2e5
 8005d12:	4914      	ldr	r1, [pc, #80]	; (8005d64 <netconn_alloc+0x7c>)
 8005d14:	4814      	ldr	r0, [pc, #80]	; (8005d68 <netconn_alloc+0x80>)
 8005d16:	f006 fc9d 	bl	800c654 <iprintf>
  memp_free(MEMP_NETCONN, conn);
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	2007      	movs	r0, #7
  return NULL;
 8005d1e:	2400      	movs	r4, #0
  memp_free(MEMP_NETCONN, conn);
 8005d20:	f002 f974 	bl	800800c <memp_free>
  return NULL;
 8005d24:	e01a      	b.n	8005d5c <netconn_alloc+0x74>
  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8005d26:	f104 0710 	add.w	r7, r4, #16
 8005d2a:	2106      	movs	r1, #6
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	f006 fb29 	bl	800c384 <sys_mbox_new>
 8005d32:	4601      	mov	r1, r0
 8005d34:	2800      	cmp	r0, #0
 8005d36:	d1f0      	bne.n	8005d1a <netconn_alloc+0x32>
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8005d38:	f104 000c 	add.w	r0, r4, #12
 8005d3c:	f006 fb81 	bl	800c442 <sys_sem_new>
 8005d40:	4605      	mov	r5, r0
 8005d42:	b118      	cbz	r0, 8005d4c <netconn_alloc+0x64>
    sys_mbox_free(&conn->recvmbox);
 8005d44:	4638      	mov	r0, r7
 8005d46:	f006 fb2d 	bl	800c3a4 <sys_mbox_free>
    goto free_and_return;
 8005d4a:	e7e6      	b.n	8005d1a <netconn_alloc+0x32>
  sys_mbox_set_invalid(&conn->acceptmbox);
 8005d4c:	f104 0014 	add.w	r0, r4, #20
 8005d50:	f006 fb74 	bl	800c43c <sys_mbox_set_invalid>
  conn->state        = NETCONN_NONE;
 8005d54:	7065      	strb	r5, [r4, #1]
  conn->flags = init_flags;
 8005d56:	7625      	strb	r5, [r4, #24]
  conn->current_msg  = NULL;
 8005d58:	e9c4 5607 	strd	r5, r6, [r4, #28]
}
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d60:	0801e8d9 	.word	0x0801e8d9
 8005d64:	0801ec50 	.word	0x0801ec50
 8005d68:	0801e3d3 	.word	0x0801e3d3

08005d6c <netconn_free>:
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8005d6c:	6843      	ldr	r3, [r0, #4]
{
 8005d6e:	b513      	push	{r0, r1, r4, lr}
 8005d70:	4604      	mov	r4, r0
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8005d72:	b133      	cbz	r3, 8005d82 <netconn_free+0x16>
 8005d74:	4b16      	ldr	r3, [pc, #88]	; (8005dd0 <netconn_free+0x64>)
 8005d76:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8005d7a:	4916      	ldr	r1, [pc, #88]	; (8005dd4 <netconn_free+0x68>)
 8005d7c:	4816      	ldr	r0, [pc, #88]	; (8005dd8 <netconn_free+0x6c>)
 8005d7e:	f006 fc69 	bl	800c654 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8005d82:	f104 0010 	add.w	r0, r4, #16
 8005d86:	f006 fb54 	bl	800c432 <sys_mbox_valid>
 8005d8a:	b130      	cbz	r0, 8005d9a <netconn_free+0x2e>
 8005d8c:	4b10      	ldr	r3, [pc, #64]	; (8005dd0 <netconn_free+0x64>)
 8005d8e:	f240 3223 	movw	r2, #803	; 0x323
 8005d92:	4912      	ldr	r1, [pc, #72]	; (8005ddc <netconn_free+0x70>)
 8005d94:	4810      	ldr	r0, [pc, #64]	; (8005dd8 <netconn_free+0x6c>)
 8005d96:	f006 fc5d 	bl	800c654 <iprintf>
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8005d9a:	f104 0014 	add.w	r0, r4, #20
 8005d9e:	f006 fb48 	bl	800c432 <sys_mbox_valid>
 8005da2:	b130      	cbz	r0, 8005db2 <netconn_free+0x46>
 8005da4:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <netconn_free+0x64>)
 8005da6:	f240 3226 	movw	r2, #806	; 0x326
 8005daa:	490d      	ldr	r1, [pc, #52]	; (8005de0 <netconn_free+0x74>)
 8005dac:	480a      	ldr	r0, [pc, #40]	; (8005dd8 <netconn_free+0x6c>)
 8005dae:	f006 fc51 	bl	800c654 <iprintf>
  sys_sem_free(&conn->op_completed);
 8005db2:	f104 000c 	add.w	r0, r4, #12
 8005db6:	9001      	str	r0, [sp, #4]
 8005db8:	f006 fb78 	bl	800c4ac <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8005dbc:	9801      	ldr	r0, [sp, #4]
 8005dbe:	f006 fb7d 	bl	800c4bc <sys_sem_set_invalid>
  memp_free(MEMP_NETCONN, conn);
 8005dc2:	4621      	mov	r1, r4
 8005dc4:	2007      	movs	r0, #7
}
 8005dc6:	b002      	add	sp, #8
 8005dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_NETCONN, conn);
 8005dcc:	f002 b91e 	b.w	800800c <memp_free>
 8005dd0:	0801e8d9 	.word	0x0801e8d9
 8005dd4:	0801ec76 	.word	0x0801ec76
 8005dd8:	0801e3d3 	.word	0x0801e3d3
 8005ddc:	0801eca4 	.word	0x0801eca4
 8005de0:	0801ecde 	.word	0x0801ecde

08005de4 <netconn_drain>:
{
 8005de4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (sys_mbox_valid(&conn->recvmbox)) {
 8005de6:	f100 0510 	add.w	r5, r0, #16
{
 8005dea:	4604      	mov	r4, r0
  if (sys_mbox_valid(&conn->recvmbox)) {
 8005dec:	4628      	mov	r0, r5
 8005dee:	f006 fb20 	bl	800c432 <sys_mbox_valid>
 8005df2:	b158      	cbz	r0, 8005e0c <netconn_drain+0x28>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8005df4:	a901      	add	r1, sp, #4
 8005df6:	4628      	mov	r0, r5
 8005df8:	f006 fb0a 	bl	800c410 <sys_arch_mbox_tryfetch>
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d118      	bne.n	8005e32 <netconn_drain+0x4e>
    sys_mbox_free(&conn->recvmbox);
 8005e00:	4628      	mov	r0, r5
 8005e02:	f006 facf 	bl	800c3a4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8005e06:	4628      	mov	r0, r5
 8005e08:	f006 fb18 	bl	800c43c <sys_mbox_set_invalid>
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8005e0c:	3414      	adds	r4, #20
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f006 fb0f 	bl	800c432 <sys_mbox_valid>
 8005e14:	b158      	cbz	r0, 8005e2e <netconn_drain+0x4a>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8005e16:	a901      	add	r1, sp, #4
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f006 faf9 	bl	800c410 <sys_arch_mbox_tryfetch>
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d11a      	bne.n	8005e58 <netconn_drain+0x74>
    sys_mbox_free(&conn->acceptmbox);
 8005e22:	4620      	mov	r0, r4
 8005e24:	f006 fabe 	bl	800c3a4 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f006 fb07 	bl	800c43c <sys_mbox_set_invalid>
}
 8005e2e:	b002      	add	sp, #8
 8005e30:	bd70      	pop	{r4, r5, r6, pc}
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8005e32:	7823      	ldrb	r3, [r4, #0]
 8005e34:	9801      	ldr	r0, [sp, #4]
 8005e36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e3a:	2b10      	cmp	r3, #16
 8005e3c:	d109      	bne.n	8005e52 <netconn_drain+0x6e>
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8005e3e:	f10d 0103 	add.w	r1, sp, #3
 8005e42:	f7ff fef9 	bl	8005c38 <lwip_netconn_is_err_msg>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d1d4      	bne.n	8005df4 <netconn_drain+0x10>
            pbuf_free((struct pbuf *)mem);
 8005e4a:	9801      	ldr	r0, [sp, #4]
 8005e4c:	f002 fb48 	bl	80084e0 <pbuf_free>
 8005e50:	e7d0      	b.n	8005df4 <netconn_drain+0x10>
          netbuf_delete((struct netbuf *)mem);
 8005e52:	f000 fa6d 	bl	8006330 <netbuf_delete>
 8005e56:	e7cd      	b.n	8005df4 <netconn_drain+0x10>
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8005e58:	f10d 0103 	add.w	r1, sp, #3
 8005e5c:	9801      	ldr	r0, [sp, #4]
 8005e5e:	f7ff feeb 	bl	8005c38 <lwip_netconn_is_err_msg>
 8005e62:	4606      	mov	r6, r0
 8005e64:	2800      	cmp	r0, #0
 8005e66:	d1d6      	bne.n	8005e16 <netconn_drain+0x32>
          struct netconn *newconn = (struct netconn *)mem;
 8005e68:	9d01      	ldr	r5, [sp, #4]
          netconn_drain(newconn);
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	f7ff ffba 	bl	8005de4 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8005e70:	6868      	ldr	r0, [r5, #4]
 8005e72:	b110      	cbz	r0, 8005e7a <netconn_drain+0x96>
            tcp_abort(newconn->pcb.tcp);
 8005e74:	f003 fcbe 	bl	80097f4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8005e78:	606e      	str	r6, [r5, #4]
          netconn_free(newconn);
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	f7ff ff76 	bl	8005d6c <netconn_free>
 8005e80:	e7c9      	b.n	8005e16 <netconn_drain+0x32>
	...

08005e84 <accept_function>:
{
 8005e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e86:	460f      	mov	r7, r1
 8005e88:	4616      	mov	r6, r2
  if (conn == NULL) {
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	b920      	cbnz	r0, 8005e98 <accept_function+0x14>
    return ERR_VAL;
 8005e8e:	f06f 0405 	mvn.w	r4, #5
}
 8005e92:	4620      	mov	r0, r4
 8005e94:	b003      	add	sp, #12
 8005e96:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8005e98:	f100 0414 	add.w	r4, r0, #20
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f006 fac8 	bl	800c432 <sys_mbox_valid>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d0f3      	beq.n	8005e8e <accept_function+0xa>
  if (newpcb == NULL) {
 8005ea6:	b96f      	cbnz	r7, 8005ec4 <accept_function+0x40>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8005ea8:	492f      	ldr	r1, [pc, #188]	; (8005f68 <accept_function+0xe4>)
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f006 fa84 	bl	800c3b8 <sys_mbox_trypost>
 8005eb0:	4602      	mov	r2, r0
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d1eb      	bne.n	8005e8e <accept_function+0xa>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005eb6:	6a2b      	ldr	r3, [r5, #32]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d0e8      	beq.n	8005e8e <accept_function+0xa>
 8005ebc:	4601      	mov	r1, r0
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	4798      	blx	r3
 8005ec2:	e7e4      	b.n	8005e8e <accept_function+0xa>
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8005ec4:	b136      	cbz	r6, 8005ed4 <accept_function+0x50>
 8005ec6:	4b29      	ldr	r3, [pc, #164]	; (8005f6c <accept_function+0xe8>)
 8005ec8:	f240 222a 	movw	r2, #554	; 0x22a
 8005ecc:	4928      	ldr	r1, [pc, #160]	; (8005f70 <accept_function+0xec>)
 8005ece:	4829      	ldr	r0, [pc, #164]	; (8005f74 <accept_function+0xf0>)
 8005ed0:	f006 fbc0 	bl	800c654 <iprintf>
  newconn = netconn_alloc(conn->type, conn->callback);
 8005ed4:	6a29      	ldr	r1, [r5, #32]
 8005ed6:	7828      	ldrb	r0, [r5, #0]
 8005ed8:	f7ff ff06 	bl	8005ce8 <netconn_alloc>
  if (newconn == NULL) {
 8005edc:	4606      	mov	r6, r0
 8005ede:	b968      	cbnz	r0, 8005efc <accept_function+0x78>
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8005ee0:	4921      	ldr	r1, [pc, #132]	; (8005f68 <accept_function+0xe4>)
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f006 fa68 	bl	800c3b8 <sys_mbox_trypost>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	b920      	cbnz	r0, 8005ef6 <accept_function+0x72>
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005eec:	6a2b      	ldr	r3, [r5, #32]
 8005eee:	b113      	cbz	r3, 8005ef6 <accept_function+0x72>
 8005ef0:	4601      	mov	r1, r0
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	4798      	blx	r3
    return ERR_MEM;
 8005ef6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005efa:	e7ca      	b.n	8005e92 <accept_function+0xe>
  newconn->pcb.tcp = newpcb;
 8005efc:	6047      	str	r7, [r0, #4]
  setup_tcp(newconn);
 8005efe:	f7ff fadd 	bl	80054bc <setup_tcp>
  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8005f02:	4620      	mov	r0, r4
 8005f04:	4631      	mov	r1, r6
 8005f06:	f006 fa57 	bl	800c3b8 <sys_mbox_trypost>
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	b318      	cbz	r0, 8005f56 <accept_function+0xd2>
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8005f0e:	6870      	ldr	r0, [r6, #4]
    tcp_arg(pcb, NULL);
 8005f10:	2100      	movs	r1, #0
 8005f12:	9001      	str	r0, [sp, #4]
 8005f14:	f002 ff24 	bl	8008d60 <tcp_arg>
    tcp_recv(pcb, NULL);
 8005f18:	9801      	ldr	r0, [sp, #4]
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	f002 ff24 	bl	8008d68 <tcp_recv>
    tcp_sent(pcb, NULL);
 8005f20:	9801      	ldr	r0, [sp, #4]
 8005f22:	2100      	movs	r1, #0
 8005f24:	f002 ff38 	bl	8008d98 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8005f28:	2200      	movs	r2, #0
 8005f2a:	9801      	ldr	r0, [sp, #4]
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	f002 ff67 	bl	8008e00 <tcp_poll>
    tcp_err(pcb, NULL);
 8005f32:	2100      	movs	r1, #0
 8005f34:	9801      	ldr	r0, [sp, #4]
 8005f36:	f002 ff45 	bl	8008dc4 <tcp_err>
    newconn->pcb.tcp = NULL;
 8005f3a:	2300      	movs	r3, #0
    sys_mbox_free(&newconn->recvmbox);
 8005f3c:	f106 0010 	add.w	r0, r6, #16
    newconn->pcb.tcp = NULL;
 8005f40:	6073      	str	r3, [r6, #4]
    sys_mbox_free(&newconn->recvmbox);
 8005f42:	9001      	str	r0, [sp, #4]
 8005f44:	f006 fa2e 	bl	800c3a4 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8005f48:	9801      	ldr	r0, [sp, #4]
 8005f4a:	f006 fa77 	bl	800c43c <sys_mbox_set_invalid>
    netconn_free(newconn);
 8005f4e:	4630      	mov	r0, r6
 8005f50:	f7ff ff0c 	bl	8005d6c <netconn_free>
    return ERR_MEM;
 8005f54:	e7cf      	b.n	8005ef6 <accept_function+0x72>
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8005f56:	6a2b      	ldr	r3, [r5, #32]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d09a      	beq.n	8005e92 <accept_function+0xe>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	4601      	mov	r1, r0
 8005f60:	4628      	mov	r0, r5
 8005f62:	4798      	blx	r3
 8005f64:	e795      	b.n	8005e92 <accept_function+0xe>
 8005f66:	bf00      	nop
 8005f68:	0800e1dc 	.word	0x0800e1dc
 8005f6c:	0801e8d9 	.word	0x0801e8d9
 8005f70:	0801ed1a 	.word	0x0801ed1a
 8005f74:	0801e3d3 	.word	0x0801e3d3

08005f78 <lwip_netconn_do_delconn>:
  enum netconn_state state = msg->conn->state;
 8005f78:	6803      	ldr	r3, [r0, #0]
{
 8005f7a:	b570      	push	{r4, r5, r6, lr}
  enum netconn_state state = msg->conn->state;
 8005f7c:	785d      	ldrb	r5, [r3, #1]
{
 8005f7e:	4604      	mov	r4, r0
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8005f80:	b16d      	cbz	r5, 8005f9e <lwip_netconn_do_delconn+0x26>
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f88:	2b10      	cmp	r3, #16
 8005f8a:	d006      	beq.n	8005f9a <lwip_netconn_do_delconn+0x22>
 8005f8c:	4b37      	ldr	r3, [pc, #220]	; (800606c <lwip_netconn_do_delconn+0xf4>)
 8005f8e:	f240 425e 	movw	r2, #1118	; 0x45e
 8005f92:	4937      	ldr	r1, [pc, #220]	; (8006070 <lwip_netconn_do_delconn+0xf8>)
 8005f94:	4837      	ldr	r0, [pc, #220]	; (8006074 <lwip_netconn_do_delconn+0xfc>)
 8005f96:	f006 fb5d 	bl	800c654 <iprintf>
  if (((state != NETCONN_NONE) &&
 8005f9a:	2d02      	cmp	r5, #2
 8005f9c:	d121      	bne.n	8005fe2 <lwip_netconn_do_delconn+0x6a>
    msg->err = ERR_OK;
 8005f9e:	2500      	movs	r5, #0
    netconn_drain(msg->conn);
 8005fa0:	6820      	ldr	r0, [r4, #0]
    msg->err = ERR_OK;
 8005fa2:	7125      	strb	r5, [r4, #4]
    netconn_drain(msg->conn);
 8005fa4:	f7ff ff1e 	bl	8005de4 <netconn_drain>
    if (msg->conn->pcb.tcp != NULL) {
 8005fa8:	6822      	ldr	r2, [r4, #0]
 8005faa:	6850      	ldr	r0, [r2, #4]
 8005fac:	b160      	cbz	r0, 8005fc8 <lwip_netconn_do_delconn+0x50>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8005fae:	7813      	ldrb	r3, [r2, #0]
 8005fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fb4:	2b10      	cmp	r3, #16
 8005fb6:	d022      	beq.n	8005ffe <lwip_netconn_do_delconn+0x86>
 8005fb8:	2b20      	cmp	r3, #32
 8005fba:	d102      	bne.n	8005fc2 <lwip_netconn_do_delconn+0x4a>
          msg->conn->pcb.udp->recv_arg = NULL;
 8005fbc:	61c5      	str	r5, [r0, #28]
          udp_remove(msg->conn->pcb.udp);
 8005fbe:	f006 f90d 	bl	800c1dc <udp_remove>
      msg->conn->pcb.tcp = NULL;
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	605a      	str	r2, [r3, #4]
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8005fc8:	6820      	ldr	r0, [r4, #0]
 8005fca:	6a03      	ldr	r3, [r0, #32]
 8005fcc:	b113      	cbz	r3, 8005fd4 <lwip_netconn_do_delconn+0x5c>
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8005fd4:	6820      	ldr	r0, [r4, #0]
 8005fd6:	6a03      	ldr	r3, [r0, #32]
 8005fd8:	b15b      	cbz	r3, 8005ff2 <lwip_netconn_do_delconn+0x7a>
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2102      	movs	r1, #2
 8005fde:	4798      	blx	r3
 8005fe0:	e007      	b.n	8005ff2 <lwip_netconn_do_delconn+0x7a>
       (state != NETCONN_LISTEN) &&
 8005fe2:	2d03      	cmp	r5, #3
 8005fe4:	d103      	bne.n	8005fee <lwip_netconn_do_delconn+0x76>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	7e1b      	ldrb	r3, [r3, #24]
 8005fea:	075b      	lsls	r3, r3, #29
 8005fec:	d4d7      	bmi.n	8005f9e <lwip_netconn_do_delconn+0x26>
    msg->err = ERR_INPROGRESS;
 8005fee:	23fb      	movs	r3, #251	; 0xfb
 8005ff0:	7123      	strb	r3, [r4, #4]
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8005ff2:	6820      	ldr	r0, [r4, #0]
}
 8005ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8005ff8:	300c      	adds	r0, #12
 8005ffa:	f006 ba5a 	b.w	800c4b2 <sys_sem_valid>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8005ffe:	69d3      	ldr	r3, [r2, #28]
 8006000:	b133      	cbz	r3, 8006010 <lwip_netconn_do_delconn+0x98>
 8006002:	4b1a      	ldr	r3, [pc, #104]	; (800606c <lwip_netconn_do_delconn+0xf4>)
 8006004:	f240 4294 	movw	r2, #1172	; 0x494
 8006008:	491b      	ldr	r1, [pc, #108]	; (8006078 <lwip_netconn_do_delconn+0x100>)
 800600a:	481a      	ldr	r0, [pc, #104]	; (8006074 <lwip_netconn_do_delconn+0xfc>)
 800600c:	f006 fb22 	bl	800c654 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8006010:	6820      	ldr	r0, [r4, #0]
 8006012:	2304      	movs	r3, #4
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8006014:	2100      	movs	r1, #0
          msg->conn->state = NETCONN_CLOSE;
 8006016:	7043      	strb	r3, [r0, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8006018:	2303      	movs	r3, #3
 800601a:	7223      	strb	r3, [r4, #8]
          msg->conn->current_msg = msg;
 800601c:	61c4      	str	r4, [r0, #28]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800601e:	f7ff fb99 	bl	8005754 <lwip_netconn_do_close_internal>
 8006022:	b308      	cbz	r0, 8006068 <lwip_netconn_do_delconn+0xf0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8006024:	6823      	ldr	r3, [r4, #0]
 8006026:	785b      	ldrb	r3, [r3, #1]
 8006028:	2b04      	cmp	r3, #4
 800602a:	d006      	beq.n	800603a <lwip_netconn_do_delconn+0xc2>
 800602c:	4b0f      	ldr	r3, [pc, #60]	; (800606c <lwip_netconn_do_delconn+0xf4>)
 800602e:	f240 429a 	movw	r2, #1178	; 0x49a
 8006032:	4912      	ldr	r1, [pc, #72]	; (800607c <lwip_netconn_do_delconn+0x104>)
 8006034:	480f      	ldr	r0, [pc, #60]	; (8006074 <lwip_netconn_do_delconn+0xfc>)
 8006036:	f006 fb0d 	bl	800c654 <iprintf>
            UNLOCK_TCPIP_CORE();
 800603a:	4811      	ldr	r0, [pc, #68]	; (8006080 <lwip_netconn_do_delconn+0x108>)
 800603c:	f006 fa61 	bl	800c502 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8006040:	6820      	ldr	r0, [r4, #0]
 8006042:	2100      	movs	r1, #0
 8006044:	300c      	adds	r0, #12
 8006046:	f006 fa13 	bl	800c470 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800604a:	480d      	ldr	r0, [pc, #52]	; (8006080 <lwip_netconn_do_delconn+0x108>)
 800604c:	f006 fa54 	bl	800c4f8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006050:	6823      	ldr	r3, [r4, #0]
 8006052:	785b      	ldrb	r3, [r3, #1]
 8006054:	b143      	cbz	r3, 8006068 <lwip_netconn_do_delconn+0xf0>
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <lwip_netconn_do_delconn+0xf4>)
 8006058:	f240 429e 	movw	r2, #1182	; 0x49e
 800605c:	4907      	ldr	r1, [pc, #28]	; (800607c <lwip_netconn_do_delconn+0x104>)
 800605e:	4805      	ldr	r0, [pc, #20]	; (8006074 <lwip_netconn_do_delconn+0xfc>)
}
 8006060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006064:	f006 baf6 	b.w	800c654 <iprintf>
}
 8006068:	bd70      	pop	{r4, r5, r6, pc}
 800606a:	bf00      	nop
 800606c:	0801e8d9 	.word	0x0801e8d9
 8006070:	0801ed41 	.word	0x0801ed41
 8006074:	0801e3d3 	.word	0x0801e3d3
 8006078:	0801ed55 	.word	0x0801ed55
 800607c:	0801ed70 	.word	0x0801ed70
 8006080:	24006a10 	.word	0x24006a10

08006084 <lwip_netconn_do_bind>:
  if (msg->conn->pcb.tcp != NULL) {
 8006084:	6803      	ldr	r3, [r0, #0]
{
 8006086:	b510      	push	{r4, lr}
 8006088:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 800608a:	6858      	ldr	r0, [r3, #4]
 800608c:	b188      	cbz	r0, 80060b2 <lwip_netconn_do_bind+0x2e>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006094:	2b10      	cmp	r3, #16
 8006096:	d007      	beq.n	80060a8 <lwip_netconn_do_bind+0x24>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d10a      	bne.n	80060b2 <lwip_netconn_do_bind+0x2e>
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800609c:	89a2      	ldrh	r2, [r4, #12]
 800609e:	68a1      	ldr	r1, [r4, #8]
 80060a0:	f006 f822 	bl	800c0e8 <udp_bind>
  msg->err = err;
 80060a4:	7120      	strb	r0, [r4, #4]
}
 80060a6:	bd10      	pop	{r4, pc}
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80060a8:	89a2      	ldrh	r2, [r4, #12]
 80060aa:	68a1      	ldr	r1, [r4, #8]
 80060ac:	f002 fd12 	bl	8008ad4 <tcp_bind>
        break;
 80060b0:	e7f8      	b.n	80060a4 <lwip_netconn_do_bind+0x20>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80060b2:	f06f 0005 	mvn.w	r0, #5
 80060b6:	e7f5      	b.n	80060a4 <lwip_netconn_do_bind+0x20>

080060b8 <lwip_netconn_do_listen>:
  if (msg->conn->pcb.tcp != NULL) {
 80060b8:	6803      	ldr	r3, [r0, #0]
{
 80060ba:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80060bc:	4604      	mov	r4, r0
  if (msg->conn->pcb.tcp != NULL) {
 80060be:	6858      	ldr	r0, [r3, #4]
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d04f      	beq.n	8006164 <lwip_netconn_do_listen+0xac>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80060c4:	781a      	ldrb	r2, [r3, #0]
 80060c6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80060ca:	2a10      	cmp	r2, #16
 80060cc:	d14c      	bne.n	8006168 <lwip_netconn_do_listen+0xb0>
      if (msg->conn->state == NETCONN_NONE) {
 80060ce:	785b      	ldrb	r3, [r3, #1]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d143      	bne.n	800615c <lwip_netconn_do_listen+0xa4>
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80060d4:	7d03      	ldrb	r3, [r0, #20]
 80060d6:	b11b      	cbz	r3, 80060e0 <lwip_netconn_do_listen+0x28>
          err = ERR_VAL;
 80060d8:	23fa      	movs	r3, #250	; 0xfa
      err = ERR_ARG;
 80060da:	f88d 3007 	strb.w	r3, [sp, #7]
 80060de:	e031      	b.n	8006144 <lwip_netconn_do_listen+0x8c>
          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80060e0:	f10d 0207 	add.w	r2, sp, #7
 80060e4:	21ff      	movs	r1, #255	; 0xff
 80060e6:	f002 fd4b 	bl	8008b80 <tcp_listen_with_backlog_and_err>
          if (lpcb == NULL) {
 80060ea:	4605      	mov	r5, r0
 80060ec:	b350      	cbz	r0, 8006144 <lwip_netconn_do_listen+0x8c>
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80060ee:	6820      	ldr	r0, [r4, #0]
 80060f0:	3010      	adds	r0, #16
 80060f2:	f006 f99e 	bl	800c432 <sys_mbox_valid>
 80060f6:	b138      	cbz	r0, 8006108 <lwip_netconn_do_listen+0x50>
              sys_mbox_free(&msg->conn->recvmbox);
 80060f8:	6820      	ldr	r0, [r4, #0]
 80060fa:	3010      	adds	r0, #16
 80060fc:	f006 f952 	bl	800c3a4 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8006100:	6820      	ldr	r0, [r4, #0]
 8006102:	3010      	adds	r0, #16
 8006104:	f006 f99a 	bl	800c43c <sys_mbox_set_invalid>
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006108:	6820      	ldr	r0, [r4, #0]
            err = ERR_OK;
 800610a:	2300      	movs	r3, #0
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800610c:	3014      	adds	r0, #20
            err = ERR_OK;
 800610e:	f88d 3007 	strb.w	r3, [sp, #7]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8006112:	f006 f98e 	bl	800c432 <sys_mbox_valid>
 8006116:	b930      	cbnz	r0, 8006126 <lwip_netconn_do_listen+0x6e>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8006118:	6820      	ldr	r0, [r4, #0]
 800611a:	2106      	movs	r1, #6
 800611c:	3014      	adds	r0, #20
 800611e:	f006 f931 	bl	800c384 <sys_mbox_new>
 8006122:	f88d 0007 	strb.w	r0, [sp, #7]
            if (err == ERR_OK) {
 8006126:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 800612a:	b983      	cbnz	r3, 800614e <lwip_netconn_do_listen+0x96>
              msg->conn->state = NETCONN_LISTEN;
 800612c:	6821      	ldr	r1, [r4, #0]
 800612e:	2302      	movs	r3, #2
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8006130:	4628      	mov	r0, r5
              msg->conn->state = NETCONN_LISTEN;
 8006132:	704b      	strb	r3, [r1, #1]
              msg->conn->pcb.tcp = lpcb;
 8006134:	604d      	str	r5, [r1, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8006136:	f002 fe13 	bl	8008d60 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800613a:	6823      	ldr	r3, [r4, #0]
 800613c:	490b      	ldr	r1, [pc, #44]	; (800616c <lwip_netconn_do_listen+0xb4>)
 800613e:	6858      	ldr	r0, [r3, #4]
 8006140:	f002 fe58 	bl	8008df4 <tcp_accept>
  msg->err = err;
 8006144:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006148:	7123      	strb	r3, [r4, #4]
}
 800614a:	b003      	add	sp, #12
 800614c:	bd30      	pop	{r4, r5, pc}
              tcp_close(lpcb);
 800614e:	4628      	mov	r0, r5
 8006150:	f003 f9c0 	bl	80094d4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	2200      	movs	r2, #0
 8006158:	605a      	str	r2, [r3, #4]
 800615a:	e7f3      	b.n	8006144 <lwip_netconn_do_listen+0x8c>
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800615c:	2b02      	cmp	r3, #2
 800615e:	d101      	bne.n	8006164 <lwip_netconn_do_listen+0xac>
        err = ERR_OK;
 8006160:	2300      	movs	r3, #0
 8006162:	e7ba      	b.n	80060da <lwip_netconn_do_listen+0x22>
        err = ERR_CONN;
 8006164:	23f5      	movs	r3, #245	; 0xf5
 8006166:	e7b8      	b.n	80060da <lwip_netconn_do_listen+0x22>
      err = ERR_ARG;
 8006168:	23f0      	movs	r3, #240	; 0xf0
 800616a:	e7b6      	b.n	80060da <lwip_netconn_do_listen+0x22>
 800616c:	08005e85 	.word	0x08005e85

08006170 <lwip_netconn_do_recv>:
{
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg->err = ERR_OK;
 8006172:	2300      	movs	r3, #0
{
 8006174:	4604      	mov	r4, r0
  msg->err = ERR_OK;
 8006176:	7103      	strb	r3, [r0, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8006178:	6803      	ldr	r3, [r0, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	b192      	cbz	r2, 80061a4 <lwip_netconn_do_recv+0x34>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800617e:	781b      	ldrb	r3, [r3, #0]
 8006180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006184:	2b10      	cmp	r3, #16
 8006186:	d10d      	bne.n	80061a4 <lwip_netconn_do_recv+0x34>
      size_t remaining = msg->msg.r.len;
 8006188:	6885      	ldr	r5, [r0, #8]
 800618a:	f64f 77ff 	movw	r7, #65535	; 0xffff
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800618e:	42bd      	cmp	r5, r7
 8006190:	462e      	mov	r6, r5
        tcp_recved(msg->conn->pcb.tcp, recved);
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	bf28      	it	cs
 8006196:	463e      	movcs	r6, r7
 8006198:	6858      	ldr	r0, [r3, #4]
 800619a:	b2b1      	uxth	r1, r6
 800619c:	f002 fd8c 	bl	8008cb8 <tcp_recved>
      } while (remaining != 0);
 80061a0:	1bad      	subs	r5, r5, r6
 80061a2:	d1f4      	bne.n	800618e <lwip_netconn_do_recv+0x1e>
}
 80061a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061a8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80061a8:	b510      	push	{r4, lr}
 80061aa:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

  err_t err = netconn_err(msg->conn);
 80061ac:	6800      	ldr	r0, [r0, #0]
 80061ae:	f7fe ff96 	bl	80050de <netconn_err>
  if (err == ERR_OK) {
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d14a      	bne.n	800624c <lwip_netconn_do_write+0xa4>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	781a      	ldrb	r2, [r3, #0]
 80061ba:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80061be:	2a10      	cmp	r2, #16
 80061c0:	d142      	bne.n	8006248 <lwip_netconn_do_write+0xa0>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80061c2:	785a      	ldrb	r2, [r3, #1]
 80061c4:	2a00      	cmp	r2, #0
 80061c6:	d143      	bne.n	8006250 <lwip_netconn_do_write+0xa8>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
      } else if (msg->conn->pcb.tcp != NULL) {
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	d043      	beq.n	8006256 <lwip_netconn_do_write+0xae>
        msg->conn->state = NETCONN_WRITE;
 80061ce:	2201      	movs	r2, #1
 80061d0:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80061d2:	69db      	ldr	r3, [r3, #28]
 80061d4:	b133      	cbz	r3, 80061e4 <lwip_netconn_do_write+0x3c>
 80061d6:	4b21      	ldr	r3, [pc, #132]	; (800625c <lwip_netconn_do_write+0xb4>)
 80061d8:	f240 7223 	movw	r2, #1827	; 0x723
 80061dc:	4920      	ldr	r1, [pc, #128]	; (8006260 <lwip_netconn_do_write+0xb8>)
 80061de:	4821      	ldr	r0, [pc, #132]	; (8006264 <lwip_netconn_do_write+0xbc>)
 80061e0:	f006 fa38 	bl	800c654 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80061e4:	6963      	ldr	r3, [r4, #20]
 80061e6:	b933      	cbnz	r3, 80061f6 <lwip_netconn_do_write+0x4e>
 80061e8:	4b1c      	ldr	r3, [pc, #112]	; (800625c <lwip_netconn_do_write+0xb4>)
 80061ea:	f240 7224 	movw	r2, #1828	; 0x724
 80061ee:	491e      	ldr	r1, [pc, #120]	; (8006268 <lwip_netconn_do_write+0xc0>)
 80061f0:	481c      	ldr	r0, [pc, #112]	; (8006264 <lwip_netconn_do_write+0xbc>)
 80061f2:	f006 fa2f 	bl	800c654 <iprintf>
        msg->conn->current_msg = msg;
 80061f6:	6820      	ldr	r0, [r4, #0]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80061f8:	2100      	movs	r1, #0
        msg->conn->current_msg = msg;
 80061fa:	61c4      	str	r4, [r0, #28]
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80061fc:	f7ff f980 	bl	8005500 <lwip_netconn_do_writemore>
 8006200:	b328      	cbz	r0, 800624e <lwip_netconn_do_write+0xa6>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8006202:	6823      	ldr	r3, [r4, #0]
 8006204:	785b      	ldrb	r3, [r3, #1]
 8006206:	2b01      	cmp	r3, #1
 8006208:	d006      	beq.n	8006218 <lwip_netconn_do_write+0x70>
 800620a:	4b14      	ldr	r3, [pc, #80]	; (800625c <lwip_netconn_do_write+0xb4>)
 800620c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8006210:	4916      	ldr	r1, [pc, #88]	; (800626c <lwip_netconn_do_write+0xc4>)
 8006212:	4814      	ldr	r0, [pc, #80]	; (8006264 <lwip_netconn_do_write+0xbc>)
 8006214:	f006 fa1e 	bl	800c654 <iprintf>
          UNLOCK_TCPIP_CORE();
 8006218:	4815      	ldr	r0, [pc, #84]	; (8006270 <lwip_netconn_do_write+0xc8>)
 800621a:	f006 f972 	bl	800c502 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800621e:	6820      	ldr	r0, [r4, #0]
 8006220:	2100      	movs	r1, #0
 8006222:	300c      	adds	r0, #12
 8006224:	f006 f924 	bl	800c470 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8006228:	4811      	ldr	r0, [pc, #68]	; (8006270 <lwip_netconn_do_write+0xc8>)
 800622a:	f006 f965 	bl	800c4f8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	785b      	ldrb	r3, [r3, #1]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d10b      	bne.n	800624e <lwip_netconn_do_write+0xa6>
 8006236:	4b09      	ldr	r3, [pc, #36]	; (800625c <lwip_netconn_do_write+0xb4>)
 8006238:	f240 722c 	movw	r2, #1836	; 0x72c
 800623c:	490b      	ldr	r1, [pc, #44]	; (800626c <lwip_netconn_do_write+0xc4>)
 800623e:	4809      	ldr	r0, [pc, #36]	; (8006264 <lwip_netconn_do_write+0xbc>)
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
  TCPIP_APIMSG_ACK(msg);
}
 8006240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8006244:	f006 ba06 	b.w	800c654 <iprintf>
      err = ERR_VAL;
 8006248:	f06f 0005 	mvn.w	r0, #5
  msg->err = err;
 800624c:	7120      	strb	r0, [r4, #4]
}
 800624e:	bd10      	pop	{r4, pc}
        err = ERR_INPROGRESS;
 8006250:	f06f 0004 	mvn.w	r0, #4
 8006254:	e7fa      	b.n	800624c <lwip_netconn_do_write+0xa4>
        err = ERR_CONN;
 8006256:	f06f 000a 	mvn.w	r0, #10
 800625a:	e7f7      	b.n	800624c <lwip_netconn_do_write+0xa4>
 800625c:	0801e8d9 	.word	0x0801e8d9
 8006260:	0801ed55 	.word	0x0801ed55
 8006264:	0801e3d3 	.word	0x0801e3d3
 8006268:	0801ed8c 	.word	0x0801ed8c
 800626c:	0801ed70 	.word	0x0801ed70
 8006270:	24006a10 	.word	0x24006a10

08006274 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8006274:	b510      	push	{r4, lr}
 8006276:	4604      	mov	r4, r0
  struct api_msg *msg = (struct api_msg *)m;

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8006278:	6800      	ldr	r0, [r0, #0]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800627a:	6843      	ldr	r3, [r0, #4]
 800627c:	b163      	cbz	r3, 8006298 <lwip_netconn_do_close+0x24>
 800627e:	7803      	ldrb	r3, [r0, #0]
 8006280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006284:	2b10      	cmp	r3, #16
 8006286:	d107      	bne.n	8006298 <lwip_netconn_do_close+0x24>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006288:	7a22      	ldrb	r2, [r4, #8]
  enum netconn_state state = msg->conn->state;
 800628a:	7843      	ldrb	r3, [r0, #1]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800628c:	2a03      	cmp	r2, #3
 800628e:	d001      	beq.n	8006294 <lwip_netconn_do_close+0x20>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8006290:	2b02      	cmp	r3, #2
 8006292:	d001      	beq.n	8006298 <lwip_netconn_do_close+0x24>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8006294:	2b03      	cmp	r3, #3
 8006296:	d102      	bne.n	800629e <lwip_netconn_do_close+0x2a>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8006298:	23f5      	movs	r3, #245	; 0xf5
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800629a:	7123      	strb	r3, [r4, #4]
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800629c:	bd10      	pop	{r4, pc}
    } else if (state == NETCONN_WRITE) {
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <lwip_netconn_do_close+0x32>
      msg->err = ERR_INPROGRESS;
 80062a2:	23fb      	movs	r3, #251	; 0xfb
 80062a4:	e7f9      	b.n	800629a <lwip_netconn_do_close+0x26>
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80062a6:	07d3      	lsls	r3, r2, #31
 80062a8:	d501      	bpl.n	80062ae <lwip_netconn_do_close+0x3a>
        netconn_drain(msg->conn);
 80062aa:	f7ff fd9b 	bl	8005de4 <netconn_drain>
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	b133      	cbz	r3, 80062c2 <lwip_netconn_do_close+0x4e>
 80062b4:	4b19      	ldr	r3, [pc, #100]	; (800631c <lwip_netconn_do_close+0xa8>)
 80062b6:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80062ba:	4919      	ldr	r1, [pc, #100]	; (8006320 <lwip_netconn_do_close+0xac>)
 80062bc:	4819      	ldr	r0, [pc, #100]	; (8006324 <lwip_netconn_do_close+0xb0>)
 80062be:	f006 f9c9 	bl	800c654 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80062c2:	6820      	ldr	r0, [r4, #0]
 80062c4:	2304      	movs	r3, #4
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80062c6:	2100      	movs	r1, #0
      msg->conn->state = NETCONN_CLOSE;
 80062c8:	7043      	strb	r3, [r0, #1]
      msg->conn->current_msg = msg;
 80062ca:	61c4      	str	r4, [r0, #28]
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80062cc:	f7ff fa42 	bl	8005754 <lwip_netconn_do_close_internal>
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d0e3      	beq.n	800629c <lwip_netconn_do_close+0x28>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	785b      	ldrb	r3, [r3, #1]
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d006      	beq.n	80062ea <lwip_netconn_do_close+0x76>
 80062dc:	4b0f      	ldr	r3, [pc, #60]	; (800631c <lwip_netconn_do_close+0xa8>)
 80062de:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80062e2:	4911      	ldr	r1, [pc, #68]	; (8006328 <lwip_netconn_do_close+0xb4>)
 80062e4:	480f      	ldr	r0, [pc, #60]	; (8006324 <lwip_netconn_do_close+0xb0>)
 80062e6:	f006 f9b5 	bl	800c654 <iprintf>
        UNLOCK_TCPIP_CORE();
 80062ea:	4810      	ldr	r0, [pc, #64]	; (800632c <lwip_netconn_do_close+0xb8>)
 80062ec:	f006 f909 	bl	800c502 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80062f0:	6820      	ldr	r0, [r4, #0]
 80062f2:	2100      	movs	r1, #0
 80062f4:	300c      	adds	r0, #12
 80062f6:	f006 f8bb 	bl	800c470 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80062fa:	480c      	ldr	r0, [pc, #48]	; (800632c <lwip_netconn_do_close+0xb8>)
 80062fc:	f006 f8fc 	bl	800c4f8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006300:	6823      	ldr	r3, [r4, #0]
 8006302:	785b      	ldrb	r3, [r3, #1]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0c9      	beq.n	800629c <lwip_netconn_do_close+0x28>
 8006308:	4b04      	ldr	r3, [pc, #16]	; (800631c <lwip_netconn_do_close+0xa8>)
 800630a:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800630e:	4906      	ldr	r1, [pc, #24]	; (8006328 <lwip_netconn_do_close+0xb4>)
 8006310:	4804      	ldr	r0, [pc, #16]	; (8006324 <lwip_netconn_do_close+0xb0>)
}
 8006312:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8006316:	f006 b99d 	b.w	800c654 <iprintf>
 800631a:	bf00      	nop
 800631c:	0801e8d9 	.word	0x0801e8d9
 8006320:	0801ed55 	.word	0x0801ed55
 8006324:	0801e3d3 	.word	0x0801e3d3
 8006328:	0801ed70 	.word	0x0801ed70
 800632c:	24006a10 	.word	0x24006a10

08006330 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8006330:	b510      	push	{r4, lr}
  if (buf != NULL) {
 8006332:	4604      	mov	r4, r0
 8006334:	b160      	cbz	r0, 8006350 <netbuf_delete+0x20>
    if (buf->p != NULL) {
 8006336:	6800      	ldr	r0, [r0, #0]
 8006338:	b120      	cbz	r0, 8006344 <netbuf_delete+0x14>
      pbuf_free(buf->p);
 800633a:	f002 f8d1 	bl	80084e0 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800633e:	2300      	movs	r3, #0
 8006340:	e9c4 3300 	strd	r3, r3, [r4]
    }
    memp_free(MEMP_NETBUF, buf);
 8006344:	4621      	mov	r1, r4
 8006346:	2006      	movs	r0, #6
  }
}
 8006348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_NETBUF, buf);
 800634c:	f001 be5e 	b.w	800800c <memp_free>
}
 8006350:	bd10      	pop	{r4, pc}
	...

08006354 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8006354:	b508      	push	{r3, lr}
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8006356:	b940      	cbnz	r0, 800636a <netbuf_data+0x16>
 8006358:	4b0f      	ldr	r3, [pc, #60]	; (8006398 <netbuf_data+0x44>)
 800635a:	22c6      	movs	r2, #198	; 0xc6
 800635c:	490f      	ldr	r1, [pc, #60]	; (800639c <netbuf_data+0x48>)
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800635e:	4810      	ldr	r0, [pc, #64]	; (80063a0 <netbuf_data+0x4c>)
 8006360:	f006 f978 	bl	800c654 <iprintf>
 8006364:	f06f 000f 	mvn.w	r0, #15
    return ERR_BUF;
  }
  *dataptr = buf->ptr->payload;
  *len = buf->ptr->len;
  return ERR_OK;
}
 8006368:	bd08      	pop	{r3, pc}
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800636a:	b919      	cbnz	r1, 8006374 <netbuf_data+0x20>
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <netbuf_data+0x44>)
 800636e:	22c7      	movs	r2, #199	; 0xc7
 8006370:	490c      	ldr	r1, [pc, #48]	; (80063a4 <netbuf_data+0x50>)
 8006372:	e7f4      	b.n	800635e <netbuf_data+0xa>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8006374:	b91a      	cbnz	r2, 800637e <netbuf_data+0x2a>
 8006376:	4b08      	ldr	r3, [pc, #32]	; (8006398 <netbuf_data+0x44>)
 8006378:	22c8      	movs	r2, #200	; 0xc8
 800637a:	490b      	ldr	r1, [pc, #44]	; (80063a8 <netbuf_data+0x54>)
 800637c:	e7ef      	b.n	800635e <netbuf_data+0xa>
  if (buf->ptr == NULL) {
 800637e:	6843      	ldr	r3, [r0, #4]
 8006380:	b133      	cbz	r3, 8006390 <netbuf_data+0x3c>
  *dataptr = buf->ptr->payload;
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	600b      	str	r3, [r1, #0]
  *len = buf->ptr->len;
 8006386:	6843      	ldr	r3, [r0, #4]
  return ERR_OK;
 8006388:	2000      	movs	r0, #0
  *len = buf->ptr->len;
 800638a:	895b      	ldrh	r3, [r3, #10]
 800638c:	8013      	strh	r3, [r2, #0]
  return ERR_OK;
 800638e:	e7eb      	b.n	8006368 <netbuf_data+0x14>
    return ERR_BUF;
 8006390:	f06f 0001 	mvn.w	r0, #1
 8006394:	e7e8      	b.n	8006368 <netbuf_data+0x14>
 8006396:	bf00      	nop
 8006398:	0801edb5 	.word	0x0801edb5
 800639c:	0801eece 	.word	0x0801eece
 80063a0:	0801e3d3 	.word	0x0801e3d3
 80063a4:	0801eee7 	.word	0x0801eee7
 80063a8:	0801ef04 	.word	0x0801ef04

080063ac <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80063ac:	b583      	push	{r0, r1, r7, lr}
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80063ae:	482b      	ldr	r0, [pc, #172]	; (800645c <tcpip_thread+0xb0>)
 80063b0:	f006 f8a2 	bl	800c4f8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80063b4:	4a2a      	ldr	r2, [pc, #168]	; (8006460 <tcpip_thread+0xb4>)
 80063b6:	6813      	ldr	r3, [r2, #0]
 80063b8:	b10b      	cbz	r3, 80063be <tcpip_thread+0x12>
    tcpip_init_done(tcpip_init_done_arg);
 80063ba:	6850      	ldr	r0, [r2, #4]
 80063bc:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80063be:	4d27      	ldr	r5, [pc, #156]	; (800645c <tcpip_thread+0xb0>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80063c0:	4f28      	ldr	r7, [pc, #160]	; (8006464 <tcpip_thread+0xb8>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80063c2:	4e29      	ldr	r6, [pc, #164]	; (8006468 <tcpip_thread+0xbc>)
  sleeptime = sys_timeouts_sleeptime();
 80063c4:	f005 fd9a 	bl	800befc <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80063c8:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80063ca:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80063cc:	d113      	bne.n	80063f6 <tcpip_thread+0x4a>
    UNLOCK_TCPIP_CORE();
 80063ce:	4628      	mov	r0, r5
 80063d0:	f006 f897 	bl	800c502 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80063d4:	2200      	movs	r2, #0
 80063d6:	a901      	add	r1, sp, #4
 80063d8:	4638      	mov	r0, r7
 80063da:	f005 fff7 	bl	800c3cc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80063de:	4628      	mov	r0, r5
 80063e0:	f006 f88a 	bl	800c4f8 <sys_mutex_lock>
    if (msg == NULL) {
 80063e4:	9c01      	ldr	r4, [sp, #4]
 80063e6:	b9cc      	cbnz	r4, 800641c <tcpip_thread+0x70>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80063e8:	4633      	mov	r3, r6
 80063ea:	2291      	movs	r2, #145	; 0x91
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80063ec:	491f      	ldr	r1, [pc, #124]	; (800646c <tcpip_thread+0xc0>)
 80063ee:	4820      	ldr	r0, [pc, #128]	; (8006470 <tcpip_thread+0xc4>)
 80063f0:	f006 f930 	bl	800c654 <iprintf>
      break;
 80063f4:	e7e6      	b.n	80063c4 <tcpip_thread+0x18>
  } else if (sleeptime == 0) {
 80063f6:	b910      	cbnz	r0, 80063fe <tcpip_thread+0x52>
    sys_check_timeouts();
 80063f8:	f005 fd64 	bl	800bec4 <sys_check_timeouts>
    goto again;
 80063fc:	e7e2      	b.n	80063c4 <tcpip_thread+0x18>
  UNLOCK_TCPIP_CORE();
 80063fe:	4628      	mov	r0, r5
 8006400:	f006 f87f 	bl	800c502 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8006404:	4622      	mov	r2, r4
 8006406:	a901      	add	r1, sp, #4
 8006408:	4638      	mov	r0, r7
 800640a:	f005 ffdf 	bl	800c3cc <sys_arch_mbox_fetch>
 800640e:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8006410:	4628      	mov	r0, r5
 8006412:	f006 f871 	bl	800c4f8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8006416:	3401      	adds	r4, #1
 8006418:	d0ee      	beq.n	80063f8 <tcpip_thread+0x4c>
 800641a:	e7e3      	b.n	80063e4 <tcpip_thread+0x38>
  switch (msg->type) {
 800641c:	7823      	ldrb	r3, [r4, #0]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d00f      	beq.n	8006442 <tcpip_thread+0x96>
 8006422:	2b02      	cmp	r3, #2
 8006424:	d013      	beq.n	800644e <tcpip_thread+0xa2>
 8006426:	b9b3      	cbnz	r3, 8006456 <tcpip_thread+0xaa>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8006428:	6860      	ldr	r0, [r4, #4]
 800642a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800642e:	4798      	blx	r3
 8006430:	b110      	cbz	r0, 8006438 <tcpip_thread+0x8c>
        pbuf_free(msg->msg.inp.p);
 8006432:	6860      	ldr	r0, [r4, #4]
 8006434:	f002 f854 	bl	80084e0 <pbuf_free>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8006438:	4621      	mov	r1, r4
 800643a:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800643c:	f001 fde6 	bl	800800c <memp_free>
      break;
 8006440:	e7c0      	b.n	80063c4 <tcpip_thread+0x18>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8006442:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006446:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8006448:	4621      	mov	r1, r4
 800644a:	2008      	movs	r0, #8
 800644c:	e7f6      	b.n	800643c <tcpip_thread+0x90>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800644e:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8006452:	4798      	blx	r3
      break;
 8006454:	e7b6      	b.n	80063c4 <tcpip_thread+0x18>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8006456:	4633      	mov	r3, r6
 8006458:	22cf      	movs	r2, #207	; 0xcf
 800645a:	e7c7      	b.n	80063ec <tcpip_thread+0x40>
 800645c:	24006a10 	.word	0x24006a10
 8006460:	2400664c 	.word	0x2400664c
 8006464:	24006654 	.word	0x24006654
 8006468:	0801ef50 	.word	0x0801ef50
 800646c:	0801efc3 	.word	0x0801efc3
 8006470:	0801e3d3 	.word	0x0801e3d3

08006474 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8006474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006476:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8006478:	4810      	ldr	r0, [pc, #64]	; (80064bc <tcpip_inpkt+0x48>)
{
 800647a:	460e      	mov	r6, r1
 800647c:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800647e:	f005 ffd8 	bl	800c432 <sys_mbox_valid>
 8006482:	b928      	cbnz	r0, 8006490 <tcpip_inpkt+0x1c>
 8006484:	4b0e      	ldr	r3, [pc, #56]	; (80064c0 <tcpip_inpkt+0x4c>)
 8006486:	22fc      	movs	r2, #252	; 0xfc
 8006488:	490e      	ldr	r1, [pc, #56]	; (80064c4 <tcpip_inpkt+0x50>)
 800648a:	480f      	ldr	r0, [pc, #60]	; (80064c8 <tcpip_inpkt+0x54>)
 800648c:	f006 f8e2 	bl	800c654 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8006490:	2009      	movs	r0, #9
 8006492:	f001 fd8b 	bl	8007fac <memp_malloc>
  if (msg == NULL) {
 8006496:	4604      	mov	r4, r0
 8006498:	b168      	cbz	r0, 80064b6 <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800649a:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
  msg->msg.inp.netif = inp;
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800649c:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 800649e:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 80064a0:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 80064a2:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80064a6:	4805      	ldr	r0, [pc, #20]	; (80064bc <tcpip_inpkt+0x48>)
 80064a8:	f005 ff86 	bl	800c3b8 <sys_mbox_trypost>
 80064ac:	b128      	cbz	r0, 80064ba <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80064ae:	4621      	mov	r1, r4
 80064b0:	2009      	movs	r0, #9
 80064b2:	f001 fdab 	bl	800800c <memp_free>
    return ERR_MEM;
 80064b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80064ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064bc:	24006654 	.word	0x24006654
 80064c0:	0801ef50 	.word	0x0801ef50
 80064c4:	0801efe1 	.word	0x0801efe1
 80064c8:	0801e3d3 	.word	0x0801e3d3

080064cc <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80064cc:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 80064d0:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 80064d4:	bf14      	ite	ne
 80064d6:	4a02      	ldrne	r2, [pc, #8]	; (80064e0 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80064d8:	4a02      	ldreq	r2, [pc, #8]	; (80064e4 <tcpip_input+0x18>)
 80064da:	f7ff bfcb 	b.w	8006474 <tcpip_inpkt>
 80064de:	bf00      	nop
 80064e0:	0800c275 	.word	0x0800c275
 80064e4:	08006f19 	.word	0x08006f19

080064e8 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80064e8:	b570      	push	{r4, r5, r6, lr}
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 80064ea:	4e06      	ldr	r6, [pc, #24]	; (8006504 <tcpip_send_msg_wait_sem+0x1c>)
{
 80064ec:	460d      	mov	r5, r1
 80064ee:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80064f0:	4630      	mov	r0, r6
 80064f2:	f006 f801 	bl	800c4f8 <sys_mutex_lock>
  fn(apimsg);
 80064f6:	4628      	mov	r0, r5
 80064f8:	47a0      	blx	r4
  UNLOCK_TCPIP_CORE();
 80064fa:	4630      	mov	r0, r6
 80064fc:	f006 f801 	bl	800c502 <sys_mutex_unlock>
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8006500:	2000      	movs	r0, #0
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	24006a10 	.word	0x24006a10

08006508 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8006508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800650a:	4605      	mov	r5, r0
 800650c:	460c      	mov	r4, r1
  lwip_init();
 800650e:	f001 fa6b 	bl	80079e8 <lwip_init>

  tcpip_init_done = initfunc;
 8006512:	4812      	ldr	r0, [pc, #72]	; (800655c <tcpip_init+0x54>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8006514:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8006516:	e9c0 5400 	strd	r5, r4, [r0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800651a:	3008      	adds	r0, #8
 800651c:	f005 ff32 	bl	800c384 <sys_mbox_new>
 8006520:	b130      	cbz	r0, 8006530 <tcpip_init+0x28>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8006522:	4b0f      	ldr	r3, [pc, #60]	; (8006560 <tcpip_init+0x58>)
 8006524:	f240 2261 	movw	r2, #609	; 0x261
 8006528:	490e      	ldr	r1, [pc, #56]	; (8006564 <tcpip_init+0x5c>)
 800652a:	480f      	ldr	r0, [pc, #60]	; (8006568 <tcpip_init+0x60>)
 800652c:	f006 f892 	bl	800c654 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8006530:	480e      	ldr	r0, [pc, #56]	; (800656c <tcpip_init+0x64>)
 8006532:	f005 ffd3 	bl	800c4dc <sys_mutex_new>
 8006536:	b130      	cbz	r0, 8006546 <tcpip_init+0x3e>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8006538:	4b09      	ldr	r3, [pc, #36]	; (8006560 <tcpip_init+0x58>)
 800653a:	f240 2265 	movw	r2, #613	; 0x265
 800653e:	490c      	ldr	r1, [pc, #48]	; (8006570 <tcpip_init+0x68>)
 8006540:	4809      	ldr	r0, [pc, #36]	; (8006568 <tcpip_init+0x60>)
 8006542:	f006 f887 	bl	800c654 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8006546:	2302      	movs	r3, #2
 8006548:	2200      	movs	r2, #0
 800654a:	490a      	ldr	r1, [pc, #40]	; (8006574 <tcpip_init+0x6c>)
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006552:	4809      	ldr	r0, [pc, #36]	; (8006578 <tcpip_init+0x70>)
 8006554:	f005 ffd8 	bl	800c508 <sys_thread_new>
}
 8006558:	b003      	add	sp, #12
 800655a:	bd30      	pop	{r4, r5, pc}
 800655c:	2400664c 	.word	0x2400664c
 8006560:	0801ef50 	.word	0x0801ef50
 8006564:	0801efee 	.word	0x0801efee
 8006568:	0801e3d3 	.word	0x0801e3d3
 800656c:	24006a10 	.word	0x24006a10
 8006570:	0801f011 	.word	0x0801f011
 8006574:	080063ad 	.word	0x080063ad
 8006578:	0801f032 	.word	0x0801f032

0800657c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800657c:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800657e:	2618      	movs	r6, #24
 8006580:	4d07      	ldr	r5, [pc, #28]	; (80065a0 <etharp_free_entry+0x24>)
{
 8006582:	4604      	mov	r4, r0
  if (arp_table[i].q != NULL) {
 8006584:	4346      	muls	r6, r0
 8006586:	59a8      	ldr	r0, [r5, r6]
 8006588:	b118      	cbz	r0, 8006592 <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800658a:	f001 ffa9 	bl	80084e0 <pbuf_free>
    arp_table[i].q = NULL;
 800658e:	2300      	movs	r3, #0
 8006590:	51ab      	str	r3, [r5, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8006592:	2018      	movs	r0, #24
 8006594:	2300      	movs	r3, #0
 8006596:	fb00 5404 	mla	r4, r0, r4, r5
 800659a:	7523      	strb	r3, [r4, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800659c:	bd70      	pop	{r4, r5, r6, pc}
 800659e:	bf00      	nop
 80065a0:	24006658 	.word	0x24006658

080065a4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80065a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80065aa:	f04f 0e0a 	mov.w	lr, #10
{
 80065ae:	4606      	mov	r6, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80065b0:	4699      	mov	r9, r3
 80065b2:	469b      	mov	fp, r3
 80065b4:	469c      	mov	ip, r3
  s16_t empty = ARP_TABLE_SIZE;
 80065b6:	4674      	mov	r4, lr
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80065b8:	4675      	mov	r5, lr
 80065ba:	46f0      	mov	r8, lr
{
 80065bc:	e9cd 2100 	strd	r2, r1, [sp]
 80065c0:	4a3a      	ldr	r2, [pc, #232]	; (80066ac <etharp_find_entry+0x108>)
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80065c2:	2c0a      	cmp	r4, #10
 80065c4:	b218      	sxth	r0, r3
    u8_t state = arp_table[i].state;
 80065c6:	f892 a014 	ldrb.w	sl, [r2, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80065ca:	d11a      	bne.n	8006602 <etharp_find_entry+0x5e>
 80065cc:	f1ba 0f00 	cmp.w	sl, #0
 80065d0:	d05d      	beq.n	800668e <etharp_find_entry+0xea>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80065d2:	b156      	cbz	r6, 80065ea <etharp_find_entry+0x46>
 80065d4:	6837      	ldr	r7, [r6, #0]
 80065d6:	6851      	ldr	r1, [r2, #4]
 80065d8:	428f      	cmp	r7, r1
 80065da:	d106      	bne.n	80065ea <etharp_find_entry+0x46>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80065dc:	9900      	ldr	r1, [sp, #0]
 80065de:	2900      	cmp	r1, #0
 80065e0:	d048      	beq.n	8006674 <etharp_find_entry+0xd0>
 80065e2:	6891      	ldr	r1, [r2, #8]
 80065e4:	9f00      	ldr	r7, [sp, #0]
 80065e6:	42b9      	cmp	r1, r7
 80065e8:	d044      	beq.n	8006674 <etharp_find_entry+0xd0>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80065ea:	f1ba 0f01 	cmp.w	sl, #1
 80065ee:	8a51      	ldrh	r1, [r2, #18]
 80065f0:	d148      	bne.n	8006684 <etharp_find_entry+0xe0>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80065f2:	6817      	ldr	r7, [r2, #0]
 80065f4:	2f00      	cmp	r7, #0
 80065f6:	d040      	beq.n	800667a <etharp_find_entry+0xd6>
          if (arp_table[i].ctime >= age_queue) {
 80065f8:	458c      	cmp	ip, r1
 80065fa:	d805      	bhi.n	8006608 <etharp_find_entry+0x64>
 80065fc:	468c      	mov	ip, r1
 80065fe:	4686      	mov	lr, r0
 8006600:	e002      	b.n	8006608 <etharp_find_entry+0x64>
    } else if (state != ETHARP_STATE_EMPTY) {
 8006602:	f1ba 0f00 	cmp.w	sl, #0
 8006606:	d1e4      	bne.n	80065d2 <etharp_find_entry+0x2e>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006608:	3301      	adds	r3, #1
 800660a:	3218      	adds	r2, #24
 800660c:	2b0a      	cmp	r3, #10
 800660e:	d1d8      	bne.n	80065c2 <etharp_find_entry+0x1e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8006610:	9b01      	ldr	r3, [sp, #4]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d143      	bne.n	800669e <etharp_find_entry+0xfa>
 8006616:	2c0a      	cmp	r4, #10
 8006618:	d111      	bne.n	800663e <etharp_find_entry+0x9a>
  if (empty < ARP_TABLE_SIZE) {
    i = empty;
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800661a:	2d0a      	cmp	r5, #10
 800661c:	d039      	beq.n	8006692 <etharp_find_entry+0xee>
      /* recycle oldest stable*/
      i = old_stable;
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800661e:	2318      	movs	r3, #24
 8006620:	4a22      	ldr	r2, [pc, #136]	; (80066ac <etharp_find_entry+0x108>)
 8006622:	436b      	muls	r3, r5
 8006624:	58d3      	ldr	r3, [r2, r3]
 8006626:	b133      	cbz	r3, 8006636 <etharp_find_entry+0x92>
 8006628:	4b21      	ldr	r3, [pc, #132]	; (80066b0 <etharp_find_entry+0x10c>)
 800662a:	f240 126d 	movw	r2, #365	; 0x16d
 800662e:	4921      	ldr	r1, [pc, #132]	; (80066b4 <etharp_find_entry+0x110>)
 8006630:	4821      	ldr	r0, [pc, #132]	; (80066b8 <etharp_find_entry+0x114>)
 8006632:	f006 f80f 	bl	800c654 <iprintf>
      return (s16_t)ERR_MEM;
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
 8006636:	462c      	mov	r4, r5
 8006638:	4628      	mov	r0, r5
 800663a:	f7ff ff9f 	bl	800657c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800663e:	4d1b      	ldr	r5, [pc, #108]	; (80066ac <etharp_find_entry+0x108>)
 8006640:	2318      	movs	r3, #24
 8006642:	fb03 5304 	mla	r3, r3, r4, r5
 8006646:	7d1b      	ldrb	r3, [r3, #20]
 8006648:	b133      	cbz	r3, 8006658 <etharp_find_entry+0xb4>
 800664a:	4b19      	ldr	r3, [pc, #100]	; (80066b0 <etharp_find_entry+0x10c>)
 800664c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8006650:	491a      	ldr	r1, [pc, #104]	; (80066bc <etharp_find_entry+0x118>)
 8006652:	4819      	ldr	r0, [pc, #100]	; (80066b8 <etharp_find_entry+0x114>)
 8006654:	f005 fffe 	bl	800c654 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8006658:	b126      	cbz	r6, 8006664 <etharp_find_entry+0xc0>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800665a:	2318      	movs	r3, #24
 800665c:	6832      	ldr	r2, [r6, #0]
 800665e:	fb03 5304 	mla	r3, r3, r4, r5
 8006662:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8006664:	2318      	movs	r3, #24
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8006666:	4620      	mov	r0, r4
  arp_table[i].ctime = 0;
 8006668:	fb03 5504 	mla	r5, r3, r4, r5
 800666c:	2300      	movs	r3, #0
 800666e:	826b      	strh	r3, [r5, #18]
  arp_table[i].netif = netif;
 8006670:	9b00      	ldr	r3, [sp, #0]
 8006672:	60ab      	str	r3, [r5, #8]
}
 8006674:	b003      	add	sp, #12
 8006676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 800667a:	458b      	cmp	fp, r1
 800667c:	d8c4      	bhi.n	8006608 <etharp_find_entry+0x64>
 800667e:	468b      	mov	fp, r1
 8006680:	4680      	mov	r8, r0
 8006682:	e7c1      	b.n	8006608 <etharp_find_entry+0x64>
          if (arp_table[i].ctime >= age_stable) {
 8006684:	4589      	cmp	r9, r1
 8006686:	d8bf      	bhi.n	8006608 <etharp_find_entry+0x64>
 8006688:	4689      	mov	r9, r1
 800668a:	4605      	mov	r5, r0
 800668c:	e7bc      	b.n	8006608 <etharp_find_entry+0x64>
 800668e:	4604      	mov	r4, r0
 8006690:	e7ba      	b.n	8006608 <etharp_find_entry+0x64>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8006692:	f1b8 0f0a 	cmp.w	r8, #10
 8006696:	d105      	bne.n	80066a4 <etharp_find_entry+0x100>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8006698:	f1be 0f0a 	cmp.w	lr, #10
 800669c:	d104      	bne.n	80066a8 <etharp_find_entry+0x104>
    return (s16_t)ERR_MEM;
 800669e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066a2:	e7e7      	b.n	8006674 <etharp_find_entry+0xd0>
 80066a4:	4645      	mov	r5, r8
 80066a6:	e7c6      	b.n	8006636 <etharp_find_entry+0x92>
 80066a8:	4675      	mov	r5, lr
 80066aa:	e7c4      	b.n	8006636 <etharp_find_entry+0x92>
 80066ac:	24006658 	.word	0x24006658
 80066b0:	0801f039 	.word	0x0801f039
 80066b4:	0801f0b3 	.word	0x0801f0b3
 80066b8:	0801e3d3 	.word	0x0801e3d3
 80066bc:	0801f0ca 	.word	0x0801f0ca

080066c0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80066c0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80066c4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80066c8:	4688      	mov	r8, r1
 80066ca:	4691      	mov	r9, r2
 80066cc:	461e      	mov	r6, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80066ce:	4607      	mov	r7, r0
 80066d0:	b930      	cbnz	r0, 80066e0 <etharp_raw+0x20>
 80066d2:	4b2d      	ldr	r3, [pc, #180]	; (8006788 <etharp_raw+0xc8>)
 80066d4:	f240 4257 	movw	r2, #1111	; 0x457
 80066d8:	492c      	ldr	r1, [pc, #176]	; (800678c <etharp_raw+0xcc>)
 80066da:	482d      	ldr	r0, [pc, #180]	; (8006790 <etharp_raw+0xd0>)
 80066dc:	f005 ffba 	bl	800c654 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80066e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80066e4:	211c      	movs	r1, #28
 80066e6:	200e      	movs	r0, #14
 80066e8:	f001 ff62 	bl	80085b0 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80066ec:	4605      	mov	r5, r0
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d047      	beq.n	8006782 <etharp_raw+0xc2>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80066f2:	8943      	ldrh	r3, [r0, #10]
 80066f4:	2b1b      	cmp	r3, #27
 80066f6:	d806      	bhi.n	8006706 <etharp_raw+0x46>
 80066f8:	4b23      	ldr	r3, [pc, #140]	; (8006788 <etharp_raw+0xc8>)
 80066fa:	f240 4262 	movw	r2, #1122	; 0x462
 80066fe:	4925      	ldr	r1, [pc, #148]	; (8006794 <etharp_raw+0xd4>)
 8006700:	4823      	ldr	r0, [pc, #140]	; (8006790 <etharp_raw+0xd0>)
 8006702:	f005 ffa7 	bl	800c654 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8006706:	686c      	ldr	r4, [r5, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8006708:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 800670c:	f001 f934 	bl	8007978 <lwip_htons>
 8006710:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8006712:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006716:	2b06      	cmp	r3, #6
 8006718:	d006      	beq.n	8006728 <etharp_raw+0x68>
 800671a:	4b1b      	ldr	r3, [pc, #108]	; (8006788 <etharp_raw+0xc8>)
 800671c:	f240 4269 	movw	r2, #1129	; 0x469
 8006720:	491d      	ldr	r1, [pc, #116]	; (8006798 <etharp_raw+0xd8>)
 8006722:	481b      	ldr	r0, [pc, #108]	; (8006790 <etharp_raw+0xd0>)
 8006724:	f005 ff96 	bl	800c654 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8006728:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800672a:	4642      	mov	r2, r8
 800672c:	4629      	mov	r1, r5
 800672e:	4638      	mov	r0, r7
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8006730:	60a3      	str	r3, [r4, #8]
 8006732:	88b3      	ldrh	r3, [r6, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006734:	2600      	movs	r6, #0
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8006736:	81a3      	strh	r3, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8006738:	f8da 3000 	ldr.w	r3, [sl]
 800673c:	f8c4 3012 	str.w	r3, [r4, #18]
 8006740:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8006744:	82e3      	strh	r3, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8006746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800674e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006750:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006752:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8006754:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8006756:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8006758:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800675a:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800675c:	2308      	movs	r3, #8
 800675e:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8006760:	2306      	movs	r3, #6
 8006762:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8006764:	2304      	movs	r3, #4
 8006766:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8006768:	f640 0306 	movw	r3, #2054	; 0x806
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	464b      	mov	r3, r9
 8006770:	f005 fdd0 	bl	800c314 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8006774:	4628      	mov	r0, r5
 8006776:	f001 feb3 	bl	80084e0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 800677a:	4630      	mov	r0, r6
}
 800677c:	b002      	add	sp, #8
 800677e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 8006782:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006786:	e7f9      	b.n	800677c <etharp_raw+0xbc>
 8006788:	0801f039 	.word	0x0801f039
 800678c:	0801e3c5 	.word	0x0801e3c5
 8006790:	0801e3d3 	.word	0x0801e3d3
 8006794:	0801f0f3 	.word	0x0801f0f3
 8006798:	0801f124 	.word	0x0801f124

0800679c <etharp_cleanup_netif>:
{
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	4606      	mov	r6, r0
 80067a0:	4d07      	ldr	r5, [pc, #28]	; (80067c0 <etharp_cleanup_netif+0x24>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80067a2:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80067a4:	7d2b      	ldrb	r3, [r5, #20]
 80067a6:	b12b      	cbz	r3, 80067b4 <etharp_cleanup_netif+0x18>
 80067a8:	68ab      	ldr	r3, [r5, #8]
 80067aa:	42b3      	cmp	r3, r6
 80067ac:	d102      	bne.n	80067b4 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 80067ae:	4620      	mov	r0, r4
 80067b0:	f7ff fee4 	bl	800657c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80067b4:	3401      	adds	r4, #1
 80067b6:	3518      	adds	r5, #24
 80067b8:	2c0a      	cmp	r4, #10
 80067ba:	d1f3      	bne.n	80067a4 <etharp_cleanup_netif+0x8>
}
 80067bc:	bd70      	pop	{r4, r5, r6, pc}
 80067be:	bf00      	nop
 80067c0:	24006658 	.word	0x24006658

080067c4 <etharp_input>:
{
 80067c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c8:	4607      	mov	r7, r0
 80067ca:	b088      	sub	sp, #32
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80067cc:	460c      	mov	r4, r1
 80067ce:	b949      	cbnz	r1, 80067e4 <etharp_input+0x20>
 80067d0:	4b48      	ldr	r3, [pc, #288]	; (80068f4 <etharp_input+0x130>)
 80067d2:	f240 228a 	movw	r2, #650	; 0x28a
 80067d6:	4948      	ldr	r1, [pc, #288]	; (80068f8 <etharp_input+0x134>)
 80067d8:	4848      	ldr	r0, [pc, #288]	; (80068fc <etharp_input+0x138>)
 80067da:	f005 ff3b 	bl	800c654 <iprintf>
}
 80067de:	b008      	add	sp, #32
 80067e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 80067e4:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80067e6:	882b      	ldrh	r3, [r5, #0]
 80067e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ec:	d108      	bne.n	8006800 <etharp_input+0x3c>
 80067ee:	792b      	ldrb	r3, [r5, #4]
 80067f0:	2b06      	cmp	r3, #6
 80067f2:	d105      	bne.n	8006800 <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80067f4:	796b      	ldrb	r3, [r5, #5]
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	d102      	bne.n	8006800 <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80067fa:	886b      	ldrh	r3, [r5, #2]
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d003      	beq.n	8006808 <etharp_input+0x44>
  pbuf_free(p);
 8006800:	4638      	mov	r0, r7
 8006802:	f001 fe6d 	bl	80084e0 <pbuf_free>
 8006806:	e7ea      	b.n	80067de <etharp_input+0x1a>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8006808:	f8d5 300e 	ldr.w	r3, [r5, #14]
 800680c:	f105 0808 	add.w	r8, r5, #8
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006810:	684e      	ldr	r6, [r1, #4]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8006812:	9307      	str	r3, [sp, #28]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8006814:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006816:	2e00      	cmp	r6, #0
 8006818:	d068      	beq.n	80068ec <etharp_input+0x128>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800681a:	1af3      	subs	r3, r6, r3
 800681c:	425e      	negs	r6, r3
 800681e:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8006820:	f1c6 0a02 	rsb	sl, r6, #2
 8006824:	fa5f fa8a 	uxtb.w	sl, sl
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8006828:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800682c:	2b06      	cmp	r3, #6
 800682e:	d006      	beq.n	800683e <etharp_input+0x7a>
 8006830:	4b30      	ldr	r3, [pc, #192]	; (80068f4 <etharp_input+0x130>)
 8006832:	f240 12a9 	movw	r2, #425	; 0x1a9
 8006836:	4932      	ldr	r1, [pc, #200]	; (8006900 <etharp_input+0x13c>)
 8006838:	4830      	ldr	r0, [pc, #192]	; (80068fc <etharp_input+0x138>)
 800683a:	f005 ff0b 	bl	800c654 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800683e:	9807      	ldr	r0, [sp, #28]
 8006840:	2800      	cmp	r0, #0
 8006842:	d03e      	beq.n	80068c2 <etharp_input+0xfe>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006844:	4621      	mov	r1, r4
 8006846:	f000 fca6 	bl	8007196 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 800684a:	4681      	mov	r9, r0
 800684c:	2800      	cmp	r0, #0
 800684e:	d138      	bne.n	80068c2 <etharp_input+0xfe>
      ip4_addr_ismulticast(ipaddr)) {
 8006850:	9b07      	ldr	r3, [sp, #28]
 8006852:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8006856:	2be0      	cmp	r3, #224	; 0xe0
 8006858:	d033      	beq.n	80068c2 <etharp_input+0xfe>
  i = etharp_find_entry(ipaddr, flags, netif);
 800685a:	4622      	mov	r2, r4
 800685c:	4651      	mov	r1, sl
 800685e:	a807      	add	r0, sp, #28
 8006860:	f7ff fea0 	bl	80065a4 <etharp_find_entry>
  if (i < 0) {
 8006864:	1e03      	subs	r3, r0, #0
 8006866:	db2c      	blt.n	80068c2 <etharp_input+0xfe>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8006868:	2018      	movs	r0, #24
 800686a:	4a26      	ldr	r2, [pc, #152]	; (8006904 <etharp_input+0x140>)
 800686c:	f04f 0e02 	mov.w	lr, #2
 8006870:	fb00 fc03 	mul.w	ip, r0, r3
 8006874:	eb02 010c 	add.w	r1, r2, ip
 8006878:	f881 e014 	strb.w	lr, [r1, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800687c:	f04f 0e0c 	mov.w	lr, #12
  arp_table[i].netif = netif;
 8006880:	608c      	str	r4, [r1, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8006882:	fb13 e300 	smlabb	r3, r3, r0, lr
 8006886:	f8d8 0000 	ldr.w	r0, [r8]
 800688a:	eb02 0e03 	add.w	lr, r2, r3
 800688e:	50d0      	str	r0, [r2, r3]
 8006890:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8006894:	f8ae 3004 	strh.w	r3, [lr, #4]
  arp_table[i].ctime = 0;
 8006898:	f8a1 9012 	strh.w	r9, [r1, #18]
  if (arp_table[i].q != NULL) {
 800689c:	f852 100c 	ldr.w	r1, [r2, ip]
 80068a0:	b179      	cbz	r1, 80068c2 <etharp_input+0xfe>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80068a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    arp_table[i].q = NULL;
 80068a6:	f842 900c 	str.w	r9, [r2, ip]
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80068aa:	4620      	mov	r0, r4
 80068ac:	f104 0226 	add.w	r2, r4, #38	; 0x26
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	4643      	mov	r3, r8
 80068b4:	9105      	str	r1, [sp, #20]
 80068b6:	f005 fd2d 	bl	800c314 <ethernet_output>
    pbuf_free(p);
 80068ba:	9905      	ldr	r1, [sp, #20]
 80068bc:	4608      	mov	r0, r1
 80068be:	f001 fe0f 	bl	80084e0 <pbuf_free>
  switch (hdr->opcode) {
 80068c2:	88eb      	ldrh	r3, [r5, #6]
 80068c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068c8:	d19a      	bne.n	8006800 <etharp_input+0x3c>
      if (for_us) {
 80068ca:	2e00      	cmp	r6, #0
 80068cc:	d098      	beq.n	8006800 <etharp_input+0x3c>
        etharp_raw(netif,
 80068ce:	2202      	movs	r2, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80068d0:	f104 0326 	add.w	r3, r4, #38	; 0x26
        etharp_raw(netif,
 80068d4:	4620      	mov	r0, r4
 80068d6:	9203      	str	r2, [sp, #12]
 80068d8:	aa07      	add	r2, sp, #28
 80068da:	4619      	mov	r1, r3
 80068dc:	e9cd 8201 	strd	r8, r2, [sp, #4]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80068e0:	1d22      	adds	r2, r4, #4
        etharp_raw(netif,
 80068e2:	9200      	str	r2, [sp, #0]
 80068e4:	4642      	mov	r2, r8
 80068e6:	f7ff feeb 	bl	80066c0 <etharp_raw>
 80068ea:	e789      	b.n	8006800 <etharp_input+0x3c>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80068ec:	f04f 0a02 	mov.w	sl, #2
 80068f0:	e79a      	b.n	8006828 <etharp_input+0x64>
 80068f2:	bf00      	nop
 80068f4:	0801f039 	.word	0x0801f039
 80068f8:	0801e3c5 	.word	0x0801e3c5
 80068fc:	0801e3d3 	.word	0x0801e3d3
 8006900:	0801f1a6 	.word	0x0801f1a6
 8006904:	24006658 	.word	0x24006658

08006908 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8006908:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800690a:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800690c:	2401      	movs	r4, #1
 800690e:	f100 0326 	add.w	r3, r0, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006912:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006914:	e9cd 1402 	strd	r1, r4, [sp, #8]
 8006918:	4904      	ldr	r1, [pc, #16]	; (800692c <etharp_request+0x24>)
 800691a:	9200      	str	r2, [sp, #0]
 800691c:	9101      	str	r1, [sp, #4]
 800691e:	4619      	mov	r1, r3
 8006920:	4a03      	ldr	r2, [pc, #12]	; (8006930 <etharp_request+0x28>)
 8006922:	f7ff fecd 	bl	80066c0 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8006926:	b004      	add	sp, #16
 8006928:	bd10      	pop	{r4, pc}
 800692a:	bf00      	nop
 800692c:	0800e32a 	.word	0x0800e32a
 8006930:	0800e324 	.word	0x0800e324

08006934 <etharp_tmr>:
{
 8006934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006936:	4c13      	ldr	r4, [pc, #76]	; (8006984 <etharp_tmr+0x50>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8006938:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800693a:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800693c:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 800693e:	7d22      	ldrb	r2, [r4, #20]
    if (state != ETHARP_STATE_EMPTY
 8006940:	b16a      	cbz	r2, 800695e <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8006942:	8a63      	ldrh	r3, [r4, #18]
 8006944:	3301      	adds	r3, #1
 8006946:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8006948:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 800694c:	8263      	strh	r3, [r4, #18]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800694e:	d203      	bcs.n	8006958 <etharp_tmr+0x24>
 8006950:	2a01      	cmp	r2, #1
 8006952:	d109      	bne.n	8006968 <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8006954:	2b04      	cmp	r3, #4
 8006956:	d90f      	bls.n	8006978 <etharp_tmr+0x44>
        etharp_free_entry(i);
 8006958:	4628      	mov	r0, r5
 800695a:	f7ff fe0f 	bl	800657c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800695e:	3501      	adds	r5, #1
 8006960:	3418      	adds	r4, #24
 8006962:	2d0a      	cmp	r5, #10
 8006964:	d1eb      	bne.n	800693e <etharp_tmr+0xa>
}
 8006966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8006968:	2a03      	cmp	r2, #3
 800696a:	d101      	bne.n	8006970 <etharp_tmr+0x3c>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800696c:	7527      	strb	r7, [r4, #20]
 800696e:	e7f6      	b.n	800695e <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8006970:	2a04      	cmp	r2, #4
 8006972:	d1f4      	bne.n	800695e <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8006974:	7526      	strb	r6, [r4, #20]
 8006976:	e7f2      	b.n	800695e <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8006978:	1d21      	adds	r1, r4, #4
 800697a:	68a0      	ldr	r0, [r4, #8]
 800697c:	f7ff ffc4 	bl	8006908 <etharp_request>
 8006980:	e7ed      	b.n	800695e <etharp_tmr+0x2a>
 8006982:	bf00      	nop
 8006984:	24006658 	.word	0x24006658

08006988 <etharp_output_to_arp_index>:
{
 8006988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800698c:	4d24      	ldr	r5, [pc, #144]	; (8006a20 <etharp_output_to_arp_index+0x98>)
 800698e:	2318      	movs	r3, #24
{
 8006990:	4607      	mov	r7, r0
 8006992:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8006994:	fb03 5302 	mla	r3, r3, r2, r5
{
 8006998:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800699a:	7d1b      	ldrb	r3, [r3, #20]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d806      	bhi.n	80069ae <etharp_output_to_arp_index+0x26>
 80069a0:	4b20      	ldr	r3, [pc, #128]	; (8006a24 <etharp_output_to_arp_index+0x9c>)
 80069a2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80069a6:	4920      	ldr	r1, [pc, #128]	; (8006a28 <etharp_output_to_arp_index+0xa0>)
 80069a8:	4820      	ldr	r0, [pc, #128]	; (8006a2c <etharp_output_to_arp_index+0xa4>)
 80069aa:	f005 fe53 	bl	800c654 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80069ae:	2218      	movs	r2, #24
 80069b0:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80069b4:	f107 0926 	add.w	r9, r7, #38	; 0x26
 80069b8:	fb02 5404 	mla	r4, r2, r4, r5
 80069bc:	00f6      	lsls	r6, r6, #3
 80069be:	7d23      	ldrb	r3, [r4, #20]
 80069c0:	f106 0a0c 	add.w	sl, r6, #12
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	44aa      	add	sl, r5
 80069c8:	d10b      	bne.n	80069e2 <etharp_output_to_arp_index+0x5a>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80069ca:	8a63      	ldrh	r3, [r4, #18]
 80069cc:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80069d0:	d913      	bls.n	80069fa <etharp_output_to_arp_index+0x72>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80069d2:	3604      	adds	r6, #4
 80069d4:	4638      	mov	r0, r7
 80069d6:	19a9      	adds	r1, r5, r6
 80069d8:	f7ff ff96 	bl	8006908 <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80069dc:	b908      	cbnz	r0, 80069e2 <etharp_output_to_arp_index+0x5a>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80069de:	2303      	movs	r3, #3
 80069e0:	7523      	strb	r3, [r4, #20]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80069e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069e6:	464a      	mov	r2, r9
 80069e8:	4641      	mov	r1, r8
 80069ea:	4638      	mov	r0, r7
 80069ec:	9300      	str	r3, [sp, #0]
 80069ee:	4653      	mov	r3, sl
 80069f0:	f005 fc90 	bl	800c314 <ethernet_output>
}
 80069f4:	b004      	add	sp, #16
 80069f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80069fa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80069fe:	d3f0      	bcc.n	80069e2 <etharp_output_to_arp_index+0x5a>
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006a00:	2301      	movs	r3, #1
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006a02:	3604      	adds	r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006a04:	4652      	mov	r2, sl
 8006a06:	4649      	mov	r1, r9
 8006a08:	9303      	str	r3, [sp, #12]
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8006a0a:	442e      	add	r6, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006a0c:	4b08      	ldr	r3, [pc, #32]	; (8006a30 <etharp_output_to_arp_index+0xa8>)
 8006a0e:	4638      	mov	r0, r7
 8006a10:	9602      	str	r6, [sp, #8]
 8006a12:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8006a14:	1d3b      	adds	r3, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	464b      	mov	r3, r9
 8006a1a:	f7ff fe51 	bl	80066c0 <etharp_raw>
 8006a1e:	e7dd      	b.n	80069dc <etharp_output_to_arp_index+0x54>
 8006a20:	24006658 	.word	0x24006658
 8006a24:	0801f039 	.word	0x0801f039
 8006a28:	0801f1ca 	.word	0x0801f1ca
 8006a2c:	0801e3d3 	.word	0x0801e3d3
 8006a30:	0800e32a 	.word	0x0800e32a

08006a34 <etharp_query>:
{
 8006a34:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a38:	4688      	mov	r8, r1
 8006a3a:	4606      	mov	r6, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006a3c:	4601      	mov	r1, r0
{
 8006a3e:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006a40:	f8d8 0000 	ldr.w	r0, [r8]
 8006a44:	f000 fba7 	bl	8007196 <ip4_addr_isbroadcast_u32>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	d16b      	bne.n	8006b24 <etharp_query+0xf0>
      ip4_addr_ismulticast(ipaddr) ||
 8006a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8006a54:	2ae0      	cmp	r2, #224	; 0xe0
 8006a56:	d065      	beq.n	8006b24 <etharp_query+0xf0>
      ip4_addr_isany(ipaddr)) {
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d063      	beq.n	8006b24 <etharp_query+0xf0>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8006a5c:	4632      	mov	r2, r6
 8006a5e:	2101      	movs	r1, #1
 8006a60:	4640      	mov	r0, r8
 8006a62:	f7ff fd9f 	bl	80065a4 <etharp_find_entry>
  if (i_err < 0) {
 8006a66:	1e04      	subs	r4, r0, #0
 8006a68:	da03      	bge.n	8006a72 <etharp_query+0x3e>
    return (err_t)i_err;
 8006a6a:	b260      	sxtb	r0, r4
}
 8006a6c:	b002      	add	sp, #8
 8006a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8006a72:	2c7e      	cmp	r4, #126	; 0x7e
 8006a74:	dd06      	ble.n	8006a84 <etharp_query+0x50>
 8006a76:	4b35      	ldr	r3, [pc, #212]	; (8006b4c <etharp_query+0x118>)
 8006a78:	f240 32c1 	movw	r2, #961	; 0x3c1
 8006a7c:	4934      	ldr	r1, [pc, #208]	; (8006b50 <etharp_query+0x11c>)
 8006a7e:	4835      	ldr	r0, [pc, #212]	; (8006b54 <etharp_query+0x120>)
 8006a80:	f005 fde8 	bl	800c654 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8006a84:	b2e4      	uxtb	r4, r4
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8006a86:	4f34      	ldr	r7, [pc, #208]	; (8006b58 <etharp_query+0x124>)
 8006a88:	2218      	movs	r2, #24
 8006a8a:	fb02 7204 	mla	r2, r2, r4, r7
 8006a8e:	7d13      	ldrb	r3, [r2, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d156      	bne.n	8006b42 <etharp_query+0x10e>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8006a94:	2301      	movs	r3, #1
    arp_table[i].netif = netif;
 8006a96:	6096      	str	r6, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8006a98:	7513      	strb	r3, [r2, #20]
    result = etharp_request(netif, ipaddr);
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	4630      	mov	r0, r6
 8006a9e:	f7ff ff33 	bl	8006908 <etharp_request>
    if (q == NULL) {
 8006aa2:	2d00      	cmp	r5, #0
 8006aa4:	d0e2      	beq.n	8006a6c <etharp_query+0x38>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8006aa6:	2318      	movs	r3, #24
 8006aa8:	fb03 7204 	mla	r2, r3, r4, r7
 8006aac:	7d12      	ldrb	r2, [r2, #20]
 8006aae:	2a01      	cmp	r2, #1
 8006ab0:	d90e      	bls.n	8006ad0 <etharp_query+0x9c>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8006ab2:	fb03 7304 	mla	r3, r3, r4, r7
 8006ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aba:	4629      	mov	r1, r5
 8006abc:	4630      	mov	r0, r6
 8006abe:	9200      	str	r2, [sp, #0]
 8006ac0:	330c      	adds	r3, #12
 8006ac2:	f106 0226 	add.w	r2, r6, #38	; 0x26
    ETHARP_SET_ADDRHINT(netif, i);
 8006ac6:	f887 40f0 	strb.w	r4, [r7, #240]	; 0xf0
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8006aca:	f005 fc23 	bl	800c314 <ethernet_output>
 8006ace:	e7cd      	b.n	8006a6c <etharp_query+0x38>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8006ad0:	d1cc      	bne.n	8006a6c <etharp_query+0x38>
 8006ad2:	462e      	mov	r6, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8006ad4:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8006b4c <etharp_query+0x118>
 8006ad8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8006b5c <etharp_query+0x128>
 8006adc:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006b54 <etharp_query+0x120>
 8006ae0:	8972      	ldrh	r2, [r6, #10]
 8006ae2:	8933      	ldrh	r3, [r6, #8]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d108      	bne.n	8006afa <etharp_query+0xc6>
 8006ae8:	6833      	ldr	r3, [r6, #0]
 8006aea:	b133      	cbz	r3, 8006afa <etharp_query+0xc6>
 8006aec:	4643      	mov	r3, r8
 8006aee:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8006af2:	4649      	mov	r1, r9
 8006af4:	4650      	mov	r0, sl
 8006af6:	f005 fdad 	bl	800c654 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8006afa:	7b33      	ldrb	r3, [r6, #12]
 8006afc:	065b      	lsls	r3, r3, #25
 8006afe:	d414      	bmi.n	8006b2a <etharp_query+0xf6>
      p = p->next;
 8006b00:	6836      	ldr	r6, [r6, #0]
    while (p) {
 8006b02:	2e00      	cmp	r6, #0
 8006b04:	d1ec      	bne.n	8006ae0 <etharp_query+0xac>
      pbuf_ref(p);
 8006b06:	4628      	mov	r0, r5
 8006b08:	f001 fe2c 	bl	8008764 <pbuf_ref>
      if (arp_table[i].q != NULL) {
 8006b0c:	2318      	movs	r3, #24
 8006b0e:	fb03 f204 	mul.w	r2, r3, r4
 8006b12:	461e      	mov	r6, r3
 8006b14:	58b8      	ldr	r0, [r7, r2]
 8006b16:	b108      	cbz	r0, 8006b1c <etharp_query+0xe8>
        pbuf_free(arp_table[i].q);
 8006b18:	f001 fce2 	bl	80084e0 <pbuf_free>
      arp_table[i].q = p;
 8006b1c:	4374      	muls	r4, r6
      result = ERR_OK;
 8006b1e:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8006b20:	513d      	str	r5, [r7, r4]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8006b22:	e7a3      	b.n	8006a6c <etharp_query+0x38>
    return ERR_ARG;
 8006b24:	f06f 000f 	mvn.w	r0, #15
 8006b28:	e7a0      	b.n	8006a6c <etharp_query+0x38>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8006b2a:	462a      	mov	r2, r5
 8006b2c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8006b30:	200e      	movs	r0, #14
 8006b32:	f001 ff35 	bl	80089a0 <pbuf_clone>
    if (p != NULL) {
 8006b36:	4605      	mov	r5, r0
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	d1e7      	bne.n	8006b0c <etharp_query+0xd8>
      result = ERR_MEM;
 8006b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b40:	e794      	b.n	8006a6c <etharp_query+0x38>
  if (is_new_entry || (q == NULL)) {
 8006b42:	2d00      	cmp	r5, #0
 8006b44:	d0a9      	beq.n	8006a9a <etharp_query+0x66>
  err_t result = ERR_MEM;
 8006b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b4a:	e7ac      	b.n	8006aa6 <etharp_query+0x72>
 8006b4c:	0801f039 	.word	0x0801f039
 8006b50:	0801f1fa 	.word	0x0801f1fa
 8006b54:	0801e3d3 	.word	0x0801e3d3
 8006b58:	24006658 	.word	0x24006658
 8006b5c:	0801f208 	.word	0x0801f208

08006b60 <etharp_output>:
{
 8006b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b62:	460e      	mov	r6, r1
 8006b64:	b085      	sub	sp, #20
 8006b66:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8006b68:	4604      	mov	r4, r0
 8006b6a:	b930      	cbnz	r0, 8006b7a <etharp_output+0x1a>
 8006b6c:	4b41      	ldr	r3, [pc, #260]	; (8006c74 <etharp_output+0x114>)
 8006b6e:	f240 321e 	movw	r2, #798	; 0x31e
 8006b72:	4941      	ldr	r1, [pc, #260]	; (8006c78 <etharp_output+0x118>)
 8006b74:	4841      	ldr	r0, [pc, #260]	; (8006c7c <etharp_output+0x11c>)
 8006b76:	f005 fd6d 	bl	800c654 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8006b7a:	b936      	cbnz	r6, 8006b8a <etharp_output+0x2a>
 8006b7c:	4b3d      	ldr	r3, [pc, #244]	; (8006c74 <etharp_output+0x114>)
 8006b7e:	f240 321f 	movw	r2, #799	; 0x31f
 8006b82:	493f      	ldr	r1, [pc, #252]	; (8006c80 <etharp_output+0x120>)
 8006b84:	483d      	ldr	r0, [pc, #244]	; (8006c7c <etharp_output+0x11c>)
 8006b86:	f005 fd65 	bl	800c654 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8006b8a:	b935      	cbnz	r5, 8006b9a <etharp_output+0x3a>
 8006b8c:	4b39      	ldr	r3, [pc, #228]	; (8006c74 <etharp_output+0x114>)
 8006b8e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006b92:	493c      	ldr	r1, [pc, #240]	; (8006c84 <etharp_output+0x124>)
 8006b94:	4839      	ldr	r0, [pc, #228]	; (8006c7c <etharp_output+0x11c>)
 8006b96:	f005 fd5d 	bl	800c654 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	6828      	ldr	r0, [r5, #0]
 8006b9e:	f000 fafa 	bl	8007196 <ip4_addr_isbroadcast_u32>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d160      	bne.n	8006c68 <etharp_output+0x108>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8006ba6:	682b      	ldr	r3, [r5, #0]
 8006ba8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006bac:	2ae0      	cmp	r2, #224	; 0xe0
 8006bae:	d11b      	bne.n	8006be8 <etharp_output+0x88>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	f8ad 3008 	strh.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8006bb6:	235e      	movs	r3, #94	; 0x5e
 8006bb8:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8006bbc:	786b      	ldrb	r3, [r5, #1]
 8006bbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc2:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8006bc6:	78ab      	ldrb	r3, [r5, #2]
 8006bc8:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8006bcc:	78eb      	ldrb	r3, [r5, #3]
 8006bce:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8006bd2:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8006bd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bd8:	4631      	mov	r1, r6
 8006bda:	4620      	mov	r0, r4
 8006bdc:	9200      	str	r2, [sp, #0]
 8006bde:	f104 0226 	add.w	r2, r4, #38	; 0x26
 8006be2:	f005 fb97 	bl	800c314 <ethernet_output>
 8006be6:	e023      	b.n	8006c30 <etharp_output+0xd0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006be8:	6862      	ldr	r2, [r4, #4]
 8006bea:	68a1      	ldr	r1, [r4, #8]
 8006bec:	405a      	eors	r2, r3
 8006bee:	420a      	tst	r2, r1
 8006bf0:	d009      	beq.n	8006c06 <etharp_output+0xa6>
        !ip4_addr_islinklocal(ipaddr)) {
 8006bf2:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8006bf4:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d004      	beq.n	8006c06 <etharp_output+0xa6>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8006bfc:	68e3      	ldr	r3, [r4, #12]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d034      	beq.n	8006c6c <etharp_output+0x10c>
            dst_addr = netif_ip4_gw(netif);
 8006c02:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8006c06:	4920      	ldr	r1, [pc, #128]	; (8006c88 <etharp_output+0x128>)
 8006c08:	2318      	movs	r3, #24
 8006c0a:	f891 20f0 	ldrb.w	r2, [r1, #240]	; 0xf0
 8006c0e:	468c      	mov	ip, r1
 8006c10:	fb03 1302 	mla	r3, r3, r2, r1
 8006c14:	7d18      	ldrb	r0, [r3, #20]
 8006c16:	2801      	cmp	r0, #1
 8006c18:	d90c      	bls.n	8006c34 <etharp_output+0xd4>
 8006c1a:	6899      	ldr	r1, [r3, #8]
 8006c1c:	42a1      	cmp	r1, r4
 8006c1e:	d109      	bne.n	8006c34 <etharp_output+0xd4>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8006c20:	6829      	ldr	r1, [r5, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	4299      	cmp	r1, r3
 8006c26:	d105      	bne.n	8006c34 <etharp_output+0xd4>
        return etharp_output_to_arp_index(netif, q, i);
 8006c28:	4631      	mov	r1, r6
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f7ff feac 	bl	8006988 <etharp_output_to_arp_index>
}
 8006c30:	b005      	add	sp, #20
 8006c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c34:	4b14      	ldr	r3, [pc, #80]	; (8006c88 <etharp_output+0x128>)
{
 8006c36:	2100      	movs	r1, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8006c38:	7d1f      	ldrb	r7, [r3, #20]
 8006c3a:	b2ca      	uxtb	r2, r1
 8006c3c:	2f01      	cmp	r7, #1
 8006c3e:	d909      	bls.n	8006c54 <etharp_output+0xf4>
 8006c40:	689f      	ldr	r7, [r3, #8]
 8006c42:	42a7      	cmp	r7, r4
 8006c44:	d106      	bne.n	8006c54 <etharp_output+0xf4>
          (arp_table[i].netif == netif) &&
 8006c46:	685f      	ldr	r7, [r3, #4]
 8006c48:	6828      	ldr	r0, [r5, #0]
 8006c4a:	42b8      	cmp	r0, r7
 8006c4c:	d102      	bne.n	8006c54 <etharp_output+0xf4>
        ETHARP_SET_ADDRHINT(netif, i);
 8006c4e:	f88c 20f0 	strb.w	r2, [ip, #240]	; 0xf0
 8006c52:	e7e9      	b.n	8006c28 <etharp_output+0xc8>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8006c54:	3101      	adds	r1, #1
 8006c56:	3318      	adds	r3, #24
 8006c58:	290a      	cmp	r1, #10
 8006c5a:	d1ed      	bne.n	8006c38 <etharp_output+0xd8>
    return etharp_query(netif, dst_addr, q);
 8006c5c:	4632      	mov	r2, r6
 8006c5e:	4629      	mov	r1, r5
 8006c60:	4620      	mov	r0, r4
 8006c62:	f7ff fee7 	bl	8006a34 <etharp_query>
 8006c66:	e7e3      	b.n	8006c30 <etharp_output+0xd0>
    dest = (const struct eth_addr *)&ethbroadcast;
 8006c68:	4b08      	ldr	r3, [pc, #32]	; (8006c8c <etharp_output+0x12c>)
 8006c6a:	e7b3      	b.n	8006bd4 <etharp_output+0x74>
            return ERR_RTE;
 8006c6c:	f06f 0003 	mvn.w	r0, #3
 8006c70:	e7de      	b.n	8006c30 <etharp_output+0xd0>
 8006c72:	bf00      	nop
 8006c74:	0801f039 	.word	0x0801f039
 8006c78:	0801e3c5 	.word	0x0801e3c5
 8006c7c:	0801e3d3 	.word	0x0801e3d3
 8006c80:	0801fcad 	.word	0x0801fcad
 8006c84:	0801f187 	.word	0x0801f187
 8006c88:	24006658 	.word	0x24006658
 8006c8c:	0800e324 	.word	0x0800e324

08006c90 <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8006c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c92:	4604      	mov	r4, r0
 8006c94:	b087      	sub	sp, #28
 8006c96:	460f      	mov	r7, r1
 8006c98:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8006c9a:	2124      	movs	r1, #36	; 0x24
 8006c9c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006ca0:	2022      	movs	r0, #34	; 0x22
 8006ca2:	f001 fc85 	bl	80085b0 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d039      	beq.n	8006d20 <icmp_send_response.isra.0+0x90>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8006cac:	8943      	ldrh	r3, [r0, #10]
 8006cae:	2b23      	cmp	r3, #35	; 0x23
 8006cb0:	d806      	bhi.n	8006cc0 <icmp_send_response.isra.0+0x30>
 8006cb2:	4b1c      	ldr	r3, [pc, #112]	; (8006d24 <icmp_send_response.isra.0+0x94>)
 8006cb4:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8006cb8:	491b      	ldr	r1, [pc, #108]	; (8006d28 <icmp_send_response.isra.0+0x98>)
 8006cba:	481c      	ldr	r0, [pc, #112]	; (8006d2c <icmp_send_response.isra.0+0x9c>)
 8006cbc:	f005 fcca 	bl	800c654 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8006cc0:	6820      	ldr	r0, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8006cc2:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8006cc4:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006cc6:	f100 011c 	add.w	r1, r0, #28
  icmphdr->id = 0;
 8006cca:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006ccc:	f104 0208 	add.w	r2, r4, #8
  icmphdr->id = 0;
 8006cd0:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8006cd2:	71a3      	strb	r3, [r4, #6]
 8006cd4:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006cd6:	4603      	mov	r3, r0
  icmphdr->type = type;
 8006cd8:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8006cda:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8006cdc:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ce0:	428b      	cmp	r3, r1
 8006ce2:	f842 6b04 	str.w	r6, [r2], #4
 8006ce6:	d1f9      	bne.n	8006cdc <icmp_send_response.isra.0+0x4c>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8006ce8:	68c3      	ldr	r3, [r0, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8006cea:	a805      	add	r0, sp, #20
  ip4_addr_copy(iphdr_src, iphdr->src);
 8006cec:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 8006cee:	f000 f8e5 	bl	8006ebc <ip4_route>
#endif
  if (netif != NULL) {
 8006cf2:	4607      	mov	r7, r0
 8006cf4:	b188      	cbz	r0, 8006d1a <icmp_send_response.isra.0+0x8a>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8006cf6:	2600      	movs	r6, #0
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8006cf8:	8969      	ldrh	r1, [r5, #10]
 8006cfa:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8006cfc:	70a6      	strb	r6, [r4, #2]
 8006cfe:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8006d00:	f000 fe6c 	bl	80079dc <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006d04:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8006d06:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8006d08:	aa05      	add	r2, sp, #20
 8006d0a:	4631      	mov	r1, r6
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	9702      	str	r7, [sp, #8]
 8006d10:	e9cd 6300 	strd	r6, r3, [sp]
 8006d14:	23ff      	movs	r3, #255	; 0xff
 8006d16:	f000 fa2d 	bl	8007174 <ip4_output_if>
  }
  pbuf_free(q);
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	f001 fbe0 	bl	80084e0 <pbuf_free>
}
 8006d20:	b007      	add	sp, #28
 8006d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d24:	0801f222 	.word	0x0801f222
 8006d28:	0801f29a 	.word	0x0801f29a
 8006d2c:	0801e3d3 	.word	0x0801e3d3

08006d30 <icmp_input>:
  iphdr_in = ip4_current_header();
 8006d30:	4b4a      	ldr	r3, [pc, #296]	; (8006e5c <icmp_input+0x12c>)
{
 8006d32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8006d36:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 8006d3a:	b087      	sub	sp, #28
 8006d3c:	4604      	mov	r4, r0
 8006d3e:	460f      	mov	r7, r1
  hlen = IPH_HL_BYTES(iphdr_in);
 8006d40:	f899 5000 	ldrb.w	r5, [r9]
 8006d44:	4698      	mov	r8, r3
 8006d46:	f005 050f 	and.w	r5, r5, #15
 8006d4a:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8006d4c:	2d13      	cmp	r5, #19
 8006d4e:	d931      	bls.n	8006db4 <icmp_input+0x84>
  if (p->len < sizeof(u16_t) * 2) {
 8006d50:	8943      	ldrh	r3, [r0, #10]
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d92e      	bls.n	8006db4 <icmp_input+0x84>
  type = *((u8_t *)p->payload);
 8006d56:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d12a      	bne.n	8006db4 <icmp_input+0x84>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006d5e:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8006d62:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8006d66:	2be0      	cmp	r3, #224	; 0xe0
 8006d68:	d024      	beq.n	8006db4 <icmp_input+0x84>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8006d6a:	f8d8 1000 	ldr.w	r1, [r8]
 8006d6e:	f000 fa12 	bl	8007196 <ip4_addr_isbroadcast_u32>
 8006d72:	b9f8      	cbnz	r0, 8006db4 <icmp_input+0x84>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8006d74:	8923      	ldrh	r3, [r4, #8]
 8006d76:	2b07      	cmp	r3, #7
 8006d78:	d91c      	bls.n	8006db4 <icmp_input+0x84>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006d7a:	f105 010e 	add.w	r1, r5, #14
 8006d7e:	4620      	mov	r0, r4
 8006d80:	9105      	str	r1, [sp, #20]
 8006d82:	f001 fb75 	bl	8008470 <pbuf_add_header>
 8006d86:	9905      	ldr	r1, [sp, #20]
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d05b      	beq.n	8006e44 <icmp_input+0x114>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8006d8c:	8923      	ldrh	r3, [r4, #8]
 8006d8e:	1959      	adds	r1, r3, r5
 8006d90:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 8006d92:	428b      	cmp	r3, r1
 8006d94:	d80e      	bhi.n	8006db4 <icmp_input+0x84>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8006d96:	f44f 7220 	mov.w	r2, #640	; 0x280
 8006d9a:	200e      	movs	r0, #14
 8006d9c:	f001 fc08 	bl	80085b0 <pbuf_alloc>
        if (r == NULL) {
 8006da0:	4606      	mov	r6, r0
 8006da2:	b138      	cbz	r0, 8006db4 <icmp_input+0x84>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8006da4:	8942      	ldrh	r2, [r0, #10]
 8006da6:	f105 0308 	add.w	r3, r5, #8
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d208      	bcs.n	8006dc0 <icmp_input+0x90>
          pbuf_free(r);
 8006dae:	4630      	mov	r0, r6
 8006db0:	f001 fb96 	bl	80084e0 <pbuf_free>
  pbuf_free(p);
 8006db4:	4620      	mov	r0, r4
}
 8006db6:	b007      	add	sp, #28
 8006db8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8006dbc:	f001 bb90 	b.w	80084e0 <pbuf_free>
        MEMCPY(r->payload, iphdr_in, hlen);
 8006dc0:	4649      	mov	r1, r9
 8006dc2:	462a      	mov	r2, r5
 8006dc4:	6840      	ldr	r0, [r0, #4]
 8006dc6:	f005 fc15 	bl	800c5f4 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 8006dca:	4629      	mov	r1, r5
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f001 fb53 	bl	8008478 <pbuf_remove_header>
 8006dd2:	b130      	cbz	r0, 8006de2 <icmp_input+0xb2>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8006dd4:	4b22      	ldr	r3, [pc, #136]	; (8006e60 <icmp_input+0x130>)
 8006dd6:	22b6      	movs	r2, #182	; 0xb6
 8006dd8:	4922      	ldr	r1, [pc, #136]	; (8006e64 <icmp_input+0x134>)
 8006dda:	4823      	ldr	r0, [pc, #140]	; (8006e68 <icmp_input+0x138>)
 8006ddc:	f005 fc3a 	bl	800c654 <iprintf>
          pbuf_free(r);
 8006de0:	e7e5      	b.n	8006dae <icmp_input+0x7e>
        if (pbuf_copy(r, p) != ERR_OK) {
 8006de2:	4621      	mov	r1, r4
 8006de4:	4630      	mov	r0, r6
 8006de6:	f001 fd13 	bl	8008810 <pbuf_copy>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	d1df      	bne.n	8006dae <icmp_input+0x7e>
        pbuf_free(p);
 8006dee:	4620      	mov	r0, r4
 8006df0:	4634      	mov	r4, r6
 8006df2:	f001 fb75 	bl	80084e0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8006df6:	4629      	mov	r1, r5
 8006df8:	4620      	mov	r0, r4
      iecho = (struct icmp_echo_hdr *)p->payload;
 8006dfa:	6866      	ldr	r6, [r4, #4]
      if (pbuf_add_header(p, hlen)) {
 8006dfc:	f001 fb38 	bl	8008470 <pbuf_add_header>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	d1d7      	bne.n	8006db4 <icmp_input+0x84>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8006e04:	6861      	ldr	r1, [r4, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8006e06:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 8006e0a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006e0e:	60cb      	str	r3, [r1, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8006e10:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006e14:	610b      	str	r3, [r1, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8006e16:	8873      	ldrh	r3, [r6, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8006e18:	7030      	strb	r0, [r6, #0]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8006e1a:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8006e1c:	4293      	cmp	r3, r2
        IPH_CHKSUM_SET(iphdr, 0);
 8006e1e:	f04f 0200 	mov.w	r2, #0
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8006e22:	bf8c      	ite	hi
 8006e24:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8006e26:	3308      	addls	r3, #8
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	8073      	strh	r3, [r6, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8006e2c:	23ff      	movs	r3, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 8006e2e:	728a      	strb	r2, [r1, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8006e30:	720b      	strb	r3, [r1, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8006e32:	72ca      	strb	r2, [r1, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8006e34:	2101      	movs	r1, #1
 8006e36:	9702      	str	r7, [sp, #8]
 8006e38:	e9cd 2100 	strd	r2, r1, [sp]
 8006e3c:	490b      	ldr	r1, [pc, #44]	; (8006e6c <icmp_input+0x13c>)
 8006e3e:	f000 f999 	bl	8007174 <ip4_output_if>
  pbuf_free(p);
 8006e42:	e7b7      	b.n	8006db4 <icmp_input+0x84>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8006e44:	4620      	mov	r0, r4
 8006e46:	f001 fb17 	bl	8008478 <pbuf_remove_header>
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d0d3      	beq.n	8006df6 <icmp_input+0xc6>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8006e4e:	4b04      	ldr	r3, [pc, #16]	; (8006e60 <icmp_input+0x130>)
 8006e50:	22c7      	movs	r2, #199	; 0xc7
 8006e52:	4907      	ldr	r1, [pc, #28]	; (8006e70 <icmp_input+0x140>)
 8006e54:	4804      	ldr	r0, [pc, #16]	; (8006e68 <icmp_input+0x138>)
 8006e56:	f005 fbfd 	bl	800c654 <iprintf>
          goto icmperr;
 8006e5a:	e7ab      	b.n	8006db4 <icmp_input+0x84>
 8006e5c:	24006a14 	.word	0x24006a14
 8006e60:	0801f222 	.word	0x0801f222
 8006e64:	0801f2c6 	.word	0x0801f2c6
 8006e68:	0801e3d3 	.word	0x0801e3d3
 8006e6c:	24006a28 	.word	0x24006a28
 8006e70:	0801f2fb 	.word	0x0801f2fb

08006e74 <icmp_dest_unreach>:
{
 8006e74:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 8006e76:	3004      	adds	r0, #4
 8006e78:	2103      	movs	r1, #3
 8006e7a:	f7ff bf09 	b.w	8006c90 <icmp_send_response.isra.0>

08006e7e <icmp_time_exceeded>:
{
 8006e7e:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 8006e80:	3004      	adds	r0, #4
 8006e82:	210b      	movs	r1, #11
 8006e84:	f7ff bf04 	b.w	8006c90 <icmp_send_response.isra.0>

08006e88 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8006e88:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006e8a:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
{
 8006e8e:	4601      	mov	r1, r0
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006e90:	f013 0301 	ands.w	r3, r3, #1
 8006e94:	d00b      	beq.n	8006eae <ip4_input_accept+0x26>
 8006e96:	6843      	ldr	r3, [r0, #4]
 8006e98:	b14b      	cbz	r3, 8006eae <ip4_input_accept+0x26>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006e9a:	4a07      	ldr	r2, [pc, #28]	; (8006eb8 <ip4_input_accept+0x30>)
 8006e9c:	6950      	ldr	r0, [r2, #20]
 8006e9e:	4283      	cmp	r3, r0
 8006ea0:	d007      	beq.n	8006eb2 <ip4_input_accept+0x2a>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8006ea2:	f000 f978 	bl	8007196 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006ea6:	3800      	subs	r0, #0
 8006ea8:	bf18      	it	ne
 8006eaa:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 8006eac:	bd08      	pop	{r3, pc}
  return 0;
 8006eae:	4618      	mov	r0, r3
 8006eb0:	e7fc      	b.n	8006eac <ip4_input_accept+0x24>
      return 1;
 8006eb2:	2001      	movs	r0, #1
 8006eb4:	e7fa      	b.n	8006eac <ip4_input_accept+0x24>
 8006eb6:	bf00      	nop
 8006eb8:	24006a14 	.word	0x24006a14

08006ebc <ip4_route>:
  NETIF_FOREACH(netif) {
 8006ebc:	4b14      	ldr	r3, [pc, #80]	; (8006f10 <ip4_route+0x54>)
{
 8006ebe:	4602      	mov	r2, r0
  NETIF_FOREACH(netif) {
 8006ec0:	6818      	ldr	r0, [r3, #0]
{
 8006ec2:	b530      	push	{r4, r5, lr}
  NETIF_FOREACH(netif) {
 8006ec4:	b978      	cbnz	r0, 8006ee6 <ip4_route+0x2a>
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8006ec6:	4b13      	ldr	r3, [pc, #76]	; (8006f14 <ip4_route+0x58>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	b15b      	cbz	r3, 8006ee4 <ip4_route+0x28>
 8006ecc:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8006ed0:	f001 0105 	and.w	r1, r1, #5
 8006ed4:	2905      	cmp	r1, #5
 8006ed6:	d105      	bne.n	8006ee4 <ip4_route+0x28>
 8006ed8:	6859      	ldr	r1, [r3, #4]
 8006eda:	b119      	cbz	r1, 8006ee4 <ip4_route+0x28>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8006edc:	7812      	ldrb	r2, [r2, #0]
 8006ede:	2a7f      	cmp	r2, #127	; 0x7f
 8006ee0:	bf18      	it	ne
 8006ee2:	4618      	movne	r0, r3
}
 8006ee4:	bd30      	pop	{r4, r5, pc}
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8006ee6:	f890 102d 	ldrb.w	r1, [r0, #45]	; 0x2d
 8006eea:	07cd      	lsls	r5, r1, #31
 8006eec:	d50d      	bpl.n	8006f0a <ip4_route+0x4e>
 8006eee:	074c      	lsls	r4, r1, #29
 8006ef0:	d50b      	bpl.n	8006f0a <ip4_route+0x4e>
 8006ef2:	6843      	ldr	r3, [r0, #4]
 8006ef4:	b14b      	cbz	r3, 8006f0a <ip4_route+0x4e>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8006ef6:	6814      	ldr	r4, [r2, #0]
 8006ef8:	6885      	ldr	r5, [r0, #8]
 8006efa:	4063      	eors	r3, r4
 8006efc:	422b      	tst	r3, r5
 8006efe:	d0f1      	beq.n	8006ee4 <ip4_route+0x28>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8006f00:	078b      	lsls	r3, r1, #30
 8006f02:	d402      	bmi.n	8006f0a <ip4_route+0x4e>
 8006f04:	68c3      	ldr	r3, [r0, #12]
 8006f06:	429c      	cmp	r4, r3
 8006f08:	d0ec      	beq.n	8006ee4 <ip4_route+0x28>
  NETIF_FOREACH(netif) {
 8006f0a:	6800      	ldr	r0, [r0, #0]
 8006f0c:	e7da      	b.n	8006ec4 <ip4_route+0x8>
 8006f0e:	bf00      	nop
 8006f10:	2400a748 	.word	0x2400a748
 8006f14:	2400a74c 	.word	0x2400a74c

08006f18 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8006f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8006f1c:	f8d0 8004 	ldr.w	r8, [r0, #4]
{
 8006f20:	4604      	mov	r4, r0
 8006f22:	460e      	mov	r6, r1
  if (IPH_V(iphdr) != 4) {
 8006f24:	f898 5000 	ldrb.w	r5, [r8]
 8006f28:	092b      	lsrs	r3, r5, #4
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d005      	beq.n	8006f3a <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f001 fad6 	bl	80084e0 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8006f34:	2000      	movs	r0, #0
 8006f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006f3a:	f8b8 0002 	ldrh.w	r0, [r8, #2]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8006f3e:	f005 050f 	and.w	r5, r5, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006f42:	f000 fd19 	bl	8007978 <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8006f46:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8006f48:	ea4f 0985 	mov.w	r9, r5, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8006f4c:	4607      	mov	r7, r0
  if (iphdr_len < p->tot_len) {
 8006f4e:	4283      	cmp	r3, r0
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8006f50:	464d      	mov	r5, r9
  if (iphdr_len < p->tot_len) {
 8006f52:	d903      	bls.n	8006f5c <ip4_input+0x44>
    pbuf_realloc(p, iphdr_len);
 8006f54:	4601      	mov	r1, r0
 8006f56:	4620      	mov	r0, r4
 8006f58:	f001 fba4 	bl	80086a4 <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8006f5c:	8963      	ldrh	r3, [r4, #10]
 8006f5e:	42ab      	cmp	r3, r5
 8006f60:	d3e5      	bcc.n	8006f2e <ip4_input+0x16>
 8006f62:	8923      	ldrh	r3, [r4, #8]
 8006f64:	42bb      	cmp	r3, r7
 8006f66:	d3e2      	bcc.n	8006f2e <ip4_input+0x16>
 8006f68:	2d13      	cmp	r5, #19
 8006f6a:	d9e0      	bls.n	8006f2e <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8006f6c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8006f70:	4d41      	ldr	r5, [pc, #260]	; (8007078 <ip4_input+0x160>)
 8006f72:	616b      	str	r3, [r5, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8006f78:	f8d8 200c 	ldr.w	r2, [r8, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006f7c:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8006f7e:	612a      	str	r2, [r5, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006f80:	d13c      	bne.n	8006ffc <ip4_input+0xe4>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8006f82:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
 8006f86:	07db      	lsls	r3, r3, #31
 8006f88:	d543      	bpl.n	8007012 <ip4_input+0xfa>
 8006f8a:	6873      	ldr	r3, [r6, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d040      	beq.n	8007012 <ip4_input+0xfa>
      netif = NULL;
 8006f90:	4637      	mov	r7, r6
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006f92:	4631      	mov	r1, r6
 8006f94:	6928      	ldr	r0, [r5, #16]
 8006f96:	f000 f8fe 	bl	8007196 <ip4_addr_isbroadcast_u32>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d1c7      	bne.n	8006f2e <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8006f9e:	692b      	ldr	r3, [r5, #16]
 8006fa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8006fa4:	2be0      	cmp	r3, #224	; 0xe0
 8006fa6:	d0c2      	beq.n	8006f2e <ip4_input+0x16>
  if (netif == NULL) {
 8006fa8:	2f00      	cmp	r7, #0
 8006faa:	d0c0      	beq.n	8006f2e <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8006fac:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8006fb0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006fb4:	b13b      	cbz	r3, 8006fc6 <ip4_input+0xae>
    p = ip4_reass(p);
 8006fb6:	4620      	mov	r0, r4
 8006fb8:	f000 fa20 	bl	80073fc <ip4_reass>
    if (p == NULL) {
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d0b8      	beq.n	8006f34 <ip4_input+0x1c>
    iphdr = (const struct ip_hdr *)p->payload;
 8006fc2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8006fc6:	f8c5 8008 	str.w	r8, [r5, #8]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8006fca:	4649      	mov	r1, r9
 8006fcc:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8006fce:	e9c5 7600 	strd	r7, r6, [r5]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8006fd2:	f898 3000 	ldrb.w	r3, [r8]
 8006fd6:	f003 030f 	and.w	r3, r3, #15
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	81ab      	strh	r3, [r5, #12]
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8006fde:	f001 fa4b 	bl	8008478 <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8006fe2:	f898 3009 	ldrb.w	r3, [r8, #9]
 8006fe6:	2b06      	cmp	r3, #6
 8006fe8:	d02b      	beq.n	8007042 <ip4_input+0x12a>
 8006fea:	2b11      	cmp	r3, #17
 8006fec:	d01d      	beq.n	800702a <ip4_input+0x112>
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d12c      	bne.n	800704c <ip4_input+0x134>
        icmp_input(p, inp);
 8006ff2:	4631      	mov	r1, r6
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f7ff fe9b 	bl	8006d30 <icmp_input>
        break;
 8006ffa:	e01a      	b.n	8007032 <ip4_input+0x11a>
    if (ip4_input_accept(inp)) {
 8006ffc:	4630      	mov	r0, r6
 8006ffe:	f7ff ff43 	bl	8006e88 <ip4_input_accept>
 8007002:	2800      	cmp	r0, #0
 8007004:	d1c4      	bne.n	8006f90 <ip4_input+0x78>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8007006:	7d2b      	ldrb	r3, [r5, #20]
 8007008:	2b7f      	cmp	r3, #127	; 0x7f
 800700a:	d002      	beq.n	8007012 <ip4_input+0xfa>
        NETIF_FOREACH(netif) {
 800700c:	4b1b      	ldr	r3, [pc, #108]	; (800707c <ip4_input+0x164>)
 800700e:	681f      	ldr	r7, [r3, #0]
 8007010:	b90f      	cbnz	r7, 8007016 <ip4_input+0xfe>
      netif = NULL;
 8007012:	2700      	movs	r7, #0
 8007014:	e7bd      	b.n	8006f92 <ip4_input+0x7a>
          if (netif == inp) {
 8007016:	42b7      	cmp	r7, r6
 8007018:	d101      	bne.n	800701e <ip4_input+0x106>
        NETIF_FOREACH(netif) {
 800701a:	683f      	ldr	r7, [r7, #0]
 800701c:	e7f8      	b.n	8007010 <ip4_input+0xf8>
          if (ip4_input_accept(netif)) {
 800701e:	4638      	mov	r0, r7
 8007020:	f7ff ff32 	bl	8006e88 <ip4_input_accept>
 8007024:	2800      	cmp	r0, #0
 8007026:	d0f8      	beq.n	800701a <ip4_input+0x102>
 8007028:	e7b3      	b.n	8006f92 <ip4_input+0x7a>
        udp_input(p, inp);
 800702a:	4631      	mov	r1, r6
 800702c:	4620      	mov	r0, r4
 800702e:	f004 ff83 	bl	800bf38 <udp_input>
  ip_data.current_netif = NULL;
 8007032:	2300      	movs	r3, #0
  ip_data.current_input_netif = NULL;
 8007034:	e9c5 3300 	strd	r3, r3, [r5]
  ip_data.current_ip4_header = NULL;
 8007038:	60ab      	str	r3, [r5, #8]
  ip_data.current_ip_header_tot_len = 0;
 800703a:	81ab      	strh	r3, [r5, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 800703c:	e9c5 3304 	strd	r3, r3, [r5, #16]
  return ERR_OK;
 8007040:	e778      	b.n	8006f34 <ip4_input+0x1c>
        tcp_input(p, inp);
 8007042:	4631      	mov	r1, r6
 8007044:	4620      	mov	r0, r4
 8007046:	f003 f83f 	bl	800a0c8 <tcp_input>
        break;
 800704a:	e7f2      	b.n	8007032 <ip4_input+0x11a>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800704c:	4639      	mov	r1, r7
 800704e:	6968      	ldr	r0, [r5, #20]
 8007050:	f000 f8a1 	bl	8007196 <ip4_addr_isbroadcast_u32>
 8007054:	b960      	cbnz	r0, 8007070 <ip4_input+0x158>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8007056:	696b      	ldr	r3, [r5, #20]
 8007058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800705c:	2be0      	cmp	r3, #224	; 0xe0
 800705e:	d007      	beq.n	8007070 <ip4_input+0x158>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8007060:	4649      	mov	r1, r9
 8007062:	4620      	mov	r0, r4
 8007064:	f001 fa34 	bl	80084d0 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8007068:	2102      	movs	r1, #2
 800706a:	4620      	mov	r0, r4
 800706c:	f7ff ff02 	bl	8006e74 <icmp_dest_unreach>
        pbuf_free(p);
 8007070:	4620      	mov	r0, r4
 8007072:	f001 fa35 	bl	80084e0 <pbuf_free>
        break;
 8007076:	e7dc      	b.n	8007032 <ip4_input+0x11a>
 8007078:	24006a14 	.word	0x24006a14
 800707c:	2400a748 	.word	0x2400a748

08007080 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8007080:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007084:	461f      	mov	r7, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007086:	7b83      	ldrb	r3, [r0, #14]
{
 8007088:	4604      	mov	r4, r0
 800708a:	4689      	mov	r9, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800708c:	2b01      	cmp	r3, #1
{
 800708e:	4616      	mov	r6, r2
 8007090:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8007094:	d006      	beq.n	80070a4 <ip4_output_if_src+0x24>
 8007096:	4b31      	ldr	r3, [pc, #196]	; (800715c <ip4_output_if_src+0xdc>)
 8007098:	f44f 7255 	mov.w	r2, #852	; 0x354
 800709c:	4930      	ldr	r1, [pc, #192]	; (8007160 <ip4_output_if_src+0xe0>)
 800709e:	4831      	ldr	r0, [pc, #196]	; (8007164 <ip4_output_if_src+0xe4>)
 80070a0:	f005 fad8 	bl	800c654 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80070a4:	2e00      	cmp	r6, #0
 80070a6:	d049      	beq.n	800713c <ip4_output_if_src+0xbc>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80070a8:	2114      	movs	r1, #20
 80070aa:	4620      	mov	r0, r4
 80070ac:	f001 f9e0 	bl	8008470 <pbuf_add_header>
 80070b0:	b120      	cbz	r0, 80070bc <ip4_output_if_src+0x3c>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80070b2:	f06f 0001 	mvn.w	r0, #1
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 80070b6:	b002      	add	sp, #8
 80070b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80070bc:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 80070be:	6865      	ldr	r5, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80070c0:	2b13      	cmp	r3, #19
 80070c2:	d806      	bhi.n	80070d2 <ip4_output_if_src+0x52>
 80070c4:	4b25      	ldr	r3, [pc, #148]	; (800715c <ip4_output_if_src+0xdc>)
 80070c6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80070ca:	4927      	ldr	r1, [pc, #156]	; (8007168 <ip4_output_if_src+0xe8>)
 80070cc:	4825      	ldr	r0, [pc, #148]	; (8007164 <ip4_output_if_src+0xe4>)
 80070ce:	f005 fac1 	bl	800c654 <iprintf>
    IPH_PROTO_SET(iphdr, proto);
 80070d2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 80070d6:	722f      	strb	r7, [r5, #8]
    IPH_OFFSET_SET(iphdr, 0);
 80070d8:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 80070da:	726b      	strb	r3, [r5, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 80070dc:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80070de:	f8df a090 	ldr.w	sl, [pc, #144]	; 8007170 <ip4_output_if_src+0xf0>
    ip4_addr_copy(iphdr->dest, *dest);
 80070e2:	612b      	str	r3, [r5, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80070e4:	2345      	movs	r3, #69	; 0x45
 80070e6:	702b      	strb	r3, [r5, #0]
    IPH_TOS_SET(iphdr, tos);
 80070e8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80070ec:	706b      	strb	r3, [r5, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80070ee:	8920      	ldrh	r0, [r4, #8]
 80070f0:	f000 fc42 	bl	8007978 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 80070f4:	71af      	strb	r7, [r5, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80070f6:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(iphdr, 0);
 80070f8:	71ef      	strb	r7, [r5, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80070fa:	f8ba 0000 	ldrh.w	r0, [sl]
 80070fe:	f000 fc3b 	bl	8007978 <lwip_htons>
    ++ip_id;
 8007102:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8007106:	80a8      	strh	r0, [r5, #4]
    ++ip_id;
 8007108:	3301      	adds	r3, #1
 800710a:	f8aa 3000 	strh.w	r3, [sl]
    if (src == NULL) {
 800710e:	f1b9 0f00 	cmp.w	r9, #0
 8007112:	d110      	bne.n	8007136 <ip4_output_if_src+0xb6>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8007114:	4b15      	ldr	r3, [pc, #84]	; (800716c <ip4_output_if_src+0xec>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60eb      	str	r3, [r5, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800711a:	72af      	strb	r7, [r5, #10]
 800711c:	72ef      	strb	r7, [r5, #11]
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800711e:	f8b8 3024 	ldrh.w	r3, [r8, #36]	; 0x24
 8007122:	b19b      	cbz	r3, 800714c <ip4_output_if_src+0xcc>
 8007124:	8922      	ldrh	r2, [r4, #8]
 8007126:	429a      	cmp	r2, r3
 8007128:	d910      	bls.n	800714c <ip4_output_if_src+0xcc>
    return ip4_frag(p, netif, dest);
 800712a:	4632      	mov	r2, r6
 800712c:	4641      	mov	r1, r8
 800712e:	4620      	mov	r0, r4
 8007130:	f000 fb36 	bl	80077a0 <ip4_frag>
 8007134:	e7bf      	b.n	80070b6 <ip4_output_if_src+0x36>
      ip4_addr_copy(iphdr->src, *src);
 8007136:	f8d9 3000 	ldr.w	r3, [r9]
 800713a:	e7ed      	b.n	8007118 <ip4_output_if_src+0x98>
    if (p->len < IP_HLEN) {
 800713c:	8963      	ldrh	r3, [r4, #10]
 800713e:	2b13      	cmp	r3, #19
 8007140:	d9b7      	bls.n	80070b2 <ip4_output_if_src+0x32>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8007142:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8007144:	ae01      	add	r6, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 800714a:	e7e8      	b.n	800711e <ip4_output_if_src+0x9e>
  return netif->output(netif, p, dest);
 800714c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8007150:	4632      	mov	r2, r6
 8007152:	4621      	mov	r1, r4
 8007154:	4640      	mov	r0, r8
 8007156:	4798      	blx	r3
 8007158:	e7ad      	b.n	80070b6 <ip4_output_if_src+0x36>
 800715a:	bf00      	nop
 800715c:	0801f32d 	.word	0x0801f32d
 8007160:	0801f3a4 	.word	0x0801f3a4
 8007164:	0801e3d3 	.word	0x0801e3d3
 8007168:	0801f3b0 	.word	0x0801f3b0
 800716c:	0800e1e4 	.word	0x0800e1e4
 8007170:	2400674a 	.word	0x2400674a

08007174 <ip4_output_if>:
{
 8007174:	b4f0      	push	{r4, r5, r6, r7}
 8007176:	9c06      	ldr	r4, [sp, #24]
 8007178:	f89d 5010 	ldrb.w	r5, [sp, #16]
 800717c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8007180:	b11a      	cbz	r2, 800718a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8007182:	b109      	cbz	r1, 8007188 <ip4_output_if+0x14>
 8007184:	680f      	ldr	r7, [r1, #0]
 8007186:	b907      	cbnz	r7, 800718a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8007188:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800718a:	9504      	str	r5, [sp, #16]
 800718c:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8007190:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8007192:	f7ff bf75 	b.w	8007080 <ip4_output_if_src>

08007196 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8007196:	1e43      	subs	r3, r0, #1
{
 8007198:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 800719a:	3303      	adds	r3, #3
 800719c:	d812      	bhi.n	80071c4 <ip4_addr_isbroadcast_u32+0x2e>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800719e:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
 80071a2:	f013 0002 	ands.w	r0, r3, #2
 80071a6:	d010      	beq.n	80071ca <ip4_addr_isbroadcast_u32+0x34>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80071a8:	684b      	ldr	r3, [r1, #4]
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d00c      	beq.n	80071c8 <ip4_addr_isbroadcast_u32+0x32>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80071ae:	6888      	ldr	r0, [r1, #8]
 80071b0:	4053      	eors	r3, r2
 80071b2:	4203      	tst	r3, r0
 80071b4:	d108      	bne.n	80071c8 <ip4_addr_isbroadcast_u32+0x32>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80071b6:	43c3      	mvns	r3, r0
 80071b8:	ea22 0000 	bic.w	r0, r2, r0
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80071bc:	1ac3      	subs	r3, r0, r3
 80071be:	4258      	negs	r0, r3
 80071c0:	4158      	adcs	r0, r3
 80071c2:	4770      	bx	lr
    return 1;
 80071c4:	2001      	movs	r0, #1
 80071c6:	4770      	bx	lr
    return 0;
 80071c8:	2000      	movs	r0, #0
  }
}
 80071ca:	4770      	bx	lr

080071cc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80071cc:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80071ce:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <ip_reass_dequeue_datagram+0x34>)
{
 80071d0:	4604      	mov	r4, r0
 80071d2:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	4282      	cmp	r2, r0
 80071d8:	d107      	bne.n	80071ea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80071da:	6802      	ldr	r2, [r0, #0]
 80071dc:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80071de:	4621      	mov	r1, r4
 80071e0:	2004      	movs	r0, #4
}
 80071e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80071e6:	f000 bf11 	b.w	800800c <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80071ea:	b931      	cbnz	r1, 80071fa <ip_reass_dequeue_datagram+0x2e>
 80071ec:	4b05      	ldr	r3, [pc, #20]	; (8007204 <ip_reass_dequeue_datagram+0x38>)
 80071ee:	f240 1245 	movw	r2, #325	; 0x145
 80071f2:	4905      	ldr	r1, [pc, #20]	; (8007208 <ip_reass_dequeue_datagram+0x3c>)
 80071f4:	4805      	ldr	r0, [pc, #20]	; (800720c <ip_reass_dequeue_datagram+0x40>)
 80071f6:	f005 fa2d 	bl	800c654 <iprintf>
    prev->next = ipr->next;
 80071fa:	6823      	ldr	r3, [r4, #0]
 80071fc:	602b      	str	r3, [r5, #0]
 80071fe:	e7ee      	b.n	80071de <ip_reass_dequeue_datagram+0x12>
 8007200:	2400674c 	.word	0x2400674c
 8007204:	0801f3dd 	.word	0x0801f3dd
 8007208:	0801f459 	.word	0x0801f459
 800720c:	0801e3d3 	.word	0x0801e3d3

08007210 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8007210:	4281      	cmp	r1, r0
{
 8007212:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007216:	4604      	mov	r4, r0
 8007218:	460e      	mov	r6, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 800721a:	d105      	bne.n	8007228 <ip_reass_free_complete_datagram+0x18>
 800721c:	4b2f      	ldr	r3, [pc, #188]	; (80072dc <ip_reass_free_complete_datagram+0xcc>)
 800721e:	22ab      	movs	r2, #171	; 0xab
 8007220:	492f      	ldr	r1, [pc, #188]	; (80072e0 <ip_reass_free_complete_datagram+0xd0>)
 8007222:	4830      	ldr	r0, [pc, #192]	; (80072e4 <ip_reass_free_complete_datagram+0xd4>)
 8007224:	f005 fa16 	bl	800c654 <iprintf>
  if (prev != NULL) {
 8007228:	b146      	cbz	r6, 800723c <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800722a:	6833      	ldr	r3, [r6, #0]
 800722c:	42a3      	cmp	r3, r4
 800722e:	d005      	beq.n	800723c <ip_reass_free_complete_datagram+0x2c>
 8007230:	4b2a      	ldr	r3, [pc, #168]	; (80072dc <ip_reass_free_complete_datagram+0xcc>)
 8007232:	22ad      	movs	r2, #173	; 0xad
 8007234:	492c      	ldr	r1, [pc, #176]	; (80072e8 <ip_reass_free_complete_datagram+0xd8>)
 8007236:	482b      	ldr	r0, [pc, #172]	; (80072e4 <ip_reass_free_complete_datagram+0xd4>)
 8007238:	f005 fa0c 	bl	800c654 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800723c:	6867      	ldr	r7, [r4, #4]
 800723e:	687b      	ldr	r3, [r7, #4]
  if (iprh->start == 0) {
 8007240:	889a      	ldrh	r2, [r3, #4]
 8007242:	bb92      	cbnz	r2, 80072aa <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8007244:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8007246:	f104 011c 	add.w	r1, r4, #28
    ipr->p = iprh->next_pbuf;
 800724a:	6062      	str	r2, [r4, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800724c:	f104 0208 	add.w	r2, r4, #8
 8007250:	f852 0b04 	ldr.w	r0, [r2], #4
 8007254:	428a      	cmp	r2, r1
 8007256:	f843 0b04 	str.w	r0, [r3], #4
 800725a:	d1f9      	bne.n	8007250 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800725c:	2101      	movs	r1, #1
 800725e:	4638      	mov	r0, r7
 8007260:	f7ff fe0d 	bl	8006e7e <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8007264:	4638      	mov	r0, r7
 8007266:	f001 fa75 	bl	8008754 <pbuf_clen>
 800726a:	4605      	mov	r5, r0
    pbuf_free(p);
 800726c:	4638      	mov	r0, r7
 800726e:	f001 f937 	bl	80084e0 <pbuf_free>
  p = ipr->p;
 8007272:	6867      	ldr	r7, [r4, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8007274:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80072dc <ip_reass_free_complete_datagram+0xcc>
 8007278:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80072f4 <ip_reass_free_complete_datagram+0xe4>
 800727c:	f8df a064 	ldr.w	sl, [pc, #100]	; 80072e4 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8007280:	b9af      	cbnz	r7, 80072ae <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8007282:	4620      	mov	r0, r4
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8007284:	4c19      	ldr	r4, [pc, #100]	; (80072ec <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8007286:	4631      	mov	r1, r6
 8007288:	f7ff ffa0 	bl	80071cc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800728c:	88a3      	ldrh	r3, [r4, #4]
 800728e:	42ab      	cmp	r3, r5
 8007290:	d205      	bcs.n	800729e <ip_reass_free_complete_datagram+0x8e>
 8007292:	4b12      	ldr	r3, [pc, #72]	; (80072dc <ip_reass_free_complete_datagram+0xcc>)
 8007294:	22d2      	movs	r2, #210	; 0xd2
 8007296:	4916      	ldr	r1, [pc, #88]	; (80072f0 <ip_reass_free_complete_datagram+0xe0>)
 8007298:	4812      	ldr	r0, [pc, #72]	; (80072e4 <ip_reass_free_complete_datagram+0xd4>)
 800729a:	f005 f9db 	bl	800c654 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800729e:	88a3      	ldrh	r3, [r4, #4]
}
 80072a0:	4628      	mov	r0, r5
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80072a2:	1b5b      	subs	r3, r3, r5
 80072a4:	80a3      	strh	r3, [r4, #4]
}
 80072a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 80072aa:	2500      	movs	r5, #0
 80072ac:	e7e1      	b.n	8007272 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 80072ae:	687b      	ldr	r3, [r7, #4]
    clen = pbuf_clen(pcur);
 80072b0:	4638      	mov	r0, r7
    p = iprh->next_pbuf;
 80072b2:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 80072b6:	f001 fa4d 	bl	8008754 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80072ba:	4405      	add	r5, r0
 80072bc:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80072c0:	db05      	blt.n	80072ce <ip_reass_free_complete_datagram+0xbe>
 80072c2:	4643      	mov	r3, r8
 80072c4:	22cc      	movs	r2, #204	; 0xcc
 80072c6:	4649      	mov	r1, r9
 80072c8:	4650      	mov	r0, sl
 80072ca:	f005 f9c3 	bl	800c654 <iprintf>
    pbuf_free(pcur);
 80072ce:	4638      	mov	r0, r7
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80072d0:	b2ad      	uxth	r5, r5
    p = iprh->next_pbuf;
 80072d2:	465f      	mov	r7, fp
    pbuf_free(pcur);
 80072d4:	f001 f904 	bl	80084e0 <pbuf_free>
 80072d8:	e7d2      	b.n	8007280 <ip_reass_free_complete_datagram+0x70>
 80072da:	bf00      	nop
 80072dc:	0801f3dd 	.word	0x0801f3dd
 80072e0:	0801f472 	.word	0x0801f472
 80072e4:	0801e3d3 	.word	0x0801e3d3
 80072e8:	0801f47e 	.word	0x0801f47e
 80072ec:	2400674c 	.word	0x2400674c
 80072f0:	0801f4ad 	.word	0x0801f4ad
 80072f4:	0801f490 	.word	0x0801f490

080072f8 <ip_reass_remove_oldest_datagram>:
{
 80072f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072fc:	4605      	mov	r5, r0
 80072fe:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8007300:	2600      	movs	r6, #0
    r = reassdatagrams;
 8007302:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800736c <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8007306:	2400      	movs	r4, #0
    r = reassdatagrams;
 8007308:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 800730c:	4621      	mov	r1, r4
    prev = NULL;
 800730e:	46a4      	mov	ip, r4
    oldest = NULL;
 8007310:	4620      	mov	r0, r4
    while (r != NULL) {
 8007312:	b953      	cbnz	r3, 800732a <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8007314:	b110      	cbz	r0, 800731c <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8007316:	f7ff ff7b 	bl	8007210 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 800731a:	4406      	add	r6, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800731c:	42be      	cmp	r6, r7
 800731e:	da01      	bge.n	8007324 <ip_reass_remove_oldest_datagram+0x2c>
 8007320:	2c01      	cmp	r4, #1
 8007322:	dcf0      	bgt.n	8007306 <ip_reass_remove_oldest_datagram+0xe>
}
 8007324:	4630      	mov	r0, r6
 8007326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800732a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 800732e:	695a      	ldr	r2, [r3, #20]
 8007330:	4572      	cmp	r2, lr
 8007332:	d109      	bne.n	8007348 <ip_reass_remove_oldest_datagram+0x50>
 8007334:	f8d5 e010 	ldr.w	lr, [r5, #16]
 8007338:	699a      	ldr	r2, [r3, #24]
 800733a:	4572      	cmp	r2, lr
 800733c:	d104      	bne.n	8007348 <ip_reass_remove_oldest_datagram+0x50>
 800733e:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
 8007342:	88aa      	ldrh	r2, [r5, #4]
 8007344:	4596      	cmp	lr, r2
 8007346:	d008      	beq.n	800735a <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8007348:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800734a:	b160      	cbz	r0, 8007366 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800734c:	7fc2      	ldrb	r2, [r0, #31]
 800734e:	f893 e01f 	ldrb.w	lr, [r3, #31]
          oldest_prev = prev;
 8007352:	4596      	cmp	lr, r2
 8007354:	bf9c      	itt	ls
 8007356:	4661      	movls	r1, ip
 8007358:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	2a00      	cmp	r2, #0
 800735e:	bf18      	it	ne
 8007360:	469c      	movne	ip, r3
 8007362:	4613      	mov	r3, r2
 8007364:	e7d5      	b.n	8007312 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8007366:	4661      	mov	r1, ip
 8007368:	4618      	mov	r0, r3
 800736a:	e7f6      	b.n	800735a <ip_reass_remove_oldest_datagram+0x62>
 800736c:	2400674c 	.word	0x2400674c

08007370 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8007370:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8007372:	4604      	mov	r4, r0
 8007374:	b930      	cbnz	r0, 8007384 <ip_frag_free_pbuf_custom_ref+0x14>
 8007376:	4b06      	ldr	r3, [pc, #24]	; (8007390 <ip_frag_free_pbuf_custom_ref+0x20>)
 8007378:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800737c:	4905      	ldr	r1, [pc, #20]	; (8007394 <ip_frag_free_pbuf_custom_ref+0x24>)
 800737e:	4806      	ldr	r0, [pc, #24]	; (8007398 <ip_frag_free_pbuf_custom_ref+0x28>)
 8007380:	f005 f968 	bl	800c654 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8007384:	4621      	mov	r1, r4
 8007386:	2005      	movs	r0, #5
}
 8007388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800738c:	f000 be3e 	b.w	800800c <memp_free>
 8007390:	0801f3dd 	.word	0x0801f3dd
 8007394:	0801fc95 	.word	0x0801fc95
 8007398:	0801e3d3 	.word	0x0801e3d3

0800739c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800739c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800739e:	4604      	mov	r4, r0
 80073a0:	b930      	cbnz	r0, 80073b0 <ipfrag_free_pbuf_custom+0x14>
 80073a2:	4b08      	ldr	r3, [pc, #32]	; (80073c4 <ipfrag_free_pbuf_custom+0x28>)
 80073a4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80073a8:	4907      	ldr	r1, [pc, #28]	; (80073c8 <ipfrag_free_pbuf_custom+0x2c>)
 80073aa:	4808      	ldr	r0, [pc, #32]	; (80073cc <ipfrag_free_pbuf_custom+0x30>)
 80073ac:	f005 f952 	bl	800c654 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 80073b0:	6960      	ldr	r0, [r4, #20]
 80073b2:	b108      	cbz	r0, 80073b8 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 80073b4:	f001 f894 	bl	80084e0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80073b8:	4620      	mov	r0, r4
}
 80073ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 80073be:	f7ff bfd7 	b.w	8007370 <ip_frag_free_pbuf_custom_ref>
 80073c2:	bf00      	nop
 80073c4:	0801f3dd 	.word	0x0801f3dd
 80073c8:	0801f4cf 	.word	0x0801f4cf
 80073cc:	0801e3d3 	.word	0x0801e3d3

080073d0 <ip_reass_tmr>:
{
 80073d0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80073d2:	4b09      	ldr	r3, [pc, #36]	; (80073f8 <ip_reass_tmr+0x28>)
  struct ip_reassdata *r, *prev = NULL;
 80073d4:	2400      	movs	r4, #0
  r = reassdatagrams;
 80073d6:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80073d8:	b900      	cbnz	r0, 80073dc <ip_reass_tmr+0xc>
}
 80073da:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 80073dc:	7fc3      	ldrb	r3, [r0, #31]
 80073de:	6805      	ldr	r5, [r0, #0]
 80073e0:	b123      	cbz	r3, 80073ec <ip_reass_tmr+0x1c>
      r->timer--;
 80073e2:	3b01      	subs	r3, #1
 80073e4:	77c3      	strb	r3, [r0, #31]
      ip_reass_free_complete_datagram(tmp, prev);
 80073e6:	4604      	mov	r4, r0
 80073e8:	4628      	mov	r0, r5
 80073ea:	e7f5      	b.n	80073d8 <ip_reass_tmr+0x8>
 80073ec:	4621      	mov	r1, r4
 80073ee:	f7ff ff0f 	bl	8007210 <ip_reass_free_complete_datagram>
 80073f2:	4620      	mov	r0, r4
 80073f4:	e7f7      	b.n	80073e6 <ip_reass_tmr+0x16>
 80073f6:	bf00      	nop
 80073f8:	2400674c 	.word	0x2400674c

080073fc <ip4_reass>:
{
 80073fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8007400:	6845      	ldr	r5, [r0, #4]
{
 8007402:	4680      	mov	r8, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8007404:	782b      	ldrb	r3, [r5, #0]
 8007406:	f003 030f 	and.w	r3, r3, #15
 800740a:	2b05      	cmp	r3, #5
 800740c:	f040 80a0 	bne.w	8007550 <ip4_reass+0x154>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8007410:	88e8      	ldrh	r0, [r5, #6]
 8007412:	f000 fab1 	bl	8007978 <lwip_htons>
 8007416:	4682      	mov	sl, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8007418:	8868      	ldrh	r0, [r5, #2]
 800741a:	f000 faad 	bl	8007978 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 800741e:	782b      	ldrb	r3, [r5, #0]
 8007420:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 8007424:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 8007428:	ea4f 0783 	mov.w	r7, r3, lsl #2
 800742c:	f0c0 8090 	bcc.w	8007550 <ip4_reass+0x154>
  len = (u16_t)(len - hlen);
 8007430:	1bc0      	subs	r0, r0, r7
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007432:	4ec0      	ldr	r6, [pc, #768]	; (8007734 <ip4_reass+0x338>)
  len = (u16_t)(len - hlen);
 8007434:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 8007436:	4640      	mov	r0, r8
  len = (u16_t)(len - hlen);
 8007438:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 800743a:	f001 f98b 	bl	8008754 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800743e:	88b3      	ldrh	r3, [r6, #4]
  clen = pbuf_clen(p);
 8007440:	4681      	mov	r9, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8007442:	4403      	add	r3, r0
 8007444:	2b0a      	cmp	r3, #10
 8007446:	dc79      	bgt.n	800753c <ip4_reass+0x140>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007448:	6834      	ldr	r4, [r6, #0]
 800744a:	2c00      	cmp	r4, #0
 800744c:	f040 8085 	bne.w	800755a <ip4_reass+0x15e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007450:	2004      	movs	r0, #4
 8007452:	f000 fdab 	bl	8007fac <memp_malloc>
  if (ipr == NULL) {
 8007456:	4604      	mov	r4, r0
 8007458:	b958      	cbnz	r0, 8007472 <ip4_reass+0x76>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800745a:	4649      	mov	r1, r9
 800745c:	4628      	mov	r0, r5
 800745e:	f7ff ff4b 	bl	80072f8 <ip_reass_remove_oldest_datagram>
 8007462:	4581      	cmp	r9, r0
 8007464:	dc74      	bgt.n	8007550 <ip4_reass+0x154>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8007466:	2004      	movs	r0, #4
 8007468:	f000 fda0 	bl	8007fac <memp_malloc>
    if (ipr == NULL)
 800746c:	4604      	mov	r4, r0
 800746e:	2800      	cmp	r0, #0
 8007470:	d06e      	beq.n	8007550 <ip4_reass+0x154>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8007472:	221c      	movs	r2, #28
 8007474:	2100      	movs	r1, #0
 8007476:	1d20      	adds	r0, r4, #4
 8007478:	f005 f8e4 	bl	800c644 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800747c:	230f      	movs	r3, #15
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800747e:	f104 0208 	add.w	r2, r4, #8
 8007482:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 8007486:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8007488:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 800748a:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 800748c:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800748e:	462b      	mov	r3, r5
 8007490:	f853 0b04 	ldr.w	r0, [r3], #4
 8007494:	428b      	cmp	r3, r1
 8007496:	f842 0b04 	str.w	r0, [r2], #4
 800749a:	d1f9      	bne.n	8007490 <ip4_reass+0x94>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800749c:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80074a0:	f3ca 070c 	ubfx	r7, sl, #0, #13
  if (is_last) {
 80074a4:	f01b 0b20 	ands.w	fp, fp, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 80074a8:	ea4f 07c7 	mov.w	r7, r7, lsl #3
  if (is_last) {
 80074ac:	d10a      	bne.n	80074c4 <ip4_reass+0xc8>
    u16_t datagram_len = (u16_t)(offset + len);
 80074ae:	9b01      	ldr	r3, [sp, #4]
 80074b0:	18fb      	adds	r3, r7, r3
 80074b2:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80074b4:	429f      	cmp	r7, r3
 80074b6:	f200 8129 	bhi.w	800770c <ip4_reass+0x310>
 80074ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80074be:	4293      	cmp	r3, r2
 80074c0:	f200 8124 	bhi.w	800770c <ip4_reass+0x310>
  fraghdr = (struct ip_hdr *)new_p->payload;
 80074c4:	f8d8 5004 	ldr.w	r5, [r8, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80074c8:	8868      	ldrh	r0, [r5, #2]
 80074ca:	f000 fa55 	bl	8007978 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80074ce:	782b      	ldrb	r3, [r5, #0]
 80074d0:	f003 030f 	and.w	r3, r3, #15
  if (hlen > len) {
 80074d4:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 80074d8:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80074dc:	f0c0 8116 	bcc.w	800770c <ip4_reass+0x310>
  len = (u16_t)(len - hlen);
 80074e0:	1a80      	subs	r0, r0, r2
 80074e2:	fa1f fa80 	uxth.w	sl, r0
  offset = IPH_OFFSET_BYTES(fraghdr);
 80074e6:	88e8      	ldrh	r0, [r5, #6]
 80074e8:	f000 fa46 	bl	8007978 <lwip_htons>
 80074ec:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 80074f0:	f8d8 6004 	ldr.w	r6, [r8, #4]
  iprh->next_pbuf = NULL;
 80074f4:	2500      	movs	r5, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 80074f6:	00c0      	lsls	r0, r0, #3
  iprh->next_pbuf = NULL;
 80074f8:	7035      	strb	r5, [r6, #0]
  iprh->end = (u16_t)(offset + len);
 80074fa:	eb0a 0300 	add.w	r3, sl, r0
  iprh->next_pbuf = NULL;
 80074fe:	7075      	strb	r5, [r6, #1]
 8007500:	70b5      	strb	r5, [r6, #2]
  iprh->end = (u16_t)(offset + len);
 8007502:	fa1f fc83 	uxth.w	ip, r3
  iprh->next_pbuf = NULL;
 8007506:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8007508:	80b0      	strh	r0, [r6, #4]
  if (iprh->end < offset) {
 800750a:	4560      	cmp	r0, ip
  iprh->end = (u16_t)(offset + len);
 800750c:	80f3      	strh	r3, [r6, #6]
  if (iprh->end < offset) {
 800750e:	f200 80fd 	bhi.w	800770c <ip4_reass+0x310>
  for (q = ipr->p; q != NULL;) {
 8007512:	f8d4 e004 	ldr.w	lr, [r4, #4]
  int valid = 1;
 8007516:	f04f 0a01 	mov.w	sl, #1
  for (q = ipr->p; q != NULL;) {
 800751a:	4671      	mov	r1, lr
 800751c:	bb61      	cbnz	r1, 8007578 <ip4_reass+0x17c>
    if (iprh_prev != NULL) {
 800751e:	2d00      	cmp	r5, #0
 8007520:	f040 80ae 	bne.w	8007680 <ip4_reass+0x284>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8007524:	f1be 0f00 	cmp.w	lr, #0
 8007528:	f000 809a 	beq.w	8007660 <ip4_reass+0x264>
 800752c:	4b82      	ldr	r3, [pc, #520]	; (8007738 <ip4_reass+0x33c>)
 800752e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8007532:	4982      	ldr	r1, [pc, #520]	; (800773c <ip4_reass+0x340>)
 8007534:	4882      	ldr	r0, [pc, #520]	; (8007740 <ip4_reass+0x344>)
 8007536:	f005 f88d 	bl	800c654 <iprintf>
 800753a:	e091      	b.n	8007660 <ip4_reass+0x264>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800753c:	4601      	mov	r1, r0
 800753e:	4628      	mov	r0, r5
 8007540:	f7ff feda 	bl	80072f8 <ip_reass_remove_oldest_datagram>
 8007544:	b120      	cbz	r0, 8007550 <ip4_reass+0x154>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8007546:	88b3      	ldrh	r3, [r6, #4]
 8007548:	444b      	add	r3, r9
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800754a:	2b0a      	cmp	r3, #10
 800754c:	f77f af7c 	ble.w	8007448 <ip4_reass+0x4c>
  pbuf_free(p);
 8007550:	4640      	mov	r0, r8
 8007552:	f000 ffc5 	bl	80084e0 <pbuf_free>
  return NULL;
 8007556:	2600      	movs	r6, #0
 8007558:	e07c      	b.n	8007654 <ip4_reass+0x258>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800755a:	68eb      	ldr	r3, [r5, #12]
 800755c:	6962      	ldr	r2, [r4, #20]
 800755e:	429a      	cmp	r2, r3
 8007560:	d108      	bne.n	8007574 <ip4_reass+0x178>
 8007562:	692b      	ldr	r3, [r5, #16]
 8007564:	69a2      	ldr	r2, [r4, #24]
 8007566:	429a      	cmp	r2, r3
 8007568:	d104      	bne.n	8007574 <ip4_reass+0x178>
 800756a:	89a2      	ldrh	r2, [r4, #12]
 800756c:	88ab      	ldrh	r3, [r5, #4]
 800756e:	429a      	cmp	r2, r3
 8007570:	f000 80f2 	beq.w	8007758 <ip4_reass+0x35c>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8007574:	6824      	ldr	r4, [r4, #0]
 8007576:	e768      	b.n	800744a <ip4_reass+0x4e>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8007578:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 800757a:	889a      	ldrh	r2, [r3, #4]
 800757c:	4290      	cmp	r0, r2
 800757e:	d272      	bcs.n	8007666 <ip4_reass+0x26a>
      iprh->next_pbuf = q;
 8007580:	6031      	str	r1, [r6, #0]
      if (iprh_prev != NULL) {
 8007582:	2d00      	cmp	r5, #0
 8007584:	d06a      	beq.n	800765c <ip4_reass+0x260>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8007586:	88eb      	ldrh	r3, [r5, #6]
 8007588:	4298      	cmp	r0, r3
 800758a:	f0c0 80bf 	bcc.w	800770c <ip4_reass+0x310>
 800758e:	4594      	cmp	ip, r2
 8007590:	f200 80bc 	bhi.w	800770c <ip4_reass+0x310>
        if (iprh_prev->end != iprh->start) {
 8007594:	4298      	cmp	r0, r3
        iprh_prev->next_pbuf = new_p;
 8007596:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800759a:	f040 80f9 	bne.w	8007790 <ip4_reass+0x394>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800759e:	f1bb 0f00 	cmp.w	fp, #0
 80075a2:	d004      	beq.n	80075ae <ip4_reass+0x1b2>
 80075a4:	7fa3      	ldrb	r3, [r4, #30]
 80075a6:	f013 0301 	ands.w	r3, r3, #1
 80075aa:	f000 80a0 	beq.w	80076ee <ip4_reass+0x2f2>
    if (valid) {
 80075ae:	f1ba 0f00 	cmp.w	sl, #0
 80075b2:	d175      	bne.n	80076a0 <ip4_reass+0x2a4>
          q = iprh->next_pbuf;
 80075b4:	f04f 0a00 	mov.w	sl, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80075b8:	4b5e      	ldr	r3, [pc, #376]	; (8007734 <ip4_reass+0x338>)
 80075ba:	8898      	ldrh	r0, [r3, #4]
 80075bc:	4698      	mov	r8, r3
 80075be:	4481      	add	r9, r0
 80075c0:	f8a3 9004 	strh.w	r9, [r3, #4]
  if (is_last) {
 80075c4:	f1bb 0f00 	cmp.w	fp, #0
 80075c8:	d106      	bne.n	80075d8 <ip4_reass+0x1dc>
    u16_t datagram_len = (u16_t)(offset + len);
 80075ca:	9b01      	ldr	r3, [sp, #4]
 80075cc:	441f      	add	r7, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80075ce:	7fa3      	ldrb	r3, [r4, #30]
 80075d0:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 80075d4:	83a7      	strh	r7, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80075d6:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80075d8:	f1ba 0f01 	cmp.w	sl, #1
 80075dc:	d1bb      	bne.n	8007556 <ip4_reass+0x15a>
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80075de:	6863      	ldr	r3, [r4, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80075e0:	f104 011c 	add.w	r1, r4, #28
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80075e4:	8ba0      	ldrh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80075e6:	685e      	ldr	r6, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80075e8:	f104 0308 	add.w	r3, r4, #8
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80075ec:	3014      	adds	r0, #20
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80075ee:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80075f0:	4632      	mov	r2, r6
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80075f2:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80075f4:	f853 7b04 	ldr.w	r7, [r3], #4
 80075f8:	428b      	cmp	r3, r1
 80075fa:	f842 7b04 	str.w	r7, [r2], #4
 80075fe:	d1f9      	bne.n	80075f4 <ip4_reass+0x1f8>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8007600:	f000 f9ba 	bl	8007978 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8007604:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8007606:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8007608:	71b3      	strb	r3, [r6, #6]
 800760a:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800760c:	72b3      	strb	r3, [r6, #10]
 800760e:	72f3      	strb	r3, [r6, #11]
    p = ipr->p;
 8007610:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8007612:	2d00      	cmp	r5, #0
 8007614:	d16d      	bne.n	80076f2 <ip4_reass+0x2f6>
    if (ipr == reassdatagrams) {
 8007616:	f8d8 3000 	ldr.w	r3, [r8]
        if (ipr_prev->next == ipr) {
 800761a:	42a3      	cmp	r3, r4
 800761c:	d002      	beq.n	8007624 <ip4_reass+0x228>
 800761e:	461d      	mov	r5, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8007620:	2b00      	cmp	r3, #0
 8007622:	d171      	bne.n	8007708 <ip4_reass+0x30c>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8007624:	4620      	mov	r0, r4
 8007626:	4629      	mov	r1, r5
 8007628:	f7ff fdd0 	bl	80071cc <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 800762c:	4630      	mov	r0, r6
 800762e:	f001 f891 	bl	8008754 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8007632:	f8b8 3004 	ldrh.w	r3, [r8, #4]
    clen = pbuf_clen(p);
 8007636:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8007638:	4283      	cmp	r3, r0
 800763a:	d206      	bcs.n	800764a <ip4_reass+0x24e>
 800763c:	4b3e      	ldr	r3, [pc, #248]	; (8007738 <ip4_reass+0x33c>)
 800763e:	f240 229b 	movw	r2, #667	; 0x29b
 8007642:	4940      	ldr	r1, [pc, #256]	; (8007744 <ip4_reass+0x348>)
 8007644:	483e      	ldr	r0, [pc, #248]	; (8007740 <ip4_reass+0x344>)
 8007646:	f005 f805 	bl	800c654 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800764a:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 800764e:	1b04      	subs	r4, r0, r4
 8007650:	f8a8 4004 	strh.w	r4, [r8, #4]
}
 8007654:	4630      	mov	r0, r6
 8007656:	b003      	add	sp, #12
 8007658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (iprh->end > iprh_tmp->start) {
 800765c:	4594      	cmp	ip, r2
 800765e:	d855      	bhi.n	800770c <ip4_reass+0x310>
      ipr->p = new_p;
 8007660:	f8c4 8004 	str.w	r8, [r4, #4]
 8007664:	e79b      	b.n	800759e <ip4_reass+0x1a2>
    } else if (iprh->start == iprh_tmp->start) {
 8007666:	d051      	beq.n	800770c <ip4_reass+0x310>
    } else if (iprh->start < iprh_tmp->end) {
 8007668:	88d9      	ldrh	r1, [r3, #6]
 800766a:	4281      	cmp	r1, r0
 800766c:	d84e      	bhi.n	800770c <ip4_reass+0x310>
      if (iprh_prev != NULL) {
 800766e:	b125      	cbz	r5, 800767a <ip4_reass+0x27e>
        if (iprh_prev->end != iprh_tmp->start) {
 8007670:	88e9      	ldrh	r1, [r5, #6]
          valid = 0;
 8007672:	4291      	cmp	r1, r2
 8007674:	bf18      	it	ne
 8007676:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 800767a:	6819      	ldr	r1, [r3, #0]
 800767c:	461d      	mov	r5, r3
 800767e:	e74d      	b.n	800751c <ip4_reass+0x120>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8007680:	88eb      	ldrh	r3, [r5, #6]
 8007682:	4283      	cmp	r3, r0
 8007684:	d906      	bls.n	8007694 <ip4_reass+0x298>
 8007686:	4b2c      	ldr	r3, [pc, #176]	; (8007738 <ip4_reass+0x33c>)
 8007688:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800768c:	492e      	ldr	r1, [pc, #184]	; (8007748 <ip4_reass+0x34c>)
 800768e:	482c      	ldr	r0, [pc, #176]	; (8007740 <ip4_reass+0x344>)
 8007690:	f004 ffe0 	bl	800c654 <iprintf>
      if (iprh_prev->end != iprh->start) {
 8007694:	88ea      	ldrh	r2, [r5, #6]
      iprh_prev->next_pbuf = new_p;
 8007696:	f8c5 8000 	str.w	r8, [r5]
      if (iprh_prev->end != iprh->start) {
 800769a:	88b3      	ldrh	r3, [r6, #4]
 800769c:	429a      	cmp	r2, r3
 800769e:	e77c      	b.n	800759a <ip4_reass+0x19e>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80076a0:	6863      	ldr	r3, [r4, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d086      	beq.n	80075b4 <ip4_reass+0x1b8>
 80076a6:	6859      	ldr	r1, [r3, #4]
 80076a8:	888b      	ldrh	r3, [r1, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d182      	bne.n	80075b4 <ip4_reass+0x1b8>
        q = iprh->next_pbuf;
 80076ae:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 80076b0:	b9a3      	cbnz	r3, 80076dc <ip4_reass+0x2e0>
          LWIP_ASSERT("sanity check",
 80076b2:	42b1      	cmp	r1, r6
 80076b4:	d106      	bne.n	80076c4 <ip4_reass+0x2c8>
 80076b6:	4b20      	ldr	r3, [pc, #128]	; (8007738 <ip4_reass+0x33c>)
 80076b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80076bc:	4923      	ldr	r1, [pc, #140]	; (800774c <ip4_reass+0x350>)
 80076be:	4820      	ldr	r0, [pc, #128]	; (8007740 <ip4_reass+0x344>)
 80076c0:	f004 ffc8 	bl	800c654 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80076c4:	6833      	ldr	r3, [r6, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	f43f af76 	beq.w	80075b8 <ip4_reass+0x1bc>
 80076cc:	4b1a      	ldr	r3, [pc, #104]	; (8007738 <ip4_reass+0x33c>)
 80076ce:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80076d2:	491f      	ldr	r1, [pc, #124]	; (8007750 <ip4_reass+0x354>)
 80076d4:	481a      	ldr	r0, [pc, #104]	; (8007740 <ip4_reass+0x344>)
 80076d6:	f004 ffbd 	bl	800c654 <iprintf>
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80076da:	e76d      	b.n	80075b8 <ip4_reass+0x1bc>
          iprh = (struct ip_reass_helper *)q->payload;
 80076dc:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80076de:	88f0      	ldrh	r0, [r6, #6]
 80076e0:	8893      	ldrh	r3, [r2, #4]
 80076e2:	4298      	cmp	r0, r3
 80076e4:	f47f af66 	bne.w	80075b4 <ip4_reass+0x1b8>
          q = iprh->next_pbuf;
 80076e8:	6813      	ldr	r3, [r2, #0]
 80076ea:	4616      	mov	r6, r2
 80076ec:	e7e0      	b.n	80076b0 <ip4_reass+0x2b4>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80076ee:	469a      	mov	sl, r3
 80076f0:	e762      	b.n	80075b8 <ip4_reass+0x1bc>
      iprh = (struct ip_reass_helper *)r->payload;
 80076f2:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80076f4:	2114      	movs	r1, #20
 80076f6:	4628      	mov	r0, r5
 80076f8:	f000 febe 	bl	8008478 <pbuf_remove_header>
      pbuf_cat(p, r);
 80076fc:	4629      	mov	r1, r5
 80076fe:	4630      	mov	r0, r6
 8007700:	f001 f84c 	bl	800879c <pbuf_cat>
      r = iprh->next_pbuf;
 8007704:	683d      	ldr	r5, [r7, #0]
 8007706:	e784      	b.n	8007612 <ip4_reass+0x216>
        if (ipr_prev->next == ipr) {
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	e786      	b.n	800761a <ip4_reass+0x21e>
  if (ipr->p == NULL) {
 800770c:	6863      	ldr	r3, [r4, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f47f af1e 	bne.w	8007550 <ip4_reass+0x154>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8007714:	4b07      	ldr	r3, [pc, #28]	; (8007734 <ip4_reass+0x338>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	42a3      	cmp	r3, r4
 800771a:	d006      	beq.n	800772a <ip4_reass+0x32e>
 800771c:	4b06      	ldr	r3, [pc, #24]	; (8007738 <ip4_reass+0x33c>)
 800771e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8007722:	490c      	ldr	r1, [pc, #48]	; (8007754 <ip4_reass+0x358>)
 8007724:	4806      	ldr	r0, [pc, #24]	; (8007740 <ip4_reass+0x344>)
 8007726:	f004 ff95 	bl	800c654 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800772a:	2100      	movs	r1, #0
 800772c:	4620      	mov	r0, r4
 800772e:	f7ff fd4d 	bl	80071cc <ip_reass_dequeue_datagram>
 8007732:	e70d      	b.n	8007550 <ip4_reass+0x154>
 8007734:	2400674c 	.word	0x2400674c
 8007738:	0801f3dd 	.word	0x0801f3dd
 800773c:	0801f4f9 	.word	0x0801f4f9
 8007740:	0801e3d3 	.word	0x0801e3d3
 8007744:	0801f55f 	.word	0x0801f55f
 8007748:	0801f4db 	.word	0x0801f4db
 800774c:	0801f530 	.word	0x0801f530
 8007750:	0801f53d 	.word	0x0801f53d
 8007754:	0801f57a 	.word	0x0801f57a
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8007758:	88e8      	ldrh	r0, [r5, #6]
 800775a:	f000 f90d 	bl	8007978 <lwip_htons>
 800775e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007762:	2800      	cmp	r0, #0
 8007764:	f47f ae9a 	bne.w	800749c <ip4_reass+0xa0>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8007768:	89e0      	ldrh	r0, [r4, #14]
 800776a:	f000 f905 	bl	8007978 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800776e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8007772:	2800      	cmp	r0, #0
 8007774:	f43f ae92 	beq.w	800749c <ip4_reass+0xa0>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8007778:	462b      	mov	r3, r5
 800777a:	f104 0208 	add.w	r2, r4, #8
 800777e:	f105 0114 	add.w	r1, r5, #20
 8007782:	f853 0b04 	ldr.w	r0, [r3], #4
 8007786:	428b      	cmp	r3, r1
 8007788:	f842 0b04 	str.w	r0, [r2], #4
 800778c:	d1f9      	bne.n	8007782 <ip4_reass+0x386>
 800778e:	e685      	b.n	800749c <ip4_reass+0xa0>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8007790:	f1bb 0f00 	cmp.w	fp, #0
 8007794:	f43f af0e 	beq.w	80075b4 <ip4_reass+0x1b8>
 8007798:	f04f 0a00 	mov.w	sl, #0
 800779c:	e702      	b.n	80075a4 <ip4_reass+0x1a8>
 800779e:	bf00      	nop

080077a0 <ip4_frag>:
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80077a0:	8c8b      	ldrh	r3, [r1, #36]	; 0x24
{
 80077a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077a6:	ed2d 8b02 	vpush	{d8}
 80077aa:	ee08 2a10 	vmov	s16, r2
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80077ae:	f1b3 0214 	subs.w	r2, r3, #20
{
 80077b2:	b08b      	sub	sp, #44	; 0x2c
 80077b4:	4605      	mov	r5, r0
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80077b6:	bf48      	it	mi
 80077b8:	f1a3 020d 	submi.w	r2, r3, #13
{
 80077bc:	468a      	mov	sl, r1
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80077be:	f3c2 03cf 	ubfx	r3, r2, #3, #16
 80077c2:	9305      	str	r3, [sp, #20]
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80077c4:	6843      	ldr	r3, [r0, #4]
 80077c6:	9302      	str	r3, [sp, #8]
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	f003 030f 	and.w	r3, r3, #15
 80077ce:	2b05      	cmp	r3, #5
 80077d0:	ea4f 0783 	mov.w	r7, r3, lsl #2
 80077d4:	d109      	bne.n	80077ea <ip4_frag+0x4a>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80077d6:	8943      	ldrh	r3, [r0, #10]
 80077d8:	2b13      	cmp	r3, #19
 80077da:	d809      	bhi.n	80077f0 <ip4_frag+0x50>
 80077dc:	4b60      	ldr	r3, [pc, #384]	; (8007960 <ip4_frag+0x1c0>)
 80077de:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80077e2:	4960      	ldr	r1, [pc, #384]	; (8007964 <ip4_frag+0x1c4>)
 80077e4:	4860      	ldr	r0, [pc, #384]	; (8007968 <ip4_frag+0x1c8>)
 80077e6:	f004 ff35 	bl	800c654 <iprintf>
    return ERR_VAL;
 80077ea:	f06f 0005 	mvn.w	r0, #5
 80077ee:	e013      	b.n	8007818 <ip4_frag+0x78>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80077f0:	9b02      	ldr	r3, [sp, #8]
  u16_t newpbuflen = 0;
 80077f2:	2600      	movs	r6, #0
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80077f4:	88d8      	ldrh	r0, [r3, #6]
 80077f6:	f000 f8bf 	bl	8007978 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 80077fa:	f3c0 030c 	ubfx	r3, r0, #0, #13
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 80077fe:	892c      	ldrh	r4, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8007800:	9303      	str	r3, [sp, #12]
  mf_set = tmp & IP_MF;
 8007802:	f400 5300 	and.w	r3, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8007806:	3c14      	subs	r4, #20
 8007808:	9307      	str	r3, [sp, #28]

  while (left) {
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800780a:	9b05      	ldr	r3, [sp, #20]
  left = (u16_t)(p->tot_len - IP_HLEN);
 800780c:	b2a4      	uxth	r4, r4
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800780e:	00db      	lsls	r3, r3, #3
 8007810:	b29b      	uxth	r3, r3
 8007812:	9306      	str	r3, [sp, #24]
  while (left) {
 8007814:	b92c      	cbnz	r4, 8007822 <ip4_frag+0x82>
    pbuf_free(rambuf);
    left = (u16_t)(left - fragsize);
    ofo = (u16_t)(ofo + nfb);
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8007816:	4620      	mov	r0, r4
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 8007818:	b00b      	add	sp, #44	; 0x2c
 800781a:	ecbd 8b02 	vpop	{d8}
 800781e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8007822:	9b06      	ldr	r3, [sp, #24]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007824:	f44f 7220 	mov.w	r2, #640	; 0x280
 8007828:	2114      	movs	r1, #20
 800782a:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800782c:	42a3      	cmp	r3, r4
 800782e:	bf28      	it	cs
 8007830:	4623      	movcs	r3, r4
 8007832:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8007834:	f000 febc 	bl	80085b0 <pbuf_alloc>
    if (rambuf == NULL) {
 8007838:	4680      	mov	r8, r0
 800783a:	2800      	cmp	r0, #0
 800783c:	d036      	beq.n	80078ac <ip4_frag+0x10c>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800783e:	8943      	ldrh	r3, [r0, #10]
 8007840:	2b13      	cmp	r3, #19
 8007842:	d806      	bhi.n	8007852 <ip4_frag+0xb2>
 8007844:	4b46      	ldr	r3, [pc, #280]	; (8007960 <ip4_frag+0x1c0>)
 8007846:	f44f 7249 	mov.w	r2, #804	; 0x324
 800784a:	4948      	ldr	r1, [pc, #288]	; (800796c <ip4_frag+0x1cc>)
 800784c:	4846      	ldr	r0, [pc, #280]	; (8007968 <ip4_frag+0x1c8>)
 800784e:	f004 ff01 	bl	800c654 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8007852:	9b02      	ldr	r3, [sp, #8]
 8007854:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007858:	4619      	mov	r1, r3
 800785a:	3114      	adds	r1, #20
 800785c:	f853 0b04 	ldr.w	r0, [r3], #4
 8007860:	428b      	cmp	r3, r1
 8007862:	f842 0b04 	str.w	r0, [r2], #4
 8007866:	d1f9      	bne.n	800785c <ip4_frag+0xbc>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8007868:	f8d8 b004 	ldr.w	fp, [r8, #4]
    left_to_copy = fragsize;
 800786c:	f8dd 9010 	ldr.w	r9, [sp, #16]
    while (left_to_copy) {
 8007870:	f1b9 0f00 	cmp.w	r9, #0
 8007874:	d041      	beq.n	80078fa <ip4_frag+0x15a>
      u16_t plen = (u16_t)(p->len - poff);
 8007876:	896b      	ldrh	r3, [r5, #10]
 8007878:	1bde      	subs	r6, r3, r7
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800787a:	42bb      	cmp	r3, r7
      u16_t plen = (u16_t)(p->len - poff);
 800787c:	b2b6      	uxth	r6, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800787e:	d206      	bcs.n	800788e <ip4_frag+0xee>
 8007880:	4b37      	ldr	r3, [pc, #220]	; (8007960 <ip4_frag+0x1c0>)
 8007882:	f240 322d 	movw	r2, #813	; 0x32d
 8007886:	493a      	ldr	r1, [pc, #232]	; (8007970 <ip4_frag+0x1d0>)
 8007888:	4837      	ldr	r0, [pc, #220]	; (8007968 <ip4_frag+0x1c8>)
 800788a:	f004 fee3 	bl	800c654 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800788e:	454e      	cmp	r6, r9
 8007890:	bf28      	it	cs
 8007892:	464e      	movcs	r6, r9
      if (!newpbuflen) {
 8007894:	b916      	cbnz	r6, 800789c <ip4_frag+0xfc>
        p = p->next;
 8007896:	682d      	ldr	r5, [r5, #0]
        poff = 0;
 8007898:	2700      	movs	r7, #0
 800789a:	e7e9      	b.n	8007870 <ip4_frag+0xd0>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800789c:	2005      	movs	r0, #5
 800789e:	f000 fb85 	bl	8007fac <memp_malloc>
      if (pcr == NULL) {
 80078a2:	4603      	mov	r3, r0
 80078a4:	b928      	cbnz	r0, 80078b2 <ip4_frag+0x112>
        pbuf_free(rambuf);
 80078a6:	4640      	mov	r0, r8
 80078a8:	f000 fe1a 	bl	80084e0 <pbuf_free>
  return ERR_MEM;
 80078ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078b0:	e7b2      	b.n	8007818 <ip4_frag+0x78>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80078b2:	9601      	str	r6, [sp, #4]
 80078b4:	4631      	mov	r1, r6
 80078b6:	686a      	ldr	r2, [r5, #4]
 80078b8:	9008      	str	r0, [sp, #32]
 80078ba:	2000      	movs	r0, #0
 80078bc:	443a      	add	r2, r7
 80078be:	9200      	str	r2, [sp, #0]
 80078c0:	2241      	movs	r2, #65	; 0x41
 80078c2:	f000 fdbb 	bl	800843c <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 80078c6:	9b08      	ldr	r3, [sp, #32]
 80078c8:	b918      	cbnz	r0, 80078d2 <ip4_frag+0x132>
        ip_frag_free_pbuf_custom_ref(pcr);
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7ff fd50 	bl	8007370 <ip_frag_free_pbuf_custom_ref>
 80078d0:	e7e9      	b.n	80078a6 <ip4_frag+0x106>
 80078d2:	e9cd 0308 	strd	r0, r3, [sp, #32]
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80078d6:	eba9 0906 	sub.w	r9, r9, r6
      pbuf_ref(p);
 80078da:	4628      	mov	r0, r5
 80078dc:	f000 ff42 	bl	8008764 <pbuf_ref>
      pcr->original = p;
 80078e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80078e2:	4a24      	ldr	r2, [pc, #144]	; (8007974 <ip4_frag+0x1d4>)
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80078e4:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 80078e8:	9908      	ldr	r1, [sp, #32]
 80078ea:	4640      	mov	r0, r8
      pcr->original = p;
 80078ec:	615d      	str	r5, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80078ee:	611a      	str	r2, [r3, #16]
      pbuf_cat(rambuf, newpbuf);
 80078f0:	f000 ff54 	bl	800879c <pbuf_cat>
      if (left_to_copy) {
 80078f4:	f1b9 0f00 	cmp.w	r9, #0
 80078f8:	d1cd      	bne.n	8007896 <ip4_frag+0xf6>
    tmp = (IP_OFFMASK & (ofo));
 80078fa:	9b03      	ldr	r3, [sp, #12]
    poff = (u16_t)(poff + newpbuflen);
 80078fc:	4437      	add	r7, r6
    tmp = (IP_OFFMASK & (ofo));
 80078fe:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8007902:	f8ba 3024 	ldrh.w	r3, [sl, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 8007906:	b2bf      	uxth	r7, r7
    last = (left <= netif->mtu - IP_HLEN);
 8007908:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 800790a:	42a3      	cmp	r3, r4
 800790c:	dd01      	ble.n	8007912 <ip4_frag+0x172>
 800790e:	9b07      	ldr	r3, [sp, #28]
 8007910:	b10b      	cbz	r3, 8007916 <ip4_frag+0x176>
      tmp = tmp | IP_MF;
 8007912:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8007916:	f000 f82f 	bl	8007978 <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800791a:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800791c:	f8ab 0006 	strh.w	r0, [fp, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8007920:	f103 0014 	add.w	r0, r3, #20
 8007924:	b280      	uxth	r0, r0
 8007926:	f000 f827 	bl	8007978 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 800792a:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 800792c:	ee18 2a10 	vmov	r2, s16
 8007930:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8007932:	f8ab 0002 	strh.w	r0, [fp, #2]
    netif->output(netif, rambuf, dest);
 8007936:	4650      	mov	r0, sl
    IPH_CHKSUM_SET(iphdr, 0);
 8007938:	f88b 300a 	strb.w	r3, [fp, #10]
 800793c:	f88b 300b 	strb.w	r3, [fp, #11]
    netif->output(netif, rambuf, dest);
 8007940:	f8da 3014 	ldr.w	r3, [sl, #20]
 8007944:	4798      	blx	r3
    pbuf_free(rambuf);
 8007946:	4640      	mov	r0, r8
 8007948:	f000 fdca 	bl	80084e0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800794c:	9b04      	ldr	r3, [sp, #16]
    ofo = (u16_t)(ofo + nfb);
 800794e:	9a05      	ldr	r2, [sp, #20]
    left = (u16_t)(left - fragsize);
 8007950:	1ae4      	subs	r4, r4, r3
    ofo = (u16_t)(ofo + nfb);
 8007952:	9b03      	ldr	r3, [sp, #12]
 8007954:	4413      	add	r3, r2
    left = (u16_t)(left - fragsize);
 8007956:	b2a4      	uxth	r4, r4
    ofo = (u16_t)(ofo + nfb);
 8007958:	b29b      	uxth	r3, r3
 800795a:	9303      	str	r3, [sp, #12]
 800795c:	e75a      	b.n	8007814 <ip4_frag+0x74>
 800795e:	bf00      	nop
 8007960:	0801f3dd 	.word	0x0801f3dd
 8007964:	0801f59a 	.word	0x0801f59a
 8007968:	0801e3d3 	.word	0x0801e3d3
 800796c:	0801f5b5 	.word	0x0801f5b5
 8007970:	0801f5d5 	.word	0x0801f5d5
 8007974:	0800739d 	.word	0x0800739d

08007978 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8007978:	ba40      	rev16	r0, r0
}
 800797a:	b280      	uxth	r0, r0
 800797c:	4770      	bx	lr

0800797e <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 800797e:	ba00      	rev	r0, r0
 8007980:	4770      	bx	lr

08007982 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8007982:	b513      	push	{r0, r1, r4, lr}
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8007984:	2300      	movs	r3, #0
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8007986:	f010 0401 	ands.w	r4, r0, #1
  u16_t t = 0;
 800798a:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 800798e:	d007      	beq.n	80079a0 <lwip_standard_chksum+0x1e>
 8007990:	4299      	cmp	r1, r3
    ((u8_t *)&t)[1] = *pb++;
 8007992:	bfc2      	ittt	gt
 8007994:	f810 3b01 	ldrbgt.w	r3, [r0], #1
    len--;
 8007998:	f101 31ff 	addgt.w	r1, r1, #4294967295	; 0xffffffff
    ((u8_t *)&t)[1] = *pb++;
 800799c:	f88d 3007 	strbgt.w	r3, [sp, #7]
  u32_t sum = 0;
 80079a0:	2200      	movs	r2, #0
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80079a2:	2901      	cmp	r1, #1
 80079a4:	dc15      	bgt.n	80079d2 <lwip_standard_chksum+0x50>
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80079a6:	bf04      	itt	eq
 80079a8:	7803      	ldrbeq	r3, [r0, #0]
 80079aa:	f88d 3006 	strbeq.w	r3, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 80079ae:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80079b2:	4413      	add	r3, r2

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80079b4:	b298      	uxth	r0, r3
 80079b6:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 80079ba:	b298      	uxth	r0, r3
 80079bc:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80079c0:	b124      	cbz	r4, 80079cc <lwip_standard_chksum+0x4a>
    sum = SWAP_BYTES_IN_WORD(sum);
 80079c2:	0203      	lsls	r3, r0, #8
 80079c4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80079c8:	b29b      	uxth	r3, r3
 80079ca:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80079cc:	b280      	uxth	r0, r0
 80079ce:	b002      	add	sp, #8
 80079d0:	bd10      	pop	{r4, pc}
    sum += *ps++;
 80079d2:	f830 3b02 	ldrh.w	r3, [r0], #2
    len -= 2;
 80079d6:	3902      	subs	r1, #2
    sum += *ps++;
 80079d8:	441a      	add	r2, r3
    len -= 2;
 80079da:	e7e2      	b.n	80079a2 <lwip_standard_chksum+0x20>

080079dc <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80079dc:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80079de:	f7ff ffd0 	bl	8007982 <lwip_standard_chksum>
 80079e2:	43c0      	mvns	r0, r0
}
 80079e4:	b280      	uxth	r0, r0
 80079e6:	bd08      	pop	{r3, pc}

080079e8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80079e8:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80079ea:	f004 fd6b 	bl	800c4c4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80079ee:	f000 f80d 	bl	8007a0c <mem_init>
  memp_init();
 80079f2:	f000 fab5 	bl	8007f60 <memp_init>
  pbuf_init();
  netif_init();
 80079f6:	f000 fb77 	bl	80080e8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80079fa:	f004 fa91 	bl	800bf20 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80079fe:	f001 f845 	bl	8008a8c <tcp_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8007a02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8007a06:	f004 ba47 	b.w	800be98 <sys_timeouts_init>
	...

08007a0c <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007a0c:	4810      	ldr	r0, [pc, #64]	; (8007a50 <mem_init+0x44>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
 8007a0e:	f44f 5220 	mov.w	r2, #10240	; 0x2800
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007a12:	4b10      	ldr	r3, [pc, #64]	; (8007a54 <mem_init+0x48>)
  mem->prev = 0;
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
  ram_end->used = 1;
  ram_end->next = MEM_SIZE_ALIGNED;
 8007a14:	f04f 2128 	mov.w	r1, #671098880	; 0x28002800
  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007a18:	300c      	adds	r0, #12
{
 8007a1a:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8007a1c:	f840 3c0c 	str.w	r3, [r0, #-12]
  mem->next = MEM_SIZE_ALIGNED;
 8007a20:	601a      	str	r2, [r3, #0]
  mem->used = 0;
 8007a22:	2200      	movs	r2, #0
 8007a24:	711a      	strb	r2, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8007a26:	4a0c      	ldr	r2, [pc, #48]	; (8007a58 <mem_init+0x4c>)
 8007a28:	f840 2c08 	str.w	r2, [r0, #-8]
  ram_end->next = MEM_SIZE_ALIGNED;
 8007a2c:	6011      	str	r1, [r2, #0]
  ram_end->used = 1;
 8007a2e:	2101      	movs	r1, #1
 8007a30:	7111      	strb	r1, [r2, #4]
  lfree = (struct mem *)(void *)ram;
 8007a32:	f840 3c04 	str.w	r3, [r0, #-4]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8007a36:	f004 fd51 	bl	800c4dc <sys_mutex_new>
 8007a3a:	b140      	cbz	r0, 8007a4e <mem_init+0x42>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007a3c:	4b07      	ldr	r3, [pc, #28]	; (8007a5c <mem_init+0x50>)
 8007a3e:	f240 221f 	movw	r2, #543	; 0x21f
 8007a42:	4907      	ldr	r1, [pc, #28]	; (8007a60 <mem_init+0x54>)
 8007a44:	4807      	ldr	r0, [pc, #28]	; (8007a64 <mem_init+0x58>)
  }
}
 8007a46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8007a4a:	f004 be03 	b.w	800c654 <iprintf>
}
 8007a4e:	bd10      	pop	{r4, pc}
 8007a50:	24006754 	.word	0x24006754
 8007a54:	30044000 	.word	0x30044000
 8007a58:	30046800 	.word	0x30046800
 8007a5c:	0801f5e4 	.word	0x0801f5e4
 8007a60:	0801f656 	.word	0x0801f656
 8007a64:	0801e3d3 	.word	0x0801e3d3

08007a68 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f000 80b8 	beq.w	8007be2 <mem_free+0x17a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8007a72:	0783      	lsls	r3, r0, #30
 8007a74:	d00c      	beq.n	8007a90 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8007a76:	4b5b      	ldr	r3, [pc, #364]	; (8007be4 <mem_free+0x17c>)
 8007a78:	f240 2273 	movw	r2, #627	; 0x273
 8007a7c:	495a      	ldr	r1, [pc, #360]	; (8007be8 <mem_free+0x180>)
  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007a7e:	485b      	ldr	r0, [pc, #364]	; (8007bec <mem_free+0x184>)
 8007a80:	f004 fde8 	bl	800c654 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007a84:	f004 fd50 	bl	800c528 <sys_arch_protect>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007a88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MEM_STATS_INC_LOCKED(illegal);
 8007a8c:	f004 bd58 	b.w	800c540 <sys_arch_unprotect>
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007a90:	4f57      	ldr	r7, [pc, #348]	; (8007bf0 <mem_free+0x188>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007a92:	f1a0 0608 	sub.w	r6, r0, #8
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	463d      	mov	r5, r7
 8007a9a:	42b3      	cmp	r3, r6
 8007a9c:	d804      	bhi.n	8007aa8 <mem_free+0x40>
 8007a9e:	f100 030c 	add.w	r3, r0, #12
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d204      	bcs.n	8007ab2 <mem_free+0x4a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8007aa8:	4b4e      	ldr	r3, [pc, #312]	; (8007be4 <mem_free+0x17c>)
 8007aaa:	f240 227f 	movw	r2, #639	; 0x27f
 8007aae:	4951      	ldr	r1, [pc, #324]	; (8007bf4 <mem_free+0x18c>)
 8007ab0:	e7e5      	b.n	8007a7e <mem_free+0x16>
  LWIP_MEM_FREE_PROTECT();
 8007ab2:	f107 000c 	add.w	r0, r7, #12
 8007ab6:	f004 fd1f 	bl	800c4f8 <sys_mutex_lock>
  if (!mem->used) {
 8007aba:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8007abe:	b95b      	cbnz	r3, 8007ad8 <mem_free+0x70>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8007ac0:	4b48      	ldr	r3, [pc, #288]	; (8007be4 <mem_free+0x17c>)
 8007ac2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8007ac6:	494c      	ldr	r1, [pc, #304]	; (8007bf8 <mem_free+0x190>)
 8007ac8:	4848      	ldr	r0, [pc, #288]	; (8007bec <mem_free+0x184>)
 8007aca:	f004 fdc3 	bl	800c654 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007ace:	f107 000c 	add.w	r0, r7, #12
    LWIP_MEM_FREE_UNPROTECT();
 8007ad2:	f004 fd16 	bl	800c502 <sys_mutex_unlock>
    MEM_STATS_INC_LOCKED(illegal);
 8007ad6:	e7d5      	b.n	8007a84 <mem_free+0x1c>
  nmem = ptr_to_mem(mem->next);
 8007ad8:	f834 2c08 	ldrh.w	r2, [r4, #-8]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007adc:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007ae0:	d813      	bhi.n	8007b0a <mem_free+0xa2>
  pmem = ptr_to_mem(mem->prev);
 8007ae2:	f834 0c06 	ldrh.w	r0, [r4, #-6]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007ae6:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
 8007aea:	d80e      	bhi.n	8007b0a <mem_free+0xa2>
  return (mem_size_t)((u8_t *)mem - ram);
 8007aec:	6839      	ldr	r1, [r7, #0]
 8007aee:	1a73      	subs	r3, r6, r1
 8007af0:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007af2:	4283      	cmp	r3, r0
 8007af4:	d002      	beq.n	8007afc <mem_free+0x94>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007af6:	5a08      	ldrh	r0, [r1, r0]
 8007af8:	4298      	cmp	r0, r3
 8007afa:	d106      	bne.n	8007b0a <mem_free+0xa2>
  return (struct mem *)(void *)&ram[ptr];
 8007afc:	440a      	add	r2, r1
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007afe:	6868      	ldr	r0, [r5, #4]
 8007b00:	4282      	cmp	r2, r0
 8007b02:	d00b      	beq.n	8007b1c <mem_free+0xb4>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007b04:	8852      	ldrh	r2, [r2, #2]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d008      	beq.n	8007b1c <mem_free+0xb4>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007b0a:	4b36      	ldr	r3, [pc, #216]	; (8007be4 <mem_free+0x17c>)
 8007b0c:	f240 2295 	movw	r2, #661	; 0x295
 8007b10:	493a      	ldr	r1, [pc, #232]	; (8007bfc <mem_free+0x194>)
 8007b12:	4836      	ldr	r0, [pc, #216]	; (8007bec <mem_free+0x184>)
 8007b14:	f004 fd9e 	bl	800c654 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8007b18:	4839      	ldr	r0, [pc, #228]	; (8007c00 <mem_free+0x198>)
 8007b1a:	e7da      	b.n	8007ad2 <mem_free+0x6a>
  mem->used = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8007b22:	68ab      	ldr	r3, [r5, #8]
 8007b24:	42b3      	cmp	r3, r6
    lfree = mem;
 8007b26:	bf88      	it	hi
 8007b28:	60ae      	strhi	r6, [r5, #8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8007b2a:	428e      	cmp	r6, r1
 8007b2c:	d206      	bcs.n	8007b3c <mem_free+0xd4>
 8007b2e:	4b2d      	ldr	r3, [pc, #180]	; (8007be4 <mem_free+0x17c>)
 8007b30:	f240 12df 	movw	r2, #479	; 0x1df
 8007b34:	4933      	ldr	r1, [pc, #204]	; (8007c04 <mem_free+0x19c>)
 8007b36:	482d      	ldr	r0, [pc, #180]	; (8007bec <mem_free+0x184>)
 8007b38:	f004 fd8c 	bl	800c654 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8007b3c:	686b      	ldr	r3, [r5, #4]
 8007b3e:	429e      	cmp	r6, r3
 8007b40:	d306      	bcc.n	8007b50 <mem_free+0xe8>
 8007b42:	4b28      	ldr	r3, [pc, #160]	; (8007be4 <mem_free+0x17c>)
 8007b44:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007b48:	492f      	ldr	r1, [pc, #188]	; (8007c08 <mem_free+0x1a0>)
 8007b4a:	4828      	ldr	r0, [pc, #160]	; (8007bec <mem_free+0x184>)
 8007b4c:	f004 fd82 	bl	800c654 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8007b50:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8007b54:	b133      	cbz	r3, 8007b64 <mem_free+0xfc>
 8007b56:	4b23      	ldr	r3, [pc, #140]	; (8007be4 <mem_free+0x17c>)
 8007b58:	f240 12e1 	movw	r2, #481	; 0x1e1
 8007b5c:	492b      	ldr	r1, [pc, #172]	; (8007c0c <mem_free+0x1a4>)
 8007b5e:	4823      	ldr	r0, [pc, #140]	; (8007bec <mem_free+0x184>)
 8007b60:	f004 fd78 	bl	800c654 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8007b64:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8007b68:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8007b6c:	d906      	bls.n	8007b7c <mem_free+0x114>
 8007b6e:	4b1d      	ldr	r3, [pc, #116]	; (8007be4 <mem_free+0x17c>)
 8007b70:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8007b74:	4926      	ldr	r1, [pc, #152]	; (8007c10 <mem_free+0x1a8>)
 8007b76:	481d      	ldr	r0, [pc, #116]	; (8007bec <mem_free+0x184>)
 8007b78:	f004 fd6c 	bl	800c654 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8007b82:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8007b84:	4296      	cmp	r6, r2
 8007b86:	d012      	beq.n	8007bae <mem_free+0x146>
 8007b88:	7910      	ldrb	r0, [r2, #4]
 8007b8a:	b980      	cbnz	r0, 8007bae <mem_free+0x146>
 8007b8c:	6868      	ldr	r0, [r5, #4]
 8007b8e:	4282      	cmp	r2, r0
 8007b90:	d00d      	beq.n	8007bae <mem_free+0x146>
    if (lfree == nmem) {
 8007b92:	68a8      	ldr	r0, [r5, #8]
 8007b94:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8007b96:	5a5a      	ldrh	r2, [r3, r1]
 8007b98:	f824 2c08 	strh.w	r2, [r4, #-8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007b9c:	5a5a      	ldrh	r2, [r3, r1]
      lfree = mem;
 8007b9e:	bf08      	it	eq
 8007ba0:	60ae      	streq	r6, [r5, #8]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8007ba2:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8007ba6:	bf1e      	ittt	ne
 8007ba8:	18d2      	addne	r2, r2, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8007baa:	1af1      	subne	r1, r6, r3
 8007bac:	8051      	strhne	r1, [r2, #2]
  pmem = ptr_to_mem(mem->prev);
 8007bae:	f834 2c06 	ldrh.w	r2, [r4, #-6]
  return (struct mem *)(void *)&ram[ptr];
 8007bb2:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8007bb4:	428e      	cmp	r6, r1
 8007bb6:	d00f      	beq.n	8007bd8 <mem_free+0x170>
 8007bb8:	7908      	ldrb	r0, [r1, #4]
 8007bba:	b968      	cbnz	r0, 8007bd8 <mem_free+0x170>
    if (lfree == mem) {
 8007bbc:	68a8      	ldr	r0, [r5, #8]
 8007bbe:	4286      	cmp	r6, r0
      lfree = pmem;
 8007bc0:	bf08      	it	eq
 8007bc2:	60a9      	streq	r1, [r5, #8]
    pmem->next = mem->next;
 8007bc4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8007bc8:	5299      	strh	r1, [r3, r2]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8007bca:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8007bce:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8007bd2:	bf1c      	itt	ne
 8007bd4:	185b      	addne	r3, r3, r1
 8007bd6:	805a      	strhne	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007bd8:	4809      	ldr	r0, [pc, #36]	; (8007c00 <mem_free+0x198>)
}
 8007bda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8007bde:	f004 bc90 	b.w	800c502 <sys_mutex_unlock>
}
 8007be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007be4:	0801f5e4 	.word	0x0801f5e4
 8007be8:	0801f671 	.word	0x0801f671
 8007bec:	0801e3d3 	.word	0x0801e3d3
 8007bf0:	24006754 	.word	0x24006754
 8007bf4:	0801f692 	.word	0x0801f692
 8007bf8:	0801f6ab 	.word	0x0801f6ab
 8007bfc:	0801f6d1 	.word	0x0801f6d1
 8007c00:	24006760 	.word	0x24006760
 8007c04:	0801f703 	.word	0x0801f703
 8007c08:	0801f71a 	.word	0x0801f71a
 8007c0c:	0801f734 	.word	0x0801f734
 8007c10:	0801f74f 	.word	0x0801f74f

08007c14 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8007c14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007c18:	1ccc      	adds	r4, r1, #3
{
 8007c1a:	4605      	mov	r5, r0
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007c1c:	f024 0403 	bic.w	r4, r4, #3
 8007c20:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8007c22:	2c0b      	cmp	r4, #11
 8007c24:	d904      	bls.n	8007c30 <mem_trim+0x1c>
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007c26:	f5b4 5f20 	cmp.w	r4, #10240	; 0x2800
 8007c2a:	d902      	bls.n	8007c32 <mem_trim+0x1e>
    return NULL;
 8007c2c:	2500      	movs	r5, #0
 8007c2e:	e01a      	b.n	8007c66 <mem_trim+0x52>
    newsize = MIN_SIZE_ALIGNED;
 8007c30:	240c      	movs	r4, #12
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8007c32:	42a1      	cmp	r1, r4
 8007c34:	d8fa      	bhi.n	8007c2c <mem_trim+0x18>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8007c36:	4e47      	ldr	r6, [pc, #284]	; (8007d54 <mem_trim+0x140>)
 8007c38:	6833      	ldr	r3, [r6, #0]
 8007c3a:	42ab      	cmp	r3, r5
 8007c3c:	d802      	bhi.n	8007c44 <mem_trim+0x30>
 8007c3e:	6873      	ldr	r3, [r6, #4]
 8007c40:	42ab      	cmp	r3, r5
 8007c42:	d806      	bhi.n	8007c52 <mem_trim+0x3e>
 8007c44:	4b44      	ldr	r3, [pc, #272]	; (8007d58 <mem_trim+0x144>)
 8007c46:	f240 22d1 	movw	r2, #721	; 0x2d1
 8007c4a:	4944      	ldr	r1, [pc, #272]	; (8007d5c <mem_trim+0x148>)
 8007c4c:	4844      	ldr	r0, [pc, #272]	; (8007d60 <mem_trim+0x14c>)
 8007c4e:	f004 fd01 	bl	800c654 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8007c52:	6833      	ldr	r3, [r6, #0]
 8007c54:	42ab      	cmp	r3, r5
 8007c56:	d802      	bhi.n	8007c5e <mem_trim+0x4a>
 8007c58:	6872      	ldr	r2, [r6, #4]
 8007c5a:	42aa      	cmp	r2, r5
 8007c5c:	d806      	bhi.n	8007c6c <mem_trim+0x58>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8007c5e:	f004 fc63 	bl	800c528 <sys_arch_protect>
 8007c62:	f004 fc6d 	bl	800c540 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8007c66:	4628      	mov	r0, r5
 8007c68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8007c6c:	f1a5 0708 	sub.w	r7, r5, #8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007c70:	f835 8c08 	ldrh.w	r8, [r5, #-8]
  return (mem_size_t)((u8_t *)mem - ram);
 8007c74:	1aff      	subs	r7, r7, r3
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007c76:	f1a8 0808 	sub.w	r8, r8, #8
  return (mem_size_t)((u8_t *)mem - ram);
 8007c7a:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8007c7c:	eba8 0807 	sub.w	r8, r8, r7
 8007c80:	fa1f f888 	uxth.w	r8, r8
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8007c84:	45a0      	cmp	r8, r4
 8007c86:	d207      	bcs.n	8007c98 <mem_trim+0x84>
 8007c88:	4b33      	ldr	r3, [pc, #204]	; (8007d58 <mem_trim+0x144>)
 8007c8a:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8007c8e:	4935      	ldr	r1, [pc, #212]	; (8007d64 <mem_trim+0x150>)
 8007c90:	4833      	ldr	r0, [pc, #204]	; (8007d60 <mem_trim+0x14c>)
 8007c92:	f004 fcdf 	bl	800c654 <iprintf>
  if (newsize > size) {
 8007c96:	e7c9      	b.n	8007c2c <mem_trim+0x18>
  if (newsize == size) {
 8007c98:	d0e5      	beq.n	8007c66 <mem_trim+0x52>
  LWIP_MEM_FREE_PROTECT();
 8007c9a:	4833      	ldr	r0, [pc, #204]	; (8007d68 <mem_trim+0x154>)
 8007c9c:	f004 fc2c 	bl	800c4f8 <sys_mutex_lock>
  mem2 = ptr_to_mem(mem->next);
 8007ca0:	f835 9c08 	ldrh.w	r9, [r5, #-8]
  return (struct mem *)(void *)&ram[ptr];
 8007ca4:	f8d6 b000 	ldr.w	fp, [r6]
 8007ca8:	eb0b 0a09 	add.w	sl, fp, r9
  if (mem2->used == 0) {
 8007cac:	f89a 3004 	ldrb.w	r3, [sl, #4]
 8007cb0:	bb3b      	cbnz	r3, 8007d02 <mem_trim+0xee>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007cb2:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
 8007cb6:	d106      	bne.n	8007cc6 <mem_trim+0xb2>
 8007cb8:	4b27      	ldr	r3, [pc, #156]	; (8007d58 <mem_trim+0x144>)
 8007cba:	f240 22f5 	movw	r2, #757	; 0x2f5
 8007cbe:	492b      	ldr	r1, [pc, #172]	; (8007d6c <mem_trim+0x158>)
 8007cc0:	4827      	ldr	r0, [pc, #156]	; (8007d60 <mem_trim+0x14c>)
 8007cc2:	f004 fcc7 	bl	800c654 <iprintf>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007cc6:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 8007cca:	68b1      	ldr	r1, [r6, #8]
    next = mem2->next;
 8007ccc:	f83b 0009 	ldrh.w	r0, [fp, r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007cd0:	441c      	add	r4, r3
 8007cd2:	6833      	ldr	r3, [r6, #0]
    if (lfree == mem2) {
 8007cd4:	4551      	cmp	r1, sl
    mem2->used = 0;
 8007cd6:	f04f 0100 	mov.w	r1, #0
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007cda:	b2a2      	uxth	r2, r4
  return (struct mem *)(void *)&ram[ptr];
 8007cdc:	fa13 f484 	uxtah	r4, r3, r4
    mem2->used = 0;
 8007ce0:	7121      	strb	r1, [r4, #4]
    mem2->next = next;
 8007ce2:	5298      	strh	r0, [r3, r2]
    mem2->prev = ptr;
 8007ce4:	8067      	strh	r7, [r4, #2]
    mem->next = ptr2;
 8007ce6:	f825 2c08 	strh.w	r2, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007cea:	5a99      	ldrh	r1, [r3, r2]
      lfree = ptr_to_mem(ptr2);
 8007cec:	bf08      	it	eq
 8007cee:	60b4      	streq	r4, [r6, #8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007cf0:	f5b1 5f20 	cmp.w	r1, #10240	; 0x2800
 8007cf4:	d001      	beq.n	8007cfa <mem_trim+0xe6>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007cf6:	440b      	add	r3, r1
 8007cf8:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8007cfa:	481b      	ldr	r0, [pc, #108]	; (8007d68 <mem_trim+0x154>)
 8007cfc:	f004 fc01 	bl	800c502 <sys_mutex_unlock>
  return rmem;
 8007d00:	e7b1      	b.n	8007c66 <mem_trim+0x52>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8007d02:	f104 0314 	add.w	r3, r4, #20
 8007d06:	4543      	cmp	r3, r8
 8007d08:	d8f7      	bhi.n	8007cfa <mem_trim+0xe6>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007d0a:	f107 0308 	add.w	r3, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007d0e:	f5b9 5f20 	cmp.w	r9, #10240	; 0x2800
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8007d12:	441c      	add	r4, r3
 8007d14:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8007d16:	d106      	bne.n	8007d26 <mem_trim+0x112>
 8007d18:	4b0f      	ldr	r3, [pc, #60]	; (8007d58 <mem_trim+0x144>)
 8007d1a:	f240 3216 	movw	r2, #790	; 0x316
 8007d1e:	4913      	ldr	r1, [pc, #76]	; (8007d6c <mem_trim+0x158>)
 8007d20:	480f      	ldr	r0, [pc, #60]	; (8007d60 <mem_trim+0x14c>)
 8007d22:	f004 fc97 	bl	800c654 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8007d26:	6833      	ldr	r3, [r6, #0]
    if (mem2 < lfree) {
 8007d28:	68b1      	ldr	r1, [r6, #8]
  return (struct mem *)(void *)&ram[ptr];
 8007d2a:	191a      	adds	r2, r3, r4
    if (mem2 < lfree) {
 8007d2c:	4291      	cmp	r1, r2
    mem2->used = 0;
 8007d2e:	f04f 0100 	mov.w	r1, #0
 8007d32:	7111      	strb	r1, [r2, #4]
    mem2->next = mem->next;
 8007d34:	f835 1c08 	ldrh.w	r1, [r5, #-8]
      lfree = mem2;
 8007d38:	bf88      	it	hi
 8007d3a:	60b2      	strhi	r2, [r6, #8]
    mem2->next = mem->next;
 8007d3c:	5319      	strh	r1, [r3, r4]
    mem2->prev = ptr;
 8007d3e:	8057      	strh	r7, [r2, #2]
    mem->next = ptr2;
 8007d40:	f825 4c08 	strh.w	r4, [r5, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007d44:	5b1a      	ldrh	r2, [r3, r4]
 8007d46:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007d4a:	bf1c      	itt	ne
 8007d4c:	189b      	addne	r3, r3, r2
 8007d4e:	805c      	strhne	r4, [r3, #2]
 8007d50:	e7d3      	b.n	8007cfa <mem_trim+0xe6>
 8007d52:	bf00      	nop
 8007d54:	24006754 	.word	0x24006754
 8007d58:	0801f5e4 	.word	0x0801f5e4
 8007d5c:	0801f779 	.word	0x0801f779
 8007d60:	0801e3d3 	.word	0x0801e3d3
 8007d64:	0801f790 	.word	0x0801f790
 8007d68:	24006760 	.word	0x24006760
 8007d6c:	0801f7b0 	.word	0x0801f7b0

08007d70 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8007d74:	2800      	cmp	r0, #0
 8007d76:	f000 8088 	beq.w	8007e8a <mem_malloc+0x11a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007d7a:	1cc5      	adds	r5, r0, #3
 8007d7c:	f025 0503 	bic.w	r5, r5, #3
 8007d80:	b2ad      	uxth	r5, r5
  if (size < MIN_SIZE_ALIGNED) {
 8007d82:	2d0b      	cmp	r5, #11
 8007d84:	d904      	bls.n	8007d90 <mem_malloc+0x20>
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007d86:	f5b5 5f20 	cmp.w	r5, #10240	; 0x2800
 8007d8a:	d902      	bls.n	8007d92 <mem_malloc+0x22>
    return NULL;
 8007d8c:	2000      	movs	r0, #0
 8007d8e:	e07c      	b.n	8007e8a <mem_malloc+0x11a>
    size = MIN_SIZE_ALIGNED;
 8007d90:	250c      	movs	r5, #12
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8007d92:	42a8      	cmp	r0, r5
 8007d94:	d8fa      	bhi.n	8007d8c <mem_malloc+0x1c>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8007d96:	4f42      	ldr	r7, [pc, #264]	; (8007ea0 <mem_malloc+0x130>)
 8007d98:	f107 000c 	add.w	r0, r7, #12
 8007d9c:	f004 fbac 	bl	800c4f8 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	68be      	ldr	r6, [r7, #8]
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007da4:	f5c5 5020 	rsb	r0, r5, #10240	; 0x2800
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007da8:	f06f 0c07 	mvn.w	ip, #7
  return (mem_size_t)((u8_t *)mem - ram);
 8007dac:	1ab6      	subs	r6, r6, r2
 8007dae:	b2b6      	uxth	r6, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8007db0:	4286      	cmp	r6, r0
 8007db2:	d303      	bcc.n	8007dbc <mem_malloc+0x4c>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8007db4:	483b      	ldr	r0, [pc, #236]	; (8007ea4 <mem_malloc+0x134>)
 8007db6:	f004 fba4 	bl	800c502 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8007dba:	e7e7      	b.n	8007d8c <mem_malloc+0x1c>
  return (struct mem *)(void *)&ram[ptr];
 8007dbc:	1994      	adds	r4, r2, r6
      if ((!mem->used) &&
 8007dbe:	5b91      	ldrh	r1, [r2, r6]
 8007dc0:	7923      	ldrb	r3, [r4, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d169      	bne.n	8007e9a <mem_malloc+0x12a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8007dc6:	ebac 0306 	sub.w	r3, ip, r6
 8007dca:	440b      	add	r3, r1
      if ((!mem->used) &&
 8007dcc:	42ab      	cmp	r3, r5
 8007dce:	d364      	bcc.n	8007e9a <mem_malloc+0x12a>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8007dd0:	f105 0214 	add.w	r2, r5, #20
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d35a      	bcc.n	8007e8e <mem_malloc+0x11e>
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007dd8:	f105 0808 	add.w	r8, r5, #8
 8007ddc:	44b0      	add	r8, r6
 8007dde:	fa1f f888 	uxth.w	r8, r8
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8007de2:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
 8007de6:	d106      	bne.n	8007df6 <mem_malloc+0x86>
 8007de8:	4b2f      	ldr	r3, [pc, #188]	; (8007ea8 <mem_malloc+0x138>)
 8007dea:	f240 3287 	movw	r2, #903	; 0x387
 8007dee:	492f      	ldr	r1, [pc, #188]	; (8007eac <mem_malloc+0x13c>)
 8007df0:	482f      	ldr	r0, [pc, #188]	; (8007eb0 <mem_malloc+0x140>)
 8007df2:	f004 fc2f 	bl	800c654 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8007df6:	683b      	ldr	r3, [r7, #0]
          mem2->used = 0;
 8007df8:	2100      	movs	r1, #0
  return (struct mem *)(void *)&ram[ptr];
 8007dfa:	eb03 0208 	add.w	r2, r3, r8
          mem2->used = 0;
 8007dfe:	7111      	strb	r1, [r2, #4]
          mem2->next = mem->next;
 8007e00:	8821      	ldrh	r1, [r4, #0]
 8007e02:	f823 1008 	strh.w	r1, [r3, r8]
          mem2->prev = ptr;
 8007e06:	8056      	strh	r6, [r2, #2]
          mem->used = 1;
 8007e08:	2201      	movs	r2, #1
          mem->next = ptr2;
 8007e0a:	f8a4 8000 	strh.w	r8, [r4]
          mem->used = 1;
 8007e0e:	7122      	strb	r2, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8007e10:	f833 2008 	ldrh.w	r2, [r3, r8]
 8007e14:	f5b2 5f20 	cmp.w	r2, #10240	; 0x2800
 8007e18:	d002      	beq.n	8007e20 <mem_malloc+0xb0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f8a3 8002 	strh.w	r8, [r3, #2]
        if (mem == lfree) {
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	42a3      	cmp	r3, r4
 8007e24:	d110      	bne.n	8007e48 <mem_malloc+0xd8>
  return (struct mem *)(void *)&ram[ptr];
 8007e26:	e9d7 0100 	ldrd	r0, r1, [r7]
          while (cur->used && cur != ram_end) {
 8007e2a:	791a      	ldrb	r2, [r3, #4]
 8007e2c:	b10a      	cbz	r2, 8007e32 <mem_malloc+0xc2>
 8007e2e:	4299      	cmp	r1, r3
 8007e30:	d130      	bne.n	8007e94 <mem_malloc+0x124>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007e32:	4299      	cmp	r1, r3
          lfree = cur;
 8007e34:	60bb      	str	r3, [r7, #8]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8007e36:	d007      	beq.n	8007e48 <mem_malloc+0xd8>
 8007e38:	b132      	cbz	r2, 8007e48 <mem_malloc+0xd8>
 8007e3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ea8 <mem_malloc+0x138>)
 8007e3c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8007e40:	491c      	ldr	r1, [pc, #112]	; (8007eb4 <mem_malloc+0x144>)
 8007e42:	481b      	ldr	r0, [pc, #108]	; (8007eb0 <mem_malloc+0x140>)
 8007e44:	f004 fc06 	bl	800c654 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007e48:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
 8007e4a:	4816      	ldr	r0, [pc, #88]	; (8007ea4 <mem_malloc+0x134>)
 8007e4c:	f004 fb59 	bl	800c502 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4425      	add	r5, r4
 8007e54:	42ab      	cmp	r3, r5
 8007e56:	d206      	bcs.n	8007e66 <mem_malloc+0xf6>
 8007e58:	4b13      	ldr	r3, [pc, #76]	; (8007ea8 <mem_malloc+0x138>)
 8007e5a:	f240 32b9 	movw	r2, #953	; 0x3b9
 8007e5e:	4916      	ldr	r1, [pc, #88]	; (8007eb8 <mem_malloc+0x148>)
 8007e60:	4813      	ldr	r0, [pc, #76]	; (8007eb0 <mem_malloc+0x140>)
 8007e62:	f004 fbf7 	bl	800c654 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8007e66:	07a3      	lsls	r3, r4, #30
 8007e68:	d00d      	beq.n	8007e86 <mem_malloc+0x116>
 8007e6a:	4b0f      	ldr	r3, [pc, #60]	; (8007ea8 <mem_malloc+0x138>)
 8007e6c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8007e70:	4912      	ldr	r1, [pc, #72]	; (8007ebc <mem_malloc+0x14c>)
 8007e72:	480f      	ldr	r0, [pc, #60]	; (8007eb0 <mem_malloc+0x140>)
 8007e74:	f004 fbee 	bl	800c654 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007e78:	4b0b      	ldr	r3, [pc, #44]	; (8007ea8 <mem_malloc+0x138>)
 8007e7a:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007e7e:	4910      	ldr	r1, [pc, #64]	; (8007ec0 <mem_malloc+0x150>)
 8007e80:	480b      	ldr	r0, [pc, #44]	; (8007eb0 <mem_malloc+0x140>)
 8007e82:	f004 fbe7 	bl	800c654 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8007e86:	f104 0008 	add.w	r0, r4, #8
}
 8007e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          mem->used = 1;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	7123      	strb	r3, [r4, #4]
 8007e92:	e7c5      	b.n	8007e20 <mem_malloc+0xb0>
  return (struct mem *)(void *)&ram[ptr];
 8007e94:	881b      	ldrh	r3, [r3, #0]
 8007e96:	4403      	add	r3, r0
 8007e98:	e7c7      	b.n	8007e2a <mem_malloc+0xba>
    size = MIN_SIZE_ALIGNED;
 8007e9a:	460e      	mov	r6, r1
 8007e9c:	e788      	b.n	8007db0 <mem_malloc+0x40>
 8007e9e:	bf00      	nop
 8007ea0:	24006754 	.word	0x24006754
 8007ea4:	24006760 	.word	0x24006760
 8007ea8:	0801f5e4 	.word	0x0801f5e4
 8007eac:	0801f7b0 	.word	0x0801f7b0
 8007eb0:	0801e3d3 	.word	0x0801e3d3
 8007eb4:	0801f7c1 	.word	0x0801f7c1
 8007eb8:	0801f7da 	.word	0x0801f7da
 8007ebc:	0801f80a 	.word	0x0801f80a
 8007ec0:	0801f839 	.word	0x0801f839

08007ec4 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8007ec4:	b538      	push	{r3, r4, r5, lr}
 8007ec6:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8007ec8:	f004 fb2e 	bl	800c528 <sys_arch_protect>
 8007ecc:	4605      	mov	r5, r0

  memp = *desc->tab;
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007ed2:	b15c      	cbz	r4, 8007eec <do_memp_malloc_pool.isra.0+0x28>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007ed4:	6822      	ldr	r2, [r4, #0]
 8007ed6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007ed8:	07a3      	lsls	r3, r4, #30
 8007eda:	d006      	beq.n	8007eea <do_memp_malloc_pool.isra.0+0x26>
 8007edc:	4b05      	ldr	r3, [pc, #20]	; (8007ef4 <do_memp_malloc_pool.isra.0+0x30>)
 8007ede:	f44f 728c 	mov.w	r2, #280	; 0x118
 8007ee2:	4905      	ldr	r1, [pc, #20]	; (8007ef8 <do_memp_malloc_pool.isra.0+0x34>)
 8007ee4:	4805      	ldr	r0, [pc, #20]	; (8007efc <do_memp_malloc_pool.isra.0+0x38>)
 8007ee6:	f004 fbb5 	bl	800c654 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007eea:	4628      	mov	r0, r5
    return ((u8_t *)memp + MEMP_SIZE);
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8007eec:	f004 fb28 	bl	800c540 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
 8007ef4:	0801f85c 	.word	0x0801f85c
 8007ef8:	0801f8cf 	.word	0x0801f8cf
 8007efc:	0801e3d3 	.word	0x0801e3d3

08007f00 <do_memp_free_pool.isra.0>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8007f00:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8007f02:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 8007f04:	4605      	mov	r5, r0
 8007f06:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8007f08:	d006      	beq.n	8007f18 <do_memp_free_pool.isra.0+0x18>
 8007f0a:	4b08      	ldr	r3, [pc, #32]	; (8007f2c <do_memp_free_pool.isra.0+0x2c>)
 8007f0c:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8007f10:	4907      	ldr	r1, [pc, #28]	; (8007f30 <do_memp_free_pool.isra.0+0x30>)
 8007f12:	4808      	ldr	r0, [pc, #32]	; (8007f34 <do_memp_free_pool.isra.0+0x34>)
 8007f14:	f004 fb9e 	bl	800c654 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8007f18:	f004 fb06 	bl	800c528 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8007f22:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8007f24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8007f28:	f004 bb0a 	b.w	800c540 <sys_arch_unprotect>
 8007f2c:	0801f85c 	.word	0x0801f85c
 8007f30:	0801f8f2 	.word	0x0801f8f2
 8007f34:	0801e3d3 	.word	0x0801e3d3

08007f38 <memp_init_pool>:
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007f38:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007f3e:	3303      	adds	r3, #3
{
 8007f40:	b530      	push	{r4, r5, lr}
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8007f42:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8007f46:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8007f48:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8007f4a:	4294      	cmp	r4, r2
 8007f4c:	dc00      	bgt.n	8007f50 <memp_init_pool+0x18>
}
 8007f4e:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8007f50:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8007f52:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8007f54:	601d      	str	r5, [r3, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007f56:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8007f58:	600b      	str	r3, [r1, #0]
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8007f5a:	442b      	add	r3, r5
  for (i = 0; i < desc->num; ++i) {
 8007f5c:	e7f5      	b.n	8007f4a <memp_init_pool+0x12>
	...

08007f60 <memp_init>:
{
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d05      	ldr	r5, [pc, #20]	; (8007f78 <memp_init+0x18>)
 8007f64:	240d      	movs	r4, #13
    memp_init_pool(memp_pools[i]);
 8007f66:	3c01      	subs	r4, #1
 8007f68:	f855 0b04 	ldr.w	r0, [r5], #4
 8007f6c:	f7ff ffe4 	bl	8007f38 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8007f70:	b2a4      	uxth	r4, r4
 8007f72:	2c00      	cmp	r4, #0
 8007f74:	d1f7      	bne.n	8007f66 <memp_init+0x6>
}
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	0800e1e8 	.word	0x0800e1e8

08007f7c <memp_malloc_pool>:
{
 8007f7c:	b510      	push	{r4, lr}
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007f7e:	4604      	mov	r4, r0
 8007f80:	b120      	cbz	r0, 8007f8c <memp_malloc_pool+0x10>
  return do_memp_malloc_pool(desc);
 8007f82:	3008      	adds	r0, #8
}
 8007f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return do_memp_malloc_pool(desc);
 8007f88:	f7ff bf9c 	b.w	8007ec4 <do_memp_malloc_pool.isra.0>
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007f8c:	4b04      	ldr	r3, [pc, #16]	; (8007fa0 <memp_malloc_pool+0x24>)
 8007f8e:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8007f92:	4904      	ldr	r1, [pc, #16]	; (8007fa4 <memp_malloc_pool+0x28>)
 8007f94:	4804      	ldr	r0, [pc, #16]	; (8007fa8 <memp_malloc_pool+0x2c>)
 8007f96:	f004 fb5d 	bl	800c654 <iprintf>
}
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	bd10      	pop	{r4, pc}
 8007f9e:	bf00      	nop
 8007fa0:	0801f85c 	.word	0x0801f85c
 8007fa4:	0801f912 	.word	0x0801f912
 8007fa8:	0801e3d3 	.word	0x0801e3d3

08007fac <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007fac:	280c      	cmp	r0, #12
{
 8007fae:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007fb0:	d807      	bhi.n	8007fc2 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007fb2:	4b08      	ldr	r3, [pc, #32]	; (8007fd4 <memp_malloc+0x28>)
 8007fb4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8007fb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8007fbc:	3008      	adds	r0, #8
 8007fbe:	f7ff bf81 	b.w	8007ec4 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8007fc2:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <memp_malloc+0x2c>)
 8007fc4:	f240 1257 	movw	r2, #343	; 0x157
 8007fc8:	4904      	ldr	r1, [pc, #16]	; (8007fdc <memp_malloc+0x30>)
 8007fca:	4805      	ldr	r0, [pc, #20]	; (8007fe0 <memp_malloc+0x34>)
 8007fcc:	f004 fb42 	bl	800c654 <iprintf>
}
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	bd08      	pop	{r3, pc}
 8007fd4:	0800e1e8 	.word	0x0800e1e8
 8007fd8:	0801f85c 	.word	0x0801f85c
 8007fdc:	0801f924 	.word	0x0801f924
 8007fe0:	0801e3d3 	.word	0x0801e3d3

08007fe4 <memp_free_pool>:
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8007fe4:	b948      	cbnz	r0, 8007ffa <memp_free_pool+0x16>
 8007fe6:	4b06      	ldr	r3, [pc, #24]	; (8008000 <memp_free_pool+0x1c>)
 8007fe8:	f240 1295 	movw	r2, #405	; 0x195
 8007fec:	4905      	ldr	r1, [pc, #20]	; (8008004 <memp_free_pool+0x20>)
 8007fee:	4806      	ldr	r0, [pc, #24]	; (8008008 <memp_free_pool+0x24>)
 8007ff0:	f004 bb30 	b.w	800c654 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
    return;
  }

  do_memp_free_pool(desc, mem);
 8007ff4:	3008      	adds	r0, #8
 8007ff6:	f7ff bf83 	b.w	8007f00 <do_memp_free_pool.isra.0>
  if ((desc == NULL) || (mem == NULL)) {
 8007ffa:	2900      	cmp	r1, #0
 8007ffc:	d1fa      	bne.n	8007ff4 <memp_free_pool+0x10>
}
 8007ffe:	4770      	bx	lr
 8008000:	0801f85c 	.word	0x0801f85c
 8008004:	0801f912 	.word	0x0801f912
 8008008:	0801e3d3 	.word	0x0801e3d3

0800800c <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800800c:	280c      	cmp	r0, #12
 800800e:	d906      	bls.n	800801e <memp_free+0x12>
 8008010:	4b07      	ldr	r3, [pc, #28]	; (8008030 <memp_free+0x24>)
 8008012:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008016:	4907      	ldr	r1, [pc, #28]	; (8008034 <memp_free+0x28>)
 8008018:	4807      	ldr	r0, [pc, #28]	; (8008038 <memp_free+0x2c>)
 800801a:	f004 bb1b 	b.w	800c654 <iprintf>

  if (mem == NULL) {
 800801e:	b129      	cbz	r1, 800802c <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008020:	4b06      	ldr	r3, [pc, #24]	; (800803c <memp_free+0x30>)
 8008022:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008026:	3008      	adds	r0, #8
 8008028:	f7ff bf6a 	b.w	8007f00 <do_memp_free_pool.isra.0>
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	0801f85c 	.word	0x0801f85c
 8008034:	0801f941 	.word	0x0801f941
 8008038:	0801e3d3 	.word	0x0801e3d3
 800803c:	0800e1e8 	.word	0x0800e1e8

08008040 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 8008040:	f06f 000b 	mvn.w	r0, #11
 8008044:	4770      	bx	lr
	...

08008048 <netif_issue_reports>:
{
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800804c:	4604      	mov	r4, r0
 800804e:	b930      	cbnz	r0, 800805e <netif_issue_reports+0x16>
 8008050:	4b0c      	ldr	r3, [pc, #48]	; (8008084 <netif_issue_reports+0x3c>)
 8008052:	f240 326d 	movw	r2, #877	; 0x36d
 8008056:	490c      	ldr	r1, [pc, #48]	; (8008088 <netif_issue_reports+0x40>)
 8008058:	480c      	ldr	r0, [pc, #48]	; (800808c <netif_issue_reports+0x44>)
 800805a:	f004 fafb 	bl	800c654 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800805e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8008062:	f003 0205 	and.w	r2, r3, #5
 8008066:	2a05      	cmp	r2, #5
 8008068:	d10b      	bne.n	8008082 <netif_issue_reports+0x3a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800806a:	07ea      	lsls	r2, r5, #31
 800806c:	d509      	bpl.n	8008082 <netif_issue_reports+0x3a>
 800806e:	6862      	ldr	r2, [r4, #4]
 8008070:	b13a      	cbz	r2, 8008082 <netif_issue_reports+0x3a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008072:	071b      	lsls	r3, r3, #28
 8008074:	d505      	bpl.n	8008082 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8008076:	1d21      	adds	r1, r4, #4
 8008078:	4620      	mov	r0, r4
}
 800807a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 800807e:	f7fe bc43 	b.w	8006908 <etharp_request>
}
 8008082:	bd38      	pop	{r3, r4, r5, pc}
 8008084:	0801f95c 	.word	0x0801f95c
 8008088:	0801f9d0 	.word	0x0801f9d0
 800808c:	0801e3d3 	.word	0x0801e3d3

08008090 <netif_do_set_ipaddr>:
{
 8008090:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008092:	4605      	mov	r5, r0
 8008094:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008096:	460c      	mov	r4, r1
 8008098:	b931      	cbnz	r1, 80080a8 <netif_do_set_ipaddr+0x18>
 800809a:	4b10      	ldr	r3, [pc, #64]	; (80080dc <netif_do_set_ipaddr+0x4c>)
 800809c:	f240 12cb 	movw	r2, #459	; 0x1cb
 80080a0:	490f      	ldr	r1, [pc, #60]	; (80080e0 <netif_do_set_ipaddr+0x50>)
 80080a2:	4810      	ldr	r0, [pc, #64]	; (80080e4 <netif_do_set_ipaddr+0x54>)
 80080a4:	f004 fad6 	bl	800c654 <iprintf>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80080a8:	686b      	ldr	r3, [r5, #4]
 80080aa:	6822      	ldr	r2, [r4, #0]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d101      	bne.n	80080b4 <netif_do_set_ipaddr+0x24>
  return 0; /* address unchanged */
 80080b0:	2000      	movs	r0, #0
 80080b2:	e010      	b.n	80080d6 <netif_do_set_ipaddr+0x46>
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80080b4:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80080b6:	a901      	add	r1, sp, #4
 80080b8:	4630      	mov	r0, r6
    *ip_2_ip4(&new_addr) = *ipaddr;
 80080ba:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80080bc:	f001 fcc6 	bl	8009a4c <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80080c0:	a901      	add	r1, sp, #4
 80080c2:	4630      	mov	r0, r6
 80080c4:	f004 f8c0 	bl	800c248 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80080c8:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80080ca:	4628      	mov	r0, r5
 80080cc:	2101      	movs	r1, #1
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80080ce:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80080d0:	f7ff ffba 	bl	8008048 <netif_issue_reports>
    return 1; /* address changed */
 80080d4:	2001      	movs	r0, #1
}
 80080d6:	b002      	add	sp, #8
 80080d8:	bd70      	pop	{r4, r5, r6, pc}
 80080da:	bf00      	nop
 80080dc:	0801f95c 	.word	0x0801f95c
 80080e0:	0801e83d 	.word	0x0801e83d
 80080e4:	0801e3d3 	.word	0x0801e3d3

080080e8 <netif_init>:
}
 80080e8:	4770      	bx	lr
	...

080080ec <netif_set_addr>:
{
 80080ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 80080ee:	4f14      	ldr	r7, [pc, #80]	; (8008140 <netif_set_addr+0x54>)
{
 80080f0:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 80080f2:	2900      	cmp	r1, #0
 80080f4:	bf14      	ite	ne
 80080f6:	460d      	movne	r5, r1
 80080f8:	463d      	moveq	r5, r7
    netmask = IP4_ADDR_ANY4;
 80080fa:	2a00      	cmp	r2, #0
 80080fc:	bf14      	ite	ne
 80080fe:	4616      	movne	r6, r2
 8008100:	463e      	moveq	r6, r7
    gw = IP4_ADDR_ANY4;
 8008102:	2b00      	cmp	r3, #0
 8008104:	bf18      	it	ne
 8008106:	461f      	movne	r7, r3
  remove = ip4_addr_isany(ipaddr);
 8008108:	682b      	ldr	r3, [r5, #0]
 800810a:	b9b3      	cbnz	r3, 800813a <netif_set_addr+0x4e>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800810c:	aa01      	add	r2, sp, #4
 800810e:	4629      	mov	r1, r5
 8008110:	f7ff ffbe 	bl	8008090 <netif_do_set_ipaddr>
 8008114:	2301      	movs	r3, #1
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008116:	6832      	ldr	r2, [r6, #0]
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008118:	68a1      	ldr	r1, [r4, #8]
 800811a:	428a      	cmp	r2, r1
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800811c:	68e1      	ldr	r1, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800811e:	bf18      	it	ne
 8008120:	60a2      	strne	r2, [r4, #8]
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008122:	683a      	ldr	r2, [r7, #0]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008124:	428a      	cmp	r2, r1
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008126:	bf18      	it	ne
 8008128:	60e2      	strne	r2, [r4, #12]
  if (!remove) {
 800812a:	b923      	cbnz	r3, 8008136 <netif_set_addr+0x4a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800812c:	aa01      	add	r2, sp, #4
 800812e:	4629      	mov	r1, r5
 8008130:	4620      	mov	r0, r4
 8008132:	f7ff ffad 	bl	8008090 <netif_do_set_ipaddr>
}
 8008136:	b003      	add	sp, #12
 8008138:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 800813a:	2300      	movs	r3, #0
 800813c:	e7eb      	b.n	8008116 <netif_set_addr+0x2a>
 800813e:	bf00      	nop
 8008140:	0800e1e4 	.word	0x0800e1e4

08008144 <netif_add>:
{
 8008144:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008148:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800814a:	4698      	mov	r8, r3
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800814c:	4604      	mov	r4, r0
 800814e:	b948      	cbnz	r0, 8008164 <netif_add+0x20>
 8008150:	4b3d      	ldr	r3, [pc, #244]	; (8008248 <netif_add+0x104>)
 8008152:	f240 1227 	movw	r2, #295	; 0x127
 8008156:	493d      	ldr	r1, [pc, #244]	; (800824c <netif_add+0x108>)
 8008158:	483d      	ldr	r0, [pc, #244]	; (8008250 <netif_add+0x10c>)
 800815a:	f004 fa7b 	bl	800c654 <iprintf>
}
 800815e:	4620      	mov	r0, r4
 8008160:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008164:	b947      	cbnz	r7, 8008178 <netif_add+0x34>
 8008166:	4b38      	ldr	r3, [pc, #224]	; (8008248 <netif_add+0x104>)
 8008168:	f44f 7294 	mov.w	r2, #296	; 0x128
 800816c:	4939      	ldr	r1, [pc, #228]	; (8008254 <netif_add+0x110>)
 800816e:	463c      	mov	r4, r7
 8008170:	4837      	ldr	r0, [pc, #220]	; (8008250 <netif_add+0x10c>)
 8008172:	f004 fa6f 	bl	800c654 <iprintf>
 8008176:	e7f2      	b.n	800815e <netif_add+0x1a>
  netif->output = netif_null_output_ip4;
 8008178:	4e37      	ldr	r6, [pc, #220]	; (8008258 <netif_add+0x114>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800817a:	2500      	movs	r5, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800817c:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008264 <netif_add+0x120>
  netif->output = netif_null_output_ip4;
 8008180:	6146      	str	r6, [r0, #20]
  netif->state = state;
 8008182:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008184:	42aa      	cmp	r2, r5
 8008186:	bf08      	it	eq
 8008188:	4662      	moveq	r2, ip
  netif->input = input;
 800818a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 800818c:	42a9      	cmp	r1, r5
 800818e:	bf08      	it	eq
 8008190:	4661      	moveq	r1, ip
  netif->state = state;
 8008192:	6206      	str	r6, [r0, #32]
  netif->num = netif_num;
 8008194:	4e31      	ldr	r6, [pc, #196]	; (800825c <netif_add+0x118>)
  netif->input = input;
 8008196:	6103      	str	r3, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008198:	45a8      	cmp	r8, r5
 800819a:	bf14      	ite	ne
 800819c:	4643      	movne	r3, r8
 800819e:	4663      	moveq	r3, ip
  netif->num = netif_num;
 80081a0:	f896 e000 	ldrb.w	lr, [r6]
  ip_addr_set_zero_ip4(&netif->gw);
 80081a4:	60c5      	str	r5, [r0, #12]
  netif->mtu = 0;
 80081a6:	8485      	strh	r5, [r0, #36]	; 0x24
  netif->flags = 0;
 80081a8:	f880 502d 	strb.w	r5, [r0, #45]	; 0x2d
  netif->link_callback = NULL;
 80081ac:	61c5      	str	r5, [r0, #28]
  netif->num = netif_num;
 80081ae:	f880 e030 	strb.w	lr, [r0, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->netmask);
 80081b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
  netif_set_addr(netif, ipaddr, netmask, gw);
 80081b6:	f7ff ff99 	bl	80080ec <netif_set_addr>
  if (init(netif) != ERR_OK) {
 80081ba:	4620      	mov	r0, r4
 80081bc:	47b8      	blx	r7
 80081be:	2800      	cmp	r0, #0
 80081c0:	d140      	bne.n	8008244 <netif_add+0x100>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80081c2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8008268 <netif_add+0x124>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80081c6:	4b20      	ldr	r3, [pc, #128]	; (8008248 <netif_add+0x104>)
 80081c8:	46c8      	mov	r8, r9
      if (netif->num == 255) {
 80081ca:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
      num_netifs = 0;
 80081ce:	2700      	movs	r7, #0
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80081d0:	f8d9 5000 	ldr.w	r5, [r9]
      if (netif->num == 255) {
 80081d4:	2aff      	cmp	r2, #255	; 0xff
        LWIP_ASSERT("netif already added", netif2 != netif);
 80081d6:	f8df b094 	ldr.w	fp, [pc, #148]	; 800826c <netif_add+0x128>
 80081da:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008250 <netif_add+0x10c>
        netif->num = 0;
 80081de:	bf04      	itt	eq
 80081e0:	2200      	moveq	r2, #0
 80081e2:	f884 2030 	strbeq.w	r2, [r4, #48]	; 0x30
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80081e6:	b92d      	cbnz	r5, 80081f4 <netif_add+0xb0>
  if (netif->num == 254) {
 80081e8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80081ec:	2bfe      	cmp	r3, #254	; 0xfe
 80081ee:	d120      	bne.n	8008232 <netif_add+0xee>
    netif_num = 0;
 80081f0:	462b      	mov	r3, r5
 80081f2:	e020      	b.n	8008236 <netif_add+0xf2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80081f4:	42a5      	cmp	r5, r4
 80081f6:	d106      	bne.n	8008206 <netif_add+0xc2>
 80081f8:	f240 128b 	movw	r2, #395	; 0x18b
 80081fc:	4659      	mov	r1, fp
 80081fe:	4650      	mov	r0, sl
 8008200:	f004 fa28 	bl	800c654 <iprintf>
 8008204:	4b10      	ldr	r3, [pc, #64]	; (8008248 <netif_add+0x104>)
        num_netifs++;
 8008206:	3701      	adds	r7, #1
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008208:	2fff      	cmp	r7, #255	; 0xff
 800820a:	dd06      	ble.n	800821a <netif_add+0xd6>
 800820c:	f240 128d 	movw	r2, #397	; 0x18d
 8008210:	4913      	ldr	r1, [pc, #76]	; (8008260 <netif_add+0x11c>)
 8008212:	4650      	mov	r0, sl
 8008214:	f004 fa1e 	bl	800c654 <iprintf>
 8008218:	4b0b      	ldr	r3, [pc, #44]	; (8008248 <netif_add+0x104>)
        if (netif2->num == netif->num) {
 800821a:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 800821e:	f895 2030 	ldrb.w	r2, [r5, #48]	; 0x30
 8008222:	428a      	cmp	r2, r1
 8008224:	d103      	bne.n	800822e <netif_add+0xea>
          netif->num++;
 8008226:	3201      	adds	r2, #1
 8008228:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    } while (netif2 != NULL);
 800822c:	e7cd      	b.n	80081ca <netif_add+0x86>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800822e:	682d      	ldr	r5, [r5, #0]
 8008230:	e7d9      	b.n	80081e6 <netif_add+0xa2>
    netif_num = (u8_t)(netif->num + 1);
 8008232:	3301      	adds	r3, #1
 8008234:	b2db      	uxtb	r3, r3
 8008236:	7033      	strb	r3, [r6, #0]
  netif->next = netif_list;
 8008238:	f8d8 3000 	ldr.w	r3, [r8]
 800823c:	6023      	str	r3, [r4, #0]
  netif_list = netif;
 800823e:	f8c8 4000 	str.w	r4, [r8]
  return netif;
 8008242:	e78c      	b.n	800815e <netif_add+0x1a>
    return NULL;
 8008244:	462c      	mov	r4, r5
 8008246:	e78a      	b.n	800815e <netif_add+0x1a>
 8008248:	0801f95c 	.word	0x0801f95c
 800824c:	0801fa85 	.word	0x0801fa85
 8008250:	0801e3d3 	.word	0x0801e3d3
 8008254:	0801fa9e 	.word	0x0801fa9e
 8008258:	08008041 	.word	0x08008041
 800825c:	24006798 	.word	0x24006798
 8008260:	0801fad4 	.word	0x0801fad4
 8008264:	0800e1e4 	.word	0x0800e1e4
 8008268:	2400a748 	.word	0x2400a748
 800826c:	0801fac0 	.word	0x0801fac0

08008270 <netif_set_default>:
  netif_default = netif;
 8008270:	4b01      	ldr	r3, [pc, #4]	; (8008278 <netif_set_default+0x8>)
 8008272:	6018      	str	r0, [r3, #0]
}
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	2400a74c 	.word	0x2400a74c

0800827c <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800827c:	b930      	cbnz	r0, 800828c <netif_set_up+0x10>
 800827e:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <netif_set_up+0x28>)
 8008280:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008284:	4908      	ldr	r1, [pc, #32]	; (80082a8 <netif_set_up+0x2c>)
 8008286:	4809      	ldr	r0, [pc, #36]	; (80082ac <netif_set_up+0x30>)
 8008288:	f004 b9e4 	b.w	800c654 <iprintf>
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800828c:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8008290:	07d1      	lsls	r1, r2, #31
 8008292:	d406      	bmi.n	80082a2 <netif_set_up+0x26>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008294:	f042 0201 	orr.w	r2, r2, #1
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008298:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_UP);
 800829a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800829e:	f7ff bed3 	b.w	8008048 <netif_issue_reports>
}
 80082a2:	4770      	bx	lr
 80082a4:	0801f95c 	.word	0x0801f95c
 80082a8:	0801fb02 	.word	0x0801fb02
 80082ac:	0801e3d3 	.word	0x0801e3d3

080082b0 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80082b0:	b930      	cbnz	r0, 80082c0 <netif_set_down+0x10>
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <netif_set_down+0x2c>)
 80082b4:	f240 329b 	movw	r2, #923	; 0x39b
 80082b8:	4909      	ldr	r1, [pc, #36]	; (80082e0 <netif_set_down+0x30>)
 80082ba:	480a      	ldr	r0, [pc, #40]	; (80082e4 <netif_set_down+0x34>)
 80082bc:	f004 b9ca 	b.w	800c654 <iprintf>
  if (netif->flags & NETIF_FLAG_UP) {
 80082c0:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 80082c4:	07d1      	lsls	r1, r2, #31
 80082c6:	d507      	bpl.n	80082d8 <netif_set_down+0x28>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80082c8:	f022 0101 	bic.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80082cc:	0713      	lsls	r3, r2, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 80082ce:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80082d2:	d501      	bpl.n	80082d8 <netif_set_down+0x28>
      etharp_cleanup_netif(netif);
 80082d4:	f7fe ba62 	b.w	800679c <etharp_cleanup_netif>
}
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	0801f95c 	.word	0x0801f95c
 80082e0:	0801fb1e 	.word	0x0801fb1e
 80082e4:	0801e3d3 	.word	0x0801e3d3

080082e8 <netif_set_link_up>:
{
 80082e8:	b510      	push	{r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80082ea:	4604      	mov	r4, r0
 80082ec:	b940      	cbnz	r0, 8008300 <netif_set_link_up+0x18>
 80082ee:	4b0d      	ldr	r3, [pc, #52]	; (8008324 <netif_set_link_up+0x3c>)
 80082f0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80082f4:	490c      	ldr	r1, [pc, #48]	; (8008328 <netif_set_link_up+0x40>)
 80082f6:	480d      	ldr	r0, [pc, #52]	; (800832c <netif_set_link_up+0x44>)
}
 80082f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80082fc:	f004 b9aa 	b.w	800c654 <iprintf>
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008300:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8008304:	075a      	lsls	r2, r3, #29
 8008306:	d40c      	bmi.n	8008322 <netif_set_link_up+0x3a>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008308:	f043 0304 	orr.w	r3, r3, #4
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800830c:	2103      	movs	r1, #3
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800830e:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008312:	f7ff fe99 	bl	8008048 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8008316:	69e3      	ldr	r3, [r4, #28]
 8008318:	b11b      	cbz	r3, 8008322 <netif_set_link_up+0x3a>
 800831a:	4620      	mov	r0, r4
}
 800831c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8008320:	4718      	bx	r3
}
 8008322:	bd10      	pop	{r4, pc}
 8008324:	0801f95c 	.word	0x0801f95c
 8008328:	0801fb3c 	.word	0x0801fb3c
 800832c:	0801e3d3 	.word	0x0801e3d3

08008330 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8008330:	b930      	cbnz	r0, 8008340 <netif_set_link_down+0x10>
 8008332:	4b09      	ldr	r3, [pc, #36]	; (8008358 <netif_set_link_down+0x28>)
 8008334:	f240 4206 	movw	r2, #1030	; 0x406
 8008338:	4908      	ldr	r1, [pc, #32]	; (800835c <netif_set_link_down+0x2c>)
 800833a:	4809      	ldr	r0, [pc, #36]	; (8008360 <netif_set_link_down+0x30>)
 800833c:	f004 b98a 	b.w	800c654 <iprintf>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8008340:	f890 202d 	ldrb.w	r2, [r0, #45]	; 0x2d
 8008344:	0751      	lsls	r1, r2, #29
 8008346:	d506      	bpl.n	8008356 <netif_set_link_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8008348:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 800834c:	69c3      	ldr	r3, [r0, #28]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800834e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8008352:	b103      	cbz	r3, 8008356 <netif_set_link_down+0x26>
 8008354:	4718      	bx	r3
}
 8008356:	4770      	bx	lr
 8008358:	0801f95c 	.word	0x0801f95c
 800835c:	0801fb5d 	.word	0x0801fb5d
 8008360:	0801e3d3 	.word	0x0801e3d3

08008364 <netif_set_link_callback>:
  if (netif) {
 8008364:	b100      	cbz	r0, 8008368 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8008366:	61c1      	str	r1, [r0, #28]
}
 8008368:	4770      	bx	lr
	...

0800836c <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800836c:	4603      	mov	r3, r0
 800836e:	b158      	cbz	r0, 8008388 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8008370:	4a06      	ldr	r2, [pc, #24]	; (800838c <netif_get_by_index+0x20>)
 8008372:	6810      	ldr	r0, [r2, #0]
 8008374:	b900      	cbnz	r0, 8008378 <netif_get_by_index+0xc>
 8008376:	4770      	bx	lr
      if (idx == netif_get_index(netif)) {
 8008378:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800837c:	3201      	adds	r2, #1
 800837e:	b2d2      	uxtb	r2, r2
 8008380:	429a      	cmp	r2, r3
 8008382:	d001      	beq.n	8008388 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8008384:	6800      	ldr	r0, [r0, #0]
 8008386:	e7f5      	b.n	8008374 <netif_get_by_index+0x8>
      }
    }
  }

  return NULL;
}
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	2400a748 	.word	0x2400a748

08008390 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8008390:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8008392:	b968      	cbnz	r0, 80083b0 <pbuf_add_header_impl+0x20>
 8008394:	4b14      	ldr	r3, [pc, #80]	; (80083e8 <pbuf_add_header_impl+0x58>)
 8008396:	f240 12df 	movw	r2, #479	; 0x1df
 800839a:	4914      	ldr	r1, [pc, #80]	; (80083ec <pbuf_add_header_impl+0x5c>)
 800839c:	4814      	ldr	r0, [pc, #80]	; (80083f0 <pbuf_add_header_impl+0x60>)
 800839e:	f004 f959 	bl	800c654 <iprintf>
  }

  increment_magnitude = (u16_t)header_size_increment;
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
    return 1;
 80083a2:	2001      	movs	r0, #1
 80083a4:	e01f      	b.n	80083e6 <pbuf_add_header_impl+0x56>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80083a6:	2a00      	cmp	r2, #0
 80083a8:	d0fb      	beq.n	80083a2 <pbuf_add_header_impl+0x12>
      payload = (u8_t *)p->payload - header_size_increment;
 80083aa:	6842      	ldr	r2, [r0, #4]
 80083ac:	1a51      	subs	r1, r2, r1
 80083ae:	e014      	b.n	80083da <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80083b0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80083b4:	d2f5      	bcs.n	80083a2 <pbuf_add_header_impl+0x12>
  if (header_size_increment == 0) {
 80083b6:	b1a9      	cbz	r1, 80083e4 <pbuf_add_header_impl+0x54>
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80083b8:	8903      	ldrh	r3, [r0, #8]
  increment_magnitude = (u16_t)header_size_increment;
 80083ba:	b28c      	uxth	r4, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80083bc:	fa13 f381 	uxtah	r3, r3, r1
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	429c      	cmp	r4, r3
 80083c4:	d8ed      	bhi.n	80083a2 <pbuf_add_header_impl+0x12>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80083c6:	f990 500c 	ldrsb.w	r5, [r0, #12]
 80083ca:	2d00      	cmp	r5, #0
 80083cc:	daeb      	bge.n	80083a6 <pbuf_add_header_impl+0x16>
    payload = (u8_t *)p->payload - header_size_increment;
 80083ce:	6842      	ldr	r2, [r0, #4]
 80083d0:	1a51      	subs	r1, r2, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80083d2:	f100 0210 	add.w	r2, r0, #16
 80083d6:	4291      	cmp	r1, r2
 80083d8:	d3e3      	bcc.n	80083a2 <pbuf_add_header_impl+0x12>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 80083da:	8942      	ldrh	r2, [r0, #10]
  p->payload = payload;
 80083dc:	6041      	str	r1, [r0, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80083de:	4414      	add	r4, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80083e0:	8103      	strh	r3, [r0, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 80083e2:	8144      	strh	r4, [r0, #10]


  return 0;
 80083e4:	2000      	movs	r0, #0
}
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	0801fb80 	.word	0x0801fb80
 80083ec:	0801fc95 	.word	0x0801fc95
 80083f0:	0801e3d3 	.word	0x0801e3d3

080083f4 <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80083f4:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80083f8:	2b01      	cmp	r3, #1
{
 80083fa:	b570      	push	{r4, r5, r6, lr}
 80083fc:	4606      	mov	r6, r0
 80083fe:	460d      	mov	r5, r1
 8008400:	4614      	mov	r4, r2
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008402:	d006      	beq.n	8008412 <pbuf_alloc_reference+0x1e>
 8008404:	4b0a      	ldr	r3, [pc, #40]	; (8008430 <pbuf_alloc_reference+0x3c>)
 8008406:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800840a:	490a      	ldr	r1, [pc, #40]	; (8008434 <pbuf_alloc_reference+0x40>)
 800840c:	480a      	ldr	r0, [pc, #40]	; (8008438 <pbuf_alloc_reference+0x44>)
 800840e:	f004 f921 	bl	800c654 <iprintf>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8008412:	200b      	movs	r0, #11
 8008414:	f7ff fdca 	bl	8007fac <memp_malloc>
  if (p == NULL) {
 8008418:	b140      	cbz	r0, 800842c <pbuf_alloc_reference+0x38>
  p->next = NULL;
 800841a:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800841c:	8105      	strh	r5, [r0, #8]
  p->len = len;
 800841e:	8145      	strh	r5, [r0, #10]
  p->flags = flags;
 8008420:	7343      	strb	r3, [r0, #13]
  p->type_internal = (u8_t)type;
 8008422:	7304      	strb	r4, [r0, #12]
  p->payload = payload;
 8008424:	e9c0 3600 	strd	r3, r6, [r0]
  p->ref = 1;
 8008428:	2301      	movs	r3, #1
 800842a:	81c3      	strh	r3, [r0, #14]
}
 800842c:	bd70      	pop	{r4, r5, r6, pc}
 800842e:	bf00      	nop
 8008430:	0801fb80 	.word	0x0801fb80
 8008434:	0801fbf3 	.word	0x0801fbf3
 8008438:	0801e3d3 	.word	0x0801e3d3

0800843c <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800843c:	3003      	adds	r0, #3
 800843e:	f020 0003 	bic.w	r0, r0, #3
{
 8008442:	b570      	push	{r4, r5, r6, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008444:	180e      	adds	r6, r1, r0
 8008446:	f8bd 5014 	ldrh.w	r5, [sp, #20]
{
 800844a:	9c04      	ldr	r4, [sp, #16]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800844c:	42ae      	cmp	r6, r5
 800844e:	d80d      	bhi.n	800846c <pbuf_alloced_custom+0x30>
  if (payload_mem != NULL) {
 8008450:	b104      	cbz	r4, 8008454 <pbuf_alloced_custom+0x18>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8008452:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8008454:	4618      	mov	r0, r3
  p->next = NULL;
 8008456:	2300      	movs	r3, #0
  p->payload = payload;
 8008458:	e9c0 3400 	strd	r3, r4, [r0]
  p->flags = flags;
 800845c:	2302      	movs	r3, #2
  p->tot_len = tot_len;
 800845e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8008460:	8141      	strh	r1, [r0, #10]
  p->flags = flags;
 8008462:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8008464:	2301      	movs	r3, #1
  p->type_internal = (u8_t)type;
 8008466:	7302      	strb	r2, [r0, #12]
  p->ref = 1;
 8008468:	81c3      	strh	r3, [r0, #14]
}
 800846a:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 800846c:	2000      	movs	r0, #0
 800846e:	e7fc      	b.n	800846a <pbuf_alloced_custom+0x2e>

08008470 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8008470:	2200      	movs	r2, #0
 8008472:	f7ff bf8d 	b.w	8008390 <pbuf_add_header_impl>
	...

08008478 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8008478:	b510      	push	{r4, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800847a:	b990      	cbnz	r0, 80084a2 <pbuf_remove_header+0x2a>
 800847c:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <pbuf_remove_header+0x48>)
 800847e:	f240 224b 	movw	r2, #587	; 0x24b
 8008482:	4910      	ldr	r1, [pc, #64]	; (80084c4 <pbuf_remove_header+0x4c>)
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8008484:	4810      	ldr	r0, [pc, #64]	; (80084c8 <pbuf_remove_header+0x50>)
 8008486:	f004 f8e5 	bl	800c654 <iprintf>
    return 1;
 800848a:	2001      	movs	r0, #1
 800848c:	e008      	b.n	80084a0 <pbuf_remove_header+0x28>
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800848e:	1a9b      	subs	r3, r3, r2
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008490:	6844      	ldr	r4, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 8008492:	8143      	strh	r3, [r0, #10]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008494:	4421      	add	r1, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8008496:	8903      	ldrh	r3, [r0, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008498:	6041      	str	r1, [r0, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800849a:	1a9b      	subs	r3, r3, r2
 800849c:	8103      	strh	r3, [r0, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800849e:	2000      	movs	r0, #0
}
 80084a0:	bd10      	pop	{r4, pc}
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80084a2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80084a6:	d2f0      	bcs.n	800848a <pbuf_remove_header+0x12>
  if (header_size_decrement == 0) {
 80084a8:	2900      	cmp	r1, #0
 80084aa:	d0f8      	beq.n	800849e <pbuf_remove_header+0x26>
  increment_magnitude = (u16_t)header_size_decrement;
 80084ac:	b28a      	uxth	r2, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80084ae:	8943      	ldrh	r3, [r0, #10]
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d2ec      	bcs.n	800848e <pbuf_remove_header+0x16>
 80084b4:	4b02      	ldr	r3, [pc, #8]	; (80084c0 <pbuf_remove_header+0x48>)
 80084b6:	f240 2255 	movw	r2, #597	; 0x255
 80084ba:	4904      	ldr	r1, [pc, #16]	; (80084cc <pbuf_remove_header+0x54>)
 80084bc:	e7e2      	b.n	8008484 <pbuf_remove_header+0xc>
 80084be:	bf00      	nop
 80084c0:	0801fb80 	.word	0x0801fb80
 80084c4:	0801fc95 	.word	0x0801fc95
 80084c8:	0801e3d3 	.word	0x0801e3d3
 80084cc:	0801fc05 	.word	0x0801fc05

080084d0 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 80084d0:	1e0b      	subs	r3, r1, #0
 80084d2:	da02      	bge.n	80084da <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80084d4:	4259      	negs	r1, r3
 80084d6:	f7ff bfcf 	b.w	8008478 <pbuf_remove_header>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80084da:	2201      	movs	r2, #1
 80084dc:	f7ff bf58 	b.w	8008390 <pbuf_add_header_impl>

080084e0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80084e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80084e4:	4604      	mov	r4, r0
 80084e6:	b950      	cbnz	r0, 80084fe <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80084e8:	4625      	mov	r5, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 80084ea:	4b2b      	ldr	r3, [pc, #172]	; (8008598 <pbuf_free+0xb8>)
 80084ec:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80084f0:	492a      	ldr	r1, [pc, #168]	; (800859c <pbuf_free+0xbc>)
 80084f2:	482b      	ldr	r0, [pc, #172]	; (80085a0 <pbuf_free+0xc0>)
 80084f4:	f004 f8ae 	bl	800c654 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 80084f8:	4628      	mov	r0, r5
 80084fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  count = 0;
 80084fe:	2500      	movs	r5, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008500:	4f25      	ldr	r7, [pc, #148]	; (8008598 <pbuf_free+0xb8>)
 8008502:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80085ac <pbuf_free+0xcc>
 8008506:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80085a0 <pbuf_free+0xc0>
    SYS_ARCH_PROTECT(old_level);
 800850a:	f004 f80d 	bl	800c528 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800850e:	7ba3      	ldrb	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8008510:	4681      	mov	r9, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8008512:	b933      	cbnz	r3, 8008522 <pbuf_free+0x42>
 8008514:	463b      	mov	r3, r7
 8008516:	f240 22f1 	movw	r2, #753	; 0x2f1
 800851a:	4651      	mov	r1, sl
 800851c:	4640      	mov	r0, r8
 800851e:	f004 f899 	bl	800c654 <iprintf>
    ref = --(p->ref);
 8008522:	7ba6      	ldrb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8008524:	4648      	mov	r0, r9
    ref = --(p->ref);
 8008526:	3e01      	subs	r6, #1
 8008528:	b2f6      	uxtb	r6, r6
 800852a:	73a6      	strb	r6, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 800852c:	f004 f808 	bl	800c540 <sys_arch_unprotect>
    if (ref == 0) {
 8008530:	2e00      	cmp	r6, #0
 8008532:	d1e1      	bne.n	80084f8 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008534:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8008536:	6826      	ldr	r6, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008538:	079b      	lsls	r3, r3, #30
 800853a:	d511      	bpl.n	8008560 <pbuf_free+0x80>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800853c:	6923      	ldr	r3, [r4, #16]
 800853e:	b933      	cbnz	r3, 800854e <pbuf_free+0x6e>
 8008540:	463b      	mov	r3, r7
 8008542:	f240 22ff 	movw	r2, #767	; 0x2ff
 8008546:	4917      	ldr	r1, [pc, #92]	; (80085a4 <pbuf_free+0xc4>)
 8008548:	4640      	mov	r0, r8
 800854a:	f004 f883 	bl	800c654 <iprintf>
        pc->custom_free_function(p);
 800854e:	6923      	ldr	r3, [r4, #16]
 8008550:	4620      	mov	r0, r4
 8008552:	4798      	blx	r3
      count++;
 8008554:	3501      	adds	r5, #1
 8008556:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8008558:	2e00      	cmp	r6, #0
 800855a:	d0cd      	beq.n	80084f8 <pbuf_free+0x18>
 800855c:	4634      	mov	r4, r6
 800855e:	e7d4      	b.n	800850a <pbuf_free+0x2a>
      alloc_src = pbuf_get_allocsrc(p);
 8008560:	7b23      	ldrb	r3, [r4, #12]
 8008562:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008566:	2b02      	cmp	r3, #2
 8008568:	d104      	bne.n	8008574 <pbuf_free+0x94>
          memp_free(MEMP_PBUF_POOL, p);
 800856a:	4621      	mov	r1, r4
 800856c:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 800856e:	f7ff fd4d 	bl	800800c <memp_free>
 8008572:	e7ef      	b.n	8008554 <pbuf_free+0x74>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008574:	2b01      	cmp	r3, #1
 8008576:	d102      	bne.n	800857e <pbuf_free+0x9e>
          memp_free(MEMP_PBUF, p);
 8008578:	4621      	mov	r1, r4
 800857a:	200b      	movs	r0, #11
 800857c:	e7f7      	b.n	800856e <pbuf_free+0x8e>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800857e:	b91b      	cbnz	r3, 8008588 <pbuf_free+0xa8>
          mem_free(p);
 8008580:	4620      	mov	r0, r4
 8008582:	f7ff fa71 	bl	8007a68 <mem_free>
 8008586:	e7e5      	b.n	8008554 <pbuf_free+0x74>
          LWIP_ASSERT("invalid pbuf type", 0);
 8008588:	463b      	mov	r3, r7
 800858a:	f240 320f 	movw	r2, #783	; 0x30f
 800858e:	4906      	ldr	r1, [pc, #24]	; (80085a8 <pbuf_free+0xc8>)
 8008590:	4640      	mov	r0, r8
 8008592:	f004 f85f 	bl	800c654 <iprintf>
 8008596:	e7dd      	b.n	8008554 <pbuf_free+0x74>
 8008598:	0801fb80 	.word	0x0801fb80
 800859c:	0801fc95 	.word	0x0801fc95
 80085a0:	0801e3d3 	.word	0x0801e3d3
 80085a4:	0801fc39 	.word	0x0801fc39
 80085a8:	0801fc5a 	.word	0x0801fc5a
 80085ac:	0801fc23 	.word	0x0801fc23

080085b0 <pbuf_alloc>:
  switch (type) {
 80085b0:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 80085b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085b8:	4606      	mov	r6, r0
 80085ba:	460f      	mov	r7, r1
  u16_t offset = (u16_t)layer;
 80085bc:	b284      	uxth	r4, r0
  switch (type) {
 80085be:	d014      	beq.n	80085ea <pbuf_alloc+0x3a>
 80085c0:	d808      	bhi.n	80085d4 <pbuf_alloc+0x24>
 80085c2:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d107      	bne.n	80085da <pbuf_alloc+0x2a>
      p = pbuf_alloc_reference(NULL, length, type);
 80085ca:	2000      	movs	r0, #0
}
 80085cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 80085d0:	f7ff bf10 	b.w	80083f4 <pbuf_alloc_reference>
  switch (type) {
 80085d4:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 80085d8:	d03a      	beq.n	8008650 <pbuf_alloc+0xa0>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80085da:	4b2d      	ldr	r3, [pc, #180]	; (8008690 <pbuf_alloc+0xe0>)
 80085dc:	f240 1227 	movw	r2, #295	; 0x127
 80085e0:	492c      	ldr	r1, [pc, #176]	; (8008694 <pbuf_alloc+0xe4>)
 80085e2:	482d      	ldr	r0, [pc, #180]	; (8008698 <pbuf_alloc+0xe8>)
 80085e4:	f004 f836 	bl	800c654 <iprintf>
 80085e8:	e00b      	b.n	8008602 <pbuf_alloc+0x52>
  switch (type) {
 80085ea:	2600      	movs	r6, #0
  p->type_internal = (u8_t)type;
 80085ec:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80086a0 <pbuf_alloc+0xf0>
  switch (type) {
 80085f0:	4635      	mov	r5, r6
  p->next = NULL;
 80085f2:	46b0      	mov	r8, r6
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80085f4:	200c      	movs	r0, #12
 80085f6:	46b2      	mov	sl, r6
 80085f8:	f7ff fcd8 	bl	8007fac <memp_malloc>
        if (q == NULL) {
 80085fc:	4606      	mov	r6, r0
 80085fe:	b930      	cbnz	r0, 800860e <pbuf_alloc+0x5e>
          if (p) {
 8008600:	b90d      	cbnz	r5, 8008606 <pbuf_alloc+0x56>
      return NULL;
 8008602:	2500      	movs	r5, #0
 8008604:	e01f      	b.n	8008646 <pbuf_alloc+0x96>
            pbuf_free(p);
 8008606:	4628      	mov	r0, r5
 8008608:	f7ff ff6a 	bl	80084e0 <pbuf_free>
 800860c:	e7f9      	b.n	8008602 <pbuf_alloc+0x52>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800860e:	1ce3      	adds	r3, r4, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008610:	4404      	add	r4, r0
  p->next = NULL;
 8008612:	f8c0 8000 	str.w	r8, [r0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8008616:	f023 0303 	bic.w	r3, r3, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800861a:	3413      	adds	r4, #19
  p->tot_len = tot_len;
 800861c:	8107      	strh	r7, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800861e:	f5c3 63bf 	rsb	r3, r3, #1528	; 0x5f8
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8008622:	f024 0403 	bic.w	r4, r4, #3
  p->type_internal = (u8_t)type;
 8008626:	f8c0 900c 	str.w	r9, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800862a:	b29b      	uxth	r3, r3
  p->payload = payload;
 800862c:	6044      	str	r4, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800862e:	42bb      	cmp	r3, r7
 8008630:	bf28      	it	cs
 8008632:	463b      	movcs	r3, r7
  p->len = len;
 8008634:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8008636:	b14d      	cbz	r5, 800864c <pbuf_alloc+0x9c>
          last->next = q;
 8008638:	f8ca 0000 	str.w	r0, [sl]
        rem_len = (u16_t)(rem_len - qlen);
 800863c:	1afb      	subs	r3, r7, r3
        offset = 0;
 800863e:	2400      	movs	r4, #0
        rem_len = (u16_t)(rem_len - qlen);
 8008640:	b29f      	uxth	r7, r3
      } while (rem_len > 0);
 8008642:	2f00      	cmp	r7, #0
 8008644:	d1d6      	bne.n	80085f4 <pbuf_alloc+0x44>
}
 8008646:	4628      	mov	r0, r5
 8008648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864c:	4605      	mov	r5, r0
 800864e:	e7f5      	b.n	800863c <pbuf_alloc+0x8c>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8008650:	3403      	adds	r4, #3
 8008652:	1ccb      	adds	r3, r1, #3
 8008654:	f024 0403 	bic.w	r4, r4, #3
 8008658:	f023 0303 	bic.w	r3, r3, #3
 800865c:	441c      	add	r4, r3
 800865e:	b2a4      	uxth	r4, r4
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008660:	f104 0010 	add.w	r0, r4, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008664:	429c      	cmp	r4, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8008666:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8008668:	d3cb      	bcc.n	8008602 <pbuf_alloc+0x52>
 800866a:	4283      	cmp	r3, r0
 800866c:	d8c9      	bhi.n	8008602 <pbuf_alloc+0x52>
      p = (struct pbuf *)mem_malloc(alloc_len);
 800866e:	f7ff fb7f 	bl	8007d70 <mem_malloc>
      if (p == NULL) {
 8008672:	4605      	mov	r5, r0
 8008674:	2800      	cmp	r0, #0
 8008676:	d0e6      	beq.n	8008646 <pbuf_alloc+0x96>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008678:	4406      	add	r6, r0
  p->next = NULL;
 800867a:	2300      	movs	r3, #0
  p->tot_len = tot_len;
 800867c:	8107      	strh	r7, [r0, #8]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800867e:	3613      	adds	r6, #19
  p->next = NULL;
 8008680:	6003      	str	r3, [r0, #0]
  p->type_internal = (u8_t)type;
 8008682:	4b06      	ldr	r3, [pc, #24]	; (800869c <pbuf_alloc+0xec>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8008684:	f026 0603 	bic.w	r6, r6, #3
  p->len = len;
 8008688:	8147      	strh	r7, [r0, #10]
  p->type_internal = (u8_t)type;
 800868a:	60c3      	str	r3, [r0, #12]
  p->payload = payload;
 800868c:	6046      	str	r6, [r0, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800868e:	e7da      	b.n	8008646 <pbuf_alloc+0x96>
 8008690:	0801fb80 	.word	0x0801fb80
 8008694:	0801fc6c 	.word	0x0801fc6c
 8008698:	0801e3d3 	.word	0x0801e3d3
 800869c:	00010080 	.word	0x00010080
 80086a0:	00010082 	.word	0x00010082

080086a4 <pbuf_realloc>:
{
 80086a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	460e      	mov	r6, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80086aa:	4604      	mov	r4, r0
 80086ac:	b930      	cbnz	r0, 80086bc <pbuf_realloc+0x18>
 80086ae:	4b24      	ldr	r3, [pc, #144]	; (8008740 <pbuf_realloc+0x9c>)
 80086b0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80086b4:	4923      	ldr	r1, [pc, #140]	; (8008744 <pbuf_realloc+0xa0>)
 80086b6:	4824      	ldr	r0, [pc, #144]	; (8008748 <pbuf_realloc+0xa4>)
 80086b8:	f003 ffcc 	bl	800c654 <iprintf>
  if (new_len >= p->tot_len) {
 80086bc:	8927      	ldrh	r7, [r4, #8]
 80086be:	42b7      	cmp	r7, r6
 80086c0:	d93c      	bls.n	800873c <pbuf_realloc+0x98>
 80086c2:	4635      	mov	r5, r6
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80086c4:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8008740 <pbuf_realloc+0x9c>
 80086c8:	f8df a084 	ldr.w	sl, [pc, #132]	; 8008750 <pbuf_realloc+0xac>
 80086cc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8008748 <pbuf_realloc+0xa4>
  while (rem_len > q->len) {
 80086d0:	8962      	ldrh	r2, [r4, #10]
 80086d2:	42aa      	cmp	r2, r5
 80086d4:	d319      	bcc.n	800870a <pbuf_realloc+0x66>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80086d6:	7b23      	ldrb	r3, [r4, #12]
 80086d8:	0719      	lsls	r1, r3, #28
 80086da:	d127      	bne.n	800872c <pbuf_realloc+0x88>
 80086dc:	42aa      	cmp	r2, r5
 80086de:	d025      	beq.n	800872c <pbuf_realloc+0x88>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80086e0:	7b63      	ldrb	r3, [r4, #13]
 80086e2:	079b      	lsls	r3, r3, #30
 80086e4:	d422      	bmi.n	800872c <pbuf_realloc+0x88>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80086e6:	6861      	ldr	r1, [r4, #4]
 80086e8:	4620      	mov	r0, r4
 80086ea:	1b09      	subs	r1, r1, r4
 80086ec:	4429      	add	r1, r5
 80086ee:	b289      	uxth	r1, r1
 80086f0:	f7ff fa90 	bl	8007c14 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80086f4:	4604      	mov	r4, r0
 80086f6:	b9c8      	cbnz	r0, 800872c <pbuf_realloc+0x88>
 80086f8:	4b11      	ldr	r3, [pc, #68]	; (8008740 <pbuf_realloc+0x9c>)
 80086fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80086fe:	4913      	ldr	r1, [pc, #76]	; (800874c <pbuf_realloc+0xa8>)
 8008700:	4811      	ldr	r0, [pc, #68]	; (8008748 <pbuf_realloc+0xa4>)
 8008702:	f003 ffa7 	bl	800c654 <iprintf>
  q->len = rem_len;
 8008706:	8164      	strh	r4, [r4, #10]
 8008708:	deff      	udf	#255	; 0xff
    rem_len = (u16_t)(rem_len - q->len);
 800870a:	1aad      	subs	r5, r5, r2
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800870c:	1bf3      	subs	r3, r6, r7
 800870e:	8922      	ldrh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 8008710:	b2ad      	uxth	r5, r5
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008712:	4413      	add	r3, r2
 8008714:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8008716:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8008718:	2c00      	cmp	r4, #0
 800871a:	d1d9      	bne.n	80086d0 <pbuf_realloc+0x2c>
 800871c:	4643      	mov	r3, r8
 800871e:	f240 12af 	movw	r2, #431	; 0x1af
 8008722:	4651      	mov	r1, sl
 8008724:	4648      	mov	r0, r9
 8008726:	f003 ff95 	bl	800c654 <iprintf>
 800872a:	e7d1      	b.n	80086d0 <pbuf_realloc+0x2c>
  if (q->next != NULL) {
 800872c:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800872e:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8008730:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8008732:	b108      	cbz	r0, 8008738 <pbuf_realloc+0x94>
    pbuf_free(q->next);
 8008734:	f7ff fed4 	bl	80084e0 <pbuf_free>
  q->next = NULL;
 8008738:	2300      	movs	r3, #0
 800873a:	6023      	str	r3, [r4, #0]
}
 800873c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008740:	0801fb80 	.word	0x0801fb80
 8008744:	0801fc87 	.word	0x0801fc87
 8008748:	0801e3d3 	.word	0x0801e3d3
 800874c:	0801fcb7 	.word	0x0801fcb7
 8008750:	0801fc9f 	.word	0x0801fc9f

08008754 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8008754:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 8008756:	2200      	movs	r2, #0
 8008758:	b290      	uxth	r0, r2
 800875a:	3201      	adds	r2, #1
 800875c:	b903      	cbnz	r3, 8008760 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 800875e:	4770      	bx	lr
    p = p->next;
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	e7f9      	b.n	8008758 <pbuf_clen+0x4>

08008764 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8008764:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 8008766:	4604      	mov	r4, r0
 8008768:	b188      	cbz	r0, 800878e <pbuf_ref+0x2a>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800876a:	f003 fedd 	bl	800c528 <sys_arch_protect>
 800876e:	7ba3      	ldrb	r3, [r4, #14]
 8008770:	3301      	adds	r3, #1
 8008772:	73a3      	strb	r3, [r4, #14]
 8008774:	f003 fee4 	bl	800c540 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008778:	7ba3      	ldrb	r3, [r4, #14]
 800877a:	b943      	cbnz	r3, 800878e <pbuf_ref+0x2a>
 800877c:	4b04      	ldr	r3, [pc, #16]	; (8008790 <pbuf_ref+0x2c>)
 800877e:	f240 3242 	movw	r2, #834	; 0x342
 8008782:	4904      	ldr	r1, [pc, #16]	; (8008794 <pbuf_ref+0x30>)
 8008784:	4804      	ldr	r0, [pc, #16]	; (8008798 <pbuf_ref+0x34>)
  }
}
 8008786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800878a:	f003 bf63 	b.w	800c654 <iprintf>
}
 800878e:	bd10      	pop	{r4, pc}
 8008790:	0801fb80 	.word	0x0801fb80
 8008794:	0801fcd3 	.word	0x0801fcd3
 8008798:	0801e3d3 	.word	0x0801e3d3

0800879c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800879c:	b570      	push	{r4, r5, r6, lr}
 800879e:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80087a0:	4604      	mov	r4, r0
 80087a2:	b100      	cbz	r0, 80087a6 <pbuf_cat+0xa>
 80087a4:	b961      	cbnz	r1, 80087c0 <pbuf_cat+0x24>
 80087a6:	4b15      	ldr	r3, [pc, #84]	; (80087fc <pbuf_cat+0x60>)
 80087a8:	f240 3259 	movw	r2, #857	; 0x359
 80087ac:	4914      	ldr	r1, [pc, #80]	; (8008800 <pbuf_cat+0x64>)
 80087ae:	4815      	ldr	r0, [pc, #84]	; (8008804 <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80087b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80087b4:	f003 bf4e 	b.w	800c654 <iprintf>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80087b8:	8929      	ldrh	r1, [r5, #8]
 80087ba:	440b      	add	r3, r1
 80087bc:	8123      	strh	r3, [r4, #8]
 80087be:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 80087c0:	6822      	ldr	r2, [r4, #0]
 80087c2:	8923      	ldrh	r3, [r4, #8]
 80087c4:	2a00      	cmp	r2, #0
 80087c6:	d1f7      	bne.n	80087b8 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80087c8:	8962      	ldrh	r2, [r4, #10]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d00f      	beq.n	80087ee <pbuf_cat+0x52>
 80087ce:	4b0b      	ldr	r3, [pc, #44]	; (80087fc <pbuf_cat+0x60>)
 80087d0:	f240 3262 	movw	r2, #866	; 0x362
 80087d4:	490c      	ldr	r1, [pc, #48]	; (8008808 <pbuf_cat+0x6c>)
 80087d6:	480b      	ldr	r0, [pc, #44]	; (8008804 <pbuf_cat+0x68>)
 80087d8:	f003 ff3c 	bl	800c654 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80087dc:	6823      	ldr	r3, [r4, #0]
 80087de:	b133      	cbz	r3, 80087ee <pbuf_cat+0x52>
 80087e0:	4b06      	ldr	r3, [pc, #24]	; (80087fc <pbuf_cat+0x60>)
 80087e2:	f240 3263 	movw	r2, #867	; 0x363
 80087e6:	4909      	ldr	r1, [pc, #36]	; (800880c <pbuf_cat+0x70>)
 80087e8:	4806      	ldr	r0, [pc, #24]	; (8008804 <pbuf_cat+0x68>)
 80087ea:	f003 ff33 	bl	800c654 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80087ee:	892a      	ldrh	r2, [r5, #8]
 80087f0:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 80087f2:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80087f4:	4413      	add	r3, r2
 80087f6:	8123      	strh	r3, [r4, #8]
}
 80087f8:	bd70      	pop	{r4, r5, r6, pc}
 80087fa:	bf00      	nop
 80087fc:	0801fb80 	.word	0x0801fb80
 8008800:	0801fce5 	.word	0x0801fce5
 8008804:	0801e3d3 	.word	0x0801e3d3
 8008808:	0801fd1a 	.word	0x0801fd1a
 800880c:	0801fd47 	.word	0x0801fd47

08008810 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8008810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008814:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8008816:	4605      	mov	r5, r0
 8008818:	b120      	cbz	r0, 8008824 <pbuf_copy+0x14>
 800881a:	b119      	cbz	r1, 8008824 <pbuf_copy+0x14>
 800881c:	8902      	ldrh	r2, [r0, #8]
 800881e:	890b      	ldrh	r3, [r1, #8]
 8008820:	429a      	cmp	r2, r3
 8008822:	d20a      	bcs.n	800883a <pbuf_copy+0x2a>
 8008824:	4b34      	ldr	r3, [pc, #208]	; (80088f8 <pbuf_copy+0xe8>)
 8008826:	f240 32c9 	movw	r2, #969	; 0x3c9
 800882a:	4934      	ldr	r1, [pc, #208]	; (80088fc <pbuf_copy+0xec>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800882c:	4834      	ldr	r0, [pc, #208]	; (8008900 <pbuf_copy+0xf0>)
 800882e:	f003 ff11 	bl	800c654 <iprintf>
 8008832:	f06f 000f 	mvn.w	r0, #15
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8008836:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t offset_to = 0, offset_from = 0, len;
 800883a:	2600      	movs	r6, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800883c:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80088f8 <pbuf_copy+0xe8>
 8008840:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8008910 <pbuf_copy+0x100>
  size_t offset_to = 0, offset_from = 0, len;
 8008844:	4637      	mov	r7, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008846:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 8008900 <pbuf_copy+0xf0>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800884a:	f8b5 800a 	ldrh.w	r8, [r5, #10]
 800884e:	8962      	ldrh	r2, [r4, #10]
 8008850:	eba8 0807 	sub.w	r8, r8, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008854:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8008856:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008858:	6861      	ldr	r1, [r4, #4]
 800885a:	4438      	add	r0, r7
 800885c:	4590      	cmp	r8, r2
 800885e:	4431      	add	r1, r6
 8008860:	bf28      	it	cs
 8008862:	4690      	movcs	r8, r2
 8008864:	4642      	mov	r2, r8
    offset_to += len;
 8008866:	4447      	add	r7, r8
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8008868:	f003 fec4 	bl	800c5f4 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800886c:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 800886e:	4446      	add	r6, r8
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8008870:	429f      	cmp	r7, r3
 8008872:	d906      	bls.n	8008882 <pbuf_copy+0x72>
 8008874:	465b      	mov	r3, fp
 8008876:	f240 32d9 	movw	r2, #985	; 0x3d9
 800887a:	4651      	mov	r1, sl
 800887c:	4648      	mov	r0, r9
 800887e:	f003 fee9 	bl	800c654 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8008882:	8963      	ldrh	r3, [r4, #10]
 8008884:	429e      	cmp	r6, r3
 8008886:	d906      	bls.n	8008896 <pbuf_copy+0x86>
 8008888:	465b      	mov	r3, fp
 800888a:	f240 32da 	movw	r2, #986	; 0x3da
 800888e:	491d      	ldr	r1, [pc, #116]	; (8008904 <pbuf_copy+0xf4>)
 8008890:	4648      	mov	r0, r9
 8008892:	f003 fedf 	bl	800c654 <iprintf>
    if (offset_from >= p_from->len) {
 8008896:	8963      	ldrh	r3, [r4, #10]
 8008898:	429e      	cmp	r6, r3
    if (offset_to == p_to->len) {
 800889a:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 800889c:	bf24      	itt	cs
 800889e:	6824      	ldrcs	r4, [r4, #0]
      offset_from = 0;
 80088a0:	2600      	movcs	r6, #0
    if (offset_to == p_to->len) {
 80088a2:	429f      	cmp	r7, r3
 80088a4:	d108      	bne.n	80088b8 <pbuf_copy+0xa8>
      p_to = p_to->next;
 80088a6:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80088a8:	b92d      	cbnz	r5, 80088b6 <pbuf_copy+0xa6>
 80088aa:	b314      	cbz	r4, 80088f2 <pbuf_copy+0xe2>
 80088ac:	4b12      	ldr	r3, [pc, #72]	; (80088f8 <pbuf_copy+0xe8>)
 80088ae:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80088b2:	4915      	ldr	r1, [pc, #84]	; (8008908 <pbuf_copy+0xf8>)
 80088b4:	e7ba      	b.n	800882c <pbuf_copy+0x1c>
      offset_to = 0;
 80088b6:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80088b8:	b17c      	cbz	r4, 80088da <pbuf_copy+0xca>
 80088ba:	8962      	ldrh	r2, [r4, #10]
 80088bc:	8923      	ldrh	r3, [r4, #8]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d10b      	bne.n	80088da <pbuf_copy+0xca>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	b14b      	cbz	r3, 80088da <pbuf_copy+0xca>
 80088c6:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <pbuf_copy+0xe8>)
 80088c8:	f240 32e9 	movw	r2, #1001	; 0x3e9
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80088cc:	490f      	ldr	r1, [pc, #60]	; (800890c <pbuf_copy+0xfc>)
 80088ce:	480c      	ldr	r0, [pc, #48]	; (8008900 <pbuf_copy+0xf0>)
 80088d0:	f003 fec0 	bl	800c654 <iprintf>
 80088d4:	f06f 0005 	mvn.w	r0, #5
 80088d8:	e7ad      	b.n	8008836 <pbuf_copy+0x26>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80088da:	896a      	ldrh	r2, [r5, #10]
 80088dc:	892b      	ldrh	r3, [r5, #8]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d105      	bne.n	80088ee <pbuf_copy+0xde>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80088e2:	682b      	ldr	r3, [r5, #0]
 80088e4:	b11b      	cbz	r3, 80088ee <pbuf_copy+0xde>
 80088e6:	4b04      	ldr	r3, [pc, #16]	; (80088f8 <pbuf_copy+0xe8>)
 80088e8:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80088ec:	e7ee      	b.n	80088cc <pbuf_copy+0xbc>
  } while (p_from);
 80088ee:	2c00      	cmp	r4, #0
 80088f0:	d1ab      	bne.n	800884a <pbuf_copy+0x3a>
  return ERR_OK;
 80088f2:	4620      	mov	r0, r4
 80088f4:	e79f      	b.n	8008836 <pbuf_copy+0x26>
 80088f6:	bf00      	nop
 80088f8:	0801fb80 	.word	0x0801fb80
 80088fc:	0801fd8e 	.word	0x0801fd8e
 8008900:	0801e3d3 	.word	0x0801e3d3
 8008904:	0801fdd5 	.word	0x0801fdd5
 8008908:	0801fdf0 	.word	0x0801fdf0
 800890c:	0801fdfd 	.word	0x0801fdfd
 8008910:	0801fdbe 	.word	0x0801fdbe

08008914 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8008914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008918:	4688      	mov	r8, r1
 800891a:	4691      	mov	r9, r2
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800891c:	4606      	mov	r6, r0
 800891e:	b950      	cbnz	r0, 8008936 <pbuf_copy_partial+0x22>
 8008920:	4637      	mov	r7, r6
 8008922:	4b1b      	ldr	r3, [pc, #108]	; (8008990 <pbuf_copy_partial+0x7c>)
 8008924:	f240 420a 	movw	r2, #1034	; 0x40a
 8008928:	491a      	ldr	r1, [pc, #104]	; (8008994 <pbuf_copy_partial+0x80>)
 800892a:	481b      	ldr	r0, [pc, #108]	; (8008998 <pbuf_copy_partial+0x84>)
 800892c:	f003 fe92 	bl	800c654 <iprintf>
      len = (u16_t)(len - buf_copy_len);
      offset = 0;
    }
  }
  return copied_total;
}
 8008930:	4638      	mov	r0, r7
 8008932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8008936:	bb49      	cbnz	r1, 800898c <pbuf_copy_partial+0x78>
 8008938:	4b15      	ldr	r3, [pc, #84]	; (8008990 <pbuf_copy_partial+0x7c>)
 800893a:	f240 420b 	movw	r2, #1035	; 0x40b
 800893e:	4917      	ldr	r1, [pc, #92]	; (800899c <pbuf_copy_partial+0x88>)
 8008940:	4647      	mov	r7, r8
 8008942:	4815      	ldr	r0, [pc, #84]	; (8008998 <pbuf_copy_partial+0x84>)
 8008944:	f003 fe86 	bl	800c654 <iprintf>
 8008948:	e7f2      	b.n	8008930 <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 800894a:	8975      	ldrh	r5, [r6, #10]
 800894c:	b153      	cbz	r3, 8008964 <pbuf_copy_partial+0x50>
 800894e:	42ab      	cmp	r3, r5
 8008950:	d308      	bcc.n	8008964 <pbuf_copy_partial+0x50>
      offset = (u16_t)(offset - p->len);
 8008952:	1b5b      	subs	r3, r3, r5
 8008954:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008956:	6836      	ldr	r6, [r6, #0]
 8008958:	f1b9 0f00 	cmp.w	r9, #0
 800895c:	d0e8      	beq.n	8008930 <pbuf_copy_partial+0x1c>
 800895e:	2e00      	cmp	r6, #0
 8008960:	d1f3      	bne.n	800894a <pbuf_copy_partial+0x36>
 8008962:	e7e5      	b.n	8008930 <pbuf_copy_partial+0x1c>
      buf_copy_len = (u16_t)(p->len - offset);
 8008964:	1aec      	subs	r4, r5, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008966:	6871      	ldr	r1, [r6, #4]
 8008968:	eb08 0007 	add.w	r0, r8, r7
      buf_copy_len = (u16_t)(p->len - offset);
 800896c:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800896e:	4419      	add	r1, r3
 8008970:	454c      	cmp	r4, r9
 8008972:	bf28      	it	cs
 8008974:	464c      	movcs	r4, r9
 8008976:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008978:	4427      	add	r7, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800897a:	f003 fe3b 	bl	800c5f4 <memcpy>
      len = (u16_t)(len - buf_copy_len);
 800897e:	eba9 0204 	sub.w	r2, r9, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8008982:	b2bf      	uxth	r7, r7
      offset = 0;
 8008984:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8008986:	fa1f f982 	uxth.w	r9, r2
      offset = 0;
 800898a:	e7e4      	b.n	8008956 <pbuf_copy_partial+0x42>
  u16_t left = 0;
 800898c:	2700      	movs	r7, #0
 800898e:	e7e3      	b.n	8008958 <pbuf_copy_partial+0x44>
 8008990:	0801fb80 	.word	0x0801fb80
 8008994:	0801fe27 	.word	0x0801fe27
 8008998:	0801e3d3 	.word	0x0801e3d3
 800899c:	0801fe46 	.word	0x0801fe46

080089a0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80089a0:	b538      	push	{r3, r4, r5, lr}
 80089a2:	4615      	mov	r5, r2
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80089a4:	460a      	mov	r2, r1
 80089a6:	8929      	ldrh	r1, [r5, #8]
 80089a8:	f7ff fe02 	bl	80085b0 <pbuf_alloc>
  if (q == NULL) {
 80089ac:	4604      	mov	r4, r0
 80089ae:	b150      	cbz	r0, 80089c6 <pbuf_clone+0x26>
    return NULL;
  }
  err = pbuf_copy(q, p);
 80089b0:	4629      	mov	r1, r5
 80089b2:	f7ff ff2d 	bl	8008810 <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80089b6:	b130      	cbz	r0, 80089c6 <pbuf_clone+0x26>
 80089b8:	4b04      	ldr	r3, [pc, #16]	; (80089cc <pbuf_clone+0x2c>)
 80089ba:	f240 5224 	movw	r2, #1316	; 0x524
 80089be:	4904      	ldr	r1, [pc, #16]	; (80089d0 <pbuf_clone+0x30>)
 80089c0:	4804      	ldr	r0, [pc, #16]	; (80089d4 <pbuf_clone+0x34>)
 80089c2:	f003 fe47 	bl	800c654 <iprintf>
  return q;
}
 80089c6:	4620      	mov	r0, r4
 80089c8:	bd38      	pop	{r3, r4, r5, pc}
 80089ca:	bf00      	nop
 80089cc:	0801fb80 	.word	0x0801fb80
 80089d0:	0801ff46 	.word	0x0801ff46
 80089d4:	0801e3d3 	.word	0x0801e3d3

080089d8 <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
 80089d8:	4a12      	ldr	r2, [pc, #72]	; (8008a24 <tcp_new_port+0x4c>)
{
 80089da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80089de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089e0:	8813      	ldrh	r3, [r2, #0]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80089e2:	f64f 76ff 	movw	r6, #65535	; 0xffff
  tcp_port++;
 80089e6:	3301      	adds	r3, #1
 80089e8:	4d0f      	ldr	r5, [pc, #60]	; (8008a28 <tcp_new_port+0x50>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80089ea:	2104      	movs	r1, #4
  tcp_port++;
 80089ec:	b29b      	uxth	r3, r3
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80089ee:	42b3      	cmp	r3, r6
 80089f0:	bf08      	it	eq
 80089f2:	f44f 4340 	moveq.w	r3, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80089f6:	f855 4b04 	ldr.w	r4, [r5], #4
 80089fa:	6824      	ldr	r4, [r4, #0]
 80089fc:	b934      	cbnz	r4, 8008a0c <tcp_new_port+0x34>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80089fe:	3901      	subs	r1, #1
 8008a00:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 8008a04:	d1f7      	bne.n	80089f6 <tcp_new_port+0x1e>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8008a06:	4618      	mov	r0, r3
 8008a08:	8013      	strh	r3, [r2, #0]
 8008a0a:	e007      	b.n	8008a1c <tcp_new_port+0x44>
      if (pcb->local_port == tcp_port) {
 8008a0c:	8ae7      	ldrh	r7, [r4, #22]
 8008a0e:	429f      	cmp	r7, r3
 8008a10:	d105      	bne.n	8008a1e <tcp_new_port+0x46>
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8008a12:	3801      	subs	r0, #1
 8008a14:	b280      	uxth	r0, r0
 8008a16:	2800      	cmp	r0, #0
 8008a18:	d1e5      	bne.n	80089e6 <tcp_new_port+0xe>
 8008a1a:	8013      	strh	r3, [r2, #0]
}
 8008a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8008a1e:	68e4      	ldr	r4, [r4, #12]
 8008a20:	e7ec      	b.n	80089fc <tcp_new_port+0x24>
 8008a22:	bf00      	nop
 8008a24:	24000028 	.word	0x24000028
 8008a28:	0800e2b8 	.word	0x0800e2b8

08008a2c <tcp_close_shutdown_fin>:
{
 8008a2c:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8008a2e:	4604      	mov	r4, r0
 8008a30:	b930      	cbnz	r0, 8008a40 <tcp_close_shutdown_fin+0x14>
 8008a32:	4b13      	ldr	r3, [pc, #76]	; (8008a80 <tcp_close_shutdown_fin+0x54>)
 8008a34:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8008a38:	4912      	ldr	r1, [pc, #72]	; (8008a84 <tcp_close_shutdown_fin+0x58>)
 8008a3a:	4813      	ldr	r0, [pc, #76]	; (8008a88 <tcp_close_shutdown_fin+0x5c>)
 8008a3c:	f003 fe0a 	bl	800c654 <iprintf>
  switch (pcb->state) {
 8008a40:	7d23      	ldrb	r3, [r4, #20]
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d003      	beq.n	8008a4e <tcp_close_shutdown_fin+0x22>
 8008a46:	2b07      	cmp	r3, #7
 8008a48:	d00c      	beq.n	8008a64 <tcp_close_shutdown_fin+0x38>
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d108      	bne.n	8008a60 <tcp_close_shutdown_fin+0x34>
      err = tcp_send_fin(pcb);
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f002 fdb6 	bl	800b5c0 <tcp_send_fin>
      if (err == ERR_OK) {
 8008a54:	b960      	cbnz	r0, 8008a70 <tcp_close_shutdown_fin+0x44>
        pcb->state = FIN_WAIT_1;
 8008a56:	2305      	movs	r3, #5
    tcp_output(pcb);
 8008a58:	4620      	mov	r0, r4
        pcb->state = LAST_ACK;
 8008a5a:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 8008a5c:	f002 ff10 	bl	800b880 <tcp_output>
  switch (pcb->state) {
 8008a60:	2000      	movs	r0, #0
}
 8008a62:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 8008a64:	4620      	mov	r0, r4
 8008a66:	f002 fdab 	bl	800b5c0 <tcp_send_fin>
      if (err == ERR_OK) {
 8008a6a:	b908      	cbnz	r0, 8008a70 <tcp_close_shutdown_fin+0x44>
        pcb->state = LAST_ACK;
 8008a6c:	2309      	movs	r3, #9
 8008a6e:	e7f3      	b.n	8008a58 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	d1f6      	bne.n	8008a62 <tcp_close_shutdown_fin+0x36>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8008a74:	8b63      	ldrh	r3, [r4, #26]
 8008a76:	f043 0308 	orr.w	r3, r3, #8
 8008a7a:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 8008a7c:	e7f0      	b.n	8008a60 <tcp_close_shutdown_fin+0x34>
 8008a7e:	bf00      	nop
 8008a80:	0801ff57 	.word	0x0801ff57
 8008a84:	0801ffc9 	.word	0x0801ffc9
 8008a88:	0801e3d3 	.word	0x0801e3d3

08008a8c <tcp_init>:
{
 8008a8c:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008a8e:	f003 fdf9 	bl	800c684 <rand>
 8008a92:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 8008a96:	4b02      	ldr	r3, [pc, #8]	; (8008aa0 <tcp_init+0x14>)
 8008a98:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 8008a9c:	8018      	strh	r0, [r3, #0]
}
 8008a9e:	bd08      	pop	{r3, pc}
 8008aa0:	24000028 	.word	0x24000028

08008aa4 <tcp_free>:
{
 8008aa4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008aa6:	7d03      	ldrb	r3, [r0, #20]
{
 8008aa8:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d105      	bne.n	8008aba <tcp_free+0x16>
 8008aae:	4b06      	ldr	r3, [pc, #24]	; (8008ac8 <tcp_free+0x24>)
 8008ab0:	22d4      	movs	r2, #212	; 0xd4
 8008ab2:	4906      	ldr	r1, [pc, #24]	; (8008acc <tcp_free+0x28>)
 8008ab4:	4806      	ldr	r0, [pc, #24]	; (8008ad0 <tcp_free+0x2c>)
 8008ab6:	f003 fdcd 	bl	800c654 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 8008aba:	4621      	mov	r1, r4
 8008abc:	2001      	movs	r0, #1
}
 8008abe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8008ac2:	f7ff baa3 	b.w	800800c <memp_free>
 8008ac6:	bf00      	nop
 8008ac8:	0801ff57 	.word	0x0801ff57
 8008acc:	0801ffd5 	.word	0x0801ffd5
 8008ad0:	0801e3d3 	.word	0x0801e3d3

08008ad4 <tcp_bind>:
{
 8008ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 8008ad6:	4d23      	ldr	r5, [pc, #140]	; (8008b64 <tcp_bind+0x90>)
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008ad8:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY;
 8008ada:	2900      	cmp	r1, #0
 8008adc:	bf18      	it	ne
 8008ade:	460d      	movne	r5, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8008ae0:	b948      	cbnz	r0, 8008af6 <tcp_bind+0x22>
 8008ae2:	4b21      	ldr	r3, [pc, #132]	; (8008b68 <tcp_bind+0x94>)
 8008ae4:	f240 22a9 	movw	r2, #681	; 0x2a9
 8008ae8:	4920      	ldr	r1, [pc, #128]	; (8008b6c <tcp_bind+0x98>)
 8008aea:	4821      	ldr	r0, [pc, #132]	; (8008b70 <tcp_bind+0x9c>)
 8008aec:	f003 fdb2 	bl	800c654 <iprintf>
 8008af0:	f06f 000f 	mvn.w	r0, #15
}
 8008af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8008af6:	7d03      	ldrb	r3, [r0, #20]
 8008af8:	b14b      	cbz	r3, 8008b0e <tcp_bind+0x3a>
 8008afa:	4b1b      	ldr	r3, [pc, #108]	; (8008b68 <tcp_bind+0x94>)
 8008afc:	f240 22ab 	movw	r2, #683	; 0x2ab
 8008b00:	491c      	ldr	r1, [pc, #112]	; (8008b74 <tcp_bind+0xa0>)
 8008b02:	481b      	ldr	r0, [pc, #108]	; (8008b70 <tcp_bind+0x9c>)
 8008b04:	f003 fda6 	bl	800c654 <iprintf>
 8008b08:	f06f 0005 	mvn.w	r0, #5
 8008b0c:	e7f2      	b.n	8008af4 <tcp_bind+0x20>
  if (port == 0) {
 8008b0e:	b932      	cbnz	r2, 8008b1e <tcp_bind+0x4a>
    port = tcp_new_port();
 8008b10:	f7ff ff62 	bl	80089d8 <tcp_new_port>
    if (port == 0) {
 8008b14:	4602      	mov	r2, r0
 8008b16:	b950      	cbnz	r0, 8008b2e <tcp_bind+0x5a>
      return ERR_BUF;
 8008b18:	f06f 0001 	mvn.w	r0, #1
 8008b1c:	e7ea      	b.n	8008af4 <tcp_bind+0x20>
 8008b1e:	4816      	ldr	r0, [pc, #88]	; (8008b78 <tcp_bind+0xa4>)
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008b20:	f850 1b04 	ldr.w	r1, [r0], #4
 8008b24:	6809      	ldr	r1, [r1, #0]
 8008b26:	b971      	cbnz	r1, 8008b46 <tcp_bind+0x72>
    for (i = 0; i < max_pcb_list; i++) {
 8008b28:	3301      	adds	r3, #1
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	d1f8      	bne.n	8008b20 <tcp_bind+0x4c>
  if (!ip_addr_isany(ipaddr)
 8008b2e:	682b      	ldr	r3, [r5, #0]
 8008b30:	b103      	cbz	r3, 8008b34 <tcp_bind+0x60>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8008b32:	6023      	str	r3, [r4, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008b34:	4b11      	ldr	r3, [pc, #68]	; (8008b7c <tcp_bind+0xa8>)
  pcb->local_port = port;
 8008b36:	82e2      	strh	r2, [r4, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	601c      	str	r4, [r3, #0]
 8008b3c:	60e2      	str	r2, [r4, #12]
 8008b3e:	f003 f975 	bl	800be2c <tcp_timer_needed>
  return ERR_OK;
 8008b42:	2000      	movs	r0, #0
 8008b44:	e7d6      	b.n	8008af4 <tcp_bind+0x20>
        if (cpcb->local_port == port) {
 8008b46:	8ace      	ldrh	r6, [r1, #22]
 8008b48:	4296      	cmp	r6, r2
 8008b4a:	d105      	bne.n	8008b58 <tcp_bind+0x84>
                (ip_addr_isany(&cpcb->local_ip) ||
 8008b4c:	680f      	ldr	r7, [r1, #0]
 8008b4e:	b12f      	cbz	r7, 8008b5c <tcp_bind+0x88>
                 ip_addr_isany(ipaddr) ||
 8008b50:	682e      	ldr	r6, [r5, #0]
 8008b52:	b11e      	cbz	r6, 8008b5c <tcp_bind+0x88>
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8008b54:	42b7      	cmp	r7, r6
 8008b56:	d001      	beq.n	8008b5c <tcp_bind+0x88>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8008b58:	68c9      	ldr	r1, [r1, #12]
 8008b5a:	e7e4      	b.n	8008b26 <tcp_bind+0x52>
              return ERR_USE;
 8008b5c:	f06f 0007 	mvn.w	r0, #7
 8008b60:	e7c8      	b.n	8008af4 <tcp_bind+0x20>
 8008b62:	bf00      	nop
 8008b64:	0800e1e4 	.word	0x0800e1e4
 8008b68:	0801ff57 	.word	0x0801ff57
 8008b6c:	0801ffe6 	.word	0x0801ffe6
 8008b70:	0801e3d3 	.word	0x0801e3d3
 8008b74:	0801fffc 	.word	0x0801fffc
 8008b78:	0800e2b8 	.word	0x0800e2b8
 8008b7c:	2400a760 	.word	0x2400a760

08008b80 <tcp_listen_with_backlog_and_err>:
{
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	4616      	mov	r6, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008b84:	4605      	mov	r5, r0
 8008b86:	b968      	cbnz	r0, 8008ba4 <tcp_listen_with_backlog_and_err+0x24>
 8008b88:	4b29      	ldr	r3, [pc, #164]	; (8008c30 <tcp_listen_with_backlog_and_err+0xb0>)
 8008b8a:	f240 3259 	movw	r2, #857	; 0x359
 8008b8e:	4929      	ldr	r1, [pc, #164]	; (8008c34 <tcp_listen_with_backlog_and_err+0xb4>)
  struct tcp_pcb_listen *lpcb = NULL;
 8008b90:	462c      	mov	r4, r5
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8008b92:	4829      	ldr	r0, [pc, #164]	; (8008c38 <tcp_listen_with_backlog_and_err+0xb8>)
 8008b94:	f003 fd5e 	bl	800c654 <iprintf>
 8008b98:	f06f 030f 	mvn.w	r3, #15
  if (err != NULL) {
 8008b9c:	b106      	cbz	r6, 8008ba0 <tcp_listen_with_backlog_and_err+0x20>
    *err = res;
 8008b9e:	7033      	strb	r3, [r6, #0]
}
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008ba4:	7d07      	ldrb	r7, [r0, #20]
 8008ba6:	b157      	cbz	r7, 8008bbe <tcp_listen_with_backlog_and_err+0x3e>
 8008ba8:	4b21      	ldr	r3, [pc, #132]	; (8008c30 <tcp_listen_with_backlog_and_err+0xb0>)
 8008baa:	f240 325a 	movw	r2, #858	; 0x35a
 8008bae:	4923      	ldr	r1, [pc, #140]	; (8008c3c <tcp_listen_with_backlog_and_err+0xbc>)
  struct tcp_pcb_listen *lpcb = NULL;
 8008bb0:	2400      	movs	r4, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8008bb2:	4821      	ldr	r0, [pc, #132]	; (8008c38 <tcp_listen_with_backlog_and_err+0xb8>)
 8008bb4:	f003 fd4e 	bl	800c654 <iprintf>
 8008bb8:	f06f 030e 	mvn.w	r3, #14
 8008bbc:	e7ee      	b.n	8008b9c <tcp_listen_with_backlog_and_err+0x1c>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8008bbe:	2002      	movs	r0, #2
 8008bc0:	f7ff f9f4 	bl	8007fac <memp_malloc>
  if (lpcb == NULL) {
 8008bc4:	4604      	mov	r4, r0
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d02f      	beq.n	8008c2a <tcp_listen_with_backlog_and_err+0xaa>
  lpcb->callback_arg = pcb->callback_arg;
 8008bca:	692b      	ldr	r3, [r5, #16]
  lpcb->state = LISTEN;
 8008bcc:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 8008bce:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8008bd0:	8aeb      	ldrh	r3, [r5, #22]
  lpcb->state = LISTEN;
 8008bd2:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 8008bd4:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8008bd6:	7d6a      	ldrb	r2, [r5, #21]
 8008bd8:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8008bda:	7a6a      	ldrb	r2, [r5, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8008bdc:	7207      	strb	r7, [r0, #8]
  lpcb->so_options = pcb->so_options;
 8008bde:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 8008be0:	7aea      	ldrb	r2, [r5, #11]
 8008be2:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8008be4:	7aaa      	ldrb	r2, [r5, #10]
 8008be6:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8008be8:	682a      	ldr	r2, [r5, #0]
 8008bea:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8008bec:	b13b      	cbz	r3, 8008bfe <tcp_listen_with_backlog_and_err+0x7e>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008bee:	4a14      	ldr	r2, [pc, #80]	; (8008c40 <tcp_listen_with_backlog_and_err+0xc0>)
 8008bf0:	6813      	ldr	r3, [r2, #0]
 8008bf2:	42ab      	cmp	r3, r5
 8008bf4:	d111      	bne.n	8008c1a <tcp_listen_with_backlog_and_err+0x9a>
 8008bf6:	68eb      	ldr	r3, [r5, #12]
 8008bf8:	6013      	str	r3, [r2, #0]
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60eb      	str	r3, [r5, #12]
  tcp_free(pcb);
 8008bfe:	4628      	mov	r0, r5
 8008c00:	f7ff ff50 	bl	8008aa4 <tcp_free>
  lpcb->accept = tcp_accept_null;
 8008c04:	4b0f      	ldr	r3, [pc, #60]	; (8008c44 <tcp_listen_with_backlog_and_err+0xc4>)
 8008c06:	61a3      	str	r3, [r4, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8008c08:	4b0f      	ldr	r3, [pc, #60]	; (8008c48 <tcp_listen_with_backlog_and_err+0xc8>)
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	601c      	str	r4, [r3, #0]
 8008c0e:	60e2      	str	r2, [r4, #12]
 8008c10:	f003 f90c 	bl	800be2c <tcp_timer_needed>
  res = ERR_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	e7c1      	b.n	8008b9c <tcp_listen_with_backlog_and_err+0x1c>
 8008c18:	4613      	mov	r3, r2
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d0ed      	beq.n	8008bfa <tcp_listen_with_backlog_and_err+0x7a>
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	42aa      	cmp	r2, r5
 8008c22:	d1f9      	bne.n	8008c18 <tcp_listen_with_backlog_and_err+0x98>
 8008c24:	68ea      	ldr	r2, [r5, #12]
 8008c26:	60da      	str	r2, [r3, #12]
 8008c28:	e7e7      	b.n	8008bfa <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 8008c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c2e:	e7b5      	b.n	8008b9c <tcp_listen_with_backlog_and_err+0x1c>
 8008c30:	0801ff57 	.word	0x0801ff57
 8008c34:	08020024 	.word	0x08020024
 8008c38:	0801e3d3 	.word	0x0801e3d3
 8008c3c:	08020051 	.word	0x08020051
 8008c40:	2400a760 	.word	0x2400a760
 8008c44:	080097fd 	.word	0x080097fd
 8008c48:	2400a75c 	.word	0x2400a75c

08008c4c <tcp_update_rcv_ann_wnd>:
{
 8008c4c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8008c4e:	4604      	mov	r4, r0
 8008c50:	b930      	cbnz	r0, 8008c60 <tcp_update_rcv_ann_wnd+0x14>
 8008c52:	4b15      	ldr	r3, [pc, #84]	; (8008ca8 <tcp_update_rcv_ann_wnd+0x5c>)
 8008c54:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008c58:	4914      	ldr	r1, [pc, #80]	; (8008cac <tcp_update_rcv_ann_wnd+0x60>)
 8008c5a:	4815      	ldr	r0, [pc, #84]	; (8008cb0 <tcp_update_rcv_ann_wnd+0x64>)
 8008c5c:	f003 fcfa 	bl	800c654 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008c60:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008c62:	f240 56b4 	movw	r6, #1460	; 0x5b4
 8008c66:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008c68:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8008c6a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8008c6c:	1ac8      	subs	r0, r1, r3
 8008c6e:	42b2      	cmp	r2, r6
 8008c70:	4428      	add	r0, r5
 8008c72:	bf94      	ite	ls
 8008c74:	1a82      	subls	r2, r0, r2
 8008c76:	1b82      	subhi	r2, r0, r6
 8008c78:	2a00      	cmp	r2, #0
 8008c7a:	db01      	blt.n	8008c80 <tcp_update_rcv_ann_wnd+0x34>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8008c7c:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 8008c7e:	bd70      	pop	{r4, r5, r6, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8008c80:	1aea      	subs	r2, r5, r3
 8008c82:	2a00      	cmp	r2, #0
 8008c84:	dd02      	ble.n	8008c8c <tcp_update_rcv_ann_wnd+0x40>
      pcb->rcv_ann_wnd = 0;
 8008c86:	2000      	movs	r0, #0
 8008c88:	8560      	strh	r0, [r4, #42]	; 0x2a
 8008c8a:	e7f8      	b.n	8008c7e <tcp_update_rcv_ann_wnd+0x32>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8008c8c:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8008c8e:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8008c92:	d306      	bcc.n	8008ca2 <tcp_update_rcv_ann_wnd+0x56>
 8008c94:	4b04      	ldr	r3, [pc, #16]	; (8008ca8 <tcp_update_rcv_ann_wnd+0x5c>)
 8008c96:	f240 32b6 	movw	r2, #950	; 0x3b6
 8008c9a:	4906      	ldr	r1, [pc, #24]	; (8008cb4 <tcp_update_rcv_ann_wnd+0x68>)
 8008c9c:	4804      	ldr	r0, [pc, #16]	; (8008cb0 <tcp_update_rcv_ann_wnd+0x64>)
 8008c9e:	f003 fcd9 	bl	800c654 <iprintf>
    return 0;
 8008ca2:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8008ca4:	8565      	strh	r5, [r4, #42]	; 0x2a
 8008ca6:	e7ea      	b.n	8008c7e <tcp_update_rcv_ann_wnd+0x32>
 8008ca8:	0801ff57 	.word	0x0801ff57
 8008cac:	08020088 	.word	0x08020088
 8008cb0:	0801e3d3 	.word	0x0801e3d3
 8008cb4:	080200ac 	.word	0x080200ac

08008cb8 <tcp_recved>:
{
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	460c      	mov	r4, r1
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	b940      	cbnz	r0, 8008cd2 <tcp_recved+0x1a>
 8008cc0:	4b18      	ldr	r3, [pc, #96]	; (8008d24 <tcp_recved+0x6c>)
 8008cc2:	f240 32cf 	movw	r2, #975	; 0x3cf
 8008cc6:	4918      	ldr	r1, [pc, #96]	; (8008d28 <tcp_recved+0x70>)
 8008cc8:	4818      	ldr	r0, [pc, #96]	; (8008d2c <tcp_recved+0x74>)
}
 8008cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8008cce:	f003 bcc1 	b.w	800c654 <iprintf>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8008cd2:	7d03      	ldrb	r3, [r0, #20]
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d106      	bne.n	8008ce6 <tcp_recved+0x2e>
 8008cd8:	4b12      	ldr	r3, [pc, #72]	; (8008d24 <tcp_recved+0x6c>)
 8008cda:	f240 32d2 	movw	r2, #978	; 0x3d2
 8008cde:	4914      	ldr	r1, [pc, #80]	; (8008d30 <tcp_recved+0x78>)
 8008ce0:	4812      	ldr	r0, [pc, #72]	; (8008d2c <tcp_recved+0x74>)
 8008ce2:	f003 fcb7 	bl	800c654 <iprintf>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008ce6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008ce8:	f640 3368 	movw	r3, #2920	; 0xb68
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8008cec:	1911      	adds	r1, r2, r4
 8008cee:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8008cf0:	4299      	cmp	r1, r3
 8008cf2:	d813      	bhi.n	8008d1c <tcp_recved+0x64>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008cf4:	428a      	cmp	r2, r1
 8008cf6:	bf88      	it	hi
 8008cf8:	4619      	movhi	r1, r3
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8008cfa:	4628      	mov	r0, r5
 8008cfc:	8529      	strh	r1, [r5, #40]	; 0x28
 8008cfe:	f7ff ffa5 	bl	8008c4c <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8008d02:	f240 23d9 	movw	r3, #729	; 0x2d9
 8008d06:	4298      	cmp	r0, r3
 8008d08:	d90a      	bls.n	8008d20 <tcp_recved+0x68>
    tcp_ack_now(pcb);
 8008d0a:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8008d0c:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8008d0e:	f043 0302 	orr.w	r3, r3, #2
 8008d12:	836b      	strh	r3, [r5, #26]
}
 8008d14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8008d18:	f002 bdb2 	b.w	800b880 <tcp_output>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	e7ec      	b.n	8008cfa <tcp_recved+0x42>
}
 8008d20:	bd70      	pop	{r4, r5, r6, pc}
 8008d22:	bf00      	nop
 8008d24:	0801ff57 	.word	0x0801ff57
 8008d28:	080200c6 	.word	0x080200c6
 8008d2c:	0801e3d3 	.word	0x0801e3d3
 8008d30:	080200de 	.word	0x080200de

08008d34 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8008d34:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8008d36:	4604      	mov	r4, r0
 8008d38:	b148      	cbz	r0, 8008d4e <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 8008d3a:	6840      	ldr	r0, [r0, #4]
 8008d3c:	b108      	cbz	r0, 8008d42 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8008d3e:	f7ff fbcf 	bl	80084e0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8008d42:	4621      	mov	r1, r4
 8008d44:	2003      	movs	r0, #3
  }
}
 8008d46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8008d4a:	f7ff b95f 	b.w	800800c <memp_free>
}
 8008d4e:	bd10      	pop	{r4, pc}

08008d50 <tcp_segs_free>:
{
 8008d50:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8008d52:	b900      	cbnz	r0, 8008d56 <tcp_segs_free+0x6>
}
 8008d54:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8008d56:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8008d58:	f7ff ffec 	bl	8008d34 <tcp_seg_free>
    seg = next;
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	e7f8      	b.n	8008d52 <tcp_segs_free+0x2>

08008d60 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8008d60:	b100      	cbz	r0, 8008d64 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8008d62:	6101      	str	r1, [r0, #16]
  }
}
 8008d64:	4770      	bx	lr
	...

08008d68 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	b158      	cbz	r0, 8008d88 <tcp_recv+0x20>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8008d70:	7d03      	ldrb	r3, [r0, #20]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d106      	bne.n	8008d84 <tcp_recv+0x1c>
 8008d76:	4b05      	ldr	r3, [pc, #20]	; (8008d8c <tcp_recv+0x24>)
 8008d78:	f240 72df 	movw	r2, #2015	; 0x7df
 8008d7c:	4904      	ldr	r1, [pc, #16]	; (8008d90 <tcp_recv+0x28>)
 8008d7e:	4805      	ldr	r0, [pc, #20]	; (8008d94 <tcp_recv+0x2c>)
 8008d80:	f003 fc68 	bl	800c654 <iprintf>
    pcb->recv = recv;
 8008d84:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 8008d88:	bd38      	pop	{r3, r4, r5, pc}
 8008d8a:	bf00      	nop
 8008d8c:	0801ff57 	.word	0x0801ff57
 8008d90:	0802011d 	.word	0x0802011d
 8008d94:	0801e3d3 	.word	0x0801e3d3

08008d98 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8008d98:	b538      	push	{r3, r4, r5, lr}
 8008d9a:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	b150      	cbz	r0, 8008db6 <tcp_sent+0x1e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8008da0:	7d03      	ldrb	r3, [r0, #20]
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d106      	bne.n	8008db4 <tcp_sent+0x1c>
 8008da6:	4b04      	ldr	r3, [pc, #16]	; (8008db8 <tcp_sent+0x20>)
 8008da8:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8008dac:	4903      	ldr	r1, [pc, #12]	; (8008dbc <tcp_sent+0x24>)
 8008dae:	4804      	ldr	r0, [pc, #16]	; (8008dc0 <tcp_sent+0x28>)
 8008db0:	f003 fc50 	bl	800c654 <iprintf>
    pcb->sent = sent;
 8008db4:	67e5      	str	r5, [r4, #124]	; 0x7c
  }
}
 8008db6:	bd38      	pop	{r3, r4, r5, pc}
 8008db8:	0801ff57 	.word	0x0801ff57
 8008dbc:	08020144 	.word	0x08020144
 8008dc0:	0801e3d3 	.word	0x0801e3d3

08008dc4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	460d      	mov	r5, r1
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8008dc8:	4604      	mov	r4, r0
 8008dca:	b158      	cbz	r0, 8008de4 <tcp_err+0x20>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8008dcc:	7d03      	ldrb	r3, [r0, #20]
 8008dce:	2b01      	cmp	r3, #1
 8008dd0:	d106      	bne.n	8008de0 <tcp_err+0x1c>
 8008dd2:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <tcp_err+0x24>)
 8008dd4:	f640 020d 	movw	r2, #2061	; 0x80d
 8008dd8:	4904      	ldr	r1, [pc, #16]	; (8008dec <tcp_err+0x28>)
 8008dda:	4805      	ldr	r0, [pc, #20]	; (8008df0 <tcp_err+0x2c>)
 8008ddc:	f003 fc3a 	bl	800c654 <iprintf>
    pcb->errf = err;
 8008de0:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  }
}
 8008de4:	bd38      	pop	{r3, r4, r5, pc}
 8008de6:	bf00      	nop
 8008de8:	0801ff57 	.word	0x0801ff57
 8008dec:	0802016b 	.word	0x0802016b
 8008df0:	0801e3d3 	.word	0x0801e3d3

08008df4 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8008df4:	b118      	cbz	r0, 8008dfe <tcp_accept+0xa>
 8008df6:	7d03      	ldrb	r3, [r0, #20]
 8008df8:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8008dfa:	bf08      	it	eq
 8008dfc:	6181      	streq	r1, [r0, #24]
  }
}
 8008dfe:	4770      	bx	lr

08008e00 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	460e      	mov	r6, r1
 8008e04:	4615      	mov	r5, r2
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008e06:	4604      	mov	r4, r0
 8008e08:	b940      	cbnz	r0, 8008e1c <tcp_poll+0x1c>
 8008e0a:	4b0b      	ldr	r3, [pc, #44]	; (8008e38 <tcp_poll+0x38>)
 8008e0c:	f640 023d 	movw	r2, #2109	; 0x83d
 8008e10:	490a      	ldr	r1, [pc, #40]	; (8008e3c <tcp_poll+0x3c>)
 8008e12:	480b      	ldr	r0, [pc, #44]	; (8008e40 <tcp_poll+0x40>)
  pcb->poll = poll;
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
}
 8008e14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8008e18:	f003 bc1c 	b.w	800c654 <iprintf>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8008e1c:	7d03      	ldrb	r3, [r0, #20]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d106      	bne.n	8008e30 <tcp_poll+0x30>
 8008e22:	4b05      	ldr	r3, [pc, #20]	; (8008e38 <tcp_poll+0x38>)
 8008e24:	f640 023e 	movw	r2, #2110	; 0x83e
 8008e28:	4906      	ldr	r1, [pc, #24]	; (8008e44 <tcp_poll+0x44>)
 8008e2a:	4805      	ldr	r0, [pc, #20]	; (8008e40 <tcp_poll+0x40>)
 8008e2c:	f003 fc12 	bl	800c654 <iprintf>
  pcb->poll = poll;
 8008e30:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->pollinterval = interval;
 8008e34:	7765      	strb	r5, [r4, #29]
}
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	0801ff57 	.word	0x0801ff57
 8008e3c:	08020191 	.word	0x08020191
 8008e40:	0801e3d3 	.word	0x0801e3d3
 8008e44:	080201a7 	.word	0x080201a7

08008e48 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8008e48:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	b940      	cbnz	r0, 8008e60 <tcp_pcb_purge+0x18>
 8008e4e:	4b11      	ldr	r3, [pc, #68]	; (8008e94 <tcp_pcb_purge+0x4c>)
 8008e50:	f640 0251 	movw	r2, #2129	; 0x851
 8008e54:	4910      	ldr	r1, [pc, #64]	; (8008e98 <tcp_pcb_purge+0x50>)
 8008e56:	4811      	ldr	r0, [pc, #68]	; (8008e9c <tcp_pcb_purge+0x54>)
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 8008e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8008e5c:	f003 bbfa 	b.w	800c654 <iprintf>
  if (pcb->state != CLOSED &&
 8008e60:	7d03      	ldrb	r3, [r0, #20]
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d915      	bls.n	8008e92 <tcp_pcb_purge+0x4a>
 8008e66:	2b0a      	cmp	r3, #10
 8008e68:	d013      	beq.n	8008e92 <tcp_pcb_purge+0x4a>
    if (pcb->refused_data != NULL) {
 8008e6a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8008e6c:	b118      	cbz	r0, 8008e76 <tcp_pcb_purge+0x2e>
      pbuf_free(pcb->refused_data);
 8008e6e:	f7ff fb37 	bl	80084e0 <pbuf_free>
      pcb->refused_data = NULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	6763      	str	r3, [r4, #116]	; 0x74
    pcb->rtime = -1;
 8008e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 8008e7a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    pcb->rtime = -1;
 8008e7c:	8623      	strh	r3, [r4, #48]	; 0x30
    tcp_segs_free(pcb->unsent);
 8008e7e:	f7ff ff67 	bl	8008d50 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8008e82:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008e84:	f7ff ff64 	bl	8008d50 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 8008e8e:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
}
 8008e92:	bd10      	pop	{r4, pc}
 8008e94:	0801ff57 	.word	0x0801ff57
 8008e98:	080201c5 	.word	0x080201c5
 8008e9c:	0801e3d3 	.word	0x0801e3d3

08008ea0 <tcp_slowtmr>:
{
 8008ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8008ea4:	4eaf      	ldr	r6, [pc, #700]	; (8009164 <tcp_slowtmr+0x2c4>)
{
 8008ea6:	b087      	sub	sp, #28
 8008ea8:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8009170 <tcp_slowtmr+0x2d0>
  ++tcp_ticks;
 8008eac:	6833      	ldr	r3, [r6, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008eae:	4fae      	ldr	r7, [pc, #696]	; (8009168 <tcp_slowtmr+0x2c8>)
  ++tcp_ticks;
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 8008eb4:	4bad      	ldr	r3, [pc, #692]	; (800916c <tcp_slowtmr+0x2cc>)
 8008eb6:	781a      	ldrb	r2, [r3, #0]
 8008eb8:	9304      	str	r3, [sp, #16]
 8008eba:	3201      	adds	r2, #1
 8008ebc:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 8008ebe:	4bac      	ldr	r3, [pc, #688]	; (8009170 <tcp_slowtmr+0x2d0>)
  prev = NULL;
 8008ec0:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008ec4:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8009198 <tcp_slowtmr+0x2f8>
  pcb = tcp_active_pcbs;
 8008ec8:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 8008eca:	b96c      	cbnz	r4, 8008ee8 <tcp_slowtmr+0x48>
  pcb = tcp_tw_pcbs;
 8008ecc:	4fa9      	ldr	r7, [pc, #676]	; (8009174 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008ece:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8009168 <tcp_slowtmr+0x2c8>
  pcb = tcp_tw_pcbs;
 8008ed2:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008ed4:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 800919c <tcp_slowtmr+0x2fc>
 8008ed8:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8009198 <tcp_slowtmr+0x2f8>
  while (pcb != NULL) {
 8008edc:	2d00      	cmp	r5, #0
 8008ede:	f040 81aa 	bne.w	8009236 <tcp_slowtmr+0x396>
}
 8008ee2:	b007      	add	sp, #28
 8008ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8008ee8:	7d23      	ldrb	r3, [r4, #20]
 8008eea:	b933      	cbnz	r3, 8008efa <tcp_slowtmr+0x5a>
 8008eec:	463b      	mov	r3, r7
 8008eee:	f240 42be 	movw	r2, #1214	; 0x4be
 8008ef2:	49a1      	ldr	r1, [pc, #644]	; (8009178 <tcp_slowtmr+0x2d8>)
 8008ef4:	4640      	mov	r0, r8
 8008ef6:	f003 fbad 	bl	800c654 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8008efa:	7d23      	ldrb	r3, [r4, #20]
 8008efc:	2b01      	cmp	r3, #1
 8008efe:	d106      	bne.n	8008f0e <tcp_slowtmr+0x6e>
 8008f00:	463b      	mov	r3, r7
 8008f02:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8008f06:	499d      	ldr	r1, [pc, #628]	; (800917c <tcp_slowtmr+0x2dc>)
 8008f08:	4640      	mov	r0, r8
 8008f0a:	f003 fba3 	bl	800c654 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8008f0e:	7d23      	ldrb	r3, [r4, #20]
 8008f10:	2b0a      	cmp	r3, #10
 8008f12:	d106      	bne.n	8008f22 <tcp_slowtmr+0x82>
 8008f14:	463b      	mov	r3, r7
 8008f16:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8008f1a:	4999      	ldr	r1, [pc, #612]	; (8009180 <tcp_slowtmr+0x2e0>)
 8008f1c:	4640      	mov	r0, r8
 8008f1e:	f003 fb99 	bl	800c654 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8008f22:	9b04      	ldr	r3, [sp, #16]
 8008f24:	7fa2      	ldrb	r2, [r4, #30]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d103      	bne.n	8008f34 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8008f2c:	68e5      	ldr	r5, [r4, #12]
      continue;
 8008f2e:	46a1      	mov	r9, r4
 8008f30:	462c      	mov	r4, r5
 8008f32:	e7ca      	b.n	8008eca <tcp_slowtmr+0x2a>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008f34:	7d22      	ldrb	r2, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8008f36:	77a3      	strb	r3, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8008f38:	2a02      	cmp	r2, #2
 8008f3a:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8008f3e:	d178      	bne.n	8009032 <tcp_slowtmr+0x192>
 8008f40:	2b05      	cmp	r3, #5
 8008f42:	d978      	bls.n	8009036 <tcp_slowtmr+0x196>
      ++pcb_remove;
 8008f44:	f04f 0b01 	mov.w	fp, #1
    if (pcb->state == FIN_WAIT_2) {
 8008f48:	7d23      	ldrb	r3, [r4, #20]
 8008f4a:	2b06      	cmp	r3, #6
 8008f4c:	d10b      	bne.n	8008f66 <tcp_slowtmr+0xc6>
      if (pcb->flags & TF_RXCLOSED) {
 8008f4e:	8b62      	ldrh	r2, [r4, #26]
 8008f50:	06d2      	lsls	r2, r2, #27
 8008f52:	d508      	bpl.n	8008f66 <tcp_slowtmr+0xc6>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f54:	6832      	ldr	r2, [r6, #0]
 8008f56:	6a21      	ldr	r1, [r4, #32]
 8008f58:	1a52      	subs	r2, r2, r1
 8008f5a:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8008f5c:	bf84      	itt	hi
 8008f5e:	f10b 0b01 	addhi.w	fp, fp, #1
 8008f62:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8008f66:	7a65      	ldrb	r5, [r4, #9]
 8008f68:	f015 0508 	ands.w	r5, r5, #8
 8008f6c:	d019      	beq.n	8008fa2 <tcp_slowtmr+0x102>
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d002      	beq.n	8008f78 <tcp_slowtmr+0xd8>
        ((pcb->state == ESTABLISHED) ||
 8008f72:	2b07      	cmp	r3, #7
 8008f74:	f040 8126 	bne.w	80091c4 <tcp_slowtmr+0x324>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008f78:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8008f7c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f80:	6831      	ldr	r1, [r6, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008f82:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f86:	6a23      	ldr	r3, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008f88:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f8c:	1ac9      	subs	r1, r1, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8008f8e:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008f92:	4291      	cmp	r1, r2
 8008f94:	f240 8104 	bls.w	80091a0 <tcp_slowtmr+0x300>
        ++pcb_remove;
 8008f98:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 8008f9c:	2501      	movs	r5, #1
        ++pcb_remove;
 8008f9e:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->state == SYN_RCVD) {
 8008fa2:	7d23      	ldrb	r3, [r4, #20]
 8008fa4:	2b03      	cmp	r3, #3
 8008fa6:	f040 810f 	bne.w	80091c8 <tcp_slowtmr+0x328>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8008faa:	6833      	ldr	r3, [r6, #0]
 8008fac:	6a22      	ldr	r2, [r4, #32]
 8008fae:	1a9b      	subs	r3, r3, r2
 8008fb0:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8008fb2:	d803      	bhi.n	8008fbc <tcp_slowtmr+0x11c>
    if (pcb_remove) {
 8008fb4:	f1bb 0f00 	cmp.w	fp, #0
 8008fb8:	f000 811b 	beq.w	80091f2 <tcp_slowtmr+0x352>
      tcp_pcb_purge(pcb);
 8008fbc:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8008fbe:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8008fc2:	f7ff ff41 	bl	8008e48 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008fc6:	f8da 3000 	ldr.w	r3, [sl]
      if (prev != NULL) {
 8008fca:	f1b9 0f00 	cmp.w	r9, #0
 8008fce:	f000 8103 	beq.w	80091d8 <tcp_slowtmr+0x338>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8008fd2:	42a3      	cmp	r3, r4
 8008fd4:	d106      	bne.n	8008fe4 <tcp_slowtmr+0x144>
 8008fd6:	463b      	mov	r3, r7
 8008fd8:	f240 526d 	movw	r2, #1389	; 0x56d
 8008fdc:	4969      	ldr	r1, [pc, #420]	; (8009184 <tcp_slowtmr+0x2e4>)
 8008fde:	4640      	mov	r0, r8
 8008fe0:	f003 fb38 	bl	800c654 <iprintf>
        prev->next = pcb->next;
 8008fe4:	68e3      	ldr	r3, [r4, #12]
 8008fe6:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 8008fea:	b15d      	cbz	r5, 8009004 <tcp_slowtmr+0x164>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8008fec:	8b23      	ldrh	r3, [r4, #24]
 8008fee:	4620      	mov	r0, r4
 8008ff0:	9302      	str	r3, [sp, #8]
 8008ff2:	8ae3      	ldrh	r3, [r4, #22]
 8008ff4:	9301      	str	r3, [sp, #4]
 8008ff6:	1d23      	adds	r3, r4, #4
 8008ff8:	9300      	str	r3, [sp, #0]
 8008ffa:	4623      	mov	r3, r4
 8008ffc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008ffe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009000:	f002 fbc6 	bl	800b790 <tcp_rst>
      err_arg = pcb->callback_arg;
 8009004:	6923      	ldr	r3, [r4, #16]
      tcp_free(pcb2);
 8009006:	4620      	mov	r0, r4
      pcb = pcb->next;
 8009008:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 800900a:	9305      	str	r3, [sp, #20]
      tcp_free(pcb2);
 800900c:	f7ff fd4a 	bl	8008aa4 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8009010:	4c5d      	ldr	r4, [pc, #372]	; (8009188 <tcp_slowtmr+0x2e8>)
 8009012:	2200      	movs	r2, #0
 8009014:	7022      	strb	r2, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8009016:	f1bb 0f00 	cmp.w	fp, #0
 800901a:	d008      	beq.n	800902e <tcp_slowtmr+0x18e>
 800901c:	9b05      	ldr	r3, [sp, #20]
 800901e:	f06f 010c 	mvn.w	r1, #12
 8009022:	4618      	mov	r0, r3
 8009024:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8009026:	7823      	ldrb	r3, [r4, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f47f af48 	bne.w	8008ebe <tcp_slowtmr+0x1e>
 800902e:	464c      	mov	r4, r9
 8009030:	e77d      	b.n	8008f2e <tcp_slowtmr+0x8e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8009032:	2b0b      	cmp	r3, #11
 8009034:	e785      	b.n	8008f42 <tcp_slowtmr+0xa2>
      if (pcb->persist_backoff > 0) {
 8009036:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 800903a:	f1bb 0f00 	cmp.w	fp, #0
 800903e:	d045      	beq.n	80090cc <tcp_slowtmr+0x22c>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8009040:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009042:	b133      	cbz	r3, 8009052 <tcp_slowtmr+0x1b2>
 8009044:	463b      	mov	r3, r7
 8009046:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800904a:	4950      	ldr	r1, [pc, #320]	; (800918c <tcp_slowtmr+0x2ec>)
 800904c:	4640      	mov	r0, r8
 800904e:	f003 fb01 	bl	800c654 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8009052:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009054:	b933      	cbnz	r3, 8009064 <tcp_slowtmr+0x1c4>
 8009056:	463b      	mov	r3, r7
 8009058:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800905c:	494c      	ldr	r1, [pc, #304]	; (8009190 <tcp_slowtmr+0x2f0>)
 800905e:	4640      	mov	r0, r8
 8009060:	f003 faf8 	bl	800c654 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8009064:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8009068:	2b0b      	cmp	r3, #11
 800906a:	f63f af6b 	bhi.w	8008f44 <tcp_slowtmr+0xa4>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800906e:	f894 2095 	ldrb.w	r2, [r4, #149]	; 0x95
 8009072:	4b48      	ldr	r3, [pc, #288]	; (8009194 <tcp_slowtmr+0x2f4>)
 8009074:	4413      	add	r3, r2
 8009076:	7bda      	ldrb	r2, [r3, #15]
          if (pcb->persist_cnt < backoff_cnt) {
 8009078:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 800907c:	4293      	cmp	r3, r2
 800907e:	d30b      	bcc.n	8009098 <tcp_slowtmr+0x1f8>
            if (pcb->snd_wnd == 0) {
 8009080:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8009084:	b189      	cbz	r1, 80090aa <tcp_slowtmr+0x20a>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8009086:	4620      	mov	r0, r4
 8009088:	f002 f93a 	bl	800b300 <tcp_split_unsent_seg>
 800908c:	b990      	cbnz	r0, 80090b4 <tcp_slowtmr+0x214>
                if (tcp_output(pcb) == ERR_OK) {
 800908e:	4620      	mov	r0, r4
 8009090:	f002 fbf6 	bl	800b880 <tcp_output>
 8009094:	b130      	cbz	r0, 80090a4 <tcp_slowtmr+0x204>
 8009096:	e00d      	b.n	80090b4 <tcp_slowtmr+0x214>
            pcb->persist_cnt++;
 8009098:	3301      	adds	r3, #1
 800909a:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 800909c:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 800909e:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
          if (pcb->persist_cnt >= backoff_cnt) {
 80090a2:	d2ed      	bcs.n	8009080 <tcp_slowtmr+0x1e0>
    pcb_remove = 0;
 80090a4:	f04f 0b00 	mov.w	fp, #0
 80090a8:	e74e      	b.n	8008f48 <tcp_slowtmr+0xa8>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80090aa:	4620      	mov	r0, r4
 80090ac:	f002 fdf0 	bl	800bc90 <tcp_zero_window_probe>
 80090b0:	2800      	cmp	r0, #0
 80090b2:	d1f7      	bne.n	80090a4 <tcp_slowtmr+0x204>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80090b4:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
              pcb->persist_cnt = 0;
 80090b8:	f04f 0b00 	mov.w	fp, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80090bc:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 80090be:	f884 b094 	strb.w	fp, [r4, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80090c2:	d8ef      	bhi.n	80090a4 <tcp_slowtmr+0x204>
                pcb->persist_backoff++;
 80090c4:	3301      	adds	r3, #1
 80090c6:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 80090ca:	e73d      	b.n	8008f48 <tcp_slowtmr+0xa8>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80090cc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 80090ce:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80090d2:	4293      	cmp	r3, r2
          ++pcb->rtime;
 80090d4:	bf9c      	itt	ls
 80090d6:	3301      	addls	r3, #1
 80090d8:	8623      	strhls	r3, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 80090da:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80090de:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80090e2:	429a      	cmp	r2, r3
 80090e4:	dbde      	blt.n	80090a4 <tcp_slowtmr+0x204>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80090e6:	4620      	mov	r0, r4
 80090e8:	f002 fa9a 	bl	800b620 <tcp_rexmit_rto_prepare>
 80090ec:	b128      	cbz	r0, 80090fa <tcp_slowtmr+0x25a>
 80090ee:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1d7      	bne.n	80090a4 <tcp_slowtmr+0x204>
 80090f4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0d4      	beq.n	80090a4 <tcp_slowtmr+0x204>
            if (pcb->state != SYN_SENT) {
 80090fa:	7d23      	ldrb	r3, [r4, #20]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d015      	beq.n	800912c <tcp_slowtmr+0x28c>
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8009100:	f9b4 203c 	ldrsh.w	r2, [r4, #60]	; 0x3c
 8009104:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8009108:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800910c:	eb03 03e2 	add.w	r3, r3, r2, asr #3
 8009110:	4a20      	ldr	r2, [pc, #128]	; (8009194 <tcp_slowtmr+0x2f4>)
 8009112:	290c      	cmp	r1, #12
 8009114:	bf94      	ite	ls
 8009116:	1852      	addls	r2, r2, r1
 8009118:	320c      	addhi	r2, #12
 800911a:	7dd2      	ldrb	r2, [r2, #23]
 800911c:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800911e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8009122:	4293      	cmp	r3, r2
 8009124:	bfa8      	it	ge
 8009126:	4613      	movge	r3, r2
 8009128:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800912c:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
            pcb->rtime = 0;
 8009130:	2000      	movs	r0, #0
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8009132:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009136:	8e65      	ldrh	r5, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 8009138:	429a      	cmp	r2, r3
            pcb->rtime = 0;
 800913a:	8620      	strh	r0, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 800913c:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 8009140:	4620      	mov	r0, r4
            pcb->ssthresh = eff_wnd >> 1;
 8009142:	bf28      	it	cs
 8009144:	461a      	movcs	r2, r3
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8009146:	006b      	lsls	r3, r5, #1
            pcb->cwnd = pcb->mss;
 8009148:	f8a4 5048 	strh.w	r5, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800914c:	b29b      	uxth	r3, r3
            pcb->ssthresh = eff_wnd >> 1;
 800914e:	0851      	lsrs	r1, r2, #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8009150:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 8009154:	bf98      	it	ls
 8009156:	460b      	movls	r3, r1
 8009158:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 800915c:	f002 fd3a 	bl	800bbd4 <tcp_rexmit_rto_commit>
 8009160:	e6f2      	b.n	8008f48 <tcp_slowtmr+0xa8>
 8009162:	bf00      	nop
 8009164:	2400a758 	.word	0x2400a758
 8009168:	0801ff57 	.word	0x0801ff57
 800916c:	24006799 	.word	0x24006799
 8009170:	2400a754 	.word	0x2400a754
 8009174:	2400a764 	.word	0x2400a764
 8009178:	080201e0 	.word	0x080201e0
 800917c:	0802020a 	.word	0x0802020a
 8009180:	08020234 	.word	0x08020234
 8009184:	080202c8 	.word	0x080202c8
 8009188:	2400a750 	.word	0x2400a750
 800918c:	08020261 	.word	0x08020261
 8009190:	08020293 	.word	0x08020293
 8009194:	0800e2b8 	.word	0x0800e2b8
 8009198:	0801e3d3 	.word	0x0801e3d3
 800919c:	0802031d 	.word	0x0802031d
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80091a0:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 80091a4:	4a3f      	ldr	r2, [pc, #252]	; (80092a4 <tcp_slowtmr+0x404>)
 80091a6:	fb02 5303 	mla	r3, r2, r3, r5
                 / TCP_SLOW_INTERVAL) {
 80091aa:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80091ae:	4299      	cmp	r1, r3
 80091b0:	d908      	bls.n	80091c4 <tcp_slowtmr+0x324>
        err = tcp_keepalive(pcb);
 80091b2:	4620      	mov	r0, r4
 80091b4:	f002 fd44 	bl	800bc40 <tcp_keepalive>
        if (err == ERR_OK) {
 80091b8:	b920      	cbnz	r0, 80091c4 <tcp_slowtmr+0x324>
          pcb->keep_cnt_sent++;
 80091ba:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
 80091be:	3301      	adds	r3, #1
 80091c0:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
    pcb_reset = 0;
 80091c4:	2500      	movs	r5, #0
 80091c6:	e6ec      	b.n	8008fa2 <tcp_slowtmr+0x102>
    if (pcb->state == LAST_ACK) {
 80091c8:	2b09      	cmp	r3, #9
 80091ca:	f47f aef3 	bne.w	8008fb4 <tcp_slowtmr+0x114>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80091ce:	6833      	ldr	r3, [r6, #0]
 80091d0:	6a22      	ldr	r2, [r4, #32]
 80091d2:	1a9b      	subs	r3, r3, r2
 80091d4:	2bf0      	cmp	r3, #240	; 0xf0
 80091d6:	e6ec      	b.n	8008fb2 <tcp_slowtmr+0x112>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80091d8:	42a3      	cmp	r3, r4
 80091da:	d006      	beq.n	80091ea <tcp_slowtmr+0x34a>
 80091dc:	463b      	mov	r3, r7
 80091de:	f240 5271 	movw	r2, #1393	; 0x571
 80091e2:	4931      	ldr	r1, [pc, #196]	; (80092a8 <tcp_slowtmr+0x408>)
 80091e4:	4640      	mov	r0, r8
 80091e6:	f003 fa35 	bl	800c654 <iprintf>
        tcp_active_pcbs = pcb->next;
 80091ea:	68e3      	ldr	r3, [r4, #12]
 80091ec:	f8ca 3000 	str.w	r3, [sl]
 80091f0:	e6fb      	b.n	8008fea <tcp_slowtmr+0x14a>
      ++prev->polltmr;
 80091f2:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80091f4:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 80091f6:	3301      	adds	r3, #1
      pcb = pcb->next;
 80091f8:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 80091fa:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 80091fc:	429a      	cmp	r2, r3
      ++prev->polltmr;
 80091fe:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8009200:	f63f ae95 	bhi.w	8008f2e <tcp_slowtmr+0x8e>
        tcp_active_pcbs_changed = 0;
 8009204:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80092b4 <tcp_slowtmr+0x414>
        TCP_EVENT_POLL(prev, err);
 8009208:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800920c:	f884 b01c 	strb.w	fp, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8009210:	f889 b000 	strb.w	fp, [r9]
        TCP_EVENT_POLL(prev, err);
 8009214:	b91b      	cbnz	r3, 800921e <tcp_slowtmr+0x37e>
          tcp_output(prev);
 8009216:	4620      	mov	r0, r4
 8009218:	f002 fb32 	bl	800b880 <tcp_output>
 800921c:	e687      	b.n	8008f2e <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 800921e:	4621      	mov	r1, r4
 8009220:	6920      	ldr	r0, [r4, #16]
 8009222:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8009224:	f899 3000 	ldrb.w	r3, [r9]
 8009228:	2b00      	cmp	r3, #0
 800922a:	f47f ae48 	bne.w	8008ebe <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 800922e:	2800      	cmp	r0, #0
 8009230:	f47f ae7d 	bne.w	8008f2e <tcp_slowtmr+0x8e>
 8009234:	e7ef      	b.n	8009216 <tcp_slowtmr+0x376>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8009236:	7d2b      	ldrb	r3, [r5, #20]
 8009238:	2b0a      	cmp	r3, #10
 800923a:	d006      	beq.n	800924a <tcp_slowtmr+0x3aa>
 800923c:	4643      	mov	r3, r8
 800923e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8009242:	4651      	mov	r1, sl
 8009244:	4648      	mov	r0, r9
 8009246:	f003 fa05 	bl	800c654 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800924a:	6833      	ldr	r3, [r6, #0]
 800924c:	6a2a      	ldr	r2, [r5, #32]
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	2bf0      	cmp	r3, #240	; 0xf0
 8009252:	d910      	bls.n	8009276 <tcp_slowtmr+0x3d6>
      tcp_pcb_purge(pcb);
 8009254:	4628      	mov	r0, r5
 8009256:	f7ff fdf7 	bl	8008e48 <tcp_pcb_purge>
      if (prev != NULL) {
 800925a:	b97c      	cbnz	r4, 800927c <tcp_slowtmr+0x3dc>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	42ab      	cmp	r3, r5
 8009260:	d006      	beq.n	8009270 <tcp_slowtmr+0x3d0>
 8009262:	4643      	mov	r3, r8
 8009264:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8009268:	4910      	ldr	r1, [pc, #64]	; (80092ac <tcp_slowtmr+0x40c>)
 800926a:	4648      	mov	r0, r9
 800926c:	f003 f9f2 	bl	800c654 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8009270:	68eb      	ldr	r3, [r5, #12]
 8009272:	603b      	str	r3, [r7, #0]
 8009274:	e00e      	b.n	8009294 <tcp_slowtmr+0x3f4>
      pcb = pcb->next;
 8009276:	462c      	mov	r4, r5
 8009278:	68ed      	ldr	r5, [r5, #12]
 800927a:	e62f      	b.n	8008edc <tcp_slowtmr+0x3c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	42ab      	cmp	r3, r5
 8009280:	d106      	bne.n	8009290 <tcp_slowtmr+0x3f0>
 8009282:	4643      	mov	r3, r8
 8009284:	f240 52af 	movw	r2, #1455	; 0x5af
 8009288:	4909      	ldr	r1, [pc, #36]	; (80092b0 <tcp_slowtmr+0x410>)
 800928a:	4648      	mov	r0, r9
 800928c:	f003 f9e2 	bl	800c654 <iprintf>
        prev->next = pcb->next;
 8009290:	68eb      	ldr	r3, [r5, #12]
 8009292:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8009294:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      tcp_free(pcb2);
 8009298:	4628      	mov	r0, r5
 800929a:	f7ff fc03 	bl	8008aa4 <tcp_free>
      pcb = pcb->next;
 800929e:	465d      	mov	r5, fp
 80092a0:	e61c      	b.n	8008edc <tcp_slowtmr+0x3c>
 80092a2:	bf00      	nop
 80092a4:	000124f8 	.word	0x000124f8
 80092a8:	080202f3 	.word	0x080202f3
 80092ac:	08020373 	.word	0x08020373
 80092b0:	0802034c 	.word	0x0802034c
 80092b4:	2400a750 	.word	0x2400a750

080092b8 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80092b8:	b538      	push	{r3, r4, r5, lr}
 80092ba:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80092bc:	460c      	mov	r4, r1
 80092be:	b931      	cbnz	r1, 80092ce <tcp_pcb_remove+0x16>
 80092c0:	4b25      	ldr	r3, [pc, #148]	; (8009358 <tcp_pcb_remove+0xa0>)
 80092c2:	f640 0283 	movw	r2, #2179	; 0x883
 80092c6:	4925      	ldr	r1, [pc, #148]	; (800935c <tcp_pcb_remove+0xa4>)
 80092c8:	4825      	ldr	r0, [pc, #148]	; (8009360 <tcp_pcb_remove+0xa8>)
 80092ca:	f003 f9c3 	bl	800c654 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80092ce:	b935      	cbnz	r5, 80092de <tcp_pcb_remove+0x26>
 80092d0:	4b21      	ldr	r3, [pc, #132]	; (8009358 <tcp_pcb_remove+0xa0>)
 80092d2:	f640 0284 	movw	r2, #2180	; 0x884
 80092d6:	4923      	ldr	r1, [pc, #140]	; (8009364 <tcp_pcb_remove+0xac>)
 80092d8:	4821      	ldr	r0, [pc, #132]	; (8009360 <tcp_pcb_remove+0xa8>)
 80092da:	f003 f9bb 	bl	800c654 <iprintf>

  TCP_RMV(pcblist, pcb);
 80092de:	682b      	ldr	r3, [r5, #0]
 80092e0:	42a3      	cmp	r3, r4
 80092e2:	d116      	bne.n	8009312 <tcp_pcb_remove+0x5a>
 80092e4:	68e3      	ldr	r3, [r4, #12]
 80092e6:	602b      	str	r3, [r5, #0]
 80092e8:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 80092ea:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 80092ec:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 80092ee:	f7ff fdab 	bl	8008e48 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80092f2:	7d23      	ldrb	r3, [r4, #20]
 80092f4:	2b0a      	cmp	r3, #10
 80092f6:	d114      	bne.n	8009322 <tcp_pcb_remove+0x6a>
    tcp_ack_now(pcb);
    tcp_output(pcb);
  }

  if (pcb->state != LISTEN) {
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80092f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80092fa:	bb23      	cbnz	r3, 8009346 <tcp_pcb_remove+0x8e>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80092fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80092fe:	b1f3      	cbz	r3, 800933e <tcp_pcb_remove+0x86>
 8009300:	4b15      	ldr	r3, [pc, #84]	; (8009358 <tcp_pcb_remove+0xa0>)
 8009302:	f640 0294 	movw	r2, #2196	; 0x894
 8009306:	4918      	ldr	r1, [pc, #96]	; (8009368 <tcp_pcb_remove+0xb0>)
 8009308:	4815      	ldr	r0, [pc, #84]	; (8009360 <tcp_pcb_remove+0xa8>)
 800930a:	f003 f9a3 	bl	800c654 <iprintf>
 800930e:	e016      	b.n	800933e <tcp_pcb_remove+0x86>
 8009310:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8009312:	2b00      	cmp	r3, #0
 8009314:	d0e8      	beq.n	80092e8 <tcp_pcb_remove+0x30>
 8009316:	68da      	ldr	r2, [r3, #12]
 8009318:	42a2      	cmp	r2, r4
 800931a:	d1f9      	bne.n	8009310 <tcp_pcb_remove+0x58>
 800931c:	68e2      	ldr	r2, [r4, #12]
 800931e:	60da      	str	r2, [r3, #12]
 8009320:	e7e2      	b.n	80092e8 <tcp_pcb_remove+0x30>
  if ((pcb->state != TIME_WAIT) &&
 8009322:	2b01      	cmp	r3, #1
 8009324:	d00b      	beq.n	800933e <tcp_pcb_remove+0x86>
      (pcb->flags & TF_ACK_DELAY)) {
 8009326:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 8009328:	07da      	lsls	r2, r3, #31
 800932a:	d5e5      	bpl.n	80092f8 <tcp_pcb_remove+0x40>
    tcp_ack_now(pcb);
 800932c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8009330:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8009332:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 8009334:	f002 faa4 	bl	800b880 <tcp_output>
  if (pcb->state != LISTEN) {
 8009338:	7d23      	ldrb	r3, [r4, #20]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d1dc      	bne.n	80092f8 <tcp_pcb_remove+0x40>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800933e:	2300      	movs	r3, #0
 8009340:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8009342:	82e3      	strh	r3, [r4, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8009344:	bd38      	pop	{r3, r4, r5, pc}
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8009346:	4b04      	ldr	r3, [pc, #16]	; (8009358 <tcp_pcb_remove+0xa0>)
 8009348:	f640 0293 	movw	r2, #2195	; 0x893
 800934c:	4907      	ldr	r1, [pc, #28]	; (800936c <tcp_pcb_remove+0xb4>)
 800934e:	4804      	ldr	r0, [pc, #16]	; (8009360 <tcp_pcb_remove+0xa8>)
 8009350:	f003 f980 	bl	800c654 <iprintf>
 8009354:	e7d2      	b.n	80092fc <tcp_pcb_remove+0x44>
 8009356:	bf00      	nop
 8009358:	0801ff57 	.word	0x0801ff57
 800935c:	08020399 	.word	0x08020399
 8009360:	0801e3d3 	.word	0x0801e3d3
 8009364:	080203b5 	.word	0x080203b5
 8009368:	080203ed 	.word	0x080203ed
 800936c:	080203d5 	.word	0x080203d5

08009370 <tcp_close_shutdown>:
{
 8009370:	b530      	push	{r4, r5, lr}
 8009372:	460d      	mov	r5, r1
 8009374:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009376:	4604      	mov	r4, r0
 8009378:	b930      	cbnz	r0, 8009388 <tcp_close_shutdown+0x18>
 800937a:	4b4b      	ldr	r3, [pc, #300]	; (80094a8 <tcp_close_shutdown+0x138>)
 800937c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009380:	494a      	ldr	r1, [pc, #296]	; (80094ac <tcp_close_shutdown+0x13c>)
 8009382:	484b      	ldr	r0, [pc, #300]	; (80094b0 <tcp_close_shutdown+0x140>)
 8009384:	f003 f966 	bl	800c654 <iprintf>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009388:	7d23      	ldrb	r3, [r4, #20]
 800938a:	2d00      	cmp	r5, #0
 800938c:	d040      	beq.n	8009410 <tcp_close_shutdown+0xa0>
 800938e:	2b04      	cmp	r3, #4
 8009390:	d001      	beq.n	8009396 <tcp_close_shutdown+0x26>
 8009392:	2b07      	cmp	r3, #7
 8009394:	d13c      	bne.n	8009410 <tcp_close_shutdown+0xa0>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009396:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8009398:	b922      	cbnz	r2, 80093a4 <tcp_close_shutdown+0x34>
 800939a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 800939c:	f640 3268 	movw	r2, #2920	; 0xb68
 80093a0:	4291      	cmp	r1, r2
 80093a2:	d035      	beq.n	8009410 <tcp_close_shutdown+0xa0>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80093a4:	8b63      	ldrh	r3, [r4, #26]
 80093a6:	06db      	lsls	r3, r3, #27
 80093a8:	d406      	bmi.n	80093b8 <tcp_close_shutdown+0x48>
 80093aa:	4b3f      	ldr	r3, [pc, #252]	; (80094a8 <tcp_close_shutdown+0x138>)
 80093ac:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80093b0:	4940      	ldr	r1, [pc, #256]	; (80094b4 <tcp_close_shutdown+0x144>)
 80093b2:	483f      	ldr	r0, [pc, #252]	; (80094b0 <tcp_close_shutdown+0x140>)
 80093b4:	f003 f94e 	bl	800c654 <iprintf>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80093b8:	8b23      	ldrh	r3, [r4, #24]
 80093ba:	4620      	mov	r0, r4
 80093bc:	9302      	str	r3, [sp, #8]
 80093be:	8ae3      	ldrh	r3, [r4, #22]
 80093c0:	9301      	str	r3, [sp, #4]
 80093c2:	1d23      	adds	r3, r4, #4
 80093c4:	9300      	str	r3, [sp, #0]
 80093c6:	4623      	mov	r3, r4
 80093c8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80093ca:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80093cc:	f002 f9e0 	bl	800b790 <tcp_rst>
      tcp_pcb_purge(pcb);
 80093d0:	4620      	mov	r0, r4
 80093d2:	f7ff fd39 	bl	8008e48 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80093d6:	4a38      	ldr	r2, [pc, #224]	; (80094b8 <tcp_close_shutdown+0x148>)
 80093d8:	6813      	ldr	r3, [r2, #0]
 80093da:	42a3      	cmp	r3, r4
 80093dc:	d110      	bne.n	8009400 <tcp_close_shutdown+0x90>
 80093de:	68e3      	ldr	r3, [r4, #12]
 80093e0:	6013      	str	r3, [r2, #0]
 80093e2:	2300      	movs	r3, #0
 80093e4:	2201      	movs	r2, #1
 80093e6:	60e3      	str	r3, [r4, #12]
 80093e8:	4b34      	ldr	r3, [pc, #208]	; (80094bc <tcp_close_shutdown+0x14c>)
 80093ea:	701a      	strb	r2, [r3, #0]
      if (tcp_input_pcb == pcb) {
 80093ec:	4b34      	ldr	r3, [pc, #208]	; (80094c0 <tcp_close_shutdown+0x150>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	42a3      	cmp	r3, r4
 80093f2:	d11d      	bne.n	8009430 <tcp_close_shutdown+0xc0>
        tcp_trigger_input_pcb_close();
 80093f4:	f001 fb5a 	bl	800aaac <tcp_trigger_input_pcb_close>
}
 80093f8:	2000      	movs	r0, #0
 80093fa:	b005      	add	sp, #20
 80093fc:	bd30      	pop	{r4, r5, pc}
 80093fe:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8009400:	2b00      	cmp	r3, #0
 8009402:	d0ee      	beq.n	80093e2 <tcp_close_shutdown+0x72>
 8009404:	68da      	ldr	r2, [r3, #12]
 8009406:	42a2      	cmp	r2, r4
 8009408:	d1f9      	bne.n	80093fe <tcp_close_shutdown+0x8e>
 800940a:	68e2      	ldr	r2, [r4, #12]
 800940c:	60da      	str	r2, [r3, #12]
 800940e:	e7e8      	b.n	80093e2 <tcp_close_shutdown+0x72>
  switch (pcb->state) {
 8009410:	2b01      	cmp	r3, #1
 8009412:	d01a      	beq.n	800944a <tcp_close_shutdown+0xda>
 8009414:	2b02      	cmp	r3, #2
 8009416:	d039      	beq.n	800948c <tcp_close_shutdown+0x11c>
 8009418:	2b00      	cmp	r3, #0
 800941a:	d13f      	bne.n	800949c <tcp_close_shutdown+0x12c>
      if (pcb->local_port != 0) {
 800941c:	8ae3      	ldrh	r3, [r4, #22]
 800941e:	b13b      	cbz	r3, 8009430 <tcp_close_shutdown+0xc0>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009420:	4a28      	ldr	r2, [pc, #160]	; (80094c4 <tcp_close_shutdown+0x154>)
 8009422:	6813      	ldr	r3, [r2, #0]
 8009424:	42a3      	cmp	r3, r4
 8009426:	d108      	bne.n	800943a <tcp_close_shutdown+0xca>
 8009428:	68e3      	ldr	r3, [r4, #12]
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	2300      	movs	r3, #0
 800942e:	60e3      	str	r3, [r4, #12]
      tcp_free(pcb);
 8009430:	4620      	mov	r0, r4
 8009432:	f7ff fb37 	bl	8008aa4 <tcp_free>
      break;
 8009436:	e7df      	b.n	80093f8 <tcp_close_shutdown+0x88>
 8009438:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800943a:	2b00      	cmp	r3, #0
 800943c:	d0f6      	beq.n	800942c <tcp_close_shutdown+0xbc>
 800943e:	68da      	ldr	r2, [r3, #12]
 8009440:	42a2      	cmp	r2, r4
 8009442:	d1f9      	bne.n	8009438 <tcp_close_shutdown+0xc8>
 8009444:	68e2      	ldr	r2, [r4, #12]
 8009446:	60da      	str	r2, [r3, #12]
 8009448:	e7f0      	b.n	800942c <tcp_close_shutdown+0xbc>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800944a:	491f      	ldr	r1, [pc, #124]	; (80094c8 <tcp_close_shutdown+0x158>)
      pcb->listener = NULL;
 800944c:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800944e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8009452:	6812      	ldr	r2, [r2, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009454:	b9a2      	cbnz	r2, 8009480 <tcp_close_shutdown+0x110>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009456:	3301      	adds	r3, #1
 8009458:	2b04      	cmp	r3, #4
 800945a:	d1f8      	bne.n	800944e <tcp_close_shutdown+0xde>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800945c:	4621      	mov	r1, r4
 800945e:	481b      	ldr	r0, [pc, #108]	; (80094cc <tcp_close_shutdown+0x15c>)
 8009460:	f7ff ff2a 	bl	80092b8 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009464:	7d23      	ldrb	r3, [r4, #20]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d105      	bne.n	8009476 <tcp_close_shutdown+0x106>
 800946a:	4b0f      	ldr	r3, [pc, #60]	; (80094a8 <tcp_close_shutdown+0x138>)
 800946c:	22df      	movs	r2, #223	; 0xdf
 800946e:	4918      	ldr	r1, [pc, #96]	; (80094d0 <tcp_close_shutdown+0x160>)
 8009470:	480f      	ldr	r0, [pc, #60]	; (80094b0 <tcp_close_shutdown+0x140>)
 8009472:	f003 f8ef 	bl	800c654 <iprintf>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009476:	4621      	mov	r1, r4
 8009478:	2002      	movs	r0, #2
 800947a:	f7fe fdc7 	bl	800800c <memp_free>
}
 800947e:	e7bb      	b.n	80093f8 <tcp_close_shutdown+0x88>
    if (pcb->listener == lpcb) {
 8009480:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8009482:	42ac      	cmp	r4, r5
      pcb->listener = NULL;
 8009484:	bf08      	it	eq
 8009486:	6790      	streq	r0, [r2, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009488:	68d2      	ldr	r2, [r2, #12]
 800948a:	e7e3      	b.n	8009454 <tcp_close_shutdown+0xe4>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800948c:	4621      	mov	r1, r4
 800948e:	480a      	ldr	r0, [pc, #40]	; (80094b8 <tcp_close_shutdown+0x148>)
 8009490:	f7ff ff12 	bl	80092b8 <tcp_pcb_remove>
 8009494:	4b09      	ldr	r3, [pc, #36]	; (80094bc <tcp_close_shutdown+0x14c>)
 8009496:	2201      	movs	r2, #1
 8009498:	701a      	strb	r2, [r3, #0]
 800949a:	e7c9      	b.n	8009430 <tcp_close_shutdown+0xc0>
      return tcp_close_shutdown_fin(pcb);
 800949c:	4620      	mov	r0, r4
}
 800949e:	b005      	add	sp, #20
 80094a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 80094a4:	f7ff bac2 	b.w	8008a2c <tcp_close_shutdown_fin>
 80094a8:	0801ff57 	.word	0x0801ff57
 80094ac:	08020406 	.word	0x08020406
 80094b0:	0801e3d3 	.word	0x0801e3d3
 80094b4:	08020426 	.word	0x08020426
 80094b8:	2400a754 	.word	0x2400a754
 80094bc:	2400a750 	.word	0x2400a750
 80094c0:	2400a768 	.word	0x2400a768
 80094c4:	2400a760 	.word	0x2400a760
 80094c8:	0800e2b8 	.word	0x0800e2b8
 80094cc:	2400a75c 	.word	0x2400a75c
 80094d0:	0802043f 	.word	0x0802043f

080094d4 <tcp_close>:
{
 80094d4:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80094d6:	b158      	cbz	r0, 80094f0 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 80094d8:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 80094da:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 80094dc:	2b01      	cmp	r3, #1
    tcp_set_flags(pcb, TF_RXCLOSED);
 80094de:	bf1e      	ittt	ne
 80094e0:	8b43      	ldrhne	r3, [r0, #26]
 80094e2:	f043 0310 	orrne.w	r3, r3, #16
 80094e6:	8343      	strhne	r3, [r0, #26]
}
 80094e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 80094ec:	f7ff bf40 	b.w	8009370 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80094f0:	4b04      	ldr	r3, [pc, #16]	; (8009504 <tcp_close+0x30>)
 80094f2:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80094f6:	4904      	ldr	r1, [pc, #16]	; (8009508 <tcp_close+0x34>)
 80094f8:	4804      	ldr	r0, [pc, #16]	; (800950c <tcp_close+0x38>)
 80094fa:	f003 f8ab 	bl	800c654 <iprintf>
}
 80094fe:	f06f 000f 	mvn.w	r0, #15
 8009502:	bd08      	pop	{r3, pc}
 8009504:	0801ff57 	.word	0x0801ff57
 8009508:	08020458 	.word	0x08020458
 800950c:	0801e3d3 	.word	0x0801e3d3

08009510 <tcp_recv_null>:
{
 8009510:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009512:	4608      	mov	r0, r1
{
 8009514:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8009516:	b949      	cbnz	r1, 800952c <tcp_recv_null+0x1c>
 8009518:	4b0c      	ldr	r3, [pc, #48]	; (800954c <tcp_recv_null+0x3c>)
 800951a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800951e:	490c      	ldr	r1, [pc, #48]	; (8009550 <tcp_recv_null+0x40>)
 8009520:	480c      	ldr	r0, [pc, #48]	; (8009554 <tcp_recv_null+0x44>)
 8009522:	f003 f897 	bl	800c654 <iprintf>
 8009526:	f06f 000f 	mvn.w	r0, #15
}
 800952a:	bd10      	pop	{r4, pc}
  if (p != NULL) {
 800952c:	b13a      	cbz	r2, 800953e <tcp_recv_null+0x2e>
    tcp_recved(pcb, p->tot_len);
 800952e:	8911      	ldrh	r1, [r2, #8]
 8009530:	f7ff fbc2 	bl	8008cb8 <tcp_recved>
    pbuf_free(p);
 8009534:	4620      	mov	r0, r4
 8009536:	f7fe ffd3 	bl	80084e0 <pbuf_free>
  return ERR_OK;
 800953a:	2000      	movs	r0, #0
 800953c:	e7f5      	b.n	800952a <tcp_recv_null+0x1a>
  } else if (err == ERR_OK) {
 800953e:	b91b      	cbnz	r3, 8009548 <tcp_recv_null+0x38>
}
 8009540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8009544:	f7ff bfc6 	b.w	80094d4 <tcp_close>
  return ERR_OK;
 8009548:	4610      	mov	r0, r2
 800954a:	e7ee      	b.n	800952a <tcp_recv_null+0x1a>
 800954c:	0801ff57 	.word	0x0801ff57
 8009550:	0802046f 	.word	0x0802046f
 8009554:	0801e3d3 	.word	0x0801e3d3

08009558 <tcp_process_refused_data>:
{
 8009558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800955a:	4604      	mov	r4, r0
 800955c:	b950      	cbnz	r0, 8009574 <tcp_process_refused_data+0x1c>
 800955e:	f06f 050f 	mvn.w	r5, #15
 8009562:	4b1d      	ldr	r3, [pc, #116]	; (80095d8 <tcp_process_refused_data+0x80>)
 8009564:	f240 6209 	movw	r2, #1545	; 0x609
 8009568:	491c      	ldr	r1, [pc, #112]	; (80095dc <tcp_process_refused_data+0x84>)
 800956a:	481d      	ldr	r0, [pc, #116]	; (80095e0 <tcp_process_refused_data+0x88>)
 800956c:	f003 f872 	bl	800c654 <iprintf>
}
 8009570:	4628      	mov	r0, r5
 8009572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    u8_t refused_flags = pcb->refused_data->flags;
 8009574:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 8009576:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009578:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
    u8_t refused_flags = pcb->refused_data->flags;
 800957c:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 800957e:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8009580:	b1e5      	cbz	r5, 80095bc <tcp_process_refused_data+0x64>
 8009582:	4601      	mov	r1, r0
 8009584:	4632      	mov	r2, r6
 8009586:	6900      	ldr	r0, [r0, #16]
 8009588:	47a8      	blx	r5
 800958a:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 800958c:	b9e8      	cbnz	r0, 80095ca <tcp_process_refused_data+0x72>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800958e:	06bb      	lsls	r3, r7, #26
 8009590:	d5ee      	bpl.n	8009570 <tcp_process_refused_data+0x18>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009592:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009594:	f640 3268 	movw	r2, #2920	; 0xb68
        TCP_EVENT_CLOSED(pcb, err);
 8009598:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800959c:	4293      	cmp	r3, r2
          pcb->rcv_wnd++;
 800959e:	bf1c      	itt	ne
 80095a0:	3301      	addne	r3, #1
 80095a2:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 80095a4:	2e00      	cmp	r6, #0
 80095a6:	d0e3      	beq.n	8009570 <tcp_process_refused_data+0x18>
 80095a8:	2300      	movs	r3, #0
 80095aa:	4621      	mov	r1, r4
 80095ac:	6920      	ldr	r0, [r4, #16]
 80095ae:	461a      	mov	r2, r3
 80095b0:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 80095b2:	300d      	adds	r0, #13
 80095b4:	d1dc      	bne.n	8009570 <tcp_process_refused_data+0x18>
          return ERR_ABRT;
 80095b6:	f06f 050c 	mvn.w	r5, #12
 80095ba:	e7d9      	b.n	8009570 <tcp_process_refused_data+0x18>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80095bc:	4601      	mov	r1, r0
 80095be:	462b      	mov	r3, r5
 80095c0:	4632      	mov	r2, r6
 80095c2:	4628      	mov	r0, r5
 80095c4:	f7ff ffa4 	bl	8009510 <tcp_recv_null>
 80095c8:	e7df      	b.n	800958a <tcp_process_refused_data+0x32>
    } else if (err == ERR_ABRT) {
 80095ca:	350d      	adds	r5, #13
 80095cc:	d0f3      	beq.n	80095b6 <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 80095ce:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 80095d2:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 80095d4:	e7cc      	b.n	8009570 <tcp_process_refused_data+0x18>
 80095d6:	bf00      	nop
 80095d8:	0801ff57 	.word	0x0801ff57
 80095dc:	0802048a 	.word	0x0802048a
 80095e0:	0801e3d3 	.word	0x0801e3d3

080095e4 <tcp_fasttmr>:
{
 80095e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 80095e8:	4d1b      	ldr	r5, [pc, #108]	; (8009658 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 80095ea:	4f1c      	ldr	r7, [pc, #112]	; (800965c <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 80095ec:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 80095ee:	4e1c      	ldr	r6, [pc, #112]	; (8009660 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 80095f0:	3301      	adds	r3, #1
 80095f2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 80095f4:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 80095f6:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 80095fa:	b90c      	cbnz	r4, 8009600 <tcp_fasttmr+0x1c>
}
 80095fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8009600:	782b      	ldrb	r3, [r5, #0]
 8009602:	7fa2      	ldrb	r2, [r4, #30]
 8009604:	429a      	cmp	r2, r3
 8009606:	d024      	beq.n	8009652 <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8009608:	77a3      	strb	r3, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 800960a:	8b63      	ldrh	r3, [r4, #26]
 800960c:	07d9      	lsls	r1, r3, #31
 800960e:	d509      	bpl.n	8009624 <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8009610:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8009614:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8009616:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 8009618:	f002 f932 	bl	800b880 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800961c:	8b63      	ldrh	r3, [r4, #26]
 800961e:	f023 0303 	bic.w	r3, r3, #3
 8009622:	8363      	strh	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8009624:	8b63      	ldrh	r3, [r4, #26]
 8009626:	071a      	lsls	r2, r3, #28
 8009628:	d505      	bpl.n	8009636 <tcp_fasttmr+0x52>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800962a:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 800962e:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009630:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8009632:	f7ff f9fb 	bl	8008a2c <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8009636:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8009638:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 800963c:	b13b      	cbz	r3, 800964e <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 800963e:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8009640:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8009644:	f7ff ff88 	bl	8009558 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8009648:	7833      	ldrb	r3, [r6, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d1d2      	bne.n	80095f4 <tcp_fasttmr+0x10>
{
 800964e:	464c      	mov	r4, r9
 8009650:	e7d3      	b.n	80095fa <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8009652:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8009656:	e7fa      	b.n	800964e <tcp_fasttmr+0x6a>
 8009658:	24006799 	.word	0x24006799
 800965c:	2400a754 	.word	0x2400a754
 8009660:	2400a750 	.word	0x2400a750

08009664 <tcp_tmr>:
{
 8009664:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8009666:	f7ff ffbd 	bl	80095e4 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 800966a:	4a06      	ldr	r2, [pc, #24]	; (8009684 <tcp_tmr+0x20>)
 800966c:	7853      	ldrb	r3, [r2, #1]
 800966e:	3301      	adds	r3, #1
 8009670:	b2db      	uxtb	r3, r3
 8009672:	7053      	strb	r3, [r2, #1]
 8009674:	07db      	lsls	r3, r3, #31
 8009676:	d503      	bpl.n	8009680 <tcp_tmr+0x1c>
}
 8009678:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 800967c:	f7ff bc10 	b.w	8008ea0 <tcp_slowtmr>
}
 8009680:	bd08      	pop	{r3, pc}
 8009682:	bf00      	nop
 8009684:	24006799 	.word	0x24006799

08009688 <tcp_shutdown>:
{
 8009688:	b538      	push	{r3, r4, r5, lr}
 800968a:	4614      	mov	r4, r2
  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800968c:	4605      	mov	r5, r0
 800968e:	b948      	cbnz	r0, 80096a4 <tcp_shutdown+0x1c>
 8009690:	4b16      	ldr	r3, [pc, #88]	; (80096ec <tcp_shutdown+0x64>)
 8009692:	f240 2207 	movw	r2, #519	; 0x207
 8009696:	4916      	ldr	r1, [pc, #88]	; (80096f0 <tcp_shutdown+0x68>)
 8009698:	4816      	ldr	r0, [pc, #88]	; (80096f4 <tcp_shutdown+0x6c>)
 800969a:	f002 ffdb 	bl	800c654 <iprintf>
 800969e:	f06f 000f 	mvn.w	r0, #15
}
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
  if (pcb->state == LISTEN) {
 80096a4:	7d03      	ldrb	r3, [r0, #20]
 80096a6:	2b01      	cmp	r3, #1
 80096a8:	d018      	beq.n	80096dc <tcp_shutdown+0x54>
  if (shut_rx) {
 80096aa:	b189      	cbz	r1, 80096d0 <tcp_shutdown+0x48>
    tcp_set_flags(pcb, TF_RXCLOSED);
 80096ac:	8b43      	ldrh	r3, [r0, #26]
 80096ae:	f043 0310 	orr.w	r3, r3, #16
 80096b2:	8343      	strh	r3, [r0, #26]
    if (shut_tx) {
 80096b4:	b122      	cbz	r2, 80096c0 <tcp_shutdown+0x38>
      return tcp_close_shutdown(pcb, 1);
 80096b6:	2101      	movs	r1, #1
}
 80096b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80096bc:	f7ff be58 	b.w	8009370 <tcp_close_shutdown>
    if (pcb->refused_data != NULL) {
 80096c0:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80096c2:	b908      	cbnz	r0, 80096c8 <tcp_shutdown+0x40>
  return ERR_OK;
 80096c4:	2000      	movs	r0, #0
 80096c6:	e7ec      	b.n	80096a2 <tcp_shutdown+0x1a>
      pbuf_free(pcb->refused_data);
 80096c8:	f7fe ff0a 	bl	80084e0 <pbuf_free>
      pcb->refused_data = NULL;
 80096cc:	676c      	str	r4, [r5, #116]	; 0x74
 80096ce:	e7f9      	b.n	80096c4 <tcp_shutdown+0x3c>
  if (shut_tx) {
 80096d0:	2a00      	cmp	r2, #0
 80096d2:	d0f7      	beq.n	80096c4 <tcp_shutdown+0x3c>
    switch (pcb->state) {
 80096d4:	2b04      	cmp	r3, #4
 80096d6:	d804      	bhi.n	80096e2 <tcp_shutdown+0x5a>
 80096d8:	2b02      	cmp	r3, #2
 80096da:	d804      	bhi.n	80096e6 <tcp_shutdown+0x5e>
 80096dc:	f06f 000a 	mvn.w	r0, #10
 80096e0:	e7df      	b.n	80096a2 <tcp_shutdown+0x1a>
 80096e2:	2b07      	cmp	r3, #7
 80096e4:	d1fa      	bne.n	80096dc <tcp_shutdown+0x54>
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80096e6:	2100      	movs	r1, #0
 80096e8:	4628      	mov	r0, r5
 80096ea:	e7e5      	b.n	80096b8 <tcp_shutdown+0x30>
 80096ec:	0801ff57 	.word	0x0801ff57
 80096f0:	080204b0 	.word	0x080204b0
 80096f4:	0801e3d3 	.word	0x0801e3d3

080096f8 <tcp_abandon>:
{
 80096f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096fc:	460e      	mov	r6, r1
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80096fe:	4604      	mov	r4, r0
 8009700:	b948      	cbnz	r0, 8009716 <tcp_abandon+0x1e>
 8009702:	4b34      	ldr	r3, [pc, #208]	; (80097d4 <tcp_abandon+0xdc>)
 8009704:	f240 223d 	movw	r2, #573	; 0x23d
 8009708:	4933      	ldr	r1, [pc, #204]	; (80097d8 <tcp_abandon+0xe0>)
 800970a:	4834      	ldr	r0, [pc, #208]	; (80097dc <tcp_abandon+0xe4>)
}
 800970c:	b004      	add	sp, #16
 800970e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8009712:	f002 bf9f 	b.w	800c654 <iprintf>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8009716:	7d03      	ldrb	r3, [r0, #20]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d106      	bne.n	800972a <tcp_abandon+0x32>
 800971c:	4b2d      	ldr	r3, [pc, #180]	; (80097d4 <tcp_abandon+0xdc>)
 800971e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8009722:	492f      	ldr	r1, [pc, #188]	; (80097e0 <tcp_abandon+0xe8>)
 8009724:	482d      	ldr	r0, [pc, #180]	; (80097dc <tcp_abandon+0xe4>)
 8009726:	f002 ff95 	bl	800c654 <iprintf>
  if (pcb->state == TIME_WAIT) {
 800972a:	7d23      	ldrb	r3, [r4, #20]
 800972c:	2b0a      	cmp	r3, #10
 800972e:	d109      	bne.n	8009744 <tcp_abandon+0x4c>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8009730:	4621      	mov	r1, r4
 8009732:	482c      	ldr	r0, [pc, #176]	; (80097e4 <tcp_abandon+0xec>)
 8009734:	f7ff fdc0 	bl	80092b8 <tcp_pcb_remove>
    tcp_free(pcb);
 8009738:	4620      	mov	r0, r4
}
 800973a:	b004      	add	sp, #16
 800973c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    tcp_free(pcb);
 8009740:	f7ff b9b0 	b.w	8008aa4 <tcp_free>
    seqno = pcb->snd_nxt;
 8009744:	f8d4 9050 	ldr.w	r9, [r4, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 8009748:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 800974c:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8009750:	f8d4 8010 	ldr.w	r8, [r4, #16]
    if (pcb->state == CLOSED) {
 8009754:	8ae5      	ldrh	r5, [r4, #22]
 8009756:	b99b      	cbnz	r3, 8009780 <tcp_abandon+0x88>
      if (pcb->local_port != 0) {
 8009758:	b13d      	cbz	r5, 800976a <tcp_abandon+0x72>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800975a:	4a23      	ldr	r2, [pc, #140]	; (80097e8 <tcp_abandon+0xf0>)
 800975c:	6813      	ldr	r3, [r2, #0]
 800975e:	42a3      	cmp	r3, r4
 8009760:	d106      	bne.n	8009770 <tcp_abandon+0x78>
 8009762:	68e3      	ldr	r3, [r4, #12]
 8009764:	6013      	str	r3, [r2, #0]
 8009766:	2500      	movs	r5, #0
 8009768:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 800976a:	462e      	mov	r6, r5
 800976c:	e00f      	b.n	800978e <tcp_abandon+0x96>
 800976e:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0f8      	beq.n	8009766 <tcp_abandon+0x6e>
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	42a2      	cmp	r2, r4
 8009778:	d1f9      	bne.n	800976e <tcp_abandon+0x76>
 800977a:	68e2      	ldr	r2, [r4, #12]
 800977c:	60da      	str	r2, [r3, #12]
 800977e:	e7f2      	b.n	8009766 <tcp_abandon+0x6e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8009780:	4621      	mov	r1, r4
 8009782:	481a      	ldr	r0, [pc, #104]	; (80097ec <tcp_abandon+0xf4>)
 8009784:	f7ff fd98 	bl	80092b8 <tcp_pcb_remove>
 8009788:	4b19      	ldr	r3, [pc, #100]	; (80097f0 <tcp_abandon+0xf8>)
 800978a:	2201      	movs	r2, #1
 800978c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800978e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8009790:	b108      	cbz	r0, 8009796 <tcp_abandon+0x9e>
      tcp_segs_free(pcb->unacked);
 8009792:	f7ff fadd 	bl	8008d50 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8009796:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009798:	b108      	cbz	r0, 800979e <tcp_abandon+0xa6>
      tcp_segs_free(pcb->unsent);
 800979a:	f7ff fad9 	bl	8008d50 <tcp_segs_free>
    if (send_rst) {
 800979e:	b156      	cbz	r6, 80097b6 <tcp_abandon+0xbe>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80097a0:	8b23      	ldrh	r3, [r4, #24]
 80097a2:	4652      	mov	r2, sl
 80097a4:	4649      	mov	r1, r9
 80097a6:	4620      	mov	r0, r4
 80097a8:	e9cd 5301 	strd	r5, r3, [sp, #4]
 80097ac:	1d23      	adds	r3, r4, #4
 80097ae:	9300      	str	r3, [sp, #0]
 80097b0:	4623      	mov	r3, r4
 80097b2:	f001 ffed 	bl	800b790 <tcp_rst>
    tcp_free(pcb);
 80097b6:	4620      	mov	r0, r4
 80097b8:	f7ff f974 	bl	8008aa4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80097bc:	b13f      	cbz	r7, 80097ce <tcp_abandon+0xd6>
 80097be:	f06f 010c 	mvn.w	r1, #12
 80097c2:	4640      	mov	r0, r8
 80097c4:	463b      	mov	r3, r7
}
 80097c6:	b004      	add	sp, #16
 80097c8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80097cc:	4718      	bx	r3
}
 80097ce:	b004      	add	sp, #16
 80097d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d4:	0801ff57 	.word	0x0801ff57
 80097d8:	080204ca 	.word	0x080204ca
 80097dc:	0801e3d3 	.word	0x0801e3d3
 80097e0:	080204e3 	.word	0x080204e3
 80097e4:	2400a764 	.word	0x2400a764
 80097e8:	2400a760 	.word	0x2400a760
 80097ec:	2400a754 	.word	0x2400a754
 80097f0:	2400a750 	.word	0x2400a750

080097f4 <tcp_abort>:
  tcp_abandon(pcb, 1);
 80097f4:	2101      	movs	r1, #1
 80097f6:	f7ff bf7f 	b.w	80096f8 <tcp_abandon>
	...

080097fc <tcp_accept_null>:
{
 80097fc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80097fe:	460c      	mov	r4, r1
 8009800:	b931      	cbnz	r1, 8009810 <tcp_accept_null+0x14>
 8009802:	4b06      	ldr	r3, [pc, #24]	; (800981c <tcp_accept_null+0x20>)
 8009804:	f240 320f 	movw	r2, #783	; 0x30f
 8009808:	4905      	ldr	r1, [pc, #20]	; (8009820 <tcp_accept_null+0x24>)
 800980a:	4806      	ldr	r0, [pc, #24]	; (8009824 <tcp_accept_null+0x28>)
 800980c:	f002 ff22 	bl	800c654 <iprintf>
  tcp_abort(pcb);
 8009810:	4620      	mov	r0, r4
 8009812:	f7ff ffef 	bl	80097f4 <tcp_abort>
}
 8009816:	f06f 000c 	mvn.w	r0, #12
 800981a:	bd10      	pop	{r4, pc}
 800981c:	0801ff57 	.word	0x0801ff57
 8009820:	08020514 	.word	0x08020514
 8009824:	0801e3d3 	.word	0x0801e3d3

08009828 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8009828:	b570      	push	{r4, r5, r6, lr}
 800982a:	460c      	mov	r4, r1
  struct tcp_pcb *pcb;
  pcb = pcb_list;

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800982c:	4605      	mov	r5, r0
 800982e:	b930      	cbnz	r0, 800983e <tcp_netif_ip_addr_changed_pcblist+0x16>
 8009830:	4b09      	ldr	r3, [pc, #36]	; (8009858 <tcp_netif_ip_addr_changed_pcblist+0x30>)
 8009832:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8009836:	4909      	ldr	r1, [pc, #36]	; (800985c <tcp_netif_ip_addr_changed_pcblist+0x34>)
 8009838:	4809      	ldr	r0, [pc, #36]	; (8009860 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 800983a:	f002 ff0b 	bl	800c654 <iprintf>

  while (pcb != NULL) {
 800983e:	b904      	cbnz	r4, 8009842 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8009840:	bd70      	pop	{r4, r5, r6, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8009842:	6822      	ldr	r2, [r4, #0]
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	68e6      	ldr	r6, [r4, #12]
 8009848:	429a      	cmp	r2, r3
 800984a:	d102      	bne.n	8009852 <tcp_netif_ip_addr_changed_pcblist+0x2a>
      tcp_abort(pcb);
 800984c:	4620      	mov	r0, r4
 800984e:	f7ff ffd1 	bl	80097f4 <tcp_abort>
{
 8009852:	4634      	mov	r4, r6
 8009854:	e7f3      	b.n	800983e <tcp_netif_ip_addr_changed_pcblist+0x16>
 8009856:	bf00      	nop
 8009858:	0801ff57 	.word	0x0801ff57
 800985c:	08020531 	.word	0x08020531
 8009860:	0801e3d3 	.word	0x0801e3d3

08009864 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009864:	4b0c      	ldr	r3, [pc, #48]	; (8009898 <tcp_kill_state+0x34>)
  inactivity = 0;
 8009866:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009868:	6819      	ldr	r1, [r3, #0]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800986a:	4b0c      	ldr	r3, [pc, #48]	; (800989c <tcp_kill_state+0x38>)
{
 800986c:	b430      	push	{r4, r5}
 800986e:	4604      	mov	r4, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009870:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 8009872:	4610      	mov	r0, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009874:	b919      	cbnz	r1, 800987e <tcp_kill_state+0x1a>
  if (inactive != NULL) {
 8009876:	b168      	cbz	r0, 8009894 <tcp_kill_state+0x30>
}
 8009878:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 800987a:	f7ff bf3d 	b.w	80096f8 <tcp_abandon>
    if (pcb->state == state) {
 800987e:	7d0b      	ldrb	r3, [r1, #20]
 8009880:	42a3      	cmp	r3, r4
 8009882:	d105      	bne.n	8009890 <tcp_kill_state+0x2c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8009884:	6a0b      	ldr	r3, [r1, #32]
 8009886:	1aeb      	subs	r3, r5, r3
 8009888:	4293      	cmp	r3, r2
 800988a:	bf24      	itt	cs
 800988c:	461a      	movcs	r2, r3
 800988e:	4608      	movcs	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009890:	68c9      	ldr	r1, [r1, #12]
 8009892:	e7ef      	b.n	8009874 <tcp_kill_state+0x10>
}
 8009894:	bc30      	pop	{r4, r5}
 8009896:	4770      	bx	lr
 8009898:	2400a754 	.word	0x2400a754
 800989c:	2400a758 	.word	0x2400a758

080098a0 <tcp_alloc>:
{
 80098a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a2:	4604      	mov	r4, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098a4:	2001      	movs	r0, #1
 80098a6:	f7fe fb81 	bl	8007fac <memp_malloc>
  if (pcb == NULL) {
 80098aa:	4603      	mov	r3, r0
 80098ac:	2800      	cmp	r0, #0
 80098ae:	d136      	bne.n	800991e <tcp_alloc+0x7e>
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80098b0:	4e3f      	ldr	r6, [pc, #252]	; (80099b0 <tcp_alloc+0x110>)
 80098b2:	6830      	ldr	r0, [r6, #0]
  while (pcb != NULL) {
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d157      	bne.n	8009968 <tcp_alloc+0xc8>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80098b8:	4b3e      	ldr	r3, [pc, #248]	; (80099b4 <tcp_alloc+0x114>)
  inactivity = 0;
 80098ba:	4601      	mov	r1, r0
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80098bc:	4d3e      	ldr	r5, [pc, #248]	; (80099b8 <tcp_alloc+0x118>)
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80098be:	681b      	ldr	r3, [r3, #0]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80098c0:	682f      	ldr	r7, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d15b      	bne.n	800997e <tcp_alloc+0xde>
  if (inactive != NULL) {
 80098c6:	b108      	cbz	r0, 80098cc <tcp_alloc+0x2c>
    tcp_abort(inactive);
 80098c8:	f7ff ff94 	bl	80097f4 <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098cc:	2001      	movs	r0, #1
 80098ce:	f7fe fb6d 	bl	8007fac <memp_malloc>
    if (pcb == NULL) {
 80098d2:	4603      	mov	r3, r0
 80098d4:	bb18      	cbnz	r0, 800991e <tcp_alloc+0x7e>
      tcp_kill_state(LAST_ACK);
 80098d6:	2009      	movs	r0, #9
 80098d8:	f7ff ffc4 	bl	8009864 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098dc:	2001      	movs	r0, #1
 80098de:	f7fe fb65 	bl	8007fac <memp_malloc>
      if (pcb == NULL) {
 80098e2:	4603      	mov	r3, r0
 80098e4:	b9d8      	cbnz	r0, 800991e <tcp_alloc+0x7e>
        tcp_kill_state(CLOSING);
 80098e6:	2008      	movs	r0, #8
 80098e8:	f7ff ffbc 	bl	8009864 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80098ec:	2001      	movs	r0, #1
 80098ee:	f7fe fb5d 	bl	8007fac <memp_malloc>
        if (pcb == NULL) {
 80098f2:	4603      	mov	r3, r0
 80098f4:	b998      	cbnz	r0, 800991e <tcp_alloc+0x7e>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80098f6:	0622      	lsls	r2, r4, #24
 80098f8:	d449      	bmi.n	800998e <tcp_alloc+0xee>
  if (mprio == 0) {
 80098fa:	b15c      	cbz	r4, 8009914 <tcp_alloc+0x74>
 80098fc:	4621      	mov	r1, r4
  mprio--;
 80098fe:	3901      	subs	r1, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009900:	6832      	ldr	r2, [r6, #0]
  inactivity = 0;
 8009902:	2000      	movs	r0, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8009904:	682e      	ldr	r6, [r5, #0]
  mprio--;
 8009906:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009908:	2a00      	cmp	r2, #0
 800990a:	d142      	bne.n	8009992 <tcp_alloc+0xf2>
  if (inactive != NULL) {
 800990c:	b113      	cbz	r3, 8009914 <tcp_alloc+0x74>
    tcp_abort(inactive);
 800990e:	4618      	mov	r0, r3
 8009910:	f7ff ff70 	bl	80097f4 <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8009914:	2001      	movs	r0, #1
 8009916:	f7fe fb49 	bl	8007fac <memp_malloc>
  if (pcb != NULL) {
 800991a:	4603      	mov	r3, r0
 800991c:	b310      	cbz	r0, 8009964 <tcp_alloc+0xc4>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800991e:	2298      	movs	r2, #152	; 0x98
 8009920:	4618      	mov	r0, r3
 8009922:	2100      	movs	r1, #0
 8009924:	f002 fe8e 	bl	800c644 <memset>
    pcb->snd_buf = TCP_SND_BUF;
 8009928:	f241 62d0 	movw	r2, #5840	; 0x16d0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800992c:	4603      	mov	r3, r0
    pcb->prio = prio;
 800992e:	7544      	strb	r4, [r0, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8009930:	f8a0 2064 	strh.w	r2, [r0, #100]	; 0x64
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8009934:	4a21      	ldr	r2, [pc, #132]	; (80099bc <tcp_alloc+0x11c>)
 8009936:	6282      	str	r2, [r0, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8009938:	22ff      	movs	r2, #255	; 0xff
 800993a:	72c2      	strb	r2, [r0, #11]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800993c:	2206      	movs	r2, #6
 800993e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8009942:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pcb->rtime = -1;
 8009944:	4a1e      	ldr	r2, [pc, #120]	; (80099c0 <tcp_alloc+0x120>)
 8009946:	6302      	str	r2, [r0, #48]	; 0x30
    pcb->tmr = tcp_ticks;
 8009948:	4a1b      	ldr	r2, [pc, #108]	; (80099b8 <tcp_alloc+0x118>)
 800994a:	6812      	ldr	r2, [r2, #0]
 800994c:	6202      	str	r2, [r0, #32]
    pcb->last_timer = tcp_timer_ctr;
 800994e:	4a1d      	ldr	r2, [pc, #116]	; (80099c4 <tcp_alloc+0x124>)
 8009950:	7812      	ldrb	r2, [r2, #0]
 8009952:	7782      	strb	r2, [r0, #30]
    pcb->cwnd = 1;
 8009954:	4a1c      	ldr	r2, [pc, #112]	; (80099c8 <tcp_alloc+0x128>)
 8009956:	6482      	str	r2, [r0, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 8009958:	4a1c      	ldr	r2, [pc, #112]	; (80099cc <tcp_alloc+0x12c>)
 800995a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800995e:	4a1c      	ldr	r2, [pc, #112]	; (80099d0 <tcp_alloc+0x130>)
 8009960:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
}
 8009964:	4618      	mov	r0, r3
 8009966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pcb->flags & TF_CLOSEPEND) {
 8009968:	8b43      	ldrh	r3, [r0, #26]
    struct tcp_pcb *next = pcb->next;
 800996a:	68c5      	ldr	r5, [r0, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 800996c:	0719      	lsls	r1, r3, #28
 800996e:	d504      	bpl.n	800997a <tcp_alloc+0xda>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8009970:	f023 0308 	bic.w	r3, r3, #8
 8009974:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 8009976:	f7ff f859 	bl	8008a2c <tcp_close_shutdown_fin>
{
 800997a:	4628      	mov	r0, r5
 800997c:	e79a      	b.n	80098b4 <tcp_alloc+0x14>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800997e:	6a1a      	ldr	r2, [r3, #32]
 8009980:	1aba      	subs	r2, r7, r2
 8009982:	428a      	cmp	r2, r1
 8009984:	bf24      	itt	cs
 8009986:	4618      	movcs	r0, r3
 8009988:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	e799      	b.n	80098c2 <tcp_alloc+0x22>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800998e:	217f      	movs	r1, #127	; 0x7f
 8009990:	e7b5      	b.n	80098fe <tcp_alloc+0x5e>
    if ((pcb->prio < mprio) ||
 8009992:	7d57      	ldrb	r7, [r2, #21]
 8009994:	428f      	cmp	r7, r1
 8009996:	d304      	bcc.n	80099a2 <tcp_alloc+0x102>
 8009998:	d107      	bne.n	80099aa <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800999a:	6a15      	ldr	r5, [r2, #32]
 800999c:	1b75      	subs	r5, r6, r5
 800999e:	4285      	cmp	r5, r0
 80099a0:	d303      	bcc.n	80099aa <tcp_alloc+0x10a>
      inactivity = tcp_ticks - pcb->tmr;
 80099a2:	6a10      	ldr	r0, [r2, #32]
    if ((pcb->prio < mprio) ||
 80099a4:	4639      	mov	r1, r7
      inactivity = tcp_ticks - pcb->tmr;
 80099a6:	4613      	mov	r3, r2
 80099a8:	1a30      	subs	r0, r6, r0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80099aa:	68d2      	ldr	r2, [r2, #12]
 80099ac:	e7ac      	b.n	8009908 <tcp_alloc+0x68>
 80099ae:	bf00      	nop
 80099b0:	2400a754 	.word	0x2400a754
 80099b4:	2400a764 	.word	0x2400a764
 80099b8:	2400a758 	.word	0x2400a758
 80099bc:	0b680b68 	.word	0x0b680b68
 80099c0:	0218ffff 	.word	0x0218ffff
 80099c4:	24006799 	.word	0x24006799
 80099c8:	16d00001 	.word	0x16d00001
 80099cc:	08009511 	.word	0x08009511
 80099d0:	006ddd00 	.word	0x006ddd00

080099d4 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80099d4:	2040      	movs	r0, #64	; 0x40
 80099d6:	f7ff bf63 	b.w	80098a0 <tcp_alloc>
	...

080099dc <tcp_next_iss>:
{
 80099dc:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80099de:	b930      	cbnz	r0, 80099ee <tcp_next_iss+0x12>
 80099e0:	4b06      	ldr	r3, [pc, #24]	; (80099fc <tcp_next_iss+0x20>)
 80099e2:	f640 02af 	movw	r2, #2223	; 0x8af
 80099e6:	4906      	ldr	r1, [pc, #24]	; (8009a00 <tcp_next_iss+0x24>)
 80099e8:	4806      	ldr	r0, [pc, #24]	; (8009a04 <tcp_next_iss+0x28>)
 80099ea:	f002 fe33 	bl	800c654 <iprintf>
  iss += tcp_ticks;       /* XXX */
 80099ee:	4b06      	ldr	r3, [pc, #24]	; (8009a08 <tcp_next_iss+0x2c>)
 80099f0:	4a06      	ldr	r2, [pc, #24]	; (8009a0c <tcp_next_iss+0x30>)
 80099f2:	6858      	ldr	r0, [r3, #4]
 80099f4:	6812      	ldr	r2, [r2, #0]
 80099f6:	4410      	add	r0, r2
 80099f8:	6058      	str	r0, [r3, #4]
}
 80099fa:	bd08      	pop	{r3, pc}
 80099fc:	0801ff57 	.word	0x0801ff57
 8009a00:	08020565 	.word	0x08020565
 8009a04:	0801e3d3 	.word	0x0801e3d3
 8009a08:	24000028 	.word	0x24000028
 8009a0c:	2400a758 	.word	0x2400a758

08009a10 <tcp_eff_send_mss_netif>:
{
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4604      	mov	r4, r0
 8009a14:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8009a16:	b932      	cbnz	r2, 8009a26 <tcp_eff_send_mss_netif+0x16>
 8009a18:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <tcp_eff_send_mss_netif+0x30>)
 8009a1a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8009a1e:	4909      	ldr	r1, [pc, #36]	; (8009a44 <tcp_eff_send_mss_netif+0x34>)
 8009a20:	4809      	ldr	r0, [pc, #36]	; (8009a48 <tcp_eff_send_mss_netif+0x38>)
 8009a22:	f002 fe17 	bl	800c654 <iprintf>
    if (outif == NULL) {
 8009a26:	b14d      	cbz	r5, 8009a3c <tcp_eff_send_mss_netif+0x2c>
    mtu = outif->mtu;
 8009a28:	8cab      	ldrh	r3, [r5, #36]	; 0x24
  if (mtu != 0) {
 8009a2a:	b13b      	cbz	r3, 8009a3c <tcp_eff_send_mss_netif+0x2c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8009a2c:	2b28      	cmp	r3, #40	; 0x28
 8009a2e:	bf8a      	itet	hi
 8009a30:	3b28      	subhi	r3, #40	; 0x28
 8009a32:	2300      	movls	r3, #0
 8009a34:	b29b      	uxthhi	r3, r3
    sendmss = LWIP_MIN(sendmss, mss_s);
 8009a36:	429c      	cmp	r4, r3
 8009a38:	bf28      	it	cs
 8009a3a:	461c      	movcs	r4, r3
}
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	bd38      	pop	{r3, r4, r5, pc}
 8009a40:	0801ff57 	.word	0x0801ff57
 8009a44:	0802057f 	.word	0x0802057f
 8009a48:	0801e3d3 	.word	0x0801e3d3

08009a4c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8009a50:	4604      	mov	r4, r0
 8009a52:	b180      	cbz	r0, 8009a76 <tcp_netif_ip_addr_changed+0x2a>
 8009a54:	6803      	ldr	r3, [r0, #0]
 8009a56:	b173      	cbz	r3, 8009a76 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8009a58:	4b0b      	ldr	r3, [pc, #44]	; (8009a88 <tcp_netif_ip_addr_changed+0x3c>)
 8009a5a:	6819      	ldr	r1, [r3, #0]
 8009a5c:	f7ff fee4 	bl	8009828 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8009a60:	4b0a      	ldr	r3, [pc, #40]	; (8009a8c <tcp_netif_ip_addr_changed+0x40>)
 8009a62:	4620      	mov	r0, r4
 8009a64:	6819      	ldr	r1, [r3, #0]
 8009a66:	f7ff fedf 	bl	8009828 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8009a6a:	b125      	cbz	r5, 8009a76 <tcp_netif_ip_addr_changed+0x2a>
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	b113      	cbz	r3, 8009a76 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009a70:	4b07      	ldr	r3, [pc, #28]	; (8009a90 <tcp_netif_ip_addr_changed+0x44>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	b903      	cbnz	r3, 8009a78 <tcp_netif_ip_addr_changed+0x2c>
          ip_addr_copy(lpcb->local_ip, *new_addr);
        }
      }
    }
  }
}
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8009a78:	6819      	ldr	r1, [r3, #0]
 8009a7a:	6822      	ldr	r2, [r4, #0]
 8009a7c:	4291      	cmp	r1, r2
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8009a7e:	bf04      	itt	eq
 8009a80:	682a      	ldreq	r2, [r5, #0]
 8009a82:	601a      	streq	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009a84:	68db      	ldr	r3, [r3, #12]
 8009a86:	e7f5      	b.n	8009a74 <tcp_netif_ip_addr_changed+0x28>
 8009a88:	2400a754 	.word	0x2400a754
 8009a8c:	2400a760 	.word	0x2400a760
 8009a90:	2400a75c 	.word	0x2400a75c

08009a94 <tcp_get_next_optbyte>:
}

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
 8009a94:	4a08      	ldr	r2, [pc, #32]	; (8009ab8 <tcp_get_next_optbyte+0x24>)
 8009a96:	8813      	ldrh	r3, [r2, #0]
 8009a98:	4610      	mov	r0, r2
 8009a9a:	1c59      	adds	r1, r3, #1
 8009a9c:	8011      	strh	r1, [r2, #0]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009a9e:	6851      	ldr	r1, [r2, #4]
 8009aa0:	b111      	cbz	r1, 8009aa8 <tcp_get_next_optbyte+0x14>
 8009aa2:	8912      	ldrh	r2, [r2, #8]
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d203      	bcs.n	8009ab0 <tcp_get_next_optbyte+0x1c>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
    return opts[optidx];
 8009aa8:	68c2      	ldr	r2, [r0, #12]
 8009aaa:	4413      	add	r3, r2
 8009aac:	7d18      	ldrb	r0, [r3, #20]
 8009aae:	4770      	bx	lr
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009ab0:	1a9b      	subs	r3, r3, r2
    return tcphdr_opt2[idx];
 8009ab2:	b2db      	uxtb	r3, r3
 8009ab4:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8009ab6:	4770      	bx	lr
 8009ab8:	2400679c 	.word	0x2400679c

08009abc <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	b930      	cbnz	r0, 8009ad2 <tcp_parseopt+0x16>
 8009ac4:	4b1e      	ldr	r3, [pc, #120]	; (8009b40 <tcp_parseopt+0x84>)
 8009ac6:	f240 727d 	movw	r2, #1917	; 0x77d
 8009aca:	491e      	ldr	r1, [pc, #120]	; (8009b44 <tcp_parseopt+0x88>)
 8009acc:	481e      	ldr	r0, [pc, #120]	; (8009b48 <tcp_parseopt+0x8c>)
 8009ace:	f002 fdc1 	bl	800c654 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009ad2:	4d1e      	ldr	r5, [pc, #120]	; (8009b4c <tcp_parseopt+0x90>)
 8009ad4:	8a2f      	ldrh	r7, [r5, #16]
 8009ad6:	b17f      	cbz	r7, 8009af8 <tcp_parseopt+0x3c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009ad8:	2300      	movs	r3, #0
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
          mss |= tcp_get_next_optbyte();
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009ada:	f240 58b3 	movw	r8, #1459	; 0x5b3
 8009ade:	f240 59b4 	movw	r9, #1460	; 0x5b4
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009ae2:	802b      	strh	r3, [r5, #0]
 8009ae4:	882b      	ldrh	r3, [r5, #0]
 8009ae6:	42bb      	cmp	r3, r7
 8009ae8:	d206      	bcs.n	8009af8 <tcp_parseopt+0x3c>
      u8_t opt = tcp_get_next_optbyte();
 8009aea:	f7ff ffd3 	bl	8009a94 <tcp_get_next_optbyte>
      switch (opt) {
 8009aee:	2801      	cmp	r0, #1
 8009af0:	d0f8      	beq.n	8009ae4 <tcp_parseopt+0x28>
 8009af2:	2802      	cmp	r0, #2
 8009af4:	d002      	beq.n	8009afc <tcp_parseopt+0x40>
 8009af6:	b9c8      	cbnz	r0, 8009b2c <tcp_parseopt+0x70>
             can skip past them. */
          tcp_optidx += data - 2;
      }
    }
  }
}
 8009af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009afc:	f7ff ffca 	bl	8009a94 <tcp_get_next_optbyte>
 8009b00:	2804      	cmp	r0, #4
 8009b02:	d1f9      	bne.n	8009af8 <tcp_parseopt+0x3c>
 8009b04:	882b      	ldrh	r3, [r5, #0]
 8009b06:	3301      	adds	r3, #1
 8009b08:	42bb      	cmp	r3, r7
 8009b0a:	daf5      	bge.n	8009af8 <tcp_parseopt+0x3c>
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009b0c:	f7ff ffc2 	bl	8009a94 <tcp_get_next_optbyte>
 8009b10:	0200      	lsls	r0, r0, #8
 8009b12:	b284      	uxth	r4, r0
          mss |= tcp_get_next_optbyte();
 8009b14:	f7ff ffbe 	bl	8009a94 <tcp_get_next_optbyte>
 8009b18:	ea44 0300 	orr.w	r3, r4, r0
 8009b1c:	b29b      	uxth	r3, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009b1e:	1e5a      	subs	r2, r3, #1
 8009b20:	b292      	uxth	r2, r2
 8009b22:	4542      	cmp	r2, r8
 8009b24:	bf88      	it	hi
 8009b26:	464b      	movhi	r3, r9
 8009b28:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 8009b2a:	e7db      	b.n	8009ae4 <tcp_parseopt+0x28>
          data = tcp_get_next_optbyte();
 8009b2c:	f7ff ffb2 	bl	8009a94 <tcp_get_next_optbyte>
          if (data < 2) {
 8009b30:	2801      	cmp	r0, #1
 8009b32:	d9e1      	bls.n	8009af8 <tcp_parseopt+0x3c>
          tcp_optidx += data - 2;
 8009b34:	882b      	ldrh	r3, [r5, #0]
 8009b36:	3b02      	subs	r3, #2
 8009b38:	4418      	add	r0, r3
 8009b3a:	8028      	strh	r0, [r5, #0]
 8009b3c:	e7d2      	b.n	8009ae4 <tcp_parseopt+0x28>
 8009b3e:	bf00      	nop
 8009b40:	08020665 	.word	0x08020665
 8009b44:	080206da 	.word	0x080206da
 8009b48:	0801e3d3 	.word	0x0801e3d3
 8009b4c:	2400679c 	.word	0x2400679c

08009b50 <tcp_input_delayed_close>:
{
 8009b50:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8009b52:	4604      	mov	r4, r0
 8009b54:	b930      	cbnz	r0, 8009b64 <tcp_input_delayed_close+0x14>
 8009b56:	4b0f      	ldr	r3, [pc, #60]	; (8009b94 <tcp_input_delayed_close+0x44>)
 8009b58:	f240 225a 	movw	r2, #602	; 0x25a
 8009b5c:	490e      	ldr	r1, [pc, #56]	; (8009b98 <tcp_input_delayed_close+0x48>)
 8009b5e:	480f      	ldr	r0, [pc, #60]	; (8009b9c <tcp_input_delayed_close+0x4c>)
 8009b60:	f002 fd78 	bl	800c654 <iprintf>
  if (recv_flags & TF_CLOSED) {
 8009b64:	4b0e      	ldr	r3, [pc, #56]	; (8009ba0 <tcp_input_delayed_close+0x50>)
 8009b66:	7c98      	ldrb	r0, [r3, #18]
 8009b68:	f010 0010 	ands.w	r0, r0, #16
 8009b6c:	d011      	beq.n	8009b92 <tcp_input_delayed_close+0x42>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8009b6e:	8b63      	ldrh	r3, [r4, #26]
 8009b70:	06db      	lsls	r3, r3, #27
 8009b72:	d406      	bmi.n	8009b82 <tcp_input_delayed_close+0x32>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8009b74:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8009b78:	b11b      	cbz	r3, 8009b82 <tcp_input_delayed_close+0x32>
 8009b7a:	f06f 010e 	mvn.w	r1, #14
 8009b7e:	6920      	ldr	r0, [r4, #16]
 8009b80:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8009b82:	4621      	mov	r1, r4
 8009b84:	4807      	ldr	r0, [pc, #28]	; (8009ba4 <tcp_input_delayed_close+0x54>)
 8009b86:	f7ff fb97 	bl	80092b8 <tcp_pcb_remove>
    tcp_free(pcb);
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f7fe ff8a 	bl	8008aa4 <tcp_free>
 8009b90:	2001      	movs	r0, #1
}
 8009b92:	bd10      	pop	{r4, pc}
 8009b94:	08020665 	.word	0x08020665
 8009b98:	080206f4 	.word	0x080206f4
 8009b9c:	0801e3d3 	.word	0x0801e3d3
 8009ba0:	2400679c 	.word	0x2400679c
 8009ba4:	2400a754 	.word	0x2400a754

08009ba8 <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 8009ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bac:	4606      	mov	r6, r0
 8009bae:	4617      	mov	r7, r2
    seg_list = seg_list->next;
 8009bb0:	460c      	mov	r4, r1
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009bb2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8009c5c <tcp_free_acked_segments.isra.0+0xb4>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009bb6:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8009c54 <tcp_free_acked_segments.isra.0+0xac>
  while (seg_list != NULL &&
 8009bba:	2c00      	cmp	r4, #0
 8009bbc:	d037      	beq.n	8009c2e <tcp_free_acked_segments.isra.0+0x86>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8009bbe:	68e3      	ldr	r3, [r4, #12]
 8009bc0:	6858      	ldr	r0, [r3, #4]
 8009bc2:	f7fd fedc 	bl	800797e <lwip_htonl>
 8009bc6:	68e3      	ldr	r3, [r4, #12]
 8009bc8:	4682      	mov	sl, r0
 8009bca:	8925      	ldrh	r5, [r4, #8]
 8009bcc:	8998      	ldrh	r0, [r3, #12]
 8009bce:	f7fd fed3 	bl	8007978 <lwip_htons>
 8009bd2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8009bd6:	f010 0003 	ands.w	r0, r0, #3
 8009bda:	eba5 0303 	sub.w	r3, r5, r3
 8009bde:	bf18      	it	ne
 8009be0:	2001      	movne	r0, #1
 8009be2:	eb03 050a 	add.w	r5, r3, sl
 8009be6:	4405      	add	r5, r0
  while (seg_list != NULL &&
 8009be8:	2d00      	cmp	r5, #0
 8009bea:	dc21      	bgt.n	8009c30 <tcp_free_acked_segments.isra.0+0x88>
    clen = pbuf_clen(next->p);
 8009bec:	e9d4 a000 	ldrd	sl, r0, [r4]
 8009bf0:	f7fe fdb0 	bl	8008754 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009bf4:	8833      	ldrh	r3, [r6, #0]
    clen = pbuf_clen(next->p);
 8009bf6:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8009bf8:	4283      	cmp	r3, r0
 8009bfa:	d206      	bcs.n	8009c0a <tcp_free_acked_segments.isra.0+0x62>
 8009bfc:	464b      	mov	r3, r9
 8009bfe:	f240 4257 	movw	r2, #1111	; 0x457
 8009c02:	4912      	ldr	r1, [pc, #72]	; (8009c4c <tcp_free_acked_segments.isra.0+0xa4>)
 8009c04:	4812      	ldr	r0, [pc, #72]	; (8009c50 <tcp_free_acked_segments.isra.0+0xa8>)
 8009c06:	f002 fd25 	bl	800c654 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009c0a:	8830      	ldrh	r0, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009c0c:	f8b8 2014 	ldrh.w	r2, [r8, #20]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009c10:	1b45      	subs	r5, r0, r5
    tcp_seg_free(next);
 8009c12:	4620      	mov	r0, r4
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8009c14:	8035      	strh	r5, [r6, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8009c16:	8923      	ldrh	r3, [r4, #8]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f8a8 3014 	strh.w	r3, [r8, #20]
    tcp_seg_free(next);
 8009c1e:	f7ff f889 	bl	8008d34 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 8009c22:	8833      	ldrh	r3, [r6, #0]
 8009c24:	b17b      	cbz	r3, 8009c46 <tcp_free_acked_segments.isra.0+0x9e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009c26:	f1ba 0f00 	cmp.w	sl, #0
 8009c2a:	d10c      	bne.n	8009c46 <tcp_free_acked_segments.isra.0+0x9e>
 8009c2c:	b11f      	cbz	r7, 8009c36 <tcp_free_acked_segments.isra.0+0x8e>
    seg_list = seg_list->next;
 8009c2e:	2400      	movs	r4, #0
}
 8009c30:	4620      	mov	r0, r4
 8009c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 8009c36:	4b07      	ldr	r3, [pc, #28]	; (8009c54 <tcp_free_acked_segments.isra.0+0xac>)
 8009c38:	f240 4261 	movw	r2, #1121	; 0x461
 8009c3c:	4906      	ldr	r1, [pc, #24]	; (8009c58 <tcp_free_acked_segments.isra.0+0xb0>)
 8009c3e:	4804      	ldr	r0, [pc, #16]	; (8009c50 <tcp_free_acked_segments.isra.0+0xa8>)
 8009c40:	f002 fd08 	bl	800c654 <iprintf>
  while (seg_list != NULL &&
 8009c44:	e7f3      	b.n	8009c2e <tcp_free_acked_segments.isra.0+0x86>
    seg_list = seg_list->next;
 8009c46:	4654      	mov	r4, sl
 8009c48:	e7b7      	b.n	8009bba <tcp_free_acked_segments.isra.0+0x12>
 8009c4a:	bf00      	nop
 8009c4c:	08020719 	.word	0x08020719
 8009c50:	0801e3d3 	.word	0x0801e3d3
 8009c54:	08020665 	.word	0x08020665
 8009c58:	08020741 	.word	0x08020741
 8009c5c:	2400679c 	.word	0x2400679c

08009c60 <tcp_receive>:
{
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8009c62:	4604      	mov	r4, r0
 8009c64:	b930      	cbnz	r0, 8009c74 <tcp_receive+0x14>
 8009c66:	4bb4      	ldr	r3, [pc, #720]	; (8009f38 <tcp_receive+0x2d8>)
 8009c68:	f240 427b 	movw	r2, #1147	; 0x47b
 8009c6c:	49b3      	ldr	r1, [pc, #716]	; (8009f3c <tcp_receive+0x2dc>)
 8009c6e:	48b4      	ldr	r0, [pc, #720]	; (8009f40 <tcp_receive+0x2e0>)
 8009c70:	f002 fcf0 	bl	800c654 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8009c74:	7d23      	ldrb	r3, [r4, #20]
 8009c76:	2b03      	cmp	r3, #3
 8009c78:	d806      	bhi.n	8009c88 <tcp_receive+0x28>
 8009c7a:	4baf      	ldr	r3, [pc, #700]	; (8009f38 <tcp_receive+0x2d8>)
 8009c7c:	f240 427c 	movw	r2, #1148	; 0x47c
 8009c80:	49b0      	ldr	r1, [pc, #704]	; (8009f44 <tcp_receive+0x2e4>)
 8009c82:	48af      	ldr	r0, [pc, #700]	; (8009f40 <tcp_receive+0x2e0>)
 8009c84:	f002 fce6 	bl	800c654 <iprintf>
  if (flags & TCP_ACK) {
 8009c88:	4daf      	ldr	r5, [pc, #700]	; (8009f48 <tcp_receive+0x2e8>)
 8009c8a:	7f2b      	ldrb	r3, [r5, #28]
 8009c8c:	06de      	lsls	r6, r3, #27
 8009c8e:	d57e      	bpl.n	8009d8e <tcp_receive+0x12e>
 8009c90:	6a2b      	ldr	r3, [r5, #32]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009c92:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 8009c96:	69aa      	ldr	r2, [r5, #24]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8009c98:	e9d4 6015 	ldrd	r6, r0, [r4, #84]	; 0x54
 8009c9c:	1af7      	subs	r7, r6, r3
 8009c9e:	2f00      	cmp	r7, #0
 8009ca0:	db0a      	blt.n	8009cb8 <tcp_receive+0x58>
 8009ca2:	429e      	cmp	r6, r3
 8009ca4:	d102      	bne.n	8009cac <tcp_receive+0x4c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8009ca6:	1a86      	subs	r6, r0, r2
 8009ca8:	2e00      	cmp	r6, #0
 8009caa:	db05      	blt.n	8009cb8 <tcp_receive+0x58>
 8009cac:	4290      	cmp	r0, r2
 8009cae:	d110      	bne.n	8009cd2 <tcp_receive+0x72>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8009cb0:	68ee      	ldr	r6, [r5, #12]
 8009cb2:	89f6      	ldrh	r6, [r6, #14]
 8009cb4:	428e      	cmp	r6, r1
 8009cb6:	d90c      	bls.n	8009cd2 <tcp_receive+0x72>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009cb8:	68ee      	ldr	r6, [r5, #12]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009cba:	f8b4 c062 	ldrh.w	ip, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8009cbe:	89f6      	ldrh	r6, [r6, #14]
 8009cc0:	b2b7      	uxth	r7, r6
 8009cc2:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8009cc6:	45bc      	cmp	ip, r7
      pcb->snd_wl2 = ackno;
 8009cc8:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 8009ccc:	bf38      	it	cc
 8009cce:	f8a4 6062 	strhcc.w	r6, [r4, #98]	; 0x62
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8009cd2:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8009cd4:	1b93      	subs	r3, r2, r6
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	f300 8148 	bgt.w	8009f6c <tcp_receive+0x30c>
      if (tcplen == 0) {
 8009cdc:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	f040 8140 	bne.w	8009f64 <tcp_receive+0x304>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009ce4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8009ce8:	4401      	add	r1, r0
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8009cea:	6da7      	ldr	r7, [r4, #88]	; 0x58
 8009cec:	443b      	add	r3, r7
 8009cee:	428b      	cmp	r3, r1
 8009cf0:	f040 8138 	bne.w	8009f64 <tcp_receive+0x304>
          if (pcb->rtime >= 0) {
 8009cf4:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f2c0 8133 	blt.w	8009f64 <tcp_receive+0x304>
            if (pcb->lastack == ackno) {
 8009cfe:	4296      	cmp	r6, r2
 8009d00:	f040 8130 	bne.w	8009f64 <tcp_receive+0x304>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8009d04:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009d08:	2bff      	cmp	r3, #255	; 0xff
                ++pcb->dupacks;
 8009d0a:	bf1c      	itt	ne
 8009d0c:	3301      	addne	r3, #1
 8009d0e:	f884 3043 	strbne.w	r3, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 8009d12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009d16:	2b03      	cmp	r3, #3
 8009d18:	d90f      	bls.n	8009d3a <tcp_receive+0xda>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009d1a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009d1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009d22:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009d24:	4413      	add	r3, r2
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	bf88      	it	hi
 8009d2c:	460b      	movhi	r3, r1
 8009d2e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 8009d32:	4620      	mov	r0, r4
 8009d34:	f001 fcf8 	bl	800b728 <tcp_rexmit_fast>
      if (!found_dupack) {
 8009d38:	e000      	b.n	8009d3c <tcp_receive+0xdc>
              if (pcb->dupacks >= 3) {
 8009d3a:	d0fa      	beq.n	8009d32 <tcp_receive+0xd2>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8009d3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8009d3e:	b330      	cbz	r0, 8009d8e <tcp_receive+0x12e>
 8009d40:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009d42:	69aa      	ldr	r2, [r5, #24]
 8009d44:	1a9b      	subs	r3, r3, r2
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	da21      	bge.n	8009d8e <tcp_receive+0x12e>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009d4a:	4b80      	ldr	r3, [pc, #512]	; (8009f4c <tcp_receive+0x2ec>)
 8009d4c:	b280      	uxth	r0, r0
      m = (s16_t)(m - (pcb->sa >> 3));
 8009d4e:	f9b4 703c 	ldrsh.w	r7, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009d52:	881a      	ldrh	r2, [r3, #0]
      m = (s16_t)(m - (pcb->sa >> 3));
 8009d54:	f3c7 06cf 	ubfx	r6, r7, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009d58:	1a11      	subs	r1, r2, r0
      m = (s16_t)(m - (pcb->sa >> 3));
 8009d5a:	1b89      	subs	r1, r1, r6
 8009d5c:	b20b      	sxth	r3, r1
      pcb->sa = (s16_t)(pcb->sa + m);
 8009d5e:	fa17 f181 	uxtah	r1, r7, r1
      if (m < 0) {
 8009d62:	2b00      	cmp	r3, #0
      pcb->sa = (s16_t)(pcb->sa + m);
 8009d64:	b209      	sxth	r1, r1
        m = (s16_t) - m;
 8009d66:	bfb8      	it	lt
 8009d68:	1a80      	sublt	r0, r0, r2
      m = (s16_t)(m - (pcb->sv >> 2));
 8009d6a:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      pcb->sa = (s16_t)(pcb->sa + m);
 8009d6e:	87a1      	strh	r1, [r4, #60]	; 0x3c
        m = (s16_t) - m;
 8009d70:	bfb8      	it	lt
 8009d72:	1980      	addlt	r0, r0, r6
      pcb->sv = (s16_t)(pcb->sv + m);
 8009d74:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
        m = (s16_t) - m;
 8009d78:	bfb8      	it	lt
 8009d7a:	b203      	sxthlt	r3, r0
      pcb->sv = (s16_t)(pcb->sv + m);
 8009d7c:	4413      	add	r3, r2
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009d82:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8009d86:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	6363      	str	r3, [r4, #52]	; 0x34
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8009d8e:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 8009d90:	6a2b      	ldr	r3, [r5, #32]
 8009d92:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009d94:	2800      	cmp	r0, #0
 8009d96:	f000 818b 	beq.w	800a0b0 <tcp_receive+0x450>
 8009d9a:	7d21      	ldrb	r1, [r4, #20]
 8009d9c:	2906      	cmp	r1, #6
 8009d9e:	f200 8187 	bhi.w	800a0b0 <tcp_receive+0x450>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8009da2:	1ad7      	subs	r7, r2, r3
 8009da4:	2f01      	cmp	r7, #1
 8009da6:	f100 8172 	bmi.w	800a08e <tcp_receive+0x42e>
 8009daa:	f1c3 0101 	rsb	r1, r3, #1
 8009dae:	1a09      	subs	r1, r1, r0
 8009db0:	4411      	add	r1, r2
 8009db2:	2900      	cmp	r1, #0
 8009db4:	f300 816b 	bgt.w	800a08e <tcp_receive+0x42e>
      struct pbuf *p = inseg.p;
 8009db8:	6aee      	ldr	r6, [r5, #44]	; 0x2c
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8009dba:	b936      	cbnz	r6, 8009dca <tcp_receive+0x16a>
 8009dbc:	4b5e      	ldr	r3, [pc, #376]	; (8009f38 <tcp_receive+0x2d8>)
 8009dbe:	f240 5294 	movw	r2, #1428	; 0x594
 8009dc2:	4963      	ldr	r1, [pc, #396]	; (8009f50 <tcp_receive+0x2f0>)
 8009dc4:	485e      	ldr	r0, [pc, #376]	; (8009f40 <tcp_receive+0x2e0>)
 8009dc6:	f002 fc45 	bl	800c654 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009dca:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8009dce:	429f      	cmp	r7, r3
 8009dd0:	d906      	bls.n	8009de0 <tcp_receive+0x180>
 8009dd2:	4b59      	ldr	r3, [pc, #356]	; (8009f38 <tcp_receive+0x2d8>)
 8009dd4:	f240 5295 	movw	r2, #1429	; 0x595
 8009dd8:	495e      	ldr	r1, [pc, #376]	; (8009f54 <tcp_receive+0x2f4>)
 8009dda:	4859      	ldr	r0, [pc, #356]	; (8009f40 <tcp_receive+0x2e0>)
 8009ddc:	f002 fc3a 	bl	800c654 <iprintf>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009de0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
      off = (u16_t)off32;
 8009de2:	b2bf      	uxth	r7, r7
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009de4:	891b      	ldrh	r3, [r3, #8]
 8009de6:	42bb      	cmp	r3, r7
 8009de8:	d206      	bcs.n	8009df8 <tcp_receive+0x198>
 8009dea:	4b53      	ldr	r3, [pc, #332]	; (8009f38 <tcp_receive+0x2d8>)
 8009dec:	f240 5297 	movw	r2, #1431	; 0x597
 8009df0:	4959      	ldr	r1, [pc, #356]	; (8009f58 <tcp_receive+0x2f8>)
 8009df2:	4853      	ldr	r0, [pc, #332]	; (8009f40 <tcp_receive+0x2e0>)
 8009df4:	f002 fc2e 	bl	800c654 <iprintf>
      inseg.len -= off;
 8009df8:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
        p->len = 0;
 8009dfa:	2100      	movs	r1, #0
      inseg.len -= off;
 8009dfc:	1bdb      	subs	r3, r3, r7
 8009dfe:	862b      	strh	r3, [r5, #48]	; 0x30
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8009e00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009e02:	891b      	ldrh	r3, [r3, #8]
 8009e04:	1bdb      	subs	r3, r3, r7
 8009e06:	b29b      	uxth	r3, r3
      while (p->len < off) {
 8009e08:	8972      	ldrh	r2, [r6, #10]
 8009e0a:	42ba      	cmp	r2, r7
 8009e0c:	f0c0 8139 	bcc.w	800a082 <tcp_receive+0x422>
      pbuf_remove_header(p, off);
 8009e10:	4639      	mov	r1, r7
 8009e12:	4630      	mov	r0, r6
 8009e14:	f7fe fb30 	bl	8008478 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8009e18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e1a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8009e1c:	622b      	str	r3, [r5, #32]
 8009e1e:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009e20:	6a29      	ldr	r1, [r5, #32]
 8009e22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009e24:	1a8b      	subs	r3, r1, r2
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f2c0 813d 	blt.w	800a0a6 <tcp_receive+0x446>
 8009e2c:	1c4b      	adds	r3, r1, #1
 8009e2e:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8009e30:	1a9b      	subs	r3, r3, r2
 8009e32:	1a1b      	subs	r3, r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f300 8136 	bgt.w	800a0a6 <tcp_receive+0x446>
      if (pcb->rcv_nxt == seqno) {
 8009e3a:	4291      	cmp	r1, r2
 8009e3c:	f040 8133 	bne.w	800a0a6 <tcp_receive+0x446>
        tcplen = TCP_TCPLEN(&inseg);
 8009e40:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009e42:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 8009e44:	8998      	ldrh	r0, [r3, #12]
 8009e46:	f7fd fd97 	bl	8007978 <lwip_htons>
 8009e4a:	f010 0003 	ands.w	r0, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 8009e4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8009e50:	bf18      	it	ne
 8009e52:	2001      	movne	r0, #1
 8009e54:	4430      	add	r0, r6
 8009e56:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 8009e58:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8009e5a:	84a8      	strh	r0, [r5, #36]	; 0x24
        if (tcplen > pcb->rcv_wnd) {
 8009e5c:	d23d      	bcs.n	8009eda <tcp_receive+0x27a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009e5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009e60:	8998      	ldrh	r0, [r3, #12]
 8009e62:	f7fd fd89 	bl	8007978 <lwip_htons>
 8009e66:	07c6      	lsls	r6, r0, #31
 8009e68:	d50d      	bpl.n	8009e86 <tcp_receive+0x226>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009e6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009e6c:	899e      	ldrh	r6, [r3, #12]
 8009e6e:	4630      	mov	r0, r6
 8009e70:	f426 567c 	bic.w	r6, r6, #16128	; 0x3f00
 8009e74:	f7fd fd80 	bl	8007978 <lwip_htons>
 8009e78:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8009e7c:	f7fd fd7c 	bl	8007978 <lwip_htons>
 8009e80:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009e82:	4306      	orrs	r6, r0
 8009e84:	819e      	strh	r6, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 8009e86:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009e88:	862b      	strh	r3, [r5, #48]	; 0x30
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8009e8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009e8c:	8998      	ldrh	r0, [r3, #12]
 8009e8e:	f7fd fd73 	bl	8007978 <lwip_htons>
 8009e92:	0780      	lsls	r0, r0, #30
          pbuf_realloc(inseg.p, inseg.len);
 8009e94:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
            inseg.len -= 1;
 8009e96:	bf42      	ittt	mi
 8009e98:	8e2b      	ldrhmi	r3, [r5, #48]	; 0x30
 8009e9a:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8009e9e:	862b      	strhmi	r3, [r5, #48]	; 0x30
          pbuf_realloc(inseg.p, inseg.len);
 8009ea0:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8009ea2:	f7fe fbff 	bl	80086a4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8009ea6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009ea8:	8e2e      	ldrh	r6, [r5, #48]	; 0x30
 8009eaa:	8998      	ldrh	r0, [r3, #12]
 8009eac:	f7fd fd64 	bl	8007978 <lwip_htons>
 8009eb0:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009eb4:	6a2b      	ldr	r3, [r5, #32]
          tcplen = TCP_TCPLEN(&inseg);
 8009eb6:	bf18      	it	ne
 8009eb8:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009eba:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 8009ebc:	4430      	add	r0, r6
 8009ebe:	b280      	uxth	r0, r0
 8009ec0:	84a8      	strh	r0, [r5, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009ec2:	4418      	add	r0, r3
 8009ec4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009ec6:	4413      	add	r3, r2
 8009ec8:	4298      	cmp	r0, r3
 8009eca:	d006      	beq.n	8009eda <tcp_receive+0x27a>
 8009ecc:	4b1a      	ldr	r3, [pc, #104]	; (8009f38 <tcp_receive+0x2d8>)
 8009ece:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8009ed2:	4922      	ldr	r1, [pc, #136]	; (8009f5c <tcp_receive+0x2fc>)
 8009ed4:	481a      	ldr	r0, [pc, #104]	; (8009f40 <tcp_receive+0x2e0>)
 8009ed6:	f002 fbbd 	bl	800c654 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 8009eda:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 8009edc:	6a2b      	ldr	r3, [r5, #32]
 8009ede:	4413      	add	r3, r2
 8009ee0:	6263      	str	r3, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8009ee2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d206      	bcs.n	8009ef6 <tcp_receive+0x296>
 8009ee8:	4b13      	ldr	r3, [pc, #76]	; (8009f38 <tcp_receive+0x2d8>)
 8009eea:	f240 6207 	movw	r2, #1543	; 0x607
 8009eee:	491c      	ldr	r1, [pc, #112]	; (8009f60 <tcp_receive+0x300>)
 8009ef0:	4813      	ldr	r0, [pc, #76]	; (8009f40 <tcp_receive+0x2e0>)
 8009ef2:	f002 fbaf 	bl	800c654 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009ef6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8009ef8:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8009efa:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 8009efc:	1a9b      	subs	r3, r3, r2
 8009efe:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8009f00:	f7fe fea4 	bl	8008c4c <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 8009f04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8009f06:	891a      	ldrh	r2, [r3, #8]
 8009f08:	b112      	cbz	r2, 8009f10 <tcp_receive+0x2b0>
          recv_data = inseg.p;
 8009f0a:	63ab      	str	r3, [r5, #56]	; 0x38
          inseg.p = NULL;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	62eb      	str	r3, [r5, #44]	; 0x2c
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009f10:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009f12:	8998      	ldrh	r0, [r3, #12]
 8009f14:	f7fd fd30 	bl	8007978 <lwip_htons>
 8009f18:	07c1      	lsls	r1, r0, #31
          recv_flags |= TF_GOT_FIN;
 8009f1a:	bf42      	ittt	mi
 8009f1c:	7cab      	ldrbmi	r3, [r5, #18]
 8009f1e:	f043 0320 	orrmi.w	r3, r3, #32
 8009f22:	74ab      	strbmi	r3, [r5, #18]
        tcp_ack(pcb);
 8009f24:	8b63      	ldrh	r3, [r4, #26]
 8009f26:	07da      	lsls	r2, r3, #31
 8009f28:	f140 80b9 	bpl.w	800a09e <tcp_receive+0x43e>
 8009f2c:	f023 0301 	bic.w	r3, r3, #1
      tcp_ack_now(pcb);
 8009f30:	f043 0302 	orr.w	r3, r3, #2
 8009f34:	e0b5      	b.n	800a0a2 <tcp_receive+0x442>
 8009f36:	bf00      	nop
 8009f38:	08020665 	.word	0x08020665
 8009f3c:	08020761 	.word	0x08020761
 8009f40:	0801e3d3 	.word	0x0801e3d3
 8009f44:	0802077a 	.word	0x0802077a
 8009f48:	2400679c 	.word	0x2400679c
 8009f4c:	2400a758 	.word	0x2400a758
 8009f50:	08020793 	.word	0x08020793
 8009f54:	080207a3 	.word	0x080207a3
 8009f58:	080207b2 	.word	0x080207b2
 8009f5c:	080207c2 	.word	0x080207c2
 8009f60:	080207f9 	.word	0x080207f9
        pcb->dupacks = 0;
 8009f64:	2300      	movs	r3, #0
 8009f66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f6a:	e6e7      	b.n	8009d3c <tcp_receive+0xdc>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8009f6c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009f6e:	1a51      	subs	r1, r2, r1
 8009f70:	2900      	cmp	r1, #0
 8009f72:	f300 8082 	bgt.w	800a07a <tcp_receive+0x41a>
      if (pcb->flags & TF_INFR) {
 8009f76:	8b61      	ldrh	r1, [r4, #26]
 8009f78:	0748      	lsls	r0, r1, #29
 8009f7a:	d509      	bpl.n	8009f90 <tcp_receive+0x330>
        tcp_clear_flags(pcb, TF_INFR);
 8009f7c:	f021 0104 	bic.w	r1, r1, #4
 8009f80:	8361      	strh	r1, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 8009f82:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
 8009f86:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009f90:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 8009f94:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 8009f96:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009f98:	eb01 01e0 	add.w	r1, r1, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 8009f9c:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009f9e:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 8009fa2:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 8009fa4:	f04f 0100 	mov.w	r1, #0
 8009fa8:	f8a4 1042 	strh.w	r1, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 8009fac:	d926      	bls.n	8009ffc <tcp_receive+0x39c>
        if (pcb->cwnd < pcb->ssthresh) {
 8009fae:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8009fb2:	b29b      	uxth	r3, r3
        if (pcb->cwnd < pcb->ssthresh) {
 8009fb4:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8009fb8:	428a      	cmp	r2, r1
 8009fba:	d915      	bls.n	8009fe8 <tcp_receive+0x388>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009fbc:	8b62      	ldrh	r2, [r4, #26]
 8009fbe:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009fc2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8009fc4:	bf14      	ite	ne
 8009fc6:	2001      	movne	r0, #1
 8009fc8:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8009fca:	fb12 f200 	smulbb	r2, r2, r0
 8009fce:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	bf94      	ite	ls
 8009fd4:	188b      	addls	r3, r1, r2
 8009fd6:	18cb      	addhi	r3, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	4299      	cmp	r1, r3
 8009fdc:	d901      	bls.n	8009fe2 <tcp_receive+0x382>
          TCP_WND_INC(pcb->cwnd, increase);
 8009fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8009fe2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 8009fe6:	e009      	b.n	8009ffc <tcp_receive+0x39c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 8009fe8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8009fec:	4413      	add	r3, r2
 8009fee:	b29b      	uxth	r3, r3
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d82d      	bhi.n	800a050 <tcp_receive+0x3f0>
          if (pcb->bytes_acked >= pcb->cwnd) {
 8009ff4:	4299      	cmp	r1, r3
 8009ff6:	d92d      	bls.n	800a054 <tcp_receive+0x3f4>
 8009ff8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009ffc:	f104 0666 	add.w	r6, r4, #102	; 0x66
 800a000:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 800a004:	4630      	mov	r0, r6
 800a006:	f7ff fdcf 	bl	8009ba8 <tcp_free_acked_segments.isra.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a00a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800a00c:	4602      	mov	r2, r0
 800a00e:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a010:	4630      	mov	r0, r6
 800a012:	f7ff fdc9 	bl	8009ba8 <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 800a016:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800a018:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 800a01a:	fab2 f382 	clz	r3, r2
 800a01e:	095b      	lsrs	r3, r3, #5
 800a020:	425b      	negs	r3, r3
 800a022:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 800a024:	2300      	movs	r3, #0
 800a026:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 800a028:	b908      	cbnz	r0, 800a02e <tcp_receive+0x3ce>
        pcb->unsent_oversize = 0;
 800a02a:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800a02e:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800a032:	8aa9      	ldrh	r1, [r5, #20]
 800a034:	440b      	add	r3, r1
 800a036:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 800a03a:	8b63      	ldrh	r3, [r4, #26]
 800a03c:	051f      	lsls	r7, r3, #20
 800a03e:	f57f ae7d 	bpl.w	8009d3c <tcp_receive+0xdc>
        if (pcb->unacked == NULL) {
 800a042:	b9ba      	cbnz	r2, 800a074 <tcp_receive+0x414>
          if ((pcb->unsent == NULL) ||
 800a044:	b960      	cbnz	r0, 800a060 <tcp_receive+0x400>
          tcp_clear_flags(pcb, TF_RTO);
 800a046:	8b63      	ldrh	r3, [r4, #26]
 800a048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a04c:	8363      	strh	r3, [r4, #26]
 800a04e:	e675      	b.n	8009d3c <tcp_receive+0xdc>
          TCP_WND_INC(pcb->bytes_acked, acked);
 800a050:	f64f 73ff 	movw	r3, #65535	; 0xffff
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800a054:	1a5b      	subs	r3, r3, r1
 800a056:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800a05a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800a05c:	440b      	add	r3, r1
 800a05e:	e7bb      	b.n	8009fd8 <tcp_receive+0x378>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800a060:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800a062:	68c3      	ldr	r3, [r0, #12]
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800a064:	6858      	ldr	r0, [r3, #4]
 800a066:	f7fd fc8a 	bl	800797e <lwip_htonl>
 800a06a:	1a30      	subs	r0, r6, r0
 800a06c:	2800      	cmp	r0, #0
 800a06e:	f73f ae65 	bgt.w	8009d3c <tcp_receive+0xdc>
 800a072:	e7e8      	b.n	800a046 <tcp_receive+0x3e6>
 800a074:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 800a076:	68d3      	ldr	r3, [r2, #12]
 800a078:	e7f4      	b.n	800a064 <tcp_receive+0x404>
      tcp_send_empty_ack(pcb);
 800a07a:	4620      	mov	r0, r4
 800a07c:	f001 fbce 	bl	800b81c <tcp_send_empty_ack>
 800a080:	e65c      	b.n	8009d3c <tcp_receive+0xdc>
        off -= p->len;
 800a082:	1abf      	subs	r7, r7, r2
        p->tot_len = new_tot_len;
 800a084:	8133      	strh	r3, [r6, #8]
        p->len = 0;
 800a086:	8171      	strh	r1, [r6, #10]
        off -= p->len;
 800a088:	b2bf      	uxth	r7, r7
        p = p->next;
 800a08a:	6836      	ldr	r6, [r6, #0]
 800a08c:	e6bc      	b.n	8009e08 <tcp_receive+0x1a8>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800a08e:	1a9b      	subs	r3, r3, r2
 800a090:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 800a092:	bfbe      	ittt	lt
 800a094:	8b63      	ldrhlt	r3, [r4, #26]
 800a096:	f043 0302 	orrlt.w	r3, r3, #2
 800a09a:	8363      	strhlt	r3, [r4, #26]
 800a09c:	e6c0      	b.n	8009e20 <tcp_receive+0x1c0>
        tcp_ack(pcb);
 800a09e:	f043 0301 	orr.w	r3, r3, #1
      tcp_ack_now(pcb);
 800a0a2:	8363      	strh	r3, [r4, #26]
}
 800a0a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tcp_send_empty_ack(pcb);
 800a0a6:	4620      	mov	r0, r4
}
 800a0a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        tcp_send_empty_ack(pcb);
 800a0ac:	f001 bbb6 	b.w	800b81c <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800a0b0:	1a99      	subs	r1, r3, r2
 800a0b2:	2900      	cmp	r1, #0
 800a0b4:	db05      	blt.n	800a0c2 <tcp_receive+0x462>
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	1a9b      	subs	r3, r3, r2
 800a0ba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a0bc:	1a9b      	subs	r3, r3, r2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	ddf0      	ble.n	800a0a4 <tcp_receive+0x444>
      tcp_ack_now(pcb);
 800a0c2:	8b63      	ldrh	r3, [r4, #26]
 800a0c4:	e734      	b.n	8009f30 <tcp_receive+0x2d0>
 800a0c6:	bf00      	nop

0800a0c8 <tcp_input>:
{
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a0cc:	4606      	mov	r6, r0
{
 800a0ce:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800a0d0:	b928      	cbnz	r0, 800a0de <tcp_input+0x16>
 800a0d2:	4ba0      	ldr	r3, [pc, #640]	; (800a354 <tcp_input+0x28c>)
 800a0d4:	2283      	movs	r2, #131	; 0x83
 800a0d6:	49a0      	ldr	r1, [pc, #640]	; (800a358 <tcp_input+0x290>)
 800a0d8:	48a0      	ldr	r0, [pc, #640]	; (800a35c <tcp_input+0x294>)
 800a0da:	f002 fabb 	bl	800c654 <iprintf>
  tcphdr = (struct tcp_hdr *)p->payload;
 800a0de:	6873      	ldr	r3, [r6, #4]
 800a0e0:	4d9f      	ldr	r5, [pc, #636]	; (800a360 <tcp_input+0x298>)
 800a0e2:	60eb      	str	r3, [r5, #12]
  if (p->len < TCP_HLEN) {
 800a0e4:	8973      	ldrh	r3, [r6, #10]
 800a0e6:	2b13      	cmp	r3, #19
 800a0e8:	f240 80a2 	bls.w	800a230 <tcp_input+0x168>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a0ec:	4f9d      	ldr	r7, [pc, #628]	; (800a364 <tcp_input+0x29c>)
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	46b8      	mov	r8, r7
 800a0f2:	6978      	ldr	r0, [r7, #20]
 800a0f4:	f7fd f84f 	bl	8007196 <ip4_addr_isbroadcast_u32>
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	f040 8098 	bne.w	800a230 <tcp_input+0x168>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800a106:	2be0      	cmp	r3, #224	; 0xe0
 800a108:	f000 8092 	beq.w	800a230 <tcp_input+0x168>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800a10c:	68eb      	ldr	r3, [r5, #12]
 800a10e:	8998      	ldrh	r0, [r3, #12]
 800a110:	f7fd fc32 	bl	8007978 <lwip_htons>
 800a114:	0a81      	lsrs	r1, r0, #10
 800a116:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800a11a:	2913      	cmp	r1, #19
 800a11c:	f240 8088 	bls.w	800a230 <tcp_input+0x168>
 800a120:	8933      	ldrh	r3, [r6, #8]
 800a122:	b28a      	uxth	r2, r1
 800a124:	428b      	cmp	r3, r1
 800a126:	f0c0 8083 	bcc.w	800a230 <tcp_input+0x168>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a12a:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 800a12e:	8970      	ldrh	r0, [r6, #10]
  tcphdr_opt2 = NULL;
 800a130:	606c      	str	r4, [r5, #4]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a132:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 800a134:	4290      	cmp	r0, r2
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800a136:	822b      	strh	r3, [r5, #16]
  if (p->len >= hdrlen_bytes) {
 800a138:	d33c      	bcc.n	800a1b4 <tcp_input+0xec>
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a13a:	4630      	mov	r0, r6
    tcphdr_opt1len = tcphdr_optlen;
 800a13c:	812b      	strh	r3, [r5, #8]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800a13e:	f7fe f99b 	bl	8008478 <pbuf_remove_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800a142:	68ec      	ldr	r4, [r5, #12]
 800a144:	8820      	ldrh	r0, [r4, #0]
 800a146:	f7fd fc17 	bl	8007978 <lwip_htons>
 800a14a:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800a14c:	68ec      	ldr	r4, [r5, #12]
 800a14e:	8860      	ldrh	r0, [r4, #2]
 800a150:	f7fd fc12 	bl	8007978 <lwip_htons>
 800a154:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a156:	68ec      	ldr	r4, [r5, #12]
 800a158:	6860      	ldr	r0, [r4, #4]
 800a15a:	f7fd fc10 	bl	800797e <lwip_htonl>
 800a15e:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a160:	68ec      	ldr	r4, [r5, #12]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800a162:	6228      	str	r0, [r5, #32]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a164:	68a0      	ldr	r0, [r4, #8]
 800a166:	f7fd fc0a 	bl	800797e <lwip_htonl>
 800a16a:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a16c:	68ec      	ldr	r4, [r5, #12]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800a16e:	61a8      	str	r0, [r5, #24]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a170:	89e0      	ldrh	r0, [r4, #14]
 800a172:	f7fd fc01 	bl	8007978 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 800a176:	68eb      	ldr	r3, [r5, #12]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800a178:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 800a17a:	8998      	ldrh	r0, [r3, #12]
 800a17c:	f7fd fbfc 	bl	8007978 <lwip_htons>
 800a180:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len;
 800a184:	8932      	ldrh	r2, [r6, #8]
  flags = TCPH_FLAGS(tcphdr);
 800a186:	772b      	strb	r3, [r5, #28]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800a188:	0783      	lsls	r3, r0, #30
 800a18a:	d14c      	bne.n	800a226 <tcp_input+0x15e>
  tcplen = p->tot_len;
 800a18c:	84aa      	strh	r2, [r5, #36]	; 0x24
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a18e:	4b76      	ldr	r3, [pc, #472]	; (800a368 <tcp_input+0x2a0>)
  prev = NULL;
 800a190:	2700      	movs	r7, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a192:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800a390 <tcp_input+0x2c8>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a196:	681c      	ldr	r4, [r3, #0]
 800a198:	4699      	mov	r9, r3
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a19a:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 800a35c <tcp_input+0x294>
 800a19e:	4b6d      	ldr	r3, [pc, #436]	; (800a354 <tcp_input+0x28c>)
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1a0:	2c00      	cmp	r4, #0
 800a1a2:	d14b      	bne.n	800a23c <tcp_input+0x174>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1a4:	4b71      	ldr	r3, [pc, #452]	; (800a36c <tcp_input+0x2a4>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a1a6:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 800a354 <tcp_input+0x28c>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1aa:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a1ac:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 800a394 <tcp_input+0x2cc>
 800a1b0:	4f6a      	ldr	r7, [pc, #424]	; (800a35c <tcp_input+0x294>)
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a1b2:	e145      	b.n	800a440 <tcp_input+0x378>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800a1b4:	6833      	ldr	r3, [r6, #0]
 800a1b6:	b92b      	cbnz	r3, 800a1c4 <tcp_input+0xfc>
 800a1b8:	4b66      	ldr	r3, [pc, #408]	; (800a354 <tcp_input+0x28c>)
 800a1ba:	22c2      	movs	r2, #194	; 0xc2
 800a1bc:	496c      	ldr	r1, [pc, #432]	; (800a370 <tcp_input+0x2a8>)
 800a1be:	4867      	ldr	r0, [pc, #412]	; (800a35c <tcp_input+0x294>)
 800a1c0:	f002 fa48 	bl	800c654 <iprintf>
    pbuf_remove_header(p, TCP_HLEN);
 800a1c4:	2114      	movs	r1, #20
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f7fe f956 	bl	8008478 <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 800a1cc:	8974      	ldrh	r4, [r6, #10]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a1ce:	f8b5 9010 	ldrh.w	r9, [r5, #16]
    pbuf_remove_header(p, tcphdr_opt1len);
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	4621      	mov	r1, r4
    tcphdr_opt1len = p->len;
 800a1d6:	812c      	strh	r4, [r5, #8]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a1d8:	eba9 0704 	sub.w	r7, r9, r4
    pbuf_remove_header(p, tcphdr_opt1len);
 800a1dc:	f7fe f94c 	bl	8008478 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 800a1e0:	6830      	ldr	r0, [r6, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800a1e2:	b2bf      	uxth	r7, r7
    if (opt2len > p->next->len) {
 800a1e4:	8943      	ldrh	r3, [r0, #10]
 800a1e6:	42bb      	cmp	r3, r7
 800a1e8:	d322      	bcc.n	800a230 <tcp_input+0x168>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a1ea:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 800a1ec:	4639      	mov	r1, r7
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800a1ee:	606b      	str	r3, [r5, #4]
    pbuf_remove_header(p->next, opt2len);
 800a1f0:	f7fe f942 	bl	8008478 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a1f4:	8933      	ldrh	r3, [r6, #8]
 800a1f6:	441c      	add	r4, r3
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a1f8:	8973      	ldrh	r3, [r6, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800a1fa:	eba4 0409 	sub.w	r4, r4, r9
 800a1fe:	8134      	strh	r4, [r6, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 800a200:	b12b      	cbz	r3, 800a20e <tcp_input+0x146>
 800a202:	4b54      	ldr	r3, [pc, #336]	; (800a354 <tcp_input+0x28c>)
 800a204:	22df      	movs	r2, #223	; 0xdf
 800a206:	495b      	ldr	r1, [pc, #364]	; (800a374 <tcp_input+0x2ac>)
 800a208:	4854      	ldr	r0, [pc, #336]	; (800a35c <tcp_input+0x294>)
 800a20a:	f002 fa23 	bl	800c654 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800a20e:	6833      	ldr	r3, [r6, #0]
 800a210:	8932      	ldrh	r2, [r6, #8]
 800a212:	891b      	ldrh	r3, [r3, #8]
 800a214:	429a      	cmp	r2, r3
 800a216:	d094      	beq.n	800a142 <tcp_input+0x7a>
 800a218:	4b4e      	ldr	r3, [pc, #312]	; (800a354 <tcp_input+0x28c>)
 800a21a:	22e0      	movs	r2, #224	; 0xe0
 800a21c:	4956      	ldr	r1, [pc, #344]	; (800a378 <tcp_input+0x2b0>)
 800a21e:	484f      	ldr	r0, [pc, #316]	; (800a35c <tcp_input+0x294>)
 800a220:	f002 fa18 	bl	800c654 <iprintf>
 800a224:	e78d      	b.n	800a142 <tcp_input+0x7a>
    tcplen++;
 800a226:	1c53      	adds	r3, r2, #1
 800a228:	b29b      	uxth	r3, r3
    if (tcplen < p->tot_len) {
 800a22a:	429a      	cmp	r2, r3
    tcplen++;
 800a22c:	84ab      	strh	r3, [r5, #36]	; 0x24
    if (tcplen < p->tot_len) {
 800a22e:	d9ae      	bls.n	800a18e <tcp_input+0xc6>
  pbuf_free(p);
 800a230:	4630      	mov	r0, r6
}
 800a232:	b007      	add	sp, #28
 800a234:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800a238:	f7fe b952 	b.w	80084e0 <pbuf_free>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800a23c:	7d22      	ldrb	r2, [r4, #20]
 800a23e:	b92a      	cbnz	r2, 800a24c <tcp_input+0x184>
 800a240:	22fb      	movs	r2, #251	; 0xfb
 800a242:	4659      	mov	r1, fp
 800a244:	4650      	mov	r0, sl
 800a246:	f002 fa05 	bl	800c654 <iprintf>
 800a24a:	4b42      	ldr	r3, [pc, #264]	; (800a354 <tcp_input+0x28c>)
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800a24c:	7d22      	ldrb	r2, [r4, #20]
 800a24e:	2a0a      	cmp	r2, #10
 800a250:	d105      	bne.n	800a25e <tcp_input+0x196>
 800a252:	22fc      	movs	r2, #252	; 0xfc
 800a254:	4949      	ldr	r1, [pc, #292]	; (800a37c <tcp_input+0x2b4>)
 800a256:	4650      	mov	r0, sl
 800a258:	f002 f9fc 	bl	800c654 <iprintf>
 800a25c:	4b3d      	ldr	r3, [pc, #244]	; (800a354 <tcp_input+0x28c>)
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800a25e:	7d22      	ldrb	r2, [r4, #20]
 800a260:	2a01      	cmp	r2, #1
 800a262:	d105      	bne.n	800a270 <tcp_input+0x1a8>
 800a264:	22fd      	movs	r2, #253	; 0xfd
 800a266:	4946      	ldr	r1, [pc, #280]	; (800a380 <tcp_input+0x2b8>)
 800a268:	4650      	mov	r0, sl
 800a26a:	f002 f9f3 	bl	800c654 <iprintf>
 800a26e:	4b39      	ldr	r3, [pc, #228]	; (800a354 <tcp_input+0x28c>)
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a270:	7a20      	ldrb	r0, [r4, #8]
 800a272:	68e1      	ldr	r1, [r4, #12]
 800a274:	b138      	cbz	r0, 800a286 <tcp_input+0x1be>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a276:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800a27a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800a27e:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a280:	b2d2      	uxtb	r2, r2
 800a282:	4290      	cmp	r0, r2
 800a284:	d162      	bne.n	800a34c <tcp_input+0x284>
    if (pcb->remote_port == tcphdr->src &&
 800a286:	68ea      	ldr	r2, [r5, #12]
 800a288:	f8b4 c018 	ldrh.w	ip, [r4, #24]
 800a28c:	8810      	ldrh	r0, [r2, #0]
 800a28e:	4584      	cmp	ip, r0
 800a290:	d15c      	bne.n	800a34c <tcp_input+0x284>
 800a292:	8ae0      	ldrh	r0, [r4, #22]
 800a294:	8852      	ldrh	r2, [r2, #2]
 800a296:	4290      	cmp	r0, r2
 800a298:	d158      	bne.n	800a34c <tcp_input+0x284>
        pcb->local_port == tcphdr->dest &&
 800a29a:	6860      	ldr	r0, [r4, #4]
 800a29c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a2a0:	4290      	cmp	r0, r2
 800a2a2:	d153      	bne.n	800a34c <tcp_input+0x284>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a2a4:	6820      	ldr	r0, [r4, #0]
 800a2a6:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800a2aa:	4290      	cmp	r0, r2
 800a2ac:	d14e      	bne.n	800a34c <tcp_input+0x284>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800a2ae:	42a1      	cmp	r1, r4
 800a2b0:	f040 83ef 	bne.w	800aa92 <tcp_input+0x9ca>
 800a2b4:	4b27      	ldr	r3, [pc, #156]	; (800a354 <tcp_input+0x28c>)
 800a2b6:	f240 120d 	movw	r2, #269	; 0x10d
 800a2ba:	4932      	ldr	r1, [pc, #200]	; (800a384 <tcp_input+0x2bc>)
 800a2bc:	4827      	ldr	r0, [pc, #156]	; (800a35c <tcp_input+0x294>)
 800a2be:	f002 f9c9 	bl	800c654 <iprintf>
      if (prev != NULL) {
 800a2c2:	b137      	cbz	r7, 800a2d2 <tcp_input+0x20a>
        prev->next = pcb->next;
 800a2c4:	68e3      	ldr	r3, [r4, #12]
 800a2c6:	60fb      	str	r3, [r7, #12]
        pcb->next = tcp_active_pcbs;
 800a2c8:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 800a2cc:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 800a2d0:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800a2d2:	68e3      	ldr	r3, [r4, #12]
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	d106      	bne.n	800a2e6 <tcp_input+0x21e>
 800a2d8:	4b1e      	ldr	r3, [pc, #120]	; (800a354 <tcp_input+0x28c>)
 800a2da:	f240 1215 	movw	r2, #277	; 0x115
 800a2de:	492a      	ldr	r1, [pc, #168]	; (800a388 <tcp_input+0x2c0>)
 800a2e0:	481e      	ldr	r0, [pc, #120]	; (800a35c <tcp_input+0x294>)
 800a2e2:	f002 f9b7 	bl	800c654 <iprintf>
    inseg.len = p->tot_len;
 800a2e6:	8932      	ldrh	r2, [r6, #8]
    inseg.next = NULL;
 800a2e8:	2300      	movs	r3, #0
    inseg.p = p;
 800a2ea:	62ee      	str	r6, [r5, #44]	; 0x2c
    inseg.len = p->tot_len;
 800a2ec:	862a      	strh	r2, [r5, #48]	; 0x30
    inseg.tcphdr = tcphdr;
 800a2ee:	68ea      	ldr	r2, [r5, #12]
    inseg.next = NULL;
 800a2f0:	62ab      	str	r3, [r5, #40]	; 0x28
    recv_flags = 0;
 800a2f2:	74ab      	strb	r3, [r5, #18]
    recv_acked = 0;
 800a2f4:	82ab      	strh	r3, [r5, #20]
    recv_data = NULL;
 800a2f6:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
    if (flags & TCP_PSH) {
 800a2fa:	7f2b      	ldrb	r3, [r5, #28]
 800a2fc:	071b      	lsls	r3, r3, #28
 800a2fe:	d503      	bpl.n	800a308 <tcp_input+0x240>
      p->flags |= PBUF_FLAG_PUSH;
 800a300:	7b73      	ldrb	r3, [r6, #13]
 800a302:	f043 0301 	orr.w	r3, r3, #1
 800a306:	7373      	strb	r3, [r6, #13]
    if (pcb->refused_data != NULL) {
 800a308:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a30a:	4e20      	ldr	r6, [pc, #128]	; (800a38c <tcp_input+0x2c4>)
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 8131 	beq.w	800a574 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800a312:	4620      	mov	r0, r4
 800a314:	f7ff f920 	bl	8009558 <tcp_process_refused_data>
 800a318:	300d      	adds	r0, #13
 800a31a:	d007      	beq.n	800a32c <tcp_input+0x264>
 800a31c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 8128 	beq.w	800a574 <tcp_input+0x4ac>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800a324:	8cab      	ldrh	r3, [r5, #36]	; 0x24
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 8124 	beq.w	800a574 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 800a32c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800a32e:	b913      	cbnz	r3, 800a336 <tcp_input+0x26e>
          tcp_send_empty_ack(pcb);
 800a330:	4620      	mov	r0, r4
 800a332:	f001 fa73 	bl	800b81c <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800a336:	2400      	movs	r4, #0
    if (inseg.p != NULL) {
 800a338:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    tcp_input_pcb = NULL;
 800a33a:	6034      	str	r4, [r6, #0]
    recv_data = NULL;
 800a33c:	63ac      	str	r4, [r5, #56]	; 0x38
    if (inseg.p != NULL) {
 800a33e:	b110      	cbz	r0, 800a346 <tcp_input+0x27e>
      pbuf_free(inseg.p);
 800a340:	f7fe f8ce 	bl	80084e0 <pbuf_free>
      inseg.p = NULL;
 800a344:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 800a346:	b007      	add	sp, #28
 800a348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800a34c:	4627      	mov	r7, r4
 800a34e:	460c      	mov	r4, r1
 800a350:	e726      	b.n	800a1a0 <tcp_input+0xd8>
 800a352:	bf00      	nop
 800a354:	08020665 	.word	0x08020665
 800a358:	08020818 	.word	0x08020818
 800a35c:	0801e3d3 	.word	0x0801e3d3
 800a360:	2400679c 	.word	0x2400679c
 800a364:	24006a14 	.word	0x24006a14
 800a368:	2400a754 	.word	0x2400a754
 800a36c:	2400a764 	.word	0x2400a764
 800a370:	08020830 	.word	0x08020830
 800a374:	08020840 	.word	0x08020840
 800a378:	0802084c 	.word	0x0802084c
 800a37c:	08020892 	.word	0x08020892
 800a380:	080208bc 	.word	0x080208bc
 800a384:	080208e3 	.word	0x080208e3
 800a388:	0802090e 	.word	0x0802090e
 800a38c:	2400a768 	.word	0x2400a768
 800a390:	0802086b 	.word	0x0802086b
 800a394:	08020938 	.word	0x08020938
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800a398:	7d23      	ldrb	r3, [r4, #20]
 800a39a:	2b0a      	cmp	r3, #10
 800a39c:	d006      	beq.n	800a3ac <tcp_input+0x2e4>
 800a39e:	465b      	mov	r3, fp
 800a3a0:	f240 121f 	movw	r2, #287	; 0x11f
 800a3a4:	4651      	mov	r1, sl
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	f002 f954 	bl	800c654 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a3ac:	7a22      	ldrb	r2, [r4, #8]
 800a3ae:	b13a      	cbz	r2, 800a3c0 <tcp_input+0x2f8>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a3b0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a3b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a3b8:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d13e      	bne.n	800a43e <tcp_input+0x376>
      if (pcb->remote_port == tcphdr->src &&
 800a3c0:	68eb      	ldr	r3, [r5, #12]
 800a3c2:	8b20      	ldrh	r0, [r4, #24]
 800a3c4:	881a      	ldrh	r2, [r3, #0]
 800a3c6:	4290      	cmp	r0, r2
 800a3c8:	d139      	bne.n	800a43e <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800a3ca:	885b      	ldrh	r3, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 800a3cc:	8ae1      	ldrh	r1, [r4, #22]
 800a3ce:	4299      	cmp	r1, r3
 800a3d0:	d135      	bne.n	800a43e <tcp_input+0x376>
          pcb->local_port == tcphdr->dest &&
 800a3d2:	6862      	ldr	r2, [r4, #4]
 800a3d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d130      	bne.n	800a43e <tcp_input+0x376>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800a3dc:	6822      	ldr	r2, [r4, #0]
 800a3de:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d12b      	bne.n	800a43e <tcp_input+0x376>
  if (flags & TCP_RST) {
 800a3e6:	7f2b      	ldrb	r3, [r5, #28]
 800a3e8:	075f      	lsls	r7, r3, #29
 800a3ea:	f53f af21 	bmi.w	800a230 <tcp_input+0x168>
  if (flags & TCP_SYN) {
 800a3ee:	079a      	lsls	r2, r3, #30
 800a3f0:	8caf      	ldrh	r7, [r5, #36]	; 0x24
 800a3f2:	d514      	bpl.n	800a41e <tcp_input+0x356>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800a3f4:	6a2a      	ldr	r2, [r5, #32]
 800a3f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	d415      	bmi.n	800a428 <tcp_input+0x360>
 800a3fc:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
 800a400:	eba3 030c 	sub.w	r3, r3, ip
 800a404:	2b00      	cmp	r3, #0
 800a406:	dc0f      	bgt.n	800a428 <tcp_input+0x360>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a408:	4b8a      	ldr	r3, [pc, #552]	; (800a634 <tcp_input+0x56c>)
 800a40a:	443a      	add	r2, r7
 800a40c:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800a410:	9300      	str	r3, [sp, #0]
 800a412:	4620      	mov	r0, r4
 800a414:	3304      	adds	r3, #4
 800a416:	69a9      	ldr	r1, [r5, #24]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a418:	f001 f9ba 	bl	800b790 <tcp_rst>
 800a41c:	e708      	b.n	800a230 <tcp_input+0x168>
  } else if (flags & TCP_FIN) {
 800a41e:	07dd      	lsls	r5, r3, #31
    pcb->tmr = tcp_ticks;
 800a420:	bf42      	ittt	mi
 800a422:	4b85      	ldrmi	r3, [pc, #532]	; (800a638 <tcp_input+0x570>)
 800a424:	681b      	ldrmi	r3, [r3, #0]
 800a426:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800a428:	2f00      	cmp	r7, #0
 800a42a:	f43f af01 	beq.w	800a230 <tcp_input+0x168>
    tcp_ack_now(pcb);
 800a42e:	8b63      	ldrh	r3, [r4, #26]
 800a430:	f043 0302 	orr.w	r3, r3, #2
 800a434:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 800a436:	4620      	mov	r0, r4
 800a438:	f001 fa22 	bl	800b880 <tcp_output>
        pbuf_free(p);
 800a43c:	e6f8      	b.n	800a230 <tcp_input+0x168>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800a43e:	68e4      	ldr	r4, [r4, #12]
 800a440:	2c00      	cmp	r4, #0
 800a442:	d1a9      	bne.n	800a398 <tcp_input+0x2d0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a444:	4a7d      	ldr	r2, [pc, #500]	; (800a63c <tcp_input+0x574>)
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a446:	f8d8 e004 	ldr.w	lr, [r8, #4]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a44a:	6810      	ldr	r0, [r2, #0]
      if (lpcb->local_port == tcphdr->dest) {
 800a44c:	68e9      	ldr	r1, [r5, #12]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a44e:	f8d8 a014 	ldr.w	sl, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a452:	4607      	mov	r7, r0
 800a454:	b98f      	cbnz	r7, 800a47a <tcp_input+0x3b2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800a456:	8988      	ldrh	r0, [r1, #12]
 800a458:	f7fd fa8e 	bl	8007978 <lwip_htons>
 800a45c:	0742      	lsls	r2, r0, #29
 800a45e:	f53f aee7 	bmi.w	800a230 <tcp_input+0x168>
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a462:	68eb      	ldr	r3, [r5, #12]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a464:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800a466:	8818      	ldrh	r0, [r3, #0]
 800a468:	6a2a      	ldr	r2, [r5, #32]
 800a46a:	9002      	str	r0, [sp, #8]
 800a46c:	885b      	ldrh	r3, [r3, #2]
 800a46e:	440a      	add	r2, r1
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	4b70      	ldr	r3, [pc, #448]	; (800a634 <tcp_input+0x56c>)
 800a474:	9300      	str	r3, [sp, #0]
 800a476:	3304      	adds	r3, #4
 800a478:	e308      	b.n	800aa8c <tcp_input+0x9c4>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a47a:	f897 c008 	ldrb.w	ip, [r7, #8]
 800a47e:	f1bc 0f00 	cmp.w	ip, #0
 800a482:	d005      	beq.n	800a490 <tcp_input+0x3c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800a484:	f89e 3030 	ldrb.w	r3, [lr, #48]	; 0x30
 800a488:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	459c      	cmp	ip, r3
 800a48e:	d10b      	bne.n	800a4a8 <tcp_input+0x3e0>
      if (lpcb->local_port == tcphdr->dest) {
 800a490:	f8b1 c002 	ldrh.w	ip, [r1, #2]
 800a494:	8afb      	ldrh	r3, [r7, #22]
 800a496:	4563      	cmp	r3, ip
 800a498:	d106      	bne.n	800a4a8 <tcp_input+0x3e0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	4553      	cmp	r3, sl
 800a49e:	f000 82df 	beq.w	800aa60 <tcp_input+0x998>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 82dc 	beq.w	800aa60 <tcp_input+0x998>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800a4a8:	463c      	mov	r4, r7
 800a4aa:	68ff      	ldr	r7, [r7, #12]
 800a4ac:	e7d2      	b.n	800a454 <tcp_input+0x38c>
  } else if (flags & TCP_SYN) {
 800a4ae:	079a      	lsls	r2, r3, #30
 800a4b0:	f57f aebe 	bpl.w	800a230 <tcp_input+0x168>
    npcb = tcp_alloc(pcb->prio);
 800a4b4:	7d78      	ldrb	r0, [r7, #21]
 800a4b6:	f7ff f9f3 	bl	80098a0 <tcp_alloc>
    if (npcb == NULL) {
 800a4ba:	4604      	mov	r4, r0
 800a4bc:	b948      	cbnz	r0, 800a4d2 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f43f aeb5 	beq.w	800a230 <tcp_input+0x168>
 800a4c6:	4601      	mov	r1, r0
 800a4c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4cc:	6938      	ldr	r0, [r7, #16]
 800a4ce:	4798      	blx	r3
 800a4d0:	e6ae      	b.n	800a230 <tcp_input+0x168>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a4d2:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 800a4d6:	68ea      	ldr	r2, [r5, #12]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800a4d8:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800a4da:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800a4de:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 800a4e0:	8afb      	ldrh	r3, [r7, #22]
 800a4e2:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 800a4e4:	7813      	ldrb	r3, [r2, #0]
 800a4e6:	7852      	ldrb	r2, [r2, #1]
 800a4e8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800a4ec:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 800a4f2:	6a2b      	ldr	r3, [r5, #32]
 800a4f4:	3301      	adds	r3, #1
 800a4f6:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800a4f8:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800a4fa:	f7ff fa6f 	bl	80099dc <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a4fe:	6a2b      	ldr	r3, [r5, #32]
    npcb->snd_wl2 = iss;
 800a500:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a502:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 800a504:	6520      	str	r0, [r4, #80]	; 0x50
    npcb->lastack = iss;
 800a506:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800a508:	6563      	str	r3, [r4, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800a50a:	693b      	ldr	r3, [r7, #16]
    npcb->snd_lbb = iss;
 800a50c:	65e0      	str	r0, [r4, #92]	; 0x5c
    npcb->callback_arg = pcb->callback_arg;
 800a50e:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 800a510:	67a7      	str	r7, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800a512:	7a7b      	ldrb	r3, [r7, #9]
 800a514:	f003 030c 	and.w	r3, r3, #12
 800a518:	7263      	strb	r3, [r4, #9]
    npcb->netif_idx = pcb->netif_idx;
 800a51a:	7a3b      	ldrb	r3, [r7, #8]
 800a51c:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 800a51e:	f8d9 3000 	ldr.w	r3, [r9]
 800a522:	f8c9 4000 	str.w	r4, [r9]
 800a526:	60e3      	str	r3, [r4, #12]
 800a528:	f001 fc80 	bl	800be2c <tcp_timer_needed>
 800a52c:	4b44      	ldr	r3, [pc, #272]	; (800a640 <tcp_input+0x578>)
 800a52e:	2201      	movs	r2, #1
    tcp_parseopt(npcb);
 800a530:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(npcb);
 800a532:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800a534:	f7ff fac2 	bl	8009abc <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800a538:	68eb      	ldr	r3, [r5, #12]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a53a:	1d22      	adds	r2, r4, #4
 800a53c:	8e65      	ldrh	r5, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800a53e:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a540:	4610      	mov	r0, r2
 800a542:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 800a544:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800a548:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a54c:	f7fc fcb6 	bl	8006ebc <ip4_route>
 800a550:	9a05      	ldr	r2, [sp, #20]
 800a552:	4601      	mov	r1, r0
 800a554:	4628      	mov	r0, r5
 800a556:	f7ff fa5b 	bl	8009a10 <tcp_eff_send_mss_netif>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a55a:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800a55c:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800a55e:	4620      	mov	r0, r4
 800a560:	f000 ff9a 	bl	800b498 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 800a564:	2800      	cmp	r0, #0
 800a566:	f43f af66 	beq.w	800a436 <tcp_input+0x36e>
      tcp_abandon(npcb, 0);
 800a56a:	4651      	mov	r1, sl
 800a56c:	4620      	mov	r0, r4
 800a56e:	f7ff f8c3 	bl	80096f8 <tcp_abandon>
      return;
 800a572:	e65d      	b.n	800a230 <tcp_input+0x168>
  if (flags & TCP_RST) {
 800a574:	7f2a      	ldrb	r2, [r5, #28]
    tcp_input_pcb = pcb;
 800a576:	6034      	str	r4, [r6, #0]
  if (flags & TCP_RST) {
 800a578:	0753      	lsls	r3, r2, #29
 800a57a:	d537      	bpl.n	800a5ec <tcp_input+0x524>
    if (pcb->state == SYN_SENT) {
 800a57c:	7d21      	ldrb	r1, [r4, #20]
 800a57e:	2902      	cmp	r1, #2
 800a580:	d11e      	bne.n	800a5c0 <tcp_input+0x4f8>
      if (ackno == pcb->snd_nxt) {
 800a582:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a584:	69ab      	ldr	r3, [r5, #24]
 800a586:	429a      	cmp	r2, r3
 800a588:	d107      	bne.n	800a59a <tcp_input+0x4d2>
      recv_flags |= TF_RESET;
 800a58a:	7cab      	ldrb	r3, [r5, #18]
 800a58c:	f043 0308 	orr.w	r3, r3, #8
 800a590:	74ab      	strb	r3, [r5, #18]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800a592:	8b63      	ldrh	r3, [r4, #26]
 800a594:	f023 0301 	bic.w	r3, r3, #1
        tcp_ack_now(pcb);
 800a598:	8363      	strh	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 800a59a:	7cab      	ldrb	r3, [r5, #18]
 800a59c:	0718      	lsls	r0, r3, #28
 800a59e:	f140 81fe 	bpl.w	800a99e <tcp_input+0x8d6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800a5a2:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800a5a6:	b11b      	cbz	r3, 800a5b0 <tcp_input+0x4e8>
 800a5a8:	f06f 010d 	mvn.w	r1, #13
 800a5ac:	6920      	ldr	r0, [r4, #16]
 800a5ae:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800a5b0:	4621      	mov	r1, r4
 800a5b2:	4824      	ldr	r0, [pc, #144]	; (800a644 <tcp_input+0x57c>)
 800a5b4:	f7fe fe80 	bl	80092b8 <tcp_pcb_remove>
        tcp_free(pcb);
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f7fe fa73 	bl	8008aa4 <tcp_free>
 800a5be:	e6ba      	b.n	800a336 <tcp_input+0x26e>
      if (seqno == pcb->rcv_nxt) {
 800a5c0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a5c2:	6a2b      	ldr	r3, [r5, #32]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d007      	beq.n	800a5d8 <tcp_input+0x510>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800a5c8:	1a9b      	subs	r3, r3, r2
 800a5ca:	d4e6      	bmi.n	800a59a <tcp_input+0x4d2>
 800a5cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a5ce:	1a9b      	subs	r3, r3, r2
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	dce2      	bgt.n	800a59a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800a5d4:	8b63      	ldrh	r3, [r4, #26]
 800a5d6:	e010      	b.n	800a5fa <tcp_input+0x532>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800a5d8:	2900      	cmp	r1, #0
 800a5da:	d1d6      	bne.n	800a58a <tcp_input+0x4c2>
 800a5dc:	4b1a      	ldr	r3, [pc, #104]	; (800a648 <tcp_input+0x580>)
 800a5de:	f44f 724e 	mov.w	r2, #824	; 0x338
 800a5e2:	491a      	ldr	r1, [pc, #104]	; (800a64c <tcp_input+0x584>)
 800a5e4:	481a      	ldr	r0, [pc, #104]	; (800a650 <tcp_input+0x588>)
 800a5e6:	f002 f835 	bl	800c654 <iprintf>
 800a5ea:	e7ce      	b.n	800a58a <tcp_input+0x4c2>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800a5ec:	0797      	lsls	r7, r2, #30
 800a5ee:	8b63      	ldrh	r3, [r4, #26]
 800a5f0:	d506      	bpl.n	800a600 <tcp_input+0x538>
 800a5f2:	7d22      	ldrb	r2, [r4, #20]
 800a5f4:	3a02      	subs	r2, #2
 800a5f6:	2a01      	cmp	r2, #1
 800a5f8:	d902      	bls.n	800a600 <tcp_input+0x538>
        tcp_ack_now(pcb);
 800a5fa:	f043 0302 	orr.w	r3, r3, #2
 800a5fe:	e7cb      	b.n	800a598 <tcp_input+0x4d0>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800a600:	06d8      	lsls	r0, r3, #27
  tcp_parseopt(pcb);
 800a602:	4620      	mov	r0, r4
    pcb->tmr = tcp_ticks;
 800a604:	bf5e      	ittt	pl
 800a606:	4b0c      	ldrpl	r3, [pc, #48]	; (800a638 <tcp_input+0x570>)
 800a608:	681b      	ldrpl	r3, [r3, #0]
 800a60a:	6223      	strpl	r3, [r4, #32]
  pcb->persist_probe = 0;
 800a60c:	2300      	movs	r3, #0
 800a60e:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
  tcp_parseopt(pcb);
 800a612:	f7ff fa53 	bl	8009abc <tcp_parseopt>
  switch (pcb->state) {
 800a616:	7d23      	ldrb	r3, [r4, #20]
 800a618:	3b02      	subs	r3, #2
 800a61a:	2b07      	cmp	r3, #7
 800a61c:	d8bd      	bhi.n	800a59a <tcp_input+0x4d2>
 800a61e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a622:	0019      	.short	0x0019
 800a624:	011200a6 	.word	0x011200a6
 800a628:	015f0117 	.word	0x015f0117
 800a62c:	01780112 	.word	0x01780112
 800a630:	01a9      	.short	0x01a9
 800a632:	bf00      	nop
 800a634:	24006a24 	.word	0x24006a24
 800a638:	2400a758 	.word	0x2400a758
 800a63c:	2400a75c 	.word	0x2400a75c
 800a640:	2400a750 	.word	0x2400a750
 800a644:	2400a754 	.word	0x2400a754
 800a648:	08020665 	.word	0x08020665
 800a64c:	08020965 	.word	0x08020965
 800a650:	0801e3d3 	.word	0x0801e3d3
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800a654:	7f2b      	ldrb	r3, [r5, #28]
 800a656:	f003 0212 	and.w	r2, r3, #18
 800a65a:	2a12      	cmp	r2, #18
 800a65c:	d16a      	bne.n	800a734 <tcp_input+0x66c>
          && (ackno == pcb->lastack + 1)) {
 800a65e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a660:	69a9      	ldr	r1, [r5, #24]
 800a662:	3201      	adds	r2, #1
 800a664:	428a      	cmp	r2, r1
 800a666:	d165      	bne.n	800a734 <tcp_input+0x66c>
        pcb->rcv_nxt = seqno + 1;
 800a668:	6a2b      	ldr	r3, [r5, #32]
        pcb->lastack = ackno;
 800a66a:	6462      	str	r2, [r4, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 800a66c:	1c59      	adds	r1, r3, #1
        pcb->snd_wnd = tcphdr->wnd;
 800a66e:	68ea      	ldr	r2, [r5, #12]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a670:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a672:	8e67      	ldrh	r7, [r4, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 800a674:	6261      	str	r1, [r4, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a676:	62e1      	str	r1, [r4, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 800a678:	89d2      	ldrh	r2, [r2, #14]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800a67a:	6563      	str	r3, [r4, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800a67c:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 800a67e:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800a682:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a686:	18e2      	adds	r2, r4, r3
        pcb->state = ESTABLISHED;
 800a688:	7523      	strb	r3, [r4, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a68a:	4610      	mov	r0, r2
 800a68c:	9205      	str	r2, [sp, #20]
 800a68e:	f7fc fc15 	bl	8006ebc <ip4_route>
 800a692:	9a05      	ldr	r2, [sp, #20]
 800a694:	4601      	mov	r1, r0
 800a696:	4638      	mov	r0, r7
 800a698:	f7ff f9ba 	bl	8009a10 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a69c:	f241 131c 	movw	r3, #4380	; 0x111c
 800a6a0:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800a6a2:	8660      	strh	r0, [r4, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a6a4:	0081      	lsls	r1, r0, #2
 800a6a6:	429a      	cmp	r2, r3
 800a6a8:	4617      	mov	r7, r2
 800a6aa:	bf38      	it	cc
 800a6ac:	461f      	movcc	r7, r3
 800a6ae:	ebb7 0f80 	cmp.w	r7, r0, lsl #2
 800a6b2:	d933      	bls.n	800a71c <tcp_input+0x654>
 800a6b4:	b28b      	uxth	r3, r1
 800a6b6:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800a6ba:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800a6be:	b933      	cbnz	r3, 800a6ce <tcp_input+0x606>
 800a6c0:	4ba3      	ldr	r3, [pc, #652]	; (800a950 <tcp_input+0x888>)
 800a6c2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800a6c6:	49a3      	ldr	r1, [pc, #652]	; (800a954 <tcp_input+0x88c>)
 800a6c8:	48a3      	ldr	r0, [pc, #652]	; (800a958 <tcp_input+0x890>)
 800a6ca:	f001 ffc3 	bl	800c654 <iprintf>
        --pcb->snd_queuelen;
 800a6ce:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
        rseg = pcb->unacked;
 800a6d2:	6f27      	ldr	r7, [r4, #112]	; 0x70
        --pcb->snd_queuelen;
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
        if (rseg == NULL) {
 800a6da:	bb1f      	cbnz	r7, 800a724 <tcp_input+0x65c>
          rseg = pcb->unsent;
 800a6dc:	6ee7      	ldr	r7, [r4, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800a6de:	b937      	cbnz	r7, 800a6ee <tcp_input+0x626>
 800a6e0:	4b9b      	ldr	r3, [pc, #620]	; (800a950 <tcp_input+0x888>)
 800a6e2:	f44f 725d 	mov.w	r2, #884	; 0x374
 800a6e6:	499d      	ldr	r1, [pc, #628]	; (800a95c <tcp_input+0x894>)
 800a6e8:	489b      	ldr	r0, [pc, #620]	; (800a958 <tcp_input+0x890>)
 800a6ea:	f001 ffb3 	bl	800c654 <iprintf>
          pcb->unsent = rseg->next;
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	66e3      	str	r3, [r4, #108]	; 0x6c
        tcp_seg_free(rseg);
 800a6f2:	4638      	mov	r0, r7
 800a6f4:	f7fe fb1e 	bl	8008d34 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 800a6f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a6fa:	b9b3      	cbnz	r3, 800a72a <tcp_input+0x662>
          pcb->rtime = -1;
 800a6fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a700:	8623      	strh	r3, [r4, #48]	; 0x30
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800a702:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800a706:	2b00      	cmp	r3, #0
 800a708:	f43f af64 	beq.w	800a5d4 <tcp_input+0x50c>
 800a70c:	2200      	movs	r2, #0
 800a70e:	4621      	mov	r1, r4
 800a710:	6920      	ldr	r0, [r4, #16]
 800a712:	4798      	blx	r3
        if (err == ERR_ABRT) {
 800a714:	300d      	adds	r0, #13
 800a716:	f47f af5d 	bne.w	800a5d4 <tcp_input+0x50c>
 800a71a:	e60c      	b.n	800a336 <tcp_input+0x26e>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a71c:	429a      	cmp	r2, r3
 800a71e:	bf88      	it	hi
 800a720:	b293      	uxthhi	r3, r2
 800a722:	e7c8      	b.n	800a6b6 <tcp_input+0x5ee>
          pcb->unacked = rseg->next;
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	6723      	str	r3, [r4, #112]	; 0x70
 800a728:	e7e3      	b.n	800a6f2 <tcp_input+0x62a>
          pcb->rtime = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	8623      	strh	r3, [r4, #48]	; 0x30
          pcb->nrtx = 0;
 800a72e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a732:	e7e6      	b.n	800a702 <tcp_input+0x63a>
      else if (flags & TCP_ACK) {
 800a734:	06d9      	lsls	r1, r3, #27
 800a736:	f57f af30 	bpl.w	800a59a <tcp_input+0x4d2>
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a73a:	68eb      	ldr	r3, [r5, #12]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a73c:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
 800a73e:	8818      	ldrh	r0, [r3, #0]
 800a740:	6a2a      	ldr	r2, [r5, #32]
 800a742:	9002      	str	r0, [sp, #8]
 800a744:	4620      	mov	r0, r4
 800a746:	885b      	ldrh	r3, [r3, #2]
 800a748:	440a      	add	r2, r1
 800a74a:	9301      	str	r3, [sp, #4]
 800a74c:	4b84      	ldr	r3, [pc, #528]	; (800a960 <tcp_input+0x898>)
 800a74e:	9300      	str	r3, [sp, #0]
 800a750:	3304      	adds	r3, #4
 800a752:	69a9      	ldr	r1, [r5, #24]
 800a754:	f001 f81c 	bl	800b790 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800a758:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800a75c:	2b05      	cmp	r3, #5
 800a75e:	f63f af1c 	bhi.w	800a59a <tcp_input+0x4d2>
          pcb->rtime = 0;
 800a762:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 800a764:	4620      	mov	r0, r4
          pcb->rtime = 0;
 800a766:	8623      	strh	r3, [r4, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800a768:	f001 fa50 	bl	800bc0c <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 800a76c:	e715      	b.n	800a59a <tcp_input+0x4d2>
      if (flags & TCP_ACK) {
 800a76e:	7f2b      	ldrb	r3, [r5, #28]
 800a770:	06da      	lsls	r2, r3, #27
 800a772:	d55b      	bpl.n	800a82c <tcp_input+0x764>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800a774:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a776:	69a9      	ldr	r1, [r5, #24]
 800a778:	43db      	mvns	r3, r3
 800a77a:	42cb      	cmn	r3, r1
 800a77c:	d447      	bmi.n	800a80e <tcp_input+0x746>
 800a77e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800a780:	1acb      	subs	r3, r1, r3
 800a782:	2b00      	cmp	r3, #0
 800a784:	dc43      	bgt.n	800a80e <tcp_input+0x746>
          pcb->state = ESTABLISHED;
 800a786:	2304      	movs	r3, #4
 800a788:	7523      	strb	r3, [r4, #20]
          if (pcb->listener == NULL) {
 800a78a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a78c:	b91b      	cbnz	r3, 800a796 <tcp_input+0x6ce>
            tcp_abort(pcb);
 800a78e:	4620      	mov	r0, r4
 800a790:	f7ff f830 	bl	80097f4 <tcp_abort>
            goto aborted;
 800a794:	e5cf      	b.n	800a336 <tcp_input+0x26e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800a796:	699b      	ldr	r3, [r3, #24]
 800a798:	b933      	cbnz	r3, 800a7a8 <tcp_input+0x6e0>
 800a79a:	4b6d      	ldr	r3, [pc, #436]	; (800a950 <tcp_input+0x888>)
 800a79c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800a7a0:	4970      	ldr	r1, [pc, #448]	; (800a964 <tcp_input+0x89c>)
 800a7a2:	486d      	ldr	r0, [pc, #436]	; (800a958 <tcp_input+0x890>)
 800a7a4:	f001 ff56 	bl	800c654 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800a7a8:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d0ee      	beq.n	800a78e <tcp_input+0x6c6>
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	4621      	mov	r1, r4
 800a7b4:	6920      	ldr	r0, [r4, #16]
 800a7b6:	4798      	blx	r3
          if (err != ERR_OK) {
 800a7b8:	b118      	cbz	r0, 800a7c2 <tcp_input+0x6fa>
            if (err != ERR_ABRT) {
 800a7ba:	300d      	adds	r0, #13
 800a7bc:	f43f adbb 	beq.w	800a336 <tcp_input+0x26e>
 800a7c0:	e7e5      	b.n	800a78e <tcp_input+0x6c6>
          tcp_receive(pcb);
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	f7ff fa4c 	bl	8009c60 <tcp_receive>
          if (recv_acked != 0) {
 800a7c8:	4a67      	ldr	r2, [pc, #412]	; (800a968 <tcp_input+0x8a0>)
 800a7ca:	8a93      	ldrh	r3, [r2, #20]
 800a7cc:	b10b      	cbz	r3, 800a7d2 <tcp_input+0x70a>
            recv_acked--;
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	8293      	strh	r3, [r2, #20]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a7d2:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800a7d4:	f241 131c 	movw	r3, #4380	; 0x111c
 800a7d8:	0041      	lsls	r1, r0, #1
 800a7da:	0087      	lsls	r7, r0, #2
 800a7dc:	4299      	cmp	r1, r3
 800a7de:	468c      	mov	ip, r1
 800a7e0:	bf38      	it	cc
 800a7e2:	469c      	movcc	ip, r3
 800a7e4:	ebbc 0f80 	cmp.w	ip, r0, lsl #2
 800a7e8:	d90d      	bls.n	800a806 <tcp_input+0x73e>
 800a7ea:	b2bb      	uxth	r3, r7
 800a7ec:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 800a7f0:	7c93      	ldrb	r3, [r2, #18]
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a7f2:	0698      	lsls	r0, r3, #26
 800a7f4:	f57f aed1 	bpl.w	800a59a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800a7f8:	8b63      	ldrh	r3, [r4, #26]
 800a7fa:	f043 0302 	orr.w	r3, r3, #2
 800a7fe:	8363      	strh	r3, [r4, #26]
        pcb->state = CLOSE_WAIT;
 800a800:	2307      	movs	r3, #7
        pcb->state = FIN_WAIT_2;
 800a802:	7523      	strb	r3, [r4, #20]
    if (err != ERR_ABRT) {
 800a804:	e6c9      	b.n	800a59a <tcp_input+0x4d2>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800a806:	4299      	cmp	r1, r3
 800a808:	bf88      	it	hi
 800a80a:	b28b      	uxthhi	r3, r1
 800a80c:	e7ee      	b.n	800a7ec <tcp_input+0x724>
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800a80e:	68eb      	ldr	r3, [r5, #12]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800a810:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800a812:	881f      	ldrh	r7, [r3, #0]
 800a814:	6a2a      	ldr	r2, [r5, #32]
 800a816:	9702      	str	r7, [sp, #8]
 800a818:	885b      	ldrh	r3, [r3, #2]
 800a81a:	4402      	add	r2, r0
 800a81c:	4620      	mov	r0, r4
 800a81e:	9301      	str	r3, [sp, #4]
 800a820:	4b4f      	ldr	r3, [pc, #316]	; (800a960 <tcp_input+0x898>)
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	3304      	adds	r3, #4
 800a826:	f000 ffb3 	bl	800b790 <tcp_rst>
    if (err != ERR_ABRT) {
 800a82a:	e6b6      	b.n	800a59a <tcp_input+0x4d2>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800a82c:	079f      	lsls	r7, r3, #30
 800a82e:	f57f aeb4 	bpl.w	800a59a <tcp_input+0x4d2>
 800a832:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a834:	6a2a      	ldr	r2, [r5, #32]
 800a836:	3b01      	subs	r3, #1
 800a838:	4293      	cmp	r3, r2
 800a83a:	f47f aeae 	bne.w	800a59a <tcp_input+0x4d2>
        tcp_rexmit(pcb);
 800a83e:	4620      	mov	r0, r4
 800a840:	f000 ff32 	bl	800b6a8 <tcp_rexmit>
    if (err != ERR_ABRT) {
 800a844:	e6a9      	b.n	800a59a <tcp_input+0x4d2>
      tcp_receive(pcb);
 800a846:	4620      	mov	r0, r4
 800a848:	f7ff fa0a 	bl	8009c60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800a84c:	7cab      	ldrb	r3, [r5, #18]
 800a84e:	e7d0      	b.n	800a7f2 <tcp_input+0x72a>
      tcp_receive(pcb);
 800a850:	4620      	mov	r0, r4
 800a852:	f7ff fa05 	bl	8009c60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a856:	7cab      	ldrb	r3, [r5, #18]
 800a858:	f013 0f20 	tst.w	r3, #32
 800a85c:	7f2b      	ldrb	r3, [r5, #28]
 800a85e:	d031      	beq.n	800a8c4 <tcp_input+0x7fc>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a860:	f013 0f10 	tst.w	r3, #16
 800a864:	8b63      	ldrh	r3, [r4, #26]
 800a866:	d028      	beq.n	800a8ba <tcp_input+0x7f2>
 800a868:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800a86a:	69aa      	ldr	r2, [r5, #24]
 800a86c:	4291      	cmp	r1, r2
 800a86e:	d124      	bne.n	800a8ba <tcp_input+0x7f2>
 800a870:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800a872:	bb12      	cbnz	r2, 800a8ba <tcp_input+0x7f2>
          tcp_ack_now(pcb);
 800a874:	f043 0302 	orr.w	r3, r3, #2
          tcp_pcb_purge(pcb);
 800a878:	4620      	mov	r0, r4
          tcp_ack_now(pcb);
 800a87a:	8363      	strh	r3, [r4, #26]
          tcp_pcb_purge(pcb);
 800a87c:	f7fe fae4 	bl	8008e48 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800a880:	f8d9 3000 	ldr.w	r3, [r9]
 800a884:	429c      	cmp	r4, r3
 800a886:	d10a      	bne.n	800a89e <tcp_input+0x7d6>
        TCP_RMV_ACTIVE(pcb);
 800a888:	68e3      	ldr	r3, [r4, #12]
 800a88a:	f8c9 3000 	str.w	r3, [r9]
 800a88e:	e008      	b.n	800a8a2 <tcp_input+0x7da>
          TCP_RMV_ACTIVE(pcb);
 800a890:	68da      	ldr	r2, [r3, #12]
 800a892:	4294      	cmp	r4, r2
 800a894:	d102      	bne.n	800a89c <tcp_input+0x7d4>
        TCP_RMV_ACTIVE(pcb);
 800a896:	68e2      	ldr	r2, [r4, #12]
 800a898:	60da      	str	r2, [r3, #12]
 800a89a:	e002      	b.n	800a8a2 <tcp_input+0x7da>
 800a89c:	4613      	mov	r3, r2
          TCP_RMV_ACTIVE(pcb);
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d1f6      	bne.n	800a890 <tcp_input+0x7c8>
        TCP_RMV_ACTIVE(pcb);
 800a8a2:	4b32      	ldr	r3, [pc, #200]	; (800a96c <tcp_input+0x8a4>)
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800a8a8:	230a      	movs	r3, #10
 800a8aa:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a8ac:	4b30      	ldr	r3, [pc, #192]	; (800a970 <tcp_input+0x8a8>)
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	601c      	str	r4, [r3, #0]
 800a8b2:	60e2      	str	r2, [r4, #12]
 800a8b4:	f001 faba 	bl	800be2c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 800a8b8:	e66f      	b.n	800a59a <tcp_input+0x4d2>
          tcp_ack_now(pcb);
 800a8ba:	f043 0302 	orr.w	r3, r3, #2
 800a8be:	8363      	strh	r3, [r4, #26]
          pcb->state = CLOSING;
 800a8c0:	2308      	movs	r3, #8
 800a8c2:	e79e      	b.n	800a802 <tcp_input+0x73a>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800a8c4:	06d9      	lsls	r1, r3, #27
 800a8c6:	f57f ae68 	bpl.w	800a59a <tcp_input+0x4d2>
 800a8ca:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a8cc:	69ab      	ldr	r3, [r5, #24]
 800a8ce:	429a      	cmp	r2, r3
 800a8d0:	f47f ae63 	bne.w	800a59a <tcp_input+0x4d2>
 800a8d4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	f47f ae5f 	bne.w	800a59a <tcp_input+0x4d2>
        pcb->state = FIN_WAIT_2;
 800a8dc:	2306      	movs	r3, #6
 800a8de:	e790      	b.n	800a802 <tcp_input+0x73a>
      tcp_receive(pcb);
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f7ff f9bd 	bl	8009c60 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800a8e6:	7cab      	ldrb	r3, [r5, #18]
 800a8e8:	069a      	lsls	r2, r3, #26
 800a8ea:	f57f ae56 	bpl.w	800a59a <tcp_input+0x4d2>
        tcp_ack_now(pcb);
 800a8ee:	8b63      	ldrh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800a8f0:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800a8f2:	f043 0302 	orr.w	r3, r3, #2
 800a8f6:	8363      	strh	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800a8f8:	f7fe faa6 	bl	8008e48 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a8fc:	f8d9 3000 	ldr.w	r3, [r9]
 800a900:	429c      	cmp	r4, r3
 800a902:	d0c1      	beq.n	800a888 <tcp_input+0x7c0>
 800a904:	2b00      	cmp	r3, #0
 800a906:	d0cc      	beq.n	800a8a2 <tcp_input+0x7da>
 800a908:	68da      	ldr	r2, [r3, #12]
 800a90a:	4294      	cmp	r4, r2
 800a90c:	d0c3      	beq.n	800a896 <tcp_input+0x7ce>
 800a90e:	4613      	mov	r3, r2
 800a910:	e7f8      	b.n	800a904 <tcp_input+0x83c>
      tcp_receive(pcb);
 800a912:	4620      	mov	r0, r4
 800a914:	f7ff f9a4 	bl	8009c60 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a918:	7f2b      	ldrb	r3, [r5, #28]
 800a91a:	06db      	lsls	r3, r3, #27
 800a91c:	f57f ae3d 	bpl.w	800a59a <tcp_input+0x4d2>
 800a920:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a922:	69ab      	ldr	r3, [r5, #24]
 800a924:	429a      	cmp	r2, r3
 800a926:	f47f ae38 	bne.w	800a59a <tcp_input+0x4d2>
 800a92a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f47f ae34 	bne.w	800a59a <tcp_input+0x4d2>
        tcp_pcb_purge(pcb);
 800a932:	4620      	mov	r0, r4
 800a934:	f7fe fa88 	bl	8008e48 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800a938:	f8d9 3000 	ldr.w	r3, [r9]
 800a93c:	429c      	cmp	r4, r3
 800a93e:	d0a3      	beq.n	800a888 <tcp_input+0x7c0>
 800a940:	2b00      	cmp	r3, #0
 800a942:	d0ae      	beq.n	800a8a2 <tcp_input+0x7da>
 800a944:	68da      	ldr	r2, [r3, #12]
 800a946:	4294      	cmp	r4, r2
 800a948:	d0a5      	beq.n	800a896 <tcp_input+0x7ce>
 800a94a:	4613      	mov	r3, r2
 800a94c:	e7f8      	b.n	800a940 <tcp_input+0x878>
 800a94e:	bf00      	nop
 800a950:	08020665 	.word	0x08020665
 800a954:	08020985 	.word	0x08020985
 800a958:	0801e3d3 	.word	0x0801e3d3
 800a95c:	0802099b 	.word	0x0802099b
 800a960:	24006a24 	.word	0x24006a24
 800a964:	080209ae 	.word	0x080209ae
 800a968:	2400679c 	.word	0x2400679c
 800a96c:	2400a750 	.word	0x2400a750
 800a970:	2400a764 	.word	0x2400a764
      tcp_receive(pcb);
 800a974:	4620      	mov	r0, r4
 800a976:	f7ff f973 	bl	8009c60 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800a97a:	7f2b      	ldrb	r3, [r5, #28]
 800a97c:	06df      	lsls	r7, r3, #27
 800a97e:	f57f ae0c 	bpl.w	800a59a <tcp_input+0x4d2>
 800a982:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800a984:	69ab      	ldr	r3, [r5, #24]
 800a986:	429a      	cmp	r2, r3
 800a988:	f47f ae07 	bne.w	800a59a <tcp_input+0x4d2>
 800a98c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f47f ae03 	bne.w	800a59a <tcp_input+0x4d2>
        recv_flags |= TF_CLOSED;
 800a994:	7cab      	ldrb	r3, [r5, #18]
 800a996:	f043 0310 	orr.w	r3, r3, #16
 800a99a:	74ab      	strb	r3, [r5, #18]
    if (err != ERR_ABRT) {
 800a99c:	e5fd      	b.n	800a59a <tcp_input+0x4d2>
        if (recv_acked > 0) {
 800a99e:	8aaa      	ldrh	r2, [r5, #20]
 800a9a0:	b11a      	cbz	r2, 800a9aa <tcp_input+0x8e2>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a9a2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800a9a4:	b9db      	cbnz	r3, 800a9de <tcp_input+0x916>
          recv_acked = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	82ab      	strh	r3, [r5, #20]
        if (tcp_input_delayed_close(pcb)) {
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f7ff f8d0 	bl	8009b50 <tcp_input_delayed_close>
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	f47f acc0 	bne.w	800a336 <tcp_input+0x26e>
        if (recv_data != NULL) {
 800a9b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a9b8:	b323      	cbz	r3, 800aa04 <tcp_input+0x93c>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800a9ba:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800a9bc:	b133      	cbz	r3, 800a9cc <tcp_input+0x904>
 800a9be:	4b37      	ldr	r3, [pc, #220]	; (800aa9c <tcp_input+0x9d4>)
 800a9c0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a9c4:	4936      	ldr	r1, [pc, #216]	; (800aaa0 <tcp_input+0x9d8>)
 800a9c6:	4837      	ldr	r0, [pc, #220]	; (800aaa4 <tcp_input+0x9dc>)
 800a9c8:	f001 fe44 	bl	800c654 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800a9cc:	8b63      	ldrh	r3, [r4, #26]
 800a9ce:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800a9d0:	f013 0310 	ands.w	r3, r3, #16
 800a9d4:	d009      	beq.n	800a9ea <tcp_input+0x922>
            pbuf_free(recv_data);
 800a9d6:	4610      	mov	r0, r2
 800a9d8:	f7fd fd82 	bl	80084e0 <pbuf_free>
 800a9dc:	e6d7      	b.n	800a78e <tcp_input+0x6c6>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800a9de:	4621      	mov	r1, r4
 800a9e0:	6920      	ldr	r0, [r4, #16]
 800a9e2:	4798      	blx	r3
            if (err == ERR_ABRT) {
 800a9e4:	300d      	adds	r0, #13
 800a9e6:	d1de      	bne.n	800a9a6 <tcp_input+0x8de>
 800a9e8:	e4a5      	b.n	800a336 <tcp_input+0x26e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800a9ea:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800a9ee:	b1f7      	cbz	r7, 800aa2e <tcp_input+0x966>
 800a9f0:	4621      	mov	r1, r4
 800a9f2:	6920      	ldr	r0, [r4, #16]
 800a9f4:	47b8      	blx	r7
          if (err == ERR_ABRT) {
 800a9f6:	f110 0f0d 	cmn.w	r0, #13
 800a9fa:	f43f ac9c 	beq.w	800a336 <tcp_input+0x26e>
          if (err != ERR_OK) {
 800a9fe:	b108      	cbz	r0, 800aa04 <tcp_input+0x93c>
            pcb->refused_data = recv_data;
 800aa00:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800aa02:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 800aa04:	7cab      	ldrb	r3, [r5, #18]
 800aa06:	0699      	lsls	r1, r3, #26
 800aa08:	d505      	bpl.n	800aa16 <tcp_input+0x94e>
          if (pcb->refused_data != NULL) {
 800aa0a:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800aa0c:	b1ab      	cbz	r3, 800aa3a <tcp_input+0x972>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800aa0e:	7b5a      	ldrb	r2, [r3, #13]
 800aa10:	f042 0220 	orr.w	r2, r2, #32
 800aa14:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800aa16:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 800aa18:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 800aa1a:	6033      	str	r3, [r6, #0]
        if (tcp_input_delayed_close(pcb)) {
 800aa1c:	f7ff f898 	bl	8009b50 <tcp_input_delayed_close>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	f47f ac88 	bne.w	800a336 <tcp_input+0x26e>
        tcp_output(pcb);
 800aa26:	4620      	mov	r0, r4
 800aa28:	f000 ff2a 	bl	800b880 <tcp_output>
 800aa2c:	e483      	b.n	800a336 <tcp_input+0x26e>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800aa2e:	463b      	mov	r3, r7
 800aa30:	4621      	mov	r1, r4
 800aa32:	4638      	mov	r0, r7
 800aa34:	f7fe fd6c 	bl	8009510 <tcp_recv_null>
 800aa38:	e7dd      	b.n	800a9f6 <tcp_input+0x92e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aa3a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800aa3c:	f640 3268 	movw	r2, #2920	; 0xb68
            TCP_EVENT_CLOSED(pcb, err);
 800aa40:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aa44:	4293      	cmp	r3, r2
              pcb->rcv_wnd++;
 800aa46:	bf1c      	itt	ne
 800aa48:	3301      	addne	r3, #1
 800aa4a:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 800aa4c:	2f00      	cmp	r7, #0
 800aa4e:	d0e2      	beq.n	800aa16 <tcp_input+0x94e>
 800aa50:	2300      	movs	r3, #0
 800aa52:	4621      	mov	r1, r4
 800aa54:	6920      	ldr	r0, [r4, #16]
 800aa56:	461a      	mov	r2, r3
 800aa58:	47b8      	blx	r7
            if (err == ERR_ABRT) {
 800aa5a:	300d      	adds	r0, #13
 800aa5c:	d1db      	bne.n	800aa16 <tcp_input+0x94e>
 800aa5e:	e46a      	b.n	800a336 <tcp_input+0x26e>
      if (prev != NULL) {
 800aa60:	b11c      	cbz	r4, 800aa6a <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aa62:	68fb      	ldr	r3, [r7, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800aa64:	6017      	str	r7, [r2, #0]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800aa66:	60e3      	str	r3, [r4, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800aa68:	60f8      	str	r0, [r7, #12]
  if (flags & TCP_RST) {
 800aa6a:	7f2b      	ldrb	r3, [r5, #28]
 800aa6c:	0758      	lsls	r0, r3, #29
 800aa6e:	f53f abdf 	bmi.w	800a230 <tcp_input+0x168>
  if (flags & TCP_ACK) {
 800aa72:	f013 0a10 	ands.w	sl, r3, #16
 800aa76:	f43f ad1a 	beq.w	800a4ae <tcp_input+0x3e6>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800aa7a:	880b      	ldrh	r3, [r1, #0]
 800aa7c:	8ca8      	ldrh	r0, [r5, #36]	; 0x24
 800aa7e:	6a2a      	ldr	r2, [r5, #32]
 800aa80:	e9cd c301 	strd	ip, r3, [sp, #4]
 800aa84:	4b08      	ldr	r3, [pc, #32]	; (800aaa8 <tcp_input+0x9e0>)
 800aa86:	4402      	add	r2, r0
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	3304      	adds	r3, #4
 800aa8c:	69a9      	ldr	r1, [r5, #24]
 800aa8e:	4638      	mov	r0, r7
 800aa90:	e4c2      	b.n	800a418 <tcp_input+0x350>
      if (prev != NULL) {
 800aa92:	2f00      	cmp	r7, #0
 800aa94:	f47f ac16 	bne.w	800a2c4 <tcp_input+0x1fc>
 800aa98:	e425      	b.n	800a2e6 <tcp_input+0x21e>
 800aa9a:	bf00      	nop
 800aa9c:	08020665 	.word	0x08020665
 800aaa0:	080209cc 	.word	0x080209cc
 800aaa4:	0801e3d3 	.word	0x0801e3d3
 800aaa8:	24006a24 	.word	0x24006a24

0800aaac <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 800aaac:	4a02      	ldr	r2, [pc, #8]	; (800aab8 <tcp_trigger_input_pcb_close+0xc>)
 800aaae:	7c93      	ldrb	r3, [r2, #18]
 800aab0:	f043 0310 	orr.w	r3, r3, #16
 800aab4:	7493      	strb	r3, [r2, #18]
}
 800aab6:	4770      	bx	lr
 800aab8:	2400679c 	.word	0x2400679c

0800aabc <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800aabc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800aabe:	4604      	mov	r4, r0
 800aac0:	b930      	cbnz	r0, 800aad0 <tcp_output_segment_busy+0x14>
 800aac2:	4b06      	ldr	r3, [pc, #24]	; (800aadc <tcp_output_segment_busy+0x20>)
 800aac4:	f240 529a 	movw	r2, #1434	; 0x59a
 800aac8:	4905      	ldr	r1, [pc, #20]	; (800aae0 <tcp_output_segment_busy+0x24>)
 800aaca:	4806      	ldr	r0, [pc, #24]	; (800aae4 <tcp_output_segment_busy+0x28>)
 800aacc:	f001 fdc2 	bl	800c654 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800aad0:	6863      	ldr	r3, [r4, #4]
 800aad2:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 800aad4:	3801      	subs	r0, #1
 800aad6:	bf18      	it	ne
 800aad8:	2001      	movne	r0, #1
 800aada:	bd10      	pop	{r4, pc}
 800aadc:	080209e6 	.word	0x080209e6
 800aae0:	08020a5c 	.word	0x08020a5c
 800aae4:	0801e3d3 	.word	0x0801e3d3

0800aae8 <tcp_pbuf_prealloc>:
{
 800aae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aaec:	9d08      	ldr	r5, [sp, #32]
 800aaee:	4680      	mov	r8, r0
 800aaf0:	460c      	mov	r4, r1
 800aaf2:	4617      	mov	r7, r2
 800aaf4:	461e      	mov	r6, r3
 800aaf6:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800aafa:	b92d      	cbnz	r5, 800ab08 <tcp_pbuf_prealloc+0x20>
 800aafc:	4b1c      	ldr	r3, [pc, #112]	; (800ab70 <tcp_pbuf_prealloc+0x88>)
 800aafe:	22e9      	movs	r2, #233	; 0xe9
 800ab00:	491c      	ldr	r1, [pc, #112]	; (800ab74 <tcp_pbuf_prealloc+0x8c>)
 800ab02:	481d      	ldr	r0, [pc, #116]	; (800ab78 <tcp_pbuf_prealloc+0x90>)
 800ab04:	f001 fda6 	bl	800c654 <iprintf>
  if (length < max_length) {
 800ab08:	42bc      	cmp	r4, r7
 800ab0a:	d22e      	bcs.n	800ab6a <tcp_pbuf_prealloc+0x82>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800ab0c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800ab10:	079a      	lsls	r2, r3, #30
 800ab12:	d409      	bmi.n	800ab28 <tcp_pbuf_prealloc+0x40>
 800ab14:	8b6b      	ldrh	r3, [r5, #26]
 800ab16:	065b      	lsls	r3, r3, #25
 800ab18:	d427      	bmi.n	800ab6a <tcp_pbuf_prealloc+0x82>
        (!(pcb->flags & TF_NODELAY) &&
 800ab1a:	f1b9 0f00 	cmp.w	r9, #0
 800ab1e:	d003      	beq.n	800ab28 <tcp_pbuf_prealloc+0x40>
         (!first_seg ||
 800ab20:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 800ab22:	b90b      	cbnz	r3, 800ab28 <tcp_pbuf_prealloc+0x40>
          pcb->unsent != NULL ||
 800ab24:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800ab26:	b303      	cbz	r3, 800ab6a <tcp_pbuf_prealloc+0x82>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800ab28:	f204 55b7 	addw	r5, r4, #1463	; 0x5b7
 800ab2c:	f025 0103 	bic.w	r1, r5, #3
 800ab30:	42b9      	cmp	r1, r7
 800ab32:	460a      	mov	r2, r1
 800ab34:	bf28      	it	cs
 800ab36:	463a      	movcs	r2, r7
 800ab38:	b291      	uxth	r1, r2
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800ab3a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ab3e:	4640      	mov	r0, r8
 800ab40:	f7fd fd36 	bl	80085b0 <pbuf_alloc>
  if (p == NULL) {
 800ab44:	4605      	mov	r5, r0
 800ab46:	b168      	cbz	r0, 800ab64 <tcp_pbuf_prealloc+0x7c>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800ab48:	6803      	ldr	r3, [r0, #0]
 800ab4a:	b133      	cbz	r3, 800ab5a <tcp_pbuf_prealloc+0x72>
 800ab4c:	4b08      	ldr	r3, [pc, #32]	; (800ab70 <tcp_pbuf_prealloc+0x88>)
 800ab4e:	f240 120b 	movw	r2, #267	; 0x10b
 800ab52:	490a      	ldr	r1, [pc, #40]	; (800ab7c <tcp_pbuf_prealloc+0x94>)
 800ab54:	4808      	ldr	r0, [pc, #32]	; (800ab78 <tcp_pbuf_prealloc+0x90>)
 800ab56:	f001 fd7d 	bl	800c654 <iprintf>
  *oversize = p->len - length;
 800ab5a:	896b      	ldrh	r3, [r5, #10]
 800ab5c:	1b1b      	subs	r3, r3, r4
 800ab5e:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 800ab60:	812c      	strh	r4, [r5, #8]
 800ab62:	816c      	strh	r4, [r5, #10]
}
 800ab64:	4628      	mov	r0, r5
 800ab66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	e7e5      	b.n	800ab3a <tcp_pbuf_prealloc+0x52>
 800ab6e:	bf00      	nop
 800ab70:	080209e6 	.word	0x080209e6
 800ab74:	08020a81 	.word	0x08020a81
 800ab78:	0801e3d3 	.word	0x0801e3d3
 800ab7c:	08020aa0 	.word	0x08020aa0

0800ab80 <tcp_create_segment>:
{
 800ab80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab84:	460e      	mov	r6, r1
 800ab86:	4690      	mov	r8, r2
 800ab88:	4699      	mov	r9, r3
 800ab8a:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ab8e:	4607      	mov	r7, r0
 800ab90:	b928      	cbnz	r0, 800ab9e <tcp_create_segment+0x1e>
 800ab92:	4b2e      	ldr	r3, [pc, #184]	; (800ac4c <tcp_create_segment+0xcc>)
 800ab94:	22a3      	movs	r2, #163	; 0xa3
 800ab96:	492e      	ldr	r1, [pc, #184]	; (800ac50 <tcp_create_segment+0xd0>)
 800ab98:	482e      	ldr	r0, [pc, #184]	; (800ac54 <tcp_create_segment+0xd4>)
 800ab9a:	f001 fd5b 	bl	800c654 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ab9e:	b92e      	cbnz	r6, 800abac <tcp_create_segment+0x2c>
 800aba0:	4b2a      	ldr	r3, [pc, #168]	; (800ac4c <tcp_create_segment+0xcc>)
 800aba2:	22a4      	movs	r2, #164	; 0xa4
 800aba4:	492c      	ldr	r1, [pc, #176]	; (800ac58 <tcp_create_segment+0xd8>)
 800aba6:	482b      	ldr	r0, [pc, #172]	; (800ac54 <tcp_create_segment+0xd4>)
 800aba8:	f001 fd54 	bl	800c654 <iprintf>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800abac:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800abb0:	2003      	movs	r0, #3
 800abb2:	f7fd f9fb 	bl	8007fac <memp_malloc>
 800abb6:	4604      	mov	r4, r0
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800abb8:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800abbc:	b928      	cbnz	r0, 800abca <tcp_create_segment+0x4a>
    pbuf_free(p);
 800abbe:	4630      	mov	r0, r6
 800abc0:	f7fd fc8e 	bl	80084e0 <pbuf_free>
}
 800abc4:	4620      	mov	r0, r4
 800abc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 800abca:	2300      	movs	r3, #0
  seg->flags = optflags;
 800abcc:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800abd0:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800abd4:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800abd8:	8933      	ldrh	r3, [r6, #8]
 800abda:	42ab      	cmp	r3, r5
 800abdc:	d205      	bcs.n	800abea <tcp_create_segment+0x6a>
 800abde:	4b1b      	ldr	r3, [pc, #108]	; (800ac4c <tcp_create_segment+0xcc>)
 800abe0:	22b0      	movs	r2, #176	; 0xb0
 800abe2:	491e      	ldr	r1, [pc, #120]	; (800ac5c <tcp_create_segment+0xdc>)
 800abe4:	481b      	ldr	r0, [pc, #108]	; (800ac54 <tcp_create_segment+0xd4>)
 800abe6:	f001 fd35 	bl	800c654 <iprintf>
  seg->len = p->tot_len - optlen;
 800abea:	8933      	ldrh	r3, [r6, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800abec:	4630      	mov	r0, r6
 800abee:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800abf0:	eba3 030a 	sub.w	r3, r3, sl
 800abf4:	8123      	strh	r3, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 800abf6:	f7fd fc3b 	bl	8008470 <pbuf_add_header>
 800abfa:	4606      	mov	r6, r0
 800abfc:	b120      	cbz	r0, 800ac08 <tcp_create_segment+0x88>
    tcp_seg_free(seg);
 800abfe:	4620      	mov	r0, r4
    return NULL;
 800ac00:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800ac02:	f7fe f897 	bl	8008d34 <tcp_seg_free>
    return NULL;
 800ac06:	e7dd      	b.n	800abc4 <tcp_create_segment+0x44>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ac08:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ac0a:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ac0c:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ac0e:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ac12:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800ac14:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800ac18:	f7fc feae 	bl	8007978 <lwip_htons>
 800ac1c:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ac20:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 800ac24:	8b38      	ldrh	r0, [r7, #24]
 800ac26:	f7fc fea7 	bl	8007978 <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ac2a:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800ac2c:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800ac30:	4648      	mov	r0, r9
 800ac32:	f7fc fea4 	bl	800797e <lwip_htonl>
 800ac36:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ac38:	ea48 3005 	orr.w	r0, r8, r5, lsl #12
 800ac3c:	68e7      	ldr	r7, [r4, #12]
 800ac3e:	f7fc fe9b 	bl	8007978 <lwip_htons>
  seg->tcphdr->urgp = 0;
 800ac42:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800ac44:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 800ac46:	749e      	strb	r6, [r3, #18]
 800ac48:	74de      	strb	r6, [r3, #19]
  return seg;
 800ac4a:	e7bb      	b.n	800abc4 <tcp_create_segment+0x44>
 800ac4c:	080209e6 	.word	0x080209e6
 800ac50:	08020ab4 	.word	0x08020ab4
 800ac54:	0801e3d3 	.word	0x0801e3d3
 800ac58:	08020ad4 	.word	0x08020ad4
 800ac5c:	08020af5 	.word	0x08020af5

0800ac60 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ac60:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ac62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ac66:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ac68:	4606      	mov	r6, r0
 800ac6a:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ac6c:	2022      	movs	r0, #34	; 0x22
 800ac6e:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 800ac72:	4698      	mov	r8, r3
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800ac74:	f7fd fc9c 	bl	80085b0 <pbuf_alloc>
  if (p != NULL) {
 800ac78:	4605      	mov	r5, r0
 800ac7a:	b348      	cbz	r0, 800acd0 <tcp_output_alloc_header_common.constprop.0+0x70>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ac7c:	8943      	ldrh	r3, [r0, #10]
 800ac7e:	2b13      	cmp	r3, #19
 800ac80:	d806      	bhi.n	800ac90 <tcp_output_alloc_header_common.constprop.0+0x30>
 800ac82:	4b15      	ldr	r3, [pc, #84]	; (800acd8 <tcp_output_alloc_header_common.constprop.0+0x78>)
 800ac84:	f240 7223 	movw	r2, #1827	; 0x723
 800ac88:	4914      	ldr	r1, [pc, #80]	; (800acdc <tcp_output_alloc_header_common.constprop.0+0x7c>)
 800ac8a:	4815      	ldr	r0, [pc, #84]	; (800ace0 <tcp_output_alloc_header_common.constprop.0+0x80>)
 800ac8c:	f001 fce2 	bl	800c654 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800ac90:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 800ac92:	4640      	mov	r0, r8
 800ac94:	f7fc fe70 	bl	8007978 <lwip_htons>
 800ac98:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800ac9a:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 800ac9e:	f7fc fe6b 	bl	8007978 <lwip_htons>
    tcphdr->seqno = seqno_be;
 800aca2:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 800aca4:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 800aca6:	4630      	mov	r0, r6
 800aca8:	f7fc fe69 	bl	800797e <lwip_htonl>
 800acac:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800acae:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800acb2:	f440 40a0 	orr.w	r0, r0, #20480	; 0x5000
 800acb6:	f7fc fe5f 	bl	8007978 <lwip_htons>
 800acba:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800acbc:	f8bd 0020 	ldrh.w	r0, [sp, #32]
 800acc0:	f7fc fe5a 	bl	8007978 <lwip_htons>
    tcphdr->chksum = 0;
 800acc4:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 800acc6:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 800acc8:	7423      	strb	r3, [r4, #16]
 800acca:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800accc:	74a3      	strb	r3, [r4, #18]
 800acce:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 800acd0:	4628      	mov	r0, r5
 800acd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acd6:	bf00      	nop
 800acd8:	080209e6 	.word	0x080209e6
 800acdc:	08020b0a 	.word	0x08020b0a
 800ace0:	0801e3d3 	.word	0x0801e3d3

0800ace4 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 800ace4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ace6:	460d      	mov	r5, r1
 800ace8:	4616      	mov	r6, r2
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800acea:	4604      	mov	r4, r0
 800acec:	b930      	cbnz	r0, 800acfc <tcp_output_alloc_header.constprop.0+0x18>
 800acee:	4b0d      	ldr	r3, [pc, #52]	; (800ad24 <tcp_output_alloc_header.constprop.0+0x40>)
 800acf0:	f240 7242 	movw	r2, #1858	; 0x742
 800acf4:	490c      	ldr	r1, [pc, #48]	; (800ad28 <tcp_output_alloc_header.constprop.0+0x44>)
 800acf6:	480d      	ldr	r0, [pc, #52]	; (800ad2c <tcp_output_alloc_header.constprop.0+0x48>)
 800acf8:	f001 fcac 	bl	800c654 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800acfc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800acfe:	4632      	mov	r2, r6
 800ad00:	4629      	mov	r1, r5
 800ad02:	9302      	str	r3, [sp, #8]
 800ad04:	2310      	movs	r3, #16
 800ad06:	9301      	str	r3, [sp, #4]
 800ad08:	8b23      	ldrh	r3, [r4, #24]
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	8ae3      	ldrh	r3, [r4, #22]
 800ad0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ad10:	f7ff ffa6 	bl	800ac60 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800ad14:	b118      	cbz	r0, 800ad1e <tcp_output_alloc_header.constprop.0+0x3a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ad16:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800ad18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad1a:	4413      	add	r3, r2
 800ad1c:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 800ad1e:	b004      	add	sp, #16
 800ad20:	bd70      	pop	{r4, r5, r6, pc}
 800ad22:	bf00      	nop
 800ad24:	080209e6 	.word	0x080209e6
 800ad28:	08020b38 	.word	0x08020b38
 800ad2c:	0801e3d3 	.word	0x0801e3d3

0800ad30 <tcp_output_fill_options.isra.0.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800ad30:	b930      	cbnz	r0, 800ad40 <tcp_output_fill_options.isra.0.constprop.0+0x10>
 800ad32:	4b04      	ldr	r3, [pc, #16]	; (800ad44 <tcp_output_fill_options.isra.0.constprop.0+0x14>)
 800ad34:	f240 7256 	movw	r2, #1878	; 0x756
 800ad38:	4903      	ldr	r1, [pc, #12]	; (800ad48 <tcp_output_fill_options.isra.0.constprop.0+0x18>)
 800ad3a:	4804      	ldr	r0, [pc, #16]	; (800ad4c <tcp_output_fill_options.isra.0.constprop.0+0x1c>)
 800ad3c:	f001 bc8a 	b.w	800c654 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	080209e6 	.word	0x080209e6
 800ad48:	08020b5d 	.word	0x08020b5d
 800ad4c:	0801e3d3 	.word	0x0801e3d3

0800ad50 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800ad50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad52:	4604      	mov	r4, r0
 800ad54:	b085      	sub	sp, #20
 800ad56:	4617      	mov	r7, r2
 800ad58:	461e      	mov	r6, r3
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800ad5a:	460d      	mov	r5, r1
 800ad5c:	b931      	cbnz	r1, 800ad6c <tcp_output_control_segment+0x1c>
 800ad5e:	4b15      	ldr	r3, [pc, #84]	; (800adb4 <tcp_output_control_segment+0x64>)
 800ad60:	f240 7287 	movw	r2, #1927	; 0x787
 800ad64:	4914      	ldr	r1, [pc, #80]	; (800adb8 <tcp_output_control_segment+0x68>)
 800ad66:	4815      	ldr	r0, [pc, #84]	; (800adbc <tcp_output_control_segment+0x6c>)
 800ad68:	f001 fc74 	bl	800c654 <iprintf>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ad6c:	b164      	cbz	r4, 800ad88 <tcp_output_control_segment+0x38>
 800ad6e:	7a20      	ldrb	r0, [r4, #8]
 800ad70:	b150      	cbz	r0, 800ad88 <tcp_output_control_segment+0x38>
    return netif_get_by_index(pcb->netif_idx);
 800ad72:	f7fd fafb 	bl	800836c <netif_get_by_index>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 800ad76:	b968      	cbnz	r0, 800ad94 <tcp_output_control_segment+0x44>
    err = ERR_RTE;
 800ad78:	f06f 0403 	mvn.w	r4, #3
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	f7fd fbaf 	bl	80084e0 <pbuf_free>
  return err;
}
 800ad82:	4620      	mov	r0, r4
 800ad84:	b005      	add	sp, #20
 800ad86:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ip_route(src, dst);
 800ad88:	4630      	mov	r0, r6
 800ad8a:	f7fc f897 	bl	8006ebc <ip4_route>
  if (netif == NULL) {
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d0f2      	beq.n	800ad78 <tcp_output_control_segment+0x28>
    if (pcb != NULL) {
 800ad92:	b164      	cbz	r4, 800adae <tcp_output_control_segment+0x5e>
      ttl = pcb->ttl;
 800ad94:	7ae3      	ldrb	r3, [r4, #11]
      tos = pcb->tos;
 800ad96:	7aa4      	ldrb	r4, [r4, #10]
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800ad98:	2206      	movs	r2, #6
 800ad9a:	9002      	str	r0, [sp, #8]
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	4628      	mov	r0, r5
 800ada0:	e9cd 4200 	strd	r4, r2, [sp]
 800ada4:	4632      	mov	r2, r6
 800ada6:	f7fc f9e5 	bl	8007174 <ip4_output_if>
 800adaa:	4604      	mov	r4, r0
 800adac:	e7e6      	b.n	800ad7c <tcp_output_control_segment+0x2c>
      ttl = TCP_TTL;
 800adae:	23ff      	movs	r3, #255	; 0xff
 800adb0:	e7f2      	b.n	800ad98 <tcp_output_control_segment+0x48>
 800adb2:	bf00      	nop
 800adb4:	080209e6 	.word	0x080209e6
 800adb8:	08020b83 	.word	0x08020b83
 800adbc:	0801e3d3 	.word	0x0801e3d3

0800adc0 <tcp_write>:
{
 800adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	ed2d 8b02 	vpush	{d8}
 800adc8:	b08f      	sub	sp, #60	; 0x3c
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800adca:	4604      	mov	r4, r0
{
 800adcc:	9308      	str	r3, [sp, #32]
  u16_t oversize = 0;
 800adce:	2300      	movs	r3, #0
{
 800add0:	9107      	str	r1, [sp, #28]
 800add2:	9204      	str	r2, [sp, #16]
  u16_t oversize = 0;
 800add4:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800add8:	b968      	cbnz	r0, 800adf6 <tcp_write+0x36>
 800adda:	4bab      	ldr	r3, [pc, #684]	; (800b088 <tcp_write+0x2c8>)
 800addc:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800ade0:	49aa      	ldr	r1, [pc, #680]	; (800b08c <tcp_write+0x2cc>)
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ade2:	48ab      	ldr	r0, [pc, #684]	; (800b090 <tcp_write+0x2d0>)
 800ade4:	f001 fc36 	bl	800c654 <iprintf>
 800ade8:	f06f 000f 	mvn.w	r0, #15
}
 800adec:	b00f      	add	sp, #60	; 0x3c
 800adee:	ecbd 8b02 	vpop	{d8}
 800adf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800adf6:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800adfa:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 800adfc:	085b      	lsrs	r3, r3, #1
 800adfe:	4293      	cmp	r3, r2
 800ae00:	bf28      	it	cs
 800ae02:	4613      	movcs	r3, r2
  mss_local = mss_local ? mss_local : pcb->mss;
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	bf08      	it	eq
 800ae08:	4613      	moveq	r3, r2
 800ae0a:	9306      	str	r3, [sp, #24]
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800ae0c:	9b07      	ldr	r3, [sp, #28]
 800ae0e:	b923      	cbnz	r3, 800ae1a <tcp_write+0x5a>
 800ae10:	4b9d      	ldr	r3, [pc, #628]	; (800b088 <tcp_write+0x2c8>)
 800ae12:	f240 12ad 	movw	r2, #429	; 0x1ad
 800ae16:	499f      	ldr	r1, [pc, #636]	; (800b094 <tcp_write+0x2d4>)
 800ae18:	e7e3      	b.n	800ade2 <tcp_write+0x22>
  if ((pcb->state != ESTABLISHED) &&
 800ae1a:	7d03      	ldrb	r3, [r0, #20]
 800ae1c:	2b07      	cmp	r3, #7
 800ae1e:	d003      	beq.n	800ae28 <tcp_write+0x68>
      (pcb->state != CLOSE_WAIT) &&
 800ae20:	3b02      	subs	r3, #2
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	f200 825b 	bhi.w	800b2de <tcp_write+0x51e>
  } else if (len == 0) {
 800ae28:	9b04      	ldr	r3, [sp, #16]
 800ae2a:	b1db      	cbz	r3, 800ae64 <tcp_write+0xa4>
  if (len > pcb->snd_buf) {
 800ae2c:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800ae30:	9a04      	ldr	r2, [sp, #16]
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d206      	bcs.n	800ae44 <tcp_write+0x84>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ae36:	8b63      	ldrh	r3, [r4, #26]
 800ae38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae3c:	8363      	strh	r3, [r4, #26]
  return ERR_MEM;
 800ae3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae42:	e7d3      	b.n	800adec <tcp_write+0x2c>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ae44:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
 800ae48:	2a07      	cmp	r2, #7
 800ae4a:	d8f4      	bhi.n	800ae36 <tcp_write+0x76>
  if (pcb->snd_queuelen != 0) {
 800ae4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ae4e:	b302      	cbz	r2, 800ae92 <tcp_write+0xd2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ae50:	b943      	cbnz	r3, 800ae64 <tcp_write+0xa4>
 800ae52:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ae54:	b933      	cbnz	r3, 800ae64 <tcp_write+0xa4>
 800ae56:	4b8c      	ldr	r3, [pc, #560]	; (800b088 <tcp_write+0x2c8>)
 800ae58:	f240 1255 	movw	r2, #341	; 0x155
 800ae5c:	498e      	ldr	r1, [pc, #568]	; (800b098 <tcp_write+0x2d8>)
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ae5e:	488c      	ldr	r0, [pc, #560]	; (800b090 <tcp_write+0x2d0>)
 800ae60:	f001 fbf8 	bl	800c654 <iprintf>
  queuelen = pcb->snd_queuelen;
 800ae64:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
  if (pcb->unsent != NULL) {
 800ae68:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  queuelen = pcb->snd_queuelen;
 800ae6a:	9305      	str	r3, [sp, #20]
  if (pcb->unsent != NULL) {
 800ae6c:	b9de      	cbnz	r6, 800aea6 <tcp_write+0xe6>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ae6e:	f8b4 7068 	ldrh.w	r7, [r4, #104]	; 0x68
 800ae72:	2f00      	cmp	r7, #0
 800ae74:	f000 81bc 	beq.w	800b1f0 <tcp_write+0x430>
 800ae78:	4b83      	ldr	r3, [pc, #524]	; (800b088 <tcp_write+0x2c8>)
 800ae7a:	f240 224a 	movw	r2, #586	; 0x24a
 800ae7e:	4987      	ldr	r1, [pc, #540]	; (800b09c <tcp_write+0x2dc>)
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ae80:	46b0      	mov	r8, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ae82:	4883      	ldr	r0, [pc, #524]	; (800b090 <tcp_write+0x2d0>)
  struct pbuf *concat_p = NULL;
 800ae84:	46b2      	mov	sl, r6
  u16_t extendlen = 0;
 800ae86:	46b1      	mov	r9, r6
  u16_t oversize_used = 0;
 800ae88:	4635      	mov	r5, r6
  u16_t pos = 0; /* position in 'arg' data */
 800ae8a:	4637      	mov	r7, r6
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800ae8c:	f001 fbe2 	bl	800c654 <iprintf>
 800ae90:	e089      	b.n	800afa6 <tcp_write+0x1e6>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ae92:	b913      	cbnz	r3, 800ae9a <tcp_write+0xda>
 800ae94:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d0e4      	beq.n	800ae64 <tcp_write+0xa4>
 800ae9a:	4b7b      	ldr	r3, [pc, #492]	; (800b088 <tcp_write+0x2c8>)
 800ae9c:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800aea0:	497f      	ldr	r1, [pc, #508]	; (800b0a0 <tcp_write+0x2e0>)
 800aea2:	e7dc      	b.n	800ae5e <tcp_write+0x9e>
 800aea4:	4656      	mov	r6, sl
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aea6:	f8d6 a000 	ldr.w	sl, [r6]
 800aeaa:	46b0      	mov	r8, r6
 800aeac:	f1ba 0f00 	cmp.w	sl, #0
 800aeb0:	d1f8      	bne.n	800aea4 <tcp_write+0xe4>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800aeb2:	7ab5      	ldrb	r5, [r6, #10]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800aeb4:	8933      	ldrh	r3, [r6, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800aeb6:	00ad      	lsls	r5, r5, #2
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800aeb8:	9a06      	ldr	r2, [sp, #24]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800aeba:	f005 0504 	and.w	r5, r5, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800aebe:	442b      	add	r3, r5
 800aec0:	429a      	cmp	r2, r3
 800aec2:	da06      	bge.n	800aed2 <tcp_write+0x112>
 800aec4:	4b70      	ldr	r3, [pc, #448]	; (800b088 <tcp_write+0x2c8>)
 800aec6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800aeca:	4976      	ldr	r1, [pc, #472]	; (800b0a4 <tcp_write+0x2e4>)
 800aecc:	4870      	ldr	r0, [pc, #448]	; (800b090 <tcp_write+0x2d0>)
 800aece:	f001 fbc1 	bl	800c654 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800aed2:	8937      	ldrh	r7, [r6, #8]
 800aed4:	9b06      	ldr	r3, [sp, #24]
 800aed6:	1bdf      	subs	r7, r3, r7
 800aed8:	1b7f      	subs	r7, r7, r5
    oversize = pcb->unsent_oversize;
 800aeda:	f8b4 5068 	ldrh.w	r5, [r4, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 800aede:	b2bf      	uxth	r7, r7
    oversize = pcb->unsent_oversize;
 800aee0:	f8ad 5036 	strh.w	r5, [sp, #54]	; 0x36
    if (oversize > 0) {
 800aee4:	2d00      	cmp	r5, #0
 800aee6:	d067      	beq.n	800afb8 <tcp_write+0x1f8>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800aee8:	42bd      	cmp	r5, r7
 800aeea:	d906      	bls.n	800aefa <tcp_write+0x13a>
 800aeec:	4b66      	ldr	r3, [pc, #408]	; (800b088 <tcp_write+0x2c8>)
 800aeee:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800aef2:	496d      	ldr	r1, [pc, #436]	; (800b0a8 <tcp_write+0x2e8>)
 800aef4:	4866      	ldr	r0, [pc, #408]	; (800b090 <tcp_write+0x2d0>)
 800aef6:	f001 fbad 	bl	800c654 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800aefa:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800aefe:	9a04      	ldr	r2, [sp, #16]
 800af00:	429a      	cmp	r2, r3
 800af02:	bf28      	it	cs
 800af04:	461a      	movcs	r2, r3
 800af06:	42ba      	cmp	r2, r7
 800af08:	4615      	mov	r5, r2
 800af0a:	bf28      	it	cs
 800af0c:	463d      	movcs	r5, r7
      oversize -= oversize_used;
 800af0e:	1b5b      	subs	r3, r3, r5
      space -= oversize_used;
 800af10:	1b7f      	subs	r7, r7, r5
      oversize -= oversize_used;
 800af12:	b29b      	uxth	r3, r3
      space -= oversize_used;
 800af14:	b2bf      	uxth	r7, r7
      oversize -= oversize_used;
 800af16:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800af1a:	b153      	cbz	r3, 800af32 <tcp_write+0x172>
 800af1c:	9b04      	ldr	r3, [sp, #16]
 800af1e:	42ab      	cmp	r3, r5
 800af20:	f000 816b 	beq.w	800b1fa <tcp_write+0x43a>
 800af24:	4b58      	ldr	r3, [pc, #352]	; (800b088 <tcp_write+0x2c8>)
 800af26:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af2a:	4960      	ldr	r1, [pc, #384]	; (800b0ac <tcp_write+0x2ec>)
 800af2c:	4858      	ldr	r0, [pc, #352]	; (800b090 <tcp_write+0x2d0>)
 800af2e:	f001 fb91 	bl	800c654 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800af32:	9b04      	ldr	r3, [sp, #16]
 800af34:	429d      	cmp	r5, r3
 800af36:	f080 8160 	bcs.w	800b1fa <tcp_write+0x43a>
 800af3a:	2f00      	cmp	r7, #0
 800af3c:	f000 8155 	beq.w	800b1ea <tcp_write+0x42a>
 800af40:	f8b8 9008 	ldrh.w	r9, [r8, #8]
 800af44:	f1b9 0f00 	cmp.w	r9, #0
 800af48:	f000 8150 	beq.w	800b1ec <tcp_write+0x42c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800af4c:	eba3 0905 	sub.w	r9, r3, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800af50:	9b08      	ldr	r3, [sp, #32]
      u16_t seglen = LWIP_MIN(space, len - pos);
 800af52:	45b9      	cmp	r9, r7
 800af54:	bfa8      	it	ge
 800af56:	46b9      	movge	r9, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800af58:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 800af5a:	fa1f f689 	uxth.w	r6, r9
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800af5e:	d52d      	bpl.n	800afbc <tcp_write+0x1fc>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800af60:	2301      	movs	r3, #1
 800af62:	463a      	mov	r2, r7
 800af64:	4631      	mov	r1, r6
 800af66:	2000      	movs	r0, #0
 800af68:	9302      	str	r3, [sp, #8]
 800af6a:	9b08      	ldr	r3, [sp, #32]
 800af6c:	e9cd 4300 	strd	r4, r3, [sp]
 800af70:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800af74:	f7ff fdb8 	bl	800aae8 <tcp_pbuf_prealloc>
 800af78:	4683      	mov	fp, r0
 800af7a:	2800      	cmp	r0, #0
 800af7c:	f000 81ac 	beq.w	800b2d8 <tcp_write+0x518>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800af80:	9b07      	ldr	r3, [sp, #28]
 800af82:	4632      	mov	r2, r6
 800af84:	6840      	ldr	r0, [r0, #4]
 800af86:	1959      	adds	r1, r3, r5
 800af88:	f001 fb34 	bl	800c5f4 <memcpy>
        queuelen += pbuf_clen(concat_p);
 800af8c:	4658      	mov	r0, fp
          queuelen += pbuf_clen(concat_p);
 800af8e:	f7fd fbe1 	bl	8008754 <pbuf_clen>
 800af92:	9b05      	ldr	r3, [sp, #20]
  u16_t extendlen = 0;
 800af94:	f04f 0900 	mov.w	r9, #0
          queuelen += pbuf_clen(concat_p);
 800af98:	4403      	add	r3, r0
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	9305      	str	r3, [sp, #20]
      pos += seglen;
 800af9e:	19af      	adds	r7, r5, r6
 800afa0:	46da      	mov	sl, fp
 800afa2:	4646      	mov	r6, r8
 800afa4:	b2bf      	uxth	r7, r7
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800afa6:	9b08      	ldr	r3, [sp, #32]
  struct pbuf *concat_p = NULL;
 800afa8:	f04f 0b00 	mov.w	fp, #0
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800afac:	f003 0301 	and.w	r3, r3, #1
  struct pbuf *concat_p = NULL;
 800afb0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800afb4:	930a      	str	r3, [sp, #40]	; 0x28
 800afb6:	e0e7      	b.n	800b188 <tcp_write+0x3c8>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800afb8:	462e      	mov	r6, r5
 800afba:	e7ba      	b.n	800af32 <tcp_write+0x172>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800afbc:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800afc0:	465a      	mov	r2, fp
 800afc2:	f8db b000 	ldr.w	fp, [fp]
 800afc6:	f1bb 0f00 	cmp.w	fp, #0
 800afca:	d1f9      	bne.n	800afc0 <tcp_write+0x200>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800afcc:	7b13      	ldrb	r3, [r2, #12]
 800afce:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 800afd2:	d10f      	bne.n	800aff4 <tcp_write+0x234>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800afd4:	8951      	ldrh	r1, [r2, #10]
 800afd6:	6853      	ldr	r3, [r2, #4]
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800afd8:	9a07      	ldr	r2, [sp, #28]
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800afda:	440b      	add	r3, r1
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800afdc:	429a      	cmp	r2, r3
 800afde:	d109      	bne.n	800aff4 <tcp_write+0x234>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800afe0:	b135      	cbz	r5, 800aff0 <tcp_write+0x230>
 800afe2:	4b29      	ldr	r3, [pc, #164]	; (800b088 <tcp_write+0x2c8>)
 800afe4:	f240 2231 	movw	r2, #561	; 0x231
 800afe8:	4931      	ldr	r1, [pc, #196]	; (800b0b0 <tcp_write+0x2f0>)
 800afea:	4829      	ldr	r0, [pc, #164]	; (800b090 <tcp_write+0x2d0>)
 800afec:	f001 fb32 	bl	800c654 <iprintf>
          extendlen = seglen;
 800aff0:	46b1      	mov	r9, r6
 800aff2:	e7d4      	b.n	800af9e <tcp_write+0x1de>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800aff4:	2201      	movs	r2, #1
 800aff6:	4631      	mov	r1, r6
 800aff8:	2000      	movs	r0, #0
 800affa:	f7fd fad9 	bl	80085b0 <pbuf_alloc>
 800affe:	4683      	mov	fp, r0
 800b000:	2800      	cmp	r0, #0
 800b002:	f000 8169 	beq.w	800b2d8 <tcp_write+0x518>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800b006:	9b07      	ldr	r3, [sp, #28]
 800b008:	442b      	add	r3, r5
 800b00a:	6043      	str	r3, [r0, #4]
 800b00c:	e7bf      	b.n	800af8e <tcp_write+0x1ce>
    u16_t left = len - pos;
 800b00e:	9b04      	ldr	r3, [sp, #16]
    u16_t seglen = LWIP_MIN(left, max_len);
 800b010:	9a06      	ldr	r2, [sp, #24]
    u16_t left = len - pos;
 800b012:	1bdb      	subs	r3, r3, r7
    u16_t seglen = LWIP_MIN(left, max_len);
 800b014:	b29b      	uxth	r3, r3
 800b016:	4293      	cmp	r3, r2
 800b018:	bf28      	it	cs
 800b01a:	4613      	movcs	r3, r2
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	ee08 3a10 	vmov	s16, r3
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800b022:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b024:	2b00      	cmp	r3, #0
 800b026:	d047      	beq.n	800b0b8 <tcp_write+0x2f8>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800b028:	fabb f38b 	clz	r3, fp
 800b02c:	ee18 1a10 	vmov	r1, s16
 800b030:	2036      	movs	r0, #54	; 0x36
 800b032:	095b      	lsrs	r3, r3, #5
 800b034:	9302      	str	r3, [sp, #8]
 800b036:	9b08      	ldr	r3, [sp, #32]
 800b038:	e9cd 4300 	strd	r4, r3, [sp]
 800b03c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
 800b040:	f7ff fd52 	bl	800aae8 <tcp_pbuf_prealloc>
 800b044:	4606      	mov	r6, r0
 800b046:	2800      	cmp	r0, #0
 800b048:	d057      	beq.n	800b0fa <tcp_write+0x33a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800b04a:	8943      	ldrh	r3, [r0, #10]
 800b04c:	ee18 2a10 	vmov	r2, s16
 800b050:	4293      	cmp	r3, r2
 800b052:	d206      	bcs.n	800b062 <tcp_write+0x2a2>
 800b054:	4b0c      	ldr	r3, [pc, #48]	; (800b088 <tcp_write+0x2c8>)
 800b056:	f240 2266 	movw	r2, #614	; 0x266
 800b05a:	4916      	ldr	r1, [pc, #88]	; (800b0b4 <tcp_write+0x2f4>)
 800b05c:	480c      	ldr	r0, [pc, #48]	; (800b090 <tcp_write+0x2d0>)
 800b05e:	f001 faf9 	bl	800c654 <iprintf>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800b062:	9b07      	ldr	r3, [sp, #28]
 800b064:	ee18 2a10 	vmov	r2, s16
 800b068:	6870      	ldr	r0, [r6, #4]
 800b06a:	19d9      	adds	r1, r3, r7
 800b06c:	f001 fac2 	bl	800c5f4 <memcpy>
    queuelen += pbuf_clen(p);
 800b070:	4630      	mov	r0, r6
 800b072:	f7fd fb6f 	bl	8008754 <pbuf_clen>
 800b076:	9b05      	ldr	r3, [sp, #20]
 800b078:	4403      	add	r3, r0
 800b07a:	b29b      	uxth	r3, r3
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b07c:	2b08      	cmp	r3, #8
    queuelen += pbuf_clen(p);
 800b07e:	9305      	str	r3, [sp, #20]
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800b080:	d964      	bls.n	800b14c <tcp_write+0x38c>
      pbuf_free(p);
 800b082:	4630      	mov	r0, r6
 800b084:	e037      	b.n	800b0f6 <tcp_write+0x336>
 800b086:	bf00      	nop
 800b088:	080209e6 	.word	0x080209e6
 800b08c:	08020bac 	.word	0x08020bac
 800b090:	0801e3d3 	.word	0x0801e3d3
 800b094:	08020bc3 	.word	0x08020bc3
 800b098:	08020bf4 	.word	0x08020bf4
 800b09c:	08020cde 	.word	0x08020cde
 800b0a0:	08020c2e 	.word	0x08020c2e
 800b0a4:	08020c60 	.word	0x08020c60
 800b0a8:	08020c77 	.word	0x08020c77
 800b0ac:	08020c97 	.word	0x08020c97
 800b0b0:	08020cb5 	.word	0x08020cb5
 800b0b4:	08020d0d 	.word	0x08020d0d
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800b0b8:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800b0bc:	b133      	cbz	r3, 800b0cc <tcp_write+0x30c>
 800b0be:	4b89      	ldr	r3, [pc, #548]	; (800b2e4 <tcp_write+0x524>)
 800b0c0:	f240 2271 	movw	r2, #625	; 0x271
 800b0c4:	4988      	ldr	r1, [pc, #544]	; (800b2e8 <tcp_write+0x528>)
 800b0c6:	4889      	ldr	r0, [pc, #548]	; (800b2ec <tcp_write+0x52c>)
 800b0c8:	f001 fac4 	bl	800c654 <iprintf>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	ee18 1a10 	vmov	r1, s16
 800b0d2:	2036      	movs	r0, #54	; 0x36
 800b0d4:	f7fd fa6c 	bl	80085b0 <pbuf_alloc>
 800b0d8:	b178      	cbz	r0, 800b0fa <tcp_write+0x33a>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b0da:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b0dc:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800b0de:	900b      	str	r0, [sp, #44]	; 0x2c
 800b0e0:	443a      	add	r2, r7
 800b0e2:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b0e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b0e8:	2036      	movs	r0, #54	; 0x36
 800b0ea:	f7fd fa61 	bl	80085b0 <pbuf_alloc>
 800b0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f0:	4606      	mov	r6, r0
 800b0f2:	bb38      	cbnz	r0, 800b144 <tcp_write+0x384>
        pbuf_free(p2);
 800b0f4:	4618      	mov	r0, r3
      pbuf_free(p);
 800b0f6:	f7fd f9f3 	bl	80084e0 <pbuf_free>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b0fa:	8b63      	ldrh	r3, [r4, #26]
 800b0fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b100:	8363      	strh	r3, [r4, #26]
  if (concat_p != NULL) {
 800b102:	f1ba 0f00 	cmp.w	sl, #0
 800b106:	d002      	beq.n	800b10e <tcp_write+0x34e>
    pbuf_free(concat_p);
 800b108:	4650      	mov	r0, sl
 800b10a:	f7fd f9e9 	bl	80084e0 <pbuf_free>
  if (queue != NULL) {
 800b10e:	f1bb 0f00 	cmp.w	fp, #0
 800b112:	d002      	beq.n	800b11a <tcp_write+0x35a>
    tcp_segs_free(queue);
 800b114:	4658      	mov	r0, fp
 800b116:	f7fd fe1b 	bl	8008d50 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 800b11a:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b11e:	2b00      	cmp	r3, #0
 800b120:	f43f ae8d 	beq.w	800ae3e <tcp_write+0x7e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800b124:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b126:	2b00      	cmp	r3, #0
 800b128:	f47f ae89 	bne.w	800ae3e <tcp_write+0x7e>
 800b12c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b12e:	2b00      	cmp	r3, #0
 800b130:	f47f ae85 	bne.w	800ae3e <tcp_write+0x7e>
 800b134:	4b6b      	ldr	r3, [pc, #428]	; (800b2e4 <tcp_write+0x524>)
 800b136:	f240 3227 	movw	r2, #807	; 0x327
 800b13a:	496d      	ldr	r1, [pc, #436]	; (800b2f0 <tcp_write+0x530>)
 800b13c:	486b      	ldr	r0, [pc, #428]	; (800b2ec <tcp_write+0x52c>)
 800b13e:	f001 fa89 	bl	800c654 <iprintf>
 800b142:	e67c      	b.n	800ae3e <tcp_write+0x7e>
      pbuf_cat(p/*header*/, p2/*data*/);
 800b144:	4619      	mov	r1, r3
 800b146:	f7fd fb29 	bl	800879c <pbuf_cat>
 800b14a:	e791      	b.n	800b070 <tcp_write+0x2b0>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800b14c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b14e:	2200      	movs	r2, #0
 800b150:	4631      	mov	r1, r6
 800b152:	4620      	mov	r0, r4
 800b154:	443b      	add	r3, r7
 800b156:	9200      	str	r2, [sp, #0]
 800b158:	f7ff fd12 	bl	800ab80 <tcp_create_segment>
 800b15c:	4606      	mov	r6, r0
 800b15e:	2800      	cmp	r0, #0
 800b160:	d0cb      	beq.n	800b0fa <tcp_write+0x33a>
    if (queue == NULL) {
 800b162:	f1bb 0f00 	cmp.w	fp, #0
 800b166:	d03e      	beq.n	800b1e6 <tcp_write+0x426>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800b168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b16a:	b933      	cbnz	r3, 800b17a <tcp_write+0x3ba>
 800b16c:	4b5d      	ldr	r3, [pc, #372]	; (800b2e4 <tcp_write+0x524>)
 800b16e:	f240 22ab 	movw	r2, #683	; 0x2ab
 800b172:	4960      	ldr	r1, [pc, #384]	; (800b2f4 <tcp_write+0x534>)
 800b174:	485d      	ldr	r0, [pc, #372]	; (800b2ec <tcp_write+0x52c>)
 800b176:	f001 fa6d 	bl	800c654 <iprintf>
      prev_seg->next = seg;
 800b17a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b17c:	601e      	str	r6, [r3, #0]
    pos += seglen;
 800b17e:	ee18 3a10 	vmov	r3, s16
 800b182:	9609      	str	r6, [sp, #36]	; 0x24
 800b184:	441f      	add	r7, r3
 800b186:	b2bf      	uxth	r7, r7
  while (pos < len) {
 800b188:	9b04      	ldr	r3, [sp, #16]
 800b18a:	429f      	cmp	r7, r3
 800b18c:	f4ff af3f 	bcc.w	800b00e <tcp_write+0x24e>
 800b190:	4657      	mov	r7, sl
 800b192:	46da      	mov	sl, fp
  if (oversize_used > 0) {
 800b194:	b14d      	cbz	r5, 800b1aa <tcp_write+0x3ea>
    for (p = last_unsent->p; p; p = p->next) {
 800b196:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800b19a:	f1bb 0f00 	cmp.w	fp, #0
 800b19e:	d12f      	bne.n	800b200 <tcp_write+0x440>
    last_unsent->len += oversize_used;
 800b1a0:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b1a4:	441d      	add	r5, r3
 800b1a6:	f8a8 5008 	strh.w	r5, [r8, #8]
  pcb->unsent_oversize = oversize;
 800b1aa:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 800b1ae:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (concat_p != NULL) {
 800b1b2:	2f00      	cmp	r7, #0
 800b1b4:	d03d      	beq.n	800b232 <tcp_write+0x472>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800b1b6:	f1b8 0f00 	cmp.w	r8, #0
 800b1ba:	d106      	bne.n	800b1ca <tcp_write+0x40a>
 800b1bc:	4b49      	ldr	r3, [pc, #292]	; (800b2e4 <tcp_write+0x524>)
 800b1be:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800b1c2:	494d      	ldr	r1, [pc, #308]	; (800b2f8 <tcp_write+0x538>)
 800b1c4:	4849      	ldr	r0, [pc, #292]	; (800b2ec <tcp_write+0x52c>)
 800b1c6:	f001 fa45 	bl	800c654 <iprintf>
    pbuf_cat(last_unsent->p, concat_p);
 800b1ca:	4639      	mov	r1, r7
 800b1cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b1d0:	f7fd fae4 	bl	800879c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800b1d4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b1d8:	893a      	ldrh	r2, [r7, #8]
 800b1da:	4413      	add	r3, r2
 800b1dc:	f8a8 3008 	strh.w	r3, [r8, #8]
    last_unsent->next = queue;
 800b1e0:	f8c8 a000 	str.w	sl, [r8]
 800b1e4:	e04d      	b.n	800b282 <tcp_write+0x4c2>
 800b1e6:	4683      	mov	fp, r0
 800b1e8:	e7c9      	b.n	800b17e <tcp_write+0x3be>
  u16_t extendlen = 0;
 800b1ea:	46b9      	mov	r9, r7
 800b1ec:	462f      	mov	r7, r5
 800b1ee:	e6da      	b.n	800afa6 <tcp_write+0x1e6>
 800b1f0:	46b9      	mov	r9, r7
  u16_t oversize_used = 0;
 800b1f2:	463d      	mov	r5, r7
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b1f4:	46b8      	mov	r8, r7
  struct pbuf *concat_p = NULL;
 800b1f6:	46ba      	mov	sl, r7
 800b1f8:	e6d5      	b.n	800afa6 <tcp_write+0x1e6>
 800b1fa:	2700      	movs	r7, #0
  u16_t extendlen = 0;
 800b1fc:	46b9      	mov	r9, r7
 800b1fe:	e7c9      	b.n	800b194 <tcp_write+0x3d4>
      p->tot_len += oversize_used;
 800b200:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 800b204:	442b      	add	r3, r5
 800b206:	f8ab 3008 	strh.w	r3, [fp, #8]
      if (p->next == NULL) {
 800b20a:	f8db 3000 	ldr.w	r3, [fp]
 800b20e:	b96b      	cbnz	r3, 800b22c <tcp_write+0x46c>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800b210:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b214:	462a      	mov	r2, r5
 800b216:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 800b21a:	9907      	ldr	r1, [sp, #28]
 800b21c:	4418      	add	r0, r3
 800b21e:	f001 f9e9 	bl	800c5f4 <memcpy>
        p->len += oversize_used;
 800b222:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 800b226:	442b      	add	r3, r5
 800b228:	f8ab 300a 	strh.w	r3, [fp, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800b22c:	f8db b000 	ldr.w	fp, [fp]
 800b230:	e7b3      	b.n	800b19a <tcp_write+0x3da>
  } else if (extendlen > 0) {
 800b232:	f1b9 0f00 	cmp.w	r9, #0
 800b236:	d01f      	beq.n	800b278 <tcp_write+0x4b8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800b238:	f1b8 0f00 	cmp.w	r8, #0
 800b23c:	d002      	beq.n	800b244 <tcp_write+0x484>
 800b23e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b242:	b933      	cbnz	r3, 800b252 <tcp_write+0x492>
 800b244:	4b27      	ldr	r3, [pc, #156]	; (800b2e4 <tcp_write+0x524>)
 800b246:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b24a:	492c      	ldr	r1, [pc, #176]	; (800b2fc <tcp_write+0x53c>)
 800b24c:	4827      	ldr	r0, [pc, #156]	; (800b2ec <tcp_write+0x52c>)
 800b24e:	f001 fa01 	bl	800c654 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b252:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b256:	891a      	ldrh	r2, [r3, #8]
 800b258:	6819      	ldr	r1, [r3, #0]
 800b25a:	444a      	add	r2, r9
 800b25c:	b292      	uxth	r2, r2
      p->tot_len += extendlen;
 800b25e:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800b260:	b941      	cbnz	r1, 800b274 <tcp_write+0x4b4>
    p->len += extendlen;
 800b262:	895a      	ldrh	r2, [r3, #10]
 800b264:	444a      	add	r2, r9
 800b266:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800b268:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800b26c:	4499      	add	r9, r3
 800b26e:	f8a8 9008 	strh.w	r9, [r8, #8]
 800b272:	e7b5      	b.n	800b1e0 <tcp_write+0x420>
      p->tot_len += extendlen;
 800b274:	460b      	mov	r3, r1
 800b276:	e7ee      	b.n	800b256 <tcp_write+0x496>
  if (last_unsent == NULL) {
 800b278:	f1b8 0f00 	cmp.w	r8, #0
 800b27c:	d1b0      	bne.n	800b1e0 <tcp_write+0x420>
    pcb->unsent = queue;
 800b27e:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
  pcb->snd_lbb += len;
 800b282:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b284:	9a04      	ldr	r2, [sp, #16]
 800b286:	4413      	add	r3, r2
  pcb->snd_buf -= len;
 800b288:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
  pcb->snd_lbb += len;
 800b28c:	65e3      	str	r3, [r4, #92]	; 0x5c
  pcb->snd_buf -= len;
 800b28e:	9b04      	ldr	r3, [sp, #16]
 800b290:	1ad2      	subs	r2, r2, r3
  pcb->snd_queuelen = queuelen;
 800b292:	9b05      	ldr	r3, [sp, #20]
  pcb->snd_buf -= len;
 800b294:	f8a4 2064 	strh.w	r2, [r4, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800b298:	f8a4 3066 	strh.w	r3, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800b29c:	b153      	cbz	r3, 800b2b4 <tcp_write+0x4f4>
    LWIP_ASSERT("tcp_write: valid queue length",
 800b29e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b2a0:	b943      	cbnz	r3, 800b2b4 <tcp_write+0x4f4>
 800b2a2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b2a4:	b933      	cbnz	r3, 800b2b4 <tcp_write+0x4f4>
 800b2a6:	4b0f      	ldr	r3, [pc, #60]	; (800b2e4 <tcp_write+0x524>)
 800b2a8:	f240 3212 	movw	r2, #786	; 0x312
 800b2ac:	4910      	ldr	r1, [pc, #64]	; (800b2f0 <tcp_write+0x530>)
 800b2ae:	480f      	ldr	r0, [pc, #60]	; (800b2ec <tcp_write+0x52c>)
 800b2b0:	f001 f9d0 	bl	800c654 <iprintf>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800b2b4:	b176      	cbz	r6, 800b2d4 <tcp_write+0x514>
 800b2b6:	68f0      	ldr	r0, [r6, #12]
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	f43f ad97 	beq.w	800adec <tcp_write+0x2c>
 800b2be:	9b08      	ldr	r3, [sp, #32]
 800b2c0:	f013 0402 	ands.w	r4, r3, #2
 800b2c4:	d106      	bne.n	800b2d4 <tcp_write+0x514>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800b2c6:	8985      	ldrh	r5, [r0, #12]
 800b2c8:	2008      	movs	r0, #8
 800b2ca:	f7fc fb55 	bl	8007978 <lwip_htons>
 800b2ce:	68f3      	ldr	r3, [r6, #12]
 800b2d0:	4328      	orrs	r0, r5
 800b2d2:	8198      	strh	r0, [r3, #12]
  return ERR_OK;
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	e589      	b.n	800adec <tcp_write+0x2c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800b2d8:	f04f 0b00 	mov.w	fp, #0
 800b2dc:	e70d      	b.n	800b0fa <tcp_write+0x33a>
    return ERR_CONN;
 800b2de:	f06f 000a 	mvn.w	r0, #10
 800b2e2:	e583      	b.n	800adec <tcp_write+0x2c>
 800b2e4:	080209e6 	.word	0x080209e6
 800b2e8:	08020d4b 	.word	0x08020d4b
 800b2ec:	0801e3d3 	.word	0x0801e3d3
 800b2f0:	08020dd7 	.word	0x08020dd7
 800b2f4:	08020d59 	.word	0x08020d59
 800b2f8:	08020d6a 	.word	0x08020d6a
 800b2fc:	08020da2 	.word	0x08020da2

0800b300 <tcp_split_unsent_seg>:
{
 800b300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b304:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800b306:	4606      	mov	r6, r0
 800b308:	b930      	cbnz	r0, 800b318 <tcp_split_unsent_seg+0x18>
 800b30a:	4b5d      	ldr	r3, [pc, #372]	; (800b480 <tcp_split_unsent_seg+0x180>)
 800b30c:	f240 324b 	movw	r2, #843	; 0x34b
 800b310:	495c      	ldr	r1, [pc, #368]	; (800b484 <tcp_split_unsent_seg+0x184>)
 800b312:	485d      	ldr	r0, [pc, #372]	; (800b488 <tcp_split_unsent_seg+0x188>)
 800b314:	f001 f99e 	bl	800c654 <iprintf>
  useg = pcb->unsent;
 800b318:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
  if (useg == NULL) {
 800b31a:	b914      	cbnz	r4, 800b322 <tcp_split_unsent_seg+0x22>
  return ERR_MEM;
 800b31c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b320:	e009      	b.n	800b336 <tcp_split_unsent_seg+0x36>
  if (split == 0) {
 800b322:	b95d      	cbnz	r5, 800b33c <tcp_split_unsent_seg+0x3c>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800b324:	4b56      	ldr	r3, [pc, #344]	; (800b480 <tcp_split_unsent_seg+0x180>)
 800b326:	f240 3253 	movw	r2, #851	; 0x353
 800b32a:	4958      	ldr	r1, [pc, #352]	; (800b48c <tcp_split_unsent_seg+0x18c>)
 800b32c:	4856      	ldr	r0, [pc, #344]	; (800b488 <tcp_split_unsent_seg+0x188>)
 800b32e:	f001 f991 	bl	800c654 <iprintf>
    return ERR_VAL;
 800b332:	f06f 0005 	mvn.w	r0, #5
}
 800b336:	b003      	add	sp, #12
 800b338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (useg->len <= split) {
 800b33c:	8923      	ldrh	r3, [r4, #8]
 800b33e:	42ab      	cmp	r3, r5
 800b340:	d801      	bhi.n	800b346 <tcp_split_unsent_seg+0x46>
    return ERR_OK;
 800b342:	2000      	movs	r0, #0
 800b344:	e7f7      	b.n	800b336 <tcp_split_unsent_seg+0x36>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800b346:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 800b348:	42ab      	cmp	r3, r5
 800b34a:	d206      	bcs.n	800b35a <tcp_split_unsent_seg+0x5a>
 800b34c:	4b4c      	ldr	r3, [pc, #304]	; (800b480 <tcp_split_unsent_seg+0x180>)
 800b34e:	f240 325b 	movw	r2, #859	; 0x35b
 800b352:	494f      	ldr	r1, [pc, #316]	; (800b490 <tcp_split_unsent_seg+0x190>)
 800b354:	484c      	ldr	r0, [pc, #304]	; (800b488 <tcp_split_unsent_seg+0x188>)
 800b356:	f001 f97d 	bl	800c654 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800b35a:	8923      	ldrh	r3, [r4, #8]
 800b35c:	b933      	cbnz	r3, 800b36c <tcp_split_unsent_seg+0x6c>
 800b35e:	4b48      	ldr	r3, [pc, #288]	; (800b480 <tcp_split_unsent_seg+0x180>)
 800b360:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800b364:	494b      	ldr	r1, [pc, #300]	; (800b494 <tcp_split_unsent_seg+0x194>)
 800b366:	4848      	ldr	r0, [pc, #288]	; (800b488 <tcp_split_unsent_seg+0x188>)
 800b368:	f001 f974 	bl	800c654 <iprintf>
  optflags = useg->flags;
 800b36c:	f894 b00a 	ldrb.w	fp, [r4, #10]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b370:	f44f 7220 	mov.w	r2, #640	; 0x280
  remainder = useg->len - split;
 800b374:	f8b4 a008 	ldrh.w	sl, [r4, #8]
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b378:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b37a:	ea4f 078b 	mov.w	r7, fp, lsl #2
  remainder = useg->len - split;
 800b37e:	ebaa 0105 	sub.w	r1, sl, r5
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800b382:	f007 0704 	and.w	r7, r7, #4
  remainder = useg->len - split;
 800b386:	fa1f f881 	uxth.w	r8, r1
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800b38a:	fa17 f181 	uxtah	r1, r7, r1
 800b38e:	b289      	uxth	r1, r1
 800b390:	f7fd f90e 	bl	80085b0 <pbuf_alloc>
  if (p == NULL) {
 800b394:	4681      	mov	r9, r0
 800b396:	2800      	cmp	r0, #0
 800b398:	d0c0      	beq.n	800b31c <tcp_split_unsent_seg+0x1c>
  offset = useg->p->tot_len - useg->len + split;
 800b39a:	6860      	ldr	r0, [r4, #4]
 800b39c:	8922      	ldrh	r2, [r4, #8]
 800b39e:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b3a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 800b3a4:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b3a6:	4642      	mov	r2, r8
 800b3a8:	4439      	add	r1, r7
  offset = useg->p->tot_len - useg->len + split;
 800b3aa:	442b      	add	r3, r5
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	f7fd fab1 	bl	8008914 <pbuf_copy_partial>
 800b3b2:	4540      	cmp	r0, r8
 800b3b4:	d160      	bne.n	800b478 <tcp_split_unsent_seg+0x178>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b3b6:	68e3      	ldr	r3, [r4, #12]
 800b3b8:	8998      	ldrh	r0, [r3, #12]
 800b3ba:	f7fc fadd 	bl	8007978 <lwip_htons>
  if (split_flags & TCP_PSH) {
 800b3be:	f010 0808 	ands.w	r8, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b3c2:	b2c7      	uxtb	r7, r0
    remainder_flags |= TCP_PSH;
 800b3c4:	bf16      	itet	ne
 800b3c6:	f04f 0808 	movne.w	r8, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800b3ca:	f007 073f 	andeq.w	r7, r7, #63	; 0x3f
    split_flags &= ~TCP_PSH;
 800b3ce:	f007 0737 	andne.w	r7, r7, #55	; 0x37
  if (split_flags & TCP_FIN) {
 800b3d2:	07fb      	lsls	r3, r7, #31
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b3d4:	68e3      	ldr	r3, [r4, #12]
    remainder_flags |= TCP_FIN;
 800b3d6:	bf48      	it	mi
 800b3d8:	f048 0801 	orrmi.w	r8, r8, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b3dc:	6858      	ldr	r0, [r3, #4]
    split_flags &= ~TCP_FIN;
 800b3de:	bf48      	it	mi
 800b3e0:	f007 07fe 	andmi.w	r7, r7, #254	; 0xfe
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800b3e4:	f7fc facb 	bl	800797e <lwip_htonl>
 800b3e8:	4642      	mov	r2, r8
 800b3ea:	182b      	adds	r3, r5, r0
 800b3ec:	4649      	mov	r1, r9
 800b3ee:	4630      	mov	r0, r6
 800b3f0:	f8cd b000 	str.w	fp, [sp]
 800b3f4:	f7ff fbc4 	bl	800ab80 <tcp_create_segment>
  if (seg == NULL) {
 800b3f8:	4680      	mov	r8, r0
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d03c      	beq.n	800b478 <tcp_split_unsent_seg+0x178>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800b3fe:	6860      	ldr	r0, [r4, #4]
 800b400:	eba5 050a 	sub.w	r5, r5, sl
 800b404:	f7fd f9a6 	bl	8008754 <pbuf_clen>
 800b408:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800b40c:	fa1f f985 	uxth.w	r9, r5
 800b410:	1a18      	subs	r0, r3, r0
 800b412:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800b416:	6860      	ldr	r0, [r4, #4]
 800b418:	8901      	ldrh	r1, [r0, #8]
 800b41a:	fa11 f185 	uxtah	r1, r1, r5
 800b41e:	b289      	uxth	r1, r1
 800b420:	f7fd f940 	bl	80086a4 <pbuf_realloc>
  useg->len -= remainder;
 800b424:	8923      	ldrh	r3, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b426:	4638      	mov	r0, r7
  useg->len -= remainder;
 800b428:	4499      	add	r9, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b42a:	68e3      	ldr	r3, [r4, #12]
  useg->len -= remainder;
 800b42c:	f8a4 9008 	strh.w	r9, [r4, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800b430:	899d      	ldrh	r5, [r3, #12]
 800b432:	f7fc faa1 	bl	8007978 <lwip_htons>
 800b436:	68e3      	ldr	r3, [r4, #12]
 800b438:	4328      	orrs	r0, r5
 800b43a:	8198      	strh	r0, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800b43c:	6860      	ldr	r0, [r4, #4]
 800b43e:	f7fd f989 	bl	8008754 <pbuf_clen>
 800b442:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800b446:	4418      	add	r0, r3
 800b448:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b44c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b450:	f7fd f980 	bl	8008754 <pbuf_clen>
 800b454:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
 800b458:	4418      	add	r0, r3
  seg->next = useg->next;
 800b45a:	6823      	ldr	r3, [r4, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b45c:	f8a6 0066 	strh.w	r0, [r6, #102]	; 0x66
  seg->next = useg->next;
 800b460:	f8c8 3000 	str.w	r3, [r8]
  useg->next = seg;
 800b464:	f8c4 8000 	str.w	r8, [r4]
  if (seg->next == NULL) {
 800b468:	f8d8 0000 	ldr.w	r0, [r8]
 800b46c:	2800      	cmp	r0, #0
 800b46e:	f47f af68 	bne.w	800b342 <tcp_split_unsent_seg+0x42>
    pcb->unsent_oversize = 0;
 800b472:	f8a6 0068 	strh.w	r0, [r6, #104]	; 0x68
 800b476:	e75e      	b.n	800b336 <tcp_split_unsent_seg+0x36>
    pbuf_free(p);
 800b478:	4648      	mov	r0, r9
 800b47a:	f7fd f831 	bl	80084e0 <pbuf_free>
 800b47e:	e74d      	b.n	800b31c <tcp_split_unsent_seg+0x1c>
 800b480:	080209e6 	.word	0x080209e6
 800b484:	08020df5 	.word	0x08020df5
 800b488:	0801e3d3 	.word	0x0801e3d3
 800b48c:	08020e17 	.word	0x08020e17
 800b490:	08020e39 	.word	0x08020e39
 800b494:	08020e46 	.word	0x08020e46

0800b498 <tcp_enqueue_flags>:
{
 800b498:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b49c:	f011 0803 	ands.w	r8, r1, #3
{
 800b4a0:	4604      	mov	r4, r0
 800b4a2:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800b4a4:	d106      	bne.n	800b4b4 <tcp_enqueue_flags+0x1c>
 800b4a6:	4b3e      	ldr	r3, [pc, #248]	; (800b5a0 <tcp_enqueue_flags+0x108>)
 800b4a8:	f240 4211 	movw	r2, #1041	; 0x411
 800b4ac:	493d      	ldr	r1, [pc, #244]	; (800b5a4 <tcp_enqueue_flags+0x10c>)
 800b4ae:	483e      	ldr	r0, [pc, #248]	; (800b5a8 <tcp_enqueue_flags+0x110>)
 800b4b0:	f001 f8d0 	bl	800c654 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800b4b4:	b934      	cbnz	r4, 800b4c4 <tcp_enqueue_flags+0x2c>
 800b4b6:	4b3a      	ldr	r3, [pc, #232]	; (800b5a0 <tcp_enqueue_flags+0x108>)
 800b4b8:	f240 4213 	movw	r2, #1043	; 0x413
 800b4bc:	493b      	ldr	r1, [pc, #236]	; (800b5ac <tcp_enqueue_flags+0x114>)
 800b4be:	483a      	ldr	r0, [pc, #232]	; (800b5a8 <tcp_enqueue_flags+0x110>)
 800b4c0:	f001 f8c8 	bl	800c654 <iprintf>
  if (flags & TCP_SYN) {
 800b4c4:	f3c6 0740 	ubfx	r7, r6, #1, #1
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800b4c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b4cc:	2036      	movs	r0, #54	; 0x36
 800b4ce:	ea4f 0987 	mov.w	r9, r7, lsl #2
 800b4d2:	4649      	mov	r1, r9
 800b4d4:	f7fd f86c 	bl	80085b0 <pbuf_alloc>
 800b4d8:	4605      	mov	r5, r0
 800b4da:	b940      	cbnz	r0, 800b4ee <tcp_enqueue_flags+0x56>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b4dc:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 800b4de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800b4e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4e6:	8363      	strh	r3, [r4, #26]
}
 800b4e8:	b003      	add	sp, #12
 800b4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800b4ee:	8943      	ldrh	r3, [r0, #10]
 800b4f0:	454b      	cmp	r3, r9
 800b4f2:	d206      	bcs.n	800b502 <tcp_enqueue_flags+0x6a>
 800b4f4:	4b2a      	ldr	r3, [pc, #168]	; (800b5a0 <tcp_enqueue_flags+0x108>)
 800b4f6:	f240 4239 	movw	r2, #1081	; 0x439
 800b4fa:	492d      	ldr	r1, [pc, #180]	; (800b5b0 <tcp_enqueue_flags+0x118>)
 800b4fc:	482a      	ldr	r0, [pc, #168]	; (800b5a8 <tcp_enqueue_flags+0x110>)
 800b4fe:	f001 f8a9 	bl	800c654 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800b502:	4629      	mov	r1, r5
 800b504:	9700      	str	r7, [sp, #0]
 800b506:	4632      	mov	r2, r6
 800b508:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b50a:	4620      	mov	r0, r4
 800b50c:	f7ff fb38 	bl	800ab80 <tcp_create_segment>
 800b510:	4605      	mov	r5, r0
 800b512:	2800      	cmp	r0, #0
 800b514:	d0e2      	beq.n	800b4dc <tcp_enqueue_flags+0x44>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800b516:	68c3      	ldr	r3, [r0, #12]
 800b518:	079a      	lsls	r2, r3, #30
 800b51a:	d006      	beq.n	800b52a <tcp_enqueue_flags+0x92>
 800b51c:	4b20      	ldr	r3, [pc, #128]	; (800b5a0 <tcp_enqueue_flags+0x108>)
 800b51e:	f240 4242 	movw	r2, #1090	; 0x442
 800b522:	4924      	ldr	r1, [pc, #144]	; (800b5b4 <tcp_enqueue_flags+0x11c>)
 800b524:	4820      	ldr	r0, [pc, #128]	; (800b5a8 <tcp_enqueue_flags+0x110>)
 800b526:	f001 f895 	bl	800c654 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800b52a:	892b      	ldrh	r3, [r5, #8]
 800b52c:	b133      	cbz	r3, 800b53c <tcp_enqueue_flags+0xa4>
 800b52e:	4b1c      	ldr	r3, [pc, #112]	; (800b5a0 <tcp_enqueue_flags+0x108>)
 800b530:	f240 4243 	movw	r2, #1091	; 0x443
 800b534:	4920      	ldr	r1, [pc, #128]	; (800b5b8 <tcp_enqueue_flags+0x120>)
 800b536:	481c      	ldr	r0, [pc, #112]	; (800b5a8 <tcp_enqueue_flags+0x110>)
 800b538:	f001 f88c 	bl	800c654 <iprintf>
  if (pcb->unsent == NULL) {
 800b53c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b53e:	bb43      	cbnz	r3, 800b592 <tcp_enqueue_flags+0xfa>
    pcb->unsent = seg;
 800b540:	66e5      	str	r5, [r4, #108]	; 0x6c
  pcb->unsent_oversize = 0;
 800b542:	2300      	movs	r3, #0
 800b544:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800b548:	f1b8 0f00 	cmp.w	r8, #0
 800b54c:	d002      	beq.n	800b554 <tcp_enqueue_flags+0xbc>
    pcb->snd_lbb++;
 800b54e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800b550:	3301      	adds	r3, #1
 800b552:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 800b554:	07f3      	lsls	r3, r6, #31
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b556:	6868      	ldr	r0, [r5, #4]
    tcp_set_flags(pcb, TF_FIN);
 800b558:	bf42      	ittt	mi
 800b55a:	8b63      	ldrhmi	r3, [r4, #26]
 800b55c:	f043 0320 	orrmi.w	r3, r3, #32
 800b560:	8363      	strhmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800b562:	f7fd f8f7 	bl	8008754 <pbuf_clen>
 800b566:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800b56a:	4418      	add	r0, r3
 800b56c:	b280      	uxth	r0, r0
 800b56e:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 800b572:	2800      	cmp	r0, #0
 800b574:	d0b8      	beq.n	800b4e8 <tcp_enqueue_flags+0x50>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800b576:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800b578:	b948      	cbnz	r0, 800b58e <tcp_enqueue_flags+0xf6>
 800b57a:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 800b57c:	2c00      	cmp	r4, #0
 800b57e:	d1b3      	bne.n	800b4e8 <tcp_enqueue_flags+0x50>
 800b580:	4b07      	ldr	r3, [pc, #28]	; (800b5a0 <tcp_enqueue_flags+0x108>)
 800b582:	f240 4265 	movw	r2, #1125	; 0x465
 800b586:	490d      	ldr	r1, [pc, #52]	; (800b5bc <tcp_enqueue_flags+0x124>)
 800b588:	4807      	ldr	r0, [pc, #28]	; (800b5a8 <tcp_enqueue_flags+0x110>)
 800b58a:	f001 f863 	bl	800c654 <iprintf>
  return ERR_OK;
 800b58e:	2000      	movs	r0, #0
 800b590:	e7aa      	b.n	800b4e8 <tcp_enqueue_flags+0x50>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800b592:	461a      	mov	r2, r3
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1fb      	bne.n	800b592 <tcp_enqueue_flags+0xfa>
    useg->next = seg;
 800b59a:	6015      	str	r5, [r2, #0]
 800b59c:	e7d1      	b.n	800b542 <tcp_enqueue_flags+0xaa>
 800b59e:	bf00      	nop
 800b5a0:	080209e6 	.word	0x080209e6
 800b5a4:	08020e54 	.word	0x08020e54
 800b5a8:	0801e3d3 	.word	0x0801e3d3
 800b5ac:	08020ea9 	.word	0x08020ea9
 800b5b0:	08020ec8 	.word	0x08020ec8
 800b5b4:	08020f01 	.word	0x08020f01
 800b5b8:	08020f19 	.word	0x08020f19
 800b5bc:	08020f43 	.word	0x08020f43

0800b5c0 <tcp_send_fin>:
{
 800b5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	b930      	cbnz	r0, 800b5d4 <tcp_send_fin+0x14>
 800b5c6:	4b13      	ldr	r3, [pc, #76]	; (800b614 <tcp_send_fin+0x54>)
 800b5c8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800b5cc:	4912      	ldr	r1, [pc, #72]	; (800b618 <tcp_send_fin+0x58>)
 800b5ce:	4813      	ldr	r0, [pc, #76]	; (800b61c <tcp_send_fin+0x5c>)
 800b5d0:	f001 f840 	bl	800c654 <iprintf>
  if (pcb->unsent != NULL) {
 800b5d4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 800b5d6:	b14d      	cbz	r5, 800b5ec <tcp_send_fin+0x2c>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800b5d8:	462f      	mov	r7, r5
 800b5da:	682d      	ldr	r5, [r5, #0]
 800b5dc:	2d00      	cmp	r5, #0
 800b5de:	d1fb      	bne.n	800b5d8 <tcp_send_fin+0x18>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	8998      	ldrh	r0, [r3, #12]
 800b5e4:	f7fc f9c8 	bl	8007978 <lwip_htons>
 800b5e8:	0743      	lsls	r3, r0, #29
 800b5ea:	d005      	beq.n	800b5f8 <tcp_send_fin+0x38>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	2101      	movs	r1, #1
}
 800b5f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800b5f4:	f7ff bf50 	b.w	800b498 <tcp_enqueue_flags>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2001      	movs	r0, #1
 800b5fc:	899e      	ldrh	r6, [r3, #12]
 800b5fe:	f7fc f9bb 	bl	8007978 <lwip_htons>
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	4330      	orrs	r0, r6
 800b606:	8198      	strh	r0, [r3, #12]
}
 800b608:	4628      	mov	r0, r5
      tcp_set_flags(pcb, TF_FIN);
 800b60a:	8b63      	ldrh	r3, [r4, #26]
 800b60c:	f043 0320 	orr.w	r3, r3, #32
 800b610:	8363      	strh	r3, [r4, #26]
}
 800b612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b614:	080209e6 	.word	0x080209e6
 800b618:	08020f6b 	.word	0x08020f6b
 800b61c:	0801e3d3 	.word	0x0801e3d3

0800b620 <tcp_rexmit_rto_prepare>:
{
 800b620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b624:	4604      	mov	r4, r0
 800b626:	b930      	cbnz	r0, 800b636 <tcp_rexmit_rto_prepare+0x16>
 800b628:	4b1c      	ldr	r3, [pc, #112]	; (800b69c <tcp_rexmit_rto_prepare+0x7c>)
 800b62a:	f240 6263 	movw	r2, #1635	; 0x663
 800b62e:	491c      	ldr	r1, [pc, #112]	; (800b6a0 <tcp_rexmit_rto_prepare+0x80>)
 800b630:	481c      	ldr	r0, [pc, #112]	; (800b6a4 <tcp_rexmit_rto_prepare+0x84>)
 800b632:	f001 f80f 	bl	800c654 <iprintf>
  if (pcb->unacked == NULL) {
 800b636:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800b638:	b945      	cbnz	r5, 800b64c <tcp_rexmit_rto_prepare+0x2c>
    return ERR_VAL;
 800b63a:	f06f 0005 	mvn.w	r0, #5
}
 800b63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (tcp_output_segment_busy(seg)) {
 800b642:	f7ff fa3b 	bl	800aabc <tcp_output_segment_busy>
 800b646:	2800      	cmp	r0, #0
 800b648:	d1f7      	bne.n	800b63a <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b64a:	682d      	ldr	r5, [r5, #0]
 800b64c:	682b      	ldr	r3, [r5, #0]
    if (tcp_output_segment_busy(seg)) {
 800b64e:	4628      	mov	r0, r5
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b650:	2b00      	cmp	r3, #0
 800b652:	d1f6      	bne.n	800b642 <tcp_rexmit_rto_prepare+0x22>
  if (tcp_output_segment_busy(seg)) {
 800b654:	f7ff fa32 	bl	800aabc <tcp_output_segment_busy>
 800b658:	4606      	mov	r6, r0
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d1ed      	bne.n	800b63a <tcp_rexmit_rto_prepare+0x1a>
  seg->next = pcb->unsent;
 800b65e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800b660:	602b      	str	r3, [r5, #0]
  pcb->unsent = pcb->unacked;
 800b662:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->unacked = NULL;
 800b664:	e9c4 301b 	strd	r3, r0, [r4, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 800b668:	8b63      	ldrh	r3, [r4, #26]
 800b66a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b66e:	8363      	strh	r3, [r4, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b670:	68eb      	ldr	r3, [r5, #12]
 800b672:	6858      	ldr	r0, [r3, #4]
 800b674:	f7fc f983 	bl	800797e <lwip_htonl>
 800b678:	68eb      	ldr	r3, [r5, #12]
 800b67a:	4607      	mov	r7, r0
 800b67c:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800b680:	8998      	ldrh	r0, [r3, #12]
 800b682:	f7fc f979 	bl	8007978 <lwip_htons>
 800b686:	f010 0303 	ands.w	r3, r0, #3
 800b68a:	4447      	add	r7, r8
  return ERR_OK;
 800b68c:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b68e:	bf18      	it	ne
 800b690:	2301      	movne	r3, #1
  pcb->rttest = 0;
 800b692:	6366      	str	r6, [r4, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b694:	443b      	add	r3, r7
 800b696:	64e3      	str	r3, [r4, #76]	; 0x4c
  return ERR_OK;
 800b698:	e7d1      	b.n	800b63e <tcp_rexmit_rto_prepare+0x1e>
 800b69a:	bf00      	nop
 800b69c:	080209e6 	.word	0x080209e6
 800b6a0:	08020f85 	.word	0x08020f85
 800b6a4:	0801e3d3 	.word	0x0801e3d3

0800b6a8 <tcp_rexmit>:
{
 800b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	b930      	cbnz	r0, 800b6bc <tcp_rexmit+0x14>
 800b6ae:	4b1b      	ldr	r3, [pc, #108]	; (800b71c <tcp_rexmit+0x74>)
 800b6b0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b6b4:	491a      	ldr	r1, [pc, #104]	; (800b720 <tcp_rexmit+0x78>)
 800b6b6:	481b      	ldr	r0, [pc, #108]	; (800b724 <tcp_rexmit+0x7c>)
 800b6b8:	f000 ffcc 	bl	800c654 <iprintf>
  if (pcb->unacked == NULL) {
 800b6bc:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800b6be:	b915      	cbnz	r5, 800b6c6 <tcp_rexmit+0x1e>
    return ERR_VAL;
 800b6c0:	f06f 0005 	mvn.w	r0, #5
}
 800b6c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (tcp_output_segment_busy(seg)) {
 800b6c6:	4628      	mov	r0, r5
 800b6c8:	f7ff f9f8 	bl	800aabc <tcp_output_segment_busy>
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	d1f7      	bne.n	800b6c0 <tcp_rexmit+0x18>
  pcb->unacked = seg->next;
 800b6d0:	682b      	ldr	r3, [r5, #0]
  cur_seg = &(pcb->unsent);
 800b6d2:	f104 066c 	add.w	r6, r4, #108	; 0x6c
  pcb->unacked = seg->next;
 800b6d6:	6723      	str	r3, [r4, #112]	; 0x70
  while (*cur_seg &&
 800b6d8:	6833      	ldr	r3, [r6, #0]
 800b6da:	b983      	cbnz	r3, 800b6fe <tcp_rexmit+0x56>
  seg->next = *cur_seg;
 800b6dc:	6833      	ldr	r3, [r6, #0]
 800b6de:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 800b6e0:	6035      	str	r5, [r6, #0]
  if (seg->next == NULL) {
 800b6e2:	682b      	ldr	r3, [r5, #0]
 800b6e4:	b90b      	cbnz	r3, 800b6ea <tcp_rexmit+0x42>
    pcb->unsent_oversize = 0;
 800b6e6:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 800b6ea:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  pcb->rttest = 0;
 800b6ee:	2000      	movs	r0, #0
  if (pcb->nrtx < 0xFF) {
 800b6f0:	2bff      	cmp	r3, #255	; 0xff
  pcb->rttest = 0;
 800b6f2:	6360      	str	r0, [r4, #52]	; 0x34
    ++pcb->nrtx;
 800b6f4:	bf1c      	itt	ne
 800b6f6:	3301      	addne	r3, #1
 800b6f8:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  return ERR_OK;
 800b6fc:	e7e2      	b.n	800b6c4 <tcp_rexmit+0x1c>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	6858      	ldr	r0, [r3, #4]
 800b702:	f7fc f93c 	bl	800797e <lwip_htonl>
 800b706:	68eb      	ldr	r3, [r5, #12]
 800b708:	4607      	mov	r7, r0
 800b70a:	6858      	ldr	r0, [r3, #4]
 800b70c:	f7fc f937 	bl	800797e <lwip_htonl>
 800b710:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800b712:	2800      	cmp	r0, #0
 800b714:	dae2      	bge.n	800b6dc <tcp_rexmit+0x34>
    cur_seg = &((*cur_seg)->next );
 800b716:	6836      	ldr	r6, [r6, #0]
 800b718:	e7de      	b.n	800b6d8 <tcp_rexmit+0x30>
 800b71a:	bf00      	nop
 800b71c:	080209e6 	.word	0x080209e6
 800b720:	08020fa9 	.word	0x08020fa9
 800b724:	0801e3d3 	.word	0x0801e3d3

0800b728 <tcp_rexmit_fast>:
{
 800b728:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b72a:	4604      	mov	r4, r0
 800b72c:	b930      	cbnz	r0, 800b73c <tcp_rexmit_fast+0x14>
 800b72e:	4b15      	ldr	r3, [pc, #84]	; (800b784 <tcp_rexmit_fast+0x5c>)
 800b730:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b734:	4914      	ldr	r1, [pc, #80]	; (800b788 <tcp_rexmit_fast+0x60>)
 800b736:	4815      	ldr	r0, [pc, #84]	; (800b78c <tcp_rexmit_fast+0x64>)
 800b738:	f000 ff8c 	bl	800c654 <iprintf>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b73c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b73e:	b1fb      	cbz	r3, 800b780 <tcp_rexmit_fast+0x58>
 800b740:	8b63      	ldrh	r3, [r4, #26]
 800b742:	075b      	lsls	r3, r3, #29
 800b744:	d41c      	bmi.n	800b780 <tcp_rexmit_fast+0x58>
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b746:	4620      	mov	r0, r4
 800b748:	f7ff ffae 	bl	800b6a8 <tcp_rexmit>
 800b74c:	b9c0      	cbnz	r0, 800b780 <tcp_rexmit_fast+0x58>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b74e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 800b752:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      pcb->rtime = 0;
 800b756:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b758:	4299      	cmp	r1, r3
 800b75a:	bf28      	it	cs
 800b75c:	4619      	movcs	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b75e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800b760:	005d      	lsls	r5, r3, #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b762:	104a      	asrs	r2, r1, #1
        pcb->ssthresh = 2 * pcb->mss;
 800b764:	ebb5 0f51 	cmp.w	r5, r1, lsr #1
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b768:	442b      	add	r3, r5
        pcb->ssthresh = 2 * pcb->mss;
 800b76a:	bf88      	it	hi
 800b76c:	462a      	movhi	r2, r5
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b76e:	4413      	add	r3, r2
        pcb->ssthresh = 2 * pcb->mss;
 800b770:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b774:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b778:	8b63      	ldrh	r3, [r4, #26]
 800b77a:	f043 0304 	orr.w	r3, r3, #4
 800b77e:	8363      	strh	r3, [r4, #26]
}
 800b780:	bd38      	pop	{r3, r4, r5, pc}
 800b782:	bf00      	nop
 800b784:	080209e6 	.word	0x080209e6
 800b788:	08020fc1 	.word	0x08020fc1
 800b78c:	0801e3d3 	.word	0x0801e3d3

0800b790 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b794:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800b798:	4606      	mov	r6, r0
 800b79a:	460f      	mov	r7, r1
 800b79c:	4614      	mov	r4, r2
 800b79e:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b7a2:	461d      	mov	r5, r3
{
 800b7a4:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b7a8:	b933      	cbnz	r3, 800b7b8 <tcp_rst+0x28>
 800b7aa:	4b18      	ldr	r3, [pc, #96]	; (800b80c <tcp_rst+0x7c>)
 800b7ac:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b7b0:	4917      	ldr	r1, [pc, #92]	; (800b810 <tcp_rst+0x80>)
 800b7b2:	4818      	ldr	r0, [pc, #96]	; (800b814 <tcp_rst+0x84>)
 800b7b4:	f000 ff4e 	bl	800c654 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b7b8:	f1b8 0f00 	cmp.w	r8, #0
 800b7bc:	d106      	bne.n	800b7cc <tcp_rst+0x3c>
 800b7be:	4b13      	ldr	r3, [pc, #76]	; (800b80c <tcp_rst+0x7c>)
 800b7c0:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b7c4:	4914      	ldr	r1, [pc, #80]	; (800b818 <tcp_rst+0x88>)
 800b7c6:	4813      	ldr	r0, [pc, #76]	; (800b814 <tcp_rst+0x84>)
 800b7c8:	f000 ff44 	bl	800c654 <iprintf>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b7cc:	4638      	mov	r0, r7
 800b7ce:	f7fc f8d6 	bl	800797e <lwip_htonl>
 800b7d2:	2314      	movs	r3, #20
 800b7d4:	f646 010b 	movw	r1, #26635	; 0x680b
 800b7d8:	4602      	mov	r2, r0
 800b7da:	f8cd a000 	str.w	sl, [sp]
 800b7de:	4620      	mov	r0, r4
 800b7e0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800b7e4:	464b      	mov	r3, r9
 800b7e6:	2100      	movs	r1, #0
 800b7e8:	f7ff fa3a 	bl	800ac60 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	b150      	cbz	r0, 800b806 <tcp_rst+0x76>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b7f0:	f7ff fa9e 	bl	800ad30 <tcp_output_fill_options.isra.0.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b7f4:	4643      	mov	r3, r8
 800b7f6:	462a      	mov	r2, r5
 800b7f8:	4621      	mov	r1, r4
 800b7fa:	4630      	mov	r0, r6
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b7fc:	b004      	add	sp, #16
 800b7fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b802:	f7ff baa5 	b.w	800ad50 <tcp_output_control_segment>
}
 800b806:	b004      	add	sp, #16
 800b808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b80c:	080209e6 	.word	0x080209e6
 800b810:	08020fde 	.word	0x08020fde
 800b814:	0801e3d3 	.word	0x0801e3d3
 800b818:	08020ff8 	.word	0x08020ff8

0800b81c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b81c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b81e:	4604      	mov	r4, r0
 800b820:	b930      	cbnz	r0, 800b830 <tcp_send_empty_ack+0x14>
 800b822:	4b14      	ldr	r3, [pc, #80]	; (800b874 <tcp_send_empty_ack+0x58>)
 800b824:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b828:	4913      	ldr	r1, [pc, #76]	; (800b878 <tcp_send_empty_ack+0x5c>)
 800b82a:	4814      	ldr	r0, [pc, #80]	; (800b87c <tcp_send_empty_ack+0x60>)
 800b82c:	f000 ff12 	bl	800c654 <iprintf>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b830:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800b832:	f7fc f8a4 	bl	800797e <lwip_htonl>
 800b836:	2100      	movs	r1, #0
 800b838:	4602      	mov	r2, r0
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7ff fa52 	bl	800ace4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800b840:	4605      	mov	r5, r0
 800b842:	b930      	cbnz	r0, 800b852 <tcp_send_empty_ack+0x36>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b844:	8b63      	ldrh	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b846:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b84a:	f043 0303 	orr.w	r3, r3, #3
 800b84e:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800b850:	bd38      	pop	{r3, r4, r5, pc}
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b852:	f7ff fa6d 	bl	800ad30 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b856:	1d23      	adds	r3, r4, #4
 800b858:	4622      	mov	r2, r4
 800b85a:	4629      	mov	r1, r5
 800b85c:	4620      	mov	r0, r4
 800b85e:	f7ff fa77 	bl	800ad50 <tcp_output_control_segment>
  if (err != ERR_OK) {
 800b862:	8b63      	ldrh	r3, [r4, #26]
 800b864:	b118      	cbz	r0, 800b86e <tcp_send_empty_ack+0x52>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b866:	f043 0303 	orr.w	r3, r3, #3
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b86a:	8363      	strh	r3, [r4, #26]
 800b86c:	e7f0      	b.n	800b850 <tcp_send_empty_ack+0x34>
 800b86e:	f023 0303 	bic.w	r3, r3, #3
 800b872:	e7fa      	b.n	800b86a <tcp_send_empty_ack+0x4e>
 800b874:	080209e6 	.word	0x080209e6
 800b878:	08021013 	.word	0x08021013
 800b87c:	0801e3d3 	.word	0x0801e3d3

0800b880 <tcp_output>:
{
 800b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b884:	4604      	mov	r4, r0
{
 800b886:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800b888:	b930      	cbnz	r0, 800b898 <tcp_output+0x18>
 800b88a:	4b8f      	ldr	r3, [pc, #572]	; (800bac8 <tcp_output+0x248>)
 800b88c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800b890:	498e      	ldr	r1, [pc, #568]	; (800bacc <tcp_output+0x24c>)
 800b892:	488f      	ldr	r0, [pc, #572]	; (800bad0 <tcp_output+0x250>)
 800b894:	f000 fede 	bl	800c654 <iprintf>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800b898:	7d23      	ldrb	r3, [r4, #20]
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d106      	bne.n	800b8ac <tcp_output+0x2c>
 800b89e:	4b8a      	ldr	r3, [pc, #552]	; (800bac8 <tcp_output+0x248>)
 800b8a0:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800b8a4:	498b      	ldr	r1, [pc, #556]	; (800bad4 <tcp_output+0x254>)
 800b8a6:	488a      	ldr	r0, [pc, #552]	; (800bad0 <tcp_output+0x250>)
 800b8a8:	f000 fed4 	bl	800c654 <iprintf>
  if (tcp_input_pcb == pcb) {
 800b8ac:	4b8a      	ldr	r3, [pc, #552]	; (800bad8 <tcp_output+0x258>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	42a3      	cmp	r3, r4
 800b8b2:	f000 8171 	beq.w	800bb98 <tcp_output+0x318>
  seg = pcb->unsent;
 800b8b6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 800b8b8:	b94d      	cbnz	r5, 800b8ce <tcp_output+0x4e>
    if (pcb->flags & TF_ACK_NOW) {
 800b8ba:	8b63      	ldrh	r3, [r4, #26]
 800b8bc:	0798      	lsls	r0, r3, #30
 800b8be:	f140 8167 	bpl.w	800bb90 <tcp_output+0x310>
      return tcp_send_empty_ack(pcb);
 800b8c2:	4620      	mov	r0, r4
}
 800b8c4:	b007      	add	sp, #28
 800b8c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 800b8ca:	f7ff bfa7 	b.w	800b81c <tcp_send_empty_ack>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b8ce:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800b8d0:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b8d4:	f8b4 8048 	ldrh.w	r8, [r4, #72]	; 0x48
 800b8d8:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800b8dc:	b340      	cbz	r0, 800b930 <tcp_output+0xb0>
    return netif_get_by_index(pcb->netif_idx);
 800b8de:	f7fc fd45 	bl	800836c <netif_get_by_index>
    return ip_route(src, dst);
 800b8e2:	4607      	mov	r7, r0
  if (netif == NULL) {
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	f000 8170 	beq.w	800bbca <tcp_output+0x34a>
  if (ip_addr_isany(&pcb->local_ip)) {
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	b90b      	cbnz	r3, 800b8f2 <tcp_output+0x72>
    ip_addr_copy(pcb->local_ip, *local_ip);
 800b8ee:	6843      	ldr	r3, [r0, #4]
 800b8f0:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b8f2:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b8f4:	45b0      	cmp	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b8f6:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800b8f8:	bf28      	it	cs
 800b8fa:	46b0      	movcs	r8, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800b8fc:	f7fc f83f 	bl	800797e <lwip_htonl>
 800b900:	892b      	ldrh	r3, [r5, #8]
 800b902:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800b904:	1a9b      	subs	r3, r3, r2
 800b906:	4418      	add	r0, r3
 800b908:	4540      	cmp	r0, r8
 800b90a:	d915      	bls.n	800b938 <tcp_output+0xb8>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800b90c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800b910:	4543      	cmp	r3, r8
 800b912:	d1d2      	bne.n	800b8ba <tcp_output+0x3a>
 800b914:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1cf      	bne.n	800b8ba <tcp_output+0x3a>
 800b91a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d1cb      	bne.n	800b8ba <tcp_output+0x3a>
      pcb->persist_cnt = 0;
 800b922:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 800b926:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
      pcb->persist_cnt = 0;
 800b92a:	f8a4 2094 	strh.w	r2, [r4, #148]	; 0x94
 800b92e:	e7c4      	b.n	800b8ba <tcp_output+0x3a>
    return ip_route(src, dst);
 800b930:	4648      	mov	r0, r9
 800b932:	f7fb fac3 	bl	8006ebc <ip4_route>
 800b936:	e7d4      	b.n	800b8e2 <tcp_output+0x62>
  pcb->persist_backoff = 0;
 800b938:	2300      	movs	r3, #0
  useg = pcb->unacked;
 800b93a:	6f26      	ldr	r6, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 800b93c:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (useg != NULL) {
 800b940:	b126      	cbz	r6, 800b94c <tcp_output+0xcc>
    for (; useg->next != NULL; useg = useg->next);
 800b942:	4633      	mov	r3, r6
 800b944:	6836      	ldr	r6, [r6, #0]
 800b946:	2e00      	cmp	r6, #0
 800b948:	d1fb      	bne.n	800b942 <tcp_output+0xc2>
 800b94a:	461e      	mov	r6, r3
    LWIP_ASSERT("RST not expected here!",
 800b94c:	f8df a178 	ldr.w	sl, [pc, #376]	; 800bac8 <tcp_output+0x248>
 800b950:	f8df b17c 	ldr.w	fp, [pc, #380]	; 800bad0 <tcp_output+0x250>
 800b954:	e0de      	b.n	800bb14 <tcp_output+0x294>
    if (pcb->state != SYN_SENT) {
 800b956:	7d23      	ldrb	r3, [r4, #20]
 800b958:	2b02      	cmp	r3, #2
 800b95a:	d009      	beq.n	800b970 <tcp_output+0xf0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800b95c:	68eb      	ldr	r3, [r5, #12]
 800b95e:	2010      	movs	r0, #16
 800b960:	899b      	ldrh	r3, [r3, #12]
 800b962:	9304      	str	r3, [sp, #16]
 800b964:	f7fc f808 	bl	8007978 <lwip_htons>
 800b968:	9b04      	ldr	r3, [sp, #16]
 800b96a:	68ea      	ldr	r2, [r5, #12]
 800b96c:	4318      	orrs	r0, r3
 800b96e:	8190      	strh	r0, [r2, #12]
  if (tcp_output_segment_busy(seg)) {
 800b970:	4628      	mov	r0, r5
 800b972:	f7ff f8a3 	bl	800aabc <tcp_output_segment_busy>
 800b976:	2800      	cmp	r0, #0
 800b978:	d16f      	bne.n	800ba5a <tcp_output+0x1da>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b97a:	68eb      	ldr	r3, [r5, #12]
 800b97c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b97e:	9304      	str	r3, [sp, #16]
 800b980:	f7fb fffd 	bl	800797e <lwip_htonl>
 800b984:	9b04      	ldr	r3, [sp, #16]
 800b986:	6098      	str	r0, [r3, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b988:	68eb      	ldr	r3, [r5, #12]
 800b98a:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800b98c:	9304      	str	r3, [sp, #16]
 800b98e:	f7fb fff3 	bl	8007978 <lwip_htons>
 800b992:	9b04      	ldr	r3, [sp, #16]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b994:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b996:	81d8      	strh	r0, [r3, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b99a:	4413      	add	r3, r2
 800b99c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b99e:	7aaa      	ldrb	r2, [r5, #10]
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b9a0:	68eb      	ldr	r3, [r5, #12]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b9a2:	07d2      	lsls	r2, r2, #31
 800b9a4:	d449      	bmi.n	800ba3a <tcp_output+0x1ba>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b9a6:	f103 0214 	add.w	r2, r3, #20
  if (pcb->rtime < 0) {
 800b9aa:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 800b9ae:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 800b9b0:	bfbc      	itt	lt
 800b9b2:	2300      	movlt	r3, #0
 800b9b4:	8623      	strhlt	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 800b9b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9b8:	b94b      	cbnz	r3, 800b9ce <tcp_output+0x14e>
    pcb->rttest = tcp_ticks;
 800b9ba:	4948      	ldr	r1, [pc, #288]	; (800badc <tcp_output+0x25c>)
 800b9bc:	68eb      	ldr	r3, [r5, #12]
 800b9be:	6809      	ldr	r1, [r1, #0]
 800b9c0:	9204      	str	r2, [sp, #16]
 800b9c2:	6361      	str	r1, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b9c4:	6858      	ldr	r0, [r3, #4]
 800b9c6:	f7fb ffda 	bl	800797e <lwip_htonl>
 800b9ca:	9a04      	ldr	r2, [sp, #16]
 800b9cc:	63a0      	str	r0, [r4, #56]	; 0x38
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b9ce:	6869      	ldr	r1, [r5, #4]
 800b9d0:	68eb      	ldr	r3, [r5, #12]
 800b9d2:	6848      	ldr	r0, [r1, #4]
  seg->p->len -= len;
 800b9d4:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b9d8:	1a18      	subs	r0, r3, r0
  seg->p->payload = seg->tcphdr;
 800b9da:	604b      	str	r3, [r1, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b9dc:	b280      	uxth	r0, r0
  seg->p->len -= len;
 800b9de:	ebac 0c00 	sub.w	ip, ip, r0
 800b9e2:	f8a1 c00a 	strh.w	ip, [r1, #10]
  seg->p->tot_len -= len;
 800b9e6:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 800b9ea:	ebac 0000 	sub.w	r0, ip, r0
 800b9ee:	8108      	strh	r0, [r1, #8]
  seg->tcphdr->chksum = 0;
 800b9f0:	2100      	movs	r1, #0
 800b9f2:	7419      	strb	r1, [r3, #16]
 800b9f4:	7459      	strb	r1, [r3, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b9f6:	7aa9      	ldrb	r1, [r5, #10]
 800b9f8:	0089      	lsls	r1, r1, #2
 800b9fa:	f001 0104 	and.w	r1, r1, #4
 800b9fe:	3114      	adds	r1, #20
 800ba00:	440b      	add	r3, r1
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d006      	beq.n	800ba14 <tcp_output+0x194>
 800ba06:	4653      	mov	r3, sl
 800ba08:	f240 621c 	movw	r2, #1564	; 0x61c
 800ba0c:	4934      	ldr	r1, [pc, #208]	; (800bae0 <tcp_output+0x260>)
 800ba0e:	4658      	mov	r0, fp
 800ba10:	f000 fe20 	bl	800c654 <iprintf>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ba14:	2306      	movs	r3, #6
 800ba16:	9702      	str	r7, [sp, #8]
 800ba18:	464a      	mov	r2, r9
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	9301      	str	r3, [sp, #4]
 800ba1e:	7aa3      	ldrb	r3, [r4, #10]
 800ba20:	9300      	str	r3, [sp, #0]
 800ba22:	7ae3      	ldrb	r3, [r4, #11]
 800ba24:	6868      	ldr	r0, [r5, #4]
 800ba26:	f7fb fba5 	bl	8007174 <ip4_output_if>
    if (err != ERR_OK) {
 800ba2a:	b1b0      	cbz	r0, 800ba5a <tcp_output+0x1da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ba2c:	8b63      	ldrh	r3, [r4, #26]
 800ba2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba32:	8363      	strh	r3, [r4, #26]
}
 800ba34:	b007      	add	sp, #28
 800ba36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800ba3a:	464a      	mov	r2, r9
 800ba3c:	4639      	mov	r1, r7
 800ba3e:	f240 50b4 	movw	r0, #1460	; 0x5b4
 800ba42:	9304      	str	r3, [sp, #16]
 800ba44:	f7fd ffe4 	bl	8009a10 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ba48:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 800ba4c:	f7fb ff97 	bl	800797e <lwip_htonl>
 800ba50:	9b04      	ldr	r3, [sp, #16]
    opts += 1;
 800ba52:	f103 0218 	add.w	r2, r3, #24
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ba56:	6158      	str	r0, [r3, #20]
    opts += 1;
 800ba58:	e7a7      	b.n	800b9aa <tcp_output+0x12a>
    pcb->unsent = seg->next;
 800ba5a:	682b      	ldr	r3, [r5, #0]
 800ba5c:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800ba5e:	7d23      	ldrb	r3, [r4, #20]
 800ba60:	2b02      	cmp	r3, #2
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ba62:	bf1e      	ittt	ne
 800ba64:	8b63      	ldrhne	r3, [r4, #26]
 800ba66:	f023 0303 	bicne.w	r3, r3, #3
 800ba6a:	8363      	strhne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ba6c:	68eb      	ldr	r3, [r5, #12]
 800ba6e:	6858      	ldr	r0, [r3, #4]
 800ba70:	f7fb ff85 	bl	800797e <lwip_htonl>
 800ba74:	8929      	ldrh	r1, [r5, #8]
 800ba76:	68eb      	ldr	r3, [r5, #12]
 800ba78:	9104      	str	r1, [sp, #16]
 800ba7a:	9005      	str	r0, [sp, #20]
 800ba7c:	8998      	ldrh	r0, [r3, #12]
 800ba7e:	f7fb ff7b 	bl	8007978 <lwip_htons>
 800ba82:	f010 0303 	ands.w	r3, r0, #3
 800ba86:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800ba8a:	bf18      	it	ne
 800ba8c:	2301      	movne	r3, #1
 800ba8e:	440a      	add	r2, r1
 800ba90:	4413      	add	r3, r2
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800ba92:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800ba94:	1ad2      	subs	r2, r2, r3
 800ba96:	2a00      	cmp	r2, #0
    if (TCP_TCPLEN(seg) > 0) {
 800ba98:	68ea      	ldr	r2, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 800ba9a:	bfb8      	it	lt
 800ba9c:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 800ba9e:	892b      	ldrh	r3, [r5, #8]
 800baa0:	9304      	str	r3, [sp, #16]
 800baa2:	8990      	ldrh	r0, [r2, #12]
 800baa4:	f7fb ff68 	bl	8007978 <lwip_htons>
 800baa8:	f010 0003 	ands.w	r0, r0, #3
 800baac:	9b04      	ldr	r3, [sp, #16]
 800baae:	bf18      	it	ne
 800bab0:	2001      	movne	r0, #1
 800bab2:	42d8      	cmn	r0, r3
 800bab4:	f000 8085 	beq.w	800bbc2 <tcp_output+0x342>
      seg->next = NULL;
 800bab8:	2300      	movs	r3, #0
 800baba:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800babc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800babe:	b98b      	cbnz	r3, 800bae4 <tcp_output+0x264>
        pcb->unacked = seg;
 800bac0:	6725      	str	r5, [r4, #112]	; 0x70
          useg->next = seg;
 800bac2:	462e      	mov	r6, r5
 800bac4:	e023      	b.n	800bb0e <tcp_output+0x28e>
 800bac6:	bf00      	nop
 800bac8:	080209e6 	.word	0x080209e6
 800bacc:	08021033 	.word	0x08021033
 800bad0:	0801e3d3 	.word	0x0801e3d3
 800bad4:	0802104b 	.word	0x0802104b
 800bad8:	2400a768 	.word	0x2400a768
 800badc:	2400a758 	.word	0x2400a758
 800bae0:	08021088 	.word	0x08021088
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800bae4:	68eb      	ldr	r3, [r5, #12]
 800bae6:	6858      	ldr	r0, [r3, #4]
 800bae8:	f7fb ff49 	bl	800797e <lwip_htonl>
 800baec:	68f2      	ldr	r2, [r6, #12]
 800baee:	9004      	str	r0, [sp, #16]
 800baf0:	6850      	ldr	r0, [r2, #4]
 800baf2:	f7fb ff44 	bl	800797e <lwip_htonl>
 800baf6:	9b04      	ldr	r3, [sp, #16]
 800baf8:	1a18      	subs	r0, r3, r0
 800bafa:	2800      	cmp	r0, #0
 800bafc:	da5f      	bge.n	800bbbe <tcp_output+0x33e>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800bafe:	f104 0370 	add.w	r3, r4, #112	; 0x70
          while (*cur_seg &&
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	2a00      	cmp	r2, #0
 800bb06:	d149      	bne.n	800bb9c <tcp_output+0x31c>
          seg->next = (*cur_seg);
 800bb08:	681a      	ldr	r2, [r3, #0]
 800bb0a:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 800bb0c:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 800bb0e:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 800bb10:	2d00      	cmp	r5, #0
 800bb12:	d03a      	beq.n	800bb8a <tcp_output+0x30a>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800bb14:	68eb      	ldr	r3, [r5, #12]
 800bb16:	6858      	ldr	r0, [r3, #4]
 800bb18:	f7fb ff31 	bl	800797e <lwip_htonl>
 800bb1c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800bb1e:	1ac0      	subs	r0, r0, r3
 800bb20:	892b      	ldrh	r3, [r5, #8]
 800bb22:	4418      	add	r0, r3
  while (seg != NULL &&
 800bb24:	4540      	cmp	r0, r8
 800bb26:	d82e      	bhi.n	800bb86 <tcp_output+0x306>
    LWIP_ASSERT("RST not expected here!",
 800bb28:	68eb      	ldr	r3, [r5, #12]
 800bb2a:	8998      	ldrh	r0, [r3, #12]
 800bb2c:	f7fb ff24 	bl	8007978 <lwip_htons>
 800bb30:	0741      	lsls	r1, r0, #29
 800bb32:	d506      	bpl.n	800bb42 <tcp_output+0x2c2>
 800bb34:	4653      	mov	r3, sl
 800bb36:	f240 5236 	movw	r2, #1334	; 0x536
 800bb3a:	4925      	ldr	r1, [pc, #148]	; (800bbd0 <tcp_output+0x350>)
 800bb3c:	4658      	mov	r0, fp
 800bb3e:	f000 fd89 	bl	800c654 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800bb42:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f43f af06 	beq.w	800b956 <tcp_output+0xd6>
 800bb4a:	8b62      	ldrh	r2, [r4, #26]
 800bb4c:	f012 0f44 	tst.w	r2, #68	; 0x44
 800bb50:	f47f af01 	bne.w	800b956 <tcp_output+0xd6>
 800bb54:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bb56:	b143      	cbz	r3, 800bb6a <tcp_output+0x2ea>
 800bb58:	6819      	ldr	r1, [r3, #0]
 800bb5a:	2900      	cmp	r1, #0
 800bb5c:	f47f aefb 	bne.w	800b956 <tcp_output+0xd6>
 800bb60:	8919      	ldrh	r1, [r3, #8]
 800bb62:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800bb64:	4299      	cmp	r1, r3
 800bb66:	f4bf aef6 	bcs.w	800b956 <tcp_output+0xd6>
 800bb6a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	f43f aef1 	beq.w	800b956 <tcp_output+0xd6>
 800bb74:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 800bb78:	2b07      	cmp	r3, #7
 800bb7a:	f63f aeec 	bhi.w	800b956 <tcp_output+0xd6>
 800bb7e:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 800bb82:	f47f aee8 	bne.w	800b956 <tcp_output+0xd6>
  if (pcb->unsent == NULL) {
 800bb86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bb88:	b913      	cbnz	r3, 800bb90 <tcp_output+0x310>
    pcb->unsent_oversize = 0;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800bb90:	8b63      	ldrh	r3, [r4, #26]
 800bb92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb96:	8363      	strh	r3, [r4, #26]
    return ERR_OK;
 800bb98:	2000      	movs	r0, #0
 800bb9a:	e74b      	b.n	800ba34 <tcp_output+0x1b4>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bb9c:	68d2      	ldr	r2, [r2, #12]
 800bb9e:	9305      	str	r3, [sp, #20]
 800bba0:	6850      	ldr	r0, [r2, #4]
 800bba2:	f7fb feec 	bl	800797e <lwip_htonl>
 800bba6:	68e9      	ldr	r1, [r5, #12]
 800bba8:	9004      	str	r0, [sp, #16]
 800bbaa:	6848      	ldr	r0, [r1, #4]
 800bbac:	f7fb fee7 	bl	800797e <lwip_htonl>
 800bbb0:	9a04      	ldr	r2, [sp, #16]
          while (*cur_seg &&
 800bbb2:	9b05      	ldr	r3, [sp, #20]
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800bbb4:	1a10      	subs	r0, r2, r0
          while (*cur_seg &&
 800bbb6:	2800      	cmp	r0, #0
 800bbb8:	daa6      	bge.n	800bb08 <tcp_output+0x288>
            cur_seg = &((*cur_seg)->next );
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	e7a1      	b.n	800bb02 <tcp_output+0x282>
          useg->next = seg;
 800bbbe:	6035      	str	r5, [r6, #0]
 800bbc0:	e77f      	b.n	800bac2 <tcp_output+0x242>
      tcp_seg_free(seg);
 800bbc2:	4628      	mov	r0, r5
 800bbc4:	f7fd f8b6 	bl	8008d34 <tcp_seg_free>
 800bbc8:	e7a1      	b.n	800bb0e <tcp_output+0x28e>
    return ERR_RTE;
 800bbca:	f06f 0003 	mvn.w	r0, #3
 800bbce:	e731      	b.n	800ba34 <tcp_output+0x1b4>
 800bbd0:	08021071 	.word	0x08021071

0800bbd4 <tcp_rexmit_rto_commit>:
{
 800bbd4:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800bbd6:	4604      	mov	r4, r0
 800bbd8:	b930      	cbnz	r0, 800bbe8 <tcp_rexmit_rto_commit+0x14>
 800bbda:	4b09      	ldr	r3, [pc, #36]	; (800bc00 <tcp_rexmit_rto_commit+0x2c>)
 800bbdc:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800bbe0:	4908      	ldr	r1, [pc, #32]	; (800bc04 <tcp_rexmit_rto_commit+0x30>)
 800bbe2:	4809      	ldr	r0, [pc, #36]	; (800bc08 <tcp_rexmit_rto_commit+0x34>)
 800bbe4:	f000 fd36 	bl	800c654 <iprintf>
  if (pcb->nrtx < 0xFF) {
 800bbe8:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 800bbec:	4620      	mov	r0, r4
  if (pcb->nrtx < 0xFF) {
 800bbee:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 800bbf0:	bf1c      	itt	ne
 800bbf2:	3301      	addne	r3, #1
 800bbf4:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
}
 800bbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 800bbfc:	f7ff be40 	b.w	800b880 <tcp_output>
 800bc00:	080209e6 	.word	0x080209e6
 800bc04:	0802109b 	.word	0x0802109b
 800bc08:	0801e3d3 	.word	0x0801e3d3

0800bc0c <tcp_rexmit_rto>:
{
 800bc0c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800bc0e:	4604      	mov	r4, r0
 800bc10:	b930      	cbnz	r0, 800bc20 <tcp_rexmit_rto+0x14>
 800bc12:	4b08      	ldr	r3, [pc, #32]	; (800bc34 <tcp_rexmit_rto+0x28>)
 800bc14:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800bc18:	4907      	ldr	r1, [pc, #28]	; (800bc38 <tcp_rexmit_rto+0x2c>)
 800bc1a:	4808      	ldr	r0, [pc, #32]	; (800bc3c <tcp_rexmit_rto+0x30>)
 800bc1c:	f000 fd1a 	bl	800c654 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800bc20:	4620      	mov	r0, r4
 800bc22:	f7ff fcfd 	bl	800b620 <tcp_rexmit_rto_prepare>
 800bc26:	b920      	cbnz	r0, 800bc32 <tcp_rexmit_rto+0x26>
    tcp_rexmit_rto_commit(pcb);
 800bc28:	4620      	mov	r0, r4
}
 800bc2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 800bc2e:	f7ff bfd1 	b.w	800bbd4 <tcp_rexmit_rto_commit>
}
 800bc32:	bd10      	pop	{r4, pc}
 800bc34:	080209e6 	.word	0x080209e6
 800bc38:	080210be 	.word	0x080210be
 800bc3c:	0801e3d3 	.word	0x0801e3d3

0800bc40 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800bc40:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800bc42:	4604      	mov	r4, r0
 800bc44:	b930      	cbnz	r0, 800bc54 <tcp_keepalive+0x14>
 800bc46:	4b0f      	ldr	r3, [pc, #60]	; (800bc84 <tcp_keepalive+0x44>)
 800bc48:	f640 0224 	movw	r2, #2084	; 0x824
 800bc4c:	490e      	ldr	r1, [pc, #56]	; (800bc88 <tcp_keepalive+0x48>)
 800bc4e:	480f      	ldr	r0, [pc, #60]	; (800bc8c <tcp_keepalive+0x4c>)
 800bc50:	f000 fd00 	bl	800c654 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800bc54:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800bc56:	3801      	subs	r0, #1
 800bc58:	f7fb fe91 	bl	800797e <lwip_htonl>
 800bc5c:	2100      	movs	r1, #0
 800bc5e:	4602      	mov	r2, r0
 800bc60:	4620      	mov	r0, r4
 800bc62:	f7ff f83f 	bl	800ace4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800bc66:	4605      	mov	r5, r0
 800bc68:	b148      	cbz	r0, 800bc7e <tcp_keepalive+0x3e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bc6a:	f7ff f861 	bl	800ad30 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bc6e:	1d23      	adds	r3, r4, #4
 800bc70:	4622      	mov	r2, r4
 800bc72:	4629      	mov	r1, r5
 800bc74:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800bc76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bc7a:	f7ff b869 	b.w	800ad50 <tcp_output_control_segment>
}
 800bc7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bc82:	bd70      	pop	{r4, r5, r6, pc}
 800bc84:	080209e6 	.word	0x080209e6
 800bc88:	080210da 	.word	0x080210da
 800bc8c:	0801e3d3 	.word	0x0801e3d3

0800bc90 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800bc90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800bc94:	4606      	mov	r6, r0
 800bc96:	b930      	cbnz	r0, 800bca6 <tcp_zero_window_probe+0x16>
 800bc98:	4b2c      	ldr	r3, [pc, #176]	; (800bd4c <tcp_zero_window_probe+0xbc>)
 800bc9a:	f640 024f 	movw	r2, #2127	; 0x84f
 800bc9e:	492c      	ldr	r1, [pc, #176]	; (800bd50 <tcp_zero_window_probe+0xc0>)
 800bca0:	482c      	ldr	r0, [pc, #176]	; (800bd54 <tcp_zero_window_probe+0xc4>)
 800bca2:	f000 fcd7 	bl	800c654 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800bca6:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
  if (seg == NULL) {
 800bca8:	2d00      	cmp	r5, #0
 800bcaa:	d048      	beq.n	800bd3e <tcp_zero_window_probe+0xae>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800bcac:	f896 3096 	ldrb.w	r3, [r6, #150]	; 0x96
 800bcb0:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->persist_probe;
 800bcb2:	bf1c      	itt	ne
 800bcb4:	3301      	addne	r3, #1
 800bcb6:	f886 3096 	strbne.w	r3, [r6, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bcba:	68eb      	ldr	r3, [r5, #12]
 800bcbc:	8998      	ldrh	r0, [r3, #12]
 800bcbe:	f7fb fe5b 	bl	8007978 <lwip_htons>
 800bcc2:	f010 0401 	ands.w	r4, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bcc6:	68eb      	ldr	r3, [r5, #12]
 800bcc8:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bcca:	bf18      	it	ne
 800bccc:	892c      	ldrhne	r4, [r5, #8]
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bcce:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800bcd0:	bf1c      	itt	ne
 800bcd2:	fab4 f484 	clzne	r4, r4
 800bcd6:	0964      	lsrne	r4, r4, #5
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800bcd8:	f084 0101 	eor.w	r1, r4, #1
 800bcdc:	f7ff f802 	bl	800ace4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800bce0:	4607      	mov	r7, r0
 800bce2:	b378      	cbz	r0, 800bd44 <tcp_zero_window_probe+0xb4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800bce4:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800bce8:	b1f4      	cbz	r4, 800bd28 <tcp_zero_window_probe+0x98>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800bcea:	f9b8 400c 	ldrsh.w	r4, [r8, #12]
 800bcee:	2011      	movs	r0, #17
 800bcf0:	f7fb fe42 	bl	8007978 <lwip_htons>
 800bcf4:	f424 547c 	bic.w	r4, r4, #16128	; 0x3f00
 800bcf8:	4320      	orrs	r0, r4
 800bcfa:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bcfe:	68eb      	ldr	r3, [r5, #12]
 800bd00:	6858      	ldr	r0, [r3, #4]
 800bd02:	f7fb fe3c 	bl	800797e <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bd06:	6d33      	ldr	r3, [r6, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800bd08:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800bd0a:	1a1b      	subs	r3, r3, r0
 800bd0c:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800bd0e:	bfb8      	it	lt
 800bd10:	6530      	strlt	r0, [r6, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bd12:	4638      	mov	r0, r7
 800bd14:	f7ff f80c 	bl	800ad30 <tcp_output_fill_options.isra.0.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bd18:	1d33      	adds	r3, r6, #4
 800bd1a:	4632      	mov	r2, r6
 800bd1c:	4639      	mov	r1, r7
 800bd1e:	4630      	mov	r0, r6

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800bd20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bd24:	f7ff b814 	b.w	800ad50 <tcp_output_control_segment>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bd28:	6868      	ldr	r0, [r5, #4]
 800bd2a:	f108 0114 	add.w	r1, r8, #20
 800bd2e:	892a      	ldrh	r2, [r5, #8]
 800bd30:	8903      	ldrh	r3, [r0, #8]
 800bd32:	1a9b      	subs	r3, r3, r2
 800bd34:	2201      	movs	r2, #1
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	f7fc fdec 	bl	8008914 <pbuf_copy_partial>
 800bd3c:	e7df      	b.n	800bcfe <tcp_zero_window_probe+0x6e>
    return ERR_OK;
 800bd3e:	4628      	mov	r0, r5
}
 800bd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_MEM;
 800bd44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd48:	e7fa      	b.n	800bd40 <tcp_zero_window_probe+0xb0>
 800bd4a:	bf00      	nop
 800bd4c:	080209e6 	.word	0x080209e6
 800bd50:	080210f5 	.word	0x080210f5
 800bd54:	0801e3d3 	.word	0x0801e3d3

0800bd58 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bd58:	b570      	push	{r4, r5, r6, lr}
 800bd5a:	4604      	mov	r4, r0
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bd5c:	200a      	movs	r0, #10
{
 800bd5e:	460e      	mov	r6, r1
 800bd60:	4615      	mov	r5, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bd62:	f7fc f923 	bl	8007fac <memp_malloc>
  if (timeout == NULL) {
 800bd66:	b938      	cbnz	r0, 800bd78 <sys_timeout_abs+0x20>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bd68:	4b10      	ldr	r3, [pc, #64]	; (800bdac <sys_timeout_abs+0x54>)
 800bd6a:	22be      	movs	r2, #190	; 0xbe
 800bd6c:	4910      	ldr	r1, [pc, #64]	; (800bdb0 <sys_timeout_abs+0x58>)
 800bd6e:	4811      	ldr	r0, [pc, #68]	; (800bdb4 <sys_timeout_abs+0x5c>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800bd70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bd74:	f000 bc6e 	b.w	800c654 <iprintf>
  timeout->next = NULL;
 800bd78:	2300      	movs	r3, #0
  if (next_timeout == NULL) {
 800bd7a:	4a0f      	ldr	r2, [pc, #60]	; (800bdb8 <sys_timeout_abs+0x60>)
  timeout->time = abs_time;
 800bd7c:	6044      	str	r4, [r0, #4]
  timeout->next = NULL;
 800bd7e:	6003      	str	r3, [r0, #0]
  if (next_timeout == NULL) {
 800bd80:	6813      	ldr	r3, [r2, #0]
  timeout->arg = arg;
 800bd82:	e9c0 6502 	strd	r6, r5, [r0, #8]
  if (next_timeout == NULL) {
 800bd86:	b90b      	cbnz	r3, 800bd8c <sys_timeout_abs+0x34>
    next_timeout = timeout;
 800bd88:	6010      	str	r0, [r2, #0]
}
 800bd8a:	bd70      	pop	{r4, r5, r6, pc}
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bd8c:	6859      	ldr	r1, [r3, #4]
 800bd8e:	1a61      	subs	r1, r4, r1
 800bd90:	2900      	cmp	r1, #0
 800bd92:	da01      	bge.n	800bd98 <sys_timeout_abs+0x40>
    timeout->next = next_timeout;
 800bd94:	6003      	str	r3, [r0, #0]
 800bd96:	e7f7      	b.n	800bd88 <sys_timeout_abs+0x30>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bd98:	4619      	mov	r1, r3
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	b11b      	cbz	r3, 800bda6 <sys_timeout_abs+0x4e>
 800bd9e:	685a      	ldr	r2, [r3, #4]
 800bda0:	1aa2      	subs	r2, r4, r2
 800bda2:	2a00      	cmp	r2, #0
 800bda4:	daf8      	bge.n	800bd98 <sys_timeout_abs+0x40>
        timeout->next = t->next;
 800bda6:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 800bda8:	6008      	str	r0, [r1, #0]
        break;
 800bdaa:	e7ee      	b.n	800bd8a <sys_timeout_abs+0x32>
 800bdac:	08021118 	.word	0x08021118
 800bdb0:	0802118f 	.word	0x0802118f
 800bdb4:	0801e3d3 	.word	0x0801e3d3
 800bdb8:	240067d8 	.word	0x240067d8

0800bdbc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bdbc:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bdbe:	6843      	ldr	r3, [r0, #4]
{
 800bdc0:	4604      	mov	r4, r0
  cyclic->handler();
 800bdc2:	4798      	blx	r3

  now = sys_now();
 800bdc4:	f7f4 fcae 	bl	8000724 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bdc8:	4b07      	ldr	r3, [pc, #28]	; (800bde8 <lwip_cyclic_timer+0x2c>)
 800bdca:	6825      	ldr	r5, [r4, #0]
 800bdcc:	685b      	ldr	r3, [r3, #4]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bdce:	4907      	ldr	r1, [pc, #28]	; (800bdec <lwip_cyclic_timer+0x30>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bdd0:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bdd2:	1a1a      	subs	r2, r3, r0
 800bdd4:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bdd6:	4622      	mov	r2, r4
 800bdd8:	bfb4      	ite	lt
 800bdda:	1940      	addlt	r0, r0, r5
  } else {
    /* correct cyclic interval with handler execution delay and sys_check_timeouts jitter */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bddc:	4618      	movge	r0, r3
#endif
  }
}
 800bdde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bde2:	f7ff bfb9 	b.w	800bd58 <sys_timeout_abs>
 800bde6:	bf00      	nop
 800bde8:	240067d8 	.word	0x240067d8
 800bdec:	0800bdbd 	.word	0x0800bdbd

0800bdf0 <sys_timeout>:
{
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bdf0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800bdf4:	b570      	push	{r4, r5, r6, lr}
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	460d      	mov	r5, r1
 800bdfa:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bdfc:	d306      	bcc.n	800be0c <sys_timeout+0x1c>
 800bdfe:	4b08      	ldr	r3, [pc, #32]	; (800be20 <sys_timeout+0x30>)
 800be00:	f240 1229 	movw	r2, #297	; 0x129
 800be04:	4907      	ldr	r1, [pc, #28]	; (800be24 <sys_timeout+0x34>)
 800be06:	4808      	ldr	r0, [pc, #32]	; (800be28 <sys_timeout+0x38>)
 800be08:	f000 fc24 	bl	800c654 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800be0c:	f7f4 fc8a 	bl	8000724 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800be10:	4632      	mov	r2, r6
 800be12:	4629      	mov	r1, r5
 800be14:	4420      	add	r0, r4
#endif
}
 800be16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 800be1a:	f7ff bf9d 	b.w	800bd58 <sys_timeout_abs>
 800be1e:	bf00      	nop
 800be20:	08021118 	.word	0x08021118
 800be24:	080211cc 	.word	0x080211cc
 800be28:	0801e3d3 	.word	0x0801e3d3

0800be2c <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800be2c:	4b08      	ldr	r3, [pc, #32]	; (800be50 <tcp_timer_needed+0x24>)
 800be2e:	689a      	ldr	r2, [r3, #8]
 800be30:	b962      	cbnz	r2, 800be4c <tcp_timer_needed+0x20>
 800be32:	4a08      	ldr	r2, [pc, #32]	; (800be54 <tcp_timer_needed+0x28>)
 800be34:	6812      	ldr	r2, [r2, #0]
 800be36:	b912      	cbnz	r2, 800be3e <tcp_timer_needed+0x12>
 800be38:	4a07      	ldr	r2, [pc, #28]	; (800be58 <tcp_timer_needed+0x2c>)
 800be3a:	6812      	ldr	r2, [r2, #0]
 800be3c:	b132      	cbz	r2, 800be4c <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800be3e:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800be40:	4906      	ldr	r1, [pc, #24]	; (800be5c <tcp_timer_needed+0x30>)
 800be42:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800be44:	609a      	str	r2, [r3, #8]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800be46:	2200      	movs	r2, #0
 800be48:	f7ff bfd2 	b.w	800bdf0 <sys_timeout>
}
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop
 800be50:	240067d8 	.word	0x240067d8
 800be54:	2400a754 	.word	0x2400a754
 800be58:	2400a764 	.word	0x2400a764
 800be5c:	0800be61 	.word	0x0800be61

0800be60 <tcpip_tcp_timer>:
{
 800be60:	b508      	push	{r3, lr}
  tcp_tmr();
 800be62:	f7fd fbff 	bl	8009664 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800be66:	4b08      	ldr	r3, [pc, #32]	; (800be88 <tcpip_tcp_timer+0x28>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	b913      	cbnz	r3, 800be72 <tcpip_tcp_timer+0x12>
 800be6c:	4b07      	ldr	r3, [pc, #28]	; (800be8c <tcpip_tcp_timer+0x2c>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	b133      	cbz	r3, 800be80 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800be72:	2200      	movs	r2, #0
 800be74:	4906      	ldr	r1, [pc, #24]	; (800be90 <tcpip_tcp_timer+0x30>)
 800be76:	20fa      	movs	r0, #250	; 0xfa
}
 800be78:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800be7c:	f7ff bfb8 	b.w	800bdf0 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800be80:	4a04      	ldr	r2, [pc, #16]	; (800be94 <tcpip_tcp_timer+0x34>)
 800be82:	6093      	str	r3, [r2, #8]
}
 800be84:	bd08      	pop	{r3, pc}
 800be86:	bf00      	nop
 800be88:	2400a754 	.word	0x2400a754
 800be8c:	2400a764 	.word	0x2400a764
 800be90:	0800be61 	.word	0x0800be61
 800be94:	240067d8 	.word	0x240067d8

0800be98 <sys_timeouts_init>:
{
 800be98:	b510      	push	{r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800be9a:	4c08      	ldr	r4, [pc, #32]	; (800bebc <sys_timeouts_init+0x24>)
 800be9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bea0:	4907      	ldr	r1, [pc, #28]	; (800bec0 <sys_timeouts_init+0x28>)
 800bea2:	f104 0208 	add.w	r2, r4, #8
 800bea6:	f7ff ffa3 	bl	800bdf0 <sys_timeout>
 800beaa:	f104 0210 	add.w	r2, r4, #16
 800beae:	4904      	ldr	r1, [pc, #16]	; (800bec0 <sys_timeouts_init+0x28>)
 800beb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 800beb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800beb8:	f7ff bf9a 	b.w	800bdf0 <sys_timeout>
 800bebc:	0800e308 	.word	0x0800e308
 800bec0:	0800bdbd 	.word	0x0800bdbd

0800bec4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bec6:	f7f4 fc2d 	bl	8000724 <sys_now>
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800beca:	4d0b      	ldr	r5, [pc, #44]	; (800bef8 <sys_check_timeouts+0x34>)
  now = sys_now();
 800becc:	4604      	mov	r4, r0
    tmptimeout = next_timeout;
 800bece:	6829      	ldr	r1, [r5, #0]
    if (tmptimeout == NULL) {
 800bed0:	b181      	cbz	r1, 800bef4 <sys_check_timeouts+0x30>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bed2:	684b      	ldr	r3, [r1, #4]
 800bed4:	1ae2      	subs	r2, r4, r3
 800bed6:	2a00      	cmp	r2, #0
 800bed8:	db0c      	blt.n	800bef4 <sys_check_timeouts+0x30>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800beda:	680a      	ldr	r2, [r1, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bedc:	200a      	movs	r0, #10
    current_timeout_due_time = tmptimeout->time;
 800bede:	606b      	str	r3, [r5, #4]
    next_timeout = tmptimeout->next;
 800bee0:	602a      	str	r2, [r5, #0]
    arg = tmptimeout->arg;
 800bee2:	e9d1 6702 	ldrd	r6, r7, [r1, #8]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bee6:	f7fc f891 	bl	800800c <memp_free>
    if (handler != NULL) {
 800beea:	2e00      	cmp	r6, #0
 800beec:	d0ef      	beq.n	800bece <sys_check_timeouts+0xa>
      handler(arg);
 800beee:	4638      	mov	r0, r7
 800bef0:	47b0      	blx	r6
 800bef2:	e7ec      	b.n	800bece <sys_check_timeouts+0xa>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bef4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bef6:	bf00      	nop
 800bef8:	240067d8 	.word	0x240067d8

0800befc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 800befc:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 800befe:	4c07      	ldr	r4, [pc, #28]	; (800bf1c <sys_timeouts_sleeptime+0x20>)
 800bf00:	6823      	ldr	r3, [r4, #0]
 800bf02:	b13b      	cbz	r3, 800bf14 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 800bf04:	f7f4 fc0e 	bl	8000724 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 800bf08:	6823      	ldr	r3, [r4, #0]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	1a18      	subs	r0, r3, r0
    return 0;
 800bf0e:	bf48      	it	mi
 800bf10:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 800bf12:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 800bf14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bf18:	e7fb      	b.n	800bf12 <sys_timeouts_sleeptime+0x16>
 800bf1a:	bf00      	nop
 800bf1c:	240067d8 	.word	0x240067d8

0800bf20 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800bf20:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800bf22:	f000 fbaf 	bl	800c684 <rand>
 800bf26:	ea6f 4080 	mvn.w	r0, r0, lsl #18
 800bf2a:	4b02      	ldr	r3, [pc, #8]	; (800bf34 <udp_init+0x14>)
 800bf2c:	ea6f 4090 	mvn.w	r0, r0, lsr #18
 800bf30:	8018      	strh	r0, [r3, #0]
#endif /* LWIP_RAND */
}
 800bf32:	bd08      	pop	{r3, pc}
 800bf34:	24000030 	.word	0x24000030

0800bf38 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bf38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf3c:	4688      	mov	r8, r1
 800bf3e:	b085      	sub	sp, #20

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bf40:	4607      	mov	r7, r0
 800bf42:	b928      	cbnz	r0, 800bf50 <udp_input+0x18>
 800bf44:	4b5f      	ldr	r3, [pc, #380]	; (800c0c4 <udp_input+0x18c>)
 800bf46:	22cf      	movs	r2, #207	; 0xcf
 800bf48:	495f      	ldr	r1, [pc, #380]	; (800c0c8 <udp_input+0x190>)
 800bf4a:	4860      	ldr	r0, [pc, #384]	; (800c0cc <udp_input+0x194>)
 800bf4c:	f000 fb82 	bl	800c654 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bf50:	f1b8 0f00 	cmp.w	r8, #0
 800bf54:	d105      	bne.n	800bf62 <udp_input+0x2a>
 800bf56:	4b5b      	ldr	r3, [pc, #364]	; (800c0c4 <udp_input+0x18c>)
 800bf58:	22d0      	movs	r2, #208	; 0xd0
 800bf5a:	495d      	ldr	r1, [pc, #372]	; (800c0d0 <udp_input+0x198>)
 800bf5c:	485b      	ldr	r0, [pc, #364]	; (800c0cc <udp_input+0x194>)
 800bf5e:	f000 fb79 	bl	800c654 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bf62:	897b      	ldrh	r3, [r7, #10]
 800bf64:	2b07      	cmp	r3, #7
 800bf66:	d805      	bhi.n	800bf74 <udp_input+0x3c>
    if (pbuf_remove_header(p, UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800bf68:	4638      	mov	r0, r7
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800bf6a:	b005      	add	sp, #20
 800bf6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800bf70:	f7fc bab6 	b.w	80084e0 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bf74:	4e57      	ldr	r6, [pc, #348]	; (800c0d4 <udp_input+0x19c>)
  uncon_pcb = NULL;
 800bf76:	2500      	movs	r5, #0
  udphdr = (struct udp_hdr *)p->payload;
 800bf78:	687c      	ldr	r4, [r7, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bf7a:	6831      	ldr	r1, [r6, #0]
  prev = NULL;
 800bf7c:	46ab      	mov	fp, r5
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bf7e:	6970      	ldr	r0, [r6, #20]
 800bf80:	f7fb f909 	bl	8007196 <ip4_addr_isbroadcast_u32>
 800bf84:	4681      	mov	r9, r0
  src = lwip_ntohs(udphdr->src);
 800bf86:	8820      	ldrh	r0, [r4, #0]
 800bf88:	f7fb fcf6 	bl	8007978 <lwip_htons>
 800bf8c:	9002      	str	r0, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 800bf8e:	8860      	ldrh	r0, [r4, #2]
 800bf90:	f7fb fcf2 	bl	8007978 <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf94:	4b50      	ldr	r3, [pc, #320]	; (800c0d8 <udp_input+0x1a0>)
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bf96:	f8df c12c 	ldr.w	ip, [pc, #300]	; 800c0c4 <udp_input+0x18c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bf9a:	681c      	ldr	r4, [r3, #0]
 800bf9c:	469a      	mov	sl, r3
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bf9e:	494f      	ldr	r1, [pc, #316]	; (800c0dc <udp_input+0x1a4>)
  dest = lwip_ntohs(udphdr->dest);
 800bfa0:	9003      	str	r0, [sp, #12]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bfa2:	b99c      	cbnz	r4, 800bfcc <udp_input+0x94>
  if (pcb != NULL) {
 800bfa4:	b925      	cbnz	r5, 800bfb0 <udp_input+0x78>
  if (for_us) {
 800bfa6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800bfaa:	6973      	ldr	r3, [r6, #20]
 800bfac:	429a      	cmp	r2, r3
 800bfae:	d1db      	bne.n	800bf68 <udp_input+0x30>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800bfb0:	2108      	movs	r1, #8
 800bfb2:	4638      	mov	r0, r7
 800bfb4:	f7fc fa60 	bl	8008478 <pbuf_remove_header>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d05e      	beq.n	800c07a <udp_input+0x142>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800bfbc:	4b41      	ldr	r3, [pc, #260]	; (800c0c4 <udp_input+0x18c>)
 800bfbe:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800bfc2:	4947      	ldr	r1, [pc, #284]	; (800c0e0 <udp_input+0x1a8>)
 800bfc4:	4841      	ldr	r0, [pc, #260]	; (800c0cc <udp_input+0x194>)
 800bfc6:	f000 fb45 	bl	800c654 <iprintf>
 800bfca:	e7cd      	b.n	800bf68 <udp_input+0x30>
    if ((pcb->local_port == dest) &&
 800bfcc:	8a62      	ldrh	r2, [r4, #18]
 800bfce:	9803      	ldr	r0, [sp, #12]
 800bfd0:	4282      	cmp	r2, r0
 800bfd2:	d14d      	bne.n	800c070 <udp_input+0x138>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bfd4:	f1b8 0f00 	cmp.w	r8, #0
 800bfd8:	d107      	bne.n	800bfea <udp_input+0xb2>
 800bfda:	4663      	mov	r3, ip
 800bfdc:	2288      	movs	r2, #136	; 0x88
 800bfde:	483b      	ldr	r0, [pc, #236]	; (800c0cc <udp_input+0x194>)
 800bfe0:	f000 fb38 	bl	800c654 <iprintf>
 800bfe4:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800c0c4 <udp_input+0x18c>
 800bfe8:	493c      	ldr	r1, [pc, #240]	; (800c0dc <udp_input+0x1a4>)
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bfea:	7a20      	ldrb	r0, [r4, #8]
 800bfec:	b130      	cbz	r0, 800bffc <udp_input+0xc4>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bfee:	6872      	ldr	r2, [r6, #4]
 800bff0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800bff4:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bff6:	b2d2      	uxtb	r2, r2
 800bff8:	4290      	cmp	r0, r2
 800bffa:	d139      	bne.n	800c070 <udp_input+0x138>
    if (broadcast != 0) {
 800bffc:	6822      	ldr	r2, [r4, #0]
 800bffe:	f1b9 0f00 	cmp.w	r9, #0
 800c002:	d030      	beq.n	800c066 <udp_input+0x12e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c004:	b13a      	cbz	r2, 800c016 <udp_input+0xde>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c006:	6970      	ldr	r0, [r6, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c008:	1c43      	adds	r3, r0, #1
 800c00a:	d004      	beq.n	800c016 <udp_input+0xde>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800c00c:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800c00e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c012:	4218      	tst	r0, r3
 800c014:	d12c      	bne.n	800c070 <udp_input+0x138>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c016:	7c20      	ldrb	r0, [r4, #16]
 800c018:	0743      	lsls	r3, r0, #29
 800c01a:	d40e      	bmi.n	800c03a <udp_input+0x102>
        if (uncon_pcb == NULL) {
 800c01c:	b35d      	cbz	r5, 800c076 <udp_input+0x13e>
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c01e:	f1b9 0f00 	cmp.w	r9, #0
 800c022:	d00a      	beq.n	800c03a <udp_input+0x102>
 800c024:	6970      	ldr	r0, [r6, #20]
 800c026:	3001      	adds	r0, #1
 800c028:	d107      	bne.n	800c03a <udp_input+0x102>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c02a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c02e:	682b      	ldr	r3, [r5, #0]
 800c030:	4283      	cmp	r3, r0
 800c032:	d002      	beq.n	800c03a <udp_input+0x102>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c034:	4290      	cmp	r0, r2
 800c036:	bf08      	it	eq
 800c038:	4625      	moveq	r5, r4
      if ((pcb->remote_port == src) &&
 800c03a:	8aa2      	ldrh	r2, [r4, #20]
 800c03c:	9b02      	ldr	r3, [sp, #8]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d116      	bne.n	800c070 <udp_input+0x138>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c042:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 800c044:	b112      	cbz	r2, 800c04c <udp_input+0x114>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c046:	6930      	ldr	r0, [r6, #16]
 800c048:	4282      	cmp	r2, r0
 800c04a:	d111      	bne.n	800c070 <udp_input+0x138>
        if (prev != NULL) {
 800c04c:	f1bb 0f00 	cmp.w	fp, #0
 800c050:	d007      	beq.n	800c062 <udp_input+0x12a>
          prev->next = pcb->next;
 800c052:	68e3      	ldr	r3, [r4, #12]
 800c054:	f8cb 300c 	str.w	r3, [fp, #12]
          pcb->next = udp_pcbs;
 800c058:	f8da 3000 	ldr.w	r3, [sl]
          udp_pcbs = pcb;
 800c05c:	f8ca 4000 	str.w	r4, [sl]
          pcb->next = udp_pcbs;
 800c060:	60e3      	str	r3, [r4, #12]
          udp_pcbs = pcb;
 800c062:	4625      	mov	r5, r4
 800c064:	e7a4      	b.n	800bfb0 <udp_input+0x78>
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c066:	2a00      	cmp	r2, #0
 800c068:	d0d5      	beq.n	800c016 <udp_input+0xde>
 800c06a:	6970      	ldr	r0, [r6, #20]
 800c06c:	4290      	cmp	r0, r2
 800c06e:	d0d2      	beq.n	800c016 <udp_input+0xde>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c070:	46a3      	mov	fp, r4
 800c072:	68e4      	ldr	r4, [r4, #12]
 800c074:	e795      	b.n	800bfa2 <udp_input+0x6a>
 800c076:	4625      	mov	r5, r4
 800c078:	e7df      	b.n	800c03a <udp_input+0x102>
    if (pcb != NULL) {
 800c07a:	b16d      	cbz	r5, 800c098 <udp_input+0x160>
      if (pcb->recv != NULL) {
 800c07c:	69ac      	ldr	r4, [r5, #24]
 800c07e:	2c00      	cmp	r4, #0
 800c080:	f43f af72 	beq.w	800bf68 <udp_input+0x30>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c084:	9b02      	ldr	r3, [sp, #8]
 800c086:	463a      	mov	r2, r7
 800c088:	4629      	mov	r1, r5
 800c08a:	9300      	str	r3, [sp, #0]
 800c08c:	4b15      	ldr	r3, [pc, #84]	; (800c0e4 <udp_input+0x1ac>)
 800c08e:	69e8      	ldr	r0, [r5, #28]
 800c090:	47a0      	blx	r4
}
 800c092:	b005      	add	sp, #20
 800c094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c098:	f1b9 0f00 	cmp.w	r9, #0
 800c09c:	f47f af64 	bne.w	800bf68 <udp_input+0x30>
 800c0a0:	6973      	ldr	r3, [r6, #20]
 800c0a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c0a6:	2be0      	cmp	r3, #224	; 0xe0
 800c0a8:	f43f af5e 	beq.w	800bf68 <udp_input+0x30>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c0ac:	89b1      	ldrh	r1, [r6, #12]
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	3108      	adds	r1, #8
 800c0b2:	b209      	sxth	r1, r1
 800c0b4:	f7fc fa0c 	bl	80084d0 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c0b8:	2103      	movs	r1, #3
 800c0ba:	4638      	mov	r0, r7
 800c0bc:	f7fa feda 	bl	8006e74 <icmp_dest_unreach>
 800c0c0:	e752      	b.n	800bf68 <udp_input+0x30>
 800c0c2:	bf00      	nop
 800c0c4:	08021202 	.word	0x08021202
 800c0c8:	08021274 	.word	0x08021274
 800c0cc:	0801e3d3 	.word	0x0801e3d3
 800c0d0:	0802128c 	.word	0x0802128c
 800c0d4:	24006a14 	.word	0x24006a14
 800c0d8:	2400a76c 	.word	0x2400a76c
 800c0dc:	080212a5 	.word	0x080212a5
 800c0e0:	080212ca 	.word	0x080212ca
 800c0e4:	24006a24 	.word	0x24006a24

0800c0e8 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800c0e8:	4b2d      	ldr	r3, [pc, #180]	; (800c1a0 <udp_bind+0xb8>)
{
 800c0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800c0ee:	2900      	cmp	r1, #0
 800c0f0:	bf08      	it	eq
 800c0f2:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c0f4:	b950      	cbnz	r0, 800c10c <udp_bind+0x24>
 800c0f6:	4b2b      	ldr	r3, [pc, #172]	; (800c1a4 <udp_bind+0xbc>)
 800c0f8:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c0fc:	492a      	ldr	r1, [pc, #168]	; (800c1a8 <udp_bind+0xc0>)
 800c0fe:	482b      	ldr	r0, [pc, #172]	; (800c1ac <udp_bind+0xc4>)
 800c100:	f000 faa8 	bl	800c654 <iprintf>
 800c104:	f06f 000f 	mvn.w	r0, #15
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 800c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c10c:	4f28      	ldr	r7, [pc, #160]	; (800c1b0 <udp_bind+0xc8>)
 800c10e:	683e      	ldr	r6, [r7, #0]
 800c110:	4635      	mov	r5, r6
 800c112:	b9d5      	cbnz	r5, 800c14a <udp_bind+0x62>
  if (port == 0) {
 800c114:	2a00      	cmp	r2, #0
 800c116:	d140      	bne.n	800c19a <udp_bind+0xb2>
 800c118:	4b26      	ldr	r3, [pc, #152]	; (800c1b4 <udp_bind+0xcc>)
 800c11a:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c11e:	f64f 7eff 	movw	lr, #65535	; 0xffff
 800c122:	881a      	ldrh	r2, [r3, #0]
 800c124:	4572      	cmp	r2, lr
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c126:	46b4      	mov	ip, r6
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c128:	bf16      	itet	ne
 800c12a:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800c12c:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800c130:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c132:	f1bc 0f00 	cmp.w	ip, #0
 800c136:	d10e      	bne.n	800c156 <udp_bind+0x6e>
 800c138:	801a      	strh	r2, [r3, #0]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c13a:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 800c13c:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c13e:	6003      	str	r3, [r0, #0]
  if (rebind == 0) {
 800c140:	b90d      	cbnz	r5, 800c146 <udp_bind+0x5e>
    pcb->next = udp_pcbs;
 800c142:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 800c144:	6038      	str	r0, [r7, #0]
  return ERR_OK;
 800c146:	2000      	movs	r0, #0
 800c148:	e7de      	b.n	800c108 <udp_bind+0x20>
    if (pcb == ipcb) {
 800c14a:	4285      	cmp	r5, r0
 800c14c:	d001      	beq.n	800c152 <udp_bind+0x6a>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c14e:	68ed      	ldr	r5, [r5, #12]
 800c150:	e7df      	b.n	800c112 <udp_bind+0x2a>
      rebind = 1;
 800c152:	2501      	movs	r5, #1
 800c154:	e7de      	b.n	800c114 <udp_bind+0x2c>
    if (pcb->local_port == udp_port) {
 800c156:	f8bc 8012 	ldrh.w	r8, [ip, #18]
 800c15a:	4590      	cmp	r8, r2
 800c15c:	d107      	bne.n	800c16e <udp_bind+0x86>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800c15e:	3c01      	subs	r4, #1
 800c160:	b2a4      	uxth	r4, r4
 800c162:	2c00      	cmp	r4, #0
 800c164:	d1de      	bne.n	800c124 <udp_bind+0x3c>
 800c166:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800c168:	f06f 0007 	mvn.w	r0, #7
 800c16c:	e7cc      	b.n	800c108 <udp_bind+0x20>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c16e:	f8dc c00c 	ldr.w	ip, [ip, #12]
 800c172:	e7de      	b.n	800c132 <udp_bind+0x4a>
      if (pcb != ipcb) {
 800c174:	4283      	cmp	r3, r0
 800c176:	d00c      	beq.n	800c192 <udp_bind+0xaa>
          if ((ipcb->local_port == port) &&
 800c178:	8a5c      	ldrh	r4, [r3, #18]
 800c17a:	4294      	cmp	r4, r2
 800c17c:	d109      	bne.n	800c192 <udp_bind+0xaa>
 800c17e:	f8d1 c000 	ldr.w	ip, [r1]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c182:	681c      	ldr	r4, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c184:	4564      	cmp	r4, ip
 800c186:	d0ef      	beq.n	800c168 <udp_bind+0x80>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c188:	f1bc 0f00 	cmp.w	ip, #0
 800c18c:	d0ec      	beq.n	800c168 <udp_bind+0x80>
              ip_addr_isany(&ipcb->local_ip))) {
 800c18e:	2c00      	cmp	r4, #0
 800c190:	d0ea      	beq.n	800c168 <udp_bind+0x80>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1ed      	bne.n	800c174 <udp_bind+0x8c>
 800c198:	e7cf      	b.n	800c13a <udp_bind+0x52>
 800c19a:	4633      	mov	r3, r6
 800c19c:	e7fa      	b.n	800c194 <udp_bind+0xac>
 800c19e:	bf00      	nop
 800c1a0:	0800e1e4 	.word	0x0800e1e4
 800c1a4:	08021202 	.word	0x08021202
 800c1a8:	080212e5 	.word	0x080212e5
 800c1ac:	0801e3d3 	.word	0x0801e3d3
 800c1b0:	2400a76c 	.word	0x2400a76c
 800c1b4:	24000030 	.word	0x24000030

0800c1b8 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c1b8:	b930      	cbnz	r0, 800c1c8 <udp_recv+0x10>
 800c1ba:	4b05      	ldr	r3, [pc, #20]	; (800c1d0 <udp_recv+0x18>)
 800c1bc:	f240 428a 	movw	r2, #1162	; 0x48a
 800c1c0:	4904      	ldr	r1, [pc, #16]	; (800c1d4 <udp_recv+0x1c>)
 800c1c2:	4805      	ldr	r0, [pc, #20]	; (800c1d8 <udp_recv+0x20>)
 800c1c4:	f000 ba46 	b.w	800c654 <iprintf>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 800c1c8:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 800c1cc:	4770      	bx	lr
 800c1ce:	bf00      	nop
 800c1d0:	08021202 	.word	0x08021202
 800c1d4:	08021509 	.word	0x08021509
 800c1d8:	0801e3d3 	.word	0x0801e3d3

0800c1dc <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c1dc:	4601      	mov	r1, r0
 800c1de:	b930      	cbnz	r0, 800c1ee <udp_remove+0x12>
 800c1e0:	4b0d      	ldr	r3, [pc, #52]	; (800c218 <udp_remove+0x3c>)
 800c1e2:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c1e6:	490d      	ldr	r1, [pc, #52]	; (800c21c <udp_remove+0x40>)
 800c1e8:	480d      	ldr	r0, [pc, #52]	; (800c220 <udp_remove+0x44>)
 800c1ea:	f000 ba33 	b.w	800c654 <iprintf>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c1ee:	4a0d      	ldr	r2, [pc, #52]	; (800c224 <udp_remove+0x48>)
 800c1f0:	6813      	ldr	r3, [r2, #0]
 800c1f2:	4283      	cmp	r3, r0
 800c1f4:	d105      	bne.n	800c202 <udp_remove+0x26>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c1f6:	68c3      	ldr	r3, [r0, #12]
 800c1f8:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	f7fb bf06 	b.w	800800c <memp_free>
 800c200:	4613      	mov	r3, r2
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c202:	2b00      	cmp	r3, #0
 800c204:	d0f9      	beq.n	800c1fa <udp_remove+0x1e>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c206:	68da      	ldr	r2, [r3, #12]
 800c208:	2a00      	cmp	r2, #0
 800c20a:	d0f6      	beq.n	800c1fa <udp_remove+0x1e>
 800c20c:	428a      	cmp	r2, r1
 800c20e:	d1f7      	bne.n	800c200 <udp_remove+0x24>
        pcb2->next = pcb->next;
 800c210:	68ca      	ldr	r2, [r1, #12]
 800c212:	60da      	str	r2, [r3, #12]
        break;
 800c214:	e7f1      	b.n	800c1fa <udp_remove+0x1e>
 800c216:	bf00      	nop
 800c218:	08021202 	.word	0x08021202
 800c21c:	0802151f 	.word	0x0802151f
 800c220:	0801e3d3 	.word	0x0801e3d3
 800c224:	2400a76c 	.word	0x2400a76c

0800c228 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c228:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c22a:	2000      	movs	r0, #0
 800c22c:	f7fb febe 	bl	8007fac <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c230:	4604      	mov	r4, r0
 800c232:	b128      	cbz	r0, 800c240 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c234:	2220      	movs	r2, #32
 800c236:	2100      	movs	r1, #0
 800c238:	f000 fa04 	bl	800c644 <memset>
    pcb->ttl = UDP_TTL;
 800c23c:	23ff      	movs	r3, #255	; 0xff
 800c23e:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800c240:	4620      	mov	r0, r4
 800c242:	bd10      	pop	{r4, pc}

0800c244 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 800c244:	f7ff bff0 	b.w	800c228 <udp_new>

0800c248 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c248:	b510      	push	{r4, lr}
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c24a:	b138      	cbz	r0, 800c25c <udp_netif_ip_addr_changed+0x14>
 800c24c:	6803      	ldr	r3, [r0, #0]
 800c24e:	b12b      	cbz	r3, 800c25c <udp_netif_ip_addr_changed+0x14>
 800c250:	b121      	cbz	r1, 800c25c <udp_netif_ip_addr_changed+0x14>
 800c252:	680b      	ldr	r3, [r1, #0]
 800c254:	b113      	cbz	r3, 800c25c <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c256:	4b06      	ldr	r3, [pc, #24]	; (800c270 <udp_netif_ip_addr_changed+0x28>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	b903      	cbnz	r3, 800c25e <udp_netif_ip_addr_changed+0x16>
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
      }
    }
  }
}
 800c25c:	bd10      	pop	{r4, pc}
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c25e:	681c      	ldr	r4, [r3, #0]
 800c260:	6802      	ldr	r2, [r0, #0]
 800c262:	4294      	cmp	r4, r2
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c264:	bf04      	itt	eq
 800c266:	680a      	ldreq	r2, [r1, #0]
 800c268:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	e7f5      	b.n	800c25a <udp_netif_ip_addr_changed+0x12>
 800c26e:	bf00      	nop
 800c270:	2400a76c 	.word	0x2400a76c

0800c274 <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800c274:	8943      	ldrh	r3, [r0, #10]
 800c276:	2b0e      	cmp	r3, #14
{
 800c278:	b570      	push	{r4, r5, r6, lr}
 800c27a:	4604      	mov	r4, r0
 800c27c:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800c27e:	d91a      	bls.n	800c2b6 <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800c280:	7bc3      	ldrb	r3, [r0, #15]
 800c282:	b91b      	cbnz	r3, 800c28c <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 800c284:	f891 3030 	ldrb.w	r3, [r1, #48]	; 0x30
 800c288:	3301      	adds	r3, #1
 800c28a:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800c28c:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800c28e:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800c290:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800c292:	07d9      	lsls	r1, r3, #31
 800c294:	d50a      	bpl.n	800c2ac <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800c296:	2b01      	cmp	r3, #1
 800c298:	d111      	bne.n	800c2be <ethernet_input+0x4a>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800c29a:	7843      	ldrb	r3, [r0, #1]
 800c29c:	b933      	cbnz	r3, 800c2ac <ethernet_input+0x38>
 800c29e:	7883      	ldrb	r3, [r0, #2]
 800c2a0:	2b5e      	cmp	r3, #94	; 0x5e
 800c2a2:	d103      	bne.n	800c2ac <ethernet_input+0x38>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800c2a4:	7b63      	ldrb	r3, [r4, #13]
 800c2a6:	f043 0310 	orr.w	r3, r3, #16
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800c2aa:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800c2ac:	2e08      	cmp	r6, #8
 800c2ae:	d010      	beq.n	800c2d2 <ethernet_input+0x5e>
 800c2b0:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800c2b4:	d01d      	beq.n	800c2f2 <ethernet_input+0x7e>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800c2b6:	4620      	mov	r0, r4
 800c2b8:	f7fc f912 	bl	80084e0 <pbuf_free>
  return ERR_OK;
 800c2bc:	e017      	b.n	800c2ee <ethernet_input+0x7a>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800c2be:	2206      	movs	r2, #6
 800c2c0:	4913      	ldr	r1, [pc, #76]	; (800c310 <ethernet_input+0x9c>)
 800c2c2:	f000 f989 	bl	800c5d8 <memcmp>
 800c2c6:	2800      	cmp	r0, #0
 800c2c8:	d1f0      	bne.n	800c2ac <ethernet_input+0x38>
      p->flags |= PBUF_FLAG_LLBCAST;
 800c2ca:	7b63      	ldrb	r3, [r4, #13]
 800c2cc:	f043 0308 	orr.w	r3, r3, #8
 800c2d0:	e7eb      	b.n	800c2aa <ethernet_input+0x36>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c2d2:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800c2d6:	071a      	lsls	r2, r3, #28
 800c2d8:	d5ed      	bpl.n	800c2b6 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c2da:	210e      	movs	r1, #14
 800c2dc:	4620      	mov	r0, r4
 800c2de:	f7fc f8cb 	bl	8008478 <pbuf_remove_header>
 800c2e2:	2800      	cmp	r0, #0
 800c2e4:	d1e7      	bne.n	800c2b6 <ethernet_input+0x42>
        ip4_input(p, netif);
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	f7fa fe15 	bl	8006f18 <ip4_input>
}
 800c2ee:	2000      	movs	r0, #0
 800c2f0:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800c2f2:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
 800c2f6:	071b      	lsls	r3, r3, #28
 800c2f8:	d5dd      	bpl.n	800c2b6 <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800c2fa:	210e      	movs	r1, #14
 800c2fc:	4620      	mov	r0, r4
 800c2fe:	f7fc f8bb 	bl	8008478 <pbuf_remove_header>
 800c302:	2800      	cmp	r0, #0
 800c304:	d1d7      	bne.n	800c2b6 <ethernet_input+0x42>
        etharp_input(p, netif);
 800c306:	4629      	mov	r1, r5
 800c308:	4620      	mov	r0, r4
 800c30a:	f7fa fa5b 	bl	80067c4 <etharp_input>
      break;
 800c30e:	e7ee      	b.n	800c2ee <ethernet_input+0x7a>
 800c310:	0800e324 	.word	0x0800e324

0800c314 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800c314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c318:	460d      	mov	r5, r1
 800c31a:	4604      	mov	r4, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800c31c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 800c320:	4616      	mov	r6, r2
 800c322:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800c324:	f7fb fb28 	bl	8007978 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800c328:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800c32a:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800c32c:	4628      	mov	r0, r5
 800c32e:	f7fc f89f 	bl	8008470 <pbuf_add_header>
 800c332:	b9e0      	cbnz	r0, 800c36e <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800c334:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800c336:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	600b      	str	r3, [r1, #0]
 800c33e:	88bb      	ldrh	r3, [r7, #4]
 800c340:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800c342:	6833      	ldr	r3, [r6, #0]
 800c344:	f8c1 3006 	str.w	r3, [r1, #6]
 800c348:	88b3      	ldrh	r3, [r6, #4]
 800c34a:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800c34c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800c350:	2b06      	cmp	r3, #6
 800c352:	d006      	beq.n	800c362 <ethernet_output+0x4e>
 800c354:	4b08      	ldr	r3, [pc, #32]	; (800c378 <ethernet_output+0x64>)
 800c356:	f44f 7299 	mov.w	r2, #306	; 0x132
 800c35a:	4908      	ldr	r1, [pc, #32]	; (800c37c <ethernet_output+0x68>)
 800c35c:	4808      	ldr	r0, [pc, #32]	; (800c380 <ethernet_output+0x6c>)
 800c35e:	f000 f979 	bl	800c654 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800c362:	69a3      	ldr	r3, [r4, #24]
 800c364:	4629      	mov	r1, r5
 800c366:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800c368:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800c36c:	4718      	bx	r3
}
 800c36e:	f06f 0001 	mvn.w	r0, #1
 800c372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c376:	bf00      	nop
 800c378:	08021537 	.word	0x08021537
 800c37c:	080215af 	.word	0x080215af
 800c380:	0801e3d3 	.word	0x0801e3d3

0800c384 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800c384:	b513      	push	{r0, r1, r4, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 800c386:	2304      	movs	r3, #4
{
 800c388:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800c38a:	9100      	str	r1, [sp, #0]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800c38c:	4668      	mov	r0, sp
 800c38e:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800c390:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800c392:	f7f8 fa43 	bl	800481c <osMessageCreate>
 800c396:	6020      	str	r0, [r4, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 800c398:	fab0 f080 	clz	r0, r0
 800c39c:	0940      	lsrs	r0, r0, #5
    return ERR_MEM;

  return ERR_OK;
}
 800c39e:	4240      	negs	r0, r0
 800c3a0:	b002      	add	sp, #8
 800c3a2:	bd10      	pop	{r4, pc}

0800c3a4 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 800c3a4:	b510      	push	{r4, lr}
 800c3a6:	4604      	mov	r4, r0
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 800c3a8:	6800      	ldr	r0, [r0, #0]
 800c3aa:	f7f8 faac 	bl	8004906 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 800c3ae:	6820      	ldr	r0, [r4, #0]
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 800c3b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  osMessageDelete(*mbox);
 800c3b4:	f7f8 baae 	b.w	8004914 <osMessageDelete>

0800c3b8 <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	6800      	ldr	r0, [r0, #0]
{
 800c3bc:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800c3be:	f7f8 fa33 	bl	8004828 <osMessagePut>
 800c3c2:	3800      	subs	r0, #0
 800c3c4:	bf18      	it	ne
 800c3c6:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 800c3c8:	4240      	negs	r0, r0
 800c3ca:	bd08      	pop	{r3, pc}

0800c3cc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800c3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ce:	4617      	mov	r7, r2
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 800c3d6:	f7f8 f95e 	bl	8004696 <osKernelSysTick>
 800c3da:	4604      	mov	r4, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800c3dc:	b177      	cbz	r7, 800c3fc <sys_arch_mbox_fetch+0x30>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 800c3de:	463a      	mov	r2, r7
 800c3e0:	6831      	ldr	r1, [r6, #0]
 800c3e2:	a801      	add	r0, sp, #4
 800c3e4:	f7f8 fa48 	bl	8004878 <osMessageGet>

    if(event.status == osEventMessage)
 800c3e8:	9b01      	ldr	r3, [sp, #4]
 800c3ea:	2b10      	cmp	r3, #16
 800c3ec:	d10d      	bne.n	800c40a <sys_arch_mbox_fetch+0x3e>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800c3ee:	9b02      	ldr	r3, [sp, #8]
 800c3f0:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800c3f2:	f7f8 f950 	bl	8004696 <osKernelSysTick>
 800c3f6:	1b00      	subs	r0, r0, r4
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800c3f8:	b005      	add	sp, #20
 800c3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800c3fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c400:	6831      	ldr	r1, [r6, #0]
 800c402:	a801      	add	r0, sp, #4
 800c404:	f7f8 fa38 	bl	8004878 <osMessageGet>
 800c408:	e7f1      	b.n	800c3ee <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800c40a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c40e:	e7f3      	b.n	800c3f8 <sys_arch_mbox_fetch+0x2c>

0800c410 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 800c410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c412:	460c      	mov	r4, r1
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 800c414:	2200      	movs	r2, #0
 800c416:	6801      	ldr	r1, [r0, #0]
 800c418:	a801      	add	r0, sp, #4
 800c41a:	f7f8 fa2d 	bl	8004878 <osMessageGet>

  if(event.status == osEventMessage)
 800c41e:	9b01      	ldr	r3, [sp, #4]
 800c420:	2b10      	cmp	r3, #16
  {
    *msg = (void *)event.value.v;
 800c422:	bf05      	ittet	eq
 800c424:	9b02      	ldreq	r3, [sp, #8]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 800c426:	2000      	moveq	r0, #0
  }
  else
  {
    return SYS_MBOX_EMPTY;
 800c428:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    *msg = (void *)event.value.v;
 800c42c:	6023      	streq	r3, [r4, #0]
  }
}
 800c42e:	b004      	add	sp, #16
 800c430:	bd10      	pop	{r4, pc}

0800c432 <sys_mbox_valid>:
 800c432:	6800      	ldr	r0, [r0, #0]
 800c434:	3800      	subs	r0, #0
 800c436:	bf18      	it	ne
 800c438:	2001      	movne	r0, #1
 800c43a:	4770      	bx	lr

0800c43c <sys_mbox_set_invalid>:
 800c43c:	2300      	movs	r3, #0
 800c43e:	6003      	str	r3, [r0, #0]
 800c440:	4770      	bx	lr

0800c442 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 800c442:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c444:	4606      	mov	r6, r0
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 800c446:	2400      	movs	r4, #0
{
 800c448:	460d      	mov	r5, r1
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800c44a:	a801      	add	r0, sp, #4
 800c44c:	2101      	movs	r1, #1
  osSemaphoreDef(SEM);
 800c44e:	9401      	str	r4, [sp, #4]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 800c450:	f7f8 f9a4 	bl	800479c <osSemaphoreCreate>
 800c454:	6030      	str	r0, [r6, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 800c456:	b130      	cbz	r0, 800c466 <sys_sem_new+0x24>
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
  }

  if(count == 0)	// Means it can't be taken
 800c458:	b945      	cbnz	r5, 800c46c <sys_sem_new+0x2a>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 800c45a:	4629      	mov	r1, r5
 800c45c:	f7f8 f9b4 	bl	80047c8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 800c460:	4628      	mov	r0, r5
}
 800c462:	b002      	add	sp, #8
 800c464:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 800c466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c46a:	e7fa      	b.n	800c462 <sys_sem_new+0x20>
  return ERR_OK;
 800c46c:	4620      	mov	r0, r4
 800c46e:	e7f8      	b.n	800c462 <sys_sem_new+0x20>

0800c470 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 800c470:	b570      	push	{r4, r5, r6, lr}
 800c472:	460e      	mov	r6, r1
 800c474:	4605      	mov	r5, r0
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 800c476:	f7f8 f90e 	bl	8004696 <osKernelSysTick>
 800c47a:	4604      	mov	r4, r0
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 800c47c:	b146      	cbz	r6, 800c490 <sys_arch_sem_wait+0x20>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 800c47e:	4631      	mov	r1, r6
 800c480:	6828      	ldr	r0, [r5, #0]
 800c482:	f7f8 f9a1 	bl	80047c8 <osSemaphoreWait>
 800c486:	b958      	cbnz	r0, 800c4a0 <sys_arch_sem_wait+0x30>
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
 800c488:	f7f8 f905 	bl	8004696 <osKernelSysTick>
 800c48c:	1b00      	subs	r0, r0, r4
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 800c48e:	bd70      	pop	{r4, r5, r6, pc}
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 800c490:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c494:	6828      	ldr	r0, [r5, #0]
 800c496:	f7f8 f997 	bl	80047c8 <osSemaphoreWait>
 800c49a:	2800      	cmp	r0, #0
 800c49c:	d1f8      	bne.n	800c490 <sys_arch_sem_wait+0x20>
 800c49e:	e7f3      	b.n	800c488 <sys_arch_sem_wait+0x18>
      return SYS_ARCH_TIMEOUT;
 800c4a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4a4:	e7f3      	b.n	800c48e <sys_arch_sem_wait+0x1e>

0800c4a6 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
  osSemaphoreRelease(*sem);
 800c4a6:	6800      	ldr	r0, [r0, #0]
 800c4a8:	f7f8 b9b4 	b.w	8004814 <osSemaphoreRelease>

0800c4ac <sys_sem_free>:
{
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 800c4ac:	6800      	ldr	r0, [r0, #0]
 800c4ae:	f7f8 b9b3 	b.w	8004818 <osSemaphoreDelete>

0800c4b2 <sys_sem_valid>:
}
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
  if (*sem == SYS_SEM_NULL)
 800c4b2:	6800      	ldr	r0, [r0, #0]
    return 0;
  else
    return 1;
}
 800c4b4:	3800      	subs	r0, #0
 800c4b6:	bf18      	it	ne
 800c4b8:	2001      	movne	r0, #1
 800c4ba:	4770      	bx	lr

0800c4bc <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
  *sem = SYS_SEM_NULL;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	6003      	str	r3, [r0, #0]
}
 800c4c0:	4770      	bx	lr
	...

0800c4c4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 800c4c4:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800c4c6:	4803      	ldr	r0, [pc, #12]	; (800c4d4 <sys_init+0x10>)
 800c4c8:	f7f8 f911 	bl	80046ee <osMutexCreate>
 800c4cc:	4b02      	ldr	r3, [pc, #8]	; (800c4d8 <sys_init+0x14>)
 800c4ce:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 800c4d0:	bd08      	pop	{r3, pc}
 800c4d2:	bf00      	nop
 800c4d4:	0800e330 	.word	0x0800e330
 800c4d8:	2400a774 	.word	0x2400a774

0800c4dc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800c4dc:	b513      	push	{r0, r1, r4, lr}

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 800c4de:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800c4e0:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 800c4e2:	a801      	add	r0, sp, #4
  osMutexDef(MUTEX);
 800c4e4:	9301      	str	r3, [sp, #4]
  *mutex = osMutexCreate(osMutex(MUTEX));
 800c4e6:	f7f8 f902 	bl	80046ee <osMutexCreate>
 800c4ea:	6020      	str	r0, [r4, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 800c4ec:	fab0 f080 	clz	r0, r0
 800c4f0:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800c4f2:	4240      	negs	r0, r0
 800c4f4:	b002      	add	sp, #8
 800c4f6:	bd10      	pop	{r4, pc}

0800c4f8 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 800c4f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c4fc:	6800      	ldr	r0, [r0, #0]
 800c4fe:	f7f8 b8f9 	b.w	80046f4 <osMutexWait>

0800c502 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800c502:	6800      	ldr	r0, [r0, #0]
 800c504:	f7f8 b91c 	b.w	8004740 <osMutexRelease>

0800c508 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800c508:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800c50a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800c50e:	9908      	ldr	r1, [sp, #32]
  return osThreadCreate(&os_thread_def, arg);
 800c510:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800c512:	f8ad 100c 	strh.w	r1, [sp, #12]
 800c516:	2100      	movs	r1, #0
 800c518:	e9cd 1304 	strd	r1, r3, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800c51c:	4611      	mov	r1, r2
 800c51e:	f7f8 f8c1 	bl	80046a4 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 800c522:	b007      	add	sp, #28
 800c524:	f85d fb04 	ldr.w	pc, [sp], #4

0800c528 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800c528:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800c52a:	4b04      	ldr	r3, [pc, #16]	; (800c53c <sys_arch_protect+0x14>)
 800c52c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c530:	6818      	ldr	r0, [r3, #0]
 800c532:	f7f8 f8df 	bl	80046f4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
}
 800c536:	2001      	movs	r0, #1
 800c538:	bd08      	pop	{r3, pc}
 800c53a:	bf00      	nop
 800c53c:	2400a774 	.word	0x2400a774

0800c540 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800c540:	4b01      	ldr	r3, [pc, #4]	; (800c548 <sys_arch_unprotect+0x8>)
 800c542:	6818      	ldr	r0, [r3, #0]
 800c544:	f7f8 b8fc 	b.w	8004740 <osMutexRelease>
 800c548:	2400a774 	.word	0x2400a774

0800c54c <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800c54c:	b570      	push	{r4, r5, r6, lr}
 800c54e:	460e      	mov	r6, r1
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800c550:	4604      	mov	r4, r0
 800c552:	b1a8      	cbz	r0, 800c580 <fs_open+0x34>
 800c554:	b1a1      	cbz	r1, 800c580 <fs_open+0x34>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800c556:	4d0c      	ldr	r5, [pc, #48]	; (800c588 <fs_open+0x3c>)
    if (!strcmp(name, (const char *)f->name)) {
 800c558:	6869      	ldr	r1, [r5, #4]
 800c55a:	4630      	mov	r0, r6
 800c55c:	f7f3 fec0 	bl	80002e0 <strcmp>
 800c560:	b940      	cbnz	r0, 800c574 <fs_open+0x28>
      file->data = (const char *)f->data;
 800c562:	68ab      	ldr	r3, [r5, #8]
 800c564:	6023      	str	r3, [r4, #0]
      file->len = f->len;
 800c566:	68eb      	ldr	r3, [r5, #12]
      file->index = f->len;
      file->pextension = NULL;
 800c568:	60e0      	str	r0, [r4, #12]
      file->index = f->len;
 800c56a:	e9c4 3301 	strd	r3, r3, [r4, #4]
      file->flags = f->flags;
 800c56e:	7c2b      	ldrb	r3, [r5, #16]
 800c570:	7423      	strb	r3, [r4, #16]
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
}
 800c572:	bd70      	pop	{r4, r5, r6, pc}
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800c574:	682d      	ldr	r5, [r5, #0]
 800c576:	2d00      	cmp	r5, #0
 800c578:	d1ee      	bne.n	800c558 <fs_open+0xc>
  return ERR_VAL;
 800c57a:	f06f 0005 	mvn.w	r0, #5
 800c57e:	e7f8      	b.n	800c572 <fs_open+0x26>
    return ERR_ARG;
 800c580:	f06f 000f 	mvn.w	r0, #15
 800c584:	e7f5      	b.n	800c572 <fs_open+0x26>
 800c586:	bf00      	nop
 800c588:	0800e334 	.word	0x0800e334

0800c58c <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800c58c:	4770      	bx	lr
	...

0800c590 <__libc_init_array>:
 800c590:	b570      	push	{r4, r5, r6, lr}
 800c592:	4d0d      	ldr	r5, [pc, #52]	; (800c5c8 <__libc_init_array+0x38>)
 800c594:	4c0d      	ldr	r4, [pc, #52]	; (800c5cc <__libc_init_array+0x3c>)
 800c596:	1b64      	subs	r4, r4, r5
 800c598:	10a4      	asrs	r4, r4, #2
 800c59a:	2600      	movs	r6, #0
 800c59c:	42a6      	cmp	r6, r4
 800c59e:	d109      	bne.n	800c5b4 <__libc_init_array+0x24>
 800c5a0:	4d0b      	ldr	r5, [pc, #44]	; (800c5d0 <__libc_init_array+0x40>)
 800c5a2:	4c0c      	ldr	r4, [pc, #48]	; (800c5d4 <__libc_init_array+0x44>)
 800c5a4:	f001 fa94 	bl	800dad0 <_init>
 800c5a8:	1b64      	subs	r4, r4, r5
 800c5aa:	10a4      	asrs	r4, r4, #2
 800c5ac:	2600      	movs	r6, #0
 800c5ae:	42a6      	cmp	r6, r4
 800c5b0:	d105      	bne.n	800c5be <__libc_init_array+0x2e>
 800c5b2:	bd70      	pop	{r4, r5, r6, pc}
 800c5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5b8:	4798      	blx	r3
 800c5ba:	3601      	adds	r6, #1
 800c5bc:	e7ee      	b.n	800c59c <__libc_init_array+0xc>
 800c5be:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5c2:	4798      	blx	r3
 800c5c4:	3601      	adds	r6, #1
 800c5c6:	e7f2      	b.n	800c5ae <__libc_init_array+0x1e>
 800c5c8:	0802172c 	.word	0x0802172c
 800c5cc:	0802172c 	.word	0x0802172c
 800c5d0:	0802172c 	.word	0x0802172c
 800c5d4:	08021730 	.word	0x08021730

0800c5d8 <memcmp>:
 800c5d8:	b530      	push	{r4, r5, lr}
 800c5da:	3901      	subs	r1, #1
 800c5dc:	2400      	movs	r4, #0
 800c5de:	42a2      	cmp	r2, r4
 800c5e0:	d101      	bne.n	800c5e6 <memcmp+0xe>
 800c5e2:	2000      	movs	r0, #0
 800c5e4:	e005      	b.n	800c5f2 <memcmp+0x1a>
 800c5e6:	5d03      	ldrb	r3, [r0, r4]
 800c5e8:	3401      	adds	r4, #1
 800c5ea:	5d0d      	ldrb	r5, [r1, r4]
 800c5ec:	42ab      	cmp	r3, r5
 800c5ee:	d0f6      	beq.n	800c5de <memcmp+0x6>
 800c5f0:	1b58      	subs	r0, r3, r5
 800c5f2:	bd30      	pop	{r4, r5, pc}

0800c5f4 <memcpy>:
 800c5f4:	440a      	add	r2, r1
 800c5f6:	4291      	cmp	r1, r2
 800c5f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c5fc:	d100      	bne.n	800c600 <memcpy+0xc>
 800c5fe:	4770      	bx	lr
 800c600:	b510      	push	{r4, lr}
 800c602:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c60a:	4291      	cmp	r1, r2
 800c60c:	d1f9      	bne.n	800c602 <memcpy+0xe>
 800c60e:	bd10      	pop	{r4, pc}

0800c610 <memmove>:
 800c610:	4288      	cmp	r0, r1
 800c612:	b510      	push	{r4, lr}
 800c614:	eb01 0402 	add.w	r4, r1, r2
 800c618:	d902      	bls.n	800c620 <memmove+0x10>
 800c61a:	4284      	cmp	r4, r0
 800c61c:	4623      	mov	r3, r4
 800c61e:	d807      	bhi.n	800c630 <memmove+0x20>
 800c620:	1e43      	subs	r3, r0, #1
 800c622:	42a1      	cmp	r1, r4
 800c624:	d008      	beq.n	800c638 <memmove+0x28>
 800c626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c62a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c62e:	e7f8      	b.n	800c622 <memmove+0x12>
 800c630:	4402      	add	r2, r0
 800c632:	4601      	mov	r1, r0
 800c634:	428a      	cmp	r2, r1
 800c636:	d100      	bne.n	800c63a <memmove+0x2a>
 800c638:	bd10      	pop	{r4, pc}
 800c63a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c63e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c642:	e7f7      	b.n	800c634 <memmove+0x24>

0800c644 <memset>:
 800c644:	4402      	add	r2, r0
 800c646:	4603      	mov	r3, r0
 800c648:	4293      	cmp	r3, r2
 800c64a:	d100      	bne.n	800c64e <memset+0xa>
 800c64c:	4770      	bx	lr
 800c64e:	f803 1b01 	strb.w	r1, [r3], #1
 800c652:	e7f9      	b.n	800c648 <memset+0x4>

0800c654 <iprintf>:
 800c654:	b40f      	push	{r0, r1, r2, r3}
 800c656:	4b0a      	ldr	r3, [pc, #40]	; (800c680 <iprintf+0x2c>)
 800c658:	b513      	push	{r0, r1, r4, lr}
 800c65a:	681c      	ldr	r4, [r3, #0]
 800c65c:	b124      	cbz	r4, 800c668 <iprintf+0x14>
 800c65e:	69a3      	ldr	r3, [r4, #24]
 800c660:	b913      	cbnz	r3, 800c668 <iprintf+0x14>
 800c662:	4620      	mov	r0, r4
 800c664:	f000 f90e 	bl	800c884 <__sinit>
 800c668:	ab05      	add	r3, sp, #20
 800c66a:	9a04      	ldr	r2, [sp, #16]
 800c66c:	68a1      	ldr	r1, [r4, #8]
 800c66e:	9301      	str	r3, [sp, #4]
 800c670:	4620      	mov	r0, r4
 800c672:	f000 fbf1 	bl	800ce58 <_vfiprintf_r>
 800c676:	b002      	add	sp, #8
 800c678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c67c:	b004      	add	sp, #16
 800c67e:	4770      	bx	lr
 800c680:	24000034 	.word	0x24000034

0800c684 <rand>:
 800c684:	4b17      	ldr	r3, [pc, #92]	; (800c6e4 <rand+0x60>)
 800c686:	b510      	push	{r4, lr}
 800c688:	681c      	ldr	r4, [r3, #0]
 800c68a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800c68c:	b9b3      	cbnz	r3, 800c6bc <rand+0x38>
 800c68e:	2018      	movs	r0, #24
 800c690:	f000 f9aa 	bl	800c9e8 <malloc>
 800c694:	63a0      	str	r0, [r4, #56]	; 0x38
 800c696:	b928      	cbnz	r0, 800c6a4 <rand+0x20>
 800c698:	4602      	mov	r2, r0
 800c69a:	4b13      	ldr	r3, [pc, #76]	; (800c6e8 <rand+0x64>)
 800c69c:	4813      	ldr	r0, [pc, #76]	; (800c6ec <rand+0x68>)
 800c69e:	214e      	movs	r1, #78	; 0x4e
 800c6a0:	f000 f87a 	bl	800c798 <__assert_func>
 800c6a4:	4a12      	ldr	r2, [pc, #72]	; (800c6f0 <rand+0x6c>)
 800c6a6:	4b13      	ldr	r3, [pc, #76]	; (800c6f4 <rand+0x70>)
 800c6a8:	e9c0 2300 	strd	r2, r3, [r0]
 800c6ac:	4b12      	ldr	r3, [pc, #72]	; (800c6f8 <rand+0x74>)
 800c6ae:	6083      	str	r3, [r0, #8]
 800c6b0:	230b      	movs	r3, #11
 800c6b2:	8183      	strh	r3, [r0, #12]
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800c6bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c6be:	480f      	ldr	r0, [pc, #60]	; (800c6fc <rand+0x78>)
 800c6c0:	690a      	ldr	r2, [r1, #16]
 800c6c2:	694b      	ldr	r3, [r1, #20]
 800c6c4:	4c0e      	ldr	r4, [pc, #56]	; (800c700 <rand+0x7c>)
 800c6c6:	4350      	muls	r0, r2
 800c6c8:	fb04 0003 	mla	r0, r4, r3, r0
 800c6cc:	fba2 3404 	umull	r3, r4, r2, r4
 800c6d0:	1c5a      	adds	r2, r3, #1
 800c6d2:	4404      	add	r4, r0
 800c6d4:	f144 0000 	adc.w	r0, r4, #0
 800c6d8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 800c6dc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c6e0:	bd10      	pop	{r4, pc}
 800c6e2:	bf00      	nop
 800c6e4:	24000034 	.word	0x24000034
 800c6e8:	080215e4 	.word	0x080215e4
 800c6ec:	080215fb 	.word	0x080215fb
 800c6f0:	abcd330e 	.word	0xabcd330e
 800c6f4:	e66d1234 	.word	0xe66d1234
 800c6f8:	0005deec 	.word	0x0005deec
 800c6fc:	5851f42d 	.word	0x5851f42d
 800c700:	4c957f2d 	.word	0x4c957f2d

0800c704 <siprintf>:
 800c704:	b40e      	push	{r1, r2, r3}
 800c706:	b500      	push	{lr}
 800c708:	b09c      	sub	sp, #112	; 0x70
 800c70a:	ab1d      	add	r3, sp, #116	; 0x74
 800c70c:	9002      	str	r0, [sp, #8]
 800c70e:	9006      	str	r0, [sp, #24]
 800c710:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c714:	4809      	ldr	r0, [pc, #36]	; (800c73c <siprintf+0x38>)
 800c716:	9107      	str	r1, [sp, #28]
 800c718:	9104      	str	r1, [sp, #16]
 800c71a:	4909      	ldr	r1, [pc, #36]	; (800c740 <siprintf+0x3c>)
 800c71c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c720:	9105      	str	r1, [sp, #20]
 800c722:	6800      	ldr	r0, [r0, #0]
 800c724:	9301      	str	r3, [sp, #4]
 800c726:	a902      	add	r1, sp, #8
 800c728:	f000 fa6c 	bl	800cc04 <_svfiprintf_r>
 800c72c:	9b02      	ldr	r3, [sp, #8]
 800c72e:	2200      	movs	r2, #0
 800c730:	701a      	strb	r2, [r3, #0]
 800c732:	b01c      	add	sp, #112	; 0x70
 800c734:	f85d eb04 	ldr.w	lr, [sp], #4
 800c738:	b003      	add	sp, #12
 800c73a:	4770      	bx	lr
 800c73c:	24000034 	.word	0x24000034
 800c740:	ffff0208 	.word	0xffff0208

0800c744 <strcat>:
 800c744:	b510      	push	{r4, lr}
 800c746:	4602      	mov	r2, r0
 800c748:	7814      	ldrb	r4, [r2, #0]
 800c74a:	4613      	mov	r3, r2
 800c74c:	3201      	adds	r2, #1
 800c74e:	2c00      	cmp	r4, #0
 800c750:	d1fa      	bne.n	800c748 <strcat+0x4>
 800c752:	3b01      	subs	r3, #1
 800c754:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c758:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c75c:	2a00      	cmp	r2, #0
 800c75e:	d1f9      	bne.n	800c754 <strcat+0x10>
 800c760:	bd10      	pop	{r4, pc}

0800c762 <strcpy>:
 800c762:	4603      	mov	r3, r0
 800c764:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c768:	f803 2b01 	strb.w	r2, [r3], #1
 800c76c:	2a00      	cmp	r2, #0
 800c76e:	d1f9      	bne.n	800c764 <strcpy+0x2>
 800c770:	4770      	bx	lr

0800c772 <strncmp>:
 800c772:	b510      	push	{r4, lr}
 800c774:	b16a      	cbz	r2, 800c792 <strncmp+0x20>
 800c776:	3901      	subs	r1, #1
 800c778:	1884      	adds	r4, r0, r2
 800c77a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c77e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c782:	4293      	cmp	r3, r2
 800c784:	d103      	bne.n	800c78e <strncmp+0x1c>
 800c786:	42a0      	cmp	r0, r4
 800c788:	d001      	beq.n	800c78e <strncmp+0x1c>
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d1f5      	bne.n	800c77a <strncmp+0x8>
 800c78e:	1a98      	subs	r0, r3, r2
 800c790:	bd10      	pop	{r4, pc}
 800c792:	4610      	mov	r0, r2
 800c794:	e7fc      	b.n	800c790 <strncmp+0x1e>
	...

0800c798 <__assert_func>:
 800c798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c79a:	4614      	mov	r4, r2
 800c79c:	461a      	mov	r2, r3
 800c79e:	4b09      	ldr	r3, [pc, #36]	; (800c7c4 <__assert_func+0x2c>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	68d8      	ldr	r0, [r3, #12]
 800c7a6:	b14c      	cbz	r4, 800c7bc <__assert_func+0x24>
 800c7a8:	4b07      	ldr	r3, [pc, #28]	; (800c7c8 <__assert_func+0x30>)
 800c7aa:	9100      	str	r1, [sp, #0]
 800c7ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7b0:	4906      	ldr	r1, [pc, #24]	; (800c7cc <__assert_func+0x34>)
 800c7b2:	462b      	mov	r3, r5
 800c7b4:	f000 f8e4 	bl	800c980 <fiprintf>
 800c7b8:	f000 ff38 	bl	800d62c <abort>
 800c7bc:	4b04      	ldr	r3, [pc, #16]	; (800c7d0 <__assert_func+0x38>)
 800c7be:	461c      	mov	r4, r3
 800c7c0:	e7f3      	b.n	800c7aa <__assert_func+0x12>
 800c7c2:	bf00      	nop
 800c7c4:	24000034 	.word	0x24000034
 800c7c8:	0802165a 	.word	0x0802165a
 800c7cc:	08021667 	.word	0x08021667
 800c7d0:	0801e59c 	.word	0x0801e59c

0800c7d4 <std>:
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	b510      	push	{r4, lr}
 800c7d8:	4604      	mov	r4, r0
 800c7da:	e9c0 3300 	strd	r3, r3, [r0]
 800c7de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c7e2:	6083      	str	r3, [r0, #8]
 800c7e4:	8181      	strh	r1, [r0, #12]
 800c7e6:	6643      	str	r3, [r0, #100]	; 0x64
 800c7e8:	81c2      	strh	r2, [r0, #14]
 800c7ea:	6183      	str	r3, [r0, #24]
 800c7ec:	4619      	mov	r1, r3
 800c7ee:	2208      	movs	r2, #8
 800c7f0:	305c      	adds	r0, #92	; 0x5c
 800c7f2:	f7ff ff27 	bl	800c644 <memset>
 800c7f6:	4b05      	ldr	r3, [pc, #20]	; (800c80c <std+0x38>)
 800c7f8:	6263      	str	r3, [r4, #36]	; 0x24
 800c7fa:	4b05      	ldr	r3, [pc, #20]	; (800c810 <std+0x3c>)
 800c7fc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c7fe:	4b05      	ldr	r3, [pc, #20]	; (800c814 <std+0x40>)
 800c800:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c802:	4b05      	ldr	r3, [pc, #20]	; (800c818 <std+0x44>)
 800c804:	6224      	str	r4, [r4, #32]
 800c806:	6323      	str	r3, [r4, #48]	; 0x30
 800c808:	bd10      	pop	{r4, pc}
 800c80a:	bf00      	nop
 800c80c:	0800d401 	.word	0x0800d401
 800c810:	0800d423 	.word	0x0800d423
 800c814:	0800d45b 	.word	0x0800d45b
 800c818:	0800d47f 	.word	0x0800d47f

0800c81c <_cleanup_r>:
 800c81c:	4901      	ldr	r1, [pc, #4]	; (800c824 <_cleanup_r+0x8>)
 800c81e:	f000 b8c1 	b.w	800c9a4 <_fwalk_reent>
 800c822:	bf00      	nop
 800c824:	0800d769 	.word	0x0800d769

0800c828 <__sfmoreglue>:
 800c828:	b570      	push	{r4, r5, r6, lr}
 800c82a:	1e4a      	subs	r2, r1, #1
 800c82c:	2568      	movs	r5, #104	; 0x68
 800c82e:	4355      	muls	r5, r2
 800c830:	460e      	mov	r6, r1
 800c832:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c836:	f000 f92f 	bl	800ca98 <_malloc_r>
 800c83a:	4604      	mov	r4, r0
 800c83c:	b140      	cbz	r0, 800c850 <__sfmoreglue+0x28>
 800c83e:	2100      	movs	r1, #0
 800c840:	e9c0 1600 	strd	r1, r6, [r0]
 800c844:	300c      	adds	r0, #12
 800c846:	60a0      	str	r0, [r4, #8]
 800c848:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c84c:	f7ff fefa 	bl	800c644 <memset>
 800c850:	4620      	mov	r0, r4
 800c852:	bd70      	pop	{r4, r5, r6, pc}

0800c854 <__sfp_lock_acquire>:
 800c854:	4801      	ldr	r0, [pc, #4]	; (800c85c <__sfp_lock_acquire+0x8>)
 800c856:	f000 b8c5 	b.w	800c9e4 <__retarget_lock_acquire_recursive>
 800c85a:	bf00      	nop
 800c85c:	2400a780 	.word	0x2400a780

0800c860 <__sfp_lock_release>:
 800c860:	4801      	ldr	r0, [pc, #4]	; (800c868 <__sfp_lock_release+0x8>)
 800c862:	f000 b8c0 	b.w	800c9e6 <__retarget_lock_release_recursive>
 800c866:	bf00      	nop
 800c868:	2400a780 	.word	0x2400a780

0800c86c <__sinit_lock_acquire>:
 800c86c:	4801      	ldr	r0, [pc, #4]	; (800c874 <__sinit_lock_acquire+0x8>)
 800c86e:	f000 b8b9 	b.w	800c9e4 <__retarget_lock_acquire_recursive>
 800c872:	bf00      	nop
 800c874:	2400a77b 	.word	0x2400a77b

0800c878 <__sinit_lock_release>:
 800c878:	4801      	ldr	r0, [pc, #4]	; (800c880 <__sinit_lock_release+0x8>)
 800c87a:	f000 b8b4 	b.w	800c9e6 <__retarget_lock_release_recursive>
 800c87e:	bf00      	nop
 800c880:	2400a77b 	.word	0x2400a77b

0800c884 <__sinit>:
 800c884:	b510      	push	{r4, lr}
 800c886:	4604      	mov	r4, r0
 800c888:	f7ff fff0 	bl	800c86c <__sinit_lock_acquire>
 800c88c:	69a3      	ldr	r3, [r4, #24]
 800c88e:	b11b      	cbz	r3, 800c898 <__sinit+0x14>
 800c890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c894:	f7ff bff0 	b.w	800c878 <__sinit_lock_release>
 800c898:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c89c:	6523      	str	r3, [r4, #80]	; 0x50
 800c89e:	4b13      	ldr	r3, [pc, #76]	; (800c8ec <__sinit+0x68>)
 800c8a0:	4a13      	ldr	r2, [pc, #76]	; (800c8f0 <__sinit+0x6c>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	62a2      	str	r2, [r4, #40]	; 0x28
 800c8a6:	42a3      	cmp	r3, r4
 800c8a8:	bf04      	itt	eq
 800c8aa:	2301      	moveq	r3, #1
 800c8ac:	61a3      	streq	r3, [r4, #24]
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	f000 f820 	bl	800c8f4 <__sfp>
 800c8b4:	6060      	str	r0, [r4, #4]
 800c8b6:	4620      	mov	r0, r4
 800c8b8:	f000 f81c 	bl	800c8f4 <__sfp>
 800c8bc:	60a0      	str	r0, [r4, #8]
 800c8be:	4620      	mov	r0, r4
 800c8c0:	f000 f818 	bl	800c8f4 <__sfp>
 800c8c4:	2200      	movs	r2, #0
 800c8c6:	60e0      	str	r0, [r4, #12]
 800c8c8:	2104      	movs	r1, #4
 800c8ca:	6860      	ldr	r0, [r4, #4]
 800c8cc:	f7ff ff82 	bl	800c7d4 <std>
 800c8d0:	68a0      	ldr	r0, [r4, #8]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	2109      	movs	r1, #9
 800c8d6:	f7ff ff7d 	bl	800c7d4 <std>
 800c8da:	68e0      	ldr	r0, [r4, #12]
 800c8dc:	2202      	movs	r2, #2
 800c8de:	2112      	movs	r1, #18
 800c8e0:	f7ff ff78 	bl	800c7d4 <std>
 800c8e4:	2301      	movs	r3, #1
 800c8e6:	61a3      	str	r3, [r4, #24]
 800c8e8:	e7d2      	b.n	800c890 <__sinit+0xc>
 800c8ea:	bf00      	nop
 800c8ec:	080215e0 	.word	0x080215e0
 800c8f0:	0800c81d 	.word	0x0800c81d

0800c8f4 <__sfp>:
 800c8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8f6:	4607      	mov	r7, r0
 800c8f8:	f7ff ffac 	bl	800c854 <__sfp_lock_acquire>
 800c8fc:	4b1e      	ldr	r3, [pc, #120]	; (800c978 <__sfp+0x84>)
 800c8fe:	681e      	ldr	r6, [r3, #0]
 800c900:	69b3      	ldr	r3, [r6, #24]
 800c902:	b913      	cbnz	r3, 800c90a <__sfp+0x16>
 800c904:	4630      	mov	r0, r6
 800c906:	f7ff ffbd 	bl	800c884 <__sinit>
 800c90a:	3648      	adds	r6, #72	; 0x48
 800c90c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c910:	3b01      	subs	r3, #1
 800c912:	d503      	bpl.n	800c91c <__sfp+0x28>
 800c914:	6833      	ldr	r3, [r6, #0]
 800c916:	b30b      	cbz	r3, 800c95c <__sfp+0x68>
 800c918:	6836      	ldr	r6, [r6, #0]
 800c91a:	e7f7      	b.n	800c90c <__sfp+0x18>
 800c91c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c920:	b9d5      	cbnz	r5, 800c958 <__sfp+0x64>
 800c922:	4b16      	ldr	r3, [pc, #88]	; (800c97c <__sfp+0x88>)
 800c924:	60e3      	str	r3, [r4, #12]
 800c926:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c92a:	6665      	str	r5, [r4, #100]	; 0x64
 800c92c:	f000 f859 	bl	800c9e2 <__retarget_lock_init_recursive>
 800c930:	f7ff ff96 	bl	800c860 <__sfp_lock_release>
 800c934:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c938:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c93c:	6025      	str	r5, [r4, #0]
 800c93e:	61a5      	str	r5, [r4, #24]
 800c940:	2208      	movs	r2, #8
 800c942:	4629      	mov	r1, r5
 800c944:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c948:	f7ff fe7c 	bl	800c644 <memset>
 800c94c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c950:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c954:	4620      	mov	r0, r4
 800c956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c958:	3468      	adds	r4, #104	; 0x68
 800c95a:	e7d9      	b.n	800c910 <__sfp+0x1c>
 800c95c:	2104      	movs	r1, #4
 800c95e:	4638      	mov	r0, r7
 800c960:	f7ff ff62 	bl	800c828 <__sfmoreglue>
 800c964:	4604      	mov	r4, r0
 800c966:	6030      	str	r0, [r6, #0]
 800c968:	2800      	cmp	r0, #0
 800c96a:	d1d5      	bne.n	800c918 <__sfp+0x24>
 800c96c:	f7ff ff78 	bl	800c860 <__sfp_lock_release>
 800c970:	230c      	movs	r3, #12
 800c972:	603b      	str	r3, [r7, #0]
 800c974:	e7ee      	b.n	800c954 <__sfp+0x60>
 800c976:	bf00      	nop
 800c978:	080215e0 	.word	0x080215e0
 800c97c:	ffff0001 	.word	0xffff0001

0800c980 <fiprintf>:
 800c980:	b40e      	push	{r1, r2, r3}
 800c982:	b503      	push	{r0, r1, lr}
 800c984:	4601      	mov	r1, r0
 800c986:	ab03      	add	r3, sp, #12
 800c988:	4805      	ldr	r0, [pc, #20]	; (800c9a0 <fiprintf+0x20>)
 800c98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c98e:	6800      	ldr	r0, [r0, #0]
 800c990:	9301      	str	r3, [sp, #4]
 800c992:	f000 fa61 	bl	800ce58 <_vfiprintf_r>
 800c996:	b002      	add	sp, #8
 800c998:	f85d eb04 	ldr.w	lr, [sp], #4
 800c99c:	b003      	add	sp, #12
 800c99e:	4770      	bx	lr
 800c9a0:	24000034 	.word	0x24000034

0800c9a4 <_fwalk_reent>:
 800c9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a8:	4606      	mov	r6, r0
 800c9aa:	4688      	mov	r8, r1
 800c9ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c9b0:	2700      	movs	r7, #0
 800c9b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9b6:	f1b9 0901 	subs.w	r9, r9, #1
 800c9ba:	d505      	bpl.n	800c9c8 <_fwalk_reent+0x24>
 800c9bc:	6824      	ldr	r4, [r4, #0]
 800c9be:	2c00      	cmp	r4, #0
 800c9c0:	d1f7      	bne.n	800c9b2 <_fwalk_reent+0xe>
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c8:	89ab      	ldrh	r3, [r5, #12]
 800c9ca:	2b01      	cmp	r3, #1
 800c9cc:	d907      	bls.n	800c9de <_fwalk_reent+0x3a>
 800c9ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	d003      	beq.n	800c9de <_fwalk_reent+0x3a>
 800c9d6:	4629      	mov	r1, r5
 800c9d8:	4630      	mov	r0, r6
 800c9da:	47c0      	blx	r8
 800c9dc:	4307      	orrs	r7, r0
 800c9de:	3568      	adds	r5, #104	; 0x68
 800c9e0:	e7e9      	b.n	800c9b6 <_fwalk_reent+0x12>

0800c9e2 <__retarget_lock_init_recursive>:
 800c9e2:	4770      	bx	lr

0800c9e4 <__retarget_lock_acquire_recursive>:
 800c9e4:	4770      	bx	lr

0800c9e6 <__retarget_lock_release_recursive>:
 800c9e6:	4770      	bx	lr

0800c9e8 <malloc>:
 800c9e8:	4b02      	ldr	r3, [pc, #8]	; (800c9f4 <malloc+0xc>)
 800c9ea:	4601      	mov	r1, r0
 800c9ec:	6818      	ldr	r0, [r3, #0]
 800c9ee:	f000 b853 	b.w	800ca98 <_malloc_r>
 800c9f2:	bf00      	nop
 800c9f4:	24000034 	.word	0x24000034

0800c9f8 <_free_r>:
 800c9f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9fa:	2900      	cmp	r1, #0
 800c9fc:	d048      	beq.n	800ca90 <_free_r+0x98>
 800c9fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca02:	9001      	str	r0, [sp, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f1a1 0404 	sub.w	r4, r1, #4
 800ca0a:	bfb8      	it	lt
 800ca0c:	18e4      	addlt	r4, r4, r3
 800ca0e:	f000 ff5d 	bl	800d8cc <__malloc_lock>
 800ca12:	4a20      	ldr	r2, [pc, #128]	; (800ca94 <_free_r+0x9c>)
 800ca14:	9801      	ldr	r0, [sp, #4]
 800ca16:	6813      	ldr	r3, [r2, #0]
 800ca18:	4615      	mov	r5, r2
 800ca1a:	b933      	cbnz	r3, 800ca2a <_free_r+0x32>
 800ca1c:	6063      	str	r3, [r4, #4]
 800ca1e:	6014      	str	r4, [r2, #0]
 800ca20:	b003      	add	sp, #12
 800ca22:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca26:	f000 bf57 	b.w	800d8d8 <__malloc_unlock>
 800ca2a:	42a3      	cmp	r3, r4
 800ca2c:	d90b      	bls.n	800ca46 <_free_r+0x4e>
 800ca2e:	6821      	ldr	r1, [r4, #0]
 800ca30:	1862      	adds	r2, r4, r1
 800ca32:	4293      	cmp	r3, r2
 800ca34:	bf04      	itt	eq
 800ca36:	681a      	ldreq	r2, [r3, #0]
 800ca38:	685b      	ldreq	r3, [r3, #4]
 800ca3a:	6063      	str	r3, [r4, #4]
 800ca3c:	bf04      	itt	eq
 800ca3e:	1852      	addeq	r2, r2, r1
 800ca40:	6022      	streq	r2, [r4, #0]
 800ca42:	602c      	str	r4, [r5, #0]
 800ca44:	e7ec      	b.n	800ca20 <_free_r+0x28>
 800ca46:	461a      	mov	r2, r3
 800ca48:	685b      	ldr	r3, [r3, #4]
 800ca4a:	b10b      	cbz	r3, 800ca50 <_free_r+0x58>
 800ca4c:	42a3      	cmp	r3, r4
 800ca4e:	d9fa      	bls.n	800ca46 <_free_r+0x4e>
 800ca50:	6811      	ldr	r1, [r2, #0]
 800ca52:	1855      	adds	r5, r2, r1
 800ca54:	42a5      	cmp	r5, r4
 800ca56:	d10b      	bne.n	800ca70 <_free_r+0x78>
 800ca58:	6824      	ldr	r4, [r4, #0]
 800ca5a:	4421      	add	r1, r4
 800ca5c:	1854      	adds	r4, r2, r1
 800ca5e:	42a3      	cmp	r3, r4
 800ca60:	6011      	str	r1, [r2, #0]
 800ca62:	d1dd      	bne.n	800ca20 <_free_r+0x28>
 800ca64:	681c      	ldr	r4, [r3, #0]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	6053      	str	r3, [r2, #4]
 800ca6a:	4421      	add	r1, r4
 800ca6c:	6011      	str	r1, [r2, #0]
 800ca6e:	e7d7      	b.n	800ca20 <_free_r+0x28>
 800ca70:	d902      	bls.n	800ca78 <_free_r+0x80>
 800ca72:	230c      	movs	r3, #12
 800ca74:	6003      	str	r3, [r0, #0]
 800ca76:	e7d3      	b.n	800ca20 <_free_r+0x28>
 800ca78:	6825      	ldr	r5, [r4, #0]
 800ca7a:	1961      	adds	r1, r4, r5
 800ca7c:	428b      	cmp	r3, r1
 800ca7e:	bf04      	itt	eq
 800ca80:	6819      	ldreq	r1, [r3, #0]
 800ca82:	685b      	ldreq	r3, [r3, #4]
 800ca84:	6063      	str	r3, [r4, #4]
 800ca86:	bf04      	itt	eq
 800ca88:	1949      	addeq	r1, r1, r5
 800ca8a:	6021      	streq	r1, [r4, #0]
 800ca8c:	6054      	str	r4, [r2, #4]
 800ca8e:	e7c7      	b.n	800ca20 <_free_r+0x28>
 800ca90:	b003      	add	sp, #12
 800ca92:	bd30      	pop	{r4, r5, pc}
 800ca94:	240067e4 	.word	0x240067e4

0800ca98 <_malloc_r>:
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	1ccd      	adds	r5, r1, #3
 800ca9c:	f025 0503 	bic.w	r5, r5, #3
 800caa0:	3508      	adds	r5, #8
 800caa2:	2d0c      	cmp	r5, #12
 800caa4:	bf38      	it	cc
 800caa6:	250c      	movcc	r5, #12
 800caa8:	2d00      	cmp	r5, #0
 800caaa:	4606      	mov	r6, r0
 800caac:	db01      	blt.n	800cab2 <_malloc_r+0x1a>
 800caae:	42a9      	cmp	r1, r5
 800cab0:	d903      	bls.n	800caba <_malloc_r+0x22>
 800cab2:	230c      	movs	r3, #12
 800cab4:	6033      	str	r3, [r6, #0]
 800cab6:	2000      	movs	r0, #0
 800cab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800caba:	f000 ff07 	bl	800d8cc <__malloc_lock>
 800cabe:	4921      	ldr	r1, [pc, #132]	; (800cb44 <_malloc_r+0xac>)
 800cac0:	680a      	ldr	r2, [r1, #0]
 800cac2:	4614      	mov	r4, r2
 800cac4:	b99c      	cbnz	r4, 800caee <_malloc_r+0x56>
 800cac6:	4f20      	ldr	r7, [pc, #128]	; (800cb48 <_malloc_r+0xb0>)
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	b923      	cbnz	r3, 800cad6 <_malloc_r+0x3e>
 800cacc:	4621      	mov	r1, r4
 800cace:	4630      	mov	r0, r6
 800cad0:	f000 fc86 	bl	800d3e0 <_sbrk_r>
 800cad4:	6038      	str	r0, [r7, #0]
 800cad6:	4629      	mov	r1, r5
 800cad8:	4630      	mov	r0, r6
 800cada:	f000 fc81 	bl	800d3e0 <_sbrk_r>
 800cade:	1c43      	adds	r3, r0, #1
 800cae0:	d123      	bne.n	800cb2a <_malloc_r+0x92>
 800cae2:	230c      	movs	r3, #12
 800cae4:	6033      	str	r3, [r6, #0]
 800cae6:	4630      	mov	r0, r6
 800cae8:	f000 fef6 	bl	800d8d8 <__malloc_unlock>
 800caec:	e7e3      	b.n	800cab6 <_malloc_r+0x1e>
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	1b5b      	subs	r3, r3, r5
 800caf2:	d417      	bmi.n	800cb24 <_malloc_r+0x8c>
 800caf4:	2b0b      	cmp	r3, #11
 800caf6:	d903      	bls.n	800cb00 <_malloc_r+0x68>
 800caf8:	6023      	str	r3, [r4, #0]
 800cafa:	441c      	add	r4, r3
 800cafc:	6025      	str	r5, [r4, #0]
 800cafe:	e004      	b.n	800cb0a <_malloc_r+0x72>
 800cb00:	6863      	ldr	r3, [r4, #4]
 800cb02:	42a2      	cmp	r2, r4
 800cb04:	bf0c      	ite	eq
 800cb06:	600b      	streq	r3, [r1, #0]
 800cb08:	6053      	strne	r3, [r2, #4]
 800cb0a:	4630      	mov	r0, r6
 800cb0c:	f000 fee4 	bl	800d8d8 <__malloc_unlock>
 800cb10:	f104 000b 	add.w	r0, r4, #11
 800cb14:	1d23      	adds	r3, r4, #4
 800cb16:	f020 0007 	bic.w	r0, r0, #7
 800cb1a:	1ac2      	subs	r2, r0, r3
 800cb1c:	d0cc      	beq.n	800cab8 <_malloc_r+0x20>
 800cb1e:	1a1b      	subs	r3, r3, r0
 800cb20:	50a3      	str	r3, [r4, r2]
 800cb22:	e7c9      	b.n	800cab8 <_malloc_r+0x20>
 800cb24:	4622      	mov	r2, r4
 800cb26:	6864      	ldr	r4, [r4, #4]
 800cb28:	e7cc      	b.n	800cac4 <_malloc_r+0x2c>
 800cb2a:	1cc4      	adds	r4, r0, #3
 800cb2c:	f024 0403 	bic.w	r4, r4, #3
 800cb30:	42a0      	cmp	r0, r4
 800cb32:	d0e3      	beq.n	800cafc <_malloc_r+0x64>
 800cb34:	1a21      	subs	r1, r4, r0
 800cb36:	4630      	mov	r0, r6
 800cb38:	f000 fc52 	bl	800d3e0 <_sbrk_r>
 800cb3c:	3001      	adds	r0, #1
 800cb3e:	d1dd      	bne.n	800cafc <_malloc_r+0x64>
 800cb40:	e7cf      	b.n	800cae2 <_malloc_r+0x4a>
 800cb42:	bf00      	nop
 800cb44:	240067e4 	.word	0x240067e4
 800cb48:	240067e8 	.word	0x240067e8

0800cb4c <__ssputs_r>:
 800cb4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb50:	688e      	ldr	r6, [r1, #8]
 800cb52:	429e      	cmp	r6, r3
 800cb54:	4682      	mov	sl, r0
 800cb56:	460c      	mov	r4, r1
 800cb58:	4690      	mov	r8, r2
 800cb5a:	461f      	mov	r7, r3
 800cb5c:	d838      	bhi.n	800cbd0 <__ssputs_r+0x84>
 800cb5e:	898a      	ldrh	r2, [r1, #12]
 800cb60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb64:	d032      	beq.n	800cbcc <__ssputs_r+0x80>
 800cb66:	6825      	ldr	r5, [r4, #0]
 800cb68:	6909      	ldr	r1, [r1, #16]
 800cb6a:	eba5 0901 	sub.w	r9, r5, r1
 800cb6e:	6965      	ldr	r5, [r4, #20]
 800cb70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb78:	3301      	adds	r3, #1
 800cb7a:	444b      	add	r3, r9
 800cb7c:	106d      	asrs	r5, r5, #1
 800cb7e:	429d      	cmp	r5, r3
 800cb80:	bf38      	it	cc
 800cb82:	461d      	movcc	r5, r3
 800cb84:	0553      	lsls	r3, r2, #21
 800cb86:	d531      	bpl.n	800cbec <__ssputs_r+0xa0>
 800cb88:	4629      	mov	r1, r5
 800cb8a:	f7ff ff85 	bl	800ca98 <_malloc_r>
 800cb8e:	4606      	mov	r6, r0
 800cb90:	b950      	cbnz	r0, 800cba8 <__ssputs_r+0x5c>
 800cb92:	230c      	movs	r3, #12
 800cb94:	f8ca 3000 	str.w	r3, [sl]
 800cb98:	89a3      	ldrh	r3, [r4, #12]
 800cb9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb9e:	81a3      	strh	r3, [r4, #12]
 800cba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cba8:	6921      	ldr	r1, [r4, #16]
 800cbaa:	464a      	mov	r2, r9
 800cbac:	f7ff fd22 	bl	800c5f4 <memcpy>
 800cbb0:	89a3      	ldrh	r3, [r4, #12]
 800cbb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbba:	81a3      	strh	r3, [r4, #12]
 800cbbc:	6126      	str	r6, [r4, #16]
 800cbbe:	6165      	str	r5, [r4, #20]
 800cbc0:	444e      	add	r6, r9
 800cbc2:	eba5 0509 	sub.w	r5, r5, r9
 800cbc6:	6026      	str	r6, [r4, #0]
 800cbc8:	60a5      	str	r5, [r4, #8]
 800cbca:	463e      	mov	r6, r7
 800cbcc:	42be      	cmp	r6, r7
 800cbce:	d900      	bls.n	800cbd2 <__ssputs_r+0x86>
 800cbd0:	463e      	mov	r6, r7
 800cbd2:	4632      	mov	r2, r6
 800cbd4:	6820      	ldr	r0, [r4, #0]
 800cbd6:	4641      	mov	r1, r8
 800cbd8:	f7ff fd1a 	bl	800c610 <memmove>
 800cbdc:	68a3      	ldr	r3, [r4, #8]
 800cbde:	6822      	ldr	r2, [r4, #0]
 800cbe0:	1b9b      	subs	r3, r3, r6
 800cbe2:	4432      	add	r2, r6
 800cbe4:	60a3      	str	r3, [r4, #8]
 800cbe6:	6022      	str	r2, [r4, #0]
 800cbe8:	2000      	movs	r0, #0
 800cbea:	e7db      	b.n	800cba4 <__ssputs_r+0x58>
 800cbec:	462a      	mov	r2, r5
 800cbee:	f000 fe79 	bl	800d8e4 <_realloc_r>
 800cbf2:	4606      	mov	r6, r0
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	d1e1      	bne.n	800cbbc <__ssputs_r+0x70>
 800cbf8:	6921      	ldr	r1, [r4, #16]
 800cbfa:	4650      	mov	r0, sl
 800cbfc:	f7ff fefc 	bl	800c9f8 <_free_r>
 800cc00:	e7c7      	b.n	800cb92 <__ssputs_r+0x46>
	...

0800cc04 <_svfiprintf_r>:
 800cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc08:	4698      	mov	r8, r3
 800cc0a:	898b      	ldrh	r3, [r1, #12]
 800cc0c:	061b      	lsls	r3, r3, #24
 800cc0e:	b09d      	sub	sp, #116	; 0x74
 800cc10:	4607      	mov	r7, r0
 800cc12:	460d      	mov	r5, r1
 800cc14:	4614      	mov	r4, r2
 800cc16:	d50e      	bpl.n	800cc36 <_svfiprintf_r+0x32>
 800cc18:	690b      	ldr	r3, [r1, #16]
 800cc1a:	b963      	cbnz	r3, 800cc36 <_svfiprintf_r+0x32>
 800cc1c:	2140      	movs	r1, #64	; 0x40
 800cc1e:	f7ff ff3b 	bl	800ca98 <_malloc_r>
 800cc22:	6028      	str	r0, [r5, #0]
 800cc24:	6128      	str	r0, [r5, #16]
 800cc26:	b920      	cbnz	r0, 800cc32 <_svfiprintf_r+0x2e>
 800cc28:	230c      	movs	r3, #12
 800cc2a:	603b      	str	r3, [r7, #0]
 800cc2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc30:	e0d1      	b.n	800cdd6 <_svfiprintf_r+0x1d2>
 800cc32:	2340      	movs	r3, #64	; 0x40
 800cc34:	616b      	str	r3, [r5, #20]
 800cc36:	2300      	movs	r3, #0
 800cc38:	9309      	str	r3, [sp, #36]	; 0x24
 800cc3a:	2320      	movs	r3, #32
 800cc3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc40:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc44:	2330      	movs	r3, #48	; 0x30
 800cc46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cdf0 <_svfiprintf_r+0x1ec>
 800cc4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc4e:	f04f 0901 	mov.w	r9, #1
 800cc52:	4623      	mov	r3, r4
 800cc54:	469a      	mov	sl, r3
 800cc56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc5a:	b10a      	cbz	r2, 800cc60 <_svfiprintf_r+0x5c>
 800cc5c:	2a25      	cmp	r2, #37	; 0x25
 800cc5e:	d1f9      	bne.n	800cc54 <_svfiprintf_r+0x50>
 800cc60:	ebba 0b04 	subs.w	fp, sl, r4
 800cc64:	d00b      	beq.n	800cc7e <_svfiprintf_r+0x7a>
 800cc66:	465b      	mov	r3, fp
 800cc68:	4622      	mov	r2, r4
 800cc6a:	4629      	mov	r1, r5
 800cc6c:	4638      	mov	r0, r7
 800cc6e:	f7ff ff6d 	bl	800cb4c <__ssputs_r>
 800cc72:	3001      	adds	r0, #1
 800cc74:	f000 80aa 	beq.w	800cdcc <_svfiprintf_r+0x1c8>
 800cc78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc7a:	445a      	add	r2, fp
 800cc7c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc7e:	f89a 3000 	ldrb.w	r3, [sl]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f000 80a2 	beq.w	800cdcc <_svfiprintf_r+0x1c8>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cc8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc92:	f10a 0a01 	add.w	sl, sl, #1
 800cc96:	9304      	str	r3, [sp, #16]
 800cc98:	9307      	str	r3, [sp, #28]
 800cc9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cc9e:	931a      	str	r3, [sp, #104]	; 0x68
 800cca0:	4654      	mov	r4, sl
 800cca2:	2205      	movs	r2, #5
 800cca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cca8:	4851      	ldr	r0, [pc, #324]	; (800cdf0 <_svfiprintf_r+0x1ec>)
 800ccaa:	f7f3 fb31 	bl	8000310 <memchr>
 800ccae:	9a04      	ldr	r2, [sp, #16]
 800ccb0:	b9d8      	cbnz	r0, 800ccea <_svfiprintf_r+0xe6>
 800ccb2:	06d0      	lsls	r0, r2, #27
 800ccb4:	bf44      	itt	mi
 800ccb6:	2320      	movmi	r3, #32
 800ccb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccbc:	0711      	lsls	r1, r2, #28
 800ccbe:	bf44      	itt	mi
 800ccc0:	232b      	movmi	r3, #43	; 0x2b
 800ccc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ccc6:	f89a 3000 	ldrb.w	r3, [sl]
 800ccca:	2b2a      	cmp	r3, #42	; 0x2a
 800cccc:	d015      	beq.n	800ccfa <_svfiprintf_r+0xf6>
 800ccce:	9a07      	ldr	r2, [sp, #28]
 800ccd0:	4654      	mov	r4, sl
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	f04f 0c0a 	mov.w	ip, #10
 800ccd8:	4621      	mov	r1, r4
 800ccda:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccde:	3b30      	subs	r3, #48	; 0x30
 800cce0:	2b09      	cmp	r3, #9
 800cce2:	d94e      	bls.n	800cd82 <_svfiprintf_r+0x17e>
 800cce4:	b1b0      	cbz	r0, 800cd14 <_svfiprintf_r+0x110>
 800cce6:	9207      	str	r2, [sp, #28]
 800cce8:	e014      	b.n	800cd14 <_svfiprintf_r+0x110>
 800ccea:	eba0 0308 	sub.w	r3, r0, r8
 800ccee:	fa09 f303 	lsl.w	r3, r9, r3
 800ccf2:	4313      	orrs	r3, r2
 800ccf4:	9304      	str	r3, [sp, #16]
 800ccf6:	46a2      	mov	sl, r4
 800ccf8:	e7d2      	b.n	800cca0 <_svfiprintf_r+0x9c>
 800ccfa:	9b03      	ldr	r3, [sp, #12]
 800ccfc:	1d19      	adds	r1, r3, #4
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	9103      	str	r1, [sp, #12]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	bfbb      	ittet	lt
 800cd06:	425b      	neglt	r3, r3
 800cd08:	f042 0202 	orrlt.w	r2, r2, #2
 800cd0c:	9307      	strge	r3, [sp, #28]
 800cd0e:	9307      	strlt	r3, [sp, #28]
 800cd10:	bfb8      	it	lt
 800cd12:	9204      	strlt	r2, [sp, #16]
 800cd14:	7823      	ldrb	r3, [r4, #0]
 800cd16:	2b2e      	cmp	r3, #46	; 0x2e
 800cd18:	d10c      	bne.n	800cd34 <_svfiprintf_r+0x130>
 800cd1a:	7863      	ldrb	r3, [r4, #1]
 800cd1c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd1e:	d135      	bne.n	800cd8c <_svfiprintf_r+0x188>
 800cd20:	9b03      	ldr	r3, [sp, #12]
 800cd22:	1d1a      	adds	r2, r3, #4
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	9203      	str	r2, [sp, #12]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	bfb8      	it	lt
 800cd2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cd30:	3402      	adds	r4, #2
 800cd32:	9305      	str	r3, [sp, #20]
 800cd34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce00 <_svfiprintf_r+0x1fc>
 800cd38:	7821      	ldrb	r1, [r4, #0]
 800cd3a:	2203      	movs	r2, #3
 800cd3c:	4650      	mov	r0, sl
 800cd3e:	f7f3 fae7 	bl	8000310 <memchr>
 800cd42:	b140      	cbz	r0, 800cd56 <_svfiprintf_r+0x152>
 800cd44:	2340      	movs	r3, #64	; 0x40
 800cd46:	eba0 000a 	sub.w	r0, r0, sl
 800cd4a:	fa03 f000 	lsl.w	r0, r3, r0
 800cd4e:	9b04      	ldr	r3, [sp, #16]
 800cd50:	4303      	orrs	r3, r0
 800cd52:	3401      	adds	r4, #1
 800cd54:	9304      	str	r3, [sp, #16]
 800cd56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd5a:	4826      	ldr	r0, [pc, #152]	; (800cdf4 <_svfiprintf_r+0x1f0>)
 800cd5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd60:	2206      	movs	r2, #6
 800cd62:	f7f3 fad5 	bl	8000310 <memchr>
 800cd66:	2800      	cmp	r0, #0
 800cd68:	d038      	beq.n	800cddc <_svfiprintf_r+0x1d8>
 800cd6a:	4b23      	ldr	r3, [pc, #140]	; (800cdf8 <_svfiprintf_r+0x1f4>)
 800cd6c:	bb1b      	cbnz	r3, 800cdb6 <_svfiprintf_r+0x1b2>
 800cd6e:	9b03      	ldr	r3, [sp, #12]
 800cd70:	3307      	adds	r3, #7
 800cd72:	f023 0307 	bic.w	r3, r3, #7
 800cd76:	3308      	adds	r3, #8
 800cd78:	9303      	str	r3, [sp, #12]
 800cd7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd7c:	4433      	add	r3, r6
 800cd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800cd80:	e767      	b.n	800cc52 <_svfiprintf_r+0x4e>
 800cd82:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd86:	460c      	mov	r4, r1
 800cd88:	2001      	movs	r0, #1
 800cd8a:	e7a5      	b.n	800ccd8 <_svfiprintf_r+0xd4>
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	3401      	adds	r4, #1
 800cd90:	9305      	str	r3, [sp, #20]
 800cd92:	4619      	mov	r1, r3
 800cd94:	f04f 0c0a 	mov.w	ip, #10
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cd9e:	3a30      	subs	r2, #48	; 0x30
 800cda0:	2a09      	cmp	r2, #9
 800cda2:	d903      	bls.n	800cdac <_svfiprintf_r+0x1a8>
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d0c5      	beq.n	800cd34 <_svfiprintf_r+0x130>
 800cda8:	9105      	str	r1, [sp, #20]
 800cdaa:	e7c3      	b.n	800cd34 <_svfiprintf_r+0x130>
 800cdac:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdb0:	4604      	mov	r4, r0
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	e7f0      	b.n	800cd98 <_svfiprintf_r+0x194>
 800cdb6:	ab03      	add	r3, sp, #12
 800cdb8:	9300      	str	r3, [sp, #0]
 800cdba:	462a      	mov	r2, r5
 800cdbc:	4b0f      	ldr	r3, [pc, #60]	; (800cdfc <_svfiprintf_r+0x1f8>)
 800cdbe:	a904      	add	r1, sp, #16
 800cdc0:	4638      	mov	r0, r7
 800cdc2:	f3af 8000 	nop.w
 800cdc6:	1c42      	adds	r2, r0, #1
 800cdc8:	4606      	mov	r6, r0
 800cdca:	d1d6      	bne.n	800cd7a <_svfiprintf_r+0x176>
 800cdcc:	89ab      	ldrh	r3, [r5, #12]
 800cdce:	065b      	lsls	r3, r3, #25
 800cdd0:	f53f af2c 	bmi.w	800cc2c <_svfiprintf_r+0x28>
 800cdd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cdd6:	b01d      	add	sp, #116	; 0x74
 800cdd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cddc:	ab03      	add	r3, sp, #12
 800cdde:	9300      	str	r3, [sp, #0]
 800cde0:	462a      	mov	r2, r5
 800cde2:	4b06      	ldr	r3, [pc, #24]	; (800cdfc <_svfiprintf_r+0x1f8>)
 800cde4:	a904      	add	r1, sp, #16
 800cde6:	4638      	mov	r0, r7
 800cde8:	f000 f9d4 	bl	800d194 <_printf_i>
 800cdec:	e7eb      	b.n	800cdc6 <_svfiprintf_r+0x1c2>
 800cdee:	bf00      	nop
 800cdf0:	080216f8 	.word	0x080216f8
 800cdf4:	08021702 	.word	0x08021702
 800cdf8:	00000000 	.word	0x00000000
 800cdfc:	0800cb4d 	.word	0x0800cb4d
 800ce00:	080216fe 	.word	0x080216fe

0800ce04 <__sfputc_r>:
 800ce04:	6893      	ldr	r3, [r2, #8]
 800ce06:	3b01      	subs	r3, #1
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	b410      	push	{r4}
 800ce0c:	6093      	str	r3, [r2, #8]
 800ce0e:	da08      	bge.n	800ce22 <__sfputc_r+0x1e>
 800ce10:	6994      	ldr	r4, [r2, #24]
 800ce12:	42a3      	cmp	r3, r4
 800ce14:	db01      	blt.n	800ce1a <__sfputc_r+0x16>
 800ce16:	290a      	cmp	r1, #10
 800ce18:	d103      	bne.n	800ce22 <__sfputc_r+0x1e>
 800ce1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce1e:	f000 bb33 	b.w	800d488 <__swbuf_r>
 800ce22:	6813      	ldr	r3, [r2, #0]
 800ce24:	1c58      	adds	r0, r3, #1
 800ce26:	6010      	str	r0, [r2, #0]
 800ce28:	7019      	strb	r1, [r3, #0]
 800ce2a:	4608      	mov	r0, r1
 800ce2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce30:	4770      	bx	lr

0800ce32 <__sfputs_r>:
 800ce32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce34:	4606      	mov	r6, r0
 800ce36:	460f      	mov	r7, r1
 800ce38:	4614      	mov	r4, r2
 800ce3a:	18d5      	adds	r5, r2, r3
 800ce3c:	42ac      	cmp	r4, r5
 800ce3e:	d101      	bne.n	800ce44 <__sfputs_r+0x12>
 800ce40:	2000      	movs	r0, #0
 800ce42:	e007      	b.n	800ce54 <__sfputs_r+0x22>
 800ce44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce48:	463a      	mov	r2, r7
 800ce4a:	4630      	mov	r0, r6
 800ce4c:	f7ff ffda 	bl	800ce04 <__sfputc_r>
 800ce50:	1c43      	adds	r3, r0, #1
 800ce52:	d1f3      	bne.n	800ce3c <__sfputs_r+0xa>
 800ce54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ce58 <_vfiprintf_r>:
 800ce58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce5c:	460d      	mov	r5, r1
 800ce5e:	b09d      	sub	sp, #116	; 0x74
 800ce60:	4614      	mov	r4, r2
 800ce62:	4698      	mov	r8, r3
 800ce64:	4606      	mov	r6, r0
 800ce66:	b118      	cbz	r0, 800ce70 <_vfiprintf_r+0x18>
 800ce68:	6983      	ldr	r3, [r0, #24]
 800ce6a:	b90b      	cbnz	r3, 800ce70 <_vfiprintf_r+0x18>
 800ce6c:	f7ff fd0a 	bl	800c884 <__sinit>
 800ce70:	4b89      	ldr	r3, [pc, #548]	; (800d098 <_vfiprintf_r+0x240>)
 800ce72:	429d      	cmp	r5, r3
 800ce74:	d11b      	bne.n	800ceae <_vfiprintf_r+0x56>
 800ce76:	6875      	ldr	r5, [r6, #4]
 800ce78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce7a:	07d9      	lsls	r1, r3, #31
 800ce7c:	d405      	bmi.n	800ce8a <_vfiprintf_r+0x32>
 800ce7e:	89ab      	ldrh	r3, [r5, #12]
 800ce80:	059a      	lsls	r2, r3, #22
 800ce82:	d402      	bmi.n	800ce8a <_vfiprintf_r+0x32>
 800ce84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce86:	f7ff fdad 	bl	800c9e4 <__retarget_lock_acquire_recursive>
 800ce8a:	89ab      	ldrh	r3, [r5, #12]
 800ce8c:	071b      	lsls	r3, r3, #28
 800ce8e:	d501      	bpl.n	800ce94 <_vfiprintf_r+0x3c>
 800ce90:	692b      	ldr	r3, [r5, #16]
 800ce92:	b9eb      	cbnz	r3, 800ced0 <_vfiprintf_r+0x78>
 800ce94:	4629      	mov	r1, r5
 800ce96:	4630      	mov	r0, r6
 800ce98:	f000 fb5a 	bl	800d550 <__swsetup_r>
 800ce9c:	b1c0      	cbz	r0, 800ced0 <_vfiprintf_r+0x78>
 800ce9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cea0:	07dc      	lsls	r4, r3, #31
 800cea2:	d50e      	bpl.n	800cec2 <_vfiprintf_r+0x6a>
 800cea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cea8:	b01d      	add	sp, #116	; 0x74
 800ceaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ceae:	4b7b      	ldr	r3, [pc, #492]	; (800d09c <_vfiprintf_r+0x244>)
 800ceb0:	429d      	cmp	r5, r3
 800ceb2:	d101      	bne.n	800ceb8 <_vfiprintf_r+0x60>
 800ceb4:	68b5      	ldr	r5, [r6, #8]
 800ceb6:	e7df      	b.n	800ce78 <_vfiprintf_r+0x20>
 800ceb8:	4b79      	ldr	r3, [pc, #484]	; (800d0a0 <_vfiprintf_r+0x248>)
 800ceba:	429d      	cmp	r5, r3
 800cebc:	bf08      	it	eq
 800cebe:	68f5      	ldreq	r5, [r6, #12]
 800cec0:	e7da      	b.n	800ce78 <_vfiprintf_r+0x20>
 800cec2:	89ab      	ldrh	r3, [r5, #12]
 800cec4:	0598      	lsls	r0, r3, #22
 800cec6:	d4ed      	bmi.n	800cea4 <_vfiprintf_r+0x4c>
 800cec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ceca:	f7ff fd8c 	bl	800c9e6 <__retarget_lock_release_recursive>
 800cece:	e7e9      	b.n	800cea4 <_vfiprintf_r+0x4c>
 800ced0:	2300      	movs	r3, #0
 800ced2:	9309      	str	r3, [sp, #36]	; 0x24
 800ced4:	2320      	movs	r3, #32
 800ced6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ceda:	f8cd 800c 	str.w	r8, [sp, #12]
 800cede:	2330      	movs	r3, #48	; 0x30
 800cee0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d0a4 <_vfiprintf_r+0x24c>
 800cee4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cee8:	f04f 0901 	mov.w	r9, #1
 800ceec:	4623      	mov	r3, r4
 800ceee:	469a      	mov	sl, r3
 800cef0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cef4:	b10a      	cbz	r2, 800cefa <_vfiprintf_r+0xa2>
 800cef6:	2a25      	cmp	r2, #37	; 0x25
 800cef8:	d1f9      	bne.n	800ceee <_vfiprintf_r+0x96>
 800cefa:	ebba 0b04 	subs.w	fp, sl, r4
 800cefe:	d00b      	beq.n	800cf18 <_vfiprintf_r+0xc0>
 800cf00:	465b      	mov	r3, fp
 800cf02:	4622      	mov	r2, r4
 800cf04:	4629      	mov	r1, r5
 800cf06:	4630      	mov	r0, r6
 800cf08:	f7ff ff93 	bl	800ce32 <__sfputs_r>
 800cf0c:	3001      	adds	r0, #1
 800cf0e:	f000 80aa 	beq.w	800d066 <_vfiprintf_r+0x20e>
 800cf12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf14:	445a      	add	r2, fp
 800cf16:	9209      	str	r2, [sp, #36]	; 0x24
 800cf18:	f89a 3000 	ldrb.w	r3, [sl]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f000 80a2 	beq.w	800d066 <_vfiprintf_r+0x20e>
 800cf22:	2300      	movs	r3, #0
 800cf24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf2c:	f10a 0a01 	add.w	sl, sl, #1
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	9307      	str	r3, [sp, #28]
 800cf34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf38:	931a      	str	r3, [sp, #104]	; 0x68
 800cf3a:	4654      	mov	r4, sl
 800cf3c:	2205      	movs	r2, #5
 800cf3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf42:	4858      	ldr	r0, [pc, #352]	; (800d0a4 <_vfiprintf_r+0x24c>)
 800cf44:	f7f3 f9e4 	bl	8000310 <memchr>
 800cf48:	9a04      	ldr	r2, [sp, #16]
 800cf4a:	b9d8      	cbnz	r0, 800cf84 <_vfiprintf_r+0x12c>
 800cf4c:	06d1      	lsls	r1, r2, #27
 800cf4e:	bf44      	itt	mi
 800cf50:	2320      	movmi	r3, #32
 800cf52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf56:	0713      	lsls	r3, r2, #28
 800cf58:	bf44      	itt	mi
 800cf5a:	232b      	movmi	r3, #43	; 0x2b
 800cf5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf60:	f89a 3000 	ldrb.w	r3, [sl]
 800cf64:	2b2a      	cmp	r3, #42	; 0x2a
 800cf66:	d015      	beq.n	800cf94 <_vfiprintf_r+0x13c>
 800cf68:	9a07      	ldr	r2, [sp, #28]
 800cf6a:	4654      	mov	r4, sl
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	f04f 0c0a 	mov.w	ip, #10
 800cf72:	4621      	mov	r1, r4
 800cf74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf78:	3b30      	subs	r3, #48	; 0x30
 800cf7a:	2b09      	cmp	r3, #9
 800cf7c:	d94e      	bls.n	800d01c <_vfiprintf_r+0x1c4>
 800cf7e:	b1b0      	cbz	r0, 800cfae <_vfiprintf_r+0x156>
 800cf80:	9207      	str	r2, [sp, #28]
 800cf82:	e014      	b.n	800cfae <_vfiprintf_r+0x156>
 800cf84:	eba0 0308 	sub.w	r3, r0, r8
 800cf88:	fa09 f303 	lsl.w	r3, r9, r3
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	9304      	str	r3, [sp, #16]
 800cf90:	46a2      	mov	sl, r4
 800cf92:	e7d2      	b.n	800cf3a <_vfiprintf_r+0xe2>
 800cf94:	9b03      	ldr	r3, [sp, #12]
 800cf96:	1d19      	adds	r1, r3, #4
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	9103      	str	r1, [sp, #12]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	bfbb      	ittet	lt
 800cfa0:	425b      	neglt	r3, r3
 800cfa2:	f042 0202 	orrlt.w	r2, r2, #2
 800cfa6:	9307      	strge	r3, [sp, #28]
 800cfa8:	9307      	strlt	r3, [sp, #28]
 800cfaa:	bfb8      	it	lt
 800cfac:	9204      	strlt	r2, [sp, #16]
 800cfae:	7823      	ldrb	r3, [r4, #0]
 800cfb0:	2b2e      	cmp	r3, #46	; 0x2e
 800cfb2:	d10c      	bne.n	800cfce <_vfiprintf_r+0x176>
 800cfb4:	7863      	ldrb	r3, [r4, #1]
 800cfb6:	2b2a      	cmp	r3, #42	; 0x2a
 800cfb8:	d135      	bne.n	800d026 <_vfiprintf_r+0x1ce>
 800cfba:	9b03      	ldr	r3, [sp, #12]
 800cfbc:	1d1a      	adds	r2, r3, #4
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	9203      	str	r2, [sp, #12]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	bfb8      	it	lt
 800cfc6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cfca:	3402      	adds	r4, #2
 800cfcc:	9305      	str	r3, [sp, #20]
 800cfce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d0b4 <_vfiprintf_r+0x25c>
 800cfd2:	7821      	ldrb	r1, [r4, #0]
 800cfd4:	2203      	movs	r2, #3
 800cfd6:	4650      	mov	r0, sl
 800cfd8:	f7f3 f99a 	bl	8000310 <memchr>
 800cfdc:	b140      	cbz	r0, 800cff0 <_vfiprintf_r+0x198>
 800cfde:	2340      	movs	r3, #64	; 0x40
 800cfe0:	eba0 000a 	sub.w	r0, r0, sl
 800cfe4:	fa03 f000 	lsl.w	r0, r3, r0
 800cfe8:	9b04      	ldr	r3, [sp, #16]
 800cfea:	4303      	orrs	r3, r0
 800cfec:	3401      	adds	r4, #1
 800cfee:	9304      	str	r3, [sp, #16]
 800cff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cff4:	482c      	ldr	r0, [pc, #176]	; (800d0a8 <_vfiprintf_r+0x250>)
 800cff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cffa:	2206      	movs	r2, #6
 800cffc:	f7f3 f988 	bl	8000310 <memchr>
 800d000:	2800      	cmp	r0, #0
 800d002:	d03f      	beq.n	800d084 <_vfiprintf_r+0x22c>
 800d004:	4b29      	ldr	r3, [pc, #164]	; (800d0ac <_vfiprintf_r+0x254>)
 800d006:	bb1b      	cbnz	r3, 800d050 <_vfiprintf_r+0x1f8>
 800d008:	9b03      	ldr	r3, [sp, #12]
 800d00a:	3307      	adds	r3, #7
 800d00c:	f023 0307 	bic.w	r3, r3, #7
 800d010:	3308      	adds	r3, #8
 800d012:	9303      	str	r3, [sp, #12]
 800d014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d016:	443b      	add	r3, r7
 800d018:	9309      	str	r3, [sp, #36]	; 0x24
 800d01a:	e767      	b.n	800ceec <_vfiprintf_r+0x94>
 800d01c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d020:	460c      	mov	r4, r1
 800d022:	2001      	movs	r0, #1
 800d024:	e7a5      	b.n	800cf72 <_vfiprintf_r+0x11a>
 800d026:	2300      	movs	r3, #0
 800d028:	3401      	adds	r4, #1
 800d02a:	9305      	str	r3, [sp, #20]
 800d02c:	4619      	mov	r1, r3
 800d02e:	f04f 0c0a 	mov.w	ip, #10
 800d032:	4620      	mov	r0, r4
 800d034:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d038:	3a30      	subs	r2, #48	; 0x30
 800d03a:	2a09      	cmp	r2, #9
 800d03c:	d903      	bls.n	800d046 <_vfiprintf_r+0x1ee>
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d0c5      	beq.n	800cfce <_vfiprintf_r+0x176>
 800d042:	9105      	str	r1, [sp, #20]
 800d044:	e7c3      	b.n	800cfce <_vfiprintf_r+0x176>
 800d046:	fb0c 2101 	mla	r1, ip, r1, r2
 800d04a:	4604      	mov	r4, r0
 800d04c:	2301      	movs	r3, #1
 800d04e:	e7f0      	b.n	800d032 <_vfiprintf_r+0x1da>
 800d050:	ab03      	add	r3, sp, #12
 800d052:	9300      	str	r3, [sp, #0]
 800d054:	462a      	mov	r2, r5
 800d056:	4b16      	ldr	r3, [pc, #88]	; (800d0b0 <_vfiprintf_r+0x258>)
 800d058:	a904      	add	r1, sp, #16
 800d05a:	4630      	mov	r0, r6
 800d05c:	f3af 8000 	nop.w
 800d060:	4607      	mov	r7, r0
 800d062:	1c78      	adds	r0, r7, #1
 800d064:	d1d6      	bne.n	800d014 <_vfiprintf_r+0x1bc>
 800d066:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d068:	07d9      	lsls	r1, r3, #31
 800d06a:	d405      	bmi.n	800d078 <_vfiprintf_r+0x220>
 800d06c:	89ab      	ldrh	r3, [r5, #12]
 800d06e:	059a      	lsls	r2, r3, #22
 800d070:	d402      	bmi.n	800d078 <_vfiprintf_r+0x220>
 800d072:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d074:	f7ff fcb7 	bl	800c9e6 <__retarget_lock_release_recursive>
 800d078:	89ab      	ldrh	r3, [r5, #12]
 800d07a:	065b      	lsls	r3, r3, #25
 800d07c:	f53f af12 	bmi.w	800cea4 <_vfiprintf_r+0x4c>
 800d080:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d082:	e711      	b.n	800cea8 <_vfiprintf_r+0x50>
 800d084:	ab03      	add	r3, sp, #12
 800d086:	9300      	str	r3, [sp, #0]
 800d088:	462a      	mov	r2, r5
 800d08a:	4b09      	ldr	r3, [pc, #36]	; (800d0b0 <_vfiprintf_r+0x258>)
 800d08c:	a904      	add	r1, sp, #16
 800d08e:	4630      	mov	r0, r6
 800d090:	f000 f880 	bl	800d194 <_printf_i>
 800d094:	e7e4      	b.n	800d060 <_vfiprintf_r+0x208>
 800d096:	bf00      	nop
 800d098:	080216b8 	.word	0x080216b8
 800d09c:	080216d8 	.word	0x080216d8
 800d0a0:	08021698 	.word	0x08021698
 800d0a4:	080216f8 	.word	0x080216f8
 800d0a8:	08021702 	.word	0x08021702
 800d0ac:	00000000 	.word	0x00000000
 800d0b0:	0800ce33 	.word	0x0800ce33
 800d0b4:	080216fe 	.word	0x080216fe

0800d0b8 <_printf_common>:
 800d0b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0bc:	4616      	mov	r6, r2
 800d0be:	4699      	mov	r9, r3
 800d0c0:	688a      	ldr	r2, [r1, #8]
 800d0c2:	690b      	ldr	r3, [r1, #16]
 800d0c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0c8:	4293      	cmp	r3, r2
 800d0ca:	bfb8      	it	lt
 800d0cc:	4613      	movlt	r3, r2
 800d0ce:	6033      	str	r3, [r6, #0]
 800d0d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0d4:	4607      	mov	r7, r0
 800d0d6:	460c      	mov	r4, r1
 800d0d8:	b10a      	cbz	r2, 800d0de <_printf_common+0x26>
 800d0da:	3301      	adds	r3, #1
 800d0dc:	6033      	str	r3, [r6, #0]
 800d0de:	6823      	ldr	r3, [r4, #0]
 800d0e0:	0699      	lsls	r1, r3, #26
 800d0e2:	bf42      	ittt	mi
 800d0e4:	6833      	ldrmi	r3, [r6, #0]
 800d0e6:	3302      	addmi	r3, #2
 800d0e8:	6033      	strmi	r3, [r6, #0]
 800d0ea:	6825      	ldr	r5, [r4, #0]
 800d0ec:	f015 0506 	ands.w	r5, r5, #6
 800d0f0:	d106      	bne.n	800d100 <_printf_common+0x48>
 800d0f2:	f104 0a19 	add.w	sl, r4, #25
 800d0f6:	68e3      	ldr	r3, [r4, #12]
 800d0f8:	6832      	ldr	r2, [r6, #0]
 800d0fa:	1a9b      	subs	r3, r3, r2
 800d0fc:	42ab      	cmp	r3, r5
 800d0fe:	dc26      	bgt.n	800d14e <_printf_common+0x96>
 800d100:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d104:	1e13      	subs	r3, r2, #0
 800d106:	6822      	ldr	r2, [r4, #0]
 800d108:	bf18      	it	ne
 800d10a:	2301      	movne	r3, #1
 800d10c:	0692      	lsls	r2, r2, #26
 800d10e:	d42b      	bmi.n	800d168 <_printf_common+0xb0>
 800d110:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d114:	4649      	mov	r1, r9
 800d116:	4638      	mov	r0, r7
 800d118:	47c0      	blx	r8
 800d11a:	3001      	adds	r0, #1
 800d11c:	d01e      	beq.n	800d15c <_printf_common+0xa4>
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	68e5      	ldr	r5, [r4, #12]
 800d122:	6832      	ldr	r2, [r6, #0]
 800d124:	f003 0306 	and.w	r3, r3, #6
 800d128:	2b04      	cmp	r3, #4
 800d12a:	bf08      	it	eq
 800d12c:	1aad      	subeq	r5, r5, r2
 800d12e:	68a3      	ldr	r3, [r4, #8]
 800d130:	6922      	ldr	r2, [r4, #16]
 800d132:	bf0c      	ite	eq
 800d134:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d138:	2500      	movne	r5, #0
 800d13a:	4293      	cmp	r3, r2
 800d13c:	bfc4      	itt	gt
 800d13e:	1a9b      	subgt	r3, r3, r2
 800d140:	18ed      	addgt	r5, r5, r3
 800d142:	2600      	movs	r6, #0
 800d144:	341a      	adds	r4, #26
 800d146:	42b5      	cmp	r5, r6
 800d148:	d11a      	bne.n	800d180 <_printf_common+0xc8>
 800d14a:	2000      	movs	r0, #0
 800d14c:	e008      	b.n	800d160 <_printf_common+0xa8>
 800d14e:	2301      	movs	r3, #1
 800d150:	4652      	mov	r2, sl
 800d152:	4649      	mov	r1, r9
 800d154:	4638      	mov	r0, r7
 800d156:	47c0      	blx	r8
 800d158:	3001      	adds	r0, #1
 800d15a:	d103      	bne.n	800d164 <_printf_common+0xac>
 800d15c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d164:	3501      	adds	r5, #1
 800d166:	e7c6      	b.n	800d0f6 <_printf_common+0x3e>
 800d168:	18e1      	adds	r1, r4, r3
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	2030      	movs	r0, #48	; 0x30
 800d16e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d172:	4422      	add	r2, r4
 800d174:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d178:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d17c:	3302      	adds	r3, #2
 800d17e:	e7c7      	b.n	800d110 <_printf_common+0x58>
 800d180:	2301      	movs	r3, #1
 800d182:	4622      	mov	r2, r4
 800d184:	4649      	mov	r1, r9
 800d186:	4638      	mov	r0, r7
 800d188:	47c0      	blx	r8
 800d18a:	3001      	adds	r0, #1
 800d18c:	d0e6      	beq.n	800d15c <_printf_common+0xa4>
 800d18e:	3601      	adds	r6, #1
 800d190:	e7d9      	b.n	800d146 <_printf_common+0x8e>
	...

0800d194 <_printf_i>:
 800d194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d198:	460c      	mov	r4, r1
 800d19a:	4691      	mov	r9, r2
 800d19c:	7e27      	ldrb	r7, [r4, #24]
 800d19e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800d1a0:	2f78      	cmp	r7, #120	; 0x78
 800d1a2:	4680      	mov	r8, r0
 800d1a4:	469a      	mov	sl, r3
 800d1a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d1aa:	d807      	bhi.n	800d1bc <_printf_i+0x28>
 800d1ac:	2f62      	cmp	r7, #98	; 0x62
 800d1ae:	d80a      	bhi.n	800d1c6 <_printf_i+0x32>
 800d1b0:	2f00      	cmp	r7, #0
 800d1b2:	f000 80d8 	beq.w	800d366 <_printf_i+0x1d2>
 800d1b6:	2f58      	cmp	r7, #88	; 0x58
 800d1b8:	f000 80a3 	beq.w	800d302 <_printf_i+0x16e>
 800d1bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d1c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1c4:	e03a      	b.n	800d23c <_printf_i+0xa8>
 800d1c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1ca:	2b15      	cmp	r3, #21
 800d1cc:	d8f6      	bhi.n	800d1bc <_printf_i+0x28>
 800d1ce:	a001      	add	r0, pc, #4	; (adr r0, 800d1d4 <_printf_i+0x40>)
 800d1d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800d1d4:	0800d22d 	.word	0x0800d22d
 800d1d8:	0800d241 	.word	0x0800d241
 800d1dc:	0800d1bd 	.word	0x0800d1bd
 800d1e0:	0800d1bd 	.word	0x0800d1bd
 800d1e4:	0800d1bd 	.word	0x0800d1bd
 800d1e8:	0800d1bd 	.word	0x0800d1bd
 800d1ec:	0800d241 	.word	0x0800d241
 800d1f0:	0800d1bd 	.word	0x0800d1bd
 800d1f4:	0800d1bd 	.word	0x0800d1bd
 800d1f8:	0800d1bd 	.word	0x0800d1bd
 800d1fc:	0800d1bd 	.word	0x0800d1bd
 800d200:	0800d34d 	.word	0x0800d34d
 800d204:	0800d271 	.word	0x0800d271
 800d208:	0800d32f 	.word	0x0800d32f
 800d20c:	0800d1bd 	.word	0x0800d1bd
 800d210:	0800d1bd 	.word	0x0800d1bd
 800d214:	0800d36f 	.word	0x0800d36f
 800d218:	0800d1bd 	.word	0x0800d1bd
 800d21c:	0800d271 	.word	0x0800d271
 800d220:	0800d1bd 	.word	0x0800d1bd
 800d224:	0800d1bd 	.word	0x0800d1bd
 800d228:	0800d337 	.word	0x0800d337
 800d22c:	680b      	ldr	r3, [r1, #0]
 800d22e:	1d1a      	adds	r2, r3, #4
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	600a      	str	r2, [r1, #0]
 800d234:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d23c:	2301      	movs	r3, #1
 800d23e:	e0a3      	b.n	800d388 <_printf_i+0x1f4>
 800d240:	6825      	ldr	r5, [r4, #0]
 800d242:	6808      	ldr	r0, [r1, #0]
 800d244:	062e      	lsls	r6, r5, #24
 800d246:	f100 0304 	add.w	r3, r0, #4
 800d24a:	d50a      	bpl.n	800d262 <_printf_i+0xce>
 800d24c:	6805      	ldr	r5, [r0, #0]
 800d24e:	600b      	str	r3, [r1, #0]
 800d250:	2d00      	cmp	r5, #0
 800d252:	da03      	bge.n	800d25c <_printf_i+0xc8>
 800d254:	232d      	movs	r3, #45	; 0x2d
 800d256:	426d      	negs	r5, r5
 800d258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d25c:	485e      	ldr	r0, [pc, #376]	; (800d3d8 <_printf_i+0x244>)
 800d25e:	230a      	movs	r3, #10
 800d260:	e019      	b.n	800d296 <_printf_i+0x102>
 800d262:	f015 0f40 	tst.w	r5, #64	; 0x40
 800d266:	6805      	ldr	r5, [r0, #0]
 800d268:	600b      	str	r3, [r1, #0]
 800d26a:	bf18      	it	ne
 800d26c:	b22d      	sxthne	r5, r5
 800d26e:	e7ef      	b.n	800d250 <_printf_i+0xbc>
 800d270:	680b      	ldr	r3, [r1, #0]
 800d272:	6825      	ldr	r5, [r4, #0]
 800d274:	1d18      	adds	r0, r3, #4
 800d276:	6008      	str	r0, [r1, #0]
 800d278:	0628      	lsls	r0, r5, #24
 800d27a:	d501      	bpl.n	800d280 <_printf_i+0xec>
 800d27c:	681d      	ldr	r5, [r3, #0]
 800d27e:	e002      	b.n	800d286 <_printf_i+0xf2>
 800d280:	0669      	lsls	r1, r5, #25
 800d282:	d5fb      	bpl.n	800d27c <_printf_i+0xe8>
 800d284:	881d      	ldrh	r5, [r3, #0]
 800d286:	4854      	ldr	r0, [pc, #336]	; (800d3d8 <_printf_i+0x244>)
 800d288:	2f6f      	cmp	r7, #111	; 0x6f
 800d28a:	bf0c      	ite	eq
 800d28c:	2308      	moveq	r3, #8
 800d28e:	230a      	movne	r3, #10
 800d290:	2100      	movs	r1, #0
 800d292:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d296:	6866      	ldr	r6, [r4, #4]
 800d298:	60a6      	str	r6, [r4, #8]
 800d29a:	2e00      	cmp	r6, #0
 800d29c:	bfa2      	ittt	ge
 800d29e:	6821      	ldrge	r1, [r4, #0]
 800d2a0:	f021 0104 	bicge.w	r1, r1, #4
 800d2a4:	6021      	strge	r1, [r4, #0]
 800d2a6:	b90d      	cbnz	r5, 800d2ac <_printf_i+0x118>
 800d2a8:	2e00      	cmp	r6, #0
 800d2aa:	d04d      	beq.n	800d348 <_printf_i+0x1b4>
 800d2ac:	4616      	mov	r6, r2
 800d2ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800d2b2:	fb03 5711 	mls	r7, r3, r1, r5
 800d2b6:	5dc7      	ldrb	r7, [r0, r7]
 800d2b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d2bc:	462f      	mov	r7, r5
 800d2be:	42bb      	cmp	r3, r7
 800d2c0:	460d      	mov	r5, r1
 800d2c2:	d9f4      	bls.n	800d2ae <_printf_i+0x11a>
 800d2c4:	2b08      	cmp	r3, #8
 800d2c6:	d10b      	bne.n	800d2e0 <_printf_i+0x14c>
 800d2c8:	6823      	ldr	r3, [r4, #0]
 800d2ca:	07df      	lsls	r7, r3, #31
 800d2cc:	d508      	bpl.n	800d2e0 <_printf_i+0x14c>
 800d2ce:	6923      	ldr	r3, [r4, #16]
 800d2d0:	6861      	ldr	r1, [r4, #4]
 800d2d2:	4299      	cmp	r1, r3
 800d2d4:	bfde      	ittt	le
 800d2d6:	2330      	movle	r3, #48	; 0x30
 800d2d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2dc:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800d2e0:	1b92      	subs	r2, r2, r6
 800d2e2:	6122      	str	r2, [r4, #16]
 800d2e4:	f8cd a000 	str.w	sl, [sp]
 800d2e8:	464b      	mov	r3, r9
 800d2ea:	aa03      	add	r2, sp, #12
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	4640      	mov	r0, r8
 800d2f0:	f7ff fee2 	bl	800d0b8 <_printf_common>
 800d2f4:	3001      	adds	r0, #1
 800d2f6:	d14c      	bne.n	800d392 <_printf_i+0x1fe>
 800d2f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2fc:	b004      	add	sp, #16
 800d2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d302:	4835      	ldr	r0, [pc, #212]	; (800d3d8 <_printf_i+0x244>)
 800d304:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d308:	6823      	ldr	r3, [r4, #0]
 800d30a:	680e      	ldr	r6, [r1, #0]
 800d30c:	061f      	lsls	r7, r3, #24
 800d30e:	f856 5b04 	ldr.w	r5, [r6], #4
 800d312:	600e      	str	r6, [r1, #0]
 800d314:	d514      	bpl.n	800d340 <_printf_i+0x1ac>
 800d316:	07d9      	lsls	r1, r3, #31
 800d318:	bf44      	itt	mi
 800d31a:	f043 0320 	orrmi.w	r3, r3, #32
 800d31e:	6023      	strmi	r3, [r4, #0]
 800d320:	b91d      	cbnz	r5, 800d32a <_printf_i+0x196>
 800d322:	6823      	ldr	r3, [r4, #0]
 800d324:	f023 0320 	bic.w	r3, r3, #32
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	2310      	movs	r3, #16
 800d32c:	e7b0      	b.n	800d290 <_printf_i+0xfc>
 800d32e:	6823      	ldr	r3, [r4, #0]
 800d330:	f043 0320 	orr.w	r3, r3, #32
 800d334:	6023      	str	r3, [r4, #0]
 800d336:	2378      	movs	r3, #120	; 0x78
 800d338:	4828      	ldr	r0, [pc, #160]	; (800d3dc <_printf_i+0x248>)
 800d33a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d33e:	e7e3      	b.n	800d308 <_printf_i+0x174>
 800d340:	065e      	lsls	r6, r3, #25
 800d342:	bf48      	it	mi
 800d344:	b2ad      	uxthmi	r5, r5
 800d346:	e7e6      	b.n	800d316 <_printf_i+0x182>
 800d348:	4616      	mov	r6, r2
 800d34a:	e7bb      	b.n	800d2c4 <_printf_i+0x130>
 800d34c:	680b      	ldr	r3, [r1, #0]
 800d34e:	6826      	ldr	r6, [r4, #0]
 800d350:	6960      	ldr	r0, [r4, #20]
 800d352:	1d1d      	adds	r5, r3, #4
 800d354:	600d      	str	r5, [r1, #0]
 800d356:	0635      	lsls	r5, r6, #24
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	d501      	bpl.n	800d360 <_printf_i+0x1cc>
 800d35c:	6018      	str	r0, [r3, #0]
 800d35e:	e002      	b.n	800d366 <_printf_i+0x1d2>
 800d360:	0671      	lsls	r1, r6, #25
 800d362:	d5fb      	bpl.n	800d35c <_printf_i+0x1c8>
 800d364:	8018      	strh	r0, [r3, #0]
 800d366:	2300      	movs	r3, #0
 800d368:	6123      	str	r3, [r4, #16]
 800d36a:	4616      	mov	r6, r2
 800d36c:	e7ba      	b.n	800d2e4 <_printf_i+0x150>
 800d36e:	680b      	ldr	r3, [r1, #0]
 800d370:	1d1a      	adds	r2, r3, #4
 800d372:	600a      	str	r2, [r1, #0]
 800d374:	681e      	ldr	r6, [r3, #0]
 800d376:	6862      	ldr	r2, [r4, #4]
 800d378:	2100      	movs	r1, #0
 800d37a:	4630      	mov	r0, r6
 800d37c:	f7f2 ffc8 	bl	8000310 <memchr>
 800d380:	b108      	cbz	r0, 800d386 <_printf_i+0x1f2>
 800d382:	1b80      	subs	r0, r0, r6
 800d384:	6060      	str	r0, [r4, #4]
 800d386:	6863      	ldr	r3, [r4, #4]
 800d388:	6123      	str	r3, [r4, #16]
 800d38a:	2300      	movs	r3, #0
 800d38c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d390:	e7a8      	b.n	800d2e4 <_printf_i+0x150>
 800d392:	6923      	ldr	r3, [r4, #16]
 800d394:	4632      	mov	r2, r6
 800d396:	4649      	mov	r1, r9
 800d398:	4640      	mov	r0, r8
 800d39a:	47d0      	blx	sl
 800d39c:	3001      	adds	r0, #1
 800d39e:	d0ab      	beq.n	800d2f8 <_printf_i+0x164>
 800d3a0:	6823      	ldr	r3, [r4, #0]
 800d3a2:	079b      	lsls	r3, r3, #30
 800d3a4:	d413      	bmi.n	800d3ce <_printf_i+0x23a>
 800d3a6:	68e0      	ldr	r0, [r4, #12]
 800d3a8:	9b03      	ldr	r3, [sp, #12]
 800d3aa:	4298      	cmp	r0, r3
 800d3ac:	bfb8      	it	lt
 800d3ae:	4618      	movlt	r0, r3
 800d3b0:	e7a4      	b.n	800d2fc <_printf_i+0x168>
 800d3b2:	2301      	movs	r3, #1
 800d3b4:	4632      	mov	r2, r6
 800d3b6:	4649      	mov	r1, r9
 800d3b8:	4640      	mov	r0, r8
 800d3ba:	47d0      	blx	sl
 800d3bc:	3001      	adds	r0, #1
 800d3be:	d09b      	beq.n	800d2f8 <_printf_i+0x164>
 800d3c0:	3501      	adds	r5, #1
 800d3c2:	68e3      	ldr	r3, [r4, #12]
 800d3c4:	9903      	ldr	r1, [sp, #12]
 800d3c6:	1a5b      	subs	r3, r3, r1
 800d3c8:	42ab      	cmp	r3, r5
 800d3ca:	dcf2      	bgt.n	800d3b2 <_printf_i+0x21e>
 800d3cc:	e7eb      	b.n	800d3a6 <_printf_i+0x212>
 800d3ce:	2500      	movs	r5, #0
 800d3d0:	f104 0619 	add.w	r6, r4, #25
 800d3d4:	e7f5      	b.n	800d3c2 <_printf_i+0x22e>
 800d3d6:	bf00      	nop
 800d3d8:	08021709 	.word	0x08021709
 800d3dc:	0802171a 	.word	0x0802171a

0800d3e0 <_sbrk_r>:
 800d3e0:	b538      	push	{r3, r4, r5, lr}
 800d3e2:	4d06      	ldr	r5, [pc, #24]	; (800d3fc <_sbrk_r+0x1c>)
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	4604      	mov	r4, r0
 800d3e8:	4608      	mov	r0, r1
 800d3ea:	602b      	str	r3, [r5, #0]
 800d3ec:	f000 fb58 	bl	800daa0 <_sbrk>
 800d3f0:	1c43      	adds	r3, r0, #1
 800d3f2:	d102      	bne.n	800d3fa <_sbrk_r+0x1a>
 800d3f4:	682b      	ldr	r3, [r5, #0]
 800d3f6:	b103      	cbz	r3, 800d3fa <_sbrk_r+0x1a>
 800d3f8:	6023      	str	r3, [r4, #0]
 800d3fa:	bd38      	pop	{r3, r4, r5, pc}
 800d3fc:	2400a770 	.word	0x2400a770

0800d400 <__sread>:
 800d400:	b510      	push	{r4, lr}
 800d402:	460c      	mov	r4, r1
 800d404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d408:	f000 fa92 	bl	800d930 <_read_r>
 800d40c:	2800      	cmp	r0, #0
 800d40e:	bfab      	itete	ge
 800d410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d412:	89a3      	ldrhlt	r3, [r4, #12]
 800d414:	181b      	addge	r3, r3, r0
 800d416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d41a:	bfac      	ite	ge
 800d41c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d41e:	81a3      	strhlt	r3, [r4, #12]
 800d420:	bd10      	pop	{r4, pc}

0800d422 <__swrite>:
 800d422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d426:	461f      	mov	r7, r3
 800d428:	898b      	ldrh	r3, [r1, #12]
 800d42a:	05db      	lsls	r3, r3, #23
 800d42c:	4605      	mov	r5, r0
 800d42e:	460c      	mov	r4, r1
 800d430:	4616      	mov	r6, r2
 800d432:	d505      	bpl.n	800d440 <__swrite+0x1e>
 800d434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d438:	2302      	movs	r3, #2
 800d43a:	2200      	movs	r2, #0
 800d43c:	f000 f9d0 	bl	800d7e0 <_lseek_r>
 800d440:	89a3      	ldrh	r3, [r4, #12]
 800d442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d44a:	81a3      	strh	r3, [r4, #12]
 800d44c:	4632      	mov	r2, r6
 800d44e:	463b      	mov	r3, r7
 800d450:	4628      	mov	r0, r5
 800d452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d456:	f000 b869 	b.w	800d52c <_write_r>

0800d45a <__sseek>:
 800d45a:	b510      	push	{r4, lr}
 800d45c:	460c      	mov	r4, r1
 800d45e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d462:	f000 f9bd 	bl	800d7e0 <_lseek_r>
 800d466:	1c43      	adds	r3, r0, #1
 800d468:	89a3      	ldrh	r3, [r4, #12]
 800d46a:	bf15      	itete	ne
 800d46c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d46e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d476:	81a3      	strheq	r3, [r4, #12]
 800d478:	bf18      	it	ne
 800d47a:	81a3      	strhne	r3, [r4, #12]
 800d47c:	bd10      	pop	{r4, pc}

0800d47e <__sclose>:
 800d47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d482:	f000 b8db 	b.w	800d63c <_close_r>
	...

0800d488 <__swbuf_r>:
 800d488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d48a:	460e      	mov	r6, r1
 800d48c:	4614      	mov	r4, r2
 800d48e:	4605      	mov	r5, r0
 800d490:	b118      	cbz	r0, 800d49a <__swbuf_r+0x12>
 800d492:	6983      	ldr	r3, [r0, #24]
 800d494:	b90b      	cbnz	r3, 800d49a <__swbuf_r+0x12>
 800d496:	f7ff f9f5 	bl	800c884 <__sinit>
 800d49a:	4b21      	ldr	r3, [pc, #132]	; (800d520 <__swbuf_r+0x98>)
 800d49c:	429c      	cmp	r4, r3
 800d49e:	d12b      	bne.n	800d4f8 <__swbuf_r+0x70>
 800d4a0:	686c      	ldr	r4, [r5, #4]
 800d4a2:	69a3      	ldr	r3, [r4, #24]
 800d4a4:	60a3      	str	r3, [r4, #8]
 800d4a6:	89a3      	ldrh	r3, [r4, #12]
 800d4a8:	071a      	lsls	r2, r3, #28
 800d4aa:	d52f      	bpl.n	800d50c <__swbuf_r+0x84>
 800d4ac:	6923      	ldr	r3, [r4, #16]
 800d4ae:	b36b      	cbz	r3, 800d50c <__swbuf_r+0x84>
 800d4b0:	6923      	ldr	r3, [r4, #16]
 800d4b2:	6820      	ldr	r0, [r4, #0]
 800d4b4:	1ac0      	subs	r0, r0, r3
 800d4b6:	6963      	ldr	r3, [r4, #20]
 800d4b8:	b2f6      	uxtb	r6, r6
 800d4ba:	4283      	cmp	r3, r0
 800d4bc:	4637      	mov	r7, r6
 800d4be:	dc04      	bgt.n	800d4ca <__swbuf_r+0x42>
 800d4c0:	4621      	mov	r1, r4
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	f000 f950 	bl	800d768 <_fflush_r>
 800d4c8:	bb30      	cbnz	r0, 800d518 <__swbuf_r+0x90>
 800d4ca:	68a3      	ldr	r3, [r4, #8]
 800d4cc:	3b01      	subs	r3, #1
 800d4ce:	60a3      	str	r3, [r4, #8]
 800d4d0:	6823      	ldr	r3, [r4, #0]
 800d4d2:	1c5a      	adds	r2, r3, #1
 800d4d4:	6022      	str	r2, [r4, #0]
 800d4d6:	701e      	strb	r6, [r3, #0]
 800d4d8:	6963      	ldr	r3, [r4, #20]
 800d4da:	3001      	adds	r0, #1
 800d4dc:	4283      	cmp	r3, r0
 800d4de:	d004      	beq.n	800d4ea <__swbuf_r+0x62>
 800d4e0:	89a3      	ldrh	r3, [r4, #12]
 800d4e2:	07db      	lsls	r3, r3, #31
 800d4e4:	d506      	bpl.n	800d4f4 <__swbuf_r+0x6c>
 800d4e6:	2e0a      	cmp	r6, #10
 800d4e8:	d104      	bne.n	800d4f4 <__swbuf_r+0x6c>
 800d4ea:	4621      	mov	r1, r4
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	f000 f93b 	bl	800d768 <_fflush_r>
 800d4f2:	b988      	cbnz	r0, 800d518 <__swbuf_r+0x90>
 800d4f4:	4638      	mov	r0, r7
 800d4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4f8:	4b0a      	ldr	r3, [pc, #40]	; (800d524 <__swbuf_r+0x9c>)
 800d4fa:	429c      	cmp	r4, r3
 800d4fc:	d101      	bne.n	800d502 <__swbuf_r+0x7a>
 800d4fe:	68ac      	ldr	r4, [r5, #8]
 800d500:	e7cf      	b.n	800d4a2 <__swbuf_r+0x1a>
 800d502:	4b09      	ldr	r3, [pc, #36]	; (800d528 <__swbuf_r+0xa0>)
 800d504:	429c      	cmp	r4, r3
 800d506:	bf08      	it	eq
 800d508:	68ec      	ldreq	r4, [r5, #12]
 800d50a:	e7ca      	b.n	800d4a2 <__swbuf_r+0x1a>
 800d50c:	4621      	mov	r1, r4
 800d50e:	4628      	mov	r0, r5
 800d510:	f000 f81e 	bl	800d550 <__swsetup_r>
 800d514:	2800      	cmp	r0, #0
 800d516:	d0cb      	beq.n	800d4b0 <__swbuf_r+0x28>
 800d518:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d51c:	e7ea      	b.n	800d4f4 <__swbuf_r+0x6c>
 800d51e:	bf00      	nop
 800d520:	080216b8 	.word	0x080216b8
 800d524:	080216d8 	.word	0x080216d8
 800d528:	08021698 	.word	0x08021698

0800d52c <_write_r>:
 800d52c:	b538      	push	{r3, r4, r5, lr}
 800d52e:	4d07      	ldr	r5, [pc, #28]	; (800d54c <_write_r+0x20>)
 800d530:	4604      	mov	r4, r0
 800d532:	4608      	mov	r0, r1
 800d534:	4611      	mov	r1, r2
 800d536:	2200      	movs	r2, #0
 800d538:	602a      	str	r2, [r5, #0]
 800d53a:	461a      	mov	r2, r3
 800d53c:	f000 fabe 	bl	800dabc <_write>
 800d540:	1c43      	adds	r3, r0, #1
 800d542:	d102      	bne.n	800d54a <_write_r+0x1e>
 800d544:	682b      	ldr	r3, [r5, #0]
 800d546:	b103      	cbz	r3, 800d54a <_write_r+0x1e>
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	bd38      	pop	{r3, r4, r5, pc}
 800d54c:	2400a770 	.word	0x2400a770

0800d550 <__swsetup_r>:
 800d550:	4b32      	ldr	r3, [pc, #200]	; (800d61c <__swsetup_r+0xcc>)
 800d552:	b570      	push	{r4, r5, r6, lr}
 800d554:	681d      	ldr	r5, [r3, #0]
 800d556:	4606      	mov	r6, r0
 800d558:	460c      	mov	r4, r1
 800d55a:	b125      	cbz	r5, 800d566 <__swsetup_r+0x16>
 800d55c:	69ab      	ldr	r3, [r5, #24]
 800d55e:	b913      	cbnz	r3, 800d566 <__swsetup_r+0x16>
 800d560:	4628      	mov	r0, r5
 800d562:	f7ff f98f 	bl	800c884 <__sinit>
 800d566:	4b2e      	ldr	r3, [pc, #184]	; (800d620 <__swsetup_r+0xd0>)
 800d568:	429c      	cmp	r4, r3
 800d56a:	d10f      	bne.n	800d58c <__swsetup_r+0x3c>
 800d56c:	686c      	ldr	r4, [r5, #4]
 800d56e:	89a3      	ldrh	r3, [r4, #12]
 800d570:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d574:	0719      	lsls	r1, r3, #28
 800d576:	d42c      	bmi.n	800d5d2 <__swsetup_r+0x82>
 800d578:	06dd      	lsls	r5, r3, #27
 800d57a:	d411      	bmi.n	800d5a0 <__swsetup_r+0x50>
 800d57c:	2309      	movs	r3, #9
 800d57e:	6033      	str	r3, [r6, #0]
 800d580:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d584:	81a3      	strh	r3, [r4, #12]
 800d586:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d58a:	e03e      	b.n	800d60a <__swsetup_r+0xba>
 800d58c:	4b25      	ldr	r3, [pc, #148]	; (800d624 <__swsetup_r+0xd4>)
 800d58e:	429c      	cmp	r4, r3
 800d590:	d101      	bne.n	800d596 <__swsetup_r+0x46>
 800d592:	68ac      	ldr	r4, [r5, #8]
 800d594:	e7eb      	b.n	800d56e <__swsetup_r+0x1e>
 800d596:	4b24      	ldr	r3, [pc, #144]	; (800d628 <__swsetup_r+0xd8>)
 800d598:	429c      	cmp	r4, r3
 800d59a:	bf08      	it	eq
 800d59c:	68ec      	ldreq	r4, [r5, #12]
 800d59e:	e7e6      	b.n	800d56e <__swsetup_r+0x1e>
 800d5a0:	0758      	lsls	r0, r3, #29
 800d5a2:	d512      	bpl.n	800d5ca <__swsetup_r+0x7a>
 800d5a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5a6:	b141      	cbz	r1, 800d5ba <__swsetup_r+0x6a>
 800d5a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5ac:	4299      	cmp	r1, r3
 800d5ae:	d002      	beq.n	800d5b6 <__swsetup_r+0x66>
 800d5b0:	4630      	mov	r0, r6
 800d5b2:	f7ff fa21 	bl	800c9f8 <_free_r>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	6363      	str	r3, [r4, #52]	; 0x34
 800d5ba:	89a3      	ldrh	r3, [r4, #12]
 800d5bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5c0:	81a3      	strh	r3, [r4, #12]
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	6063      	str	r3, [r4, #4]
 800d5c6:	6923      	ldr	r3, [r4, #16]
 800d5c8:	6023      	str	r3, [r4, #0]
 800d5ca:	89a3      	ldrh	r3, [r4, #12]
 800d5cc:	f043 0308 	orr.w	r3, r3, #8
 800d5d0:	81a3      	strh	r3, [r4, #12]
 800d5d2:	6923      	ldr	r3, [r4, #16]
 800d5d4:	b94b      	cbnz	r3, 800d5ea <__swsetup_r+0x9a>
 800d5d6:	89a3      	ldrh	r3, [r4, #12]
 800d5d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5e0:	d003      	beq.n	800d5ea <__swsetup_r+0x9a>
 800d5e2:	4621      	mov	r1, r4
 800d5e4:	4630      	mov	r0, r6
 800d5e6:	f000 f931 	bl	800d84c <__smakebuf_r>
 800d5ea:	89a0      	ldrh	r0, [r4, #12]
 800d5ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5f0:	f010 0301 	ands.w	r3, r0, #1
 800d5f4:	d00a      	beq.n	800d60c <__swsetup_r+0xbc>
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	60a3      	str	r3, [r4, #8]
 800d5fa:	6963      	ldr	r3, [r4, #20]
 800d5fc:	425b      	negs	r3, r3
 800d5fe:	61a3      	str	r3, [r4, #24]
 800d600:	6923      	ldr	r3, [r4, #16]
 800d602:	b943      	cbnz	r3, 800d616 <__swsetup_r+0xc6>
 800d604:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d608:	d1ba      	bne.n	800d580 <__swsetup_r+0x30>
 800d60a:	bd70      	pop	{r4, r5, r6, pc}
 800d60c:	0781      	lsls	r1, r0, #30
 800d60e:	bf58      	it	pl
 800d610:	6963      	ldrpl	r3, [r4, #20]
 800d612:	60a3      	str	r3, [r4, #8]
 800d614:	e7f4      	b.n	800d600 <__swsetup_r+0xb0>
 800d616:	2000      	movs	r0, #0
 800d618:	e7f7      	b.n	800d60a <__swsetup_r+0xba>
 800d61a:	bf00      	nop
 800d61c:	24000034 	.word	0x24000034
 800d620:	080216b8 	.word	0x080216b8
 800d624:	080216d8 	.word	0x080216d8
 800d628:	08021698 	.word	0x08021698

0800d62c <abort>:
 800d62c:	b508      	push	{r3, lr}
 800d62e:	2006      	movs	r0, #6
 800d630:	f000 f9b8 	bl	800d9a4 <raise>
 800d634:	2001      	movs	r0, #1
 800d636:	f000 fa49 	bl	800dacc <_exit>
	...

0800d63c <_close_r>:
 800d63c:	b538      	push	{r3, r4, r5, lr}
 800d63e:	4d06      	ldr	r5, [pc, #24]	; (800d658 <_close_r+0x1c>)
 800d640:	2300      	movs	r3, #0
 800d642:	4604      	mov	r4, r0
 800d644:	4608      	mov	r0, r1
 800d646:	602b      	str	r3, [r5, #0]
 800d648:	f000 f9f2 	bl	800da30 <_close>
 800d64c:	1c43      	adds	r3, r0, #1
 800d64e:	d102      	bne.n	800d656 <_close_r+0x1a>
 800d650:	682b      	ldr	r3, [r5, #0]
 800d652:	b103      	cbz	r3, 800d656 <_close_r+0x1a>
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	bd38      	pop	{r3, r4, r5, pc}
 800d658:	2400a770 	.word	0x2400a770

0800d65c <__sflush_r>:
 800d65c:	898a      	ldrh	r2, [r1, #12]
 800d65e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d662:	4605      	mov	r5, r0
 800d664:	0710      	lsls	r0, r2, #28
 800d666:	460c      	mov	r4, r1
 800d668:	d458      	bmi.n	800d71c <__sflush_r+0xc0>
 800d66a:	684b      	ldr	r3, [r1, #4]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	dc05      	bgt.n	800d67c <__sflush_r+0x20>
 800d670:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d672:	2b00      	cmp	r3, #0
 800d674:	dc02      	bgt.n	800d67c <__sflush_r+0x20>
 800d676:	2000      	movs	r0, #0
 800d678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d67c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d67e:	2e00      	cmp	r6, #0
 800d680:	d0f9      	beq.n	800d676 <__sflush_r+0x1a>
 800d682:	2300      	movs	r3, #0
 800d684:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d688:	682f      	ldr	r7, [r5, #0]
 800d68a:	602b      	str	r3, [r5, #0]
 800d68c:	d032      	beq.n	800d6f4 <__sflush_r+0x98>
 800d68e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d690:	89a3      	ldrh	r3, [r4, #12]
 800d692:	075a      	lsls	r2, r3, #29
 800d694:	d505      	bpl.n	800d6a2 <__sflush_r+0x46>
 800d696:	6863      	ldr	r3, [r4, #4]
 800d698:	1ac0      	subs	r0, r0, r3
 800d69a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d69c:	b10b      	cbz	r3, 800d6a2 <__sflush_r+0x46>
 800d69e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6a0:	1ac0      	subs	r0, r0, r3
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	4602      	mov	r2, r0
 800d6a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6a8:	6a21      	ldr	r1, [r4, #32]
 800d6aa:	4628      	mov	r0, r5
 800d6ac:	47b0      	blx	r6
 800d6ae:	1c43      	adds	r3, r0, #1
 800d6b0:	89a3      	ldrh	r3, [r4, #12]
 800d6b2:	d106      	bne.n	800d6c2 <__sflush_r+0x66>
 800d6b4:	6829      	ldr	r1, [r5, #0]
 800d6b6:	291d      	cmp	r1, #29
 800d6b8:	d82c      	bhi.n	800d714 <__sflush_r+0xb8>
 800d6ba:	4a2a      	ldr	r2, [pc, #168]	; (800d764 <__sflush_r+0x108>)
 800d6bc:	40ca      	lsrs	r2, r1
 800d6be:	07d6      	lsls	r6, r2, #31
 800d6c0:	d528      	bpl.n	800d714 <__sflush_r+0xb8>
 800d6c2:	2200      	movs	r2, #0
 800d6c4:	6062      	str	r2, [r4, #4]
 800d6c6:	04d9      	lsls	r1, r3, #19
 800d6c8:	6922      	ldr	r2, [r4, #16]
 800d6ca:	6022      	str	r2, [r4, #0]
 800d6cc:	d504      	bpl.n	800d6d8 <__sflush_r+0x7c>
 800d6ce:	1c42      	adds	r2, r0, #1
 800d6d0:	d101      	bne.n	800d6d6 <__sflush_r+0x7a>
 800d6d2:	682b      	ldr	r3, [r5, #0]
 800d6d4:	b903      	cbnz	r3, 800d6d8 <__sflush_r+0x7c>
 800d6d6:	6560      	str	r0, [r4, #84]	; 0x54
 800d6d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6da:	602f      	str	r7, [r5, #0]
 800d6dc:	2900      	cmp	r1, #0
 800d6de:	d0ca      	beq.n	800d676 <__sflush_r+0x1a>
 800d6e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6e4:	4299      	cmp	r1, r3
 800d6e6:	d002      	beq.n	800d6ee <__sflush_r+0x92>
 800d6e8:	4628      	mov	r0, r5
 800d6ea:	f7ff f985 	bl	800c9f8 <_free_r>
 800d6ee:	2000      	movs	r0, #0
 800d6f0:	6360      	str	r0, [r4, #52]	; 0x34
 800d6f2:	e7c1      	b.n	800d678 <__sflush_r+0x1c>
 800d6f4:	6a21      	ldr	r1, [r4, #32]
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	4628      	mov	r0, r5
 800d6fa:	47b0      	blx	r6
 800d6fc:	1c41      	adds	r1, r0, #1
 800d6fe:	d1c7      	bne.n	800d690 <__sflush_r+0x34>
 800d700:	682b      	ldr	r3, [r5, #0]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d0c4      	beq.n	800d690 <__sflush_r+0x34>
 800d706:	2b1d      	cmp	r3, #29
 800d708:	d001      	beq.n	800d70e <__sflush_r+0xb2>
 800d70a:	2b16      	cmp	r3, #22
 800d70c:	d101      	bne.n	800d712 <__sflush_r+0xb6>
 800d70e:	602f      	str	r7, [r5, #0]
 800d710:	e7b1      	b.n	800d676 <__sflush_r+0x1a>
 800d712:	89a3      	ldrh	r3, [r4, #12]
 800d714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d718:	81a3      	strh	r3, [r4, #12]
 800d71a:	e7ad      	b.n	800d678 <__sflush_r+0x1c>
 800d71c:	690f      	ldr	r7, [r1, #16]
 800d71e:	2f00      	cmp	r7, #0
 800d720:	d0a9      	beq.n	800d676 <__sflush_r+0x1a>
 800d722:	0793      	lsls	r3, r2, #30
 800d724:	680e      	ldr	r6, [r1, #0]
 800d726:	bf08      	it	eq
 800d728:	694b      	ldreq	r3, [r1, #20]
 800d72a:	600f      	str	r7, [r1, #0]
 800d72c:	bf18      	it	ne
 800d72e:	2300      	movne	r3, #0
 800d730:	eba6 0807 	sub.w	r8, r6, r7
 800d734:	608b      	str	r3, [r1, #8]
 800d736:	f1b8 0f00 	cmp.w	r8, #0
 800d73a:	dd9c      	ble.n	800d676 <__sflush_r+0x1a>
 800d73c:	6a21      	ldr	r1, [r4, #32]
 800d73e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d740:	4643      	mov	r3, r8
 800d742:	463a      	mov	r2, r7
 800d744:	4628      	mov	r0, r5
 800d746:	47b0      	blx	r6
 800d748:	2800      	cmp	r0, #0
 800d74a:	dc06      	bgt.n	800d75a <__sflush_r+0xfe>
 800d74c:	89a3      	ldrh	r3, [r4, #12]
 800d74e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d752:	81a3      	strh	r3, [r4, #12]
 800d754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d758:	e78e      	b.n	800d678 <__sflush_r+0x1c>
 800d75a:	4407      	add	r7, r0
 800d75c:	eba8 0800 	sub.w	r8, r8, r0
 800d760:	e7e9      	b.n	800d736 <__sflush_r+0xda>
 800d762:	bf00      	nop
 800d764:	20400001 	.word	0x20400001

0800d768 <_fflush_r>:
 800d768:	b538      	push	{r3, r4, r5, lr}
 800d76a:	690b      	ldr	r3, [r1, #16]
 800d76c:	4605      	mov	r5, r0
 800d76e:	460c      	mov	r4, r1
 800d770:	b913      	cbnz	r3, 800d778 <_fflush_r+0x10>
 800d772:	2500      	movs	r5, #0
 800d774:	4628      	mov	r0, r5
 800d776:	bd38      	pop	{r3, r4, r5, pc}
 800d778:	b118      	cbz	r0, 800d782 <_fflush_r+0x1a>
 800d77a:	6983      	ldr	r3, [r0, #24]
 800d77c:	b90b      	cbnz	r3, 800d782 <_fflush_r+0x1a>
 800d77e:	f7ff f881 	bl	800c884 <__sinit>
 800d782:	4b14      	ldr	r3, [pc, #80]	; (800d7d4 <_fflush_r+0x6c>)
 800d784:	429c      	cmp	r4, r3
 800d786:	d11b      	bne.n	800d7c0 <_fflush_r+0x58>
 800d788:	686c      	ldr	r4, [r5, #4]
 800d78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d0ef      	beq.n	800d772 <_fflush_r+0xa>
 800d792:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d794:	07d0      	lsls	r0, r2, #31
 800d796:	d404      	bmi.n	800d7a2 <_fflush_r+0x3a>
 800d798:	0599      	lsls	r1, r3, #22
 800d79a:	d402      	bmi.n	800d7a2 <_fflush_r+0x3a>
 800d79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d79e:	f7ff f921 	bl	800c9e4 <__retarget_lock_acquire_recursive>
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	4621      	mov	r1, r4
 800d7a6:	f7ff ff59 	bl	800d65c <__sflush_r>
 800d7aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7ac:	07da      	lsls	r2, r3, #31
 800d7ae:	4605      	mov	r5, r0
 800d7b0:	d4e0      	bmi.n	800d774 <_fflush_r+0xc>
 800d7b2:	89a3      	ldrh	r3, [r4, #12]
 800d7b4:	059b      	lsls	r3, r3, #22
 800d7b6:	d4dd      	bmi.n	800d774 <_fflush_r+0xc>
 800d7b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ba:	f7ff f914 	bl	800c9e6 <__retarget_lock_release_recursive>
 800d7be:	e7d9      	b.n	800d774 <_fflush_r+0xc>
 800d7c0:	4b05      	ldr	r3, [pc, #20]	; (800d7d8 <_fflush_r+0x70>)
 800d7c2:	429c      	cmp	r4, r3
 800d7c4:	d101      	bne.n	800d7ca <_fflush_r+0x62>
 800d7c6:	68ac      	ldr	r4, [r5, #8]
 800d7c8:	e7df      	b.n	800d78a <_fflush_r+0x22>
 800d7ca:	4b04      	ldr	r3, [pc, #16]	; (800d7dc <_fflush_r+0x74>)
 800d7cc:	429c      	cmp	r4, r3
 800d7ce:	bf08      	it	eq
 800d7d0:	68ec      	ldreq	r4, [r5, #12]
 800d7d2:	e7da      	b.n	800d78a <_fflush_r+0x22>
 800d7d4:	080216b8 	.word	0x080216b8
 800d7d8:	080216d8 	.word	0x080216d8
 800d7dc:	08021698 	.word	0x08021698

0800d7e0 <_lseek_r>:
 800d7e0:	b538      	push	{r3, r4, r5, lr}
 800d7e2:	4d07      	ldr	r5, [pc, #28]	; (800d800 <_lseek_r+0x20>)
 800d7e4:	4604      	mov	r4, r0
 800d7e6:	4608      	mov	r0, r1
 800d7e8:	4611      	mov	r1, r2
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	602a      	str	r2, [r5, #0]
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	f000 f946 	bl	800da80 <_lseek>
 800d7f4:	1c43      	adds	r3, r0, #1
 800d7f6:	d102      	bne.n	800d7fe <_lseek_r+0x1e>
 800d7f8:	682b      	ldr	r3, [r5, #0]
 800d7fa:	b103      	cbz	r3, 800d7fe <_lseek_r+0x1e>
 800d7fc:	6023      	str	r3, [r4, #0]
 800d7fe:	bd38      	pop	{r3, r4, r5, pc}
 800d800:	2400a770 	.word	0x2400a770

0800d804 <__swhatbuf_r>:
 800d804:	b570      	push	{r4, r5, r6, lr}
 800d806:	460e      	mov	r6, r1
 800d808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d80c:	2900      	cmp	r1, #0
 800d80e:	b096      	sub	sp, #88	; 0x58
 800d810:	4614      	mov	r4, r2
 800d812:	461d      	mov	r5, r3
 800d814:	da07      	bge.n	800d826 <__swhatbuf_r+0x22>
 800d816:	2300      	movs	r3, #0
 800d818:	602b      	str	r3, [r5, #0]
 800d81a:	89b3      	ldrh	r3, [r6, #12]
 800d81c:	061a      	lsls	r2, r3, #24
 800d81e:	d410      	bmi.n	800d842 <__swhatbuf_r+0x3e>
 800d820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d824:	e00e      	b.n	800d844 <__swhatbuf_r+0x40>
 800d826:	466a      	mov	r2, sp
 800d828:	f000 f8d8 	bl	800d9dc <_fstat_r>
 800d82c:	2800      	cmp	r0, #0
 800d82e:	dbf2      	blt.n	800d816 <__swhatbuf_r+0x12>
 800d830:	9a01      	ldr	r2, [sp, #4]
 800d832:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d836:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d83a:	425a      	negs	r2, r3
 800d83c:	415a      	adcs	r2, r3
 800d83e:	602a      	str	r2, [r5, #0]
 800d840:	e7ee      	b.n	800d820 <__swhatbuf_r+0x1c>
 800d842:	2340      	movs	r3, #64	; 0x40
 800d844:	2000      	movs	r0, #0
 800d846:	6023      	str	r3, [r4, #0]
 800d848:	b016      	add	sp, #88	; 0x58
 800d84a:	bd70      	pop	{r4, r5, r6, pc}

0800d84c <__smakebuf_r>:
 800d84c:	898b      	ldrh	r3, [r1, #12]
 800d84e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d850:	079d      	lsls	r5, r3, #30
 800d852:	4606      	mov	r6, r0
 800d854:	460c      	mov	r4, r1
 800d856:	d507      	bpl.n	800d868 <__smakebuf_r+0x1c>
 800d858:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d85c:	6023      	str	r3, [r4, #0]
 800d85e:	6123      	str	r3, [r4, #16]
 800d860:	2301      	movs	r3, #1
 800d862:	6163      	str	r3, [r4, #20]
 800d864:	b002      	add	sp, #8
 800d866:	bd70      	pop	{r4, r5, r6, pc}
 800d868:	ab01      	add	r3, sp, #4
 800d86a:	466a      	mov	r2, sp
 800d86c:	f7ff ffca 	bl	800d804 <__swhatbuf_r>
 800d870:	9900      	ldr	r1, [sp, #0]
 800d872:	4605      	mov	r5, r0
 800d874:	4630      	mov	r0, r6
 800d876:	f7ff f90f 	bl	800ca98 <_malloc_r>
 800d87a:	b948      	cbnz	r0, 800d890 <__smakebuf_r+0x44>
 800d87c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d880:	059a      	lsls	r2, r3, #22
 800d882:	d4ef      	bmi.n	800d864 <__smakebuf_r+0x18>
 800d884:	f023 0303 	bic.w	r3, r3, #3
 800d888:	f043 0302 	orr.w	r3, r3, #2
 800d88c:	81a3      	strh	r3, [r4, #12]
 800d88e:	e7e3      	b.n	800d858 <__smakebuf_r+0xc>
 800d890:	4b0d      	ldr	r3, [pc, #52]	; (800d8c8 <__smakebuf_r+0x7c>)
 800d892:	62b3      	str	r3, [r6, #40]	; 0x28
 800d894:	89a3      	ldrh	r3, [r4, #12]
 800d896:	6020      	str	r0, [r4, #0]
 800d898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d89c:	81a3      	strh	r3, [r4, #12]
 800d89e:	9b00      	ldr	r3, [sp, #0]
 800d8a0:	6163      	str	r3, [r4, #20]
 800d8a2:	9b01      	ldr	r3, [sp, #4]
 800d8a4:	6120      	str	r0, [r4, #16]
 800d8a6:	b15b      	cbz	r3, 800d8c0 <__smakebuf_r+0x74>
 800d8a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8ac:	4630      	mov	r0, r6
 800d8ae:	f000 f8a7 	bl	800da00 <_isatty_r>
 800d8b2:	b128      	cbz	r0, 800d8c0 <__smakebuf_r+0x74>
 800d8b4:	89a3      	ldrh	r3, [r4, #12]
 800d8b6:	f023 0303 	bic.w	r3, r3, #3
 800d8ba:	f043 0301 	orr.w	r3, r3, #1
 800d8be:	81a3      	strh	r3, [r4, #12]
 800d8c0:	89a0      	ldrh	r0, [r4, #12]
 800d8c2:	4305      	orrs	r5, r0
 800d8c4:	81a5      	strh	r5, [r4, #12]
 800d8c6:	e7cd      	b.n	800d864 <__smakebuf_r+0x18>
 800d8c8:	0800c81d 	.word	0x0800c81d

0800d8cc <__malloc_lock>:
 800d8cc:	4801      	ldr	r0, [pc, #4]	; (800d8d4 <__malloc_lock+0x8>)
 800d8ce:	f7ff b889 	b.w	800c9e4 <__retarget_lock_acquire_recursive>
 800d8d2:	bf00      	nop
 800d8d4:	2400a77c 	.word	0x2400a77c

0800d8d8 <__malloc_unlock>:
 800d8d8:	4801      	ldr	r0, [pc, #4]	; (800d8e0 <__malloc_unlock+0x8>)
 800d8da:	f7ff b884 	b.w	800c9e6 <__retarget_lock_release_recursive>
 800d8de:	bf00      	nop
 800d8e0:	2400a77c 	.word	0x2400a77c

0800d8e4 <_realloc_r>:
 800d8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8e6:	4607      	mov	r7, r0
 800d8e8:	4614      	mov	r4, r2
 800d8ea:	460e      	mov	r6, r1
 800d8ec:	b921      	cbnz	r1, 800d8f8 <_realloc_r+0x14>
 800d8ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d8f2:	4611      	mov	r1, r2
 800d8f4:	f7ff b8d0 	b.w	800ca98 <_malloc_r>
 800d8f8:	b922      	cbnz	r2, 800d904 <_realloc_r+0x20>
 800d8fa:	f7ff f87d 	bl	800c9f8 <_free_r>
 800d8fe:	4625      	mov	r5, r4
 800d900:	4628      	mov	r0, r5
 800d902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d904:	f000 f88c 	bl	800da20 <_malloc_usable_size_r>
 800d908:	42a0      	cmp	r0, r4
 800d90a:	d20f      	bcs.n	800d92c <_realloc_r+0x48>
 800d90c:	4621      	mov	r1, r4
 800d90e:	4638      	mov	r0, r7
 800d910:	f7ff f8c2 	bl	800ca98 <_malloc_r>
 800d914:	4605      	mov	r5, r0
 800d916:	2800      	cmp	r0, #0
 800d918:	d0f2      	beq.n	800d900 <_realloc_r+0x1c>
 800d91a:	4631      	mov	r1, r6
 800d91c:	4622      	mov	r2, r4
 800d91e:	f7fe fe69 	bl	800c5f4 <memcpy>
 800d922:	4631      	mov	r1, r6
 800d924:	4638      	mov	r0, r7
 800d926:	f7ff f867 	bl	800c9f8 <_free_r>
 800d92a:	e7e9      	b.n	800d900 <_realloc_r+0x1c>
 800d92c:	4635      	mov	r5, r6
 800d92e:	e7e7      	b.n	800d900 <_realloc_r+0x1c>

0800d930 <_read_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4d07      	ldr	r5, [pc, #28]	; (800d950 <_read_r+0x20>)
 800d934:	4604      	mov	r4, r0
 800d936:	4608      	mov	r0, r1
 800d938:	4611      	mov	r1, r2
 800d93a:	2200      	movs	r2, #0
 800d93c:	602a      	str	r2, [r5, #0]
 800d93e:	461a      	mov	r2, r3
 800d940:	f000 f8a6 	bl	800da90 <_read>
 800d944:	1c43      	adds	r3, r0, #1
 800d946:	d102      	bne.n	800d94e <_read_r+0x1e>
 800d948:	682b      	ldr	r3, [r5, #0]
 800d94a:	b103      	cbz	r3, 800d94e <_read_r+0x1e>
 800d94c:	6023      	str	r3, [r4, #0]
 800d94e:	bd38      	pop	{r3, r4, r5, pc}
 800d950:	2400a770 	.word	0x2400a770

0800d954 <_raise_r>:
 800d954:	291f      	cmp	r1, #31
 800d956:	b538      	push	{r3, r4, r5, lr}
 800d958:	4604      	mov	r4, r0
 800d95a:	460d      	mov	r5, r1
 800d95c:	d904      	bls.n	800d968 <_raise_r+0x14>
 800d95e:	2316      	movs	r3, #22
 800d960:	6003      	str	r3, [r0, #0]
 800d962:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d966:	bd38      	pop	{r3, r4, r5, pc}
 800d968:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d96a:	b112      	cbz	r2, 800d972 <_raise_r+0x1e>
 800d96c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d970:	b94b      	cbnz	r3, 800d986 <_raise_r+0x32>
 800d972:	4620      	mov	r0, r4
 800d974:	f000 f830 	bl	800d9d8 <_getpid_r>
 800d978:	462a      	mov	r2, r5
 800d97a:	4601      	mov	r1, r0
 800d97c:	4620      	mov	r0, r4
 800d97e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d982:	f000 b817 	b.w	800d9b4 <_kill_r>
 800d986:	2b01      	cmp	r3, #1
 800d988:	d00a      	beq.n	800d9a0 <_raise_r+0x4c>
 800d98a:	1c59      	adds	r1, r3, #1
 800d98c:	d103      	bne.n	800d996 <_raise_r+0x42>
 800d98e:	2316      	movs	r3, #22
 800d990:	6003      	str	r3, [r0, #0]
 800d992:	2001      	movs	r0, #1
 800d994:	e7e7      	b.n	800d966 <_raise_r+0x12>
 800d996:	2400      	movs	r4, #0
 800d998:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d99c:	4628      	mov	r0, r5
 800d99e:	4798      	blx	r3
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	e7e0      	b.n	800d966 <_raise_r+0x12>

0800d9a4 <raise>:
 800d9a4:	4b02      	ldr	r3, [pc, #8]	; (800d9b0 <raise+0xc>)
 800d9a6:	4601      	mov	r1, r0
 800d9a8:	6818      	ldr	r0, [r3, #0]
 800d9aa:	f7ff bfd3 	b.w	800d954 <_raise_r>
 800d9ae:	bf00      	nop
 800d9b0:	24000034 	.word	0x24000034

0800d9b4 <_kill_r>:
 800d9b4:	b538      	push	{r3, r4, r5, lr}
 800d9b6:	4d07      	ldr	r5, [pc, #28]	; (800d9d4 <_kill_r+0x20>)
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	4604      	mov	r4, r0
 800d9bc:	4608      	mov	r0, r1
 800d9be:	4611      	mov	r1, r2
 800d9c0:	602b      	str	r3, [r5, #0]
 800d9c2:	f000 f855 	bl	800da70 <_kill>
 800d9c6:	1c43      	adds	r3, r0, #1
 800d9c8:	d102      	bne.n	800d9d0 <_kill_r+0x1c>
 800d9ca:	682b      	ldr	r3, [r5, #0]
 800d9cc:	b103      	cbz	r3, 800d9d0 <_kill_r+0x1c>
 800d9ce:	6023      	str	r3, [r4, #0]
 800d9d0:	bd38      	pop	{r3, r4, r5, pc}
 800d9d2:	bf00      	nop
 800d9d4:	2400a770 	.word	0x2400a770

0800d9d8 <_getpid_r>:
 800d9d8:	f000 b83a 	b.w	800da50 <_getpid>

0800d9dc <_fstat_r>:
 800d9dc:	b538      	push	{r3, r4, r5, lr}
 800d9de:	4d07      	ldr	r5, [pc, #28]	; (800d9fc <_fstat_r+0x20>)
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	4604      	mov	r4, r0
 800d9e4:	4608      	mov	r0, r1
 800d9e6:	4611      	mov	r1, r2
 800d9e8:	602b      	str	r3, [r5, #0]
 800d9ea:	f000 f829 	bl	800da40 <_fstat>
 800d9ee:	1c43      	adds	r3, r0, #1
 800d9f0:	d102      	bne.n	800d9f8 <_fstat_r+0x1c>
 800d9f2:	682b      	ldr	r3, [r5, #0]
 800d9f4:	b103      	cbz	r3, 800d9f8 <_fstat_r+0x1c>
 800d9f6:	6023      	str	r3, [r4, #0]
 800d9f8:	bd38      	pop	{r3, r4, r5, pc}
 800d9fa:	bf00      	nop
 800d9fc:	2400a770 	.word	0x2400a770

0800da00 <_isatty_r>:
 800da00:	b538      	push	{r3, r4, r5, lr}
 800da02:	4d06      	ldr	r5, [pc, #24]	; (800da1c <_isatty_r+0x1c>)
 800da04:	2300      	movs	r3, #0
 800da06:	4604      	mov	r4, r0
 800da08:	4608      	mov	r0, r1
 800da0a:	602b      	str	r3, [r5, #0]
 800da0c:	f000 f828 	bl	800da60 <_isatty>
 800da10:	1c43      	adds	r3, r0, #1
 800da12:	d102      	bne.n	800da1a <_isatty_r+0x1a>
 800da14:	682b      	ldr	r3, [r5, #0]
 800da16:	b103      	cbz	r3, 800da1a <_isatty_r+0x1a>
 800da18:	6023      	str	r3, [r4, #0]
 800da1a:	bd38      	pop	{r3, r4, r5, pc}
 800da1c:	2400a770 	.word	0x2400a770

0800da20 <_malloc_usable_size_r>:
 800da20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da24:	1f18      	subs	r0, r3, #4
 800da26:	2b00      	cmp	r3, #0
 800da28:	bfbc      	itt	lt
 800da2a:	580b      	ldrlt	r3, [r1, r0]
 800da2c:	18c0      	addlt	r0, r0, r3
 800da2e:	4770      	bx	lr

0800da30 <_close>:
 800da30:	4b02      	ldr	r3, [pc, #8]	; (800da3c <_close+0xc>)
 800da32:	2258      	movs	r2, #88	; 0x58
 800da34:	601a      	str	r2, [r3, #0]
 800da36:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da3a:	4770      	bx	lr
 800da3c:	2400a770 	.word	0x2400a770

0800da40 <_fstat>:
 800da40:	4b02      	ldr	r3, [pc, #8]	; (800da4c <_fstat+0xc>)
 800da42:	2258      	movs	r2, #88	; 0x58
 800da44:	601a      	str	r2, [r3, #0]
 800da46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da4a:	4770      	bx	lr
 800da4c:	2400a770 	.word	0x2400a770

0800da50 <_getpid>:
 800da50:	4b02      	ldr	r3, [pc, #8]	; (800da5c <_getpid+0xc>)
 800da52:	2258      	movs	r2, #88	; 0x58
 800da54:	601a      	str	r2, [r3, #0]
 800da56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da5a:	4770      	bx	lr
 800da5c:	2400a770 	.word	0x2400a770

0800da60 <_isatty>:
 800da60:	4b02      	ldr	r3, [pc, #8]	; (800da6c <_isatty+0xc>)
 800da62:	2258      	movs	r2, #88	; 0x58
 800da64:	601a      	str	r2, [r3, #0]
 800da66:	2000      	movs	r0, #0
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	2400a770 	.word	0x2400a770

0800da70 <_kill>:
 800da70:	4b02      	ldr	r3, [pc, #8]	; (800da7c <_kill+0xc>)
 800da72:	2258      	movs	r2, #88	; 0x58
 800da74:	601a      	str	r2, [r3, #0]
 800da76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da7a:	4770      	bx	lr
 800da7c:	2400a770 	.word	0x2400a770

0800da80 <_lseek>:
 800da80:	4b02      	ldr	r3, [pc, #8]	; (800da8c <_lseek+0xc>)
 800da82:	2258      	movs	r2, #88	; 0x58
 800da84:	601a      	str	r2, [r3, #0]
 800da86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da8a:	4770      	bx	lr
 800da8c:	2400a770 	.word	0x2400a770

0800da90 <_read>:
 800da90:	4b02      	ldr	r3, [pc, #8]	; (800da9c <_read+0xc>)
 800da92:	2258      	movs	r2, #88	; 0x58
 800da94:	601a      	str	r2, [r3, #0]
 800da96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da9a:	4770      	bx	lr
 800da9c:	2400a770 	.word	0x2400a770

0800daa0 <_sbrk>:
 800daa0:	4b04      	ldr	r3, [pc, #16]	; (800dab4 <_sbrk+0x14>)
 800daa2:	6819      	ldr	r1, [r3, #0]
 800daa4:	4602      	mov	r2, r0
 800daa6:	b909      	cbnz	r1, 800daac <_sbrk+0xc>
 800daa8:	4903      	ldr	r1, [pc, #12]	; (800dab8 <_sbrk+0x18>)
 800daaa:	6019      	str	r1, [r3, #0]
 800daac:	6818      	ldr	r0, [r3, #0]
 800daae:	4402      	add	r2, r0
 800dab0:	601a      	str	r2, [r3, #0]
 800dab2:	4770      	bx	lr
 800dab4:	240067ec 	.word	0x240067ec
 800dab8:	2400a788 	.word	0x2400a788

0800dabc <_write>:
 800dabc:	4b02      	ldr	r3, [pc, #8]	; (800dac8 <_write+0xc>)
 800dabe:	2258      	movs	r2, #88	; 0x58
 800dac0:	601a      	str	r2, [r3, #0]
 800dac2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dac6:	4770      	bx	lr
 800dac8:	2400a770 	.word	0x2400a770

0800dacc <_exit>:
 800dacc:	e7fe      	b.n	800dacc <_exit>
	...

0800dad0 <_init>:
 800dad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dad2:	bf00      	nop
 800dad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dad6:	bc08      	pop	{r3}
 800dad8:	469e      	mov	lr, r3
 800dada:	4770      	bx	lr

0800dadc <_fini>:
 800dadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dade:	bf00      	nop
 800dae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dae2:	bc08      	pop	{r3}
 800dae4:	469e      	mov	lr, r3
 800dae6:	4770      	bx	lr
