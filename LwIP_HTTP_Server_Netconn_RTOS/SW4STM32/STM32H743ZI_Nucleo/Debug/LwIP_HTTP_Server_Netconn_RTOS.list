
LwIP_HTTP_Server_Netconn_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017270  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014650  08017510  08017510  00027510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0802bb60  0802bb60  0003bb60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0802bb64  0802bb64  0003bb64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000b4  24000000  0802bb68  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000a700  240000b4  0802bc1c  000400b4  2**2
                  ALLOC
  7 ._user_heap_stack 00000c04  2400a7b4  0802bc1c  0004a7b4  2**0
                  ALLOC
  8 .lwip_sec     00041a00  30000000  0802bc1c  00050000  2**2
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000400b4  2**0
                  CONTENTS, READONLY
 10 .debug_line   000346c4  00000000  00000000  000400e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_info   000513e6  00000000  00000000  000747a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00008c95  00000000  00000000  000c5b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000022f8  00000000  00000000  000ce828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0019e94a  00000000  00000000  000d0b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002130  00000000  00000000  0026f470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00048cb2  00000000  00000000  002715a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  002ba252  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009af8  00000000  00000000  002ba2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         000000cc  00000000  00000000  002c3da0  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      000001b9  00000000  00000000  002c3e6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000b4 	.word	0x240000b4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080174f8 	.word	0x080174f8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000b8 	.word	0x240000b8
 80002dc:	080174f8 	.word	0x080174f8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003b6:	e003      	b.n	80003c0 <LoopCopyDataInit>

080003b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003b8:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003be:	3104      	adds	r1, #4

080003c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003c0:	480b      	ldr	r0, [pc, #44]	; (80003f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003c2:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003c8:	d3f6      	bcc.n	80003b8 <CopyDataInit>
  ldr  r2, =_sbss
 80003ca:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003cc:	e002      	b.n	80003d4 <LoopFillZerobss>

080003ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003d0:	f842 3b04 	str.w	r3, [r2], #4

080003d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d4:	4b09      	ldr	r3, [pc, #36]	; (80003fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003d8:	d3f9      	bcc.n	80003ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003da:	f001 fcd1 	bl	8001d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003de:	f015 fdeb 	bl	8015fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003e2:	f001 f829 	bl	8001438 <main>
  bx  lr    
 80003e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003e8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80003ec:	0802bb68 	.word	0x0802bb68
  ldr  r0, =_sdata
 80003f0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80003f4:	240000b4 	.word	0x240000b4
  ldr  r2, =_sbss
 80003f8:	240000b4 	.word	0x240000b4
  ldr  r3, = _ebss
 80003fc:	2400a7b4 	.word	0x2400a7b4

08000400 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC3_IRQHandler>

08000402 <ethernet_link_status_updated>:
  * @brief  Notify the User about the nework interface config status 
  * @param  netif: the network interface
  * @retval None
  */
void ethernet_link_status_updated(struct netif *netif) 
{
 8000402:	b580      	push	{r7, lr}
 8000404:	b082      	sub	sp, #8
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
  if (netif_is_up(netif))
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000410:	f003 0301 	and.w	r3, r3, #1
 8000414:	b2db      	uxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	d006      	beq.n	8000428 <ethernet_link_status_updated+0x26>
 {
#if LWIP_DHCP
    /* Update DHCP state machine */
    DHCP_state = DHCP_START;
#else
    BSP_LED_On(LED2);
 800041a:	2001      	movs	r0, #1
 800041c:	f001 fc4a 	bl	8001cb4 <BSP_LED_On>
    BSP_LED_Off(LED3);
 8000420:	2002      	movs	r0, #2
 8000422:	f001 fc71 	bl	8001d08 <BSP_LED_Off>
#else    
    BSP_LED_Off(LED2);
    BSP_LED_On(LED3); 
#endif /* LWIP_DHCP */
  } 
}
 8000426:	e005      	b.n	8000434 <ethernet_link_status_updated+0x32>
    BSP_LED_Off(LED2);
 8000428:	2001      	movs	r0, #1
 800042a:	f001 fc6d 	bl	8001d08 <BSP_LED_Off>
    BSP_LED_On(LED3); 
 800042e:	2002      	movs	r0, #2
 8000430:	f001 fc40 	bl	8001cb4 <BSP_LED_On>
}
 8000434:	bf00      	nop
 8000436:	3708      	adds	r7, #8
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}

0800043c <low_level_init>:
  *
  * @param netif the already initialized lwip network interface structure
  *        for this ethernetif
  */
static void low_level_init(struct netif *netif)
{
 800043c:	b5b0      	push	{r4, r5, r7, lr}
 800043e:	b0a6      	sub	sp, #152	; 0x98
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  uint32_t idx, duplex, speed = 0;
 8000444:	2300      	movs	r3, #0
 8000446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  int32_t PHYLinkState;
  ETH_MACConfigTypeDef MACConf;
  uint8_t macaddress[6]= {ETH_MAC_ADDR0, ETH_MAC_ADDR1, ETH_MAC_ADDR2, ETH_MAC_ADDR3, ETH_MAC_ADDR4, ETH_MAC_ADDR5};
 800044a:	4a7d      	ldr	r2, [pc, #500]	; (8000640 <low_level_init+0x204>)
 800044c:	f107 031c 	add.w	r3, r7, #28
 8000450:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000454:	6018      	str	r0, [r3, #0]
 8000456:	3304      	adds	r3, #4
 8000458:	8019      	strh	r1, [r3, #0]
  
  EthHandle.Instance = ETH;  
 800045a:	4b7a      	ldr	r3, [pc, #488]	; (8000644 <low_level_init+0x208>)
 800045c:	4a7a      	ldr	r2, [pc, #488]	; (8000648 <low_level_init+0x20c>)
 800045e:	601a      	str	r2, [r3, #0]
  EthHandle.Init.MACAddr = macaddress;
 8000460:	4a78      	ldr	r2, [pc, #480]	; (8000644 <low_level_init+0x208>)
 8000462:	f107 031c 	add.w	r3, r7, #28
 8000466:	6053      	str	r3, [r2, #4]
  EthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000468:	4b76      	ldr	r3, [pc, #472]	; (8000644 <low_level_init+0x208>)
 800046a:	2201      	movs	r2, #1
 800046c:	721a      	strb	r2, [r3, #8]
  EthHandle.Init.RxDesc = DMARxDscrTab;
 800046e:	4b75      	ldr	r3, [pc, #468]	; (8000644 <low_level_init+0x208>)
 8000470:	4a76      	ldr	r2, [pc, #472]	; (800064c <low_level_init+0x210>)
 8000472:	611a      	str	r2, [r3, #16]
  EthHandle.Init.TxDesc = DMATxDscrTab;
 8000474:	4b73      	ldr	r3, [pc, #460]	; (8000644 <low_level_init+0x208>)
 8000476:	4a76      	ldr	r2, [pc, #472]	; (8000650 <low_level_init+0x214>)
 8000478:	60da      	str	r2, [r3, #12]
  EthHandle.Init.RxBuffLen = ETH_RX_BUFFER_SIZE;
 800047a:	4b72      	ldr	r3, [pc, #456]	; (8000644 <low_level_init+0x208>)
 800047c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8000480:	615a      	str	r2, [r3, #20]
  
  /* configure ethernet peripheral (GPIOs, clocks, MAC, DMA) */
  HAL_ETH_Init(&EthHandle);
 8000482:	4870      	ldr	r0, [pc, #448]	; (8000644 <low_level_init+0x208>)
 8000484:	f001 fec4 	bl	8002210 <HAL_ETH_Init>
  
  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	2206      	movs	r2, #6
 800048c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  ETH_MAC_ADDR0;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2202      	movs	r2, #2
 8000494:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  ETH_MAC_ADDR1;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2200      	movs	r2, #0
 800049c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  ETH_MAC_ADDR2;
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2200      	movs	r2, #0
 80004a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  ETH_MAC_ADDR3;
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2200      	movs	r2, #0
 80004ac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  ETH_MAC_ADDR4;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2200      	movs	r2, #0
 80004b4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  ETH_MAC_ADDR5;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2200      	movs	r2, #0
 80004bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  
  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80004c6:	849a      	strh	r2, [r3, #36]	; 0x24
  
  /* device capabilities */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80004ce:	f043 030a 	orr.w	r3, r3, #10
 80004d2:	b2da      	uxtb	r2, r3
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80004da:	2300      	movs	r3, #0
 80004dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80004e0:	e012      	b.n	8000508 <low_level_init+0xcc>
  {
    HAL_ETH_DescAssignMemory(&EthHandle, idx, Rx_Buff[idx], NULL);
 80004e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80004e6:	4613      	mov	r3, r2
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	4413      	add	r3, r2
 80004ec:	025b      	lsls	r3, r3, #9
 80004ee:	4a59      	ldr	r2, [pc, #356]	; (8000654 <low_level_init+0x218>)
 80004f0:	441a      	add	r2, r3
 80004f2:	2300      	movs	r3, #0
 80004f4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80004f8:	4852      	ldr	r0, [pc, #328]	; (8000644 <low_level_init+0x208>)
 80004fa:	f001 ff63 	bl	80023c4 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 80004fe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000502:	3301      	adds	r3, #1
 8000504:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8000508:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800050c:	2b03      	cmp	r3, #3
 800050e:	d9e8      	bls.n	80004e2 <low_level_init+0xa6>
  }
  
  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8000510:	4851      	ldr	r0, [pc, #324]	; (8000658 <low_level_init+0x21c>)
 8000512:	f00d fe13 	bl	800e13c <memp_init_pool>
  
  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));  
 8000516:	2234      	movs	r2, #52	; 0x34
 8000518:	2100      	movs	r1, #0
 800051a:	4850      	ldr	r0, [pc, #320]	; (800065c <low_level_init+0x220>)
 800051c:	f015 fda6 	bl	801606c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000520:	4b4e      	ldr	r3, [pc, #312]	; (800065c <low_level_init+0x220>)
 8000522:	2221      	movs	r2, #33	; 0x21
 8000524:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000526:	4b4d      	ldr	r3, [pc, #308]	; (800065c <low_level_init+0x220>)
 8000528:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800052c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800052e:	4b4b      	ldr	r3, [pc, #300]	; (800065c <low_level_init+0x220>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
   
  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8000534:	2203      	movs	r2, #3
 8000536:	2100      	movs	r1, #0
 8000538:	2001      	movs	r0, #1
 800053a:	f005 fae7 	bl	8005b0c <xQueueGenericCreate>
 800053e:	4603      	mov	r3, r0
 8000540:	4a47      	ldr	r2, [pc, #284]	; (8000660 <low_level_init+0x224>)
 8000542:	6013      	str	r3, [r2, #0]
  
  /* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8000544:	4b47      	ldr	r3, [pc, #284]	; (8000664 <low_level_init+0x228>)
 8000546:	f107 0408 	add.w	r4, r7, #8
 800054a:	461d      	mov	r5, r3
 800054c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000550:	682b      	ldr	r3, [r5, #0]
 8000552:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	6879      	ldr	r1, [r7, #4]
 800055a:	4618      	mov	r0, r3
 800055c:	f007 fc49 	bl	8007df2 <osThreadCreate>
  
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8000560:	4941      	ldr	r1, [pc, #260]	; (8000668 <low_level_init+0x22c>)
 8000562:	4842      	ldr	r0, [pc, #264]	; (800066c <low_level_init+0x230>)
 8000564:	f001 f9ce 	bl	8001904 <LAN8742_RegisterBusIO>
  
  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8000568:	4840      	ldr	r0, [pc, #256]	; (800066c <low_level_init+0x230>)
 800056a:	f001 f9fd 	bl	8001968 <LAN8742_Init>
  
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800056e:	483f      	ldr	r0, [pc, #252]	; (800066c <low_level_init+0x230>)
 8000570:	f001 faa2 	bl	8001ab8 <LAN8742_GetLinkState>
 8000574:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
  
  /* Get link state */  
  if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8000578:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800057c:	2b01      	cmp	r3, #1
 800057e:	dc06      	bgt.n	800058e <low_level_init+0x152>
  {
    netif_set_link_down(netif);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f00e f9b5 	bl	800e8f0 <netif_set_link_down>
    netif_set_down(netif);
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f00e f94c 	bl	800e824 <netif_set_down>
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
    HAL_ETH_Start_IT(&EthHandle);
    netif_set_up(netif);
    netif_set_link_up(netif);
  }
}
 800058c:	e054      	b.n	8000638 <low_level_init+0x1fc>
 800058e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000592:	3b02      	subs	r3, #2
 8000594:	2b03      	cmp	r3, #3
 8000596:	d82b      	bhi.n	80005f0 <low_level_init+0x1b4>
 8000598:	a201      	add	r2, pc, #4	; (adr r2, 80005a0 <low_level_init+0x164>)
 800059a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059e:	bf00      	nop
 80005a0:	080005b1 	.word	0x080005b1
 80005a4:	080005c3 	.word	0x080005c3
 80005a8:	080005d3 	.word	0x080005d3
 80005ac:	080005e3 	.word	0x080005e3
      duplex = ETH_FULLDUPLEX_MODE;
 80005b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_100M;
 80005b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;
 80005c0:	e01f      	b.n	8000602 <low_level_init+0x1c6>
      duplex = ETH_HALFDUPLEX_MODE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_100M;
 80005c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;
 80005d0:	e017      	b.n	8000602 <low_level_init+0x1c6>
      duplex = ETH_FULLDUPLEX_MODE;
 80005d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_10M;
 80005da:	2300      	movs	r3, #0
 80005dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;
 80005e0:	e00f      	b.n	8000602 <low_level_init+0x1c6>
      duplex = ETH_HALFDUPLEX_MODE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_10M;
 80005e8:	2300      	movs	r3, #0
 80005ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;
 80005ee:	e008      	b.n	8000602 <low_level_init+0x1c6>
      duplex = ETH_FULLDUPLEX_MODE;
 80005f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      speed = ETH_SPEED_100M;
 80005f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      break;      
 8000600:	bf00      	nop
    HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 8000602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000606:	4619      	mov	r1, r3
 8000608:	480e      	ldr	r0, [pc, #56]	; (8000644 <low_level_init+0x208>)
 800060a:	f002 fcad 	bl	8002f68 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800060e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
    MACConf.Speed = speed;
 8000614:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000618:	63bb      	str	r3, [r7, #56]	; 0x38
    HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 800061a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800061e:	4619      	mov	r1, r3
 8000620:	4808      	ldr	r0, [pc, #32]	; (8000644 <low_level_init+0x208>)
 8000622:	f002 fe75 	bl	8003310 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&EthHandle);
 8000626:	4807      	ldr	r0, [pc, #28]	; (8000644 <low_level_init+0x208>)
 8000628:	f001 ff0d 	bl	8002446 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800062c:	6878      	ldr	r0, [r7, #4]
 800062e:	f00e f88d 	bl	800e74c <netif_set_up>
    netif_set_link_up(netif);
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f00e f928 	bl	800e888 <netif_set_link_up>
}
 8000638:	bf00      	nop
 800063a:	3798      	adds	r7, #152	; 0x98
 800063c:	46bd      	mov	sp, r7
 800063e:	bdb0      	pop	{r4, r5, r7, pc}
 8000640:	08017524 	.word	0x08017524
 8000644:	24006804 	.word	0x24006804
 8000648:	40028000 	.word	0x40028000
 800064c:	30040000 	.word	0x30040000
 8000650:	30040060 	.word	0x30040060
 8000654:	30040200 	.word	0x30040200
 8000658:	08017518 	.word	0x08017518
 800065c:	24006978 	.word	0x24006978
 8000660:	240000d0 	.word	0x240000d0
 8000664:	0801752c 	.word	0x0801752c
 8000668:	24000000 	.word	0x24000000
 800066c:	24006958 	.word	0x24006958

08000670 <low_level_output>:
  *       strange results. You might consider waiting for space in the DMA queue
  *       to become available since the stack doesn't retry to send a packet
  *       dropped because of memory failure (except for the TCP timers).
  */
static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b092      	sub	sp, #72	; 0x48
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800067a:	2300      	movs	r3, #0
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800067e:	2300      	movs	r3, #0
 8000680:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];
  
  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2230      	movs	r2, #48	; 0x30
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f015 fced 	bl	801606c <memset>
  
  for(q = p; q != NULL; q = q->next)
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	643b      	str	r3, [r7, #64]	; 0x40
 8000696:	e049      	b.n	800072c <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)	
 8000698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800069a:	2b03      	cmp	r3, #3
 800069c:	d902      	bls.n	80006a4 <low_level_output+0x34>
      return ERR_IF;
 800069e:	f06f 030b 	mvn.w	r3, #11
 80006a2:	e056      	b.n	8000752 <low_level_output+0xe2>
    
    Txbuffer[i].buffer = q->payload;
 80006a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006a6:	6859      	ldr	r1, [r3, #4]
 80006a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006aa:	4613      	mov	r3, r2
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	4413      	add	r3, r2
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006b6:	4413      	add	r3, r2
 80006b8:	3b3c      	subs	r3, #60	; 0x3c
 80006ba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80006bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80006be:	895b      	ldrh	r3, [r3, #10]
 80006c0:	4619      	mov	r1, r3
 80006c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80006c4:	4613      	mov	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	4413      	add	r3, r2
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006d0:	4413      	add	r3, r2
 80006d2:	3b38      	subs	r3, #56	; 0x38
 80006d4:	6019      	str	r1, [r3, #0]

    if(i>0)
 80006d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d012      	beq.n	8000702 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80006dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80006de:	1e5a      	subs	r2, r3, #1
 80006e0:	f107 000c 	add.w	r0, r7, #12
 80006e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80006e6:	460b      	mov	r3, r1
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	440b      	add	r3, r1
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	18c1      	adds	r1, r0, r3
 80006f0:	4613      	mov	r3, r2
 80006f2:	005b      	lsls	r3, r3, #1
 80006f4:	4413      	add	r3, r2
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80006fc:	4413      	add	r3, r2
 80006fe:	3b34      	subs	r3, #52	; 0x34
 8000700:	6019      	str	r1, [r3, #0]
    }
    
    if(q->next == NULL)
 8000702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d10a      	bne.n	8000720 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800070a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800070c:	4613      	mov	r3, r2
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	4413      	add	r3, r2
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000718:	4413      	add	r3, r2
 800071a:	3b34      	subs	r3, #52	; 0x34
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
    }

    i++;
 8000720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000722:	3301      	adds	r3, #1
 8000724:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8000726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	643b      	str	r3, [r7, #64]	; 0x40
 800072c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1b2      	bne.n	8000698 <low_level_output+0x28>
  }

  TxConfig.Length = p->tot_len;
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	891b      	ldrh	r3, [r3, #8]
 8000736:	461a      	mov	r2, r3
 8000738:	4b08      	ldr	r3, [pc, #32]	; (800075c <low_level_output+0xec>)
 800073a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <low_level_output+0xec>)
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&EthHandle, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8000744:	2214      	movs	r2, #20
 8000746:	4905      	ldr	r1, [pc, #20]	; (800075c <low_level_output+0xec>)
 8000748:	4805      	ldr	r0, [pc, #20]	; (8000760 <low_level_output+0xf0>)
 800074a:	f001 ff7b 	bl	8002644 <HAL_ETH_Transmit>
  
  return errval;
 800074e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8000752:	4618      	mov	r0, r3
 8000754:	3748      	adds	r7, #72	; 0x48
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	24006978 	.word	0x24006978
 8000760:	24006804 	.word	0x24006804

08000764 <low_level_input>:
  * @param netif the lwip network interface structure for this ethernetif
  * @return a pbuf filled with the received packet (including MAC header)
  *         NULL on memory error
  */
static struct pbuf * low_level_input(struct netif *netif)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b098      	sub	sp, #96	; 0x60
 8000768:	af02      	add	r7, sp, #8
 800076a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800076c:	2300      	movs	r3, #0
 800076e:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;;
 8000770:	2300      	movs	r3, #0
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	2300      	movs	r3, #0
 8000776:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2230      	movs	r2, #48	; 0x30
 800077e:	2100      	movs	r1, #0
 8000780:	4618      	mov	r0, r3
 8000782:	f015 fc73 	bl	801606c <memset>
  
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 8000786:	2300      	movs	r3, #0
 8000788:	653b      	str	r3, [r7, #80]	; 0x50
 800078a:	e015      	b.n	80007b8 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800078c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	f107 010c 	add.w	r1, r7, #12
 8000794:	4613      	mov	r3, r2
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	4413      	add	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	4419      	add	r1, r3
 800079e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	009b      	lsls	r3, r3, #2
 80007a8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80007ac:	4413      	add	r3, r2
 80007ae:	3b44      	subs	r3, #68	; 0x44
 80007b0:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 80007b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007b4:	3301      	adds	r3, #1
 80007b6:	653b      	str	r3, [r7, #80]	; 0x50
 80007b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80007ba:	2b02      	cmp	r3, #2
 80007bc:	d9e6      	bls.n	800078c <low_level_input+0x28>
  }

  if(HAL_ETH_GetRxDataBuffer(&EthHandle, RxBuff) == HAL_OK)
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	4619      	mov	r1, r3
 80007c4:	4828      	ldr	r0, [pc, #160]	; (8000868 <low_level_input+0x104>)
 80007c6:	f002 f8b6 	bl	8002936 <HAL_ETH_GetRxDataBuffer>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d145      	bne.n	800085c <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&EthHandle, &framelength);
 80007d0:	f107 0308 	add.w	r3, r7, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	4824      	ldr	r0, [pc, #144]	; (8000868 <low_level_input+0x104>)
 80007d8:	f002 f94b 	bl	8002a72 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&EthHandle);
 80007dc:	4822      	ldr	r0, [pc, #136]	; (8000868 <low_level_input+0x104>)
 80007de:	f002 f97b 	bl	8002ad8 <HAL_ETH_BuildRxDescriptors>

    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80007e8:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80007ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	dd1d      	ble.n	800082c <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80007f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007f2:	f003 021f 	and.w	r2, r3, #31
 80007f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007f8:	4413      	add	r3, r2
 80007fa:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80007fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000800:	f3bf 8f4f 	dsb	sy
}
 8000804:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8000806:	4a19      	ldr	r2, [pc, #100]	; (800086c <low_level_input+0x108>)
 8000808:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800080a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800080e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000810:	3320      	adds	r3, #32
 8000812:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8000814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000816:	3b20      	subs	r3, #32
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800081a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800081c:	2b00      	cmp	r3, #0
 800081e:	dcf2      	bgt.n	8000806 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 8000820:	f3bf 8f4f 	dsb	sy
}
 8000824:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000826:	f3bf 8f6f 	isb	sy
}
 800082a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800082c:	bf00      	nop
    
    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800082e:	4810      	ldr	r0, [pc, #64]	; (8000870 <low_level_input+0x10c>)
 8000830:	f00d fd00 	bl	800e234 <memp_malloc_pool>
 8000834:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 8000836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000838:	2b00      	cmp	r3, #0
 800083a:	d00f      	beq.n	800085c <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800083c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <low_level_input+0x110>)
 8000840:	611a      	str	r2, [r3, #16]

      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	b299      	uxth	r1, r3
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	b292      	uxth	r2, r2
 800084c:	9201      	str	r2, [sp, #4]
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000852:	2241      	movs	r2, #65	; 0x41
 8000854:	2000      	movs	r0, #0
 8000856:	f00e fa13 	bl	800ec80 <pbuf_alloced_custom>
 800085a:	6578      	str	r0, [r7, #84]	; 0x54
    }

  }
  
  return p;
 800085c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800085e:	4618      	mov	r0, r3
 8000860:	3758      	adds	r7, #88	; 0x58
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	24006804 	.word	0x24006804
 800086c:	e000ed00 	.word	0xe000ed00
 8000870:	08017518 	.word	0x08017518
 8000874:	08000925 	.word	0x08000925

08000878 <ethernetif_input>:
  * the appropriate input function is called.
  *
  * @param netif the lwip network interface structure for this ethernetif
  */
void ethernetif_input( void const * argument )
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b084      	sub	sp, #16
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <ethernetif_input+0x4c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800088c:	4618      	mov	r0, r3
 800088e:	f007 fbab 	bl	8007fe8 <osSemaphoreWait>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d1f5      	bne.n	8000884 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 8000898:	68f8      	ldr	r0, [r7, #12]
 800089a:	f7ff ff63 	bl	8000764 <low_level_input>
 800089e:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d00a      	beq.n	80008bc <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	68f9      	ldr	r1, [r7, #12]
 80008ac:	68b8      	ldr	r0, [r7, #8]
 80008ae:	4798      	blx	r3
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <ethernetif_input+0x44>
          {
            pbuf_free(p);
 80008b6:	68b8      	ldr	r0, [r7, #8]
 80008b8:	f00e fb9c 	bl	800eff4 <pbuf_free>
          }
        }

      }while(p!=NULL);
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d1ea      	bne.n	8000898 <ethernetif_input+0x20>
    if (osSemaphoreWait( RxPktSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80008c2:	e7df      	b.n	8000884 <ethernetif_input+0xc>
 80008c4:	240000d0 	.word	0x240000d0

080008c8 <ethernetif_init>:
  * @return ERR_OK if the loopif is initialized
  *         ERR_MEM if private data couldn't be allocated
  *         any other err_t on error
  */
err_t ethernetif_init(struct netif *netif)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d106      	bne.n	80008e4 <ethernetif_init+0x1c>
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <ethernetif_init+0x48>)
 80008d8:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 80008dc:	490d      	ldr	r1, [pc, #52]	; (8000914 <ethernetif_init+0x4c>)
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <ethernetif_init+0x50>)
 80008e0:	f015 fbcc 	bl	801607c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2273      	movs	r2, #115	; 0x73
 80008e8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	2274      	movs	r2, #116	; 0x74
 80008f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* We directly use etharp_output() here to save a function call.
   * You can instead declare your own function an call etharp_output()
   * from it if you have to do some checks before sending (e.g. if link
   * is available...) */
  netif->output = etharp_output;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4a09      	ldr	r2, [pc, #36]	; (800091c <ethernetif_init+0x54>)
 80008f8:	615a      	str	r2, [r3, #20]
  netif->linkoutput = low_level_output;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a08      	ldr	r2, [pc, #32]	; (8000920 <ethernetif_init+0x58>)
 80008fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fd9b 	bl	800043c <low_level_init>

  return ERR_OK;
 8000906:	2300      	movs	r3, #0
}
 8000908:	4618      	mov	r0, r3
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	08017540 	.word	0x08017540
 8000914:	08017598 	.word	0x08017598
 8000918:	080175a8 	.word	0x080175a8
 800091c:	0800bc81 	.word	0x0800bc81
 8000920:	08000671 	.word	0x08000671

08000924 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8000930:	68f9      	ldr	r1, [r7, #12]
 8000932:	4803      	ldr	r0, [pc, #12]	; (8000940 <pbuf_free_custom+0x1c>)
 8000934:	f00d fcf2 	bl	800e31c <memp_free_pool>
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	08017518 	.word	0x08017518

08000944 <sys_now>:
  *         when LWIP_TIMERS == 1 and NO_SYS == 1
  * @param  None
  * @retval Current Time value
  */
u32_t sys_now(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000948:	f001 fada 	bl	8001f00 <HAL_GetTick>
 800094c:	4603      	mov	r3, r0
}
 800094e:	4618      	mov	r0, r3
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <HAL_ETH_MspInit>:
  * @brief  Initializes the ETH MSP.
  * @param  heth: ETH handle
  * @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef *heth)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08e      	sub	sp, #56	; 0x38
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Ethernett MSP init: RMII Mode */
  
  /* Enable GPIOs clocks */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b4f      	ldr	r3, [pc, #316]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000962:	4a4e      	ldr	r2, [pc, #312]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800096c:	4b4b      	ldr	r3, [pc, #300]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	623b      	str	r3, [r7, #32]
 8000978:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b48      	ldr	r3, [pc, #288]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000980:	4a46      	ldr	r2, [pc, #280]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800098a:	4b44      	ldr	r3, [pc, #272]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000990:	f003 0302 	and.w	r3, r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
 8000996:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000998:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099e:	4a3f      	ldr	r2, [pc, #252]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009a8:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	61bb      	str	r3, [r7, #24]
 80009b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009bc:	4a37      	ldr	r2, [pc, #220]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009c6:	4b35      	ldr	r3, [pc, #212]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	697b      	ldr	r3, [r7, #20]
        RMII_MII_TXD0 ---------------------> PG13
        RMII_MII_TXD1 ---------------------> PB13
  */

  /* Configure PA1, PA2 and PA7 */
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 80009d4:	2302      	movs	r3, #2
 80009d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80009d8:	2302      	movs	r3, #2
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL; 
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 80009e0:	230b      	movs	r3, #11
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 80009e4:	2386      	movs	r3, #134	; 0x86
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80009e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ec:	4619      	mov	r1, r3
 80009ee:	482c      	ldr	r0, [pc, #176]	; (8000aa0 <HAL_ETH_MspInit+0x14c>)
 80009f0:	f003 faba 	bl	8003f68 <HAL_GPIO_Init>
  
  /* Configure PB13 */
  GPIO_InitStructure.Pin = GPIO_PIN_13;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80009fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	4828      	ldr	r0, [pc, #160]	; (8000aa4 <HAL_ETH_MspInit+0x150>)
 8000a02:	f003 fab1 	bl	8003f68 <HAL_GPIO_Init>
  
  /* Configure PC1, PC4 and PC5 */
  GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8000a06:	2332      	movs	r3, #50	; 0x32
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4825      	ldr	r0, [pc, #148]	; (8000aa8 <HAL_ETH_MspInit+0x154>)
 8000a12:	f003 faa9 	bl	8003f68 <HAL_GPIO_Init>

  /* Configure PG2, PG11, PG13 and PG14 */
  GPIO_InitStructure.Pin =  GPIO_PIN_2 | GPIO_PIN_11 | GPIO_PIN_13;
 8000a16:	f642 0304 	movw	r3, #10244	; 0x2804
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);	
 8000a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a20:	4619      	mov	r1, r3
 8000a22:	4822      	ldr	r0, [pc, #136]	; (8000aac <HAL_ETH_MspInit+0x158>)
 8000a24:	f003 faa0 	bl	8003f68 <HAL_GPIO_Init>
  
  /* Enable the Ethernet global Interrupt */
  HAL_NVIC_SetPriority(ETH_IRQn, 0x7, 0);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2107      	movs	r1, #7
 8000a2c:	203d      	movs	r0, #61	; 0x3d
 8000a2e:	f001 fb4b 	bl	80020c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ETH_IRQn);
 8000a32:	203d      	movs	r0, #61	; 0x3d
 8000a34:	f001 fb62 	bl	80020fc <HAL_NVIC_EnableIRQ>
  
  /* Enable Ethernet clocks */
  __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a44:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a48:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a5c:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000a74:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_ETH_MspInit+0x148>)
 8000a86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a8e:	60bb      	str	r3, [r7, #8]
 8000a90:	68bb      	ldr	r3, [r7, #8]
}
 8000a92:	bf00      	nop
 8000a94:	3738      	adds	r7, #56	; 0x38
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	58024400 	.word	0x58024400
 8000aa0:	58020000 	.word	0x58020000
 8000aa4:	58020400 	.word	0x58020400
 8000aa8:	58020800 	.word	0x58020800
 8000aac:	58021800 	.word	0x58021800

08000ab0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <HAL_ETH_RxCpltCallback+0x1c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f007 fae1 	bl	8008084 <osSemaphoreRelease>
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	240000d0 	.word	0x240000d0

08000ad0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{  
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here 
  */
  
  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&EthHandle);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <ETH_PHY_IO_Init+0x10>)
 8000ad6:	f002 fc35 	bl	8003344 <HAL_ETH_SetMDIOClockRange>
  
  return 0;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	24006804 	.word	0x24006804

08000ae4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  return 0;
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&EthHandle, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	68f9      	ldr	r1, [r7, #12]
 8000b06:	4807      	ldr	r0, [pc, #28]	; (8000b24 <ETH_PHY_IO_ReadReg+0x30>)
 8000b08:	f002 f986 	bl	8002e18 <HAL_ETH_ReadPHYRegister>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b16:	e000      	b.n	8000b1a <ETH_PHY_IO_ReadReg+0x26>
  }
  
  return 0;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24006804 	.word	0x24006804

08000b28 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written 
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&EthHandle, DevAddr, RegAddr, RegVal) != HAL_OK)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	68ba      	ldr	r2, [r7, #8]
 8000b38:	68f9      	ldr	r1, [r7, #12]
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <ETH_PHY_IO_WriteReg+0x30>)
 8000b3c:	f002 f9c0 	bl	8002ec0 <HAL_ETH_WritePHYRegister>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b4a:	e000      	b.n	8000b4e <ETH_PHY_IO_WriteReg+0x26>
  }
  
  return 0;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	24006804 	.word	0x24006804

08000b5c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000b60:	f001 f9ce 	bl	8001f00 <HAL_GetTick>
 8000b64:	4603      	mov	r3, r0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
	...

08000b6c <ethernet_link_thread>:
  * @brief  Check the ETH link state and update netif accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread( void const * argument )
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b0a0      	sub	sp, #128	; 0x80
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000b78:	2300      	movs	r3, #0
 8000b7a:	67bb      	str	r3, [r7, #120]	; 0x78
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	677b      	str	r3, [r7, #116]	; 0x74
  struct netif *netif = (struct netif *) argument;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	673b      	str	r3, [r7, #112]	; 0x70
  
  for(;;)
  {
    
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000b84:	483a      	ldr	r0, [pc, #232]	; (8000c70 <ethernet_link_thread+0x104>)
 8000b86:	f000 ff97 	bl	8001ab8 <LAN8742_GetLinkState>
 8000b8a:	66f8      	str	r0, [r7, #108]	; 0x6c
    
    if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8000b8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000b8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000b92:	089b      	lsrs	r3, r3, #2
 8000b94:	f003 0301 	and.w	r3, r3, #1
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d00c      	beq.n	8000bb8 <ethernet_link_thread+0x4c>
 8000b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	dc09      	bgt.n	8000bb8 <ethernet_link_thread+0x4c>
    {
      HAL_ETH_Stop_IT(&EthHandle);
 8000ba4:	4833      	ldr	r0, [pc, #204]	; (8000c74 <ethernet_link_thread+0x108>)
 8000ba6:	f001 fcd3 	bl	8002550 <HAL_ETH_Stop_IT>
      netif_set_down(netif);
 8000baa:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000bac:	f00d fe3a 	bl	800e824 <netif_set_down>
      netif_set_link_down(netif);
 8000bb0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000bb2:	f00d fe9d 	bl	800e8f0 <netif_set_link_down>
 8000bb6:	e056      	b.n	8000c66 <ethernet_link_thread+0xfa>
    }
    else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8000bb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000bba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d14f      	bne.n	8000c66 <ethernet_link_thread+0xfa>
 8000bc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	dd4c      	ble.n	8000c66 <ethernet_link_thread+0xfa>
 8000bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000bce:	3b02      	subs	r3, #2
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d82b      	bhi.n	8000c2c <ethernet_link_thread+0xc0>
 8000bd4:	a201      	add	r2, pc, #4	; (adr r2, 8000bdc <ethernet_link_thread+0x70>)
 8000bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bda:	bf00      	nop
 8000bdc:	08000bed 	.word	0x08000bed
 8000be0:	08000bff 	.word	0x08000bff
 8000be4:	08000c0f 	.word	0x08000c0f
 8000be8:	08000c1f 	.word	0x08000c1f
    {
      switch (PHYLinkState)
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8000bec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf0:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_100M;
 8000bf2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bf6:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000bfc:	e017      	b.n	8000c2e <ethernet_link_thread+0xc2>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_100M;
 8000c02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c06:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000c0c:	e00f      	b.n	8000c2e <ethernet_link_thread+0xc2>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8000c0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c12:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_10M;
 8000c14:	2300      	movs	r3, #0
 8000c16:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000c1c:	e007      	b.n	8000c2e <ethernet_link_thread+0xc2>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	677b      	str	r3, [r7, #116]	; 0x74
        speed = ETH_SPEED_10M;
 8000c22:	2300      	movs	r3, #0
 8000c24:	67bb      	str	r3, [r7, #120]	; 0x78
        linkchanged = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	67fb      	str	r3, [r7, #124]	; 0x7c
        break;
 8000c2a:	e000      	b.n	8000c2e <ethernet_link_thread+0xc2>
      default:
        break;      
 8000c2c:	bf00      	nop
      }
      
      if(linkchanged)
 8000c2e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d018      	beq.n	8000c66 <ethernet_link_thread+0xfa>
      {
        /* Get MAC Config MAC */
        HAL_ETH_GetMACConfig(&EthHandle, &MACConf); 
 8000c34:	f107 0308 	add.w	r3, r7, #8
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480e      	ldr	r0, [pc, #56]	; (8000c74 <ethernet_link_thread+0x108>)
 8000c3c:	f002 f994 	bl	8002f68 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8000c40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000c42:	623b      	str	r3, [r7, #32]
        MACConf.Speed = speed;
 8000c44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000c46:	61fb      	str	r3, [r7, #28]
        HAL_ETH_SetMACConfig(&EthHandle, &MACConf);
 8000c48:	f107 0308 	add.w	r3, r7, #8
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4809      	ldr	r0, [pc, #36]	; (8000c74 <ethernet_link_thread+0x108>)
 8000c50:	f002 fb5e 	bl	8003310 <HAL_ETH_SetMACConfig>
        HAL_ETH_Start_IT(&EthHandle);
 8000c54:	4807      	ldr	r0, [pc, #28]	; (8000c74 <ethernet_link_thread+0x108>)
 8000c56:	f001 fbf6 	bl	8002446 <HAL_ETH_Start_IT>
        netif_set_up(netif);
 8000c5a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000c5c:	f00d fd76 	bl	800e74c <netif_set_up>
        netif_set_link_up(netif);
 8000c60:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000c62:	f00d fe11 	bl	800e888 <netif_set_link_up>
      }
    }
    
    osDelay(100);
 8000c66:	2064      	movs	r0, #100	; 0x64
 8000c68:	f007 f8f6 	bl	8007e58 <osDelay>
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8000c6c:	e78a      	b.n	8000b84 <ethernet_link_thread+0x18>
 8000c6e:	bf00      	nop
 8000c70:	24006958 	.word	0x24006958
 8000c74:	24006804 	.word	0x24006804

08000c78 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08c      	sub	sp, #48	; 0x30
 8000c7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c8e:	4b61      	ldr	r3, [pc, #388]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000c90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c94:	4a5f      	ldr	r2, [pc, #380]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000c96:	f043 0304 	orr.w	r3, r3, #4
 8000c9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9e:	4b5d      	ldr	r3, [pc, #372]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000ca0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	61bb      	str	r3, [r7, #24]
 8000caa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cac:	4b59      	ldr	r3, [pc, #356]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb2:	4a58      	ldr	r2, [pc, #352]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cbc:	4b55      	ldr	r3, [pc, #340]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc6:	617b      	str	r3, [r7, #20]
 8000cc8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b52      	ldr	r3, [pc, #328]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd0:	4a50      	ldr	r2, [pc, #320]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000cd2:	f043 0301 	orr.w	r3, r3, #1
 8000cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cda:	4b4e      	ldr	r3, [pc, #312]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce0:	f003 0301 	and.w	r3, r3, #1
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce8:	4b4a      	ldr	r3, [pc, #296]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cee:	4a49      	ldr	r2, [pc, #292]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cf8:	4b46      	ldr	r3, [pc, #280]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d06:	4b43      	ldr	r3, [pc, #268]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d0c:	4a41      	ldr	r2, [pc, #260]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000d0e:	f043 0308 	orr.w	r3, r3, #8
 8000d12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d16:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d1c:	f003 0308 	and.w	r3, r3, #8
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d24:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2a:	4a3a      	ldr	r2, [pc, #232]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d34:	4b37      	ldr	r3, [pc, #220]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d42:	4b34      	ldr	r3, [pc, #208]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	4a32      	ldr	r2, [pc, #200]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000d4a:	f043 0310 	orr.w	r3, r3, #16
 8000d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d52:	4b30      	ldr	r3, [pc, #192]	; (8000e14 <MX_GPIO_Init+0x19c>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	f003 0310 	and.w	r3, r3, #16
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f244 0101 	movw	r1, #16385	; 0x4001
 8000d66:	482c      	ldr	r0, [pc, #176]	; (8000e18 <MX_GPIO_Init+0x1a0>)
 8000d68:	f003 fac6 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d72:	482a      	ldr	r0, [pc, #168]	; (8000e1c <MX_GPIO_Init+0x1a4>)
 8000d74:	f003 fac0 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2102      	movs	r1, #2
 8000d7c:	4828      	ldr	r0, [pc, #160]	; (8000e20 <MX_GPIO_Init+0x1a8>)
 8000d7e:	f003 fabb 	bl	80042f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d90:	f107 031c 	add.w	r3, r7, #28
 8000d94:	4619      	mov	r1, r3
 8000d96:	4823      	ldr	r0, [pc, #140]	; (8000e24 <MX_GPIO_Init+0x1ac>)
 8000d98:	f003 f8e6 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000d9c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dae:	f107 031c 	add.w	r3, r7, #28
 8000db2:	4619      	mov	r1, r3
 8000db4:	4818      	ldr	r0, [pc, #96]	; (8000e18 <MX_GPIO_Init+0x1a0>)
 8000db6:	f003 f8d7 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4812      	ldr	r0, [pc, #72]	; (8000e1c <MX_GPIO_Init+0x1a4>)
 8000dd4:	f003 f8c8 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000dd8:	2380      	movs	r3, #128	; 0x80
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <MX_GPIO_Init+0x1b0>)
 8000dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 031c 	add.w	r3, r7, #28
 8000de8:	4619      	mov	r1, r3
 8000dea:	4810      	ldr	r0, [pc, #64]	; (8000e2c <MX_GPIO_Init+0x1b4>)
 8000dec:	f003 f8bc 	bl	8003f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000df0:	2302      	movs	r3, #2
 8000df2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4806      	ldr	r0, [pc, #24]	; (8000e20 <MX_GPIO_Init+0x1a8>)
 8000e08:	f003 f8ae 	bl	8003f68 <HAL_GPIO_Init>

}
 8000e0c:	bf00      	nop
 8000e0e:	3730      	adds	r7, #48	; 0x30
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	58024400 	.word	0x58024400
 8000e18:	58020400 	.word	0x58020400
 8000e1c:	58020c00 	.word	0x58020c00
 8000e20:	58021000 	.word	0x58021000
 8000e24:	58020800 	.word	0x58020800
 8000e28:	11110000 	.word	0x11110000
 8000e2c:	58021800 	.word	0x58021800

08000e30 <http_server_serve>:
  * @brief serve tcp connection  
  * @param conn: pointer on connection structure 
  * @retval None
  */
static void http_server_serve(struct netconn *conn) 
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08e      	sub	sp, #56	; 0x38
 8000e34:	af02      	add	r7, sp, #8
 8000e36:	6078      	str	r0, [r7, #4]
  u16_t buflen;
  struct fs_file file;
  
  /* Read the data from the port, blocking if nothing yet there. 
   We assume the request (the part we care about) is in one netbuf */
  recv_err = netconn_recv(conn, &inbuf);
 8000e38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f008 fa26 	bl	8009290 <netconn_recv>
 8000e44:	4603      	mov	r3, r0
 8000e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  
  if (recv_err == ERR_OK)
 8000e4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 80bf 	bne.w	8000fd2 <http_server_serve+0x1a2>
  {
    if (netconn_err(conn) == ERR_OK) 
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f008 fba4 	bl	80095a2 <netconn_err>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f040 80b8 	bne.w	8000fd2 <http_server_serve+0x1a2>
    {
      netbuf_data(inbuf, (void**)&buf, &buflen);
 8000e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e64:	f107 0222 	add.w	r2, r7, #34	; 0x22
 8000e68:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f00a f8f9 	bl	800b064 <netbuf_data>
    
      /* Is this an HTTP GET command? (only check the first 5 chars, since
      there are other formats for GET, and we're keeping it very simple )*/
      if ((buflen >=5) && (strncmp(buf, "GET /", 5) == 0))
 8000e72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000e74:	2b04      	cmp	r3, #4
 8000e76:	f240 80ac 	bls.w	8000fd2 <http_server_serve+0x1a2>
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	2205      	movs	r2, #5
 8000e7e:	495a      	ldr	r1, [pc, #360]	; (8000fe8 <http_server_serve+0x1b8>)
 8000e80:	4618      	mov	r0, r3
 8000e82:	f015 f98a 	bl	801619a <strncmp>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f040 80a2 	bne.w	8000fd2 <http_server_serve+0x1a2>
      {
        /* Check if request to get ST.gif */ 
        if (strncmp((char const *)buf,"GET /STM32H7xx_files/ST.gif",27)==0)
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	221b      	movs	r2, #27
 8000e92:	4956      	ldr	r1, [pc, #344]	; (8000fec <http_server_serve+0x1bc>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f015 f980 	bl	801619a <strncmp>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d114      	bne.n	8000eca <http_server_serve+0x9a>
        {
          fs_open(&file, "/STM32H7xx_files/ST.gif"); 
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	4952      	ldr	r1, [pc, #328]	; (8000ff0 <http_server_serve+0x1c0>)
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f015 f83e 	bl	8015f28 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000eac:	68f9      	ldr	r1, [r7, #12]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	9300      	str	r3, [sp, #0]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f008 fa63 	bl	8009384 <netconn_write_partly>
          fs_close(&file);
 8000ebe:	f107 030c 	add.w	r3, r7, #12
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f015 f86e 	bl	8015fa4 <fs_close>
 8000ec8:	e083      	b.n	8000fd2 <http_server_serve+0x1a2>
        }   
        /* Check if request to get stm32.jpg */
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/stm32.jpg",30)==0)
 8000eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ecc:	221e      	movs	r2, #30
 8000ece:	4949      	ldr	r1, [pc, #292]	; (8000ff4 <http_server_serve+0x1c4>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f015 f962 	bl	801619a <strncmp>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d114      	bne.n	8000f06 <http_server_serve+0xd6>
        {
          fs_open(&file, "/STM32H7xx_files/stm32.jpg"); 
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	4945      	ldr	r1, [pc, #276]	; (8000ff8 <http_server_serve+0x1c8>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f015 f820 	bl	8015f28 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000ee8:	68f9      	ldr	r1, [r7, #12]
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	461a      	mov	r2, r3
 8000eee:	2300      	movs	r3, #0
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f008 fa45 	bl	8009384 <netconn_write_partly>
          fs_close(&file);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	4618      	mov	r0, r3
 8000f00:	f015 f850 	bl	8015fa4 <fs_close>
 8000f04:	e065      	b.n	8000fd2 <http_server_serve+0x1a2>
        }
        else if (strncmp((char const *)buf,"GET /STM32H7xx_files/logo.jpg", 29) == 0)                                           
 8000f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f08:	221d      	movs	r2, #29
 8000f0a:	493c      	ldr	r1, [pc, #240]	; (8000ffc <http_server_serve+0x1cc>)
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f015 f944 	bl	801619a <strncmp>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d114      	bne.n	8000f42 <http_server_serve+0x112>
        {
          /* Check if request to get ST logo.jpg */
          fs_open(&file, "/STM32H7xx_files/logo.jpg"); 
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4938      	ldr	r1, [pc, #224]	; (8001000 <http_server_serve+0x1d0>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f015 f802 	bl	8015f28 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000f24:	68f9      	ldr	r1, [r7, #12]
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	9300      	str	r3, [sp, #0]
 8000f2e:	2300      	movs	r3, #0
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f008 fa27 	bl	8009384 <netconn_write_partly>
          fs_close(&file);
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f015 f832 	bl	8015fa4 <fs_close>
 8000f40:	e047      	b.n	8000fd2 <http_server_serve+0x1a2>
        }
        else if(strncmp(buf, "GET /STM32H7xxTASKS.html", 24) == 0)
 8000f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f44:	2218      	movs	r2, #24
 8000f46:	492f      	ldr	r1, [pc, #188]	; (8001004 <http_server_serve+0x1d4>)
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f015 f926 	bl	801619a <strncmp>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d103      	bne.n	8000f5c <http_server_serve+0x12c>
        {
           /* Load dynamic page */
           DynWebPage(conn);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 f983 	bl	8001260 <DynWebPage>
 8000f5a:	e03a      	b.n	8000fd2 <http_server_serve+0x1a2>
        }
        else if((strncmp(buf, "GET /STM32H7xx.html", 19) == 0)||(strncmp(buf, "GET / ", 6) == 0)) 
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5e:	2213      	movs	r2, #19
 8000f60:	4929      	ldr	r1, [pc, #164]	; (8001008 <http_server_serve+0x1d8>)
 8000f62:	4618      	mov	r0, r3
 8000f64:	f015 f919 	bl	801619a <strncmp>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d008      	beq.n	8000f80 <http_server_serve+0x150>
 8000f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f70:	2206      	movs	r2, #6
 8000f72:	4926      	ldr	r1, [pc, #152]	; (800100c <http_server_serve+0x1dc>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f015 f910 	bl	801619a <strncmp>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d114      	bne.n	8000faa <http_server_serve+0x17a>
        {
          /* Load STM32H7xx page */
          fs_open(&file, "/STM32H7xx.html"); 
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4922      	ldr	r1, [pc, #136]	; (8001010 <http_server_serve+0x1e0>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f014 ffce 	bl	8015f28 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000f8c:	68f9      	ldr	r1, [r7, #12]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	461a      	mov	r2, r3
 8000f92:	2300      	movs	r3, #0
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2300      	movs	r3, #0
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f008 f9f3 	bl	8009384 <netconn_write_partly>
          fs_close(&file);
 8000f9e:	f107 030c 	add.w	r3, r7, #12
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f014 fffe 	bl	8015fa4 <fs_close>
 8000fa8:	e013      	b.n	8000fd2 <http_server_serve+0x1a2>
        }
        else 
        {
          /* Load Error page */
          fs_open(&file, "/404.html"); 
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4919      	ldr	r1, [pc, #100]	; (8001014 <http_server_serve+0x1e4>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f014 ffb9 	bl	8015f28 <fs_open>
          netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 8000fb6:	68f9      	ldr	r1, [r7, #12]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f008 f9de 	bl	8009384 <netconn_write_partly>
          fs_close(&file);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f014 ffe9 	bl	8015fa4 <fs_close>
        }
      }      
    }
  }
  /* Close the connection (server closes in HTTP) */
  netconn_close(conn);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f008 fad8 	bl	8009588 <netconn_close>
  
  /* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
  netbuf_delete(inbuf);
 8000fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f00a f822 	bl	800b024 <netbuf_delete>
}
 8000fe0:	bf00      	nop
 8000fe2:	3730      	adds	r7, #48	; 0x30
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	08017c1c 	.word	0x08017c1c
 8000fec:	08017c24 	.word	0x08017c24
 8000ff0:	08017c40 	.word	0x08017c40
 8000ff4:	08017c58 	.word	0x08017c58
 8000ff8:	08017c78 	.word	0x08017c78
 8000ffc:	08017c94 	.word	0x08017c94
 8001000:	08017cb4 	.word	0x08017cb4
 8001004:	08017cd0 	.word	0x08017cd0
 8001008:	08017cec 	.word	0x08017cec
 800100c:	08017d00 	.word	0x08017d00
 8001010:	08017d08 	.word	0x08017d08
 8001014:	08017d18 	.word	0x08017d18

08001018 <http_server_netconn_thread>:
  * @brief  http server thread 
  * @param arg: pointer on argument(not used here) 
  * @retval None
  */
static void http_server_netconn_thread(void *arg)
{ 
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;
  
  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 8001020:	2200      	movs	r2, #0
 8001022:	2100      	movs	r1, #0
 8001024:	2010      	movs	r0, #16
 8001026:	f007 fdd5 	bl	8008bd4 <netconn_new_with_proto_and_callback>
 800102a:	6178      	str	r0, [r7, #20]
  
  if (conn!= NULL)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d023      	beq.n	800107a <http_server_netconn_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 80);
 8001032:	2250      	movs	r2, #80	; 0x50
 8001034:	2100      	movs	r1, #0
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f007 fe86 	bl	8008d48 <netconn_bind>
 800103c:	4603      	mov	r3, r0
 800103e:	74fb      	strb	r3, [r7, #19]
    
    if (err == ERR_OK)
 8001040:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d118      	bne.n	800107a <http_server_netconn_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8001048:	21ff      	movs	r1, #255	; 0xff
 800104a:	6978      	ldr	r0, [r7, #20]
 800104c:	f007 feec 	bl	8008e28 <netconn_listen_with_backlog>
  
      while(1) 
      {
        /* accept any icoming connection */
        accept_err = netconn_accept(conn, &newconn);
 8001050:	f107 030c 	add.w	r3, r7, #12
 8001054:	4619      	mov	r1, r3
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f007 ff12 	bl	8008e80 <netconn_accept>
 800105c:	4603      	mov	r3, r0
 800105e:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 8001060:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d1f3      	bne.n	8001050 <http_server_netconn_thread+0x38>
        {
          /* serve connection */
          http_server_serve(newconn);
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fee0 	bl	8000e30 <http_server_serve>

          /* delete connection */
          netconn_delete(newconn);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	4618      	mov	r0, r3
 8001074:	f007 fe4c 	bl	8008d10 <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8001078:	e7ea      	b.n	8001050 <http_server_netconn_thread+0x38>
        }
      }
    }
  }
}
 800107a:	bf00      	nop
 800107c:	3718      	adds	r7, #24
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <send_connection_cmd>:


err_t send_connection_cmd(struct netconn *conn){
 8001084:	b590      	push	{r4, r7, lr}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af02      	add	r7, sp, #8
 800108a:	6078      	str	r0, [r7, #4]
	//         .... ...0 = (Reserved): Not set
	//     Keep Alive: 30
	//     Client ID Length: 0
	//     Client ID:

	char dataptr[] = {
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <send_connection_cmd+0x30>)
 800108e:	f107 0408 	add.w	r4, r7, #8
 8001092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001094:	c407      	stmia	r4!, {r0, r1, r2}
 8001096:	8023      	strh	r3, [r4, #0]
	0x10, 0x0c, 0x00, 0x04, 0x4d, 0x51, 0x54, 0x54,
	0x04, 0x02, 0x00, 0x1e, 0x00, 0x00 };

	return netconn_write(conn, dataptr, sizeof(dataptr), NETCONN_COPY);
 8001098:	f107 0108 	add.w	r1, r7, #8
 800109c:	2300      	movs	r3, #0
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	2301      	movs	r3, #1
 80010a2:	220e      	movs	r2, #14
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f008 f96d 	bl	8009384 <netconn_write_partly>
 80010aa:	4603      	mov	r3, r0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	08017d24 	.word	0x08017d24

080010b8 <send_msg_pressed>:


err_t send_msg_pressed(struct netconn *conn){
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b08e      	sub	sp, #56	; 0x38
 80010bc:	af02      	add	r7, sp, #8
 80010be:	6078      	str	r0, [r7, #4]
	//     Topic Length: 11
	//     Topic: topic/board
	//     Message: USER button pressed


	char dataptr[] = {
 80010c0:	4b0b      	ldr	r3, [pc, #44]	; (80010f0 <send_msg_pressed+0x38>)
 80010c2:	f107 040c 	add.w	r4, r7, #12
 80010c6:	461d      	mov	r5, r3
 80010c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d0:	682b      	ldr	r3, [r5, #0]
 80010d2:	8023      	strh	r3, [r4, #0]
	0x63, 0x2f, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x55,
	0x53, 0x45, 0x52, 0x20, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x20, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x64 };

	return netconn_write(conn, dataptr, sizeof(dataptr), NETCONN_COPY);
 80010d4:	f107 010c 	add.w	r1, r7, #12
 80010d8:	2300      	movs	r3, #0
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2301      	movs	r3, #1
 80010de:	2222      	movs	r2, #34	; 0x22
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f008 f94f 	bl	8009384 <netconn_write_partly>
 80010e6:	4603      	mov	r3, r0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3730      	adds	r7, #48	; 0x30
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bdb0      	pop	{r4, r5, r7, pc}
 80010f0:	08017d34 	.word	0x08017d34

080010f4 <send_msg_not_pressed>:

err_t send_msg_not_pressed(struct netconn *conn){
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b08e      	sub	sp, #56	; 0x38
 80010f8:	af02      	add	r7, sp, #8
 80010fa:	6078      	str	r0, [r7, #4]
	//     Topic Length: 11
	//     Topic: topic/board
	//     Message: USER button NOT pressed


	char dataptr[] = {
 80010fc:	4b0d      	ldr	r3, [pc, #52]	; (8001134 <send_msg_not_pressed+0x40>)
 80010fe:	f107 0408 	add.w	r4, r7, #8
 8001102:	461d      	mov	r5, r3
 8001104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001110:	6020      	str	r0, [r4, #0]
 8001112:	3404      	adds	r4, #4
 8001114:	8021      	strh	r1, [r4, #0]
	0x53, 0x45, 0x52, 0x20, 0x62, 0x75, 0x74, 0x74,
	0x6f, 0x6e, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x65, 0x64 };


	return netconn_write(conn, dataptr, sizeof(dataptr), NETCONN_COPY);
 8001116:	f107 0108 	add.w	r1, r7, #8
 800111a:	2300      	movs	r3, #0
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2301      	movs	r3, #1
 8001120:	2226      	movs	r2, #38	; 0x26
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f008 f92e 	bl	8009384 <netconn_write_partly>
 8001128:	4603      	mov	r3, r0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3730      	adds	r7, #48	; 0x30
 800112e:	46bd      	mov	sp, r7
 8001130:	bdb0      	pop	{r4, r5, r7, pc}
 8001132:	bf00      	nop
 8001134:	08017d58 	.word	0x08017d58

08001138 <send_disconnect>:

err_t send_disconnect(struct netconn *conn){
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af02      	add	r7, sp, #8
 800113e:	6078      	str	r0, [r7, #4]
	//     Header Flags: 0xe0, Message Type: Disconnect Req
	//         1110 .... = Message Type: Disconnect Req (14)
	//         .... 0000 = Reserved: 0
	//     Msg Len: 0

	char dataptr[] = {
 8001140:	23e0      	movs	r3, #224	; 0xe0
 8001142:	81bb      	strh	r3, [r7, #12]
	0xe0, 0x00 };

    return netconn_write(conn, dataptr, sizeof(dataptr), NETCONN_COPY);
 8001144:	f107 010c 	add.w	r1, r7, #12
 8001148:	2300      	movs	r3, #0
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2301      	movs	r3, #1
 800114e:	2202      	movs	r2, #2
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f008 f917 	bl	8009384 <netconn_write_partly>
 8001156:	4603      	mov	r3, r0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <vTCP_MQTT_Client_Task>:
 * This task gets and configures a socket to get the header of google web site
 * using HTTP protocol.
 *
 * @param param
 */
static void vTCP_MQTT_Client_Task(void *param) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	struct netconn *xNetConn = NULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]

	struct ip4_addr local_ip;
	struct ip4_addr remote_ip;
	int rc1, rc2;

	xNetConn = netconn_new ( NETCONN_TCP );
 800116c:	2200      	movs	r2, #0
 800116e:	2100      	movs	r1, #0
 8001170:	2010      	movs	r0, #16
 8001172:	f007 fd2f 	bl	8008bd4 <netconn_new_with_proto_and_callback>
 8001176:	61b8      	str	r0, [r7, #24]

	if ( xNetConn == NULL ) {
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d045      	beq.n	800120a <vTCP_MQTT_Client_Task+0xaa>

	 /* No memory for new connection? */
	 return;
	}

	IP_ADDR4(&local_ip,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 800117e:	4b25      	ldr	r3, [pc, #148]	; (8001214 <vTCP_MQTT_Client_Task+0xb4>)
 8001180:	60fb      	str	r3, [r7, #12]

	rc1 = netconn_bind ( xNetConn, &local_ip, 0 );
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2200      	movs	r2, #0
 8001188:	4619      	mov	r1, r3
 800118a:	69b8      	ldr	r0, [r7, #24]
 800118c:	f007 fddc 	bl	8008d48 <netconn_bind>
 8001190:	4603      	mov	r3, r0
 8001192:	617b      	str	r3, [r7, #20]

	IP_ADDR4(&remote_ip, IP_SERVER_ADDR0, IP_SERVER_ADDR1, IP_SERVER_ADDR2, IP_SERVER_ADDR3);
 8001194:	4b20      	ldr	r3, [pc, #128]	; (8001218 <vTCP_MQTT_Client_Task+0xb8>)
 8001196:	60bb      	str	r3, [r7, #8]

	rc2 = netconn_connect ( xNetConn, &remote_ip, IP_SERVER_PORT);
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	f240 725b 	movw	r2, #1883	; 0x75b
 80011a0:	4619      	mov	r1, r3
 80011a2:	69b8      	ldr	r0, [r7, #24]
 80011a4:	f007 fe08 	bl	8008db8 <netconn_connect>
 80011a8:	4603      	mov	r3, r0
 80011aa:	613b      	str	r3, [r7, #16]

	if ( rc1 != ERR_OK || rc2 != ERR_OK )
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d102      	bne.n	80011b8 <vTCP_MQTT_Client_Task+0x58>
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <vTCP_MQTT_Client_Task+0x60>
	{

	  netconn_delete ( xNetConn );
 80011b8:	69b8      	ldr	r0, [r7, #24]
 80011ba:	f007 fda9 	bl	8008d10 <netconn_delete>
	  return;
 80011be:	e025      	b.n	800120c <vTCP_MQTT_Client_Task+0xac>
	}

	send_connection_cmd(xNetConn);
 80011c0:	69b8      	ldr	r0, [r7, #24]
 80011c2:	f7ff ff5f 	bl	8001084 <send_connection_cmd>

	for(int i = 0; i < 40;i++) {
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	e014      	b.n	80011f6 <vTCP_MQTT_Client_Task+0x96>
		// read button state
		if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80011cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011d0:	4812      	ldr	r0, [pc, #72]	; (800121c <vTCP_MQTT_Client_Task+0xbc>)
 80011d2:	f003 f879 	bl	80042c8 <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <vTCP_MQTT_Client_Task+0x84>
			send_msg_pressed(xNetConn);
 80011dc:	69b8      	ldr	r0, [r7, #24]
 80011de:	f7ff ff6b 	bl	80010b8 <send_msg_pressed>
 80011e2:	e002      	b.n	80011ea <vTCP_MQTT_Client_Task+0x8a>
		} else {
			send_msg_not_pressed(xNetConn);
 80011e4:	69b8      	ldr	r0, [r7, #24]
 80011e6:	f7ff ff85 	bl	80010f4 <send_msg_not_pressed>
		}

		vTaskDelay(200/portTICK_RATE_MS);
 80011ea:	20c8      	movs	r0, #200	; 0xc8
 80011ec:	f005 fd58 	bl	8006ca0 <vTaskDelay>
	for(int i = 0; i < 40;i++) {
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	3301      	adds	r3, #1
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	2b27      	cmp	r3, #39	; 0x27
 80011fa:	dde7      	ble.n	80011cc <vTCP_MQTT_Client_Task+0x6c>

	}

	send_disconnect(xNetConn);
 80011fc:	69b8      	ldr	r0, [r7, #24]
 80011fe:	f7ff ff9b 	bl	8001138 <send_disconnect>

    /* take down the connection conn */
	netconn_close(xNetConn);
 8001202:	69b8      	ldr	r0, [r7, #24]
 8001204:	f008 f9c0 	bl	8009588 <netconn_close>
 8001208:	e000      	b.n	800120c <vTCP_MQTT_Client_Task+0xac>
	 return;
 800120a:	bf00      	nop
}
 800120c:	3720      	adds	r7, #32
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	0a47fea9 	.word	0x0a47fea9
 8001218:	1447fea9 	.word	0x1447fea9
 800121c:	58020800 	.word	0x58020800

08001220 <http_server_netconn_init>:
  * @brief  Initialize the HTTP server (start its thread)
  * @param  none
  * @retval None
  */
void http_server_netconn_init()
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af02      	add	r7, sp, #8
  sys_thread_new("HTTP", http_server_netconn_thread, NULL, DEFAULT_THREAD_STACKSIZE, WEBSERVER_THREAD_PRIO);
 8001226:	2301      	movs	r3, #1
 8001228:	9300      	str	r3, [sp, #0]
 800122a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800122e:	2200      	movs	r2, #0
 8001230:	4907      	ldr	r1, [pc, #28]	; (8001250 <http_server_netconn_init+0x30>)
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <http_server_netconn_init+0x34>)
 8001234:	f014 fe3c 	bl	8015eb0 <sys_thread_new>
  sys_thread_new("vTCP_MQTT_Client_Task", vTCP_MQTT_Client_Task, NULL, DEFAULT_THREAD_STACKSIZE, MQTT_THREAD_PRIO);
 8001238:	2302      	movs	r3, #2
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001240:	2200      	movs	r2, #0
 8001242:	4905      	ldr	r1, [pc, #20]	; (8001258 <http_server_netconn_init+0x38>)
 8001244:	4805      	ldr	r0, [pc, #20]	; (800125c <http_server_netconn_init+0x3c>)
 8001246:	f014 fe33 	bl	8015eb0 <sys_thread_new>
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	08001019 	.word	0x08001019
 8001254:	08017d80 	.word	0x08017d80
 8001258:	08001161 	.word	0x08001161
 800125c:	08017d88 	.word	0x08017d88

08001260 <DynWebPage>:
  *         running tasks and the number of page hits.
  * @param  conn pointer on connection structure
  * @retval None
  */
void DynWebPage(struct netconn *conn)
{
 8001260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001262:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8001266:	af02      	add	r7, sp, #8
 8001268:	1d3b      	adds	r3, r7, #4
 800126a:	6018      	str	r0, [r3, #0]
  portCHAR PAGE_BODY[512];
  portCHAR pagehits[10] = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	3304      	adds	r3, #4
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	809a      	strh	r2, [r3, #4]

  memset(PAGE_BODY, 0,512);
 800127c:	f107 0318 	add.w	r3, r7, #24
 8001280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f014 fef0 	bl	801606c <memset>

  /* Update the hit count */
  nPageHits++;
 800128c:	4b63      	ldr	r3, [pc, #396]	; (800141c <DynWebPage+0x1bc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	4a62      	ldr	r2, [pc, #392]	; (800141c <DynWebPage+0x1bc>)
 8001294:	6013      	str	r3, [r2, #0]
  sprintf(pagehits, "%d", (int)nPageHits);
 8001296:	4b61      	ldr	r3, [pc, #388]	; (800141c <DynWebPage+0x1bc>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	461a      	mov	r2, r3
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	495f      	ldr	r1, [pc, #380]	; (8001420 <DynWebPage+0x1c0>)
 80012a2:	4618      	mov	r0, r3
 80012a4:	f014 ff42 	bl	801612c <siprintf>
  strcat(PAGE_BODY, pagehits);
 80012a8:	f107 020c 	add.w	r2, r7, #12
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f014 ff5a 	bl	801616c <strcat>
  strcat((char *)PAGE_BODY, "<pre><br>Name          State  Priority  Stack   Num" );
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f819 	bl	80002f4 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	4413      	add	r3, r2
 80012cc:	4a55      	ldr	r2, [pc, #340]	; (8001424 <DynWebPage+0x1c4>)
 80012ce:	4614      	mov	r4, r2
 80012d0:	469c      	mov	ip, r3
 80012d2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80012d6:	4665      	mov	r5, ip
 80012d8:	4626      	mov	r6, r4
 80012da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012dc:	6028      	str	r0, [r5, #0]
 80012de:	6069      	str	r1, [r5, #4]
 80012e0:	60aa      	str	r2, [r5, #8]
 80012e2:	60eb      	str	r3, [r5, #12]
 80012e4:	3410      	adds	r4, #16
 80012e6:	f10c 0c10 	add.w	ip, ip, #16
 80012ea:	4574      	cmp	r4, lr
 80012ec:	d1f3      	bne.n	80012d6 <DynWebPage+0x76>
 80012ee:	4663      	mov	r3, ip
 80012f0:	4622      	mov	r2, r4
 80012f2:	6810      	ldr	r0, [r2, #0]
 80012f4:	6018      	str	r0, [r3, #0]
  strcat((char *)PAGE_BODY, "<br>---------------------------------------------<br>");
 80012f6:	f107 0318 	add.w	r3, r7, #24
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7fe fffa 	bl	80002f4 <strlen>
 8001300:	4603      	mov	r3, r0
 8001302:	461a      	mov	r2, r3
 8001304:	f107 0318 	add.w	r3, r7, #24
 8001308:	4413      	add	r3, r2
 800130a:	4a47      	ldr	r2, [pc, #284]	; (8001428 <DynWebPage+0x1c8>)
 800130c:	4614      	mov	r4, r2
 800130e:	469c      	mov	ip, r3
 8001310:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001314:	4665      	mov	r5, ip
 8001316:	4626      	mov	r6, r4
 8001318:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800131a:	6028      	str	r0, [r5, #0]
 800131c:	6069      	str	r1, [r5, #4]
 800131e:	60aa      	str	r2, [r5, #8]
 8001320:	60eb      	str	r3, [r5, #12]
 8001322:	3410      	adds	r4, #16
 8001324:	f10c 0c10 	add.w	ip, ip, #16
 8001328:	4574      	cmp	r4, lr
 800132a:	d1f3      	bne.n	8001314 <DynWebPage+0xb4>
 800132c:	4663      	mov	r3, ip
 800132e:	4622      	mov	r2, r4
 8001330:	6810      	ldr	r0, [r2, #0]
 8001332:	6018      	str	r0, [r3, #0]
 8001334:	8892      	ldrh	r2, [r2, #4]
 8001336:	809a      	strh	r2, [r3, #4]

  /* The list of tasks and their status */
  osThreadList((unsigned char *)(PAGE_BODY + strlen(PAGE_BODY)));
 8001338:	f107 0318 	add.w	r3, r7, #24
 800133c:	4618      	mov	r0, r3
 800133e:	f7fe ffd9 	bl	80002f4 <strlen>
 8001342:	4602      	mov	r2, r0
 8001344:	f107 0318 	add.w	r3, r7, #24
 8001348:	4413      	add	r3, r2
 800134a:	4618      	mov	r0, r3
 800134c:	f006 ffb5 	bl	80082ba <osThreadList>
  strcat((char *)PAGE_BODY, "<br><br>---------------------------------------------");
 8001350:	f107 0318 	add.w	r3, r7, #24
 8001354:	4618      	mov	r0, r3
 8001356:	f7fe ffcd 	bl	80002f4 <strlen>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	4413      	add	r3, r2
 8001364:	4a31      	ldr	r2, [pc, #196]	; (800142c <DynWebPage+0x1cc>)
 8001366:	4614      	mov	r4, r2
 8001368:	469c      	mov	ip, r3
 800136a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800136e:	4665      	mov	r5, ip
 8001370:	4626      	mov	r6, r4
 8001372:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001374:	6028      	str	r0, [r5, #0]
 8001376:	6069      	str	r1, [r5, #4]
 8001378:	60aa      	str	r2, [r5, #8]
 800137a:	60eb      	str	r3, [r5, #12]
 800137c:	3410      	adds	r4, #16
 800137e:	f10c 0c10 	add.w	ip, ip, #16
 8001382:	4574      	cmp	r4, lr
 8001384:	d1f3      	bne.n	800136e <DynWebPage+0x10e>
 8001386:	4663      	mov	r3, ip
 8001388:	4622      	mov	r2, r4
 800138a:	6810      	ldr	r0, [r2, #0]
 800138c:	6018      	str	r0, [r3, #0]
 800138e:	8892      	ldrh	r2, [r2, #4]
 8001390:	809a      	strh	r2, [r3, #4]
  strcat((char *)PAGE_BODY, "<br>B : Blocked, R : Ready, D : Deleted, S : Suspended<br>");
 8001392:	f107 0318 	add.w	r3, r7, #24
 8001396:	4618      	mov	r0, r3
 8001398:	f7fe ffac 	bl	80002f4 <strlen>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4413      	add	r3, r2
 80013a6:	4a22      	ldr	r2, [pc, #136]	; (8001430 <DynWebPage+0x1d0>)
 80013a8:	4614      	mov	r4, r2
 80013aa:	469c      	mov	ip, r3
 80013ac:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80013b0:	4665      	mov	r5, ip
 80013b2:	4626      	mov	r6, r4
 80013b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013b6:	6028      	str	r0, [r5, #0]
 80013b8:	6069      	str	r1, [r5, #4]
 80013ba:	60aa      	str	r2, [r5, #8]
 80013bc:	60eb      	str	r3, [r5, #12]
 80013be:	3410      	adds	r4, #16
 80013c0:	f10c 0c10 	add.w	ip, ip, #16
 80013c4:	4574      	cmp	r4, lr
 80013c6:	d1f3      	bne.n	80013b0 <DynWebPage+0x150>
 80013c8:	4662      	mov	r2, ip
 80013ca:	4623      	mov	r3, r4
 80013cc:	cb03      	ldmia	r3!, {r0, r1}
 80013ce:	6010      	str	r0, [r2, #0]
 80013d0:	6051      	str	r1, [r2, #4]
 80013d2:	8819      	ldrh	r1, [r3, #0]
 80013d4:	789b      	ldrb	r3, [r3, #2]
 80013d6:	8111      	strh	r1, [r2, #8]
 80013d8:	7293      	strb	r3, [r2, #10]

  /* Send the dynamically generated page */
  netconn_write(conn, PAGE_START, strlen((char*)PAGE_START), NETCONN_COPY);
 80013da:	4816      	ldr	r0, [pc, #88]	; (8001434 <DynWebPage+0x1d4>)
 80013dc:	f7fe ff8a 	bl	80002f4 <strlen>
 80013e0:	4602      	mov	r2, r0
 80013e2:	1d38      	adds	r0, r7, #4
 80013e4:	2300      	movs	r3, #0
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2301      	movs	r3, #1
 80013ea:	4912      	ldr	r1, [pc, #72]	; (8001434 <DynWebPage+0x1d4>)
 80013ec:	6800      	ldr	r0, [r0, #0]
 80013ee:	f007 ffc9 	bl	8009384 <netconn_write_partly>
  netconn_write(conn, PAGE_BODY, strlen(PAGE_BODY), NETCONN_COPY);
 80013f2:	f107 0318 	add.w	r3, r7, #24
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7fe ff7c 	bl	80002f4 <strlen>
 80013fc:	4602      	mov	r2, r0
 80013fe:	f107 0118 	add.w	r1, r7, #24
 8001402:	1d38      	adds	r0, r7, #4
 8001404:	2300      	movs	r3, #0
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	2301      	movs	r3, #1
 800140a:	6800      	ldr	r0, [r0, #0]
 800140c:	f007 ffba 	bl	8009384 <netconn_write_partly>
}
 8001410:	bf00      	nop
 8001412:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8001416:	46bd      	mov	sp, r7
 8001418:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800141a:	bf00      	nop
 800141c:	240000d8 	.word	0x240000d8
 8001420:	08017da0 	.word	0x08017da0
 8001424:	08017da4 	.word	0x08017da4
 8001428:	08017dd8 	.word	0x08017dd8
 800142c:	08017e10 	.word	0x08017e10
 8001430:	08017e48 	.word	0x08017e48
 8001434:	080175d0 	.word	0x080175d0

08001438 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
  /* Configure the MPU attributes as Device memory for ETH DMA descriptors */
  MPU_Config();
 800143e:	f000 f905 	bl	800164c <MPU_Config>
  
  /* Enable the CPU Cache */
  CPU_CACHE_Enable();
 8001442:	f000 f947 	bl	80016d4 <CPU_CACHE_Enable>
  /* STM32H7xx HAL library initialization:
       - Configure the TIM6 to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Low Level Initialization
     */
  HAL_Init();  
 8001446:	f000 fd03 	bl	8001e50 <HAL_Init>
  
  /* Configure the system clock to 400 MHz */
  SystemClock_Config(); 
 800144a:	f000 f871 	bl	8001530 <SystemClock_Config>
  
  /* Configure the LCD ...*/
  MX_GPIO_Init();
 800144e:	f7ff fc13 	bl	8000c78 <MX_GPIO_Init>
  BSP_Config();
 8001452:	f000 f821 	bl	8001498 <BSP_Config>
  
  /* Init thread */
  osThreadDef(Start, StartThread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 4);
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <main+0x3c>)
 8001458:	1d3c      	adds	r4, r7, #4
 800145a:	461d      	mov	r5, r3
 800145c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001460:	682b      	ldr	r3, [r5, #0]
 8001462:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(Start), NULL);
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f006 fcc2 	bl	8007df2 <osThreadCreate>
  
  /* Start scheduler */
  osKernelStart();
 800146e:	f006 fca9 	bl	8007dc4 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */
  for( ;; );
 8001472:	e7fe      	b.n	8001472 <main+0x3a>
 8001474:	08017e94 	.word	0x08017e94

08001478 <StartThread>:
  * @brief  Start Thread 
  * @param  argument not used
  * @retval None
  */
static void StartThread(void const * argument)
{   
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Create tcp_ip stack thread */
  tcpip_init(NULL, NULL);
 8001480:	2100      	movs	r1, #0
 8001482:	2000      	movs	r0, #0
 8001484:	f009 ff66 	bl	800b354 <tcpip_init>
  
  /* Initialize the LwIP stack */
  Netif_Config();
 8001488:	f000 f810 	bl	80014ac <Netif_Config>

  /* Initialize webserver demo */
  http_server_netconn_init();
 800148c:	f7ff fec8 	bl	8001220 <http_server_netconn_init>
  
  for( ;; )
  {
    /* Delete the Init Thread */ 
    osThreadTerminate(NULL);
 8001490:	2000      	movs	r0, #0
 8001492:	f006 fcd5 	bl	8007e40 <osThreadTerminate>
 8001496:	e7fb      	b.n	8001490 <StartThread+0x18>

08001498 <BSP_Config>:
  * @brief  BSP Configuration 
  * @param  None
  * @retval None
  */
static void BSP_Config(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED2);
 800149c:	2001      	movs	r0, #1
 800149e:	f000 fb93 	bl	8001bc8 <BSP_LED_Init>
  BSP_LED_Init(LED3);
 80014a2:	2002      	movs	r0, #2
 80014a4:	f000 fb90 	bl	8001bc8 <BSP_LED_Init>
}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}

080014ac <Netif_Config>:
  * @brief  Initializes the lwIP stack
  * @param  None
  * @retval None
  */
static void Netif_Config(void)
{
 80014ac:	b5b0      	push	{r4, r5, r7, lr}
 80014ae:	b08c      	sub	sp, #48	; 0x30
 80014b0:	af04      	add	r7, sp, #16
#if LWIP_DHCP
  ip_addr_set_zero_ip4(&ipaddr);
  ip_addr_set_zero_ip4(&netmask);
  ip_addr_set_zero_ip4(&gw);
#else
  IP_ADDR4(&ipaddr,IP_ADDR0,IP_ADDR1,IP_ADDR2,IP_ADDR3);
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <Netif_Config+0x68>)
 80014b4:	61fb      	str	r3, [r7, #28]
  IP_ADDR4(&netmask,NETMASK_ADDR0,NETMASK_ADDR1,NETMASK_ADDR2,NETMASK_ADDR3);
 80014b6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80014ba:	61bb      	str	r3, [r7, #24]
  IP_ADDR4(&gw,GW_ADDR0,GW_ADDR1,GW_ADDR2,GW_ADDR3);
 80014bc:	4b16      	ldr	r3, [pc, #88]	; (8001518 <Netif_Config+0x6c>)
 80014be:	617b      	str	r3, [r7, #20]
#endif /* LWIP_DHCP */
  
  /* add the network interface */    
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	f107 0218 	add.w	r2, r7, #24
 80014c8:	f107 011c 	add.w	r1, r7, #28
 80014cc:	4813      	ldr	r0, [pc, #76]	; (800151c <Netif_Config+0x70>)
 80014ce:	9002      	str	r0, [sp, #8]
 80014d0:	4813      	ldr	r0, [pc, #76]	; (8001520 <Netif_Config+0x74>)
 80014d2:	9001      	str	r0, [sp, #4]
 80014d4:	2000      	movs	r0, #0
 80014d6:	9000      	str	r0, [sp, #0]
 80014d8:	4812      	ldr	r0, [pc, #72]	; (8001524 <Netif_Config+0x78>)
 80014da:	f00c ff75 	bl	800e3c8 <netif_add>
  
  /*  Registers the default network interface. */
  netif_set_default(&gnetif);
 80014de:	4811      	ldr	r0, [pc, #68]	; (8001524 <Netif_Config+0x78>)
 80014e0:	f00d f924 	bl	800e72c <netif_set_default>
  
  ethernet_link_status_updated(&gnetif); 
 80014e4:	480f      	ldr	r0, [pc, #60]	; (8001524 <Netif_Config+0x78>)
 80014e6:	f7fe ff8c 	bl	8000402 <ethernet_link_status_updated>
  
#if LWIP_NETIF_LINK_CALLBACK 
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80014ea:	490f      	ldr	r1, [pc, #60]	; (8001528 <Netif_Config+0x7c>)
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <Netif_Config+0x78>)
 80014ee:	f00d fa2f 	bl	800e950 <netif_set_link_callback>
  
  osThreadDef(EthLink, ethernet_link_thread, osPriorityNormal, 0, configMINIMAL_STACK_SIZE *2);
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <Netif_Config+0x80>)
 80014f4:	463c      	mov	r4, r7
 80014f6:	461d      	mov	r5, r3
 80014f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fc:	682b      	ldr	r3, [r5, #0]
 80014fe:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthLink), &gnetif);
 8001500:	463b      	mov	r3, r7
 8001502:	4908      	ldr	r1, [pc, #32]	; (8001524 <Netif_Config+0x78>)
 8001504:	4618      	mov	r0, r3
 8001506:	f006 fc74 	bl	8007df2 <osThreadCreate>
#if LWIP_DHCP
  /* Start DHCPClient */
  osThreadDef(DHCP, DHCP_Thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
  osThreadCreate (osThread(DHCP), &gnetif);
#endif 
}
 800150a:	bf00      	nop
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bdb0      	pop	{r4, r5, r7, pc}
 8001512:	bf00      	nop
 8001514:	0a47fea9 	.word	0x0a47fea9
 8001518:	0100fea9 	.word	0x0100fea9
 800151c:	0800b2e5 	.word	0x0800b2e5
 8001520:	080008c9 	.word	0x080008c9
 8001524:	240069ac 	.word	0x240069ac
 8001528:	08000403 	.word	0x08000403
 800152c:	08017ea8 	.word	0x08017ea8

08001530 <SystemClock_Config>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b09e      	sub	sp, #120	; 0x78
 8001534:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  HAL_StatusTypeDef ret = HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  
  /*!< Supply configuration update enable */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800153c:	2002      	movs	r0, #2
 800153e:	f002 fef5 	bl	800432c <HAL_PWREx_ConfigSupply>

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <SystemClock_Config+0x110>)
 8001548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154a:	4a3d      	ldr	r2, [pc, #244]	; (8001640 <SystemClock_Config+0x110>)
 800154c:	f023 0301 	bic.w	r3, r3, #1
 8001550:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <SystemClock_Config+0x110>)
 8001554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	4b39      	ldr	r3, [pc, #228]	; (8001644 <SystemClock_Config+0x114>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a38      	ldr	r2, [pc, #224]	; (8001644 <SystemClock_Config+0x114>)
 8001562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <SystemClock_Config+0x114>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001574:	bf00      	nop
 8001576:	4b33      	ldr	r3, [pc, #204]	; (8001644 <SystemClock_Config+0x114>)
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800157e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001582:	d1f8      	bne.n	8001576 <SystemClock_Config+0x46>
  
  /* Enable D2 domain SRAM3 Clock (0x30040000 AXI)*/
  __HAL_RCC_D2SRAM3_CLK_ENABLE();
 8001584:	4b30      	ldr	r3, [pc, #192]	; (8001648 <SystemClock_Config+0x118>)
 8001586:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800158a:	4a2f      	ldr	r2, [pc, #188]	; (8001648 <SystemClock_Config+0x118>)
 800158c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001590:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <SystemClock_Config+0x118>)
 8001596:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800159a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a2:	2301      	movs	r3, #1
 80015a4:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015aa:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80015b0:	2300      	movs	r3, #0
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b4:	2302      	movs	r3, #2
 80015b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b8:	2302      	movs	r3, #2
 80015ba:	633b      	str	r3, [r7, #48]	; 0x30

  RCC_OscInitStruct.PLL.PLLM = 4;
 80015bc:	2304      	movs	r3, #4
 80015be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 400;
 80015c0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015ca:	2302      	movs	r3, #2
 80015cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015d2:	2304      	movs	r3, #4
 80015d4:	643b      	str	r3, [r7, #64]	; 0x40

  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 80015da:	2304      	movs	r3, #4
 80015dc:	64bb      	str	r3, [r7, #72]	; 0x48
  ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4618      	mov	r0, r3
 80015e4:	f002 fedc 	bl	80043a0 <HAL_RCC_OscConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 80015ee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d000      	beq.n	80015f8 <SystemClock_Config+0xc8>
  {
    while(1);
 80015f6:	e7fe      	b.n	80015f6 <SystemClock_Config+0xc6>
  }
  
  /* Select PLL as system clock source and configure  bus clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 | \
 80015f8:	233f      	movs	r3, #63	; 0x3f
 80015fa:	657b      	str	r3, [r7, #84]	; 0x54
                                 RCC_CLOCKTYPE_PCLK2  | RCC_CLOCKTYPE_D3PCLK1);

  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fc:	2303      	movs	r3, #3
 80015fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001604:	2308      	movs	r3, #8
 8001606:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;  
 8001608:	2340      	movs	r3, #64	; 0x40
 800160a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2; 
 800160c:	2340      	movs	r3, #64	; 0x40
 800160e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2; 
 8001610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001614:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2; 
 8001616:	2340      	movs	r3, #64	; 0x40
 8001618:	673b      	str	r3, [r7, #112]	; 0x70
  ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 800161a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800161e:	2104      	movs	r1, #4
 8001620:	4618      	mov	r0, r3
 8001622:	f003 facd 	bl	8004bc0 <HAL_RCC_ClockConfig>
 8001626:	4603      	mov	r3, r0
 8001628:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  if(ret != HAL_OK)
 800162c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001630:	2b00      	cmp	r3, #0
 8001632:	d000      	beq.n	8001636 <SystemClock_Config+0x106>
  {
    while(1);
 8001634:	e7fe      	b.n	8001634 <SystemClock_Config+0x104>
  }
}
 8001636:	bf00      	nop
 8001638:	3778      	adds	r7, #120	; 0x78
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	58000400 	.word	0x58000400
 8001644:	58024800 	.word	0x58024800
 8001648:	58024400 	.word	0x58024400

0800164c <MPU_Config>:
  * @brief  Configure the MPU attributes 
  * @param  None
  * @retval None
  */
static void MPU_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct;
  
  /* Disable the MPU */
  HAL_MPU_Disable();
 8001652:	f000 fd61 	bl	8002118 <HAL_MPU_Disable>

  /* Configure the MPU attributes as Device not cacheable 
     for ETH DMA descriptors */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001656:	2301      	movs	r3, #1
 8001658:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <MPU_Config+0x80>)
 800165c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256B;
 800165e:	2307      	movs	r3, #7
 8001660:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001662:	2303      	movs	r3, #3
 8001664:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8001666:	2301      	movs	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001672:	2300      	movs	r3, #0
 8001674:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001676:	2300      	movs	r3, #0
 8001678:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 800167a:	2300      	movs	r3, #0
 800167c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001682:	463b      	mov	r3, r7
 8001684:	4618      	mov	r0, r3
 8001686:	f000 fd7f 	bl	8002188 <HAL_MPU_ConfigRegion>
  
  /* Configure the MPU attributes as Normal Non Cacheable
     for LwIP RAM heap which contains the Tx buffers */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.BaseAddress = 0x30044000;
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <MPU_Config+0x84>)
 8001690:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8001692:	230d      	movs	r3, #13
 8001694:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001696:	2303      	movs	r3, #3
 8001698:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	73fb      	strb	r3, [r7, #15]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80016aa:	2301      	movs	r3, #1
 80016ac:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.SubRegionDisable = 0x00;
 80016ae:	2300      	movs	r3, #0
 80016b0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	733b      	strb	r3, [r7, #12]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80016b6:	463b      	mov	r3, r7
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 fd65 	bl	8002188 <HAL_MPU_ConfigRegion>

  /* Enable the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80016be:	2004      	movs	r0, #4
 80016c0:	f000 fd42 	bl	8002148 <HAL_MPU_Enable>
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	30040000 	.word	0x30040000
 80016d0:	30044000 	.word	0x30044000

080016d4 <CPU_CACHE_Enable>:
  * @brief  CPU L1-Cache enable.
  * @param  None
  * @retval None
  */
static void CPU_CACHE_Enable(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80016da:	4b34      	ldr	r3, [pc, #208]	; (80017ac <CPU_CACHE_Enable+0xd8>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d11b      	bne.n	800171e <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80016e6:	f3bf 8f4f 	dsb	sy
}
 80016ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016ec:	f3bf 8f6f 	isb	sy
}
 80016f0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80016f2:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <CPU_CACHE_Enable+0xd8>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80016fa:	f3bf 8f4f 	dsb	sy
}
 80016fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001700:	f3bf 8f6f 	isb	sy
}
 8001704:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001706:	4b29      	ldr	r3, [pc, #164]	; (80017ac <CPU_CACHE_Enable+0xd8>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	4a28      	ldr	r2, [pc, #160]	; (80017ac <CPU_CACHE_Enable+0xd8>)
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001712:	f3bf 8f4f 	dsb	sy
}
 8001716:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001718:	f3bf 8f6f 	isb	sy
}
 800171c:	e000      	b.n	8001720 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800171e:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001720:	4b22      	ldr	r3, [pc, #136]	; (80017ac <CPU_CACHE_Enable+0xd8>)
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d138      	bne.n	800179e <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <CPU_CACHE_Enable+0xd8>)
 800172e:	2200      	movs	r2, #0
 8001730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001734:	f3bf 8f4f 	dsb	sy
}
 8001738:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <CPU_CACHE_Enable+0xd8>)
 800173c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001740:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	0b5b      	lsrs	r3, r3, #13
 8001746:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800174a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001754:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800175e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001764:	4911      	ldr	r1, [pc, #68]	; (80017ac <CPU_CACHE_Enable+0xd8>)
 8001766:	4313      	orrs	r3, r2
 8001768:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways-- != 0U);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ef      	bne.n	8001756 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1e5a      	subs	r2, r3, #1
 800177a:	60ba      	str	r2, [r7, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e5      	bne.n	800174c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8001780:	f3bf 8f4f 	dsb	sy
}
 8001784:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <CPU_CACHE_Enable+0xd8>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <CPU_CACHE_Enable+0xd8>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001792:	f3bf 8f4f 	dsb	sy
}
 8001796:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001798:	f3bf 8f6f 	isb	sy
}
 800179c:	e000      	b.n	80017a0 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800179e:	bf00      	nop
  /* Enable I-Cache */
  SCB_EnableICache();

  /* Enable D-Cache */
  SCB_EnableDCache();
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b090      	sub	sp, #64	; 0x40
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b0f      	cmp	r3, #15
 80017bc:	d827      	bhi.n	800180e <HAL_InitTick+0x5e>
  {
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80017be:	2200      	movs	r2, #0
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	2036      	movs	r0, #54	; 0x36
 80017c4:	f000 fc80 	bl	80020c8 <HAL_NVIC_SetPriority>
    
    /* Enable the TIM6 global Interrupt */
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017c8:	2036      	movs	r0, #54	; 0x36
 80017ca:	f000 fc97 	bl	80020fc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80017ce:	4a29      	ldr	r2, [pc, #164]	; (8001874 <HAL_InitTick+0xc4>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017d4:	4b28      	ldr	r3, [pc, #160]	; (8001878 <HAL_InitTick+0xc8>)
 80017d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017da:	4a27      	ldr	r2, [pc, #156]	; (8001878 <HAL_InitTick+0xc8>)
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_InitTick+0xc8>)
 80017e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80017ea:	f003 0310 	and.w	r3, r3, #16
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017f2:	f107 0210 	add.w	r2, r7, #16
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f003 fd55 	bl	80052ac <HAL_RCC_GetClockConfig>
  
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	63bb      	str	r3, [r7, #56]	; 0x38
  
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1) 
 8001806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001808:	2b00      	cmp	r3, #0
 800180a:	d106      	bne.n	800181a <HAL_InitTick+0x6a>
 800180c:	e001      	b.n	8001812 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e02b      	b.n	800186a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001812:	f003 fd35 	bl	8005280 <HAL_RCC_GetPCLK1Freq>
 8001816:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001818:	e004      	b.n	8001824 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800181a:	f003 fd31 	bl	8005280 <HAL_RCC_GetPCLK1Freq>
 800181e:	4603      	mov	r3, r0
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001824:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001826:	4a15      	ldr	r2, [pc, #84]	; (800187c <HAL_InitTick+0xcc>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	0c9b      	lsrs	r3, r3, #18
 800182e:	3b01      	subs	r3, #1
 8001830:	637b      	str	r3, [r7, #52]	; 0x34
  
  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8001832:	4b13      	ldr	r3, [pc, #76]	; (8001880 <HAL_InitTick+0xd0>)
 8001834:	4a13      	ldr	r2, [pc, #76]	; (8001884 <HAL_InitTick+0xd4>)
 8001836:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_InitTick+0xd0>)
 800183a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800183e:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8001840:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <HAL_InitTick+0xd0>)
 8001842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001844:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_InitTick+0xd0>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <HAL_InitTick+0xd0>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&TimHandle) == HAL_OK)
 8001852:	480b      	ldr	r0, [pc, #44]	; (8001880 <HAL_InitTick+0xd0>)
 8001854:	f003 fd6c 	bl	8005330 <HAL_TIM_Base_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d104      	bne.n	8001868 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&TimHandle);
 800185e:	4808      	ldr	r0, [pc, #32]	; (8001880 <HAL_InitTick+0xd0>)
 8001860:	f003 fdc8 	bl	80053f4 <HAL_TIM_Base_Start_IT>
 8001864:	4603      	mov	r3, r0
 8001866:	e000      	b.n	800186a <HAL_InitTick+0xba>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
}
 800186a:	4618      	mov	r0, r3
 800186c:	3740      	adds	r7, #64	; 0x40
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	24000038 	.word	0x24000038
 8001878:	58024400 	.word	0x58024400
 800187c:	431bde83 	.word	0x431bde83
 8001880:	240000dc 	.word	0x240000dc
 8001884:	40001000 	.word	0x40001000

08001888 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8001890:	f000 fb22 	bl	8001ed8 <HAL_IncTick>
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <TIM6_DAC_IRQHandler+0x10>)
 80018a2:	f003 fe17 	bl	80054d4 <HAL_TIM_IRQHandler>
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	240000dc 	.word	0x240000dc

080018b0 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80018c2:	e7fe      	b.n	80018c2 <HardFault_Handler+0x4>

080018c4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80018c8:	e7fe      	b.n	80018c8 <MemManage_Handler+0x4>

080018ca <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <BusFault_Handler+0x4>

080018d0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <UsageFault_Handler+0x4>

080018d6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  osSystickHandler();
 80018e8:	f006 fcdc 	bl	80082a4 <osSystickHandler>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <ETH_IRQHandler>:
  * @brief  This function handles Ethernet interrupt request.
  * @param  None
  * @retval None
  */
void ETH_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  HAL_ETH_IRQHandler(&EthHandle);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <ETH_IRQHandler+0x10>)
 80018f6:	f001 f965 	bl	8002bc4 <HAL_ETH_IRQHandler>
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	24006804 	.word	0x24006804

08001904 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d00b      	beq.n	800192c <LAN8742_RegisterBusIO+0x28>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d007      	beq.n	800192c <LAN8742_RegisterBusIO+0x28>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <LAN8742_RegisterBusIO+0x28>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800192c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001930:	e014      	b.n	800195c <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	691a      	ldr	r2, [r3, #16]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	2300      	movs	r3, #0
 8001976:	60bb      	str	r3, [r7, #8]
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d17c      	bne.n	8001a82 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d002      	beq.n	8001996 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2220      	movs	r2, #32
 800199a:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e01c      	b.n	80019dc <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f107 0208 	add.w	r2, r7, #8
 80019aa:	2112      	movs	r1, #18
 80019ac:	6978      	ldr	r0, [r7, #20]
 80019ae:	4798      	blx	r3
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	da03      	bge.n	80019be <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80019b6:	f06f 0304 	mvn.w	r3, #4
 80019ba:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80019bc:	e00b      	b.n	80019d6 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d105      	bne.n	80019d6 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
         break;
 80019d4:	e005      	b.n	80019e2 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2b1f      	cmp	r3, #31
 80019e0:	d9df      	bls.n	80019a2 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b1f      	cmp	r3, #31
 80019e8:	d902      	bls.n	80019f0 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80019ea:	f06f 0302 	mvn.w	r3, #2
 80019ee:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d145      	bne.n	8001a82 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	687a      	ldr	r2, [r7, #4]
 80019fc:	6810      	ldr	r0, [r2, #0]
 80019fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a02:	2100      	movs	r1, #0
 8001a04:	4798      	blx	r3
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db37      	blt.n	8001a7c <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	6810      	ldr	r0, [r2, #0]
 8001a14:	f107 0208 	add.w	r2, r7, #8
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4798      	blx	r3
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	db28      	blt.n	8001a74 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	4798      	blx	r3
 8001a28:	4603      	mov	r3, r0
 8001a2a:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001a2c:	e01c      	b.n	8001a68 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	4798      	blx	r3
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a40:	d80e      	bhi.n	8001a60 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	6810      	ldr	r0, [r2, #0]
 8001a4a:	f107 0208 	add.w	r2, r7, #8
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4798      	blx	r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	da07      	bge.n	8001a68 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8001a58:	f06f 0304 	mvn.w	r3, #4
 8001a5c:	613b      	str	r3, [r7, #16]
                 break;
 8001a5e:	e010      	b.n	8001a82 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8001a60:	f06f 0301 	mvn.w	r3, #1
 8001a64:	613b      	str	r3, [r7, #16]
               break;
 8001a66:	e00c      	b.n	8001a82 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1dd      	bne.n	8001a2e <LAN8742_Init+0xc6>
 8001a72:	e006      	b.n	8001a82 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001a74:	f06f 0304 	mvn.w	r3, #4
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	e002      	b.n	8001a82 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8001a7c:	f06f 0303 	mvn.w	r3, #3
 8001a80:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d112      	bne.n	8001aae <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	4798      	blx	r3
 8001a8e:	4603      	mov	r3, r0
 8001a90:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001a92:	bf00      	nop
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4798      	blx	r3
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001aa6:	d9f5      	bls.n	8001a94 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001aae:	693b      	ldr	r3, [r7, #16]
 }
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	6810      	ldr	r0, [r2, #0]
 8001acc:	f107 020c 	add.w	r2, r7, #12
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4798      	blx	r3
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	da02      	bge.n	8001ae0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001ada:	f06f 0304 	mvn.w	r3, #4
 8001ade:	e06e      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	695b      	ldr	r3, [r3, #20]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6810      	ldr	r0, [r2, #0]
 8001ae8:	f107 020c 	add.w	r2, r7, #12
 8001aec:	2101      	movs	r1, #1
 8001aee:	4798      	blx	r3
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	da02      	bge.n	8001afc <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001af6:	f06f 0304 	mvn.w	r3, #4
 8001afa:	e060      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001b06:	2301      	movs	r3, #1
 8001b08:	e059      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6810      	ldr	r0, [r2, #0]
 8001b12:	f107 020c 	add.w	r2, r7, #12
 8001b16:	2100      	movs	r1, #0
 8001b18:	4798      	blx	r3
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	da02      	bge.n	8001b26 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001b20:	f06f 0304 	mvn.w	r3, #4
 8001b24:	e04b      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d11b      	bne.n	8001b68 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d006      	beq.n	8001b48 <LAN8742_GetLinkState+0x90>
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b44:	2302      	movs	r3, #2
 8001b46:	e03a      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e033      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001b60:	2304      	movs	r3, #4
 8001b62:	e02c      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001b64:	2305      	movs	r3, #5
 8001b66:	e02a      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6810      	ldr	r0, [r2, #0]
 8001b70:	f107 020c 	add.w	r2, r7, #12
 8001b74:	211f      	movs	r1, #31
 8001b76:	4798      	blx	r3
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	da02      	bge.n	8001b84 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001b7e:	f06f 0304 	mvn.w	r3, #4
 8001b82:	e01c      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001b8e:	2306      	movs	r3, #6
 8001b90:	e015      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	f003 031c 	and.w	r3, r3, #28
 8001b98:	2b18      	cmp	r3, #24
 8001b9a:	d101      	bne.n	8001ba0 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e00e      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 031c 	and.w	r3, r3, #28
 8001ba6:	2b08      	cmp	r3, #8
 8001ba8:	d101      	bne.n	8001bae <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e007      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	f003 031c 	and.w	r3, r3, #28
 8001bb4:	2b14      	cmp	r3, #20
 8001bb6:	d101      	bne.n	8001bbc <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001bb8:	2304      	movs	r3, #4
 8001bba:	e000      	b.n	8001bbe <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001bbc:	2305      	movs	r3, #5
    }				
  }
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
	...

08001bc8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08c      	sub	sp, #48	; 0x30
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001bd6:	79fb      	ldrb	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d009      	beq.n	8001bf0 <BSP_LED_Init+0x28>
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d006      	beq.n	8001bf0 <BSP_LED_Init+0x28>
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d003      	beq.n	8001bf0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001be8:	f06f 0301 	mvn.w	r3, #1
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bee:	e055      	b.n	8001c9c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001bf0:	79fb      	ldrb	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d10f      	bne.n	8001c16 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001bf6:	4b2c      	ldr	r3, [pc, #176]	; (8001ca8 <BSP_LED_Init+0xe0>)
 8001bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ca8 <BSP_LED_Init+0xe0>)
 8001bfe:	f043 0302 	orr.w	r3, r3, #2
 8001c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c06:	4b28      	ldr	r3, [pc, #160]	; (8001ca8 <BSP_LED_Init+0xe0>)
 8001c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c0c:	f003 0302 	and.w	r3, r3, #2
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	e021      	b.n	8001c5a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001c16:	79fb      	ldrb	r3, [r7, #7]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d10f      	bne.n	8001c3c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001c1c:	4b22      	ldr	r3, [pc, #136]	; (8001ca8 <BSP_LED_Init+0xe0>)
 8001c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c22:	4a21      	ldr	r2, [pc, #132]	; (8001ca8 <BSP_LED_Init+0xe0>)
 8001c24:	f043 0310 	orr.w	r3, r3, #16
 8001c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ca8 <BSP_LED_Init+0xe0>)
 8001c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c32:	f003 0310 	and.w	r3, r3, #16
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	e00e      	b.n	8001c5a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001c3c:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <BSP_LED_Init+0xe0>)
 8001c3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c42:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <BSP_LED_Init+0xe0>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4c:	4b16      	ldr	r3, [pc, #88]	; (8001ca8 <BSP_LED_Init+0xe0>)
 8001c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	4a13      	ldr	r2, [pc, #76]	; (8001cac <BSP_LED_Init+0xe4>)
 8001c5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c62:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	4a0f      	ldr	r2, [pc, #60]	; (8001cb0 <BSP_LED_Init+0xe8>)
 8001c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c78:	f107 0218 	add.w	r2, r7, #24
 8001c7c:	4611      	mov	r1, r2
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 f972 	bl	8003f68 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <BSP_LED_Init+0xe8>)
 8001c88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	4a07      	ldr	r2, [pc, #28]	; (8001cac <BSP_LED_Init+0xe4>)
 8001c90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c94:	2200      	movs	r2, #0
 8001c96:	4619      	mov	r1, r3
 8001c98:	f002 fb2e 	bl	80042f8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3730      	adds	r7, #48	; 0x30
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	08017ebc 	.word	0x08017ebc
 8001cb0:	24000018 	.word	0x24000018

08001cb4 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d009      	beq.n	8001cdc <BSP_LED_On+0x28>
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d006      	beq.n	8001cdc <BSP_LED_On+0x28>
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d003      	beq.n	8001cdc <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001cd4:	f06f 0301 	mvn.w	r3, #1
 8001cd8:	60fb      	str	r3, [r7, #12]
 8001cda:	e00b      	b.n	8001cf4 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	4a08      	ldr	r2, [pc, #32]	; (8001d00 <BSP_LED_On+0x4c>)
 8001ce0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <BSP_LED_On+0x50>)
 8001ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4619      	mov	r1, r3
 8001cf0:	f002 fb02 	bl	80042f8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	24000018 	.word	0x24000018
 8001d04:	08017ebc 	.word	0x08017ebc

08001d08 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <BSP_LED_Off+0x28>
 8001d1c:	79fb      	ldrb	r3, [r7, #7]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d006      	beq.n	8001d30 <BSP_LED_Off+0x28>
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d003      	beq.n	8001d30 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001d28:	f06f 0301 	mvn.w	r3, #1
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	e00b      	b.n	8001d48 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	4a08      	ldr	r2, [pc, #32]	; (8001d54 <BSP_LED_Off+0x4c>)
 8001d34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <BSP_LED_Off+0x50>)
 8001d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d40:	2200      	movs	r2, #0
 8001d42:	4619      	mov	r1, r3
 8001d44:	f002 fad8 	bl	80042f8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001d48:	68fb      	ldr	r3, [r7, #12]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	24000018 	.word	0x24000018
 8001d58:	08017ebc 	.word	0x08017ebc

08001d5c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001d76:	2000      	movs	r0, #0
 8001d78:	f7ff fff0 	bl	8001d5c <BSP_PB_Callback>
}
 8001d7c:	bf00      	nop
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <SystemInit>:
  *         Initialize the FPU setting, vector table location.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */
    
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d84:	4b2b      	ldr	r3, [pc, #172]	; (8001e34 <SystemInit+0xb4>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	4a2a      	ldr	r2, [pc, #168]	; (8001e34 <SystemInit+0xb4>)
 8001d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001d94:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <SystemInit+0xb8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a27      	ldr	r2, [pc, #156]	; (8001e38 <SystemInit+0xb8>)
 8001d9a:	f043 0301 	orr.w	r3, r3, #1
 8001d9e:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001da0:	4b25      	ldr	r3, [pc, #148]	; (8001e38 <SystemInit+0xb8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001da6:	4b24      	ldr	r3, [pc, #144]	; (8001e38 <SystemInit+0xb8>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4923      	ldr	r1, [pc, #140]	; (8001e38 <SystemInit+0xb8>)
 8001dac:	4b23      	ldr	r3, [pc, #140]	; (8001e3c <SystemInit+0xbc>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001db2:	4b21      	ldr	r3, [pc, #132]	; (8001e38 <SystemInit+0xb8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001db8:	4b1f      	ldr	r3, [pc, #124]	; (8001e38 <SystemInit+0xb8>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001dbe:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <SystemInit+0xb8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	; (8001e38 <SystemInit+0xb8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001dca:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <SystemInit+0xb8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001dd0:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <SystemInit+0xb8>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <SystemInit+0xb8>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001ddc:	4b16      	ldr	r3, [pc, #88]	; (8001e38 <SystemInit+0xb8>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <SystemInit+0xb8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <SystemInit+0xb8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <SystemInit+0xb8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <SystemInit+0xb8>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <SystemInit+0xb8>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e00:	4b0d      	ldr	r3, [pc, #52]	; (8001e38 <SystemInit+0xb8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e06:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <SystemInit+0xc0>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <SystemInit+0xc4>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e12:	d202      	bcs.n	8001e1a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <SystemInit+0xc8>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <SystemInit+0xcc>)
 8001e1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e20:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SystemInit+0xb4>)
 8001e24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e28:	609a      	str	r2, [r3, #8]
#endif  


}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	e000ed00 	.word	0xe000ed00
 8001e38:	58024400 	.word	0x58024400
 8001e3c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e40:	5c001000 	.word	0x5c001000
 8001e44:	ffff0000 	.word	0xffff0000
 8001e48:	51008108 	.word	0x51008108
 8001e4c:	52004000 	.word	0x52004000

08001e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e56:	2003      	movs	r0, #3
 8001e58:	f000 f92b 	bl	80020b2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e5c:	f003 f866 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <HAL_Init+0x68>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	4913      	ldr	r1, [pc, #76]	; (8001ebc <HAL_Init+0x6c>)
 8001e6e:	5ccb      	ldrb	r3, [r1, r3]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
 8001e78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_Init+0x68>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <HAL_Init+0x6c>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e90:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <HAL_Init+0x70>)
 8001e92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e94:	4a0b      	ldr	r2, [pc, #44]	; (8001ec4 <HAL_Init+0x74>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e9a:	200f      	movs	r0, #15
 8001e9c:	f7ff fc88 	bl	80017b0 <HAL_InitTick>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e002      	b.n	8001eb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001eaa:	f000 f80d 	bl	8001ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	08017ed0 	.word	0x08017ed0
 8001ec0:	24000034 	.word	0x24000034
 8001ec4:	24000030 	.word	0x24000030

08001ec8 <HAL_MspInit>:
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <HAL_IncTick+0x20>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_IncTick+0x24>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <HAL_IncTick+0x24>)
 8001eea:	6013      	str	r3, [r2, #0]
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	2400003c 	.word	0x2400003c
 8001efc:	240069e0 	.word	0x240069e0

08001f00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  return uwTick;
 8001f04:	4b03      	ldr	r3, [pc, #12]	; (8001f14 <HAL_GetTick+0x14>)
 8001f06:	681b      	ldr	r3, [r3, #0]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	240069e0 	.word	0x240069e0

08001f18 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetREVID+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0c1b      	lsrs	r3, r3, #16
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	5c001000 	.word	0x5c001000

08001f30 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001f40:	4904      	ldr	r1, [pc, #16]	; (8001f54 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	604b      	str	r3, [r1, #4]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr
 8001f54:	58000400 	.word	0x58000400

08001f58 <__NVIC_SetPriorityGrouping>:
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <__NVIC_SetPriorityGrouping+0x40>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f86:	4a04      	ldr	r2, [pc, #16]	; (8001f98 <__NVIC_SetPriorityGrouping+0x40>)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	60d3      	str	r3, [r2, #12]
}
 8001f8c:	bf00      	nop
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00
 8001f9c:	05fa0000 	.word	0x05fa0000

08001fa0 <__NVIC_GetPriorityGrouping>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_EnableIRQ>:
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0b      	blt.n	8001fe6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	88fb      	ldrh	r3, [r7, #6]
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4907      	ldr	r1, [pc, #28]	; (8001ff4 <__NVIC_EnableIRQ+0x38>)
 8001fd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	; (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	; (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	88fb      	ldrh	r3, [r7, #6]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	; 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ff4c 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	4603      	mov	r3, r0
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020d6:	f7ff ff63 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 80020da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	6978      	ldr	r0, [r7, #20]
 80020e2:	f7ff ffb3 	bl	800204c <NVIC_EncodePriority>
 80020e6:	4602      	mov	r2, r0
 80020e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020ec:	4611      	mov	r1, r2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff82 	bl	8001ff8 <__NVIC_SetPriority>
}
 80020f4:	bf00      	nop
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff56 	bl	8001fbc <__NVIC_EnableIRQ>
}
 8002110:	bf00      	nop
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800211c:	f3bf 8f5f 	dmb	sy
}
 8002120:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_MPU_Disable+0x28>)
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	4a06      	ldr	r2, [pc, #24]	; (8002140 <HAL_MPU_Disable+0x28>)
 8002128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800212c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_MPU_Disable+0x2c>)
 8002130:	2200      	movs	r2, #0
 8002132:	605a      	str	r2, [r3, #4]
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	e000ed00 	.word	0xe000ed00
 8002144:	e000ed90 	.word	0xe000ed90

08002148 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002150:	4a0b      	ldr	r2, [pc, #44]	; (8002180 <HAL_MPU_Enable+0x38>)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800215a:	4b0a      	ldr	r3, [pc, #40]	; (8002184 <HAL_MPU_Enable+0x3c>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	4a09      	ldr	r2, [pc, #36]	; (8002184 <HAL_MPU_Enable+0x3c>)
 8002160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002164:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002166:	f3bf 8f4f 	dsb	sy
}
 800216a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800216c:	f3bf 8f6f 	isb	sy
}
 8002170:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	e000ed90 	.word	0xe000ed90
 8002184:	e000ed00 	.word	0xe000ed00

08002188 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	785a      	ldrb	r2, [r3, #1]
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_MPU_ConfigRegion+0x84>)
 8002196:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d029      	beq.n	80021f4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80021a0:	4a1a      	ldr	r2, [pc, #104]	; (800220c <HAL_MPU_ConfigRegion+0x84>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	7b1b      	ldrb	r3, [r3, #12]
 80021ac:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	7adb      	ldrb	r3, [r3, #11]
 80021b2:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021b4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7a9b      	ldrb	r3, [r3, #10]
 80021ba:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80021bc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	7b5b      	ldrb	r3, [r3, #13]
 80021c2:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80021c4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7b9b      	ldrb	r3, [r3, #14]
 80021ca:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80021cc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	7bdb      	ldrb	r3, [r3, #15]
 80021d2:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80021d4:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	7a5b      	ldrb	r3, [r3, #9]
 80021da:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80021dc:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7a1b      	ldrb	r3, [r3, #8]
 80021e2:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80021e4:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	7812      	ldrb	r2, [r2, #0]
 80021ea:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021ec:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80021ee:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80021f0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80021f2:	e005      	b.n	8002200 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_MPU_ConfigRegion+0x84>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80021fa:	4b04      	ldr	r3, [pc, #16]	; (800220c <HAL_MPU_ConfigRegion+0x84>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	611a      	str	r2, [r3, #16]
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr
 800220c:	e000ed90 	.word	0xe000ed90

08002210 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e0c6      	b.n	80023b0 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f7fe fb92 	bl	8000954 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2223      	movs	r2, #35	; 0x23
 8002234:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	4b60      	ldr	r3, [pc, #384]	; (80023b8 <HAL_ETH_Init+0x1a8>)
 8002238:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800223c:	4a5e      	ldr	r2, [pc, #376]	; (80023b8 <HAL_ETH_Init+0x1a8>)
 800223e:	f043 0302 	orr.w	r3, r3, #2
 8002242:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002246:	4b5c      	ldr	r3, [pc, #368]	; (80023b8 <HAL_ETH_Init+0x1a8>)
 8002248:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	7a1b      	ldrb	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d103      	bne.n	8002264 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800225c:	2000      	movs	r0, #0
 800225e:	f7ff fe67 	bl	8001f30 <HAL_SYSCFG_ETHInterfaceSelect>
 8002262:	e003      	b.n	800226c <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002264:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002268:	f7ff fe62 	bl	8001f30 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0201 	orr.w	r2, r2, #1
 800227e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002282:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002284:	f7ff fe3c 	bl	8001f00 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800228a:	e00f      	b.n	80022ac <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 800228c:	f7ff fe38 	bl	8001f00 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800229a:	d907      	bls.n	80022ac <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2204      	movs	r2, #4
 80022a0:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	22e0      	movs	r2, #224	; 0xe0
 80022a6:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e081      	b.n	80023b0 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1e6      	bne.n	800228c <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f001 fad8 	bl	8003874 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80022c4:	f002 ffac 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a3c      	ldr	r2, [pc, #240]	; (80023bc <HAL_ETH_Init+0x1ac>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	0c9a      	lsrs	r2, r3, #18
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	3a01      	subs	r2, #1
 80022d8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f001 fa2b 	bl	8003738 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80022f8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80022fc:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d007      	beq.n	800231a <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	22e0      	movs	r2, #224	; 0xe0
 8002314:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e04a      	b.n	80023b0 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002322:	4413      	add	r3, r2
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <HAL_ETH_Init+0x1b0>)
 8002328:	4013      	ands	r3, r2
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6952      	ldr	r2, [r2, #20]
 800232e:	0052      	lsls	r2, r2, #1
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	6809      	ldr	r1, [r1, #0]
 8002334:	431a      	orrs	r2, r3
 8002336:	f241 1308 	movw	r3, #4360	; 0x1108
 800233a:	440b      	add	r3, r1
 800233c:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f001 faf0 	bl	8003924 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f001 fb34 	bl	80039b2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	3305      	adds	r3, #5
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	021a      	lsls	r2, r3, #8
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	3304      	adds	r3, #4
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	4619      	mov	r1, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	3303      	adds	r3, #3
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	061a      	lsls	r2, r3, #24
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	3302      	adds	r3, #2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	041b      	lsls	r3, r3, #16
 800237c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	3301      	adds	r3, #1
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002388:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002396:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002398:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2210      	movs	r2, #16
 80023a6:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2210      	movs	r2, #16
 80023ac:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	58024400 	.word	0x58024400
 80023bc:	431bde83 	.word	0x431bde83
 80023c0:	ffff8001 	.word	0xffff8001

080023c4 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b087      	sub	sp, #28
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	3310      	adds	r3, #16
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_ETH_DescAssignMemory+0x28>
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d904      	bls.n	80023f6 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2201      	movs	r2, #1
 80023f0:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e021      	b.n	800243a <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	371c      	adds	r7, #28
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002452:	2b10      	cmp	r3, #16
 8002454:	d174      	bne.n	8002540 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2223      	movs	r2, #35	; 0x23
 800245a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	e00f      	b.n	8002482 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3310      	adds	r3, #16
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3301      	adds	r3, #1
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b03      	cmp	r3, #3
 8002486:	d9ec      	bls.n	8002462 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0202 	orr.w	r2, r2, #2
 800249c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	f241 1304 	movw	r3, #4356	; 0x1104
 80024ca:	4413      	add	r3, r2
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	6811      	ldr	r1, [r2, #0]
 80024d2:	f043 0201 	orr.w	r2, r3, #1
 80024d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80024da:	440b      	add	r3, r1
 80024dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	f241 1308 	movw	r3, #4360	; 0x1108
 80024e6:	4413      	add	r3, r2
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6811      	ldr	r1, [r2, #0]
 80024ee:	f043 0201 	orr.w	r2, r3, #1
 80024f2:	f241 1308 	movw	r3, #4360	; 0x1108
 80024f6:	440b      	add	r3, r1
 80024f8:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 800250c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002510:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	f241 1334 	movw	r3, #4404	; 0x1134
 800251a:	4413      	add	r3, r2
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6811      	ldr	r1, [r2, #0]
 8002522:	f24d 0241 	movw	r2, #53313	; 0xd041
 8002526:	431a      	orrs	r2, r3
 8002528:	f241 1334 	movw	r3, #4404	; 0x1134
 800252c:	440b      	add	r3, r1
 800252e:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2210      	movs	r2, #16
 8002534:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2222      	movs	r2, #34	; 0x22
 800253a:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800253c:	2300      	movs	r3, #0
 800253e:	e000      	b.n	8002542 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
  }
}
 8002542:	4618      	mov	r0, r3
 8002544:	3714      	adds	r7, #20
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
	...

08002550 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800255c:	2b00      	cmp	r3, #0
 800255e:	d067      	beq.n	8002630 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2223      	movs	r2, #35	; 0x23
 8002564:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	f241 1334 	movw	r3, #4404	; 0x1134
 800256e:	4413      	add	r3, r2
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6811      	ldr	r1, [r2, #0]
 8002576:	4a32      	ldr	r2, [pc, #200]	; (8002640 <HAL_ETH_Stop_IT+0xf0>)
 8002578:	401a      	ands	r2, r3
 800257a:	f241 1334 	movw	r3, #4404	; 0x1134
 800257e:	440b      	add	r3, r1
 8002580:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	f241 1304 	movw	r3, #4356	; 0x1104
 800258a:	4413      	add	r3, r2
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6811      	ldr	r1, [r2, #0]
 8002592:	f023 0201 	bic.w	r2, r3, #1
 8002596:	f241 1304 	movw	r3, #4356	; 0x1104
 800259a:	440b      	add	r3, r1
 800259c:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	f241 1308 	movw	r3, #4360	; 0x1108
 80025a6:	4413      	add	r3, r2
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6811      	ldr	r1, [r2, #0]
 80025ae:	f023 0201 	bic.w	r2, r3, #1
 80025b2:	f241 1308 	movw	r3, #4360	; 0x1108
 80025b6:	440b      	add	r3, r1
 80025b8:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0202 	bic.w	r2, r2, #2
 80025ec:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	e00f      	b.n	8002614 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3310      	adds	r3, #16
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	3301      	adds	r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d9ec      	bls.n	80025f4 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2210      	movs	r2, #16
 8002624:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2210      	movs	r2, #16
 800262a:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e000      	b.n	8002632 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
  }
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	ffff2fbe 	.word	0xffff2fbe

08002644 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d107      	bne.n	8002666 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e073      	b.n	800274e <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266a:	2b10      	cmp	r3, #16
 800266c:	d16e      	bne.n	800274c <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800266e:	2200      	movs	r2, #0
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f001 f9fa 	bl	8003a6c <ETH_Prepare_Tx_Descriptors>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002682:	f043 0202 	orr.w	r2, r3, #2
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e05f      	b.n	800274e <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	3206      	adds	r2, #6
 8002696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800269a:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	629a      	str	r2, [r3, #40]	; 0x28
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d904      	bls.n	80026b8 <HAL_ETH_Transmit+0x74>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	1f1a      	subs	r2, r3, #4
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	3106      	adds	r1, #6
 80026c4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80026c8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80026cc:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 80026ce:	f7ff fc17 	bl	8001f00 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80026d4:	e034      	b.n	8002740 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d011      	beq.n	800270c <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ec:	f043 0208 	orr.w	r2, r3, #8
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	22e0      	movs	r2, #224	; 0xe0
 8002706:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e020      	b.n	800274e <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002712:	d015      	beq.n	8002740 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8002714:	f7ff fbf4 	bl	8001f00 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	429a      	cmp	r2, r3
 8002722:	d302      	bcc.n	800272a <HAL_ETH_Transmit+0xe6>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800272e:	f043 0204 	orr.w	r2, r3, #4
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	22e0      	movs	r2, #224	; 0xe0
 800273a:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e006      	b.n	800274e <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	dbc6      	blt.n	80026d6 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e000      	b.n	800274e <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8002756:	b480      	push	{r7}
 8002758:	b089      	sub	sp, #36	; 0x24
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	3344      	adds	r3, #68	; 0x44
 8002762:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	69fa      	ldr	r2, [r7, #28]
 800276e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002772:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	2300      	movs	r3, #0
 800277e:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d06b      	beq.n	8002860 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8002788:	2300      	movs	r3, #0
 800278a:	e0ce      	b.n	800292a <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	3301      	adds	r3, #1
 8002790:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d036      	beq.n	800280c <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	3301      	adds	r3, #1
 80027a2:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	3301      	adds	r3, #1
 80027b2:	61fb      	str	r3, [r7, #28]
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	2b03      	cmp	r3, #3
 80027b8:	d902      	bls.n	80027c0 <HAL_ETH_IsRxDataAvailable+0x6a>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	3b04      	subs	r3, #4
 80027be:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	69fa      	ldr	r2, [r7, #28]
 80027c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027c8:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	db11      	blt.n	80027f6 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00b      	beq.n	80027f6 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2201      	movs	r2, #1
 80027e2:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	3301      	adds	r3, #1
 80027e8:	61fb      	str	r3, [r7, #28]
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	2b03      	cmp	r3, #3
 80027ee:	d902      	bls.n	80027f6 <HAL_ETH_IsRxDataAvailable+0xa0>
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3b04      	subs	r3, #4
 80027f4:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8002808:	2301      	movs	r3, #1
 800280a:	e08e      	b.n	800292a <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d012      	beq.n	800283e <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 800281c:	2301      	movs	r3, #1
 800281e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	3301      	adds	r3, #1
 8002824:	61fb      	str	r3, [r7, #28]
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d902      	bls.n	8002832 <HAL_ETH_IsRxDataAvailable+0xdc>
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	3b04      	subs	r3, #4
 8002830:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	69fa      	ldr	r2, [r7, #28]
 8002836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283a:	61bb      	str	r3, [r7, #24]
 800283c:	e010      	b.n	8002860 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	3301      	adds	r3, #1
 8002842:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	3301      	adds	r3, #1
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	2b03      	cmp	r3, #3
 800284e:	d902      	bls.n	8002856 <HAL_ETH_IsRxDataAvailable+0x100>
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	3b04      	subs	r3, #4
 8002854:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285e:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	2b00      	cmp	r3, #0
 8002866:	db02      	blt.n	800286e <HAL_ETH_IsRxDataAvailable+0x118>
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2b03      	cmp	r3, #3
 800286c:	d98e      	bls.n	800278c <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d056      	beq.n	8002922 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	69fa      	ldr	r2, [r7, #28]
 8002878:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	69fa      	ldr	r2, [r7, #28]
 8002888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800288c:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 800288e:	2300      	movs	r3, #0
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e03b      	b.n	800290c <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	691a      	ldr	r2, [r3, #16]
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028a2:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d009      	beq.n	80028c0 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	695a      	ldr	r2, [r3, #20]
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d20d      	bcs.n	8002906 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	3301      	adds	r3, #1
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d902      	bls.n	80028fc <HAL_ETH_IsRxDataAvailable+0x1a6>
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	3b04      	subs	r3, #4
 80028fa:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002904:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3301      	adds	r3, #1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	429a      	cmp	r2, r3
 8002912:	d3bf      	bcc.n	8002894 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6819      	ldr	r1, [r3, #0]
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	f241 1328 	movw	r3, #4392	; 0x1128
 800291e:	440b      	add	r3, r1
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2200      	movs	r2, #0
 8002926:	619a      	str	r2, [r3, #24]

  return 0;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3724      	adds	r7, #36	; 0x24
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b08a      	sub	sp, #40	; 0x28
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3344      	adds	r3, #68	; 0x44
 8002944:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002958:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d104      	bne.n	800296e <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07d      	b.n	8002a6a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10f      	bne.n	8002996 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff feed 	bl	8002756 <HAL_ETH_IsRxDataAvailable>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e071      	b.n	8002a6a <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002994:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8002996:	2300      	movs	r3, #0
 8002998:	623b      	str	r3, [r7, #32]
 800299a:	e031      	b.n	8002a00 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	461a      	mov	r2, r3
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695a      	ldr	r2, [r3, #20]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00b      	beq.n	80029ce <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	461a      	mov	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695a      	ldr	r2, [r3, #20]
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80029d6:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	3301      	adds	r3, #1
 80029dc:	627b      	str	r3, [r7, #36]	; 0x24
 80029de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e0:	2b03      	cmp	r3, #3
 80029e2:	d902      	bls.n	80029ea <HAL_ETH_GetRxDataBuffer+0xb4>
 80029e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e6:	3b04      	subs	r3, #4
 80029e8:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f2:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	3301      	adds	r3, #1
 80029fe:	623b      	str	r3, [r7, #32]
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	6a3a      	ldr	r2, [r7, #32]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d3c7      	bcc.n	800299c <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d803      	bhi.n	8002a36 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	e018      	b.n	8002a68 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	695b      	ldr	r3, [r3, #20]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d012      	beq.n	8002a64 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	461a      	mov	r2, r3
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	1ad2      	subs	r2, r2, r3
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	e001      	b.n	8002a68 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e000      	b.n	8002a6a <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8002a68:	2300      	movs	r3, #0
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3728      	adds	r7, #40	; 0x28
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3344      	adds	r3, #68	; 0x44
 8002a80:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	695b      	ldr	r3, [r3, #20]
 8002a86:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d107      	bne.n	8002aa0 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff fe60 	bl	8002756 <HAL_ETH_IsRxDataAvailable>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d101      	bne.n	8002aa0 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e017      	b.n	8002ad0 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	699a      	ldr	r2, [r3, #24]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	2b03      	cmp	r3, #3
 8002ab0:	d902      	bls.n	8002ab8 <HAL_ETH_GetRxDataLength+0x46>
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	3b04      	subs	r3, #4
 8002ab6:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac0:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3718      	adds	r7, #24
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b089      	sub	sp, #36	; 0x24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3344      	adds	r3, #68	; 0x44
 8002ae4:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	69fa      	ldr	r2, [r7, #28]
 8002af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af4:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e057      	b.n	8002bb8 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	69db      	ldr	r3, [r3, #28]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d002      	beq.n	8002b16 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	3301      	adds	r3, #1
 8002b14:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	e03b      	b.n	8002b94 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	691a      	ldr	r2, [r3, #16]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b2a:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d009      	beq.n	8002b48 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d20d      	bcs.n	8002b8e <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3301      	adds	r3, #1
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b03      	cmp	r3, #3
 8002b7c:	d902      	bls.n	8002b84 <HAL_ETH_BuildRxDescriptors+0xac>
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	3b04      	subs	r3, #4
 8002b82:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8c:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	3301      	adds	r3, #1
 8002b92:	613b      	str	r3, [r7, #16]
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d3bf      	bcc.n	8002b1c <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6819      	ldr	r1, [r3, #0]
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	f241 1328 	movw	r3, #4392	; 0x1128
 8002ba6:	440b      	add	r3, r1
 8002ba8:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3724      	adds	r7, #36	; 0x24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d113      	bne.n	8002c06 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	f241 1334 	movw	r3, #4404	; 0x1134
 8002be6:	4413      	add	r3, r2
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b40      	cmp	r3, #64	; 0x40
 8002bf0:	d109      	bne.n	8002c06 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7fd ff5c 	bl	8000ab0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002c00:	f248 0240 	movw	r2, #32832	; 0x8040
 8002c04:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d113      	bne.n	8002c40 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	f241 1334 	movw	r3, #4404	; 0x1134
 8002c20:	4413      	add	r3, r2
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d109      	bne.n	8002c40 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f000 f8b7 	bl	8002da0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002c3a:	f248 0201 	movw	r2, #32769	; 0x8001
 8002c3e:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c52:	d149      	bne.n	8002ce8 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	f241 1334 	movw	r3, #4404	; 0x1134
 8002c5c:	4413      	add	r3, r2
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c68:	d13e      	bne.n	8002ce8 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c6e:	f043 0208 	orr.w	r2, r3, #8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c88:	d11b      	bne.n	8002cc2 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	f241 1302 	movw	r3, #4354	; 0x1102
 8002c98:	4013      	ands	r3, r2
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	f241 1334 	movw	r3, #4404	; 0x1134
 8002ca6:	4413      	add	r3, r2
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6811      	ldr	r1, [r2, #0]
 8002cae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cb2:	f241 1334 	movw	r3, #4404	; 0x1134
 8002cb6:	440b      	add	r3, r1
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	22e0      	movs	r2, #224	; 0xe0
 8002cbe:	66da      	str	r2, [r3, #108]	; 0x6c
 8002cc0:	e00f      	b.n	8002ce2 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8002cdc:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8002ce0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f866 	bl	8002db4 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002cf0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8002cf4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002cf8:	d10e      	bne.n	8002d18 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	22e0      	movs	r2, #224	; 0xe0
 8002d0a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f85b 	bl	8002dc8 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d10f      	bne.n	8002d48 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d30:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f84e 	bl	8002ddc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d10f      	bne.n	8002d78 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d60:	f003 020f 	and.w	r2, r3, #15
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f000 f840 	bl	8002df0 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002d78:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_ETH_IRQHandler+0x1d8>)
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d006      	beq.n	8002d92 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002d84:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_ETH_IRQHandler+0x1d8>)
 8002d86:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002d8a:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f839 	bl	8002e04 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	58000080 	.word	0x58000080

08002da0 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e03e      	b.n	8002eb8 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e42:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	055b      	lsls	r3, r3, #21
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	041b      	lsls	r3, r3, #16
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f043 030c 	orr.w	r3, r3, #12
 8002e66:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002e7a:	f7ff f841 	bl	8001f00 <HAL_GetTick>
 8002e7e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002e80:	e009      	b.n	8002e96 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002e82:	f7ff f83d 	bl	8001f00 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e90:	d901      	bls.n	8002e96 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e010      	b.n	8002eb8 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d1ed      	bne.n	8002e82 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	60b9      	str	r1, [r7, #8]
 8002eca:	607a      	str	r2, [r7, #4]
 8002ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e03c      	b.n	8002f5c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002eea:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	055b      	lsls	r3, r3, #21
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	041b      	lsls	r3, r3, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	f023 030c 	bic.w	r3, r3, #12
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_ETH_WritePHYRegister+0xa4>)
 8002f22:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8002f26:	4a0f      	ldr	r2, [pc, #60]	; (8002f64 <HAL_ETH_WritePHYRegister+0xa4>)
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8002f2e:	f7fe ffe7 	bl	8001f00 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002f34:	e009      	b.n	8002f4a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8002f36:	f7fe ffe3 	bl	8001f00 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f44:	d901      	bls.n	8002f4a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e008      	b.n	8002f5c <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1ed      	bne.n	8002f36 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40028000 	.word	0x40028000

08002f68 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e1c3      	b.n	8003304 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 020c 	and.w	r2, r3, #12
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf14      	ite	ne
 8002fde:	2301      	movne	r3, #1
 8002fe0:	2300      	moveq	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800300e:	2b00      	cmp	r3, #0
 8003010:	bf14      	ite	ne
 8003012:	2301      	movne	r3, #1
 8003014:	2300      	moveq	r3, #0
 8003016:	b2db      	uxtb	r3, r3
 8003018:	461a      	mov	r2, r3
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003028:	2b00      	cmp	r3, #0
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	461a      	mov	r2, r3
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf0c      	ite	eq
 800307c:	2301      	moveq	r3, #1
 800307e:	2300      	movne	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	461a      	mov	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003092:	2b00      	cmp	r3, #0
 8003094:	bf0c      	ite	eq
 8003096:	2301      	moveq	r3, #1
 8003098:	2300      	movne	r3, #0
 800309a:	b2db      	uxtb	r3, r3
 800309c:	461a      	mov	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf14      	ite	ne
 80030b0:	2301      	movne	r3, #1
 80030b2:	2300      	moveq	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	bf14      	ite	ne
 80030ca:	2301      	movne	r3, #1
 80030cc:	2300      	moveq	r3, #0
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	bf14      	ite	ne
 80030e4:	2301      	movne	r3, #1
 80030e6:	2300      	moveq	r3, #0
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	461a      	mov	r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	bf14      	ite	ne
 80030fe:	2301      	movne	r3, #1
 8003100:	2300      	moveq	r3, #0
 8003102:	b2db      	uxtb	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	bf14      	ite	ne
 8003126:	2301      	movne	r3, #1
 8003128:	2300      	moveq	r3, #0
 800312a:	b2db      	uxtb	r3, r3
 800312c:	461a      	mov	r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003158:	2b00      	cmp	r3, #0
 800315a:	bf0c      	ite	eq
 800315c:	2301      	moveq	r3, #1
 800315e:	2300      	movne	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003190:	2b00      	cmp	r3, #0
 8003192:	bf14      	ite	ne
 8003194:	2301      	movne	r3, #1
 8003196:	2300      	moveq	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	461a      	mov	r2, r3
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	bf14      	ite	ne
 80031b0:	2301      	movne	r3, #1
 80031b2:	2300      	moveq	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	461a      	mov	r2, r3
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	0e5b      	lsrs	r3, r3, #25
 80031c6:	f003 021f 	and.w	r2, r3, #31
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	bf14      	ite	ne
 80031dc:	2301      	movne	r3, #1
 80031de:	2300      	moveq	r3, #0
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	f003 020f 	and.w	r2, r3, #15
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf14      	ite	ne
 8003206:	2301      	movne	r3, #1
 8003208:	2300      	moveq	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800321e:	2b00      	cmp	r3, #0
 8003220:	bf0c      	ite	eq
 8003222:	2301      	moveq	r3, #1
 8003224:	2300      	movne	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	461a      	mov	r2, r3
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003236:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	b29a      	uxth	r2, r3
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf14      	ite	ne
 800325c:	2301      	movne	r3, #1
 800325e:	2300      	moveq	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003290:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80032a0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	461a      	mov	r2, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	bf14      	ite	ne
 80032d6:	2301      	movne	r3, #1
 80032d8:	2300      	moveq	r3, #0
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	370c      	adds	r7, #12
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e00a      	b.n	800333a <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003328:	2b10      	cmp	r3, #16
 800332a:	d105      	bne.n	8003338 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 800332c:	6839      	ldr	r1, [r7, #0]
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f860 	bl	80033f4 <ETH_SetMACConfig>

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
 8003336:	e000      	b.n	800333a <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003354:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800335c:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800335e:	f001 ff5f 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8003362:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d908      	bls.n	800337e <HAL_ETH_SetMDIOClockRange+0x3a>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d804      	bhi.n	800337e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	e027      	b.n	80033ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4a18      	ldr	r2, [pc, #96]	; (80033e4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d908      	bls.n	8003398 <HAL_ETH_SetMDIOClockRange+0x54>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	4a17      	ldr	r2, [pc, #92]	; (80033e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d204      	bcs.n	8003398 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003394:	60fb      	str	r3, [r7, #12]
 8003396:	e01a      	b.n	80033ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4a13      	ldr	r2, [pc, #76]	; (80033e8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d303      	bcc.n	80033a8 <HAL_ETH_SetMDIOClockRange+0x64>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	4a12      	ldr	r2, [pc, #72]	; (80033ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d911      	bls.n	80033cc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	4a10      	ldr	r2, [pc, #64]	; (80033ec <HAL_ETH_SetMDIOClockRange+0xa8>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d908      	bls.n	80033c2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <HAL_ETH_SetMDIOClockRange+0xac>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d804      	bhi.n	80033c2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	e005      	b.n	80033ce <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	e000      	b.n	80033ce <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80033cc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	01312cff 	.word	0x01312cff
 80033e4:	02160ebf 	.word	0x02160ebf
 80033e8:	03938700 	.word	0x03938700
 80033ec:	05f5e0ff 	.word	0x05f5e0ff
 80033f0:	08f0d17f 	.word	0x08f0d17f

080033f4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8003406:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	791b      	ldrb	r3, [r3, #4]
 800340c:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800340e:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	7b1b      	ldrb	r3, [r3, #12]
 8003414:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8003416:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	7b5b      	ldrb	r3, [r3, #13]
 800341c:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800341e:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	7b9b      	ldrb	r3, [r3, #14]
 8003424:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8003426:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	7bdb      	ldrb	r3, [r3, #15]
 800342c:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800342e:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	7c12      	ldrb	r2, [r2, #16]
 8003434:	2a00      	cmp	r2, #0
 8003436:	d102      	bne.n	800343e <ETH_SetMACConfig+0x4a>
 8003438:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800343c:	e000      	b.n	8003440 <ETH_SetMACConfig+0x4c>
 800343e:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003440:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	7c52      	ldrb	r2, [r2, #17]
 8003446:	2a00      	cmp	r2, #0
 8003448:	d102      	bne.n	8003450 <ETH_SetMACConfig+0x5c>
 800344a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800344e:	e000      	b.n	8003452 <ETH_SetMACConfig+0x5e>
 8003450:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003452:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	7c9b      	ldrb	r3, [r3, #18]
 8003458:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800345a:	431a      	orrs	r2, r3
                                macconf->Speed |
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8003460:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8003466:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	7f1b      	ldrb	r3, [r3, #28]
 800346c:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800346e:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	7f5b      	ldrb	r3, [r3, #29]
 8003474:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8003476:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	7f92      	ldrb	r2, [r2, #30]
 800347c:	2a00      	cmp	r2, #0
 800347e:	d102      	bne.n	8003486 <ETH_SetMACConfig+0x92>
 8003480:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003484:	e000      	b.n	8003488 <ETH_SetMACConfig+0x94>
 8003486:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8003488:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	7fdb      	ldrb	r3, [r3, #31]
 800348e:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8003490:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003498:	2a00      	cmp	r2, #0
 800349a:	d102      	bne.n	80034a2 <ETH_SetMACConfig+0xae>
 800349c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a0:	e000      	b.n	80034a4 <ETH_SetMACConfig+0xb0>
 80034a2:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80034a4:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80034aa:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80034b2:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80034b4:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b56      	ldr	r3, [pc, #344]	; (8003620 <ETH_SetMACConfig+0x22c>)
 80034c6:	4013      	ands	r3, r2
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	6812      	ldr	r2, [r2, #0]
 80034cc:	68f9      	ldr	r1, [r7, #12]
 80034ce:	430b      	orrs	r3, r1
 80034d0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034de:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80034e0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034e8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80034ea:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80034f2:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80034f4:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80034fc:	2a00      	cmp	r2, #0
 80034fe:	d102      	bne.n	8003506 <ETH_SetMACConfig+0x112>
 8003500:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003504:	e000      	b.n	8003508 <ETH_SetMACConfig+0x114>
 8003506:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003508:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	4b42      	ldr	r3, [pc, #264]	; (8003624 <ETH_SetMACConfig+0x230>)
 800351a:	4013      	ands	r3, r2
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	6812      	ldr	r2, [r2, #0]
 8003520:	68f9      	ldr	r1, [r7, #12]
 8003522:	430b      	orrs	r3, r1
 8003524:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800352c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003532:	4313      	orrs	r3, r2
 8003534:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68da      	ldr	r2, [r3, #12]
 800353c:	4b3a      	ldr	r3, [pc, #232]	; (8003628 <ETH_SetMACConfig+0x234>)
 800353e:	4013      	ands	r3, r2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6812      	ldr	r2, [r2, #0]
 8003544:	68f9      	ldr	r1, [r7, #12]
 8003546:	430b      	orrs	r3, r1
 8003548:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003550:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003556:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800355e:	2a00      	cmp	r2, #0
 8003560:	d101      	bne.n	8003566 <ETH_SetMACConfig+0x172>
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	e000      	b.n	8003568 <ETH_SetMACConfig+0x174>
 8003566:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003568:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800356e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800357a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800357e:	4013      	ands	r3, r2
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6812      	ldr	r2, [r2, #0]
 8003584:	68f9      	ldr	r1, [r7, #12]
 8003586:	430b      	orrs	r3, r1
 8003588:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003590:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003598:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a6:	f023 0103 	bic.w	r1, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80035be:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80035d4:	683a      	ldr	r2, [r7, #0]
 80035d6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80035da:	2a00      	cmp	r2, #0
 80035dc:	d101      	bne.n	80035e2 <ETH_SetMACConfig+0x1ee>
 80035de:	2240      	movs	r2, #64	; 0x40
 80035e0:	e000      	b.n	80035e4 <ETH_SetMACConfig+0x1f0>
 80035e2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80035e4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80035ec:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80035ee:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80035f6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003604:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	430a      	orrs	r2, r1
 8003610:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	00048083 	.word	0x00048083
 8003624:	c0f88000 	.word	0xc0f88000
 8003628:	fffffef0 	.word	0xfffffef0

0800362c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	4b38      	ldr	r3, [pc, #224]	; (8003724 <ETH_SetDMAConfig+0xf8>)
 8003642:	4013      	ands	r3, r2
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6809      	ldr	r1, [r1, #0]
 800364c:	431a      	orrs	r2, r3
 800364e:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8003652:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	791b      	ldrb	r3, [r3, #4]
 8003658:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800365e:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	7b1b      	ldrb	r3, [r3, #12]
 8003664:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003666:	4313      	orrs	r3, r2
 8003668:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	f241 0304 	movw	r3, #4100	; 0x1004
 8003672:	4413      	add	r3, r2
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	4b2c      	ldr	r3, [pc, #176]	; (8003728 <ETH_SetDMAConfig+0xfc>)
 8003678:	4013      	ands	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6811      	ldr	r1, [r2, #0]
 800367e:	68fa      	ldr	r2, [r7, #12]
 8003680:	431a      	orrs	r2, r3
 8003682:	f241 0304 	movw	r3, #4100	; 0x1004
 8003686:	440b      	add	r3, r1
 8003688:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	7b5b      	ldrb	r3, [r3, #13]
 800368e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	4b22      	ldr	r3, [pc, #136]	; (800372c <ETH_SetDMAConfig+0x100>)
 80036a4:	4013      	ands	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	6811      	ldr	r1, [r2, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	431a      	orrs	r2, r3
 80036ae:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80036b2:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	7d1b      	ldrb	r3, [r3, #20]
 80036bc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80036be:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	7f5b      	ldrb	r3, [r3, #29]
 80036c4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	f241 1304 	movw	r3, #4356	; 0x1104
 80036d2:	4413      	add	r3, r2
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b16      	ldr	r3, [pc, #88]	; (8003730 <ETH_SetDMAConfig+0x104>)
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6811      	ldr	r1, [r2, #0]
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	431a      	orrs	r2, r3
 80036e2:	f241 1304 	movw	r3, #4356	; 0x1104
 80036e6:	440b      	add	r3, r1
 80036e8:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	7f1b      	ldrb	r3, [r3, #28]
 80036ee:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80036f4:	4313      	orrs	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	f241 1308 	movw	r3, #4360	; 0x1108
 8003700:	4413      	add	r3, r2
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <ETH_SetDMAConfig+0x108>)
 8003706:	4013      	ands	r3, r2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	6811      	ldr	r1, [r2, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	431a      	orrs	r2, r3
 8003710:	f241 1308 	movw	r3, #4360	; 0x1108
 8003714:	440b      	add	r3, r1
 8003716:	601a      	str	r2, [r3, #0]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	ffff87fd 	.word	0xffff87fd
 8003728:	ffff2ffe 	.word	0xffff2ffe
 800372c:	fffec000 	.word	0xfffec000
 8003730:	ffc0efef 	.word	0xffc0efef
 8003734:	7fc0ffff 	.word	0x7fc0ffff

08003738 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b0a4      	sub	sp, #144	; 0x90
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003746:	2300      	movs	r3, #0
 8003748:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800374a:	2300      	movs	r3, #0
 800374c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003750:	2300      	movs	r3, #0
 8003752:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003756:	2301      	movs	r3, #1
 8003758:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800375c:	2301      	movs	r3, #1
 800375e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003768:	2300      	movs	r3, #0
 800376a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003774:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003778:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800377a:	2300      	movs	r3, #0
 800377c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8003780:	2300      	movs	r3, #0
 8003782:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8003784:	2300      	movs	r3, #0
 8003786:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800378a:	2300      	movs	r3, #0
 800378c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8003790:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8003794:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8003796:	2300      	movs	r3, #0
 8003798:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800379c:	2300      	movs	r3, #0
 800379e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80037b2:	2300      	movs	r3, #0
 80037b4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80037b6:	2300      	movs	r3, #0
 80037b8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80037ba:	2300      	movs	r3, #0
 80037bc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80037be:	2300      	movs	r3, #0
 80037c0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80037d0:	2320      	movs	r3, #32
 80037d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80037d6:	2301      	movs	r3, #1
 80037d8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80037dc:	2300      	movs	r3, #0
 80037de:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80037e2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80037e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80037ec:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80037f4:	2302      	movs	r3, #2
 80037f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003800:	2300      	movs	r3, #0
 8003802:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003806:	2300      	movs	r3, #0
 8003808:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800380c:	2301      	movs	r3, #1
 800380e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8003812:	2300      	movs	r3, #0
 8003814:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800381c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003820:	4619      	mov	r1, r3
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff fde6 	bl	80033f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003828:	2301      	movs	r3, #1
 800382a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800382c:	2301      	movs	r3, #1
 800382e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8003830:	2300      	movs	r3, #0
 8003832:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003834:	2300      	movs	r3, #0
 8003836:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800383a:	2300      	movs	r3, #0
 800383c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800383e:	2300      	movs	r3, #0
 8003840:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003842:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003846:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003848:	2300      	movs	r3, #0
 800384a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800384c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003850:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8003852:	2300      	movs	r3, #0
 8003854:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003858:	f44f 7306 	mov.w	r3, #536	; 0x218
 800385c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff fee1 	bl	800362c <ETH_SetDMAConfig>
}
 800386a:	bf00      	nop
 800386c:	3790      	adds	r7, #144	; 0x90
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003884:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800388c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800388e:	f001 fcc7 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8003892:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4a1e      	ldr	r2, [pc, #120]	; (8003910 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d908      	bls.n	80038ae <ETH_MAC_MDIO_ClkConfig+0x3a>
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d804      	bhi.n	80038ae <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	e027      	b.n	80038fe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4a18      	ldr	r2, [pc, #96]	; (8003914 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d908      	bls.n	80038c8 <ETH_MAC_MDIO_ClkConfig+0x54>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4a17      	ldr	r2, [pc, #92]	; (8003918 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d204      	bcs.n	80038c8 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	e01a      	b.n	80038fe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	4a13      	ldr	r2, [pc, #76]	; (8003918 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d303      	bcc.n	80038d8 <ETH_MAC_MDIO_ClkConfig+0x64>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4a12      	ldr	r2, [pc, #72]	; (800391c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d911      	bls.n	80038fc <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4a10      	ldr	r2, [pc, #64]	; (800391c <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d908      	bls.n	80038f2 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4a0f      	ldr	r2, [pc, #60]	; (8003920 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d804      	bhi.n	80038f2 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e005      	b.n	80038fe <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038f8:	60fb      	str	r3, [r7, #12]
 80038fa:	e000      	b.n	80038fe <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80038fc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	01312cff 	.word	0x01312cff
 8003914:	02160ebf 	.word	0x02160ebf
 8003918:	03938700 	.word	0x03938700
 800391c:	05f5e0ff 	.word	0x05f5e0ff
 8003920:	08f0d17f 	.word	0x08f0d17f

08003924 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	e01d      	b.n	800396e <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68d9      	ldr	r1, [r3, #12]
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	4613      	mov	r3, r2
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	4413      	add	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	440b      	add	r3, r1
 8003942:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2200      	movs	r2, #0
 800394e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2200      	movs	r2, #0
 800395a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800395c:	68b9      	ldr	r1, [r7, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	3206      	adds	r2, #6
 8003964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	3301      	adds	r3, #1
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d9de      	bls.n	8003932 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	f241 132c 	movw	r3, #4396	; 0x112c
 8003982:	4413      	add	r3, r2
 8003984:	2203      	movs	r2, #3
 8003986:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68d9      	ldr	r1, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	f241 1314 	movw	r3, #4372	; 0x1114
 8003994:	4413      	add	r3, r2
 8003996:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80039a4:	601a      	str	r2, [r3, #0]
}
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	e024      	b.n	8003a0a <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6919      	ldr	r1, [r3, #16]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	4613      	mov	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	00db      	lsls	r3, r3, #3
 80039ce:	440b      	add	r3, r1
 80039d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2200      	movs	r2, #0
 80039e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2200      	movs	r2, #0
 80039e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2200      	movs	r2, #0
 80039ee:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2200      	movs	r2, #0
 80039f4:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3310      	adds	r3, #16
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3301      	adds	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b03      	cmp	r3, #3
 8003a0e:	d9d7      	bls.n	80039c0 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	f241 1330 	movw	r3, #4400	; 0x1130
 8003a36:	4413      	add	r3, r2
 8003a38:	2203      	movs	r2, #3
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6919      	ldr	r1, [r3, #16]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	f241 131c 	movw	r3, #4380	; 0x111c
 8003a48:	4413      	add	r3, r2
 8003a4a:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	f241 1328 	movw	r3, #4392	; 0x1128
 8003a5c:	4413      	add	r3, r2
 8003a5e:	6019      	str	r1, [r3, #0]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b08d      	sub	sp, #52	; 0x34
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	3318      	adds	r3, #24
 8003a7c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a96:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003aa2:	6a3b      	ldr	r3, [r7, #32]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003aae:	d007      	beq.n	8003ac0 <ETH_Prepare_Tx_Descriptors+0x54>
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	3304      	adds	r3, #4
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e24a      	b.n	8003f5a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d044      	beq.n	8003b5a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8003ad0:	6a3b      	ldr	r3, [r7, #32]
 8003ad2:	68da      	ldr	r2, [r3, #12]
 8003ad4:	4b72      	ldr	r3, [pc, #456]	; (8003ca0 <ETH_Prepare_Tx_Descriptors+0x234>)
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003adc:	431a      	orrs	r2, r3
 8003ade:	6a3b      	ldr	r3, [r7, #32]
 8003ae0:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003aea:	6a3b      	ldr	r3, [r7, #32]
 8003aec:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003afc:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0308 	and.w	r3, r3, #8
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d027      	beq.n	8003b5a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	b29a      	uxth	r2, r3
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	041b      	lsls	r3, r3, #16
 8003b16:	431a      	orrs	r2, r3
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8003b28:	6a3b      	ldr	r3, [r7, #32]
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	431a      	orrs	r2, r3
 8003b36:	6a3b      	ldr	r3, [r7, #32]
 8003b38:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003b48:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003b58:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00e      	beq.n	8003b84 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8003b66:	6a3b      	ldr	r3, [r7, #32]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	4b4e      	ldr	r3, [pc, #312]	; (8003ca4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	68ba      	ldr	r2, [r7, #8]
 8003b70:	6992      	ldr	r2, [r2, #24]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8003b78:	6a3b      	ldr	r3, [r7, #32]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <ETH_Prepare_Tx_Descriptors+0x130>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0310 	and.w	r3, r3, #16
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d030      	beq.n	8003bfe <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ba4:	6a3b      	ldr	r3, [r7, #32]
 8003ba6:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d902      	bls.n	8003bc6 <ETH_Prepare_Tx_Descriptors+0x15a>
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	3b04      	subs	r3, #4
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bce:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8003bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be2:	d10c      	bne.n	8003bfe <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bec:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8003bee:	6a3b      	ldr	r3, [r7, #32]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e1ad      	b.n	8003f5a <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	3301      	adds	r3, #1
 8003c02:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	689a      	ldr	r2, [r3, #8]
 8003c12:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <ETH_Prepare_Tx_Descriptors+0x238>)
 8003c14:	4013      	ands	r3, r2
 8003c16:	69fa      	ldr	r2, [r7, #28]
 8003c18:	6852      	ldr	r2, [r2, #4]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	6a3b      	ldr	r3, [r7, #32]
 8003c1e:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d012      	beq.n	8003c4e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ca8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	6852      	ldr	r2, [r2, #4]
 8003c44:	0412      	lsls	r2, r2, #16
 8003c46:	431a      	orrs	r2, r3
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	e008      	b.n	8003c60 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	2200      	movs	r2, #0
 8003c52:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	4b13      	ldr	r3, [pc, #76]	; (8003ca8 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	6a3a      	ldr	r2, [r7, #32]
 8003c5e:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d021      	beq.n	8003cb0 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	04db      	lsls	r3, r3, #19
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003c80:	6a3b      	ldr	r3, [r7, #32]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	4b09      	ldr	r3, [pc, #36]	; (8003cac <ETH_Prepare_Tx_Descriptors+0x240>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	69d2      	ldr	r2, [r2, #28]
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	e02e      	b.n	8003cfe <ETH_Prepare_Tx_Descriptors+0x292>
 8003ca0:	ffff0000 	.word	0xffff0000
 8003ca4:	ffffc000 	.word	0xffffc000
 8003ca8:	c000ffff 	.word	0xc000ffff
 8003cac:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	4b93      	ldr	r3, [pc, #588]	; (8003f04 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	6852      	ldr	r2, [r2, #4]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003cce:	6a3b      	ldr	r3, [r7, #32]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	695b      	ldr	r3, [r3, #20]
 8003cda:	431a      	orrs	r2, r3
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8003cec:	6a3b      	ldr	r3, [r7, #32]
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	6a3b      	ldr	r3, [r7, #32]
 8003cfc:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d16:	431a      	orrs	r2, r3
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d24:	6a3b      	ldr	r3, [r7, #32]
 8003d26:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d3c:	6a3b      	ldr	r3, [r7, #32]
 8003d3e:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80cb 	beq.w	8003ee4 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003d60:	e0c0      	b.n	8003ee4 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003d62:	6a3b      	ldr	r3, [r7, #32]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	3301      	adds	r3, #1
 8003d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	2b03      	cmp	r3, #3
 8003d78:	d902      	bls.n	8003d80 <ETH_Prepare_Tx_Descriptors+0x314>
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	3b04      	subs	r3, #4
 8003d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d88:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003da2:	d007      	beq.n	8003db4 <ETH_Prepare_Tx_Descriptors+0x348>
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	3304      	adds	r3, #4
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d026      	beq.n	8003e02 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc0:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc6:	e016      	b.n	8003df6 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dd0:	6a3b      	ldr	r3, [r7, #32]
 8003dd2:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d902      	bls.n	8003de6 <ETH_Prepare_Tx_Descriptors+0x37a>
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	3b04      	subs	r3, #4
 8003de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dee:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8003df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df2:	3301      	adds	r3, #1
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
 8003df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d3e4      	bcc.n	8003dc8 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e0ab      	b.n	8003f5a <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	3301      	adds	r3, #1
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	4b3a      	ldr	r3, [pc, #232]	; (8003f08 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	6852      	ldr	r2, [r2, #4]
 8003e24:	431a      	orrs	r2, r3
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d012      	beq.n	8003e58 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	6a3b      	ldr	r3, [r7, #32]
 8003e40:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	689a      	ldr	r2, [r3, #8]
 8003e46:	4b31      	ldr	r3, [pc, #196]	; (8003f0c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	69fa      	ldr	r2, [r7, #28]
 8003e4c:	6852      	ldr	r2, [r2, #4]
 8003e4e:	0412      	lsls	r2, r2, #16
 8003e50:	431a      	orrs	r2, r3
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	e008      	b.n	8003e6a <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003e58:	6a3b      	ldr	r3, [r7, #32]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	689a      	ldr	r2, [r3, #8]
 8003e62:	4b2a      	ldr	r3, [pc, #168]	; (8003f0c <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	6a3a      	ldr	r2, [r7, #32]
 8003e68:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0310 	and.w	r3, r3, #16
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00f      	beq.n	8003e96 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	4b25      	ldr	r3, [pc, #148]	; (8003f10 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	69d2      	ldr	r2, [r2, #28]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	60da      	str	r2, [r3, #12]
 8003e94:	e017      	b.n	8003ec6 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	4b1a      	ldr	r3, [pc, #104]	; (8003f04 <ETH_Prepare_Tx_Descriptors+0x498>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	68ba      	ldr	r2, [r7, #8]
 8003ea0:	6852      	ldr	r2, [r2, #4]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8003ed8:	6a3b      	ldr	r3, [r7, #32]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f47f af3a 	bne.w	8003d62 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00f      	beq.n	8003f14 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003efc:	6a3b      	ldr	r3, [r7, #32]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	e00e      	b.n	8003f20 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8003f02:	bf00      	nop
 8003f04:	ffff8000 	.word	0xffff8000
 8003f08:	ffffc000 	.word	0xffffc000
 8003f0c:	c000ffff 	.word	0xc000ffff
 8003f10:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f30:	6979      	ldr	r1, [r7, #20]
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	3304      	adds	r3, #4
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f40:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003f42:	b672      	cpsid	i
}
 8003f44:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	1c5a      	adds	r2, r3, #1
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003f54:	b662      	cpsie	i
}
 8003f56:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3734      	adds	r7, #52	; 0x34
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop

08003f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f76:	4b89      	ldr	r3, [pc, #548]	; (800419c <HAL_GPIO_Init+0x234>)
 8003f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f7a:	e194      	b.n	80042a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	fa01 f303 	lsl.w	r3, r1, r3
 8003f88:	4013      	ands	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 8186 	beq.w	80042a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d00b      	beq.n	8003fb4 <HAL_GPIO_Init+0x4c>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d007      	beq.n	8003fb4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fa8:	2b11      	cmp	r3, #17
 8003faa:	d003      	beq.n	8003fb4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	2b12      	cmp	r3, #18
 8003fb2:	d130      	bne.n	8004016 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	2203      	movs	r2, #3
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	68da      	ldr	r2, [r3, #12]
 8003fd0:	69fb      	ldr	r3, [r7, #28]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fea:	2201      	movs	r2, #1
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	091b      	lsrs	r3, r3, #4
 8004000:	f003 0201 	and.w	r2, r3, #1
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4313      	orrs	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	005b      	lsls	r3, r3, #1
 8004020:	2203      	movs	r2, #3
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	689a      	ldr	r2, [r3, #8]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	005b      	lsls	r3, r3, #1
 8004036:	fa02 f303 	lsl.w	r3, r2, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4313      	orrs	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d003      	beq.n	8004056 <HAL_GPIO_Init+0xee>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b12      	cmp	r3, #18
 8004054:	d123      	bne.n	800409e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	08da      	lsrs	r2, r3, #3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3208      	adds	r2, #8
 800405e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0307 	and.w	r3, r3, #7
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	220f      	movs	r2, #15
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	08da      	lsrs	r2, r3, #3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	3208      	adds	r2, #8
 8004098:	69b9      	ldr	r1, [r7, #24]
 800409a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	2203      	movs	r2, #3
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f003 0203 	and.w	r2, r3, #3
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	fa02 f303 	lsl.w	r3, r2, r3
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80e0 	beq.w	80042a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040e0:	4b2f      	ldr	r3, [pc, #188]	; (80041a0 <HAL_GPIO_Init+0x238>)
 80040e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040e6:	4a2e      	ldr	r2, [pc, #184]	; (80041a0 <HAL_GPIO_Init+0x238>)
 80040e8:	f043 0302 	orr.w	r3, r3, #2
 80040ec:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040f0:	4b2b      	ldr	r3, [pc, #172]	; (80041a0 <HAL_GPIO_Init+0x238>)
 80040f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	60fb      	str	r3, [r7, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040fe:	4a29      	ldr	r2, [pc, #164]	; (80041a4 <HAL_GPIO_Init+0x23c>)
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	089b      	lsrs	r3, r3, #2
 8004104:	3302      	adds	r3, #2
 8004106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800410a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	220f      	movs	r2, #15
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a20      	ldr	r2, [pc, #128]	; (80041a8 <HAL_GPIO_Init+0x240>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d052      	beq.n	80041d0 <HAL_GPIO_Init+0x268>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a1f      	ldr	r2, [pc, #124]	; (80041ac <HAL_GPIO_Init+0x244>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d031      	beq.n	8004196 <HAL_GPIO_Init+0x22e>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a1e      	ldr	r2, [pc, #120]	; (80041b0 <HAL_GPIO_Init+0x248>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d02b      	beq.n	8004192 <HAL_GPIO_Init+0x22a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <HAL_GPIO_Init+0x24c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d025      	beq.n	800418e <HAL_GPIO_Init+0x226>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a1c      	ldr	r2, [pc, #112]	; (80041b8 <HAL_GPIO_Init+0x250>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d01f      	beq.n	800418a <HAL_GPIO_Init+0x222>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a1b      	ldr	r2, [pc, #108]	; (80041bc <HAL_GPIO_Init+0x254>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d019      	beq.n	8004186 <HAL_GPIO_Init+0x21e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a1a      	ldr	r2, [pc, #104]	; (80041c0 <HAL_GPIO_Init+0x258>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d013      	beq.n	8004182 <HAL_GPIO_Init+0x21a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a19      	ldr	r2, [pc, #100]	; (80041c4 <HAL_GPIO_Init+0x25c>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00d      	beq.n	800417e <HAL_GPIO_Init+0x216>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a18      	ldr	r2, [pc, #96]	; (80041c8 <HAL_GPIO_Init+0x260>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d007      	beq.n	800417a <HAL_GPIO_Init+0x212>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a17      	ldr	r2, [pc, #92]	; (80041cc <HAL_GPIO_Init+0x264>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d101      	bne.n	8004176 <HAL_GPIO_Init+0x20e>
 8004172:	2309      	movs	r3, #9
 8004174:	e02d      	b.n	80041d2 <HAL_GPIO_Init+0x26a>
 8004176:	230a      	movs	r3, #10
 8004178:	e02b      	b.n	80041d2 <HAL_GPIO_Init+0x26a>
 800417a:	2308      	movs	r3, #8
 800417c:	e029      	b.n	80041d2 <HAL_GPIO_Init+0x26a>
 800417e:	2307      	movs	r3, #7
 8004180:	e027      	b.n	80041d2 <HAL_GPIO_Init+0x26a>
 8004182:	2306      	movs	r3, #6
 8004184:	e025      	b.n	80041d2 <HAL_GPIO_Init+0x26a>
 8004186:	2305      	movs	r3, #5
 8004188:	e023      	b.n	80041d2 <HAL_GPIO_Init+0x26a>
 800418a:	2304      	movs	r3, #4
 800418c:	e021      	b.n	80041d2 <HAL_GPIO_Init+0x26a>
 800418e:	2303      	movs	r3, #3
 8004190:	e01f      	b.n	80041d2 <HAL_GPIO_Init+0x26a>
 8004192:	2302      	movs	r3, #2
 8004194:	e01d      	b.n	80041d2 <HAL_GPIO_Init+0x26a>
 8004196:	2301      	movs	r3, #1
 8004198:	e01b      	b.n	80041d2 <HAL_GPIO_Init+0x26a>
 800419a:	bf00      	nop
 800419c:	58000080 	.word	0x58000080
 80041a0:	58024400 	.word	0x58024400
 80041a4:	58000400 	.word	0x58000400
 80041a8:	58020000 	.word	0x58020000
 80041ac:	58020400 	.word	0x58020400
 80041b0:	58020800 	.word	0x58020800
 80041b4:	58020c00 	.word	0x58020c00
 80041b8:	58021000 	.word	0x58021000
 80041bc:	58021400 	.word	0x58021400
 80041c0:	58021800 	.word	0x58021800
 80041c4:	58021c00 	.word	0x58021c00
 80041c8:	58022000 	.word	0x58022000
 80041cc:	58022400 	.word	0x58022400
 80041d0:	2300      	movs	r3, #0
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	f002 0203 	and.w	r2, r2, #3
 80041d8:	0092      	lsls	r2, r2, #2
 80041da:	4093      	lsls	r3, r2
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4313      	orrs	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041e2:	4938      	ldr	r1, [pc, #224]	; (80042c4 <HAL_GPIO_Init+0x35c>)
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	089b      	lsrs	r3, r3, #2
 80041e8:	3302      	adds	r3, #2
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4013      	ands	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	43db      	mvns	r3, r3
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4013      	ands	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	4313      	orrs	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	43db      	mvns	r3, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800426a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800427a:	693b      	ldr	r3, [r7, #16]
 800427c:	43db      	mvns	r3, r3
 800427e:	69ba      	ldr	r2, [r7, #24]
 8004280:	4013      	ands	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	4313      	orrs	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80042a0:	69fb      	ldr	r3, [r7, #28]
 80042a2:	3301      	adds	r3, #1
 80042a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fa22 f303 	lsr.w	r3, r2, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f47f ae63 	bne.w	8003f7c <HAL_GPIO_Init+0x14>
  }
}
 80042b6:	bf00      	nop
 80042b8:	bf00      	nop
 80042ba:	3724      	adds	r7, #36	; 0x24
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	58000400 	.word	0x58000400

080042c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	460b      	mov	r3, r1
 80042d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691a      	ldr	r2, [r3, #16]
 80042d8:	887b      	ldrh	r3, [r7, #2]
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
 80042e4:	e001      	b.n	80042ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	807b      	strh	r3, [r7, #2]
 8004304:	4613      	mov	r3, r2
 8004306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004308:	787b      	ldrb	r3, [r7, #1]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800430e:	887a      	ldrh	r2, [r7, #2]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004314:	e003      	b.n	800431e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004316:	887b      	ldrh	r3, [r7, #2]
 8004318:	041a      	lsls	r2, r3, #16
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	619a      	str	r2, [r3, #24]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004334:	4b19      	ldr	r3, [pc, #100]	; (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b04      	cmp	r3, #4
 800433e:	d00a      	beq.n	8004356 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004340:	4b16      	ldr	r3, [pc, #88]	; (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	f003 0307 	and.w	r3, r3, #7
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	429a      	cmp	r2, r3
 800434c:	d001      	beq.n	8004352 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e01f      	b.n	8004392 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	e01d      	b.n	8004392 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004356:	4b11      	ldr	r3, [pc, #68]	; (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f023 0207 	bic.w	r2, r3, #7
 800435e:	490f      	ldr	r1, [pc, #60]	; (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4313      	orrs	r3, r2
 8004364:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004366:	f7fd fdcb 	bl	8001f00 <HAL_GetTick>
 800436a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800436c:	e009      	b.n	8004382 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800436e:	f7fd fdc7 	bl	8001f00 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800437c:	d901      	bls.n	8004382 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e007      	b.n	8004392 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_PWREx_ConfigSupply+0x70>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800438a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438e:	d1ee      	bne.n	800436e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3710      	adds	r7, #16
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	58024800 	.word	0x58024800

080043a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b08c      	sub	sp, #48	; 0x30
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e3ff      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8087 	beq.w	80044ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c0:	4b99      	ldr	r3, [pc, #612]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043ca:	4b97      	ldr	r3, [pc, #604]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80043cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d2:	2b10      	cmp	r3, #16
 80043d4:	d007      	beq.n	80043e6 <HAL_RCC_OscConfig+0x46>
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	2b18      	cmp	r3, #24
 80043da:	d110      	bne.n	80043fe <HAL_RCC_OscConfig+0x5e>
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d10b      	bne.n	80043fe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043e6:	4b90      	ldr	r3, [pc, #576]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d06c      	beq.n	80044cc <HAL_RCC_OscConfig+0x12c>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d168      	bne.n	80044cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e3d9      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004406:	d106      	bne.n	8004416 <HAL_RCC_OscConfig+0x76>
 8004408:	4b87      	ldr	r3, [pc, #540]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a86      	ldr	r2, [pc, #536]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800440e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	e02e      	b.n	8004474 <HAL_RCC_OscConfig+0xd4>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0x98>
 800441e:	4b82      	ldr	r3, [pc, #520]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a81      	ldr	r2, [pc, #516]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004424:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4b7f      	ldr	r3, [pc, #508]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a7e      	ldr	r2, [pc, #504]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004430:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e01d      	b.n	8004474 <HAL_RCC_OscConfig+0xd4>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004440:	d10c      	bne.n	800445c <HAL_RCC_OscConfig+0xbc>
 8004442:	4b79      	ldr	r3, [pc, #484]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a78      	ldr	r2, [pc, #480]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	4b76      	ldr	r3, [pc, #472]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a75      	ldr	r2, [pc, #468]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e00b      	b.n	8004474 <HAL_RCC_OscConfig+0xd4>
 800445c:	4b72      	ldr	r3, [pc, #456]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a71      	ldr	r2, [pc, #452]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b6f      	ldr	r3, [pc, #444]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a6e      	ldr	r2, [pc, #440]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800446e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004472:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800447c:	f7fd fd40 	bl	8001f00 <HAL_GetTick>
 8004480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004482:	e008      	b.n	8004496 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004484:	f7fd fd3c 	bl	8001f00 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	2b64      	cmp	r3, #100	; 0x64
 8004490:	d901      	bls.n	8004496 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e38d      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004496:	4b64      	ldr	r3, [pc, #400]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d0f0      	beq.n	8004484 <HAL_RCC_OscConfig+0xe4>
 80044a2:	e014      	b.n	80044ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a4:	f7fd fd2c 	bl	8001f00 <HAL_GetTick>
 80044a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044aa:	e008      	b.n	80044be <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fd fd28 	bl	8001f00 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e379      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044be:	4b5a      	ldr	r3, [pc, #360]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1f0      	bne.n	80044ac <HAL_RCC_OscConfig+0x10c>
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80ae 	beq.w	8004638 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044dc:	4b52      	ldr	r3, [pc, #328]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044e6:	4b50      	ldr	r3, [pc, #320]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d007      	beq.n	8004502 <HAL_RCC_OscConfig+0x162>
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	2b18      	cmp	r3, #24
 80044f6:	d13a      	bne.n	800456e <HAL_RCC_OscConfig+0x1ce>
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d135      	bne.n	800456e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004502:	4b49      	ldr	r3, [pc, #292]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_RCC_OscConfig+0x17a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e34b      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800451a:	f7fd fcfd 	bl	8001f18 <HAL_GetREVID>
 800451e:	4603      	mov	r3, r0
 8004520:	f241 0203 	movw	r2, #4099	; 0x1003
 8004524:	4293      	cmp	r3, r2
 8004526:	d817      	bhi.n	8004558 <HAL_RCC_OscConfig+0x1b8>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d108      	bne.n	8004542 <HAL_RCC_OscConfig+0x1a2>
 8004530:	4b3d      	ldr	r3, [pc, #244]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004538:	4a3b      	ldr	r2, [pc, #236]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800453a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800453e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004540:	e07a      	b.n	8004638 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004542:	4b39      	ldr	r3, [pc, #228]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	031b      	lsls	r3, r3, #12
 8004550:	4935      	ldr	r1, [pc, #212]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004552:	4313      	orrs	r3, r2
 8004554:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004556:	e06f      	b.n	8004638 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004558:	4b33      	ldr	r3, [pc, #204]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	061b      	lsls	r3, r3, #24
 8004566:	4930      	ldr	r1, [pc, #192]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004568:	4313      	orrs	r3, r2
 800456a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800456c:	e064      	b.n	8004638 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68db      	ldr	r3, [r3, #12]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d045      	beq.n	8004602 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004576:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f023 0219 	bic.w	r2, r3, #25
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	4929      	ldr	r1, [pc, #164]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004584:	4313      	orrs	r3, r2
 8004586:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004588:	f7fd fcba 	bl	8001f00 <HAL_GetTick>
 800458c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800458e:	e008      	b.n	80045a2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004590:	f7fd fcb6 	bl	8001f00 <HAL_GetTick>
 8004594:	4602      	mov	r2, r0
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	1ad3      	subs	r3, r2, r3
 800459a:	2b02      	cmp	r3, #2
 800459c:	d901      	bls.n	80045a2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e307      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045a2:	4b21      	ldr	r3, [pc, #132]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d0f0      	beq.n	8004590 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ae:	f7fd fcb3 	bl	8001f18 <HAL_GetREVID>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d817      	bhi.n	80045ec <HAL_RCC_OscConfig+0x24c>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	2b40      	cmp	r3, #64	; 0x40
 80045c2:	d108      	bne.n	80045d6 <HAL_RCC_OscConfig+0x236>
 80045c4:	4b18      	ldr	r3, [pc, #96]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045cc:	4a16      	ldr	r2, [pc, #88]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80045ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045d2:	6053      	str	r3, [r2, #4]
 80045d4:	e030      	b.n	8004638 <HAL_RCC_OscConfig+0x298>
 80045d6:	4b14      	ldr	r3, [pc, #80]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	031b      	lsls	r3, r3, #12
 80045e4:	4910      	ldr	r1, [pc, #64]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	604b      	str	r3, [r1, #4]
 80045ea:	e025      	b.n	8004638 <HAL_RCC_OscConfig+0x298>
 80045ec:	4b0e      	ldr	r3, [pc, #56]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	061b      	lsls	r3, r3, #24
 80045fa:	490b      	ldr	r1, [pc, #44]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	604b      	str	r3, [r1, #4]
 8004600:	e01a      	b.n	8004638 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004602:	4b09      	ldr	r3, [pc, #36]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a08      	ldr	r2, [pc, #32]	; (8004628 <HAL_RCC_OscConfig+0x288>)
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800460e:	f7fd fc77 	bl	8001f00 <HAL_GetTick>
 8004612:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004614:	e00a      	b.n	800462c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004616:	f7fd fc73 	bl	8001f00 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b02      	cmp	r3, #2
 8004622:	d903      	bls.n	800462c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e2c4      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
 8004628:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800462c:	4ba4      	ldr	r3, [pc, #656]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1ee      	bne.n	8004616 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 80a9 	beq.w	8004798 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004646:	4b9e      	ldr	r3, [pc, #632]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800464e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004650:	4b9b      	ldr	r3, [pc, #620]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 8004652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004654:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	2b08      	cmp	r3, #8
 800465a:	d007      	beq.n	800466c <HAL_RCC_OscConfig+0x2cc>
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	2b18      	cmp	r3, #24
 8004660:	d13a      	bne.n	80046d8 <HAL_RCC_OscConfig+0x338>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f003 0303 	and.w	r3, r3, #3
 8004668:	2b01      	cmp	r3, #1
 800466a:	d135      	bne.n	80046d8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800466c:	4b94      	ldr	r3, [pc, #592]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d005      	beq.n	8004684 <HAL_RCC_OscConfig+0x2e4>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	2b80      	cmp	r3, #128	; 0x80
 800467e:	d001      	beq.n	8004684 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e296      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004684:	f7fd fc48 	bl	8001f18 <HAL_GetREVID>
 8004688:	4603      	mov	r3, r0
 800468a:	f241 0203 	movw	r2, #4099	; 0x1003
 800468e:	4293      	cmp	r3, r2
 8004690:	d817      	bhi.n	80046c2 <HAL_RCC_OscConfig+0x322>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a1b      	ldr	r3, [r3, #32]
 8004696:	2b20      	cmp	r3, #32
 8004698:	d108      	bne.n	80046ac <HAL_RCC_OscConfig+0x30c>
 800469a:	4b89      	ldr	r3, [pc, #548]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80046a2:	4a87      	ldr	r2, [pc, #540]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 80046a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046aa:	e075      	b.n	8004798 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046ac:	4b84      	ldr	r3, [pc, #528]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	069b      	lsls	r3, r3, #26
 80046ba:	4981      	ldr	r1, [pc, #516]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 80046bc:	4313      	orrs	r3, r2
 80046be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046c0:	e06a      	b.n	8004798 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046c2:	4b7f      	ldr	r3, [pc, #508]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 80046c4:	68db      	ldr	r3, [r3, #12]
 80046c6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	061b      	lsls	r3, r3, #24
 80046d0:	497b      	ldr	r1, [pc, #492]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046d6:	e05f      	b.n	8004798 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d042      	beq.n	8004766 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80046e0:	4b77      	ldr	r3, [pc, #476]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a76      	ldr	r2, [pc, #472]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 80046e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ec:	f7fd fc08 	bl	8001f00 <HAL_GetTick>
 80046f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80046f4:	f7fd fc04 	bl	8001f00 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e255      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004706:	4b6e      	ldr	r3, [pc, #440]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0f0      	beq.n	80046f4 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004712:	f7fd fc01 	bl	8001f18 <HAL_GetREVID>
 8004716:	4603      	mov	r3, r0
 8004718:	f241 0203 	movw	r2, #4099	; 0x1003
 800471c:	4293      	cmp	r3, r2
 800471e:	d817      	bhi.n	8004750 <HAL_RCC_OscConfig+0x3b0>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	2b20      	cmp	r3, #32
 8004726:	d108      	bne.n	800473a <HAL_RCC_OscConfig+0x39a>
 8004728:	4b65      	ldr	r3, [pc, #404]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004730:	4a63      	ldr	r2, [pc, #396]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 8004732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004736:	6053      	str	r3, [r2, #4]
 8004738:	e02e      	b.n	8004798 <HAL_RCC_OscConfig+0x3f8>
 800473a:	4b61      	ldr	r3, [pc, #388]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	069b      	lsls	r3, r3, #26
 8004748:	495d      	ldr	r1, [pc, #372]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 800474a:	4313      	orrs	r3, r2
 800474c:	604b      	str	r3, [r1, #4]
 800474e:	e023      	b.n	8004798 <HAL_RCC_OscConfig+0x3f8>
 8004750:	4b5b      	ldr	r3, [pc, #364]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	061b      	lsls	r3, r3, #24
 800475e:	4958      	ldr	r1, [pc, #352]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 8004760:	4313      	orrs	r3, r2
 8004762:	60cb      	str	r3, [r1, #12]
 8004764:	e018      	b.n	8004798 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004766:	4b56      	ldr	r3, [pc, #344]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a55      	ldr	r2, [pc, #340]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 800476c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004770:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004772:	f7fd fbc5 	bl	8001f00 <HAL_GetTick>
 8004776:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800477a:	f7fd fbc1 	bl	8001f00 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e212      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800478c:	4b4c      	ldr	r3, [pc, #304]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1f0      	bne.n	800477a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d036      	beq.n	8004812 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d019      	beq.n	80047e0 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047ac:	4b44      	ldr	r3, [pc, #272]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 80047ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047b0:	4a43      	ldr	r2, [pc, #268]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7fd fba2 	bl	8001f00 <HAL_GetTick>
 80047bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047c0:	f7fd fb9e 	bl	8001f00 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e1ef      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80047d2:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 80047d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x420>
 80047de:	e018      	b.n	8004812 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047e0:	4b37      	ldr	r3, [pc, #220]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 80047e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e4:	4a36      	ldr	r2, [pc, #216]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 80047e6:	f023 0301 	bic.w	r3, r3, #1
 80047ea:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ec:	f7fd fb88 	bl	8001f00 <HAL_GetTick>
 80047f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f4:	f7fd fb84 	bl	8001f00 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e1d5      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004806:	4b2e      	ldr	r3, [pc, #184]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 8004808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0320 	and.w	r3, r3, #32
 800481a:	2b00      	cmp	r3, #0
 800481c:	d036      	beq.n	800488c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d019      	beq.n	800485a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004826:	4b26      	ldr	r3, [pc, #152]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a25      	ldr	r2, [pc, #148]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 800482c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004830:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004832:	f7fd fb65 	bl	8001f00 <HAL_GetTick>
 8004836:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004838:	e008      	b.n	800484c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800483a:	f7fd fb61 	bl	8001f00 <HAL_GetTick>
 800483e:	4602      	mov	r2, r0
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	1ad3      	subs	r3, r2, r3
 8004844:	2b02      	cmp	r3, #2
 8004846:	d901      	bls.n	800484c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e1b2      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800484c:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d0f0      	beq.n	800483a <HAL_RCC_OscConfig+0x49a>
 8004858:	e018      	b.n	800488c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800485a:	4b19      	ldr	r3, [pc, #100]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a18      	ldr	r2, [pc, #96]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 8004860:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004864:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004866:	f7fd fb4b 	bl	8001f00 <HAL_GetTick>
 800486a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800486c:	e008      	b.n	8004880 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800486e:	f7fd fb47 	bl	8001f00 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d901      	bls.n	8004880 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e198      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004880:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <HAL_RCC_OscConfig+0x520>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d1f0      	bne.n	800486e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8085 	beq.w	80049a4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800489a:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <HAL_RCC_OscConfig+0x524>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <HAL_RCC_OscConfig+0x524>)
 80048a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048a6:	f7fd fb2b 	bl	8001f00 <HAL_GetTick>
 80048aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048ac:	e00c      	b.n	80048c8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80048ae:	f7fd fb27 	bl	8001f00 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	2b64      	cmp	r3, #100	; 0x64
 80048ba:	d905      	bls.n	80048c8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80048bc:	2303      	movs	r3, #3
 80048be:	e178      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
 80048c0:	58024400 	.word	0x58024400
 80048c4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048c8:	4b96      	ldr	r3, [pc, #600]	; (8004b24 <HAL_RCC_OscConfig+0x784>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0ec      	beq.n	80048ae <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d106      	bne.n	80048ea <HAL_RCC_OscConfig+0x54a>
 80048dc:	4b92      	ldr	r3, [pc, #584]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 80048de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048e0:	4a91      	ldr	r2, [pc, #580]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	6713      	str	r3, [r2, #112]	; 0x70
 80048e8:	e02d      	b.n	8004946 <HAL_RCC_OscConfig+0x5a6>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10c      	bne.n	800490c <HAL_RCC_OscConfig+0x56c>
 80048f2:	4b8d      	ldr	r3, [pc, #564]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 80048f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f6:	4a8c      	ldr	r2, [pc, #560]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 80048f8:	f023 0301 	bic.w	r3, r3, #1
 80048fc:	6713      	str	r3, [r2, #112]	; 0x70
 80048fe:	4b8a      	ldr	r3, [pc, #552]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004902:	4a89      	ldr	r2, [pc, #548]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004904:	f023 0304 	bic.w	r3, r3, #4
 8004908:	6713      	str	r3, [r2, #112]	; 0x70
 800490a:	e01c      	b.n	8004946 <HAL_RCC_OscConfig+0x5a6>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	2b05      	cmp	r3, #5
 8004912:	d10c      	bne.n	800492e <HAL_RCC_OscConfig+0x58e>
 8004914:	4b84      	ldr	r3, [pc, #528]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004918:	4a83      	ldr	r2, [pc, #524]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 800491a:	f043 0304 	orr.w	r3, r3, #4
 800491e:	6713      	str	r3, [r2, #112]	; 0x70
 8004920:	4b81      	ldr	r3, [pc, #516]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004924:	4a80      	ldr	r2, [pc, #512]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004926:	f043 0301 	orr.w	r3, r3, #1
 800492a:	6713      	str	r3, [r2, #112]	; 0x70
 800492c:	e00b      	b.n	8004946 <HAL_RCC_OscConfig+0x5a6>
 800492e:	4b7e      	ldr	r3, [pc, #504]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004932:	4a7d      	ldr	r2, [pc, #500]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004934:	f023 0301 	bic.w	r3, r3, #1
 8004938:	6713      	str	r3, [r2, #112]	; 0x70
 800493a:	4b7b      	ldr	r3, [pc, #492]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 800493c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800493e:	4a7a      	ldr	r2, [pc, #488]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004940:	f023 0304 	bic.w	r3, r3, #4
 8004944:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d015      	beq.n	800497a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494e:	f7fd fad7 	bl	8001f00 <HAL_GetTick>
 8004952:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004954:	e00a      	b.n	800496c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fd fad3 	bl	8001f00 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e122      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800496c:	4b6e      	ldr	r3, [pc, #440]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0ee      	beq.n	8004956 <HAL_RCC_OscConfig+0x5b6>
 8004978:	e014      	b.n	80049a4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497a:	f7fd fac1 	bl	8001f00 <HAL_GetTick>
 800497e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004980:	e00a      	b.n	8004998 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004982:	f7fd fabd 	bl	8001f00 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004990:	4293      	cmp	r3, r2
 8004992:	d901      	bls.n	8004998 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e10c      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004998:	4b63      	ldr	r3, [pc, #396]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d1ee      	bne.n	8004982 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	f000 8101 	beq.w	8004bb0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80049ae:	4b5e      	ldr	r3, [pc, #376]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049b6:	2b18      	cmp	r3, #24
 80049b8:	f000 80bc 	beq.w	8004b34 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f040 8095 	bne.w	8004af0 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049c6:	4b58      	ldr	r3, [pc, #352]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a57      	ldr	r2, [pc, #348]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 80049cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7fd fa95 	bl	8001f00 <HAL_GetTick>
 80049d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049da:	f7fd fa91 	bl	8001f00 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e0e2      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80049ec:	4b4e      	ldr	r3, [pc, #312]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1f0      	bne.n	80049da <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049f8:	4b4b      	ldr	r3, [pc, #300]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 80049fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049fc:	4b4b      	ldr	r3, [pc, #300]	; (8004b2c <HAL_RCC_OscConfig+0x78c>)
 80049fe:	4013      	ands	r3, r2
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a08:	0112      	lsls	r2, r2, #4
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	4946      	ldr	r1, [pc, #280]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	628b      	str	r3, [r1, #40]	; 0x28
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a16:	3b01      	subs	r3, #1
 8004a18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a20:	3b01      	subs	r3, #1
 8004a22:	025b      	lsls	r3, r3, #9
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	041b      	lsls	r3, r3, #16
 8004a30:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a34:	431a      	orrs	r2, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	061b      	lsls	r3, r3, #24
 8004a3e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a42:	4939      	ldr	r1, [pc, #228]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004a48:	4b37      	ldr	r3, [pc, #220]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	4a36      	ldr	r2, [pc, #216]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004a54:	4b34      	ldr	r3, [pc, #208]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a58:	4b35      	ldr	r3, [pc, #212]	; (8004b30 <HAL_RCC_OscConfig+0x790>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a60:	00d2      	lsls	r2, r2, #3
 8004a62:	4931      	ldr	r1, [pc, #196]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004a68:	4b2f      	ldr	r3, [pc, #188]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	f023 020c 	bic.w	r2, r3, #12
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a74:	492c      	ldr	r1, [pc, #176]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004a7a:	4b2b      	ldr	r3, [pc, #172]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	f023 0202 	bic.w	r2, r3, #2
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a86:	4928      	ldr	r1, [pc, #160]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004a8c:	4b26      	ldr	r3, [pc, #152]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	4a25      	ldr	r2, [pc, #148]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a98:	4b23      	ldr	r3, [pc, #140]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	4a22      	ldr	r2, [pc, #136]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004a9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004aa4:	4b20      	ldr	r3, [pc, #128]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	4a1f      	ldr	r2, [pc, #124]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004aaa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004aae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004ab0:	4b1d      	ldr	r3, [pc, #116]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004abc:	4b1a      	ldr	r3, [pc, #104]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a19      	ldr	r2, [pc, #100]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fd fa1a 	bl	8001f00 <HAL_GetTick>
 8004acc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ad0:	f7fd fa16 	bl	8001f00 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e067      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ae2:	4b11      	ldr	r3, [pc, #68]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x730>
 8004aee:	e05f      	b.n	8004bb0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004af0:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a0c      	ldr	r2, [pc, #48]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004afc:	f7fd fa00 	bl	8001f00 <HAL_GetTick>
 8004b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b04:	f7fd f9fc 	bl	8001f00 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e04d      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b16:	4b04      	ldr	r3, [pc, #16]	; (8004b28 <HAL_RCC_OscConfig+0x788>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x764>
 8004b22:	e045      	b.n	8004bb0 <HAL_RCC_OscConfig+0x810>
 8004b24:	58024800 	.word	0x58024800
 8004b28:	58024400 	.word	0x58024400
 8004b2c:	fffffc0c 	.word	0xfffffc0c
 8004b30:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004b34:	4b21      	ldr	r3, [pc, #132]	; (8004bbc <HAL_RCC_OscConfig+0x81c>)
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004b3a:	4b20      	ldr	r3, [pc, #128]	; (8004bbc <HAL_RCC_OscConfig+0x81c>)
 8004b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d031      	beq.n	8004bac <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	f003 0203 	and.w	r2, r3, #3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d12a      	bne.n	8004bac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d122      	bne.n	8004bac <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d11a      	bne.n	8004bac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	0a5b      	lsrs	r3, r3, #9
 8004b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b82:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d111      	bne.n	8004bac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	0c1b      	lsrs	r3, r3, #16
 8004b8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d108      	bne.n	8004bac <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	0e1b      	lsrs	r3, r3, #24
 8004b9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d001      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3730      	adds	r7, #48	; 0x30
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	58024400 	.word	0x58024400

08004bc0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e19c      	b.n	8004f0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd4:	4b8a      	ldr	r3, [pc, #552]	; (8004e00 <HAL_RCC_ClockConfig+0x240>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 030f 	and.w	r3, r3, #15
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d910      	bls.n	8004c04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be2:	4b87      	ldr	r3, [pc, #540]	; (8004e00 <HAL_RCC_ClockConfig+0x240>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f023 020f 	bic.w	r2, r3, #15
 8004bea:	4985      	ldr	r1, [pc, #532]	; (8004e00 <HAL_RCC_ClockConfig+0x240>)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf2:	4b83      	ldr	r3, [pc, #524]	; (8004e00 <HAL_RCC_ClockConfig+0x240>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e184      	b.n	8004f0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d010      	beq.n	8004c32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	4b7b      	ldr	r3, [pc, #492]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d908      	bls.n	8004c32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c20:	4b78      	ldr	r3, [pc, #480]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	4975      	ldr	r1, [pc, #468]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0308 	and.w	r3, r3, #8
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d010      	beq.n	8004c60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695a      	ldr	r2, [r3, #20]
 8004c42:	4b70      	ldr	r3, [pc, #448]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d908      	bls.n	8004c60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004c4e:	4b6d      	ldr	r3, [pc, #436]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004c50:	69db      	ldr	r3, [r3, #28]
 8004c52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	496a      	ldr	r1, [pc, #424]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d010      	beq.n	8004c8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	4b64      	ldr	r3, [pc, #400]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004c72:	69db      	ldr	r3, [r3, #28]
 8004c74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d908      	bls.n	8004c8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004c7c:	4b61      	ldr	r3, [pc, #388]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	699b      	ldr	r3, [r3, #24]
 8004c88:	495e      	ldr	r1, [pc, #376]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d010      	beq.n	8004cbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69da      	ldr	r2, [r3, #28]
 8004c9e:	4b59      	ldr	r3, [pc, #356]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004ca0:	6a1b      	ldr	r3, [r3, #32]
 8004ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d908      	bls.n	8004cbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004caa:	4b56      	ldr	r3, [pc, #344]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	4953      	ldr	r1, [pc, #332]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d010      	beq.n	8004cea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	4b4d      	ldr	r3, [pc, #308]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f003 030f 	and.w	r3, r3, #15
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d908      	bls.n	8004cea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cd8:	4b4a      	ldr	r3, [pc, #296]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	f023 020f 	bic.w	r2, r3, #15
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	4947      	ldr	r1, [pc, #284]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d055      	beq.n	8004da2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004cf6:	4b43      	ldr	r3, [pc, #268]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	4940      	ldr	r1, [pc, #256]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d107      	bne.n	8004d20 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d10:	4b3c      	ldr	r3, [pc, #240]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d121      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0f6      	b.n	8004f0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d107      	bne.n	8004d38 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d28:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d115      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0ea      	b.n	8004f0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d107      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004d40:	4b30      	ldr	r3, [pc, #192]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d109      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e0de      	b.n	8004f0e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d50:	4b2c      	ldr	r3, [pc, #176]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 0304 	and.w	r3, r3, #4
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e0d6      	b.n	8004f0e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004d60:	4b28      	ldr	r3, [pc, #160]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	f023 0207 	bic.w	r2, r3, #7
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4925      	ldr	r1, [pc, #148]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fd f8c5 	bl	8001f00 <HAL_GetTick>
 8004d76:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d7a:	f7fd f8c1 	bl	8001f00 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0be      	b.n	8004f0e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d90:	4b1c      	ldr	r3, [pc, #112]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d1eb      	bne.n	8004d7a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d010      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	4b14      	ldr	r3, [pc, #80]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d208      	bcs.n	8004dd0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dbe:	4b11      	ldr	r3, [pc, #68]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f023 020f 	bic.w	r2, r3, #15
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	490e      	ldr	r1, [pc, #56]	; (8004e04 <HAL_RCC_ClockConfig+0x244>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <HAL_RCC_ClockConfig+0x240>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d214      	bcs.n	8004e08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dde:	4b08      	ldr	r3, [pc, #32]	; (8004e00 <HAL_RCC_ClockConfig+0x240>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 020f 	bic.w	r2, r3, #15
 8004de6:	4906      	ldr	r1, [pc, #24]	; (8004e00 <HAL_RCC_ClockConfig+0x240>)
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dee:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <HAL_RCC_ClockConfig+0x240>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d005      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e086      	b.n	8004f0e <HAL_RCC_ClockConfig+0x34e>
 8004e00:	52002000 	.word	0x52002000
 8004e04:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d010      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691a      	ldr	r2, [r3, #16]
 8004e18:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d208      	bcs.n	8004e36 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e24:	4b3c      	ldr	r3, [pc, #240]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	4939      	ldr	r1, [pc, #228]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d010      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	695a      	ldr	r2, [r3, #20]
 8004e46:	4b34      	ldr	r3, [pc, #208]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d208      	bcs.n	8004e64 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e52:	4b31      	ldr	r3, [pc, #196]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	492e      	ldr	r1, [pc, #184]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0310 	and.w	r3, r3, #16
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d010      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699a      	ldr	r2, [r3, #24]
 8004e74:	4b28      	ldr	r3, [pc, #160]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d208      	bcs.n	8004e92 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004e80:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	4922      	ldr	r1, [pc, #136]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d010      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69da      	ldr	r2, [r3, #28]
 8004ea2:	4b1d      	ldr	r3, [pc, #116]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d208      	bcs.n	8004ec0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004eae:	4b1a      	ldr	r3, [pc, #104]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	4917      	ldr	r1, [pc, #92]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004ec0:	f000 f834 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	4b14      	ldr	r3, [pc, #80]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	0a1b      	lsrs	r3, r3, #8
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	4912      	ldr	r1, [pc, #72]	; (8004f1c <HAL_RCC_ClockConfig+0x35c>)
 8004ed2:	5ccb      	ldrb	r3, [r1, r3]
 8004ed4:	f003 031f 	and.w	r3, r3, #31
 8004ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8004edc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ede:	4b0e      	ldr	r3, [pc, #56]	; (8004f18 <HAL_RCC_ClockConfig+0x358>)
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f003 030f 	and.w	r3, r3, #15
 8004ee6:	4a0d      	ldr	r2, [pc, #52]	; (8004f1c <HAL_RCC_ClockConfig+0x35c>)
 8004ee8:	5cd3      	ldrb	r3, [r2, r3]
 8004eea:	f003 031f 	and.w	r3, r3, #31
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef4:	4a0a      	ldr	r2, [pc, #40]	; (8004f20 <HAL_RCC_ClockConfig+0x360>)
 8004ef6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004ef8:	4a0a      	ldr	r2, [pc, #40]	; (8004f24 <HAL_RCC_ClockConfig+0x364>)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004efe:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <HAL_RCC_ClockConfig+0x368>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fc fc54 	bl	80017b0 <HAL_InitTick>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3718      	adds	r7, #24
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	58024400 	.word	0x58024400
 8004f1c:	08017ed0 	.word	0x08017ed0
 8004f20:	24000034 	.word	0x24000034
 8004f24:	24000030 	.word	0x24000030
 8004f28:	24000038 	.word	0x24000038

08004f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	; 0x24
 8004f30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f32:	4bb3      	ldr	r3, [pc, #716]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f3a:	2b18      	cmp	r3, #24
 8004f3c:	f200 8155 	bhi.w	80051ea <HAL_RCC_GetSysClockFreq+0x2be>
 8004f40:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004fad 	.word	0x08004fad
 8004f4c:	080051eb 	.word	0x080051eb
 8004f50:	080051eb 	.word	0x080051eb
 8004f54:	080051eb 	.word	0x080051eb
 8004f58:	080051eb 	.word	0x080051eb
 8004f5c:	080051eb 	.word	0x080051eb
 8004f60:	080051eb 	.word	0x080051eb
 8004f64:	080051eb 	.word	0x080051eb
 8004f68:	08004fd3 	.word	0x08004fd3
 8004f6c:	080051eb 	.word	0x080051eb
 8004f70:	080051eb 	.word	0x080051eb
 8004f74:	080051eb 	.word	0x080051eb
 8004f78:	080051eb 	.word	0x080051eb
 8004f7c:	080051eb 	.word	0x080051eb
 8004f80:	080051eb 	.word	0x080051eb
 8004f84:	080051eb 	.word	0x080051eb
 8004f88:	08004fd9 	.word	0x08004fd9
 8004f8c:	080051eb 	.word	0x080051eb
 8004f90:	080051eb 	.word	0x080051eb
 8004f94:	080051eb 	.word	0x080051eb
 8004f98:	080051eb 	.word	0x080051eb
 8004f9c:	080051eb 	.word	0x080051eb
 8004fa0:	080051eb 	.word	0x080051eb
 8004fa4:	080051eb 	.word	0x080051eb
 8004fa8:	08004fdf 	.word	0x08004fdf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fac:	4b94      	ldr	r3, [pc, #592]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0320 	and.w	r3, r3, #32
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d009      	beq.n	8004fcc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004fb8:	4b91      	ldr	r3, [pc, #580]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	08db      	lsrs	r3, r3, #3
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	4a90      	ldr	r2, [pc, #576]	; (8005204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004fca:	e111      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004fcc:	4b8d      	ldr	r3, [pc, #564]	; (8005204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fce:	61bb      	str	r3, [r7, #24]
    break;
 8004fd0:	e10e      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004fd2:	4b8d      	ldr	r3, [pc, #564]	; (8005208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004fd4:	61bb      	str	r3, [r7, #24]
    break;
 8004fd6:	e10b      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004fd8:	4b8c      	ldr	r3, [pc, #560]	; (800520c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004fda:	61bb      	str	r3, [r7, #24]
    break;
 8004fdc:	e108      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fde:	4b88      	ldr	r3, [pc, #544]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004fe8:	4b85      	ldr	r3, [pc, #532]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fec:	091b      	lsrs	r3, r3, #4
 8004fee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ff2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004ff4:	4b82      	ldr	r3, [pc, #520]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004ffe:	4b80      	ldr	r3, [pc, #512]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	08db      	lsrs	r3, r3, #3
 8005004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	fb02 f303 	mul.w	r3, r2, r3
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005016:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80e1 	beq.w	80051e4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b02      	cmp	r3, #2
 8005026:	f000 8083 	beq.w	8005130 <HAL_RCC_GetSysClockFreq+0x204>
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2b02      	cmp	r3, #2
 800502e:	f200 80a1 	bhi.w	8005174 <HAL_RCC_GetSysClockFreq+0x248>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d003      	beq.n	8005040 <HAL_RCC_GetSysClockFreq+0x114>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d056      	beq.n	80050ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800503e:	e099      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005040:	4b6f      	ldr	r3, [pc, #444]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0320 	and.w	r3, r3, #32
 8005048:	2b00      	cmp	r3, #0
 800504a:	d02d      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800504c:	4b6c      	ldr	r3, [pc, #432]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	08db      	lsrs	r3, r3, #3
 8005052:	f003 0303 	and.w	r3, r3, #3
 8005056:	4a6b      	ldr	r2, [pc, #428]	; (8005204 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005058:	fa22 f303 	lsr.w	r3, r2, r3
 800505c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	ee07 3a90 	vmov	s15, r3
 8005064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	ee07 3a90 	vmov	s15, r3
 800506e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005076:	4b62      	ldr	r3, [pc, #392]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800507e:	ee07 3a90 	vmov	s15, r3
 8005082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005086:	ed97 6a02 	vldr	s12, [r7, #8]
 800508a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800508e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800509a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800509e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80050a6:	e087      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	ee07 3a90 	vmov	s15, r3
 80050ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050b2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005214 <HAL_RCC_GetSysClockFreq+0x2e8>
 80050b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ba:	4b51      	ldr	r3, [pc, #324]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c2:	ee07 3a90 	vmov	s15, r3
 80050c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80050ce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005210 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80050ea:	e065      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	ee07 3a90 	vmov	s15, r3
 80050f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050f6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005218 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050fe:	4b40      	ldr	r3, [pc, #256]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005106:	ee07 3a90 	vmov	s15, r3
 800510a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800510e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005112:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005210 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800511a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800511e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800512a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800512e:	e043      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	ee07 3a90 	vmov	s15, r3
 8005136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800513a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800521c <HAL_RCC_GetSysClockFreq+0x2f0>
 800513e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005142:	4b2f      	ldr	r3, [pc, #188]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800514a:	ee07 3a90 	vmov	s15, r3
 800514e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005152:	ed97 6a02 	vldr	s12, [r7, #8]
 8005156:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800515a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800515e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800516a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800516e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005172:	e021      	b.n	80051b8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	ee07 3a90 	vmov	s15, r3
 800517a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800517e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005218 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005186:	4b1e      	ldr	r3, [pc, #120]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518e:	ee07 3a90 	vmov	s15, r3
 8005192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005196:	ed97 6a02 	vldr	s12, [r7, #8]
 800519a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005210 <HAL_RCC_GetSysClockFreq+0x2e4>
 800519e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051b6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80051b8:	4b11      	ldr	r3, [pc, #68]	; (8005200 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051bc:	0a5b      	lsrs	r3, r3, #9
 80051be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c2:	3301      	adds	r3, #1
 80051c4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	ee07 3a90 	vmov	s15, r3
 80051cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80051d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051dc:	ee17 3a90 	vmov	r3, s15
 80051e0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80051e2:	e005      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61bb      	str	r3, [r7, #24]
    break;
 80051e8:	e002      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80051ea:	4b07      	ldr	r3, [pc, #28]	; (8005208 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80051ec:	61bb      	str	r3, [r7, #24]
    break;
 80051ee:	bf00      	nop
  }

  return sysclockfreq;
 80051f0:	69bb      	ldr	r3, [r7, #24]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3724      	adds	r7, #36	; 0x24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	58024400 	.word	0x58024400
 8005204:	03d09000 	.word	0x03d09000
 8005208:	003d0900 	.word	0x003d0900
 800520c:	017d7840 	.word	0x017d7840
 8005210:	46000000 	.word	0x46000000
 8005214:	4c742400 	.word	0x4c742400
 8005218:	4a742400 	.word	0x4a742400
 800521c:	4bbebc20 	.word	0x4bbebc20

08005220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005226:	f7ff fe81 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 800522a:	4602      	mov	r2, r0
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <HAL_RCC_GetHCLKFreq+0x50>)
 800522e:	699b      	ldr	r3, [r3, #24]
 8005230:	0a1b      	lsrs	r3, r3, #8
 8005232:	f003 030f 	and.w	r3, r3, #15
 8005236:	490f      	ldr	r1, [pc, #60]	; (8005274 <HAL_RCC_GetHCLKFreq+0x54>)
 8005238:	5ccb      	ldrb	r3, [r1, r3]
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	fa22 f303 	lsr.w	r3, r2, r3
 8005242:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <HAL_RCC_GetHCLKFreq+0x50>)
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	4a09      	ldr	r2, [pc, #36]	; (8005274 <HAL_RCC_GetHCLKFreq+0x54>)
 800524e:	5cd3      	ldrb	r3, [r2, r3]
 8005250:	f003 031f 	and.w	r3, r3, #31
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	fa22 f303 	lsr.w	r3, r2, r3
 800525a:	4a07      	ldr	r2, [pc, #28]	; (8005278 <HAL_RCC_GetHCLKFreq+0x58>)
 800525c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800525e:	4a07      	ldr	r2, [pc, #28]	; (800527c <HAL_RCC_GetHCLKFreq+0x5c>)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005264:	4b04      	ldr	r3, [pc, #16]	; (8005278 <HAL_RCC_GetHCLKFreq+0x58>)
 8005266:	681b      	ldr	r3, [r3, #0]
}
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	58024400 	.word	0x58024400
 8005274:	08017ed0 	.word	0x08017ed0
 8005278:	24000034 	.word	0x24000034
 800527c:	24000030 	.word	0x24000030

08005280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005284:	f7ff ffcc 	bl	8005220 <HAL_RCC_GetHCLKFreq>
 8005288:	4602      	mov	r2, r0
 800528a:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	091b      	lsrs	r3, r3, #4
 8005290:	f003 0307 	and.w	r3, r3, #7
 8005294:	4904      	ldr	r1, [pc, #16]	; (80052a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005296:	5ccb      	ldrb	r3, [r1, r3]
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	58024400 	.word	0x58024400
 80052a8:	08017ed0 	.word	0x08017ed0

080052ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	223f      	movs	r2, #63	; 0x3f
 80052ba:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052bc:	4b1a      	ldr	r3, [pc, #104]	; (8005328 <HAL_RCC_GetClockConfig+0x7c>)
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f003 0207 	and.w	r2, r3, #7
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80052c8:	4b17      	ldr	r3, [pc, #92]	; (8005328 <HAL_RCC_GetClockConfig+0x7c>)
 80052ca:	699b      	ldr	r3, [r3, #24]
 80052cc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80052d4:	4b14      	ldr	r3, [pc, #80]	; (8005328 <HAL_RCC_GetClockConfig+0x7c>)
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f003 020f 	and.w	r2, r3, #15
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80052e0:	4b11      	ldr	r3, [pc, #68]	; (8005328 <HAL_RCC_GetClockConfig+0x7c>)
 80052e2:	699b      	ldr	r3, [r3, #24]
 80052e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80052ec:	4b0e      	ldr	r3, [pc, #56]	; (8005328 <HAL_RCC_GetClockConfig+0x7c>)
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <HAL_RCC_GetClockConfig+0x7c>)
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8005304:	4b08      	ldr	r3, [pc, #32]	; (8005328 <HAL_RCC_GetClockConfig+0x7c>)
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005310:	4b06      	ldr	r3, [pc, #24]	; (800532c <HAL_RCC_GetClockConfig+0x80>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 020f 	and.w	r2, r3, #15
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	601a      	str	r2, [r3, #0]
}
 800531c:	bf00      	nop
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr
 8005328:	58024400 	.word	0x58024400
 800532c:	52002000 	.word	0x52002000

08005330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e049      	b.n	80053d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005348:	b2db      	uxtb	r3, r3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d106      	bne.n	800535c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f841 	bl	80053de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	3304      	adds	r3, #4
 800536c:	4619      	mov	r1, r3
 800536e:	4610      	mov	r0, r2
 8005370:	f000 f9f8 	bl	8005764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
	...

080053f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d001      	beq.n	800540c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	e04f      	b.n	80054ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f042 0201 	orr.w	r2, r2, #1
 8005422:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a23      	ldr	r2, [pc, #140]	; (80054b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d01d      	beq.n	800546a <HAL_TIM_Base_Start_IT+0x76>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005436:	d018      	beq.n	800546a <HAL_TIM_Base_Start_IT+0x76>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a1f      	ldr	r2, [pc, #124]	; (80054bc <HAL_TIM_Base_Start_IT+0xc8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d013      	beq.n	800546a <HAL_TIM_Base_Start_IT+0x76>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a1e      	ldr	r2, [pc, #120]	; (80054c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d00e      	beq.n	800546a <HAL_TIM_Base_Start_IT+0x76>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a1c      	ldr	r2, [pc, #112]	; (80054c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d009      	beq.n	800546a <HAL_TIM_Base_Start_IT+0x76>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1b      	ldr	r2, [pc, #108]	; (80054c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d004      	beq.n	800546a <HAL_TIM_Base_Start_IT+0x76>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a19      	ldr	r2, [pc, #100]	; (80054cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d115      	bne.n	8005496 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	689a      	ldr	r2, [r3, #8]
 8005470:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005472:	4013      	ands	r3, r2
 8005474:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2b06      	cmp	r3, #6
 800547a:	d015      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0xb4>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005482:	d011      	beq.n	80054a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005494:	e008      	b.n	80054a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e000      	b.n	80054aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40000400 	.word	0x40000400
 80054c0:	40000800 	.word	0x40000800
 80054c4:	40000c00 	.word	0x40000c00
 80054c8:	40010400 	.word	0x40010400
 80054cc:	40001800 	.word	0x40001800
 80054d0:	00010007 	.word	0x00010007

080054d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0202 	mvn.w	r2, #2
 8005500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2201      	movs	r2, #1
 8005506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	699b      	ldr	r3, [r3, #24]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f905 	bl	8005726 <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f8f7 	bl	8005712 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f908 	bl	800573a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b04      	cmp	r3, #4
 800553c:	d122      	bne.n	8005584 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b04      	cmp	r3, #4
 800554a:	d11b      	bne.n	8005584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0204 	mvn.w	r2, #4
 8005554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2202      	movs	r2, #2
 800555a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f8db 	bl	8005726 <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f8cd 	bl	8005712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 f8de 	bl	800573a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b08      	cmp	r3, #8
 8005590:	d122      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0308 	and.w	r3, r3, #8
 800559c:	2b08      	cmp	r3, #8
 800559e:	d11b      	bne.n	80055d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0208 	mvn.w	r2, #8
 80055a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2204      	movs	r2, #4
 80055ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	f003 0303 	and.w	r3, r3, #3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f8b1 	bl	8005726 <HAL_TIM_IC_CaptureCallback>
 80055c4:	e005      	b.n	80055d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 f8a3 	bl	8005712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 f8b4 	bl	800573a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0310 	and.w	r3, r3, #16
 80055e2:	2b10      	cmp	r3, #16
 80055e4:	d122      	bne.n	800562c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f003 0310 	and.w	r3, r3, #16
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	d11b      	bne.n	800562c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f06f 0210 	mvn.w	r2, #16
 80055fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2208      	movs	r2, #8
 8005602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f887 	bl	8005726 <HAL_TIM_IC_CaptureCallback>
 8005618:	e005      	b.n	8005626 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f879 	bl	8005712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f88a 	bl	800573a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b01      	cmp	r3, #1
 8005638:	d10e      	bne.n	8005658 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b01      	cmp	r3, #1
 8005646:	d107      	bne.n	8005658 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0201 	mvn.w	r2, #1
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fc f918 	bl	8001888 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005662:	2b80      	cmp	r3, #128	; 0x80
 8005664:	d10e      	bne.n	8005684 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005670:	2b80      	cmp	r3, #128	; 0x80
 8005672:	d107      	bne.n	8005684 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800567c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f914 	bl	80058ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005692:	d10e      	bne.n	80056b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800569e:	2b80      	cmp	r3, #128	; 0x80
 80056a0:	d107      	bne.n	80056b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80056aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f907 	bl	80058c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b40      	cmp	r3, #64	; 0x40
 80056be:	d10e      	bne.n	80056de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b40      	cmp	r3, #64	; 0x40
 80056cc:	d107      	bne.n	80056de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f838 	bl	800574e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f003 0320 	and.w	r3, r3, #32
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d10e      	bne.n	800570a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b20      	cmp	r3, #32
 80056f8:	d107      	bne.n	800570a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f06f 0220 	mvn.w	r2, #32
 8005702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f000 f8c7 	bl	8005898 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800570a:	bf00      	nop
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005712:	b480      	push	{r7}
 8005714:	b083      	sub	sp, #12
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr

0800574e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800574e:	b480      	push	{r7}
 8005750:	b083      	sub	sp, #12
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005756:	bf00      	nop
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
	...

08005764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a40      	ldr	r2, [pc, #256]	; (8005878 <TIM_Base_SetConfig+0x114>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d013      	beq.n	80057a4 <TIM_Base_SetConfig+0x40>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005782:	d00f      	beq.n	80057a4 <TIM_Base_SetConfig+0x40>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a3d      	ldr	r2, [pc, #244]	; (800587c <TIM_Base_SetConfig+0x118>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00b      	beq.n	80057a4 <TIM_Base_SetConfig+0x40>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a3c      	ldr	r2, [pc, #240]	; (8005880 <TIM_Base_SetConfig+0x11c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d007      	beq.n	80057a4 <TIM_Base_SetConfig+0x40>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a3b      	ldr	r2, [pc, #236]	; (8005884 <TIM_Base_SetConfig+0x120>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_Base_SetConfig+0x40>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a3a      	ldr	r2, [pc, #232]	; (8005888 <TIM_Base_SetConfig+0x124>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d108      	bne.n	80057b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a2f      	ldr	r2, [pc, #188]	; (8005878 <TIM_Base_SetConfig+0x114>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d01f      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c4:	d01b      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a2c      	ldr	r2, [pc, #176]	; (800587c <TIM_Base_SetConfig+0x118>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d017      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a2b      	ldr	r2, [pc, #172]	; (8005880 <TIM_Base_SetConfig+0x11c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d013      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a2a      	ldr	r2, [pc, #168]	; (8005884 <TIM_Base_SetConfig+0x120>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00f      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a29      	ldr	r2, [pc, #164]	; (8005888 <TIM_Base_SetConfig+0x124>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00b      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a28      	ldr	r2, [pc, #160]	; (800588c <TIM_Base_SetConfig+0x128>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a27      	ldr	r2, [pc, #156]	; (8005890 <TIM_Base_SetConfig+0x12c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d003      	beq.n	80057fe <TIM_Base_SetConfig+0x9a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a26      	ldr	r2, [pc, #152]	; (8005894 <TIM_Base_SetConfig+0x130>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d108      	bne.n	8005810 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a10      	ldr	r2, [pc, #64]	; (8005878 <TIM_Base_SetConfig+0x114>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00f      	beq.n	800585c <TIM_Base_SetConfig+0xf8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a12      	ldr	r2, [pc, #72]	; (8005888 <TIM_Base_SetConfig+0x124>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00b      	beq.n	800585c <TIM_Base_SetConfig+0xf8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a11      	ldr	r2, [pc, #68]	; (800588c <TIM_Base_SetConfig+0x128>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d007      	beq.n	800585c <TIM_Base_SetConfig+0xf8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a10      	ldr	r2, [pc, #64]	; (8005890 <TIM_Base_SetConfig+0x12c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_Base_SetConfig+0xf8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a0f      	ldr	r2, [pc, #60]	; (8005894 <TIM_Base_SetConfig+0x130>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d103      	bne.n	8005864 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	615a      	str	r2, [r3, #20]
}
 800586a:	bf00      	nop
 800586c:	3714      	adds	r7, #20
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	40010000 	.word	0x40010000
 800587c:	40000400 	.word	0x40000400
 8005880:	40000800 	.word	0x40000800
 8005884:	40000c00 	.word	0x40000c00
 8005888:	40010400 	.word	0x40010400
 800588c:	40014000 	.word	0x40014000
 8005890:	40014400 	.word	0x40014400
 8005894:	40014800 	.word	0x40014800

08005898 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058b4:	bf00      	nop
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f103 0208 	add.w	r2, r3, #8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f103 0208 	add.w	r2, r3, #8
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f103 0208 	add.w	r2, r3, #8
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800592e:	b480      	push	{r7}
 8005930:	b085      	sub	sp, #20
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	683a      	ldr	r2, [r7, #0]
 8005952:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	1c5a      	adds	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	601a      	str	r2, [r3, #0]
}
 800596a:	bf00      	nop
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800598c:	d103      	bne.n	8005996 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	e00c      	b.n	80059b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	3308      	adds	r3, #8
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e002      	b.n	80059a4 <vListInsert+0x2e>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	60fb      	str	r3, [r7, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d2f6      	bcs.n	800599e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]
}
 80059dc:	bf00      	nop
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6892      	ldr	r2, [r2, #8]
 80059fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	6852      	ldr	r2, [r2, #4]
 8005a08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	687a      	ldr	r2, [r7, #4]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d103      	bne.n	8005a1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689a      	ldr	r2, [r3, #8]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	1e5a      	subs	r2, r3, #1
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d10a      	bne.n	8005a66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005a66:	f002 ff75 	bl	8008954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	68f9      	ldr	r1, [r7, #12]
 8005a74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a76:	fb01 f303 	mul.w	r3, r1, r3
 8005a7a:	441a      	add	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2200      	movs	r2, #0
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	3b01      	subs	r3, #1
 8005a98:	68f9      	ldr	r1, [r7, #12]
 8005a9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005a9c:	fb01 f303 	mul.w	r3, r1, r3
 8005aa0:	441a      	add	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	22ff      	movs	r2, #255	; 0xff
 8005aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	22ff      	movs	r2, #255	; 0xff
 8005ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d114      	bne.n	8005ae6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01a      	beq.n	8005afa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3310      	adds	r3, #16
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f001 fc31 	bl	8007330 <xTaskRemoveFromEventList>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d012      	beq.n	8005afa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005ad4:	4b0c      	ldr	r3, [pc, #48]	; (8005b08 <xQueueGenericReset+0xcc>)
 8005ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	f3bf 8f4f 	dsb	sy
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	e009      	b.n	8005afa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3310      	adds	r3, #16
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff fef2 	bl	80058d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	3324      	adds	r3, #36	; 0x24
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff feed 	bl	80058d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005afa:	f002 ff5b 	bl	80089b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005afe:	2301      	movs	r3, #1
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3710      	adds	r7, #16
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b08a      	sub	sp, #40	; 0x28
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	60f8      	str	r0, [r7, #12]
 8005b14:	60b9      	str	r1, [r7, #8]
 8005b16:	4613      	mov	r3, r2
 8005b18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10a      	bne.n	8005b36 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	613b      	str	r3, [r7, #16]
}
 8005b32:	bf00      	nop
 8005b34:	e7fe      	b.n	8005b34 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	fb02 f303 	mul.w	r3, r2, r3
 8005b3e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	3350      	adds	r3, #80	; 0x50
 8005b44:	4618      	mov	r0, r3
 8005b46:	f002 fbed 	bl	8008324 <pvPortMalloc>
 8005b4a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00d      	beq.n	8005b6e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	3350      	adds	r3, #80	; 0x50
 8005b5a:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b5c:	79fa      	ldrb	r2, [r7, #7]
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	9300      	str	r3, [sp, #0]
 8005b62:	4613      	mov	r3, r2
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	68b9      	ldr	r1, [r7, #8]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f000 f805 	bl	8005b78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005b6e:	69bb      	ldr	r3, [r7, #24]
	}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3720      	adds	r7, #32
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d103      	bne.n	8005b94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	e002      	b.n	8005b9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	69b8      	ldr	r0, [r7, #24]
 8005baa:	f7ff ff47 	bl	8005a3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	78fa      	ldrb	r2, [r7, #3]
 8005bb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005bb6:	bf00      	nop
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b082      	sub	sp, #8
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00e      	beq.n	8005bea <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005bde:	2300      	movs	r3, #0
 8005be0:	2200      	movs	r2, #0
 8005be2:	2100      	movs	r1, #0
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f84f 	bl	8005c88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b086      	sub	sp, #24
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	617b      	str	r3, [r7, #20]
 8005c00:	2300      	movs	r3, #0
 8005c02:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005c04:	79fb      	ldrb	r3, [r7, #7]
 8005c06:	461a      	mov	r2, r3
 8005c08:	6939      	ldr	r1, [r7, #16]
 8005c0a:	6978      	ldr	r0, [r7, #20]
 8005c0c:	f7ff ff7e 	bl	8005b0c <xQueueGenericCreate>
 8005c10:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f7ff ffd3 	bl	8005bbe <prvInitialiseMutex>

		return xNewQueue;
 8005c18:	68fb      	ldr	r3, [r7, #12]
	}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3718      	adds	r7, #24
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b086      	sub	sp, #24
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
 8005c2a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d10a      	bne.n	8005c48 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	613b      	str	r3, [r7, #16]
}
 8005c44:	bf00      	nop
 8005c46:	e7fe      	b.n	8005c46 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d90a      	bls.n	8005c66 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	60fb      	str	r3, [r7, #12]
}
 8005c62:	bf00      	nop
 8005c64:	e7fe      	b.n	8005c64 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005c66:	2202      	movs	r2, #2
 8005c68:	2100      	movs	r1, #0
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f7ff ff4e 	bl	8005b0c <xQueueGenericCreate>
 8005c70:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005c7e:	697b      	ldr	r3, [r7, #20]
	}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b08e      	sub	sp, #56	; 0x38
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	60f8      	str	r0, [r7, #12]
 8005c90:	60b9      	str	r1, [r7, #8]
 8005c92:	607a      	str	r2, [r7, #4]
 8005c94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c96:	2300      	movs	r3, #0
 8005c98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <xQueueGenericSend+0x32>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d103      	bne.n	8005cc8 <xQueueGenericSend+0x40>
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d101      	bne.n	8005ccc <xQueueGenericSend+0x44>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <xQueueGenericSend+0x46>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <xQueueGenericSend+0x60>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d103      	bne.n	8005cf6 <xQueueGenericSend+0x6e>
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d101      	bne.n	8005cfa <xQueueGenericSend+0x72>
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e000      	b.n	8005cfc <xQueueGenericSend+0x74>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10a      	bne.n	8005d16 <xQueueGenericSend+0x8e>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	623b      	str	r3, [r7, #32]
}
 8005d12:	bf00      	nop
 8005d14:	e7fe      	b.n	8005d14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d16:	f001 fd5f 	bl	80077d8 <xTaskGetSchedulerState>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d102      	bne.n	8005d26 <xQueueGenericSend+0x9e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <xQueueGenericSend+0xa2>
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <xQueueGenericSend+0xa4>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d10a      	bne.n	8005d46 <xQueueGenericSend+0xbe>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	61fb      	str	r3, [r7, #28]
}
 8005d42:	bf00      	nop
 8005d44:	e7fe      	b.n	8005d44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d46:	f002 fe05 	bl	8008954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d302      	bcc.n	8005d5c <xQueueGenericSend+0xd4>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d129      	bne.n	8005db0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d5c:	683a      	ldr	r2, [r7, #0]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d62:	f000 fc95 	bl	8006690 <prvCopyDataToQueue>
 8005d66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d010      	beq.n	8005d92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d72:	3324      	adds	r3, #36	; 0x24
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 fadb 	bl	8007330 <xTaskRemoveFromEventList>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d013      	beq.n	8005da8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d80:	4b3f      	ldr	r3, [pc, #252]	; (8005e80 <xQueueGenericSend+0x1f8>)
 8005d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	e00a      	b.n	8005da8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d98:	4b39      	ldr	r3, [pc, #228]	; (8005e80 <xQueueGenericSend+0x1f8>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005da8:	f002 fe04 	bl	80089b4 <vPortExitCritical>
				return pdPASS;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e063      	b.n	8005e78 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005db6:	f002 fdfd 	bl	80089b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e05c      	b.n	8005e78 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dc4:	f107 0314 	add.w	r3, r7, #20
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f001 fb13 	bl	80073f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dd2:	f002 fdef 	bl	80089b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dd6:	f001 f82d 	bl	8006e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dda:	f002 fdbb 	bl	8008954 <vPortEnterCritical>
 8005dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005dea:	d103      	bne.n	8005df4 <xQueueGenericSend+0x16c>
 8005dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e00:	d103      	bne.n	8005e0a <xQueueGenericSend+0x182>
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e0a:	f002 fdd3 	bl	80089b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e0e:	1d3a      	adds	r2, r7, #4
 8005e10:	f107 0314 	add.w	r3, r7, #20
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f001 fb02 	bl	8007420 <xTaskCheckForTimeOut>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d124      	bne.n	8005e6c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e24:	f000 fd2c 	bl	8006880 <prvIsQueueFull>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d018      	beq.n	8005e60 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	3310      	adds	r3, #16
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f001 fa56 	bl	80072e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e3e:	f000 fcb7 	bl	80067b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e42:	f001 f805 	bl	8006e50 <xTaskResumeAll>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f47f af7c 	bne.w	8005d46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e4e:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <xQueueGenericSend+0x1f8>)
 8005e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	e772      	b.n	8005d46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e62:	f000 fca5 	bl	80067b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e66:	f000 fff3 	bl	8006e50 <xTaskResumeAll>
 8005e6a:	e76c      	b.n	8005d46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e6e:	f000 fc9f 	bl	80067b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e72:	f000 ffed 	bl	8006e50 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e76:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3738      	adds	r7, #56	; 0x38
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b090      	sub	sp, #64	; 0x40
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10a      	bne.n	8005eb2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005eae:	bf00      	nop
 8005eb0:	e7fe      	b.n	8005eb0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d103      	bne.n	8005ec0 <xQueueGenericSendFromISR+0x3c>
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <xQueueGenericSendFromISR+0x40>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <xQueueGenericSendFromISR+0x42>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005edc:	bf00      	nop
 8005ede:	e7fe      	b.n	8005ede <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d103      	bne.n	8005eee <xQueueGenericSendFromISR+0x6a>
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <xQueueGenericSendFromISR+0x6e>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e000      	b.n	8005ef4 <xQueueGenericSendFromISR+0x70>
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d10a      	bne.n	8005f0e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005efc:	f383 8811 	msr	BASEPRI, r3
 8005f00:	f3bf 8f6f 	isb	sy
 8005f04:	f3bf 8f4f 	dsb	sy
 8005f08:	623b      	str	r3, [r7, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	e7fe      	b.n	8005f0c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f0e:	f002 fe03 	bl	8008b18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f12:	f3ef 8211 	mrs	r2, BASEPRI
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	61fa      	str	r2, [r7, #28]
 8005f28:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f2a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f2c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d302      	bcc.n	8005f40 <xQueueGenericSendFromISR+0xbc>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d12f      	bne.n	8005fa0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	68b9      	ldr	r1, [r7, #8]
 8005f54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f56:	f000 fb9b 	bl	8006690 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f62:	d112      	bne.n	8005f8a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d016      	beq.n	8005f9a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	3324      	adds	r3, #36	; 0x24
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 f9dd 	bl	8007330 <xTaskRemoveFromEventList>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d00e      	beq.n	8005f9a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	e007      	b.n	8005f9a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005f8e:	3301      	adds	r3, #1
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	b25a      	sxtb	r2, r3
 8005f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005f9e:	e001      	b.n	8005fa4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3740      	adds	r7, #64	; 0x40
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b08e      	sub	sp, #56	; 0x38
 8005fbe:	af00      	add	r7, sp, #0
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	623b      	str	r3, [r7, #32]
}
 8005fe0:	bf00      	nop
 8005fe2:	e7fe      	b.n	8005fe2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff0:	f383 8811 	msr	BASEPRI, r3
 8005ff4:	f3bf 8f6f 	isb	sy
 8005ff8:	f3bf 8f4f 	dsb	sy
 8005ffc:	61fb      	str	r3, [r7, #28]
}
 8005ffe:	bf00      	nop
 8006000:	e7fe      	b.n	8006000 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <xQueueGiveFromISR+0x58>
 800600a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <xQueueGiveFromISR+0x5c>
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <xQueueGiveFromISR+0x5e>
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xQueueGiveFromISR+0x78>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	61bb      	str	r3, [r7, #24]
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006032:	f002 fd71 	bl	8008b18 <vPortValidateInterruptPriority>
	__asm volatile
 8006036:	f3ef 8211 	mrs	r2, BASEPRI
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	617a      	str	r2, [r7, #20]
 800604c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800604e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006050:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800605e:	429a      	cmp	r2, r3
 8006060:	d22b      	bcs.n	80060ba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006072:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006074:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800607c:	d112      	bne.n	80060a4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	2b00      	cmp	r3, #0
 8006084:	d016      	beq.n	80060b4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006088:	3324      	adds	r3, #36	; 0x24
 800608a:	4618      	mov	r0, r3
 800608c:	f001 f950 	bl	8007330 <xTaskRemoveFromEventList>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d00e      	beq.n	80060b4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00b      	beq.n	80060b4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	2201      	movs	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e007      	b.n	80060b4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80060a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060a8:	3301      	adds	r3, #1
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	b25a      	sxtb	r2, r3
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80060b4:	2301      	movs	r3, #1
 80060b6:	637b      	str	r3, [r7, #52]	; 0x34
 80060b8:	e001      	b.n	80060be <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80060ba:	2300      	movs	r3, #0
 80060bc:	637b      	str	r3, [r7, #52]	; 0x34
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f383 8811 	msr	BASEPRI, r3
}
 80060c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3738      	adds	r7, #56	; 0x38
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b08c      	sub	sp, #48	; 0x30
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80060e0:	2300      	movs	r3, #0
 80060e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10a      	bne.n	8006104 <xQueueReceive+0x30>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	623b      	str	r3, [r7, #32]
}
 8006100:	bf00      	nop
 8006102:	e7fe      	b.n	8006102 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <xQueueReceive+0x3e>
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	d101      	bne.n	8006116 <xQueueReceive+0x42>
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <xQueueReceive+0x44>
 8006116:	2300      	movs	r3, #0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d10a      	bne.n	8006132 <xQueueReceive+0x5e>
	__asm volatile
 800611c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006120:	f383 8811 	msr	BASEPRI, r3
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	f3bf 8f4f 	dsb	sy
 800612c:	61fb      	str	r3, [r7, #28]
}
 800612e:	bf00      	nop
 8006130:	e7fe      	b.n	8006130 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006132:	f001 fb51 	bl	80077d8 <xTaskGetSchedulerState>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d102      	bne.n	8006142 <xQueueReceive+0x6e>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <xQueueReceive+0x72>
 8006142:	2301      	movs	r3, #1
 8006144:	e000      	b.n	8006148 <xQueueReceive+0x74>
 8006146:	2300      	movs	r3, #0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10a      	bne.n	8006162 <xQueueReceive+0x8e>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	61bb      	str	r3, [r7, #24]
}
 800615e:	bf00      	nop
 8006160:	e7fe      	b.n	8006160 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006162:	f002 fbf7 	bl	8008954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	2b00      	cmp	r3, #0
 8006170:	d01f      	beq.n	80061b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006176:	f000 faf5 	bl	8006764 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	1e5a      	subs	r2, r3, #1
 800617e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006180:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00f      	beq.n	80061aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	3310      	adds	r3, #16
 800618e:	4618      	mov	r0, r3
 8006190:	f001 f8ce 	bl	8007330 <xTaskRemoveFromEventList>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d007      	beq.n	80061aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800619a:	4b3d      	ldr	r3, [pc, #244]	; (8006290 <xQueueReceive+0x1bc>)
 800619c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061a0:	601a      	str	r2, [r3, #0]
 80061a2:	f3bf 8f4f 	dsb	sy
 80061a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061aa:	f002 fc03 	bl	80089b4 <vPortExitCritical>
				return pdPASS;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e069      	b.n	8006286 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d103      	bne.n	80061c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061b8:	f002 fbfc 	bl	80089b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80061bc:	2300      	movs	r3, #0
 80061be:	e062      	b.n	8006286 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061c6:	f107 0310 	add.w	r3, r7, #16
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 f912 	bl	80073f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061d0:	2301      	movs	r3, #1
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061d4:	f002 fbee 	bl	80089b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061d8:	f000 fe2c 	bl	8006e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061dc:	f002 fbba 	bl	8008954 <vPortEnterCritical>
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e6:	b25b      	sxtb	r3, r3
 80061e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061ec:	d103      	bne.n	80061f6 <xQueueReceive+0x122>
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061fc:	b25b      	sxtb	r3, r3
 80061fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006202:	d103      	bne.n	800620c <xQueueReceive+0x138>
 8006204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006206:	2200      	movs	r2, #0
 8006208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800620c:	f002 fbd2 	bl	80089b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006210:	1d3a      	adds	r2, r7, #4
 8006212:	f107 0310 	add.w	r3, r7, #16
 8006216:	4611      	mov	r1, r2
 8006218:	4618      	mov	r0, r3
 800621a:	f001 f901 	bl	8007420 <xTaskCheckForTimeOut>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d123      	bne.n	800626c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006226:	f000 fb15 	bl	8006854 <prvIsQueueEmpty>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d017      	beq.n	8006260 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	3324      	adds	r3, #36	; 0x24
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	4611      	mov	r1, r2
 8006238:	4618      	mov	r0, r3
 800623a:	f001 f855 	bl	80072e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800623e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006240:	f000 fab6 	bl	80067b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006244:	f000 fe04 	bl	8006e50 <xTaskResumeAll>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d189      	bne.n	8006162 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800624e:	4b10      	ldr	r3, [pc, #64]	; (8006290 <xQueueReceive+0x1bc>)
 8006250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006254:	601a      	str	r2, [r3, #0]
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	e780      	b.n	8006162 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006260:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006262:	f000 faa5 	bl	80067b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006266:	f000 fdf3 	bl	8006e50 <xTaskResumeAll>
 800626a:	e77a      	b.n	8006162 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800626c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800626e:	f000 fa9f 	bl	80067b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006272:	f000 fded 	bl	8006e50 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006278:	f000 faec 	bl	8006854 <prvIsQueueEmpty>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	f43f af6f 	beq.w	8006162 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006284:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006286:	4618      	mov	r0, r3
 8006288:	3730      	adds	r7, #48	; 0x30
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop
 8006290:	e000ed04 	.word	0xe000ed04

08006294 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08e      	sub	sp, #56	; 0x38
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800629e:	2300      	movs	r3, #0
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80062a6:	2300      	movs	r3, #0
 80062a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80062aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10a      	bne.n	80062c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	623b      	str	r3, [r7, #32]
}
 80062c2:	bf00      	nop
 80062c4:	e7fe      	b.n	80062c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	61fb      	str	r3, [r7, #28]
}
 80062e0:	bf00      	nop
 80062e2:	e7fe      	b.n	80062e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062e4:	f001 fa78 	bl	80077d8 <xTaskGetSchedulerState>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d102      	bne.n	80062f4 <xQueueSemaphoreTake+0x60>
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <xQueueSemaphoreTake+0x64>
 80062f4:	2301      	movs	r3, #1
 80062f6:	e000      	b.n	80062fa <xQueueSemaphoreTake+0x66>
 80062f8:	2300      	movs	r3, #0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10a      	bne.n	8006314 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	61bb      	str	r3, [r7, #24]
}
 8006310:	bf00      	nop
 8006312:	e7fe      	b.n	8006312 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006314:	f002 fb1e 	bl	8008954 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800631a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800631c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800631e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006320:	2b00      	cmp	r3, #0
 8006322:	d024      	beq.n	800636e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	1e5a      	subs	r2, r3, #1
 8006328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d104      	bne.n	800633e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006334:	f001 fcb4 	bl	8007ca0 <pvTaskIncrementMutexHeldCount>
 8006338:	4602      	mov	r2, r0
 800633a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00f      	beq.n	8006366 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	3310      	adds	r3, #16
 800634a:	4618      	mov	r0, r3
 800634c:	f000 fff0 	bl	8007330 <xTaskRemoveFromEventList>
 8006350:	4603      	mov	r3, r0
 8006352:	2b00      	cmp	r3, #0
 8006354:	d007      	beq.n	8006366 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006356:	4b54      	ldr	r3, [pc, #336]	; (80064a8 <xQueueSemaphoreTake+0x214>)
 8006358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006366:	f002 fb25 	bl	80089b4 <vPortExitCritical>
				return pdPASS;
 800636a:	2301      	movs	r3, #1
 800636c:	e097      	b.n	800649e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d111      	bne.n	8006398 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00a      	beq.n	8006390 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	617b      	str	r3, [r7, #20]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006390:	f002 fb10 	bl	80089b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006394:	2300      	movs	r3, #0
 8006396:	e082      	b.n	800649e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639a:	2b00      	cmp	r3, #0
 800639c:	d106      	bne.n	80063ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800639e:	f107 030c 	add.w	r3, r7, #12
 80063a2:	4618      	mov	r0, r3
 80063a4:	f001 f826 	bl	80073f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80063a8:	2301      	movs	r3, #1
 80063aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063ac:	f002 fb02 	bl	80089b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063b0:	f000 fd40 	bl	8006e34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063b4:	f002 face 	bl	8008954 <vPortEnterCritical>
 80063b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063be:	b25b      	sxtb	r3, r3
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063c4:	d103      	bne.n	80063ce <xQueueSemaphoreTake+0x13a>
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	2200      	movs	r2, #0
 80063ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063d4:	b25b      	sxtb	r3, r3
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063da:	d103      	bne.n	80063e4 <xQueueSemaphoreTake+0x150>
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	2200      	movs	r2, #0
 80063e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063e4:	f002 fae6 	bl	80089b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063e8:	463a      	mov	r2, r7
 80063ea:	f107 030c 	add.w	r3, r7, #12
 80063ee:	4611      	mov	r1, r2
 80063f0:	4618      	mov	r0, r3
 80063f2:	f001 f815 	bl	8007420 <xTaskCheckForTimeOut>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d132      	bne.n	8006462 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063fe:	f000 fa29 	bl	8006854 <prvIsQueueEmpty>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d026      	beq.n	8006456 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d109      	bne.n	8006424 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8006410:	f002 faa0 	bl	8008954 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	4618      	mov	r0, r3
 800641a:	f001 f9fb 	bl	8007814 <xTaskPriorityInherit>
 800641e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006420:	f002 fac8 	bl	80089b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006426:	3324      	adds	r3, #36	; 0x24
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	4611      	mov	r1, r2
 800642c:	4618      	mov	r0, r3
 800642e:	f000 ff5b 	bl	80072e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006434:	f000 f9bc 	bl	80067b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006438:	f000 fd0a 	bl	8006e50 <xTaskResumeAll>
 800643c:	4603      	mov	r3, r0
 800643e:	2b00      	cmp	r3, #0
 8006440:	f47f af68 	bne.w	8006314 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006444:	4b18      	ldr	r3, [pc, #96]	; (80064a8 <xQueueSemaphoreTake+0x214>)
 8006446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	e75e      	b.n	8006314 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006458:	f000 f9aa 	bl	80067b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800645c:	f000 fcf8 	bl	8006e50 <xTaskResumeAll>
 8006460:	e758      	b.n	8006314 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006464:	f000 f9a4 	bl	80067b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006468:	f000 fcf2 	bl	8006e50 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800646c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800646e:	f000 f9f1 	bl	8006854 <prvIsQueueEmpty>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	f43f af4d 	beq.w	8006314 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00d      	beq.n	800649c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8006480:	f002 fa68 	bl	8008954 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006486:	f000 f8eb 	bl	8006660 <prvGetDisinheritPriorityAfterTimeout>
 800648a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006492:	4618      	mov	r0, r3
 8006494:	f001 faba 	bl	8007a0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006498:	f002 fa8c 	bl	80089b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800649c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3738      	adds	r7, #56	; 0x38
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	e000ed04 	.word	0xe000ed04

080064ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08e      	sub	sp, #56	; 0x38
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10a      	bne.n	80064d8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80064c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c6:	f383 8811 	msr	BASEPRI, r3
 80064ca:	f3bf 8f6f 	isb	sy
 80064ce:	f3bf 8f4f 	dsb	sy
 80064d2:	623b      	str	r3, [r7, #32]
}
 80064d4:	bf00      	nop
 80064d6:	e7fe      	b.n	80064d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d103      	bne.n	80064e6 <xQueueReceiveFromISR+0x3a>
 80064de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <xQueueReceiveFromISR+0x3e>
 80064e6:	2301      	movs	r3, #1
 80064e8:	e000      	b.n	80064ec <xQueueReceiveFromISR+0x40>
 80064ea:	2300      	movs	r3, #0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	61fb      	str	r3, [r7, #28]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006506:	f002 fb07 	bl	8008b18 <vPortValidateInterruptPriority>
	__asm volatile
 800650a:	f3ef 8211 	mrs	r2, BASEPRI
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	61ba      	str	r2, [r7, #24]
 8006520:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006522:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	2b00      	cmp	r3, #0
 8006530:	d02f      	beq.n	8006592 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800653c:	68b9      	ldr	r1, [r7, #8]
 800653e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006540:	f000 f910 	bl	8006764 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	1e5a      	subs	r2, r3, #1
 8006548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800654a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800654c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006554:	d112      	bne.n	800657c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d016      	beq.n	800658c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	3310      	adds	r3, #16
 8006562:	4618      	mov	r0, r3
 8006564:	f000 fee4 	bl	8007330 <xTaskRemoveFromEventList>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00e      	beq.n	800658c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00b      	beq.n	800658c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2201      	movs	r2, #1
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	e007      	b.n	800658c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800657c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006580:	3301      	adds	r3, #1
 8006582:	b2db      	uxtb	r3, r3
 8006584:	b25a      	sxtb	r2, r3
 8006586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800658c:	2301      	movs	r3, #1
 800658e:	637b      	str	r3, [r7, #52]	; 0x34
 8006590:	e001      	b.n	8006596 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006592:	2300      	movs	r3, #0
 8006594:	637b      	str	r3, [r7, #52]	; 0x34
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006598:	613b      	str	r3, [r7, #16]
	__asm volatile
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f383 8811 	msr	BASEPRI, r3
}
 80065a0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80065a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3738      	adds	r7, #56	; 0x38
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b084      	sub	sp, #16
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10a      	bne.n	80065d0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	60bb      	str	r3, [r7, #8]
}
 80065cc:	bf00      	nop
 80065ce:	e7fe      	b.n	80065ce <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80065d0:	f002 f9c0 	bl	8008954 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80065da:	f002 f9eb 	bl	80089b4 <vPortExitCritical>

	return uxReturn;
 80065de:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10a      	bne.n	8006610 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	60fb      	str	r3, [r7, #12]
}
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006614:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8006616:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8006618:	4618      	mov	r0, r3
 800661a:	371c      	adds	r7, #28
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <vQueueDelete+0x28>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	60bb      	str	r3, [r7, #8]
}
 8006648:	bf00      	nop
 800664a:	e7fe      	b.n	800664a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f92f 	bl	80068b0 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f001 ff32 	bl	80084bc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8006658:	bf00      	nop
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	2b00      	cmp	r3, #0
 800666e:	d006      	beq.n	800667e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f1c3 0307 	rsb	r3, r3, #7
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	e001      	b.n	8006682 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006682:	68fb      	ldr	r3, [r7, #12]
	}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800669c:	2300      	movs	r3, #0
 800669e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10d      	bne.n	80066ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d14d      	bne.n	8006752 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f001 f920 	bl	8007900 <xTaskPriorityDisinherit>
 80066c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	609a      	str	r2, [r3, #8]
 80066c8:	e043      	b.n	8006752 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d119      	bne.n	8006704 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6858      	ldr	r0, [r3, #4]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	461a      	mov	r2, r3
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	f00f fc9e 	bl	801601c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e8:	441a      	add	r2, r3
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d32b      	bcc.n	8006752 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	e026      	b.n	8006752 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	68d8      	ldr	r0, [r3, #12]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	461a      	mov	r2, r3
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	f00f fc84 	bl	801601c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	425b      	negs	r3, r3
 800671e:	441a      	add	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d207      	bcs.n	8006740 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006738:	425b      	negs	r3, r3
 800673a:	441a      	add	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b02      	cmp	r3, #2
 8006744:	d105      	bne.n	8006752 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d002      	beq.n	8006752 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	3b01      	subs	r3, #1
 8006750:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800675a:	697b      	ldr	r3, [r7, #20]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3718      	adds	r7, #24
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b082      	sub	sp, #8
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d018      	beq.n	80067a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68da      	ldr	r2, [r3, #12]
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677e:	441a      	add	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	429a      	cmp	r2, r3
 800678e:	d303      	bcc.n	8006798 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	68d9      	ldr	r1, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a0:	461a      	mov	r2, r3
 80067a2:	6838      	ldr	r0, [r7, #0]
 80067a4:	f00f fc3a 	bl	801601c <memcpy>
	}
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067b8:	f002 f8cc 	bl	8008954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067c4:	e011      	b.n	80067ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d012      	beq.n	80067f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3324      	adds	r3, #36	; 0x24
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 fdac 	bl	8007330 <xTaskRemoveFromEventList>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067de:	f000 fe79 	bl	80074d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	dce9      	bgt.n	80067c6 <prvUnlockQueue+0x16>
 80067f2:	e000      	b.n	80067f6 <prvUnlockQueue+0x46>
					break;
 80067f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	22ff      	movs	r2, #255	; 0xff
 80067fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80067fe:	f002 f8d9 	bl	80089b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006802:	f002 f8a7 	bl	8008954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800680c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800680e:	e011      	b.n	8006834 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d012      	beq.n	800683e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3310      	adds	r3, #16
 800681c:	4618      	mov	r0, r3
 800681e:	f000 fd87 	bl	8007330 <xTaskRemoveFromEventList>
 8006822:	4603      	mov	r3, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006828:	f000 fe54 	bl	80074d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800682c:	7bbb      	ldrb	r3, [r7, #14]
 800682e:	3b01      	subs	r3, #1
 8006830:	b2db      	uxtb	r3, r3
 8006832:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006834:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006838:	2b00      	cmp	r3, #0
 800683a:	dce9      	bgt.n	8006810 <prvUnlockQueue+0x60>
 800683c:	e000      	b.n	8006840 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800683e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	22ff      	movs	r2, #255	; 0xff
 8006844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006848:	f002 f8b4 	bl	80089b4 <vPortExitCritical>
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800685c:	f002 f87a 	bl	8008954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006864:	2b00      	cmp	r3, #0
 8006866:	d102      	bne.n	800686e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006868:	2301      	movs	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
 800686c:	e001      	b.n	8006872 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006872:	f002 f89f 	bl	80089b4 <vPortExitCritical>

	return xReturn;
 8006876:	68fb      	ldr	r3, [r7, #12]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006888:	f002 f864 	bl	8008954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006894:	429a      	cmp	r2, r3
 8006896:	d102      	bne.n	800689e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006898:	2301      	movs	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	e001      	b.n	80068a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068a2:	f002 f887 	bl	80089b4 <vPortExitCritical>

	return xReturn;
 80068a6:	68fb      	ldr	r3, [r7, #12]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3710      	adds	r7, #16
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}

080068b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068b8:	2300      	movs	r3, #0
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	e016      	b.n	80068ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80068be:	4a10      	ldr	r2, [pc, #64]	; (8006900 <vQueueUnregisterQueue+0x50>)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4413      	add	r3, r2
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d10b      	bne.n	80068e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80068ce:	4a0c      	ldr	r2, [pc, #48]	; (8006900 <vQueueUnregisterQueue+0x50>)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2100      	movs	r1, #0
 80068d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80068d8:	4a09      	ldr	r2, [pc, #36]	; (8006900 <vQueueUnregisterQueue+0x50>)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	00db      	lsls	r3, r3, #3
 80068de:	4413      	add	r3, r2
 80068e0:	2200      	movs	r2, #0
 80068e2:	605a      	str	r2, [r3, #4]
				break;
 80068e4:	e006      	b.n	80068f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	3301      	adds	r3, #1
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2b07      	cmp	r3, #7
 80068f0:	d9e5      	bls.n	80068be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80068f2:	bf00      	nop
 80068f4:	bf00      	nop
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	240069e4 	.word	0x240069e4

08006904 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08c      	sub	sp, #48	; 0x30
 8006908:	af04      	add	r7, sp, #16
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006914:	88fb      	ldrh	r3, [r7, #6]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4618      	mov	r0, r3
 800691a:	f001 fd03 	bl	8008324 <pvPortMalloc>
 800691e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00e      	beq.n	8006944 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006926:	205c      	movs	r0, #92	; 0x5c
 8006928:	f001 fcfc 	bl	8008324 <pvPortMalloc>
 800692c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	631a      	str	r2, [r3, #48]	; 0x30
 800693a:	e005      	b.n	8006948 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800693c:	6978      	ldr	r0, [r7, #20]
 800693e:	f001 fdbd 	bl	80084bc <vPortFree>
 8006942:	e001      	b.n	8006948 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006944:	2300      	movs	r3, #0
 8006946:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d013      	beq.n	8006976 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800694e:	88fa      	ldrh	r2, [r7, #6]
 8006950:	2300      	movs	r3, #0
 8006952:	9303      	str	r3, [sp, #12]
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	9302      	str	r3, [sp, #8]
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800695a:	9301      	str	r3, [sp, #4]
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	68b9      	ldr	r1, [r7, #8]
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f000 f80e 	bl	8006986 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800696a:	69f8      	ldr	r0, [r7, #28]
 800696c:	f000 f89a 	bl	8006aa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006970:	2301      	movs	r3, #1
 8006972:	61bb      	str	r3, [r7, #24]
 8006974:	e002      	b.n	800697c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006976:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800697a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800697c:	69bb      	ldr	r3, [r7, #24]
	}
 800697e:	4618      	mov	r0, r3
 8006980:	3720      	adds	r7, #32
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}

08006986 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006986:	b580      	push	{r7, lr}
 8006988:	b088      	sub	sp, #32
 800698a:	af00      	add	r7, sp, #0
 800698c:	60f8      	str	r0, [r7, #12]
 800698e:	60b9      	str	r1, [r7, #8]
 8006990:	607a      	str	r2, [r7, #4]
 8006992:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006996:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	009b      	lsls	r3, r3, #2
 800699c:	461a      	mov	r2, r3
 800699e:	21a5      	movs	r1, #165	; 0xa5
 80069a0:	f00f fb64 	bl	801606c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069a8:	6879      	ldr	r1, [r7, #4]
 80069aa:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80069ae:	440b      	add	r3, r1
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	f023 0307 	bic.w	r3, r3, #7
 80069bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	f003 0307 	and.w	r3, r3, #7
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <prvInitialiseNewTask+0x58>
	__asm volatile
 80069c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069cc:	f383 8811 	msr	BASEPRI, r3
 80069d0:	f3bf 8f6f 	isb	sy
 80069d4:	f3bf 8f4f 	dsb	sy
 80069d8:	617b      	str	r3, [r7, #20]
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01f      	beq.n	8006a24 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]
 80069e8:	e012      	b.n	8006a10 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069ea:	68ba      	ldr	r2, [r7, #8]
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	4413      	add	r3, r2
 80069f0:	7819      	ldrb	r1, [r3, #0]
 80069f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	4413      	add	r3, r2
 80069f8:	3334      	adds	r3, #52	; 0x34
 80069fa:	460a      	mov	r2, r1
 80069fc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069fe:	68ba      	ldr	r2, [r7, #8]
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	4413      	add	r3, r2
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d006      	beq.n	8006a18 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	61fb      	str	r3, [r7, #28]
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	2b0f      	cmp	r3, #15
 8006a14:	d9e9      	bls.n	80069ea <prvInitialiseNewTask+0x64>
 8006a16:	e000      	b.n	8006a1a <prvInitialiseNewTask+0x94>
			{
				break;
 8006a18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a22:	e003      	b.n	8006a2c <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2e:	2b06      	cmp	r3, #6
 8006a30:	d901      	bls.n	8006a36 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a32:	2306      	movs	r3, #6
 8006a34:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a3a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a44:	2200      	movs	r2, #0
 8006a46:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f7fe ff61 	bl	8005914 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a54:	3318      	adds	r3, #24
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fe ff5c 	bl	8005914 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	f1c3 0207 	rsb	r2, r3, #7
 8006a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a70:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a74:	2200      	movs	r2, #0
 8006a76:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	69b8      	ldr	r0, [r7, #24]
 8006a86:	f001 fe37 	bl	80086f8 <pxPortInitialiseStack>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d002      	beq.n	8006a9c <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a9c:	bf00      	nop
 8006a9e:	3720      	adds	r7, #32
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006aac:	f001 ff52 	bl	8008954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ab0:	4b2c      	ldr	r3, [pc, #176]	; (8006b64 <prvAddNewTaskToReadyList+0xc0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	4a2b      	ldr	r2, [pc, #172]	; (8006b64 <prvAddNewTaskToReadyList+0xc0>)
 8006ab8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006aba:	4b2b      	ldr	r3, [pc, #172]	; (8006b68 <prvAddNewTaskToReadyList+0xc4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ac2:	4a29      	ldr	r2, [pc, #164]	; (8006b68 <prvAddNewTaskToReadyList+0xc4>)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ac8:	4b26      	ldr	r3, [pc, #152]	; (8006b64 <prvAddNewTaskToReadyList+0xc0>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d110      	bne.n	8006af2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ad0:	f000 fd24 	bl	800751c <prvInitialiseTaskLists>
 8006ad4:	e00d      	b.n	8006af2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ad6:	4b25      	ldr	r3, [pc, #148]	; (8006b6c <prvAddNewTaskToReadyList+0xc8>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d109      	bne.n	8006af2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ade:	4b22      	ldr	r3, [pc, #136]	; (8006b68 <prvAddNewTaskToReadyList+0xc4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d802      	bhi.n	8006af2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006aec:	4a1e      	ldr	r2, [pc, #120]	; (8006b68 <prvAddNewTaskToReadyList+0xc4>)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006af2:	4b1f      	ldr	r3, [pc, #124]	; (8006b70 <prvAddNewTaskToReadyList+0xcc>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	3301      	adds	r3, #1
 8006af8:	4a1d      	ldr	r2, [pc, #116]	; (8006b70 <prvAddNewTaskToReadyList+0xcc>)
 8006afa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006afc:	4b1c      	ldr	r3, [pc, #112]	; (8006b70 <prvAddNewTaskToReadyList+0xcc>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	2201      	movs	r2, #1
 8006b0a:	409a      	lsls	r2, r3
 8006b0c:	4b19      	ldr	r3, [pc, #100]	; (8006b74 <prvAddNewTaskToReadyList+0xd0>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	4a18      	ldr	r2, [pc, #96]	; (8006b74 <prvAddNewTaskToReadyList+0xd0>)
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4a15      	ldr	r2, [pc, #84]	; (8006b78 <prvAddNewTaskToReadyList+0xd4>)
 8006b24:	441a      	add	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3304      	adds	r3, #4
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	f7fe fefe 	bl	800592e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b32:	f001 ff3f 	bl	80089b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b36:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <prvAddNewTaskToReadyList+0xc8>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00e      	beq.n	8006b5c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b3e:	4b0a      	ldr	r3, [pc, #40]	; (8006b68 <prvAddNewTaskToReadyList+0xc4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d207      	bcs.n	8006b5c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <prvAddNewTaskToReadyList+0xd8>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	f3bf 8f4f 	dsb	sy
 8006b58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b5c:	bf00      	nop
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	24000214 	.word	0x24000214
 8006b68:	24000128 	.word	0x24000128
 8006b6c:	24000220 	.word	0x24000220
 8006b70:	24000230 	.word	0x24000230
 8006b74:	2400021c 	.word	0x2400021c
 8006b78:	2400012c 	.word	0x2400012c
 8006b7c:	e000ed04 	.word	0xe000ed04

08006b80 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006b88:	f001 fee4 	bl	8008954 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d102      	bne.n	8006b98 <vTaskDelete+0x18>
 8006b92:	4b39      	ldr	r3, [pc, #228]	; (8006c78 <vTaskDelete+0xf8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	e000      	b.n	8006b9a <vTaskDelete+0x1a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	3304      	adds	r3, #4
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fe ff21 	bl	80059e8 <uxListRemove>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d115      	bne.n	8006bd8 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bb0:	4932      	ldr	r1, [pc, #200]	; (8006c7c <vTaskDelete+0xfc>)
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d10a      	bne.n	8006bd8 <vTaskDelete+0x58>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bcc:	43da      	mvns	r2, r3
 8006bce:	4b2c      	ldr	r3, [pc, #176]	; (8006c80 <vTaskDelete+0x100>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	4a2a      	ldr	r2, [pc, #168]	; (8006c80 <vTaskDelete+0x100>)
 8006bd6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d004      	beq.n	8006bea <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3318      	adds	r3, #24
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7fe feff 	bl	80059e8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8006bea:	4b26      	ldr	r3, [pc, #152]	; (8006c84 <vTaskDelete+0x104>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	4a24      	ldr	r2, [pc, #144]	; (8006c84 <vTaskDelete+0x104>)
 8006bf2:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8006bf4:	4b20      	ldr	r3, [pc, #128]	; (8006c78 <vTaskDelete+0xf8>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d10b      	bne.n	8006c16 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	3304      	adds	r3, #4
 8006c02:	4619      	mov	r1, r3
 8006c04:	4820      	ldr	r0, [pc, #128]	; (8006c88 <vTaskDelete+0x108>)
 8006c06:	f7fe fe92 	bl	800592e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006c0a:	4b20      	ldr	r3, [pc, #128]	; (8006c8c <vTaskDelete+0x10c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3301      	adds	r3, #1
 8006c10:	4a1e      	ldr	r2, [pc, #120]	; (8006c8c <vTaskDelete+0x10c>)
 8006c12:	6013      	str	r3, [r2, #0]
 8006c14:	e009      	b.n	8006c2a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006c16:	4b1e      	ldr	r3, [pc, #120]	; (8006c90 <vTaskDelete+0x110>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3b01      	subs	r3, #1
 8006c1c:	4a1c      	ldr	r2, [pc, #112]	; (8006c90 <vTaskDelete+0x110>)
 8006c1e:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 fda9 	bl	8007778 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006c26:	f000 fdb7 	bl	8007798 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006c2a:	f001 fec3 	bl	80089b4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8006c2e:	4b19      	ldr	r3, [pc, #100]	; (8006c94 <vTaskDelete+0x114>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01b      	beq.n	8006c6e <vTaskDelete+0xee>
		{
			if( pxTCB == pxCurrentTCB )
 8006c36:	4b10      	ldr	r3, [pc, #64]	; (8006c78 <vTaskDelete+0xf8>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d116      	bne.n	8006c6e <vTaskDelete+0xee>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8006c40:	4b15      	ldr	r3, [pc, #84]	; (8006c98 <vTaskDelete+0x118>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <vTaskDelete+0xde>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	60bb      	str	r3, [r7, #8]
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8006c5e:	4b0f      	ldr	r3, [pc, #60]	; (8006c9c <vTaskDelete+0x11c>)
 8006c60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c64:	601a      	str	r2, [r3, #0]
 8006c66:	f3bf 8f4f 	dsb	sy
 8006c6a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	24000128 	.word	0x24000128
 8006c7c:	2400012c 	.word	0x2400012c
 8006c80:	2400021c 	.word	0x2400021c
 8006c84:	24000230 	.word	0x24000230
 8006c88:	240001fc 	.word	0x240001fc
 8006c8c:	24000210 	.word	0x24000210
 8006c90:	24000214 	.word	0x24000214
 8006c94:	24000220 	.word	0x24000220
 8006c98:	2400023c 	.word	0x2400023c
 8006c9c:	e000ed04 	.word	0xe000ed04

08006ca0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d017      	beq.n	8006ce2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cb2:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <vTaskDelay+0x60>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00a      	beq.n	8006cd0 <vTaskDelay+0x30>
	__asm volatile
 8006cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cbe:	f383 8811 	msr	BASEPRI, r3
 8006cc2:	f3bf 8f6f 	isb	sy
 8006cc6:	f3bf 8f4f 	dsb	sy
 8006cca:	60bb      	str	r3, [r7, #8]
}
 8006ccc:	bf00      	nop
 8006cce:	e7fe      	b.n	8006cce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006cd0:	f000 f8b0 	bl	8006e34 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fff6 	bl	8007cc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cdc:	f000 f8b8 	bl	8006e50 <xTaskResumeAll>
 8006ce0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d107      	bne.n	8006cf8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006ce8:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <vTaskDelay+0x64>)
 8006cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006cf8:	bf00      	nop
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	2400023c 	.word	0x2400023c
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8006d14:	69bb      	ldr	r3, [r7, #24]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <eTaskGetState+0x28>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	60bb      	str	r3, [r7, #8]
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8006d30:	4b18      	ldr	r3, [pc, #96]	; (8006d94 <eTaskGetState+0x8c>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	69ba      	ldr	r2, [r7, #24]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d102      	bne.n	8006d40 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	77fb      	strb	r3, [r7, #31]
 8006d3e:	e023      	b.n	8006d88 <eTaskGetState+0x80>
		}
		else
		{
			taskENTER_CRITICAL();
 8006d40:	f001 fe08 	bl	8008954 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006d4a:	4b13      	ldr	r3, [pc, #76]	; (8006d98 <eTaskGetState+0x90>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8006d50:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <eTaskGetState+0x94>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006d56:	f001 fe2d 	bl	80089b4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d003      	beq.n	8006d6a <eTaskGetState+0x62>
 8006d62:	697a      	ldr	r2, [r7, #20]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d102      	bne.n	8006d70 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006d6a:	2302      	movs	r3, #2
 8006d6c:	77fb      	strb	r3, [r7, #31]
 8006d6e:	e00b      	b.n	8006d88 <eTaskGetState+0x80>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	4a0b      	ldr	r2, [pc, #44]	; (8006da0 <eTaskGetState+0x98>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d002      	beq.n	8006d7e <eTaskGetState+0x76>
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d102      	bne.n	8006d84 <eTaskGetState+0x7c>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006d7e:	2304      	movs	r3, #4
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e001      	b.n	8006d88 <eTaskGetState+0x80>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8006d84:	2301      	movs	r3, #1
 8006d86:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006d88:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3720      	adds	r7, #32
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop
 8006d94:	24000128 	.word	0x24000128
 8006d98:	240001e0 	.word	0x240001e0
 8006d9c:	240001e4 	.word	0x240001e4
 8006da0:	240001fc 	.word	0x240001fc

08006da4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006daa:	4b1c      	ldr	r3, [pc, #112]	; (8006e1c <vTaskStartScheduler+0x78>)
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	2300      	movs	r3, #0
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	2300      	movs	r3, #0
 8006db4:	2280      	movs	r2, #128	; 0x80
 8006db6:	491a      	ldr	r1, [pc, #104]	; (8006e20 <vTaskStartScheduler+0x7c>)
 8006db8:	481a      	ldr	r0, [pc, #104]	; (8006e24 <vTaskStartScheduler+0x80>)
 8006dba:	f7ff fda3 	bl	8006904 <xTaskCreate>
 8006dbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d116      	bne.n	8006df4 <vTaskStartScheduler+0x50>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60bb      	str	r3, [r7, #8]
}
 8006dd8:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dda:	4b13      	ldr	r3, [pc, #76]	; (8006e28 <vTaskStartScheduler+0x84>)
 8006ddc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006de0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006de2:	4b12      	ldr	r3, [pc, #72]	; (8006e2c <vTaskStartScheduler+0x88>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006de8:	4b11      	ldr	r3, [pc, #68]	; (8006e30 <vTaskStartScheduler+0x8c>)
 8006dea:	2200      	movs	r2, #0
 8006dec:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006dee:	f001 fd0f 	bl	8008810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006df2:	e00e      	b.n	8006e12 <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006dfa:	d10a      	bne.n	8006e12 <vTaskStartScheduler+0x6e>
	__asm volatile
 8006dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e00:	f383 8811 	msr	BASEPRI, r3
 8006e04:	f3bf 8f6f 	isb	sy
 8006e08:	f3bf 8f4f 	dsb	sy
 8006e0c:	607b      	str	r3, [r7, #4]
}
 8006e0e:	bf00      	nop
 8006e10:	e7fe      	b.n	8006e10 <vTaskStartScheduler+0x6c>
}
 8006e12:	bf00      	nop
 8006e14:	3710      	adds	r7, #16
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}
 8006e1a:	bf00      	nop
 8006e1c:	24000238 	.word	0x24000238
 8006e20:	08017ee0 	.word	0x08017ee0
 8006e24:	080074ed 	.word	0x080074ed
 8006e28:	24000234 	.word	0x24000234
 8006e2c:	24000220 	.word	0x24000220
 8006e30:	24000218 	.word	0x24000218

08006e34 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e38:	4b04      	ldr	r3, [pc, #16]	; (8006e4c <vTaskSuspendAll+0x18>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	4a03      	ldr	r2, [pc, #12]	; (8006e4c <vTaskSuspendAll+0x18>)
 8006e40:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e42:	bf00      	nop
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	2400023c 	.word	0x2400023c

08006e50 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e56:	2300      	movs	r3, #0
 8006e58:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e5e:	4b41      	ldr	r3, [pc, #260]	; (8006f64 <xTaskResumeAll+0x114>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d10a      	bne.n	8006e7c <xTaskResumeAll+0x2c>
	__asm volatile
 8006e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e6a:	f383 8811 	msr	BASEPRI, r3
 8006e6e:	f3bf 8f6f 	isb	sy
 8006e72:	f3bf 8f4f 	dsb	sy
 8006e76:	603b      	str	r3, [r7, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	e7fe      	b.n	8006e7a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e7c:	f001 fd6a 	bl	8008954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e80:	4b38      	ldr	r3, [pc, #224]	; (8006f64 <xTaskResumeAll+0x114>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	4a37      	ldr	r2, [pc, #220]	; (8006f64 <xTaskResumeAll+0x114>)
 8006e88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e8a:	4b36      	ldr	r3, [pc, #216]	; (8006f64 <xTaskResumeAll+0x114>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d161      	bne.n	8006f56 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e92:	4b35      	ldr	r3, [pc, #212]	; (8006f68 <xTaskResumeAll+0x118>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d05d      	beq.n	8006f56 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e9a:	e02e      	b.n	8006efa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e9c:	4b33      	ldr	r3, [pc, #204]	; (8006f6c <xTaskResumeAll+0x11c>)
 8006e9e:	68db      	ldr	r3, [r3, #12]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	3318      	adds	r3, #24
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f7fe fd9d 	bl	80059e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fe fd98 	bl	80059e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	409a      	lsls	r2, r3
 8006ec0:	4b2b      	ldr	r3, [pc, #172]	; (8006f70 <xTaskResumeAll+0x120>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	4a2a      	ldr	r2, [pc, #168]	; (8006f70 <xTaskResumeAll+0x120>)
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ece:	4613      	mov	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	009b      	lsls	r3, r3, #2
 8006ed6:	4a27      	ldr	r2, [pc, #156]	; (8006f74 <xTaskResumeAll+0x124>)
 8006ed8:	441a      	add	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f7fe fd24 	bl	800592e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eea:	4b23      	ldr	r3, [pc, #140]	; (8006f78 <xTaskResumeAll+0x128>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d302      	bcc.n	8006efa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006ef4:	4b21      	ldr	r3, [pc, #132]	; (8006f7c <xTaskResumeAll+0x12c>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006efa:	4b1c      	ldr	r3, [pc, #112]	; (8006f6c <xTaskResumeAll+0x11c>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1cc      	bne.n	8006e9c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f08:	f000 fc46 	bl	8007798 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f0c:	4b1c      	ldr	r3, [pc, #112]	; (8006f80 <xTaskResumeAll+0x130>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d010      	beq.n	8006f3a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f18:	f000 f8d2 	bl	80070c0 <xTaskIncrementTick>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006f22:	4b16      	ldr	r3, [pc, #88]	; (8006f7c <xTaskResumeAll+0x12c>)
 8006f24:	2201      	movs	r2, #1
 8006f26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1f1      	bne.n	8006f18 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006f34:	4b12      	ldr	r3, [pc, #72]	; (8006f80 <xTaskResumeAll+0x130>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f3a:	4b10      	ldr	r3, [pc, #64]	; (8006f7c <xTaskResumeAll+0x12c>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d009      	beq.n	8006f56 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f42:	2301      	movs	r3, #1
 8006f44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f46:	4b0f      	ldr	r3, [pc, #60]	; (8006f84 <xTaskResumeAll+0x134>)
 8006f48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f56:	f001 fd2d 	bl	80089b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3710      	adds	r7, #16
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	2400023c 	.word	0x2400023c
 8006f68:	24000214 	.word	0x24000214
 8006f6c:	240001e8 	.word	0x240001e8
 8006f70:	2400021c 	.word	0x2400021c
 8006f74:	2400012c 	.word	0x2400012c
 8006f78:	24000128 	.word	0x24000128
 8006f7c:	24000228 	.word	0x24000228
 8006f80:	24000224 	.word	0x24000224
 8006f84:	e000ed04 	.word	0xe000ed04

08006f88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f8e:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <xTaskGetTickCount+0x1c>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f94:	687b      	ldr	r3, [r7, #4]
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	370c      	adds	r7, #12
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	24000218 	.word	0x24000218

08006fa8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fae:	f001 fdb3 	bl	8008b18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006fb6:	4b04      	ldr	r3, [pc, #16]	; (8006fc8 <xTaskGetTickCountFromISR+0x20>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006fbc:	683b      	ldr	r3, [r7, #0]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	24000218 	.word	0x24000218

08006fcc <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b086      	sub	sp, #24
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	2307      	movs	r3, #7
 8006fde:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8006fe0:	f7ff ff28 	bl	8006e34 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8006fe4:	4b31      	ldr	r3, [pc, #196]	; (80070ac <uxTaskGetSystemState+0xe0>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68ba      	ldr	r2, [r7, #8]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d357      	bcc.n	800709e <uxTaskGetSystemState+0xd2>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	00db      	lsls	r3, r3, #3
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	461a      	mov	r2, r3
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	1898      	adds	r0, r3, r2
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	4a28      	ldr	r2, [pc, #160]	; (80070b0 <uxTaskGetSystemState+0xe4>)
 8007010:	4413      	add	r3, r2
 8007012:	2201      	movs	r2, #1
 8007014:	4619      	mov	r1, r3
 8007016:	f000 fb41 	bl	800769c <prvListTasksWithinSingleList>
 800701a:	4602      	mov	r2, r0
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	4413      	add	r3, r2
 8007020:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1e2      	bne.n	8006fee <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	4613      	mov	r3, r2
 800702c:	00db      	lsls	r3, r3, #3
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	461a      	mov	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	4a1e      	ldr	r2, [pc, #120]	; (80070b4 <uxTaskGetSystemState+0xe8>)
 800703a:	6811      	ldr	r1, [r2, #0]
 800703c:	2202      	movs	r2, #2
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fb2c 	bl	800769c <prvListTasksWithinSingleList>
 8007044:	4602      	mov	r2, r0
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	4413      	add	r3, r2
 800704a:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800704c:	697a      	ldr	r2, [r7, #20]
 800704e:	4613      	mov	r3, r2
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	461a      	mov	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	4a16      	ldr	r2, [pc, #88]	; (80070b8 <uxTaskGetSystemState+0xec>)
 800705e:	6811      	ldr	r1, [r2, #0]
 8007060:	2202      	movs	r2, #2
 8007062:	4618      	mov	r0, r3
 8007064:	f000 fb1a 	bl	800769c <prvListTasksWithinSingleList>
 8007068:	4602      	mov	r2, r0
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4413      	add	r3, r2
 800706e:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	4613      	mov	r3, r2
 8007074:	00db      	lsls	r3, r3, #3
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	461a      	mov	r2, r3
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	2204      	movs	r2, #4
 8007082:	490e      	ldr	r1, [pc, #56]	; (80070bc <uxTaskGetSystemState+0xf0>)
 8007084:	4618      	mov	r0, r3
 8007086:	f000 fb09 	bl	800769c <prvListTasksWithinSingleList>
 800708a:	4602      	mov	r2, r0
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	4413      	add	r3, r2
 8007090:	617b      	str	r3, [r7, #20]
						#endif
					}
				}
				#else
				{
					if( pulTotalRunTime != NULL )
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <uxTaskGetSystemState+0xd2>
					{
						*pulTotalRunTime = 0;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 800709e:	f7ff fed7 	bl	8006e50 <xTaskResumeAll>

		return uxTask;
 80070a2:	697b      	ldr	r3, [r7, #20]
	}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3718      	adds	r7, #24
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	24000214 	.word	0x24000214
 80070b0:	2400012c 	.word	0x2400012c
 80070b4:	240001e0 	.word	0x240001e0
 80070b8:	240001e4 	.word	0x240001e4
 80070bc:	240001fc 	.word	0x240001fc

080070c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070c6:	2300      	movs	r3, #0
 80070c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070ca:	4b4e      	ldr	r3, [pc, #312]	; (8007204 <xTaskIncrementTick+0x144>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f040 808e 	bne.w	80071f0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070d4:	4b4c      	ldr	r3, [pc, #304]	; (8007208 <xTaskIncrementTick+0x148>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	3301      	adds	r3, #1
 80070da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070dc:	4a4a      	ldr	r2, [pc, #296]	; (8007208 <xTaskIncrementTick+0x148>)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d120      	bne.n	800712a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070e8:	4b48      	ldr	r3, [pc, #288]	; (800720c <xTaskIncrementTick+0x14c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00a      	beq.n	8007108 <xTaskIncrementTick+0x48>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	603b      	str	r3, [r7, #0]
}
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <xTaskIncrementTick+0x46>
 8007108:	4b40      	ldr	r3, [pc, #256]	; (800720c <xTaskIncrementTick+0x14c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	60fb      	str	r3, [r7, #12]
 800710e:	4b40      	ldr	r3, [pc, #256]	; (8007210 <xTaskIncrementTick+0x150>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a3e      	ldr	r2, [pc, #248]	; (800720c <xTaskIncrementTick+0x14c>)
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	4a3e      	ldr	r2, [pc, #248]	; (8007210 <xTaskIncrementTick+0x150>)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6013      	str	r3, [r2, #0]
 800711c:	4b3d      	ldr	r3, [pc, #244]	; (8007214 <xTaskIncrementTick+0x154>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3301      	adds	r3, #1
 8007122:	4a3c      	ldr	r2, [pc, #240]	; (8007214 <xTaskIncrementTick+0x154>)
 8007124:	6013      	str	r3, [r2, #0]
 8007126:	f000 fb37 	bl	8007798 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800712a:	4b3b      	ldr	r3, [pc, #236]	; (8007218 <xTaskIncrementTick+0x158>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	429a      	cmp	r2, r3
 8007132:	d348      	bcc.n	80071c6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007134:	4b35      	ldr	r3, [pc, #212]	; (800720c <xTaskIncrementTick+0x14c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d104      	bne.n	8007148 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800713e:	4b36      	ldr	r3, [pc, #216]	; (8007218 <xTaskIncrementTick+0x158>)
 8007140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007144:	601a      	str	r2, [r3, #0]
					break;
 8007146:	e03e      	b.n	80071c6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007148:	4b30      	ldr	r3, [pc, #192]	; (800720c <xTaskIncrementTick+0x14c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	429a      	cmp	r2, r3
 800715e:	d203      	bcs.n	8007168 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007160:	4a2d      	ldr	r2, [pc, #180]	; (8007218 <xTaskIncrementTick+0x158>)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007166:	e02e      	b.n	80071c6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	3304      	adds	r3, #4
 800716c:	4618      	mov	r0, r3
 800716e:	f7fe fc3b 	bl	80059e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007176:	2b00      	cmp	r3, #0
 8007178:	d004      	beq.n	8007184 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	3318      	adds	r3, #24
 800717e:	4618      	mov	r0, r3
 8007180:	f7fe fc32 	bl	80059e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007188:	2201      	movs	r2, #1
 800718a:	409a      	lsls	r2, r3
 800718c:	4b23      	ldr	r3, [pc, #140]	; (800721c <xTaskIncrementTick+0x15c>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4313      	orrs	r3, r2
 8007192:	4a22      	ldr	r2, [pc, #136]	; (800721c <xTaskIncrementTick+0x15c>)
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719a:	4613      	mov	r3, r2
 800719c:	009b      	lsls	r3, r3, #2
 800719e:	4413      	add	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4a1f      	ldr	r2, [pc, #124]	; (8007220 <xTaskIncrementTick+0x160>)
 80071a4:	441a      	add	r2, r3
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	3304      	adds	r3, #4
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f7fe fbbe 	bl	800592e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b6:	4b1b      	ldr	r3, [pc, #108]	; (8007224 <xTaskIncrementTick+0x164>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	429a      	cmp	r2, r3
 80071be:	d3b9      	bcc.n	8007134 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071c0:	2301      	movs	r3, #1
 80071c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071c4:	e7b6      	b.n	8007134 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071c6:	4b17      	ldr	r3, [pc, #92]	; (8007224 <xTaskIncrementTick+0x164>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071cc:	4914      	ldr	r1, [pc, #80]	; (8007220 <xTaskIncrementTick+0x160>)
 80071ce:	4613      	mov	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4413      	add	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	440b      	add	r3, r1
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d901      	bls.n	80071e2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80071de:	2301      	movs	r3, #1
 80071e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80071e2:	4b11      	ldr	r3, [pc, #68]	; (8007228 <xTaskIncrementTick+0x168>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d007      	beq.n	80071fa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80071ea:	2301      	movs	r3, #1
 80071ec:	617b      	str	r3, [r7, #20]
 80071ee:	e004      	b.n	80071fa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071f0:	4b0e      	ldr	r3, [pc, #56]	; (800722c <xTaskIncrementTick+0x16c>)
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3301      	adds	r3, #1
 80071f6:	4a0d      	ldr	r2, [pc, #52]	; (800722c <xTaskIncrementTick+0x16c>)
 80071f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80071fa:	697b      	ldr	r3, [r7, #20]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3718      	adds	r7, #24
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}
 8007204:	2400023c 	.word	0x2400023c
 8007208:	24000218 	.word	0x24000218
 800720c:	240001e0 	.word	0x240001e0
 8007210:	240001e4 	.word	0x240001e4
 8007214:	2400022c 	.word	0x2400022c
 8007218:	24000234 	.word	0x24000234
 800721c:	2400021c 	.word	0x2400021c
 8007220:	2400012c 	.word	0x2400012c
 8007224:	24000128 	.word	0x24000128
 8007228:	24000228 	.word	0x24000228
 800722c:	24000224 	.word	0x24000224

08007230 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007230:	b480      	push	{r7}
 8007232:	b087      	sub	sp, #28
 8007234:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007236:	4b27      	ldr	r3, [pc, #156]	; (80072d4 <vTaskSwitchContext+0xa4>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800723e:	4b26      	ldr	r3, [pc, #152]	; (80072d8 <vTaskSwitchContext+0xa8>)
 8007240:	2201      	movs	r2, #1
 8007242:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007244:	e03f      	b.n	80072c6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007246:	4b24      	ldr	r3, [pc, #144]	; (80072d8 <vTaskSwitchContext+0xa8>)
 8007248:	2200      	movs	r2, #0
 800724a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800724c:	4b23      	ldr	r3, [pc, #140]	; (80072dc <vTaskSwitchContext+0xac>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	fab3 f383 	clz	r3, r3
 8007258:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800725a:	7afb      	ldrb	r3, [r7, #11]
 800725c:	f1c3 031f 	rsb	r3, r3, #31
 8007260:	617b      	str	r3, [r7, #20]
 8007262:	491f      	ldr	r1, [pc, #124]	; (80072e0 <vTaskSwitchContext+0xb0>)
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	607b      	str	r3, [r7, #4]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <vTaskSwitchContext+0x5a>
 800728c:	697a      	ldr	r2, [r7, #20]
 800728e:	4613      	mov	r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	4a12      	ldr	r2, [pc, #72]	; (80072e0 <vTaskSwitchContext+0xb0>)
 8007298:	4413      	add	r3, r2
 800729a:	613b      	str	r3, [r7, #16]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	685a      	ldr	r2, [r3, #4]
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	605a      	str	r2, [r3, #4]
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	685a      	ldr	r2, [r3, #4]
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	3308      	adds	r3, #8
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d104      	bne.n	80072bc <vTaskSwitchContext+0x8c>
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	605a      	str	r2, [r3, #4]
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	4a08      	ldr	r2, [pc, #32]	; (80072e4 <vTaskSwitchContext+0xb4>)
 80072c4:	6013      	str	r3, [r2, #0]
}
 80072c6:	bf00      	nop
 80072c8:	371c      	adds	r7, #28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	2400023c 	.word	0x2400023c
 80072d8:	24000228 	.word	0x24000228
 80072dc:	2400021c 	.word	0x2400021c
 80072e0:	2400012c 	.word	0x2400012c
 80072e4:	24000128 	.word	0x24000128

080072e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d10a      	bne.n	800730e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80072f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fc:	f383 8811 	msr	BASEPRI, r3
 8007300:	f3bf 8f6f 	isb	sy
 8007304:	f3bf 8f4f 	dsb	sy
 8007308:	60fb      	str	r3, [r7, #12]
}
 800730a:	bf00      	nop
 800730c:	e7fe      	b.n	800730c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800730e:	4b07      	ldr	r3, [pc, #28]	; (800732c <vTaskPlaceOnEventList+0x44>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3318      	adds	r3, #24
 8007314:	4619      	mov	r1, r3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fe fb2d 	bl	8005976 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800731c:	2101      	movs	r1, #1
 800731e:	6838      	ldr	r0, [r7, #0]
 8007320:	f000 fcd2 	bl	8007cc8 <prvAddCurrentTaskToDelayedList>
}
 8007324:	bf00      	nop
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	24000128 	.word	0x24000128

08007330 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60fb      	str	r3, [r7, #12]
}
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	3318      	adds	r3, #24
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe fb41 	bl	80059e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007366:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <xTaskRemoveFromEventList+0xac>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2b00      	cmp	r3, #0
 800736c:	d11c      	bne.n	80073a8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	3304      	adds	r3, #4
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fb38 	bl	80059e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737c:	2201      	movs	r2, #1
 800737e:	409a      	lsls	r2, r3
 8007380:	4b17      	ldr	r3, [pc, #92]	; (80073e0 <xTaskRemoveFromEventList+0xb0>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4313      	orrs	r3, r2
 8007386:	4a16      	ldr	r2, [pc, #88]	; (80073e0 <xTaskRemoveFromEventList+0xb0>)
 8007388:	6013      	str	r3, [r2, #0]
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800738e:	4613      	mov	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	4413      	add	r3, r2
 8007394:	009b      	lsls	r3, r3, #2
 8007396:	4a13      	ldr	r2, [pc, #76]	; (80073e4 <xTaskRemoveFromEventList+0xb4>)
 8007398:	441a      	add	r2, r3
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	3304      	adds	r3, #4
 800739e:	4619      	mov	r1, r3
 80073a0:	4610      	mov	r0, r2
 80073a2:	f7fe fac4 	bl	800592e <vListInsertEnd>
 80073a6:	e005      	b.n	80073b4 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	3318      	adds	r3, #24
 80073ac:	4619      	mov	r1, r3
 80073ae:	480e      	ldr	r0, [pc, #56]	; (80073e8 <xTaskRemoveFromEventList+0xb8>)
 80073b0:	f7fe fabd 	bl	800592e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073b8:	4b0c      	ldr	r3, [pc, #48]	; (80073ec <xTaskRemoveFromEventList+0xbc>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073be:	429a      	cmp	r2, r3
 80073c0:	d905      	bls.n	80073ce <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073c2:	2301      	movs	r3, #1
 80073c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073c6:	4b0a      	ldr	r3, [pc, #40]	; (80073f0 <xTaskRemoveFromEventList+0xc0>)
 80073c8:	2201      	movs	r2, #1
 80073ca:	601a      	str	r2, [r3, #0]
 80073cc:	e001      	b.n	80073d2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073d2:	697b      	ldr	r3, [r7, #20]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	2400023c 	.word	0x2400023c
 80073e0:	2400021c 	.word	0x2400021c
 80073e4:	2400012c 	.word	0x2400012c
 80073e8:	240001e8 	.word	0x240001e8
 80073ec:	24000128 	.word	0x24000128
 80073f0:	24000228 	.word	0x24000228

080073f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073fc:	4b06      	ldr	r3, [pc, #24]	; (8007418 <vTaskInternalSetTimeOutState+0x24>)
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007404:	4b05      	ldr	r3, [pc, #20]	; (800741c <vTaskInternalSetTimeOutState+0x28>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	605a      	str	r2, [r3, #4]
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	2400022c 	.word	0x2400022c
 800741c:	24000218 	.word	0x24000218

08007420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	613b      	str	r3, [r7, #16]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10a      	bne.n	8007462 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	60fb      	str	r3, [r7, #12]
}
 800745e:	bf00      	nop
 8007460:	e7fe      	b.n	8007460 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007462:	f001 fa77 	bl	8008954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007466:	4b19      	ldr	r3, [pc, #100]	; (80074cc <xTaskCheckForTimeOut+0xac>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	1ad3      	subs	r3, r2, r3
 8007474:	617b      	str	r3, [r7, #20]
				xReturn = pdFALSE;
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	4b15      	ldr	r3, [pc, #84]	; (80074d0 <xTaskCheckForTimeOut+0xb0>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d007      	beq.n	8007492 <xTaskCheckForTimeOut+0x72>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	429a      	cmp	r2, r3
 800748a:	d302      	bcc.n	8007492 <xTaskCheckForTimeOut+0x72>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800748c:	2301      	movs	r3, #1
 800748e:	61fb      	str	r3, [r7, #28]
 8007490:	e015      	b.n	80074be <xTaskCheckForTimeOut+0x9e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	429a      	cmp	r2, r3
 800749a:	d20b      	bcs.n	80074b4 <xTaskCheckForTimeOut+0x94>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	1ad2      	subs	r2, r2, r3
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff ffa3 	bl	80073f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
 80074b2:	e004      	b.n	80074be <xTaskCheckForTimeOut+0x9e>
		}
		else
		{
			*pxTicksToWait = 0;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2200      	movs	r2, #0
 80074b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074ba:	2301      	movs	r3, #1
 80074bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074be:	f001 fa79 	bl	80089b4 <vPortExitCritical>

	return xReturn;
 80074c2:	69fb      	ldr	r3, [r7, #28]
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3720      	adds	r7, #32
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	24000218 	.word	0x24000218
 80074d0:	2400022c 	.word	0x2400022c

080074d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074d8:	4b03      	ldr	r3, [pc, #12]	; (80074e8 <vTaskMissedYield+0x14>)
 80074da:	2201      	movs	r2, #1
 80074dc:	601a      	str	r2, [r3, #0]
}
 80074de:	bf00      	nop
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr
 80074e8:	24000228 	.word	0x24000228

080074ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074f4:	f000 f84c 	bl	8007590 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074f8:	4b06      	ldr	r3, [pc, #24]	; (8007514 <prvIdleTask+0x28>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d9f9      	bls.n	80074f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007500:	4b05      	ldr	r3, [pc, #20]	; (8007518 <prvIdleTask+0x2c>)
 8007502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007510:	e7f0      	b.n	80074f4 <prvIdleTask+0x8>
 8007512:	bf00      	nop
 8007514:	2400012c 	.word	0x2400012c
 8007518:	e000ed04 	.word	0xe000ed04

0800751c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007522:	2300      	movs	r3, #0
 8007524:	607b      	str	r3, [r7, #4]
 8007526:	e00c      	b.n	8007542 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	4613      	mov	r3, r2
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4a10      	ldr	r2, [pc, #64]	; (8007574 <prvInitialiseTaskLists+0x58>)
 8007534:	4413      	add	r3, r2
 8007536:	4618      	mov	r0, r3
 8007538:	f7fe f9cc 	bl	80058d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3301      	adds	r3, #1
 8007540:	607b      	str	r3, [r7, #4]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2b06      	cmp	r3, #6
 8007546:	d9ef      	bls.n	8007528 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007548:	480b      	ldr	r0, [pc, #44]	; (8007578 <prvInitialiseTaskLists+0x5c>)
 800754a:	f7fe f9c3 	bl	80058d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800754e:	480b      	ldr	r0, [pc, #44]	; (800757c <prvInitialiseTaskLists+0x60>)
 8007550:	f7fe f9c0 	bl	80058d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007554:	480a      	ldr	r0, [pc, #40]	; (8007580 <prvInitialiseTaskLists+0x64>)
 8007556:	f7fe f9bd 	bl	80058d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800755a:	480a      	ldr	r0, [pc, #40]	; (8007584 <prvInitialiseTaskLists+0x68>)
 800755c:	f7fe f9ba 	bl	80058d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007560:	4b09      	ldr	r3, [pc, #36]	; (8007588 <prvInitialiseTaskLists+0x6c>)
 8007562:	4a05      	ldr	r2, [pc, #20]	; (8007578 <prvInitialiseTaskLists+0x5c>)
 8007564:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007566:	4b09      	ldr	r3, [pc, #36]	; (800758c <prvInitialiseTaskLists+0x70>)
 8007568:	4a04      	ldr	r2, [pc, #16]	; (800757c <prvInitialiseTaskLists+0x60>)
 800756a:	601a      	str	r2, [r3, #0]
}
 800756c:	bf00      	nop
 800756e:	3708      	adds	r7, #8
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}
 8007574:	2400012c 	.word	0x2400012c
 8007578:	240001b8 	.word	0x240001b8
 800757c:	240001cc 	.word	0x240001cc
 8007580:	240001e8 	.word	0x240001e8
 8007584:	240001fc 	.word	0x240001fc
 8007588:	240001e0 	.word	0x240001e0
 800758c:	240001e4 	.word	0x240001e4

08007590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007596:	e019      	b.n	80075cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007598:	f001 f9dc 	bl	8008954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800759c:	4b10      	ldr	r3, [pc, #64]	; (80075e0 <prvCheckTasksWaitingTermination+0x50>)
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3304      	adds	r3, #4
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe fa1d 	bl	80059e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075ae:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <prvCheckTasksWaitingTermination+0x54>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	4a0b      	ldr	r2, [pc, #44]	; (80075e4 <prvCheckTasksWaitingTermination+0x54>)
 80075b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075b8:	4b0b      	ldr	r3, [pc, #44]	; (80075e8 <prvCheckTasksWaitingTermination+0x58>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	3b01      	subs	r3, #1
 80075be:	4a0a      	ldr	r2, [pc, #40]	; (80075e8 <prvCheckTasksWaitingTermination+0x58>)
 80075c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075c2:	f001 f9f7 	bl	80089b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f000 f8d6 	bl	8007778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075cc:	4b06      	ldr	r3, [pc, #24]	; (80075e8 <prvCheckTasksWaitingTermination+0x58>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e1      	bne.n	8007598 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	3708      	adds	r7, #8
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	240001fc 	.word	0x240001fc
 80075e4:	24000214 	.word	0x24000214
 80075e8:	24000210 	.word	0x24000210

080075ec <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
 80075f8:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d102      	bne.n	8007606 <vTaskGetInfo+0x1a>
 8007600:	4b25      	ldr	r3, [pc, #148]	; (8007698 <vTaskGetInfo+0xac>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	e000      	b.n	8007608 <vTaskGetInfo+0x1c>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2200      	movs	r2, #0
 800763e:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8007640:	78fb      	ldrb	r3, [r7, #3]
 8007642:	2b05      	cmp	r3, #5
 8007644:	d00c      	beq.n	8007660 <vTaskGetInfo+0x74>
		{
			if( pxTCB == pxCurrentTCB )
 8007646:	4b14      	ldr	r3, [pc, #80]	; (8007698 <vTaskGetInfo+0xac>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	429a      	cmp	r2, r3
 800764e:	d103      	bne.n	8007658 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	2200      	movs	r2, #0
 8007654:	731a      	strb	r2, [r3, #12]
 8007656:	e00a      	b.n	800766e <vTaskGetInfo+0x82>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	78fa      	ldrb	r2, [r7, #3]
 800765c:	731a      	strb	r2, [r3, #12]
 800765e:	e006      	b.n	800766e <vTaskGetInfo+0x82>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8007660:	6978      	ldr	r0, [r7, #20]
 8007662:	f7ff fb51 	bl	8006d08 <eTaskGetState>
 8007666:	4603      	mov	r3, r0
 8007668:	461a      	mov	r2, r3
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d009      	beq.n	8007688 <vTaskGetInfo+0x9c>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007678:	4618      	mov	r0, r3
 800767a:	f000 f861 	bl	8007740 <prvTaskCheckFreeStackSpace>
 800767e:	4603      	mov	r3, r0
 8007680:	461a      	mov	r2, r3
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8007686:	e002      	b.n	800768e <vTaskGetInfo+0xa2>
			pxTaskStatus->usStackHighWaterMark = 0;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2200      	movs	r2, #0
 800768c:	841a      	strh	r2, [r3, #32]
	}
 800768e:	bf00      	nop
 8007690:	3718      	adds	r7, #24
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
 8007696:	bf00      	nop
 8007698:	24000128 	.word	0x24000128

0800769c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 800769c:	b580      	push	{r7, lr}
 800769e:	b08a      	sub	sp, #40	; 0x28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	4613      	mov	r3, r2
 80076a8:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d03f      	beq.n	8007736 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	623b      	str	r3, [r7, #32]
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	685b      	ldr	r3, [r3, #4]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	6a3b      	ldr	r3, [r7, #32]
 80076c2:	605a      	str	r2, [r3, #4]
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	685a      	ldr	r2, [r3, #4]
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	3308      	adds	r3, #8
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d104      	bne.n	80076da <prvListTasksWithinSingleList+0x3e>
 80076d0:	6a3b      	ldr	r3, [r7, #32]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	605a      	str	r2, [r3, #4]
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	61bb      	str	r3, [r7, #24]
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	605a      	str	r2, [r3, #4]
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	3308      	adds	r3, #8
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d104      	bne.n	8007706 <prvListTasksWithinSingleList+0x6a>
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	605a      	str	r2, [r3, #4]
 8007706:	69bb      	ldr	r3, [r7, #24]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 800770e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007710:	4613      	mov	r3, r2
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	4413      	add	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	461a      	mov	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	1899      	adds	r1, r3, r2
 800771e:	79fb      	ldrb	r3, [r7, #7]
 8007720:	2201      	movs	r2, #1
 8007722:	6978      	ldr	r0, [r7, #20]
 8007724:	f7ff ff62 	bl	80075ec <vTaskGetInfo>
				uxTask++;
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	3301      	adds	r3, #1
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	429a      	cmp	r2, r3
 8007734:	d1d5      	bne.n	80076e2 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8007738:	4618      	mov	r0, r3
 800773a:	3728      	adds	r7, #40	; 0x28
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8007740:	b480      	push	{r7}
 8007742:	b085      	sub	sp, #20
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800774c:	e005      	b.n	800775a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	3301      	adds	r3, #1
 8007752:	607b      	str	r3, [r7, #4]
			ulCount++;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	3301      	adds	r3, #1
 8007758:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	2ba5      	cmp	r3, #165	; 0xa5
 8007760:	d0f5      	beq.n	800774e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	089b      	lsrs	r3, r3, #2
 8007766:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	b29b      	uxth	r3, r3
	}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007784:	4618      	mov	r0, r3
 8007786:	f000 fe99 	bl	80084bc <vPortFree>
			vPortFree( pxTCB );
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fe96 	bl	80084bc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800779e:	4b0c      	ldr	r3, [pc, #48]	; (80077d0 <prvResetNextTaskUnblockTime+0x38>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d104      	bne.n	80077b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80077a8:	4b0a      	ldr	r3, [pc, #40]	; (80077d4 <prvResetNextTaskUnblockTime+0x3c>)
 80077aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077b0:	e008      	b.n	80077c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077b2:	4b07      	ldr	r3, [pc, #28]	; (80077d0 <prvResetNextTaskUnblockTime+0x38>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	4a04      	ldr	r2, [pc, #16]	; (80077d4 <prvResetNextTaskUnblockTime+0x3c>)
 80077c2:	6013      	str	r3, [r2, #0]
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr
 80077d0:	240001e0 	.word	0x240001e0
 80077d4:	24000234 	.word	0x24000234

080077d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077de:	4b0b      	ldr	r3, [pc, #44]	; (800780c <xTaskGetSchedulerState+0x34>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d102      	bne.n	80077ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077e6:	2301      	movs	r3, #1
 80077e8:	607b      	str	r3, [r7, #4]
 80077ea:	e008      	b.n	80077fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ec:	4b08      	ldr	r3, [pc, #32]	; (8007810 <xTaskGetSchedulerState+0x38>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d102      	bne.n	80077fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077f4:	2302      	movs	r3, #2
 80077f6:	607b      	str	r3, [r7, #4]
 80077f8:	e001      	b.n	80077fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077fa:	2300      	movs	r3, #0
 80077fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077fe:	687b      	ldr	r3, [r7, #4]
	}
 8007800:	4618      	mov	r0, r3
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr
 800780c:	24000220 	.word	0x24000220
 8007810:	2400023c 	.word	0x2400023c

08007814 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d05e      	beq.n	80078e8 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800782e:	4b31      	ldr	r3, [pc, #196]	; (80078f4 <xTaskPriorityInherit+0xe0>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007834:	429a      	cmp	r2, r3
 8007836:	d24e      	bcs.n	80078d6 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	699b      	ldr	r3, [r3, #24]
 800783c:	2b00      	cmp	r3, #0
 800783e:	db06      	blt.n	800784e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007840:	4b2c      	ldr	r3, [pc, #176]	; (80078f4 <xTaskPriorityInherit+0xe0>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007846:	f1c3 0207 	rsb	r2, r3, #7
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6959      	ldr	r1, [r3, #20]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	4a26      	ldr	r2, [pc, #152]	; (80078f8 <xTaskPriorityInherit+0xe4>)
 8007860:	4413      	add	r3, r2
 8007862:	4299      	cmp	r1, r3
 8007864:	d12f      	bne.n	80078c6 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	3304      	adds	r3, #4
 800786a:	4618      	mov	r0, r3
 800786c:	f7fe f8bc 	bl	80059e8 <uxListRemove>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10a      	bne.n	800788c <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800787a:	2201      	movs	r2, #1
 800787c:	fa02 f303 	lsl.w	r3, r2, r3
 8007880:	43da      	mvns	r2, r3
 8007882:	4b1e      	ldr	r3, [pc, #120]	; (80078fc <xTaskPriorityInherit+0xe8>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4013      	ands	r3, r2
 8007888:	4a1c      	ldr	r2, [pc, #112]	; (80078fc <xTaskPriorityInherit+0xe8>)
 800788a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800788c:	4b19      	ldr	r3, [pc, #100]	; (80078f4 <xTaskPriorityInherit+0xe0>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	2201      	movs	r2, #1
 800789c:	409a      	lsls	r2, r3
 800789e:	4b17      	ldr	r3, [pc, #92]	; (80078fc <xTaskPriorityInherit+0xe8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	4a15      	ldr	r2, [pc, #84]	; (80078fc <xTaskPriorityInherit+0xe8>)
 80078a6:	6013      	str	r3, [r2, #0]
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ac:	4613      	mov	r3, r2
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	4413      	add	r3, r2
 80078b2:	009b      	lsls	r3, r3, #2
 80078b4:	4a10      	ldr	r2, [pc, #64]	; (80078f8 <xTaskPriorityInherit+0xe4>)
 80078b6:	441a      	add	r2, r3
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	3304      	adds	r3, #4
 80078bc:	4619      	mov	r1, r3
 80078be:	4610      	mov	r0, r2
 80078c0:	f7fe f835 	bl	800592e <vListInsertEnd>
 80078c4:	e004      	b.n	80078d0 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078c6:	4b0b      	ldr	r3, [pc, #44]	; (80078f4 <xTaskPriorityInherit+0xe0>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80078d0:	2301      	movs	r3, #1
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	e008      	b.n	80078e8 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078da:	4b06      	ldr	r3, [pc, #24]	; (80078f4 <xTaskPriorityInherit+0xe0>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d201      	bcs.n	80078e8 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80078e4:	2301      	movs	r3, #1
 80078e6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078e8:	68fb      	ldr	r3, [r7, #12]
	}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
 80078f2:	bf00      	nop
 80078f4:	24000128 	.word	0x24000128
 80078f8:	2400012c 	.word	0x2400012c
 80078fc:	2400021c 	.word	0x2400021c

08007900 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800790c:	2300      	movs	r3, #0
 800790e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d06e      	beq.n	80079f4 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007916:	4b3a      	ldr	r3, [pc, #232]	; (8007a00 <xTaskPriorityDisinherit+0x100>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	429a      	cmp	r2, r3
 800791e:	d00a      	beq.n	8007936 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	60fb      	str	r3, [r7, #12]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10a      	bne.n	8007954 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800793e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007942:	f383 8811 	msr	BASEPRI, r3
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	60bb      	str	r3, [r7, #8]
}
 8007950:	bf00      	nop
 8007952:	e7fe      	b.n	8007952 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007958:	1e5a      	subs	r2, r3, #1
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007966:	429a      	cmp	r2, r3
 8007968:	d044      	beq.n	80079f4 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796e:	2b00      	cmp	r3, #0
 8007970:	d140      	bne.n	80079f4 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	3304      	adds	r3, #4
 8007976:	4618      	mov	r0, r3
 8007978:	f7fe f836 	bl	80059e8 <uxListRemove>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d115      	bne.n	80079ae <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007986:	491f      	ldr	r1, [pc, #124]	; (8007a04 <xTaskPriorityDisinherit+0x104>)
 8007988:	4613      	mov	r3, r2
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	4413      	add	r3, r2
 800798e:	009b      	lsls	r3, r3, #2
 8007990:	440b      	add	r3, r1
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d10a      	bne.n	80079ae <xTaskPriorityDisinherit+0xae>
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	2201      	movs	r2, #1
 800799e:	fa02 f303 	lsl.w	r3, r2, r3
 80079a2:	43da      	mvns	r2, r3
 80079a4:	4b18      	ldr	r3, [pc, #96]	; (8007a08 <xTaskPriorityDisinherit+0x108>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4013      	ands	r3, r2
 80079aa:	4a17      	ldr	r2, [pc, #92]	; (8007a08 <xTaskPriorityDisinherit+0x108>)
 80079ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	f1c3 0207 	rsb	r2, r3, #7
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c6:	2201      	movs	r2, #1
 80079c8:	409a      	lsls	r2, r3
 80079ca:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <xTaskPriorityDisinherit+0x108>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	4a0d      	ldr	r2, [pc, #52]	; (8007a08 <xTaskPriorityDisinherit+0x108>)
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079d8:	4613      	mov	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	4a08      	ldr	r2, [pc, #32]	; (8007a04 <xTaskPriorityDisinherit+0x104>)
 80079e2:	441a      	add	r2, r3
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	3304      	adds	r3, #4
 80079e8:	4619      	mov	r1, r3
 80079ea:	4610      	mov	r0, r2
 80079ec:	f7fd ff9f 	bl	800592e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079f0:	2301      	movs	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079f4:	697b      	ldr	r3, [r7, #20]
	}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3718      	adds	r7, #24
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	24000128 	.word	0x24000128
 8007a04:	2400012c 	.word	0x2400012c
 8007a08:	2400021c 	.word	0x2400021c

08007a0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b088      	sub	sp, #32
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d077      	beq.n	8007b14 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007a24:	69bb      	ldr	r3, [r7, #24]
 8007a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d10a      	bne.n	8007a42 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a30:	f383 8811 	msr	BASEPRI, r3
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	f3bf 8f4f 	dsb	sy
 8007a3c:	60fb      	str	r3, [r7, #12]
}
 8007a3e:	bf00      	nop
 8007a40:	e7fe      	b.n	8007a40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d902      	bls.n	8007a52 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	61fb      	str	r3, [r7, #28]
 8007a50:	e002      	b.n	8007a58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a56:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5c:	69fa      	ldr	r2, [r7, #28]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d058      	beq.n	8007b14 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d153      	bne.n	8007b14 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007a6c:	4b2b      	ldr	r3, [pc, #172]	; (8007b1c <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d10a      	bne.n	8007a8c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	60bb      	str	r3, [r7, #8]
}
 8007a88:	bf00      	nop
 8007a8a:	e7fe      	b.n	8007a8a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	69fa      	ldr	r2, [r7, #28]
 8007a96:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	db04      	blt.n	8007aaa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	f1c3 0207 	rsb	r2, r3, #7
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	6959      	ldr	r1, [r3, #20]
 8007aae:	693a      	ldr	r2, [r7, #16]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	009b      	lsls	r3, r3, #2
 8007ab4:	4413      	add	r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4a19      	ldr	r2, [pc, #100]	; (8007b20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007aba:	4413      	add	r3, r2
 8007abc:	4299      	cmp	r1, r3
 8007abe:	d129      	bne.n	8007b14 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ac0:	69bb      	ldr	r3, [r7, #24]
 8007ac2:	3304      	adds	r3, #4
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fd ff8f 	bl	80059e8 <uxListRemove>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10a      	bne.n	8007ae6 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ada:	43da      	mvns	r2, r3
 8007adc:	4b11      	ldr	r3, [pc, #68]	; (8007b24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4013      	ands	r3, r2
 8007ae2:	4a10      	ldr	r2, [pc, #64]	; (8007b24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007ae4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aea:	2201      	movs	r2, #1
 8007aec:	409a      	lsls	r2, r3
 8007aee:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	4a0b      	ldr	r2, [pc, #44]	; (8007b24 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4a06      	ldr	r2, [pc, #24]	; (8007b20 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007b06:	441a      	add	r2, r3
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	4610      	mov	r0, r2
 8007b10:	f7fd ff0d 	bl	800592e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b14:	bf00      	nop
 8007b16:	3720      	adds	r7, #32
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	24000128 	.word	0x24000128
 8007b20:	2400012c 	.word	0x2400012c
 8007b24:	2400021c 	.word	0x2400021c

08007b28 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8007b32:	6839      	ldr	r1, [r7, #0]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f00e fb28 	bl	801618a <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7f8 fbda 	bl	80002f4 <strlen>
 8007b40:	60f8      	str	r0, [r7, #12]
 8007b42:	e007      	b.n	8007b54 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4413      	add	r3, r2
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	3301      	adds	r3, #1
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2b0e      	cmp	r3, #14
 8007b58:	d9f4      	bls.n	8007b44 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4413      	add	r3, r2
 8007b60:	2200      	movs	r2, #0
 8007b62:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	4413      	add	r3, r2
	}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8007b74:	b590      	push	{r4, r7, lr}
 8007b76:	b089      	sub	sp, #36	; 0x24
 8007b78:	af02      	add	r7, sp, #8
 8007b7a:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8007b82:	4b45      	ldr	r3, [pc, #276]	; (8007c98 <vTaskList+0x124>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8007b88:	4b43      	ldr	r3, [pc, #268]	; (8007c98 <vTaskList+0x124>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	00db      	lsls	r3, r3, #3
 8007b90:	4413      	add	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4618      	mov	r0, r3
 8007b96:	f000 fbc5 	bl	8008324 <pvPortMalloc>
 8007b9a:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d076      	beq.n	8007c90 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	68f9      	ldr	r1, [r7, #12]
 8007ba6:	68b8      	ldr	r0, [r7, #8]
 8007ba8:	f7ff fa10 	bl	8006fcc <uxTaskGetSystemState>
 8007bac:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8007bae:	2300      	movs	r3, #0
 8007bb0:	617b      	str	r3, [r7, #20]
 8007bb2:	e066      	b.n	8007c82 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8007bb4:	697a      	ldr	r2, [r7, #20]
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	7b1b      	ldrb	r3, [r3, #12]
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d81b      	bhi.n	8007c02 <vTaskList+0x8e>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <vTaskList+0x5c>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007be5 	.word	0x08007be5
 8007bd4:	08007beb 	.word	0x08007beb
 8007bd8:	08007bf1 	.word	0x08007bf1
 8007bdc:	08007bf7 	.word	0x08007bf7
 8007be0:	08007bfd 	.word	0x08007bfd
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8007be4:	2358      	movs	r3, #88	; 0x58
 8007be6:	74fb      	strb	r3, [r7, #19]
										break;
 8007be8:	e00e      	b.n	8007c08 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8007bea:	2352      	movs	r3, #82	; 0x52
 8007bec:	74fb      	strb	r3, [r7, #19]
										break;
 8007bee:	e00b      	b.n	8007c08 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8007bf0:	2342      	movs	r3, #66	; 0x42
 8007bf2:	74fb      	strb	r3, [r7, #19]
										break;
 8007bf4:	e008      	b.n	8007c08 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8007bf6:	2353      	movs	r3, #83	; 0x53
 8007bf8:	74fb      	strb	r3, [r7, #19]
										break;
 8007bfa:	e005      	b.n	8007c08 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8007bfc:	2344      	movs	r3, #68	; 0x44
 8007bfe:	74fb      	strb	r3, [r7, #19]
										break;
 8007c00:	e002      	b.n	8007c08 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8007c02:	2300      	movs	r3, #0
 8007c04:	74fb      	strb	r3, [r7, #19]
										break;
 8007c06:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	00db      	lsls	r3, r3, #3
 8007c0e:	4413      	add	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	461a      	mov	r2, r3
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4413      	add	r3, r2
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	4619      	mov	r1, r3
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff ff83 	bl	8007b28 <prvWriteNameToBuffer>
 8007c22:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8007c24:	7cf9      	ldrb	r1, [r7, #19]
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	00db      	lsls	r3, r3, #3
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	461a      	mov	r2, r3
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	4413      	add	r3, r2
 8007c36:	6918      	ldr	r0, [r3, #16]
 8007c38:	697a      	ldr	r2, [r7, #20]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	4413      	add	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	461a      	mov	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	4413      	add	r3, r2
 8007c48:	8c1b      	ldrh	r3, [r3, #32]
 8007c4a:	461c      	mov	r4, r3
 8007c4c:	697a      	ldr	r2, [r7, #20]
 8007c4e:	4613      	mov	r3, r2
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	461a      	mov	r2, r3
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	9301      	str	r3, [sp, #4]
 8007c60:	9400      	str	r4, [sp, #0]
 8007c62:	4603      	mov	r3, r0
 8007c64:	460a      	mov	r2, r1
 8007c66:	490d      	ldr	r1, [pc, #52]	; (8007c9c <vTaskList+0x128>)
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f00e fa5f 	bl	801612c <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7f8 fb40 	bl	80002f4 <strlen>
 8007c74:	4602      	mov	r2, r0
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4413      	add	r3, r2
 8007c7a:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	617b      	str	r3, [r7, #20]
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d394      	bcc.n	8007bb4 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8007c8a:	68b8      	ldr	r0, [r7, #8]
 8007c8c:	f000 fc16 	bl	80084bc <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c90:	bf00      	nop
 8007c92:	371c      	adds	r7, #28
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd90      	pop	{r4, r7, pc}
 8007c98:	24000214 	.word	0x24000214
 8007c9c:	08017ee8 	.word	0x08017ee8

08007ca0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ca0:	b480      	push	{r7}
 8007ca2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007ca4:	4b07      	ldr	r3, [pc, #28]	; (8007cc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d004      	beq.n	8007cb6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007cac:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007cb2:	3201      	adds	r2, #1
 8007cb4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007cb6:	4b03      	ldr	r3, [pc, #12]	; (8007cc4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
	}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	24000128 	.word	0x24000128

08007cc8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cd2:	4b21      	ldr	r3, [pc, #132]	; (8007d58 <prvAddCurrentTaskToDelayedList+0x90>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cd8:	4b20      	ldr	r3, [pc, #128]	; (8007d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fd fe82 	bl	80059e8 <uxListRemove>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10b      	bne.n	8007d02 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007cea:	4b1c      	ldr	r3, [pc, #112]	; (8007d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf6:	43da      	mvns	r2, r3
 8007cf8:	4b19      	ldr	r3, [pc, #100]	; (8007d60 <prvAddCurrentTaskToDelayedList+0x98>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	4a18      	ldr	r2, [pc, #96]	; (8007d60 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d00:	6013      	str	r3, [r2, #0]
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4413      	add	r3, r2
 8007d08:	60bb      	str	r3, [r7, #8]

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d0a:	4b14      	ldr	r3, [pc, #80]	; (8007d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	605a      	str	r2, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8007d12:	68ba      	ldr	r2, [r7, #8]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d209      	bcs.n	8007d2e <prvAddCurrentTaskToDelayedList+0x66>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	4b0f      	ldr	r3, [pc, #60]	; (8007d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3304      	adds	r3, #4
 8007d24:	4619      	mov	r1, r3
 8007d26:	4610      	mov	r0, r2
 8007d28:	f7fd fe25 	bl	8005976 <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d2c:	e010      	b.n	8007d50 <prvAddCurrentTaskToDelayedList+0x88>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d2e:	4b0e      	ldr	r3, [pc, #56]	; (8007d68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	3304      	adds	r3, #4
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	f7fd fe1b 	bl	8005976 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8007d40:	4b0a      	ldr	r3, [pc, #40]	; (8007d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	68ba      	ldr	r2, [r7, #8]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d202      	bcs.n	8007d50 <prvAddCurrentTaskToDelayedList+0x88>
				xNextTaskUnblockTime = xTimeToWake;
 8007d4a:	4a08      	ldr	r2, [pc, #32]	; (8007d6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	6013      	str	r3, [r2, #0]
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	24000218 	.word	0x24000218
 8007d5c:	24000128 	.word	0x24000128
 8007d60:	2400021c 	.word	0x2400021c
 8007d64:	240001e4 	.word	0x240001e4
 8007d68:	240001e0 	.word	0x240001e0
 8007d6c:	24000234 	.word	0x24000234

08007d70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b085      	sub	sp, #20
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	4603      	mov	r3, r0
 8007d78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007d7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d82:	2b84      	cmp	r3, #132	; 0x84
 8007d84:	d005      	beq.n	8007d92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007d86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	3303      	adds	r3, #3
 8007d90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007d92:	68fb      	ldr	r3, [r7, #12]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007da6:	f3ef 8305 	mrs	r3, IPSR
 8007daa:	607b      	str	r3, [r7, #4]
  return(result);
 8007dac:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bf14      	ite	ne
 8007db2:	2301      	movne	r3, #1
 8007db4:	2300      	moveq	r3, #0
 8007db6:	b2db      	uxtb	r3, r3
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007dc8:	f7fe ffec 	bl	8006da4 <vTaskStartScheduler>
  
  return osOK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8007dd6:	f7ff ffe3 	bl	8007da0 <inHandlerMode>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8007de0:	f7ff f8e2 	bl	8006fa8 <xTaskGetTickCountFromISR>
 8007de4:	4603      	mov	r3, r0
 8007de6:	e002      	b.n	8007dee <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8007de8:	f7ff f8ce 	bl	8006f88 <xTaskGetTickCount>
 8007dec:	4603      	mov	r3, r0
  }
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	bd80      	pop	{r7, pc}

08007df2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007df2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007df4:	b087      	sub	sp, #28
 8007df6:	af02      	add	r7, sp, #8
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	685c      	ldr	r4, [r3, #4]
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007e08:	b29e      	uxth	r6, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7ff ffad 	bl	8007d70 <makeFreeRtosPriority>
 8007e16:	4602      	mov	r2, r0
 8007e18:	f107 030c 	add.w	r3, r7, #12
 8007e1c:	9301      	str	r3, [sp, #4]
 8007e1e:	9200      	str	r2, [sp, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	4632      	mov	r2, r6
 8007e24:	4629      	mov	r1, r5
 8007e26:	4620      	mov	r0, r4
 8007e28:	f7fe fd6c 	bl	8006904 <xTaskCreate>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d001      	beq.n	8007e36 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8007e32:	2300      	movs	r3, #0
 8007e34:	e000      	b.n	8007e38 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8007e36:	68fb      	ldr	r3, [r7, #12]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3714      	adds	r7, #20
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e40 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b082      	sub	sp, #8
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f7fe fe99 	bl	8006b80 <vTaskDelete>
  return osOK;
 8007e4e:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <osDelay+0x16>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	e000      	b.n	8007e70 <osDelay+0x18>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fe ff15 	bl	8006ca0 <vTaskDelay>
  
  return osOK;
 8007e76:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3710      	adds	r7, #16
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b082      	sub	sp, #8
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8007e88:	2001      	movs	r0, #1
 8007e8a:	f7fd feb2 	bl	8005bf2 <xQueueCreateMutex>
 8007e8e:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3708      	adds	r7, #8
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b084      	sub	sp, #16
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d101      	bne.n	8007eb0 <osMutexWait+0x18>
    return osErrorParameter;
 8007eac:	2380      	movs	r3, #128	; 0x80
 8007eae:	e03a      	b.n	8007f26 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eba:	d103      	bne.n	8007ec4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8007ebc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e009      	b.n	8007ed8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d006      	beq.n	8007ed8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d101      	bne.n	8007ed8 <osMutexWait+0x40>
      ticks = 1;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007ed8:	f7ff ff62 	bl	8007da0 <inHandlerMode>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d017      	beq.n	8007f12 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007ee2:	f107 0308 	add.w	r3, r7, #8
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	2100      	movs	r1, #0
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7fe fade 	bl	80064ac <xQueueReceiveFromISR>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	d001      	beq.n	8007efa <osMutexWait+0x62>
      return osErrorOS;
 8007ef6:	23ff      	movs	r3, #255	; 0xff
 8007ef8:	e015      	b.n	8007f26 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d011      	beq.n	8007f24 <osMutexWait+0x8c>
 8007f00:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <osMutexWait+0x98>)
 8007f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f06:	601a      	str	r2, [r3, #0]
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	e008      	b.n	8007f24 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7fe f9bd 	bl	8006294 <xQueueSemaphoreTake>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d001      	beq.n	8007f24 <osMutexWait+0x8c>
    return osErrorOS;
 8007f20:	23ff      	movs	r3, #255	; 0xff
 8007f22:	e000      	b.n	8007f26 <osMutexWait+0x8e>
  }
  
  return osOK;
 8007f24:	2300      	movs	r3, #0
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3710      	adds	r7, #16
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	e000ed04 	.word	0xe000ed04

08007f34 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8007f44:	f7ff ff2c 	bl	8007da0 <inHandlerMode>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d016      	beq.n	8007f7c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8007f4e:	f107 0308 	add.w	r3, r7, #8
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7fe f830 	bl	8005fba <xQueueGiveFromISR>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d001      	beq.n	8007f64 <osMutexRelease+0x30>
      return osErrorOS;
 8007f60:	23ff      	movs	r3, #255	; 0xff
 8007f62:	e017      	b.n	8007f94 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d013      	beq.n	8007f92 <osMutexRelease+0x5e>
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <osMutexRelease+0x68>)
 8007f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f70:	601a      	str	r2, [r3, #0]
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	e00a      	b.n	8007f92 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2100      	movs	r1, #0
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7fd fe80 	bl	8005c88 <xQueueGenericSend>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d001      	beq.n	8007f92 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8007f8e:	23ff      	movs	r3, #255	; 0xff
 8007f90:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8007f92:	68fb      	ldr	r3, [r7, #12]
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3710      	adds	r7, #16
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	e000ed04 	.word	0xe000ed04

08007fa0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d110      	bne.n	8007fd2 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8007fb0:	2203      	movs	r2, #3
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	2001      	movs	r0, #1
 8007fb6:	f7fd fda9 	bl	8005b0c <xQueueGenericCreate>
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d005      	beq.n	8007fce <osSemaphoreCreate+0x2e>
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f7fd fe5d 	bl	8005c88 <xQueueGenericSend>
    return sema;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	e006      	b.n	8007fe0 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fd fe22 	bl	8005c22 <xQueueCreateCountingSemaphore>
 8007fde:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8007ffc:	2380      	movs	r3, #128	; 0x80
 8007ffe:	e03a      	b.n	8008076 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800800a:	d103      	bne.n	8008014 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800800c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	e009      	b.n	8008028 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d006      	beq.n	8008028 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <osSemaphoreWait+0x40>
      ticks = 1;
 8008024:	2301      	movs	r3, #1
 8008026:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008028:	f7ff feba 	bl	8007da0 <inHandlerMode>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d017      	beq.n	8008062 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008032:	f107 0308 	add.w	r3, r7, #8
 8008036:	461a      	mov	r2, r3
 8008038:	2100      	movs	r1, #0
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7fe fa36 	bl	80064ac <xQueueReceiveFromISR>
 8008040:	4603      	mov	r3, r0
 8008042:	2b01      	cmp	r3, #1
 8008044:	d001      	beq.n	800804a <osSemaphoreWait+0x62>
      return osErrorOS;
 8008046:	23ff      	movs	r3, #255	; 0xff
 8008048:	e015      	b.n	8008076 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d011      	beq.n	8008074 <osSemaphoreWait+0x8c>
 8008050:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <osSemaphoreWait+0x98>)
 8008052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	e008      	b.n	8008074 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008062:	68f9      	ldr	r1, [r7, #12]
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7fe f915 	bl	8006294 <xQueueSemaphoreTake>
 800806a:	4603      	mov	r3, r0
 800806c:	2b01      	cmp	r3, #1
 800806e:	d001      	beq.n	8008074 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008070:	23ff      	movs	r3, #255	; 0xff
 8008072:	e000      	b.n	8008076 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	e000ed04 	.word	0xe000ed04

08008084 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800808c:	2300      	movs	r3, #0
 800808e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008090:	2300      	movs	r3, #0
 8008092:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008094:	f7ff fe84 	bl	8007da0 <inHandlerMode>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d016      	beq.n	80080cc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800809e:	f107 0308 	add.w	r3, r7, #8
 80080a2:	4619      	mov	r1, r3
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7fd ff88 	bl	8005fba <xQueueGiveFromISR>
 80080aa:	4603      	mov	r3, r0
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d001      	beq.n	80080b4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80080b0:	23ff      	movs	r3, #255	; 0xff
 80080b2:	e017      	b.n	80080e4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d013      	beq.n	80080e2 <osSemaphoreRelease+0x5e>
 80080ba:	4b0c      	ldr	r3, [pc, #48]	; (80080ec <osSemaphoreRelease+0x68>)
 80080bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c0:	601a      	str	r2, [r3, #0]
 80080c2:	f3bf 8f4f 	dsb	sy
 80080c6:	f3bf 8f6f 	isb	sy
 80080ca:	e00a      	b.n	80080e2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80080cc:	2300      	movs	r3, #0
 80080ce:	2200      	movs	r2, #0
 80080d0:	2100      	movs	r1, #0
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f7fd fdd8 	bl	8005c88 <xQueueGenericSend>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d001      	beq.n	80080e2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80080de:	23ff      	movs	r3, #255	; 0xff
 80080e0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80080e2:	68fb      	ldr	r3, [r7, #12]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3710      	adds	r7, #16
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	e000ed04 	.word	0xe000ed04

080080f0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80080f8:	f7ff fe52 	bl	8007da0 <inHandlerMode>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008102:	2382      	movs	r3, #130	; 0x82
 8008104:	e003      	b.n	800810e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f7fe fa8c 	bl	8006624 <vQueueDelete>

  return osOK; 
 800810c:	2300      	movs	r3, #0
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
 800811e:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	4619      	mov	r1, r3
 800812c:	f7fd fcee 	bl	8005b0c <xQueueGenericCreate>
 8008130:	4603      	mov	r3, r0
#endif
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b086      	sub	sp, #24
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008148:	2300      	movs	r3, #0
 800814a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d101      	bne.n	800815a <osMessagePut+0x1e>
    ticks = 1;
 8008156:	2301      	movs	r3, #1
 8008158:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800815a:	f7ff fe21 	bl	8007da0 <inHandlerMode>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d018      	beq.n	8008196 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008164:	f107 0210 	add.w	r2, r7, #16
 8008168:	f107 0108 	add.w	r1, r7, #8
 800816c:	2300      	movs	r3, #0
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7fd fe88 	bl	8005e84 <xQueueGenericSendFromISR>
 8008174:	4603      	mov	r3, r0
 8008176:	2b01      	cmp	r3, #1
 8008178:	d001      	beq.n	800817e <osMessagePut+0x42>
      return osErrorOS;
 800817a:	23ff      	movs	r3, #255	; 0xff
 800817c:	e018      	b.n	80081b0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d014      	beq.n	80081ae <osMessagePut+0x72>
 8008184:	4b0c      	ldr	r3, [pc, #48]	; (80081b8 <osMessagePut+0x7c>)
 8008186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	e00b      	b.n	80081ae <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008196:	f107 0108 	add.w	r1, r7, #8
 800819a:	2300      	movs	r3, #0
 800819c:	697a      	ldr	r2, [r7, #20]
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f7fd fd72 	bl	8005c88 <xQueueGenericSend>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d001      	beq.n	80081ae <osMessagePut+0x72>
      return osErrorOS;
 80081aa:	23ff      	movs	r3, #255	; 0xff
 80081ac:	e000      	b.n	80081b0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80081ae:	2300      	movs	r3, #0
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3718      	adds	r7, #24
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}
 80081b8:	e000ed04 	.word	0xe000ed04

080081bc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80081bc:	b590      	push	{r4, r7, lr}
 80081be:	b08b      	sub	sp, #44	; 0x2c
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80081cc:	2300      	movs	r3, #0
 80081ce:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d10a      	bne.n	80081ec <osMessageGet+0x30>
    event.status = osErrorParameter;
 80081d6:	2380      	movs	r3, #128	; 0x80
 80081d8:	617b      	str	r3, [r7, #20]
    return event;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	461c      	mov	r4, r3
 80081de:	f107 0314 	add.w	r3, r7, #20
 80081e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081ea:	e054      	b.n	8008296 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80081ec:	2300      	movs	r3, #0
 80081ee:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80081f0:	2300      	movs	r3, #0
 80081f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081fa:	d103      	bne.n	8008204 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80081fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008200:	627b      	str	r3, [r7, #36]	; 0x24
 8008202:	e009      	b.n	8008218 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d006      	beq.n	8008218 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	d101      	bne.n	8008218 <osMessageGet+0x5c>
      ticks = 1;
 8008214:	2301      	movs	r3, #1
 8008216:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008218:	f7ff fdc2 	bl	8007da0 <inHandlerMode>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01c      	beq.n	800825c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008222:	f107 0220 	add.w	r2, r7, #32
 8008226:	f107 0314 	add.w	r3, r7, #20
 800822a:	3304      	adds	r3, #4
 800822c:	4619      	mov	r1, r3
 800822e:	68b8      	ldr	r0, [r7, #8]
 8008230:	f7fe f93c 	bl	80064ac <xQueueReceiveFromISR>
 8008234:	4603      	mov	r3, r0
 8008236:	2b01      	cmp	r3, #1
 8008238:	d102      	bne.n	8008240 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800823a:	2310      	movs	r3, #16
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	e001      	b.n	8008244 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008240:	2300      	movs	r3, #0
 8008242:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008244:	6a3b      	ldr	r3, [r7, #32]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d01d      	beq.n	8008286 <osMessageGet+0xca>
 800824a:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <osMessageGet+0xe4>)
 800824c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008250:	601a      	str	r2, [r3, #0]
 8008252:	f3bf 8f4f 	dsb	sy
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	e014      	b.n	8008286 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800825c:	f107 0314 	add.w	r3, r7, #20
 8008260:	3304      	adds	r3, #4
 8008262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008264:	4619      	mov	r1, r3
 8008266:	68b8      	ldr	r0, [r7, #8]
 8008268:	f7fd ff34 	bl	80060d4 <xQueueReceive>
 800826c:	4603      	mov	r3, r0
 800826e:	2b01      	cmp	r3, #1
 8008270:	d102      	bne.n	8008278 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008272:	2310      	movs	r3, #16
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	e006      	b.n	8008286 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	2b00      	cmp	r3, #0
 800827c:	d101      	bne.n	8008282 <osMessageGet+0xc6>
 800827e:	2300      	movs	r3, #0
 8008280:	e000      	b.n	8008284 <osMessageGet+0xc8>
 8008282:	2340      	movs	r3, #64	; 0x40
 8008284:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	461c      	mov	r4, r3
 800828a:	f107 0314 	add.w	r3, r7, #20
 800828e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008292:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	372c      	adds	r7, #44	; 0x2c
 800829a:	46bd      	mov	sp, r7
 800829c:	bd90      	pop	{r4, r7, pc}
 800829e:	bf00      	nop
 80082a0:	e000ed04 	.word	0xe000ed04

080082a4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80082a8:	f7ff fa96 	bl	80077d8 <xTaskGetSchedulerState>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d001      	beq.n	80082b6 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80082b2:	f000 fbe1 	bl	8008a78 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80082b6:	bf00      	nop
 80082b8:	bd80      	pop	{r7, pc}

080082ba <osThreadList>:
* @param   buffer   A buffer into which the above mentioned details
*          will be written
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadList (uint8_t *buffer)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b082      	sub	sp, #8
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) )
  vTaskList((char *)buffer);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7ff fc56 	bl	8007b74 <vTaskList>
#endif
  return osOK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80082da:	f7ff fd61 	bl	8007da0 <inHandlerMode>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d004      	beq.n	80082ee <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f7fe f97f 	bl	80065e8 <uxQueueMessagesWaitingFromISR>
 80082ea:	4603      	mov	r3, r0
 80082ec:	e003      	b.n	80082f6 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fe f95c 	bl	80065ac <uxQueueMessagesWaiting>
 80082f4:	4603      	mov	r3, r0
  }
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3708      	adds	r7, #8
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008306:	f7ff fd4b 	bl	8007da0 <inHandlerMode>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <osMessageDelete+0x16>
    return osErrorISR;
 8008310:	2382      	movs	r3, #130	; 0x82
 8008312:	e003      	b.n	800831c <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f7fe f985 	bl	8006624 <vQueueDelete>

  return osOK; 
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b08a      	sub	sp, #40	; 0x28
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800832c:	2300      	movs	r3, #0
 800832e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008330:	f7fe fd80 	bl	8006e34 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008334:	4b5b      	ldr	r3, [pc, #364]	; (80084a4 <pvPortMalloc+0x180>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d101      	bne.n	8008340 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800833c:	f000 f920 	bl	8008580 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008340:	4b59      	ldr	r3, [pc, #356]	; (80084a8 <pvPortMalloc+0x184>)
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4013      	ands	r3, r2
 8008348:	2b00      	cmp	r3, #0
 800834a:	f040 8093 	bne.w	8008474 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d01d      	beq.n	8008390 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008354:	2208      	movs	r2, #8
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4413      	add	r3, r2
 800835a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f003 0307 	and.w	r3, r3, #7
 8008362:	2b00      	cmp	r3, #0
 8008364:	d014      	beq.n	8008390 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f023 0307 	bic.w	r3, r3, #7
 800836c:	3308      	adds	r3, #8
 800836e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	2b00      	cmp	r3, #0
 8008378:	d00a      	beq.n	8008390 <pvPortMalloc+0x6c>
	__asm volatile
 800837a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837e:	f383 8811 	msr	BASEPRI, r3
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	617b      	str	r3, [r7, #20]
}
 800838c:	bf00      	nop
 800838e:	e7fe      	b.n	800838e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d06e      	beq.n	8008474 <pvPortMalloc+0x150>
 8008396:	4b45      	ldr	r3, [pc, #276]	; (80084ac <pvPortMalloc+0x188>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	687a      	ldr	r2, [r7, #4]
 800839c:	429a      	cmp	r2, r3
 800839e:	d869      	bhi.n	8008474 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083a0:	4b43      	ldr	r3, [pc, #268]	; (80084b0 <pvPortMalloc+0x18c>)
 80083a2:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083a4:	4b42      	ldr	r3, [pc, #264]	; (80084b0 <pvPortMalloc+0x18c>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083aa:	e004      	b.n	80083b6 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d903      	bls.n	80083c8 <pvPortMalloc+0xa4>
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1f1      	bne.n	80083ac <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083c8:	4b36      	ldr	r3, [pc, #216]	; (80084a4 <pvPortMalloc+0x180>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d050      	beq.n	8008474 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2208      	movs	r2, #8
 80083d8:	4413      	add	r3, r2
 80083da:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	681a      	ldr	r2, [r3, #0]
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	685a      	ldr	r2, [r3, #4]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	1ad2      	subs	r2, r2, r3
 80083ec:	2308      	movs	r3, #8
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d91f      	bls.n	8008434 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4413      	add	r3, r2
 80083fa:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <pvPortMalloc+0xf8>
	__asm volatile
 8008406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800840a:	f383 8811 	msr	BASEPRI, r3
 800840e:	f3bf 8f6f 	isb	sy
 8008412:	f3bf 8f4f 	dsb	sy
 8008416:	613b      	str	r3, [r7, #16]
}
 8008418:	bf00      	nop
 800841a:	e7fe      	b.n	800841a <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800841c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841e:	685a      	ldr	r2, [r3, #4]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	1ad2      	subs	r2, r2, r3
 8008424:	69bb      	ldr	r3, [r7, #24]
 8008426:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	687a      	ldr	r2, [r7, #4]
 800842c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800842e:	69b8      	ldr	r0, [r7, #24]
 8008430:	f000 f908 	bl	8008644 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008434:	4b1d      	ldr	r3, [pc, #116]	; (80084ac <pvPortMalloc+0x188>)
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	4a1b      	ldr	r2, [pc, #108]	; (80084ac <pvPortMalloc+0x188>)
 8008440:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008442:	4b1a      	ldr	r3, [pc, #104]	; (80084ac <pvPortMalloc+0x188>)
 8008444:	681a      	ldr	r2, [r3, #0]
 8008446:	4b1b      	ldr	r3, [pc, #108]	; (80084b4 <pvPortMalloc+0x190>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	429a      	cmp	r2, r3
 800844c:	d203      	bcs.n	8008456 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800844e:	4b17      	ldr	r3, [pc, #92]	; (80084ac <pvPortMalloc+0x188>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a18      	ldr	r2, [pc, #96]	; (80084b4 <pvPortMalloc+0x190>)
 8008454:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	4b13      	ldr	r3, [pc, #76]	; (80084a8 <pvPortMalloc+0x184>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	431a      	orrs	r2, r3
 8008460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008462:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	2200      	movs	r2, #0
 8008468:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800846a:	4b13      	ldr	r3, [pc, #76]	; (80084b8 <pvPortMalloc+0x194>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3301      	adds	r3, #1
 8008470:	4a11      	ldr	r2, [pc, #68]	; (80084b8 <pvPortMalloc+0x194>)
 8008472:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008474:	f7fe fcec 	bl	8006e50 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	f003 0307 	and.w	r3, r3, #7
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00a      	beq.n	8008498 <pvPortMalloc+0x174>
	__asm volatile
 8008482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008486:	f383 8811 	msr	BASEPRI, r3
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	f3bf 8f4f 	dsb	sy
 8008492:	60fb      	str	r3, [r7, #12]
}
 8008494:	bf00      	nop
 8008496:	e7fe      	b.n	8008496 <pvPortMalloc+0x172>
	return pvReturn;
 8008498:	69fb      	ldr	r3, [r7, #28]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3728      	adds	r7, #40	; 0x28
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	24006648 	.word	0x24006648
 80084a8:	2400665c 	.word	0x2400665c
 80084ac:	2400664c 	.word	0x2400664c
 80084b0:	24006640 	.word	0x24006640
 80084b4:	24006650 	.word	0x24006650
 80084b8:	24006654 	.word	0x24006654

080084bc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b086      	sub	sp, #24
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d04d      	beq.n	800856a <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084ce:	2308      	movs	r3, #8
 80084d0:	425b      	negs	r3, r3
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4413      	add	r3, r2
 80084d6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	685a      	ldr	r2, [r3, #4]
 80084e0:	4b24      	ldr	r3, [pc, #144]	; (8008574 <vPortFree+0xb8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4013      	ands	r3, r2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10a      	bne.n	8008500 <vPortFree+0x44>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	60fb      	str	r3, [r7, #12]
}
 80084fc:	bf00      	nop
 80084fe:	e7fe      	b.n	80084fe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00a      	beq.n	800851e <vPortFree+0x62>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	60bb      	str	r3, [r7, #8]
}
 800851a:	bf00      	nop
 800851c:	e7fe      	b.n	800851c <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	4b14      	ldr	r3, [pc, #80]	; (8008574 <vPortFree+0xb8>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4013      	ands	r3, r2
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01e      	beq.n	800856a <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d11a      	bne.n	800856a <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	685a      	ldr	r2, [r3, #4]
 8008538:	4b0e      	ldr	r3, [pc, #56]	; (8008574 <vPortFree+0xb8>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	43db      	mvns	r3, r3
 800853e:	401a      	ands	r2, r3
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008544:	f7fe fc76 	bl	8006e34 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	4b0a      	ldr	r3, [pc, #40]	; (8008578 <vPortFree+0xbc>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4413      	add	r3, r2
 8008552:	4a09      	ldr	r2, [pc, #36]	; (8008578 <vPortFree+0xbc>)
 8008554:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008556:	6938      	ldr	r0, [r7, #16]
 8008558:	f000 f874 	bl	8008644 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800855c:	4b07      	ldr	r3, [pc, #28]	; (800857c <vPortFree+0xc0>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3301      	adds	r3, #1
 8008562:	4a06      	ldr	r2, [pc, #24]	; (800857c <vPortFree+0xc0>)
 8008564:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008566:	f7fe fc73 	bl	8006e50 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800856a:	bf00      	nop
 800856c:	3718      	adds	r7, #24
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}
 8008572:	bf00      	nop
 8008574:	2400665c 	.word	0x2400665c
 8008578:	2400664c 	.word	0x2400664c
 800857c:	24006658 	.word	0x24006658

08008580 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008586:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 800858a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800858c:	4b27      	ldr	r3, [pc, #156]	; (800862c <prvHeapInit+0xac>)
 800858e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f003 0307 	and.w	r3, r3, #7
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00c      	beq.n	80085b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	3307      	adds	r3, #7
 800859e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f023 0307 	bic.w	r3, r3, #7
 80085a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	4a1f      	ldr	r2, [pc, #124]	; (800862c <prvHeapInit+0xac>)
 80085b0:	4413      	add	r3, r2
 80085b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085b8:	4a1d      	ldr	r2, [pc, #116]	; (8008630 <prvHeapInit+0xb0>)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085be:	4b1c      	ldr	r3, [pc, #112]	; (8008630 <prvHeapInit+0xb0>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	4413      	add	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085cc:	2208      	movs	r2, #8
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	1a9b      	subs	r3, r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0307 	bic.w	r3, r3, #7
 80085da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4a15      	ldr	r2, [pc, #84]	; (8008634 <prvHeapInit+0xb4>)
 80085e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085e2:	4b14      	ldr	r3, [pc, #80]	; (8008634 <prvHeapInit+0xb4>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2200      	movs	r2, #0
 80085e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085ea:	4b12      	ldr	r3, [pc, #72]	; (8008634 <prvHeapInit+0xb4>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2200      	movs	r2, #0
 80085f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	68fa      	ldr	r2, [r7, #12]
 80085fa:	1ad2      	subs	r2, r2, r3
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008600:	4b0c      	ldr	r3, [pc, #48]	; (8008634 <prvHeapInit+0xb4>)
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	4a0a      	ldr	r2, [pc, #40]	; (8008638 <prvHeapInit+0xb8>)
 800860e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	4a09      	ldr	r2, [pc, #36]	; (800863c <prvHeapInit+0xbc>)
 8008616:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008618:	4b09      	ldr	r3, [pc, #36]	; (8008640 <prvHeapInit+0xc0>)
 800861a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800861e:	601a      	str	r2, [r3, #0]
}
 8008620:	bf00      	nop
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	24000240 	.word	0x24000240
 8008630:	24006640 	.word	0x24006640
 8008634:	24006648 	.word	0x24006648
 8008638:	24006650 	.word	0x24006650
 800863c:	2400664c 	.word	0x2400664c
 8008640:	2400665c 	.word	0x2400665c

08008644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008644:	b480      	push	{r7}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800864c:	4b28      	ldr	r3, [pc, #160]	; (80086f0 <prvInsertBlockIntoFreeList+0xac>)
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	e002      	b.n	8008658 <prvInsertBlockIntoFreeList+0x14>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	687a      	ldr	r2, [r7, #4]
 800865e:	429a      	cmp	r2, r3
 8008660:	d8f7      	bhi.n	8008652 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	4413      	add	r3, r2
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	429a      	cmp	r2, r3
 8008672:	d108      	bne.n	8008686 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	441a      	add	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	68ba      	ldr	r2, [r7, #8]
 8008690:	441a      	add	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	429a      	cmp	r2, r3
 8008698:	d118      	bne.n	80086cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	4b15      	ldr	r3, [pc, #84]	; (80086f4 <prvInsertBlockIntoFreeList+0xb0>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d00d      	beq.n	80086c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685a      	ldr	r2, [r3, #4]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	441a      	add	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	601a      	str	r2, [r3, #0]
 80086c0:	e008      	b.n	80086d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086c2:	4b0c      	ldr	r3, [pc, #48]	; (80086f4 <prvInsertBlockIntoFreeList+0xb0>)
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	e003      	b.n	80086d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d002      	beq.n	80086e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086e2:	bf00      	nop
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	24006640 	.word	0x24006640
 80086f4:	24006648 	.word	0x24006648

080086f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	3b04      	subs	r3, #4
 8008708:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008710:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3b04      	subs	r3, #4
 8008716:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	f023 0201 	bic.w	r2, r3, #1
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	3b04      	subs	r3, #4
 8008726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008728:	4a0c      	ldr	r2, [pc, #48]	; (800875c <pxPortInitialiseStack+0x64>)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3b14      	subs	r3, #20
 8008732:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3b04      	subs	r3, #4
 800873e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	f06f 0202 	mvn.w	r2, #2
 8008746:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	3b20      	subs	r3, #32
 800874c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800874e:	68fb      	ldr	r3, [r7, #12]
}
 8008750:	4618      	mov	r0, r3
 8008752:	3714      	adds	r7, #20
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	08008761 	.word	0x08008761

08008760 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800876a:	4b12      	ldr	r3, [pc, #72]	; (80087b4 <prvTaskExitError+0x54>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008772:	d00a      	beq.n	800878a <prvTaskExitError+0x2a>
	__asm volatile
 8008774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008778:	f383 8811 	msr	BASEPRI, r3
 800877c:	f3bf 8f6f 	isb	sy
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	60fb      	str	r3, [r7, #12]
}
 8008786:	bf00      	nop
 8008788:	e7fe      	b.n	8008788 <prvTaskExitError+0x28>
	__asm volatile
 800878a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878e:	f383 8811 	msr	BASEPRI, r3
 8008792:	f3bf 8f6f 	isb	sy
 8008796:	f3bf 8f4f 	dsb	sy
 800879a:	60bb      	str	r3, [r7, #8]
}
 800879c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800879e:	bf00      	nop
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d0fc      	beq.n	80087a0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087a6:	bf00      	nop
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	24000040 	.word	0x24000040
	...

080087c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087c0:	4b07      	ldr	r3, [pc, #28]	; (80087e0 <pxCurrentTCBConst2>)
 80087c2:	6819      	ldr	r1, [r3, #0]
 80087c4:	6808      	ldr	r0, [r1, #0]
 80087c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087ca:	f380 8809 	msr	PSP, r0
 80087ce:	f3bf 8f6f 	isb	sy
 80087d2:	f04f 0000 	mov.w	r0, #0
 80087d6:	f380 8811 	msr	BASEPRI, r0
 80087da:	4770      	bx	lr
 80087dc:	f3af 8000 	nop.w

080087e0 <pxCurrentTCBConst2>:
 80087e0:	24000128 	.word	0x24000128
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087e4:	bf00      	nop
 80087e6:	bf00      	nop

080087e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087e8:	4808      	ldr	r0, [pc, #32]	; (800880c <prvPortStartFirstTask+0x24>)
 80087ea:	6800      	ldr	r0, [r0, #0]
 80087ec:	6800      	ldr	r0, [r0, #0]
 80087ee:	f380 8808 	msr	MSP, r0
 80087f2:	f04f 0000 	mov.w	r0, #0
 80087f6:	f380 8814 	msr	CONTROL, r0
 80087fa:	b662      	cpsie	i
 80087fc:	b661      	cpsie	f
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	df00      	svc	0
 8008808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800880a:	bf00      	nop
 800880c:	e000ed08 	.word	0xe000ed08

08008810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008816:	4b46      	ldr	r3, [pc, #280]	; (8008930 <xPortStartScheduler+0x120>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a46      	ldr	r2, [pc, #280]	; (8008934 <xPortStartScheduler+0x124>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d10a      	bne.n	8008836 <xPortStartScheduler+0x26>
	__asm volatile
 8008820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008824:	f383 8811 	msr	BASEPRI, r3
 8008828:	f3bf 8f6f 	isb	sy
 800882c:	f3bf 8f4f 	dsb	sy
 8008830:	613b      	str	r3, [r7, #16]
}
 8008832:	bf00      	nop
 8008834:	e7fe      	b.n	8008834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008836:	4b3e      	ldr	r3, [pc, #248]	; (8008930 <xPortStartScheduler+0x120>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a3f      	ldr	r2, [pc, #252]	; (8008938 <xPortStartScheduler+0x128>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d10a      	bne.n	8008856 <xPortStartScheduler+0x46>
	__asm volatile
 8008840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008844:	f383 8811 	msr	BASEPRI, r3
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	f3bf 8f4f 	dsb	sy
 8008850:	60fb      	str	r3, [r7, #12]
}
 8008852:	bf00      	nop
 8008854:	e7fe      	b.n	8008854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008856:	4b39      	ldr	r3, [pc, #228]	; (800893c <xPortStartScheduler+0x12c>)
 8008858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	22ff      	movs	r2, #255	; 0xff
 8008866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	b2db      	uxtb	r3, r3
 800886e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008870:	78fb      	ldrb	r3, [r7, #3]
 8008872:	b2db      	uxtb	r3, r3
 8008874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008878:	b2da      	uxtb	r2, r3
 800887a:	4b31      	ldr	r3, [pc, #196]	; (8008940 <xPortStartScheduler+0x130>)
 800887c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800887e:	4b31      	ldr	r3, [pc, #196]	; (8008944 <xPortStartScheduler+0x134>)
 8008880:	2207      	movs	r2, #7
 8008882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008884:	e009      	b.n	800889a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008886:	4b2f      	ldr	r3, [pc, #188]	; (8008944 <xPortStartScheduler+0x134>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	3b01      	subs	r3, #1
 800888c:	4a2d      	ldr	r2, [pc, #180]	; (8008944 <xPortStartScheduler+0x134>)
 800888e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008890:	78fb      	ldrb	r3, [r7, #3]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	b2db      	uxtb	r3, r3
 8008898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	b2db      	uxtb	r3, r3
 800889e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a2:	2b80      	cmp	r3, #128	; 0x80
 80088a4:	d0ef      	beq.n	8008886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088a6:	4b27      	ldr	r3, [pc, #156]	; (8008944 <xPortStartScheduler+0x134>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f1c3 0307 	rsb	r3, r3, #7
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	d00a      	beq.n	80088c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80088b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b6:	f383 8811 	msr	BASEPRI, r3
 80088ba:	f3bf 8f6f 	isb	sy
 80088be:	f3bf 8f4f 	dsb	sy
 80088c2:	60bb      	str	r3, [r7, #8]
}
 80088c4:	bf00      	nop
 80088c6:	e7fe      	b.n	80088c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088c8:	4b1e      	ldr	r3, [pc, #120]	; (8008944 <xPortStartScheduler+0x134>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	021b      	lsls	r3, r3, #8
 80088ce:	4a1d      	ldr	r2, [pc, #116]	; (8008944 <xPortStartScheduler+0x134>)
 80088d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80088d2:	4b1c      	ldr	r3, [pc, #112]	; (8008944 <xPortStartScheduler+0x134>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088da:	4a1a      	ldr	r2, [pc, #104]	; (8008944 <xPortStartScheduler+0x134>)
 80088dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088e6:	4b18      	ldr	r3, [pc, #96]	; (8008948 <xPortStartScheduler+0x138>)
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a17      	ldr	r2, [pc, #92]	; (8008948 <xPortStartScheduler+0x138>)
 80088ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088f2:	4b15      	ldr	r3, [pc, #84]	; (8008948 <xPortStartScheduler+0x138>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a14      	ldr	r2, [pc, #80]	; (8008948 <xPortStartScheduler+0x138>)
 80088f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80088fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088fe:	f000 f8dd 	bl	8008abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008902:	4b12      	ldr	r3, [pc, #72]	; (800894c <xPortStartScheduler+0x13c>)
 8008904:	2200      	movs	r2, #0
 8008906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008908:	f000 f8fc 	bl	8008b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800890c:	4b10      	ldr	r3, [pc, #64]	; (8008950 <xPortStartScheduler+0x140>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a0f      	ldr	r2, [pc, #60]	; (8008950 <xPortStartScheduler+0x140>)
 8008912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008918:	f7ff ff66 	bl	80087e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800891c:	f7fe fc88 	bl	8007230 <vTaskSwitchContext>
	prvTaskExitError();
 8008920:	f7ff ff1e 	bl	8008760 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008924:	2300      	movs	r3, #0
}
 8008926:	4618      	mov	r0, r3
 8008928:	3718      	adds	r7, #24
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	e000ed00 	.word	0xe000ed00
 8008934:	410fc271 	.word	0x410fc271
 8008938:	410fc270 	.word	0x410fc270
 800893c:	e000e400 	.word	0xe000e400
 8008940:	24006660 	.word	0x24006660
 8008944:	24006664 	.word	0x24006664
 8008948:	e000ed20 	.word	0xe000ed20
 800894c:	24000040 	.word	0x24000040
 8008950:	e000ef34 	.word	0xe000ef34

08008954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
	__asm volatile
 800895a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800895e:	f383 8811 	msr	BASEPRI, r3
 8008962:	f3bf 8f6f 	isb	sy
 8008966:	f3bf 8f4f 	dsb	sy
 800896a:	607b      	str	r3, [r7, #4]
}
 800896c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800896e:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <vPortEnterCritical+0x58>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3301      	adds	r3, #1
 8008974:	4a0d      	ldr	r2, [pc, #52]	; (80089ac <vPortEnterCritical+0x58>)
 8008976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008978:	4b0c      	ldr	r3, [pc, #48]	; (80089ac <vPortEnterCritical+0x58>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d10f      	bne.n	80089a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008980:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <vPortEnterCritical+0x5c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d00a      	beq.n	80089a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	603b      	str	r3, [r7, #0]
}
 800899c:	bf00      	nop
 800899e:	e7fe      	b.n	800899e <vPortEnterCritical+0x4a>
	}
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	24000040 	.word	0x24000040
 80089b0:	e000ed04 	.word	0xe000ed04

080089b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089ba:	4b12      	ldr	r3, [pc, #72]	; (8008a04 <vPortExitCritical+0x50>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10a      	bne.n	80089d8 <vPortExitCritical+0x24>
	__asm volatile
 80089c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089c6:	f383 8811 	msr	BASEPRI, r3
 80089ca:	f3bf 8f6f 	isb	sy
 80089ce:	f3bf 8f4f 	dsb	sy
 80089d2:	607b      	str	r3, [r7, #4]
}
 80089d4:	bf00      	nop
 80089d6:	e7fe      	b.n	80089d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089d8:	4b0a      	ldr	r3, [pc, #40]	; (8008a04 <vPortExitCritical+0x50>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	3b01      	subs	r3, #1
 80089de:	4a09      	ldr	r2, [pc, #36]	; (8008a04 <vPortExitCritical+0x50>)
 80089e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089e2:	4b08      	ldr	r3, [pc, #32]	; (8008a04 <vPortExitCritical+0x50>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d105      	bne.n	80089f6 <vPortExitCritical+0x42>
 80089ea:	2300      	movs	r3, #0
 80089ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	f383 8811 	msr	BASEPRI, r3
}
 80089f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089f6:	bf00      	nop
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr
 8008a02:	bf00      	nop
 8008a04:	24000040 	.word	0x24000040
	...

08008a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a10:	f3ef 8009 	mrs	r0, PSP
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	4b15      	ldr	r3, [pc, #84]	; (8008a70 <pxCurrentTCBConst>)
 8008a1a:	681a      	ldr	r2, [r3, #0]
 8008a1c:	f01e 0f10 	tst.w	lr, #16
 8008a20:	bf08      	it	eq
 8008a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a2a:	6010      	str	r0, [r2, #0]
 8008a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008a34:	f380 8811 	msr	BASEPRI, r0
 8008a38:	f3bf 8f4f 	dsb	sy
 8008a3c:	f3bf 8f6f 	isb	sy
 8008a40:	f7fe fbf6 	bl	8007230 <vTaskSwitchContext>
 8008a44:	f04f 0000 	mov.w	r0, #0
 8008a48:	f380 8811 	msr	BASEPRI, r0
 8008a4c:	bc09      	pop	{r0, r3}
 8008a4e:	6819      	ldr	r1, [r3, #0]
 8008a50:	6808      	ldr	r0, [r1, #0]
 8008a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a56:	f01e 0f10 	tst.w	lr, #16
 8008a5a:	bf08      	it	eq
 8008a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a60:	f380 8809 	msr	PSP, r0
 8008a64:	f3bf 8f6f 	isb	sy
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	f3af 8000 	nop.w

08008a70 <pxCurrentTCBConst>:
 8008a70:	24000128 	.word	0x24000128
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a74:	bf00      	nop
 8008a76:	bf00      	nop

08008a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	607b      	str	r3, [r7, #4]
}
 8008a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a92:	f7fe fb15 	bl	80070c0 <xTaskIncrementTick>
 8008a96:	4603      	mov	r3, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d003      	beq.n	8008aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a9c:	4b06      	ldr	r3, [pc, #24]	; (8008ab8 <xPortSysTickHandler+0x40>)
 8008a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	f383 8811 	msr	BASEPRI, r3
}
 8008aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ab0:	bf00      	nop
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	e000ed04 	.word	0xe000ed04

08008abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008abc:	b480      	push	{r7}
 8008abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008ac0:	4b0b      	ldr	r3, [pc, #44]	; (8008af0 <vPortSetupTimerInterrupt+0x34>)
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008ac6:	4b0b      	ldr	r3, [pc, #44]	; (8008af4 <vPortSetupTimerInterrupt+0x38>)
 8008ac8:	2200      	movs	r2, #0
 8008aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008acc:	4b0a      	ldr	r3, [pc, #40]	; (8008af8 <vPortSetupTimerInterrupt+0x3c>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a0a      	ldr	r2, [pc, #40]	; (8008afc <vPortSetupTimerInterrupt+0x40>)
 8008ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad6:	099b      	lsrs	r3, r3, #6
 8008ad8:	4a09      	ldr	r2, [pc, #36]	; (8008b00 <vPortSetupTimerInterrupt+0x44>)
 8008ada:	3b01      	subs	r3, #1
 8008adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008ade:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <vPortSetupTimerInterrupt+0x34>)
 8008ae0:	2207      	movs	r2, #7
 8008ae2:	601a      	str	r2, [r3, #0]
}
 8008ae4:	bf00      	nop
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	e000e010 	.word	0xe000e010
 8008af4:	e000e018 	.word	0xe000e018
 8008af8:	24000030 	.word	0x24000030
 8008afc:	10624dd3 	.word	0x10624dd3
 8008b00:	e000e014 	.word	0xe000e014

08008b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008b14 <vPortEnableVFP+0x10>
 8008b08:	6801      	ldr	r1, [r0, #0]
 8008b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008b0e:	6001      	str	r1, [r0, #0]
 8008b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b12:	bf00      	nop
 8008b14:	e000ed88 	.word	0xe000ed88

08008b18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b1e:	f3ef 8305 	mrs	r3, IPSR
 8008b22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2b0f      	cmp	r3, #15
 8008b28:	d914      	bls.n	8008b54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b2a:	4a17      	ldr	r2, [pc, #92]	; (8008b88 <vPortValidateInterruptPriority+0x70>)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	4413      	add	r3, r2
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b34:	4b15      	ldr	r3, [pc, #84]	; (8008b8c <vPortValidateInterruptPriority+0x74>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	7afa      	ldrb	r2, [r7, #11]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d20a      	bcs.n	8008b54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b42:	f383 8811 	msr	BASEPRI, r3
 8008b46:	f3bf 8f6f 	isb	sy
 8008b4a:	f3bf 8f4f 	dsb	sy
 8008b4e:	607b      	str	r3, [r7, #4]
}
 8008b50:	bf00      	nop
 8008b52:	e7fe      	b.n	8008b52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b54:	4b0e      	ldr	r3, [pc, #56]	; (8008b90 <vPortValidateInterruptPriority+0x78>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008b5c:	4b0d      	ldr	r3, [pc, #52]	; (8008b94 <vPortValidateInterruptPriority+0x7c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d90a      	bls.n	8008b7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b68:	f383 8811 	msr	BASEPRI, r3
 8008b6c:	f3bf 8f6f 	isb	sy
 8008b70:	f3bf 8f4f 	dsb	sy
 8008b74:	603b      	str	r3, [r7, #0]
}
 8008b76:	bf00      	nop
 8008b78:	e7fe      	b.n	8008b78 <vPortValidateInterruptPriority+0x60>
	}
 8008b7a:	bf00      	nop
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	e000e3f0 	.word	0xe000e3f0
 8008b8c:	24006660 	.word	0x24006660
 8008b90:	e000ed0c 	.word	0xe000ed0c
 8008b94:	24006664 	.word	0x24006664

08008b98 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	330c      	adds	r3, #12
 8008ba8:	461a      	mov	r2, r3
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f002 fbbb 	bl	800b328 <tcpip_send_msg_wait_sem>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8008bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d103      	bne.n	8008bc6 <netconn_apimsg+0x2e>
    return apimsg->err;
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008bc4:	e001      	b.n	8008bca <netconn_apimsg+0x32>
  }
  return err;
 8008bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
	...

08008bd4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b08c      	sub	sp, #48	; 0x30
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	4603      	mov	r3, r0
 8008bdc:	603a      	str	r2, [r7, #0]
 8008bde:	71fb      	strb	r3, [r7, #7]
 8008be0:	460b      	mov	r3, r1
 8008be2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8008be4:	79fb      	ldrb	r3, [r7, #7]
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 f95f 	bl	8009eac <netconn_alloc>
 8008bee:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8008bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d054      	beq.n	8008ca0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8008bf6:	79bb      	ldrb	r3, [r7, #6]
 8008bf8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8008bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfc:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8008bfe:	f107 0308 	add.w	r3, r7, #8
 8008c02:	4619      	mov	r1, r3
 8008c04:	4829      	ldr	r0, [pc, #164]	; (8008cac <netconn_new_with_proto_and_callback+0xd8>)
 8008c06:	f7ff ffc7 	bl	8008b98 <netconn_apimsg>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8008c10:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d043      	beq.n	8008ca0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d005      	beq.n	8008c2c <netconn_new_with_proto_and_callback+0x58>
 8008c20:	4b23      	ldr	r3, [pc, #140]	; (8008cb0 <netconn_new_with_proto_and_callback+0xdc>)
 8008c22:	22a3      	movs	r2, #163	; 0xa3
 8008c24:	4923      	ldr	r1, [pc, #140]	; (8008cb4 <netconn_new_with_proto_and_callback+0xe0>)
 8008c26:	4824      	ldr	r0, [pc, #144]	; (8008cb8 <netconn_new_with_proto_and_callback+0xe4>)
 8008c28:	f00d fa28 	bl	801607c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c2e:	3310      	adds	r3, #16
 8008c30:	4618      	mov	r0, r3
 8008c32:	f00d f84c 	bl	8015cce <sys_mbox_valid>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d105      	bne.n	8008c48 <netconn_new_with_proto_and_callback+0x74>
 8008c3c:	4b1c      	ldr	r3, [pc, #112]	; (8008cb0 <netconn_new_with_proto_and_callback+0xdc>)
 8008c3e:	22a4      	movs	r2, #164	; 0xa4
 8008c40:	491e      	ldr	r1, [pc, #120]	; (8008cbc <netconn_new_with_proto_and_callback+0xe8>)
 8008c42:	481d      	ldr	r0, [pc, #116]	; (8008cb8 <netconn_new_with_proto_and_callback+0xe4>)
 8008c44:	f00d fa1a 	bl	801607c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c4a:	3314      	adds	r3, #20
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f00d f83e 	bl	8015cce <sys_mbox_valid>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d005      	beq.n	8008c64 <netconn_new_with_proto_and_callback+0x90>
 8008c58:	4b15      	ldr	r3, [pc, #84]	; (8008cb0 <netconn_new_with_proto_and_callback+0xdc>)
 8008c5a:	22a6      	movs	r2, #166	; 0xa6
 8008c5c:	4918      	ldr	r1, [pc, #96]	; (8008cc0 <netconn_new_with_proto_and_callback+0xec>)
 8008c5e:	4816      	ldr	r0, [pc, #88]	; (8008cb8 <netconn_new_with_proto_and_callback+0xe4>)
 8008c60:	f00d fa0c 	bl	801607c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8008c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c66:	330c      	adds	r3, #12
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f00d f8bf 	bl	8015dec <sys_sem_valid>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d105      	bne.n	8008c80 <netconn_new_with_proto_and_callback+0xac>
 8008c74:	4b0e      	ldr	r3, [pc, #56]	; (8008cb0 <netconn_new_with_proto_and_callback+0xdc>)
 8008c76:	22a9      	movs	r2, #169	; 0xa9
 8008c78:	4912      	ldr	r1, [pc, #72]	; (8008cc4 <netconn_new_with_proto_and_callback+0xf0>)
 8008c7a:	480f      	ldr	r0, [pc, #60]	; (8008cb8 <netconn_new_with_proto_and_callback+0xe4>)
 8008c7c:	f00d f9fe 	bl	801607c <iprintf>
      sys_sem_free(&conn->op_completed);
 8008c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c82:	330c      	adds	r3, #12
 8008c84:	4618      	mov	r0, r3
 8008c86:	f00d f8a4 	bl	8015dd2 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8c:	3310      	adds	r3, #16
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f00c ff96 	bl	8015bc0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008c94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c96:	2007      	movs	r0, #7
 8008c98:	f005 fb64 	bl	800e364 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	e000      	b.n	8008ca2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8008ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3730      	adds	r7, #48	; 0x30
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	08009e81 	.word	0x08009e81
 8008cb0:	08017ef8 	.word	0x08017ef8
 8008cb4:	08017f70 	.word	0x08017f70
 8008cb8:	08017f94 	.word	0x08017f94
 8008cbc:	08017fbc 	.word	0x08017fbc
 8008cc0:	08017fd4 	.word	0x08017fd4
 8008cc4:	08017ff8 	.word	0x08017ff8

08008cc8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b08c      	sub	sp, #48	; 0x30
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d101      	bne.n	8008cda <netconn_prepare_delete+0x12>
    return ERR_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	e014      	b.n	8008d04 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008cde:	2329      	movs	r3, #41	; 0x29
 8008ce0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8008ce2:	f107 030c 	add.w	r3, r7, #12
 8008ce6:	4619      	mov	r1, r3
 8008ce8:	4808      	ldr	r0, [pc, #32]	; (8008d0c <netconn_prepare_delete+0x44>)
 8008cea:	f7ff ff55 	bl	8008b98 <netconn_apimsg>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8008cf4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d002      	beq.n	8008d02 <netconn_prepare_delete+0x3a>
    return err;
 8008cfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008d00:	e000      	b.n	8008d04 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8008d02:	2300      	movs	r3, #0
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3730      	adds	r7, #48	; 0x30
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	0800a3e5 	.word	0x0800a3e5

08008d10 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d101      	bne.n	8008d22 <netconn_delete+0x12>
    return ERR_OK;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	e00d      	b.n	8008d3e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7ff ffd0 	bl	8008cc8 <netconn_prepare_delete>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d102      	bne.n	8008d3a <netconn_delete+0x2a>
    netconn_free(conn);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f001 f927 	bl	8009f88 <netconn_free>
  }
  return err;
 8008d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08e      	sub	sp, #56	; 0x38
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d109      	bne.n	8008d70 <netconn_bind+0x28>
 8008d5c:	4b11      	ldr	r3, [pc, #68]	; (8008da4 <netconn_bind+0x5c>)
 8008d5e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8008d62:	4911      	ldr	r1, [pc, #68]	; (8008da8 <netconn_bind+0x60>)
 8008d64:	4811      	ldr	r0, [pc, #68]	; (8008dac <netconn_bind+0x64>)
 8008d66:	f00d f989 	bl	801607c <iprintf>
 8008d6a:	f06f 030f 	mvn.w	r3, #15
 8008d6e:	e015      	b.n	8008d9c <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d101      	bne.n	8008d7a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8008d76:	4b0e      	ldr	r3, [pc, #56]	; (8008db0 <netconn_bind+0x68>)
 8008d78:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008d82:	88fb      	ldrh	r3, [r7, #6]
 8008d84:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008d86:	f107 0314 	add.w	r3, r7, #20
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	4809      	ldr	r0, [pc, #36]	; (8008db4 <netconn_bind+0x6c>)
 8008d8e:	f7ff ff03 	bl	8008b98 <netconn_apimsg>
 8008d92:	4603      	mov	r3, r0
 8008d94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008d98:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3738      	adds	r7, #56	; 0x38
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	08017ef8 	.word	0x08017ef8
 8008da8:	08018074 	.word	0x08018074
 8008dac:	08017f94 	.word	0x08017f94
 8008db0:	08018ff8 	.word	0x08018ff8
 8008db4:	0800a5ad 	.word	0x0800a5ad

08008db8 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08e      	sub	sp, #56	; 0x38
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d109      	bne.n	8008de0 <netconn_connect+0x28>
 8008dcc:	4b11      	ldr	r3, [pc, #68]	; (8008e14 <netconn_connect+0x5c>)
 8008dce:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8008dd2:	4911      	ldr	r1, [pc, #68]	; (8008e18 <netconn_connect+0x60>)
 8008dd4:	4811      	ldr	r0, [pc, #68]	; (8008e1c <netconn_connect+0x64>)
 8008dd6:	f00d f951 	bl	801607c <iprintf>
 8008dda:	f06f 030f 	mvn.w	r3, #15
 8008dde:	e015      	b.n	8008e0c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8008de6:	4b0e      	ldr	r3, [pc, #56]	; (8008e20 <netconn_connect+0x68>)
 8008de8:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008df2:	88fb      	ldrh	r3, [r7, #6]
 8008df4:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8008df6:	f107 0314 	add.w	r3, r7, #20
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	4809      	ldr	r0, [pc, #36]	; (8008e24 <netconn_connect+0x6c>)
 8008dfe:	f7ff fecb 	bl	8008b98 <netconn_apimsg>
 8008e02:	4603      	mov	r3, r0
 8008e04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8008e08:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3738      	adds	r7, #56	; 0x38
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	08017ef8 	.word	0x08017ef8
 8008e18:	080180b0 	.word	0x080180b0
 8008e1c:	08017f94 	.word	0x08017f94
 8008e20:	08018ff8 	.word	0x08018ff8
 8008e24:	0800a741 	.word	0x0800a741

08008e28 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08c      	sub	sp, #48	; 0x30
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d109      	bne.n	8008e4e <netconn_listen_with_backlog+0x26>
 8008e3a:	4b0d      	ldr	r3, [pc, #52]	; (8008e70 <netconn_listen_with_backlog+0x48>)
 8008e3c:	f240 12bb 	movw	r2, #443	; 0x1bb
 8008e40:	490c      	ldr	r1, [pc, #48]	; (8008e74 <netconn_listen_with_backlog+0x4c>)
 8008e42:	480d      	ldr	r0, [pc, #52]	; (8008e78 <netconn_listen_with_backlog+0x50>)
 8008e44:	f00d f91a 	bl	801607c <iprintf>
 8008e48:	f06f 030f 	mvn.w	r3, #15
 8008e4c:	e00c      	b.n	8008e68 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8008e52:	f107 030c 	add.w	r3, r7, #12
 8008e56:	4619      	mov	r1, r3
 8008e58:	4808      	ldr	r0, [pc, #32]	; (8008e7c <netconn_listen_with_backlog+0x54>)
 8008e5a:	f7ff fe9d 	bl	8008b98 <netconn_apimsg>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008e64:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3730      	adds	r7, #48	; 0x30
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	08017ef8 	.word	0x08017ef8
 8008e74:	080180f4 	.word	0x080180f4
 8008e78:	08017f94 	.word	0x08017f94
 8008e7c:	0800a8bd 	.word	0x0800a8bd

08008e80 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008e8a:	683b      	ldr	r3, [r7, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d109      	bne.n	8008ea4 <netconn_accept+0x24>
 8008e90:	4b3d      	ldr	r3, [pc, #244]	; (8008f88 <netconn_accept+0x108>)
 8008e92:	f240 12e1 	movw	r2, #481	; 0x1e1
 8008e96:	493d      	ldr	r1, [pc, #244]	; (8008f8c <netconn_accept+0x10c>)
 8008e98:	483d      	ldr	r0, [pc, #244]	; (8008f90 <netconn_accept+0x110>)
 8008e9a:	f00d f8ef 	bl	801607c <iprintf>
 8008e9e:	f06f 030f 	mvn.w	r3, #15
 8008ea2:	e06c      	b.n	8008f7e <netconn_accept+0xfe>
  *new_conn = NULL;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d109      	bne.n	8008ec4 <netconn_accept+0x44>
 8008eb0:	4b35      	ldr	r3, [pc, #212]	; (8008f88 <netconn_accept+0x108>)
 8008eb2:	f240 12e3 	movw	r2, #483	; 0x1e3
 8008eb6:	4937      	ldr	r1, [pc, #220]	; (8008f94 <netconn_accept+0x114>)
 8008eb8:	4835      	ldr	r0, [pc, #212]	; (8008f90 <netconn_accept+0x110>)
 8008eba:	f00d f8df 	bl	801607c <iprintf>
 8008ebe:	f06f 030f 	mvn.w	r3, #15
 8008ec2:	e05c      	b.n	8008f7e <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8008ec4:	6878      	ldr	r0, [r7, #4]
 8008ec6:	f000 fb6c 	bl	80095a2 <netconn_err>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008ece:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d002      	beq.n	8008edc <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8008ed6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008eda:	e050      	b.n	8008f7e <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	3314      	adds	r3, #20
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f00c fef4 	bl	8015cce <sys_mbox_valid>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d005      	beq.n	8008ef8 <netconn_accept+0x78>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	7f1b      	ldrb	r3, [r3, #28]
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d002      	beq.n	8008efe <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8008ef8:	f06f 030e 	mvn.w	r3, #14
 8008efc:	e03f      	b.n	8008f7e <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	7f1b      	ldrb	r3, [r3, #28]
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d00e      	beq.n	8008f28 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	3314      	adds	r3, #20
 8008f0e:	f107 020c 	add.w	r2, r7, #12
 8008f12:	4611      	mov	r1, r2
 8008f14:	4618      	mov	r0, r3
 8008f16:	f00c febe 	bl	8015c96 <sys_arch_mbox_tryfetch>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f20:	d10a      	bne.n	8008f38 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8008f22:	f06f 0306 	mvn.w	r3, #6
 8008f26:	e02a      	b.n	8008f7e <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	3314      	adds	r3, #20
 8008f2c:	f107 010c 	add.w	r1, r7, #12
 8008f30:	2200      	movs	r2, #0
 8008f32:	4618      	mov	r0, r3
 8008f34:	f00c fe70 	bl	8015c18 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d005      	beq.n	8008f4c <netconn_accept+0xcc>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f44:	2200      	movs	r2, #0
 8008f46:	2101      	movs	r1, #1
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f107 0213 	add.w	r2, r7, #19
 8008f52:	4611      	mov	r1, r2
 8008f54:	4618      	mov	r0, r3
 8008f56:	f000 fb75 	bl	8009644 <lwip_netconn_is_err_msg>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d002      	beq.n	8008f66 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008f60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008f64:	e00b      	b.n	8008f7e <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d102      	bne.n	8008f72 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008f6c:	f06f 030e 	mvn.w	r3, #14
 8008f70:	e005      	b.n	8008f7e <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	697a      	ldr	r2, [r7, #20]
 8008f7a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008f7c:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3718      	adds	r7, #24
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	08017ef8 	.word	0x08017ef8
 8008f8c:	08018114 	.word	0x08018114
 8008f90:	08017f94 	.word	0x08017f94
 8008f94:	08018134 	.word	0x08018134

08008f98 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b088      	sub	sp, #32
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	60f8      	str	r0, [r7, #12]
 8008fa0:	60b9      	str	r1, [r7, #8]
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d109      	bne.n	8008fc4 <netconn_recv_data+0x2c>
 8008fb0:	4b58      	ldr	r3, [pc, #352]	; (8009114 <netconn_recv_data+0x17c>)
 8008fb2:	f44f 7212 	mov.w	r2, #584	; 0x248
 8008fb6:	4958      	ldr	r1, [pc, #352]	; (8009118 <netconn_recv_data+0x180>)
 8008fb8:	4858      	ldr	r0, [pc, #352]	; (800911c <netconn_recv_data+0x184>)
 8008fba:	f00d f85f 	bl	801607c <iprintf>
 8008fbe:	f06f 030f 	mvn.w	r3, #15
 8008fc2:	e0a2      	b.n	800910a <netconn_recv_data+0x172>
  *new_buf = NULL;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d109      	bne.n	8008fe4 <netconn_recv_data+0x4c>
 8008fd0:	4b50      	ldr	r3, [pc, #320]	; (8009114 <netconn_recv_data+0x17c>)
 8008fd2:	f240 224a 	movw	r2, #586	; 0x24a
 8008fd6:	4952      	ldr	r1, [pc, #328]	; (8009120 <netconn_recv_data+0x188>)
 8008fd8:	4850      	ldr	r0, [pc, #320]	; (800911c <netconn_recv_data+0x184>)
 8008fda:	f00d f84f 	bl	801607c <iprintf>
 8008fde:	f06f 030f 	mvn.w	r3, #15
 8008fe2:	e092      	b.n	800910a <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	3310      	adds	r3, #16
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f00c fe70 	bl	8015cce <sys_mbox_valid>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d10e      	bne.n	8009012 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 fad4 	bl	80095a2 <netconn_err>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8008ffe:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d002      	beq.n	800900c <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8009006:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800900a:	e07e      	b.n	800910a <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800900c:	f06f 030a 	mvn.w	r3, #10
 8009010:	e07b      	b.n	800910a <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	7f1b      	ldrb	r3, [r3, #28]
 8009016:	f003 0302 	and.w	r3, r3, #2
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10f      	bne.n	800903e <netconn_recv_data+0xa6>
 800901e:	79fb      	ldrb	r3, [r7, #7]
 8009020:	f003 0304 	and.w	r3, r3, #4
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10a      	bne.n	800903e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	7f1b      	ldrb	r3, [r3, #28]
 800902c:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009030:	2b00      	cmp	r3, #0
 8009032:	d104      	bne.n	800903e <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d023      	beq.n	8009086 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	3310      	adds	r3, #16
 8009042:	f107 0218 	add.w	r2, r7, #24
 8009046:	4611      	mov	r1, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f00c fe24 	bl	8015c96 <sys_arch_mbox_tryfetch>
 800904e:	4603      	mov	r3, r0
 8009050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009054:	d11f      	bne.n	8009096 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 faa3 	bl	80095a2 <netconn_err>
 800905c:	4603      	mov	r3, r0
 800905e:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009060:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d002      	beq.n	800906e <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8009068:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800906c:	e04d      	b.n	800910a <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	7f1b      	ldrb	r3, [r3, #28]
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	2b00      	cmp	r3, #0
 8009078:	d002      	beq.n	8009080 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800907a:	f06f 030a 	mvn.w	r3, #10
 800907e:	e044      	b.n	800910a <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009080:	f06f 0306 	mvn.w	r3, #6
 8009084:	e041      	b.n	800910a <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	3310      	adds	r3, #16
 800908a:	f107 0118 	add.w	r1, r7, #24
 800908e:	2200      	movs	r2, #0
 8009090:	4618      	mov	r0, r3
 8009092:	f00c fdc1 	bl	8015c18 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800909e:	2b10      	cmp	r3, #16
 80090a0:	d117      	bne.n	80090d2 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	f107 0217 	add.w	r2, r7, #23
 80090a8:	4611      	mov	r1, r2
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 faca 	bl	8009644 <lwip_netconn_is_err_msg>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d009      	beq.n	80090ca <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80090b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090ba:	f113 0f0f 	cmn.w	r3, #15
 80090be:	d101      	bne.n	80090c4 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80090c0:	2300      	movs	r3, #0
 80090c2:	e022      	b.n	800910a <netconn_recv_data+0x172>
      }
      return err;
 80090c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80090c8:	e01f      	b.n	800910a <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	891b      	ldrh	r3, [r3, #8]
 80090ce:	83fb      	strh	r3, [r7, #30]
 80090d0:	e00d      	b.n	80090ee <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d106      	bne.n	80090e6 <netconn_recv_data+0x14e>
 80090d8:	4b0e      	ldr	r3, [pc, #56]	; (8009114 <netconn_recv_data+0x17c>)
 80090da:	f240 2291 	movw	r2, #657	; 0x291
 80090de:	4911      	ldr	r1, [pc, #68]	; (8009124 <netconn_recv_data+0x18c>)
 80090e0:	480e      	ldr	r0, [pc, #56]	; (800911c <netconn_recv_data+0x184>)
 80090e2:	f00c ffcb 	bl	801607c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	891b      	ldrh	r3, [r3, #8]
 80090ec:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d005      	beq.n	8009102 <netconn_recv_data+0x16a>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	8bfa      	ldrh	r2, [r7, #30]
 80090fc:	2101      	movs	r1, #1
 80090fe:	68f8      	ldr	r0, [r7, #12]
 8009100:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009102:	69ba      	ldr	r2, [r7, #24]
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3720      	adds	r7, #32
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	08017ef8 	.word	0x08017ef8
 8009118:	08018154 	.word	0x08018154
 800911c:	08017f94 	.word	0x08017f94
 8009120:	08018174 	.word	0x08018174
 8009124:	08018190 	.word	0x08018190

08009128 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d005      	beq.n	8009146 <netconn_tcp_recvd_msg+0x1e>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009142:	2b10      	cmp	r3, #16
 8009144:	d009      	beq.n	800915a <netconn_tcp_recvd_msg+0x32>
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <netconn_tcp_recvd_msg+0x50>)
 8009148:	f240 22a7 	movw	r2, #679	; 0x2a7
 800914c:	490b      	ldr	r1, [pc, #44]	; (800917c <netconn_tcp_recvd_msg+0x54>)
 800914e:	480c      	ldr	r0, [pc, #48]	; (8009180 <netconn_tcp_recvd_msg+0x58>)
 8009150:	f00c ff94 	bl	801607c <iprintf>
 8009154:	f06f 030f 	mvn.w	r3, #15
 8009158:	e00a      	b.n	8009170 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	68ba      	ldr	r2, [r7, #8]
 8009164:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009166:	6879      	ldr	r1, [r7, #4]
 8009168:	4806      	ldr	r0, [pc, #24]	; (8009184 <netconn_tcp_recvd_msg+0x5c>)
 800916a:	f7ff fd15 	bl	8008b98 <netconn_apimsg>
 800916e:	4603      	mov	r3, r0
}
 8009170:	4618      	mov	r0, r3
 8009172:	3710      	adds	r7, #16
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	08017ef8 	.word	0x08017ef8
 800917c:	0801819c 	.word	0x0801819c
 8009180:	08017f94 	.word	0x08017f94
 8009184:	0800a9ed 	.word	0x0800a9ed

08009188 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b090      	sub	sp, #64	; 0x40
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4613      	mov	r3, r2
 8009194:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3310      	adds	r3, #16
 800919a:	4618      	mov	r0, r3
 800919c:	f00c fd97 	bl	8015cce <sys_mbox_valid>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d102      	bne.n	80091ac <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80091a6:	f06f 030a 	mvn.w	r3, #10
 80091aa:	e06d      	b.n	8009288 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	7f1b      	ldrb	r3, [r3, #28]
 80091b0:	b25b      	sxtb	r3, r3
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	da07      	bge.n	80091c6 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	7f1b      	ldrb	r3, [r3, #28]
 80091ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80091c4:	e039      	b.n	800923a <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	461a      	mov	r2, r3
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f7ff fee3 	bl	8008f98 <netconn_recv_data>
 80091d2:	4603      	mov	r3, r0
 80091d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80091d8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80091e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80091e4:	e050      	b.n	8009288 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	f003 0308 	and.w	r3, r3, #8
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d10e      	bne.n	8009214 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d002      	beq.n	8009202 <netconn_recv_data_tcp+0x7a>
 80091fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fe:	891b      	ldrh	r3, [r3, #8]
 8009200:	e000      	b.n	8009204 <netconn_recv_data_tcp+0x7c>
 8009202:	2301      	movs	r3, #1
 8009204:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009206:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009208:	f107 0214 	add.w	r2, r7, #20
 800920c:	4619      	mov	r1, r3
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f7ff ff8a 	bl	8009128 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009216:	2b00      	cmp	r3, #0
 8009218:	d134      	bne.n	8009284 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800921a:	79fb      	ldrb	r3, [r7, #7]
 800921c:	f003 0310 	and.w	r3, r3, #16
 8009220:	2b00      	cmp	r3, #0
 8009222:	d009      	beq.n	8009238 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	7f1b      	ldrb	r3, [r3, #28]
 8009228:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800922c:	b2da      	uxtb	r2, r3
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009232:	f06f 0306 	mvn.w	r3, #6
 8009236:	e027      	b.n	8009288 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8009238:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	2b00      	cmp	r3, #0
 8009240:	d005      	beq.n	800924e <netconn_recv_data_tcp+0xc6>
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	2200      	movs	r2, #0
 8009248:	2101      	movs	r1, #1
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10f      	bne.n	8009276 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009256:	68f8      	ldr	r0, [r7, #12]
 8009258:	f000 f9a3 	bl	80095a2 <netconn_err>
 800925c:	4603      	mov	r3, r0
 800925e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009262:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <netconn_recv_data_tcp+0xe8>
          return err;
 800926a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800926e:	e00b      	b.n	8009288 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009270:	f06f 030d 	mvn.w	r3, #13
 8009274:	e008      	b.n	8009288 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009276:	2101      	movs	r1, #1
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f000 f955 	bl	8009528 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800927e:	f06f 030e 	mvn.w	r3, #14
 8009282:	e001      	b.n	8009288 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009284:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009288:	4618      	mov	r0, r3
 800928a:	3740      	adds	r7, #64	; 0x40
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800929a:	2300      	movs	r3, #0
 800929c:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d109      	bne.n	80092b8 <netconn_recv+0x28>
 80092a4:	4b32      	ldr	r3, [pc, #200]	; (8009370 <netconn_recv+0xe0>)
 80092a6:	f240 3263 	movw	r2, #867	; 0x363
 80092aa:	4932      	ldr	r1, [pc, #200]	; (8009374 <netconn_recv+0xe4>)
 80092ac:	4832      	ldr	r0, [pc, #200]	; (8009378 <netconn_recv+0xe8>)
 80092ae:	f00c fee5 	bl	801607c <iprintf>
 80092b2:	f06f 030f 	mvn.w	r3, #15
 80092b6:	e056      	b.n	8009366 <netconn_recv+0xd6>
  *new_buf = NULL;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	2200      	movs	r2, #0
 80092bc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d109      	bne.n	80092d8 <netconn_recv+0x48>
 80092c4:	4b2a      	ldr	r3, [pc, #168]	; (8009370 <netconn_recv+0xe0>)
 80092c6:	f240 3265 	movw	r2, #869	; 0x365
 80092ca:	492c      	ldr	r1, [pc, #176]	; (800937c <netconn_recv+0xec>)
 80092cc:	482a      	ldr	r0, [pc, #168]	; (8009378 <netconn_recv+0xe8>)
 80092ce:	f00c fed5 	bl	801607c <iprintf>
 80092d2:	f06f 030f 	mvn.w	r3, #15
 80092d6:	e046      	b.n	8009366 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80092e0:	2b10      	cmp	r3, #16
 80092e2:	d13a      	bne.n	800935a <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80092e4:	2300      	movs	r3, #0
 80092e6:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80092e8:	2006      	movs	r0, #6
 80092ea:	f004 ffc5 	bl	800e278 <memp_malloc>
 80092ee:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d102      	bne.n	80092fc <netconn_recv+0x6c>
      return ERR_MEM;
 80092f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092fa:	e034      	b.n	8009366 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80092fc:	f107 030c 	add.w	r3, r7, #12
 8009300:	2200      	movs	r2, #0
 8009302:	4619      	mov	r1, r3
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f7ff ff3f 	bl	8009188 <netconn_recv_data_tcp>
 800930a:	4603      	mov	r3, r0
 800930c:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800930e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d006      	beq.n	8009324 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8009316:	6979      	ldr	r1, [r7, #20]
 8009318:	2006      	movs	r0, #6
 800931a:	f005 f823 	bl	800e364 <memp_free>
      return err;
 800931e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009322:	e020      	b.n	8009366 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d106      	bne.n	8009338 <netconn_recv+0xa8>
 800932a:	4b11      	ldr	r3, [pc, #68]	; (8009370 <netconn_recv+0xe0>)
 800932c:	f240 3279 	movw	r2, #889	; 0x379
 8009330:	4913      	ldr	r1, [pc, #76]	; (8009380 <netconn_recv+0xf0>)
 8009332:	4811      	ldr	r0, [pc, #68]	; (8009378 <netconn_recv+0xe8>)
 8009334:	f00c fea2 	bl	801607c <iprintf>

    buf->p = p;
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2200      	movs	r2, #0
 8009348:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2200      	movs	r2, #0
 800934e:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	e005      	b.n	8009366 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800935a:	2200      	movs	r2, #0
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7ff fe1a 	bl	8008f98 <netconn_recv_data>
 8009364:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009366:	4618      	mov	r0, r3
 8009368:	3718      	adds	r7, #24
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	08017ef8 	.word	0x08017ef8
 8009374:	08018154 	.word	0x08018154
 8009378:	08017f94 	.word	0x08017f94
 800937c:	08018174 	.word	0x08018174
 8009380:	080181ec 	.word	0x080181ec

08009384 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b088      	sub	sp, #32
 8009388:	af02      	add	r7, sp, #8
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	607a      	str	r2, [r7, #4]
 8009390:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800939a:	78fa      	ldrb	r2, [r7, #3]
 800939c:	f107 0110 	add.w	r1, r7, #16
 80093a0:	6a3b      	ldr	r3, [r7, #32]
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	4613      	mov	r3, r2
 80093a6:	2201      	movs	r2, #1
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 f805 	bl	80093b8 <netconn_write_vectors_partly>
 80093ae:	4603      	mov	r3, r0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3718      	adds	r7, #24
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b092      	sub	sp, #72	; 0x48
 80093bc:	af00      	add	r7, sp, #0
 80093be:	60f8      	str	r0, [r7, #12]
 80093c0:	60b9      	str	r1, [r7, #8]
 80093c2:	4611      	mov	r1, r2
 80093c4:	461a      	mov	r2, r3
 80093c6:	460b      	mov	r3, r1
 80093c8:	80fb      	strh	r3, [r7, #6]
 80093ca:	4613      	mov	r3, r2
 80093cc:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <netconn_write_vectors_partly+0x30>
 80093d4:	4b4e      	ldr	r3, [pc, #312]	; (8009510 <netconn_write_vectors_partly+0x158>)
 80093d6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80093da:	494e      	ldr	r1, [pc, #312]	; (8009514 <netconn_write_vectors_partly+0x15c>)
 80093dc:	484e      	ldr	r0, [pc, #312]	; (8009518 <netconn_write_vectors_partly+0x160>)
 80093de:	f00c fe4d 	bl	801607c <iprintf>
 80093e2:	f06f 030f 	mvn.w	r3, #15
 80093e6:	e08e      	b.n	8009506 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093f0:	2b10      	cmp	r3, #16
 80093f2:	d009      	beq.n	8009408 <netconn_write_vectors_partly+0x50>
 80093f4:	4b46      	ldr	r3, [pc, #280]	; (8009510 <netconn_write_vectors_partly+0x158>)
 80093f6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80093fa:	4948      	ldr	r1, [pc, #288]	; (800951c <netconn_write_vectors_partly+0x164>)
 80093fc:	4846      	ldr	r0, [pc, #280]	; (8009518 <netconn_write_vectors_partly+0x160>)
 80093fe:	f00c fe3d 	bl	801607c <iprintf>
 8009402:	f06f 0305 	mvn.w	r3, #5
 8009406:	e07e      	b.n	8009506 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	7f1b      	ldrb	r3, [r3, #28]
 800940c:	f003 0302 	and.w	r3, r3, #2
 8009410:	2b00      	cmp	r3, #0
 8009412:	d104      	bne.n	800941e <netconn_write_vectors_partly+0x66>
 8009414:	797b      	ldrb	r3, [r7, #5]
 8009416:	f003 0304 	and.w	r3, r3, #4
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <netconn_write_vectors_partly+0x6a>
 800941e:	2301      	movs	r3, #1
 8009420:	e000      	b.n	8009424 <netconn_write_vectors_partly+0x6c>
 8009422:	2300      	movs	r3, #0
 8009424:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009428:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800942c:	2b00      	cmp	r3, #0
 800942e:	d005      	beq.n	800943c <netconn_write_vectors_partly+0x84>
 8009430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009432:	2b00      	cmp	r3, #0
 8009434:	d102      	bne.n	800943c <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009436:	f06f 0305 	mvn.w	r3, #5
 800943a:	e064      	b.n	8009506 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009440:	2300      	movs	r3, #0
 8009442:	643b      	str	r3, [r7, #64]	; 0x40
 8009444:	e015      	b.n	8009472 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009448:	00db      	lsls	r3, r3, #3
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	4413      	add	r3, r2
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009452:	4413      	add	r3, r2
 8009454:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009458:	00db      	lsls	r3, r3, #3
 800945a:	68ba      	ldr	r2, [r7, #8]
 800945c:	4413      	add	r3, r2
 800945e:	685b      	ldr	r3, [r3, #4]
 8009460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009462:	429a      	cmp	r2, r3
 8009464:	d202      	bcs.n	800946c <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009466:	f06f 0305 	mvn.w	r3, #5
 800946a:	e04c      	b.n	8009506 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800946c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800946e:	3301      	adds	r3, #1
 8009470:	643b      	str	r3, [r7, #64]	; 0x40
 8009472:	88fb      	ldrh	r3, [r7, #6]
 8009474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009476:	429a      	cmp	r2, r3
 8009478:	dbe5      	blt.n	8009446 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800947a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	e040      	b.n	8009506 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009486:	2b00      	cmp	r3, #0
 8009488:	da0a      	bge.n	80094a0 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800948a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800948c:	2b00      	cmp	r3, #0
 800948e:	d102      	bne.n	8009496 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009490:	f06f 0305 	mvn.w	r3, #5
 8009494:	e037      	b.n	8009506 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009496:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800949a:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80094a8:	88fb      	ldrh	r3, [r7, #6]
 80094aa:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80094ac:	2300      	movs	r3, #0
 80094ae:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80094b0:	797b      	ldrb	r3, [r7, #5]
 80094b2:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80094b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094b8:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80094ba:	2300      	movs	r3, #0
 80094bc:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80094be:	f107 0314 	add.w	r3, r7, #20
 80094c2:	4619      	mov	r1, r3
 80094c4:	4816      	ldr	r0, [pc, #88]	; (8009520 <netconn_write_vectors_partly+0x168>)
 80094c6:	f7ff fb67 	bl	8008b98 <netconn_apimsg>
 80094ca:	4603      	mov	r3, r0
 80094cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80094d0:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d114      	bne.n	8009502 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80094d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d002      	beq.n	80094e4 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80094de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094e2:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80094e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10a      	bne.n	8009502 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80094ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d006      	beq.n	8009502 <netconn_write_vectors_partly+0x14a>
 80094f4:	4b06      	ldr	r3, [pc, #24]	; (8009510 <netconn_write_vectors_partly+0x158>)
 80094f6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80094fa:	490a      	ldr	r1, [pc, #40]	; (8009524 <netconn_write_vectors_partly+0x16c>)
 80094fc:	4806      	ldr	r0, [pc, #24]	; (8009518 <netconn_write_vectors_partly+0x160>)
 80094fe:	f00c fdbd 	bl	801607c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009502:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009506:	4618      	mov	r0, r3
 8009508:	3748      	adds	r7, #72	; 0x48
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	08017ef8 	.word	0x08017ef8
 8009514:	08018214 	.word	0x08018214
 8009518:	08017f94 	.word	0x08017f94
 800951c:	08018230 	.word	0x08018230
 8009520:	0800adf5 	.word	0x0800adf5
 8009524:	08018254 	.word	0x08018254

08009528 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b08c      	sub	sp, #48	; 0x30
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	460b      	mov	r3, r1
 8009532:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <netconn_close_shutdown+0x26>
 800953a:	4b0f      	ldr	r3, [pc, #60]	; (8009578 <netconn_close_shutdown+0x50>)
 800953c:	f240 4247 	movw	r2, #1095	; 0x447
 8009540:	490e      	ldr	r1, [pc, #56]	; (800957c <netconn_close_shutdown+0x54>)
 8009542:	480f      	ldr	r0, [pc, #60]	; (8009580 <netconn_close_shutdown+0x58>)
 8009544:	f00c fd9a 	bl	801607c <iprintf>
 8009548:	f06f 030f 	mvn.w	r3, #15
 800954c:	e010      	b.n	8009570 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009552:	78fb      	ldrb	r3, [r7, #3]
 8009554:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009556:	2329      	movs	r3, #41	; 0x29
 8009558:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800955a:	f107 030c 	add.w	r3, r7, #12
 800955e:	4619      	mov	r1, r3
 8009560:	4808      	ldr	r0, [pc, #32]	; (8009584 <netconn_close_shutdown+0x5c>)
 8009562:	f7ff fb19 	bl	8008b98 <netconn_apimsg>
 8009566:	4603      	mov	r3, r0
 8009568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800956c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009570:	4618      	mov	r0, r3
 8009572:	3730      	adds	r7, #48	; 0x30
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	08017ef8 	.word	0x08017ef8
 800957c:	08018278 	.word	0x08018278
 8009580:	08017f94 	.word	0x08017f94
 8009584:	0800af0d 	.word	0x0800af0d

08009588 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b082      	sub	sp, #8
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009590:	2103      	movs	r1, #3
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7ff ffc8 	bl	8009528 <netconn_close_shutdown>
 8009598:	4603      	mov	r3, r0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b084      	sub	sp, #16
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d101      	bne.n	80095b4 <netconn_err+0x12>
    return ERR_OK;
 80095b0:	2300      	movs	r3, #0
 80095b2:	e00d      	b.n	80095d0 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80095b4:	f00c fc9a 	bl	8015eec <sys_arch_protect>
 80095b8:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	7a1b      	ldrb	r3, [r3, #8]
 80095be:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f00c fc9e 	bl	8015f08 <sys_arch_unprotect>
  return err;
 80095cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	4603      	mov	r3, r0
 80095e0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80095e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095e6:	f113 0f0d 	cmn.w	r3, #13
 80095ea:	d009      	beq.n	8009600 <lwip_netconn_err_to_msg+0x28>
 80095ec:	f113 0f0d 	cmn.w	r3, #13
 80095f0:	dc0c      	bgt.n	800960c <lwip_netconn_err_to_msg+0x34>
 80095f2:	f113 0f0f 	cmn.w	r3, #15
 80095f6:	d007      	beq.n	8009608 <lwip_netconn_err_to_msg+0x30>
 80095f8:	f113 0f0e 	cmn.w	r3, #14
 80095fc:	d002      	beq.n	8009604 <lwip_netconn_err_to_msg+0x2c>
 80095fe:	e005      	b.n	800960c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009600:	4b0a      	ldr	r3, [pc, #40]	; (800962c <lwip_netconn_err_to_msg+0x54>)
 8009602:	e00e      	b.n	8009622 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009604:	4b0a      	ldr	r3, [pc, #40]	; (8009630 <lwip_netconn_err_to_msg+0x58>)
 8009606:	e00c      	b.n	8009622 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009608:	4b0a      	ldr	r3, [pc, #40]	; (8009634 <lwip_netconn_err_to_msg+0x5c>)
 800960a:	e00a      	b.n	8009622 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800960c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d005      	beq.n	8009620 <lwip_netconn_err_to_msg+0x48>
 8009614:	4b08      	ldr	r3, [pc, #32]	; (8009638 <lwip_netconn_err_to_msg+0x60>)
 8009616:	227d      	movs	r2, #125	; 0x7d
 8009618:	4908      	ldr	r1, [pc, #32]	; (800963c <lwip_netconn_err_to_msg+0x64>)
 800961a:	4809      	ldr	r0, [pc, #36]	; (8009640 <lwip_netconn_err_to_msg+0x68>)
 800961c:	f00c fd2e 	bl	801607c <iprintf>
      return NULL;
 8009620:	2300      	movs	r3, #0
  }
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	08018294 	.word	0x08018294
 8009630:	08018295 	.word	0x08018295
 8009634:	08018296 	.word	0x08018296
 8009638:	08018298 	.word	0x08018298
 800963c:	08018310 	.word	0x08018310
 8009640:	08018320 	.word	0x08018320

08009644 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d105      	bne.n	8009660 <lwip_netconn_is_err_msg+0x1c>
 8009654:	4b12      	ldr	r3, [pc, #72]	; (80096a0 <lwip_netconn_is_err_msg+0x5c>)
 8009656:	2285      	movs	r2, #133	; 0x85
 8009658:	4912      	ldr	r1, [pc, #72]	; (80096a4 <lwip_netconn_is_err_msg+0x60>)
 800965a:	4813      	ldr	r0, [pc, #76]	; (80096a8 <lwip_netconn_is_err_msg+0x64>)
 800965c:	f00c fd0e 	bl	801607c <iprintf>

  if (msg == &netconn_aborted) {
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	4a12      	ldr	r2, [pc, #72]	; (80096ac <lwip_netconn_is_err_msg+0x68>)
 8009664:	4293      	cmp	r3, r2
 8009666:	d104      	bne.n	8009672 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	22f3      	movs	r2, #243	; 0xf3
 800966c:	701a      	strb	r2, [r3, #0]
    return 1;
 800966e:	2301      	movs	r3, #1
 8009670:	e012      	b.n	8009698 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a0e      	ldr	r2, [pc, #56]	; (80096b0 <lwip_netconn_is_err_msg+0x6c>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d104      	bne.n	8009684 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	22f2      	movs	r2, #242	; 0xf2
 800967e:	701a      	strb	r2, [r3, #0]
    return 1;
 8009680:	2301      	movs	r3, #1
 8009682:	e009      	b.n	8009698 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	4a0b      	ldr	r2, [pc, #44]	; (80096b4 <lwip_netconn_is_err_msg+0x70>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d104      	bne.n	8009696 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	22f1      	movs	r2, #241	; 0xf1
 8009690:	701a      	strb	r2, [r3, #0]
    return 1;
 8009692:	2301      	movs	r3, #1
 8009694:	e000      	b.n	8009698 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	08018298 	.word	0x08018298
 80096a4:	08018348 	.word	0x08018348
 80096a8:	08018320 	.word	0x08018320
 80096ac:	08018294 	.word	0x08018294
 80096b0:	08018295 	.word	0x08018295
 80096b4:	08018296 	.word	0x08018296

080096b8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b088      	sub	sp, #32
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
 80096c4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d105      	bne.n	80096d8 <recv_udp+0x20>
 80096cc:	4b34      	ldr	r3, [pc, #208]	; (80097a0 <recv_udp+0xe8>)
 80096ce:	22e5      	movs	r2, #229	; 0xe5
 80096d0:	4934      	ldr	r1, [pc, #208]	; (80097a4 <recv_udp+0xec>)
 80096d2:	4835      	ldr	r0, [pc, #212]	; (80097a8 <recv_udp+0xf0>)
 80096d4:	f00c fcd2 	bl	801607c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d105      	bne.n	80096ea <recv_udp+0x32>
 80096de:	4b30      	ldr	r3, [pc, #192]	; (80097a0 <recv_udp+0xe8>)
 80096e0:	22e6      	movs	r2, #230	; 0xe6
 80096e2:	4932      	ldr	r1, [pc, #200]	; (80097ac <recv_udp+0xf4>)
 80096e4:	4830      	ldr	r0, [pc, #192]	; (80097a8 <recv_udp+0xf0>)
 80096e6:	f00c fcc9 	bl	801607c <iprintf>
  conn = (struct netconn *)arg;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d103      	bne.n	80096fc <recv_udp+0x44>
    pbuf_free(p);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f005 fc7d 	bl	800eff4 <pbuf_free>
    return;
 80096fa:	e04d      	b.n	8009798 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80096fc:	69fb      	ldr	r3, [r7, #28]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	429a      	cmp	r2, r3
 8009704:	d005      	beq.n	8009712 <recv_udp+0x5a>
 8009706:	4b26      	ldr	r3, [pc, #152]	; (80097a0 <recv_udp+0xe8>)
 8009708:	22ee      	movs	r2, #238	; 0xee
 800970a:	4929      	ldr	r1, [pc, #164]	; (80097b0 <recv_udp+0xf8>)
 800970c:	4826      	ldr	r0, [pc, #152]	; (80097a8 <recv_udp+0xf0>)
 800970e:	f00c fcb5 	bl	801607c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	3310      	adds	r3, #16
 8009716:	4618      	mov	r0, r3
 8009718:	f00c fad9 	bl	8015cce <sys_mbox_valid>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d103      	bne.n	800972a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f005 fc66 	bl	800eff4 <pbuf_free>
    return;
 8009728:	e036      	b.n	8009798 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800972a:	2006      	movs	r0, #6
 800972c:	f004 fda4 	bl	800e278 <memp_malloc>
 8009730:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d103      	bne.n	8009740 <recv_udp+0x88>
    pbuf_free(p);
 8009738:	6878      	ldr	r0, [r7, #4]
 800973a:	f005 fc5b 	bl	800eff4 <pbuf_free>
    return;
 800973e:	e02b      	b.n	8009798 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	687a      	ldr	r2, [r7, #4]
 8009744:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d002      	beq.n	8009758 <recv_udp+0xa0>
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	e000      	b.n	800975a <recv_udp+0xa2>
 8009758:	2300      	movs	r3, #0
 800975a:	69ba      	ldr	r2, [r7, #24]
 800975c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8009762:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	891b      	ldrh	r3, [r3, #8]
 8009768:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800976a:	69fb      	ldr	r3, [r7, #28]
 800976c:	3310      	adds	r3, #16
 800976e:	69b9      	ldr	r1, [r7, #24]
 8009770:	4618      	mov	r0, r3
 8009772:	f00c fa37 	bl	8015be4 <sys_mbox_trypost>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d003      	beq.n	8009784 <recv_udp+0xcc>
    netbuf_delete(buf);
 800977c:	69b8      	ldr	r0, [r7, #24]
 800977e:	f001 fc51 	bl	800b024 <netbuf_delete>
    return;
 8009782:	e009      	b.n	8009798 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009784:	69fb      	ldr	r3, [r7, #28]
 8009786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009788:	2b00      	cmp	r3, #0
 800978a:	d005      	beq.n	8009798 <recv_udp+0xe0>
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009790:	8afa      	ldrh	r2, [r7, #22]
 8009792:	2100      	movs	r1, #0
 8009794:	69f8      	ldr	r0, [r7, #28]
 8009796:	4798      	blx	r3
  }
}
 8009798:	3720      	adds	r7, #32
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	08018298 	.word	0x08018298
 80097a4:	08018354 	.word	0x08018354
 80097a8:	08018320 	.word	0x08018320
 80097ac:	08018378 	.word	0x08018378
 80097b0:	08018398 	.word	0x08018398

080097b4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b088      	sub	sp, #32
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d106      	bne.n	80097d6 <recv_tcp+0x22>
 80097c8:	4b36      	ldr	r3, [pc, #216]	; (80098a4 <recv_tcp+0xf0>)
 80097ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80097ce:	4936      	ldr	r1, [pc, #216]	; (80098a8 <recv_tcp+0xf4>)
 80097d0:	4836      	ldr	r0, [pc, #216]	; (80098ac <recv_tcp+0xf8>)
 80097d2:	f00c fc53 	bl	801607c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d106      	bne.n	80097ea <recv_tcp+0x36>
 80097dc:	4b31      	ldr	r3, [pc, #196]	; (80098a4 <recv_tcp+0xf0>)
 80097de:	f240 122d 	movw	r2, #301	; 0x12d
 80097e2:	4933      	ldr	r1, [pc, #204]	; (80098b0 <recv_tcp+0xfc>)
 80097e4:	4831      	ldr	r0, [pc, #196]	; (80098ac <recv_tcp+0xf8>)
 80097e6:	f00c fc49 	bl	801607c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80097ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d006      	beq.n	8009800 <recv_tcp+0x4c>
 80097f2:	4b2c      	ldr	r3, [pc, #176]	; (80098a4 <recv_tcp+0xf0>)
 80097f4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80097f8:	492e      	ldr	r1, [pc, #184]	; (80098b4 <recv_tcp+0x100>)
 80097fa:	482c      	ldr	r0, [pc, #176]	; (80098ac <recv_tcp+0xf8>)
 80097fc:	f00c fc3e 	bl	801607c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d102      	bne.n	8009810 <recv_tcp+0x5c>
    return ERR_VAL;
 800980a:	f06f 0305 	mvn.w	r3, #5
 800980e:	e045      	b.n	800989c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	429a      	cmp	r2, r3
 8009818:	d006      	beq.n	8009828 <recv_tcp+0x74>
 800981a:	4b22      	ldr	r3, [pc, #136]	; (80098a4 <recv_tcp+0xf0>)
 800981c:	f240 1235 	movw	r2, #309	; 0x135
 8009820:	4925      	ldr	r1, [pc, #148]	; (80098b8 <recv_tcp+0x104>)
 8009822:	4822      	ldr	r0, [pc, #136]	; (80098ac <recv_tcp+0xf8>)
 8009824:	f00c fc2a 	bl	801607c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	3310      	adds	r3, #16
 800982c:	4618      	mov	r0, r3
 800982e:	f00c fa4e 	bl	8015cce <sys_mbox_valid>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d10d      	bne.n	8009854 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d008      	beq.n	8009850 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	891b      	ldrh	r3, [r3, #8]
 8009842:	4619      	mov	r1, r3
 8009844:	68b8      	ldr	r0, [r7, #8]
 8009846:	f006 fb83 	bl	800ff50 <tcp_recved>
      pbuf_free(p);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f005 fbd2 	bl	800eff4 <pbuf_free>
    }
    return ERR_OK;
 8009850:	2300      	movs	r3, #0
 8009852:	e023      	b.n	800989c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d005      	beq.n	8009866 <recv_tcp+0xb2>
    msg = p;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	891b      	ldrh	r3, [r3, #8]
 8009862:	83fb      	strh	r3, [r7, #30]
 8009864:	e003      	b.n	800986e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8009866:	4b15      	ldr	r3, [pc, #84]	; (80098bc <recv_tcp+0x108>)
 8009868:	61bb      	str	r3, [r7, #24]
    len = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	3310      	adds	r3, #16
 8009872:	69b9      	ldr	r1, [r7, #24]
 8009874:	4618      	mov	r0, r3
 8009876:	f00c f9b5 	bl	8015be4 <sys_mbox_trypost>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d002      	beq.n	8009886 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8009880:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009884:	e00a      	b.n	800989c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	2b00      	cmp	r3, #0
 800988c:	d005      	beq.n	800989a <recv_tcp+0xe6>
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	8bfa      	ldrh	r2, [r7, #30]
 8009894:	2100      	movs	r1, #0
 8009896:	6978      	ldr	r0, [r7, #20]
 8009898:	4798      	blx	r3
  }

  return ERR_OK;
 800989a:	2300      	movs	r3, #0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3720      	adds	r7, #32
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	08018298 	.word	0x08018298
 80098a8:	080183b8 	.word	0x080183b8
 80098ac:	08018320 	.word	0x08018320
 80098b0:	080183dc 	.word	0x080183dc
 80098b4:	080183fc 	.word	0x080183fc
 80098b8:	08018414 	.word	0x08018414
 80098bc:	08018296 	.word	0x08018296

080098c0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d106      	bne.n	80098e2 <poll_tcp+0x22>
 80098d4:	4b2a      	ldr	r3, [pc, #168]	; (8009980 <poll_tcp+0xc0>)
 80098d6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80098da:	492a      	ldr	r1, [pc, #168]	; (8009984 <poll_tcp+0xc4>)
 80098dc:	482a      	ldr	r0, [pc, #168]	; (8009988 <poll_tcp+0xc8>)
 80098de:	f00c fbcd 	bl	801607c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	785b      	ldrb	r3, [r3, #1]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d104      	bne.n	80098f4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80098ea:	2101      	movs	r1, #1
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f001 f8b3 	bl	800aa58 <lwip_netconn_do_writemore>
 80098f2:	e016      	b.n	8009922 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	785b      	ldrb	r3, [r3, #1]
 80098f8:	2b04      	cmp	r3, #4
 80098fa:	d112      	bne.n	8009922 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d00a      	beq.n	800991a <poll_tcp+0x5a>
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6a1b      	ldr	r3, [r3, #32]
 8009908:	7a5b      	ldrb	r3, [r3, #9]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d005      	beq.n	800991a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	6a1b      	ldr	r3, [r3, #32]
 8009912:	7a5a      	ldrb	r2, [r3, #9]
 8009914:	3a01      	subs	r2, #1
 8009916:	b2d2      	uxtb	r2, r2
 8009918:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800991a:	2101      	movs	r1, #1
 800991c:	68f8      	ldr	r0, [r7, #12]
 800991e:	f000 fbfb 	bl	800a118 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	7f1b      	ldrb	r3, [r3, #28]
 8009926:	f003 0310 	and.w	r3, r3, #16
 800992a:	2b00      	cmp	r3, #0
 800992c:	d022      	beq.n	8009974 <poll_tcp+0xb4>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d01e      	beq.n	8009974 <poll_tcp+0xb4>
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800993e:	f640 3269 	movw	r2, #2921	; 0xb69
 8009942:	4293      	cmp	r3, r2
 8009944:	d916      	bls.n	8009974 <poll_tcp+0xb4>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800994e:	2b04      	cmp	r3, #4
 8009950:	d810      	bhi.n	8009974 <poll_tcp+0xb4>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	7f1b      	ldrb	r3, [r3, #28]
 8009956:	f023 0310 	bic.w	r3, r3, #16
 800995a:	b2da      	uxtb	r2, r3
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009964:	2b00      	cmp	r3, #0
 8009966:	d005      	beq.n	8009974 <poll_tcp+0xb4>
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800996c:	2200      	movs	r2, #0
 800996e:	2102      	movs	r1, #2
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	08018298 	.word	0x08018298
 8009984:	08018434 	.word	0x08018434
 8009988:	08018320 	.word	0x08018320

0800998c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	60f8      	str	r0, [r7, #12]
 8009994:	60b9      	str	r1, [r7, #8]
 8009996:	4613      	mov	r3, r2
 8009998:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d106      	bne.n	80099b2 <sent_tcp+0x26>
 80099a4:	4b21      	ldr	r3, [pc, #132]	; (8009a2c <sent_tcp+0xa0>)
 80099a6:	f240 1293 	movw	r2, #403	; 0x193
 80099aa:	4921      	ldr	r1, [pc, #132]	; (8009a30 <sent_tcp+0xa4>)
 80099ac:	4821      	ldr	r0, [pc, #132]	; (8009a34 <sent_tcp+0xa8>)
 80099ae:	f00c fb65 	bl	801607c <iprintf>

  if (conn) {
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d033      	beq.n	8009a20 <sent_tcp+0x94>
    if (conn->state == NETCONN_WRITE) {
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	785b      	ldrb	r3, [r3, #1]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d104      	bne.n	80099ca <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80099c0:	2101      	movs	r1, #1
 80099c2:	6978      	ldr	r0, [r7, #20]
 80099c4:	f001 f848 	bl	800aa58 <lwip_netconn_do_writemore>
 80099c8:	e007      	b.n	80099da <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	785b      	ldrb	r3, [r3, #1]
 80099ce:	2b04      	cmp	r3, #4
 80099d0:	d103      	bne.n	80099da <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80099d2:	2101      	movs	r1, #1
 80099d4:	6978      	ldr	r0, [r7, #20]
 80099d6:	f000 fb9f 	bl	800a118 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d01e      	beq.n	8009a20 <sent_tcp+0x94>
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	685b      	ldr	r3, [r3, #4]
 80099e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80099ea:	f640 3269 	movw	r2, #2921	; 0xb69
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d916      	bls.n	8009a20 <sent_tcp+0x94>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80099fa:	2b04      	cmp	r3, #4
 80099fc:	d810      	bhi.n	8009a20 <sent_tcp+0x94>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	7f1b      	ldrb	r3, [r3, #28]
 8009a02:	f023 0310 	bic.w	r3, r3, #16
 8009a06:	b2da      	uxtb	r2, r3
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d005      	beq.n	8009a20 <sent_tcp+0x94>
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a18:	88fa      	ldrh	r2, [r7, #6]
 8009a1a:	2102      	movs	r1, #2
 8009a1c:	6978      	ldr	r0, [r7, #20]
 8009a1e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3718      	adds	r7, #24
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	08018298 	.word	0x08018298
 8009a30:	08018434 	.word	0x08018434
 8009a34:	08018320 	.word	0x08018320

08009a38 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b088      	sub	sp, #32
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009a48:	69fb      	ldr	r3, [r7, #28]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d106      	bne.n	8009a5c <err_tcp+0x24>
 8009a4e:	4b5f      	ldr	r3, [pc, #380]	; (8009bcc <err_tcp+0x194>)
 8009a50:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8009a54:	495e      	ldr	r1, [pc, #376]	; (8009bd0 <err_tcp+0x198>)
 8009a56:	485f      	ldr	r0, [pc, #380]	; (8009bd4 <err_tcp+0x19c>)
 8009a58:	f00c fb10 	bl	801607c <iprintf>

  SYS_ARCH_PROTECT(lev);
 8009a5c:	f00c fa46 	bl	8015eec <sys_arch_protect>
 8009a60:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	2200      	movs	r2, #0
 8009a66:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	78fa      	ldrb	r2, [r7, #3]
 8009a6c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	7f1b      	ldrb	r3, [r3, #28]
 8009a72:	f043 0301 	orr.w	r3, r3, #1
 8009a76:	b2da      	uxtb	r2, r3
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	785b      	ldrb	r3, [r3, #1]
 8009a80:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	2200      	movs	r2, #0
 8009a86:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8009a88:	69b8      	ldr	r0, [r7, #24]
 8009a8a:	f00c fa3d 	bl	8015f08 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009a8e:	69fb      	ldr	r3, [r7, #28]
 8009a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d005      	beq.n	8009aa2 <err_tcp+0x6a>
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	2104      	movs	r1, #4
 8009a9e:	69f8      	ldr	r0, [r7, #28]
 8009aa0:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d005      	beq.n	8009ab6 <err_tcp+0x7e>
 8009aaa:	69fb      	ldr	r3, [r7, #28]
 8009aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aae:	2200      	movs	r2, #0
 8009ab0:	2100      	movs	r1, #0
 8009ab2:	69f8      	ldr	r0, [r7, #28]
 8009ab4:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009ab6:	69fb      	ldr	r3, [r7, #28]
 8009ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d005      	beq.n	8009aca <err_tcp+0x92>
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2200      	movs	r2, #0
 8009ac4:	2102      	movs	r1, #2
 8009ac6:	69f8      	ldr	r0, [r7, #28]
 8009ac8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8009aca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f7ff fd82 	bl	80095d8 <lwip_netconn_err_to_msg>
 8009ad4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	3310      	adds	r3, #16
 8009ada:	4618      	mov	r0, r3
 8009adc:	f00c f8f7 	bl	8015cce <sys_mbox_valid>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d005      	beq.n	8009af2 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	3310      	adds	r3, #16
 8009aea:	6939      	ldr	r1, [r7, #16]
 8009aec:	4618      	mov	r0, r3
 8009aee:	f00c f879 	bl	8015be4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	3314      	adds	r3, #20
 8009af6:	4618      	mov	r0, r3
 8009af8:	f00c f8e9 	bl	8015cce <sys_mbox_valid>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d005      	beq.n	8009b0e <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	3314      	adds	r3, #20
 8009b06:	6939      	ldr	r1, [r7, #16]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f00c f86b 	bl	8015be4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009b0e:	7dfb      	ldrb	r3, [r7, #23]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d005      	beq.n	8009b20 <err_tcp+0xe8>
 8009b14:	7dfb      	ldrb	r3, [r7, #23]
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	d002      	beq.n	8009b20 <err_tcp+0xe8>
 8009b1a:	7dfb      	ldrb	r3, [r7, #23]
 8009b1c:	2b03      	cmp	r3, #3
 8009b1e:	d143      	bne.n	8009ba8 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	7f1b      	ldrb	r3, [r3, #28]
 8009b24:	f003 0304 	and.w	r3, r3, #4
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	bf14      	ite	ne
 8009b2c:	2301      	movne	r3, #1
 8009b2e:	2300      	moveq	r3, #0
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	7f1b      	ldrb	r3, [r3, #28]
 8009b38:	f023 0304 	bic.w	r3, r3, #4
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d13b      	bne.n	8009bc0 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	6a1b      	ldr	r3, [r3, #32]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d106      	bne.n	8009b5e <err_tcp+0x126>
 8009b50:	4b1e      	ldr	r3, [pc, #120]	; (8009bcc <err_tcp+0x194>)
 8009b52:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8009b56:	4920      	ldr	r1, [pc, #128]	; (8009bd8 <err_tcp+0x1a0>)
 8009b58:	481e      	ldr	r0, [pc, #120]	; (8009bd4 <err_tcp+0x19c>)
 8009b5a:	f00c fa8f 	bl	801607c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
 8009b60:	2b04      	cmp	r3, #4
 8009b62:	d104      	bne.n	8009b6e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	6a1b      	ldr	r3, [r3, #32]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	711a      	strb	r2, [r3, #4]
 8009b6c:	e003      	b.n	8009b76 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	78fa      	ldrb	r2, [r7, #3]
 8009b74:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009b76:	69fb      	ldr	r3, [r7, #28]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	330c      	adds	r3, #12
 8009b7e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8009b80:	68b8      	ldr	r0, [r7, #8]
 8009b82:	f00c f933 	bl	8015dec <sys_sem_valid>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d106      	bne.n	8009b9a <err_tcp+0x162>
 8009b8c:	4b0f      	ldr	r3, [pc, #60]	; (8009bcc <err_tcp+0x194>)
 8009b8e:	f240 12ef 	movw	r2, #495	; 0x1ef
 8009b92:	4912      	ldr	r1, [pc, #72]	; (8009bdc <err_tcp+0x1a4>)
 8009b94:	480f      	ldr	r0, [pc, #60]	; (8009bd4 <err_tcp+0x19c>)
 8009b96:	f00c fa71 	bl	801607c <iprintf>
      conn->current_msg = NULL;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8009ba0:	68b8      	ldr	r0, [r7, #8]
 8009ba2:	f00c f909 	bl	8015db8 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8009ba6:	e00b      	b.n	8009bc0 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8009ba8:	69fb      	ldr	r3, [r7, #28]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d008      	beq.n	8009bc2 <err_tcp+0x18a>
 8009bb0:	4b06      	ldr	r3, [pc, #24]	; (8009bcc <err_tcp+0x194>)
 8009bb2:	f240 12f7 	movw	r2, #503	; 0x1f7
 8009bb6:	490a      	ldr	r1, [pc, #40]	; (8009be0 <err_tcp+0x1a8>)
 8009bb8:	4806      	ldr	r0, [pc, #24]	; (8009bd4 <err_tcp+0x19c>)
 8009bba:	f00c fa5f 	bl	801607c <iprintf>
  }
}
 8009bbe:	e000      	b.n	8009bc2 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8009bc0:	bf00      	nop
}
 8009bc2:	bf00      	nop
 8009bc4:	3720      	adds	r7, #32
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	08018298 	.word	0x08018298
 8009bd0:	08018434 	.word	0x08018434
 8009bd4:	08018320 	.word	0x08018320
 8009bd8:	08018444 	.word	0x08018444
 8009bdc:	08018460 	.word	0x08018460
 8009be0:	0801847c 	.word	0x0801847c

08009be4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009bf2:	6879      	ldr	r1, [r7, #4]
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f007 f94b 	bl	8010e90 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8009bfa:	490a      	ldr	r1, [pc, #40]	; (8009c24 <setup_tcp+0x40>)
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f007 f959 	bl	8010eb4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009c02:	4909      	ldr	r1, [pc, #36]	; (8009c28 <setup_tcp+0x44>)
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f007 f977 	bl	8010ef8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	4907      	ldr	r1, [pc, #28]	; (8009c2c <setup_tcp+0x48>)
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f007 f9cc 	bl	8010fac <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009c14:	4906      	ldr	r1, [pc, #24]	; (8009c30 <setup_tcp+0x4c>)
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	f007 f98e 	bl	8010f38 <tcp_err>
}
 8009c1c:	bf00      	nop
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	080097b5 	.word	0x080097b5
 8009c28:	0800998d 	.word	0x0800998d
 8009c2c:	080098c1 	.word	0x080098c1
 8009c30:	08009a39 	.word	0x08009a39

08009c34 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009c34:	b590      	push	{r4, r7, lr}
 8009c36:	b089      	sub	sp, #36	; 0x24
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	60f8      	str	r0, [r7, #12]
 8009c3c:	60b9      	str	r1, [r7, #8]
 8009c3e:	4613      	mov	r3, r2
 8009c40:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009c46:	69fb      	ldr	r3, [r7, #28]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d102      	bne.n	8009c52 <accept_function+0x1e>
    return ERR_VAL;
 8009c4c:	f06f 0305 	mvn.w	r3, #5
 8009c50:	e0a1      	b.n	8009d96 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	3314      	adds	r3, #20
 8009c56:	4618      	mov	r0, r3
 8009c58:	f00c f839 	bl	8015cce <sys_mbox_valid>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d102      	bne.n	8009c68 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8009c62:	f06f 0305 	mvn.w	r3, #5
 8009c66:	e096      	b.n	8009d96 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d11b      	bne.n	8009ca6 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	f103 0414 	add.w	r4, r3, #20
 8009c74:	f06f 000c 	mvn.w	r0, #12
 8009c78:	f7ff fcae 	bl	80095d8 <lwip_netconn_err_to_msg>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4620      	mov	r0, r4
 8009c82:	f00b ffaf 	bl	8015be4 <sys_mbox_trypost>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d109      	bne.n	8009ca0 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d005      	beq.n	8009ca0 <accept_function+0x6c>
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c98:	2200      	movs	r2, #0
 8009c9a:	2100      	movs	r1, #0
 8009c9c:	69f8      	ldr	r0, [r7, #28]
 8009c9e:	4798      	blx	r3
    }
    return ERR_VAL;
 8009ca0:	f06f 0305 	mvn.w	r3, #5
 8009ca4:	e077      	b.n	8009d96 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d006      	beq.n	8009cbc <accept_function+0x88>
 8009cae:	4b3c      	ldr	r3, [pc, #240]	; (8009da0 <accept_function+0x16c>)
 8009cb0:	f240 222a 	movw	r2, #554	; 0x22a
 8009cb4:	493b      	ldr	r1, [pc, #236]	; (8009da4 <accept_function+0x170>)
 8009cb6:	483c      	ldr	r0, [pc, #240]	; (8009da8 <accept_function+0x174>)
 8009cb8:	f00c f9e0 	bl	801607c <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	781a      	ldrb	r2, [r3, #0]
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	f000 f8f0 	bl	8009eac <netconn_alloc>
 8009ccc:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8009cce:	69bb      	ldr	r3, [r7, #24]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d11b      	bne.n	8009d0c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	f103 0414 	add.w	r4, r3, #20
 8009cda:	f06f 000c 	mvn.w	r0, #12
 8009cde:	f7ff fc7b 	bl	80095d8 <lwip_netconn_err_to_msg>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	4620      	mov	r0, r4
 8009ce8:	f00b ff7c 	bl	8015be4 <sys_mbox_trypost>
 8009cec:	4603      	mov	r3, r0
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d109      	bne.n	8009d06 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009cf2:	69fb      	ldr	r3, [r7, #28]
 8009cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d005      	beq.n	8009d06 <accept_function+0xd2>
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfe:	2200      	movs	r2, #0
 8009d00:	2100      	movs	r1, #0
 8009d02:	69f8      	ldr	r0, [r7, #28]
 8009d04:	4798      	blx	r3
    }
    return ERR_MEM;
 8009d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d0a:	e044      	b.n	8009d96 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009d12:	69b8      	ldr	r0, [r7, #24]
 8009d14:	f7ff ff66 	bl	8009be4 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	3314      	adds	r3, #20
 8009d1c:	69b9      	ldr	r1, [r7, #24]
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f00b ff60 	bl	8015be4 <sys_mbox_trypost>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d02a      	beq.n	8009d80 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8009d2a:	69bb      	ldr	r3, [r7, #24]
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8009d30:	2100      	movs	r1, #0
 8009d32:	6978      	ldr	r0, [r7, #20]
 8009d34:	f007 f8ac 	bl	8010e90 <tcp_arg>
    tcp_recv(pcb, NULL);
 8009d38:	2100      	movs	r1, #0
 8009d3a:	6978      	ldr	r0, [r7, #20]
 8009d3c:	f007 f8ba 	bl	8010eb4 <tcp_recv>
    tcp_sent(pcb, NULL);
 8009d40:	2100      	movs	r1, #0
 8009d42:	6978      	ldr	r0, [r7, #20]
 8009d44:	f007 f8d8 	bl	8010ef8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	6978      	ldr	r0, [r7, #20]
 8009d4e:	f007 f92d 	bl	8010fac <tcp_poll>
    tcp_err(pcb, NULL);
 8009d52:	2100      	movs	r1, #0
 8009d54:	6978      	ldr	r0, [r7, #20]
 8009d56:	f007 f8ef 	bl	8010f38 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	3310      	adds	r3, #16
 8009d64:	4618      	mov	r0, r3
 8009d66:	f00b ff2b 	bl	8015bc0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8009d6a:	69bb      	ldr	r3, [r7, #24]
 8009d6c:	3310      	adds	r3, #16
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f00b ffbe 	bl	8015cf0 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8009d74:	69b8      	ldr	r0, [r7, #24]
 8009d76:	f000 f907 	bl	8009f88 <netconn_free>
    return ERR_MEM;
 8009d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d7e:	e00a      	b.n	8009d96 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d005      	beq.n	8009d94 <accept_function+0x160>
 8009d88:	69fb      	ldr	r3, [r7, #28]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	2100      	movs	r1, #0
 8009d90:	69f8      	ldr	r0, [r7, #28]
 8009d92:	4798      	blx	r3
  }

  return ERR_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3724      	adds	r7, #36	; 0x24
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd90      	pop	{r4, r7, pc}
 8009d9e:	bf00      	nop
 8009da0:	08018298 	.word	0x08018298
 8009da4:	08018498 	.word	0x08018498
 8009da8:	08018320 	.word	0x08018320

08009dac <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009dac:	b590      	push	{r4, r7, lr}
 8009dae:	b085      	sub	sp, #20
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8009db4:	2300      	movs	r3, #0
 8009db6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d006      	beq.n	8009dd0 <pcb_new+0x24>
 8009dc2:	4b2b      	ldr	r3, [pc, #172]	; (8009e70 <pcb_new+0xc4>)
 8009dc4:	f240 2265 	movw	r2, #613	; 0x265
 8009dc8:	492a      	ldr	r1, [pc, #168]	; (8009e74 <pcb_new+0xc8>)
 8009dca:	482b      	ldr	r0, [pc, #172]	; (8009e78 <pcb_new+0xcc>)
 8009dcc:	f00c f956 	bl	801607c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009dda:	2b10      	cmp	r3, #16
 8009ddc:	d022      	beq.n	8009e24 <pcb_new+0x78>
 8009dde:	2b20      	cmp	r3, #32
 8009de0:	d133      	bne.n	8009e4a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681c      	ldr	r4, [r3, #0]
 8009de6:	7bfb      	ldrb	r3, [r7, #15]
 8009de8:	4618      	mov	r0, r3
 8009dea:	f00b fdb8 	bl	801595e <udp_new_ip_type>
 8009dee:	4603      	mov	r3, r0
 8009df0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d02a      	beq.n	8009e52 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	2b22      	cmp	r3, #34	; 0x22
 8009e04:	d104      	bne.n	8009e10 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	685b      	ldr	r3, [r3, #4]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	6858      	ldr	r0, [r3, #4]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	4917      	ldr	r1, [pc, #92]	; (8009e7c <pcb_new+0xd0>)
 8009e1e:	f00b fd25 	bl	801586c <udp_recv>
      }
      break;
 8009e22:	e016      	b.n	8009e52 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681c      	ldr	r4, [r3, #0]
 8009e28:	7bfb      	ldrb	r3, [r7, #15]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f007 f822 	bl	8010e74 <tcp_new_ip_type>
 8009e30:	4603      	mov	r3, r0
 8009e32:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00b      	beq.n	8009e56 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f7ff fece 	bl	8009be4 <setup_tcp>
      }
      break;
 8009e48:	e005      	b.n	8009e56 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	22fa      	movs	r2, #250	; 0xfa
 8009e4e:	711a      	strb	r2, [r3, #4]
      return;
 8009e50:	e00a      	b.n	8009e68 <pcb_new+0xbc>
      break;
 8009e52:	bf00      	nop
 8009e54:	e000      	b.n	8009e58 <pcb_new+0xac>
      break;
 8009e56:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d102      	bne.n	8009e68 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	22ff      	movs	r2, #255	; 0xff
 8009e66:	711a      	strb	r2, [r3, #4]
  }
}
 8009e68:	3714      	adds	r7, #20
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd90      	pop	{r4, r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	08018298 	.word	0x08018298
 8009e74:	080184c0 	.word	0x080184c0
 8009e78:	08018320 	.word	0x08018320
 8009e7c:	080096b9 	.word	0x080096b9

08009e80 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009e9c:	68f8      	ldr	r0, [r7, #12]
 8009e9e:	f7ff ff85 	bl	8009dac <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8009ea2:	bf00      	nop
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
	...

08009eac <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b086      	sub	sp, #24
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	6039      	str	r1, [r7, #0]
 8009eb6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009ebc:	2007      	movs	r0, #7
 8009ebe:	f004 f9db 	bl	800e278 <memp_malloc>
 8009ec2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d101      	bne.n	8009ece <netconn_alloc+0x22>
    return NULL;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e052      	b.n	8009f74 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	79fa      	ldrb	r2, [r7, #7]
 8009ed8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2200      	movs	r2, #0
 8009ede:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8009ee0:	79fb      	ldrb	r3, [r7, #7]
 8009ee2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ee6:	2b10      	cmp	r3, #16
 8009ee8:	d004      	beq.n	8009ef4 <netconn_alloc+0x48>
 8009eea:	2b20      	cmp	r3, #32
 8009eec:	d105      	bne.n	8009efa <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8009eee:	2306      	movs	r3, #6
 8009ef0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8009ef2:	e00a      	b.n	8009f0a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009ef4:	2306      	movs	r3, #6
 8009ef6:	617b      	str	r3, [r7, #20]
      break;
 8009ef8:	e007      	b.n	8009f0a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009efa:	4b20      	ldr	r3, [pc, #128]	; (8009f7c <netconn_alloc+0xd0>)
 8009efc:	f240 22e5 	movw	r2, #741	; 0x2e5
 8009f00:	491f      	ldr	r1, [pc, #124]	; (8009f80 <netconn_alloc+0xd4>)
 8009f02:	4820      	ldr	r0, [pc, #128]	; (8009f84 <netconn_alloc+0xd8>)
 8009f04:	f00c f8ba 	bl	801607c <iprintf>
      goto free_and_return;
 8009f08:	e02f      	b.n	8009f6a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3310      	adds	r3, #16
 8009f0e:	6979      	ldr	r1, [r7, #20]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f00b fe37 	bl	8015b84 <sys_mbox_new>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d125      	bne.n	8009f68 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	330c      	adds	r3, #12
 8009f20:	2100      	movs	r1, #0
 8009f22:	4618      	mov	r0, r3
 8009f24:	f00b fef1 	bl	8015d0a <sys_sem_new>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d005      	beq.n	8009f3a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3310      	adds	r3, #16
 8009f32:	4618      	mov	r0, r3
 8009f34:	f00b fe44 	bl	8015bc0 <sys_mbox_free>
    goto free_and_return;
 8009f38:	e017      	b.n	8009f6a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	3314      	adds	r3, #20
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f00b fed6 	bl	8015cf0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f50:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	7cfa      	ldrb	r2, [r7, #19]
 8009f62:	771a      	strb	r2, [r3, #28]
  return conn;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	e005      	b.n	8009f74 <netconn_alloc+0xc8>
    goto free_and_return;
 8009f68:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8009f6a:	68f9      	ldr	r1, [r7, #12]
 8009f6c:	2007      	movs	r0, #7
 8009f6e:	f004 f9f9 	bl	800e364 <memp_free>
  return NULL;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3718      	adds	r7, #24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	08018298 	.word	0x08018298
 8009f80:	080184e0 	.word	0x080184e0
 8009f84:	08018320 	.word	0x08018320

08009f88 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d006      	beq.n	8009fa6 <netconn_free+0x1e>
 8009f98:	4b1b      	ldr	r3, [pc, #108]	; (800a008 <netconn_free+0x80>)
 8009f9a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8009f9e:	491b      	ldr	r1, [pc, #108]	; (800a00c <netconn_free+0x84>)
 8009fa0:	481b      	ldr	r0, [pc, #108]	; (800a010 <netconn_free+0x88>)
 8009fa2:	f00c f86b 	bl	801607c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	3310      	adds	r3, #16
 8009faa:	4618      	mov	r0, r3
 8009fac:	f00b fe8f 	bl	8015cce <sys_mbox_valid>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d006      	beq.n	8009fc4 <netconn_free+0x3c>
 8009fb6:	4b14      	ldr	r3, [pc, #80]	; (800a008 <netconn_free+0x80>)
 8009fb8:	f240 3223 	movw	r2, #803	; 0x323
 8009fbc:	4915      	ldr	r1, [pc, #84]	; (800a014 <netconn_free+0x8c>)
 8009fbe:	4814      	ldr	r0, [pc, #80]	; (800a010 <netconn_free+0x88>)
 8009fc0:	f00c f85c 	bl	801607c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	3314      	adds	r3, #20
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f00b fe80 	bl	8015cce <sys_mbox_valid>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d006      	beq.n	8009fe2 <netconn_free+0x5a>
 8009fd4:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <netconn_free+0x80>)
 8009fd6:	f240 3226 	movw	r2, #806	; 0x326
 8009fda:	490f      	ldr	r1, [pc, #60]	; (800a018 <netconn_free+0x90>)
 8009fdc:	480c      	ldr	r0, [pc, #48]	; (800a010 <netconn_free+0x88>)
 8009fde:	f00c f84d 	bl	801607c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	330c      	adds	r3, #12
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f00b fef3 	bl	8015dd2 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	330c      	adds	r3, #12
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f00b ff0c 	bl	8015e0e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8009ff6:	6879      	ldr	r1, [r7, #4]
 8009ff8:	2007      	movs	r0, #7
 8009ffa:	f004 f9b3 	bl	800e364 <memp_free>
}
 8009ffe:	bf00      	nop
 800a000:	3708      	adds	r7, #8
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}
 800a006:	bf00      	nop
 800a008:	08018298 	.word	0x08018298
 800a00c:	08018508 	.word	0x08018508
 800a010:	08018320 	.word	0x08018320
 800a014:	08018538 	.word	0x08018538
 800a018:	08018574 	.word	0x08018574

0800a01c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	3310      	adds	r3, #16
 800a028:	4618      	mov	r0, r3
 800a02a:	f00b fe50 	bl	8015cce <sys_mbox_valid>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d02f      	beq.n	800a094 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a034:	e018      	b.n	800a068 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a03e:	2b10      	cmp	r3, #16
 800a040:	d10e      	bne.n	800a060 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f107 020f 	add.w	r2, r7, #15
 800a048:	4611      	mov	r1, r2
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7ff fafa 	bl	8009644 <lwip_netconn_is_err_msg>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d108      	bne.n	800a068 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	4618      	mov	r0, r3
 800a05a:	f004 ffcb 	bl	800eff4 <pbuf_free>
 800a05e:	e003      	b.n	800a068 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	4618      	mov	r0, r3
 800a064:	f000 ffde 	bl	800b024 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	3310      	adds	r3, #16
 800a06c:	f107 0210 	add.w	r2, r7, #16
 800a070:	4611      	mov	r1, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f00b fe0f 	bl	8015c96 <sys_arch_mbox_tryfetch>
 800a078:	4603      	mov	r3, r0
 800a07a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a07e:	d1da      	bne.n	800a036 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	3310      	adds	r3, #16
 800a084:	4618      	mov	r0, r3
 800a086:	f00b fd9b 	bl	8015bc0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	3310      	adds	r3, #16
 800a08e:	4618      	mov	r0, r3
 800a090:	f00b fe2e 	bl	8015cf0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	3314      	adds	r3, #20
 800a098:	4618      	mov	r0, r3
 800a09a:	f00b fe18 	bl	8015cce <sys_mbox_valid>
 800a09e:	4603      	mov	r3, r0
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d034      	beq.n	800a10e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a0a4:	e01d      	b.n	800a0e2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	f107 020e 	add.w	r2, r7, #14
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff fac8 	bl	8009644 <lwip_netconn_is_err_msg>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d113      	bne.n	800a0e2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a0be:	6978      	ldr	r0, [r7, #20]
 800a0c0:	f7ff ffac 	bl	800a01c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d007      	beq.n	800a0dc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	685b      	ldr	r3, [r3, #4]
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	f005 fd75 	bl	800fbc0 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a0d6:	697b      	ldr	r3, [r7, #20]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a0dc:	6978      	ldr	r0, [r7, #20]
 800a0de:	f7ff ff53 	bl	8009f88 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	3314      	adds	r3, #20
 800a0e6:	f107 0210 	add.w	r2, r7, #16
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f00b fdd2 	bl	8015c96 <sys_arch_mbox_tryfetch>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0f8:	d1d5      	bne.n	800a0a6 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	3314      	adds	r3, #20
 800a0fe:	4618      	mov	r0, r3
 800a100:	f00b fd5e 	bl	8015bc0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	3314      	adds	r3, #20
 800a108:	4618      	mov	r0, r3
 800a10a:	f00b fdf1 	bl	8015cf0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a10e:	bf00      	nop
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
	...

0800a118 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	460b      	mov	r3, r1
 800a122:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a124:	2300      	movs	r3, #0
 800a126:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d106      	bne.n	800a13c <lwip_netconn_do_close_internal+0x24>
 800a12e:	4ba1      	ldr	r3, [pc, #644]	; (800a3b4 <lwip_netconn_do_close_internal+0x29c>)
 800a130:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a134:	49a0      	ldr	r1, [pc, #640]	; (800a3b8 <lwip_netconn_do_close_internal+0x2a0>)
 800a136:	48a1      	ldr	r0, [pc, #644]	; (800a3bc <lwip_netconn_do_close_internal+0x2a4>)
 800a138:	f00b ffa0 	bl	801607c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a144:	2b10      	cmp	r3, #16
 800a146:	d006      	beq.n	800a156 <lwip_netconn_do_close_internal+0x3e>
 800a148:	4b9a      	ldr	r3, [pc, #616]	; (800a3b4 <lwip_netconn_do_close_internal+0x29c>)
 800a14a:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a14e:	499c      	ldr	r1, [pc, #624]	; (800a3c0 <lwip_netconn_do_close_internal+0x2a8>)
 800a150:	489a      	ldr	r0, [pc, #616]	; (800a3bc <lwip_netconn_do_close_internal+0x2a4>)
 800a152:	f00b ff93 	bl	801607c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	785b      	ldrb	r3, [r3, #1]
 800a15a:	2b04      	cmp	r3, #4
 800a15c:	d006      	beq.n	800a16c <lwip_netconn_do_close_internal+0x54>
 800a15e:	4b95      	ldr	r3, [pc, #596]	; (800a3b4 <lwip_netconn_do_close_internal+0x29c>)
 800a160:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a164:	4997      	ldr	r1, [pc, #604]	; (800a3c4 <lwip_netconn_do_close_internal+0x2ac>)
 800a166:	4895      	ldr	r0, [pc, #596]	; (800a3bc <lwip_netconn_do_close_internal+0x2a4>)
 800a168:	f00b ff88 	bl	801607c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d106      	bne.n	800a182 <lwip_netconn_do_close_internal+0x6a>
 800a174:	4b8f      	ldr	r3, [pc, #572]	; (800a3b4 <lwip_netconn_do_close_internal+0x29c>)
 800a176:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a17a:	4993      	ldr	r1, [pc, #588]	; (800a3c8 <lwip_netconn_do_close_internal+0x2b0>)
 800a17c:	488f      	ldr	r0, [pc, #572]	; (800a3bc <lwip_netconn_do_close_internal+0x2a4>)
 800a17e:	f00b ff7d 	bl	801607c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d106      	bne.n	800a198 <lwip_netconn_do_close_internal+0x80>
 800a18a:	4b8a      	ldr	r3, [pc, #552]	; (800a3b4 <lwip_netconn_do_close_internal+0x29c>)
 800a18c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a190:	498e      	ldr	r1, [pc, #568]	; (800a3cc <lwip_netconn_do_close_internal+0x2b4>)
 800a192:	488a      	ldr	r0, [pc, #552]	; (800a3bc <lwip_netconn_do_close_internal+0x2a4>)
 800a194:	f00b ff72 	bl	801607c <iprintf>

  tpcb = conn->pcb.tcp;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	7a1b      	ldrb	r3, [r3, #8]
 800a1a4:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a1a6:	7bfb      	ldrb	r3, [r7, #15]
 800a1a8:	f003 0301 	and.w	r3, r3, #1
 800a1ac:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	f003 0302 	and.w	r3, r3, #2
 800a1b4:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a1b6:	7bfb      	ldrb	r3, [r7, #15]
 800a1b8:	2b03      	cmp	r3, #3
 800a1ba:	d102      	bne.n	800a1c2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	75bb      	strb	r3, [r7, #22]
 800a1c0:	e01f      	b.n	800a202 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a1c2:	7bbb      	ldrb	r3, [r7, #14]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00e      	beq.n	800a1e6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a1cc:	2b05      	cmp	r3, #5
 800a1ce:	d007      	beq.n	800a1e0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a1d4:	2b06      	cmp	r3, #6
 800a1d6:	d003      	beq.n	800a1e0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a1dc:	2b08      	cmp	r3, #8
 800a1de:	d102      	bne.n	800a1e6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	75bb      	strb	r3, [r7, #22]
 800a1e4:	e00d      	b.n	800a202 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a1e6:	7b7b      	ldrb	r3, [r7, #13]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d008      	beq.n	800a1fe <lwip_netconn_do_close_internal+0xe6>
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	8b5b      	ldrh	r3, [r3, #26]
 800a1f0:	f003 0310 	and.w	r3, r3, #16
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	75bb      	strb	r3, [r7, #22]
 800a1fc:	e001      	b.n	800a202 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a1fe:	2300      	movs	r3, #0
 800a200:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a202:	7dbb      	ldrb	r3, [r7, #22]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d003      	beq.n	800a210 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a208:	2100      	movs	r1, #0
 800a20a:	6938      	ldr	r0, [r7, #16]
 800a20c:	f006 fe40 	bl	8010e90 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	7d1b      	ldrb	r3, [r3, #20]
 800a214:	2b01      	cmp	r3, #1
 800a216:	d104      	bne.n	800a222 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a218:	2100      	movs	r1, #0
 800a21a:	6938      	ldr	r0, [r7, #16]
 800a21c:	f006 feae 	bl	8010f7c <tcp_accept>
 800a220:	e01d      	b.n	800a25e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a222:	7bbb      	ldrb	r3, [r7, #14]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d007      	beq.n	800a238 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a228:	2100      	movs	r1, #0
 800a22a:	6938      	ldr	r0, [r7, #16]
 800a22c:	f006 fe42 	bl	8010eb4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a230:	2100      	movs	r1, #0
 800a232:	6938      	ldr	r0, [r7, #16]
 800a234:	f006 fea2 	bl	8010f7c <tcp_accept>
    }
    if (shut_tx) {
 800a238:	7b7b      	ldrb	r3, [r7, #13]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d003      	beq.n	800a246 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a23e:	2100      	movs	r1, #0
 800a240:	6938      	ldr	r0, [r7, #16]
 800a242:	f006 fe59 	bl	8010ef8 <tcp_sent>
    }
    if (shut_close) {
 800a246:	7dbb      	ldrb	r3, [r7, #22]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d008      	beq.n	800a25e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a24c:	2200      	movs	r2, #0
 800a24e:	2100      	movs	r1, #0
 800a250:	6938      	ldr	r0, [r7, #16]
 800a252:	f006 feab 	bl	8010fac <tcp_poll>
      tcp_err(tpcb, NULL);
 800a256:	2100      	movs	r1, #0
 800a258:	6938      	ldr	r0, [r7, #16]
 800a25a:	f006 fe6d 	bl	8010f38 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a25e:	7dbb      	ldrb	r3, [r7, #22]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d005      	beq.n	800a270 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a264:	6938      	ldr	r0, [r7, #16]
 800a266:	f005 fb6f 	bl	800f948 <tcp_close>
 800a26a:	4603      	mov	r3, r0
 800a26c:	75fb      	strb	r3, [r7, #23]
 800a26e:	e007      	b.n	800a280 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a270:	7bbb      	ldrb	r3, [r7, #14]
 800a272:	7b7a      	ldrb	r2, [r7, #13]
 800a274:	4619      	mov	r1, r3
 800a276:	6938      	ldr	r0, [r7, #16]
 800a278:	f005 fb92 	bl	800f9a0 <tcp_shutdown>
 800a27c:	4603      	mov	r3, r0
 800a27e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800a280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d102      	bne.n	800a28e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800a288:	2301      	movs	r3, #1
 800a28a:	757b      	strb	r3, [r7, #21]
 800a28c:	e016      	b.n	800a2bc <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800a28e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a296:	d10f      	bne.n	800a2b8 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a1b      	ldr	r3, [r3, #32]
 800a29c:	7a5b      	ldrb	r3, [r3, #9]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d10c      	bne.n	800a2bc <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800a2a6:	7dbb      	ldrb	r3, [r7, #22]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d007      	beq.n	800a2bc <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800a2ac:	6938      	ldr	r0, [r7, #16]
 800a2ae:	f005 fc87 	bl	800fbc0 <tcp_abort>
          err = ERR_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	75fb      	strb	r3, [r7, #23]
 800a2b6:	e001      	b.n	800a2bc <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800a2bc:	7d7b      	ldrb	r3, [r7, #21]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d044      	beq.n	800a34c <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	330c      	adds	r3, #12
 800a2ca:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a1b      	ldr	r3, [r3, #32]
 800a2d0:	7dfa      	ldrb	r2, [r7, #23]
 800a2d2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800a2e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d129      	bne.n	800a33c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800a2e8:	7dbb      	ldrb	r3, [r7, #22]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00c      	beq.n	800a308 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d005      	beq.n	800a308 <lwip_netconn_do_close_internal+0x1f0>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a300:	2200      	movs	r2, #0
 800a302:	2104      	movs	r1, #4
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	4798      	blx	r3
      }
      if (shut_rx) {
 800a308:	7bbb      	ldrb	r3, [r7, #14]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d009      	beq.n	800a322 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a312:	2b00      	cmp	r3, #0
 800a314:	d005      	beq.n	800a322 <lwip_netconn_do_close_internal+0x20a>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31a:	2200      	movs	r2, #0
 800a31c:	2100      	movs	r1, #0
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	4798      	blx	r3
      }
      if (shut_tx) {
 800a322:	7b7b      	ldrb	r3, [r7, #13]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d009      	beq.n	800a33c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d005      	beq.n	800a33c <lwip_netconn_do_close_internal+0x224>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a334:	2200      	movs	r2, #0
 800a336:	2102      	movs	r1, #2
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a33c:	78fb      	ldrb	r3, [r7, #3]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800a342:	68b8      	ldr	r0, [r7, #8]
 800a344:	f00b fd38 	bl	8015db8 <sys_sem_signal>
    }
    return ERR_OK;
 800a348:	2300      	movs	r3, #0
 800a34a:	e02e      	b.n	800a3aa <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800a34c:	7d7b      	ldrb	r3, [r7, #21]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d11e      	bne.n	800a390 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	7d1b      	ldrb	r3, [r3, #20]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d106      	bne.n	800a368 <lwip_netconn_do_close_internal+0x250>
 800a35a:	4b16      	ldr	r3, [pc, #88]	; (800a3b4 <lwip_netconn_do_close_internal+0x29c>)
 800a35c:	f240 4241 	movw	r2, #1089	; 0x441
 800a360:	491b      	ldr	r1, [pc, #108]	; (800a3d0 <lwip_netconn_do_close_internal+0x2b8>)
 800a362:	4816      	ldr	r0, [pc, #88]	; (800a3bc <lwip_netconn_do_close_internal+0x2a4>)
 800a364:	f00b fe8a 	bl	801607c <iprintf>
    if (shut_tx) {
 800a368:	7b7b      	ldrb	r3, [r7, #13]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800a36e:	4919      	ldr	r1, [pc, #100]	; (800a3d4 <lwip_netconn_do_close_internal+0x2bc>)
 800a370:	6938      	ldr	r0, [r7, #16]
 800a372:	f006 fdc1 	bl	8010ef8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800a376:	2201      	movs	r2, #1
 800a378:	4917      	ldr	r1, [pc, #92]	; (800a3d8 <lwip_netconn_do_close_internal+0x2c0>)
 800a37a:	6938      	ldr	r0, [r7, #16]
 800a37c:	f006 fe16 	bl	8010fac <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800a380:	4916      	ldr	r1, [pc, #88]	; (800a3dc <lwip_netconn_do_close_internal+0x2c4>)
 800a382:	6938      	ldr	r0, [r7, #16]
 800a384:	f006 fdd8 	bl	8010f38 <tcp_err>
    tcp_arg(tpcb, conn);
 800a388:	6879      	ldr	r1, [r7, #4]
 800a38a:	6938      	ldr	r0, [r7, #16]
 800a38c:	f006 fd80 	bl	8010e90 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800a390:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d106      	bne.n	800a3a6 <lwip_netconn_do_close_internal+0x28e>
 800a398:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <lwip_netconn_do_close_internal+0x29c>)
 800a39a:	f240 424d 	movw	r2, #1101	; 0x44d
 800a39e:	4910      	ldr	r1, [pc, #64]	; (800a3e0 <lwip_netconn_do_close_internal+0x2c8>)
 800a3a0:	4806      	ldr	r0, [pc, #24]	; (800a3bc <lwip_netconn_do_close_internal+0x2a4>)
 800a3a2:	f00b fe6b 	bl	801607c <iprintf>
  return err;
 800a3a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3718      	adds	r7, #24
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	08018298 	.word	0x08018298
 800a3b8:	080185b0 	.word	0x080185b0
 800a3bc:	08018320 	.word	0x08018320
 800a3c0:	080185c0 	.word	0x080185c0
 800a3c4:	080185e0 	.word	0x080185e0
 800a3c8:	08018604 	.word	0x08018604
 800a3cc:	08018444 	.word	0x08018444
 800a3d0:	08018618 	.word	0x08018618
 800a3d4:	0800998d 	.word	0x0800998d
 800a3d8:	080098c1 	.word	0x080098c1
 800a3dc:	08009a39 	.word	0x08009a39
 800a3e0:	0801863c 	.word	0x0801863c

0800a3e4 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	785b      	ldrb	r3, [r3, #1]
 800a3f6:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800a3f8:	7afb      	ldrb	r3, [r7, #11]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d00d      	beq.n	800a41a <lwip_netconn_do_delconn+0x36>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	781b      	ldrb	r3, [r3, #0]
 800a404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a408:	2b10      	cmp	r3, #16
 800a40a:	d006      	beq.n	800a41a <lwip_netconn_do_delconn+0x36>
 800a40c:	4b60      	ldr	r3, [pc, #384]	; (800a590 <lwip_netconn_do_delconn+0x1ac>)
 800a40e:	f240 425e 	movw	r2, #1118	; 0x45e
 800a412:	4960      	ldr	r1, [pc, #384]	; (800a594 <lwip_netconn_do_delconn+0x1b0>)
 800a414:	4860      	ldr	r0, [pc, #384]	; (800a598 <lwip_netconn_do_delconn+0x1b4>)
 800a416:	f00b fe31 	bl	801607c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800a41a:	7afb      	ldrb	r3, [r7, #11]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d005      	beq.n	800a42c <lwip_netconn_do_delconn+0x48>
 800a420:	7afb      	ldrb	r3, [r7, #11]
 800a422:	2b02      	cmp	r3, #2
 800a424:	d002      	beq.n	800a42c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800a426:	7afb      	ldrb	r3, [r7, #11]
 800a428:	2b03      	cmp	r3, #3
 800a42a:	d109      	bne.n	800a440 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800a42c:	7afb      	ldrb	r3, [r7, #11]
 800a42e:	2b03      	cmp	r3, #3
 800a430:	d10a      	bne.n	800a448 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	7f1b      	ldrb	r3, [r3, #28]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d103      	bne.n	800a448 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	22fb      	movs	r2, #251	; 0xfb
 800a444:	711a      	strb	r2, [r3, #4]
 800a446:	e097      	b.n	800a578 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800a448:	7afb      	ldrb	r3, [r7, #11]
 800a44a:	2b03      	cmp	r3, #3
 800a44c:	d10d      	bne.n	800a46a <lwip_netconn_do_delconn+0x86>
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	7f1b      	ldrb	r3, [r3, #28]
 800a454:	f003 0304 	and.w	r3, r3, #4
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d106      	bne.n	800a46a <lwip_netconn_do_delconn+0x86>
 800a45c:	4b4c      	ldr	r3, [pc, #304]	; (800a590 <lwip_netconn_do_delconn+0x1ac>)
 800a45e:	f240 427a 	movw	r2, #1146	; 0x47a
 800a462:	494e      	ldr	r1, [pc, #312]	; (800a59c <lwip_netconn_do_delconn+0x1b8>)
 800a464:	484c      	ldr	r0, [pc, #304]	; (800a598 <lwip_netconn_do_delconn+0x1b4>)
 800a466:	f00b fe09 	bl	801607c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	2200      	movs	r2, #0
 800a46e:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4618      	mov	r0, r3
 800a476:	f7ff fdd1 	bl	800a01c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d05f      	beq.n	800a544 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a48e:	2b10      	cmp	r3, #16
 800a490:	d00d      	beq.n	800a4ae <lwip_netconn_do_delconn+0xca>
 800a492:	2b20      	cmp	r3, #32
 800a494:	d151      	bne.n	800a53a <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f00b fa00 	bl	80158ac <udp_remove>
          break;
 800a4ac:	e046      	b.n	800a53c <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	6a1b      	ldr	r3, [r3, #32]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d006      	beq.n	800a4c6 <lwip_netconn_do_delconn+0xe2>
 800a4b8:	4b35      	ldr	r3, [pc, #212]	; (800a590 <lwip_netconn_do_delconn+0x1ac>)
 800a4ba:	f240 4294 	movw	r2, #1172	; 0x494
 800a4be:	4938      	ldr	r1, [pc, #224]	; (800a5a0 <lwip_netconn_do_delconn+0x1bc>)
 800a4c0:	4835      	ldr	r0, [pc, #212]	; (800a598 <lwip_netconn_do_delconn+0x1b4>)
 800a4c2:	f00b fddb 	bl	801607c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	2204      	movs	r2, #4
 800a4cc:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	2203      	movs	r2, #3
 800a4d2:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	68fa      	ldr	r2, [r7, #12]
 800a4da:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2100      	movs	r1, #0
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7ff fe18 	bl	800a118 <lwip_netconn_do_close_internal>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d04b      	beq.n	800a586 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	785b      	ldrb	r3, [r3, #1]
 800a4f4:	2b04      	cmp	r3, #4
 800a4f6:	d006      	beq.n	800a506 <lwip_netconn_do_delconn+0x122>
 800a4f8:	4b25      	ldr	r3, [pc, #148]	; (800a590 <lwip_netconn_do_delconn+0x1ac>)
 800a4fa:	f240 429a 	movw	r2, #1178	; 0x49a
 800a4fe:	4929      	ldr	r1, [pc, #164]	; (800a5a4 <lwip_netconn_do_delconn+0x1c0>)
 800a500:	4825      	ldr	r0, [pc, #148]	; (800a598 <lwip_netconn_do_delconn+0x1b4>)
 800a502:	f00b fdbb 	bl	801607c <iprintf>
            UNLOCK_TCPIP_CORE();
 800a506:	4828      	ldr	r0, [pc, #160]	; (800a5a8 <lwip_netconn_do_delconn+0x1c4>)
 800a508:	f00b fcc5 	bl	8015e96 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	330c      	adds	r3, #12
 800a512:	2100      	movs	r1, #0
 800a514:	4618      	mov	r0, r3
 800a516:	f00b fc1e 	bl	8015d56 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800a51a:	4823      	ldr	r0, [pc, #140]	; (800a5a8 <lwip_netconn_do_delconn+0x1c4>)
 800a51c:	f00b fcac 	bl	8015e78 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d02d      	beq.n	800a586 <lwip_netconn_do_delconn+0x1a2>
 800a52a:	4b19      	ldr	r3, [pc, #100]	; (800a590 <lwip_netconn_do_delconn+0x1ac>)
 800a52c:	f240 429e 	movw	r2, #1182	; 0x49e
 800a530:	491c      	ldr	r1, [pc, #112]	; (800a5a4 <lwip_netconn_do_delconn+0x1c0>)
 800a532:	4819      	ldr	r0, [pc, #100]	; (800a598 <lwip_netconn_do_delconn+0x1b4>)
 800a534:	f00b fda2 	bl	801607c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800a538:	e025      	b.n	800a586 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800a53a:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	2200      	movs	r2, #0
 800a542:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d007      	beq.n	800a55e <lwip_netconn_do_delconn+0x17a>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	68fa      	ldr	r2, [r7, #12]
 800a556:	6810      	ldr	r0, [r2, #0]
 800a558:	2200      	movs	r2, #0
 800a55a:	2100      	movs	r1, #0
 800a55c:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	2b00      	cmp	r3, #0
 800a566:	d007      	beq.n	800a578 <lwip_netconn_do_delconn+0x194>
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	6810      	ldr	r0, [r2, #0]
 800a572:	2200      	movs	r2, #0
 800a574:	2102      	movs	r1, #2
 800a576:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	330c      	adds	r3, #12
 800a57e:	4618      	mov	r0, r3
 800a580:	f00b fc34 	bl	8015dec <sys_sem_valid>
 800a584:	e000      	b.n	800a588 <lwip_netconn_do_delconn+0x1a4>
          return;
 800a586:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800a588:	3710      	adds	r7, #16
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}
 800a58e:	bf00      	nop
 800a590:	08018298 	.word	0x08018298
 800a594:	0801864c 	.word	0x0801864c
 800a598:	08018320 	.word	0x08018320
 800a59c:	08018660 	.word	0x08018660
 800a5a0:	08018680 	.word	0x08018680
 800a5a4:	0801869c 	.word	0x0801869c
 800a5a8:	24006a24 	.word	0x24006a24

0800a5ac <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b084      	sub	sp, #16
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d025      	beq.n	800a60e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a5cc:	2b10      	cmp	r3, #16
 800a5ce:	d00e      	beq.n	800a5ee <lwip_netconn_do_bind+0x42>
 800a5d0:	2b20      	cmp	r3, #32
 800a5d2:	d119      	bne.n	800a608 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	6858      	ldr	r0, [r3, #4]
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	6899      	ldr	r1, [r3, #8]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	899b      	ldrh	r3, [r3, #12]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	f00b f84c 	bl	8015680 <udp_bind>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	73fb      	strb	r3, [r7, #15]
        break;
 800a5ec:	e011      	b.n	800a612 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	6858      	ldr	r0, [r3, #4]
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	6899      	ldr	r1, [r3, #8]
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	899b      	ldrh	r3, [r3, #12]
 800a5fc:	461a      	mov	r2, r3
 800a5fe:	f005 faeb 	bl	800fbd8 <tcp_bind>
 800a602:	4603      	mov	r3, r0
 800a604:	73fb      	strb	r3, [r7, #15]
        break;
 800a606:	e004      	b.n	800a612 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800a608:	23fa      	movs	r3, #250	; 0xfa
 800a60a:	73fb      	strb	r3, [r7, #15]
        break;
 800a60c:	e001      	b.n	800a612 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800a60e:	23fa      	movs	r3, #250	; 0xfa
 800a610:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	7bfa      	ldrb	r2, [r7, #15]
 800a616:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a618:	bf00      	nop
 800a61a:	3710      	adds	r7, #16
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	4613      	mov	r3, r2
 800a62c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800a62e:	2300      	movs	r3, #0
 800a630:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d102      	bne.n	800a642 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800a63c:	f06f 0305 	mvn.w	r3, #5
 800a640:	e070      	b.n	800a724 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	785b      	ldrb	r3, [r3, #1]
 800a646:	2b03      	cmp	r3, #3
 800a648:	d006      	beq.n	800a658 <lwip_netconn_do_connected+0x38>
 800a64a:	4b38      	ldr	r3, [pc, #224]	; (800a72c <lwip_netconn_do_connected+0x10c>)
 800a64c:	f240 5223 	movw	r2, #1315	; 0x523
 800a650:	4937      	ldr	r1, [pc, #220]	; (800a730 <lwip_netconn_do_connected+0x110>)
 800a652:	4838      	ldr	r0, [pc, #224]	; (800a734 <lwip_netconn_do_connected+0x114>)
 800a654:	f00b fd12 	bl	801607c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800a658:	69bb      	ldr	r3, [r7, #24]
 800a65a:	6a1b      	ldr	r3, [r3, #32]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d10c      	bne.n	800a67a <lwip_netconn_do_connected+0x5a>
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	7f1b      	ldrb	r3, [r3, #28]
 800a664:	f003 0304 	and.w	r3, r3, #4
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d106      	bne.n	800a67a <lwip_netconn_do_connected+0x5a>
 800a66c:	4b2f      	ldr	r3, [pc, #188]	; (800a72c <lwip_netconn_do_connected+0x10c>)
 800a66e:	f240 5224 	movw	r2, #1316	; 0x524
 800a672:	4931      	ldr	r1, [pc, #196]	; (800a738 <lwip_netconn_do_connected+0x118>)
 800a674:	482f      	ldr	r0, [pc, #188]	; (800a734 <lwip_netconn_do_connected+0x114>)
 800a676:	f00b fd01 	bl	801607c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	6a1b      	ldr	r3, [r3, #32]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d008      	beq.n	800a694 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800a682:	69bb      	ldr	r3, [r7, #24]
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	79fa      	ldrb	r2, [r7, #7]
 800a688:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	6a1b      	ldr	r3, [r3, #32]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	330c      	adds	r3, #12
 800a692:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a69c:	2b10      	cmp	r3, #16
 800a69e:	d106      	bne.n	800a6ae <lwip_netconn_do_connected+0x8e>
 800a6a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d102      	bne.n	800a6ae <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800a6a8:	69b8      	ldr	r0, [r7, #24]
 800a6aa:	f7ff fa9b 	bl	8009be4 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	7f1b      	ldrb	r3, [r3, #28]
 800a6b2:	f003 0304 	and.w	r3, r3, #4
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	bf0c      	ite	eq
 800a6ba:	2301      	moveq	r3, #1
 800a6bc:	2300      	movne	r3, #0
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	7f1b      	ldrb	r3, [r3, #28]
 800a6c6:	f023 0304 	bic.w	r3, r3, #4
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d002      	beq.n	800a6dc <lwip_netconn_do_connected+0xbc>
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d10c      	bne.n	800a6f6 <lwip_netconn_do_connected+0xd6>
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d102      	bne.n	800a6e8 <lwip_netconn_do_connected+0xc8>
 800a6e2:	69fb      	ldr	r3, [r7, #28]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d006      	beq.n	800a6f6 <lwip_netconn_do_connected+0xd6>
 800a6e8:	4b10      	ldr	r3, [pc, #64]	; (800a72c <lwip_netconn_do_connected+0x10c>)
 800a6ea:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800a6ee:	4913      	ldr	r1, [pc, #76]	; (800a73c <lwip_netconn_do_connected+0x11c>)
 800a6f0:	4810      	ldr	r0, [pc, #64]	; (800a734 <lwip_netconn_do_connected+0x114>)
 800a6f2:	f00b fcc3 	bl	801607c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	2200      	movs	r2, #0
 800a700:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	2b00      	cmp	r3, #0
 800a708:	d005      	beq.n	800a716 <lwip_netconn_do_connected+0xf6>
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a70e:	2200      	movs	r2, #0
 800a710:	2102      	movs	r1, #2
 800a712:	69b8      	ldr	r0, [r7, #24]
 800a714:	4798      	blx	r3

  if (was_blocking) {
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d002      	beq.n	800a722 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800a71c:	69f8      	ldr	r0, [r7, #28]
 800a71e:	f00b fb4b 	bl	8015db8 <sys_sem_signal>
  }
  return ERR_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3720      	adds	r7, #32
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	08018298 	.word	0x08018298
 800a730:	080186a4 	.word	0x080186a4
 800a734:	08018320 	.word	0x08018320
 800a738:	080186c4 	.word	0x080186c4
 800a73c:	08018704 	.word	0x08018704

0800a740 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d102      	bne.n	800a75c <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800a756:	23f1      	movs	r3, #241	; 0xf1
 800a758:	75fb      	strb	r3, [r7, #23]
 800a75a:	e09b      	b.n	800a894 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a766:	2b10      	cmp	r3, #16
 800a768:	d00f      	beq.n	800a78a <lwip_netconn_do_connect+0x4a>
 800a76a:	2b20      	cmp	r3, #32
 800a76c:	f040 8087 	bne.w	800a87e <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6858      	ldr	r0, [r3, #4]
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	6899      	ldr	r1, [r3, #8]
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	899b      	ldrh	r3, [r3, #12]
 800a77e:	461a      	mov	r2, r3
 800a780:	f00b f806 	bl	8015790 <udp_connect>
 800a784:	4603      	mov	r3, r0
 800a786:	75fb      	strb	r3, [r7, #23]
        break;
 800a788:	e084      	b.n	800a894 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	785b      	ldrb	r3, [r3, #1]
 800a790:	2b03      	cmp	r3, #3
 800a792:	d102      	bne.n	800a79a <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800a794:	23f7      	movs	r3, #247	; 0xf7
 800a796:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800a798:	e07b      	b.n	800a892 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	785b      	ldrb	r3, [r3, #1]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d002      	beq.n	800a7aa <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800a7a4:	23f6      	movs	r3, #246	; 0xf6
 800a7a6:	75fb      	strb	r3, [r7, #23]
        break;
 800a7a8:	e073      	b.n	800a892 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7ff fa18 	bl	8009be4 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	6858      	ldr	r0, [r3, #4]
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	6899      	ldr	r1, [r3, #8]
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	899a      	ldrh	r2, [r3, #12]
 800a7c2:	4b38      	ldr	r3, [pc, #224]	; (800a8a4 <lwip_netconn_do_connect+0x164>)
 800a7c4:	f005 fc5c 	bl	8010080 <tcp_connect>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800a7cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d15e      	bne.n	800a892 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	7f1b      	ldrb	r3, [r3, #28]
 800a7da:	f003 0302 	and.w	r3, r3, #2
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	bf14      	ite	ne
 800a7e2:	2301      	movne	r3, #1
 800a7e4:	2300      	moveq	r3, #0
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2203      	movs	r2, #3
 800a7f0:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d009      	beq.n	800a80c <lwip_netconn_do_connect+0xcc>
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	7f1a      	ldrb	r2, [r3, #28]
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f042 0204 	orr.w	r2, r2, #4
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	771a      	strb	r2, [r3, #28]
 800a80a:	e008      	b.n	800a81e <lwip_netconn_do_connect+0xde>
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	7f1a      	ldrb	r2, [r3, #28]
 800a812:	693b      	ldr	r3, [r7, #16]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f022 0204 	bic.w	r2, r2, #4
 800a81a:	b2d2      	uxtb	r2, r2
 800a81c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d002      	beq.n	800a82a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800a824:	23fb      	movs	r3, #251	; 0xfb
 800a826:	75fb      	strb	r3, [r7, #23]
        break;
 800a828:	e033      	b.n	800a892 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	693a      	ldr	r2, [r7, #16]
 800a830:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	785b      	ldrb	r3, [r3, #1]
 800a838:	2b03      	cmp	r3, #3
 800a83a:	d006      	beq.n	800a84a <lwip_netconn_do_connect+0x10a>
 800a83c:	4b1a      	ldr	r3, [pc, #104]	; (800a8a8 <lwip_netconn_do_connect+0x168>)
 800a83e:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800a842:	491a      	ldr	r1, [pc, #104]	; (800a8ac <lwip_netconn_do_connect+0x16c>)
 800a844:	481a      	ldr	r0, [pc, #104]	; (800a8b0 <lwip_netconn_do_connect+0x170>)
 800a846:	f00b fc19 	bl	801607c <iprintf>
              UNLOCK_TCPIP_CORE();
 800a84a:	481a      	ldr	r0, [pc, #104]	; (800a8b4 <lwip_netconn_do_connect+0x174>)
 800a84c:	f00b fb23 	bl	8015e96 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	330c      	adds	r3, #12
 800a856:	2100      	movs	r1, #0
 800a858:	4618      	mov	r0, r3
 800a85a:	f00b fa7c 	bl	8015d56 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800a85e:	4815      	ldr	r0, [pc, #84]	; (800a8b4 <lwip_netconn_do_connect+0x174>)
 800a860:	f00b fb0a 	bl	8015e78 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	785b      	ldrb	r3, [r3, #1]
 800a86a:	2b03      	cmp	r3, #3
 800a86c:	d116      	bne.n	800a89c <lwip_netconn_do_connect+0x15c>
 800a86e:	4b0e      	ldr	r3, [pc, #56]	; (800a8a8 <lwip_netconn_do_connect+0x168>)
 800a870:	f240 5274 	movw	r2, #1396	; 0x574
 800a874:	490d      	ldr	r1, [pc, #52]	; (800a8ac <lwip_netconn_do_connect+0x16c>)
 800a876:	480e      	ldr	r0, [pc, #56]	; (800a8b0 <lwip_netconn_do_connect+0x170>)
 800a878:	f00b fc00 	bl	801607c <iprintf>
              return;
 800a87c:	e00e      	b.n	800a89c <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800a87e:	4b0a      	ldr	r3, [pc, #40]	; (800a8a8 <lwip_netconn_do_connect+0x168>)
 800a880:	f240 527d 	movw	r2, #1405	; 0x57d
 800a884:	490c      	ldr	r1, [pc, #48]	; (800a8b8 <lwip_netconn_do_connect+0x178>)
 800a886:	480a      	ldr	r0, [pc, #40]	; (800a8b0 <lwip_netconn_do_connect+0x170>)
 800a888:	f00b fbf8 	bl	801607c <iprintf>
 800a88c:	23fa      	movs	r3, #250	; 0xfa
 800a88e:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800a890:	e000      	b.n	800a894 <lwip_netconn_do_connect+0x154>
        break;
 800a892:	bf00      	nop
    }
  }
  msg->err = err;
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	7dfa      	ldrb	r2, [r7, #23]
 800a898:	711a      	strb	r2, [r3, #4]
 800a89a:	e000      	b.n	800a89e <lwip_netconn_do_connect+0x15e>
              return;
 800a89c:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800a89e:	3718      	adds	r7, #24
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	0800a621 	.word	0x0800a621
 800a8a8:	08018298 	.word	0x08018298
 800a8ac:	0801869c 	.word	0x0801869c
 800a8b0:	08018320 	.word	0x08018320
 800a8b4:	24006a24 	.word	0x24006a24
 800a8b8:	08018724 	.word	0x08018724

0800a8bc <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b086      	sub	sp, #24
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d07f      	beq.n	800a9d2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8dc:	2b10      	cmp	r3, #16
 800a8de:	d175      	bne.n	800a9cc <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	785b      	ldrb	r3, [r3, #1]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d165      	bne.n	800a9b6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	7d1b      	ldrb	r3, [r3, #20]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d002      	beq.n	800a8fc <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 800a8f6:	23fa      	movs	r3, #250	; 0xfa
 800a8f8:	72fb      	strb	r3, [r7, #11]
 800a8fa:	e06c      	b.n	800a9d6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800a8fc:	23ff      	movs	r3, #255	; 0xff
 800a8fe:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	f107 020b 	add.w	r2, r7, #11
 800a90a:	7cf9      	ldrb	r1, [r7, #19]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f005 fa1b 	bl	800fd48 <tcp_listen_with_backlog_and_err>
 800a912:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d05d      	beq.n	800a9d6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	3310      	adds	r3, #16
 800a920:	4618      	mov	r0, r3
 800a922:	f00b f9d4 	bl	8015cce <sys_mbox_valid>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d00b      	beq.n	800a944 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3310      	adds	r3, #16
 800a932:	4618      	mov	r0, r3
 800a934:	f00b f944 	bl	8015bc0 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	3310      	adds	r3, #16
 800a93e:	4618      	mov	r0, r3
 800a940:	f00b f9d6 	bl	8015cf0 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 800a944:	2300      	movs	r3, #0
 800a946:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	3314      	adds	r3, #20
 800a94e:	4618      	mov	r0, r3
 800a950:	f00b f9bd 	bl	8015cce <sys_mbox_valid>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d108      	bne.n	800a96c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	3314      	adds	r3, #20
 800a960:	2106      	movs	r1, #6
 800a962:	4618      	mov	r0, r3
 800a964:	f00b f90e 	bl	8015b84 <sys_mbox_new>
 800a968:	4603      	mov	r3, r0
 800a96a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800a96c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d118      	bne.n	800a9a6 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2202      	movs	r2, #2
 800a97a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	685a      	ldr	r2, [r3, #4]
 800a98a:	697b      	ldr	r3, [r7, #20]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4619      	mov	r1, r3
 800a990:	4610      	mov	r0, r2
 800a992:	f006 fa7d 	bl	8010e90 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	4912      	ldr	r1, [pc, #72]	; (800a9e8 <lwip_netconn_do_listen+0x12c>)
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f006 faec 	bl	8010f7c <tcp_accept>
 800a9a4:	e017      	b.n	800a9d6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f004 ffce 	bl	800f948 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a9ac:	697b      	ldr	r3, [r7, #20]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	605a      	str	r2, [r3, #4]
 800a9b4:	e00f      	b.n	800a9d6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	785b      	ldrb	r3, [r3, #1]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d102      	bne.n	800a9c6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	72fb      	strb	r3, [r7, #11]
 800a9c4:	e007      	b.n	800a9d6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a9c6:	23f5      	movs	r3, #245	; 0xf5
 800a9c8:	72fb      	strb	r3, [r7, #11]
 800a9ca:	e004      	b.n	800a9d6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a9cc:	23f0      	movs	r3, #240	; 0xf0
 800a9ce:	72fb      	strb	r3, [r7, #11]
 800a9d0:	e001      	b.n	800a9d6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a9d2:	23f5      	movs	r3, #245	; 0xf5
 800a9d4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a9d6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a9da:	697b      	ldr	r3, [r7, #20]
 800a9dc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a9de:	bf00      	nop
 800a9e0:	3718      	adds	r7, #24
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	08009c35 	.word	0x08009c35

0800a9ec <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b086      	sub	sp, #24
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d022      	beq.n	800aa4e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aa12:	2b10      	cmp	r3, #16
 800aa14:	d11b      	bne.n	800aa4e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	689b      	ldr	r3, [r3, #8]
 800aa1a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa22:	d202      	bcs.n	800aa2a <lwip_netconn_do_recv+0x3e>
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	e001      	b.n	800aa2e <lwip_netconn_do_recv+0x42>
 800aa2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa2e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	89fa      	ldrh	r2, [r7, #14]
 800aa38:	4611      	mov	r1, r2
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f005 fa88 	bl	800ff50 <tcp_recved>
        remaining -= recved;
 800aa40:	89fb      	ldrh	r3, [r7, #14]
 800aa42:	697a      	ldr	r2, [r7, #20]
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e6      	bne.n	800aa1c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800aa4e:	bf00      	nop
 800aa50:	3718      	adds	r7, #24
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
	...

0800aa58 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800aa64:	2300      	movs	r3, #0
 800aa66:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d106      	bne.n	800aa7c <lwip_netconn_do_writemore+0x24>
 800aa6e:	4b96      	ldr	r3, [pc, #600]	; (800acc8 <lwip_netconn_do_writemore+0x270>)
 800aa70:	f240 6273 	movw	r2, #1651	; 0x673
 800aa74:	4995      	ldr	r1, [pc, #596]	; (800accc <lwip_netconn_do_writemore+0x274>)
 800aa76:	4896      	ldr	r0, [pc, #600]	; (800acd0 <lwip_netconn_do_writemore+0x278>)
 800aa78:	f00b fb00 	bl	801607c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	785b      	ldrb	r3, [r3, #1]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d006      	beq.n	800aa92 <lwip_netconn_do_writemore+0x3a>
 800aa84:	4b90      	ldr	r3, [pc, #576]	; (800acc8 <lwip_netconn_do_writemore+0x270>)
 800aa86:	f240 6274 	movw	r2, #1652	; 0x674
 800aa8a:	4992      	ldr	r1, [pc, #584]	; (800acd4 <lwip_netconn_do_writemore+0x27c>)
 800aa8c:	4890      	ldr	r0, [pc, #576]	; (800acd0 <lwip_netconn_do_writemore+0x278>)
 800aa8e:	f00b faf5 	bl	801607c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a1b      	ldr	r3, [r3, #32]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d106      	bne.n	800aaa8 <lwip_netconn_do_writemore+0x50>
 800aa9a:	4b8b      	ldr	r3, [pc, #556]	; (800acc8 <lwip_netconn_do_writemore+0x270>)
 800aa9c:	f240 6275 	movw	r2, #1653	; 0x675
 800aaa0:	498d      	ldr	r1, [pc, #564]	; (800acd8 <lwip_netconn_do_writemore+0x280>)
 800aaa2:	488b      	ldr	r0, [pc, #556]	; (800acd0 <lwip_netconn_do_writemore+0x278>)
 800aaa4:	f00b faea 	bl	801607c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d106      	bne.n	800aabe <lwip_netconn_do_writemore+0x66>
 800aab0:	4b85      	ldr	r3, [pc, #532]	; (800acc8 <lwip_netconn_do_writemore+0x270>)
 800aab2:	f240 6276 	movw	r2, #1654	; 0x676
 800aab6:	4989      	ldr	r1, [pc, #548]	; (800acdc <lwip_netconn_do_writemore+0x284>)
 800aab8:	4885      	ldr	r0, [pc, #532]	; (800acd0 <lwip_netconn_do_writemore+0x278>)
 800aaba:	f00b fadf 	bl	801607c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	699a      	ldr	r2, [r3, #24]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6a1b      	ldr	r3, [r3, #32]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d306      	bcc.n	800aadc <lwip_netconn_do_writemore+0x84>
 800aace:	4b7e      	ldr	r3, [pc, #504]	; (800acc8 <lwip_netconn_do_writemore+0x270>)
 800aad0:	f240 6277 	movw	r2, #1655	; 0x677
 800aad4:	4982      	ldr	r1, [pc, #520]	; (800ace0 <lwip_netconn_do_writemore+0x288>)
 800aad6:	487e      	ldr	r0, [pc, #504]	; (800acd0 <lwip_netconn_do_writemore+0x278>)
 800aad8:	f00b fad0 	bl	801607c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	6a1b      	ldr	r3, [r3, #32]
 800aae0:	899b      	ldrh	r3, [r3, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d106      	bne.n	800aaf4 <lwip_netconn_do_writemore+0x9c>
 800aae6:	4b78      	ldr	r3, [pc, #480]	; (800acc8 <lwip_netconn_do_writemore+0x270>)
 800aae8:	f240 6279 	movw	r2, #1657	; 0x679
 800aaec:	497d      	ldr	r1, [pc, #500]	; (800ace4 <lwip_netconn_do_writemore+0x28c>)
 800aaee:	4878      	ldr	r0, [pc, #480]	; (800acd0 <lwip_netconn_do_writemore+0x278>)
 800aaf0:	f00b fac4 	bl	801607c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a1b      	ldr	r3, [r3, #32]
 800aaf8:	7f1b      	ldrb	r3, [r3, #28]
 800aafa:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	7f1b      	ldrb	r3, [r3, #28]
 800ab00:	f003 0302 	and.w	r3, r3, #2
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d104      	bne.n	800ab12 <lwip_netconn_do_writemore+0xba>
 800ab08:	7ebb      	ldrb	r3, [r7, #26]
 800ab0a:	f003 0304 	and.w	r3, r3, #4
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d001      	beq.n	800ab16 <lwip_netconn_do_writemore+0xbe>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e000      	b.n	800ab18 <lwip_netconn_do_writemore+0xc0>
 800ab16:	2300      	movs	r3, #0
 800ab18:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6a1b      	ldr	r3, [r3, #32]
 800ab1e:	689b      	ldr	r3, [r3, #8]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a1b      	ldr	r3, [r3, #32]
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	4413      	add	r3, r2
 800ab2a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6a1b      	ldr	r3, [r3, #32]
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	685a      	ldr	r2, [r3, #4]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6a1b      	ldr	r3, [r3, #32]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab44:	d307      	bcc.n	800ab56 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800ab46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab4a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800ab4c:	7ebb      	ldrb	r3, [r7, #26]
 800ab4e:	f043 0302 	orr.w	r3, r3, #2
 800ab52:	76bb      	strb	r3, [r7, #26]
 800ab54:	e001      	b.n	800ab5a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ab62:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800ab64:	89fa      	ldrh	r2, [r7, #14]
 800ab66:	8bbb      	ldrh	r3, [r7, #28]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d216      	bcs.n	800ab9a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800ab6c:	89fb      	ldrh	r3, [r7, #14]
 800ab6e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800ab70:	7e3b      	ldrb	r3, [r7, #24]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d00d      	beq.n	800ab92 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800ab76:	8bbb      	ldrh	r3, [r7, #28]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d10e      	bne.n	800ab9a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d102      	bne.n	800ab8c <lwip_netconn_do_writemore+0x134>
 800ab86:	f06f 0306 	mvn.w	r3, #6
 800ab8a:	e000      	b.n	800ab8e <lwip_netconn_do_writemore+0x136>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ab90:	e07d      	b.n	800ac8e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ab92:	7ebb      	ldrb	r3, [r7, #26]
 800ab94:	f043 0302 	orr.w	r3, r3, #2
 800ab98:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6a1b      	ldr	r3, [r3, #32]
 800ab9e:	691a      	ldr	r2, [r3, #16]
 800aba0:	8bbb      	ldrh	r3, [r7, #28]
 800aba2:	441a      	add	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6a1b      	ldr	r3, [r3, #32]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	429a      	cmp	r2, r3
 800abae:	d906      	bls.n	800abbe <lwip_netconn_do_writemore+0x166>
 800abb0:	4b45      	ldr	r3, [pc, #276]	; (800acc8 <lwip_netconn_do_writemore+0x270>)
 800abb2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800abb6:	494c      	ldr	r1, [pc, #304]	; (800ace8 <lwip_netconn_do_writemore+0x290>)
 800abb8:	4845      	ldr	r0, [pc, #276]	; (800acd0 <lwip_netconn_do_writemore+0x278>)
 800abba:	f00b fa5f 	bl	801607c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800abbe:	8bbb      	ldrh	r3, [r7, #28]
 800abc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d103      	bne.n	800abd0 <lwip_netconn_do_writemore+0x178>
 800abc8:	693b      	ldr	r3, [r7, #16]
 800abca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800abce:	d209      	bcs.n	800abe4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800abd4:	8bba      	ldrh	r2, [r7, #28]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d10b      	bne.n	800abf2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	899b      	ldrh	r3, [r3, #12]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d906      	bls.n	800abf2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800abe4:	2301      	movs	r3, #1
 800abe6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800abe8:	7ebb      	ldrb	r3, [r7, #26]
 800abea:	f043 0302 	orr.w	r3, r3, #2
 800abee:	76bb      	strb	r3, [r7, #26]
 800abf0:	e001      	b.n	800abf6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800abf2:	2300      	movs	r3, #0
 800abf4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6858      	ldr	r0, [r3, #4]
 800abfa:	7ebb      	ldrb	r3, [r7, #26]
 800abfc:	8bba      	ldrh	r2, [r7, #28]
 800abfe:	6979      	ldr	r1, [r7, #20]
 800ac00:	f008 fca2 	bl	8013548 <tcp_write>
 800ac04:	4603      	mov	r3, r0
 800ac06:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800ac08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d12c      	bne.n	800ac6a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6a1b      	ldr	r3, [r3, #32]
 800ac14:	6999      	ldr	r1, [r3, #24]
 800ac16:	8bba      	ldrh	r2, [r7, #28]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a1b      	ldr	r3, [r3, #32]
 800ac1c:	440a      	add	r2, r1
 800ac1e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	6a1b      	ldr	r3, [r3, #32]
 800ac24:	6919      	ldr	r1, [r3, #16]
 800ac26:	8bba      	ldrh	r2, [r7, #28]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
 800ac2c:	440a      	add	r2, r1
 800ac2e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6a1b      	ldr	r3, [r3, #32]
 800ac34:	691a      	ldr	r2, [r3, #16]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d113      	bne.n	800ac6a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	899a      	ldrh	r2, [r3, #12]
 800ac48:	3a01      	subs	r2, #1
 800ac4a:	b292      	uxth	r2, r2
 800ac4c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a1b      	ldr	r3, [r3, #32]
 800ac52:	899b      	ldrh	r3, [r3, #12]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d008      	beq.n	800ac6a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a1b      	ldr	r3, [r3, #32]
 800ac5c:	689a      	ldr	r2, [r3, #8]
 800ac5e:	3208      	adds	r2, #8
 800ac60:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6a1b      	ldr	r3, [r3, #32]
 800ac66:	2200      	movs	r2, #0
 800ac68:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800ac6a:	7e7b      	ldrb	r3, [r7, #25]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d004      	beq.n	800ac7a <lwip_netconn_do_writemore+0x222>
 800ac70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f43f af50 	beq.w	800ab1a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800ac7a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d004      	beq.n	800ac8c <lwip_netconn_do_writemore+0x234>
 800ac82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ac86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac8a:	d147      	bne.n	800ad1c <lwip_netconn_do_writemore+0x2c4>
err_mem:
 800ac8c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800ac8e:	7e3b      	ldrb	r3, [r7, #24]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d02b      	beq.n	800acec <lwip_netconn_do_writemore+0x294>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6a1b      	ldr	r3, [r3, #32]
 800ac98:	699a      	ldr	r2, [r3, #24]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	695b      	ldr	r3, [r3, #20]
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d223      	bcs.n	800acec <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d005      	beq.n	800acb8 <lwip_netconn_do_writemore+0x260>
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb0:	2200      	movs	r2, #0
 800acb2:	2103      	movs	r1, #3
 800acb4:	6878      	ldr	r0, [r7, #4]
 800acb6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	7f1b      	ldrb	r3, [r3, #28]
 800acbc:	f043 0310 	orr.w	r3, r3, #16
 800acc0:	b2da      	uxtb	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	771a      	strb	r2, [r3, #28]
 800acc6:	e029      	b.n	800ad1c <lwip_netconn_do_writemore+0x2c4>
 800acc8:	08018298 	.word	0x08018298
 800accc:	08018434 	.word	0x08018434
 800acd0:	08018320 	.word	0x08018320
 800acd4:	0801873c 	.word	0x0801873c
 800acd8:	08018444 	.word	0x08018444
 800acdc:	0801875c 	.word	0x0801875c
 800ace0:	08018774 	.word	0x08018774
 800ace4:	080187b4 	.word	0x080187b4
 800ace8:	080187dc 	.word	0x080187dc
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800acf4:	f640 3269 	movw	r2, #2921	; 0xb69
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d905      	bls.n	800ad08 <lwip_netconn_do_writemore+0x2b0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ad04:	2b04      	cmp	r3, #4
 800ad06:	d909      	bls.n	800ad1c <lwip_netconn_do_writemore+0x2c4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d005      	beq.n	800ad1c <lwip_netconn_do_writemore+0x2c4>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad14:	2200      	movs	r2, #0
 800ad16:	2103      	movs	r1, #3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ad1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d11d      	bne.n	800ad60 <lwip_netconn_do_writemore+0x308>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	6a1b      	ldr	r3, [r3, #32]
 800ad28:	699a      	ldr	r2, [r3, #24]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6a1b      	ldr	r3, [r3, #32]
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d002      	beq.n	800ad3a <lwip_netconn_do_writemore+0x2e2>
 800ad34:	7e3b      	ldrb	r3, [r7, #24]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d001      	beq.n	800ad3e <lwip_netconn_do_writemore+0x2e6>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	685b      	ldr	r3, [r3, #4]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f009 f9ea 	bl	801411c <tcp_output>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800ad4c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ad50:	f113 0f04 	cmn.w	r3, #4
 800ad54:	d12c      	bne.n	800adb0 <lwip_netconn_do_writemore+0x358>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ad56:	7b3b      	ldrb	r3, [r7, #12]
 800ad58:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	76fb      	strb	r3, [r7, #27]
 800ad5e:	e027      	b.n	800adb0 <lwip_netconn_do_writemore+0x358>
      }
    } else if (err == ERR_MEM) {
 800ad60:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad68:	d120      	bne.n	800adac <lwip_netconn_do_writemore+0x354>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	4618      	mov	r0, r3
 800ad70:	f009 f9d4 	bl	801411c <tcp_output>
 800ad74:	4603      	mov	r3, r0
 800ad76:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800ad78:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800ad7c:	f113 0f04 	cmn.w	r3, #4
 800ad80:	d104      	bne.n	800ad8c <lwip_netconn_do_writemore+0x334>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800ad82:	7b7b      	ldrb	r3, [r7, #13]
 800ad84:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ad86:	2301      	movs	r3, #1
 800ad88:	76fb      	strb	r3, [r7, #27]
 800ad8a:	e011      	b.n	800adb0 <lwip_netconn_do_writemore+0x358>
      } else if (dontblock) {
 800ad8c:	7e3b      	ldrb	r3, [r7, #24]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00e      	beq.n	800adb0 <lwip_netconn_do_writemore+0x358>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6a1b      	ldr	r3, [r3, #32]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d102      	bne.n	800ada2 <lwip_netconn_do_writemore+0x34a>
 800ad9c:	f06f 0306 	mvn.w	r3, #6
 800ada0:	e000      	b.n	800ada4 <lwip_netconn_do_writemore+0x34c>
 800ada2:	2300      	movs	r3, #0
 800ada4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ada6:	2301      	movs	r3, #1
 800ada8:	76fb      	strb	r3, [r7, #27]
 800adaa:	e001      	b.n	800adb0 <lwip_netconn_do_writemore+0x358>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800adac:	2301      	movs	r3, #1
 800adae:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800adb0:	7efb      	ldrb	r3, [r7, #27]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d015      	beq.n	800ade2 <lwip_netconn_do_writemore+0x38a>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a1b      	ldr	r3, [r3, #32]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	330c      	adds	r3, #12
 800adbe:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a1b      	ldr	r3, [r3, #32]
 800adc4:	7ffa      	ldrb	r2, [r7, #31]
 800adc6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2200      	movs	r2, #0
 800adcc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	2200      	movs	r2, #0
 800add2:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800add4:	78fb      	ldrb	r3, [r7, #3]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d006      	beq.n	800ade8 <lwip_netconn_do_writemore+0x390>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800adda:	68b8      	ldr	r0, [r7, #8]
 800addc:	f00a ffec 	bl	8015db8 <sys_sem_signal>
 800ade0:	e002      	b.n	800ade8 <lwip_netconn_do_writemore+0x390>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ade2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ade6:	e000      	b.n	800adea <lwip_netconn_do_writemore+0x392>
  }
#endif
  return ERR_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3720      	adds	r7, #32
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}
 800adf2:	bf00      	nop

0800adf4 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b084      	sub	sp, #16
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7fe fbcc 	bl	80095a2 <netconn_err>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800ae0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d166      	bne.n	800aee4 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae20:	2b10      	cmp	r3, #16
 800ae22:	d15d      	bne.n	800aee0 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	785b      	ldrb	r3, [r3, #1]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d002      	beq.n	800ae34 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800ae2e:	23fb      	movs	r3, #251	; 0xfb
 800ae30:	73fb      	strb	r3, [r7, #15]
 800ae32:	e057      	b.n	800aee4 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d04d      	beq.n	800aeda <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	2201      	movs	r2, #1
 800ae44:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	6a1b      	ldr	r3, [r3, #32]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d006      	beq.n	800ae5e <lwip_netconn_do_write+0x6a>
 800ae50:	4b28      	ldr	r3, [pc, #160]	; (800aef4 <lwip_netconn_do_write+0x100>)
 800ae52:	f240 7223 	movw	r2, #1827	; 0x723
 800ae56:	4928      	ldr	r1, [pc, #160]	; (800aef8 <lwip_netconn_do_write+0x104>)
 800ae58:	4828      	ldr	r0, [pc, #160]	; (800aefc <lwip_netconn_do_write+0x108>)
 800ae5a:	f00b f90f 	bl	801607c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	695b      	ldr	r3, [r3, #20]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d106      	bne.n	800ae74 <lwip_netconn_do_write+0x80>
 800ae66:	4b23      	ldr	r3, [pc, #140]	; (800aef4 <lwip_netconn_do_write+0x100>)
 800ae68:	f240 7224 	movw	r2, #1828	; 0x724
 800ae6c:	4924      	ldr	r1, [pc, #144]	; (800af00 <lwip_netconn_do_write+0x10c>)
 800ae6e:	4823      	ldr	r0, [pc, #140]	; (800aefc <lwip_netconn_do_write+0x108>)
 800ae70:	f00b f904 	bl	801607c <iprintf>
        msg->conn->current_msg = msg;
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	68ba      	ldr	r2, [r7, #8]
 800ae7a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	2100      	movs	r1, #0
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7ff fde8 	bl	800aa58 <lwip_netconn_do_writemore>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d02e      	beq.n	800aeec <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	785b      	ldrb	r3, [r3, #1]
 800ae94:	2b01      	cmp	r3, #1
 800ae96:	d006      	beq.n	800aea6 <lwip_netconn_do_write+0xb2>
 800ae98:	4b16      	ldr	r3, [pc, #88]	; (800aef4 <lwip_netconn_do_write+0x100>)
 800ae9a:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800ae9e:	4919      	ldr	r1, [pc, #100]	; (800af04 <lwip_netconn_do_write+0x110>)
 800aea0:	4816      	ldr	r0, [pc, #88]	; (800aefc <lwip_netconn_do_write+0x108>)
 800aea2:	f00b f8eb 	bl	801607c <iprintf>
          UNLOCK_TCPIP_CORE();
 800aea6:	4818      	ldr	r0, [pc, #96]	; (800af08 <lwip_netconn_do_write+0x114>)
 800aea8:	f00a fff5 	bl	8015e96 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	330c      	adds	r3, #12
 800aeb2:	2100      	movs	r1, #0
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f00a ff4e 	bl	8015d56 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800aeba:	4813      	ldr	r0, [pc, #76]	; (800af08 <lwip_netconn_do_write+0x114>)
 800aebc:	f00a ffdc 	bl	8015e78 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	785b      	ldrb	r3, [r3, #1]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d110      	bne.n	800aeec <lwip_netconn_do_write+0xf8>
 800aeca:	4b0a      	ldr	r3, [pc, #40]	; (800aef4 <lwip_netconn_do_write+0x100>)
 800aecc:	f240 722c 	movw	r2, #1836	; 0x72c
 800aed0:	490c      	ldr	r1, [pc, #48]	; (800af04 <lwip_netconn_do_write+0x110>)
 800aed2:	480a      	ldr	r0, [pc, #40]	; (800aefc <lwip_netconn_do_write+0x108>)
 800aed4:	f00b f8d2 	bl	801607c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800aed8:	e008      	b.n	800aeec <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800aeda:	23f5      	movs	r3, #245	; 0xf5
 800aedc:	73fb      	strb	r3, [r7, #15]
 800aede:	e001      	b.n	800aee4 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800aee0:	23fa      	movs	r3, #250	; 0xfa
 800aee2:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	7bfa      	ldrb	r2, [r7, #15]
 800aee8:	711a      	strb	r2, [r3, #4]
 800aeea:	e000      	b.n	800aeee <lwip_netconn_do_write+0xfa>
        return;
 800aeec:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	08018298 	.word	0x08018298
 800aef8:	08018680 	.word	0x08018680
 800aefc:	08018320 	.word	0x08018320
 800af00:	08018808 	.word	0x08018808
 800af04:	0801869c 	.word	0x0801869c
 800af08:	24006a24 	.word	0x24006a24

0800af0c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	785b      	ldrb	r3, [r3, #1]
 800af1e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d069      	beq.n	800affe <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	781b      	ldrb	r3, [r3, #0]
 800af30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800af34:	2b10      	cmp	r3, #16
 800af36:	d162      	bne.n	800affe <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800af3c:	2b03      	cmp	r3, #3
 800af3e:	d002      	beq.n	800af46 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800af40:	7afb      	ldrb	r3, [r7, #11]
 800af42:	2b02      	cmp	r3, #2
 800af44:	d05b      	beq.n	800affe <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800af46:	7afb      	ldrb	r3, [r7, #11]
 800af48:	2b03      	cmp	r3, #3
 800af4a:	d103      	bne.n	800af54 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	22f5      	movs	r2, #245	; 0xf5
 800af50:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800af52:	e059      	b.n	800b008 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800af54:	7afb      	ldrb	r3, [r7, #11]
 800af56:	2b01      	cmp	r3, #1
 800af58:	d103      	bne.n	800af62 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	22fb      	movs	r2, #251	; 0xfb
 800af5e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800af60:	e052      	b.n	800b008 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	7a1b      	ldrb	r3, [r3, #8]
 800af66:	f003 0301 	and.w	r3, r3, #1
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d004      	beq.n	800af78 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4618      	mov	r0, r3
 800af74:	f7ff f852 	bl	800a01c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	6a1b      	ldr	r3, [r3, #32]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d006      	beq.n	800af90 <lwip_netconn_do_close+0x84>
 800af82:	4b23      	ldr	r3, [pc, #140]	; (800b010 <lwip_netconn_do_close+0x104>)
 800af84:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800af88:	4922      	ldr	r1, [pc, #136]	; (800b014 <lwip_netconn_do_close+0x108>)
 800af8a:	4823      	ldr	r0, [pc, #140]	; (800b018 <lwip_netconn_do_close+0x10c>)
 800af8c:	f00b f876 	bl	801607c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	2204      	movs	r2, #4
 800af96:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2100      	movs	r1, #0
 800afa6:	4618      	mov	r0, r3
 800afa8:	f7ff f8b6 	bl	800a118 <lwip_netconn_do_close_internal>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d029      	beq.n	800b006 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	785b      	ldrb	r3, [r3, #1]
 800afb8:	2b04      	cmp	r3, #4
 800afba:	d006      	beq.n	800afca <lwip_netconn_do_close+0xbe>
 800afbc:	4b14      	ldr	r3, [pc, #80]	; (800b010 <lwip_netconn_do_close+0x104>)
 800afbe:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800afc2:	4916      	ldr	r1, [pc, #88]	; (800b01c <lwip_netconn_do_close+0x110>)
 800afc4:	4814      	ldr	r0, [pc, #80]	; (800b018 <lwip_netconn_do_close+0x10c>)
 800afc6:	f00b f859 	bl	801607c <iprintf>
        UNLOCK_TCPIP_CORE();
 800afca:	4815      	ldr	r0, [pc, #84]	; (800b020 <lwip_netconn_do_close+0x114>)
 800afcc:	f00a ff63 	bl	8015e96 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	330c      	adds	r3, #12
 800afd6:	2100      	movs	r1, #0
 800afd8:	4618      	mov	r0, r3
 800afda:	f00a febc 	bl	8015d56 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800afde:	4810      	ldr	r0, [pc, #64]	; (800b020 <lwip_netconn_do_close+0x114>)
 800afe0:	f00a ff4a 	bl	8015e78 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	785b      	ldrb	r3, [r3, #1]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <lwip_netconn_do_close+0xfa>
 800afee:	4b08      	ldr	r3, [pc, #32]	; (800b010 <lwip_netconn_do_close+0x104>)
 800aff0:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800aff4:	4909      	ldr	r1, [pc, #36]	; (800b01c <lwip_netconn_do_close+0x110>)
 800aff6:	4808      	ldr	r0, [pc, #32]	; (800b018 <lwip_netconn_do_close+0x10c>)
 800aff8:	f00b f840 	bl	801607c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800affc:	e003      	b.n	800b006 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	22f5      	movs	r2, #245	; 0xf5
 800b002:	711a      	strb	r2, [r3, #4]
 800b004:	e000      	b.n	800b008 <lwip_netconn_do_close+0xfc>
      return;
 800b006:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	08018298 	.word	0x08018298
 800b014:	08018680 	.word	0x08018680
 800b018:	08018320 	.word	0x08018320
 800b01c:	0801869c 	.word	0x0801869c
 800b020:	24006a24 	.word	0x24006a24

0800b024 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b082      	sub	sp, #8
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d013      	beq.n	800b05a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00b      	beq.n	800b052 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4618      	mov	r0, r3
 800b040:	f003 ffd8 	bl	800eff4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	605a      	str	r2, [r3, #4]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	685a      	ldr	r2, [r3, #4]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b052:	6879      	ldr	r1, [r7, #4]
 800b054:	2006      	movs	r0, #6
 800b056:	f003 f985 	bl	800e364 <memp_free>
  }
}
 800b05a:	bf00      	nop
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
	...

0800b064 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	60f8      	str	r0, [r7, #12]
 800b06c:	60b9      	str	r1, [r7, #8]
 800b06e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d108      	bne.n	800b088 <netbuf_data+0x24>
 800b076:	4b1b      	ldr	r3, [pc, #108]	; (800b0e4 <netbuf_data+0x80>)
 800b078:	22c6      	movs	r2, #198	; 0xc6
 800b07a:	491b      	ldr	r1, [pc, #108]	; (800b0e8 <netbuf_data+0x84>)
 800b07c:	481b      	ldr	r0, [pc, #108]	; (800b0ec <netbuf_data+0x88>)
 800b07e:	f00a fffd 	bl	801607c <iprintf>
 800b082:	f06f 030f 	mvn.w	r3, #15
 800b086:	e029      	b.n	800b0dc <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d108      	bne.n	800b0a0 <netbuf_data+0x3c>
 800b08e:	4b15      	ldr	r3, [pc, #84]	; (800b0e4 <netbuf_data+0x80>)
 800b090:	22c7      	movs	r2, #199	; 0xc7
 800b092:	4917      	ldr	r1, [pc, #92]	; (800b0f0 <netbuf_data+0x8c>)
 800b094:	4815      	ldr	r0, [pc, #84]	; (800b0ec <netbuf_data+0x88>)
 800b096:	f00a fff1 	bl	801607c <iprintf>
 800b09a:	f06f 030f 	mvn.w	r3, #15
 800b09e:	e01d      	b.n	800b0dc <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d108      	bne.n	800b0b8 <netbuf_data+0x54>
 800b0a6:	4b0f      	ldr	r3, [pc, #60]	; (800b0e4 <netbuf_data+0x80>)
 800b0a8:	22c8      	movs	r2, #200	; 0xc8
 800b0aa:	4912      	ldr	r1, [pc, #72]	; (800b0f4 <netbuf_data+0x90>)
 800b0ac:	480f      	ldr	r0, [pc, #60]	; (800b0ec <netbuf_data+0x88>)
 800b0ae:	f00a ffe5 	bl	801607c <iprintf>
 800b0b2:	f06f 030f 	mvn.w	r3, #15
 800b0b6:	e011      	b.n	800b0dc <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d102      	bne.n	800b0c6 <netbuf_data+0x62>
    return ERR_BUF;
 800b0c0:	f06f 0301 	mvn.w	r3, #1
 800b0c4:	e00a      	b.n	800b0dc <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	685b      	ldr	r3, [r3, #4]
 800b0ca:	685a      	ldr	r2, [r3, #4]
 800b0cc:	68bb      	ldr	r3, [r7, #8]
 800b0ce:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	685b      	ldr	r3, [r3, #4]
 800b0d4:	895a      	ldrh	r2, [r3, #10]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800b0da:	2300      	movs	r3, #0
}
 800b0dc:	4618      	mov	r0, r3
 800b0de:	3710      	adds	r7, #16
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}
 800b0e4:	08018834 	.word	0x08018834
 800b0e8:	0801897c 	.word	0x0801897c
 800b0ec:	080188c4 	.word	0x080188c4
 800b0f0:	08018998 	.word	0x08018998
 800b0f4:	080189b8 	.word	0x080189b8

0800b0f8 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b102:	f00a f8c3 	bl	801528c <sys_timeouts_sleeptime>
 800b106:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b10e:	d10b      	bne.n	800b128 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b110:	4813      	ldr	r0, [pc, #76]	; (800b160 <tcpip_timeouts_mbox_fetch+0x68>)
 800b112:	f00a fec0 	bl	8015e96 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b116:	2200      	movs	r2, #0
 800b118:	6839      	ldr	r1, [r7, #0]
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f00a fd7c 	bl	8015c18 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b120:	480f      	ldr	r0, [pc, #60]	; (800b160 <tcpip_timeouts_mbox_fetch+0x68>)
 800b122:	f00a fea9 	bl	8015e78 <sys_mutex_lock>
    return;
 800b126:	e018      	b.n	800b15a <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d102      	bne.n	800b134 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b12e:	f00a f873 	bl	8015218 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b132:	e7e6      	b.n	800b102 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b134:	480a      	ldr	r0, [pc, #40]	; (800b160 <tcpip_timeouts_mbox_fetch+0x68>)
 800b136:	f00a feae 	bl	8015e96 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f00a fd6a 	bl	8015c18 <sys_arch_mbox_fetch>
 800b144:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b146:	4806      	ldr	r0, [pc, #24]	; (800b160 <tcpip_timeouts_mbox_fetch+0x68>)
 800b148:	f00a fe96 	bl	8015e78 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b14c:	68bb      	ldr	r3, [r7, #8]
 800b14e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b152:	d102      	bne.n	800b15a <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b154:	f00a f860 	bl	8015218 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b158:	e7d3      	b.n	800b102 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	24006a24 	.word	0x24006a24

0800b164 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b16c:	4810      	ldr	r0, [pc, #64]	; (800b1b0 <tcpip_thread+0x4c>)
 800b16e:	f00a fe83 	bl	8015e78 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b172:	4b10      	ldr	r3, [pc, #64]	; (800b1b4 <tcpip_thread+0x50>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d005      	beq.n	800b186 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b17a:	4b0e      	ldr	r3, [pc, #56]	; (800b1b4 <tcpip_thread+0x50>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a0e      	ldr	r2, [pc, #56]	; (800b1b8 <tcpip_thread+0x54>)
 800b180:	6812      	ldr	r2, [r2, #0]
 800b182:	4610      	mov	r0, r2
 800b184:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b186:	f107 030c 	add.w	r3, r7, #12
 800b18a:	4619      	mov	r1, r3
 800b18c:	480b      	ldr	r0, [pc, #44]	; (800b1bc <tcpip_thread+0x58>)
 800b18e:	f7ff ffb3 	bl	800b0f8 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d106      	bne.n	800b1a6 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b198:	4b09      	ldr	r3, [pc, #36]	; (800b1c0 <tcpip_thread+0x5c>)
 800b19a:	2291      	movs	r2, #145	; 0x91
 800b19c:	4909      	ldr	r1, [pc, #36]	; (800b1c4 <tcpip_thread+0x60>)
 800b19e:	480a      	ldr	r0, [pc, #40]	; (800b1c8 <tcpip_thread+0x64>)
 800b1a0:	f00a ff6c 	bl	801607c <iprintf>
      continue;
 800b1a4:	e003      	b.n	800b1ae <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f000 f80f 	bl	800b1cc <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b1ae:	e7ea      	b.n	800b186 <tcpip_thread+0x22>
 800b1b0:	24006a24 	.word	0x24006a24
 800b1b4:	24006668 	.word	0x24006668
 800b1b8:	2400666c 	.word	0x2400666c
 800b1bc:	24006670 	.word	0x24006670
 800b1c0:	08018a0c 	.word	0x08018a0c
 800b1c4:	08018a80 	.word	0x08018a80
 800b1c8:	08018aa0 	.word	0x08018aa0

0800b1cc <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	781b      	ldrb	r3, [r3, #0]
 800b1d8:	2b02      	cmp	r3, #2
 800b1da:	d026      	beq.n	800b22a <tcpip_thread_handle_msg+0x5e>
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	dc2b      	bgt.n	800b238 <tcpip_thread_handle_msg+0x6c>
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d002      	beq.n	800b1ea <tcpip_thread_handle_msg+0x1e>
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d015      	beq.n	800b214 <tcpip_thread_handle_msg+0x48>
 800b1e8:	e026      	b.n	800b238 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	6850      	ldr	r0, [r2, #4]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	6892      	ldr	r2, [r2, #8]
 800b1f6:	4611      	mov	r1, r2
 800b1f8:	4798      	blx	r3
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d004      	beq.n	800b20a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	4618      	mov	r0, r3
 800b206:	f003 fef5 	bl	800eff4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b20a:	6879      	ldr	r1, [r7, #4]
 800b20c:	2009      	movs	r0, #9
 800b20e:	f003 f8a9 	bl	800e364 <memp_free>
      break;
 800b212:	e018      	b.n	800b246 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	6892      	ldr	r2, [r2, #8]
 800b21c:	4610      	mov	r0, r2
 800b21e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b220:	6879      	ldr	r1, [r7, #4]
 800b222:	2008      	movs	r0, #8
 800b224:	f003 f89e 	bl	800e364 <memp_free>
      break;
 800b228:	e00d      	b.n	800b246 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	6892      	ldr	r2, [r2, #8]
 800b232:	4610      	mov	r0, r2
 800b234:	4798      	blx	r3
      break;
 800b236:	e006      	b.n	800b246 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b238:	4b05      	ldr	r3, [pc, #20]	; (800b250 <tcpip_thread_handle_msg+0x84>)
 800b23a:	22cf      	movs	r2, #207	; 0xcf
 800b23c:	4905      	ldr	r1, [pc, #20]	; (800b254 <tcpip_thread_handle_msg+0x88>)
 800b23e:	4806      	ldr	r0, [pc, #24]	; (800b258 <tcpip_thread_handle_msg+0x8c>)
 800b240:	f00a ff1c 	bl	801607c <iprintf>
      break;
 800b244:	bf00      	nop
  }
}
 800b246:	bf00      	nop
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	08018a0c 	.word	0x08018a0c
 800b254:	08018a80 	.word	0x08018a80
 800b258:	08018aa0 	.word	0x08018aa0

0800b25c <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b086      	sub	sp, #24
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b268:	481a      	ldr	r0, [pc, #104]	; (800b2d4 <tcpip_inpkt+0x78>)
 800b26a:	f00a fd30 	bl	8015cce <sys_mbox_valid>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d105      	bne.n	800b280 <tcpip_inpkt+0x24>
 800b274:	4b18      	ldr	r3, [pc, #96]	; (800b2d8 <tcpip_inpkt+0x7c>)
 800b276:	22fc      	movs	r2, #252	; 0xfc
 800b278:	4918      	ldr	r1, [pc, #96]	; (800b2dc <tcpip_inpkt+0x80>)
 800b27a:	4819      	ldr	r0, [pc, #100]	; (800b2e0 <tcpip_inpkt+0x84>)
 800b27c:	f00a fefe 	bl	801607c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b280:	2009      	movs	r0, #9
 800b282:	f002 fff9 	bl	800e278 <memp_malloc>
 800b286:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d102      	bne.n	800b294 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b292:	e01a      	b.n	800b2ca <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	2200      	movs	r2, #0
 800b298:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b2a0:	697b      	ldr	r3, [r7, #20]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b2ac:	6979      	ldr	r1, [r7, #20]
 800b2ae:	4809      	ldr	r0, [pc, #36]	; (800b2d4 <tcpip_inpkt+0x78>)
 800b2b0:	f00a fc98 	bl	8015be4 <sys_mbox_trypost>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d006      	beq.n	800b2c8 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b2ba:	6979      	ldr	r1, [r7, #20]
 800b2bc:	2009      	movs	r0, #9
 800b2be:	f003 f851 	bl	800e364 <memp_free>
    return ERR_MEM;
 800b2c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b2c6:	e000      	b.n	800b2ca <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b2c8:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3718      	adds	r7, #24
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	24006670 	.word	0x24006670
 800b2d8:	08018a0c 	.word	0x08018a0c
 800b2dc:	08018ac8 	.word	0x08018ac8
 800b2e0:	08018aa0 	.word	0x08018aa0

0800b2e4 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b082      	sub	sp, #8
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
 800b2ec:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2f4:	f003 0318 	and.w	r3, r3, #24
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d006      	beq.n	800b30a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b2fc:	4a08      	ldr	r2, [pc, #32]	; (800b320 <tcpip_input+0x3c>)
 800b2fe:	6839      	ldr	r1, [r7, #0]
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f7ff ffab 	bl	800b25c <tcpip_inpkt>
 800b306:	4603      	mov	r3, r0
 800b308:	e005      	b.n	800b316 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b30a:	4a06      	ldr	r2, [pc, #24]	; (800b324 <tcpip_input+0x40>)
 800b30c:	6839      	ldr	r1, [r7, #0]
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7ff ffa4 	bl	800b25c <tcpip_inpkt>
 800b314:	4603      	mov	r3, r0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	080159d9 	.word	0x080159d9
 800b324:	0800c709 	.word	0x0800c709

0800b328 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b084      	sub	sp, #16
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	60f8      	str	r0, [r7, #12]
 800b330:	60b9      	str	r1, [r7, #8]
 800b332:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b334:	4806      	ldr	r0, [pc, #24]	; (800b350 <tcpip_send_msg_wait_sem+0x28>)
 800b336:	f00a fd9f 	bl	8015e78 <sys_mutex_lock>
  fn(apimsg);
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	68b8      	ldr	r0, [r7, #8]
 800b33e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b340:	4803      	ldr	r0, [pc, #12]	; (800b350 <tcpip_send_msg_wait_sem+0x28>)
 800b342:	f00a fda8 	bl	8015e96 <sys_mutex_unlock>
  return ERR_OK;
 800b346:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	24006a24 	.word	0x24006a24

0800b354 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b084      	sub	sp, #16
 800b358:	af02      	add	r7, sp, #8
 800b35a:	6078      	str	r0, [r7, #4]
 800b35c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800b35e:	f002 fae6 	bl	800d92e <lwip_init>

  tcpip_init_done = initfunc;
 800b362:	4a17      	ldr	r2, [pc, #92]	; (800b3c0 <tcpip_init+0x6c>)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800b368:	4a16      	ldr	r2, [pc, #88]	; (800b3c4 <tcpip_init+0x70>)
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800b36e:	2106      	movs	r1, #6
 800b370:	4815      	ldr	r0, [pc, #84]	; (800b3c8 <tcpip_init+0x74>)
 800b372:	f00a fc07 	bl	8015b84 <sys_mbox_new>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d006      	beq.n	800b38a <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800b37c:	4b13      	ldr	r3, [pc, #76]	; (800b3cc <tcpip_init+0x78>)
 800b37e:	f240 2261 	movw	r2, #609	; 0x261
 800b382:	4913      	ldr	r1, [pc, #76]	; (800b3d0 <tcpip_init+0x7c>)
 800b384:	4813      	ldr	r0, [pc, #76]	; (800b3d4 <tcpip_init+0x80>)
 800b386:	f00a fe79 	bl	801607c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800b38a:	4813      	ldr	r0, [pc, #76]	; (800b3d8 <tcpip_init+0x84>)
 800b38c:	f00a fd5a 	bl	8015e44 <sys_mutex_new>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d006      	beq.n	800b3a4 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800b396:	4b0d      	ldr	r3, [pc, #52]	; (800b3cc <tcpip_init+0x78>)
 800b398:	f240 2265 	movw	r2, #613	; 0x265
 800b39c:	490f      	ldr	r1, [pc, #60]	; (800b3dc <tcpip_init+0x88>)
 800b39e:	480d      	ldr	r0, [pc, #52]	; (800b3d4 <tcpip_init+0x80>)
 800b3a0:	f00a fe6c 	bl	801607c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800b3a4:	2302      	movs	r3, #2
 800b3a6:	9300      	str	r3, [sp, #0]
 800b3a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	490c      	ldr	r1, [pc, #48]	; (800b3e0 <tcpip_init+0x8c>)
 800b3b0:	480c      	ldr	r0, [pc, #48]	; (800b3e4 <tcpip_init+0x90>)
 800b3b2:	f00a fd7d 	bl	8015eb0 <sys_thread_new>
}
 800b3b6:	bf00      	nop
 800b3b8:	3708      	adds	r7, #8
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	24006668 	.word	0x24006668
 800b3c4:	2400666c 	.word	0x2400666c
 800b3c8:	24006670 	.word	0x24006670
 800b3cc:	08018a0c 	.word	0x08018a0c
 800b3d0:	08018ad8 	.word	0x08018ad8
 800b3d4:	08018aa0 	.word	0x08018aa0
 800b3d8:	24006a24 	.word	0x24006a24
 800b3dc:	08018afc 	.word	0x08018afc
 800b3e0:	0800b165 	.word	0x0800b165
 800b3e4:	08018b20 	.word	0x08018b20

0800b3e8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b3f0:	4915      	ldr	r1, [pc, #84]	; (800b448 <etharp_free_entry+0x60>)
 800b3f2:	687a      	ldr	r2, [r7, #4]
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	4413      	add	r3, r2
 800b3fa:	00db      	lsls	r3, r3, #3
 800b3fc:	440b      	add	r3, r1
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d013      	beq.n	800b42c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b404:	4910      	ldr	r1, [pc, #64]	; (800b448 <etharp_free_entry+0x60>)
 800b406:	687a      	ldr	r2, [r7, #4]
 800b408:	4613      	mov	r3, r2
 800b40a:	005b      	lsls	r3, r3, #1
 800b40c:	4413      	add	r3, r2
 800b40e:	00db      	lsls	r3, r3, #3
 800b410:	440b      	add	r3, r1
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4618      	mov	r0, r3
 800b416:	f003 fded 	bl	800eff4 <pbuf_free>
    arp_table[i].q = NULL;
 800b41a:	490b      	ldr	r1, [pc, #44]	; (800b448 <etharp_free_entry+0x60>)
 800b41c:	687a      	ldr	r2, [r7, #4]
 800b41e:	4613      	mov	r3, r2
 800b420:	005b      	lsls	r3, r3, #1
 800b422:	4413      	add	r3, r2
 800b424:	00db      	lsls	r3, r3, #3
 800b426:	440b      	add	r3, r1
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b42c:	4906      	ldr	r1, [pc, #24]	; (800b448 <etharp_free_entry+0x60>)
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	4613      	mov	r3, r2
 800b432:	005b      	lsls	r3, r3, #1
 800b434:	4413      	add	r3, r2
 800b436:	00db      	lsls	r3, r3, #3
 800b438:	440b      	add	r3, r1
 800b43a:	3314      	adds	r3, #20
 800b43c:	2200      	movs	r2, #0
 800b43e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b440:	bf00      	nop
 800b442:	3708      	adds	r7, #8
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	24006674 	.word	0x24006674

0800b44c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b452:	2300      	movs	r3, #0
 800b454:	607b      	str	r3, [r7, #4]
 800b456:	e096      	b.n	800b586 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b458:	494f      	ldr	r1, [pc, #316]	; (800b598 <etharp_tmr+0x14c>)
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	4613      	mov	r3, r2
 800b45e:	005b      	lsls	r3, r3, #1
 800b460:	4413      	add	r3, r2
 800b462:	00db      	lsls	r3, r3, #3
 800b464:	440b      	add	r3, r1
 800b466:	3314      	adds	r3, #20
 800b468:	781b      	ldrb	r3, [r3, #0]
 800b46a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800b46c:	78fb      	ldrb	r3, [r7, #3]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	f000 8086 	beq.w	800b580 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800b474:	4948      	ldr	r1, [pc, #288]	; (800b598 <etharp_tmr+0x14c>)
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	4613      	mov	r3, r2
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	4413      	add	r3, r2
 800b47e:	00db      	lsls	r3, r3, #3
 800b480:	440b      	add	r3, r1
 800b482:	3312      	adds	r3, #18
 800b484:	881b      	ldrh	r3, [r3, #0]
 800b486:	3301      	adds	r3, #1
 800b488:	b298      	uxth	r0, r3
 800b48a:	4943      	ldr	r1, [pc, #268]	; (800b598 <etharp_tmr+0x14c>)
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	4613      	mov	r3, r2
 800b490:	005b      	lsls	r3, r3, #1
 800b492:	4413      	add	r3, r2
 800b494:	00db      	lsls	r3, r3, #3
 800b496:	440b      	add	r3, r1
 800b498:	3312      	adds	r3, #18
 800b49a:	4602      	mov	r2, r0
 800b49c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b49e:	493e      	ldr	r1, [pc, #248]	; (800b598 <etharp_tmr+0x14c>)
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	4413      	add	r3, r2
 800b4a8:	00db      	lsls	r3, r3, #3
 800b4aa:	440b      	add	r3, r1
 800b4ac:	3312      	adds	r3, #18
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800b4b4:	d215      	bcs.n	800b4e2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b4b6:	4938      	ldr	r1, [pc, #224]	; (800b598 <etharp_tmr+0x14c>)
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	4613      	mov	r3, r2
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	4413      	add	r3, r2
 800b4c0:	00db      	lsls	r3, r3, #3
 800b4c2:	440b      	add	r3, r1
 800b4c4:	3314      	adds	r3, #20
 800b4c6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d10e      	bne.n	800b4ea <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b4cc:	4932      	ldr	r1, [pc, #200]	; (800b598 <etharp_tmr+0x14c>)
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	4613      	mov	r3, r2
 800b4d2:	005b      	lsls	r3, r3, #1
 800b4d4:	4413      	add	r3, r2
 800b4d6:	00db      	lsls	r3, r3, #3
 800b4d8:	440b      	add	r3, r1
 800b4da:	3312      	adds	r3, #18
 800b4dc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b4de:	2b04      	cmp	r3, #4
 800b4e0:	d903      	bls.n	800b4ea <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f7ff ff80 	bl	800b3e8 <etharp_free_entry>
 800b4e8:	e04a      	b.n	800b580 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b4ea:	492b      	ldr	r1, [pc, #172]	; (800b598 <etharp_tmr+0x14c>)
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	4613      	mov	r3, r2
 800b4f0:	005b      	lsls	r3, r3, #1
 800b4f2:	4413      	add	r3, r2
 800b4f4:	00db      	lsls	r3, r3, #3
 800b4f6:	440b      	add	r3, r1
 800b4f8:	3314      	adds	r3, #20
 800b4fa:	781b      	ldrb	r3, [r3, #0]
 800b4fc:	2b03      	cmp	r3, #3
 800b4fe:	d10a      	bne.n	800b516 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b500:	4925      	ldr	r1, [pc, #148]	; (800b598 <etharp_tmr+0x14c>)
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	4613      	mov	r3, r2
 800b506:	005b      	lsls	r3, r3, #1
 800b508:	4413      	add	r3, r2
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	440b      	add	r3, r1
 800b50e:	3314      	adds	r3, #20
 800b510:	2204      	movs	r2, #4
 800b512:	701a      	strb	r2, [r3, #0]
 800b514:	e034      	b.n	800b580 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b516:	4920      	ldr	r1, [pc, #128]	; (800b598 <etharp_tmr+0x14c>)
 800b518:	687a      	ldr	r2, [r7, #4]
 800b51a:	4613      	mov	r3, r2
 800b51c:	005b      	lsls	r3, r3, #1
 800b51e:	4413      	add	r3, r2
 800b520:	00db      	lsls	r3, r3, #3
 800b522:	440b      	add	r3, r1
 800b524:	3314      	adds	r3, #20
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	2b04      	cmp	r3, #4
 800b52a:	d10a      	bne.n	800b542 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b52c:	491a      	ldr	r1, [pc, #104]	; (800b598 <etharp_tmr+0x14c>)
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	4613      	mov	r3, r2
 800b532:	005b      	lsls	r3, r3, #1
 800b534:	4413      	add	r3, r2
 800b536:	00db      	lsls	r3, r3, #3
 800b538:	440b      	add	r3, r1
 800b53a:	3314      	adds	r3, #20
 800b53c:	2202      	movs	r2, #2
 800b53e:	701a      	strb	r2, [r3, #0]
 800b540:	e01e      	b.n	800b580 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b542:	4915      	ldr	r1, [pc, #84]	; (800b598 <etharp_tmr+0x14c>)
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	4613      	mov	r3, r2
 800b548:	005b      	lsls	r3, r3, #1
 800b54a:	4413      	add	r3, r2
 800b54c:	00db      	lsls	r3, r3, #3
 800b54e:	440b      	add	r3, r1
 800b550:	3314      	adds	r3, #20
 800b552:	781b      	ldrb	r3, [r3, #0]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d113      	bne.n	800b580 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b558:	490f      	ldr	r1, [pc, #60]	; (800b598 <etharp_tmr+0x14c>)
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	4613      	mov	r3, r2
 800b55e:	005b      	lsls	r3, r3, #1
 800b560:	4413      	add	r3, r2
 800b562:	00db      	lsls	r3, r3, #3
 800b564:	440b      	add	r3, r1
 800b566:	3308      	adds	r3, #8
 800b568:	6818      	ldr	r0, [r3, #0]
 800b56a:	687a      	ldr	r2, [r7, #4]
 800b56c:	4613      	mov	r3, r2
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	4413      	add	r3, r2
 800b572:	00db      	lsls	r3, r3, #3
 800b574:	4a08      	ldr	r2, [pc, #32]	; (800b598 <etharp_tmr+0x14c>)
 800b576:	4413      	add	r3, r2
 800b578:	3304      	adds	r3, #4
 800b57a:	4619      	mov	r1, r3
 800b57c:	f000 fe6e 	bl	800c25c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	3301      	adds	r3, #1
 800b584:	607b      	str	r3, [r7, #4]
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	2b09      	cmp	r3, #9
 800b58a:	f77f af65 	ble.w	800b458 <etharp_tmr+0xc>
      }
    }
  }
}
 800b58e:	bf00      	nop
 800b590:	bf00      	nop
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}
 800b598:	24006674 	.word	0x24006674

0800b59c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b08a      	sub	sp, #40	; 0x28
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	60f8      	str	r0, [r7, #12]
 800b5a4:	460b      	mov	r3, r1
 800b5a6:	607a      	str	r2, [r7, #4]
 800b5a8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b5aa:	230a      	movs	r3, #10
 800b5ac:	84fb      	strh	r3, [r7, #38]	; 0x26
 800b5ae:	230a      	movs	r3, #10
 800b5b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800b5b2:	230a      	movs	r3, #10
 800b5b4:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800b5ba:	230a      	movs	r3, #10
 800b5bc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	83bb      	strh	r3, [r7, #28]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	837b      	strh	r3, [r7, #26]
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	843b      	strh	r3, [r7, #32]
 800b5ce:	e0ae      	b.n	800b72e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800b5d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5d4:	49a6      	ldr	r1, [pc, #664]	; (800b870 <etharp_find_entry+0x2d4>)
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	4413      	add	r3, r2
 800b5dc:	00db      	lsls	r3, r3, #3
 800b5de:	440b      	add	r3, r1
 800b5e0:	3314      	adds	r3, #20
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b5e6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b5ea:	2b0a      	cmp	r3, #10
 800b5ec:	d105      	bne.n	800b5fa <etharp_find_entry+0x5e>
 800b5ee:	7dfb      	ldrb	r3, [r7, #23]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d102      	bne.n	800b5fa <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800b5f4:	8c3b      	ldrh	r3, [r7, #32]
 800b5f6:	847b      	strh	r3, [r7, #34]	; 0x22
 800b5f8:	e095      	b.n	800b726 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b5fa:	7dfb      	ldrb	r3, [r7, #23]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f000 8092 	beq.w	800b726 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b602:	7dfb      	ldrb	r3, [r7, #23]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d009      	beq.n	800b61c <etharp_find_entry+0x80>
 800b608:	7dfb      	ldrb	r3, [r7, #23]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d806      	bhi.n	800b61c <etharp_find_entry+0x80>
 800b60e:	4b99      	ldr	r3, [pc, #612]	; (800b874 <etharp_find_entry+0x2d8>)
 800b610:	f240 1223 	movw	r2, #291	; 0x123
 800b614:	4998      	ldr	r1, [pc, #608]	; (800b878 <etharp_find_entry+0x2dc>)
 800b616:	4899      	ldr	r0, [pc, #612]	; (800b87c <etharp_find_entry+0x2e0>)
 800b618:	f00a fd30 	bl	801607c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d020      	beq.n	800b664 <etharp_find_entry+0xc8>
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	6819      	ldr	r1, [r3, #0]
 800b626:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b62a:	4891      	ldr	r0, [pc, #580]	; (800b870 <etharp_find_entry+0x2d4>)
 800b62c:	4613      	mov	r3, r2
 800b62e:	005b      	lsls	r3, r3, #1
 800b630:	4413      	add	r3, r2
 800b632:	00db      	lsls	r3, r3, #3
 800b634:	4403      	add	r3, r0
 800b636:	3304      	adds	r3, #4
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4299      	cmp	r1, r3
 800b63c:	d112      	bne.n	800b664 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00c      	beq.n	800b65e <etharp_find_entry+0xc2>
 800b644:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b648:	4989      	ldr	r1, [pc, #548]	; (800b870 <etharp_find_entry+0x2d4>)
 800b64a:	4613      	mov	r3, r2
 800b64c:	005b      	lsls	r3, r3, #1
 800b64e:	4413      	add	r3, r2
 800b650:	00db      	lsls	r3, r3, #3
 800b652:	440b      	add	r3, r1
 800b654:	3308      	adds	r3, #8
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	687a      	ldr	r2, [r7, #4]
 800b65a:	429a      	cmp	r2, r3
 800b65c:	d102      	bne.n	800b664 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b65e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b662:	e100      	b.n	800b866 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b664:	7dfb      	ldrb	r3, [r7, #23]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d140      	bne.n	800b6ec <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b66a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b66e:	4980      	ldr	r1, [pc, #512]	; (800b870 <etharp_find_entry+0x2d4>)
 800b670:	4613      	mov	r3, r2
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	4413      	add	r3, r2
 800b676:	00db      	lsls	r3, r3, #3
 800b678:	440b      	add	r3, r1
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d01a      	beq.n	800b6b6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800b680:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b684:	497a      	ldr	r1, [pc, #488]	; (800b870 <etharp_find_entry+0x2d4>)
 800b686:	4613      	mov	r3, r2
 800b688:	005b      	lsls	r3, r3, #1
 800b68a:	4413      	add	r3, r2
 800b68c:	00db      	lsls	r3, r3, #3
 800b68e:	440b      	add	r3, r1
 800b690:	3312      	adds	r3, #18
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	8bba      	ldrh	r2, [r7, #28]
 800b696:	429a      	cmp	r2, r3
 800b698:	d845      	bhi.n	800b726 <etharp_find_entry+0x18a>
            old_queue = i;
 800b69a:	8c3b      	ldrh	r3, [r7, #32]
 800b69c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800b69e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b6a2:	4973      	ldr	r1, [pc, #460]	; (800b870 <etharp_find_entry+0x2d4>)
 800b6a4:	4613      	mov	r3, r2
 800b6a6:	005b      	lsls	r3, r3, #1
 800b6a8:	4413      	add	r3, r2
 800b6aa:	00db      	lsls	r3, r3, #3
 800b6ac:	440b      	add	r3, r1
 800b6ae:	3312      	adds	r3, #18
 800b6b0:	881b      	ldrh	r3, [r3, #0]
 800b6b2:	83bb      	strh	r3, [r7, #28]
 800b6b4:	e037      	b.n	800b726 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b6b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b6ba:	496d      	ldr	r1, [pc, #436]	; (800b870 <etharp_find_entry+0x2d4>)
 800b6bc:	4613      	mov	r3, r2
 800b6be:	005b      	lsls	r3, r3, #1
 800b6c0:	4413      	add	r3, r2
 800b6c2:	00db      	lsls	r3, r3, #3
 800b6c4:	440b      	add	r3, r1
 800b6c6:	3312      	adds	r3, #18
 800b6c8:	881b      	ldrh	r3, [r3, #0]
 800b6ca:	8b7a      	ldrh	r2, [r7, #26]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d82a      	bhi.n	800b726 <etharp_find_entry+0x18a>
            old_pending = i;
 800b6d0:	8c3b      	ldrh	r3, [r7, #32]
 800b6d2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800b6d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b6d8:	4965      	ldr	r1, [pc, #404]	; (800b870 <etharp_find_entry+0x2d4>)
 800b6da:	4613      	mov	r3, r2
 800b6dc:	005b      	lsls	r3, r3, #1
 800b6de:	4413      	add	r3, r2
 800b6e0:	00db      	lsls	r3, r3, #3
 800b6e2:	440b      	add	r3, r1
 800b6e4:	3312      	adds	r3, #18
 800b6e6:	881b      	ldrh	r3, [r3, #0]
 800b6e8:	837b      	strh	r3, [r7, #26]
 800b6ea:	e01c      	b.n	800b726 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b6ec:	7dfb      	ldrb	r3, [r7, #23]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d919      	bls.n	800b726 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b6f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b6f6:	495e      	ldr	r1, [pc, #376]	; (800b870 <etharp_find_entry+0x2d4>)
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	005b      	lsls	r3, r3, #1
 800b6fc:	4413      	add	r3, r2
 800b6fe:	00db      	lsls	r3, r3, #3
 800b700:	440b      	add	r3, r1
 800b702:	3312      	adds	r3, #18
 800b704:	881b      	ldrh	r3, [r3, #0]
 800b706:	8b3a      	ldrh	r2, [r7, #24]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d80c      	bhi.n	800b726 <etharp_find_entry+0x18a>
            old_stable = i;
 800b70c:	8c3b      	ldrh	r3, [r7, #32]
 800b70e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800b710:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b714:	4956      	ldr	r1, [pc, #344]	; (800b870 <etharp_find_entry+0x2d4>)
 800b716:	4613      	mov	r3, r2
 800b718:	005b      	lsls	r3, r3, #1
 800b71a:	4413      	add	r3, r2
 800b71c:	00db      	lsls	r3, r3, #3
 800b71e:	440b      	add	r3, r1
 800b720:	3312      	adds	r3, #18
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b726:	8c3b      	ldrh	r3, [r7, #32]
 800b728:	3301      	adds	r3, #1
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	843b      	strh	r3, [r7, #32]
 800b72e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b732:	2b09      	cmp	r3, #9
 800b734:	f77f af4c 	ble.w	800b5d0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b738:	7afb      	ldrb	r3, [r7, #11]
 800b73a:	f003 0302 	and.w	r3, r3, #2
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d108      	bne.n	800b754 <etharp_find_entry+0x1b8>
 800b742:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b746:	2b0a      	cmp	r3, #10
 800b748:	d107      	bne.n	800b75a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b74a:	7afb      	ldrb	r3, [r7, #11]
 800b74c:	f003 0301 	and.w	r3, r3, #1
 800b750:	2b00      	cmp	r3, #0
 800b752:	d102      	bne.n	800b75a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800b754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b758:	e085      	b.n	800b866 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b75a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800b75e:	2b09      	cmp	r3, #9
 800b760:	dc02      	bgt.n	800b768 <etharp_find_entry+0x1cc>
    i = empty;
 800b762:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b764:	843b      	strh	r3, [r7, #32]
 800b766:	e039      	b.n	800b7dc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b768:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800b76c:	2b09      	cmp	r3, #9
 800b76e:	dc14      	bgt.n	800b79a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800b770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b772:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b774:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b778:	493d      	ldr	r1, [pc, #244]	; (800b870 <etharp_find_entry+0x2d4>)
 800b77a:	4613      	mov	r3, r2
 800b77c:	005b      	lsls	r3, r3, #1
 800b77e:	4413      	add	r3, r2
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	440b      	add	r3, r1
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d018      	beq.n	800b7bc <etharp_find_entry+0x220>
 800b78a:	4b3a      	ldr	r3, [pc, #232]	; (800b874 <etharp_find_entry+0x2d8>)
 800b78c:	f240 126d 	movw	r2, #365	; 0x16d
 800b790:	493b      	ldr	r1, [pc, #236]	; (800b880 <etharp_find_entry+0x2e4>)
 800b792:	483a      	ldr	r0, [pc, #232]	; (800b87c <etharp_find_entry+0x2e0>)
 800b794:	f00a fc72 	bl	801607c <iprintf>
 800b798:	e010      	b.n	800b7bc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b79a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800b79e:	2b09      	cmp	r3, #9
 800b7a0:	dc02      	bgt.n	800b7a8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800b7a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b7a4:	843b      	strh	r3, [r7, #32]
 800b7a6:	e009      	b.n	800b7bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b7a8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b7ac:	2b09      	cmp	r3, #9
 800b7ae:	dc02      	bgt.n	800b7b6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b7b0:	8bfb      	ldrh	r3, [r7, #30]
 800b7b2:	843b      	strh	r3, [r7, #32]
 800b7b4:	e002      	b.n	800b7bc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b7b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7ba:	e054      	b.n	800b866 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b7bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b7c0:	2b09      	cmp	r3, #9
 800b7c2:	dd06      	ble.n	800b7d2 <etharp_find_entry+0x236>
 800b7c4:	4b2b      	ldr	r3, [pc, #172]	; (800b874 <etharp_find_entry+0x2d8>)
 800b7c6:	f240 127f 	movw	r2, #383	; 0x17f
 800b7ca:	492e      	ldr	r1, [pc, #184]	; (800b884 <etharp_find_entry+0x2e8>)
 800b7cc:	482b      	ldr	r0, [pc, #172]	; (800b87c <etharp_find_entry+0x2e0>)
 800b7ce:	f00a fc55 	bl	801607c <iprintf>
    etharp_free_entry(i);
 800b7d2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7ff fe06 	bl	800b3e8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b7dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b7e0:	2b09      	cmp	r3, #9
 800b7e2:	dd06      	ble.n	800b7f2 <etharp_find_entry+0x256>
 800b7e4:	4b23      	ldr	r3, [pc, #140]	; (800b874 <etharp_find_entry+0x2d8>)
 800b7e6:	f240 1283 	movw	r2, #387	; 0x183
 800b7ea:	4926      	ldr	r1, [pc, #152]	; (800b884 <etharp_find_entry+0x2e8>)
 800b7ec:	4823      	ldr	r0, [pc, #140]	; (800b87c <etharp_find_entry+0x2e0>)
 800b7ee:	f00a fc45 	bl	801607c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b7f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b7f6:	491e      	ldr	r1, [pc, #120]	; (800b870 <etharp_find_entry+0x2d4>)
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	005b      	lsls	r3, r3, #1
 800b7fc:	4413      	add	r3, r2
 800b7fe:	00db      	lsls	r3, r3, #3
 800b800:	440b      	add	r3, r1
 800b802:	3314      	adds	r3, #20
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d006      	beq.n	800b818 <etharp_find_entry+0x27c>
 800b80a:	4b1a      	ldr	r3, [pc, #104]	; (800b874 <etharp_find_entry+0x2d8>)
 800b80c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800b810:	491d      	ldr	r1, [pc, #116]	; (800b888 <etharp_find_entry+0x2ec>)
 800b812:	481a      	ldr	r0, [pc, #104]	; (800b87c <etharp_find_entry+0x2e0>)
 800b814:	f00a fc32 	bl	801607c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d00b      	beq.n	800b836 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b81e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6819      	ldr	r1, [r3, #0]
 800b826:	4812      	ldr	r0, [pc, #72]	; (800b870 <etharp_find_entry+0x2d4>)
 800b828:	4613      	mov	r3, r2
 800b82a:	005b      	lsls	r3, r3, #1
 800b82c:	4413      	add	r3, r2
 800b82e:	00db      	lsls	r3, r3, #3
 800b830:	4403      	add	r3, r0
 800b832:	3304      	adds	r3, #4
 800b834:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b836:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b83a:	490d      	ldr	r1, [pc, #52]	; (800b870 <etharp_find_entry+0x2d4>)
 800b83c:	4613      	mov	r3, r2
 800b83e:	005b      	lsls	r3, r3, #1
 800b840:	4413      	add	r3, r2
 800b842:	00db      	lsls	r3, r3, #3
 800b844:	440b      	add	r3, r1
 800b846:	3312      	adds	r3, #18
 800b848:	2200      	movs	r2, #0
 800b84a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b84c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b850:	4907      	ldr	r1, [pc, #28]	; (800b870 <etharp_find_entry+0x2d4>)
 800b852:	4613      	mov	r3, r2
 800b854:	005b      	lsls	r3, r3, #1
 800b856:	4413      	add	r3, r2
 800b858:	00db      	lsls	r3, r3, #3
 800b85a:	440b      	add	r3, r1
 800b85c:	3308      	adds	r3, #8
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b862:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b866:	4618      	mov	r0, r3
 800b868:	3728      	adds	r7, #40	; 0x28
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	24006674 	.word	0x24006674
 800b874:	08018b28 	.word	0x08018b28
 800b878:	08018ba4 	.word	0x08018ba4
 800b87c:	08018be4 	.word	0x08018be4
 800b880:	08018c0c 	.word	0x08018c0c
 800b884:	08018c24 	.word	0x08018c24
 800b888:	08018c38 	.word	0x08018c38

0800b88c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b088      	sub	sp, #32
 800b890:	af02      	add	r7, sp, #8
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
 800b898:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b8a0:	2b06      	cmp	r3, #6
 800b8a2:	d006      	beq.n	800b8b2 <etharp_update_arp_entry+0x26>
 800b8a4:	4b48      	ldr	r3, [pc, #288]	; (800b9c8 <etharp_update_arp_entry+0x13c>)
 800b8a6:	f240 12a9 	movw	r2, #425	; 0x1a9
 800b8aa:	4948      	ldr	r1, [pc, #288]	; (800b9cc <etharp_update_arp_entry+0x140>)
 800b8ac:	4848      	ldr	r0, [pc, #288]	; (800b9d0 <etharp_update_arp_entry+0x144>)
 800b8ae:	f00a fbe5 	bl	801607c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b8b2:	68bb      	ldr	r3, [r7, #8]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d012      	beq.n	800b8de <etharp_update_arp_entry+0x52>
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00e      	beq.n	800b8de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	68f9      	ldr	r1, [r7, #12]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f001 f91a 	bl	800cb00 <ip4_addr_isbroadcast_u32>
 800b8cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d105      	bne.n	800b8de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b8da:	2be0      	cmp	r3, #224	; 0xe0
 800b8dc:	d102      	bne.n	800b8e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b8de:	f06f 030f 	mvn.w	r3, #15
 800b8e2:	e06c      	b.n	800b9be <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b8e4:	78fb      	ldrb	r3, [r7, #3]
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	68b8      	ldr	r0, [r7, #8]
 800b8ec:	f7ff fe56 	bl	800b59c <etharp_find_entry>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b8f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	da02      	bge.n	800b902 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b8fc:	8afb      	ldrh	r3, [r7, #22]
 800b8fe:	b25b      	sxtb	r3, r3
 800b900:	e05d      	b.n	800b9be <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b902:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b906:	4933      	ldr	r1, [pc, #204]	; (800b9d4 <etharp_update_arp_entry+0x148>)
 800b908:	4613      	mov	r3, r2
 800b90a:	005b      	lsls	r3, r3, #1
 800b90c:	4413      	add	r3, r2
 800b90e:	00db      	lsls	r3, r3, #3
 800b910:	440b      	add	r3, r1
 800b912:	3314      	adds	r3, #20
 800b914:	2202      	movs	r2, #2
 800b916:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b918:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b91c:	492d      	ldr	r1, [pc, #180]	; (800b9d4 <etharp_update_arp_entry+0x148>)
 800b91e:	4613      	mov	r3, r2
 800b920:	005b      	lsls	r3, r3, #1
 800b922:	4413      	add	r3, r2
 800b924:	00db      	lsls	r3, r3, #3
 800b926:	440b      	add	r3, r1
 800b928:	3308      	adds	r3, #8
 800b92a:	68fa      	ldr	r2, [r7, #12]
 800b92c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b92e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b932:	4613      	mov	r3, r2
 800b934:	005b      	lsls	r3, r3, #1
 800b936:	4413      	add	r3, r2
 800b938:	00db      	lsls	r3, r3, #3
 800b93a:	3308      	adds	r3, #8
 800b93c:	4a25      	ldr	r2, [pc, #148]	; (800b9d4 <etharp_update_arp_entry+0x148>)
 800b93e:	4413      	add	r3, r2
 800b940:	3304      	adds	r3, #4
 800b942:	2206      	movs	r2, #6
 800b944:	6879      	ldr	r1, [r7, #4]
 800b946:	4618      	mov	r0, r3
 800b948:	f00a fb68 	bl	801601c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b94c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b950:	4920      	ldr	r1, [pc, #128]	; (800b9d4 <etharp_update_arp_entry+0x148>)
 800b952:	4613      	mov	r3, r2
 800b954:	005b      	lsls	r3, r3, #1
 800b956:	4413      	add	r3, r2
 800b958:	00db      	lsls	r3, r3, #3
 800b95a:	440b      	add	r3, r1
 800b95c:	3312      	adds	r3, #18
 800b95e:	2200      	movs	r2, #0
 800b960:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b962:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b966:	491b      	ldr	r1, [pc, #108]	; (800b9d4 <etharp_update_arp_entry+0x148>)
 800b968:	4613      	mov	r3, r2
 800b96a:	005b      	lsls	r3, r3, #1
 800b96c:	4413      	add	r3, r2
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	440b      	add	r3, r1
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d021      	beq.n	800b9bc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b978:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b97c:	4915      	ldr	r1, [pc, #84]	; (800b9d4 <etharp_update_arp_entry+0x148>)
 800b97e:	4613      	mov	r3, r2
 800b980:	005b      	lsls	r3, r3, #1
 800b982:	4413      	add	r3, r2
 800b984:	00db      	lsls	r3, r3, #3
 800b986:	440b      	add	r3, r1
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b98c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b990:	4910      	ldr	r1, [pc, #64]	; (800b9d4 <etharp_update_arp_entry+0x148>)
 800b992:	4613      	mov	r3, r2
 800b994:	005b      	lsls	r3, r3, #1
 800b996:	4413      	add	r3, r2
 800b998:	00db      	lsls	r3, r3, #3
 800b99a:	440b      	add	r3, r1
 800b99c:	2200      	movs	r2, #0
 800b99e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800b9a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b9aa:	9300      	str	r3, [sp, #0]
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6939      	ldr	r1, [r7, #16]
 800b9b0:	68f8      	ldr	r0, [r7, #12]
 800b9b2:	f00a f89f 	bl	8015af4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b9b6:	6938      	ldr	r0, [r7, #16]
 800b9b8:	f003 fb1c 	bl	800eff4 <pbuf_free>
  }
  return ERR_OK;
 800b9bc:	2300      	movs	r3, #0
}
 800b9be:	4618      	mov	r0, r3
 800b9c0:	3718      	adds	r7, #24
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	bd80      	pop	{r7, pc}
 800b9c6:	bf00      	nop
 800b9c8:	08018b28 	.word	0x08018b28
 800b9cc:	08018c64 	.word	0x08018c64
 800b9d0:	08018be4 	.word	0x08018be4
 800b9d4:	24006674 	.word	0x24006674

0800b9d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b9d8:	b580      	push	{r7, lr}
 800b9da:	b084      	sub	sp, #16
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	60fb      	str	r3, [r7, #12]
 800b9e4:	e01e      	b.n	800ba24 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b9e6:	4913      	ldr	r1, [pc, #76]	; (800ba34 <etharp_cleanup_netif+0x5c>)
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	4613      	mov	r3, r2
 800b9ec:	005b      	lsls	r3, r3, #1
 800b9ee:	4413      	add	r3, r2
 800b9f0:	00db      	lsls	r3, r3, #3
 800b9f2:	440b      	add	r3, r1
 800b9f4:	3314      	adds	r3, #20
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b9fa:	7afb      	ldrb	r3, [r7, #11]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d00e      	beq.n	800ba1e <etharp_cleanup_netif+0x46>
 800ba00:	490c      	ldr	r1, [pc, #48]	; (800ba34 <etharp_cleanup_netif+0x5c>)
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	4613      	mov	r3, r2
 800ba06:	005b      	lsls	r3, r3, #1
 800ba08:	4413      	add	r3, r2
 800ba0a:	00db      	lsls	r3, r3, #3
 800ba0c:	440b      	add	r3, r1
 800ba0e:	3308      	adds	r3, #8
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d102      	bne.n	800ba1e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ba18:	68f8      	ldr	r0, [r7, #12]
 800ba1a:	f7ff fce5 	bl	800b3e8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	3301      	adds	r3, #1
 800ba22:	60fb      	str	r3, [r7, #12]
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2b09      	cmp	r3, #9
 800ba28:	dddd      	ble.n	800b9e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ba2a:	bf00      	nop
 800ba2c:	bf00      	nop
 800ba2e:	3710      	adds	r7, #16
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	24006674 	.word	0x24006674

0800ba38 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ba38:	b5b0      	push	{r4, r5, r7, lr}
 800ba3a:	b08a      	sub	sp, #40	; 0x28
 800ba3c:	af04      	add	r7, sp, #16
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d107      	bne.n	800ba58 <etharp_input+0x20>
 800ba48:	4b3d      	ldr	r3, [pc, #244]	; (800bb40 <etharp_input+0x108>)
 800ba4a:	f240 228a 	movw	r2, #650	; 0x28a
 800ba4e:	493d      	ldr	r1, [pc, #244]	; (800bb44 <etharp_input+0x10c>)
 800ba50:	483d      	ldr	r0, [pc, #244]	; (800bb48 <etharp_input+0x110>)
 800ba52:	f00a fb13 	bl	801607c <iprintf>
 800ba56:	e06f      	b.n	800bb38 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	881b      	ldrh	r3, [r3, #0]
 800ba62:	b29b      	uxth	r3, r3
 800ba64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba68:	d10c      	bne.n	800ba84 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ba6e:	2b06      	cmp	r3, #6
 800ba70:	d108      	bne.n	800ba84 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ba76:	2b04      	cmp	r3, #4
 800ba78:	d104      	bne.n	800ba84 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ba7a:	693b      	ldr	r3, [r7, #16]
 800ba7c:	885b      	ldrh	r3, [r3, #2]
 800ba7e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ba80:	2b08      	cmp	r3, #8
 800ba82:	d003      	beq.n	800ba8c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f003 fab5 	bl	800eff4 <pbuf_free>
    return;
 800ba8a:	e055      	b.n	800bb38 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	330e      	adds	r3, #14
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	3318      	adds	r3, #24
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	3304      	adds	r3, #4
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d102      	bne.n	800baac <etharp_input+0x74>
    for_us = 0;
 800baa6:	2300      	movs	r3, #0
 800baa8:	75fb      	strb	r3, [r7, #23]
 800baaa:	e009      	b.n	800bac0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	3304      	adds	r3, #4
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	bf0c      	ite	eq
 800bab8:	2301      	moveq	r3, #1
 800baba:	2300      	movne	r3, #0
 800babc:	b2db      	uxtb	r3, r3
 800babe:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	f103 0208 	add.w	r2, r3, #8
 800bac6:	7dfb      	ldrb	r3, [r7, #23]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d001      	beq.n	800bad0 <etharp_input+0x98>
 800bacc:	2301      	movs	r3, #1
 800bace:	e000      	b.n	800bad2 <etharp_input+0x9a>
 800bad0:	2302      	movs	r3, #2
 800bad2:	f107 010c 	add.w	r1, r7, #12
 800bad6:	6838      	ldr	r0, [r7, #0]
 800bad8:	f7ff fed8 	bl	800b88c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	88db      	ldrh	r3, [r3, #6]
 800bae0:	b29b      	uxth	r3, r3
 800bae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bae6:	d003      	beq.n	800baf0 <etharp_input+0xb8>
 800bae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800baec:	d01e      	beq.n	800bb2c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800baee:	e020      	b.n	800bb32 <etharp_input+0xfa>
      if (for_us) {
 800baf0:	7dfb      	ldrb	r3, [r7, #23]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d01c      	beq.n	800bb30 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	f103 0526 	add.w	r5, r3, #38	; 0x26
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	3208      	adds	r2, #8
        etharp_raw(netif,
 800bb10:	2102      	movs	r1, #2
 800bb12:	9103      	str	r1, [sp, #12]
 800bb14:	f107 010c 	add.w	r1, r7, #12
 800bb18:	9102      	str	r1, [sp, #8]
 800bb1a:	9201      	str	r2, [sp, #4]
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	462b      	mov	r3, r5
 800bb20:	4622      	mov	r2, r4
 800bb22:	4601      	mov	r1, r0
 800bb24:	6838      	ldr	r0, [r7, #0]
 800bb26:	f000 faeb 	bl	800c100 <etharp_raw>
      break;
 800bb2a:	e001      	b.n	800bb30 <etharp_input+0xf8>
      break;
 800bb2c:	bf00      	nop
 800bb2e:	e000      	b.n	800bb32 <etharp_input+0xfa>
      break;
 800bb30:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f003 fa5e 	bl	800eff4 <pbuf_free>
}
 800bb38:	3718      	adds	r7, #24
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bdb0      	pop	{r4, r5, r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	08018b28 	.word	0x08018b28
 800bb44:	08018cbc 	.word	0x08018cbc
 800bb48:	08018be4 	.word	0x08018be4

0800bb4c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af02      	add	r7, sp, #8
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	4613      	mov	r3, r2
 800bb58:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800bb5a:	79fa      	ldrb	r2, [r7, #7]
 800bb5c:	4944      	ldr	r1, [pc, #272]	; (800bc70 <etharp_output_to_arp_index+0x124>)
 800bb5e:	4613      	mov	r3, r2
 800bb60:	005b      	lsls	r3, r3, #1
 800bb62:	4413      	add	r3, r2
 800bb64:	00db      	lsls	r3, r3, #3
 800bb66:	440b      	add	r3, r1
 800bb68:	3314      	adds	r3, #20
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d806      	bhi.n	800bb7e <etharp_output_to_arp_index+0x32>
 800bb70:	4b40      	ldr	r3, [pc, #256]	; (800bc74 <etharp_output_to_arp_index+0x128>)
 800bb72:	f240 22ee 	movw	r2, #750	; 0x2ee
 800bb76:	4940      	ldr	r1, [pc, #256]	; (800bc78 <etharp_output_to_arp_index+0x12c>)
 800bb78:	4840      	ldr	r0, [pc, #256]	; (800bc7c <etharp_output_to_arp_index+0x130>)
 800bb7a:	f00a fa7f 	bl	801607c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800bb7e:	79fa      	ldrb	r2, [r7, #7]
 800bb80:	493b      	ldr	r1, [pc, #236]	; (800bc70 <etharp_output_to_arp_index+0x124>)
 800bb82:	4613      	mov	r3, r2
 800bb84:	005b      	lsls	r3, r3, #1
 800bb86:	4413      	add	r3, r2
 800bb88:	00db      	lsls	r3, r3, #3
 800bb8a:	440b      	add	r3, r1
 800bb8c:	3314      	adds	r3, #20
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d153      	bne.n	800bc3c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800bb94:	79fa      	ldrb	r2, [r7, #7]
 800bb96:	4936      	ldr	r1, [pc, #216]	; (800bc70 <etharp_output_to_arp_index+0x124>)
 800bb98:	4613      	mov	r3, r2
 800bb9a:	005b      	lsls	r3, r3, #1
 800bb9c:	4413      	add	r3, r2
 800bb9e:	00db      	lsls	r3, r3, #3
 800bba0:	440b      	add	r3, r1
 800bba2:	3312      	adds	r3, #18
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800bbaa:	d919      	bls.n	800bbe0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800bbac:	79fa      	ldrb	r2, [r7, #7]
 800bbae:	4613      	mov	r3, r2
 800bbb0:	005b      	lsls	r3, r3, #1
 800bbb2:	4413      	add	r3, r2
 800bbb4:	00db      	lsls	r3, r3, #3
 800bbb6:	4a2e      	ldr	r2, [pc, #184]	; (800bc70 <etharp_output_to_arp_index+0x124>)
 800bbb8:	4413      	add	r3, r2
 800bbba:	3304      	adds	r3, #4
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f000 fb4c 	bl	800c25c <etharp_request>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d138      	bne.n	800bc3c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bbca:	79fa      	ldrb	r2, [r7, #7]
 800bbcc:	4928      	ldr	r1, [pc, #160]	; (800bc70 <etharp_output_to_arp_index+0x124>)
 800bbce:	4613      	mov	r3, r2
 800bbd0:	005b      	lsls	r3, r3, #1
 800bbd2:	4413      	add	r3, r2
 800bbd4:	00db      	lsls	r3, r3, #3
 800bbd6:	440b      	add	r3, r1
 800bbd8:	3314      	adds	r3, #20
 800bbda:	2203      	movs	r2, #3
 800bbdc:	701a      	strb	r2, [r3, #0]
 800bbde:	e02d      	b.n	800bc3c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800bbe0:	79fa      	ldrb	r2, [r7, #7]
 800bbe2:	4923      	ldr	r1, [pc, #140]	; (800bc70 <etharp_output_to_arp_index+0x124>)
 800bbe4:	4613      	mov	r3, r2
 800bbe6:	005b      	lsls	r3, r3, #1
 800bbe8:	4413      	add	r3, r2
 800bbea:	00db      	lsls	r3, r3, #3
 800bbec:	440b      	add	r3, r1
 800bbee:	3312      	adds	r3, #18
 800bbf0:	881b      	ldrh	r3, [r3, #0]
 800bbf2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800bbf6:	d321      	bcc.n	800bc3c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800bbf8:	79fa      	ldrb	r2, [r7, #7]
 800bbfa:	4613      	mov	r3, r2
 800bbfc:	005b      	lsls	r3, r3, #1
 800bbfe:	4413      	add	r3, r2
 800bc00:	00db      	lsls	r3, r3, #3
 800bc02:	4a1b      	ldr	r2, [pc, #108]	; (800bc70 <etharp_output_to_arp_index+0x124>)
 800bc04:	4413      	add	r3, r2
 800bc06:	1d19      	adds	r1, r3, #4
 800bc08:	79fa      	ldrb	r2, [r7, #7]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	005b      	lsls	r3, r3, #1
 800bc0e:	4413      	add	r3, r2
 800bc10:	00db      	lsls	r3, r3, #3
 800bc12:	3308      	adds	r3, #8
 800bc14:	4a16      	ldr	r2, [pc, #88]	; (800bc70 <etharp_output_to_arp_index+0x124>)
 800bc16:	4413      	add	r3, r2
 800bc18:	3304      	adds	r3, #4
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	68f8      	ldr	r0, [r7, #12]
 800bc1e:	f000 fafb 	bl	800c218 <etharp_request_dst>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d109      	bne.n	800bc3c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800bc28:	79fa      	ldrb	r2, [r7, #7]
 800bc2a:	4911      	ldr	r1, [pc, #68]	; (800bc70 <etharp_output_to_arp_index+0x124>)
 800bc2c:	4613      	mov	r3, r2
 800bc2e:	005b      	lsls	r3, r3, #1
 800bc30:	4413      	add	r3, r2
 800bc32:	00db      	lsls	r3, r3, #3
 800bc34:	440b      	add	r3, r1
 800bc36:	3314      	adds	r3, #20
 800bc38:	2203      	movs	r2, #3
 800bc3a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800bc42:	79fa      	ldrb	r2, [r7, #7]
 800bc44:	4613      	mov	r3, r2
 800bc46:	005b      	lsls	r3, r3, #1
 800bc48:	4413      	add	r3, r2
 800bc4a:	00db      	lsls	r3, r3, #3
 800bc4c:	3308      	adds	r3, #8
 800bc4e:	4a08      	ldr	r2, [pc, #32]	; (800bc70 <etharp_output_to_arp_index+0x124>)
 800bc50:	4413      	add	r3, r2
 800bc52:	3304      	adds	r3, #4
 800bc54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc58:	9200      	str	r2, [sp, #0]
 800bc5a:	460a      	mov	r2, r1
 800bc5c:	68b9      	ldr	r1, [r7, #8]
 800bc5e:	68f8      	ldr	r0, [r7, #12]
 800bc60:	f009 ff48 	bl	8015af4 <ethernet_output>
 800bc64:	4603      	mov	r3, r0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	24006674 	.word	0x24006674
 800bc74:	08018b28 	.word	0x08018b28
 800bc78:	08018cdc 	.word	0x08018cdc
 800bc7c:	08018be4 	.word	0x08018be4

0800bc80 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b08a      	sub	sp, #40	; 0x28
 800bc84:	af02      	add	r7, sp, #8
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d106      	bne.n	800bca4 <etharp_output+0x24>
 800bc96:	4b73      	ldr	r3, [pc, #460]	; (800be64 <etharp_output+0x1e4>)
 800bc98:	f240 321e 	movw	r2, #798	; 0x31e
 800bc9c:	4972      	ldr	r1, [pc, #456]	; (800be68 <etharp_output+0x1e8>)
 800bc9e:	4873      	ldr	r0, [pc, #460]	; (800be6c <etharp_output+0x1ec>)
 800bca0:	f00a f9ec 	bl	801607c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d106      	bne.n	800bcb8 <etharp_output+0x38>
 800bcaa:	4b6e      	ldr	r3, [pc, #440]	; (800be64 <etharp_output+0x1e4>)
 800bcac:	f240 321f 	movw	r2, #799	; 0x31f
 800bcb0:	496f      	ldr	r1, [pc, #444]	; (800be70 <etharp_output+0x1f0>)
 800bcb2:	486e      	ldr	r0, [pc, #440]	; (800be6c <etharp_output+0x1ec>)
 800bcb4:	f00a f9e2 	bl	801607c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d106      	bne.n	800bccc <etharp_output+0x4c>
 800bcbe:	4b69      	ldr	r3, [pc, #420]	; (800be64 <etharp_output+0x1e4>)
 800bcc0:	f44f 7248 	mov.w	r2, #800	; 0x320
 800bcc4:	496b      	ldr	r1, [pc, #428]	; (800be74 <etharp_output+0x1f4>)
 800bcc6:	4869      	ldr	r0, [pc, #420]	; (800be6c <etharp_output+0x1ec>)
 800bcc8:	f00a f9d8 	bl	801607c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	68f9      	ldr	r1, [r7, #12]
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	f000 ff14 	bl	800cb00 <ip4_addr_isbroadcast_u32>
 800bcd8:	4603      	mov	r3, r0
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d002      	beq.n	800bce4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800bcde:	4b66      	ldr	r3, [pc, #408]	; (800be78 <etharp_output+0x1f8>)
 800bce0:	61fb      	str	r3, [r7, #28]
 800bce2:	e0af      	b.n	800be44 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bcec:	2be0      	cmp	r3, #224	; 0xe0
 800bcee:	d118      	bne.n	800bd22 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800bcf8:	235e      	movs	r3, #94	; 0x5e
 800bcfa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	781b      	ldrb	r3, [r3, #0]
 800bd02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd06:	b2db      	uxtb	r3, r3
 800bd08:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	3302      	adds	r3, #2
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	3303      	adds	r3, #3
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800bd1a:	f107 0310 	add.w	r3, r7, #16
 800bd1e:	61fb      	str	r3, [r7, #28]
 800bd20:	e090      	b.n	800be44 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	405a      	eors	r2, r3
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	3308      	adds	r3, #8
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4013      	ands	r3, r2
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d012      	beq.n	800bd60 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bd40:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d00b      	beq.n	800bd60 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	330c      	adds	r3, #12
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d003      	beq.n	800bd5a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	330c      	adds	r3, #12
 800bd56:	61bb      	str	r3, [r7, #24]
 800bd58:	e002      	b.n	800bd60 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800bd5a:	f06f 0303 	mvn.w	r3, #3
 800bd5e:	e07d      	b.n	800be5c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bd60:	4b46      	ldr	r3, [pc, #280]	; (800be7c <etharp_output+0x1fc>)
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	4619      	mov	r1, r3
 800bd66:	4a46      	ldr	r2, [pc, #280]	; (800be80 <etharp_output+0x200>)
 800bd68:	460b      	mov	r3, r1
 800bd6a:	005b      	lsls	r3, r3, #1
 800bd6c:	440b      	add	r3, r1
 800bd6e:	00db      	lsls	r3, r3, #3
 800bd70:	4413      	add	r3, r2
 800bd72:	3314      	adds	r3, #20
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	2b01      	cmp	r3, #1
 800bd78:	d925      	bls.n	800bdc6 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bd7a:	4b40      	ldr	r3, [pc, #256]	; (800be7c <etharp_output+0x1fc>)
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	4619      	mov	r1, r3
 800bd80:	4a3f      	ldr	r2, [pc, #252]	; (800be80 <etharp_output+0x200>)
 800bd82:	460b      	mov	r3, r1
 800bd84:	005b      	lsls	r3, r3, #1
 800bd86:	440b      	add	r3, r1
 800bd88:	00db      	lsls	r3, r3, #3
 800bd8a:	4413      	add	r3, r2
 800bd8c:	3308      	adds	r3, #8
 800bd8e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d117      	bne.n	800bdc6 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	4b38      	ldr	r3, [pc, #224]	; (800be7c <etharp_output+0x1fc>)
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	4618      	mov	r0, r3
 800bda0:	4937      	ldr	r1, [pc, #220]	; (800be80 <etharp_output+0x200>)
 800bda2:	4603      	mov	r3, r0
 800bda4:	005b      	lsls	r3, r3, #1
 800bda6:	4403      	add	r3, r0
 800bda8:	00db      	lsls	r3, r3, #3
 800bdaa:	440b      	add	r3, r1
 800bdac:	3304      	adds	r3, #4
 800bdae:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d108      	bne.n	800bdc6 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bdb4:	4b31      	ldr	r3, [pc, #196]	; (800be7c <etharp_output+0x1fc>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	68b9      	ldr	r1, [r7, #8]
 800bdbc:	68f8      	ldr	r0, [r7, #12]
 800bdbe:	f7ff fec5 	bl	800bb4c <etharp_output_to_arp_index>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	e04a      	b.n	800be5c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	75fb      	strb	r3, [r7, #23]
 800bdca:	e031      	b.n	800be30 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bdcc:	7dfa      	ldrb	r2, [r7, #23]
 800bdce:	492c      	ldr	r1, [pc, #176]	; (800be80 <etharp_output+0x200>)
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	005b      	lsls	r3, r3, #1
 800bdd4:	4413      	add	r3, r2
 800bdd6:	00db      	lsls	r3, r3, #3
 800bdd8:	440b      	add	r3, r1
 800bdda:	3314      	adds	r3, #20
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d923      	bls.n	800be2a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800bde2:	7dfa      	ldrb	r2, [r7, #23]
 800bde4:	4926      	ldr	r1, [pc, #152]	; (800be80 <etharp_output+0x200>)
 800bde6:	4613      	mov	r3, r2
 800bde8:	005b      	lsls	r3, r3, #1
 800bdea:	4413      	add	r3, r2
 800bdec:	00db      	lsls	r3, r3, #3
 800bdee:	440b      	add	r3, r1
 800bdf0:	3308      	adds	r3, #8
 800bdf2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d117      	bne.n	800be2a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bdfa:	69bb      	ldr	r3, [r7, #24]
 800bdfc:	6819      	ldr	r1, [r3, #0]
 800bdfe:	7dfa      	ldrb	r2, [r7, #23]
 800be00:	481f      	ldr	r0, [pc, #124]	; (800be80 <etharp_output+0x200>)
 800be02:	4613      	mov	r3, r2
 800be04:	005b      	lsls	r3, r3, #1
 800be06:	4413      	add	r3, r2
 800be08:	00db      	lsls	r3, r3, #3
 800be0a:	4403      	add	r3, r0
 800be0c:	3304      	adds	r3, #4
 800be0e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800be10:	4299      	cmp	r1, r3
 800be12:	d10a      	bne.n	800be2a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800be14:	4a19      	ldr	r2, [pc, #100]	; (800be7c <etharp_output+0x1fc>)
 800be16:	7dfb      	ldrb	r3, [r7, #23]
 800be18:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800be1a:	7dfb      	ldrb	r3, [r7, #23]
 800be1c:	461a      	mov	r2, r3
 800be1e:	68b9      	ldr	r1, [r7, #8]
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f7ff fe93 	bl	800bb4c <etharp_output_to_arp_index>
 800be26:	4603      	mov	r3, r0
 800be28:	e018      	b.n	800be5c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800be2a:	7dfb      	ldrb	r3, [r7, #23]
 800be2c:	3301      	adds	r3, #1
 800be2e:	75fb      	strb	r3, [r7, #23]
 800be30:	7dfb      	ldrb	r3, [r7, #23]
 800be32:	2b09      	cmp	r3, #9
 800be34:	d9ca      	bls.n	800bdcc <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	69b9      	ldr	r1, [r7, #24]
 800be3a:	68f8      	ldr	r0, [r7, #12]
 800be3c:	f000 f822 	bl	800be84 <etharp_query>
 800be40:	4603      	mov	r3, r0
 800be42:	e00b      	b.n	800be5c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800be4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800be4e:	9300      	str	r3, [sp, #0]
 800be50:	69fb      	ldr	r3, [r7, #28]
 800be52:	68b9      	ldr	r1, [r7, #8]
 800be54:	68f8      	ldr	r0, [r7, #12]
 800be56:	f009 fe4d 	bl	8015af4 <ethernet_output>
 800be5a:	4603      	mov	r3, r0
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3720      	adds	r7, #32
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	08018b28 	.word	0x08018b28
 800be68:	08018cbc 	.word	0x08018cbc
 800be6c:	08018be4 	.word	0x08018be4
 800be70:	08018d0c 	.word	0x08018d0c
 800be74:	08018cac 	.word	0x08018cac
 800be78:	0801b8dc 	.word	0x0801b8dc
 800be7c:	24006764 	.word	0x24006764
 800be80:	24006674 	.word	0x24006674

0800be84 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b08c      	sub	sp, #48	; 0x30
 800be88:	af02      	add	r7, sp, #8
 800be8a:	60f8      	str	r0, [r7, #12]
 800be8c:	60b9      	str	r1, [r7, #8]
 800be8e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	3326      	adds	r3, #38	; 0x26
 800be94:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800be96:	23ff      	movs	r3, #255	; 0xff
 800be98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800be9c:	2300      	movs	r3, #0
 800be9e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	68f9      	ldr	r1, [r7, #12]
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 fe2a 	bl	800cb00 <ip4_addr_isbroadcast_u32>
 800beac:	4603      	mov	r3, r0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d10c      	bne.n	800becc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800beba:	2be0      	cmp	r3, #224	; 0xe0
 800bebc:	d006      	beq.n	800becc <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d003      	beq.n	800becc <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d102      	bne.n	800bed2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800becc:	f06f 030f 	mvn.w	r3, #15
 800bed0:	e101      	b.n	800c0d6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800bed2:	68fa      	ldr	r2, [r7, #12]
 800bed4:	2101      	movs	r1, #1
 800bed6:	68b8      	ldr	r0, [r7, #8]
 800bed8:	f7ff fb60 	bl	800b59c <etharp_find_entry>
 800bedc:	4603      	mov	r3, r0
 800bede:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800bee0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	da02      	bge.n	800beee <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800bee8:	8a7b      	ldrh	r3, [r7, #18]
 800beea:	b25b      	sxtb	r3, r3
 800beec:	e0f3      	b.n	800c0d6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800beee:	8a7b      	ldrh	r3, [r7, #18]
 800bef0:	2b7e      	cmp	r3, #126	; 0x7e
 800bef2:	d906      	bls.n	800bf02 <etharp_query+0x7e>
 800bef4:	4b7a      	ldr	r3, [pc, #488]	; (800c0e0 <etharp_query+0x25c>)
 800bef6:	f240 32c1 	movw	r2, #961	; 0x3c1
 800befa:	497a      	ldr	r1, [pc, #488]	; (800c0e4 <etharp_query+0x260>)
 800befc:	487a      	ldr	r0, [pc, #488]	; (800c0e8 <etharp_query+0x264>)
 800befe:	f00a f8bd 	bl	801607c <iprintf>
  i = (netif_addr_idx_t)i_err;
 800bf02:	8a7b      	ldrh	r3, [r7, #18]
 800bf04:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800bf06:	7c7a      	ldrb	r2, [r7, #17]
 800bf08:	4978      	ldr	r1, [pc, #480]	; (800c0ec <etharp_query+0x268>)
 800bf0a:	4613      	mov	r3, r2
 800bf0c:	005b      	lsls	r3, r3, #1
 800bf0e:	4413      	add	r3, r2
 800bf10:	00db      	lsls	r3, r3, #3
 800bf12:	440b      	add	r3, r1
 800bf14:	3314      	adds	r3, #20
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d115      	bne.n	800bf48 <etharp_query+0xc4>
    is_new_entry = 1;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800bf20:	7c7a      	ldrb	r2, [r7, #17]
 800bf22:	4972      	ldr	r1, [pc, #456]	; (800c0ec <etharp_query+0x268>)
 800bf24:	4613      	mov	r3, r2
 800bf26:	005b      	lsls	r3, r3, #1
 800bf28:	4413      	add	r3, r2
 800bf2a:	00db      	lsls	r3, r3, #3
 800bf2c:	440b      	add	r3, r1
 800bf2e:	3314      	adds	r3, #20
 800bf30:	2201      	movs	r2, #1
 800bf32:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800bf34:	7c7a      	ldrb	r2, [r7, #17]
 800bf36:	496d      	ldr	r1, [pc, #436]	; (800c0ec <etharp_query+0x268>)
 800bf38:	4613      	mov	r3, r2
 800bf3a:	005b      	lsls	r3, r3, #1
 800bf3c:	4413      	add	r3, r2
 800bf3e:	00db      	lsls	r3, r3, #3
 800bf40:	440b      	add	r3, r1
 800bf42:	3308      	adds	r3, #8
 800bf44:	68fa      	ldr	r2, [r7, #12]
 800bf46:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800bf48:	7c7a      	ldrb	r2, [r7, #17]
 800bf4a:	4968      	ldr	r1, [pc, #416]	; (800c0ec <etharp_query+0x268>)
 800bf4c:	4613      	mov	r3, r2
 800bf4e:	005b      	lsls	r3, r3, #1
 800bf50:	4413      	add	r3, r2
 800bf52:	00db      	lsls	r3, r3, #3
 800bf54:	440b      	add	r3, r1
 800bf56:	3314      	adds	r3, #20
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d011      	beq.n	800bf82 <etharp_query+0xfe>
 800bf5e:	7c7a      	ldrb	r2, [r7, #17]
 800bf60:	4962      	ldr	r1, [pc, #392]	; (800c0ec <etharp_query+0x268>)
 800bf62:	4613      	mov	r3, r2
 800bf64:	005b      	lsls	r3, r3, #1
 800bf66:	4413      	add	r3, r2
 800bf68:	00db      	lsls	r3, r3, #3
 800bf6a:	440b      	add	r3, r1
 800bf6c:	3314      	adds	r3, #20
 800bf6e:	781b      	ldrb	r3, [r3, #0]
 800bf70:	2b01      	cmp	r3, #1
 800bf72:	d806      	bhi.n	800bf82 <etharp_query+0xfe>
 800bf74:	4b5a      	ldr	r3, [pc, #360]	; (800c0e0 <etharp_query+0x25c>)
 800bf76:	f240 32cd 	movw	r2, #973	; 0x3cd
 800bf7a:	495d      	ldr	r1, [pc, #372]	; (800c0f0 <etharp_query+0x26c>)
 800bf7c:	485a      	ldr	r0, [pc, #360]	; (800c0e8 <etharp_query+0x264>)
 800bf7e:	f00a f87d 	bl	801607c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800bf82:	6a3b      	ldr	r3, [r7, #32]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d102      	bne.n	800bf8e <etharp_query+0x10a>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d10c      	bne.n	800bfa8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	68f8      	ldr	r0, [r7, #12]
 800bf92:	f000 f963 	bl	800c25c <etharp_request>
 800bf96:	4603      	mov	r3, r0
 800bf98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d102      	bne.n	800bfa8 <etharp_query+0x124>
      return result;
 800bfa2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bfa6:	e096      	b.n	800c0d6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d106      	bne.n	800bfbc <etharp_query+0x138>
 800bfae:	4b4c      	ldr	r3, [pc, #304]	; (800c0e0 <etharp_query+0x25c>)
 800bfb0:	f240 32e1 	movw	r2, #993	; 0x3e1
 800bfb4:	494f      	ldr	r1, [pc, #316]	; (800c0f4 <etharp_query+0x270>)
 800bfb6:	484c      	ldr	r0, [pc, #304]	; (800c0e8 <etharp_query+0x264>)
 800bfb8:	f00a f860 	bl	801607c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800bfbc:	7c7a      	ldrb	r2, [r7, #17]
 800bfbe:	494b      	ldr	r1, [pc, #300]	; (800c0ec <etharp_query+0x268>)
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	005b      	lsls	r3, r3, #1
 800bfc4:	4413      	add	r3, r2
 800bfc6:	00db      	lsls	r3, r3, #3
 800bfc8:	440b      	add	r3, r1
 800bfca:	3314      	adds	r3, #20
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d917      	bls.n	800c002 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800bfd2:	4a49      	ldr	r2, [pc, #292]	; (800c0f8 <etharp_query+0x274>)
 800bfd4:	7c7b      	ldrb	r3, [r7, #17]
 800bfd6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800bfd8:	7c7a      	ldrb	r2, [r7, #17]
 800bfda:	4613      	mov	r3, r2
 800bfdc:	005b      	lsls	r3, r3, #1
 800bfde:	4413      	add	r3, r2
 800bfe0:	00db      	lsls	r3, r3, #3
 800bfe2:	3308      	adds	r3, #8
 800bfe4:	4a41      	ldr	r2, [pc, #260]	; (800c0ec <etharp_query+0x268>)
 800bfe6:	4413      	add	r3, r2
 800bfe8:	3304      	adds	r3, #4
 800bfea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bfee:	9200      	str	r2, [sp, #0]
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	6879      	ldr	r1, [r7, #4]
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f009 fd7d 	bl	8015af4 <ethernet_output>
 800bffa:	4603      	mov	r3, r0
 800bffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c000:	e067      	b.n	800c0d2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c002:	7c7a      	ldrb	r2, [r7, #17]
 800c004:	4939      	ldr	r1, [pc, #228]	; (800c0ec <etharp_query+0x268>)
 800c006:	4613      	mov	r3, r2
 800c008:	005b      	lsls	r3, r3, #1
 800c00a:	4413      	add	r3, r2
 800c00c:	00db      	lsls	r3, r3, #3
 800c00e:	440b      	add	r3, r1
 800c010:	3314      	adds	r3, #20
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d15c      	bne.n	800c0d2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800c018:	2300      	movs	r3, #0
 800c01a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c020:	e01c      	b.n	800c05c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800c022:	69fb      	ldr	r3, [r7, #28]
 800c024:	895a      	ldrh	r2, [r3, #10]
 800c026:	69fb      	ldr	r3, [r7, #28]
 800c028:	891b      	ldrh	r3, [r3, #8]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d10a      	bne.n	800c044 <etharp_query+0x1c0>
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d006      	beq.n	800c044 <etharp_query+0x1c0>
 800c036:	4b2a      	ldr	r3, [pc, #168]	; (800c0e0 <etharp_query+0x25c>)
 800c038:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800c03c:	492f      	ldr	r1, [pc, #188]	; (800c0fc <etharp_query+0x278>)
 800c03e:	482a      	ldr	r0, [pc, #168]	; (800c0e8 <etharp_query+0x264>)
 800c040:	f00a f81c 	bl	801607c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800c044:	69fb      	ldr	r3, [r7, #28]
 800c046:	7b1b      	ldrb	r3, [r3, #12]
 800c048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d002      	beq.n	800c056 <etharp_query+0x1d2>
        copy_needed = 1;
 800c050:	2301      	movs	r3, #1
 800c052:	61bb      	str	r3, [r7, #24]
        break;
 800c054:	e005      	b.n	800c062 <etharp_query+0x1de>
      }
      p = p->next;
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	61fb      	str	r3, [r7, #28]
    while (p) {
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1df      	bne.n	800c022 <etharp_query+0x19e>
    }
    if (copy_needed) {
 800c062:	69bb      	ldr	r3, [r7, #24]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d007      	beq.n	800c078 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800c068:	687a      	ldr	r2, [r7, #4]
 800c06a:	f44f 7120 	mov.w	r1, #640	; 0x280
 800c06e:	200e      	movs	r0, #14
 800c070:	f003 fa28 	bl	800f4c4 <pbuf_clone>
 800c074:	61f8      	str	r0, [r7, #28]
 800c076:	e004      	b.n	800c082 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800c07c:	69f8      	ldr	r0, [r7, #28]
 800c07e:	f003 f85f 	bl	800f140 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800c082:	69fb      	ldr	r3, [r7, #28]
 800c084:	2b00      	cmp	r3, #0
 800c086:	d021      	beq.n	800c0cc <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800c088:	7c7a      	ldrb	r2, [r7, #17]
 800c08a:	4918      	ldr	r1, [pc, #96]	; (800c0ec <etharp_query+0x268>)
 800c08c:	4613      	mov	r3, r2
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	4413      	add	r3, r2
 800c092:	00db      	lsls	r3, r3, #3
 800c094:	440b      	add	r3, r1
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00a      	beq.n	800c0b2 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800c09c:	7c7a      	ldrb	r2, [r7, #17]
 800c09e:	4913      	ldr	r1, [pc, #76]	; (800c0ec <etharp_query+0x268>)
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	005b      	lsls	r3, r3, #1
 800c0a4:	4413      	add	r3, r2
 800c0a6:	00db      	lsls	r3, r3, #3
 800c0a8:	440b      	add	r3, r1
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f002 ffa1 	bl	800eff4 <pbuf_free>
      }
      arp_table[i].q = p;
 800c0b2:	7c7a      	ldrb	r2, [r7, #17]
 800c0b4:	490d      	ldr	r1, [pc, #52]	; (800c0ec <etharp_query+0x268>)
 800c0b6:	4613      	mov	r3, r2
 800c0b8:	005b      	lsls	r3, r3, #1
 800c0ba:	4413      	add	r3, r2
 800c0bc:	00db      	lsls	r3, r3, #3
 800c0be:	440b      	add	r3, r1
 800c0c0:	69fa      	ldr	r2, [r7, #28]
 800c0c2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c0ca:	e002      	b.n	800c0d2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800c0cc:	23ff      	movs	r3, #255	; 0xff
 800c0ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800c0d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3728      	adds	r7, #40	; 0x28
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}
 800c0de:	bf00      	nop
 800c0e0:	08018b28 	.word	0x08018b28
 800c0e4:	08018d18 	.word	0x08018d18
 800c0e8:	08018be4 	.word	0x08018be4
 800c0ec:	24006674 	.word	0x24006674
 800c0f0:	08018d28 	.word	0x08018d28
 800c0f4:	08018d0c 	.word	0x08018d0c
 800c0f8:	24006764 	.word	0x24006764
 800c0fc:	08018d50 	.word	0x08018d50

0800c100 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b08a      	sub	sp, #40	; 0x28
 800c104:	af02      	add	r7, sp, #8
 800c106:	60f8      	str	r0, [r7, #12]
 800c108:	60b9      	str	r1, [r7, #8]
 800c10a:	607a      	str	r2, [r7, #4]
 800c10c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800c10e:	2300      	movs	r3, #0
 800c110:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d106      	bne.n	800c126 <etharp_raw+0x26>
 800c118:	4b3a      	ldr	r3, [pc, #232]	; (800c204 <etharp_raw+0x104>)
 800c11a:	f240 4257 	movw	r2, #1111	; 0x457
 800c11e:	493a      	ldr	r1, [pc, #232]	; (800c208 <etharp_raw+0x108>)
 800c120:	483a      	ldr	r0, [pc, #232]	; (800c20c <etharp_raw+0x10c>)
 800c122:	f009 ffab 	bl	801607c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800c126:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c12a:	211c      	movs	r1, #28
 800c12c:	200e      	movs	r0, #14
 800c12e:	f002 fc7f 	bl	800ea30 <pbuf_alloc>
 800c132:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d102      	bne.n	800c140 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800c13a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c13e:	e05d      	b.n	800c1fc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	895b      	ldrh	r3, [r3, #10]
 800c144:	2b1b      	cmp	r3, #27
 800c146:	d806      	bhi.n	800c156 <etharp_raw+0x56>
 800c148:	4b2e      	ldr	r3, [pc, #184]	; (800c204 <etharp_raw+0x104>)
 800c14a:	f240 4262 	movw	r2, #1122	; 0x462
 800c14e:	4930      	ldr	r1, [pc, #192]	; (800c210 <etharp_raw+0x110>)
 800c150:	482e      	ldr	r0, [pc, #184]	; (800c20c <etharp_raw+0x10c>)
 800c152:	f009 ff93 	bl	801607c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800c156:	69bb      	ldr	r3, [r7, #24]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800c15c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800c15e:	4618      	mov	r0, r3
 800c160:	f001 fb48 	bl	800d7f4 <lwip_htons>
 800c164:	4603      	mov	r3, r0
 800c166:	461a      	mov	r2, r3
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c172:	2b06      	cmp	r3, #6
 800c174:	d006      	beq.n	800c184 <etharp_raw+0x84>
 800c176:	4b23      	ldr	r3, [pc, #140]	; (800c204 <etharp_raw+0x104>)
 800c178:	f240 4269 	movw	r2, #1129	; 0x469
 800c17c:	4925      	ldr	r1, [pc, #148]	; (800c214 <etharp_raw+0x114>)
 800c17e:	4823      	ldr	r0, [pc, #140]	; (800c20c <etharp_raw+0x10c>)
 800c180:	f009 ff7c 	bl	801607c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	3308      	adds	r3, #8
 800c188:	2206      	movs	r2, #6
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	4618      	mov	r0, r3
 800c18e:	f009 ff45 	bl	801601c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	3312      	adds	r3, #18
 800c196:	2206      	movs	r2, #6
 800c198:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c19a:	4618      	mov	r0, r3
 800c19c:	f009 ff3e 	bl	801601c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	330e      	adds	r3, #14
 800c1a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1a6:	6812      	ldr	r2, [r2, #0]
 800c1a8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800c1aa:	697b      	ldr	r3, [r7, #20]
 800c1ac:	3318      	adds	r3, #24
 800c1ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c1b0:	6812      	ldr	r2, [r2, #0]
 800c1b2:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	701a      	strb	r2, [r3, #0]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f042 0201 	orr.w	r2, r2, #1
 800c1c0:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f042 0208 	orr.w	r2, r2, #8
 800c1ca:	709a      	strb	r2, [r3, #2]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	2206      	movs	r2, #6
 800c1d4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	2204      	movs	r2, #4
 800c1da:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800c1dc:	f640 0306 	movw	r3, #2054	; 0x806
 800c1e0:	9300      	str	r3, [sp, #0]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	69b9      	ldr	r1, [r7, #24]
 800c1e8:	68f8      	ldr	r0, [r7, #12]
 800c1ea:	f009 fc83 	bl	8015af4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800c1ee:	69b8      	ldr	r0, [r7, #24]
 800c1f0:	f002 ff00 	bl	800eff4 <pbuf_free>
  p = NULL;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800c1f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	3720      	adds	r7, #32
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	08018b28 	.word	0x08018b28
 800c208:	08018cbc 	.word	0x08018cbc
 800c20c:	08018be4 	.word	0x08018be4
 800c210:	08018d6c 	.word	0x08018d6c
 800c214:	08018da0 	.word	0x08018da0

0800c218 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b088      	sub	sp, #32
 800c21c:	af04      	add	r7, sp, #16
 800c21e:	60f8      	str	r0, [r7, #12]
 800c220:	60b9      	str	r1, [r7, #8]
 800c222:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800c234:	2201      	movs	r2, #1
 800c236:	9203      	str	r2, [sp, #12]
 800c238:	68ba      	ldr	r2, [r7, #8]
 800c23a:	9202      	str	r2, [sp, #8]
 800c23c:	4a06      	ldr	r2, [pc, #24]	; (800c258 <etharp_request_dst+0x40>)
 800c23e:	9201      	str	r2, [sp, #4]
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	4603      	mov	r3, r0
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	68f8      	ldr	r0, [r7, #12]
 800c248:	f7ff ff5a 	bl	800c100 <etharp_raw>
 800c24c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3710      	adds	r7, #16
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	0801b8e4 	.word	0x0801b8e4

0800c25c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800c266:	4a05      	ldr	r2, [pc, #20]	; (800c27c <etharp_request+0x20>)
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7ff ffd4 	bl	800c218 <etharp_request_dst>
 800c270:	4603      	mov	r3, r0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}
 800c27a:	bf00      	nop
 800c27c:	0801b8dc 	.word	0x0801b8dc

0800c280 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b08e      	sub	sp, #56	; 0x38
 800c284:	af04      	add	r7, sp, #16
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c28a:	4b82      	ldr	r3, [pc, #520]	; (800c494 <icmp_input+0x214>)
 800c28c:	689b      	ldr	r3, [r3, #8]
 800c28e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	f003 030f 	and.w	r3, r3, #15
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	b2db      	uxtb	r3, r3
 800c29e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800c2a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c2a2:	2b13      	cmp	r3, #19
 800c2a4:	f240 80de 	bls.w	800c464 <icmp_input+0x1e4>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	895b      	ldrh	r3, [r3, #10]
 800c2ac:	2b03      	cmp	r3, #3
 800c2ae:	f240 80db 	bls.w	800c468 <icmp_input+0x1e8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c2bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f000 80c8 	beq.w	800c456 <icmp_input+0x1d6>
 800c2c6:	2b08      	cmp	r3, #8
 800c2c8:	f040 80c8 	bne.w	800c45c <icmp_input+0x1dc>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c2cc:	4b72      	ldr	r3, [pc, #456]	; (800c498 <icmp_input+0x218>)
 800c2ce:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c2d0:	4b70      	ldr	r3, [pc, #448]	; (800c494 <icmp_input+0x214>)
 800c2d2:	695b      	ldr	r3, [r3, #20]
 800c2d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c2d8:	2be0      	cmp	r3, #224	; 0xe0
 800c2da:	f000 80cc 	beq.w	800c476 <icmp_input+0x1f6>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c2de:	4b6d      	ldr	r3, [pc, #436]	; (800c494 <icmp_input+0x214>)
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	4a6c      	ldr	r2, [pc, #432]	; (800c494 <icmp_input+0x214>)
 800c2e4:	6812      	ldr	r2, [r2, #0]
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 fc09 	bl	800cb00 <ip4_addr_isbroadcast_u32>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f040 80c2 	bne.w	800c47a <icmp_input+0x1fa>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	891b      	ldrh	r3, [r3, #8]
 800c2fa:	2b07      	cmp	r3, #7
 800c2fc:	f240 80b6 	bls.w	800c46c <icmp_input+0x1ec>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c300:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c302:	330e      	adds	r3, #14
 800c304:	4619      	mov	r1, r3
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f002 fdde 	bl	800eec8 <pbuf_add_header>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d04b      	beq.n	800c3aa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	891a      	ldrh	r2, [r3, #8]
 800c316:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c318:	4413      	add	r3, r2
 800c31a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	891b      	ldrh	r3, [r3, #8]
 800c320:	8b7a      	ldrh	r2, [r7, #26]
 800c322:	429a      	cmp	r2, r3
 800c324:	f0c0 80ab 	bcc.w	800c47e <icmp_input+0x1fe>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c328:	8b7b      	ldrh	r3, [r7, #26]
 800c32a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c32e:	4619      	mov	r1, r3
 800c330:	200e      	movs	r0, #14
 800c332:	f002 fb7d 	bl	800ea30 <pbuf_alloc>
 800c336:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f000 80a1 	beq.w	800c482 <icmp_input+0x202>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	895b      	ldrh	r3, [r3, #10]
 800c344:	461a      	mov	r2, r3
 800c346:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c348:	3308      	adds	r3, #8
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d203      	bcs.n	800c356 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c34e:	6978      	ldr	r0, [r7, #20]
 800c350:	f002 fe50 	bl	800eff4 <pbuf_free>
          goto icmperr;
 800c354:	e096      	b.n	800c484 <icmp_input+0x204>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	685b      	ldr	r3, [r3, #4]
 800c35a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c35c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c35e:	4618      	mov	r0, r3
 800c360:	f009 fe5c 	bl	801601c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c364:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c366:	4619      	mov	r1, r3
 800c368:	6978      	ldr	r0, [r7, #20]
 800c36a:	f002 fdbd 	bl	800eee8 <pbuf_remove_header>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d009      	beq.n	800c388 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c374:	4b49      	ldr	r3, [pc, #292]	; (800c49c <icmp_input+0x21c>)
 800c376:	22b6      	movs	r2, #182	; 0xb6
 800c378:	4949      	ldr	r1, [pc, #292]	; (800c4a0 <icmp_input+0x220>)
 800c37a:	484a      	ldr	r0, [pc, #296]	; (800c4a4 <icmp_input+0x224>)
 800c37c:	f009 fe7e 	bl	801607c <iprintf>
          pbuf_free(r);
 800c380:	6978      	ldr	r0, [r7, #20]
 800c382:	f002 fe37 	bl	800eff4 <pbuf_free>
          goto icmperr;
 800c386:	e07d      	b.n	800c484 <icmp_input+0x204>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c388:	6879      	ldr	r1, [r7, #4]
 800c38a:	6978      	ldr	r0, [r7, #20]
 800c38c:	f002 ff56 	bl	800f23c <pbuf_copy>
 800c390:	4603      	mov	r3, r0
 800c392:	2b00      	cmp	r3, #0
 800c394:	d003      	beq.n	800c39e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c396:	6978      	ldr	r0, [r7, #20]
 800c398:	f002 fe2c 	bl	800eff4 <pbuf_free>
          goto icmperr;
 800c39c:	e072      	b.n	800c484 <icmp_input+0x204>
        }
        /* free the original p */
        pbuf_free(p);
 800c39e:	6878      	ldr	r0, [r7, #4]
 800c3a0:	f002 fe28 	bl	800eff4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	607b      	str	r3, [r7, #4]
 800c3a8:	e00f      	b.n	800c3ca <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c3aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3ac:	330e      	adds	r3, #14
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f002 fd99 	bl	800eee8 <pbuf_remove_header>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d006      	beq.n	800c3ca <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c3bc:	4b37      	ldr	r3, [pc, #220]	; (800c49c <icmp_input+0x21c>)
 800c3be:	22c7      	movs	r2, #199	; 0xc7
 800c3c0:	4939      	ldr	r1, [pc, #228]	; (800c4a8 <icmp_input+0x228>)
 800c3c2:	4838      	ldr	r0, [pc, #224]	; (800c4a4 <icmp_input+0x224>)
 800c3c4:	f009 fe5a 	bl	801607c <iprintf>
          goto icmperr;
 800c3c8:	e05c      	b.n	800c484 <icmp_input+0x204>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c3d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3d2:	4619      	mov	r1, r3
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f002 fd77 	bl	800eec8 <pbuf_add_header>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d13c      	bne.n	800c45a <icmp_input+0x1da>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	681a      	ldr	r2, [r3, #0]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c3ee:	4b29      	ldr	r3, [pc, #164]	; (800c494 <icmp_input+0x214>)
 800c3f0:	691a      	ldr	r2, [r3, #16]
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	885b      	ldrh	r3, [r3, #2]
 800c400:	b29b      	uxth	r3, r3
 800c402:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c406:	4293      	cmp	r3, r2
 800c408:	d907      	bls.n	800c41a <icmp_input+0x19a>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 800c40a:	693b      	ldr	r3, [r7, #16]
 800c40c:	885b      	ldrh	r3, [r3, #2]
 800c40e:	b29b      	uxth	r3, r3
 800c410:	3309      	adds	r3, #9
 800c412:	b29a      	uxth	r2, r3
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	805a      	strh	r2, [r3, #2]
 800c418:	e006      	b.n	800c428 <icmp_input+0x1a8>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	885b      	ldrh	r3, [r3, #2]
 800c41e:	b29b      	uxth	r3, r3
 800c420:	3308      	adds	r3, #8
 800c422:	b29a      	uxth	r2, r3
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	22ff      	movs	r2, #255	; 0xff
 800c42c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	2200      	movs	r2, #0
 800c432:	729a      	strb	r2, [r3, #10]
 800c434:	2200      	movs	r2, #0
 800c436:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	9302      	str	r3, [sp, #8]
 800c43c:	2301      	movs	r3, #1
 800c43e:	9301      	str	r3, [sp, #4]
 800c440:	2300      	movs	r3, #0
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	23ff      	movs	r3, #255	; 0xff
 800c446:	2200      	movs	r2, #0
 800c448:	69f9      	ldr	r1, [r7, #28]
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fa80 	bl	800c950 <ip4_output_if>
 800c450:	4603      	mov	r3, r0
 800c452:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c454:	e001      	b.n	800c45a <icmp_input+0x1da>
      break;
 800c456:	bf00      	nop
 800c458:	e000      	b.n	800c45c <icmp_input+0x1dc>
      break;
 800c45a:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f002 fdc9 	bl	800eff4 <pbuf_free>
  return;
 800c462:	e013      	b.n	800c48c <icmp_input+0x20c>
    goto lenerr;
 800c464:	bf00      	nop
 800c466:	e002      	b.n	800c46e <icmp_input+0x1ee>
    goto lenerr;
 800c468:	bf00      	nop
 800c46a:	e000      	b.n	800c46e <icmp_input+0x1ee>
        goto lenerr;
 800c46c:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f002 fdc0 	bl	800eff4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c474:	e00a      	b.n	800c48c <icmp_input+0x20c>
        goto icmperr;
 800c476:	bf00      	nop
 800c478:	e004      	b.n	800c484 <icmp_input+0x204>
        goto icmperr;
 800c47a:	bf00      	nop
 800c47c:	e002      	b.n	800c484 <icmp_input+0x204>
          goto icmperr;
 800c47e:	bf00      	nop
 800c480:	e000      	b.n	800c484 <icmp_input+0x204>
          goto icmperr;
 800c482:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f002 fdb5 	bl	800eff4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c48a:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c48c:	3728      	adds	r7, #40	; 0x28
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}
 800c492:	bf00      	nop
 800c494:	24006a28 	.word	0x24006a28
 800c498:	24006a3c 	.word	0x24006a3c
 800c49c:	08018de4 	.word	0x08018de4
 800c4a0:	08018e5c 	.word	0x08018e5c
 800c4a4:	08018e94 	.word	0x08018e94
 800c4a8:	08018ebc 	.word	0x08018ebc

0800c4ac <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c4b8:	78fb      	ldrb	r3, [r7, #3]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	2103      	movs	r1, #3
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 f814 	bl	800c4ec <icmp_send_response>
}
 800c4c4:	bf00      	nop
 800c4c6:	3708      	adds	r7, #8
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b082      	sub	sp, #8
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	6078      	str	r0, [r7, #4]
 800c4d4:	460b      	mov	r3, r1
 800c4d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c4d8:	78fb      	ldrb	r3, [r7, #3]
 800c4da:	461a      	mov	r2, r3
 800c4dc:	210b      	movs	r1, #11
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f804 	bl	800c4ec <icmp_send_response>
}
 800c4e4:	bf00      	nop
 800c4e6:	3708      	adds	r7, #8
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b08c      	sub	sp, #48	; 0x30
 800c4f0:	af04      	add	r7, sp, #16
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	460b      	mov	r3, r1
 800c4f6:	70fb      	strb	r3, [r7, #3]
 800c4f8:	4613      	mov	r3, r2
 800c4fa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c4fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c500:	2124      	movs	r1, #36	; 0x24
 800c502:	2022      	movs	r0, #34	; 0x22
 800c504:	f002 fa94 	bl	800ea30 <pbuf_alloc>
 800c508:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c50a:	69fb      	ldr	r3, [r7, #28]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d056      	beq.n	800c5be <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	895b      	ldrh	r3, [r3, #10]
 800c514:	2b23      	cmp	r3, #35	; 0x23
 800c516:	d806      	bhi.n	800c526 <icmp_send_response+0x3a>
 800c518:	4b2b      	ldr	r3, [pc, #172]	; (800c5c8 <icmp_send_response+0xdc>)
 800c51a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800c51e:	492b      	ldr	r1, [pc, #172]	; (800c5cc <icmp_send_response+0xe0>)
 800c520:	482b      	ldr	r0, [pc, #172]	; (800c5d0 <icmp_send_response+0xe4>)
 800c522:	f009 fdab 	bl	801607c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c532:	697b      	ldr	r3, [r7, #20]
 800c534:	78fa      	ldrb	r2, [r7, #3]
 800c536:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	78ba      	ldrb	r2, [r7, #2]
 800c53c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c53e:	697b      	ldr	r3, [r7, #20]
 800c540:	2200      	movs	r2, #0
 800c542:	711a      	strb	r2, [r3, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	2200      	movs	r2, #0
 800c54c:	719a      	strb	r2, [r3, #6]
 800c54e:	2200      	movs	r2, #0
 800c550:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	f103 0008 	add.w	r0, r3, #8
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	685b      	ldr	r3, [r3, #4]
 800c55e:	221c      	movs	r2, #28
 800c560:	4619      	mov	r1, r3
 800c562:	f009 fd5b 	bl	801601c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c56c:	f107 030c 	add.w	r3, r7, #12
 800c570:	4618      	mov	r0, r3
 800c572:	f000 f82f 	bl	800c5d4 <ip4_route>
 800c576:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d01b      	beq.n	800c5b6 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2200      	movs	r2, #0
 800c582:	709a      	strb	r2, [r3, #2]
 800c584:	2200      	movs	r2, #0
 800c586:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	895b      	ldrh	r3, [r3, #10]
 800c58c:	4619      	mov	r1, r3
 800c58e:	6978      	ldr	r0, [r7, #20]
 800c590:	f001 f9bb 	bl	800d90a <inet_chksum>
 800c594:	4603      	mov	r3, r0
 800c596:	461a      	mov	r2, r3
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c59c:	f107 020c 	add.w	r2, r7, #12
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	9302      	str	r3, [sp, #8]
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	9301      	str	r3, [sp, #4]
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	23ff      	movs	r3, #255	; 0xff
 800c5ae:	2100      	movs	r1, #0
 800c5b0:	69f8      	ldr	r0, [r7, #28]
 800c5b2:	f000 f9cd 	bl	800c950 <ip4_output_if>
  }
  pbuf_free(q);
 800c5b6:	69f8      	ldr	r0, [r7, #28]
 800c5b8:	f002 fd1c 	bl	800eff4 <pbuf_free>
 800c5bc:	e000      	b.n	800c5c0 <icmp_send_response+0xd4>
    return;
 800c5be:	bf00      	nop
}
 800c5c0:	3720      	adds	r7, #32
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	08018de4 	.word	0x08018de4
 800c5cc:	08018ef0 	.word	0x08018ef0
 800c5d0:	08018e94 	.word	0x08018e94

0800c5d4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800c5dc:	4b33      	ldr	r3, [pc, #204]	; (800c6ac <ip4_route+0xd8>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	60fb      	str	r3, [r7, #12]
 800c5e2:	e036      	b.n	800c652 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5ea:	f003 0301 	and.w	r3, r3, #1
 800c5ee:	b2db      	uxtb	r3, r3
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d02b      	beq.n	800c64c <ip4_route+0x78>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c5fa:	089b      	lsrs	r3, r3, #2
 800c5fc:	f003 0301 	and.w	r3, r3, #1
 800c600:	b2db      	uxtb	r3, r3
 800c602:	2b00      	cmp	r3, #0
 800c604:	d022      	beq.n	800c64c <ip4_route+0x78>
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	3304      	adds	r3, #4
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d01d      	beq.n	800c64c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681a      	ldr	r2, [r3, #0]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	3304      	adds	r3, #4
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	405a      	eors	r2, r3
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	3308      	adds	r3, #8
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4013      	ands	r3, r2
 800c624:	2b00      	cmp	r3, #0
 800c626:	d101      	bne.n	800c62c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	e038      	b.n	800c69e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c632:	f003 0302 	and.w	r3, r3, #2
 800c636:	2b00      	cmp	r3, #0
 800c638:	d108      	bne.n	800c64c <ip4_route+0x78>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	330c      	adds	r3, #12
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	429a      	cmp	r2, r3
 800c646:	d101      	bne.n	800c64c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	e028      	b.n	800c69e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	60fb      	str	r3, [r7, #12]
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1c5      	bne.n	800c5e4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c658:	4b15      	ldr	r3, [pc, #84]	; (800c6b0 <ip4_route+0xdc>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d01a      	beq.n	800c696 <ip4_route+0xc2>
 800c660:	4b13      	ldr	r3, [pc, #76]	; (800c6b0 <ip4_route+0xdc>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c668:	f003 0301 	and.w	r3, r3, #1
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d012      	beq.n	800c696 <ip4_route+0xc2>
 800c670:	4b0f      	ldr	r3, [pc, #60]	; (800c6b0 <ip4_route+0xdc>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c678:	f003 0304 	and.w	r3, r3, #4
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00a      	beq.n	800c696 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c680:	4b0b      	ldr	r3, [pc, #44]	; (800c6b0 <ip4_route+0xdc>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	3304      	adds	r3, #4
 800c686:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d004      	beq.n	800c696 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	b2db      	uxtb	r3, r3
 800c692:	2b7f      	cmp	r3, #127	; 0x7f
 800c694:	d101      	bne.n	800c69a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c696:	2300      	movs	r3, #0
 800c698:	e001      	b.n	800c69e <ip4_route+0xca>
  }

  return netif_default;
 800c69a:	4b05      	ldr	r3, [pc, #20]	; (800c6b0 <ip4_route+0xdc>)
 800c69c:	681b      	ldr	r3, [r3, #0]
}
 800c69e:	4618      	mov	r0, r3
 800c6a0:	3714      	adds	r7, #20
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a8:	4770      	bx	lr
 800c6aa:	bf00      	nop
 800c6ac:	2400a778 	.word	0x2400a778
 800c6b0:	2400a77c 	.word	0x2400a77c

0800c6b4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c6c2:	f003 0301 	and.w	r3, r3, #1
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d016      	beq.n	800c6fa <ip4_input_accept+0x46>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	3304      	adds	r3, #4
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d011      	beq.n	800c6fa <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c6d6:	4b0b      	ldr	r3, [pc, #44]	; (800c704 <ip4_input_accept+0x50>)
 800c6d8:	695a      	ldr	r2, [r3, #20]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	3304      	adds	r3, #4
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d008      	beq.n	800c6f6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c6e4:	4b07      	ldr	r3, [pc, #28]	; (800c704 <ip4_input_accept+0x50>)
 800c6e6:	695b      	ldr	r3, [r3, #20]
 800c6e8:	6879      	ldr	r1, [r7, #4]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f000 fa08 	bl	800cb00 <ip4_addr_isbroadcast_u32>
 800c6f0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d001      	beq.n	800c6fa <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e000      	b.n	800c6fc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800c6fa:	2300      	movs	r3, #0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	24006a28 	.word	0x24006a28

0800c708 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
 800c710:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	091b      	lsrs	r3, r3, #4
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	2b04      	cmp	r3, #4
 800c722:	d004      	beq.n	800c72e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f002 fc65 	bl	800eff4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c72a:	2300      	movs	r3, #0
 800c72c:	e107      	b.n	800c93e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	f003 030f 	and.w	r3, r3, #15
 800c736:	b2db      	uxtb	r3, r3
 800c738:	009b      	lsls	r3, r3, #2
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	885b      	ldrh	r3, [r3, #2]
 800c742:	b29b      	uxth	r3, r3
 800c744:	4618      	mov	r0, r3
 800c746:	f001 f855 	bl	800d7f4 <lwip_htons>
 800c74a:	4603      	mov	r3, r0
 800c74c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	891b      	ldrh	r3, [r3, #8]
 800c752:	89ba      	ldrh	r2, [r7, #12]
 800c754:	429a      	cmp	r2, r3
 800c756:	d204      	bcs.n	800c762 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 800c758:	89bb      	ldrh	r3, [r7, #12]
 800c75a:	4619      	mov	r1, r3
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f002 fac3 	bl	800ece8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	895b      	ldrh	r3, [r3, #10]
 800c766:	89fa      	ldrh	r2, [r7, #14]
 800c768:	429a      	cmp	r2, r3
 800c76a:	d807      	bhi.n	800c77c <ip4_input+0x74>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	891b      	ldrh	r3, [r3, #8]
 800c770:	89ba      	ldrh	r2, [r7, #12]
 800c772:	429a      	cmp	r2, r3
 800c774:	d802      	bhi.n	800c77c <ip4_input+0x74>
 800c776:	89fb      	ldrh	r3, [r7, #14]
 800c778:	2b13      	cmp	r3, #19
 800c77a:	d804      	bhi.n	800c786 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f002 fc39 	bl	800eff4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	e0db      	b.n	800c93e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	691b      	ldr	r3, [r3, #16]
 800c78a:	4a6f      	ldr	r2, [pc, #444]	; (800c948 <ip4_input+0x240>)
 800c78c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	68db      	ldr	r3, [r3, #12]
 800c792:	4a6d      	ldr	r2, [pc, #436]	; (800c948 <ip4_input+0x240>)
 800c794:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c796:	4b6c      	ldr	r3, [pc, #432]	; (800c948 <ip4_input+0x240>)
 800c798:	695b      	ldr	r3, [r3, #20]
 800c79a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c79e:	2be0      	cmp	r3, #224	; 0xe0
 800c7a0:	d112      	bne.n	800c7c8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c7a8:	f003 0301 	and.w	r3, r3, #1
 800c7ac:	b2db      	uxtb	r3, r3
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d007      	beq.n	800c7c2 <ip4_input+0xba>
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	3304      	adds	r3, #4
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d002      	beq.n	800c7c2 <ip4_input+0xba>
      netif = inp;
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	613b      	str	r3, [r7, #16]
 800c7c0:	e02a      	b.n	800c818 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	613b      	str	r3, [r7, #16]
 800c7c6:	e027      	b.n	800c818 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800c7c8:	6838      	ldr	r0, [r7, #0]
 800c7ca:	f7ff ff73 	bl	800c6b4 <ip4_input_accept>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d002      	beq.n	800c7da <ip4_input+0xd2>
      netif = inp;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	613b      	str	r3, [r7, #16]
 800c7d8:	e01e      	b.n	800c818 <ip4_input+0x110>
    } else {
      netif = NULL;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c7de:	4b5a      	ldr	r3, [pc, #360]	; (800c948 <ip4_input+0x240>)
 800c7e0:	695b      	ldr	r3, [r3, #20]
 800c7e2:	b2db      	uxtb	r3, r3
 800c7e4:	2b7f      	cmp	r3, #127	; 0x7f
 800c7e6:	d017      	beq.n	800c818 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c7e8:	4b58      	ldr	r3, [pc, #352]	; (800c94c <ip4_input+0x244>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	613b      	str	r3, [r7, #16]
 800c7ee:	e00e      	b.n	800c80e <ip4_input+0x106>
          if (netif == inp) {
 800c7f0:	693a      	ldr	r2, [r7, #16]
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d006      	beq.n	800c806 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c7f8:	6938      	ldr	r0, [r7, #16]
 800c7fa:	f7ff ff5b 	bl	800c6b4 <ip4_input_accept>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d108      	bne.n	800c816 <ip4_input+0x10e>
 800c804:	e000      	b.n	800c808 <ip4_input+0x100>
            continue;
 800c806:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	613b      	str	r3, [r7, #16]
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1ed      	bne.n	800c7f0 <ip4_input+0xe8>
 800c814:	e000      	b.n	800c818 <ip4_input+0x110>
            break;
 800c816:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c818:	4b4b      	ldr	r3, [pc, #300]	; (800c948 <ip4_input+0x240>)
 800c81a:	691b      	ldr	r3, [r3, #16]
 800c81c:	6839      	ldr	r1, [r7, #0]
 800c81e:	4618      	mov	r0, r3
 800c820:	f000 f96e 	bl	800cb00 <ip4_addr_isbroadcast_u32>
 800c824:	4603      	mov	r3, r0
 800c826:	2b00      	cmp	r3, #0
 800c828:	d105      	bne.n	800c836 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c82a:	4b47      	ldr	r3, [pc, #284]	; (800c948 <ip4_input+0x240>)
 800c82c:	691b      	ldr	r3, [r3, #16]
 800c82e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c832:	2be0      	cmp	r3, #224	; 0xe0
 800c834:	d104      	bne.n	800c840 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f002 fbdc 	bl	800eff4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	e07e      	b.n	800c93e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d104      	bne.n	800c850 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	f002 fbd4 	bl	800eff4 <pbuf_free>
    return ERR_OK;
 800c84c:	2300      	movs	r3, #0
 800c84e:	e076      	b.n	800c93e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	88db      	ldrh	r3, [r3, #6]
 800c854:	b29b      	uxth	r3, r3
 800c856:	461a      	mov	r2, r3
 800c858:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800c85c:	4013      	ands	r3, r2
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00b      	beq.n	800c87a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 fc92 	bl	800d18c <ip4_reass>
 800c868:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d101      	bne.n	800c874 <ip4_input+0x16c>
      return ERR_OK;
 800c870:	2300      	movs	r3, #0
 800c872:	e064      	b.n	800c93e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c87a:	4a33      	ldr	r2, [pc, #204]	; (800c948 <ip4_input+0x240>)
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c880:	4a31      	ldr	r2, [pc, #196]	; (800c948 <ip4_input+0x240>)
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c886:	4a30      	ldr	r2, [pc, #192]	; (800c948 <ip4_input+0x240>)
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	f003 030f 	and.w	r3, r3, #15
 800c894:	b2db      	uxtb	r3, r3
 800c896:	009b      	lsls	r3, r3, #2
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	b29a      	uxth	r2, r3
 800c89c:	4b2a      	ldr	r3, [pc, #168]	; (800c948 <ip4_input+0x240>)
 800c89e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c8a0:	89fb      	ldrh	r3, [r7, #14]
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f002 fb1f 	bl	800eee8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	7a5b      	ldrb	r3, [r3, #9]
 800c8ae:	2b11      	cmp	r3, #17
 800c8b0:	d006      	beq.n	800c8c0 <ip4_input+0x1b8>
 800c8b2:	2b11      	cmp	r3, #17
 800c8b4:	dc13      	bgt.n	800c8de <ip4_input+0x1d6>
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d00c      	beq.n	800c8d4 <ip4_input+0x1cc>
 800c8ba:	2b06      	cmp	r3, #6
 800c8bc:	d005      	beq.n	800c8ca <ip4_input+0x1c2>
 800c8be:	e00e      	b.n	800c8de <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c8c0:	6839      	ldr	r1, [r7, #0]
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f008 fdc8 	bl	8015458 <udp_input>
        break;
 800c8c8:	e026      	b.n	800c918 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800c8ca:	6839      	ldr	r1, [r7, #0]
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f004 fd3d 	bl	801134c <tcp_input>
        break;
 800c8d2:	e021      	b.n	800c918 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c8d4:	6839      	ldr	r1, [r7, #0]
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f7ff fcd2 	bl	800c280 <icmp_input>
        break;
 800c8dc:	e01c      	b.n	800c918 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c8de:	4b1a      	ldr	r3, [pc, #104]	; (800c948 <ip4_input+0x240>)
 800c8e0:	695b      	ldr	r3, [r3, #20]
 800c8e2:	6939      	ldr	r1, [r7, #16]
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f000 f90b 	bl	800cb00 <ip4_addr_isbroadcast_u32>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d10f      	bne.n	800c910 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c8f0:	4b15      	ldr	r3, [pc, #84]	; (800c948 <ip4_input+0x240>)
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c8f8:	2be0      	cmp	r3, #224	; 0xe0
 800c8fa:	d009      	beq.n	800c910 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c8fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c900:	4619      	mov	r1, r3
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f002 fb63 	bl	800efce <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c908:	2102      	movs	r1, #2
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f7ff fdce 	bl	800c4ac <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f002 fb6f 	bl	800eff4 <pbuf_free>
        break;
 800c916:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c918:	4b0b      	ldr	r3, [pc, #44]	; (800c948 <ip4_input+0x240>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c91e:	4b0a      	ldr	r3, [pc, #40]	; (800c948 <ip4_input+0x240>)
 800c920:	2200      	movs	r2, #0
 800c922:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c924:	4b08      	ldr	r3, [pc, #32]	; (800c948 <ip4_input+0x240>)
 800c926:	2200      	movs	r2, #0
 800c928:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c92a:	4b07      	ldr	r3, [pc, #28]	; (800c948 <ip4_input+0x240>)
 800c92c:	2200      	movs	r2, #0
 800c92e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c930:	4b05      	ldr	r3, [pc, #20]	; (800c948 <ip4_input+0x240>)
 800c932:	2200      	movs	r2, #0
 800c934:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c936:	4b04      	ldr	r3, [pc, #16]	; (800c948 <ip4_input+0x240>)
 800c938:	2200      	movs	r2, #0
 800c93a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3718      	adds	r7, #24
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
 800c946:	bf00      	nop
 800c948:	24006a28 	.word	0x24006a28
 800c94c:	2400a778 	.word	0x2400a778

0800c950 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b08a      	sub	sp, #40	; 0x28
 800c954:	af04      	add	r7, sp, #16
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	60b9      	str	r1, [r7, #8]
 800c95a:	607a      	str	r2, [r7, #4]
 800c95c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d009      	beq.n	800c97c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d003      	beq.n	800c976 <ip4_output_if+0x26>
 800c96e:	68bb      	ldr	r3, [r7, #8]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d102      	bne.n	800c97c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c978:	3304      	adds	r3, #4
 800c97a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c97c:	78fa      	ldrb	r2, [r7, #3]
 800c97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c980:	9302      	str	r3, [sp, #8]
 800c982:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c986:	9301      	str	r3, [sp, #4]
 800c988:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c98c:	9300      	str	r3, [sp, #0]
 800c98e:	4613      	mov	r3, r2
 800c990:	687a      	ldr	r2, [r7, #4]
 800c992:	6979      	ldr	r1, [r7, #20]
 800c994:	68f8      	ldr	r0, [r7, #12]
 800c996:	f000 f805 	bl	800c9a4 <ip4_output_if_src>
 800c99a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3718      	adds	r7, #24
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}

0800c9a4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
 800c9b0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	7b9b      	ldrb	r3, [r3, #14]
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	d006      	beq.n	800c9c8 <ip4_output_if_src+0x24>
 800c9ba:	4b4b      	ldr	r3, [pc, #300]	; (800cae8 <ip4_output_if_src+0x144>)
 800c9bc:	f44f 7255 	mov.w	r2, #852	; 0x354
 800c9c0:	494a      	ldr	r1, [pc, #296]	; (800caec <ip4_output_if_src+0x148>)
 800c9c2:	484b      	ldr	r0, [pc, #300]	; (800caf0 <ip4_output_if_src+0x14c>)
 800c9c4:	f009 fb5a 	bl	801607c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d060      	beq.n	800ca90 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c9ce:	2314      	movs	r3, #20
 800c9d0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c9d2:	2114      	movs	r1, #20
 800c9d4:	68f8      	ldr	r0, [r7, #12]
 800c9d6:	f002 fa77 	bl	800eec8 <pbuf_add_header>
 800c9da:	4603      	mov	r3, r0
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d002      	beq.n	800c9e6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c9e0:	f06f 0301 	mvn.w	r3, #1
 800c9e4:	e07c      	b.n	800cae0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	895b      	ldrh	r3, [r3, #10]
 800c9f0:	2b13      	cmp	r3, #19
 800c9f2:	d806      	bhi.n	800ca02 <ip4_output_if_src+0x5e>
 800c9f4:	4b3c      	ldr	r3, [pc, #240]	; (800cae8 <ip4_output_if_src+0x144>)
 800c9f6:	f44f 7262 	mov.w	r2, #904	; 0x388
 800c9fa:	493e      	ldr	r1, [pc, #248]	; (800caf4 <ip4_output_if_src+0x150>)
 800c9fc:	483c      	ldr	r0, [pc, #240]	; (800caf0 <ip4_output_if_src+0x14c>)
 800c9fe:	f009 fb3d 	bl	801607c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800ca02:	69fb      	ldr	r3, [r7, #28]
 800ca04:	78fa      	ldrb	r2, [r7, #3]
 800ca06:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800ca0e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800ca18:	8b7b      	ldrh	r3, [r7, #26]
 800ca1a:	089b      	lsrs	r3, r3, #2
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca24:	b2da      	uxtb	r2, r3
 800ca26:	69fb      	ldr	r3, [r7, #28]
 800ca28:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800ca30:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	891b      	ldrh	r3, [r3, #8]
 800ca36:	4618      	mov	r0, r3
 800ca38:	f000 fedc 	bl	800d7f4 <lwip_htons>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	461a      	mov	r2, r3
 800ca40:	69fb      	ldr	r3, [r7, #28]
 800ca42:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	2200      	movs	r2, #0
 800ca48:	719a      	strb	r2, [r3, #6]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ca4e:	4b2a      	ldr	r3, [pc, #168]	; (800caf8 <ip4_output_if_src+0x154>)
 800ca50:	881b      	ldrh	r3, [r3, #0]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f000 fece 	bl	800d7f4 <lwip_htons>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	461a      	mov	r2, r3
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ca60:	4b25      	ldr	r3, [pc, #148]	; (800caf8 <ip4_output_if_src+0x154>)
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	3301      	adds	r3, #1
 800ca66:	b29a      	uxth	r2, r3
 800ca68:	4b23      	ldr	r3, [pc, #140]	; (800caf8 <ip4_output_if_src+0x154>)
 800ca6a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d104      	bne.n	800ca7c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ca72:	4b22      	ldr	r3, [pc, #136]	; (800cafc <ip4_output_if_src+0x158>)
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	69fb      	ldr	r3, [r7, #28]
 800ca78:	60da      	str	r2, [r3, #12]
 800ca7a:	e003      	b.n	800ca84 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	681a      	ldr	r2, [r3, #0]
 800ca80:	69fb      	ldr	r3, [r7, #28]
 800ca82:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ca84:	69fb      	ldr	r3, [r7, #28]
 800ca86:	2200      	movs	r2, #0
 800ca88:	729a      	strb	r2, [r3, #10]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	72da      	strb	r2, [r3, #11]
 800ca8e:	e00f      	b.n	800cab0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	895b      	ldrh	r3, [r3, #10]
 800ca94:	2b13      	cmp	r3, #19
 800ca96:	d802      	bhi.n	800ca9e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ca98:	f06f 0301 	mvn.w	r3, #1
 800ca9c:	e020      	b.n	800cae0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	685b      	ldr	r3, [r3, #4]
 800caa2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800caaa:	f107 0314 	add.w	r3, r7, #20
 800caae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800cab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d00c      	beq.n	800cad2 <ip4_output_if_src+0x12e>
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	891a      	ldrh	r2, [r3, #8]
 800cabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cabe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d906      	bls.n	800cad2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800cac4:	687a      	ldr	r2, [r7, #4]
 800cac6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cac8:	68f8      	ldr	r0, [r7, #12]
 800caca:	f000 fd4d 	bl	800d568 <ip4_frag>
 800cace:	4603      	mov	r3, r0
 800cad0:	e006      	b.n	800cae0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800cad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cad4:	695b      	ldr	r3, [r3, #20]
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	68f9      	ldr	r1, [r7, #12]
 800cada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cadc:	4798      	blx	r3
 800cade:	4603      	mov	r3, r0
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3720      	adds	r7, #32
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	08018f1c 	.word	0x08018f1c
 800caec:	08018f94 	.word	0x08018f94
 800caf0:	08018fa0 	.word	0x08018fa0
 800caf4:	08018fc8 	.word	0x08018fc8
 800caf8:	24006766 	.word	0x24006766
 800cafc:	08018ff8 	.word	0x08018ff8

0800cb00 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb14:	d002      	beq.n	800cb1c <ip4_addr_isbroadcast_u32+0x1c>
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d101      	bne.n	800cb20 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e02a      	b.n	800cb76 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cb26:	f003 0302 	and.w	r3, r3, #2
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d101      	bne.n	800cb32 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	e021      	b.n	800cb76 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800cb32:	683b      	ldr	r3, [r7, #0]
 800cb34:	3304      	adds	r3, #4
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	687a      	ldr	r2, [r7, #4]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d101      	bne.n	800cb42 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	e019      	b.n	800cb76 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800cb42:	68fa      	ldr	r2, [r7, #12]
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	3304      	adds	r3, #4
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	405a      	eors	r2, r3
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	3308      	adds	r3, #8
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	4013      	ands	r3, r2
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d10d      	bne.n	800cb74 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cb58:	683b      	ldr	r3, [r7, #0]
 800cb5a:	3308      	adds	r3, #8
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	43da      	mvns	r2, r3
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800cb64:	683b      	ldr	r3, [r7, #0]
 800cb66:	3308      	adds	r3, #8
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d101      	bne.n	800cb74 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800cb70:	2301      	movs	r3, #1
 800cb72:	e000      	b.n	800cb76 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800cb74:	2300      	movs	r3, #0
  }
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3714      	adds	r7, #20
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
	...

0800cb84 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b084      	sub	sp, #16
 800cb88:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800cb8e:	4b12      	ldr	r3, [pc, #72]	; (800cbd8 <ip_reass_tmr+0x54>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800cb94:	e018      	b.n	800cbc8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	7fdb      	ldrb	r3, [r3, #31]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d00b      	beq.n	800cbb6 <ip_reass_tmr+0x32>
      r->timer--;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	7fdb      	ldrb	r3, [r3, #31]
 800cba2:	3b01      	subs	r3, #1
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	60fb      	str	r3, [r7, #12]
 800cbb4:	e008      	b.n	800cbc8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800cbc0:	68b9      	ldr	r1, [r7, #8]
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 f80a 	bl	800cbdc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d1e3      	bne.n	800cb96 <ip_reass_tmr+0x12>
    }
  }
}
 800cbce:	bf00      	nop
 800cbd0:	bf00      	nop
 800cbd2:	3710      	adds	r7, #16
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	bd80      	pop	{r7, pc}
 800cbd8:	24006768 	.word	0x24006768

0800cbdc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b088      	sub	sp, #32
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800cbea:	683a      	ldr	r2, [r7, #0]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d105      	bne.n	800cbfe <ip_reass_free_complete_datagram+0x22>
 800cbf2:	4b45      	ldr	r3, [pc, #276]	; (800cd08 <ip_reass_free_complete_datagram+0x12c>)
 800cbf4:	22ab      	movs	r2, #171	; 0xab
 800cbf6:	4945      	ldr	r1, [pc, #276]	; (800cd0c <ip_reass_free_complete_datagram+0x130>)
 800cbf8:	4845      	ldr	r0, [pc, #276]	; (800cd10 <ip_reass_free_complete_datagram+0x134>)
 800cbfa:	f009 fa3f 	bl	801607c <iprintf>
  if (prev != NULL) {
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00a      	beq.n	800cc1a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	687a      	ldr	r2, [r7, #4]
 800cc0a:	429a      	cmp	r2, r3
 800cc0c:	d005      	beq.n	800cc1a <ip_reass_free_complete_datagram+0x3e>
 800cc0e:	4b3e      	ldr	r3, [pc, #248]	; (800cd08 <ip_reass_free_complete_datagram+0x12c>)
 800cc10:	22ad      	movs	r2, #173	; 0xad
 800cc12:	4940      	ldr	r1, [pc, #256]	; (800cd14 <ip_reass_free_complete_datagram+0x138>)
 800cc14:	483e      	ldr	r0, [pc, #248]	; (800cd10 <ip_reass_free_complete_datagram+0x134>)
 800cc16:	f009 fa31 	bl	801607c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	889b      	ldrh	r3, [r3, #4]
 800cc26:	b29b      	uxth	r3, r3
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d12a      	bne.n	800cc82 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	6858      	ldr	r0, [r3, #4]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	3308      	adds	r3, #8
 800cc42:	2214      	movs	r2, #20
 800cc44:	4619      	mov	r1, r3
 800cc46:	f009 f9e9 	bl	801601c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800cc4a:	2101      	movs	r1, #1
 800cc4c:	69b8      	ldr	r0, [r7, #24]
 800cc4e:	f7ff fc3d 	bl	800c4cc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800cc52:	69b8      	ldr	r0, [r7, #24]
 800cc54:	f002 fa5c 	bl	800f110 <pbuf_clen>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cc5c:	8bfa      	ldrh	r2, [r7, #30]
 800cc5e:	8a7b      	ldrh	r3, [r7, #18]
 800cc60:	4413      	add	r3, r2
 800cc62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc66:	db05      	blt.n	800cc74 <ip_reass_free_complete_datagram+0x98>
 800cc68:	4b27      	ldr	r3, [pc, #156]	; (800cd08 <ip_reass_free_complete_datagram+0x12c>)
 800cc6a:	22bc      	movs	r2, #188	; 0xbc
 800cc6c:	492a      	ldr	r1, [pc, #168]	; (800cd18 <ip_reass_free_complete_datagram+0x13c>)
 800cc6e:	4828      	ldr	r0, [pc, #160]	; (800cd10 <ip_reass_free_complete_datagram+0x134>)
 800cc70:	f009 fa04 	bl	801607c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800cc74:	8bfa      	ldrh	r2, [r7, #30]
 800cc76:	8a7b      	ldrh	r3, [r7, #18]
 800cc78:	4413      	add	r3, r2
 800cc7a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800cc7c:	69b8      	ldr	r0, [r7, #24]
 800cc7e:	f002 f9b9 	bl	800eff4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800cc88:	e01f      	b.n	800ccca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800cc8a:	69bb      	ldr	r3, [r7, #24]
 800cc8c:	685b      	ldr	r3, [r3, #4]
 800cc8e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800cc9a:	68f8      	ldr	r0, [r7, #12]
 800cc9c:	f002 fa38 	bl	800f110 <pbuf_clen>
 800cca0:	4603      	mov	r3, r0
 800cca2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800cca4:	8bfa      	ldrh	r2, [r7, #30]
 800cca6:	8a7b      	ldrh	r3, [r7, #18]
 800cca8:	4413      	add	r3, r2
 800ccaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccae:	db05      	blt.n	800ccbc <ip_reass_free_complete_datagram+0xe0>
 800ccb0:	4b15      	ldr	r3, [pc, #84]	; (800cd08 <ip_reass_free_complete_datagram+0x12c>)
 800ccb2:	22cc      	movs	r2, #204	; 0xcc
 800ccb4:	4918      	ldr	r1, [pc, #96]	; (800cd18 <ip_reass_free_complete_datagram+0x13c>)
 800ccb6:	4816      	ldr	r0, [pc, #88]	; (800cd10 <ip_reass_free_complete_datagram+0x134>)
 800ccb8:	f009 f9e0 	bl	801607c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ccbc:	8bfa      	ldrh	r2, [r7, #30]
 800ccbe:	8a7b      	ldrh	r3, [r7, #18]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f002 f995 	bl	800eff4 <pbuf_free>
  while (p != NULL) {
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d1dc      	bne.n	800cc8a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ccd0:	6839      	ldr	r1, [r7, #0]
 800ccd2:	6878      	ldr	r0, [r7, #4]
 800ccd4:	f000 f8c2 	bl	800ce5c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ccd8:	4b10      	ldr	r3, [pc, #64]	; (800cd1c <ip_reass_free_complete_datagram+0x140>)
 800ccda:	881b      	ldrh	r3, [r3, #0]
 800ccdc:	8bfa      	ldrh	r2, [r7, #30]
 800ccde:	429a      	cmp	r2, r3
 800cce0:	d905      	bls.n	800ccee <ip_reass_free_complete_datagram+0x112>
 800cce2:	4b09      	ldr	r3, [pc, #36]	; (800cd08 <ip_reass_free_complete_datagram+0x12c>)
 800cce4:	22d2      	movs	r2, #210	; 0xd2
 800cce6:	490e      	ldr	r1, [pc, #56]	; (800cd20 <ip_reass_free_complete_datagram+0x144>)
 800cce8:	4809      	ldr	r0, [pc, #36]	; (800cd10 <ip_reass_free_complete_datagram+0x134>)
 800ccea:	f009 f9c7 	bl	801607c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ccee:	4b0b      	ldr	r3, [pc, #44]	; (800cd1c <ip_reass_free_complete_datagram+0x140>)
 800ccf0:	881a      	ldrh	r2, [r3, #0]
 800ccf2:	8bfb      	ldrh	r3, [r7, #30]
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	4b08      	ldr	r3, [pc, #32]	; (800cd1c <ip_reass_free_complete_datagram+0x140>)
 800ccfa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ccfc:	8bfb      	ldrh	r3, [r7, #30]
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3720      	adds	r7, #32
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	080190b0 	.word	0x080190b0
 800cd0c:	0801912c 	.word	0x0801912c
 800cd10:	08019138 	.word	0x08019138
 800cd14:	08019160 	.word	0x08019160
 800cd18:	08019174 	.word	0x08019174
 800cd1c:	2400676c 	.word	0x2400676c
 800cd20:	08019194 	.word	0x08019194

0800cd24 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b08a      	sub	sp, #40	; 0x28
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
 800cd2c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800cd32:	2300      	movs	r3, #0
 800cd34:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800cd36:	2300      	movs	r3, #0
 800cd38:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800cd42:	4b28      	ldr	r3, [pc, #160]	; (800cde4 <ip_reass_remove_oldest_datagram+0xc0>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800cd48:	e030      	b.n	800cdac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800cd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4c:	695a      	ldr	r2, [r3, #20]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d10c      	bne.n	800cd70 <ip_reass_remove_oldest_datagram+0x4c>
 800cd56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd58:	699a      	ldr	r2, [r3, #24]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d106      	bne.n	800cd70 <ip_reass_remove_oldest_datagram+0x4c>
 800cd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd64:	899a      	ldrh	r2, [r3, #12]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	889b      	ldrh	r3, [r3, #4]
 800cd6a:	b29b      	uxth	r3, r3
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d014      	beq.n	800cd9a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800cd70:	693b      	ldr	r3, [r7, #16]
 800cd72:	3301      	adds	r3, #1
 800cd74:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800cd76:	6a3b      	ldr	r3, [r7, #32]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d104      	bne.n	800cd86 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cd80:	69fb      	ldr	r3, [r7, #28]
 800cd82:	61bb      	str	r3, [r7, #24]
 800cd84:	e009      	b.n	800cd9a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800cd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd88:	7fda      	ldrb	r2, [r3, #31]
 800cd8a:	6a3b      	ldr	r3, [r7, #32]
 800cd8c:	7fdb      	ldrb	r3, [r3, #31]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d803      	bhi.n	800cd9a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800cd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd94:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cd96:	69fb      	ldr	r3, [r7, #28]
 800cd98:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800cd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d001      	beq.n	800cda6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800cda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800cda6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d1cb      	bne.n	800cd4a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800cdb2:	6a3b      	ldr	r3, [r7, #32]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d008      	beq.n	800cdca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800cdb8:	69b9      	ldr	r1, [r7, #24]
 800cdba:	6a38      	ldr	r0, [r7, #32]
 800cdbc:	f7ff ff0e 	bl	800cbdc <ip_reass_free_complete_datagram>
 800cdc0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	4413      	add	r3, r2
 800cdc8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800cdca:	697a      	ldr	r2, [r7, #20]
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	da02      	bge.n	800cdd8 <ip_reass_remove_oldest_datagram+0xb4>
 800cdd2:	693b      	ldr	r3, [r7, #16]
 800cdd4:	2b01      	cmp	r3, #1
 800cdd6:	dcac      	bgt.n	800cd32 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800cdd8:	697b      	ldr	r3, [r7, #20]
}
 800cdda:	4618      	mov	r0, r3
 800cddc:	3728      	adds	r7, #40	; 0x28
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	24006768 	.word	0x24006768

0800cde8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cdf2:	2004      	movs	r0, #4
 800cdf4:	f001 fa40 	bl	800e278 <memp_malloc>
 800cdf8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d110      	bne.n	800ce22 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ce00:	6839      	ldr	r1, [r7, #0]
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7ff ff8e 	bl	800cd24 <ip_reass_remove_oldest_datagram>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	dc03      	bgt.n	800ce18 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ce10:	2004      	movs	r0, #4
 800ce12:	f001 fa31 	bl	800e278 <memp_malloc>
 800ce16:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d101      	bne.n	800ce22 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e016      	b.n	800ce50 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ce22:	2220      	movs	r2, #32
 800ce24:	2100      	movs	r1, #0
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f009 f920 	bl	801606c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	220f      	movs	r2, #15
 800ce30:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800ce32:	4b09      	ldr	r3, [pc, #36]	; (800ce58 <ip_reass_enqueue_new_datagram+0x70>)
 800ce34:	681a      	ldr	r2, [r3, #0]
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800ce3a:	4a07      	ldr	r2, [pc, #28]	; (800ce58 <ip_reass_enqueue_new_datagram+0x70>)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	3308      	adds	r3, #8
 800ce44:	2214      	movs	r2, #20
 800ce46:	6879      	ldr	r1, [r7, #4]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f009 f8e7 	bl	801601c <memcpy>
  return ipr;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
}
 800ce50:	4618      	mov	r0, r3
 800ce52:	3710      	adds	r7, #16
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}
 800ce58:	24006768 	.word	0x24006768

0800ce5c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b082      	sub	sp, #8
 800ce60:	af00      	add	r7, sp, #0
 800ce62:	6078      	str	r0, [r7, #4]
 800ce64:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800ce66:	4b10      	ldr	r3, [pc, #64]	; (800cea8 <ip_reass_dequeue_datagram+0x4c>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	687a      	ldr	r2, [r7, #4]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d104      	bne.n	800ce7a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	4a0c      	ldr	r2, [pc, #48]	; (800cea8 <ip_reass_dequeue_datagram+0x4c>)
 800ce76:	6013      	str	r3, [r2, #0]
 800ce78:	e00d      	b.n	800ce96 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d106      	bne.n	800ce8e <ip_reass_dequeue_datagram+0x32>
 800ce80:	4b0a      	ldr	r3, [pc, #40]	; (800ceac <ip_reass_dequeue_datagram+0x50>)
 800ce82:	f240 1245 	movw	r2, #325	; 0x145
 800ce86:	490a      	ldr	r1, [pc, #40]	; (800ceb0 <ip_reass_dequeue_datagram+0x54>)
 800ce88:	480a      	ldr	r0, [pc, #40]	; (800ceb4 <ip_reass_dequeue_datagram+0x58>)
 800ce8a:	f009 f8f7 	bl	801607c <iprintf>
    prev->next = ipr->next;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681a      	ldr	r2, [r3, #0]
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800ce96:	6879      	ldr	r1, [r7, #4]
 800ce98:	2004      	movs	r0, #4
 800ce9a:	f001 fa63 	bl	800e364 <memp_free>
}
 800ce9e:	bf00      	nop
 800cea0:	3708      	adds	r7, #8
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	bf00      	nop
 800cea8:	24006768 	.word	0x24006768
 800ceac:	080190b0 	.word	0x080190b0
 800ceb0:	080191b8 	.word	0x080191b8
 800ceb4:	08019138 	.word	0x08019138

0800ceb8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b08c      	sub	sp, #48	; 0x30
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	60f8      	str	r0, [r7, #12]
 800cec0:	60b9      	str	r1, [r7, #8]
 800cec2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800cec4:	2300      	movs	r3, #0
 800cec6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800cec8:	2301      	movs	r3, #1
 800ceca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	885b      	ldrh	r3, [r3, #2]
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	4618      	mov	r0, r3
 800ceda:	f000 fc8b 	bl	800d7f4 <lwip_htons>
 800cede:	4603      	mov	r3, r0
 800cee0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	781b      	ldrb	r3, [r3, #0]
 800cee6:	f003 030f 	and.w	r3, r3, #15
 800ceea:	b2db      	uxtb	r3, r3
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800cef0:	7e7b      	ldrb	r3, [r7, #25]
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	8b7a      	ldrh	r2, [r7, #26]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d202      	bcs.n	800cf00 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cefa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cefe:	e135      	b.n	800d16c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800cf00:	7e7b      	ldrb	r3, [r7, #25]
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	8b7a      	ldrh	r2, [r7, #26]
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	88db      	ldrh	r3, [r3, #6]
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	4618      	mov	r0, r3
 800cf12:	f000 fc6f 	bl	800d7f4 <lwip_htons>
 800cf16:	4603      	mov	r3, r0
 800cf18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf1c:	b29b      	uxth	r3, r3
 800cf1e:	00db      	lsls	r3, r3, #3
 800cf20:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	685b      	ldr	r3, [r3, #4]
 800cf26:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800cf28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	701a      	strb	r2, [r3, #0]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	705a      	strb	r2, [r3, #1]
 800cf32:	2200      	movs	r2, #0
 800cf34:	709a      	strb	r2, [r3, #2]
 800cf36:	2200      	movs	r2, #0
 800cf38:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800cf3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf3c:	8afa      	ldrh	r2, [r7, #22]
 800cf3e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800cf40:	8afa      	ldrh	r2, [r7, #22]
 800cf42:	8b7b      	ldrh	r3, [r7, #26]
 800cf44:	4413      	add	r3, r2
 800cf46:	b29a      	uxth	r2, r3
 800cf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800cf4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4e:	88db      	ldrh	r3, [r3, #6]
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	8afa      	ldrh	r2, [r7, #22]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d902      	bls.n	800cf5e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cf58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf5c:	e106      	b.n	800d16c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	685b      	ldr	r3, [r3, #4]
 800cf62:	627b      	str	r3, [r7, #36]	; 0x24
 800cf64:	e068      	b.n	800d038 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800cf66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf68:	685b      	ldr	r3, [r3, #4]
 800cf6a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800cf6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf6e:	889b      	ldrh	r3, [r3, #4]
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	693b      	ldr	r3, [r7, #16]
 800cf74:	889b      	ldrh	r3, [r3, #4]
 800cf76:	b29b      	uxth	r3, r3
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d235      	bcs.n	800cfe8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800cf7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf80:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800cf82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d020      	beq.n	800cfca <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800cf88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf8a:	889b      	ldrh	r3, [r3, #4]
 800cf8c:	b29a      	uxth	r2, r3
 800cf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf90:	88db      	ldrh	r3, [r3, #6]
 800cf92:	b29b      	uxth	r3, r3
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d307      	bcc.n	800cfa8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800cf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf9a:	88db      	ldrh	r3, [r3, #6]
 800cf9c:	b29a      	uxth	r2, r3
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	889b      	ldrh	r3, [r3, #4]
 800cfa2:	b29b      	uxth	r3, r3
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d902      	bls.n	800cfae <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cfa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfac:	e0de      	b.n	800d16c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800cfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb0:	68ba      	ldr	r2, [r7, #8]
 800cfb2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800cfb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb6:	88db      	ldrh	r3, [r3, #6]
 800cfb8:	b29a      	uxth	r2, r3
 800cfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbc:	889b      	ldrh	r3, [r3, #4]
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d03d      	beq.n	800d040 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800cfc8:	e03a      	b.n	800d040 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800cfca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfcc:	88db      	ldrh	r3, [r3, #6]
 800cfce:	b29a      	uxth	r2, r3
 800cfd0:	693b      	ldr	r3, [r7, #16]
 800cfd2:	889b      	ldrh	r3, [r3, #4]
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d902      	bls.n	800cfe0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cfda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cfde:	e0c5      	b.n	800d16c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	68ba      	ldr	r2, [r7, #8]
 800cfe4:	605a      	str	r2, [r3, #4]
      break;
 800cfe6:	e02b      	b.n	800d040 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	889b      	ldrh	r3, [r3, #4]
 800cfec:	b29a      	uxth	r2, r3
 800cfee:	693b      	ldr	r3, [r7, #16]
 800cff0:	889b      	ldrh	r3, [r3, #4]
 800cff2:	b29b      	uxth	r3, r3
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d102      	bne.n	800cffe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cffc:	e0b6      	b.n	800d16c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	889b      	ldrh	r3, [r3, #4]
 800d002:	b29a      	uxth	r2, r3
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	88db      	ldrh	r3, [r3, #6]
 800d008:	b29b      	uxth	r3, r3
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d202      	bcs.n	800d014 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800d00e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d012:	e0ab      	b.n	800d16c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800d014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d016:	2b00      	cmp	r3, #0
 800d018:	d009      	beq.n	800d02e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800d01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01c:	88db      	ldrh	r3, [r3, #6]
 800d01e:	b29a      	uxth	r2, r3
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	889b      	ldrh	r3, [r3, #4]
 800d024:	b29b      	uxth	r3, r3
 800d026:	429a      	cmp	r2, r3
 800d028:	d001      	beq.n	800d02e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800d02a:	2300      	movs	r3, #0
 800d02c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800d034:	693b      	ldr	r3, [r7, #16]
 800d036:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800d038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d193      	bne.n	800cf66 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800d03e:	e000      	b.n	800d042 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800d040:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800d042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d044:	2b00      	cmp	r3, #0
 800d046:	d12d      	bne.n	800d0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800d048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d01c      	beq.n	800d088 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800d04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d050:	88db      	ldrh	r3, [r3, #6]
 800d052:	b29a      	uxth	r2, r3
 800d054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d056:	889b      	ldrh	r3, [r3, #4]
 800d058:	b29b      	uxth	r3, r3
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d906      	bls.n	800d06c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800d05e:	4b45      	ldr	r3, [pc, #276]	; (800d174 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d060:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800d064:	4944      	ldr	r1, [pc, #272]	; (800d178 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800d066:	4845      	ldr	r0, [pc, #276]	; (800d17c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d068:	f009 f808 	bl	801607c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800d06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06e:	68ba      	ldr	r2, [r7, #8]
 800d070:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d074:	88db      	ldrh	r3, [r3, #6]
 800d076:	b29a      	uxth	r2, r3
 800d078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d07a:	889b      	ldrh	r3, [r3, #4]
 800d07c:	b29b      	uxth	r3, r3
 800d07e:	429a      	cmp	r2, r3
 800d080:	d010      	beq.n	800d0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800d082:	2300      	movs	r3, #0
 800d084:	623b      	str	r3, [r7, #32]
 800d086:	e00d      	b.n	800d0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d006      	beq.n	800d09e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800d090:	4b38      	ldr	r3, [pc, #224]	; (800d174 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d092:	f44f 72df 	mov.w	r2, #446	; 0x1be
 800d096:	493a      	ldr	r1, [pc, #232]	; (800d180 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800d098:	4838      	ldr	r0, [pc, #224]	; (800d17c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d09a:	f008 ffef 	bl	801607c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	68ba      	ldr	r2, [r7, #8]
 800d0a2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d105      	bne.n	800d0b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	7f9b      	ldrb	r3, [r3, #30]
 800d0ae:	f003 0301 	and.w	r3, r3, #1
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d059      	beq.n	800d16a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800d0b6:	6a3b      	ldr	r3, [r7, #32]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d04f      	beq.n	800d15c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d006      	beq.n	800d0d2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	889b      	ldrh	r3, [r3, #4]
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d002      	beq.n	800d0d8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	623b      	str	r3, [r7, #32]
 800d0d6:	e041      	b.n	800d15c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800d0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0da:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800d0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d0e2:	e012      	b.n	800d10a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e6:	685b      	ldr	r3, [r3, #4]
 800d0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800d0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ec:	88db      	ldrh	r3, [r3, #6]
 800d0ee:	b29a      	uxth	r2, r3
 800d0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f2:	889b      	ldrh	r3, [r3, #4]
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d002      	beq.n	800d100 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	623b      	str	r3, [r7, #32]
            break;
 800d0fe:	e007      	b.n	800d110 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800d100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d102:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800d104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800d10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d1e9      	bne.n	800d0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d022      	beq.n	800d15c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d106      	bne.n	800d12c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800d11e:	4b15      	ldr	r3, [pc, #84]	; (800d174 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d120:	f240 12df 	movw	r2, #479	; 0x1df
 800d124:	4917      	ldr	r1, [pc, #92]	; (800d184 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d126:	4815      	ldr	r0, [pc, #84]	; (800d17c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d128:	f008 ffa8 	bl	801607c <iprintf>
          LWIP_ASSERT("sanity check",
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d134:	429a      	cmp	r2, r3
 800d136:	d106      	bne.n	800d146 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800d138:	4b0e      	ldr	r3, [pc, #56]	; (800d174 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d13a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d13e:	4911      	ldr	r1, [pc, #68]	; (800d184 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800d140:	480e      	ldr	r0, [pc, #56]	; (800d17c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d142:	f008 ff9b 	bl	801607c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800d146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d006      	beq.n	800d15c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800d14e:	4b09      	ldr	r3, [pc, #36]	; (800d174 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800d150:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 800d154:	490c      	ldr	r1, [pc, #48]	; (800d188 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800d156:	4809      	ldr	r0, [pc, #36]	; (800d17c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800d158:	f008 ff90 	bl	801607c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800d15c:	6a3b      	ldr	r3, [r7, #32]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	bf14      	ite	ne
 800d162:	2301      	movne	r3, #1
 800d164:	2300      	moveq	r3, #0
 800d166:	b2db      	uxtb	r3, r3
 800d168:	e000      	b.n	800d16c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3730      	adds	r7, #48	; 0x30
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	080190b0 	.word	0x080190b0
 800d178:	080191d4 	.word	0x080191d4
 800d17c:	08019138 	.word	0x08019138
 800d180:	080191f4 	.word	0x080191f4
 800d184:	0801922c 	.word	0x0801922c
 800d188:	0801923c 	.word	0x0801923c

0800d18c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b08e      	sub	sp, #56	; 0x38
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	781b      	ldrb	r3, [r3, #0]
 800d19e:	f003 030f 	and.w	r3, r3, #15
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b14      	cmp	r3, #20
 800d1aa:	f040 8167 	bne.w	800d47c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800d1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b0:	88db      	ldrh	r3, [r3, #6]
 800d1b2:	b29b      	uxth	r3, r3
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f000 fb1d 	bl	800d7f4 <lwip_htons>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1c0:	b29b      	uxth	r3, r3
 800d1c2:	00db      	lsls	r3, r3, #3
 800d1c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800d1c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1c8:	885b      	ldrh	r3, [r3, #2]
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f000 fb11 	bl	800d7f4 <lwip_htons>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	f003 030f 	and.w	r3, r3, #15
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800d1e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d1ea:	b29b      	uxth	r3, r3
 800d1ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	f0c0 8146 	bcc.w	800d480 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800d1f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1fc:	1ad3      	subs	r3, r2, r3
 800d1fe:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f001 ff85 	bl	800f110 <pbuf_clen>
 800d206:	4603      	mov	r3, r0
 800d208:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800d20a:	4b9f      	ldr	r3, [pc, #636]	; (800d488 <ip4_reass+0x2fc>)
 800d20c:	881b      	ldrh	r3, [r3, #0]
 800d20e:	461a      	mov	r2, r3
 800d210:	8c3b      	ldrh	r3, [r7, #32]
 800d212:	4413      	add	r3, r2
 800d214:	2b0a      	cmp	r3, #10
 800d216:	dd10      	ble.n	800d23a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d218:	8c3b      	ldrh	r3, [r7, #32]
 800d21a:	4619      	mov	r1, r3
 800d21c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d21e:	f7ff fd81 	bl	800cd24 <ip_reass_remove_oldest_datagram>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	f000 812d 	beq.w	800d484 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800d22a:	4b97      	ldr	r3, [pc, #604]	; (800d488 <ip4_reass+0x2fc>)
 800d22c:	881b      	ldrh	r3, [r3, #0]
 800d22e:	461a      	mov	r2, r3
 800d230:	8c3b      	ldrh	r3, [r7, #32]
 800d232:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800d234:	2b0a      	cmp	r3, #10
 800d236:	f300 8125 	bgt.w	800d484 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d23a:	4b94      	ldr	r3, [pc, #592]	; (800d48c <ip4_reass+0x300>)
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	633b      	str	r3, [r7, #48]	; 0x30
 800d240:	e015      	b.n	800d26e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800d242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d244:	695a      	ldr	r2, [r3, #20]
 800d246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d10c      	bne.n	800d268 <ip4_reass+0xdc>
 800d24e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d250:	699a      	ldr	r2, [r3, #24]
 800d252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d254:	691b      	ldr	r3, [r3, #16]
 800d256:	429a      	cmp	r2, r3
 800d258:	d106      	bne.n	800d268 <ip4_reass+0xdc>
 800d25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25c:	899a      	ldrh	r2, [r3, #12]
 800d25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d260:	889b      	ldrh	r3, [r3, #4]
 800d262:	b29b      	uxth	r3, r3
 800d264:	429a      	cmp	r2, r3
 800d266:	d006      	beq.n	800d276 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800d268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	633b      	str	r3, [r7, #48]	; 0x30
 800d26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d270:	2b00      	cmp	r3, #0
 800d272:	d1e6      	bne.n	800d242 <ip4_reass+0xb6>
 800d274:	e000      	b.n	800d278 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800d276:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800d278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d109      	bne.n	800d292 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800d27e:	8c3b      	ldrh	r3, [r7, #32]
 800d280:	4619      	mov	r1, r3
 800d282:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d284:	f7ff fdb0 	bl	800cde8 <ip_reass_enqueue_new_datagram>
 800d288:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d28a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d11c      	bne.n	800d2ca <ip4_reass+0x13e>
      goto nullreturn;
 800d290:	e109      	b.n	800d4a6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d294:	88db      	ldrh	r3, [r3, #6]
 800d296:	b29b      	uxth	r3, r3
 800d298:	4618      	mov	r0, r3
 800d29a:	f000 faab 	bl	800d7f4 <lwip_htons>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d110      	bne.n	800d2ca <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2aa:	89db      	ldrh	r3, [r3, #14]
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f000 faa1 	bl	800d7f4 <lwip_htons>
 800d2b2:	4603      	mov	r3, r0
 800d2b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d006      	beq.n	800d2ca <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2be:	3308      	adds	r3, #8
 800d2c0:	2214      	movs	r2, #20
 800d2c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	f008 fea9 	bl	801601c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2cc:	88db      	ldrh	r3, [r3, #6]
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	f003 0320 	and.w	r3, r3, #32
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	bf0c      	ite	eq
 800d2d8:	2301      	moveq	r3, #1
 800d2da:	2300      	movne	r3, #0
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d00e      	beq.n	800d304 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d2e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d2e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2ea:	4413      	add	r3, r2
 800d2ec:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d2ee:	8b7a      	ldrh	r2, [r7, #26]
 800d2f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d2f2:	429a      	cmp	r2, r3
 800d2f4:	f0c0 80a0 	bcc.w	800d438 <ip4_reass+0x2ac>
 800d2f8:	8b7b      	ldrh	r3, [r7, #26]
 800d2fa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800d2fe:	4293      	cmp	r3, r2
 800d300:	f200 809a 	bhi.w	800d438 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d304:	69fa      	ldr	r2, [r7, #28]
 800d306:	6879      	ldr	r1, [r7, #4]
 800d308:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d30a:	f7ff fdd5 	bl	800ceb8 <ip_reass_chain_frag_into_datagram_and_validate>
 800d30e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d316:	f000 8091 	beq.w	800d43c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d31a:	4b5b      	ldr	r3, [pc, #364]	; (800d488 <ip4_reass+0x2fc>)
 800d31c:	881a      	ldrh	r2, [r3, #0]
 800d31e:	8c3b      	ldrh	r3, [r7, #32]
 800d320:	4413      	add	r3, r2
 800d322:	b29a      	uxth	r2, r3
 800d324:	4b58      	ldr	r3, [pc, #352]	; (800d488 <ip4_reass+0x2fc>)
 800d326:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d00d      	beq.n	800d34a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d32e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d332:	4413      	add	r3, r2
 800d334:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d338:	8a7a      	ldrh	r2, [r7, #18]
 800d33a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d33e:	7f9b      	ldrb	r3, [r3, #30]
 800d340:	f043 0301 	orr.w	r3, r3, #1
 800d344:	b2da      	uxtb	r2, r3
 800d346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d348:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	d171      	bne.n	800d434 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d352:	8b9b      	ldrh	r3, [r3, #28]
 800d354:	3314      	adds	r3, #20
 800d356:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d36a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d36c:	3308      	adds	r3, #8
 800d36e:	2214      	movs	r2, #20
 800d370:	4619      	mov	r1, r3
 800d372:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d374:	f008 fe52 	bl	801601c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d378:	8a3b      	ldrh	r3, [r7, #16]
 800d37a:	4618      	mov	r0, r3
 800d37c:	f000 fa3a 	bl	800d7f4 <lwip_htons>
 800d380:	4603      	mov	r3, r0
 800d382:	461a      	mov	r2, r3
 800d384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d386:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d38a:	2200      	movs	r2, #0
 800d38c:	719a      	strb	r2, [r3, #6]
 800d38e:	2200      	movs	r2, #0
 800d390:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d394:	2200      	movs	r2, #0
 800d396:	729a      	strb	r2, [r3, #10]
 800d398:	2200      	movs	r2, #0
 800d39a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d3a2:	e00d      	b.n	800d3c0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d3aa:	2114      	movs	r1, #20
 800d3ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d3ae:	f001 fd9b 	bl	800eee8 <pbuf_remove_header>
      pbuf_cat(p, r);
 800d3b2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f001 feeb 	bl	800f190 <pbuf_cat>
      r = iprh->next_pbuf;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800d3c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d1ee      	bne.n	800d3a4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d3c6:	4b31      	ldr	r3, [pc, #196]	; (800d48c <ip4_reass+0x300>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d102      	bne.n	800d3d6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3d4:	e010      	b.n	800d3f8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d3d6:	4b2d      	ldr	r3, [pc, #180]	; (800d48c <ip4_reass+0x300>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3dc:	e007      	b.n	800d3ee <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3e4:	429a      	cmp	r2, r3
 800d3e6:	d006      	beq.n	800d3f6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d3e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1f4      	bne.n	800d3de <ip4_reass+0x252>
 800d3f4:	e000      	b.n	800d3f8 <ip4_reass+0x26c>
          break;
 800d3f6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d3f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d3fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d3fc:	f7ff fd2e 	bl	800ce5c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d400:	6878      	ldr	r0, [r7, #4]
 800d402:	f001 fe85 	bl	800f110 <pbuf_clen>
 800d406:	4603      	mov	r3, r0
 800d408:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d40a:	4b1f      	ldr	r3, [pc, #124]	; (800d488 <ip4_reass+0x2fc>)
 800d40c:	881b      	ldrh	r3, [r3, #0]
 800d40e:	8c3a      	ldrh	r2, [r7, #32]
 800d410:	429a      	cmp	r2, r3
 800d412:	d906      	bls.n	800d422 <ip4_reass+0x296>
 800d414:	4b1e      	ldr	r3, [pc, #120]	; (800d490 <ip4_reass+0x304>)
 800d416:	f240 229b 	movw	r2, #667	; 0x29b
 800d41a:	491e      	ldr	r1, [pc, #120]	; (800d494 <ip4_reass+0x308>)
 800d41c:	481e      	ldr	r0, [pc, #120]	; (800d498 <ip4_reass+0x30c>)
 800d41e:	f008 fe2d 	bl	801607c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d422:	4b19      	ldr	r3, [pc, #100]	; (800d488 <ip4_reass+0x2fc>)
 800d424:	881a      	ldrh	r2, [r3, #0]
 800d426:	8c3b      	ldrh	r3, [r7, #32]
 800d428:	1ad3      	subs	r3, r2, r3
 800d42a:	b29a      	uxth	r2, r3
 800d42c:	4b16      	ldr	r3, [pc, #88]	; (800d488 <ip4_reass+0x2fc>)
 800d42e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	e03c      	b.n	800d4ae <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d434:	2300      	movs	r3, #0
 800d436:	e03a      	b.n	800d4ae <ip4_reass+0x322>
      goto nullreturn_ipr;
 800d438:	bf00      	nop
 800d43a:	e000      	b.n	800d43e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800d43c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d440:	2b00      	cmp	r3, #0
 800d442:	d106      	bne.n	800d452 <ip4_reass+0x2c6>
 800d444:	4b12      	ldr	r3, [pc, #72]	; (800d490 <ip4_reass+0x304>)
 800d446:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800d44a:	4914      	ldr	r1, [pc, #80]	; (800d49c <ip4_reass+0x310>)
 800d44c:	4812      	ldr	r0, [pc, #72]	; (800d498 <ip4_reass+0x30c>)
 800d44e:	f008 fe15 	bl	801607c <iprintf>
  if (ipr->p == NULL) {
 800d452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d454:	685b      	ldr	r3, [r3, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d124      	bne.n	800d4a4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d45a:	4b0c      	ldr	r3, [pc, #48]	; (800d48c <ip4_reass+0x300>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d460:	429a      	cmp	r2, r3
 800d462:	d006      	beq.n	800d472 <ip4_reass+0x2e6>
 800d464:	4b0a      	ldr	r3, [pc, #40]	; (800d490 <ip4_reass+0x304>)
 800d466:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d46a:	490d      	ldr	r1, [pc, #52]	; (800d4a0 <ip4_reass+0x314>)
 800d46c:	480a      	ldr	r0, [pc, #40]	; (800d498 <ip4_reass+0x30c>)
 800d46e:	f008 fe05 	bl	801607c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d472:	2100      	movs	r1, #0
 800d474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d476:	f7ff fcf1 	bl	800ce5c <ip_reass_dequeue_datagram>
 800d47a:	e014      	b.n	800d4a6 <ip4_reass+0x31a>
    goto nullreturn;
 800d47c:	bf00      	nop
 800d47e:	e012      	b.n	800d4a6 <ip4_reass+0x31a>
    goto nullreturn;
 800d480:	bf00      	nop
 800d482:	e010      	b.n	800d4a6 <ip4_reass+0x31a>
      goto nullreturn;
 800d484:	bf00      	nop
 800d486:	e00e      	b.n	800d4a6 <ip4_reass+0x31a>
 800d488:	2400676c 	.word	0x2400676c
 800d48c:	24006768 	.word	0x24006768
 800d490:	080190b0 	.word	0x080190b0
 800d494:	08019260 	.word	0x08019260
 800d498:	08019138 	.word	0x08019138
 800d49c:	0801927c 	.word	0x0801927c
 800d4a0:	08019288 	.word	0x08019288
  }

nullreturn:
 800d4a4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d4a6:	6878      	ldr	r0, [r7, #4]
 800d4a8:	f001 fda4 	bl	800eff4 <pbuf_free>
  return NULL;
 800d4ac:	2300      	movs	r3, #0
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3738      	adds	r7, #56	; 0x38
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop

0800d4b8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d4bc:	2005      	movs	r0, #5
 800d4be:	f000 fedb 	bl	800e278 <memp_malloc>
 800d4c2:	4603      	mov	r3, r0
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b082      	sub	sp, #8
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d106      	bne.n	800d4e4 <ip_frag_free_pbuf_custom_ref+0x1c>
 800d4d6:	4b07      	ldr	r3, [pc, #28]	; (800d4f4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d4d8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800d4dc:	4906      	ldr	r1, [pc, #24]	; (800d4f8 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d4de:	4807      	ldr	r0, [pc, #28]	; (800d4fc <ip_frag_free_pbuf_custom_ref+0x34>)
 800d4e0:	f008 fdcc 	bl	801607c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d4e4:	6879      	ldr	r1, [r7, #4]
 800d4e6:	2005      	movs	r0, #5
 800d4e8:	f000 ff3c 	bl	800e364 <memp_free>
}
 800d4ec:	bf00      	nop
 800d4ee:	3708      	adds	r7, #8
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}
 800d4f4:	080190b0 	.word	0x080190b0
 800d4f8:	080192a8 	.word	0x080192a8
 800d4fc:	08019138 	.word	0x08019138

0800d500 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d106      	bne.n	800d520 <ipfrag_free_pbuf_custom+0x20>
 800d512:	4b11      	ldr	r3, [pc, #68]	; (800d558 <ipfrag_free_pbuf_custom+0x58>)
 800d514:	f240 22ce 	movw	r2, #718	; 0x2ce
 800d518:	4910      	ldr	r1, [pc, #64]	; (800d55c <ipfrag_free_pbuf_custom+0x5c>)
 800d51a:	4811      	ldr	r0, [pc, #68]	; (800d560 <ipfrag_free_pbuf_custom+0x60>)
 800d51c:	f008 fdae 	bl	801607c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	429a      	cmp	r2, r3
 800d526:	d006      	beq.n	800d536 <ipfrag_free_pbuf_custom+0x36>
 800d528:	4b0b      	ldr	r3, [pc, #44]	; (800d558 <ipfrag_free_pbuf_custom+0x58>)
 800d52a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800d52e:	490d      	ldr	r1, [pc, #52]	; (800d564 <ipfrag_free_pbuf_custom+0x64>)
 800d530:	480b      	ldr	r0, [pc, #44]	; (800d560 <ipfrag_free_pbuf_custom+0x60>)
 800d532:	f008 fda3 	bl	801607c <iprintf>
  if (pcr->original != NULL) {
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	695b      	ldr	r3, [r3, #20]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d004      	beq.n	800d548 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	695b      	ldr	r3, [r3, #20]
 800d542:	4618      	mov	r0, r3
 800d544:	f001 fd56 	bl	800eff4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f7ff ffbd 	bl	800d4c8 <ip_frag_free_pbuf_custom_ref>
}
 800d54e:	bf00      	nop
 800d550:	3710      	adds	r7, #16
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	080190b0 	.word	0x080190b0
 800d55c:	080192b4 	.word	0x080192b4
 800d560:	08019138 	.word	0x08019138
 800d564:	080192c0 	.word	0x080192c0

0800d568 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b094      	sub	sp, #80	; 0x50
 800d56c:	af02      	add	r7, sp, #8
 800d56e:	60f8      	str	r0, [r7, #12]
 800d570:	60b9      	str	r1, [r7, #8]
 800d572:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d574:	2300      	movs	r3, #0
 800d576:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d57e:	3b14      	subs	r3, #20
 800d580:	2b00      	cmp	r3, #0
 800d582:	da00      	bge.n	800d586 <ip4_frag+0x1e>
 800d584:	3307      	adds	r3, #7
 800d586:	10db      	asrs	r3, r3, #3
 800d588:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d58a:	2314      	movs	r3, #20
 800d58c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	685b      	ldr	r3, [r3, #4]
 800d592:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800d594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d596:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d59a:	781b      	ldrb	r3, [r3, #0]
 800d59c:	f003 030f 	and.w	r3, r3, #15
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	009b      	lsls	r3, r3, #2
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	2b14      	cmp	r3, #20
 800d5a8:	d002      	beq.n	800d5b0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800d5aa:	f06f 0305 	mvn.w	r3, #5
 800d5ae:	e110      	b.n	800d7d2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	895b      	ldrh	r3, [r3, #10]
 800d5b4:	2b13      	cmp	r3, #19
 800d5b6:	d809      	bhi.n	800d5cc <ip4_frag+0x64>
 800d5b8:	4b88      	ldr	r3, [pc, #544]	; (800d7dc <ip4_frag+0x274>)
 800d5ba:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800d5be:	4988      	ldr	r1, [pc, #544]	; (800d7e0 <ip4_frag+0x278>)
 800d5c0:	4888      	ldr	r0, [pc, #544]	; (800d7e4 <ip4_frag+0x27c>)
 800d5c2:	f008 fd5b 	bl	801607c <iprintf>
 800d5c6:	f06f 0305 	mvn.w	r3, #5
 800d5ca:	e102      	b.n	800d7d2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ce:	88db      	ldrh	r3, [r3, #6]
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f000 f90e 	bl	800d7f4 <lwip_htons>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800d5dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d5de:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d5e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800d5e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d5e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d5ec:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	891b      	ldrh	r3, [r3, #8]
 800d5f2:	3b14      	subs	r3, #20
 800d5f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800d5f8:	e0e1      	b.n	800d7be <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d5fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d604:	4293      	cmp	r3, r2
 800d606:	bf28      	it	cs
 800d608:	4613      	movcs	r3, r2
 800d60a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d60c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d610:	2114      	movs	r1, #20
 800d612:	200e      	movs	r0, #14
 800d614:	f001 fa0c 	bl	800ea30 <pbuf_alloc>
 800d618:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800d61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	f000 80d5 	beq.w	800d7cc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d624:	895b      	ldrh	r3, [r3, #10]
 800d626:	2b13      	cmp	r3, #19
 800d628:	d806      	bhi.n	800d638 <ip4_frag+0xd0>
 800d62a:	4b6c      	ldr	r3, [pc, #432]	; (800d7dc <ip4_frag+0x274>)
 800d62c:	f44f 7249 	mov.w	r2, #804	; 0x324
 800d630:	496d      	ldr	r1, [pc, #436]	; (800d7e8 <ip4_frag+0x280>)
 800d632:	486c      	ldr	r0, [pc, #432]	; (800d7e4 <ip4_frag+0x27c>)
 800d634:	f008 fd22 	bl	801607c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63a:	685b      	ldr	r3, [r3, #4]
 800d63c:	2214      	movs	r2, #20
 800d63e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d640:	4618      	mov	r0, r3
 800d642:	f008 fceb 	bl	801601c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800d64c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d64e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800d652:	e064      	b.n	800d71e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	895a      	ldrh	r2, [r3, #10]
 800d658:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d65a:	1ad3      	subs	r3, r2, r3
 800d65c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	895b      	ldrh	r3, [r3, #10]
 800d662:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d664:	429a      	cmp	r2, r3
 800d666:	d906      	bls.n	800d676 <ip4_frag+0x10e>
 800d668:	4b5c      	ldr	r3, [pc, #368]	; (800d7dc <ip4_frag+0x274>)
 800d66a:	f240 322d 	movw	r2, #813	; 0x32d
 800d66e:	495f      	ldr	r1, [pc, #380]	; (800d7ec <ip4_frag+0x284>)
 800d670:	485c      	ldr	r0, [pc, #368]	; (800d7e4 <ip4_frag+0x27c>)
 800d672:	f008 fd03 	bl	801607c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d676:	8bfa      	ldrh	r2, [r7, #30]
 800d678:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d67c:	4293      	cmp	r3, r2
 800d67e:	bf28      	it	cs
 800d680:	4613      	movcs	r3, r2
 800d682:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d686:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d105      	bne.n	800d69a <ip4_frag+0x132>
        poff = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	60fb      	str	r3, [r7, #12]
        continue;
 800d698:	e041      	b.n	800d71e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d69a:	f7ff ff0d 	bl	800d4b8 <ip_frag_alloc_pbuf_custom_ref>
 800d69e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d103      	bne.n	800d6ae <ip4_frag+0x146>
        pbuf_free(rambuf);
 800d6a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6a8:	f001 fca4 	bl	800eff4 <pbuf_free>
        goto memerr;
 800d6ac:	e08f      	b.n	800d7ce <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d6ae:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d6b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800d6b6:	4413      	add	r3, r2
 800d6b8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800d6bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800d6c0:	9201      	str	r2, [sp, #4]
 800d6c2:	9300      	str	r3, [sp, #0]
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2241      	movs	r2, #65	; 0x41
 800d6c8:	2000      	movs	r0, #0
 800d6ca:	f001 fad9 	bl	800ec80 <pbuf_alloced_custom>
 800d6ce:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d106      	bne.n	800d6e4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d6d6:	69b8      	ldr	r0, [r7, #24]
 800d6d8:	f7ff fef6 	bl	800d4c8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d6dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6de:	f001 fc89 	bl	800eff4 <pbuf_free>
        goto memerr;
 800d6e2:	e074      	b.n	800d7ce <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800d6e4:	68f8      	ldr	r0, [r7, #12]
 800d6e6:	f001 fd2b 	bl	800f140 <pbuf_ref>
      pcr->original = p;
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	68fa      	ldr	r2, [r7, #12]
 800d6ee:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	4a3f      	ldr	r2, [pc, #252]	; (800d7f0 <ip4_frag+0x288>)
 800d6f4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d6f6:	6979      	ldr	r1, [r7, #20]
 800d6f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6fa:	f001 fd49 	bl	800f190 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d6fe:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800d702:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d706:	1ad3      	subs	r3, r2, r3
 800d708:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800d70c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d710:	2b00      	cmp	r3, #0
 800d712:	d004      	beq.n	800d71e <ip4_frag+0x1b6>
        poff = 0;
 800d714:	2300      	movs	r3, #0
 800d716:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d71e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d722:	2b00      	cmp	r3, #0
 800d724:	d196      	bne.n	800d654 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800d726:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d728:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d72c:	4413      	add	r3, r2
 800d72e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d734:	f1a3 0213 	sub.w	r2, r3, #19
 800d738:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d73c:	429a      	cmp	r2, r3
 800d73e:	bfcc      	ite	gt
 800d740:	2301      	movgt	r3, #1
 800d742:	2300      	movle	r3, #0
 800d744:	b2db      	uxtb	r3, r3
 800d746:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d748:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800d74c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d750:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800d752:	6a3b      	ldr	r3, [r7, #32]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d002      	beq.n	800d75e <ip4_frag+0x1f6>
 800d758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d003      	beq.n	800d766 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d75e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d760:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800d764:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d766:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800d768:	4618      	mov	r0, r3
 800d76a:	f000 f843 	bl	800d7f4 <lwip_htons>
 800d76e:	4603      	mov	r3, r0
 800d770:	461a      	mov	r2, r3
 800d772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d774:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d776:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d778:	3314      	adds	r3, #20
 800d77a:	b29b      	uxth	r3, r3
 800d77c:	4618      	mov	r0, r3
 800d77e:	f000 f839 	bl	800d7f4 <lwip_htons>
 800d782:	4603      	mov	r3, r0
 800d784:	461a      	mov	r2, r3
 800d786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d788:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78c:	2200      	movs	r2, #0
 800d78e:	729a      	strb	r2, [r3, #10]
 800d790:	2200      	movs	r2, #0
 800d792:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	695b      	ldr	r3, [r3, #20]
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d79c:	68b8      	ldr	r0, [r7, #8]
 800d79e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d7a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7a2:	f001 fc27 	bl	800eff4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d7a6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d7aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d7ac:	1ad3      	subs	r3, r2, r3
 800d7ae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800d7b2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d7b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d7b8:	4413      	add	r3, r2
 800d7ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800d7be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	f47f af19 	bne.w	800d5fa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	e002      	b.n	800d7d2 <ip4_frag+0x26a>
      goto memerr;
 800d7cc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d7ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3748      	adds	r7, #72	; 0x48
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	080190b0 	.word	0x080190b0
 800d7e0:	080192cc 	.word	0x080192cc
 800d7e4:	08019138 	.word	0x08019138
 800d7e8:	080192e8 	.word	0x080192e8
 800d7ec:	08019308 	.word	0x08019308
 800d7f0:	0800d501 	.word	0x0800d501

0800d7f4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800d7f4:	b480      	push	{r7}
 800d7f6:	b083      	sub	sp, #12
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800d7fe:	88fb      	ldrh	r3, [r7, #6]
 800d800:	021b      	lsls	r3, r3, #8
 800d802:	b21a      	sxth	r2, r3
 800d804:	88fb      	ldrh	r3, [r7, #6]
 800d806:	0a1b      	lsrs	r3, r3, #8
 800d808:	b29b      	uxth	r3, r3
 800d80a:	b21b      	sxth	r3, r3
 800d80c:	4313      	orrs	r3, r2
 800d80e:	b21b      	sxth	r3, r3
 800d810:	b29b      	uxth	r3, r3
}
 800d812:	4618      	mov	r0, r3
 800d814:	370c      	adds	r7, #12
 800d816:	46bd      	mov	sp, r7
 800d818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81c:	4770      	bx	lr

0800d81e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800d81e:	b480      	push	{r7}
 800d820:	b083      	sub	sp, #12
 800d822:	af00      	add	r7, sp, #0
 800d824:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	061a      	lsls	r2, r3, #24
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	021b      	lsls	r3, r3, #8
 800d82e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d832:	431a      	orrs	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	0a1b      	lsrs	r3, r3, #8
 800d838:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d83c:	431a      	orrs	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	0e1b      	lsrs	r3, r3, #24
 800d842:	4313      	orrs	r3, r2
}
 800d844:	4618      	mov	r0, r3
 800d846:	370c      	adds	r7, #12
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800d850:	b480      	push	{r7}
 800d852:	b089      	sub	sp, #36	; 0x24
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800d85e:	2300      	movs	r3, #0
 800d860:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800d862:	2300      	movs	r3, #0
 800d864:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	f003 0301 	and.w	r3, r3, #1
 800d86c:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800d86e:	693b      	ldr	r3, [r7, #16]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d00d      	beq.n	800d890 <lwip_standard_chksum+0x40>
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	2b00      	cmp	r3, #0
 800d878:	dd0a      	ble.n	800d890 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800d87a:	69fa      	ldr	r2, [r7, #28]
 800d87c:	1c53      	adds	r3, r2, #1
 800d87e:	61fb      	str	r3, [r7, #28]
 800d880:	f107 030e 	add.w	r3, r7, #14
 800d884:	3301      	adds	r3, #1
 800d886:	7812      	ldrb	r2, [r2, #0]
 800d888:	701a      	strb	r2, [r3, #0]
    len--;
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	3b01      	subs	r3, #1
 800d88e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800d890:	69fb      	ldr	r3, [r7, #28]
 800d892:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800d894:	e00a      	b.n	800d8ac <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800d896:	69bb      	ldr	r3, [r7, #24]
 800d898:	1c9a      	adds	r2, r3, #2
 800d89a:	61ba      	str	r2, [r7, #24]
 800d89c:	881b      	ldrh	r3, [r3, #0]
 800d89e:	461a      	mov	r2, r3
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	4413      	add	r3, r2
 800d8a4:	617b      	str	r3, [r7, #20]
    len -= 2;
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	3b02      	subs	r3, #2
 800d8aa:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	dcf1      	bgt.n	800d896 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	dd04      	ble.n	800d8c2 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800d8b8:	f107 030e 	add.w	r3, r7, #14
 800d8bc:	69ba      	ldr	r2, [r7, #24]
 800d8be:	7812      	ldrb	r2, [r2, #0]
 800d8c0:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800d8c2:	89fb      	ldrh	r3, [r7, #14]
 800d8c4:	461a      	mov	r2, r3
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	4413      	add	r3, r2
 800d8ca:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800d8cc:	697b      	ldr	r3, [r7, #20]
 800d8ce:	0c1a      	lsrs	r2, r3, #16
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	4413      	add	r3, r2
 800d8d6:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	0c1a      	lsrs	r2, r3, #16
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	b29b      	uxth	r3, r3
 800d8e0:	4413      	add	r3, r2
 800d8e2:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d007      	beq.n	800d8fa <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800d8ea:	697b      	ldr	r3, [r7, #20]
 800d8ec:	021b      	lsls	r3, r3, #8
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	0a1b      	lsrs	r3, r3, #8
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	b29b      	uxth	r3, r3
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3724      	adds	r7, #36	; 0x24
 800d902:	46bd      	mov	sp, r7
 800d904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d908:	4770      	bx	lr

0800d90a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b082      	sub	sp, #8
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
 800d912:	460b      	mov	r3, r1
 800d914:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800d916:	887b      	ldrh	r3, [r7, #2]
 800d918:	4619      	mov	r1, r3
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f7ff ff98 	bl	800d850 <lwip_standard_chksum>
 800d920:	4603      	mov	r3, r0
 800d922:	43db      	mvns	r3, r3
 800d924:	b29b      	uxth	r3, r3
}
 800d926:	4618      	mov	r0, r3
 800d928:	3708      	adds	r7, #8
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}

0800d92e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b082      	sub	sp, #8
 800d932:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800d934:	2300      	movs	r3, #0
 800d936:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800d938:	f008 fa76 	bl	8015e28 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800d93c:	f000 f8d4 	bl	800dae8 <mem_init>
  memp_init();
 800d940:	f000 fc2c 	bl	800e19c <memp_init>
  pbuf_init();
  netif_init();
 800d944:	f000 fd38 	bl	800e3b8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800d948:	f007 fcd8 	bl	80152fc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800d94c:	f001 fdec 	bl	800f528 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800d950:	f007 fc1a 	bl	8015188 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800d954:	bf00      	nop
 800d956:	3708      	adds	r7, #8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b083      	sub	sp, #12
 800d960:	af00      	add	r7, sp, #0
 800d962:	4603      	mov	r3, r0
 800d964:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800d966:	4b05      	ldr	r3, [pc, #20]	; (800d97c <ptr_to_mem+0x20>)
 800d968:	681a      	ldr	r2, [r3, #0]
 800d96a:	88fb      	ldrh	r3, [r7, #6]
 800d96c:	4413      	add	r3, r2
}
 800d96e:	4618      	mov	r0, r3
 800d970:	370c      	adds	r7, #12
 800d972:	46bd      	mov	sp, r7
 800d974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d978:	4770      	bx	lr
 800d97a:	bf00      	nop
 800d97c:	24006770 	.word	0x24006770

0800d980 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800d988:	4b05      	ldr	r3, [pc, #20]	; (800d9a0 <mem_to_ptr+0x20>)
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	687a      	ldr	r2, [r7, #4]
 800d98e:	1ad3      	subs	r3, r2, r3
 800d990:	b29b      	uxth	r3, r3
}
 800d992:	4618      	mov	r0, r3
 800d994:	370c      	adds	r7, #12
 800d996:	46bd      	mov	sp, r7
 800d998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99c:	4770      	bx	lr
 800d99e:	bf00      	nop
 800d9a0:	24006770 	.word	0x24006770

0800d9a4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800d9a4:	b590      	push	{r4, r7, lr}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800d9ac:	4b45      	ldr	r3, [pc, #276]	; (800dac4 <plug_holes+0x120>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	687a      	ldr	r2, [r7, #4]
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d206      	bcs.n	800d9c4 <plug_holes+0x20>
 800d9b6:	4b44      	ldr	r3, [pc, #272]	; (800dac8 <plug_holes+0x124>)
 800d9b8:	f240 12df 	movw	r2, #479	; 0x1df
 800d9bc:	4943      	ldr	r1, [pc, #268]	; (800dacc <plug_holes+0x128>)
 800d9be:	4844      	ldr	r0, [pc, #272]	; (800dad0 <plug_holes+0x12c>)
 800d9c0:	f008 fb5c 	bl	801607c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800d9c4:	4b43      	ldr	r3, [pc, #268]	; (800dad4 <plug_holes+0x130>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	687a      	ldr	r2, [r7, #4]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d306      	bcc.n	800d9dc <plug_holes+0x38>
 800d9ce:	4b3e      	ldr	r3, [pc, #248]	; (800dac8 <plug_holes+0x124>)
 800d9d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800d9d4:	4940      	ldr	r1, [pc, #256]	; (800dad8 <plug_holes+0x134>)
 800d9d6:	483e      	ldr	r0, [pc, #248]	; (800dad0 <plug_holes+0x12c>)
 800d9d8:	f008 fb50 	bl	801607c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	791b      	ldrb	r3, [r3, #4]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d006      	beq.n	800d9f2 <plug_holes+0x4e>
 800d9e4:	4b38      	ldr	r3, [pc, #224]	; (800dac8 <plug_holes+0x124>)
 800d9e6:	f240 12e1 	movw	r2, #481	; 0x1e1
 800d9ea:	493c      	ldr	r1, [pc, #240]	; (800dadc <plug_holes+0x138>)
 800d9ec:	4838      	ldr	r0, [pc, #224]	; (800dad0 <plug_holes+0x12c>)
 800d9ee:	f008 fb45 	bl	801607c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	881b      	ldrh	r3, [r3, #0]
 800d9f6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800d9fa:	d906      	bls.n	800da0a <plug_holes+0x66>
 800d9fc:	4b32      	ldr	r3, [pc, #200]	; (800dac8 <plug_holes+0x124>)
 800d9fe:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800da02:	4937      	ldr	r1, [pc, #220]	; (800dae0 <plug_holes+0x13c>)
 800da04:	4832      	ldr	r0, [pc, #200]	; (800dad0 <plug_holes+0x12c>)
 800da06:	f008 fb39 	bl	801607c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	881b      	ldrh	r3, [r3, #0]
 800da0e:	4618      	mov	r0, r3
 800da10:	f7ff ffa4 	bl	800d95c <ptr_to_mem>
 800da14:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d024      	beq.n	800da68 <plug_holes+0xc4>
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	791b      	ldrb	r3, [r3, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d120      	bne.n	800da68 <plug_holes+0xc4>
 800da26:	4b2b      	ldr	r3, [pc, #172]	; (800dad4 <plug_holes+0x130>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	68fa      	ldr	r2, [r7, #12]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d01b      	beq.n	800da68 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800da30:	4b2c      	ldr	r3, [pc, #176]	; (800dae4 <plug_holes+0x140>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	68fa      	ldr	r2, [r7, #12]
 800da36:	429a      	cmp	r2, r3
 800da38:	d102      	bne.n	800da40 <plug_holes+0x9c>
      lfree = mem;
 800da3a:	4a2a      	ldr	r2, [pc, #168]	; (800dae4 <plug_holes+0x140>)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	881a      	ldrh	r2, [r3, #0]
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	881b      	ldrh	r3, [r3, #0]
 800da4c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800da50:	d00a      	beq.n	800da68 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	881b      	ldrh	r3, [r3, #0]
 800da56:	4618      	mov	r0, r3
 800da58:	f7ff ff80 	bl	800d95c <ptr_to_mem>
 800da5c:	4604      	mov	r4, r0
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f7ff ff8e 	bl	800d980 <mem_to_ptr>
 800da64:	4603      	mov	r3, r0
 800da66:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	885b      	ldrh	r3, [r3, #2]
 800da6c:	4618      	mov	r0, r3
 800da6e:	f7ff ff75 	bl	800d95c <ptr_to_mem>
 800da72:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	429a      	cmp	r2, r3
 800da7a:	d01f      	beq.n	800dabc <plug_holes+0x118>
 800da7c:	68bb      	ldr	r3, [r7, #8]
 800da7e:	791b      	ldrb	r3, [r3, #4]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d11b      	bne.n	800dabc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800da84:	4b17      	ldr	r3, [pc, #92]	; (800dae4 <plug_holes+0x140>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d102      	bne.n	800da94 <plug_holes+0xf0>
      lfree = pmem;
 800da8e:	4a15      	ldr	r2, [pc, #84]	; (800dae4 <plug_holes+0x140>)
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	881a      	ldrh	r2, [r3, #0]
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	881b      	ldrh	r3, [r3, #0]
 800daa0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800daa4:	d00a      	beq.n	800dabc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	881b      	ldrh	r3, [r3, #0]
 800daaa:	4618      	mov	r0, r3
 800daac:	f7ff ff56 	bl	800d95c <ptr_to_mem>
 800dab0:	4604      	mov	r4, r0
 800dab2:	68b8      	ldr	r0, [r7, #8]
 800dab4:	f7ff ff64 	bl	800d980 <mem_to_ptr>
 800dab8:	4603      	mov	r3, r0
 800daba:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800dabc:	bf00      	nop
 800dabe:	3714      	adds	r7, #20
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd90      	pop	{r4, r7, pc}
 800dac4:	24006770 	.word	0x24006770
 800dac8:	08019318 	.word	0x08019318
 800dacc:	0801938c 	.word	0x0801938c
 800dad0:	080193a4 	.word	0x080193a4
 800dad4:	24006774 	.word	0x24006774
 800dad8:	080193cc 	.word	0x080193cc
 800dadc:	080193e8 	.word	0x080193e8
 800dae0:	08019404 	.word	0x08019404
 800dae4:	2400677c 	.word	0x2400677c

0800dae8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800daee:	4b1d      	ldr	r3, [pc, #116]	; (800db64 <mem_init+0x7c>)
 800daf0:	4a1d      	ldr	r2, [pc, #116]	; (800db68 <mem_init+0x80>)
 800daf2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800daf4:	4b1b      	ldr	r3, [pc, #108]	; (800db64 <mem_init+0x7c>)
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800db00:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2200      	movs	r2, #0
 800db0c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800db0e:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800db12:	f7ff ff23 	bl	800d95c <ptr_to_mem>
 800db16:	4603      	mov	r3, r0
 800db18:	4a14      	ldr	r2, [pc, #80]	; (800db6c <mem_init+0x84>)
 800db1a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800db1c:	4b13      	ldr	r3, [pc, #76]	; (800db6c <mem_init+0x84>)
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2201      	movs	r2, #1
 800db22:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800db24:	4b11      	ldr	r3, [pc, #68]	; (800db6c <mem_init+0x84>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800db2c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800db2e:	4b0f      	ldr	r3, [pc, #60]	; (800db6c <mem_init+0x84>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800db36:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800db38:	4b0a      	ldr	r3, [pc, #40]	; (800db64 <mem_init+0x7c>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a0c      	ldr	r2, [pc, #48]	; (800db70 <mem_init+0x88>)
 800db3e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800db40:	480c      	ldr	r0, [pc, #48]	; (800db74 <mem_init+0x8c>)
 800db42:	f008 f97f 	bl	8015e44 <sys_mutex_new>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d006      	beq.n	800db5a <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800db4c:	4b0a      	ldr	r3, [pc, #40]	; (800db78 <mem_init+0x90>)
 800db4e:	f240 221f 	movw	r2, #543	; 0x21f
 800db52:	490a      	ldr	r1, [pc, #40]	; (800db7c <mem_init+0x94>)
 800db54:	480a      	ldr	r0, [pc, #40]	; (800db80 <mem_init+0x98>)
 800db56:	f008 fa91 	bl	801607c <iprintf>
  }
}
 800db5a:	bf00      	nop
 800db5c:	3708      	adds	r7, #8
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	24006770 	.word	0x24006770
 800db68:	30044000 	.word	0x30044000
 800db6c:	24006774 	.word	0x24006774
 800db70:	2400677c 	.word	0x2400677c
 800db74:	24006778 	.word	0x24006778
 800db78:	08019318 	.word	0x08019318
 800db7c:	08019430 	.word	0x08019430
 800db80:	080193a4 	.word	0x080193a4

0800db84 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b086      	sub	sp, #24
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800db8c:	6878      	ldr	r0, [r7, #4]
 800db8e:	f7ff fef7 	bl	800d980 <mem_to_ptr>
 800db92:	4603      	mov	r3, r0
 800db94:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	881b      	ldrh	r3, [r3, #0]
 800db9a:	4618      	mov	r0, r3
 800db9c:	f7ff fede 	bl	800d95c <ptr_to_mem>
 800dba0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	885b      	ldrh	r3, [r3, #2]
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7ff fed8 	bl	800d95c <ptr_to_mem>
 800dbac:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	881b      	ldrh	r3, [r3, #0]
 800dbb2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dbb6:	d818      	bhi.n	800dbea <mem_link_valid+0x66>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	885b      	ldrh	r3, [r3, #2]
 800dbbc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dbc0:	d813      	bhi.n	800dbea <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800dbc6:	8afa      	ldrh	r2, [r7, #22]
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d004      	beq.n	800dbd6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	881b      	ldrh	r3, [r3, #0]
 800dbd0:	8afa      	ldrh	r2, [r7, #22]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d109      	bne.n	800dbea <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dbd6:	4b08      	ldr	r3, [pc, #32]	; (800dbf8 <mem_link_valid+0x74>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d006      	beq.n	800dbee <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	885b      	ldrh	r3, [r3, #2]
 800dbe4:	8afa      	ldrh	r2, [r7, #22]
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d001      	beq.n	800dbee <mem_link_valid+0x6a>
    return 0;
 800dbea:	2300      	movs	r3, #0
 800dbec:	e000      	b.n	800dbf0 <mem_link_valid+0x6c>
  }
  return 1;
 800dbee:	2301      	movs	r3, #1
}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	3718      	adds	r7, #24
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd80      	pop	{r7, pc}
 800dbf8:	24006774 	.word	0x24006774

0800dbfc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b088      	sub	sp, #32
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d070      	beq.n	800dcec <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f003 0303 	and.w	r3, r3, #3
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d00d      	beq.n	800dc30 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800dc14:	4b37      	ldr	r3, [pc, #220]	; (800dcf4 <mem_free+0xf8>)
 800dc16:	f240 2273 	movw	r2, #627	; 0x273
 800dc1a:	4937      	ldr	r1, [pc, #220]	; (800dcf8 <mem_free+0xfc>)
 800dc1c:	4837      	ldr	r0, [pc, #220]	; (800dcfc <mem_free+0x100>)
 800dc1e:	f008 fa2d 	bl	801607c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc22:	f008 f963 	bl	8015eec <sys_arch_protect>
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	68f8      	ldr	r0, [r7, #12]
 800dc2a:	f008 f96d 	bl	8015f08 <sys_arch_unprotect>
    return;
 800dc2e:	e05e      	b.n	800dcee <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	3b08      	subs	r3, #8
 800dc34:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800dc36:	4b32      	ldr	r3, [pc, #200]	; (800dd00 <mem_free+0x104>)
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	69fa      	ldr	r2, [r7, #28]
 800dc3c:	429a      	cmp	r2, r3
 800dc3e:	d306      	bcc.n	800dc4e <mem_free+0x52>
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	f103 020c 	add.w	r2, r3, #12
 800dc46:	4b2f      	ldr	r3, [pc, #188]	; (800dd04 <mem_free+0x108>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	d90d      	bls.n	800dc6a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800dc4e:	4b29      	ldr	r3, [pc, #164]	; (800dcf4 <mem_free+0xf8>)
 800dc50:	f240 227f 	movw	r2, #639	; 0x27f
 800dc54:	492c      	ldr	r1, [pc, #176]	; (800dd08 <mem_free+0x10c>)
 800dc56:	4829      	ldr	r0, [pc, #164]	; (800dcfc <mem_free+0x100>)
 800dc58:	f008 fa10 	bl	801607c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc5c:	f008 f946 	bl	8015eec <sys_arch_protect>
 800dc60:	6138      	str	r0, [r7, #16]
 800dc62:	6938      	ldr	r0, [r7, #16]
 800dc64:	f008 f950 	bl	8015f08 <sys_arch_unprotect>
    return;
 800dc68:	e041      	b.n	800dcee <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dc6a:	4828      	ldr	r0, [pc, #160]	; (800dd0c <mem_free+0x110>)
 800dc6c:	f008 f904 	bl	8015e78 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	791b      	ldrb	r3, [r3, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d110      	bne.n	800dc9a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800dc78:	4b1e      	ldr	r3, [pc, #120]	; (800dcf4 <mem_free+0xf8>)
 800dc7a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800dc7e:	4924      	ldr	r1, [pc, #144]	; (800dd10 <mem_free+0x114>)
 800dc80:	481e      	ldr	r0, [pc, #120]	; (800dcfc <mem_free+0x100>)
 800dc82:	f008 f9fb 	bl	801607c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dc86:	4821      	ldr	r0, [pc, #132]	; (800dd0c <mem_free+0x110>)
 800dc88:	f008 f905 	bl	8015e96 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dc8c:	f008 f92e 	bl	8015eec <sys_arch_protect>
 800dc90:	6178      	str	r0, [r7, #20]
 800dc92:	6978      	ldr	r0, [r7, #20]
 800dc94:	f008 f938 	bl	8015f08 <sys_arch_unprotect>
    return;
 800dc98:	e029      	b.n	800dcee <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800dc9a:	69f8      	ldr	r0, [r7, #28]
 800dc9c:	f7ff ff72 	bl	800db84 <mem_link_valid>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d110      	bne.n	800dcc8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800dca6:	4b13      	ldr	r3, [pc, #76]	; (800dcf4 <mem_free+0xf8>)
 800dca8:	f240 2295 	movw	r2, #661	; 0x295
 800dcac:	4919      	ldr	r1, [pc, #100]	; (800dd14 <mem_free+0x118>)
 800dcae:	4813      	ldr	r0, [pc, #76]	; (800dcfc <mem_free+0x100>)
 800dcb0:	f008 f9e4 	bl	801607c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800dcb4:	4815      	ldr	r0, [pc, #84]	; (800dd0c <mem_free+0x110>)
 800dcb6:	f008 f8ee 	bl	8015e96 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dcba:	f008 f917 	bl	8015eec <sys_arch_protect>
 800dcbe:	61b8      	str	r0, [r7, #24]
 800dcc0:	69b8      	ldr	r0, [r7, #24]
 800dcc2:	f008 f921 	bl	8015f08 <sys_arch_unprotect>
    return;
 800dcc6:	e012      	b.n	800dcee <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	2200      	movs	r2, #0
 800dccc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800dcce:	4b12      	ldr	r3, [pc, #72]	; (800dd18 <mem_free+0x11c>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	69fa      	ldr	r2, [r7, #28]
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d202      	bcs.n	800dcde <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800dcd8:	4a0f      	ldr	r2, [pc, #60]	; (800dd18 <mem_free+0x11c>)
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800dcde:	69f8      	ldr	r0, [r7, #28]
 800dce0:	f7ff fe60 	bl	800d9a4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800dce4:	4809      	ldr	r0, [pc, #36]	; (800dd0c <mem_free+0x110>)
 800dce6:	f008 f8d6 	bl	8015e96 <sys_mutex_unlock>
 800dcea:	e000      	b.n	800dcee <mem_free+0xf2>
    return;
 800dcec:	bf00      	nop
}
 800dcee:	3720      	adds	r7, #32
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}
 800dcf4:	08019318 	.word	0x08019318
 800dcf8:	0801944c 	.word	0x0801944c
 800dcfc:	080193a4 	.word	0x080193a4
 800dd00:	24006770 	.word	0x24006770
 800dd04:	24006774 	.word	0x24006774
 800dd08:	08019470 	.word	0x08019470
 800dd0c:	24006778 	.word	0x24006778
 800dd10:	0801948c 	.word	0x0801948c
 800dd14:	080194b4 	.word	0x080194b4
 800dd18:	2400677c 	.word	0x2400677c

0800dd1c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800dd1c:	b580      	push	{r7, lr}
 800dd1e:	b088      	sub	sp, #32
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
 800dd24:	460b      	mov	r3, r1
 800dd26:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800dd28:	887b      	ldrh	r3, [r7, #2]
 800dd2a:	3303      	adds	r3, #3
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	f023 0303 	bic.w	r3, r3, #3
 800dd32:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800dd34:	8bfb      	ldrh	r3, [r7, #30]
 800dd36:	2b0b      	cmp	r3, #11
 800dd38:	d801      	bhi.n	800dd3e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800dd3a:	230c      	movs	r3, #12
 800dd3c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800dd3e:	8bfb      	ldrh	r3, [r7, #30]
 800dd40:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dd44:	d803      	bhi.n	800dd4e <mem_trim+0x32>
 800dd46:	8bfa      	ldrh	r2, [r7, #30]
 800dd48:	887b      	ldrh	r3, [r7, #2]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d201      	bcs.n	800dd52 <mem_trim+0x36>
    return NULL;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	e0d8      	b.n	800df04 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800dd52:	4b6e      	ldr	r3, [pc, #440]	; (800df0c <mem_trim+0x1f0>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d304      	bcc.n	800dd66 <mem_trim+0x4a>
 800dd5c:	4b6c      	ldr	r3, [pc, #432]	; (800df10 <mem_trim+0x1f4>)
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	429a      	cmp	r2, r3
 800dd64:	d306      	bcc.n	800dd74 <mem_trim+0x58>
 800dd66:	4b6b      	ldr	r3, [pc, #428]	; (800df14 <mem_trim+0x1f8>)
 800dd68:	f240 22d1 	movw	r2, #721	; 0x2d1
 800dd6c:	496a      	ldr	r1, [pc, #424]	; (800df18 <mem_trim+0x1fc>)
 800dd6e:	486b      	ldr	r0, [pc, #428]	; (800df1c <mem_trim+0x200>)
 800dd70:	f008 f984 	bl	801607c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800dd74:	4b65      	ldr	r3, [pc, #404]	; (800df0c <mem_trim+0x1f0>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d304      	bcc.n	800dd88 <mem_trim+0x6c>
 800dd7e:	4b64      	ldr	r3, [pc, #400]	; (800df10 <mem_trim+0x1f4>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d307      	bcc.n	800dd98 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800dd88:	f008 f8b0 	bl	8015eec <sys_arch_protect>
 800dd8c:	60b8      	str	r0, [r7, #8]
 800dd8e:	68b8      	ldr	r0, [r7, #8]
 800dd90:	f008 f8ba 	bl	8015f08 <sys_arch_unprotect>
    return rmem;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	e0b5      	b.n	800df04 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	3b08      	subs	r3, #8
 800dd9c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800dd9e:	69b8      	ldr	r0, [r7, #24]
 800dda0:	f7ff fdee 	bl	800d980 <mem_to_ptr>
 800dda4:	4603      	mov	r3, r0
 800dda6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800dda8:	69bb      	ldr	r3, [r7, #24]
 800ddaa:	881a      	ldrh	r2, [r3, #0]
 800ddac:	8afb      	ldrh	r3, [r7, #22]
 800ddae:	1ad3      	subs	r3, r2, r3
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	3b08      	subs	r3, #8
 800ddb4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ddb6:	8bfa      	ldrh	r2, [r7, #30]
 800ddb8:	8abb      	ldrh	r3, [r7, #20]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d906      	bls.n	800ddcc <mem_trim+0xb0>
 800ddbe:	4b55      	ldr	r3, [pc, #340]	; (800df14 <mem_trim+0x1f8>)
 800ddc0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ddc4:	4956      	ldr	r1, [pc, #344]	; (800df20 <mem_trim+0x204>)
 800ddc6:	4855      	ldr	r0, [pc, #340]	; (800df1c <mem_trim+0x200>)
 800ddc8:	f008 f958 	bl	801607c <iprintf>
  if (newsize > size) {
 800ddcc:	8bfa      	ldrh	r2, [r7, #30]
 800ddce:	8abb      	ldrh	r3, [r7, #20]
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d901      	bls.n	800ddd8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	e095      	b.n	800df04 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ddd8:	8bfa      	ldrh	r2, [r7, #30]
 800ddda:	8abb      	ldrh	r3, [r7, #20]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d101      	bne.n	800dde4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	e08f      	b.n	800df04 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800dde4:	484f      	ldr	r0, [pc, #316]	; (800df24 <mem_trim+0x208>)
 800dde6:	f008 f847 	bl	8015e78 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ddea:	69bb      	ldr	r3, [r7, #24]
 800ddec:	881b      	ldrh	r3, [r3, #0]
 800ddee:	4618      	mov	r0, r3
 800ddf0:	f7ff fdb4 	bl	800d95c <ptr_to_mem>
 800ddf4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ddf6:	693b      	ldr	r3, [r7, #16]
 800ddf8:	791b      	ldrb	r3, [r3, #4]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d13f      	bne.n	800de7e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ddfe:	69bb      	ldr	r3, [r7, #24]
 800de00:	881b      	ldrh	r3, [r3, #0]
 800de02:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800de06:	d106      	bne.n	800de16 <mem_trim+0xfa>
 800de08:	4b42      	ldr	r3, [pc, #264]	; (800df14 <mem_trim+0x1f8>)
 800de0a:	f240 22f5 	movw	r2, #757	; 0x2f5
 800de0e:	4946      	ldr	r1, [pc, #280]	; (800df28 <mem_trim+0x20c>)
 800de10:	4842      	ldr	r0, [pc, #264]	; (800df1c <mem_trim+0x200>)
 800de12:	f008 f933 	bl	801607c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800de1c:	8afa      	ldrh	r2, [r7, #22]
 800de1e:	8bfb      	ldrh	r3, [r7, #30]
 800de20:	4413      	add	r3, r2
 800de22:	b29b      	uxth	r3, r3
 800de24:	3308      	adds	r3, #8
 800de26:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800de28:	4b40      	ldr	r3, [pc, #256]	; (800df2c <mem_trim+0x210>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	693a      	ldr	r2, [r7, #16]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d106      	bne.n	800de40 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800de32:	89fb      	ldrh	r3, [r7, #14]
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fd91 	bl	800d95c <ptr_to_mem>
 800de3a:	4603      	mov	r3, r0
 800de3c:	4a3b      	ldr	r2, [pc, #236]	; (800df2c <mem_trim+0x210>)
 800de3e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800de40:	89fb      	ldrh	r3, [r7, #14]
 800de42:	4618      	mov	r0, r3
 800de44:	f7ff fd8a 	bl	800d95c <ptr_to_mem>
 800de48:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	2200      	movs	r2, #0
 800de4e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	89ba      	ldrh	r2, [r7, #12]
 800de54:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	8afa      	ldrh	r2, [r7, #22]
 800de5a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	89fa      	ldrh	r2, [r7, #14]
 800de60:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800de62:	693b      	ldr	r3, [r7, #16]
 800de64:	881b      	ldrh	r3, [r3, #0]
 800de66:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800de6a:	d047      	beq.n	800defc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	881b      	ldrh	r3, [r3, #0]
 800de70:	4618      	mov	r0, r3
 800de72:	f7ff fd73 	bl	800d95c <ptr_to_mem>
 800de76:	4602      	mov	r2, r0
 800de78:	89fb      	ldrh	r3, [r7, #14]
 800de7a:	8053      	strh	r3, [r2, #2]
 800de7c:	e03e      	b.n	800defc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800de7e:	8bfb      	ldrh	r3, [r7, #30]
 800de80:	f103 0214 	add.w	r2, r3, #20
 800de84:	8abb      	ldrh	r3, [r7, #20]
 800de86:	429a      	cmp	r2, r3
 800de88:	d838      	bhi.n	800defc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800de8a:	8afa      	ldrh	r2, [r7, #22]
 800de8c:	8bfb      	ldrh	r3, [r7, #30]
 800de8e:	4413      	add	r3, r2
 800de90:	b29b      	uxth	r3, r3
 800de92:	3308      	adds	r3, #8
 800de94:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800de96:	69bb      	ldr	r3, [r7, #24]
 800de98:	881b      	ldrh	r3, [r3, #0]
 800de9a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800de9e:	d106      	bne.n	800deae <mem_trim+0x192>
 800dea0:	4b1c      	ldr	r3, [pc, #112]	; (800df14 <mem_trim+0x1f8>)
 800dea2:	f240 3216 	movw	r2, #790	; 0x316
 800dea6:	4920      	ldr	r1, [pc, #128]	; (800df28 <mem_trim+0x20c>)
 800dea8:	481c      	ldr	r0, [pc, #112]	; (800df1c <mem_trim+0x200>)
 800deaa:	f008 f8e7 	bl	801607c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800deae:	89fb      	ldrh	r3, [r7, #14]
 800deb0:	4618      	mov	r0, r3
 800deb2:	f7ff fd53 	bl	800d95c <ptr_to_mem>
 800deb6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800deb8:	4b1c      	ldr	r3, [pc, #112]	; (800df2c <mem_trim+0x210>)
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	429a      	cmp	r2, r3
 800dec0:	d202      	bcs.n	800dec8 <mem_trim+0x1ac>
      lfree = mem2;
 800dec2:	4a1a      	ldr	r2, [pc, #104]	; (800df2c <mem_trim+0x210>)
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800dec8:	693b      	ldr	r3, [r7, #16]
 800deca:	2200      	movs	r2, #0
 800decc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800dece:	69bb      	ldr	r3, [r7, #24]
 800ded0:	881a      	ldrh	r2, [r3, #0]
 800ded2:	693b      	ldr	r3, [r7, #16]
 800ded4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	8afa      	ldrh	r2, [r7, #22]
 800deda:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	89fa      	ldrh	r2, [r7, #14]
 800dee0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800dee2:	693b      	ldr	r3, [r7, #16]
 800dee4:	881b      	ldrh	r3, [r3, #0]
 800dee6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800deea:	d007      	beq.n	800defc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800deec:	693b      	ldr	r3, [r7, #16]
 800deee:	881b      	ldrh	r3, [r3, #0]
 800def0:	4618      	mov	r0, r3
 800def2:	f7ff fd33 	bl	800d95c <ptr_to_mem>
 800def6:	4602      	mov	r2, r0
 800def8:	89fb      	ldrh	r3, [r7, #14]
 800defa:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800defc:	4809      	ldr	r0, [pc, #36]	; (800df24 <mem_trim+0x208>)
 800defe:	f007 ffca 	bl	8015e96 <sys_mutex_unlock>
  return rmem;
 800df02:	687b      	ldr	r3, [r7, #4]
}
 800df04:	4618      	mov	r0, r3
 800df06:	3720      	adds	r7, #32
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	24006770 	.word	0x24006770
 800df10:	24006774 	.word	0x24006774
 800df14:	08019318 	.word	0x08019318
 800df18:	080194e8 	.word	0x080194e8
 800df1c:	080193a4 	.word	0x080193a4
 800df20:	08019500 	.word	0x08019500
 800df24:	24006778 	.word	0x24006778
 800df28:	08019520 	.word	0x08019520
 800df2c:	2400677c 	.word	0x2400677c

0800df30 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b088      	sub	sp, #32
 800df34:	af00      	add	r7, sp, #0
 800df36:	4603      	mov	r3, r0
 800df38:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800df3a:	88fb      	ldrh	r3, [r7, #6]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d101      	bne.n	800df44 <mem_malloc+0x14>
    return NULL;
 800df40:	2300      	movs	r3, #0
 800df42:	e0e2      	b.n	800e10a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800df44:	88fb      	ldrh	r3, [r7, #6]
 800df46:	3303      	adds	r3, #3
 800df48:	b29b      	uxth	r3, r3
 800df4a:	f023 0303 	bic.w	r3, r3, #3
 800df4e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800df50:	8bbb      	ldrh	r3, [r7, #28]
 800df52:	2b0b      	cmp	r3, #11
 800df54:	d801      	bhi.n	800df5a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800df56:	230c      	movs	r3, #12
 800df58:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800df5a:	8bbb      	ldrh	r3, [r7, #28]
 800df5c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800df60:	d803      	bhi.n	800df6a <mem_malloc+0x3a>
 800df62:	8bba      	ldrh	r2, [r7, #28]
 800df64:	88fb      	ldrh	r3, [r7, #6]
 800df66:	429a      	cmp	r2, r3
 800df68:	d201      	bcs.n	800df6e <mem_malloc+0x3e>
    return NULL;
 800df6a:	2300      	movs	r3, #0
 800df6c:	e0cd      	b.n	800e10a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800df6e:	4869      	ldr	r0, [pc, #420]	; (800e114 <mem_malloc+0x1e4>)
 800df70:	f007 ff82 	bl	8015e78 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800df74:	4b68      	ldr	r3, [pc, #416]	; (800e118 <mem_malloc+0x1e8>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff fd01 	bl	800d980 <mem_to_ptr>
 800df7e:	4603      	mov	r3, r0
 800df80:	83fb      	strh	r3, [r7, #30]
 800df82:	e0b7      	b.n	800e0f4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800df84:	8bfb      	ldrh	r3, [r7, #30]
 800df86:	4618      	mov	r0, r3
 800df88:	f7ff fce8 	bl	800d95c <ptr_to_mem>
 800df8c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800df8e:	697b      	ldr	r3, [r7, #20]
 800df90:	791b      	ldrb	r3, [r3, #4]
 800df92:	2b00      	cmp	r3, #0
 800df94:	f040 80a7 	bne.w	800e0e6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800df98:	697b      	ldr	r3, [r7, #20]
 800df9a:	881b      	ldrh	r3, [r3, #0]
 800df9c:	461a      	mov	r2, r3
 800df9e:	8bfb      	ldrh	r3, [r7, #30]
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	f1a3 0208 	sub.w	r2, r3, #8
 800dfa6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800dfa8:	429a      	cmp	r2, r3
 800dfaa:	f0c0 809c 	bcc.w	800e0e6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	881b      	ldrh	r3, [r3, #0]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	8bfb      	ldrh	r3, [r7, #30]
 800dfb6:	1ad3      	subs	r3, r2, r3
 800dfb8:	f1a3 0208 	sub.w	r2, r3, #8
 800dfbc:	8bbb      	ldrh	r3, [r7, #28]
 800dfbe:	3314      	adds	r3, #20
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d333      	bcc.n	800e02c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800dfc4:	8bfa      	ldrh	r2, [r7, #30]
 800dfc6:	8bbb      	ldrh	r3, [r7, #28]
 800dfc8:	4413      	add	r3, r2
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	3308      	adds	r3, #8
 800dfce:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800dfd0:	8a7b      	ldrh	r3, [r7, #18]
 800dfd2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800dfd6:	d106      	bne.n	800dfe6 <mem_malloc+0xb6>
 800dfd8:	4b50      	ldr	r3, [pc, #320]	; (800e11c <mem_malloc+0x1ec>)
 800dfda:	f240 3287 	movw	r2, #903	; 0x387
 800dfde:	4950      	ldr	r1, [pc, #320]	; (800e120 <mem_malloc+0x1f0>)
 800dfe0:	4850      	ldr	r0, [pc, #320]	; (800e124 <mem_malloc+0x1f4>)
 800dfe2:	f008 f84b 	bl	801607c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800dfe6:	8a7b      	ldrh	r3, [r7, #18]
 800dfe8:	4618      	mov	r0, r3
 800dfea:	f7ff fcb7 	bl	800d95c <ptr_to_mem>
 800dfee:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	2200      	movs	r2, #0
 800dff4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	881a      	ldrh	r2, [r3, #0]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	8bfa      	ldrh	r2, [r7, #30]
 800e002:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	8a7a      	ldrh	r2, [r7, #18]
 800e008:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800e00a:	697b      	ldr	r3, [r7, #20]
 800e00c:	2201      	movs	r2, #1
 800e00e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	881b      	ldrh	r3, [r3, #0]
 800e014:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800e018:	d00b      	beq.n	800e032 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	881b      	ldrh	r3, [r3, #0]
 800e01e:	4618      	mov	r0, r3
 800e020:	f7ff fc9c 	bl	800d95c <ptr_to_mem>
 800e024:	4602      	mov	r2, r0
 800e026:	8a7b      	ldrh	r3, [r7, #18]
 800e028:	8053      	strh	r3, [r2, #2]
 800e02a:	e002      	b.n	800e032 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	2201      	movs	r2, #1
 800e030:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800e032:	4b39      	ldr	r3, [pc, #228]	; (800e118 <mem_malloc+0x1e8>)
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	697a      	ldr	r2, [r7, #20]
 800e038:	429a      	cmp	r2, r3
 800e03a:	d127      	bne.n	800e08c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800e03c:	4b36      	ldr	r3, [pc, #216]	; (800e118 <mem_malloc+0x1e8>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800e042:	e005      	b.n	800e050 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800e044:	69bb      	ldr	r3, [r7, #24]
 800e046:	881b      	ldrh	r3, [r3, #0]
 800e048:	4618      	mov	r0, r3
 800e04a:	f7ff fc87 	bl	800d95c <ptr_to_mem>
 800e04e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800e050:	69bb      	ldr	r3, [r7, #24]
 800e052:	791b      	ldrb	r3, [r3, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d004      	beq.n	800e062 <mem_malloc+0x132>
 800e058:	4b33      	ldr	r3, [pc, #204]	; (800e128 <mem_malloc+0x1f8>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	69ba      	ldr	r2, [r7, #24]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d1f0      	bne.n	800e044 <mem_malloc+0x114>
          }
          lfree = cur;
 800e062:	4a2d      	ldr	r2, [pc, #180]	; (800e118 <mem_malloc+0x1e8>)
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800e068:	4b2b      	ldr	r3, [pc, #172]	; (800e118 <mem_malloc+0x1e8>)
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	4b2e      	ldr	r3, [pc, #184]	; (800e128 <mem_malloc+0x1f8>)
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	429a      	cmp	r2, r3
 800e072:	d00b      	beq.n	800e08c <mem_malloc+0x15c>
 800e074:	4b28      	ldr	r3, [pc, #160]	; (800e118 <mem_malloc+0x1e8>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	791b      	ldrb	r3, [r3, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d006      	beq.n	800e08c <mem_malloc+0x15c>
 800e07e:	4b27      	ldr	r3, [pc, #156]	; (800e11c <mem_malloc+0x1ec>)
 800e080:	f240 32b5 	movw	r2, #949	; 0x3b5
 800e084:	4929      	ldr	r1, [pc, #164]	; (800e12c <mem_malloc+0x1fc>)
 800e086:	4827      	ldr	r0, [pc, #156]	; (800e124 <mem_malloc+0x1f4>)
 800e088:	f007 fff8 	bl	801607c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800e08c:	4821      	ldr	r0, [pc, #132]	; (800e114 <mem_malloc+0x1e4>)
 800e08e:	f007 ff02 	bl	8015e96 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800e092:	8bba      	ldrh	r2, [r7, #28]
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	4413      	add	r3, r2
 800e098:	3308      	adds	r3, #8
 800e09a:	4a23      	ldr	r2, [pc, #140]	; (800e128 <mem_malloc+0x1f8>)
 800e09c:	6812      	ldr	r2, [r2, #0]
 800e09e:	4293      	cmp	r3, r2
 800e0a0:	d906      	bls.n	800e0b0 <mem_malloc+0x180>
 800e0a2:	4b1e      	ldr	r3, [pc, #120]	; (800e11c <mem_malloc+0x1ec>)
 800e0a4:	f240 32b9 	movw	r2, #953	; 0x3b9
 800e0a8:	4921      	ldr	r1, [pc, #132]	; (800e130 <mem_malloc+0x200>)
 800e0aa:	481e      	ldr	r0, [pc, #120]	; (800e124 <mem_malloc+0x1f4>)
 800e0ac:	f007 ffe6 	bl	801607c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	f003 0303 	and.w	r3, r3, #3
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d006      	beq.n	800e0c8 <mem_malloc+0x198>
 800e0ba:	4b18      	ldr	r3, [pc, #96]	; (800e11c <mem_malloc+0x1ec>)
 800e0bc:	f240 32bb 	movw	r2, #955	; 0x3bb
 800e0c0:	491c      	ldr	r1, [pc, #112]	; (800e134 <mem_malloc+0x204>)
 800e0c2:	4818      	ldr	r0, [pc, #96]	; (800e124 <mem_malloc+0x1f4>)
 800e0c4:	f007 ffda 	bl	801607c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800e0c8:	697b      	ldr	r3, [r7, #20]
 800e0ca:	f003 0303 	and.w	r3, r3, #3
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d006      	beq.n	800e0e0 <mem_malloc+0x1b0>
 800e0d2:	4b12      	ldr	r3, [pc, #72]	; (800e11c <mem_malloc+0x1ec>)
 800e0d4:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e0d8:	4917      	ldr	r1, [pc, #92]	; (800e138 <mem_malloc+0x208>)
 800e0da:	4812      	ldr	r0, [pc, #72]	; (800e124 <mem_malloc+0x1f4>)
 800e0dc:	f007 ffce 	bl	801607c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	3308      	adds	r3, #8
 800e0e4:	e011      	b.n	800e10a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800e0e6:	8bfb      	ldrh	r3, [r7, #30]
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	f7ff fc37 	bl	800d95c <ptr_to_mem>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	881b      	ldrh	r3, [r3, #0]
 800e0f2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800e0f4:	8bfa      	ldrh	r2, [r7, #30]
 800e0f6:	8bbb      	ldrh	r3, [r7, #28]
 800e0f8:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	f4ff af41 	bcc.w	800df84 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800e102:	4804      	ldr	r0, [pc, #16]	; (800e114 <mem_malloc+0x1e4>)
 800e104:	f007 fec7 	bl	8015e96 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800e108:	2300      	movs	r3, #0
}
 800e10a:	4618      	mov	r0, r3
 800e10c:	3720      	adds	r7, #32
 800e10e:	46bd      	mov	sp, r7
 800e110:	bd80      	pop	{r7, pc}
 800e112:	bf00      	nop
 800e114:	24006778 	.word	0x24006778
 800e118:	2400677c 	.word	0x2400677c
 800e11c:	08019318 	.word	0x08019318
 800e120:	08019520 	.word	0x08019520
 800e124:	080193a4 	.word	0x080193a4
 800e128:	24006774 	.word	0x24006774
 800e12c:	08019534 	.word	0x08019534
 800e130:	08019550 	.word	0x08019550
 800e134:	08019580 	.word	0x08019580
 800e138:	080195b0 	.word	0x080195b0

0800e13c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	689b      	ldr	r3, [r3, #8]
 800e148:	2200      	movs	r2, #0
 800e14a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	3303      	adds	r3, #3
 800e152:	f023 0303 	bic.w	r3, r3, #3
 800e156:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800e158:	2300      	movs	r3, #0
 800e15a:	60fb      	str	r3, [r7, #12]
 800e15c:	e011      	b.n	800e182 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	681a      	ldr	r2, [r3, #0]
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	689b      	ldr	r3, [r3, #8]
 800e16c:	68ba      	ldr	r2, [r7, #8]
 800e16e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	881b      	ldrh	r3, [r3, #0]
 800e174:	461a      	mov	r2, r3
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	4413      	add	r3, r2
 800e17a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	3301      	adds	r3, #1
 800e180:	60fb      	str	r3, [r7, #12]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	885b      	ldrh	r3, [r3, #2]
 800e186:	461a      	mov	r2, r3
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	4293      	cmp	r3, r2
 800e18c:	dbe7      	blt.n	800e15e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800e18e:	bf00      	nop
 800e190:	bf00      	nop
 800e192:	3714      	adds	r7, #20
 800e194:	46bd      	mov	sp, r7
 800e196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e19a:	4770      	bx	lr

0800e19c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	80fb      	strh	r3, [r7, #6]
 800e1a6:	e009      	b.n	800e1bc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800e1a8:	88fb      	ldrh	r3, [r7, #6]
 800e1aa:	4a08      	ldr	r2, [pc, #32]	; (800e1cc <memp_init+0x30>)
 800e1ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7ff ffc3 	bl	800e13c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800e1b6:	88fb      	ldrh	r3, [r7, #6]
 800e1b8:	3301      	adds	r3, #1
 800e1ba:	80fb      	strh	r3, [r7, #6]
 800e1bc:	88fb      	ldrh	r3, [r7, #6]
 800e1be:	2b0c      	cmp	r3, #12
 800e1c0:	d9f2      	bls.n	800e1a8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800e1c2:	bf00      	nop
 800e1c4:	bf00      	nop
 800e1c6:	3708      	adds	r7, #8
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	08019670 	.word	0x08019670

0800e1d0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800e1d8:	f007 fe88 	bl	8015eec <sys_arch_protect>
 800e1dc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	689b      	ldr	r3, [r3, #8]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800e1e6:	68bb      	ldr	r3, [r7, #8]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d015      	beq.n	800e218 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	68ba      	ldr	r2, [r7, #8]
 800e1f2:	6812      	ldr	r2, [r2, #0]
 800e1f4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	f003 0303 	and.w	r3, r3, #3
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d006      	beq.n	800e20e <do_memp_malloc_pool+0x3e>
 800e200:	4b09      	ldr	r3, [pc, #36]	; (800e228 <do_memp_malloc_pool+0x58>)
 800e202:	f44f 728c 	mov.w	r2, #280	; 0x118
 800e206:	4909      	ldr	r1, [pc, #36]	; (800e22c <do_memp_malloc_pool+0x5c>)
 800e208:	4809      	ldr	r0, [pc, #36]	; (800e230 <do_memp_malloc_pool+0x60>)
 800e20a:	f007 ff37 	bl	801607c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e20e:	68f8      	ldr	r0, [r7, #12]
 800e210:	f007 fe7a 	bl	8015f08 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	e003      	b.n	800e220 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f007 fe75 	bl	8015f08 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3710      	adds	r7, #16
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}
 800e228:	080196a4 	.word	0x080196a4
 800e22c:	08019718 	.word	0x08019718
 800e230:	0801973c 	.word	0x0801973c

0800e234 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800e234:	b580      	push	{r7, lr}
 800e236:	b082      	sub	sp, #8
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d106      	bne.n	800e250 <memp_malloc_pool+0x1c>
 800e242:	4b0a      	ldr	r3, [pc, #40]	; (800e26c <memp_malloc_pool+0x38>)
 800e244:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800e248:	4909      	ldr	r1, [pc, #36]	; (800e270 <memp_malloc_pool+0x3c>)
 800e24a:	480a      	ldr	r0, [pc, #40]	; (800e274 <memp_malloc_pool+0x40>)
 800e24c:	f007 ff16 	bl	801607c <iprintf>
  if (desc == NULL) {
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d101      	bne.n	800e25a <memp_malloc_pool+0x26>
    return NULL;
 800e256:	2300      	movs	r3, #0
 800e258:	e003      	b.n	800e262 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f7ff ffb8 	bl	800e1d0 <do_memp_malloc_pool>
 800e260:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800e262:	4618      	mov	r0, r3
 800e264:	3708      	adds	r7, #8
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
 800e26a:	bf00      	nop
 800e26c:	080196a4 	.word	0x080196a4
 800e270:	08019764 	.word	0x08019764
 800e274:	0801973c 	.word	0x0801973c

0800e278 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	4603      	mov	r3, r0
 800e280:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800e282:	79fb      	ldrb	r3, [r7, #7]
 800e284:	2b0c      	cmp	r3, #12
 800e286:	d908      	bls.n	800e29a <memp_malloc+0x22>
 800e288:	4b0a      	ldr	r3, [pc, #40]	; (800e2b4 <memp_malloc+0x3c>)
 800e28a:	f240 1257 	movw	r2, #343	; 0x157
 800e28e:	490a      	ldr	r1, [pc, #40]	; (800e2b8 <memp_malloc+0x40>)
 800e290:	480a      	ldr	r0, [pc, #40]	; (800e2bc <memp_malloc+0x44>)
 800e292:	f007 fef3 	bl	801607c <iprintf>
 800e296:	2300      	movs	r3, #0
 800e298:	e008      	b.n	800e2ac <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800e29a:	79fb      	ldrb	r3, [r7, #7]
 800e29c:	4a08      	ldr	r2, [pc, #32]	; (800e2c0 <memp_malloc+0x48>)
 800e29e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7ff ff94 	bl	800e1d0 <do_memp_malloc_pool>
 800e2a8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
}
 800e2ac:	4618      	mov	r0, r3
 800e2ae:	3710      	adds	r7, #16
 800e2b0:	46bd      	mov	sp, r7
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	080196a4 	.word	0x080196a4
 800e2b8:	08019778 	.word	0x08019778
 800e2bc:	0801973c 	.word	0x0801973c
 800e2c0:	08019670 	.word	0x08019670

0800e2c4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]
 800e2cc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	f003 0303 	and.w	r3, r3, #3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d006      	beq.n	800e2e6 <do_memp_free_pool+0x22>
 800e2d8:	4b0d      	ldr	r3, [pc, #52]	; (800e310 <do_memp_free_pool+0x4c>)
 800e2da:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800e2de:	490d      	ldr	r1, [pc, #52]	; (800e314 <do_memp_free_pool+0x50>)
 800e2e0:	480d      	ldr	r0, [pc, #52]	; (800e318 <do_memp_free_pool+0x54>)
 800e2e2:	f007 fecb 	bl	801607c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800e2ea:	f007 fdff 	bl	8015eec <sys_arch_protect>
 800e2ee:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	689b      	ldr	r3, [r3, #8]
 800e2f4:	681a      	ldr	r2, [r3, #0]
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	689b      	ldr	r3, [r3, #8]
 800e2fe:	68fa      	ldr	r2, [r7, #12]
 800e300:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800e302:	68b8      	ldr	r0, [r7, #8]
 800e304:	f007 fe00 	bl	8015f08 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800e308:	bf00      	nop
 800e30a:	3710      	adds	r7, #16
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	080196a4 	.word	0x080196a4
 800e314:	08019798 	.word	0x08019798
 800e318:	0801973c 	.word	0x0801973c

0800e31c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b082      	sub	sp, #8
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d106      	bne.n	800e33a <memp_free_pool+0x1e>
 800e32c:	4b0a      	ldr	r3, [pc, #40]	; (800e358 <memp_free_pool+0x3c>)
 800e32e:	f240 1295 	movw	r2, #405	; 0x195
 800e332:	490a      	ldr	r1, [pc, #40]	; (800e35c <memp_free_pool+0x40>)
 800e334:	480a      	ldr	r0, [pc, #40]	; (800e360 <memp_free_pool+0x44>)
 800e336:	f007 fea1 	bl	801607c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d007      	beq.n	800e350 <memp_free_pool+0x34>
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d004      	beq.n	800e350 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800e346:	6839      	ldr	r1, [r7, #0]
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f7ff ffbb 	bl	800e2c4 <do_memp_free_pool>
 800e34e:	e000      	b.n	800e352 <memp_free_pool+0x36>
    return;
 800e350:	bf00      	nop
}
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}
 800e358:	080196a4 	.word	0x080196a4
 800e35c:	08019764 	.word	0x08019764
 800e360:	0801973c 	.word	0x0801973c

0800e364 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	4603      	mov	r3, r0
 800e36c:	6039      	str	r1, [r7, #0]
 800e36e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800e370:	79fb      	ldrb	r3, [r7, #7]
 800e372:	2b0c      	cmp	r3, #12
 800e374:	d907      	bls.n	800e386 <memp_free+0x22>
 800e376:	4b0c      	ldr	r3, [pc, #48]	; (800e3a8 <memp_free+0x44>)
 800e378:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800e37c:	490b      	ldr	r1, [pc, #44]	; (800e3ac <memp_free+0x48>)
 800e37e:	480c      	ldr	r0, [pc, #48]	; (800e3b0 <memp_free+0x4c>)
 800e380:	f007 fe7c 	bl	801607c <iprintf>
 800e384:	e00c      	b.n	800e3a0 <memp_free+0x3c>

  if (mem == NULL) {
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d008      	beq.n	800e39e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800e38c:	79fb      	ldrb	r3, [r7, #7]
 800e38e:	4a09      	ldr	r2, [pc, #36]	; (800e3b4 <memp_free+0x50>)
 800e390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	4618      	mov	r0, r3
 800e398:	f7ff ff94 	bl	800e2c4 <do_memp_free_pool>
 800e39c:	e000      	b.n	800e3a0 <memp_free+0x3c>
    return;
 800e39e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800e3a0:	3708      	adds	r7, #8
 800e3a2:	46bd      	mov	sp, r7
 800e3a4:	bd80      	pop	{r7, pc}
 800e3a6:	bf00      	nop
 800e3a8:	080196a4 	.word	0x080196a4
 800e3ac:	080197b8 	.word	0x080197b8
 800e3b0:	0801973c 	.word	0x0801973c
 800e3b4:	08019670 	.word	0x08019670

0800e3b8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800e3bc:	bf00      	nop
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr
	...

0800e3c8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b086      	sub	sp, #24
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
 800e3d4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d108      	bne.n	800e3ee <netif_add+0x26>
 800e3dc:	4b57      	ldr	r3, [pc, #348]	; (800e53c <netif_add+0x174>)
 800e3de:	f240 1227 	movw	r2, #295	; 0x127
 800e3e2:	4957      	ldr	r1, [pc, #348]	; (800e540 <netif_add+0x178>)
 800e3e4:	4857      	ldr	r0, [pc, #348]	; (800e544 <netif_add+0x17c>)
 800e3e6:	f007 fe49 	bl	801607c <iprintf>
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	e0a2      	b.n	800e534 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800e3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d108      	bne.n	800e406 <netif_add+0x3e>
 800e3f4:	4b51      	ldr	r3, [pc, #324]	; (800e53c <netif_add+0x174>)
 800e3f6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800e3fa:	4953      	ldr	r1, [pc, #332]	; (800e548 <netif_add+0x180>)
 800e3fc:	4851      	ldr	r0, [pc, #324]	; (800e544 <netif_add+0x17c>)
 800e3fe:	f007 fe3d 	bl	801607c <iprintf>
 800e402:	2300      	movs	r3, #0
 800e404:	e096      	b.n	800e534 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d101      	bne.n	800e410 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800e40c:	4b4f      	ldr	r3, [pc, #316]	; (800e54c <netif_add+0x184>)
 800e40e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d101      	bne.n	800e41a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800e416:	4b4d      	ldr	r3, [pc, #308]	; (800e54c <netif_add+0x184>)
 800e418:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e41a:	683b      	ldr	r3, [r7, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d101      	bne.n	800e424 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800e420:	4b4a      	ldr	r3, [pc, #296]	; (800e54c <netif_add+0x184>)
 800e422:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2200      	movs	r2, #0
 800e428:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	2200      	movs	r2, #0
 800e42e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	2200      	movs	r2, #0
 800e434:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	4a45      	ldr	r2, [pc, #276]	; (800e550 <netif_add+0x188>)
 800e43a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2200      	movs	r2, #0
 800e440:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	2200      	movs	r2, #0
 800e446:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	2200      	movs	r2, #0
 800e44e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	6a3a      	ldr	r2, [r7, #32]
 800e454:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800e456:	4b3f      	ldr	r3, [pc, #252]	; (800e554 <netif_add+0x18c>)
 800e458:	781a      	ldrb	r2, [r3, #0]
 800e45a:	68fb      	ldr	r3, [r7, #12]
 800e45c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e464:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	68b9      	ldr	r1, [r7, #8]
 800e46c:	68f8      	ldr	r0, [r7, #12]
 800e46e:	f000 f913 	bl	800e698 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800e472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	4798      	blx	r3
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d001      	beq.n	800e482 <netif_add+0xba>
    return NULL;
 800e47e:	2300      	movs	r3, #0
 800e480:	e058      	b.n	800e534 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e488:	2bff      	cmp	r3, #255	; 0xff
 800e48a:	d103      	bne.n	800e494 <netif_add+0xcc>
        netif->num = 0;
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2200      	movs	r2, #0
 800e490:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800e494:	2300      	movs	r3, #0
 800e496:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e498:	4b2f      	ldr	r3, [pc, #188]	; (800e558 <netif_add+0x190>)
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	617b      	str	r3, [r7, #20]
 800e49e:	e02b      	b.n	800e4f8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800e4a0:	697a      	ldr	r2, [r7, #20]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d106      	bne.n	800e4b6 <netif_add+0xee>
 800e4a8:	4b24      	ldr	r3, [pc, #144]	; (800e53c <netif_add+0x174>)
 800e4aa:	f240 128b 	movw	r2, #395	; 0x18b
 800e4ae:	492b      	ldr	r1, [pc, #172]	; (800e55c <netif_add+0x194>)
 800e4b0:	4824      	ldr	r0, [pc, #144]	; (800e544 <netif_add+0x17c>)
 800e4b2:	f007 fde3 	bl	801607c <iprintf>
        num_netifs++;
 800e4b6:	693b      	ldr	r3, [r7, #16]
 800e4b8:	3301      	adds	r3, #1
 800e4ba:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800e4bc:	693b      	ldr	r3, [r7, #16]
 800e4be:	2bff      	cmp	r3, #255	; 0xff
 800e4c0:	dd06      	ble.n	800e4d0 <netif_add+0x108>
 800e4c2:	4b1e      	ldr	r3, [pc, #120]	; (800e53c <netif_add+0x174>)
 800e4c4:	f240 128d 	movw	r2, #397	; 0x18d
 800e4c8:	4925      	ldr	r1, [pc, #148]	; (800e560 <netif_add+0x198>)
 800e4ca:	481e      	ldr	r0, [pc, #120]	; (800e544 <netif_add+0x17c>)
 800e4cc:	f007 fdd6 	bl	801607c <iprintf>
        if (netif2->num == netif->num) {
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4dc:	429a      	cmp	r2, r3
 800e4de:	d108      	bne.n	800e4f2 <netif_add+0x12a>
          netif->num++;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e4e6:	3301      	adds	r3, #1
 800e4e8:	b2da      	uxtb	r2, r3
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800e4f0:	e005      	b.n	800e4fe <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800e4f2:	697b      	ldr	r3, [r7, #20]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	617b      	str	r3, [r7, #20]
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d1d0      	bne.n	800e4a0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800e4fe:	697b      	ldr	r3, [r7, #20]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d1be      	bne.n	800e482 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e50a:	2bfe      	cmp	r3, #254	; 0xfe
 800e50c:	d103      	bne.n	800e516 <netif_add+0x14e>
    netif_num = 0;
 800e50e:	4b11      	ldr	r3, [pc, #68]	; (800e554 <netif_add+0x18c>)
 800e510:	2200      	movs	r2, #0
 800e512:	701a      	strb	r2, [r3, #0]
 800e514:	e006      	b.n	800e524 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e51c:	3301      	adds	r3, #1
 800e51e:	b2da      	uxtb	r2, r3
 800e520:	4b0c      	ldr	r3, [pc, #48]	; (800e554 <netif_add+0x18c>)
 800e522:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800e524:	4b0c      	ldr	r3, [pc, #48]	; (800e558 <netif_add+0x190>)
 800e526:	681a      	ldr	r2, [r3, #0]
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800e52c:	4a0a      	ldr	r2, [pc, #40]	; (800e558 <netif_add+0x190>)
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800e532:	68fb      	ldr	r3, [r7, #12]
}
 800e534:	4618      	mov	r0, r3
 800e536:	3718      	adds	r7, #24
 800e538:	46bd      	mov	sp, r7
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	080197d4 	.word	0x080197d4
 800e540:	080198a8 	.word	0x080198a8
 800e544:	08019864 	.word	0x08019864
 800e548:	080198c4 	.word	0x080198c4
 800e54c:	08018ff8 	.word	0x08018ff8
 800e550:	0800e973 	.word	0x0800e973
 800e554:	240067b4 	.word	0x240067b4
 800e558:	2400a778 	.word	0x2400a778
 800e55c:	080198e8 	.word	0x080198e8
 800e560:	080198fc 	.word	0x080198fc

0800e564 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e564:	b580      	push	{r7, lr}
 800e566:	b082      	sub	sp, #8
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800e56e:	6839      	ldr	r1, [r7, #0]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f002 fead 	bl	80112d0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800e576:	6839      	ldr	r1, [r7, #0]
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f007 f9fd 	bl	8015978 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800e57e:	bf00      	nop
 800e580:	3708      	adds	r7, #8
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
	...

0800e588 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b086      	sub	sp, #24
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	60f8      	str	r0, [r7, #12]
 800e590:	60b9      	str	r1, [r7, #8]
 800e592:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d106      	bne.n	800e5a8 <netif_do_set_ipaddr+0x20>
 800e59a:	4b1d      	ldr	r3, [pc, #116]	; (800e610 <netif_do_set_ipaddr+0x88>)
 800e59c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800e5a0:	491c      	ldr	r1, [pc, #112]	; (800e614 <netif_do_set_ipaddr+0x8c>)
 800e5a2:	481d      	ldr	r0, [pc, #116]	; (800e618 <netif_do_set_ipaddr+0x90>)
 800e5a4:	f007 fd6a 	bl	801607c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d106      	bne.n	800e5bc <netif_do_set_ipaddr+0x34>
 800e5ae:	4b18      	ldr	r3, [pc, #96]	; (800e610 <netif_do_set_ipaddr+0x88>)
 800e5b0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800e5b4:	4917      	ldr	r1, [pc, #92]	; (800e614 <netif_do_set_ipaddr+0x8c>)
 800e5b6:	4818      	ldr	r0, [pc, #96]	; (800e618 <netif_do_set_ipaddr+0x90>)
 800e5b8:	f007 fd60 	bl	801607c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	681a      	ldr	r2, [r3, #0]
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	3304      	adds	r3, #4
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	429a      	cmp	r2, r3
 800e5c8:	d01c      	beq.n	800e604 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	3304      	adds	r3, #4
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800e5da:	f107 0314 	add.w	r3, r7, #20
 800e5de:	4619      	mov	r1, r3
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f7ff ffbf 	bl	800e564 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d002      	beq.n	800e5f2 <netif_do_set_ipaddr+0x6a>
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	e000      	b.n	800e5f4 <netif_do_set_ipaddr+0x6c>
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	68fa      	ldr	r2, [r7, #12]
 800e5f6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800e5f8:	2101      	movs	r1, #1
 800e5fa:	68f8      	ldr	r0, [r7, #12]
 800e5fc:	f000 f8d2 	bl	800e7a4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800e600:	2301      	movs	r3, #1
 800e602:	e000      	b.n	800e606 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800e604:	2300      	movs	r3, #0
}
 800e606:	4618      	mov	r0, r3
 800e608:	3718      	adds	r7, #24
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	080197d4 	.word	0x080197d4
 800e614:	0801992c 	.word	0x0801992c
 800e618:	08019864 	.word	0x08019864

0800e61c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800e628:	68bb      	ldr	r3, [r7, #8]
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	3308      	adds	r3, #8
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	429a      	cmp	r2, r3
 800e634:	d00a      	beq.n	800e64c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800e636:	68bb      	ldr	r3, [r7, #8]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d002      	beq.n	800e642 <netif_do_set_netmask+0x26>
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	e000      	b.n	800e644 <netif_do_set_netmask+0x28>
 800e642:	2300      	movs	r3, #0
 800e644:	68fa      	ldr	r2, [r7, #12]
 800e646:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800e648:	2301      	movs	r3, #1
 800e64a:	e000      	b.n	800e64e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800e64c:	2300      	movs	r3, #0
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3714      	adds	r7, #20
 800e652:	46bd      	mov	sp, r7
 800e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e658:	4770      	bx	lr

0800e65a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800e65a:	b480      	push	{r7}
 800e65c:	b085      	sub	sp, #20
 800e65e:	af00      	add	r7, sp, #0
 800e660:	60f8      	str	r0, [r7, #12]
 800e662:	60b9      	str	r1, [r7, #8]
 800e664:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	330c      	adds	r3, #12
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	429a      	cmp	r2, r3
 800e672:	d00a      	beq.n	800e68a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	2b00      	cmp	r3, #0
 800e678:	d002      	beq.n	800e680 <netif_do_set_gw+0x26>
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	e000      	b.n	800e682 <netif_do_set_gw+0x28>
 800e680:	2300      	movs	r3, #0
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800e686:	2301      	movs	r3, #1
 800e688:	e000      	b.n	800e68c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800e68a:	2300      	movs	r3, #0
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3714      	adds	r7, #20
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr

0800e698 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b088      	sub	sp, #32
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	60f8      	str	r0, [r7, #12]
 800e6a0:	60b9      	str	r1, [r7, #8]
 800e6a2:	607a      	str	r2, [r7, #4]
 800e6a4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d101      	bne.n	800e6b8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800e6b4:	4b1c      	ldr	r3, [pc, #112]	; (800e728 <netif_set_addr+0x90>)
 800e6b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d101      	bne.n	800e6c2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800e6be:	4b1a      	ldr	r3, [pc, #104]	; (800e728 <netif_set_addr+0x90>)
 800e6c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d101      	bne.n	800e6cc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800e6c8:	4b17      	ldr	r3, [pc, #92]	; (800e728 <netif_set_addr+0x90>)
 800e6ca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d003      	beq.n	800e6da <netif_set_addr+0x42>
 800e6d2:	68bb      	ldr	r3, [r7, #8]
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d101      	bne.n	800e6de <netif_set_addr+0x46>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e000      	b.n	800e6e0 <netif_set_addr+0x48>
 800e6de:	2300      	movs	r3, #0
 800e6e0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800e6e2:	697b      	ldr	r3, [r7, #20]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d006      	beq.n	800e6f6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e6e8:	f107 0310 	add.w	r3, r7, #16
 800e6ec:	461a      	mov	r2, r3
 800e6ee:	68b9      	ldr	r1, [r7, #8]
 800e6f0:	68f8      	ldr	r0, [r7, #12]
 800e6f2:	f7ff ff49 	bl	800e588 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800e6f6:	69fa      	ldr	r2, [r7, #28]
 800e6f8:	6879      	ldr	r1, [r7, #4]
 800e6fa:	68f8      	ldr	r0, [r7, #12]
 800e6fc:	f7ff ff8e 	bl	800e61c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800e700:	69ba      	ldr	r2, [r7, #24]
 800e702:	6839      	ldr	r1, [r7, #0]
 800e704:	68f8      	ldr	r0, [r7, #12]
 800e706:	f7ff ffa8 	bl	800e65a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d106      	bne.n	800e71e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800e710:	f107 0310 	add.w	r3, r7, #16
 800e714:	461a      	mov	r2, r3
 800e716:	68b9      	ldr	r1, [r7, #8]
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f7ff ff35 	bl	800e588 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800e71e:	bf00      	nop
 800e720:	3720      	adds	r7, #32
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	08018ff8 	.word	0x08018ff8

0800e72c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800e72c:	b480      	push	{r7}
 800e72e:	b083      	sub	sp, #12
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800e734:	4a04      	ldr	r2, [pc, #16]	; (800e748 <netif_set_default+0x1c>)
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800e73a:	bf00      	nop
 800e73c:	370c      	adds	r7, #12
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	2400a77c 	.word	0x2400a77c

0800e74c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b082      	sub	sp, #8
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d107      	bne.n	800e76a <netif_set_up+0x1e>
 800e75a:	4b0f      	ldr	r3, [pc, #60]	; (800e798 <netif_set_up+0x4c>)
 800e75c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800e760:	490e      	ldr	r1, [pc, #56]	; (800e79c <netif_set_up+0x50>)
 800e762:	480f      	ldr	r0, [pc, #60]	; (800e7a0 <netif_set_up+0x54>)
 800e764:	f007 fc8a 	bl	801607c <iprintf>
 800e768:	e013      	b.n	800e792 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e770:	f003 0301 	and.w	r3, r3, #1
 800e774:	2b00      	cmp	r3, #0
 800e776:	d10c      	bne.n	800e792 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e77e:	f043 0301 	orr.w	r3, r3, #1
 800e782:	b2da      	uxtb	r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e78a:	2103      	movs	r1, #3
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	f000 f809 	bl	800e7a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800e792:	3708      	adds	r7, #8
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}
 800e798:	080197d4 	.word	0x080197d4
 800e79c:	0801999c 	.word	0x0801999c
 800e7a0:	08019864 	.word	0x08019864

0800e7a4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d106      	bne.n	800e7c4 <netif_issue_reports+0x20>
 800e7b6:	4b18      	ldr	r3, [pc, #96]	; (800e818 <netif_issue_reports+0x74>)
 800e7b8:	f240 326d 	movw	r2, #877	; 0x36d
 800e7bc:	4917      	ldr	r1, [pc, #92]	; (800e81c <netif_issue_reports+0x78>)
 800e7be:	4818      	ldr	r0, [pc, #96]	; (800e820 <netif_issue_reports+0x7c>)
 800e7c0:	f007 fc5c 	bl	801607c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7ca:	f003 0304 	and.w	r3, r3, #4
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d01e      	beq.n	800e810 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7d8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d017      	beq.n	800e810 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e7e0:	78fb      	ldrb	r3, [r7, #3]
 800e7e2:	f003 0301 	and.w	r3, r3, #1
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d013      	beq.n	800e812 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	3304      	adds	r3, #4
 800e7ee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d00e      	beq.n	800e812 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e7fa:	f003 0308 	and.w	r3, r3, #8
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d007      	beq.n	800e812 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	3304      	adds	r3, #4
 800e806:	4619      	mov	r1, r3
 800e808:	6878      	ldr	r0, [r7, #4]
 800e80a:	f7fd fd27 	bl	800c25c <etharp_request>
 800e80e:	e000      	b.n	800e812 <netif_issue_reports+0x6e>
    return;
 800e810:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800e812:	3708      	adds	r7, #8
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}
 800e818:	080197d4 	.word	0x080197d4
 800e81c:	080199b8 	.word	0x080199b8
 800e820:	08019864 	.word	0x08019864

0800e824 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b082      	sub	sp, #8
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d107      	bne.n	800e842 <netif_set_down+0x1e>
 800e832:	4b12      	ldr	r3, [pc, #72]	; (800e87c <netif_set_down+0x58>)
 800e834:	f240 329b 	movw	r2, #923	; 0x39b
 800e838:	4911      	ldr	r1, [pc, #68]	; (800e880 <netif_set_down+0x5c>)
 800e83a:	4812      	ldr	r0, [pc, #72]	; (800e884 <netif_set_down+0x60>)
 800e83c:	f007 fc1e 	bl	801607c <iprintf>
 800e840:	e019      	b.n	800e876 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e848:	f003 0301 	and.w	r3, r3, #1
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d012      	beq.n	800e876 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e856:	f023 0301 	bic.w	r3, r3, #1
 800e85a:	b2da      	uxtb	r2, r3
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e868:	f003 0308 	and.w	r3, r3, #8
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d002      	beq.n	800e876 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800e870:	6878      	ldr	r0, [r7, #4]
 800e872:	f7fd f8b1 	bl	800b9d8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800e876:	3708      	adds	r7, #8
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	080197d4 	.word	0x080197d4
 800e880:	080199dc 	.word	0x080199dc
 800e884:	08019864 	.word	0x08019864

0800e888 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b082      	sub	sp, #8
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2b00      	cmp	r3, #0
 800e894:	d107      	bne.n	800e8a6 <netif_set_link_up+0x1e>
 800e896:	4b13      	ldr	r3, [pc, #76]	; (800e8e4 <netif_set_link_up+0x5c>)
 800e898:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800e89c:	4912      	ldr	r1, [pc, #72]	; (800e8e8 <netif_set_link_up+0x60>)
 800e89e:	4813      	ldr	r0, [pc, #76]	; (800e8ec <netif_set_link_up+0x64>)
 800e8a0:	f007 fbec 	bl	801607c <iprintf>
 800e8a4:	e01b      	b.n	800e8de <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e8ac:	f003 0304 	and.w	r3, r3, #4
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d114      	bne.n	800e8de <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e8ba:	f043 0304 	orr.w	r3, r3, #4
 800e8be:	b2da      	uxtb	r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800e8c6:	2103      	movs	r1, #3
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f7ff ff6b 	bl	800e7a4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	69db      	ldr	r3, [r3, #28]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d003      	beq.n	800e8de <netif_set_link_up+0x56>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	69db      	ldr	r3, [r3, #28]
 800e8da:	6878      	ldr	r0, [r7, #4]
 800e8dc:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e8de:	3708      	adds	r7, #8
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}
 800e8e4:	080197d4 	.word	0x080197d4
 800e8e8:	080199fc 	.word	0x080199fc
 800e8ec:	08019864 	.word	0x08019864

0800e8f0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d107      	bne.n	800e90e <netif_set_link_down+0x1e>
 800e8fe:	4b11      	ldr	r3, [pc, #68]	; (800e944 <netif_set_link_down+0x54>)
 800e900:	f240 4206 	movw	r2, #1030	; 0x406
 800e904:	4910      	ldr	r1, [pc, #64]	; (800e948 <netif_set_link_down+0x58>)
 800e906:	4811      	ldr	r0, [pc, #68]	; (800e94c <netif_set_link_down+0x5c>)
 800e908:	f007 fbb8 	bl	801607c <iprintf>
 800e90c:	e017      	b.n	800e93e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e914:	f003 0304 	and.w	r3, r3, #4
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d010      	beq.n	800e93e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e922:	f023 0304 	bic.w	r3, r3, #4
 800e926:	b2da      	uxtb	r2, r3
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	69db      	ldr	r3, [r3, #28]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d003      	beq.n	800e93e <netif_set_link_down+0x4e>
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	69db      	ldr	r3, [r3, #28]
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800e93e:	3708      	adds	r7, #8
 800e940:	46bd      	mov	sp, r7
 800e942:	bd80      	pop	{r7, pc}
 800e944:	080197d4 	.word	0x080197d4
 800e948:	08019a20 	.word	0x08019a20
 800e94c:	08019864 	.word	0x08019864

0800e950 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d002      	beq.n	800e966 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	683a      	ldr	r2, [r7, #0]
 800e964:	61da      	str	r2, [r3, #28]
  }
}
 800e966:	bf00      	nop
 800e968:	370c      	adds	r7, #12
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr

0800e972 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800e972:	b480      	push	{r7}
 800e974:	b085      	sub	sp, #20
 800e976:	af00      	add	r7, sp, #0
 800e978:	60f8      	str	r0, [r7, #12]
 800e97a:	60b9      	str	r1, [r7, #8]
 800e97c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800e97e:	f06f 030b 	mvn.w	r3, #11
}
 800e982:	4618      	mov	r0, r3
 800e984:	3714      	adds	r7, #20
 800e986:	46bd      	mov	sp, r7
 800e988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98c:	4770      	bx	lr
	...

0800e990 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800e990:	b480      	push	{r7}
 800e992:	b085      	sub	sp, #20
 800e994:	af00      	add	r7, sp, #0
 800e996:	4603      	mov	r3, r0
 800e998:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800e99a:	79fb      	ldrb	r3, [r7, #7]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d013      	beq.n	800e9c8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800e9a0:	4b0d      	ldr	r3, [pc, #52]	; (800e9d8 <netif_get_by_index+0x48>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	60fb      	str	r3, [r7, #12]
 800e9a6:	e00c      	b.n	800e9c2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e9ae:	3301      	adds	r3, #1
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	79fa      	ldrb	r2, [r7, #7]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d101      	bne.n	800e9bc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	e006      	b.n	800e9ca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	60fb      	str	r3, [r7, #12]
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d1ef      	bne.n	800e9a8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800e9c8:	2300      	movs	r3, #0
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3714      	adds	r7, #20
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d4:	4770      	bx	lr
 800e9d6:	bf00      	nop
 800e9d8:	2400a778 	.word	0x2400a778

0800e9dc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800e9dc:	b480      	push	{r7}
 800e9de:	b085      	sub	sp, #20
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	4611      	mov	r1, r2
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	460b      	mov	r3, r1
 800e9ec:	80fb      	strh	r3, [r7, #6]
 800e9ee:	4613      	mov	r3, r2
 800e9f0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	68ba      	ldr	r2, [r7, #8]
 800e9fc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	88fa      	ldrh	r2, [r7, #6]
 800ea02:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	88ba      	ldrh	r2, [r7, #4]
 800ea08:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ea0a:	8b3b      	ldrh	r3, [r7, #24]
 800ea0c:	b2da      	uxtb	r2, r3
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	7f3a      	ldrb	r2, [r7, #28]
 800ea16:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	2200      	movs	r2, #0
 800ea22:	73da      	strb	r2, [r3, #15]
}
 800ea24:	bf00      	nop
 800ea26:	3714      	adds	r7, #20
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr

0800ea30 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	b08c      	sub	sp, #48	; 0x30
 800ea34:	af02      	add	r7, sp, #8
 800ea36:	4603      	mov	r3, r0
 800ea38:	71fb      	strb	r3, [r7, #7]
 800ea3a:	460b      	mov	r3, r1
 800ea3c:	80bb      	strh	r3, [r7, #4]
 800ea3e:	4613      	mov	r3, r2
 800ea40:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ea42:	79fb      	ldrb	r3, [r7, #7]
 800ea44:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ea46:	887b      	ldrh	r3, [r7, #2]
 800ea48:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ea4c:	d07d      	beq.n	800eb4a <pbuf_alloc+0x11a>
 800ea4e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ea52:	f300 80c6 	bgt.w	800ebe2 <pbuf_alloc+0x1b2>
 800ea56:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ea5a:	d010      	beq.n	800ea7e <pbuf_alloc+0x4e>
 800ea5c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ea60:	f300 80bf 	bgt.w	800ebe2 <pbuf_alloc+0x1b2>
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d002      	beq.n	800ea6e <pbuf_alloc+0x3e>
 800ea68:	2b41      	cmp	r3, #65	; 0x41
 800ea6a:	f040 80ba 	bne.w	800ebe2 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ea6e:	887a      	ldrh	r2, [r7, #2]
 800ea70:	88bb      	ldrh	r3, [r7, #4]
 800ea72:	4619      	mov	r1, r3
 800ea74:	2000      	movs	r0, #0
 800ea76:	f000 f8cf 	bl	800ec18 <pbuf_alloc_reference>
 800ea7a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ea7c:	e0bb      	b.n	800ebf6 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ea7e:	2300      	movs	r3, #0
 800ea80:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ea82:	2300      	movs	r3, #0
 800ea84:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ea86:	88bb      	ldrh	r3, [r7, #4]
 800ea88:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ea8a:	200c      	movs	r0, #12
 800ea8c:	f7ff fbf4 	bl	800e278 <memp_malloc>
 800ea90:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ea92:	693b      	ldr	r3, [r7, #16]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d107      	bne.n	800eaa8 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 800ea98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d002      	beq.n	800eaa4 <pbuf_alloc+0x74>
            pbuf_free(p);
 800ea9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eaa0:	f000 faa8 	bl	800eff4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	e0a7      	b.n	800ebf8 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800eaa8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eaaa:	3303      	adds	r3, #3
 800eaac:	b29b      	uxth	r3, r3
 800eaae:	f023 0303 	bic.w	r3, r3, #3
 800eab2:	b29b      	uxth	r3, r3
 800eab4:	f5c3 63bf 	rsb	r3, r3, #1528	; 0x5f8
 800eab8:	b29b      	uxth	r3, r3
 800eaba:	8b7a      	ldrh	r2, [r7, #26]
 800eabc:	4293      	cmp	r3, r2
 800eabe:	bf28      	it	cs
 800eac0:	4613      	movcs	r3, r2
 800eac2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800eac4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eac6:	3310      	adds	r3, #16
 800eac8:	693a      	ldr	r2, [r7, #16]
 800eaca:	4413      	add	r3, r2
 800eacc:	3303      	adds	r3, #3
 800eace:	f023 0303 	bic.w	r3, r3, #3
 800ead2:	4618      	mov	r0, r3
 800ead4:	89f9      	ldrh	r1, [r7, #14]
 800ead6:	8b7a      	ldrh	r2, [r7, #26]
 800ead8:	2300      	movs	r3, #0
 800eada:	9301      	str	r3, [sp, #4]
 800eadc:	887b      	ldrh	r3, [r7, #2]
 800eade:	9300      	str	r3, [sp, #0]
 800eae0:	460b      	mov	r3, r1
 800eae2:	4601      	mov	r1, r0
 800eae4:	6938      	ldr	r0, [r7, #16]
 800eae6:	f7ff ff79 	bl	800e9dc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	685b      	ldr	r3, [r3, #4]
 800eaee:	f003 0303 	and.w	r3, r3, #3
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d006      	beq.n	800eb04 <pbuf_alloc+0xd4>
 800eaf6:	4b42      	ldr	r3, [pc, #264]	; (800ec00 <pbuf_alloc+0x1d0>)
 800eaf8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eafc:	4941      	ldr	r1, [pc, #260]	; (800ec04 <pbuf_alloc+0x1d4>)
 800eafe:	4842      	ldr	r0, [pc, #264]	; (800ec08 <pbuf_alloc+0x1d8>)
 800eb00:	f007 fabc 	bl	801607c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800eb04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb06:	3303      	adds	r3, #3
 800eb08:	f023 0303 	bic.w	r3, r3, #3
 800eb0c:	f5b3 6fbf 	cmp.w	r3, #1528	; 0x5f8
 800eb10:	d106      	bne.n	800eb20 <pbuf_alloc+0xf0>
 800eb12:	4b3b      	ldr	r3, [pc, #236]	; (800ec00 <pbuf_alloc+0x1d0>)
 800eb14:	f44f 7281 	mov.w	r2, #258	; 0x102
 800eb18:	493c      	ldr	r1, [pc, #240]	; (800ec0c <pbuf_alloc+0x1dc>)
 800eb1a:	483b      	ldr	r0, [pc, #236]	; (800ec08 <pbuf_alloc+0x1d8>)
 800eb1c:	f007 faae 	bl	801607c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d102      	bne.n	800eb2c <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	627b      	str	r3, [r7, #36]	; 0x24
 800eb2a:	e002      	b.n	800eb32 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800eb2c:	69fb      	ldr	r3, [r7, #28]
 800eb2e:	693a      	ldr	r2, [r7, #16]
 800eb30:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800eb36:	8b7a      	ldrh	r2, [r7, #26]
 800eb38:	89fb      	ldrh	r3, [r7, #14]
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800eb42:	8b7b      	ldrh	r3, [r7, #26]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d1a0      	bne.n	800ea8a <pbuf_alloc+0x5a>
      break;
 800eb48:	e055      	b.n	800ebf6 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800eb4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eb4c:	3303      	adds	r3, #3
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	f023 0303 	bic.w	r3, r3, #3
 800eb54:	b29a      	uxth	r2, r3
 800eb56:	88bb      	ldrh	r3, [r7, #4]
 800eb58:	3303      	adds	r3, #3
 800eb5a:	b29b      	uxth	r3, r3
 800eb5c:	f023 0303 	bic.w	r3, r3, #3
 800eb60:	b29b      	uxth	r3, r3
 800eb62:	4413      	add	r3, r2
 800eb64:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800eb66:	8b3b      	ldrh	r3, [r7, #24]
 800eb68:	3310      	adds	r3, #16
 800eb6a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800eb6c:	8b3a      	ldrh	r2, [r7, #24]
 800eb6e:	88bb      	ldrh	r3, [r7, #4]
 800eb70:	3303      	adds	r3, #3
 800eb72:	f023 0303 	bic.w	r3, r3, #3
 800eb76:	429a      	cmp	r2, r3
 800eb78:	d306      	bcc.n	800eb88 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800eb7a:	8afa      	ldrh	r2, [r7, #22]
 800eb7c:	88bb      	ldrh	r3, [r7, #4]
 800eb7e:	3303      	adds	r3, #3
 800eb80:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800eb84:	429a      	cmp	r2, r3
 800eb86:	d201      	bcs.n	800eb8c <pbuf_alloc+0x15c>
        return NULL;
 800eb88:	2300      	movs	r3, #0
 800eb8a:	e035      	b.n	800ebf8 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800eb8c:	8afb      	ldrh	r3, [r7, #22]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7ff f9ce 	bl	800df30 <mem_malloc>
 800eb94:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800eb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d101      	bne.n	800eba0 <pbuf_alloc+0x170>
        return NULL;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	e02b      	b.n	800ebf8 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800eba0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800eba2:	3310      	adds	r3, #16
 800eba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eba6:	4413      	add	r3, r2
 800eba8:	3303      	adds	r3, #3
 800ebaa:	f023 0303 	bic.w	r3, r3, #3
 800ebae:	4618      	mov	r0, r3
 800ebb0:	88b9      	ldrh	r1, [r7, #4]
 800ebb2:	88ba      	ldrh	r2, [r7, #4]
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	9301      	str	r3, [sp, #4]
 800ebb8:	887b      	ldrh	r3, [r7, #2]
 800ebba:	9300      	str	r3, [sp, #0]
 800ebbc:	460b      	mov	r3, r1
 800ebbe:	4601      	mov	r1, r0
 800ebc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebc2:	f7ff ff0b 	bl	800e9dc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ebc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	f003 0303 	and.w	r3, r3, #3
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d010      	beq.n	800ebf4 <pbuf_alloc+0x1c4>
 800ebd2:	4b0b      	ldr	r3, [pc, #44]	; (800ec00 <pbuf_alloc+0x1d0>)
 800ebd4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ebd8:	490d      	ldr	r1, [pc, #52]	; (800ec10 <pbuf_alloc+0x1e0>)
 800ebda:	480b      	ldr	r0, [pc, #44]	; (800ec08 <pbuf_alloc+0x1d8>)
 800ebdc:	f007 fa4e 	bl	801607c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ebe0:	e008      	b.n	800ebf4 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ebe2:	4b07      	ldr	r3, [pc, #28]	; (800ec00 <pbuf_alloc+0x1d0>)
 800ebe4:	f240 1227 	movw	r2, #295	; 0x127
 800ebe8:	490a      	ldr	r1, [pc, #40]	; (800ec14 <pbuf_alloc+0x1e4>)
 800ebea:	4807      	ldr	r0, [pc, #28]	; (800ec08 <pbuf_alloc+0x1d8>)
 800ebec:	f007 fa46 	bl	801607c <iprintf>
      return NULL;
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	e001      	b.n	800ebf8 <pbuf_alloc+0x1c8>
      break;
 800ebf4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ebf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3728      	adds	r7, #40	; 0x28
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd80      	pop	{r7, pc}
 800ec00:	08019a44 	.word	0x08019a44
 800ec04:	08019ab8 	.word	0x08019ab8
 800ec08:	08019ae8 	.word	0x08019ae8
 800ec0c:	08019b10 	.word	0x08019b10
 800ec10:	08019b44 	.word	0x08019b44
 800ec14:	08019b70 	.word	0x08019b70

0800ec18 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b086      	sub	sp, #24
 800ec1c:	af02      	add	r7, sp, #8
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	460b      	mov	r3, r1
 800ec22:	807b      	strh	r3, [r7, #2]
 800ec24:	4613      	mov	r3, r2
 800ec26:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800ec28:	883b      	ldrh	r3, [r7, #0]
 800ec2a:	2b41      	cmp	r3, #65	; 0x41
 800ec2c:	d009      	beq.n	800ec42 <pbuf_alloc_reference+0x2a>
 800ec2e:	883b      	ldrh	r3, [r7, #0]
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	d006      	beq.n	800ec42 <pbuf_alloc_reference+0x2a>
 800ec34:	4b0f      	ldr	r3, [pc, #60]	; (800ec74 <pbuf_alloc_reference+0x5c>)
 800ec36:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ec3a:	490f      	ldr	r1, [pc, #60]	; (800ec78 <pbuf_alloc_reference+0x60>)
 800ec3c:	480f      	ldr	r0, [pc, #60]	; (800ec7c <pbuf_alloc_reference+0x64>)
 800ec3e:	f007 fa1d 	bl	801607c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800ec42:	200b      	movs	r0, #11
 800ec44:	f7ff fb18 	bl	800e278 <memp_malloc>
 800ec48:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d101      	bne.n	800ec54 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800ec50:	2300      	movs	r3, #0
 800ec52:	e00b      	b.n	800ec6c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ec54:	8879      	ldrh	r1, [r7, #2]
 800ec56:	887a      	ldrh	r2, [r7, #2]
 800ec58:	2300      	movs	r3, #0
 800ec5a:	9301      	str	r3, [sp, #4]
 800ec5c:	883b      	ldrh	r3, [r7, #0]
 800ec5e:	9300      	str	r3, [sp, #0]
 800ec60:	460b      	mov	r3, r1
 800ec62:	6879      	ldr	r1, [r7, #4]
 800ec64:	68f8      	ldr	r0, [r7, #12]
 800ec66:	f7ff feb9 	bl	800e9dc <pbuf_init_alloced_pbuf>
  return p;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
}
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	3710      	adds	r7, #16
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}
 800ec74:	08019a44 	.word	0x08019a44
 800ec78:	08019b8c 	.word	0x08019b8c
 800ec7c:	08019ae8 	.word	0x08019ae8

0800ec80 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b088      	sub	sp, #32
 800ec84:	af02      	add	r7, sp, #8
 800ec86:	607b      	str	r3, [r7, #4]
 800ec88:	4603      	mov	r3, r0
 800ec8a:	73fb      	strb	r3, [r7, #15]
 800ec8c:	460b      	mov	r3, r1
 800ec8e:	81bb      	strh	r3, [r7, #12]
 800ec90:	4613      	mov	r3, r2
 800ec92:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800ec94:	7bfb      	ldrb	r3, [r7, #15]
 800ec96:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800ec98:	8a7b      	ldrh	r3, [r7, #18]
 800ec9a:	3303      	adds	r3, #3
 800ec9c:	f023 0203 	bic.w	r2, r3, #3
 800eca0:	89bb      	ldrh	r3, [r7, #12]
 800eca2:	441a      	add	r2, r3
 800eca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eca6:	429a      	cmp	r2, r3
 800eca8:	d901      	bls.n	800ecae <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	e018      	b.n	800ece0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800ecae:	6a3b      	ldr	r3, [r7, #32]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d007      	beq.n	800ecc4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800ecb4:	8a7b      	ldrh	r3, [r7, #18]
 800ecb6:	3303      	adds	r3, #3
 800ecb8:	f023 0303 	bic.w	r3, r3, #3
 800ecbc:	6a3a      	ldr	r2, [r7, #32]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	617b      	str	r3, [r7, #20]
 800ecc2:	e001      	b.n	800ecc8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	89b9      	ldrh	r1, [r7, #12]
 800eccc:	89ba      	ldrh	r2, [r7, #12]
 800ecce:	2302      	movs	r3, #2
 800ecd0:	9301      	str	r3, [sp, #4]
 800ecd2:	897b      	ldrh	r3, [r7, #10]
 800ecd4:	9300      	str	r3, [sp, #0]
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	6979      	ldr	r1, [r7, #20]
 800ecda:	f7ff fe7f 	bl	800e9dc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800ecde:	687b      	ldr	r3, [r7, #4]
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3718      	adds	r7, #24
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800ece8:	b580      	push	{r7, lr}
 800ecea:	b084      	sub	sp, #16
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d106      	bne.n	800ed08 <pbuf_realloc+0x20>
 800ecfa:	4b3a      	ldr	r3, [pc, #232]	; (800ede4 <pbuf_realloc+0xfc>)
 800ecfc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ed00:	4939      	ldr	r1, [pc, #228]	; (800ede8 <pbuf_realloc+0x100>)
 800ed02:	483a      	ldr	r0, [pc, #232]	; (800edec <pbuf_realloc+0x104>)
 800ed04:	f007 f9ba 	bl	801607c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	891b      	ldrh	r3, [r3, #8]
 800ed0c:	887a      	ldrh	r2, [r7, #2]
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d263      	bcs.n	800edda <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	891a      	ldrh	r2, [r3, #8]
 800ed16:	887b      	ldrh	r3, [r7, #2]
 800ed18:	1ad3      	subs	r3, r2, r3
 800ed1a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ed1c:	887b      	ldrh	r3, [r7, #2]
 800ed1e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ed24:	e018      	b.n	800ed58 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	895b      	ldrh	r3, [r3, #10]
 800ed2a:	897a      	ldrh	r2, [r7, #10]
 800ed2c:	1ad3      	subs	r3, r2, r3
 800ed2e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	891a      	ldrh	r2, [r3, #8]
 800ed34:	893b      	ldrh	r3, [r7, #8]
 800ed36:	1ad3      	subs	r3, r2, r3
 800ed38:	b29a      	uxth	r2, r3
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d106      	bne.n	800ed58 <pbuf_realloc+0x70>
 800ed4a:	4b26      	ldr	r3, [pc, #152]	; (800ede4 <pbuf_realloc+0xfc>)
 800ed4c:	f240 12af 	movw	r2, #431	; 0x1af
 800ed50:	4927      	ldr	r1, [pc, #156]	; (800edf0 <pbuf_realloc+0x108>)
 800ed52:	4826      	ldr	r0, [pc, #152]	; (800edec <pbuf_realloc+0x104>)
 800ed54:	f007 f992 	bl	801607c <iprintf>
  while (rem_len > q->len) {
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	895b      	ldrh	r3, [r3, #10]
 800ed5c:	897a      	ldrh	r2, [r7, #10]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d8e1      	bhi.n	800ed26 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	7b1b      	ldrb	r3, [r3, #12]
 800ed66:	f003 030f 	and.w	r3, r3, #15
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d121      	bne.n	800edb2 <pbuf_realloc+0xca>
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	895b      	ldrh	r3, [r3, #10]
 800ed72:	897a      	ldrh	r2, [r7, #10]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d01c      	beq.n	800edb2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	7b5b      	ldrb	r3, [r3, #13]
 800ed7c:	f003 0302 	and.w	r3, r3, #2
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d116      	bne.n	800edb2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	685a      	ldr	r2, [r3, #4]
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	1ad3      	subs	r3, r2, r3
 800ed8c:	b29a      	uxth	r2, r3
 800ed8e:	897b      	ldrh	r3, [r7, #10]
 800ed90:	4413      	add	r3, r2
 800ed92:	b29b      	uxth	r3, r3
 800ed94:	4619      	mov	r1, r3
 800ed96:	68f8      	ldr	r0, [r7, #12]
 800ed98:	f7fe ffc0 	bl	800dd1c <mem_trim>
 800ed9c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d106      	bne.n	800edb2 <pbuf_realloc+0xca>
 800eda4:	4b0f      	ldr	r3, [pc, #60]	; (800ede4 <pbuf_realloc+0xfc>)
 800eda6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800edaa:	4912      	ldr	r1, [pc, #72]	; (800edf4 <pbuf_realloc+0x10c>)
 800edac:	480f      	ldr	r0, [pc, #60]	; (800edec <pbuf_realloc+0x104>)
 800edae:	f007 f965 	bl	801607c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	897a      	ldrh	r2, [r7, #10]
 800edb6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	895a      	ldrh	r2, [r3, #10]
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d004      	beq.n	800edd2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	4618      	mov	r0, r3
 800edce:	f000 f911 	bl	800eff4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	2200      	movs	r2, #0
 800edd6:	601a      	str	r2, [r3, #0]
 800edd8:	e000      	b.n	800eddc <pbuf_realloc+0xf4>
    return;
 800edda:	bf00      	nop

}
 800eddc:	3710      	adds	r7, #16
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	08019a44 	.word	0x08019a44
 800ede8:	08019ba0 	.word	0x08019ba0
 800edec:	08019ae8 	.word	0x08019ae8
 800edf0:	08019bb8 	.word	0x08019bb8
 800edf4:	08019bd0 	.word	0x08019bd0

0800edf8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	60b9      	str	r1, [r7, #8]
 800ee02:	4613      	mov	r3, r2
 800ee04:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d106      	bne.n	800ee1a <pbuf_add_header_impl+0x22>
 800ee0c:	4b2b      	ldr	r3, [pc, #172]	; (800eebc <pbuf_add_header_impl+0xc4>)
 800ee0e:	f240 12df 	movw	r2, #479	; 0x1df
 800ee12:	492b      	ldr	r1, [pc, #172]	; (800eec0 <pbuf_add_header_impl+0xc8>)
 800ee14:	482b      	ldr	r0, [pc, #172]	; (800eec4 <pbuf_add_header_impl+0xcc>)
 800ee16:	f007 f931 	bl	801607c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d003      	beq.n	800ee28 <pbuf_add_header_impl+0x30>
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee26:	d301      	bcc.n	800ee2c <pbuf_add_header_impl+0x34>
    return 1;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e043      	b.n	800eeb4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d101      	bne.n	800ee36 <pbuf_add_header_impl+0x3e>
    return 0;
 800ee32:	2300      	movs	r3, #0
 800ee34:	e03e      	b.n	800eeb4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	891a      	ldrh	r2, [r3, #8]
 800ee3e:	8a7b      	ldrh	r3, [r7, #18]
 800ee40:	4413      	add	r3, r2
 800ee42:	b29b      	uxth	r3, r3
 800ee44:	8a7a      	ldrh	r2, [r7, #18]
 800ee46:	429a      	cmp	r2, r3
 800ee48:	d901      	bls.n	800ee4e <pbuf_add_header_impl+0x56>
    return 1;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	e032      	b.n	800eeb4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	7b1b      	ldrb	r3, [r3, #12]
 800ee52:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800ee54:	8a3b      	ldrh	r3, [r7, #16]
 800ee56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d00c      	beq.n	800ee78 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	685a      	ldr	r2, [r3, #4]
 800ee62:	68bb      	ldr	r3, [r7, #8]
 800ee64:	425b      	negs	r3, r3
 800ee66:	4413      	add	r3, r2
 800ee68:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	3310      	adds	r3, #16
 800ee6e:	697a      	ldr	r2, [r7, #20]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d20d      	bcs.n	800ee90 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800ee74:	2301      	movs	r3, #1
 800ee76:	e01d      	b.n	800eeb4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800ee78:	79fb      	ldrb	r3, [r7, #7]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d006      	beq.n	800ee8c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	685a      	ldr	r2, [r3, #4]
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	425b      	negs	r3, r3
 800ee86:	4413      	add	r3, r2
 800ee88:	617b      	str	r3, [r7, #20]
 800ee8a:	e001      	b.n	800ee90 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	e011      	b.n	800eeb4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	697a      	ldr	r2, [r7, #20]
 800ee94:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	895a      	ldrh	r2, [r3, #10]
 800ee9a:	8a7b      	ldrh	r3, [r7, #18]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	b29a      	uxth	r2, r3
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	891a      	ldrh	r2, [r3, #8]
 800eea8:	8a7b      	ldrh	r3, [r7, #18]
 800eeaa:	4413      	add	r3, r2
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	811a      	strh	r2, [r3, #8]


  return 0;
 800eeb2:	2300      	movs	r3, #0
}
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	3718      	adds	r7, #24
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	08019a44 	.word	0x08019a44
 800eec0:	08019bec 	.word	0x08019bec
 800eec4:	08019ae8 	.word	0x08019ae8

0800eec8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b082      	sub	sp, #8
 800eecc:	af00      	add	r7, sp, #0
 800eece:	6078      	str	r0, [r7, #4]
 800eed0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800eed2:	2200      	movs	r2, #0
 800eed4:	6839      	ldr	r1, [r7, #0]
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f7ff ff8e 	bl	800edf8 <pbuf_add_header_impl>
 800eedc:	4603      	mov	r3, r0
}
 800eede:	4618      	mov	r0, r3
 800eee0:	3708      	adds	r7, #8
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd80      	pop	{r7, pc}
	...

0800eee8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b084      	sub	sp, #16
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d106      	bne.n	800ef06 <pbuf_remove_header+0x1e>
 800eef8:	4b20      	ldr	r3, [pc, #128]	; (800ef7c <pbuf_remove_header+0x94>)
 800eefa:	f240 224b 	movw	r2, #587	; 0x24b
 800eefe:	4920      	ldr	r1, [pc, #128]	; (800ef80 <pbuf_remove_header+0x98>)
 800ef00:	4820      	ldr	r0, [pc, #128]	; (800ef84 <pbuf_remove_header+0x9c>)
 800ef02:	f007 f8bb 	bl	801607c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d003      	beq.n	800ef14 <pbuf_remove_header+0x2c>
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef12:	d301      	bcc.n	800ef18 <pbuf_remove_header+0x30>
    return 1;
 800ef14:	2301      	movs	r3, #1
 800ef16:	e02c      	b.n	800ef72 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d101      	bne.n	800ef22 <pbuf_remove_header+0x3a>
    return 0;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	e027      	b.n	800ef72 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	895b      	ldrh	r3, [r3, #10]
 800ef2a:	89fa      	ldrh	r2, [r7, #14]
 800ef2c:	429a      	cmp	r2, r3
 800ef2e:	d908      	bls.n	800ef42 <pbuf_remove_header+0x5a>
 800ef30:	4b12      	ldr	r3, [pc, #72]	; (800ef7c <pbuf_remove_header+0x94>)
 800ef32:	f240 2255 	movw	r2, #597	; 0x255
 800ef36:	4914      	ldr	r1, [pc, #80]	; (800ef88 <pbuf_remove_header+0xa0>)
 800ef38:	4812      	ldr	r0, [pc, #72]	; (800ef84 <pbuf_remove_header+0x9c>)
 800ef3a:	f007 f89f 	bl	801607c <iprintf>
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e017      	b.n	800ef72 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	685b      	ldr	r3, [r3, #4]
 800ef46:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	685a      	ldr	r2, [r3, #4]
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	441a      	add	r2, r3
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	895a      	ldrh	r2, [r3, #10]
 800ef58:	89fb      	ldrh	r3, [r7, #14]
 800ef5a:	1ad3      	subs	r3, r2, r3
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	891a      	ldrh	r2, [r3, #8]
 800ef66:	89fb      	ldrh	r3, [r7, #14]
 800ef68:	1ad3      	subs	r3, r2, r3
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800ef70:	2300      	movs	r3, #0
}
 800ef72:	4618      	mov	r0, r3
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bd80      	pop	{r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	08019a44 	.word	0x08019a44
 800ef80:	08019bec 	.word	0x08019bec
 800ef84:	08019ae8 	.word	0x08019ae8
 800ef88:	08019bf8 	.word	0x08019bf8

0800ef8c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	460b      	mov	r3, r1
 800ef96:	807b      	strh	r3, [r7, #2]
 800ef98:	4613      	mov	r3, r2
 800ef9a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800ef9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	da08      	bge.n	800efb6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800efa4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800efa8:	425b      	negs	r3, r3
 800efaa:	4619      	mov	r1, r3
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7ff ff9b 	bl	800eee8 <pbuf_remove_header>
 800efb2:	4603      	mov	r3, r0
 800efb4:	e007      	b.n	800efc6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800efb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800efba:	787a      	ldrb	r2, [r7, #1]
 800efbc:	4619      	mov	r1, r3
 800efbe:	6878      	ldr	r0, [r7, #4]
 800efc0:	f7ff ff1a 	bl	800edf8 <pbuf_add_header_impl>
 800efc4:	4603      	mov	r3, r0
  }
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3708      	adds	r7, #8
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}

0800efce <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800efce:	b580      	push	{r7, lr}
 800efd0:	b082      	sub	sp, #8
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6078      	str	r0, [r7, #4]
 800efd6:	460b      	mov	r3, r1
 800efd8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800efda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800efde:	2201      	movs	r2, #1
 800efe0:	4619      	mov	r1, r3
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f7ff ffd2 	bl	800ef8c <pbuf_header_impl>
 800efe8:	4603      	mov	r3, r0
}
 800efea:	4618      	mov	r0, r3
 800efec:	3708      	adds	r7, #8
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}
	...

0800eff4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b088      	sub	sp, #32
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d10b      	bne.n	800f01a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d106      	bne.n	800f016 <pbuf_free+0x22>
 800f008:	4b3b      	ldr	r3, [pc, #236]	; (800f0f8 <pbuf_free+0x104>)
 800f00a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f00e:	493b      	ldr	r1, [pc, #236]	; (800f0fc <pbuf_free+0x108>)
 800f010:	483b      	ldr	r0, [pc, #236]	; (800f100 <pbuf_free+0x10c>)
 800f012:	f007 f833 	bl	801607c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800f016:	2300      	movs	r3, #0
 800f018:	e069      	b.n	800f0ee <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800f01a:	2300      	movs	r3, #0
 800f01c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800f01e:	e062      	b.n	800f0e6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800f020:	f006 ff64 	bl	8015eec <sys_arch_protect>
 800f024:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	7b9b      	ldrb	r3, [r3, #14]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d106      	bne.n	800f03c <pbuf_free+0x48>
 800f02e:	4b32      	ldr	r3, [pc, #200]	; (800f0f8 <pbuf_free+0x104>)
 800f030:	f240 22f1 	movw	r2, #753	; 0x2f1
 800f034:	4933      	ldr	r1, [pc, #204]	; (800f104 <pbuf_free+0x110>)
 800f036:	4832      	ldr	r0, [pc, #200]	; (800f100 <pbuf_free+0x10c>)
 800f038:	f007 f820 	bl	801607c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	7b9b      	ldrb	r3, [r3, #14]
 800f040:	3b01      	subs	r3, #1
 800f042:	b2da      	uxtb	r2, r3
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	739a      	strb	r2, [r3, #14]
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	7b9b      	ldrb	r3, [r3, #14]
 800f04c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800f04e:	69b8      	ldr	r0, [r7, #24]
 800f050:	f006 ff5a 	bl	8015f08 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800f054:	7dfb      	ldrb	r3, [r7, #23]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d143      	bne.n	800f0e2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	7b1b      	ldrb	r3, [r3, #12]
 800f064:	f003 030f 	and.w	r3, r3, #15
 800f068:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	7b5b      	ldrb	r3, [r3, #13]
 800f06e:	f003 0302 	and.w	r3, r3, #2
 800f072:	2b00      	cmp	r3, #0
 800f074:	d011      	beq.n	800f09a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	691b      	ldr	r3, [r3, #16]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d106      	bne.n	800f090 <pbuf_free+0x9c>
 800f082:	4b1d      	ldr	r3, [pc, #116]	; (800f0f8 <pbuf_free+0x104>)
 800f084:	f240 22ff 	movw	r2, #767	; 0x2ff
 800f088:	491f      	ldr	r1, [pc, #124]	; (800f108 <pbuf_free+0x114>)
 800f08a:	481d      	ldr	r0, [pc, #116]	; (800f100 <pbuf_free+0x10c>)
 800f08c:	f006 fff6 	bl	801607c <iprintf>
        pc->custom_free_function(p);
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	691b      	ldr	r3, [r3, #16]
 800f094:	6878      	ldr	r0, [r7, #4]
 800f096:	4798      	blx	r3
 800f098:	e01d      	b.n	800f0d6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800f09a:	7bfb      	ldrb	r3, [r7, #15]
 800f09c:	2b02      	cmp	r3, #2
 800f09e:	d104      	bne.n	800f0aa <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800f0a0:	6879      	ldr	r1, [r7, #4]
 800f0a2:	200c      	movs	r0, #12
 800f0a4:	f7ff f95e 	bl	800e364 <memp_free>
 800f0a8:	e015      	b.n	800f0d6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800f0aa:	7bfb      	ldrb	r3, [r7, #15]
 800f0ac:	2b01      	cmp	r3, #1
 800f0ae:	d104      	bne.n	800f0ba <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800f0b0:	6879      	ldr	r1, [r7, #4]
 800f0b2:	200b      	movs	r0, #11
 800f0b4:	f7ff f956 	bl	800e364 <memp_free>
 800f0b8:	e00d      	b.n	800f0d6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800f0ba:	7bfb      	ldrb	r3, [r7, #15]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d103      	bne.n	800f0c8 <pbuf_free+0xd4>
          mem_free(p);
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f7fe fd9b 	bl	800dbfc <mem_free>
 800f0c6:	e006      	b.n	800f0d6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800f0c8:	4b0b      	ldr	r3, [pc, #44]	; (800f0f8 <pbuf_free+0x104>)
 800f0ca:	f240 320f 	movw	r2, #783	; 0x30f
 800f0ce:	490f      	ldr	r1, [pc, #60]	; (800f10c <pbuf_free+0x118>)
 800f0d0:	480b      	ldr	r0, [pc, #44]	; (800f100 <pbuf_free+0x10c>)
 800f0d2:	f006 ffd3 	bl	801607c <iprintf>
        }
      }
      count++;
 800f0d6:	7ffb      	ldrb	r3, [r7, #31]
 800f0d8:	3301      	adds	r3, #1
 800f0da:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	607b      	str	r3, [r7, #4]
 800f0e0:	e001      	b.n	800f0e6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d199      	bne.n	800f020 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800f0ec:	7ffb      	ldrb	r3, [r7, #31]
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3720      	adds	r7, #32
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	08019a44 	.word	0x08019a44
 800f0fc:	08019bec 	.word	0x08019bec
 800f100:	08019ae8 	.word	0x08019ae8
 800f104:	08019c18 	.word	0x08019c18
 800f108:	08019c30 	.word	0x08019c30
 800f10c:	08019c54 	.word	0x08019c54

0800f110 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800f118:	2300      	movs	r3, #0
 800f11a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800f11c:	e005      	b.n	800f12a <pbuf_clen+0x1a>
    ++len;
 800f11e:	89fb      	ldrh	r3, [r7, #14]
 800f120:	3301      	adds	r3, #1
 800f122:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d1f6      	bne.n	800f11e <pbuf_clen+0xe>
  }
  return len;
 800f130:	89fb      	ldrh	r3, [r7, #14]
}
 800f132:	4618      	mov	r0, r3
 800f134:	3714      	adds	r7, #20
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr
	...

0800f140 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d016      	beq.n	800f17c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800f14e:	f006 fecd 	bl	8015eec <sys_arch_protect>
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	7b9b      	ldrb	r3, [r3, #14]
 800f158:	3301      	adds	r3, #1
 800f15a:	b2da      	uxtb	r2, r3
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	739a      	strb	r2, [r3, #14]
 800f160:	68f8      	ldr	r0, [r7, #12]
 800f162:	f006 fed1 	bl	8015f08 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	7b9b      	ldrb	r3, [r3, #14]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d106      	bne.n	800f17c <pbuf_ref+0x3c>
 800f16e:	4b05      	ldr	r3, [pc, #20]	; (800f184 <pbuf_ref+0x44>)
 800f170:	f240 3242 	movw	r2, #834	; 0x342
 800f174:	4904      	ldr	r1, [pc, #16]	; (800f188 <pbuf_ref+0x48>)
 800f176:	4805      	ldr	r0, [pc, #20]	; (800f18c <pbuf_ref+0x4c>)
 800f178:	f006 ff80 	bl	801607c <iprintf>
  }
}
 800f17c:	bf00      	nop
 800f17e:	3710      	adds	r7, #16
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	08019a44 	.word	0x08019a44
 800f188:	08019c68 	.word	0x08019c68
 800f18c:	08019ae8 	.word	0x08019ae8

0800f190 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b084      	sub	sp, #16
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d002      	beq.n	800f1a6 <pbuf_cat+0x16>
 800f1a0:	683b      	ldr	r3, [r7, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d107      	bne.n	800f1b6 <pbuf_cat+0x26>
 800f1a6:	4b20      	ldr	r3, [pc, #128]	; (800f228 <pbuf_cat+0x98>)
 800f1a8:	f240 3259 	movw	r2, #857	; 0x359
 800f1ac:	491f      	ldr	r1, [pc, #124]	; (800f22c <pbuf_cat+0x9c>)
 800f1ae:	4820      	ldr	r0, [pc, #128]	; (800f230 <pbuf_cat+0xa0>)
 800f1b0:	f006 ff64 	bl	801607c <iprintf>
 800f1b4:	e034      	b.n	800f220 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	60fb      	str	r3, [r7, #12]
 800f1ba:	e00a      	b.n	800f1d2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	891a      	ldrh	r2, [r3, #8]
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	891b      	ldrh	r3, [r3, #8]
 800f1c4:	4413      	add	r3, r2
 800f1c6:	b29a      	uxth	r2, r3
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	60fb      	str	r3, [r7, #12]
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d1f0      	bne.n	800f1bc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	891a      	ldrh	r2, [r3, #8]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	895b      	ldrh	r3, [r3, #10]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d006      	beq.n	800f1f4 <pbuf_cat+0x64>
 800f1e6:	4b10      	ldr	r3, [pc, #64]	; (800f228 <pbuf_cat+0x98>)
 800f1e8:	f240 3262 	movw	r2, #866	; 0x362
 800f1ec:	4911      	ldr	r1, [pc, #68]	; (800f234 <pbuf_cat+0xa4>)
 800f1ee:	4810      	ldr	r0, [pc, #64]	; (800f230 <pbuf_cat+0xa0>)
 800f1f0:	f006 ff44 	bl	801607c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d006      	beq.n	800f20a <pbuf_cat+0x7a>
 800f1fc:	4b0a      	ldr	r3, [pc, #40]	; (800f228 <pbuf_cat+0x98>)
 800f1fe:	f240 3263 	movw	r2, #867	; 0x363
 800f202:	490d      	ldr	r1, [pc, #52]	; (800f238 <pbuf_cat+0xa8>)
 800f204:	480a      	ldr	r0, [pc, #40]	; (800f230 <pbuf_cat+0xa0>)
 800f206:	f006 ff39 	bl	801607c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	891a      	ldrh	r2, [r3, #8]
 800f20e:	683b      	ldr	r3, [r7, #0]
 800f210:	891b      	ldrh	r3, [r3, #8]
 800f212:	4413      	add	r3, r2
 800f214:	b29a      	uxth	r2, r3
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	683a      	ldr	r2, [r7, #0]
 800f21e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800f220:	3710      	adds	r7, #16
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}
 800f226:	bf00      	nop
 800f228:	08019a44 	.word	0x08019a44
 800f22c:	08019c7c 	.word	0x08019c7c
 800f230:	08019ae8 	.word	0x08019ae8
 800f234:	08019cb4 	.word	0x08019cb4
 800f238:	08019ce4 	.word	0x08019ce4

0800f23c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b086      	sub	sp, #24
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800f246:	2300      	movs	r3, #0
 800f248:	617b      	str	r3, [r7, #20]
 800f24a:	2300      	movs	r3, #0
 800f24c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d008      	beq.n	800f266 <pbuf_copy+0x2a>
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d005      	beq.n	800f266 <pbuf_copy+0x2a>
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	891a      	ldrh	r2, [r3, #8]
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	891b      	ldrh	r3, [r3, #8]
 800f262:	429a      	cmp	r2, r3
 800f264:	d209      	bcs.n	800f27a <pbuf_copy+0x3e>
 800f266:	4b57      	ldr	r3, [pc, #348]	; (800f3c4 <pbuf_copy+0x188>)
 800f268:	f240 32c9 	movw	r2, #969	; 0x3c9
 800f26c:	4956      	ldr	r1, [pc, #344]	; (800f3c8 <pbuf_copy+0x18c>)
 800f26e:	4857      	ldr	r0, [pc, #348]	; (800f3cc <pbuf_copy+0x190>)
 800f270:	f006 ff04 	bl	801607c <iprintf>
 800f274:	f06f 030f 	mvn.w	r3, #15
 800f278:	e09f      	b.n	800f3ba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	895b      	ldrh	r3, [r3, #10]
 800f27e:	461a      	mov	r2, r3
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	1ad2      	subs	r2, r2, r3
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	895b      	ldrh	r3, [r3, #10]
 800f288:	4619      	mov	r1, r3
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	1acb      	subs	r3, r1, r3
 800f28e:	429a      	cmp	r2, r3
 800f290:	d306      	bcc.n	800f2a0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	895b      	ldrh	r3, [r3, #10]
 800f296:	461a      	mov	r2, r3
 800f298:	693b      	ldr	r3, [r7, #16]
 800f29a:	1ad3      	subs	r3, r2, r3
 800f29c:	60fb      	str	r3, [r7, #12]
 800f29e:	e005      	b.n	800f2ac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	895b      	ldrh	r3, [r3, #10]
 800f2a4:	461a      	mov	r2, r3
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	1ad3      	subs	r3, r2, r3
 800f2aa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	685a      	ldr	r2, [r3, #4]
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	18d0      	adds	r0, r2, r3
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	685a      	ldr	r2, [r3, #4]
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	68fa      	ldr	r2, [r7, #12]
 800f2be:	4619      	mov	r1, r3
 800f2c0:	f006 feac 	bl	801601c <memcpy>
    offset_to += len;
 800f2c4:	697a      	ldr	r2, [r7, #20]
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800f2cc:	693a      	ldr	r2, [r7, #16]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	895b      	ldrh	r3, [r3, #10]
 800f2d8:	461a      	mov	r2, r3
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	4293      	cmp	r3, r2
 800f2de:	d906      	bls.n	800f2ee <pbuf_copy+0xb2>
 800f2e0:	4b38      	ldr	r3, [pc, #224]	; (800f3c4 <pbuf_copy+0x188>)
 800f2e2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800f2e6:	493a      	ldr	r1, [pc, #232]	; (800f3d0 <pbuf_copy+0x194>)
 800f2e8:	4838      	ldr	r0, [pc, #224]	; (800f3cc <pbuf_copy+0x190>)
 800f2ea:	f006 fec7 	bl	801607c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	895b      	ldrh	r3, [r3, #10]
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	4293      	cmp	r3, r2
 800f2f8:	d906      	bls.n	800f308 <pbuf_copy+0xcc>
 800f2fa:	4b32      	ldr	r3, [pc, #200]	; (800f3c4 <pbuf_copy+0x188>)
 800f2fc:	f240 32da 	movw	r2, #986	; 0x3da
 800f300:	4934      	ldr	r1, [pc, #208]	; (800f3d4 <pbuf_copy+0x198>)
 800f302:	4832      	ldr	r0, [pc, #200]	; (800f3cc <pbuf_copy+0x190>)
 800f304:	f006 feba 	bl	801607c <iprintf>
    if (offset_from >= p_from->len) {
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	895b      	ldrh	r3, [r3, #10]
 800f30c:	461a      	mov	r2, r3
 800f30e:	693b      	ldr	r3, [r7, #16]
 800f310:	4293      	cmp	r3, r2
 800f312:	d304      	bcc.n	800f31e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800f314:	2300      	movs	r3, #0
 800f316:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	895b      	ldrh	r3, [r3, #10]
 800f322:	461a      	mov	r2, r3
 800f324:	697b      	ldr	r3, [r7, #20]
 800f326:	4293      	cmp	r3, r2
 800f328:	d114      	bne.n	800f354 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800f32a:	2300      	movs	r3, #0
 800f32c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d10c      	bne.n	800f354 <pbuf_copy+0x118>
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d009      	beq.n	800f354 <pbuf_copy+0x118>
 800f340:	4b20      	ldr	r3, [pc, #128]	; (800f3c4 <pbuf_copy+0x188>)
 800f342:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800f346:	4924      	ldr	r1, [pc, #144]	; (800f3d8 <pbuf_copy+0x19c>)
 800f348:	4820      	ldr	r0, [pc, #128]	; (800f3cc <pbuf_copy+0x190>)
 800f34a:	f006 fe97 	bl	801607c <iprintf>
 800f34e:	f06f 030f 	mvn.w	r3, #15
 800f352:	e032      	b.n	800f3ba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d013      	beq.n	800f382 <pbuf_copy+0x146>
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	895a      	ldrh	r2, [r3, #10]
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	891b      	ldrh	r3, [r3, #8]
 800f362:	429a      	cmp	r2, r3
 800f364:	d10d      	bne.n	800f382 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d009      	beq.n	800f382 <pbuf_copy+0x146>
 800f36e:	4b15      	ldr	r3, [pc, #84]	; (800f3c4 <pbuf_copy+0x188>)
 800f370:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800f374:	4919      	ldr	r1, [pc, #100]	; (800f3dc <pbuf_copy+0x1a0>)
 800f376:	4815      	ldr	r0, [pc, #84]	; (800f3cc <pbuf_copy+0x190>)
 800f378:	f006 fe80 	bl	801607c <iprintf>
 800f37c:	f06f 0305 	mvn.w	r3, #5
 800f380:	e01b      	b.n	800f3ba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	2b00      	cmp	r3, #0
 800f386:	d013      	beq.n	800f3b0 <pbuf_copy+0x174>
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	895a      	ldrh	r2, [r3, #10]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	891b      	ldrh	r3, [r3, #8]
 800f390:	429a      	cmp	r2, r3
 800f392:	d10d      	bne.n	800f3b0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d009      	beq.n	800f3b0 <pbuf_copy+0x174>
 800f39c:	4b09      	ldr	r3, [pc, #36]	; (800f3c4 <pbuf_copy+0x188>)
 800f39e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800f3a2:	490e      	ldr	r1, [pc, #56]	; (800f3dc <pbuf_copy+0x1a0>)
 800f3a4:	4809      	ldr	r0, [pc, #36]	; (800f3cc <pbuf_copy+0x190>)
 800f3a6:	f006 fe69 	bl	801607c <iprintf>
 800f3aa:	f06f 0305 	mvn.w	r3, #5
 800f3ae:	e004      	b.n	800f3ba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	f47f af61 	bne.w	800f27a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800f3b8:	2300      	movs	r3, #0
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3718      	adds	r7, #24
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	08019a44 	.word	0x08019a44
 800f3c8:	08019d30 	.word	0x08019d30
 800f3cc:	08019ae8 	.word	0x08019ae8
 800f3d0:	08019d60 	.word	0x08019d60
 800f3d4:	08019d78 	.word	0x08019d78
 800f3d8:	08019d94 	.word	0x08019d94
 800f3dc:	08019da4 	.word	0x08019da4

0800f3e0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b088      	sub	sp, #32
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	4611      	mov	r1, r2
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	80fb      	strh	r3, [r7, #6]
 800f3f2:	4613      	mov	r3, r2
 800f3f4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d108      	bne.n	800f416 <pbuf_copy_partial+0x36>
 800f404:	4b2b      	ldr	r3, [pc, #172]	; (800f4b4 <pbuf_copy_partial+0xd4>)
 800f406:	f240 420a 	movw	r2, #1034	; 0x40a
 800f40a:	492b      	ldr	r1, [pc, #172]	; (800f4b8 <pbuf_copy_partial+0xd8>)
 800f40c:	482b      	ldr	r0, [pc, #172]	; (800f4bc <pbuf_copy_partial+0xdc>)
 800f40e:	f006 fe35 	bl	801607c <iprintf>
 800f412:	2300      	movs	r3, #0
 800f414:	e04a      	b.n	800f4ac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800f416:	68bb      	ldr	r3, [r7, #8]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d108      	bne.n	800f42e <pbuf_copy_partial+0x4e>
 800f41c:	4b25      	ldr	r3, [pc, #148]	; (800f4b4 <pbuf_copy_partial+0xd4>)
 800f41e:	f240 420b 	movw	r2, #1035	; 0x40b
 800f422:	4927      	ldr	r1, [pc, #156]	; (800f4c0 <pbuf_copy_partial+0xe0>)
 800f424:	4825      	ldr	r0, [pc, #148]	; (800f4bc <pbuf_copy_partial+0xdc>)
 800f426:	f006 fe29 	bl	801607c <iprintf>
 800f42a:	2300      	movs	r3, #0
 800f42c:	e03e      	b.n	800f4ac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	61fb      	str	r3, [r7, #28]
 800f432:	e034      	b.n	800f49e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800f434:	88bb      	ldrh	r3, [r7, #4]
 800f436:	2b00      	cmp	r3, #0
 800f438:	d00a      	beq.n	800f450 <pbuf_copy_partial+0x70>
 800f43a:	69fb      	ldr	r3, [r7, #28]
 800f43c:	895b      	ldrh	r3, [r3, #10]
 800f43e:	88ba      	ldrh	r2, [r7, #4]
 800f440:	429a      	cmp	r2, r3
 800f442:	d305      	bcc.n	800f450 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800f444:	69fb      	ldr	r3, [r7, #28]
 800f446:	895b      	ldrh	r3, [r3, #10]
 800f448:	88ba      	ldrh	r2, [r7, #4]
 800f44a:	1ad3      	subs	r3, r2, r3
 800f44c:	80bb      	strh	r3, [r7, #4]
 800f44e:	e023      	b.n	800f498 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	895a      	ldrh	r2, [r3, #10]
 800f454:	88bb      	ldrh	r3, [r7, #4]
 800f456:	1ad3      	subs	r3, r2, r3
 800f458:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800f45a:	8b3a      	ldrh	r2, [r7, #24]
 800f45c:	88fb      	ldrh	r3, [r7, #6]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d901      	bls.n	800f466 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800f462:	88fb      	ldrh	r3, [r7, #6]
 800f464:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800f466:	8b7b      	ldrh	r3, [r7, #26]
 800f468:	68ba      	ldr	r2, [r7, #8]
 800f46a:	18d0      	adds	r0, r2, r3
 800f46c:	69fb      	ldr	r3, [r7, #28]
 800f46e:	685a      	ldr	r2, [r3, #4]
 800f470:	88bb      	ldrh	r3, [r7, #4]
 800f472:	4413      	add	r3, r2
 800f474:	8b3a      	ldrh	r2, [r7, #24]
 800f476:	4619      	mov	r1, r3
 800f478:	f006 fdd0 	bl	801601c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800f47c:	8afa      	ldrh	r2, [r7, #22]
 800f47e:	8b3b      	ldrh	r3, [r7, #24]
 800f480:	4413      	add	r3, r2
 800f482:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800f484:	8b7a      	ldrh	r2, [r7, #26]
 800f486:	8b3b      	ldrh	r3, [r7, #24]
 800f488:	4413      	add	r3, r2
 800f48a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800f48c:	88fa      	ldrh	r2, [r7, #6]
 800f48e:	8b3b      	ldrh	r3, [r7, #24]
 800f490:	1ad3      	subs	r3, r2, r3
 800f492:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800f494:	2300      	movs	r3, #0
 800f496:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	61fb      	str	r3, [r7, #28]
 800f49e:	88fb      	ldrh	r3, [r7, #6]
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d002      	beq.n	800f4aa <pbuf_copy_partial+0xca>
 800f4a4:	69fb      	ldr	r3, [r7, #28]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d1c4      	bne.n	800f434 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800f4aa:	8afb      	ldrh	r3, [r7, #22]
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3720      	adds	r7, #32
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	08019a44 	.word	0x08019a44
 800f4b8:	08019dd0 	.word	0x08019dd0
 800f4bc:	08019ae8 	.word	0x08019ae8
 800f4c0:	08019df0 	.word	0x08019df0

0800f4c4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b084      	sub	sp, #16
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	603a      	str	r2, [r7, #0]
 800f4ce:	71fb      	strb	r3, [r7, #7]
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	8919      	ldrh	r1, [r3, #8]
 800f4d8:	88ba      	ldrh	r2, [r7, #4]
 800f4da:	79fb      	ldrb	r3, [r7, #7]
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7ff faa7 	bl	800ea30 <pbuf_alloc>
 800f4e2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d101      	bne.n	800f4ee <pbuf_clone+0x2a>
    return NULL;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	e011      	b.n	800f512 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800f4ee:	6839      	ldr	r1, [r7, #0]
 800f4f0:	68f8      	ldr	r0, [r7, #12]
 800f4f2:	f7ff fea3 	bl	800f23c <pbuf_copy>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800f4fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d006      	beq.n	800f510 <pbuf_clone+0x4c>
 800f502:	4b06      	ldr	r3, [pc, #24]	; (800f51c <pbuf_clone+0x58>)
 800f504:	f240 5224 	movw	r2, #1316	; 0x524
 800f508:	4905      	ldr	r1, [pc, #20]	; (800f520 <pbuf_clone+0x5c>)
 800f50a:	4806      	ldr	r0, [pc, #24]	; (800f524 <pbuf_clone+0x60>)
 800f50c:	f006 fdb6 	bl	801607c <iprintf>
  return q;
 800f510:	68fb      	ldr	r3, [r7, #12]
}
 800f512:	4618      	mov	r0, r3
 800f514:	3710      	adds	r7, #16
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	08019a44 	.word	0x08019a44
 800f520:	08019efc 	.word	0x08019efc
 800f524:	08019ae8 	.word	0x08019ae8

0800f528 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800f52c:	f006 fdbe 	bl	80160ac <rand>
 800f530:	4603      	mov	r3, r0
 800f532:	b29b      	uxth	r3, r3
 800f534:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f538:	b29b      	uxth	r3, r3
 800f53a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800f53e:	b29a      	uxth	r2, r3
 800f540:	4b01      	ldr	r3, [pc, #4]	; (800f548 <tcp_init+0x20>)
 800f542:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800f544:	bf00      	nop
 800f546:	bd80      	pop	{r7, pc}
 800f548:	24000044 	.word	0x24000044

0800f54c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b082      	sub	sp, #8
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	7d1b      	ldrb	r3, [r3, #20]
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d105      	bne.n	800f568 <tcp_free+0x1c>
 800f55c:	4b06      	ldr	r3, [pc, #24]	; (800f578 <tcp_free+0x2c>)
 800f55e:	22d4      	movs	r2, #212	; 0xd4
 800f560:	4906      	ldr	r1, [pc, #24]	; (800f57c <tcp_free+0x30>)
 800f562:	4807      	ldr	r0, [pc, #28]	; (800f580 <tcp_free+0x34>)
 800f564:	f006 fd8a 	bl	801607c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800f568:	6879      	ldr	r1, [r7, #4]
 800f56a:	2001      	movs	r0, #1
 800f56c:	f7fe fefa 	bl	800e364 <memp_free>
}
 800f570:	bf00      	nop
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	08019fdc 	.word	0x08019fdc
 800f57c:	0801a050 	.word	0x0801a050
 800f580:	0801a064 	.word	0x0801a064

0800f584 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	7d1b      	ldrb	r3, [r3, #20]
 800f590:	2b01      	cmp	r3, #1
 800f592:	d105      	bne.n	800f5a0 <tcp_free_listen+0x1c>
 800f594:	4b06      	ldr	r3, [pc, #24]	; (800f5b0 <tcp_free_listen+0x2c>)
 800f596:	22df      	movs	r2, #223	; 0xdf
 800f598:	4906      	ldr	r1, [pc, #24]	; (800f5b4 <tcp_free_listen+0x30>)
 800f59a:	4807      	ldr	r0, [pc, #28]	; (800f5b8 <tcp_free_listen+0x34>)
 800f59c:	f006 fd6e 	bl	801607c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800f5a0:	6879      	ldr	r1, [r7, #4]
 800f5a2:	2002      	movs	r0, #2
 800f5a4:	f7fe fede 	bl	800e364 <memp_free>
}
 800f5a8:	bf00      	nop
 800f5aa:	3708      	adds	r7, #8
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	bd80      	pop	{r7, pc}
 800f5b0:	08019fdc 	.word	0x08019fdc
 800f5b4:	0801a08c 	.word	0x0801a08c
 800f5b8:	0801a064 	.word	0x0801a064

0800f5bc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800f5c0:	f001 f9a0 	bl	8010904 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800f5c4:	4b07      	ldr	r3, [pc, #28]	; (800f5e4 <tcp_tmr+0x28>)
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	b2da      	uxtb	r2, r3
 800f5cc:	4b05      	ldr	r3, [pc, #20]	; (800f5e4 <tcp_tmr+0x28>)
 800f5ce:	701a      	strb	r2, [r3, #0]
 800f5d0:	4b04      	ldr	r3, [pc, #16]	; (800f5e4 <tcp_tmr+0x28>)
 800f5d2:	781b      	ldrb	r3, [r3, #0]
 800f5d4:	f003 0301 	and.w	r3, r3, #1
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d001      	beq.n	800f5e0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800f5dc:	f000 fe68 	bl	80102b0 <tcp_slowtmr>
  }
}
 800f5e0:	bf00      	nop
 800f5e2:	bd80      	pop	{r7, pc}
 800f5e4:	240067b5 	.word	0x240067b5

0800f5e8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d105      	bne.n	800f604 <tcp_remove_listener+0x1c>
 800f5f8:	4b0d      	ldr	r3, [pc, #52]	; (800f630 <tcp_remove_listener+0x48>)
 800f5fa:	22ff      	movs	r2, #255	; 0xff
 800f5fc:	490d      	ldr	r1, [pc, #52]	; (800f634 <tcp_remove_listener+0x4c>)
 800f5fe:	480e      	ldr	r0, [pc, #56]	; (800f638 <tcp_remove_listener+0x50>)
 800f600:	f006 fd3c 	bl	801607c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	60fb      	str	r3, [r7, #12]
 800f608:	e00a      	b.n	800f620 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f60e:	683a      	ldr	r2, [r7, #0]
 800f610:	429a      	cmp	r2, r3
 800f612:	d102      	bne.n	800f61a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	2200      	movs	r2, #0
 800f618:	679a      	str	r2, [r3, #120]	; 0x78
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	68db      	ldr	r3, [r3, #12]
 800f61e:	60fb      	str	r3, [r7, #12]
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d1f1      	bne.n	800f60a <tcp_remove_listener+0x22>
    }
  }
}
 800f626:	bf00      	nop
 800f628:	bf00      	nop
 800f62a:	3710      	adds	r7, #16
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	08019fdc 	.word	0x08019fdc
 800f634:	0801a0a8 	.word	0x0801a0a8
 800f638:	0801a064 	.word	0x0801a064

0800f63c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d106      	bne.n	800f658 <tcp_listen_closed+0x1c>
 800f64a:	4b14      	ldr	r3, [pc, #80]	; (800f69c <tcp_listen_closed+0x60>)
 800f64c:	f240 1211 	movw	r2, #273	; 0x111
 800f650:	4913      	ldr	r1, [pc, #76]	; (800f6a0 <tcp_listen_closed+0x64>)
 800f652:	4814      	ldr	r0, [pc, #80]	; (800f6a4 <tcp_listen_closed+0x68>)
 800f654:	f006 fd12 	bl	801607c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	7d1b      	ldrb	r3, [r3, #20]
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d006      	beq.n	800f66e <tcp_listen_closed+0x32>
 800f660:	4b0e      	ldr	r3, [pc, #56]	; (800f69c <tcp_listen_closed+0x60>)
 800f662:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f666:	4910      	ldr	r1, [pc, #64]	; (800f6a8 <tcp_listen_closed+0x6c>)
 800f668:	480e      	ldr	r0, [pc, #56]	; (800f6a4 <tcp_listen_closed+0x68>)
 800f66a:	f006 fd07 	bl	801607c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f66e:	2301      	movs	r3, #1
 800f670:	60fb      	str	r3, [r7, #12]
 800f672:	e00b      	b.n	800f68c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800f674:	4a0d      	ldr	r2, [pc, #52]	; (800f6ac <tcp_listen_closed+0x70>)
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	6879      	ldr	r1, [r7, #4]
 800f680:	4618      	mov	r0, r3
 800f682:	f7ff ffb1 	bl	800f5e8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	3301      	adds	r3, #1
 800f68a:	60fb      	str	r3, [r7, #12]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	2b03      	cmp	r3, #3
 800f690:	d9f0      	bls.n	800f674 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800f692:	bf00      	nop
 800f694:	bf00      	nop
 800f696:	3710      	adds	r7, #16
 800f698:	46bd      	mov	sp, r7
 800f69a:	bd80      	pop	{r7, pc}
 800f69c:	08019fdc 	.word	0x08019fdc
 800f6a0:	0801a0d0 	.word	0x0801a0d0
 800f6a4:	0801a064 	.word	0x0801a064
 800f6a8:	0801a0dc 	.word	0x0801a0dc
 800f6ac:	08019fcc 	.word	0x08019fcc

0800f6b0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800f6b0:	b5b0      	push	{r4, r5, r7, lr}
 800f6b2:	b088      	sub	sp, #32
 800f6b4:	af04      	add	r7, sp, #16
 800f6b6:	6078      	str	r0, [r7, #4]
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d106      	bne.n	800f6d0 <tcp_close_shutdown+0x20>
 800f6c2:	4b63      	ldr	r3, [pc, #396]	; (800f850 <tcp_close_shutdown+0x1a0>)
 800f6c4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800f6c8:	4962      	ldr	r1, [pc, #392]	; (800f854 <tcp_close_shutdown+0x1a4>)
 800f6ca:	4863      	ldr	r0, [pc, #396]	; (800f858 <tcp_close_shutdown+0x1a8>)
 800f6cc:	f006 fcd6 	bl	801607c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800f6d0:	78fb      	ldrb	r3, [r7, #3]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d067      	beq.n	800f7a6 <tcp_close_shutdown+0xf6>
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	7d1b      	ldrb	r3, [r3, #20]
 800f6da:	2b04      	cmp	r3, #4
 800f6dc:	d003      	beq.n	800f6e6 <tcp_close_shutdown+0x36>
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	7d1b      	ldrb	r3, [r3, #20]
 800f6e2:	2b07      	cmp	r3, #7
 800f6e4:	d15f      	bne.n	800f7a6 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	d105      	bne.n	800f6fa <tcp_close_shutdown+0x4a>
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6f2:	f640 3268 	movw	r2, #2920	; 0xb68
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d055      	beq.n	800f7a6 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	8b5b      	ldrh	r3, [r3, #26]
 800f6fe:	f003 0310 	and.w	r3, r3, #16
 800f702:	2b00      	cmp	r3, #0
 800f704:	d106      	bne.n	800f714 <tcp_close_shutdown+0x64>
 800f706:	4b52      	ldr	r3, [pc, #328]	; (800f850 <tcp_close_shutdown+0x1a0>)
 800f708:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800f70c:	4953      	ldr	r1, [pc, #332]	; (800f85c <tcp_close_shutdown+0x1ac>)
 800f70e:	4852      	ldr	r0, [pc, #328]	; (800f858 <tcp_close_shutdown+0x1a8>)
 800f710:	f006 fcb4 	bl	801607c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800f71c:	687d      	ldr	r5, [r7, #4]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	3304      	adds	r3, #4
 800f722:	687a      	ldr	r2, [r7, #4]
 800f724:	8ad2      	ldrh	r2, [r2, #22]
 800f726:	6879      	ldr	r1, [r7, #4]
 800f728:	8b09      	ldrh	r1, [r1, #24]
 800f72a:	9102      	str	r1, [sp, #8]
 800f72c:	9201      	str	r2, [sp, #4]
 800f72e:	9300      	str	r3, [sp, #0]
 800f730:	462b      	mov	r3, r5
 800f732:	4622      	mov	r2, r4
 800f734:	4601      	mov	r1, r0
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f005 faa4 	bl	8014c84 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f001 fc65 	bl	801100c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f742:	4b47      	ldr	r3, [pc, #284]	; (800f860 <tcp_close_shutdown+0x1b0>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	429a      	cmp	r2, r3
 800f74a:	d105      	bne.n	800f758 <tcp_close_shutdown+0xa8>
 800f74c:	4b44      	ldr	r3, [pc, #272]	; (800f860 <tcp_close_shutdown+0x1b0>)
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	68db      	ldr	r3, [r3, #12]
 800f752:	4a43      	ldr	r2, [pc, #268]	; (800f860 <tcp_close_shutdown+0x1b0>)
 800f754:	6013      	str	r3, [r2, #0]
 800f756:	e013      	b.n	800f780 <tcp_close_shutdown+0xd0>
 800f758:	4b41      	ldr	r3, [pc, #260]	; (800f860 <tcp_close_shutdown+0x1b0>)
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	60fb      	str	r3, [r7, #12]
 800f75e:	e00c      	b.n	800f77a <tcp_close_shutdown+0xca>
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	68db      	ldr	r3, [r3, #12]
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	429a      	cmp	r2, r3
 800f768:	d104      	bne.n	800f774 <tcp_close_shutdown+0xc4>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	68da      	ldr	r2, [r3, #12]
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	60da      	str	r2, [r3, #12]
 800f772:	e005      	b.n	800f780 <tcp_close_shutdown+0xd0>
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	68db      	ldr	r3, [r3, #12]
 800f778:	60fb      	str	r3, [r7, #12]
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d1ef      	bne.n	800f760 <tcp_close_shutdown+0xb0>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	2200      	movs	r2, #0
 800f784:	60da      	str	r2, [r3, #12]
 800f786:	4b37      	ldr	r3, [pc, #220]	; (800f864 <tcp_close_shutdown+0x1b4>)
 800f788:	2201      	movs	r2, #1
 800f78a:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800f78c:	4b36      	ldr	r3, [pc, #216]	; (800f868 <tcp_close_shutdown+0x1b8>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	429a      	cmp	r2, r3
 800f794:	d102      	bne.n	800f79c <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800f796:	f003 fd19 	bl	80131cc <tcp_trigger_input_pcb_close>
 800f79a:	e002      	b.n	800f7a2 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f7ff fed5 	bl	800f54c <tcp_free>
      }
      return ERR_OK;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	e050      	b.n	800f848 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	7d1b      	ldrb	r3, [r3, #20]
 800f7aa:	2b02      	cmp	r3, #2
 800f7ac:	d03b      	beq.n	800f826 <tcp_close_shutdown+0x176>
 800f7ae:	2b02      	cmp	r3, #2
 800f7b0:	dc44      	bgt.n	800f83c <tcp_close_shutdown+0x18c>
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d002      	beq.n	800f7bc <tcp_close_shutdown+0x10c>
 800f7b6:	2b01      	cmp	r3, #1
 800f7b8:	d02a      	beq.n	800f810 <tcp_close_shutdown+0x160>
 800f7ba:	e03f      	b.n	800f83c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	8adb      	ldrh	r3, [r3, #22]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d021      	beq.n	800f808 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800f7c4:	4b29      	ldr	r3, [pc, #164]	; (800f86c <tcp_close_shutdown+0x1bc>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	687a      	ldr	r2, [r7, #4]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d105      	bne.n	800f7da <tcp_close_shutdown+0x12a>
 800f7ce:	4b27      	ldr	r3, [pc, #156]	; (800f86c <tcp_close_shutdown+0x1bc>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	68db      	ldr	r3, [r3, #12]
 800f7d4:	4a25      	ldr	r2, [pc, #148]	; (800f86c <tcp_close_shutdown+0x1bc>)
 800f7d6:	6013      	str	r3, [r2, #0]
 800f7d8:	e013      	b.n	800f802 <tcp_close_shutdown+0x152>
 800f7da:	4b24      	ldr	r3, [pc, #144]	; (800f86c <tcp_close_shutdown+0x1bc>)
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	60bb      	str	r3, [r7, #8]
 800f7e0:	e00c      	b.n	800f7fc <tcp_close_shutdown+0x14c>
 800f7e2:	68bb      	ldr	r3, [r7, #8]
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	687a      	ldr	r2, [r7, #4]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d104      	bne.n	800f7f6 <tcp_close_shutdown+0x146>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	68da      	ldr	r2, [r3, #12]
 800f7f0:	68bb      	ldr	r3, [r7, #8]
 800f7f2:	60da      	str	r2, [r3, #12]
 800f7f4:	e005      	b.n	800f802 <tcp_close_shutdown+0x152>
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	68db      	ldr	r3, [r3, #12]
 800f7fa:	60bb      	str	r3, [r7, #8]
 800f7fc:	68bb      	ldr	r3, [r7, #8]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d1ef      	bne.n	800f7e2 <tcp_close_shutdown+0x132>
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	2200      	movs	r2, #0
 800f806:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f7ff fe9f 	bl	800f54c <tcp_free>
      break;
 800f80e:	e01a      	b.n	800f846 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7ff ff13 	bl	800f63c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800f816:	6879      	ldr	r1, [r7, #4]
 800f818:	4815      	ldr	r0, [pc, #84]	; (800f870 <tcp_close_shutdown+0x1c0>)
 800f81a:	f001 fc41 	bl	80110a0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800f81e:	6878      	ldr	r0, [r7, #4]
 800f820:	f7ff feb0 	bl	800f584 <tcp_free_listen>
      break;
 800f824:	e00f      	b.n	800f846 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800f826:	6879      	ldr	r1, [r7, #4]
 800f828:	480d      	ldr	r0, [pc, #52]	; (800f860 <tcp_close_shutdown+0x1b0>)
 800f82a:	f001 fc39 	bl	80110a0 <tcp_pcb_remove>
 800f82e:	4b0d      	ldr	r3, [pc, #52]	; (800f864 <tcp_close_shutdown+0x1b4>)
 800f830:	2201      	movs	r2, #1
 800f832:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f7ff fe89 	bl	800f54c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800f83a:	e004      	b.n	800f846 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f000 f819 	bl	800f874 <tcp_close_shutdown_fin>
 800f842:	4603      	mov	r3, r0
 800f844:	e000      	b.n	800f848 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 800f846:	2300      	movs	r3, #0
}
 800f848:	4618      	mov	r0, r3
 800f84a:	3710      	adds	r7, #16
 800f84c:	46bd      	mov	sp, r7
 800f84e:	bdb0      	pop	{r4, r5, r7, pc}
 800f850:	08019fdc 	.word	0x08019fdc
 800f854:	0801a0f4 	.word	0x0801a0f4
 800f858:	0801a064 	.word	0x0801a064
 800f85c:	0801a114 	.word	0x0801a114
 800f860:	2400a784 	.word	0x2400a784
 800f864:	2400a780 	.word	0x2400a780
 800f868:	2400a798 	.word	0x2400a798
 800f86c:	2400a790 	.word	0x2400a790
 800f870:	2400a78c 	.word	0x2400a78c

0800f874 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b084      	sub	sp, #16
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d106      	bne.n	800f890 <tcp_close_shutdown_fin+0x1c>
 800f882:	4b2e      	ldr	r3, [pc, #184]	; (800f93c <tcp_close_shutdown_fin+0xc8>)
 800f884:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800f888:	492d      	ldr	r1, [pc, #180]	; (800f940 <tcp_close_shutdown_fin+0xcc>)
 800f88a:	482e      	ldr	r0, [pc, #184]	; (800f944 <tcp_close_shutdown_fin+0xd0>)
 800f88c:	f006 fbf6 	bl	801607c <iprintf>

  switch (pcb->state) {
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	7d1b      	ldrb	r3, [r3, #20]
 800f894:	2b07      	cmp	r3, #7
 800f896:	d020      	beq.n	800f8da <tcp_close_shutdown_fin+0x66>
 800f898:	2b07      	cmp	r3, #7
 800f89a:	dc2b      	bgt.n	800f8f4 <tcp_close_shutdown_fin+0x80>
 800f89c:	2b03      	cmp	r3, #3
 800f89e:	d002      	beq.n	800f8a6 <tcp_close_shutdown_fin+0x32>
 800f8a0:	2b04      	cmp	r3, #4
 800f8a2:	d00d      	beq.n	800f8c0 <tcp_close_shutdown_fin+0x4c>
 800f8a4:	e026      	b.n	800f8f4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f004 fafa 	bl	8013ea0 <tcp_send_fin>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f8b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d11f      	bne.n	800f8f8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2205      	movs	r2, #5
 800f8bc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f8be:	e01b      	b.n	800f8f8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f004 faed 	bl	8013ea0 <tcp_send_fin>
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f8ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d114      	bne.n	800f8fc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2205      	movs	r2, #5
 800f8d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f8d8:	e010      	b.n	800f8fc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800f8da:	6878      	ldr	r0, [r7, #4]
 800f8dc:	f004 fae0 	bl	8013ea0 <tcp_send_fin>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800f8e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d109      	bne.n	800f900 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	2209      	movs	r2, #9
 800f8f0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f8f2:	e005      	b.n	800f900 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	e01c      	b.n	800f932 <tcp_close_shutdown_fin+0xbe>
      break;
 800f8f8:	bf00      	nop
 800f8fa:	e002      	b.n	800f902 <tcp_close_shutdown_fin+0x8e>
      break;
 800f8fc:	bf00      	nop
 800f8fe:	e000      	b.n	800f902 <tcp_close_shutdown_fin+0x8e>
      break;
 800f900:	bf00      	nop
  }

  if (err == ERR_OK) {
 800f902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d103      	bne.n	800f912 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800f90a:	6878      	ldr	r0, [r7, #4]
 800f90c:	f004 fc06 	bl	801411c <tcp_output>
 800f910:	e00d      	b.n	800f92e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800f912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f91a:	d108      	bne.n	800f92e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	8b5b      	ldrh	r3, [r3, #26]
 800f920:	f043 0308 	orr.w	r3, r3, #8
 800f924:	b29a      	uxth	r2, r3
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800f92a:	2300      	movs	r3, #0
 800f92c:	e001      	b.n	800f932 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800f92e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f932:	4618      	mov	r0, r3
 800f934:	3710      	adds	r7, #16
 800f936:	46bd      	mov	sp, r7
 800f938:	bd80      	pop	{r7, pc}
 800f93a:	bf00      	nop
 800f93c:	08019fdc 	.word	0x08019fdc
 800f940:	0801a0d0 	.word	0x0801a0d0
 800f944:	0801a064 	.word	0x0801a064

0800f948 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b082      	sub	sp, #8
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d109      	bne.n	800f96a <tcp_close+0x22>
 800f956:	4b0f      	ldr	r3, [pc, #60]	; (800f994 <tcp_close+0x4c>)
 800f958:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800f95c:	490e      	ldr	r1, [pc, #56]	; (800f998 <tcp_close+0x50>)
 800f95e:	480f      	ldr	r0, [pc, #60]	; (800f99c <tcp_close+0x54>)
 800f960:	f006 fb8c 	bl	801607c <iprintf>
 800f964:	f06f 030f 	mvn.w	r3, #15
 800f968:	e00f      	b.n	800f98a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	7d1b      	ldrb	r3, [r3, #20]
 800f96e:	2b01      	cmp	r3, #1
 800f970:	d006      	beq.n	800f980 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	8b5b      	ldrh	r3, [r3, #26]
 800f976:	f043 0310 	orr.w	r3, r3, #16
 800f97a:	b29a      	uxth	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800f980:	2101      	movs	r1, #1
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f7ff fe94 	bl	800f6b0 <tcp_close_shutdown>
 800f988:	4603      	mov	r3, r0
}
 800f98a:	4618      	mov	r0, r3
 800f98c:	3708      	adds	r7, #8
 800f98e:	46bd      	mov	sp, r7
 800f990:	bd80      	pop	{r7, pc}
 800f992:	bf00      	nop
 800f994:	08019fdc 	.word	0x08019fdc
 800f998:	0801a130 	.word	0x0801a130
 800f99c:	0801a064 	.word	0x0801a064

0800f9a0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800f9a0:	b580      	push	{r7, lr}
 800f9a2:	b084      	sub	sp, #16
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d109      	bne.n	800f9c6 <tcp_shutdown+0x26>
 800f9b2:	4b26      	ldr	r3, [pc, #152]	; (800fa4c <tcp_shutdown+0xac>)
 800f9b4:	f240 2207 	movw	r2, #519	; 0x207
 800f9b8:	4925      	ldr	r1, [pc, #148]	; (800fa50 <tcp_shutdown+0xb0>)
 800f9ba:	4826      	ldr	r0, [pc, #152]	; (800fa54 <tcp_shutdown+0xb4>)
 800f9bc:	f006 fb5e 	bl	801607c <iprintf>
 800f9c0:	f06f 030f 	mvn.w	r3, #15
 800f9c4:	e03d      	b.n	800fa42 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	7d1b      	ldrb	r3, [r3, #20]
 800f9ca:	2b01      	cmp	r3, #1
 800f9cc:	d102      	bne.n	800f9d4 <tcp_shutdown+0x34>
    return ERR_CONN;
 800f9ce:	f06f 030a 	mvn.w	r3, #10
 800f9d2:	e036      	b.n	800fa42 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d01b      	beq.n	800fa12 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	8b5b      	ldrh	r3, [r3, #26]
 800f9de:	f043 0310 	orr.w	r3, r3, #16
 800f9e2:	b29a      	uxth	r2, r3
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d005      	beq.n	800f9fa <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800f9ee:	2101      	movs	r1, #1
 800f9f0:	68f8      	ldr	r0, [r7, #12]
 800f9f2:	f7ff fe5d 	bl	800f6b0 <tcp_close_shutdown>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	e023      	b.n	800fa42 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d007      	beq.n	800fa12 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7ff faf4 	bl	800eff4 <pbuf_free>
      pcb->refused_data = NULL;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d013      	beq.n	800fa40 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	7d1b      	ldrb	r3, [r3, #20]
 800fa1c:	2b04      	cmp	r3, #4
 800fa1e:	dc02      	bgt.n	800fa26 <tcp_shutdown+0x86>
 800fa20:	2b03      	cmp	r3, #3
 800fa22:	da02      	bge.n	800fa2a <tcp_shutdown+0x8a>
 800fa24:	e009      	b.n	800fa3a <tcp_shutdown+0x9a>
 800fa26:	2b07      	cmp	r3, #7
 800fa28:	d107      	bne.n	800fa3a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800fa2a:	68bb      	ldr	r3, [r7, #8]
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	4619      	mov	r1, r3
 800fa30:	68f8      	ldr	r0, [r7, #12]
 800fa32:	f7ff fe3d 	bl	800f6b0 <tcp_close_shutdown>
 800fa36:	4603      	mov	r3, r0
 800fa38:	e003      	b.n	800fa42 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800fa3a:	f06f 030a 	mvn.w	r3, #10
 800fa3e:	e000      	b.n	800fa42 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800fa40:	2300      	movs	r3, #0
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	08019fdc 	.word	0x08019fdc
 800fa50:	0801a148 	.word	0x0801a148
 800fa54:	0801a064 	.word	0x0801a064

0800fa58 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b08e      	sub	sp, #56	; 0x38
 800fa5c:	af04      	add	r7, sp, #16
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d107      	bne.n	800fa78 <tcp_abandon+0x20>
 800fa68:	4b4d      	ldr	r3, [pc, #308]	; (800fba0 <tcp_abandon+0x148>)
 800fa6a:	f240 223d 	movw	r2, #573	; 0x23d
 800fa6e:	494d      	ldr	r1, [pc, #308]	; (800fba4 <tcp_abandon+0x14c>)
 800fa70:	484d      	ldr	r0, [pc, #308]	; (800fba8 <tcp_abandon+0x150>)
 800fa72:	f006 fb03 	bl	801607c <iprintf>
 800fa76:	e090      	b.n	800fb9a <tcp_abandon+0x142>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	7d1b      	ldrb	r3, [r3, #20]
 800fa7c:	2b01      	cmp	r3, #1
 800fa7e:	d106      	bne.n	800fa8e <tcp_abandon+0x36>
 800fa80:	4b47      	ldr	r3, [pc, #284]	; (800fba0 <tcp_abandon+0x148>)
 800fa82:	f44f 7210 	mov.w	r2, #576	; 0x240
 800fa86:	4949      	ldr	r1, [pc, #292]	; (800fbac <tcp_abandon+0x154>)
 800fa88:	4847      	ldr	r0, [pc, #284]	; (800fba8 <tcp_abandon+0x150>)
 800fa8a:	f006 faf7 	bl	801607c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	7d1b      	ldrb	r3, [r3, #20]
 800fa92:	2b0a      	cmp	r3, #10
 800fa94:	d107      	bne.n	800faa6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800fa96:	6879      	ldr	r1, [r7, #4]
 800fa98:	4845      	ldr	r0, [pc, #276]	; (800fbb0 <tcp_abandon+0x158>)
 800fa9a:	f001 fb01 	bl	80110a0 <tcp_pcb_remove>
    tcp_free(pcb);
 800fa9e:	6878      	ldr	r0, [r7, #4]
 800faa0:	f7ff fd54 	bl	800f54c <tcp_free>
 800faa4:	e079      	b.n	800fb9a <tcp_abandon+0x142>
  } else {
    int send_rst = 0;
 800faa6:	2300      	movs	r3, #0
 800faa8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800faaa:	2300      	movs	r3, #0
 800faac:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fab2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fac0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	691b      	ldr	r3, [r3, #16]
 800fac6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	7d1b      	ldrb	r3, [r3, #20]
 800facc:	2b00      	cmp	r3, #0
 800face:	d126      	bne.n	800fb1e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	8adb      	ldrh	r3, [r3, #22]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d02e      	beq.n	800fb36 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800fad8:	4b36      	ldr	r3, [pc, #216]	; (800fbb4 <tcp_abandon+0x15c>)
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d105      	bne.n	800faee <tcp_abandon+0x96>
 800fae2:	4b34      	ldr	r3, [pc, #208]	; (800fbb4 <tcp_abandon+0x15c>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	4a32      	ldr	r2, [pc, #200]	; (800fbb4 <tcp_abandon+0x15c>)
 800faea:	6013      	str	r3, [r2, #0]
 800faec:	e013      	b.n	800fb16 <tcp_abandon+0xbe>
 800faee:	4b31      	ldr	r3, [pc, #196]	; (800fbb4 <tcp_abandon+0x15c>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	61fb      	str	r3, [r7, #28]
 800faf4:	e00c      	b.n	800fb10 <tcp_abandon+0xb8>
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	687a      	ldr	r2, [r7, #4]
 800fafc:	429a      	cmp	r2, r3
 800fafe:	d104      	bne.n	800fb0a <tcp_abandon+0xb2>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	68da      	ldr	r2, [r3, #12]
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	60da      	str	r2, [r3, #12]
 800fb08:	e005      	b.n	800fb16 <tcp_abandon+0xbe>
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	68db      	ldr	r3, [r3, #12]
 800fb0e:	61fb      	str	r3, [r7, #28]
 800fb10:	69fb      	ldr	r3, [r7, #28]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d1ef      	bne.n	800faf6 <tcp_abandon+0x9e>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2200      	movs	r2, #0
 800fb1a:	60da      	str	r2, [r3, #12]
 800fb1c:	e00b      	b.n	800fb36 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	8adb      	ldrh	r3, [r3, #22]
 800fb26:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800fb28:	6879      	ldr	r1, [r7, #4]
 800fb2a:	4823      	ldr	r0, [pc, #140]	; (800fbb8 <tcp_abandon+0x160>)
 800fb2c:	f001 fab8 	bl	80110a0 <tcp_pcb_remove>
 800fb30:	4b22      	ldr	r3, [pc, #136]	; (800fbbc <tcp_abandon+0x164>)
 800fb32:	2201      	movs	r2, #1
 800fb34:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d004      	beq.n	800fb48 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fb42:	4618      	mov	r0, r3
 800fb44:	f000 ffc0 	bl	8010ac8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d004      	beq.n	800fb5a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb54:	4618      	mov	r0, r3
 800fb56:	f000 ffb7 	bl	8010ac8 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
      tcp_segs_free(pcb->ooseq);
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800fb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d00e      	beq.n	800fb7e <tcp_abandon+0x126>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800fb60:	6879      	ldr	r1, [r7, #4]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	3304      	adds	r3, #4
 800fb66:	687a      	ldr	r2, [r7, #4]
 800fb68:	8b12      	ldrh	r2, [r2, #24]
 800fb6a:	9202      	str	r2, [sp, #8]
 800fb6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fb6e:	9201      	str	r2, [sp, #4]
 800fb70:	9300      	str	r3, [sp, #0]
 800fb72:	460b      	mov	r3, r1
 800fb74:	697a      	ldr	r2, [r7, #20]
 800fb76:	69b9      	ldr	r1, [r7, #24]
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f005 f883 	bl	8014c84 <tcp_rst>
    }
    last_state = pcb->state;
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	7d1b      	ldrb	r3, [r3, #20]
 800fb82:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f7ff fce1 	bl	800f54c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d004      	beq.n	800fb9a <tcp_abandon+0x142>
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	f06f 010c 	mvn.w	r1, #12
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	4798      	blx	r3
  }
}
 800fb9a:	3728      	adds	r7, #40	; 0x28
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	08019fdc 	.word	0x08019fdc
 800fba4:	0801a164 	.word	0x0801a164
 800fba8:	0801a064 	.word	0x0801a064
 800fbac:	0801a180 	.word	0x0801a180
 800fbb0:	2400a794 	.word	0x2400a794
 800fbb4:	2400a790 	.word	0x2400a790
 800fbb8:	2400a784 	.word	0x2400a784
 800fbbc:	2400a780 	.word	0x2400a780

0800fbc0 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b082      	sub	sp, #8
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800fbc8:	2101      	movs	r1, #1
 800fbca:	6878      	ldr	r0, [r7, #4]
 800fbcc:	f7ff ff44 	bl	800fa58 <tcp_abandon>
}
 800fbd0:	bf00      	nop
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}

0800fbd8 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b088      	sub	sp, #32
 800fbdc:	af00      	add	r7, sp, #0
 800fbde:	60f8      	str	r0, [r7, #12]
 800fbe0:	60b9      	str	r1, [r7, #8]
 800fbe2:	4613      	mov	r3, r2
 800fbe4:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800fbe6:	2304      	movs	r3, #4
 800fbe8:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d101      	bne.n	800fbf4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800fbf0:	4b3e      	ldr	r3, [pc, #248]	; (800fcec <tcp_bind+0x114>)
 800fbf2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d109      	bne.n	800fc0e <tcp_bind+0x36>
 800fbfa:	4b3d      	ldr	r3, [pc, #244]	; (800fcf0 <tcp_bind+0x118>)
 800fbfc:	f240 22a9 	movw	r2, #681	; 0x2a9
 800fc00:	493c      	ldr	r1, [pc, #240]	; (800fcf4 <tcp_bind+0x11c>)
 800fc02:	483d      	ldr	r0, [pc, #244]	; (800fcf8 <tcp_bind+0x120>)
 800fc04:	f006 fa3a 	bl	801607c <iprintf>
 800fc08:	f06f 030f 	mvn.w	r3, #15
 800fc0c:	e06a      	b.n	800fce4 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	7d1b      	ldrb	r3, [r3, #20]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d009      	beq.n	800fc2a <tcp_bind+0x52>
 800fc16:	4b36      	ldr	r3, [pc, #216]	; (800fcf0 <tcp_bind+0x118>)
 800fc18:	f240 22ab 	movw	r2, #683	; 0x2ab
 800fc1c:	4937      	ldr	r1, [pc, #220]	; (800fcfc <tcp_bind+0x124>)
 800fc1e:	4836      	ldr	r0, [pc, #216]	; (800fcf8 <tcp_bind+0x120>)
 800fc20:	f006 fa2c 	bl	801607c <iprintf>
 800fc24:	f06f 0305 	mvn.w	r3, #5
 800fc28:	e05c      	b.n	800fce4 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800fc2a:	88fb      	ldrh	r3, [r7, #6]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d109      	bne.n	800fc44 <tcp_bind+0x6c>
    port = tcp_new_port();
 800fc30:	f000 f9e0 	bl	800fff4 <tcp_new_port>
 800fc34:	4603      	mov	r3, r0
 800fc36:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fc38:	88fb      	ldrh	r3, [r7, #6]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d135      	bne.n	800fcaa <tcp_bind+0xd2>
      return ERR_BUF;
 800fc3e:	f06f 0301 	mvn.w	r3, #1
 800fc42:	e04f      	b.n	800fce4 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800fc44:	2300      	movs	r3, #0
 800fc46:	61fb      	str	r3, [r7, #28]
 800fc48:	e02b      	b.n	800fca2 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fc4a:	4a2d      	ldr	r2, [pc, #180]	; (800fd00 <tcp_bind+0x128>)
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	61bb      	str	r3, [r7, #24]
 800fc56:	e01e      	b.n	800fc96 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800fc58:	69bb      	ldr	r3, [r7, #24]
 800fc5a:	8adb      	ldrh	r3, [r3, #22]
 800fc5c:	88fa      	ldrh	r2, [r7, #6]
 800fc5e:	429a      	cmp	r2, r3
 800fc60:	d116      	bne.n	800fc90 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800fc62:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d010      	beq.n	800fc8a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d00c      	beq.n	800fc8a <tcp_bind+0xb2>
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d009      	beq.n	800fc8a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800fc76:	68bb      	ldr	r3, [r7, #8]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d005      	beq.n	800fc8a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800fc7e:	69bb      	ldr	r3, [r7, #24]
 800fc80:	681a      	ldr	r2, [r3, #0]
 800fc82:	68bb      	ldr	r3, [r7, #8]
 800fc84:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d102      	bne.n	800fc90 <tcp_bind+0xb8>
              return ERR_USE;
 800fc8a:	f06f 0307 	mvn.w	r3, #7
 800fc8e:	e029      	b.n	800fce4 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800fc90:	69bb      	ldr	r3, [r7, #24]
 800fc92:	68db      	ldr	r3, [r3, #12]
 800fc94:	61bb      	str	r3, [r7, #24]
 800fc96:	69bb      	ldr	r3, [r7, #24]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d1dd      	bne.n	800fc58 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800fc9c:	69fb      	ldr	r3, [r7, #28]
 800fc9e:	3301      	adds	r3, #1
 800fca0:	61fb      	str	r3, [r7, #28]
 800fca2:	69fa      	ldr	r2, [r7, #28]
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	429a      	cmp	r2, r3
 800fca8:	dbcf      	blt.n	800fc4a <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d00c      	beq.n	800fcca <tcp_bind+0xf2>
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d008      	beq.n	800fcca <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d002      	beq.n	800fcc4 <tcp_bind+0xec>
 800fcbe:	68bb      	ldr	r3, [r7, #8]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	e000      	b.n	800fcc6 <tcp_bind+0xee>
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	68fa      	ldr	r2, [r7, #12]
 800fcc8:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	88fa      	ldrh	r2, [r7, #6]
 800fcce:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800fcd0:	4b0c      	ldr	r3, [pc, #48]	; (800fd04 <tcp_bind+0x12c>)
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	60da      	str	r2, [r3, #12]
 800fcd8:	4a0a      	ldr	r2, [pc, #40]	; (800fd04 <tcp_bind+0x12c>)
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	6013      	str	r3, [r2, #0]
 800fcde:	f005 f993 	bl	8015008 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800fce2:	2300      	movs	r3, #0
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3720      	adds	r7, #32
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	08018ff8 	.word	0x08018ff8
 800fcf0:	08019fdc 	.word	0x08019fdc
 800fcf4:	0801a1b4 	.word	0x0801a1b4
 800fcf8:	0801a064 	.word	0x0801a064
 800fcfc:	0801a1cc 	.word	0x0801a1cc
 800fd00:	08019fcc 	.word	0x08019fcc
 800fd04:	2400a790 	.word	0x2400a790

0800fd08 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800fd08:	b580      	push	{r7, lr}
 800fd0a:	b084      	sub	sp, #16
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	60f8      	str	r0, [r7, #12]
 800fd10:	60b9      	str	r1, [r7, #8]
 800fd12:	4613      	mov	r3, r2
 800fd14:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d106      	bne.n	800fd2a <tcp_accept_null+0x22>
 800fd1c:	4b07      	ldr	r3, [pc, #28]	; (800fd3c <tcp_accept_null+0x34>)
 800fd1e:	f240 320f 	movw	r2, #783	; 0x30f
 800fd22:	4907      	ldr	r1, [pc, #28]	; (800fd40 <tcp_accept_null+0x38>)
 800fd24:	4807      	ldr	r0, [pc, #28]	; (800fd44 <tcp_accept_null+0x3c>)
 800fd26:	f006 f9a9 	bl	801607c <iprintf>

  tcp_abort(pcb);
 800fd2a:	68b8      	ldr	r0, [r7, #8]
 800fd2c:	f7ff ff48 	bl	800fbc0 <tcp_abort>

  return ERR_ABRT;
 800fd30:	f06f 030c 	mvn.w	r3, #12
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3710      	adds	r7, #16
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	08019fdc 	.word	0x08019fdc
 800fd40:	0801a1f4 	.word	0x0801a1f4
 800fd44:	0801a064 	.word	0x0801a064

0800fd48 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800fd48:	b580      	push	{r7, lr}
 800fd4a:	b088      	sub	sp, #32
 800fd4c:	af00      	add	r7, sp, #0
 800fd4e:	60f8      	str	r0, [r7, #12]
 800fd50:	460b      	mov	r3, r1
 800fd52:	607a      	str	r2, [r7, #4]
 800fd54:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800fd56:	2300      	movs	r3, #0
 800fd58:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d109      	bne.n	800fd74 <tcp_listen_with_backlog_and_err+0x2c>
 800fd60:	4b47      	ldr	r3, [pc, #284]	; (800fe80 <tcp_listen_with_backlog_and_err+0x138>)
 800fd62:	f240 3259 	movw	r2, #857	; 0x359
 800fd66:	4947      	ldr	r1, [pc, #284]	; (800fe84 <tcp_listen_with_backlog_and_err+0x13c>)
 800fd68:	4847      	ldr	r0, [pc, #284]	; (800fe88 <tcp_listen_with_backlog_and_err+0x140>)
 800fd6a:	f006 f987 	bl	801607c <iprintf>
 800fd6e:	23f0      	movs	r3, #240	; 0xf0
 800fd70:	76fb      	strb	r3, [r7, #27]
 800fd72:	e079      	b.n	800fe68 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	7d1b      	ldrb	r3, [r3, #20]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d009      	beq.n	800fd90 <tcp_listen_with_backlog_and_err+0x48>
 800fd7c:	4b40      	ldr	r3, [pc, #256]	; (800fe80 <tcp_listen_with_backlog_and_err+0x138>)
 800fd7e:	f240 325a 	movw	r2, #858	; 0x35a
 800fd82:	4942      	ldr	r1, [pc, #264]	; (800fe8c <tcp_listen_with_backlog_and_err+0x144>)
 800fd84:	4840      	ldr	r0, [pc, #256]	; (800fe88 <tcp_listen_with_backlog_and_err+0x140>)
 800fd86:	f006 f979 	bl	801607c <iprintf>
 800fd8a:	23f1      	movs	r3, #241	; 0xf1
 800fd8c:	76fb      	strb	r3, [r7, #27]
 800fd8e:	e06b      	b.n	800fe68 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	7d1b      	ldrb	r3, [r3, #20]
 800fd94:	2b01      	cmp	r3, #1
 800fd96:	d104      	bne.n	800fda2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800fd9c:	23f7      	movs	r3, #247	; 0xf7
 800fd9e:	76fb      	strb	r3, [r7, #27]
    goto done;
 800fda0:	e062      	b.n	800fe68 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800fda2:	2002      	movs	r0, #2
 800fda4:	f7fe fa68 	bl	800e278 <memp_malloc>
 800fda8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800fdaa:	69fb      	ldr	r3, [r7, #28]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d102      	bne.n	800fdb6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800fdb0:	23ff      	movs	r3, #255	; 0xff
 800fdb2:	76fb      	strb	r3, [r7, #27]
    goto done;
 800fdb4:	e058      	b.n	800fe68 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	691a      	ldr	r2, [r3, #16]
 800fdba:	69fb      	ldr	r3, [r7, #28]
 800fdbc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	8ada      	ldrh	r2, [r3, #22]
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800fdc6:	69fb      	ldr	r3, [r7, #28]
 800fdc8:	2201      	movs	r2, #1
 800fdca:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	7d5a      	ldrb	r2, [r3, #21]
 800fdd0:	69fb      	ldr	r3, [r7, #28]
 800fdd2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	7a5a      	ldrb	r2, [r3, #9]
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	2200      	movs	r2, #0
 800fde0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	7ada      	ldrb	r2, [r3, #11]
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	7a9a      	ldrb	r2, [r3, #10]
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	681a      	ldr	r2, [r3, #0]
 800fdf6:	69fb      	ldr	r3, [r7, #28]
 800fdf8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	8adb      	ldrh	r3, [r3, #22]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d021      	beq.n	800fe46 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800fe02:	4b23      	ldr	r3, [pc, #140]	; (800fe90 <tcp_listen_with_backlog_and_err+0x148>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	68fa      	ldr	r2, [r7, #12]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d105      	bne.n	800fe18 <tcp_listen_with_backlog_and_err+0xd0>
 800fe0c:	4b20      	ldr	r3, [pc, #128]	; (800fe90 <tcp_listen_with_backlog_and_err+0x148>)
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	68db      	ldr	r3, [r3, #12]
 800fe12:	4a1f      	ldr	r2, [pc, #124]	; (800fe90 <tcp_listen_with_backlog_and_err+0x148>)
 800fe14:	6013      	str	r3, [r2, #0]
 800fe16:	e013      	b.n	800fe40 <tcp_listen_with_backlog_and_err+0xf8>
 800fe18:	4b1d      	ldr	r3, [pc, #116]	; (800fe90 <tcp_listen_with_backlog_and_err+0x148>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	617b      	str	r3, [r7, #20]
 800fe1e:	e00c      	b.n	800fe3a <tcp_listen_with_backlog_and_err+0xf2>
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	68db      	ldr	r3, [r3, #12]
 800fe24:	68fa      	ldr	r2, [r7, #12]
 800fe26:	429a      	cmp	r2, r3
 800fe28:	d104      	bne.n	800fe34 <tcp_listen_with_backlog_and_err+0xec>
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	68da      	ldr	r2, [r3, #12]
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	60da      	str	r2, [r3, #12]
 800fe32:	e005      	b.n	800fe40 <tcp_listen_with_backlog_and_err+0xf8>
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	68db      	ldr	r3, [r3, #12]
 800fe38:	617b      	str	r3, [r7, #20]
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d1ef      	bne.n	800fe20 <tcp_listen_with_backlog_and_err+0xd8>
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2200      	movs	r2, #0
 800fe44:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f7ff fb80 	bl	800f54c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800fe4c:	69fb      	ldr	r3, [r7, #28]
 800fe4e:	4a11      	ldr	r2, [pc, #68]	; (800fe94 <tcp_listen_with_backlog_and_err+0x14c>)
 800fe50:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800fe52:	4b11      	ldr	r3, [pc, #68]	; (800fe98 <tcp_listen_with_backlog_and_err+0x150>)
 800fe54:	681a      	ldr	r2, [r3, #0]
 800fe56:	69fb      	ldr	r3, [r7, #28]
 800fe58:	60da      	str	r2, [r3, #12]
 800fe5a:	4a0f      	ldr	r2, [pc, #60]	; (800fe98 <tcp_listen_with_backlog_and_err+0x150>)
 800fe5c:	69fb      	ldr	r3, [r7, #28]
 800fe5e:	6013      	str	r3, [r2, #0]
 800fe60:	f005 f8d2 	bl	8015008 <tcp_timer_needed>
  res = ERR_OK;
 800fe64:	2300      	movs	r3, #0
 800fe66:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d002      	beq.n	800fe74 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	7efa      	ldrb	r2, [r7, #27]
 800fe72:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800fe74:	69fb      	ldr	r3, [r7, #28]
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3720      	adds	r7, #32
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	bd80      	pop	{r7, pc}
 800fe7e:	bf00      	nop
 800fe80:	08019fdc 	.word	0x08019fdc
 800fe84:	0801a214 	.word	0x0801a214
 800fe88:	0801a064 	.word	0x0801a064
 800fe8c:	0801a244 	.word	0x0801a244
 800fe90:	2400a790 	.word	0x2400a790
 800fe94:	0800fd09 	.word	0x0800fd09
 800fe98:	2400a78c 	.word	0x2400a78c

0800fe9c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b084      	sub	sp, #16
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d106      	bne.n	800feb8 <tcp_update_rcv_ann_wnd+0x1c>
 800feaa:	4b25      	ldr	r3, [pc, #148]	; (800ff40 <tcp_update_rcv_ann_wnd+0xa4>)
 800feac:	f240 32a6 	movw	r2, #934	; 0x3a6
 800feb0:	4924      	ldr	r1, [pc, #144]	; (800ff44 <tcp_update_rcv_ann_wnd+0xa8>)
 800feb2:	4825      	ldr	r0, [pc, #148]	; (800ff48 <tcp_update_rcv_ann_wnd+0xac>)
 800feb4:	f006 f8e2 	bl	801607c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800febc:	687a      	ldr	r2, [r7, #4]
 800febe:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800fec0:	4413      	add	r3, r2
 800fec2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fec8:	687a      	ldr	r2, [r7, #4]
 800feca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800fecc:	f240 51b4 	movw	r1, #1460	; 0x5b4
 800fed0:	428a      	cmp	r2, r1
 800fed2:	bf28      	it	cs
 800fed4:	460a      	movcs	r2, r1
 800fed6:	b292      	uxth	r2, r2
 800fed8:	4413      	add	r3, r2
 800feda:	68fa      	ldr	r2, [r7, #12]
 800fedc:	1ad3      	subs	r3, r2, r3
 800fede:	2b00      	cmp	r3, #0
 800fee0:	db08      	blt.n	800fef4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feee:	68fa      	ldr	r2, [r7, #12]
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	e020      	b.n	800ff36 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fefc:	1ad3      	subs	r3, r2, r3
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	dd03      	ble.n	800ff0a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	2200      	movs	r2, #0
 800ff06:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ff08:	e014      	b.n	800ff34 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff12:	1ad3      	subs	r3, r2, r3
 800ff14:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff1c:	d306      	bcc.n	800ff2c <tcp_update_rcv_ann_wnd+0x90>
 800ff1e:	4b08      	ldr	r3, [pc, #32]	; (800ff40 <tcp_update_rcv_ann_wnd+0xa4>)
 800ff20:	f240 32b6 	movw	r2, #950	; 0x3b6
 800ff24:	4909      	ldr	r1, [pc, #36]	; (800ff4c <tcp_update_rcv_ann_wnd+0xb0>)
 800ff26:	4808      	ldr	r0, [pc, #32]	; (800ff48 <tcp_update_rcv_ann_wnd+0xac>)
 800ff28:	f006 f8a8 	bl	801607c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	b29a      	uxth	r2, r3
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800ff34:	2300      	movs	r3, #0
  }
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3710      	adds	r7, #16
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	bd80      	pop	{r7, pc}
 800ff3e:	bf00      	nop
 800ff40:	08019fdc 	.word	0x08019fdc
 800ff44:	0801a27c 	.word	0x0801a27c
 800ff48:	0801a064 	.word	0x0801a064
 800ff4c:	0801a2a0 	.word	0x0801a2a0

0800ff50 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b084      	sub	sp, #16
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	460b      	mov	r3, r1
 800ff5a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d107      	bne.n	800ff72 <tcp_recved+0x22>
 800ff62:	4b20      	ldr	r3, [pc, #128]	; (800ffe4 <tcp_recved+0x94>)
 800ff64:	f240 32cf 	movw	r2, #975	; 0x3cf
 800ff68:	491f      	ldr	r1, [pc, #124]	; (800ffe8 <tcp_recved+0x98>)
 800ff6a:	4820      	ldr	r0, [pc, #128]	; (800ffec <tcp_recved+0x9c>)
 800ff6c:	f006 f886 	bl	801607c <iprintf>
 800ff70:	e034      	b.n	800ffdc <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	7d1b      	ldrb	r3, [r3, #20]
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d106      	bne.n	800ff88 <tcp_recved+0x38>
 800ff7a:	4b1a      	ldr	r3, [pc, #104]	; (800ffe4 <tcp_recved+0x94>)
 800ff7c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800ff80:	491b      	ldr	r1, [pc, #108]	; (800fff0 <tcp_recved+0xa0>)
 800ff82:	481a      	ldr	r0, [pc, #104]	; (800ffec <tcp_recved+0x9c>)
 800ff84:	f006 f87a 	bl	801607c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff8c:	887b      	ldrh	r3, [r7, #2]
 800ff8e:	4413      	add	r3, r2
 800ff90:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800ff92:	89fb      	ldrh	r3, [r7, #14]
 800ff94:	f640 3268 	movw	r2, #2920	; 0xb68
 800ff98:	4293      	cmp	r3, r2
 800ff9a:	d804      	bhi.n	800ffa6 <tcp_recved+0x56>
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ffa0:	89fa      	ldrh	r2, [r7, #14]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d204      	bcs.n	800ffb0 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	f640 3268 	movw	r2, #2920	; 0xb68
 800ffac:	851a      	strh	r2, [r3, #40]	; 0x28
 800ffae:	e002      	b.n	800ffb6 <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	89fa      	ldrh	r2, [r7, #14]
 800ffb4:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800ffb6:	6878      	ldr	r0, [r7, #4]
 800ffb8:	f7ff ff70 	bl	800fe9c <tcp_update_rcv_ann_wnd>
 800ffbc:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	f240 22d9 	movw	r2, #729	; 0x2d9
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d909      	bls.n	800ffdc <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	8b5b      	ldrh	r3, [r3, #26]
 800ffcc:	f043 0302 	orr.w	r3, r3, #2
 800ffd0:	b29a      	uxth	r2, r3
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f004 f8a0 	bl	801411c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800ffdc:	3710      	adds	r7, #16
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
 800ffe2:	bf00      	nop
 800ffe4:	08019fdc 	.word	0x08019fdc
 800ffe8:	0801a2bc 	.word	0x0801a2bc
 800ffec:	0801a064 	.word	0x0801a064
 800fff0:	0801a2d4 	.word	0x0801a2d4

0800fff4 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800fffe:	4b1e      	ldr	r3, [pc, #120]	; (8010078 <tcp_new_port+0x84>)
 8010000:	881b      	ldrh	r3, [r3, #0]
 8010002:	3301      	adds	r3, #1
 8010004:	b29a      	uxth	r2, r3
 8010006:	4b1c      	ldr	r3, [pc, #112]	; (8010078 <tcp_new_port+0x84>)
 8010008:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801000a:	4b1b      	ldr	r3, [pc, #108]	; (8010078 <tcp_new_port+0x84>)
 801000c:	881b      	ldrh	r3, [r3, #0]
 801000e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010012:	4293      	cmp	r3, r2
 8010014:	d103      	bne.n	801001e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8010016:	4b18      	ldr	r3, [pc, #96]	; (8010078 <tcp_new_port+0x84>)
 8010018:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801001c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801001e:	2300      	movs	r3, #0
 8010020:	71fb      	strb	r3, [r7, #7]
 8010022:	e01e      	b.n	8010062 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010024:	79fb      	ldrb	r3, [r7, #7]
 8010026:	4a15      	ldr	r2, [pc, #84]	; (801007c <tcp_new_port+0x88>)
 8010028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	603b      	str	r3, [r7, #0]
 8010030:	e011      	b.n	8010056 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	8ada      	ldrh	r2, [r3, #22]
 8010036:	4b10      	ldr	r3, [pc, #64]	; (8010078 <tcp_new_port+0x84>)
 8010038:	881b      	ldrh	r3, [r3, #0]
 801003a:	429a      	cmp	r2, r3
 801003c:	d108      	bne.n	8010050 <tcp_new_port+0x5c>
        n++;
 801003e:	88bb      	ldrh	r3, [r7, #4]
 8010040:	3301      	adds	r3, #1
 8010042:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8010044:	88bb      	ldrh	r3, [r7, #4]
 8010046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801004a:	d3d8      	bcc.n	800fffe <tcp_new_port+0xa>
          return 0;
 801004c:	2300      	movs	r3, #0
 801004e:	e00d      	b.n	801006c <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8010050:	683b      	ldr	r3, [r7, #0]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	603b      	str	r3, [r7, #0]
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d1ea      	bne.n	8010032 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801005c:	79fb      	ldrb	r3, [r7, #7]
 801005e:	3301      	adds	r3, #1
 8010060:	71fb      	strb	r3, [r7, #7]
 8010062:	79fb      	ldrb	r3, [r7, #7]
 8010064:	2b03      	cmp	r3, #3
 8010066:	d9dd      	bls.n	8010024 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8010068:	4b03      	ldr	r3, [pc, #12]	; (8010078 <tcp_new_port+0x84>)
 801006a:	881b      	ldrh	r3, [r3, #0]
}
 801006c:	4618      	mov	r0, r3
 801006e:	370c      	adds	r7, #12
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr
 8010078:	24000044 	.word	0x24000044
 801007c:	08019fcc 	.word	0x08019fcc

08010080 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b08a      	sub	sp, #40	; 0x28
 8010084:	af00      	add	r7, sp, #0
 8010086:	60f8      	str	r0, [r7, #12]
 8010088:	60b9      	str	r1, [r7, #8]
 801008a:	603b      	str	r3, [r7, #0]
 801008c:	4613      	mov	r3, r2
 801008e:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8010090:	2300      	movs	r3, #0
 8010092:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d109      	bne.n	80100ae <tcp_connect+0x2e>
 801009a:	4b7d      	ldr	r3, [pc, #500]	; (8010290 <tcp_connect+0x210>)
 801009c:	f240 4235 	movw	r2, #1077	; 0x435
 80100a0:	497c      	ldr	r1, [pc, #496]	; (8010294 <tcp_connect+0x214>)
 80100a2:	487d      	ldr	r0, [pc, #500]	; (8010298 <tcp_connect+0x218>)
 80100a4:	f005 ffea 	bl	801607c <iprintf>
 80100a8:	f06f 030f 	mvn.w	r3, #15
 80100ac:	e0ec      	b.n	8010288 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d109      	bne.n	80100c8 <tcp_connect+0x48>
 80100b4:	4b76      	ldr	r3, [pc, #472]	; (8010290 <tcp_connect+0x210>)
 80100b6:	f240 4236 	movw	r2, #1078	; 0x436
 80100ba:	4978      	ldr	r1, [pc, #480]	; (801029c <tcp_connect+0x21c>)
 80100bc:	4876      	ldr	r0, [pc, #472]	; (8010298 <tcp_connect+0x218>)
 80100be:	f005 ffdd 	bl	801607c <iprintf>
 80100c2:	f06f 030f 	mvn.w	r3, #15
 80100c6:	e0df      	b.n	8010288 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	7d1b      	ldrb	r3, [r3, #20]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d009      	beq.n	80100e4 <tcp_connect+0x64>
 80100d0:	4b6f      	ldr	r3, [pc, #444]	; (8010290 <tcp_connect+0x210>)
 80100d2:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80100d6:	4972      	ldr	r1, [pc, #456]	; (80102a0 <tcp_connect+0x220>)
 80100d8:	486f      	ldr	r0, [pc, #444]	; (8010298 <tcp_connect+0x218>)
 80100da:	f005 ffcf 	bl	801607c <iprintf>
 80100de:	f06f 0309 	mvn.w	r3, #9
 80100e2:	e0d1      	b.n	8010288 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d002      	beq.n	80100f0 <tcp_connect+0x70>
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	e000      	b.n	80100f2 <tcp_connect+0x72>
 80100f0:	2300      	movs	r3, #0
 80100f2:	68fa      	ldr	r2, [r7, #12]
 80100f4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	88fa      	ldrh	r2, [r7, #6]
 80100fa:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	7a1b      	ldrb	r3, [r3, #8]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d006      	beq.n	8010112 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	7a1b      	ldrb	r3, [r3, #8]
 8010108:	4618      	mov	r0, r3
 801010a:	f7fe fc41 	bl	800e990 <netif_get_by_index>
 801010e:	6278      	str	r0, [r7, #36]	; 0x24
 8010110:	e005      	b.n	801011e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	3304      	adds	r3, #4
 8010116:	4618      	mov	r0, r3
 8010118:	f7fc fa5c 	bl	800c5d4 <ip4_route>
 801011c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 801011e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010120:	2b00      	cmp	r3, #0
 8010122:	d102      	bne.n	801012a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8010124:	f06f 0303 	mvn.w	r3, #3
 8010128:	e0ae      	b.n	8010288 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d003      	beq.n	8010138 <tcp_connect+0xb8>
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d111      	bne.n	801015c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8010138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801013a:	2b00      	cmp	r3, #0
 801013c:	d002      	beq.n	8010144 <tcp_connect+0xc4>
 801013e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010140:	3304      	adds	r3, #4
 8010142:	e000      	b.n	8010146 <tcp_connect+0xc6>
 8010144:	2300      	movs	r3, #0
 8010146:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d102      	bne.n	8010154 <tcp_connect+0xd4>
      return ERR_RTE;
 801014e:	f06f 0303 	mvn.w	r3, #3
 8010152:	e099      	b.n	8010288 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010154:	69fb      	ldr	r3, [r7, #28]
 8010156:	681a      	ldr	r2, [r3, #0]
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	8adb      	ldrh	r3, [r3, #22]
 8010160:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	8adb      	ldrh	r3, [r3, #22]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d10c      	bne.n	8010184 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801016a:	f7ff ff43 	bl	800fff4 <tcp_new_port>
 801016e:	4603      	mov	r3, r0
 8010170:	461a      	mov	r2, r3
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	8adb      	ldrh	r3, [r3, #22]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d102      	bne.n	8010184 <tcp_connect+0x104>
      return ERR_BUF;
 801017e:	f06f 0301 	mvn.w	r3, #1
 8010182:	e081      	b.n	8010288 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8010184:	68f8      	ldr	r0, [r7, #12]
 8010186:	f001 f811 	bl	80111ac <tcp_next_iss>
 801018a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	2200      	movs	r2, #0
 8010190:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	697a      	ldr	r2, [r7, #20]
 8010196:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8010198:	697b      	ldr	r3, [r7, #20]
 801019a:	1e5a      	subs	r2, r3, #1
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80101a0:	697b      	ldr	r3, [r7, #20]
 80101a2:	1e5a      	subs	r2, r3, #1
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	1e5a      	subs	r2, r3, #1
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	f640 3268 	movw	r2, #2920	; 0xb68
 80101b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f640 3268 	movw	r2, #2920	; 0xb68
 80101ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80101d8:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	3304      	adds	r3, #4
 80101e2:	461a      	mov	r2, r3
 80101e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80101e6:	f001 f807 	bl	80111f8 <tcp_eff_send_mss_netif>
 80101ea:	4603      	mov	r3, r0
 80101ec:	461a      	mov	r2, r3
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	2201      	movs	r2, #1
 80101f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	683a      	ldr	r2, [r7, #0]
 80101fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8010202:	2102      	movs	r1, #2
 8010204:	68f8      	ldr	r0, [r7, #12]
 8010206:	f003 fe9b 	bl	8013f40 <tcp_enqueue_flags>
 801020a:	4603      	mov	r3, r0
 801020c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801020e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d136      	bne.n	8010284 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	2202      	movs	r2, #2
 801021a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801021c:	8b7b      	ldrh	r3, [r7, #26]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d021      	beq.n	8010266 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8010222:	4b20      	ldr	r3, [pc, #128]	; (80102a4 <tcp_connect+0x224>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	68fa      	ldr	r2, [r7, #12]
 8010228:	429a      	cmp	r2, r3
 801022a:	d105      	bne.n	8010238 <tcp_connect+0x1b8>
 801022c:	4b1d      	ldr	r3, [pc, #116]	; (80102a4 <tcp_connect+0x224>)
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	4a1c      	ldr	r2, [pc, #112]	; (80102a4 <tcp_connect+0x224>)
 8010234:	6013      	str	r3, [r2, #0]
 8010236:	e013      	b.n	8010260 <tcp_connect+0x1e0>
 8010238:	4b1a      	ldr	r3, [pc, #104]	; (80102a4 <tcp_connect+0x224>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	623b      	str	r3, [r7, #32]
 801023e:	e00c      	b.n	801025a <tcp_connect+0x1da>
 8010240:	6a3b      	ldr	r3, [r7, #32]
 8010242:	68db      	ldr	r3, [r3, #12]
 8010244:	68fa      	ldr	r2, [r7, #12]
 8010246:	429a      	cmp	r2, r3
 8010248:	d104      	bne.n	8010254 <tcp_connect+0x1d4>
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	68da      	ldr	r2, [r3, #12]
 801024e:	6a3b      	ldr	r3, [r7, #32]
 8010250:	60da      	str	r2, [r3, #12]
 8010252:	e005      	b.n	8010260 <tcp_connect+0x1e0>
 8010254:	6a3b      	ldr	r3, [r7, #32]
 8010256:	68db      	ldr	r3, [r3, #12]
 8010258:	623b      	str	r3, [r7, #32]
 801025a:	6a3b      	ldr	r3, [r7, #32]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d1ef      	bne.n	8010240 <tcp_connect+0x1c0>
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	2200      	movs	r2, #0
 8010264:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8010266:	4b10      	ldr	r3, [pc, #64]	; (80102a8 <tcp_connect+0x228>)
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	60da      	str	r2, [r3, #12]
 801026e:	4a0e      	ldr	r2, [pc, #56]	; (80102a8 <tcp_connect+0x228>)
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6013      	str	r3, [r2, #0]
 8010274:	f004 fec8 	bl	8015008 <tcp_timer_needed>
 8010278:	4b0c      	ldr	r3, [pc, #48]	; (80102ac <tcp_connect+0x22c>)
 801027a:	2201      	movs	r2, #1
 801027c:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801027e:	68f8      	ldr	r0, [r7, #12]
 8010280:	f003 ff4c 	bl	801411c <tcp_output>
  }
  return ret;
 8010284:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8010288:	4618      	mov	r0, r3
 801028a:	3728      	adds	r7, #40	; 0x28
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	08019fdc 	.word	0x08019fdc
 8010294:	0801a2fc 	.word	0x0801a2fc
 8010298:	0801a064 	.word	0x0801a064
 801029c:	0801a318 	.word	0x0801a318
 80102a0:	0801a334 	.word	0x0801a334
 80102a4:	2400a790 	.word	0x2400a790
 80102a8:	2400a784 	.word	0x2400a784
 80102ac:	2400a780 	.word	0x2400a780

080102b0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80102b0:	b5b0      	push	{r4, r5, r7, lr}
 80102b2:	b090      	sub	sp, #64	; 0x40
 80102b4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80102b6:	2300      	movs	r3, #0
 80102b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80102bc:	4b94      	ldr	r3, [pc, #592]	; (8010510 <tcp_slowtmr+0x260>)
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	3301      	adds	r3, #1
 80102c2:	4a93      	ldr	r2, [pc, #588]	; (8010510 <tcp_slowtmr+0x260>)
 80102c4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80102c6:	4b93      	ldr	r3, [pc, #588]	; (8010514 <tcp_slowtmr+0x264>)
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	3301      	adds	r3, #1
 80102cc:	b2da      	uxtb	r2, r3
 80102ce:	4b91      	ldr	r3, [pc, #580]	; (8010514 <tcp_slowtmr+0x264>)
 80102d0:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80102d2:	2300      	movs	r3, #0
 80102d4:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80102d6:	4b90      	ldr	r3, [pc, #576]	; (8010518 <tcp_slowtmr+0x268>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80102dc:	e287      	b.n	80107ee <tcp_slowtmr+0x53e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80102de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102e0:	7d1b      	ldrb	r3, [r3, #20]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d106      	bne.n	80102f4 <tcp_slowtmr+0x44>
 80102e6:	4b8d      	ldr	r3, [pc, #564]	; (801051c <tcp_slowtmr+0x26c>)
 80102e8:	f240 42be 	movw	r2, #1214	; 0x4be
 80102ec:	498c      	ldr	r1, [pc, #560]	; (8010520 <tcp_slowtmr+0x270>)
 80102ee:	488d      	ldr	r0, [pc, #564]	; (8010524 <tcp_slowtmr+0x274>)
 80102f0:	f005 fec4 	bl	801607c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80102f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102f6:	7d1b      	ldrb	r3, [r3, #20]
 80102f8:	2b01      	cmp	r3, #1
 80102fa:	d106      	bne.n	801030a <tcp_slowtmr+0x5a>
 80102fc:	4b87      	ldr	r3, [pc, #540]	; (801051c <tcp_slowtmr+0x26c>)
 80102fe:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010302:	4989      	ldr	r1, [pc, #548]	; (8010528 <tcp_slowtmr+0x278>)
 8010304:	4887      	ldr	r0, [pc, #540]	; (8010524 <tcp_slowtmr+0x274>)
 8010306:	f005 feb9 	bl	801607c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801030a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030c:	7d1b      	ldrb	r3, [r3, #20]
 801030e:	2b0a      	cmp	r3, #10
 8010310:	d106      	bne.n	8010320 <tcp_slowtmr+0x70>
 8010312:	4b82      	ldr	r3, [pc, #520]	; (801051c <tcp_slowtmr+0x26c>)
 8010314:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010318:	4984      	ldr	r1, [pc, #528]	; (801052c <tcp_slowtmr+0x27c>)
 801031a:	4882      	ldr	r0, [pc, #520]	; (8010524 <tcp_slowtmr+0x274>)
 801031c:	f005 feae 	bl	801607c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010322:	7f9a      	ldrb	r2, [r3, #30]
 8010324:	4b7b      	ldr	r3, [pc, #492]	; (8010514 <tcp_slowtmr+0x264>)
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	429a      	cmp	r2, r3
 801032a:	d105      	bne.n	8010338 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801032c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8010336:	e25a      	b.n	80107ee <tcp_slowtmr+0x53e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8010338:	4b76      	ldr	r3, [pc, #472]	; (8010514 <tcp_slowtmr+0x264>)
 801033a:	781a      	ldrb	r2, [r3, #0]
 801033c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801033e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8010340:	2300      	movs	r3, #0
 8010342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8010346:	2300      	movs	r3, #0
 8010348:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801034c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801034e:	7d1b      	ldrb	r3, [r3, #20]
 8010350:	2b02      	cmp	r3, #2
 8010352:	d10a      	bne.n	801036a <tcp_slowtmr+0xba>
 8010354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010356:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801035a:	2b05      	cmp	r3, #5
 801035c:	d905      	bls.n	801036a <tcp_slowtmr+0xba>
      ++pcb_remove;
 801035e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010362:	3301      	adds	r3, #1
 8010364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010368:	e11e      	b.n	80105a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801036a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801036c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010370:	2b0b      	cmp	r3, #11
 8010372:	d905      	bls.n	8010380 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8010374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010378:	3301      	adds	r3, #1
 801037a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801037e:	e113      	b.n	80105a8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8010380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010382:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010386:	2b00      	cmp	r3, #0
 8010388:	d075      	beq.n	8010476 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801038a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801038e:	2b00      	cmp	r3, #0
 8010390:	d006      	beq.n	80103a0 <tcp_slowtmr+0xf0>
 8010392:	4b62      	ldr	r3, [pc, #392]	; (801051c <tcp_slowtmr+0x26c>)
 8010394:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010398:	4965      	ldr	r1, [pc, #404]	; (8010530 <tcp_slowtmr+0x280>)
 801039a:	4862      	ldr	r0, [pc, #392]	; (8010524 <tcp_slowtmr+0x274>)
 801039c:	f005 fe6e 	bl	801607c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80103a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d106      	bne.n	80103b6 <tcp_slowtmr+0x106>
 80103a8:	4b5c      	ldr	r3, [pc, #368]	; (801051c <tcp_slowtmr+0x26c>)
 80103aa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80103ae:	4961      	ldr	r1, [pc, #388]	; (8010534 <tcp_slowtmr+0x284>)
 80103b0:	485c      	ldr	r0, [pc, #368]	; (8010524 <tcp_slowtmr+0x274>)
 80103b2:	f005 fe63 	bl	801607c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80103b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80103bc:	2b0b      	cmp	r3, #11
 80103be:	d905      	bls.n	80103cc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80103c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103c4:	3301      	adds	r3, #1
 80103c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80103ca:	e0ed      	b.n	80105a8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80103cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103ce:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80103d2:	3b01      	subs	r3, #1
 80103d4:	4a58      	ldr	r2, [pc, #352]	; (8010538 <tcp_slowtmr+0x288>)
 80103d6:	5cd3      	ldrb	r3, [r2, r3]
 80103d8:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80103da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103dc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80103e0:	7c7a      	ldrb	r2, [r7, #17]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d907      	bls.n	80103f6 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80103e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103e8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80103ec:	3301      	adds	r3, #1
 80103ee:	b2da      	uxtb	r2, r3
 80103f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80103f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80103fc:	7c7a      	ldrb	r2, [r7, #17]
 80103fe:	429a      	cmp	r2, r3
 8010400:	f200 80d2 	bhi.w	80105a8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010404:	2301      	movs	r3, #1
 8010406:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801040e:	2b00      	cmp	r3, #0
 8010410:	d108      	bne.n	8010424 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010412:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010414:	f004 fd2a 	bl	8014e6c <tcp_zero_window_probe>
 8010418:	4603      	mov	r3, r0
 801041a:	2b00      	cmp	r3, #0
 801041c:	d014      	beq.n	8010448 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801041e:	2300      	movs	r3, #0
 8010420:	623b      	str	r3, [r7, #32]
 8010422:	e011      	b.n	8010448 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010426:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801042a:	4619      	mov	r1, r3
 801042c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801042e:	f003 fbef 	bl	8013c10 <tcp_split_unsent_seg>
 8010432:	4603      	mov	r3, r0
 8010434:	2b00      	cmp	r3, #0
 8010436:	d107      	bne.n	8010448 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010438:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801043a:	f003 fe6f 	bl	801411c <tcp_output>
 801043e:	4603      	mov	r3, r0
 8010440:	2b00      	cmp	r3, #0
 8010442:	d101      	bne.n	8010448 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010444:	2300      	movs	r3, #0
 8010446:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010448:	6a3b      	ldr	r3, [r7, #32]
 801044a:	2b00      	cmp	r3, #0
 801044c:	f000 80ac 	beq.w	80105a8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010452:	2200      	movs	r2, #0
 8010454:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801045e:	2b06      	cmp	r3, #6
 8010460:	f200 80a2 	bhi.w	80105a8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010466:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801046a:	3301      	adds	r3, #1
 801046c:	b2da      	uxtb	r2, r3
 801046e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010470:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8010474:	e098      	b.n	80105a8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010478:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801047c:	2b00      	cmp	r3, #0
 801047e:	db0f      	blt.n	80104a0 <tcp_slowtmr+0x1f0>
 8010480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010482:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010486:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801048a:	4293      	cmp	r3, r2
 801048c:	d008      	beq.n	80104a0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010490:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010494:	b29b      	uxth	r3, r3
 8010496:	3301      	adds	r3, #1
 8010498:	b29b      	uxth	r3, r3
 801049a:	b21a      	sxth	r2, r3
 801049c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80104a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80104a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80104ac:	429a      	cmp	r2, r3
 80104ae:	db7b      	blt.n	80105a8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80104b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80104b2:	f004 f925 	bl	8014700 <tcp_rexmit_rto_prepare>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d007      	beq.n	80104cc <tcp_slowtmr+0x21c>
 80104bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d171      	bne.n	80105a8 <tcp_slowtmr+0x2f8>
 80104c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d06d      	beq.n	80105a8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80104cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ce:	7d1b      	ldrb	r3, [r3, #20]
 80104d0:	2b02      	cmp	r3, #2
 80104d2:	d03a      	beq.n	801054a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80104d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80104da:	2b0c      	cmp	r3, #12
 80104dc:	bf28      	it	cs
 80104de:	230c      	movcs	r3, #12
 80104e0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80104e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80104e8:	10db      	asrs	r3, r3, #3
 80104ea:	b21b      	sxth	r3, r3
 80104ec:	461a      	mov	r2, r3
 80104ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80104f4:	4413      	add	r3, r2
 80104f6:	7efa      	ldrb	r2, [r7, #27]
 80104f8:	4910      	ldr	r1, [pc, #64]	; (801053c <tcp_slowtmr+0x28c>)
 80104fa:	5c8a      	ldrb	r2, [r1, r2]
 80104fc:	4093      	lsls	r3, r2
 80104fe:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010506:	4293      	cmp	r3, r2
 8010508:	dc1a      	bgt.n	8010540 <tcp_slowtmr+0x290>
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	b21a      	sxth	r2, r3
 801050e:	e019      	b.n	8010544 <tcp_slowtmr+0x294>
 8010510:	2400a788 	.word	0x2400a788
 8010514:	240067b6 	.word	0x240067b6
 8010518:	2400a784 	.word	0x2400a784
 801051c:	08019fdc 	.word	0x08019fdc
 8010520:	0801a364 	.word	0x0801a364
 8010524:	0801a064 	.word	0x0801a064
 8010528:	0801a390 	.word	0x0801a390
 801052c:	0801a3bc 	.word	0x0801a3bc
 8010530:	0801a3ec 	.word	0x0801a3ec
 8010534:	0801a420 	.word	0x0801a420
 8010538:	08019fc4 	.word	0x08019fc4
 801053c:	08019fb4 	.word	0x08019fb4
 8010540:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010546:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801054a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801054c:	2200      	movs	r2, #0
 801054e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010552:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010558:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801055c:	4293      	cmp	r3, r2
 801055e:	bf28      	it	cs
 8010560:	4613      	movcs	r3, r2
 8010562:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010564:	8a7b      	ldrh	r3, [r7, #18]
 8010566:	085b      	lsrs	r3, r3, #1
 8010568:	b29a      	uxth	r2, r3
 801056a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010572:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010578:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	b29b      	uxth	r3, r3
 801057e:	429a      	cmp	r2, r3
 8010580:	d206      	bcs.n	8010590 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010586:	005b      	lsls	r3, r3, #1
 8010588:	b29a      	uxth	r2, r3
 801058a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010592:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010596:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801059a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059c:	2200      	movs	r2, #0
 801059e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80105a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80105a4:	f004 f91c 	bl	80147e0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80105a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105aa:	7d1b      	ldrb	r3, [r3, #20]
 80105ac:	2b06      	cmp	r3, #6
 80105ae:	d111      	bne.n	80105d4 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80105b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105b2:	8b5b      	ldrh	r3, [r3, #26]
 80105b4:	f003 0310 	and.w	r3, r3, #16
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d00b      	beq.n	80105d4 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80105bc:	4b91      	ldr	r3, [pc, #580]	; (8010804 <tcp_slowtmr+0x554>)
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105c2:	6a1b      	ldr	r3, [r3, #32]
 80105c4:	1ad3      	subs	r3, r2, r3
 80105c6:	2b28      	cmp	r3, #40	; 0x28
 80105c8:	d904      	bls.n	80105d4 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80105ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105ce:	3301      	adds	r3, #1
 80105d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80105d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105d6:	7a5b      	ldrb	r3, [r3, #9]
 80105d8:	f003 0308 	and.w	r3, r3, #8
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d04a      	beq.n	8010676 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80105e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80105e4:	2b04      	cmp	r3, #4
 80105e6:	d003      	beq.n	80105f0 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80105e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105ea:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80105ec:	2b07      	cmp	r3, #7
 80105ee:	d142      	bne.n	8010676 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80105f0:	4b84      	ldr	r3, [pc, #528]	; (8010804 <tcp_slowtmr+0x554>)
 80105f2:	681a      	ldr	r2, [r3, #0]
 80105f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f6:	6a1b      	ldr	r3, [r3, #32]
 80105f8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80105fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105fc:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8010600:	4b81      	ldr	r3, [pc, #516]	; (8010808 <tcp_slowtmr+0x558>)
 8010602:	440b      	add	r3, r1
 8010604:	4981      	ldr	r1, [pc, #516]	; (801080c <tcp_slowtmr+0x55c>)
 8010606:	fba1 1303 	umull	r1, r3, r1, r3
 801060a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801060c:	429a      	cmp	r2, r3
 801060e:	d90a      	bls.n	8010626 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010614:	3301      	adds	r3, #1
 8010616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801061a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801061e:	3301      	adds	r3, #1
 8010620:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010624:	e027      	b.n	8010676 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010626:	4b77      	ldr	r3, [pc, #476]	; (8010804 <tcp_slowtmr+0x554>)
 8010628:	681a      	ldr	r2, [r3, #0]
 801062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062c:	6a1b      	ldr	r3, [r3, #32]
 801062e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010632:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8010636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010638:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 801063c:	4618      	mov	r0, r3
 801063e:	4b74      	ldr	r3, [pc, #464]	; (8010810 <tcp_slowtmr+0x560>)
 8010640:	fb03 f300 	mul.w	r3, r3, r0
 8010644:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010646:	4971      	ldr	r1, [pc, #452]	; (801080c <tcp_slowtmr+0x55c>)
 8010648:	fba1 1303 	umull	r1, r3, r1, r3
 801064c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801064e:	429a      	cmp	r2, r3
 8010650:	d911      	bls.n	8010676 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8010652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010654:	f004 fbca 	bl	8014dec <tcp_keepalive>
 8010658:	4603      	mov	r3, r0
 801065a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801065e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010662:	2b00      	cmp	r3, #0
 8010664:	d107      	bne.n	8010676 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8010666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010668:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 801066c:	3301      	adds	r3, #1
 801066e:	b2da      	uxtb	r2, r3
 8010670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010672:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      tcp_free_ooseq(pcb);
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8010676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010678:	7d1b      	ldrb	r3, [r3, #20]
 801067a:	2b03      	cmp	r3, #3
 801067c:	d10b      	bne.n	8010696 <tcp_slowtmr+0x3e6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801067e:	4b61      	ldr	r3, [pc, #388]	; (8010804 <tcp_slowtmr+0x554>)
 8010680:	681a      	ldr	r2, [r3, #0]
 8010682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010684:	6a1b      	ldr	r3, [r3, #32]
 8010686:	1ad3      	subs	r3, r2, r3
 8010688:	2b28      	cmp	r3, #40	; 0x28
 801068a:	d904      	bls.n	8010696 <tcp_slowtmr+0x3e6>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801068c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010690:	3301      	adds	r3, #1
 8010692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8010696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010698:	7d1b      	ldrb	r3, [r3, #20]
 801069a:	2b09      	cmp	r3, #9
 801069c:	d10b      	bne.n	80106b6 <tcp_slowtmr+0x406>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801069e:	4b59      	ldr	r3, [pc, #356]	; (8010804 <tcp_slowtmr+0x554>)
 80106a0:	681a      	ldr	r2, [r3, #0]
 80106a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106a4:	6a1b      	ldr	r3, [r3, #32]
 80106a6:	1ad3      	subs	r3, r2, r3
 80106a8:	2bf0      	cmp	r3, #240	; 0xf0
 80106aa:	d904      	bls.n	80106b6 <tcp_slowtmr+0x406>
        ++pcb_remove;
 80106ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106b0:	3301      	adds	r3, #1
 80106b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80106b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d060      	beq.n	8010780 <tcp_slowtmr+0x4d0>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80106be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80106c4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80106c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106c8:	f000 fca0 	bl	801100c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80106cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d010      	beq.n	80106f4 <tcp_slowtmr+0x444>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80106d2:	4b50      	ldr	r3, [pc, #320]	; (8010814 <tcp_slowtmr+0x564>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106d8:	429a      	cmp	r2, r3
 80106da:	d106      	bne.n	80106ea <tcp_slowtmr+0x43a>
 80106dc:	4b4e      	ldr	r3, [pc, #312]	; (8010818 <tcp_slowtmr+0x568>)
 80106de:	f240 526d 	movw	r2, #1389	; 0x56d
 80106e2:	494e      	ldr	r1, [pc, #312]	; (801081c <tcp_slowtmr+0x56c>)
 80106e4:	484e      	ldr	r0, [pc, #312]	; (8010820 <tcp_slowtmr+0x570>)
 80106e6:	f005 fcc9 	bl	801607c <iprintf>
        prev->next = pcb->next;
 80106ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ec:	68da      	ldr	r2, [r3, #12]
 80106ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f0:	60da      	str	r2, [r3, #12]
 80106f2:	e00f      	b.n	8010714 <tcp_slowtmr+0x464>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80106f4:	4b47      	ldr	r3, [pc, #284]	; (8010814 <tcp_slowtmr+0x564>)
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d006      	beq.n	801070c <tcp_slowtmr+0x45c>
 80106fe:	4b46      	ldr	r3, [pc, #280]	; (8010818 <tcp_slowtmr+0x568>)
 8010700:	f240 5271 	movw	r2, #1393	; 0x571
 8010704:	4947      	ldr	r1, [pc, #284]	; (8010824 <tcp_slowtmr+0x574>)
 8010706:	4846      	ldr	r0, [pc, #280]	; (8010820 <tcp_slowtmr+0x570>)
 8010708:	f005 fcb8 	bl	801607c <iprintf>
        tcp_active_pcbs = pcb->next;
 801070c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070e:	68db      	ldr	r3, [r3, #12]
 8010710:	4a40      	ldr	r2, [pc, #256]	; (8010814 <tcp_slowtmr+0x564>)
 8010712:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010714:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010718:	2b00      	cmp	r3, #0
 801071a:	d013      	beq.n	8010744 <tcp_slowtmr+0x494>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801071c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801071e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010722:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010724:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8010726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010728:	3304      	adds	r3, #4
 801072a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801072c:	8ad2      	ldrh	r2, [r2, #22]
 801072e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010730:	8b09      	ldrh	r1, [r1, #24]
 8010732:	9102      	str	r1, [sp, #8]
 8010734:	9201      	str	r2, [sp, #4]
 8010736:	9300      	str	r3, [sp, #0]
 8010738:	462b      	mov	r3, r5
 801073a:	4622      	mov	r2, r4
 801073c:	4601      	mov	r1, r0
 801073e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010740:	f004 faa0 	bl	8014c84 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010746:	691b      	ldr	r3, [r3, #16]
 8010748:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801074a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801074c:	7d1b      	ldrb	r3, [r3, #20]
 801074e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010752:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010756:	68db      	ldr	r3, [r3, #12]
 8010758:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801075a:	6838      	ldr	r0, [r7, #0]
 801075c:	f7fe fef6 	bl	800f54c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010760:	4b31      	ldr	r3, [pc, #196]	; (8010828 <tcp_slowtmr+0x578>)
 8010762:	2200      	movs	r2, #0
 8010764:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010766:	68fb      	ldr	r3, [r7, #12]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d004      	beq.n	8010776 <tcp_slowtmr+0x4c6>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	f06f 010c 	mvn.w	r1, #12
 8010772:	68b8      	ldr	r0, [r7, #8]
 8010774:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010776:	4b2c      	ldr	r3, [pc, #176]	; (8010828 <tcp_slowtmr+0x578>)
 8010778:	781b      	ldrb	r3, [r3, #0]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d037      	beq.n	80107ee <tcp_slowtmr+0x53e>
        goto tcp_slowtmr_start;
 801077e:	e5a8      	b.n	80102d2 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010782:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010786:	68db      	ldr	r3, [r3, #12]
 8010788:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801078a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801078c:	7f1b      	ldrb	r3, [r3, #28]
 801078e:	3301      	adds	r3, #1
 8010790:	b2da      	uxtb	r2, r3
 8010792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010794:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010798:	7f1a      	ldrb	r2, [r3, #28]
 801079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079c:	7f5b      	ldrb	r3, [r3, #29]
 801079e:	429a      	cmp	r2, r3
 80107a0:	d325      	bcc.n	80107ee <tcp_slowtmr+0x53e>
        prev->polltmr = 0;
 80107a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a4:	2200      	movs	r2, #0
 80107a6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80107a8:	4b1f      	ldr	r3, [pc, #124]	; (8010828 <tcp_slowtmr+0x578>)
 80107aa:	2200      	movs	r2, #0
 80107ac:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80107ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d00b      	beq.n	80107d0 <tcp_slowtmr+0x520>
 80107b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107c0:	6912      	ldr	r2, [r2, #16]
 80107c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80107c4:	4610      	mov	r0, r2
 80107c6:	4798      	blx	r3
 80107c8:	4603      	mov	r3, r0
 80107ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80107ce:	e002      	b.n	80107d6 <tcp_slowtmr+0x526>
 80107d0:	2300      	movs	r3, #0
 80107d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80107d6:	4b14      	ldr	r3, [pc, #80]	; (8010828 <tcp_slowtmr+0x578>)
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d000      	beq.n	80107e0 <tcp_slowtmr+0x530>
          goto tcp_slowtmr_start;
 80107de:	e578      	b.n	80102d2 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80107e0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d102      	bne.n	80107ee <tcp_slowtmr+0x53e>
          tcp_output(prev);
 80107e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107ea:	f003 fc97 	bl	801411c <tcp_output>
  while (pcb != NULL) {
 80107ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	f47f ad74 	bne.w	80102de <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80107f6:	2300      	movs	r3, #0
 80107f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80107fa:	4b0c      	ldr	r3, [pc, #48]	; (801082c <tcp_slowtmr+0x57c>)
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010800:	e069      	b.n	80108d6 <tcp_slowtmr+0x626>
 8010802:	bf00      	nop
 8010804:	2400a788 	.word	0x2400a788
 8010808:	000a4cb8 	.word	0x000a4cb8
 801080c:	10624dd3 	.word	0x10624dd3
 8010810:	000124f8 	.word	0x000124f8
 8010814:	2400a784 	.word	0x2400a784
 8010818:	08019fdc 	.word	0x08019fdc
 801081c:	0801a458 	.word	0x0801a458
 8010820:	0801a064 	.word	0x0801a064
 8010824:	0801a484 	.word	0x0801a484
 8010828:	2400a780 	.word	0x2400a780
 801082c:	2400a794 	.word	0x2400a794
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010832:	7d1b      	ldrb	r3, [r3, #20]
 8010834:	2b0a      	cmp	r3, #10
 8010836:	d006      	beq.n	8010846 <tcp_slowtmr+0x596>
 8010838:	4b2b      	ldr	r3, [pc, #172]	; (80108e8 <tcp_slowtmr+0x638>)
 801083a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801083e:	492b      	ldr	r1, [pc, #172]	; (80108ec <tcp_slowtmr+0x63c>)
 8010840:	482b      	ldr	r0, [pc, #172]	; (80108f0 <tcp_slowtmr+0x640>)
 8010842:	f005 fc1b 	bl	801607c <iprintf>
    pcb_remove = 0;
 8010846:	2300      	movs	r3, #0
 8010848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801084c:	4b29      	ldr	r3, [pc, #164]	; (80108f4 <tcp_slowtmr+0x644>)
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010852:	6a1b      	ldr	r3, [r3, #32]
 8010854:	1ad3      	subs	r3, r2, r3
 8010856:	2bf0      	cmp	r3, #240	; 0xf0
 8010858:	d904      	bls.n	8010864 <tcp_slowtmr+0x5b4>
      ++pcb_remove;
 801085a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801085e:	3301      	adds	r3, #1
 8010860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010864:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010868:	2b00      	cmp	r3, #0
 801086a:	d02f      	beq.n	80108cc <tcp_slowtmr+0x61c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801086c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801086e:	f000 fbcd 	bl	801100c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010874:	2b00      	cmp	r3, #0
 8010876:	d010      	beq.n	801089a <tcp_slowtmr+0x5ea>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010878:	4b1f      	ldr	r3, [pc, #124]	; (80108f8 <tcp_slowtmr+0x648>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801087e:	429a      	cmp	r2, r3
 8010880:	d106      	bne.n	8010890 <tcp_slowtmr+0x5e0>
 8010882:	4b19      	ldr	r3, [pc, #100]	; (80108e8 <tcp_slowtmr+0x638>)
 8010884:	f240 52af 	movw	r2, #1455	; 0x5af
 8010888:	491c      	ldr	r1, [pc, #112]	; (80108fc <tcp_slowtmr+0x64c>)
 801088a:	4819      	ldr	r0, [pc, #100]	; (80108f0 <tcp_slowtmr+0x640>)
 801088c:	f005 fbf6 	bl	801607c <iprintf>
        prev->next = pcb->next;
 8010890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010892:	68da      	ldr	r2, [r3, #12]
 8010894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010896:	60da      	str	r2, [r3, #12]
 8010898:	e00f      	b.n	80108ba <tcp_slowtmr+0x60a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801089a:	4b17      	ldr	r3, [pc, #92]	; (80108f8 <tcp_slowtmr+0x648>)
 801089c:	681b      	ldr	r3, [r3, #0]
 801089e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d006      	beq.n	80108b2 <tcp_slowtmr+0x602>
 80108a4:	4b10      	ldr	r3, [pc, #64]	; (80108e8 <tcp_slowtmr+0x638>)
 80108a6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80108aa:	4915      	ldr	r1, [pc, #84]	; (8010900 <tcp_slowtmr+0x650>)
 80108ac:	4810      	ldr	r0, [pc, #64]	; (80108f0 <tcp_slowtmr+0x640>)
 80108ae:	f005 fbe5 	bl	801607c <iprintf>
        tcp_tw_pcbs = pcb->next;
 80108b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108b4:	68db      	ldr	r3, [r3, #12]
 80108b6:	4a10      	ldr	r2, [pc, #64]	; (80108f8 <tcp_slowtmr+0x648>)
 80108b8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80108ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108bc:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80108be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108c0:	68db      	ldr	r3, [r3, #12]
 80108c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80108c4:	69f8      	ldr	r0, [r7, #28]
 80108c6:	f7fe fe41 	bl	800f54c <tcp_free>
 80108ca:	e004      	b.n	80108d6 <tcp_slowtmr+0x626>
    } else {
      prev = pcb;
 80108cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ce:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80108d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d2:	68db      	ldr	r3, [r3, #12]
 80108d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80108d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d1a9      	bne.n	8010830 <tcp_slowtmr+0x580>
    }
  }
}
 80108dc:	bf00      	nop
 80108de:	bf00      	nop
 80108e0:	3730      	adds	r7, #48	; 0x30
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bdb0      	pop	{r4, r5, r7, pc}
 80108e6:	bf00      	nop
 80108e8:	08019fdc 	.word	0x08019fdc
 80108ec:	0801a4b0 	.word	0x0801a4b0
 80108f0:	0801a064 	.word	0x0801a064
 80108f4:	2400a788 	.word	0x2400a788
 80108f8:	2400a794 	.word	0x2400a794
 80108fc:	0801a4e0 	.word	0x0801a4e0
 8010900:	0801a508 	.word	0x0801a508

08010904 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010904:	b580      	push	{r7, lr}
 8010906:	b082      	sub	sp, #8
 8010908:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801090a:	4b2d      	ldr	r3, [pc, #180]	; (80109c0 <tcp_fasttmr+0xbc>)
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	3301      	adds	r3, #1
 8010910:	b2da      	uxtb	r2, r3
 8010912:	4b2b      	ldr	r3, [pc, #172]	; (80109c0 <tcp_fasttmr+0xbc>)
 8010914:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010916:	4b2b      	ldr	r3, [pc, #172]	; (80109c4 <tcp_fasttmr+0xc0>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801091c:	e048      	b.n	80109b0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	7f9a      	ldrb	r2, [r3, #30]
 8010922:	4b27      	ldr	r3, [pc, #156]	; (80109c0 <tcp_fasttmr+0xbc>)
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	429a      	cmp	r2, r3
 8010928:	d03f      	beq.n	80109aa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801092a:	4b25      	ldr	r3, [pc, #148]	; (80109c0 <tcp_fasttmr+0xbc>)
 801092c:	781a      	ldrb	r2, [r3, #0]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	8b5b      	ldrh	r3, [r3, #26]
 8010936:	f003 0301 	and.w	r3, r3, #1
 801093a:	2b00      	cmp	r3, #0
 801093c:	d010      	beq.n	8010960 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	8b5b      	ldrh	r3, [r3, #26]
 8010942:	f043 0302 	orr.w	r3, r3, #2
 8010946:	b29a      	uxth	r2, r3
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f003 fbe5 	bl	801411c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	8b5b      	ldrh	r3, [r3, #26]
 8010956:	f023 0303 	bic.w	r3, r3, #3
 801095a:	b29a      	uxth	r2, r3
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	8b5b      	ldrh	r3, [r3, #26]
 8010964:	f003 0308 	and.w	r3, r3, #8
 8010968:	2b00      	cmp	r3, #0
 801096a:	d009      	beq.n	8010980 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	8b5b      	ldrh	r3, [r3, #26]
 8010970:	f023 0308 	bic.w	r3, r3, #8
 8010974:	b29a      	uxth	r2, r3
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801097a:	6878      	ldr	r0, [r7, #4]
 801097c:	f7fe ff7a 	bl	800f874 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	68db      	ldr	r3, [r3, #12]
 8010984:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801098a:	2b00      	cmp	r3, #0
 801098c:	d00a      	beq.n	80109a4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801098e:	4b0e      	ldr	r3, [pc, #56]	; (80109c8 <tcp_fasttmr+0xc4>)
 8010990:	2200      	movs	r2, #0
 8010992:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f000 f819 	bl	80109cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801099a:	4b0b      	ldr	r3, [pc, #44]	; (80109c8 <tcp_fasttmr+0xc4>)
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d000      	beq.n	80109a4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80109a2:	e7b8      	b.n	8010916 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	607b      	str	r3, [r7, #4]
 80109a8:	e002      	b.n	80109b0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	68db      	ldr	r3, [r3, #12]
 80109ae:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d1b3      	bne.n	801091e <tcp_fasttmr+0x1a>
    }
  }
}
 80109b6:	bf00      	nop
 80109b8:	bf00      	nop
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	240067b6 	.word	0x240067b6
 80109c4:	2400a784 	.word	0x2400a784
 80109c8:	2400a780 	.word	0x2400a780

080109cc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80109cc:	b590      	push	{r4, r7, lr}
 80109ce:	b085      	sub	sp, #20
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d109      	bne.n	80109ee <tcp_process_refused_data+0x22>
 80109da:	4b38      	ldr	r3, [pc, #224]	; (8010abc <tcp_process_refused_data+0xf0>)
 80109dc:	f240 6209 	movw	r2, #1545	; 0x609
 80109e0:	4937      	ldr	r1, [pc, #220]	; (8010ac0 <tcp_process_refused_data+0xf4>)
 80109e2:	4838      	ldr	r0, [pc, #224]	; (8010ac4 <tcp_process_refused_data+0xf8>)
 80109e4:	f005 fb4a 	bl	801607c <iprintf>
 80109e8:	f06f 030f 	mvn.w	r3, #15
 80109ec:	e061      	b.n	8010ab2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109f2:	7b5b      	ldrb	r3, [r3, #13]
 80109f4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80109fa:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2200      	movs	r2, #0
 8010a00:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d00b      	beq.n	8010a24 <tcp_process_refused_data+0x58>
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	6918      	ldr	r0, [r3, #16]
 8010a16:	2300      	movs	r3, #0
 8010a18:	68ba      	ldr	r2, [r7, #8]
 8010a1a:	6879      	ldr	r1, [r7, #4]
 8010a1c:	47a0      	blx	r4
 8010a1e:	4603      	mov	r3, r0
 8010a20:	73fb      	strb	r3, [r7, #15]
 8010a22:	e007      	b.n	8010a34 <tcp_process_refused_data+0x68>
 8010a24:	2300      	movs	r3, #0
 8010a26:	68ba      	ldr	r2, [r7, #8]
 8010a28:	6879      	ldr	r1, [r7, #4]
 8010a2a:	2000      	movs	r0, #0
 8010a2c:	f000 f87a 	bl	8010b24 <tcp_recv_null>
 8010a30:	4603      	mov	r3, r0
 8010a32:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8010a34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d12b      	bne.n	8010a94 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8010a3c:	7bbb      	ldrb	r3, [r7, #14]
 8010a3e:	f003 0320 	and.w	r3, r3, #32
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d034      	beq.n	8010ab0 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a4a:	f640 3268 	movw	r2, #2920	; 0xb68
 8010a4e:	4293      	cmp	r3, r2
 8010a50:	d005      	beq.n	8010a5e <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010a56:	3301      	adds	r3, #1
 8010a58:	b29a      	uxth	r2, r3
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d00b      	beq.n	8010a80 <tcp_process_refused_data+0xb4>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6918      	ldr	r0, [r3, #16]
 8010a72:	2300      	movs	r3, #0
 8010a74:	2200      	movs	r2, #0
 8010a76:	6879      	ldr	r1, [r7, #4]
 8010a78:	47a0      	blx	r4
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	73fb      	strb	r3, [r7, #15]
 8010a7e:	e001      	b.n	8010a84 <tcp_process_refused_data+0xb8>
 8010a80:	2300      	movs	r3, #0
 8010a82:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8010a84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a88:	f113 0f0d 	cmn.w	r3, #13
 8010a8c:	d110      	bne.n	8010ab0 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8010a8e:	f06f 030c 	mvn.w	r3, #12
 8010a92:	e00e      	b.n	8010ab2 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8010a94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a98:	f113 0f0d 	cmn.w	r3, #13
 8010a9c:	d102      	bne.n	8010aa4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8010a9e:	f06f 030c 	mvn.w	r3, #12
 8010aa2:	e006      	b.n	8010ab2 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	68ba      	ldr	r2, [r7, #8]
 8010aa8:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8010aaa:	f06f 0304 	mvn.w	r3, #4
 8010aae:	e000      	b.n	8010ab2 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8010ab0:	2300      	movs	r3, #0
}
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	3714      	adds	r7, #20
 8010ab6:	46bd      	mov	sp, r7
 8010ab8:	bd90      	pop	{r4, r7, pc}
 8010aba:	bf00      	nop
 8010abc:	08019fdc 	.word	0x08019fdc
 8010ac0:	0801a530 	.word	0x0801a530
 8010ac4:	0801a064 	.word	0x0801a064

08010ac8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8010ad0:	e007      	b.n	8010ae2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f000 f80a 	bl	8010af2 <tcp_seg_free>
    seg = next;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d1f4      	bne.n	8010ad2 <tcp_segs_free+0xa>
  }
}
 8010ae8:	bf00      	nop
 8010aea:	bf00      	nop
 8010aec:	3710      	adds	r7, #16
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b082      	sub	sp, #8
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d00c      	beq.n	8010b1a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d004      	beq.n	8010b12 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7fe fa71 	bl	800eff4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8010b12:	6879      	ldr	r1, [r7, #4]
 8010b14:	2003      	movs	r0, #3
 8010b16:	f7fd fc25 	bl	800e364 <memp_free>
  }
}
 8010b1a:	bf00      	nop
 8010b1c:	3708      	adds	r7, #8
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
	...

08010b24 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b084      	sub	sp, #16
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
 8010b30:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d109      	bne.n	8010b4c <tcp_recv_null+0x28>
 8010b38:	4b12      	ldr	r3, [pc, #72]	; (8010b84 <tcp_recv_null+0x60>)
 8010b3a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010b3e:	4912      	ldr	r1, [pc, #72]	; (8010b88 <tcp_recv_null+0x64>)
 8010b40:	4812      	ldr	r0, [pc, #72]	; (8010b8c <tcp_recv_null+0x68>)
 8010b42:	f005 fa9b 	bl	801607c <iprintf>
 8010b46:	f06f 030f 	mvn.w	r3, #15
 8010b4a:	e016      	b.n	8010b7a <tcp_recv_null+0x56>

  if (p != NULL) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d009      	beq.n	8010b66 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	891b      	ldrh	r3, [r3, #8]
 8010b56:	4619      	mov	r1, r3
 8010b58:	68b8      	ldr	r0, [r7, #8]
 8010b5a:	f7ff f9f9 	bl	800ff50 <tcp_recved>
    pbuf_free(p);
 8010b5e:	6878      	ldr	r0, [r7, #4]
 8010b60:	f7fe fa48 	bl	800eff4 <pbuf_free>
 8010b64:	e008      	b.n	8010b78 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8010b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d104      	bne.n	8010b78 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8010b6e:	68b8      	ldr	r0, [r7, #8]
 8010b70:	f7fe feea 	bl	800f948 <tcp_close>
 8010b74:	4603      	mov	r3, r0
 8010b76:	e000      	b.n	8010b7a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8010b78:	2300      	movs	r3, #0
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3710      	adds	r7, #16
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}
 8010b82:	bf00      	nop
 8010b84:	08019fdc 	.word	0x08019fdc
 8010b88:	0801a574 	.word	0x0801a574
 8010b8c:	0801a064 	.word	0x0801a064

08010b90 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b086      	sub	sp, #24
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	4603      	mov	r3, r0
 8010b98:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8010b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	db01      	blt.n	8010ba6 <tcp_kill_prio+0x16>
 8010ba2:	79fb      	ldrb	r3, [r7, #7]
 8010ba4:	e000      	b.n	8010ba8 <tcp_kill_prio+0x18>
 8010ba6:	237f      	movs	r3, #127	; 0x7f
 8010ba8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8010baa:	7afb      	ldrb	r3, [r7, #11]
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d034      	beq.n	8010c1a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8010bb0:	7afb      	ldrb	r3, [r7, #11]
 8010bb2:	3b01      	subs	r3, #1
 8010bb4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8010bb6:	2300      	movs	r3, #0
 8010bb8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010bbe:	4b19      	ldr	r3, [pc, #100]	; (8010c24 <tcp_kill_prio+0x94>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	617b      	str	r3, [r7, #20]
 8010bc4:	e01f      	b.n	8010c06 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	7d5b      	ldrb	r3, [r3, #21]
 8010bca:	7afa      	ldrb	r2, [r7, #11]
 8010bcc:	429a      	cmp	r2, r3
 8010bce:	d80c      	bhi.n	8010bea <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010bd0:	697b      	ldr	r3, [r7, #20]
 8010bd2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8010bd4:	7afa      	ldrb	r2, [r7, #11]
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d112      	bne.n	8010c00 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8010bda:	4b13      	ldr	r3, [pc, #76]	; (8010c28 <tcp_kill_prio+0x98>)
 8010bdc:	681a      	ldr	r2, [r3, #0]
 8010bde:	697b      	ldr	r3, [r7, #20]
 8010be0:	6a1b      	ldr	r3, [r3, #32]
 8010be2:	1ad3      	subs	r3, r2, r3
 8010be4:	68fa      	ldr	r2, [r7, #12]
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d80a      	bhi.n	8010c00 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8010bea:	4b0f      	ldr	r3, [pc, #60]	; (8010c28 <tcp_kill_prio+0x98>)
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	6a1b      	ldr	r3, [r3, #32]
 8010bf2:	1ad3      	subs	r3, r2, r3
 8010bf4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8010bfa:	697b      	ldr	r3, [r7, #20]
 8010bfc:	7d5b      	ldrb	r3, [r3, #21]
 8010bfe:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c00:	697b      	ldr	r3, [r7, #20]
 8010c02:	68db      	ldr	r3, [r3, #12]
 8010c04:	617b      	str	r3, [r7, #20]
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d1dc      	bne.n	8010bc6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8010c0c:	693b      	ldr	r3, [r7, #16]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d004      	beq.n	8010c1c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010c12:	6938      	ldr	r0, [r7, #16]
 8010c14:	f7fe ffd4 	bl	800fbc0 <tcp_abort>
 8010c18:	e000      	b.n	8010c1c <tcp_kill_prio+0x8c>
    return;
 8010c1a:	bf00      	nop
  }
}
 8010c1c:	3718      	adds	r7, #24
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	bd80      	pop	{r7, pc}
 8010c22:	bf00      	nop
 8010c24:	2400a784 	.word	0x2400a784
 8010c28:	2400a788 	.word	0x2400a788

08010c2c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b086      	sub	sp, #24
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	4603      	mov	r3, r0
 8010c34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8010c36:	79fb      	ldrb	r3, [r7, #7]
 8010c38:	2b08      	cmp	r3, #8
 8010c3a:	d009      	beq.n	8010c50 <tcp_kill_state+0x24>
 8010c3c:	79fb      	ldrb	r3, [r7, #7]
 8010c3e:	2b09      	cmp	r3, #9
 8010c40:	d006      	beq.n	8010c50 <tcp_kill_state+0x24>
 8010c42:	4b1a      	ldr	r3, [pc, #104]	; (8010cac <tcp_kill_state+0x80>)
 8010c44:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8010c48:	4919      	ldr	r1, [pc, #100]	; (8010cb0 <tcp_kill_state+0x84>)
 8010c4a:	481a      	ldr	r0, [pc, #104]	; (8010cb4 <tcp_kill_state+0x88>)
 8010c4c:	f005 fa16 	bl	801607c <iprintf>

  inactivity = 0;
 8010c50:	2300      	movs	r3, #0
 8010c52:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8010c54:	2300      	movs	r3, #0
 8010c56:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c58:	4b17      	ldr	r3, [pc, #92]	; (8010cb8 <tcp_kill_state+0x8c>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	617b      	str	r3, [r7, #20]
 8010c5e:	e017      	b.n	8010c90 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	7d1b      	ldrb	r3, [r3, #20]
 8010c64:	79fa      	ldrb	r2, [r7, #7]
 8010c66:	429a      	cmp	r2, r3
 8010c68:	d10f      	bne.n	8010c8a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010c6a:	4b14      	ldr	r3, [pc, #80]	; (8010cbc <tcp_kill_state+0x90>)
 8010c6c:	681a      	ldr	r2, [r3, #0]
 8010c6e:	697b      	ldr	r3, [r7, #20]
 8010c70:	6a1b      	ldr	r3, [r3, #32]
 8010c72:	1ad3      	subs	r3, r2, r3
 8010c74:	68fa      	ldr	r2, [r7, #12]
 8010c76:	429a      	cmp	r2, r3
 8010c78:	d807      	bhi.n	8010c8a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8010c7a:	4b10      	ldr	r3, [pc, #64]	; (8010cbc <tcp_kill_state+0x90>)
 8010c7c:	681a      	ldr	r2, [r3, #0]
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	6a1b      	ldr	r3, [r3, #32]
 8010c82:	1ad3      	subs	r3, r2, r3
 8010c84:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8010c8a:	697b      	ldr	r3, [r7, #20]
 8010c8c:	68db      	ldr	r3, [r3, #12]
 8010c8e:	617b      	str	r3, [r7, #20]
 8010c90:	697b      	ldr	r3, [r7, #20]
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d1e4      	bne.n	8010c60 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8010c96:	693b      	ldr	r3, [r7, #16]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d003      	beq.n	8010ca4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8010c9c:	2100      	movs	r1, #0
 8010c9e:	6938      	ldr	r0, [r7, #16]
 8010ca0:	f7fe feda 	bl	800fa58 <tcp_abandon>
  }
}
 8010ca4:	bf00      	nop
 8010ca6:	3718      	adds	r7, #24
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	08019fdc 	.word	0x08019fdc
 8010cb0:	0801a590 	.word	0x0801a590
 8010cb4:	0801a064 	.word	0x0801a064
 8010cb8:	2400a784 	.word	0x2400a784
 8010cbc:	2400a788 	.word	0x2400a788

08010cc0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b084      	sub	sp, #16
 8010cc4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8010cca:	2300      	movs	r3, #0
 8010ccc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cce:	4b12      	ldr	r3, [pc, #72]	; (8010d18 <tcp_kill_timewait+0x58>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	60fb      	str	r3, [r7, #12]
 8010cd4:	e012      	b.n	8010cfc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8010cd6:	4b11      	ldr	r3, [pc, #68]	; (8010d1c <tcp_kill_timewait+0x5c>)
 8010cd8:	681a      	ldr	r2, [r3, #0]
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	6a1b      	ldr	r3, [r3, #32]
 8010cde:	1ad3      	subs	r3, r2, r3
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d807      	bhi.n	8010cf6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8010ce6:	4b0d      	ldr	r3, [pc, #52]	; (8010d1c <tcp_kill_timewait+0x5c>)
 8010ce8:	681a      	ldr	r2, [r3, #0]
 8010cea:	68fb      	ldr	r3, [r7, #12]
 8010cec:	6a1b      	ldr	r3, [r3, #32]
 8010cee:	1ad3      	subs	r3, r2, r3
 8010cf0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	68db      	ldr	r3, [r3, #12]
 8010cfa:	60fb      	str	r3, [r7, #12]
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d1e9      	bne.n	8010cd6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d002      	beq.n	8010d0e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8010d08:	68b8      	ldr	r0, [r7, #8]
 8010d0a:	f7fe ff59 	bl	800fbc0 <tcp_abort>
  }
}
 8010d0e:	bf00      	nop
 8010d10:	3710      	adds	r7, #16
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	2400a794 	.word	0x2400a794
 8010d1c:	2400a788 	.word	0x2400a788

08010d20 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8010d26:	4b10      	ldr	r3, [pc, #64]	; (8010d68 <tcp_handle_closepend+0x48>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010d2c:	e014      	b.n	8010d58 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	8b5b      	ldrh	r3, [r3, #26]
 8010d38:	f003 0308 	and.w	r3, r3, #8
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d009      	beq.n	8010d54 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8010d40:	687b      	ldr	r3, [r7, #4]
 8010d42:	8b5b      	ldrh	r3, [r3, #26]
 8010d44:	f023 0308 	bic.w	r3, r3, #8
 8010d48:	b29a      	uxth	r2, r3
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f7fe fd90 	bl	800f874 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d1e7      	bne.n	8010d2e <tcp_handle_closepend+0xe>
  }
}
 8010d5e:	bf00      	nop
 8010d60:	bf00      	nop
 8010d62:	3708      	adds	r7, #8
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	2400a784 	.word	0x2400a784

08010d6c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b084      	sub	sp, #16
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	4603      	mov	r3, r0
 8010d74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d76:	2001      	movs	r0, #1
 8010d78:	f7fd fa7e 	bl	800e278 <memp_malloc>
 8010d7c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d126      	bne.n	8010dd2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8010d84:	f7ff ffcc 	bl	8010d20 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8010d88:	f7ff ff9a 	bl	8010cc0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010d8c:	2001      	movs	r0, #1
 8010d8e:	f7fd fa73 	bl	800e278 <memp_malloc>
 8010d92:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8010d94:	68fb      	ldr	r3, [r7, #12]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d11b      	bne.n	8010dd2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8010d9a:	2009      	movs	r0, #9
 8010d9c:	f7ff ff46 	bl	8010c2c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010da0:	2001      	movs	r0, #1
 8010da2:	f7fd fa69 	bl	800e278 <memp_malloc>
 8010da6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8010da8:	68fb      	ldr	r3, [r7, #12]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d111      	bne.n	8010dd2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8010dae:	2008      	movs	r0, #8
 8010db0:	f7ff ff3c 	bl	8010c2c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010db4:	2001      	movs	r0, #1
 8010db6:	f7fd fa5f 	bl	800e278 <memp_malloc>
 8010dba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d107      	bne.n	8010dd2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8010dc2:	79fb      	ldrb	r3, [r7, #7]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f7ff fee3 	bl	8010b90 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8010dca:	2001      	movs	r0, #1
 8010dcc:	f7fd fa54 	bl	800e278 <memp_malloc>
 8010dd0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d03f      	beq.n	8010e58 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8010dd8:	2298      	movs	r2, #152	; 0x98
 8010dda:	2100      	movs	r1, #0
 8010ddc:	68f8      	ldr	r0, [r7, #12]
 8010dde:	f005 f945 	bl	801606c <memset>
    pcb->prio = prio;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	79fa      	ldrb	r2, [r7, #7]
 8010de6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010dee:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	f640 3268 	movw	r2, #2920	; 0xb68
 8010df8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	22ff      	movs	r2, #255	; 0xff
 8010e06:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010e0e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	2206      	movs	r2, #6
 8010e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	2206      	movs	r2, #6
 8010e1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e24:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2201      	movs	r2, #1
 8010e2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8010e2e:	4b0d      	ldr	r3, [pc, #52]	; (8010e64 <tcp_alloc+0xf8>)
 8010e30:	681a      	ldr	r2, [r3, #0]
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8010e36:	4b0c      	ldr	r3, [pc, #48]	; (8010e68 <tcp_alloc+0xfc>)
 8010e38:	781a      	ldrb	r2, [r3, #0]
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8010e44:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8010e48:	68fb      	ldr	r3, [r7, #12]
 8010e4a:	4a08      	ldr	r2, [pc, #32]	; (8010e6c <tcp_alloc+0x100>)
 8010e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	4a07      	ldr	r2, [pc, #28]	; (8010e70 <tcp_alloc+0x104>)
 8010e54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8010e58:	68fb      	ldr	r3, [r7, #12]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3710      	adds	r7, #16
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	2400a788 	.word	0x2400a788
 8010e68:	240067b6 	.word	0x240067b6
 8010e6c:	08010b25 	.word	0x08010b25
 8010e70:	006ddd00 	.word	0x006ddd00

08010e74 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b084      	sub	sp, #16
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8010e7e:	2040      	movs	r0, #64	; 0x40
 8010e80:	f7ff ff74 	bl	8010d6c <tcp_alloc>
 8010e84:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8010e86:	68fb      	ldr	r3, [r7, #12]
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3710      	adds	r7, #16
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8010e90:	b480      	push	{r7}
 8010e92:	b083      	sub	sp, #12
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d002      	beq.n	8010ea6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	683a      	ldr	r2, [r7, #0]
 8010ea4:	611a      	str	r2, [r3, #16]
  }
}
 8010ea6:	bf00      	nop
 8010ea8:	370c      	adds	r7, #12
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr
	...

08010eb4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8010eb4:	b580      	push	{r7, lr}
 8010eb6:	b082      	sub	sp, #8
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d00e      	beq.n	8010ee2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	7d1b      	ldrb	r3, [r3, #20]
 8010ec8:	2b01      	cmp	r3, #1
 8010eca:	d106      	bne.n	8010eda <tcp_recv+0x26>
 8010ecc:	4b07      	ldr	r3, [pc, #28]	; (8010eec <tcp_recv+0x38>)
 8010ece:	f240 72df 	movw	r2, #2015	; 0x7df
 8010ed2:	4907      	ldr	r1, [pc, #28]	; (8010ef0 <tcp_recv+0x3c>)
 8010ed4:	4807      	ldr	r0, [pc, #28]	; (8010ef4 <tcp_recv+0x40>)
 8010ed6:	f005 f8d1 	bl	801607c <iprintf>
    pcb->recv = recv;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	683a      	ldr	r2, [r7, #0]
 8010ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8010ee2:	bf00      	nop
 8010ee4:	3708      	adds	r7, #8
 8010ee6:	46bd      	mov	sp, r7
 8010ee8:	bd80      	pop	{r7, pc}
 8010eea:	bf00      	nop
 8010eec:	08019fdc 	.word	0x08019fdc
 8010ef0:	0801a5a0 	.word	0x0801a5a0
 8010ef4:	0801a064 	.word	0x0801a064

08010ef8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	6078      	str	r0, [r7, #4]
 8010f00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d00d      	beq.n	8010f24 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	7d1b      	ldrb	r3, [r3, #20]
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	d106      	bne.n	8010f1e <tcp_sent+0x26>
 8010f10:	4b06      	ldr	r3, [pc, #24]	; (8010f2c <tcp_sent+0x34>)
 8010f12:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8010f16:	4906      	ldr	r1, [pc, #24]	; (8010f30 <tcp_sent+0x38>)
 8010f18:	4806      	ldr	r0, [pc, #24]	; (8010f34 <tcp_sent+0x3c>)
 8010f1a:	f005 f8af 	bl	801607c <iprintf>
    pcb->sent = sent;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	683a      	ldr	r2, [r7, #0]
 8010f22:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8010f24:	bf00      	nop
 8010f26:	3708      	adds	r7, #8
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	08019fdc 	.word	0x08019fdc
 8010f30:	0801a5c8 	.word	0x0801a5c8
 8010f34:	0801a064 	.word	0x0801a064

08010f38 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d00e      	beq.n	8010f66 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	7d1b      	ldrb	r3, [r3, #20]
 8010f4c:	2b01      	cmp	r3, #1
 8010f4e:	d106      	bne.n	8010f5e <tcp_err+0x26>
 8010f50:	4b07      	ldr	r3, [pc, #28]	; (8010f70 <tcp_err+0x38>)
 8010f52:	f640 020d 	movw	r2, #2061	; 0x80d
 8010f56:	4907      	ldr	r1, [pc, #28]	; (8010f74 <tcp_err+0x3c>)
 8010f58:	4807      	ldr	r0, [pc, #28]	; (8010f78 <tcp_err+0x40>)
 8010f5a:	f005 f88f 	bl	801607c <iprintf>
    pcb->errf = err;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	683a      	ldr	r2, [r7, #0]
 8010f62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8010f66:	bf00      	nop
 8010f68:	3708      	adds	r7, #8
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	08019fdc 	.word	0x08019fdc
 8010f74:	0801a5f0 	.word	0x0801a5f0
 8010f78:	0801a064 	.word	0x0801a064

08010f7c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b085      	sub	sp, #20
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d008      	beq.n	8010f9e <tcp_accept+0x22>
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	7d1b      	ldrb	r3, [r3, #20]
 8010f90:	2b01      	cmp	r3, #1
 8010f92:	d104      	bne.n	8010f9e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	683a      	ldr	r2, [r7, #0]
 8010f9c:	619a      	str	r2, [r3, #24]
  }
}
 8010f9e:	bf00      	nop
 8010fa0:	3714      	adds	r7, #20
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fa8:	4770      	bx	lr
	...

08010fac <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b084      	sub	sp, #16
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	4613      	mov	r3, r2
 8010fb8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d107      	bne.n	8010fd0 <tcp_poll+0x24>
 8010fc0:	4b0e      	ldr	r3, [pc, #56]	; (8010ffc <tcp_poll+0x50>)
 8010fc2:	f640 023d 	movw	r2, #2109	; 0x83d
 8010fc6:	490e      	ldr	r1, [pc, #56]	; (8011000 <tcp_poll+0x54>)
 8010fc8:	480e      	ldr	r0, [pc, #56]	; (8011004 <tcp_poll+0x58>)
 8010fca:	f005 f857 	bl	801607c <iprintf>
 8010fce:	e011      	b.n	8010ff4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	7d1b      	ldrb	r3, [r3, #20]
 8010fd4:	2b01      	cmp	r3, #1
 8010fd6:	d106      	bne.n	8010fe6 <tcp_poll+0x3a>
 8010fd8:	4b08      	ldr	r3, [pc, #32]	; (8010ffc <tcp_poll+0x50>)
 8010fda:	f640 023e 	movw	r2, #2110	; 0x83e
 8010fde:	490a      	ldr	r1, [pc, #40]	; (8011008 <tcp_poll+0x5c>)
 8010fe0:	4808      	ldr	r0, [pc, #32]	; (8011004 <tcp_poll+0x58>)
 8010fe2:	f005 f84b 	bl	801607c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	68ba      	ldr	r2, [r7, #8]
 8010fea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	79fa      	ldrb	r2, [r7, #7]
 8010ff2:	775a      	strb	r2, [r3, #29]
}
 8010ff4:	3710      	adds	r7, #16
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}
 8010ffa:	bf00      	nop
 8010ffc:	08019fdc 	.word	0x08019fdc
 8011000:	0801a618 	.word	0x0801a618
 8011004:	0801a064 	.word	0x0801a064
 8011008:	0801a630 	.word	0x0801a630

0801100c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d107      	bne.n	801102a <tcp_pcb_purge+0x1e>
 801101a:	4b1e      	ldr	r3, [pc, #120]	; (8011094 <tcp_pcb_purge+0x88>)
 801101c:	f640 0251 	movw	r2, #2129	; 0x851
 8011020:	491d      	ldr	r1, [pc, #116]	; (8011098 <tcp_pcb_purge+0x8c>)
 8011022:	481e      	ldr	r0, [pc, #120]	; (801109c <tcp_pcb_purge+0x90>)
 8011024:	f005 f82a 	bl	801607c <iprintf>
 8011028:	e030      	b.n	801108c <tcp_pcb_purge+0x80>

  if (pcb->state != CLOSED &&
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	7d1b      	ldrb	r3, [r3, #20]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d02c      	beq.n	801108c <tcp_pcb_purge+0x80>
      pcb->state != TIME_WAIT &&
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8011036:	2b0a      	cmp	r3, #10
 8011038:	d028      	beq.n	801108c <tcp_pcb_purge+0x80>
      pcb->state != LISTEN) {
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801103e:	2b01      	cmp	r3, #1
 8011040:	d024      	beq.n	801108c <tcp_pcb_purge+0x80>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011046:	2b00      	cmp	r3, #0
 8011048:	d007      	beq.n	801105a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801104e:	4618      	mov	r0, r3
 8011050:	f7fd ffd0 	bl	800eff4 <pbuf_free>
      pcb->refused_data = NULL;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2200      	movs	r2, #0
 8011058:	675a      	str	r2, [r3, #116]	; 0x74
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011060:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011066:	4618      	mov	r0, r3
 8011068:	f7ff fd2e 	bl	8010ac8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011070:	4618      	mov	r0, r3
 8011072:	f7ff fd29 	bl	8010ac8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	2200      	movs	r2, #0
 801107a:	66da      	str	r2, [r3, #108]	; 0x6c
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2200      	movs	r2, #0
 8011088:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801108c:	3708      	adds	r7, #8
 801108e:	46bd      	mov	sp, r7
 8011090:	bd80      	pop	{r7, pc}
 8011092:	bf00      	nop
 8011094:	08019fdc 	.word	0x08019fdc
 8011098:	0801a650 	.word	0x0801a650
 801109c:	0801a064 	.word	0x0801a064

080110a0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b084      	sub	sp, #16
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
 80110a8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d106      	bne.n	80110be <tcp_pcb_remove+0x1e>
 80110b0:	4b38      	ldr	r3, [pc, #224]	; (8011194 <tcp_pcb_remove+0xf4>)
 80110b2:	f640 0283 	movw	r2, #2179	; 0x883
 80110b6:	4938      	ldr	r1, [pc, #224]	; (8011198 <tcp_pcb_remove+0xf8>)
 80110b8:	4838      	ldr	r0, [pc, #224]	; (801119c <tcp_pcb_remove+0xfc>)
 80110ba:	f004 ffdf 	bl	801607c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d106      	bne.n	80110d2 <tcp_pcb_remove+0x32>
 80110c4:	4b33      	ldr	r3, [pc, #204]	; (8011194 <tcp_pcb_remove+0xf4>)
 80110c6:	f640 0284 	movw	r2, #2180	; 0x884
 80110ca:	4935      	ldr	r1, [pc, #212]	; (80111a0 <tcp_pcb_remove+0x100>)
 80110cc:	4833      	ldr	r0, [pc, #204]	; (801119c <tcp_pcb_remove+0xfc>)
 80110ce:	f004 ffd5 	bl	801607c <iprintf>

  TCP_RMV(pcblist, pcb);
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	683a      	ldr	r2, [r7, #0]
 80110d8:	429a      	cmp	r2, r3
 80110da:	d105      	bne.n	80110e8 <tcp_pcb_remove+0x48>
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	68da      	ldr	r2, [r3, #12]
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	601a      	str	r2, [r3, #0]
 80110e6:	e013      	b.n	8011110 <tcp_pcb_remove+0x70>
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	60fb      	str	r3, [r7, #12]
 80110ee:	e00c      	b.n	801110a <tcp_pcb_remove+0x6a>
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	683a      	ldr	r2, [r7, #0]
 80110f6:	429a      	cmp	r2, r3
 80110f8:	d104      	bne.n	8011104 <tcp_pcb_remove+0x64>
 80110fa:	683b      	ldr	r3, [r7, #0]
 80110fc:	68da      	ldr	r2, [r3, #12]
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	60da      	str	r2, [r3, #12]
 8011102:	e005      	b.n	8011110 <tcp_pcb_remove+0x70>
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	60fb      	str	r3, [r7, #12]
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d1ef      	bne.n	80110f0 <tcp_pcb_remove+0x50>
 8011110:	683b      	ldr	r3, [r7, #0]
 8011112:	2200      	movs	r2, #0
 8011114:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8011116:	6838      	ldr	r0, [r7, #0]
 8011118:	f7ff ff78 	bl	801100c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	7d1b      	ldrb	r3, [r3, #20]
 8011120:	2b0a      	cmp	r3, #10
 8011122:	d013      	beq.n	801114c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8011128:	2b01      	cmp	r3, #1
 801112a:	d00f      	beq.n	801114c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801112c:	683b      	ldr	r3, [r7, #0]
 801112e:	8b5b      	ldrh	r3, [r3, #26]
 8011130:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011134:	2b00      	cmp	r3, #0
 8011136:	d009      	beq.n	801114c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	8b5b      	ldrh	r3, [r3, #26]
 801113c:	f043 0302 	orr.w	r3, r3, #2
 8011140:	b29a      	uxth	r2, r3
 8011142:	683b      	ldr	r3, [r7, #0]
 8011144:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011146:	6838      	ldr	r0, [r7, #0]
 8011148:	f002 ffe8 	bl	801411c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	7d1b      	ldrb	r3, [r3, #20]
 8011150:	2b01      	cmp	r3, #1
 8011152:	d015      	beq.n	8011180 <tcp_pcb_remove+0xe0>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011158:	2b00      	cmp	r3, #0
 801115a:	d006      	beq.n	801116a <tcp_pcb_remove+0xca>
 801115c:	4b0d      	ldr	r3, [pc, #52]	; (8011194 <tcp_pcb_remove+0xf4>)
 801115e:	f640 0293 	movw	r2, #2195	; 0x893
 8011162:	4910      	ldr	r1, [pc, #64]	; (80111a4 <tcp_pcb_remove+0x104>)
 8011164:	480d      	ldr	r0, [pc, #52]	; (801119c <tcp_pcb_remove+0xfc>)
 8011166:	f004 ff89 	bl	801607c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801116a:	683b      	ldr	r3, [r7, #0]
 801116c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801116e:	2b00      	cmp	r3, #0
 8011170:	d006      	beq.n	8011180 <tcp_pcb_remove+0xe0>
 8011172:	4b08      	ldr	r3, [pc, #32]	; (8011194 <tcp_pcb_remove+0xf4>)
 8011174:	f640 0294 	movw	r2, #2196	; 0x894
 8011178:	490b      	ldr	r1, [pc, #44]	; (80111a8 <tcp_pcb_remove+0x108>)
 801117a:	4808      	ldr	r0, [pc, #32]	; (801119c <tcp_pcb_remove+0xfc>)
 801117c:	f004 ff7e 	bl	801607c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	2200      	movs	r2, #0
 8011184:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	2200      	movs	r2, #0
 801118a:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801118c:	bf00      	nop
 801118e:	3710      	adds	r7, #16
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	08019fdc 	.word	0x08019fdc
 8011198:	0801a66c 	.word	0x0801a66c
 801119c:	0801a064 	.word	0x0801a064
 80111a0:	0801a688 	.word	0x0801a688
 80111a4:	0801a6a8 	.word	0x0801a6a8
 80111a8:	0801a6c0 	.word	0x0801a6c0

080111ac <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d106      	bne.n	80111c8 <tcp_next_iss+0x1c>
 80111ba:	4b0a      	ldr	r3, [pc, #40]	; (80111e4 <tcp_next_iss+0x38>)
 80111bc:	f640 02af 	movw	r2, #2223	; 0x8af
 80111c0:	4909      	ldr	r1, [pc, #36]	; (80111e8 <tcp_next_iss+0x3c>)
 80111c2:	480a      	ldr	r0, [pc, #40]	; (80111ec <tcp_next_iss+0x40>)
 80111c4:	f004 ff5a 	bl	801607c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80111c8:	4b09      	ldr	r3, [pc, #36]	; (80111f0 <tcp_next_iss+0x44>)
 80111ca:	681a      	ldr	r2, [r3, #0]
 80111cc:	4b09      	ldr	r3, [pc, #36]	; (80111f4 <tcp_next_iss+0x48>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	4413      	add	r3, r2
 80111d2:	4a07      	ldr	r2, [pc, #28]	; (80111f0 <tcp_next_iss+0x44>)
 80111d4:	6013      	str	r3, [r2, #0]
  return iss;
 80111d6:	4b06      	ldr	r3, [pc, #24]	; (80111f0 <tcp_next_iss+0x44>)
 80111d8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80111da:	4618      	mov	r0, r3
 80111dc:	3708      	adds	r7, #8
 80111de:	46bd      	mov	sp, r7
 80111e0:	bd80      	pop	{r7, pc}
 80111e2:	bf00      	nop
 80111e4:	08019fdc 	.word	0x08019fdc
 80111e8:	0801a6dc 	.word	0x0801a6dc
 80111ec:	0801a064 	.word	0x0801a064
 80111f0:	24000048 	.word	0x24000048
 80111f4:	2400a788 	.word	0x2400a788

080111f8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80111f8:	b580      	push	{r7, lr}
 80111fa:	b086      	sub	sp, #24
 80111fc:	af00      	add	r7, sp, #0
 80111fe:	4603      	mov	r3, r0
 8011200:	60b9      	str	r1, [r7, #8]
 8011202:	607a      	str	r2, [r7, #4]
 8011204:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d106      	bne.n	801121a <tcp_eff_send_mss_netif+0x22>
 801120c:	4b14      	ldr	r3, [pc, #80]	; (8011260 <tcp_eff_send_mss_netif+0x68>)
 801120e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011212:	4914      	ldr	r1, [pc, #80]	; (8011264 <tcp_eff_send_mss_netif+0x6c>)
 8011214:	4814      	ldr	r0, [pc, #80]	; (8011268 <tcp_eff_send_mss_netif+0x70>)
 8011216:	f004 ff31 	bl	801607c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d101      	bne.n	8011224 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8011220:	89fb      	ldrh	r3, [r7, #14]
 8011222:	e019      	b.n	8011258 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8011224:	68bb      	ldr	r3, [r7, #8]
 8011226:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8011228:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801122a:	8afb      	ldrh	r3, [r7, #22]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d012      	beq.n	8011256 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8011230:	2328      	movs	r3, #40	; 0x28
 8011232:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8011234:	8afa      	ldrh	r2, [r7, #22]
 8011236:	8abb      	ldrh	r3, [r7, #20]
 8011238:	429a      	cmp	r2, r3
 801123a:	d904      	bls.n	8011246 <tcp_eff_send_mss_netif+0x4e>
 801123c:	8afa      	ldrh	r2, [r7, #22]
 801123e:	8abb      	ldrh	r3, [r7, #20]
 8011240:	1ad3      	subs	r3, r2, r3
 8011242:	b29b      	uxth	r3, r3
 8011244:	e000      	b.n	8011248 <tcp_eff_send_mss_netif+0x50>
 8011246:	2300      	movs	r3, #0
 8011248:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801124a:	8a7a      	ldrh	r2, [r7, #18]
 801124c:	89fb      	ldrh	r3, [r7, #14]
 801124e:	4293      	cmp	r3, r2
 8011250:	bf28      	it	cs
 8011252:	4613      	movcs	r3, r2
 8011254:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8011256:	89fb      	ldrh	r3, [r7, #14]
}
 8011258:	4618      	mov	r0, r3
 801125a:	3718      	adds	r7, #24
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	08019fdc 	.word	0x08019fdc
 8011264:	0801a6f8 	.word	0x0801a6f8
 8011268:	0801a064 	.word	0x0801a064

0801126c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2b00      	cmp	r3, #0
 801127e:	d119      	bne.n	80112b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011280:	4b10      	ldr	r3, [pc, #64]	; (80112c4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011282:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011286:	4910      	ldr	r1, [pc, #64]	; (80112c8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011288:	4810      	ldr	r0, [pc, #64]	; (80112cc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801128a:	f004 fef7 	bl	801607c <iprintf>

  while (pcb != NULL) {
 801128e:	e011      	b.n	80112b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	681a      	ldr	r2, [r3, #0]
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	429a      	cmp	r2, r3
 801129a:	d108      	bne.n	80112ae <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80112a2:	68f8      	ldr	r0, [r7, #12]
 80112a4:	f7fe fc8c 	bl	800fbc0 <tcp_abort>
      pcb = next;
 80112a8:	68bb      	ldr	r3, [r7, #8]
 80112aa:	60fb      	str	r3, [r7, #12]
 80112ac:	e002      	b.n	80112b4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d1ea      	bne.n	8011290 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80112ba:	bf00      	nop
 80112bc:	bf00      	nop
 80112be:	3710      	adds	r7, #16
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	08019fdc 	.word	0x08019fdc
 80112c8:	0801a720 	.word	0x0801a720
 80112cc:	0801a064 	.word	0x0801a064

080112d0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b084      	sub	sp, #16
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
 80112d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d02a      	beq.n	8011336 <tcp_netif_ip_addr_changed+0x66>
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d026      	beq.n	8011336 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80112e8:	4b15      	ldr	r3, [pc, #84]	; (8011340 <tcp_netif_ip_addr_changed+0x70>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	4619      	mov	r1, r3
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f7ff ffbc 	bl	801126c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80112f4:	4b13      	ldr	r3, [pc, #76]	; (8011344 <tcp_netif_ip_addr_changed+0x74>)
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	4619      	mov	r1, r3
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f7ff ffb6 	bl	801126c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d017      	beq.n	8011336 <tcp_netif_ip_addr_changed+0x66>
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d013      	beq.n	8011336 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801130e:	4b0e      	ldr	r3, [pc, #56]	; (8011348 <tcp_netif_ip_addr_changed+0x78>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	60fb      	str	r3, [r7, #12]
 8011314:	e00c      	b.n	8011330 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	681a      	ldr	r2, [r3, #0]
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	429a      	cmp	r2, r3
 8011320:	d103      	bne.n	801132a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	68db      	ldr	r3, [r3, #12]
 801132e:	60fb      	str	r3, [r7, #12]
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d1ef      	bne.n	8011316 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8011336:	bf00      	nop
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}
 801133e:	bf00      	nop
 8011340:	2400a784 	.word	0x2400a784
 8011344:	2400a790 	.word	0x2400a790
 8011348:	2400a78c 	.word	0x2400a78c

0801134c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801134c:	b590      	push	{r4, r7, lr}
 801134e:	b08d      	sub	sp, #52	; 0x34
 8011350:	af04      	add	r7, sp, #16
 8011352:	6078      	str	r0, [r7, #4]
 8011354:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d105      	bne.n	8011368 <tcp_input+0x1c>
 801135c:	4b9b      	ldr	r3, [pc, #620]	; (80115cc <tcp_input+0x280>)
 801135e:	2283      	movs	r2, #131	; 0x83
 8011360:	499b      	ldr	r1, [pc, #620]	; (80115d0 <tcp_input+0x284>)
 8011362:	489c      	ldr	r0, [pc, #624]	; (80115d4 <tcp_input+0x288>)
 8011364:	f004 fe8a 	bl	801607c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	685b      	ldr	r3, [r3, #4]
 801136c:	4a9a      	ldr	r2, [pc, #616]	; (80115d8 <tcp_input+0x28c>)
 801136e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	895b      	ldrh	r3, [r3, #10]
 8011374:	2b13      	cmp	r3, #19
 8011376:	f240 83c3 	bls.w	8011b00 <tcp_input+0x7b4>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801137a:	4b98      	ldr	r3, [pc, #608]	; (80115dc <tcp_input+0x290>)
 801137c:	695b      	ldr	r3, [r3, #20]
 801137e:	4a97      	ldr	r2, [pc, #604]	; (80115dc <tcp_input+0x290>)
 8011380:	6812      	ldr	r2, [r2, #0]
 8011382:	4611      	mov	r1, r2
 8011384:	4618      	mov	r0, r3
 8011386:	f7fb fbbb 	bl	800cb00 <ip4_addr_isbroadcast_u32>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	f040 83b9 	bne.w	8011b04 <tcp_input+0x7b8>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8011392:	4b92      	ldr	r3, [pc, #584]	; (80115dc <tcp_input+0x290>)
 8011394:	695b      	ldr	r3, [r3, #20]
 8011396:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801139a:	2be0      	cmp	r3, #224	; 0xe0
 801139c:	f000 83b2 	beq.w	8011b04 <tcp_input+0x7b8>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80113a0:	4b8d      	ldr	r3, [pc, #564]	; (80115d8 <tcp_input+0x28c>)
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	899b      	ldrh	r3, [r3, #12]
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7fc fa23 	bl	800d7f4 <lwip_htons>
 80113ae:	4603      	mov	r3, r0
 80113b0:	0b1b      	lsrs	r3, r3, #12
 80113b2:	b29b      	uxth	r3, r3
 80113b4:	b2db      	uxtb	r3, r3
 80113b6:	009b      	lsls	r3, r3, #2
 80113b8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80113ba:	7cbb      	ldrb	r3, [r7, #18]
 80113bc:	2b13      	cmp	r3, #19
 80113be:	f240 83a3 	bls.w	8011b08 <tcp_input+0x7bc>
 80113c2:	7cbb      	ldrb	r3, [r7, #18]
 80113c4:	b29a      	uxth	r2, r3
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	891b      	ldrh	r3, [r3, #8]
 80113ca:	429a      	cmp	r2, r3
 80113cc:	f200 839c 	bhi.w	8011b08 <tcp_input+0x7bc>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80113d0:	7cbb      	ldrb	r3, [r7, #18]
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	3b14      	subs	r3, #20
 80113d6:	b29a      	uxth	r2, r3
 80113d8:	4b81      	ldr	r3, [pc, #516]	; (80115e0 <tcp_input+0x294>)
 80113da:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80113dc:	4b81      	ldr	r3, [pc, #516]	; (80115e4 <tcp_input+0x298>)
 80113de:	2200      	movs	r2, #0
 80113e0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	895a      	ldrh	r2, [r3, #10]
 80113e6:	7cbb      	ldrb	r3, [r7, #18]
 80113e8:	b29b      	uxth	r3, r3
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d309      	bcc.n	8011402 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80113ee:	4b7c      	ldr	r3, [pc, #496]	; (80115e0 <tcp_input+0x294>)
 80113f0:	881a      	ldrh	r2, [r3, #0]
 80113f2:	4b7d      	ldr	r3, [pc, #500]	; (80115e8 <tcp_input+0x29c>)
 80113f4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80113f6:	7cbb      	ldrb	r3, [r7, #18]
 80113f8:	4619      	mov	r1, r3
 80113fa:	6878      	ldr	r0, [r7, #4]
 80113fc:	f7fd fd74 	bl	800eee8 <pbuf_remove_header>
 8011400:	e04e      	b.n	80114a0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d105      	bne.n	8011416 <tcp_input+0xca>
 801140a:	4b70      	ldr	r3, [pc, #448]	; (80115cc <tcp_input+0x280>)
 801140c:	22c2      	movs	r2, #194	; 0xc2
 801140e:	4977      	ldr	r1, [pc, #476]	; (80115ec <tcp_input+0x2a0>)
 8011410:	4870      	ldr	r0, [pc, #448]	; (80115d4 <tcp_input+0x288>)
 8011412:	f004 fe33 	bl	801607c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8011416:	2114      	movs	r1, #20
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f7fd fd65 	bl	800eee8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	895a      	ldrh	r2, [r3, #10]
 8011422:	4b71      	ldr	r3, [pc, #452]	; (80115e8 <tcp_input+0x29c>)
 8011424:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8011426:	4b6e      	ldr	r3, [pc, #440]	; (80115e0 <tcp_input+0x294>)
 8011428:	881a      	ldrh	r2, [r3, #0]
 801142a:	4b6f      	ldr	r3, [pc, #444]	; (80115e8 <tcp_input+0x29c>)
 801142c:	881b      	ldrh	r3, [r3, #0]
 801142e:	1ad3      	subs	r3, r2, r3
 8011430:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8011432:	4b6d      	ldr	r3, [pc, #436]	; (80115e8 <tcp_input+0x29c>)
 8011434:	881b      	ldrh	r3, [r3, #0]
 8011436:	4619      	mov	r1, r3
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f7fd fd55 	bl	800eee8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	895b      	ldrh	r3, [r3, #10]
 8011444:	8a3a      	ldrh	r2, [r7, #16]
 8011446:	429a      	cmp	r2, r3
 8011448:	f200 8360 	bhi.w	8011b0c <tcp_input+0x7c0>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	4a64      	ldr	r2, [pc, #400]	; (80115e4 <tcp_input+0x298>)
 8011454:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	8a3a      	ldrh	r2, [r7, #16]
 801145c:	4611      	mov	r1, r2
 801145e:	4618      	mov	r0, r3
 8011460:	f7fd fd42 	bl	800eee8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	891a      	ldrh	r2, [r3, #8]
 8011468:	8a3b      	ldrh	r3, [r7, #16]
 801146a:	1ad3      	subs	r3, r2, r3
 801146c:	b29a      	uxth	r2, r3
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	895b      	ldrh	r3, [r3, #10]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d005      	beq.n	8011486 <tcp_input+0x13a>
 801147a:	4b54      	ldr	r3, [pc, #336]	; (80115cc <tcp_input+0x280>)
 801147c:	22df      	movs	r2, #223	; 0xdf
 801147e:	495c      	ldr	r1, [pc, #368]	; (80115f0 <tcp_input+0x2a4>)
 8011480:	4854      	ldr	r0, [pc, #336]	; (80115d4 <tcp_input+0x288>)
 8011482:	f004 fdfb 	bl	801607c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	891a      	ldrh	r2, [r3, #8]
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	891b      	ldrh	r3, [r3, #8]
 8011490:	429a      	cmp	r2, r3
 8011492:	d005      	beq.n	80114a0 <tcp_input+0x154>
 8011494:	4b4d      	ldr	r3, [pc, #308]	; (80115cc <tcp_input+0x280>)
 8011496:	22e0      	movs	r2, #224	; 0xe0
 8011498:	4956      	ldr	r1, [pc, #344]	; (80115f4 <tcp_input+0x2a8>)
 801149a:	484e      	ldr	r0, [pc, #312]	; (80115d4 <tcp_input+0x288>)
 801149c:	f004 fdee 	bl	801607c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80114a0:	4b4d      	ldr	r3, [pc, #308]	; (80115d8 <tcp_input+0x28c>)
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	881b      	ldrh	r3, [r3, #0]
 80114a6:	b29b      	uxth	r3, r3
 80114a8:	4a4b      	ldr	r2, [pc, #300]	; (80115d8 <tcp_input+0x28c>)
 80114aa:	6814      	ldr	r4, [r2, #0]
 80114ac:	4618      	mov	r0, r3
 80114ae:	f7fc f9a1 	bl	800d7f4 <lwip_htons>
 80114b2:	4603      	mov	r3, r0
 80114b4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80114b6:	4b48      	ldr	r3, [pc, #288]	; (80115d8 <tcp_input+0x28c>)
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	885b      	ldrh	r3, [r3, #2]
 80114bc:	b29b      	uxth	r3, r3
 80114be:	4a46      	ldr	r2, [pc, #280]	; (80115d8 <tcp_input+0x28c>)
 80114c0:	6814      	ldr	r4, [r2, #0]
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7fc f996 	bl	800d7f4 <lwip_htons>
 80114c8:	4603      	mov	r3, r0
 80114ca:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80114cc:	4b42      	ldr	r3, [pc, #264]	; (80115d8 <tcp_input+0x28c>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	685b      	ldr	r3, [r3, #4]
 80114d2:	4a41      	ldr	r2, [pc, #260]	; (80115d8 <tcp_input+0x28c>)
 80114d4:	6814      	ldr	r4, [r2, #0]
 80114d6:	4618      	mov	r0, r3
 80114d8:	f7fc f9a1 	bl	800d81e <lwip_htonl>
 80114dc:	4603      	mov	r3, r0
 80114de:	6063      	str	r3, [r4, #4]
 80114e0:	6863      	ldr	r3, [r4, #4]
 80114e2:	4a45      	ldr	r2, [pc, #276]	; (80115f8 <tcp_input+0x2ac>)
 80114e4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80114e6:	4b3c      	ldr	r3, [pc, #240]	; (80115d8 <tcp_input+0x28c>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	689b      	ldr	r3, [r3, #8]
 80114ec:	4a3a      	ldr	r2, [pc, #232]	; (80115d8 <tcp_input+0x28c>)
 80114ee:	6814      	ldr	r4, [r2, #0]
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7fc f994 	bl	800d81e <lwip_htonl>
 80114f6:	4603      	mov	r3, r0
 80114f8:	60a3      	str	r3, [r4, #8]
 80114fa:	68a3      	ldr	r3, [r4, #8]
 80114fc:	4a3f      	ldr	r2, [pc, #252]	; (80115fc <tcp_input+0x2b0>)
 80114fe:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011500:	4b35      	ldr	r3, [pc, #212]	; (80115d8 <tcp_input+0x28c>)
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	89db      	ldrh	r3, [r3, #14]
 8011506:	b29b      	uxth	r3, r3
 8011508:	4a33      	ldr	r2, [pc, #204]	; (80115d8 <tcp_input+0x28c>)
 801150a:	6814      	ldr	r4, [r2, #0]
 801150c:	4618      	mov	r0, r3
 801150e:	f7fc f971 	bl	800d7f4 <lwip_htons>
 8011512:	4603      	mov	r3, r0
 8011514:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011516:	4b30      	ldr	r3, [pc, #192]	; (80115d8 <tcp_input+0x28c>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	899b      	ldrh	r3, [r3, #12]
 801151c:	b29b      	uxth	r3, r3
 801151e:	4618      	mov	r0, r3
 8011520:	f7fc f968 	bl	800d7f4 <lwip_htons>
 8011524:	4603      	mov	r3, r0
 8011526:	b2db      	uxtb	r3, r3
 8011528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801152c:	b2da      	uxtb	r2, r3
 801152e:	4b34      	ldr	r3, [pc, #208]	; (8011600 <tcp_input+0x2b4>)
 8011530:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	891a      	ldrh	r2, [r3, #8]
 8011536:	4b33      	ldr	r3, [pc, #204]	; (8011604 <tcp_input+0x2b8>)
 8011538:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801153a:	4b31      	ldr	r3, [pc, #196]	; (8011600 <tcp_input+0x2b4>)
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	f003 0303 	and.w	r3, r3, #3
 8011542:	2b00      	cmp	r3, #0
 8011544:	d00c      	beq.n	8011560 <tcp_input+0x214>
    tcplen++;
 8011546:	4b2f      	ldr	r3, [pc, #188]	; (8011604 <tcp_input+0x2b8>)
 8011548:	881b      	ldrh	r3, [r3, #0]
 801154a:	3301      	adds	r3, #1
 801154c:	b29a      	uxth	r2, r3
 801154e:	4b2d      	ldr	r3, [pc, #180]	; (8011604 <tcp_input+0x2b8>)
 8011550:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	891a      	ldrh	r2, [r3, #8]
 8011556:	4b2b      	ldr	r3, [pc, #172]	; (8011604 <tcp_input+0x2b8>)
 8011558:	881b      	ldrh	r3, [r3, #0]
 801155a:	429a      	cmp	r2, r3
 801155c:	f200 82d8 	bhi.w	8011b10 <tcp_input+0x7c4>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011560:	2300      	movs	r3, #0
 8011562:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011564:	4b28      	ldr	r3, [pc, #160]	; (8011608 <tcp_input+0x2bc>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	61fb      	str	r3, [r7, #28]
 801156a:	e09d      	b.n	80116a8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	7d1b      	ldrb	r3, [r3, #20]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d105      	bne.n	8011580 <tcp_input+0x234>
 8011574:	4b15      	ldr	r3, [pc, #84]	; (80115cc <tcp_input+0x280>)
 8011576:	22fb      	movs	r2, #251	; 0xfb
 8011578:	4924      	ldr	r1, [pc, #144]	; (801160c <tcp_input+0x2c0>)
 801157a:	4816      	ldr	r0, [pc, #88]	; (80115d4 <tcp_input+0x288>)
 801157c:	f004 fd7e 	bl	801607c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011580:	69fb      	ldr	r3, [r7, #28]
 8011582:	7d1b      	ldrb	r3, [r3, #20]
 8011584:	2b0a      	cmp	r3, #10
 8011586:	d105      	bne.n	8011594 <tcp_input+0x248>
 8011588:	4b10      	ldr	r3, [pc, #64]	; (80115cc <tcp_input+0x280>)
 801158a:	22fc      	movs	r2, #252	; 0xfc
 801158c:	4920      	ldr	r1, [pc, #128]	; (8011610 <tcp_input+0x2c4>)
 801158e:	4811      	ldr	r0, [pc, #68]	; (80115d4 <tcp_input+0x288>)
 8011590:	f004 fd74 	bl	801607c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011594:	69fb      	ldr	r3, [r7, #28]
 8011596:	7d1b      	ldrb	r3, [r3, #20]
 8011598:	2b01      	cmp	r3, #1
 801159a:	d105      	bne.n	80115a8 <tcp_input+0x25c>
 801159c:	4b0b      	ldr	r3, [pc, #44]	; (80115cc <tcp_input+0x280>)
 801159e:	22fd      	movs	r2, #253	; 0xfd
 80115a0:	491c      	ldr	r1, [pc, #112]	; (8011614 <tcp_input+0x2c8>)
 80115a2:	480c      	ldr	r0, [pc, #48]	; (80115d4 <tcp_input+0x288>)
 80115a4:	f004 fd6a 	bl	801607c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115a8:	69fb      	ldr	r3, [r7, #28]
 80115aa:	7a1b      	ldrb	r3, [r3, #8]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d033      	beq.n	8011618 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80115b0:	69fb      	ldr	r3, [r7, #28]
 80115b2:	7a1a      	ldrb	r2, [r3, #8]
 80115b4:	4b09      	ldr	r3, [pc, #36]	; (80115dc <tcp_input+0x290>)
 80115b6:	685b      	ldr	r3, [r3, #4]
 80115b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80115bc:	3301      	adds	r3, #1
 80115be:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d029      	beq.n	8011618 <tcp_input+0x2cc>
      prev = pcb;
 80115c4:	69fb      	ldr	r3, [r7, #28]
 80115c6:	61bb      	str	r3, [r7, #24]
      continue;
 80115c8:	e06b      	b.n	80116a2 <tcp_input+0x356>
 80115ca:	bf00      	nop
 80115cc:	0801a754 	.word	0x0801a754
 80115d0:	0801a7cc 	.word	0x0801a7cc
 80115d4:	0801a7e4 	.word	0x0801a7e4
 80115d8:	240067c8 	.word	0x240067c8
 80115dc:	24006a28 	.word	0x24006a28
 80115e0:	240067cc 	.word	0x240067cc
 80115e4:	240067d0 	.word	0x240067d0
 80115e8:	240067ce 	.word	0x240067ce
 80115ec:	0801a80c 	.word	0x0801a80c
 80115f0:	0801a81c 	.word	0x0801a81c
 80115f4:	0801a828 	.word	0x0801a828
 80115f8:	240067d8 	.word	0x240067d8
 80115fc:	240067dc 	.word	0x240067dc
 8011600:	240067e4 	.word	0x240067e4
 8011604:	240067e2 	.word	0x240067e2
 8011608:	2400a784 	.word	0x2400a784
 801160c:	0801a848 	.word	0x0801a848
 8011610:	0801a870 	.word	0x0801a870
 8011614:	0801a89c 	.word	0x0801a89c
    }

    if (pcb->remote_port == tcphdr->src &&
 8011618:	69fb      	ldr	r3, [r7, #28]
 801161a:	8b1a      	ldrh	r2, [r3, #24]
 801161c:	4b94      	ldr	r3, [pc, #592]	; (8011870 <tcp_input+0x524>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	881b      	ldrh	r3, [r3, #0]
 8011622:	b29b      	uxth	r3, r3
 8011624:	429a      	cmp	r2, r3
 8011626:	d13a      	bne.n	801169e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011628:	69fb      	ldr	r3, [r7, #28]
 801162a:	8ada      	ldrh	r2, [r3, #22]
 801162c:	4b90      	ldr	r3, [pc, #576]	; (8011870 <tcp_input+0x524>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	885b      	ldrh	r3, [r3, #2]
 8011632:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011634:	429a      	cmp	r2, r3
 8011636:	d132      	bne.n	801169e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	685a      	ldr	r2, [r3, #4]
 801163c:	4b8d      	ldr	r3, [pc, #564]	; (8011874 <tcp_input+0x528>)
 801163e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011640:	429a      	cmp	r2, r3
 8011642:	d12c      	bne.n	801169e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011644:	69fb      	ldr	r3, [r7, #28]
 8011646:	681a      	ldr	r2, [r3, #0]
 8011648:	4b8a      	ldr	r3, [pc, #552]	; (8011874 <tcp_input+0x528>)
 801164a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801164c:	429a      	cmp	r2, r3
 801164e:	d126      	bne.n	801169e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	68db      	ldr	r3, [r3, #12]
 8011654:	69fa      	ldr	r2, [r7, #28]
 8011656:	429a      	cmp	r2, r3
 8011658:	d106      	bne.n	8011668 <tcp_input+0x31c>
 801165a:	4b87      	ldr	r3, [pc, #540]	; (8011878 <tcp_input+0x52c>)
 801165c:	f240 120d 	movw	r2, #269	; 0x10d
 8011660:	4986      	ldr	r1, [pc, #536]	; (801187c <tcp_input+0x530>)
 8011662:	4887      	ldr	r0, [pc, #540]	; (8011880 <tcp_input+0x534>)
 8011664:	f004 fd0a 	bl	801607c <iprintf>
      if (prev != NULL) {
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d00a      	beq.n	8011684 <tcp_input+0x338>
        prev->next = pcb->next;
 801166e:	69fb      	ldr	r3, [r7, #28]
 8011670:	68da      	ldr	r2, [r3, #12]
 8011672:	69bb      	ldr	r3, [r7, #24]
 8011674:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011676:	4b83      	ldr	r3, [pc, #524]	; (8011884 <tcp_input+0x538>)
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801167e:	4a81      	ldr	r2, [pc, #516]	; (8011884 <tcp_input+0x538>)
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011684:	69fb      	ldr	r3, [r7, #28]
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	69fa      	ldr	r2, [r7, #28]
 801168a:	429a      	cmp	r2, r3
 801168c:	d111      	bne.n	80116b2 <tcp_input+0x366>
 801168e:	4b7a      	ldr	r3, [pc, #488]	; (8011878 <tcp_input+0x52c>)
 8011690:	f240 1215 	movw	r2, #277	; 0x115
 8011694:	497c      	ldr	r1, [pc, #496]	; (8011888 <tcp_input+0x53c>)
 8011696:	487a      	ldr	r0, [pc, #488]	; (8011880 <tcp_input+0x534>)
 8011698:	f004 fcf0 	bl	801607c <iprintf>
      break;
 801169c:	e009      	b.n	80116b2 <tcp_input+0x366>
    }
    prev = pcb;
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80116a2:	69fb      	ldr	r3, [r7, #28]
 80116a4:	68db      	ldr	r3, [r3, #12]
 80116a6:	61fb      	str	r3, [r7, #28]
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	f47f af5e 	bne.w	801156c <tcp_input+0x220>
 80116b0:	e000      	b.n	80116b4 <tcp_input+0x368>
      break;
 80116b2:	bf00      	nop
  }

  if (pcb == NULL) {
 80116b4:	69fb      	ldr	r3, [r7, #28]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	f040 8095 	bne.w	80117e6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80116bc:	4b73      	ldr	r3, [pc, #460]	; (801188c <tcp_input+0x540>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	61fb      	str	r3, [r7, #28]
 80116c2:	e03f      	b.n	8011744 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80116c4:	69fb      	ldr	r3, [r7, #28]
 80116c6:	7d1b      	ldrb	r3, [r3, #20]
 80116c8:	2b0a      	cmp	r3, #10
 80116ca:	d006      	beq.n	80116da <tcp_input+0x38e>
 80116cc:	4b6a      	ldr	r3, [pc, #424]	; (8011878 <tcp_input+0x52c>)
 80116ce:	f240 121f 	movw	r2, #287	; 0x11f
 80116d2:	496f      	ldr	r1, [pc, #444]	; (8011890 <tcp_input+0x544>)
 80116d4:	486a      	ldr	r0, [pc, #424]	; (8011880 <tcp_input+0x534>)
 80116d6:	f004 fcd1 	bl	801607c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116da:	69fb      	ldr	r3, [r7, #28]
 80116dc:	7a1b      	ldrb	r3, [r3, #8]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d009      	beq.n	80116f6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80116e2:	69fb      	ldr	r3, [r7, #28]
 80116e4:	7a1a      	ldrb	r2, [r3, #8]
 80116e6:	4b63      	ldr	r3, [pc, #396]	; (8011874 <tcp_input+0x528>)
 80116e8:	685b      	ldr	r3, [r3, #4]
 80116ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80116ee:	3301      	adds	r3, #1
 80116f0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d122      	bne.n	801173c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80116f6:	69fb      	ldr	r3, [r7, #28]
 80116f8:	8b1a      	ldrh	r2, [r3, #24]
 80116fa:	4b5d      	ldr	r3, [pc, #372]	; (8011870 <tcp_input+0x524>)
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	881b      	ldrh	r3, [r3, #0]
 8011700:	b29b      	uxth	r3, r3
 8011702:	429a      	cmp	r2, r3
 8011704:	d11b      	bne.n	801173e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011706:	69fb      	ldr	r3, [r7, #28]
 8011708:	8ada      	ldrh	r2, [r3, #22]
 801170a:	4b59      	ldr	r3, [pc, #356]	; (8011870 <tcp_input+0x524>)
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	885b      	ldrh	r3, [r3, #2]
 8011710:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011712:	429a      	cmp	r2, r3
 8011714:	d113      	bne.n	801173e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	685a      	ldr	r2, [r3, #4]
 801171a:	4b56      	ldr	r3, [pc, #344]	; (8011874 <tcp_input+0x528>)
 801171c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801171e:	429a      	cmp	r2, r3
 8011720:	d10d      	bne.n	801173e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011722:	69fb      	ldr	r3, [r7, #28]
 8011724:	681a      	ldr	r2, [r3, #0]
 8011726:	4b53      	ldr	r3, [pc, #332]	; (8011874 <tcp_input+0x528>)
 8011728:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801172a:	429a      	cmp	r2, r3
 801172c:	d107      	bne.n	801173e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801172e:	69f8      	ldr	r0, [r7, #28]
 8011730:	f000 fb54 	bl	8011ddc <tcp_timewait_input>
        }
        pbuf_free(p);
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f7fd fc5d 	bl	800eff4 <pbuf_free>
        return;
 801173a:	e1ef      	b.n	8011b1c <tcp_input+0x7d0>
        continue;
 801173c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801173e:	69fb      	ldr	r3, [r7, #28]
 8011740:	68db      	ldr	r3, [r3, #12]
 8011742:	61fb      	str	r3, [r7, #28]
 8011744:	69fb      	ldr	r3, [r7, #28]
 8011746:	2b00      	cmp	r3, #0
 8011748:	d1bc      	bne.n	80116c4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801174a:	2300      	movs	r3, #0
 801174c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801174e:	4b51      	ldr	r3, [pc, #324]	; (8011894 <tcp_input+0x548>)
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	617b      	str	r3, [r7, #20]
 8011754:	e02a      	b.n	80117ac <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	7a1b      	ldrb	r3, [r3, #8]
 801175a:	2b00      	cmp	r3, #0
 801175c:	d00c      	beq.n	8011778 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801175e:	697b      	ldr	r3, [r7, #20]
 8011760:	7a1a      	ldrb	r2, [r3, #8]
 8011762:	4b44      	ldr	r3, [pc, #272]	; (8011874 <tcp_input+0x528>)
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801176a:	3301      	adds	r3, #1
 801176c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801176e:	429a      	cmp	r2, r3
 8011770:	d002      	beq.n	8011778 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011772:	697b      	ldr	r3, [r7, #20]
 8011774:	61bb      	str	r3, [r7, #24]
        continue;
 8011776:	e016      	b.n	80117a6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011778:	697b      	ldr	r3, [r7, #20]
 801177a:	8ada      	ldrh	r2, [r3, #22]
 801177c:	4b3c      	ldr	r3, [pc, #240]	; (8011870 <tcp_input+0x524>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	885b      	ldrh	r3, [r3, #2]
 8011782:	b29b      	uxth	r3, r3
 8011784:	429a      	cmp	r2, r3
 8011786:	d10c      	bne.n	80117a2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011788:	697b      	ldr	r3, [r7, #20]
 801178a:	681a      	ldr	r2, [r3, #0]
 801178c:	4b39      	ldr	r3, [pc, #228]	; (8011874 <tcp_input+0x528>)
 801178e:	695b      	ldr	r3, [r3, #20]
 8011790:	429a      	cmp	r2, r3
 8011792:	d00f      	beq.n	80117b4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011794:	697b      	ldr	r3, [r7, #20]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d00d      	beq.n	80117b6 <tcp_input+0x46a>
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d009      	beq.n	80117b6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80117a6:	697b      	ldr	r3, [r7, #20]
 80117a8:	68db      	ldr	r3, [r3, #12]
 80117aa:	617b      	str	r3, [r7, #20]
 80117ac:	697b      	ldr	r3, [r7, #20]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d1d1      	bne.n	8011756 <tcp_input+0x40a>
 80117b2:	e000      	b.n	80117b6 <tcp_input+0x46a>
            break;
 80117b4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80117b6:	697b      	ldr	r3, [r7, #20]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d014      	beq.n	80117e6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80117bc:	69bb      	ldr	r3, [r7, #24]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d00a      	beq.n	80117d8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	68da      	ldr	r2, [r3, #12]
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80117ca:	4b32      	ldr	r3, [pc, #200]	; (8011894 <tcp_input+0x548>)
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80117d2:	4a30      	ldr	r2, [pc, #192]	; (8011894 <tcp_input+0x548>)
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80117d8:	6978      	ldr	r0, [r7, #20]
 80117da:	f000 fa01 	bl	8011be0 <tcp_listen_input>
      }
      pbuf_free(p);
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f7fd fc08 	bl	800eff4 <pbuf_free>
      return;
 80117e4:	e19a      	b.n	8011b1c <tcp_input+0x7d0>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80117e6:	69fb      	ldr	r3, [r7, #28]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	f000 815f 	beq.w	8011aac <tcp_input+0x760>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80117ee:	4b2a      	ldr	r3, [pc, #168]	; (8011898 <tcp_input+0x54c>)
 80117f0:	2200      	movs	r2, #0
 80117f2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	891a      	ldrh	r2, [r3, #8]
 80117f8:	4b27      	ldr	r3, [pc, #156]	; (8011898 <tcp_input+0x54c>)
 80117fa:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80117fc:	4a26      	ldr	r2, [pc, #152]	; (8011898 <tcp_input+0x54c>)
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011802:	4b1b      	ldr	r3, [pc, #108]	; (8011870 <tcp_input+0x524>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	4a24      	ldr	r2, [pc, #144]	; (8011898 <tcp_input+0x54c>)
 8011808:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801180a:	4b24      	ldr	r3, [pc, #144]	; (801189c <tcp_input+0x550>)
 801180c:	2200      	movs	r2, #0
 801180e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011810:	4b23      	ldr	r3, [pc, #140]	; (80118a0 <tcp_input+0x554>)
 8011812:	2200      	movs	r2, #0
 8011814:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011816:	4b23      	ldr	r3, [pc, #140]	; (80118a4 <tcp_input+0x558>)
 8011818:	2200      	movs	r2, #0
 801181a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801181c:	4b22      	ldr	r3, [pc, #136]	; (80118a8 <tcp_input+0x55c>)
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	f003 0308 	and.w	r3, r3, #8
 8011824:	2b00      	cmp	r3, #0
 8011826:	d006      	beq.n	8011836 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	7b5b      	ldrb	r3, [r3, #13]
 801182c:	f043 0301 	orr.w	r3, r3, #1
 8011830:	b2da      	uxtb	r2, r3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011836:	69fb      	ldr	r3, [r7, #28]
 8011838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801183a:	2b00      	cmp	r3, #0
 801183c:	d038      	beq.n	80118b0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801183e:	69f8      	ldr	r0, [r7, #28]
 8011840:	f7ff f8c4 	bl	80109cc <tcp_process_refused_data>
 8011844:	4603      	mov	r3, r0
 8011846:	f113 0f0d 	cmn.w	r3, #13
 801184a:	d007      	beq.n	801185c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801184c:	69fb      	ldr	r3, [r7, #28]
 801184e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011850:	2b00      	cmp	r3, #0
 8011852:	d02d      	beq.n	80118b0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011854:	4b15      	ldr	r3, [pc, #84]	; (80118ac <tcp_input+0x560>)
 8011856:	881b      	ldrh	r3, [r3, #0]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d029      	beq.n	80118b0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801185c:	69fb      	ldr	r3, [r7, #28]
 801185e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011860:	2b00      	cmp	r3, #0
 8011862:	f040 8103 	bne.w	8011a6c <tcp_input+0x720>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011866:	69f8      	ldr	r0, [r7, #28]
 8011868:	f003 fa5e 	bl	8014d28 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801186c:	e0fe      	b.n	8011a6c <tcp_input+0x720>
 801186e:	bf00      	nop
 8011870:	240067c8 	.word	0x240067c8
 8011874:	24006a28 	.word	0x24006a28
 8011878:	0801a754 	.word	0x0801a754
 801187c:	0801a8c4 	.word	0x0801a8c4
 8011880:	0801a7e4 	.word	0x0801a7e4
 8011884:	2400a784 	.word	0x2400a784
 8011888:	0801a8f0 	.word	0x0801a8f0
 801188c:	2400a794 	.word	0x2400a794
 8011890:	0801a91c 	.word	0x0801a91c
 8011894:	2400a78c 	.word	0x2400a78c
 8011898:	240067b8 	.word	0x240067b8
 801189c:	240067e8 	.word	0x240067e8
 80118a0:	240067e5 	.word	0x240067e5
 80118a4:	240067e0 	.word	0x240067e0
 80118a8:	240067e4 	.word	0x240067e4
 80118ac:	240067e2 	.word	0x240067e2
      }
    }
    tcp_input_pcb = pcb;
 80118b0:	4a9c      	ldr	r2, [pc, #624]	; (8011b24 <tcp_input+0x7d8>)
 80118b2:	69fb      	ldr	r3, [r7, #28]
 80118b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80118b6:	69f8      	ldr	r0, [r7, #28]
 80118b8:	f000 fb0a 	bl	8011ed0 <tcp_process>
 80118bc:	4603      	mov	r3, r0
 80118be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80118c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118c4:	f113 0f0d 	cmn.w	r3, #13
 80118c8:	f000 80d2 	beq.w	8011a70 <tcp_input+0x724>
      if (recv_flags & TF_RESET) {
 80118cc:	4b96      	ldr	r3, [pc, #600]	; (8011b28 <tcp_input+0x7dc>)
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	f003 0308 	and.w	r3, r3, #8
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d015      	beq.n	8011904 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80118d8:	69fb      	ldr	r3, [r7, #28]
 80118da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d008      	beq.n	80118f4 <tcp_input+0x5a8>
 80118e2:	69fb      	ldr	r3, [r7, #28]
 80118e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80118e8:	69fa      	ldr	r2, [r7, #28]
 80118ea:	6912      	ldr	r2, [r2, #16]
 80118ec:	f06f 010d 	mvn.w	r1, #13
 80118f0:	4610      	mov	r0, r2
 80118f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80118f4:	69f9      	ldr	r1, [r7, #28]
 80118f6:	488d      	ldr	r0, [pc, #564]	; (8011b2c <tcp_input+0x7e0>)
 80118f8:	f7ff fbd2 	bl	80110a0 <tcp_pcb_remove>
        tcp_free(pcb);
 80118fc:	69f8      	ldr	r0, [r7, #28]
 80118fe:	f7fd fe25 	bl	800f54c <tcp_free>
 8011902:	e0c0      	b.n	8011a86 <tcp_input+0x73a>
      } else {
        err = ERR_OK;
 8011904:	2300      	movs	r3, #0
 8011906:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011908:	4b89      	ldr	r3, [pc, #548]	; (8011b30 <tcp_input+0x7e4>)
 801190a:	881b      	ldrh	r3, [r3, #0]
 801190c:	2b00      	cmp	r3, #0
 801190e:	d01b      	beq.n	8011948 <tcp_input+0x5fc>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011910:	4b87      	ldr	r3, [pc, #540]	; (8011b30 <tcp_input+0x7e4>)
 8011912:	881b      	ldrh	r3, [r3, #0]
 8011914:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011916:	69fb      	ldr	r3, [r7, #28]
 8011918:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801191a:	2b00      	cmp	r3, #0
 801191c:	d009      	beq.n	8011932 <tcp_input+0x5e6>
 801191e:	69fb      	ldr	r3, [r7, #28]
 8011920:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011922:	69fa      	ldr	r2, [r7, #28]
 8011924:	6910      	ldr	r0, [r2, #16]
 8011926:	89fa      	ldrh	r2, [r7, #14]
 8011928:	69f9      	ldr	r1, [r7, #28]
 801192a:	4798      	blx	r3
 801192c:	4603      	mov	r3, r0
 801192e:	74fb      	strb	r3, [r7, #19]
 8011930:	e001      	b.n	8011936 <tcp_input+0x5ea>
 8011932:	2300      	movs	r3, #0
 8011934:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011936:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801193a:	f113 0f0d 	cmn.w	r3, #13
 801193e:	f000 8099 	beq.w	8011a74 <tcp_input+0x728>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011942:	4b7b      	ldr	r3, [pc, #492]	; (8011b30 <tcp_input+0x7e4>)
 8011944:	2200      	movs	r2, #0
 8011946:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011948:	69f8      	ldr	r0, [r7, #28]
 801194a:	f000 f909 	bl	8011b60 <tcp_input_delayed_close>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	f040 8091 	bne.w	8011a78 <tcp_input+0x72c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011956:	4b77      	ldr	r3, [pc, #476]	; (8011b34 <tcp_input+0x7e8>)
 8011958:	681b      	ldr	r3, [r3, #0]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d041      	beq.n	80119e2 <tcp_input+0x696>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801195e:	69fb      	ldr	r3, [r7, #28]
 8011960:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011962:	2b00      	cmp	r3, #0
 8011964:	d006      	beq.n	8011974 <tcp_input+0x628>
 8011966:	4b74      	ldr	r3, [pc, #464]	; (8011b38 <tcp_input+0x7ec>)
 8011968:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801196c:	4973      	ldr	r1, [pc, #460]	; (8011b3c <tcp_input+0x7f0>)
 801196e:	4874      	ldr	r0, [pc, #464]	; (8011b40 <tcp_input+0x7f4>)
 8011970:	f004 fb84 	bl	801607c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011974:	69fb      	ldr	r3, [r7, #28]
 8011976:	8b5b      	ldrh	r3, [r3, #26]
 8011978:	f003 0310 	and.w	r3, r3, #16
 801197c:	2b00      	cmp	r3, #0
 801197e:	d008      	beq.n	8011992 <tcp_input+0x646>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011980:	4b6c      	ldr	r3, [pc, #432]	; (8011b34 <tcp_input+0x7e8>)
 8011982:	681b      	ldr	r3, [r3, #0]
 8011984:	4618      	mov	r0, r3
 8011986:	f7fd fb35 	bl	800eff4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801198a:	69f8      	ldr	r0, [r7, #28]
 801198c:	f7fe f918 	bl	800fbc0 <tcp_abort>
            goto aborted;
 8011990:	e079      	b.n	8011a86 <tcp_input+0x73a>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011992:	69fb      	ldr	r3, [r7, #28]
 8011994:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011998:	2b00      	cmp	r3, #0
 801199a:	d00c      	beq.n	80119b6 <tcp_input+0x66a>
 801199c:	69fb      	ldr	r3, [r7, #28]
 801199e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80119a2:	69fb      	ldr	r3, [r7, #28]
 80119a4:	6918      	ldr	r0, [r3, #16]
 80119a6:	4b63      	ldr	r3, [pc, #396]	; (8011b34 <tcp_input+0x7e8>)
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	2300      	movs	r3, #0
 80119ac:	69f9      	ldr	r1, [r7, #28]
 80119ae:	47a0      	blx	r4
 80119b0:	4603      	mov	r3, r0
 80119b2:	74fb      	strb	r3, [r7, #19]
 80119b4:	e008      	b.n	80119c8 <tcp_input+0x67c>
 80119b6:	4b5f      	ldr	r3, [pc, #380]	; (8011b34 <tcp_input+0x7e8>)
 80119b8:	681a      	ldr	r2, [r3, #0]
 80119ba:	2300      	movs	r3, #0
 80119bc:	69f9      	ldr	r1, [r7, #28]
 80119be:	2000      	movs	r0, #0
 80119c0:	f7ff f8b0 	bl	8010b24 <tcp_recv_null>
 80119c4:	4603      	mov	r3, r0
 80119c6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80119c8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119cc:	f113 0f0d 	cmn.w	r3, #13
 80119d0:	d054      	beq.n	8011a7c <tcp_input+0x730>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80119d2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d003      	beq.n	80119e2 <tcp_input+0x696>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80119da:	4b56      	ldr	r3, [pc, #344]	; (8011b34 <tcp_input+0x7e8>)
 80119dc:	681a      	ldr	r2, [r3, #0]
 80119de:	69fb      	ldr	r3, [r7, #28]
 80119e0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80119e2:	4b51      	ldr	r3, [pc, #324]	; (8011b28 <tcp_input+0x7dc>)
 80119e4:	781b      	ldrb	r3, [r3, #0]
 80119e6:	f003 0320 	and.w	r3, r3, #32
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d031      	beq.n	8011a52 <tcp_input+0x706>
          if (pcb->refused_data != NULL) {
 80119ee:	69fb      	ldr	r3, [r7, #28]
 80119f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d009      	beq.n	8011a0a <tcp_input+0x6be>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80119f6:	69fb      	ldr	r3, [r7, #28]
 80119f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80119fa:	7b5a      	ldrb	r2, [r3, #13]
 80119fc:	69fb      	ldr	r3, [r7, #28]
 80119fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011a00:	f042 0220 	orr.w	r2, r2, #32
 8011a04:	b2d2      	uxtb	r2, r2
 8011a06:	735a      	strb	r2, [r3, #13]
 8011a08:	e023      	b.n	8011a52 <tcp_input+0x706>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011a0a:	69fb      	ldr	r3, [r7, #28]
 8011a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a0e:	f640 3268 	movw	r2, #2920	; 0xb68
 8011a12:	4293      	cmp	r3, r2
 8011a14:	d005      	beq.n	8011a22 <tcp_input+0x6d6>
              pcb->rcv_wnd++;
 8011a16:	69fb      	ldr	r3, [r7, #28]
 8011a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011a1a:	3301      	adds	r3, #1
 8011a1c:	b29a      	uxth	r2, r3
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011a22:	69fb      	ldr	r3, [r7, #28]
 8011a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d00b      	beq.n	8011a44 <tcp_input+0x6f8>
 8011a2c:	69fb      	ldr	r3, [r7, #28]
 8011a2e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8011a32:	69fb      	ldr	r3, [r7, #28]
 8011a34:	6918      	ldr	r0, [r3, #16]
 8011a36:	2300      	movs	r3, #0
 8011a38:	2200      	movs	r2, #0
 8011a3a:	69f9      	ldr	r1, [r7, #28]
 8011a3c:	47a0      	blx	r4
 8011a3e:	4603      	mov	r3, r0
 8011a40:	74fb      	strb	r3, [r7, #19]
 8011a42:	e001      	b.n	8011a48 <tcp_input+0x6fc>
 8011a44:	2300      	movs	r3, #0
 8011a46:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011a48:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011a4c:	f113 0f0d 	cmn.w	r3, #13
 8011a50:	d016      	beq.n	8011a80 <tcp_input+0x734>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011a52:	4b34      	ldr	r3, [pc, #208]	; (8011b24 <tcp_input+0x7d8>)
 8011a54:	2200      	movs	r2, #0
 8011a56:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011a58:	69f8      	ldr	r0, [r7, #28]
 8011a5a:	f000 f881 	bl	8011b60 <tcp_input_delayed_close>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	2b00      	cmp	r3, #0
 8011a62:	d10f      	bne.n	8011a84 <tcp_input+0x738>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011a64:	69f8      	ldr	r0, [r7, #28]
 8011a66:	f002 fb59 	bl	801411c <tcp_output>
 8011a6a:	e00c      	b.n	8011a86 <tcp_input+0x73a>
        goto aborted;
 8011a6c:	bf00      	nop
 8011a6e:	e00a      	b.n	8011a86 <tcp_input+0x73a>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8011a70:	bf00      	nop
 8011a72:	e008      	b.n	8011a86 <tcp_input+0x73a>
              goto aborted;
 8011a74:	bf00      	nop
 8011a76:	e006      	b.n	8011a86 <tcp_input+0x73a>
          goto aborted;
 8011a78:	bf00      	nop
 8011a7a:	e004      	b.n	8011a86 <tcp_input+0x73a>
            goto aborted;
 8011a7c:	bf00      	nop
 8011a7e:	e002      	b.n	8011a86 <tcp_input+0x73a>
              goto aborted;
 8011a80:	bf00      	nop
 8011a82:	e000      	b.n	8011a86 <tcp_input+0x73a>
          goto aborted;
 8011a84:	bf00      	nop
    tcp_input_pcb = NULL;
 8011a86:	4b27      	ldr	r3, [pc, #156]	; (8011b24 <tcp_input+0x7d8>)
 8011a88:	2200      	movs	r2, #0
 8011a8a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8011a8c:	4b29      	ldr	r3, [pc, #164]	; (8011b34 <tcp_input+0x7e8>)
 8011a8e:	2200      	movs	r2, #0
 8011a90:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8011a92:	4b2c      	ldr	r3, [pc, #176]	; (8011b44 <tcp_input+0x7f8>)
 8011a94:	685b      	ldr	r3, [r3, #4]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d03f      	beq.n	8011b1a <tcp_input+0x7ce>
      pbuf_free(inseg.p);
 8011a9a:	4b2a      	ldr	r3, [pc, #168]	; (8011b44 <tcp_input+0x7f8>)
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7fd faa8 	bl	800eff4 <pbuf_free>
      inseg.p = NULL;
 8011aa4:	4b27      	ldr	r3, [pc, #156]	; (8011b44 <tcp_input+0x7f8>)
 8011aa6:	2200      	movs	r2, #0
 8011aa8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8011aaa:	e036      	b.n	8011b1a <tcp_input+0x7ce>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8011aac:	4b26      	ldr	r3, [pc, #152]	; (8011b48 <tcp_input+0x7fc>)
 8011aae:	681b      	ldr	r3, [r3, #0]
 8011ab0:	899b      	ldrh	r3, [r3, #12]
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7fb fe9d 	bl	800d7f4 <lwip_htons>
 8011aba:	4603      	mov	r3, r0
 8011abc:	b2db      	uxtb	r3, r3
 8011abe:	f003 0304 	and.w	r3, r3, #4
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d118      	bne.n	8011af8 <tcp_input+0x7ac>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ac6:	4b21      	ldr	r3, [pc, #132]	; (8011b4c <tcp_input+0x800>)
 8011ac8:	6819      	ldr	r1, [r3, #0]
 8011aca:	4b21      	ldr	r3, [pc, #132]	; (8011b50 <tcp_input+0x804>)
 8011acc:	881b      	ldrh	r3, [r3, #0]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	4b20      	ldr	r3, [pc, #128]	; (8011b54 <tcp_input+0x808>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ad6:	4b1c      	ldr	r3, [pc, #112]	; (8011b48 <tcp_input+0x7fc>)
 8011ad8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ada:	885b      	ldrh	r3, [r3, #2]
 8011adc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011ade:	4a1a      	ldr	r2, [pc, #104]	; (8011b48 <tcp_input+0x7fc>)
 8011ae0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011ae2:	8812      	ldrh	r2, [r2, #0]
 8011ae4:	b292      	uxth	r2, r2
 8011ae6:	9202      	str	r2, [sp, #8]
 8011ae8:	9301      	str	r3, [sp, #4]
 8011aea:	4b1b      	ldr	r3, [pc, #108]	; (8011b58 <tcp_input+0x80c>)
 8011aec:	9300      	str	r3, [sp, #0]
 8011aee:	4b1b      	ldr	r3, [pc, #108]	; (8011b5c <tcp_input+0x810>)
 8011af0:	4602      	mov	r2, r0
 8011af2:	2000      	movs	r0, #0
 8011af4:	f003 f8c6 	bl	8014c84 <tcp_rst>
    pbuf_free(p);
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f7fd fa7b 	bl	800eff4 <pbuf_free>
  return;
 8011afe:	e00c      	b.n	8011b1a <tcp_input+0x7ce>
    goto dropped;
 8011b00:	bf00      	nop
 8011b02:	e006      	b.n	8011b12 <tcp_input+0x7c6>
    goto dropped;
 8011b04:	bf00      	nop
 8011b06:	e004      	b.n	8011b12 <tcp_input+0x7c6>
    goto dropped;
 8011b08:	bf00      	nop
 8011b0a:	e002      	b.n	8011b12 <tcp_input+0x7c6>
      goto dropped;
 8011b0c:	bf00      	nop
 8011b0e:	e000      	b.n	8011b12 <tcp_input+0x7c6>
      goto dropped;
 8011b10:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8011b12:	6878      	ldr	r0, [r7, #4]
 8011b14:	f7fd fa6e 	bl	800eff4 <pbuf_free>
 8011b18:	e000      	b.n	8011b1c <tcp_input+0x7d0>
  return;
 8011b1a:	bf00      	nop
}
 8011b1c:	3724      	adds	r7, #36	; 0x24
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	bd90      	pop	{r4, r7, pc}
 8011b22:	bf00      	nop
 8011b24:	2400a798 	.word	0x2400a798
 8011b28:	240067e5 	.word	0x240067e5
 8011b2c:	2400a784 	.word	0x2400a784
 8011b30:	240067e0 	.word	0x240067e0
 8011b34:	240067e8 	.word	0x240067e8
 8011b38:	0801a754 	.word	0x0801a754
 8011b3c:	0801a94c 	.word	0x0801a94c
 8011b40:	0801a7e4 	.word	0x0801a7e4
 8011b44:	240067b8 	.word	0x240067b8
 8011b48:	240067c8 	.word	0x240067c8
 8011b4c:	240067dc 	.word	0x240067dc
 8011b50:	240067e2 	.word	0x240067e2
 8011b54:	240067d8 	.word	0x240067d8
 8011b58:	24006a38 	.word	0x24006a38
 8011b5c:	24006a3c 	.word	0x24006a3c

08011b60 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b082      	sub	sp, #8
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d106      	bne.n	8011b7c <tcp_input_delayed_close+0x1c>
 8011b6e:	4b17      	ldr	r3, [pc, #92]	; (8011bcc <tcp_input_delayed_close+0x6c>)
 8011b70:	f240 225a 	movw	r2, #602	; 0x25a
 8011b74:	4916      	ldr	r1, [pc, #88]	; (8011bd0 <tcp_input_delayed_close+0x70>)
 8011b76:	4817      	ldr	r0, [pc, #92]	; (8011bd4 <tcp_input_delayed_close+0x74>)
 8011b78:	f004 fa80 	bl	801607c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8011b7c:	4b16      	ldr	r3, [pc, #88]	; (8011bd8 <tcp_input_delayed_close+0x78>)
 8011b7e:	781b      	ldrb	r3, [r3, #0]
 8011b80:	f003 0310 	and.w	r3, r3, #16
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d01c      	beq.n	8011bc2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	8b5b      	ldrh	r3, [r3, #26]
 8011b8c:	f003 0310 	and.w	r3, r3, #16
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d10d      	bne.n	8011bb0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d008      	beq.n	8011bb0 <tcp_input_delayed_close+0x50>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	6912      	ldr	r2, [r2, #16]
 8011ba8:	f06f 010e 	mvn.w	r1, #14
 8011bac:	4610      	mov	r0, r2
 8011bae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011bb0:	6879      	ldr	r1, [r7, #4]
 8011bb2:	480a      	ldr	r0, [pc, #40]	; (8011bdc <tcp_input_delayed_close+0x7c>)
 8011bb4:	f7ff fa74 	bl	80110a0 <tcp_pcb_remove>
    tcp_free(pcb);
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7fd fcc7 	bl	800f54c <tcp_free>
    return 1;
 8011bbe:	2301      	movs	r3, #1
 8011bc0:	e000      	b.n	8011bc4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8011bc2:	2300      	movs	r3, #0
}
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	3708      	adds	r7, #8
 8011bc8:	46bd      	mov	sp, r7
 8011bca:	bd80      	pop	{r7, pc}
 8011bcc:	0801a754 	.word	0x0801a754
 8011bd0:	0801a968 	.word	0x0801a968
 8011bd4:	0801a7e4 	.word	0x0801a7e4
 8011bd8:	240067e5 	.word	0x240067e5
 8011bdc:	2400a784 	.word	0x2400a784

08011be0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8011be0:	b590      	push	{r4, r7, lr}
 8011be2:	b08b      	sub	sp, #44	; 0x2c
 8011be4:	af04      	add	r7, sp, #16
 8011be6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8011be8:	4b6f      	ldr	r3, [pc, #444]	; (8011da8 <tcp_listen_input+0x1c8>)
 8011bea:	781b      	ldrb	r3, [r3, #0]
 8011bec:	f003 0304 	and.w	r3, r3, #4
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	f040 80d2 	bne.w	8011d9a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d106      	bne.n	8011c0a <tcp_listen_input+0x2a>
 8011bfc:	4b6b      	ldr	r3, [pc, #428]	; (8011dac <tcp_listen_input+0x1cc>)
 8011bfe:	f240 2281 	movw	r2, #641	; 0x281
 8011c02:	496b      	ldr	r1, [pc, #428]	; (8011db0 <tcp_listen_input+0x1d0>)
 8011c04:	486b      	ldr	r0, [pc, #428]	; (8011db4 <tcp_listen_input+0x1d4>)
 8011c06:	f004 fa39 	bl	801607c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8011c0a:	4b67      	ldr	r3, [pc, #412]	; (8011da8 <tcp_listen_input+0x1c8>)
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	f003 0310 	and.w	r3, r3, #16
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d019      	beq.n	8011c4a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c16:	4b68      	ldr	r3, [pc, #416]	; (8011db8 <tcp_listen_input+0x1d8>)
 8011c18:	6819      	ldr	r1, [r3, #0]
 8011c1a:	4b68      	ldr	r3, [pc, #416]	; (8011dbc <tcp_listen_input+0x1dc>)
 8011c1c:	881b      	ldrh	r3, [r3, #0]
 8011c1e:	461a      	mov	r2, r3
 8011c20:	4b67      	ldr	r3, [pc, #412]	; (8011dc0 <tcp_listen_input+0x1e0>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c26:	4b67      	ldr	r3, [pc, #412]	; (8011dc4 <tcp_listen_input+0x1e4>)
 8011c28:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c2a:	885b      	ldrh	r3, [r3, #2]
 8011c2c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011c2e:	4a65      	ldr	r2, [pc, #404]	; (8011dc4 <tcp_listen_input+0x1e4>)
 8011c30:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011c32:	8812      	ldrh	r2, [r2, #0]
 8011c34:	b292      	uxth	r2, r2
 8011c36:	9202      	str	r2, [sp, #8]
 8011c38:	9301      	str	r3, [sp, #4]
 8011c3a:	4b63      	ldr	r3, [pc, #396]	; (8011dc8 <tcp_listen_input+0x1e8>)
 8011c3c:	9300      	str	r3, [sp, #0]
 8011c3e:	4b63      	ldr	r3, [pc, #396]	; (8011dcc <tcp_listen_input+0x1ec>)
 8011c40:	4602      	mov	r2, r0
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f003 f81e 	bl	8014c84 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8011c48:	e0a9      	b.n	8011d9e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8011c4a:	4b57      	ldr	r3, [pc, #348]	; (8011da8 <tcp_listen_input+0x1c8>)
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	f003 0302 	and.w	r3, r3, #2
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	f000 80a3 	beq.w	8011d9e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	7d5b      	ldrb	r3, [r3, #21]
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f7ff f885 	bl	8010d6c <tcp_alloc>
 8011c62:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8011c64:	697b      	ldr	r3, [r7, #20]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d111      	bne.n	8011c8e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	699b      	ldr	r3, [r3, #24]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00a      	beq.n	8011c88 <tcp_listen_input+0xa8>
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	699b      	ldr	r3, [r3, #24]
 8011c76:	687a      	ldr	r2, [r7, #4]
 8011c78:	6910      	ldr	r0, [r2, #16]
 8011c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c7e:	2100      	movs	r1, #0
 8011c80:	4798      	blx	r3
 8011c82:	4603      	mov	r3, r0
 8011c84:	73bb      	strb	r3, [r7, #14]
      return;
 8011c86:	e08b      	b.n	8011da0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8011c88:	23f0      	movs	r3, #240	; 0xf0
 8011c8a:	73bb      	strb	r3, [r7, #14]
      return;
 8011c8c:	e088      	b.n	8011da0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8011c8e:	4b50      	ldr	r3, [pc, #320]	; (8011dd0 <tcp_listen_input+0x1f0>)
 8011c90:	695a      	ldr	r2, [r3, #20]
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8011c96:	4b4e      	ldr	r3, [pc, #312]	; (8011dd0 <tcp_listen_input+0x1f0>)
 8011c98:	691a      	ldr	r2, [r3, #16]
 8011c9a:	697b      	ldr	r3, [r7, #20]
 8011c9c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	8ada      	ldrh	r2, [r3, #22]
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8011ca6:	4b47      	ldr	r3, [pc, #284]	; (8011dc4 <tcp_listen_input+0x1e4>)
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	881b      	ldrh	r3, [r3, #0]
 8011cac:	b29a      	uxth	r2, r3
 8011cae:	697b      	ldr	r3, [r7, #20]
 8011cb0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	2203      	movs	r2, #3
 8011cb6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8011cb8:	4b41      	ldr	r3, [pc, #260]	; (8011dc0 <tcp_listen_input+0x1e0>)
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	1c5a      	adds	r2, r3, #1
 8011cbe:	697b      	ldr	r3, [r7, #20]
 8011cc0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8011cca:	6978      	ldr	r0, [r7, #20]
 8011ccc:	f7ff fa6e 	bl	80111ac <tcp_next_iss>
 8011cd0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	693a      	ldr	r2, [r7, #16]
 8011cd6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8011cd8:	697b      	ldr	r3, [r7, #20]
 8011cda:	693a      	ldr	r2, [r7, #16]
 8011cdc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	693a      	ldr	r2, [r7, #16]
 8011ce2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	693a      	ldr	r2, [r7, #16]
 8011ce8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8011cea:	4b35      	ldr	r3, [pc, #212]	; (8011dc0 <tcp_listen_input+0x1e0>)
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	1e5a      	subs	r2, r3, #1
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	691a      	ldr	r2, [r3, #16]
 8011cf8:	697b      	ldr	r3, [r7, #20]
 8011cfa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8011cfc:	697b      	ldr	r3, [r7, #20]
 8011cfe:	687a      	ldr	r2, [r7, #4]
 8011d00:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	7a5b      	ldrb	r3, [r3, #9]
 8011d06:	f003 030c 	and.w	r3, r3, #12
 8011d0a:	b2da      	uxtb	r2, r3
 8011d0c:	697b      	ldr	r3, [r7, #20]
 8011d0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	7a1a      	ldrb	r2, [r3, #8]
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8011d18:	4b2e      	ldr	r3, [pc, #184]	; (8011dd4 <tcp_listen_input+0x1f4>)
 8011d1a:	681a      	ldr	r2, [r3, #0]
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	60da      	str	r2, [r3, #12]
 8011d20:	4a2c      	ldr	r2, [pc, #176]	; (8011dd4 <tcp_listen_input+0x1f4>)
 8011d22:	697b      	ldr	r3, [r7, #20]
 8011d24:	6013      	str	r3, [r2, #0]
 8011d26:	f003 f96f 	bl	8015008 <tcp_timer_needed>
 8011d2a:	4b2b      	ldr	r3, [pc, #172]	; (8011dd8 <tcp_listen_input+0x1f8>)
 8011d2c:	2201      	movs	r2, #1
 8011d2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8011d30:	6978      	ldr	r0, [r7, #20]
 8011d32:	f001 f9d5 	bl	80130e0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8011d36:	4b23      	ldr	r3, [pc, #140]	; (8011dc4 <tcp_listen_input+0x1e4>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	89db      	ldrh	r3, [r3, #14]
 8011d3c:	b29a      	uxth	r2, r3
 8011d3e:	697b      	ldr	r3, [r7, #20]
 8011d40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8011d44:	697b      	ldr	r3, [r7, #20]
 8011d46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8011d50:	697b      	ldr	r3, [r7, #20]
 8011d52:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	3304      	adds	r3, #4
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7fa fc3b 	bl	800c5d4 <ip4_route>
 8011d5e:	4601      	mov	r1, r0
 8011d60:	697b      	ldr	r3, [r7, #20]
 8011d62:	3304      	adds	r3, #4
 8011d64:	461a      	mov	r2, r3
 8011d66:	4620      	mov	r0, r4
 8011d68:	f7ff fa46 	bl	80111f8 <tcp_eff_send_mss_netif>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	461a      	mov	r2, r3
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8011d74:	2112      	movs	r1, #18
 8011d76:	6978      	ldr	r0, [r7, #20]
 8011d78:	f002 f8e2 	bl	8013f40 <tcp_enqueue_flags>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8011d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d004      	beq.n	8011d92 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8011d88:	2100      	movs	r1, #0
 8011d8a:	6978      	ldr	r0, [r7, #20]
 8011d8c:	f7fd fe64 	bl	800fa58 <tcp_abandon>
      return;
 8011d90:	e006      	b.n	8011da0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8011d92:	6978      	ldr	r0, [r7, #20]
 8011d94:	f002 f9c2 	bl	801411c <tcp_output>
  return;
 8011d98:	e001      	b.n	8011d9e <tcp_listen_input+0x1be>
    return;
 8011d9a:	bf00      	nop
 8011d9c:	e000      	b.n	8011da0 <tcp_listen_input+0x1c0>
  return;
 8011d9e:	bf00      	nop
}
 8011da0:	371c      	adds	r7, #28
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd90      	pop	{r4, r7, pc}
 8011da6:	bf00      	nop
 8011da8:	240067e4 	.word	0x240067e4
 8011dac:	0801a754 	.word	0x0801a754
 8011db0:	0801a990 	.word	0x0801a990
 8011db4:	0801a7e4 	.word	0x0801a7e4
 8011db8:	240067dc 	.word	0x240067dc
 8011dbc:	240067e2 	.word	0x240067e2
 8011dc0:	240067d8 	.word	0x240067d8
 8011dc4:	240067c8 	.word	0x240067c8
 8011dc8:	24006a38 	.word	0x24006a38
 8011dcc:	24006a3c 	.word	0x24006a3c
 8011dd0:	24006a28 	.word	0x24006a28
 8011dd4:	2400a784 	.word	0x2400a784
 8011dd8:	2400a780 	.word	0x2400a780

08011ddc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b086      	sub	sp, #24
 8011de0:	af04      	add	r7, sp, #16
 8011de2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8011de4:	4b2f      	ldr	r3, [pc, #188]	; (8011ea4 <tcp_timewait_input+0xc8>)
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	f003 0304 	and.w	r3, r3, #4
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d153      	bne.n	8011e98 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d106      	bne.n	8011e04 <tcp_timewait_input+0x28>
 8011df6:	4b2c      	ldr	r3, [pc, #176]	; (8011ea8 <tcp_timewait_input+0xcc>)
 8011df8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011dfc:	492b      	ldr	r1, [pc, #172]	; (8011eac <tcp_timewait_input+0xd0>)
 8011dfe:	482c      	ldr	r0, [pc, #176]	; (8011eb0 <tcp_timewait_input+0xd4>)
 8011e00:	f004 f93c 	bl	801607c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8011e04:	4b27      	ldr	r3, [pc, #156]	; (8011ea4 <tcp_timewait_input+0xc8>)
 8011e06:	781b      	ldrb	r3, [r3, #0]
 8011e08:	f003 0302 	and.w	r3, r3, #2
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d02a      	beq.n	8011e66 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8011e10:	4b28      	ldr	r3, [pc, #160]	; (8011eb4 <tcp_timewait_input+0xd8>)
 8011e12:	681a      	ldr	r2, [r3, #0]
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e18:	1ad3      	subs	r3, r2, r3
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	db2d      	blt.n	8011e7a <tcp_timewait_input+0x9e>
 8011e1e:	4b25      	ldr	r3, [pc, #148]	; (8011eb4 <tcp_timewait_input+0xd8>)
 8011e20:	681a      	ldr	r2, [r3, #0]
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e26:	6879      	ldr	r1, [r7, #4]
 8011e28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011e2a:	440b      	add	r3, r1
 8011e2c:	1ad3      	subs	r3, r2, r3
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	dc23      	bgt.n	8011e7a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e32:	4b21      	ldr	r3, [pc, #132]	; (8011eb8 <tcp_timewait_input+0xdc>)
 8011e34:	6819      	ldr	r1, [r3, #0]
 8011e36:	4b21      	ldr	r3, [pc, #132]	; (8011ebc <tcp_timewait_input+0xe0>)
 8011e38:	881b      	ldrh	r3, [r3, #0]
 8011e3a:	461a      	mov	r2, r3
 8011e3c:	4b1d      	ldr	r3, [pc, #116]	; (8011eb4 <tcp_timewait_input+0xd8>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e42:	4b1f      	ldr	r3, [pc, #124]	; (8011ec0 <tcp_timewait_input+0xe4>)
 8011e44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e46:	885b      	ldrh	r3, [r3, #2]
 8011e48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8011e4a:	4a1d      	ldr	r2, [pc, #116]	; (8011ec0 <tcp_timewait_input+0xe4>)
 8011e4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8011e4e:	8812      	ldrh	r2, [r2, #0]
 8011e50:	b292      	uxth	r2, r2
 8011e52:	9202      	str	r2, [sp, #8]
 8011e54:	9301      	str	r3, [sp, #4]
 8011e56:	4b1b      	ldr	r3, [pc, #108]	; (8011ec4 <tcp_timewait_input+0xe8>)
 8011e58:	9300      	str	r3, [sp, #0]
 8011e5a:	4b1b      	ldr	r3, [pc, #108]	; (8011ec8 <tcp_timewait_input+0xec>)
 8011e5c:	4602      	mov	r2, r0
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f002 ff10 	bl	8014c84 <tcp_rst>
      return;
 8011e64:	e01b      	b.n	8011e9e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8011e66:	4b0f      	ldr	r3, [pc, #60]	; (8011ea4 <tcp_timewait_input+0xc8>)
 8011e68:	781b      	ldrb	r3, [r3, #0]
 8011e6a:	f003 0301 	and.w	r3, r3, #1
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d003      	beq.n	8011e7a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8011e72:	4b16      	ldr	r3, [pc, #88]	; (8011ecc <tcp_timewait_input+0xf0>)
 8011e74:	681a      	ldr	r2, [r3, #0]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8011e7a:	4b10      	ldr	r3, [pc, #64]	; (8011ebc <tcp_timewait_input+0xe0>)
 8011e7c:	881b      	ldrh	r3, [r3, #0]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d00c      	beq.n	8011e9c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	8b5b      	ldrh	r3, [r3, #26]
 8011e86:	f043 0302 	orr.w	r3, r3, #2
 8011e8a:	b29a      	uxth	r2, r3
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f002 f943 	bl	801411c <tcp_output>
  }
  return;
 8011e96:	e001      	b.n	8011e9c <tcp_timewait_input+0xc0>
    return;
 8011e98:	bf00      	nop
 8011e9a:	e000      	b.n	8011e9e <tcp_timewait_input+0xc2>
  return;
 8011e9c:	bf00      	nop
}
 8011e9e:	3708      	adds	r7, #8
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	bd80      	pop	{r7, pc}
 8011ea4:	240067e4 	.word	0x240067e4
 8011ea8:	0801a754 	.word	0x0801a754
 8011eac:	0801a9b0 	.word	0x0801a9b0
 8011eb0:	0801a7e4 	.word	0x0801a7e4
 8011eb4:	240067d8 	.word	0x240067d8
 8011eb8:	240067dc 	.word	0x240067dc
 8011ebc:	240067e2 	.word	0x240067e2
 8011ec0:	240067c8 	.word	0x240067c8
 8011ec4:	24006a38 	.word	0x24006a38
 8011ec8:	24006a3c 	.word	0x24006a3c
 8011ecc:	2400a788 	.word	0x2400a788

08011ed0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8011ed0:	b590      	push	{r4, r7, lr}
 8011ed2:	b08d      	sub	sp, #52	; 0x34
 8011ed4:	af04      	add	r7, sp, #16
 8011ed6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8011ed8:	2300      	movs	r3, #0
 8011eda:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8011edc:	2300      	movs	r3, #0
 8011ede:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d106      	bne.n	8011ef4 <tcp_process+0x24>
 8011ee6:	4ba5      	ldr	r3, [pc, #660]	; (801217c <tcp_process+0x2ac>)
 8011ee8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011eec:	49a4      	ldr	r1, [pc, #656]	; (8012180 <tcp_process+0x2b0>)
 8011eee:	48a5      	ldr	r0, [pc, #660]	; (8012184 <tcp_process+0x2b4>)
 8011ef0:	f004 f8c4 	bl	801607c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8011ef4:	4ba4      	ldr	r3, [pc, #656]	; (8012188 <tcp_process+0x2b8>)
 8011ef6:	781b      	ldrb	r3, [r3, #0]
 8011ef8:	f003 0304 	and.w	r3, r3, #4
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d04e      	beq.n	8011f9e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	7d1b      	ldrb	r3, [r3, #20]
 8011f04:	2b02      	cmp	r3, #2
 8011f06:	d108      	bne.n	8011f1a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f0c:	4b9f      	ldr	r3, [pc, #636]	; (801218c <tcp_process+0x2bc>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	429a      	cmp	r2, r3
 8011f12:	d123      	bne.n	8011f5c <tcp_process+0x8c>
        acceptable = 1;
 8011f14:	2301      	movs	r3, #1
 8011f16:	76fb      	strb	r3, [r7, #27]
 8011f18:	e020      	b.n	8011f5c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011f1e:	4b9c      	ldr	r3, [pc, #624]	; (8012190 <tcp_process+0x2c0>)
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	429a      	cmp	r2, r3
 8011f24:	d102      	bne.n	8011f2c <tcp_process+0x5c>
        acceptable = 1;
 8011f26:	2301      	movs	r3, #1
 8011f28:	76fb      	strb	r3, [r7, #27]
 8011f2a:	e017      	b.n	8011f5c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011f2c:	4b98      	ldr	r3, [pc, #608]	; (8012190 <tcp_process+0x2c0>)
 8011f2e:	681a      	ldr	r2, [r3, #0]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f34:	1ad3      	subs	r3, r2, r3
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	db10      	blt.n	8011f5c <tcp_process+0x8c>
 8011f3a:	4b95      	ldr	r3, [pc, #596]	; (8012190 <tcp_process+0x2c0>)
 8011f3c:	681a      	ldr	r2, [r3, #0]
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f42:	6879      	ldr	r1, [r7, #4]
 8011f44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011f46:	440b      	add	r3, r1
 8011f48:	1ad3      	subs	r3, r2, r3
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	dc06      	bgt.n	8011f5c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	8b5b      	ldrh	r3, [r3, #26]
 8011f52:	f043 0302 	orr.w	r3, r3, #2
 8011f56:	b29a      	uxth	r2, r3
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8011f5c:	7efb      	ldrb	r3, [r7, #27]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d01b      	beq.n	8011f9a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	7d1b      	ldrb	r3, [r3, #20]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d106      	bne.n	8011f78 <tcp_process+0xa8>
 8011f6a:	4b84      	ldr	r3, [pc, #528]	; (801217c <tcp_process+0x2ac>)
 8011f6c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8011f70:	4988      	ldr	r1, [pc, #544]	; (8012194 <tcp_process+0x2c4>)
 8011f72:	4884      	ldr	r0, [pc, #528]	; (8012184 <tcp_process+0x2b4>)
 8011f74:	f004 f882 	bl	801607c <iprintf>
      recv_flags |= TF_RESET;
 8011f78:	4b87      	ldr	r3, [pc, #540]	; (8012198 <tcp_process+0x2c8>)
 8011f7a:	781b      	ldrb	r3, [r3, #0]
 8011f7c:	f043 0308 	orr.w	r3, r3, #8
 8011f80:	b2da      	uxtb	r2, r3
 8011f82:	4b85      	ldr	r3, [pc, #532]	; (8012198 <tcp_process+0x2c8>)
 8011f84:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	8b5b      	ldrh	r3, [r3, #26]
 8011f8a:	f023 0301 	bic.w	r3, r3, #1
 8011f8e:	b29a      	uxth	r2, r3
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8011f94:	f06f 030d 	mvn.w	r3, #13
 8011f98:	e37a      	b.n	8012690 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	e378      	b.n	8012690 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8011f9e:	4b7a      	ldr	r3, [pc, #488]	; (8012188 <tcp_process+0x2b8>)
 8011fa0:	781b      	ldrb	r3, [r3, #0]
 8011fa2:	f003 0302 	and.w	r3, r3, #2
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d010      	beq.n	8011fcc <tcp_process+0xfc>
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	7d1b      	ldrb	r3, [r3, #20]
 8011fae:	2b02      	cmp	r3, #2
 8011fb0:	d00c      	beq.n	8011fcc <tcp_process+0xfc>
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	7d1b      	ldrb	r3, [r3, #20]
 8011fb6:	2b03      	cmp	r3, #3
 8011fb8:	d008      	beq.n	8011fcc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	8b5b      	ldrh	r3, [r3, #26]
 8011fbe:	f043 0302 	orr.w	r3, r3, #2
 8011fc2:	b29a      	uxth	r2, r3
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	e361      	b.n	8012690 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	8b5b      	ldrh	r3, [r3, #26]
 8011fd0:	f003 0310 	and.w	r3, r3, #16
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d103      	bne.n	8011fe0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8011fd8:	4b70      	ldr	r3, [pc, #448]	; (801219c <tcp_process+0x2cc>)
 8011fda:	681a      	ldr	r2, [r3, #0]
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pcb->persist_probe = 0;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2200      	movs	r2, #0
 8011fec:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8011ff0:	6878      	ldr	r0, [r7, #4]
 8011ff2:	f001 f875 	bl	80130e0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	7d1b      	ldrb	r3, [r3, #20]
 8011ffa:	3b02      	subs	r3, #2
 8011ffc:	2b07      	cmp	r3, #7
 8011ffe:	f200 8337 	bhi.w	8012670 <tcp_process+0x7a0>
 8012002:	a201      	add	r2, pc, #4	; (adr r2, 8012008 <tcp_process+0x138>)
 8012004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012008:	08012029 	.word	0x08012029
 801200c:	08012259 	.word	0x08012259
 8012010:	080123d1 	.word	0x080123d1
 8012014:	080123fb 	.word	0x080123fb
 8012018:	0801251f 	.word	0x0801251f
 801201c:	080123d1 	.word	0x080123d1
 8012020:	080125ab 	.word	0x080125ab
 8012024:	0801263b 	.word	0x0801263b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8012028:	4b57      	ldr	r3, [pc, #348]	; (8012188 <tcp_process+0x2b8>)
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	f003 0310 	and.w	r3, r3, #16
 8012030:	2b00      	cmp	r3, #0
 8012032:	f000 80e4 	beq.w	80121fe <tcp_process+0x32e>
 8012036:	4b54      	ldr	r3, [pc, #336]	; (8012188 <tcp_process+0x2b8>)
 8012038:	781b      	ldrb	r3, [r3, #0]
 801203a:	f003 0302 	and.w	r3, r3, #2
 801203e:	2b00      	cmp	r3, #0
 8012040:	f000 80dd 	beq.w	80121fe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012048:	1c5a      	adds	r2, r3, #1
 801204a:	4b50      	ldr	r3, [pc, #320]	; (801218c <tcp_process+0x2bc>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	429a      	cmp	r2, r3
 8012050:	f040 80d5 	bne.w	80121fe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012054:	4b4e      	ldr	r3, [pc, #312]	; (8012190 <tcp_process+0x2c0>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	1c5a      	adds	r2, r3, #1
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012066:	4b49      	ldr	r3, [pc, #292]	; (801218c <tcp_process+0x2bc>)
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801206e:	4b4c      	ldr	r3, [pc, #304]	; (80121a0 <tcp_process+0x2d0>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	89db      	ldrh	r3, [r3, #14]
 8012074:	b29a      	uxth	r2, r3
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012088:	4b41      	ldr	r3, [pc, #260]	; (8012190 <tcp_process+0x2c0>)
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	1e5a      	subs	r2, r3, #1
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	2204      	movs	r2, #4
 8012096:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	3304      	adds	r3, #4
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7fa fa97 	bl	800c5d4 <ip4_route>
 80120a6:	4601      	mov	r1, r0
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	3304      	adds	r3, #4
 80120ac:	461a      	mov	r2, r3
 80120ae:	4620      	mov	r0, r4
 80120b0:	f7ff f8a2 	bl	80111f8 <tcp_eff_send_mss_netif>
 80120b4:	4603      	mov	r3, r0
 80120b6:	461a      	mov	r2, r3
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120c0:	009a      	lsls	r2, r3, #2
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120c6:	005b      	lsls	r3, r3, #1
 80120c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80120cc:	428b      	cmp	r3, r1
 80120ce:	bf38      	it	cc
 80120d0:	460b      	movcc	r3, r1
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d204      	bcs.n	80120e0 <tcp_process+0x210>
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120da:	009b      	lsls	r3, r3, #2
 80120dc:	b29b      	uxth	r3, r3
 80120de:	e00d      	b.n	80120fc <tcp_process+0x22c>
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120e4:	005b      	lsls	r3, r3, #1
 80120e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80120ea:	4293      	cmp	r3, r2
 80120ec:	d904      	bls.n	80120f8 <tcp_process+0x228>
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120f2:	005b      	lsls	r3, r3, #1
 80120f4:	b29b      	uxth	r3, r3
 80120f6:	e001      	b.n	80120fc <tcp_process+0x22c>
 80120f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80120fc:	687a      	ldr	r2, [r7, #4]
 80120fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012108:	2b00      	cmp	r3, #0
 801210a:	d106      	bne.n	801211a <tcp_process+0x24a>
 801210c:	4b1b      	ldr	r3, [pc, #108]	; (801217c <tcp_process+0x2ac>)
 801210e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8012112:	4924      	ldr	r1, [pc, #144]	; (80121a4 <tcp_process+0x2d4>)
 8012114:	481b      	ldr	r0, [pc, #108]	; (8012184 <tcp_process+0x2b4>)
 8012116:	f003 ffb1 	bl	801607c <iprintf>
        --pcb->snd_queuelen;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012120:	3b01      	subs	r3, #1
 8012122:	b29a      	uxth	r2, r3
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801212e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8012130:	69fb      	ldr	r3, [r7, #28]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d111      	bne.n	801215a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801213a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801213c:	69fb      	ldr	r3, [r7, #28]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d106      	bne.n	8012150 <tcp_process+0x280>
 8012142:	4b0e      	ldr	r3, [pc, #56]	; (801217c <tcp_process+0x2ac>)
 8012144:	f44f 725d 	mov.w	r2, #884	; 0x374
 8012148:	4917      	ldr	r1, [pc, #92]	; (80121a8 <tcp_process+0x2d8>)
 801214a:	480e      	ldr	r0, [pc, #56]	; (8012184 <tcp_process+0x2b4>)
 801214c:	f003 ff96 	bl	801607c <iprintf>
          pcb->unsent = rseg->next;
 8012150:	69fb      	ldr	r3, [r7, #28]
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	66da      	str	r2, [r3, #108]	; 0x6c
 8012158:	e003      	b.n	8012162 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801215a:	69fb      	ldr	r3, [r7, #28]
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012162:	69f8      	ldr	r0, [r7, #28]
 8012164:	f7fe fcc5 	bl	8010af2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801216c:	2b00      	cmp	r3, #0
 801216e:	d11d      	bne.n	80121ac <tcp_process+0x2dc>
          pcb->rtime = -1;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012176:	861a      	strh	r2, [r3, #48]	; 0x30
 8012178:	e01f      	b.n	80121ba <tcp_process+0x2ea>
 801217a:	bf00      	nop
 801217c:	0801a754 	.word	0x0801a754
 8012180:	0801a9d0 	.word	0x0801a9d0
 8012184:	0801a7e4 	.word	0x0801a7e4
 8012188:	240067e4 	.word	0x240067e4
 801218c:	240067dc 	.word	0x240067dc
 8012190:	240067d8 	.word	0x240067d8
 8012194:	0801a9ec 	.word	0x0801a9ec
 8012198:	240067e5 	.word	0x240067e5
 801219c:	2400a788 	.word	0x2400a788
 80121a0:	240067c8 	.word	0x240067c8
 80121a4:	0801aa0c 	.word	0x0801aa0c
 80121a8:	0801aa24 	.word	0x0801aa24
        } else {
          pcb->rtime = 0;
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	2200      	movs	r2, #0
 80121b0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	2200      	movs	r2, #0
 80121b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d00a      	beq.n	80121da <tcp_process+0x30a>
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80121ca:	687a      	ldr	r2, [r7, #4]
 80121cc:	6910      	ldr	r0, [r2, #16]
 80121ce:	2200      	movs	r2, #0
 80121d0:	6879      	ldr	r1, [r7, #4]
 80121d2:	4798      	blx	r3
 80121d4:	4603      	mov	r3, r0
 80121d6:	76bb      	strb	r3, [r7, #26]
 80121d8:	e001      	b.n	80121de <tcp_process+0x30e>
 80121da:	2300      	movs	r3, #0
 80121dc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80121de:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80121e2:	f113 0f0d 	cmn.w	r3, #13
 80121e6:	d102      	bne.n	80121ee <tcp_process+0x31e>
          return ERR_ABRT;
 80121e8:	f06f 030c 	mvn.w	r3, #12
 80121ec:	e250      	b.n	8012690 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	8b5b      	ldrh	r3, [r3, #26]
 80121f2:	f043 0302 	orr.w	r3, r3, #2
 80121f6:	b29a      	uxth	r2, r3
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80121fc:	e23a      	b.n	8012674 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80121fe:	4b9d      	ldr	r3, [pc, #628]	; (8012474 <tcp_process+0x5a4>)
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	f003 0310 	and.w	r3, r3, #16
 8012206:	2b00      	cmp	r3, #0
 8012208:	f000 8234 	beq.w	8012674 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801220c:	4b9a      	ldr	r3, [pc, #616]	; (8012478 <tcp_process+0x5a8>)
 801220e:	6819      	ldr	r1, [r3, #0]
 8012210:	4b9a      	ldr	r3, [pc, #616]	; (801247c <tcp_process+0x5ac>)
 8012212:	881b      	ldrh	r3, [r3, #0]
 8012214:	461a      	mov	r2, r3
 8012216:	4b9a      	ldr	r3, [pc, #616]	; (8012480 <tcp_process+0x5b0>)
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801221c:	4b99      	ldr	r3, [pc, #612]	; (8012484 <tcp_process+0x5b4>)
 801221e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012220:	885b      	ldrh	r3, [r3, #2]
 8012222:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012224:	4a97      	ldr	r2, [pc, #604]	; (8012484 <tcp_process+0x5b4>)
 8012226:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012228:	8812      	ldrh	r2, [r2, #0]
 801222a:	b292      	uxth	r2, r2
 801222c:	9202      	str	r2, [sp, #8]
 801222e:	9301      	str	r3, [sp, #4]
 8012230:	4b95      	ldr	r3, [pc, #596]	; (8012488 <tcp_process+0x5b8>)
 8012232:	9300      	str	r3, [sp, #0]
 8012234:	4b95      	ldr	r3, [pc, #596]	; (801248c <tcp_process+0x5bc>)
 8012236:	4602      	mov	r2, r0
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f002 fd23 	bl	8014c84 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012244:	2b05      	cmp	r3, #5
 8012246:	f200 8215 	bhi.w	8012674 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	2200      	movs	r2, #0
 801224e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8012250:	6878      	ldr	r0, [r7, #4]
 8012252:	f002 faed 	bl	8014830 <tcp_rexmit_rto>
      break;
 8012256:	e20d      	b.n	8012674 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012258:	4b86      	ldr	r3, [pc, #536]	; (8012474 <tcp_process+0x5a4>)
 801225a:	781b      	ldrb	r3, [r3, #0]
 801225c:	f003 0310 	and.w	r3, r3, #16
 8012260:	2b00      	cmp	r3, #0
 8012262:	f000 80a1 	beq.w	80123a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012266:	4b84      	ldr	r3, [pc, #528]	; (8012478 <tcp_process+0x5a8>)
 8012268:	681a      	ldr	r2, [r3, #0]
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801226e:	1ad3      	subs	r3, r2, r3
 8012270:	3b01      	subs	r3, #1
 8012272:	2b00      	cmp	r3, #0
 8012274:	db7e      	blt.n	8012374 <tcp_process+0x4a4>
 8012276:	4b80      	ldr	r3, [pc, #512]	; (8012478 <tcp_process+0x5a8>)
 8012278:	681a      	ldr	r2, [r3, #0]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801227e:	1ad3      	subs	r3, r2, r3
 8012280:	2b00      	cmp	r3, #0
 8012282:	dc77      	bgt.n	8012374 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	2204      	movs	r2, #4
 8012288:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801228e:	2b00      	cmp	r3, #0
 8012290:	d102      	bne.n	8012298 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8012292:	23fa      	movs	r3, #250	; 0xfa
 8012294:	76bb      	strb	r3, [r7, #26]
 8012296:	e01d      	b.n	80122d4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801229c:	699b      	ldr	r3, [r3, #24]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d106      	bne.n	80122b0 <tcp_process+0x3e0>
 80122a2:	4b7b      	ldr	r3, [pc, #492]	; (8012490 <tcp_process+0x5c0>)
 80122a4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80122a8:	497a      	ldr	r1, [pc, #488]	; (8012494 <tcp_process+0x5c4>)
 80122aa:	487b      	ldr	r0, [pc, #492]	; (8012498 <tcp_process+0x5c8>)
 80122ac:	f003 fee6 	bl	801607c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122b4:	699b      	ldr	r3, [r3, #24]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d00a      	beq.n	80122d0 <tcp_process+0x400>
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80122be:	699b      	ldr	r3, [r3, #24]
 80122c0:	687a      	ldr	r2, [r7, #4]
 80122c2:	6910      	ldr	r0, [r2, #16]
 80122c4:	2200      	movs	r2, #0
 80122c6:	6879      	ldr	r1, [r7, #4]
 80122c8:	4798      	blx	r3
 80122ca:	4603      	mov	r3, r0
 80122cc:	76bb      	strb	r3, [r7, #26]
 80122ce:	e001      	b.n	80122d4 <tcp_process+0x404>
 80122d0:	23f0      	movs	r3, #240	; 0xf0
 80122d2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80122d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d00a      	beq.n	80122f2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80122dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80122e0:	f113 0f0d 	cmn.w	r3, #13
 80122e4:	d002      	beq.n	80122ec <tcp_process+0x41c>
              tcp_abort(pcb);
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7fd fc6a 	bl	800fbc0 <tcp_abort>
            }
            return ERR_ABRT;
 80122ec:	f06f 030c 	mvn.w	r3, #12
 80122f0:	e1ce      	b.n	8012690 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80122f2:	6878      	ldr	r0, [r7, #4]
 80122f4:	f000 fa58 	bl	80127a8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80122f8:	4b68      	ldr	r3, [pc, #416]	; (801249c <tcp_process+0x5cc>)
 80122fa:	881b      	ldrh	r3, [r3, #0]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d005      	beq.n	801230c <tcp_process+0x43c>
            recv_acked--;
 8012300:	4b66      	ldr	r3, [pc, #408]	; (801249c <tcp_process+0x5cc>)
 8012302:	881b      	ldrh	r3, [r3, #0]
 8012304:	3b01      	subs	r3, #1
 8012306:	b29a      	uxth	r2, r3
 8012308:	4b64      	ldr	r3, [pc, #400]	; (801249c <tcp_process+0x5cc>)
 801230a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012310:	009a      	lsls	r2, r3, #2
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012316:	005b      	lsls	r3, r3, #1
 8012318:	f241 111c 	movw	r1, #4380	; 0x111c
 801231c:	428b      	cmp	r3, r1
 801231e:	bf38      	it	cc
 8012320:	460b      	movcc	r3, r1
 8012322:	429a      	cmp	r2, r3
 8012324:	d204      	bcs.n	8012330 <tcp_process+0x460>
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801232a:	009b      	lsls	r3, r3, #2
 801232c:	b29b      	uxth	r3, r3
 801232e:	e00d      	b.n	801234c <tcp_process+0x47c>
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012334:	005b      	lsls	r3, r3, #1
 8012336:	f241 121c 	movw	r2, #4380	; 0x111c
 801233a:	4293      	cmp	r3, r2
 801233c:	d904      	bls.n	8012348 <tcp_process+0x478>
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012342:	005b      	lsls	r3, r3, #1
 8012344:	b29b      	uxth	r3, r3
 8012346:	e001      	b.n	801234c <tcp_process+0x47c>
 8012348:	f241 131c 	movw	r3, #4380	; 0x111c
 801234c:	687a      	ldr	r2, [r7, #4]
 801234e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8012352:	4b53      	ldr	r3, [pc, #332]	; (80124a0 <tcp_process+0x5d0>)
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	f003 0320 	and.w	r3, r3, #32
 801235a:	2b00      	cmp	r3, #0
 801235c:	d037      	beq.n	80123ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	8b5b      	ldrh	r3, [r3, #26]
 8012362:	f043 0302 	orr.w	r3, r3, #2
 8012366:	b29a      	uxth	r2, r3
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	2207      	movs	r2, #7
 8012370:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8012372:	e02c      	b.n	80123ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012374:	4b40      	ldr	r3, [pc, #256]	; (8012478 <tcp_process+0x5a8>)
 8012376:	6819      	ldr	r1, [r3, #0]
 8012378:	4b40      	ldr	r3, [pc, #256]	; (801247c <tcp_process+0x5ac>)
 801237a:	881b      	ldrh	r3, [r3, #0]
 801237c:	461a      	mov	r2, r3
 801237e:	4b40      	ldr	r3, [pc, #256]	; (8012480 <tcp_process+0x5b0>)
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012384:	4b3f      	ldr	r3, [pc, #252]	; (8012484 <tcp_process+0x5b4>)
 8012386:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012388:	885b      	ldrh	r3, [r3, #2]
 801238a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801238c:	4a3d      	ldr	r2, [pc, #244]	; (8012484 <tcp_process+0x5b4>)
 801238e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012390:	8812      	ldrh	r2, [r2, #0]
 8012392:	b292      	uxth	r2, r2
 8012394:	9202      	str	r2, [sp, #8]
 8012396:	9301      	str	r3, [sp, #4]
 8012398:	4b3b      	ldr	r3, [pc, #236]	; (8012488 <tcp_process+0x5b8>)
 801239a:	9300      	str	r3, [sp, #0]
 801239c:	4b3b      	ldr	r3, [pc, #236]	; (801248c <tcp_process+0x5bc>)
 801239e:	4602      	mov	r2, r0
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f002 fc6f 	bl	8014c84 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80123a6:	e167      	b.n	8012678 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80123a8:	4b32      	ldr	r3, [pc, #200]	; (8012474 <tcp_process+0x5a4>)
 80123aa:	781b      	ldrb	r3, [r3, #0]
 80123ac:	f003 0302 	and.w	r3, r3, #2
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	f000 8161 	beq.w	8012678 <tcp_process+0x7a8>
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ba:	1e5a      	subs	r2, r3, #1
 80123bc:	4b30      	ldr	r3, [pc, #192]	; (8012480 <tcp_process+0x5b0>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	429a      	cmp	r2, r3
 80123c2:	f040 8159 	bne.w	8012678 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f002 fa54 	bl	8014874 <tcp_rexmit>
      break;
 80123cc:	e154      	b.n	8012678 <tcp_process+0x7a8>
 80123ce:	e153      	b.n	8012678 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f000 f9e9 	bl	80127a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80123d6:	4b32      	ldr	r3, [pc, #200]	; (80124a0 <tcp_process+0x5d0>)
 80123d8:	781b      	ldrb	r3, [r3, #0]
 80123da:	f003 0320 	and.w	r3, r3, #32
 80123de:	2b00      	cmp	r3, #0
 80123e0:	f000 814c 	beq.w	801267c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	8b5b      	ldrh	r3, [r3, #26]
 80123e8:	f043 0302 	orr.w	r3, r3, #2
 80123ec:	b29a      	uxth	r2, r3
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	2207      	movs	r2, #7
 80123f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80123f8:	e140      	b.n	801267c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f000 f9d4 	bl	80127a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012400:	4b27      	ldr	r3, [pc, #156]	; (80124a0 <tcp_process+0x5d0>)
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	f003 0320 	and.w	r3, r3, #32
 8012408:	2b00      	cmp	r3, #0
 801240a:	d071      	beq.n	80124f0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801240c:	4b19      	ldr	r3, [pc, #100]	; (8012474 <tcp_process+0x5a4>)
 801240e:	781b      	ldrb	r3, [r3, #0]
 8012410:	f003 0310 	and.w	r3, r3, #16
 8012414:	2b00      	cmp	r3, #0
 8012416:	d060      	beq.n	80124da <tcp_process+0x60a>
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801241c:	4b16      	ldr	r3, [pc, #88]	; (8012478 <tcp_process+0x5a8>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	429a      	cmp	r2, r3
 8012422:	d15a      	bne.n	80124da <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012428:	2b00      	cmp	r3, #0
 801242a:	d156      	bne.n	80124da <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	8b5b      	ldrh	r3, [r3, #26]
 8012430:	f043 0302 	orr.w	r3, r3, #2
 8012434:	b29a      	uxth	r2, r3
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801243a:	6878      	ldr	r0, [r7, #4]
 801243c:	f7fe fde6 	bl	801100c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8012440:	4b18      	ldr	r3, [pc, #96]	; (80124a4 <tcp_process+0x5d4>)
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	687a      	ldr	r2, [r7, #4]
 8012446:	429a      	cmp	r2, r3
 8012448:	d105      	bne.n	8012456 <tcp_process+0x586>
 801244a:	4b16      	ldr	r3, [pc, #88]	; (80124a4 <tcp_process+0x5d4>)
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	68db      	ldr	r3, [r3, #12]
 8012450:	4a14      	ldr	r2, [pc, #80]	; (80124a4 <tcp_process+0x5d4>)
 8012452:	6013      	str	r3, [r2, #0]
 8012454:	e02e      	b.n	80124b4 <tcp_process+0x5e4>
 8012456:	4b13      	ldr	r3, [pc, #76]	; (80124a4 <tcp_process+0x5d4>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	617b      	str	r3, [r7, #20]
 801245c:	e027      	b.n	80124ae <tcp_process+0x5de>
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	429a      	cmp	r2, r3
 8012466:	d11f      	bne.n	80124a8 <tcp_process+0x5d8>
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	68da      	ldr	r2, [r3, #12]
 801246c:	697b      	ldr	r3, [r7, #20]
 801246e:	60da      	str	r2, [r3, #12]
 8012470:	e020      	b.n	80124b4 <tcp_process+0x5e4>
 8012472:	bf00      	nop
 8012474:	240067e4 	.word	0x240067e4
 8012478:	240067dc 	.word	0x240067dc
 801247c:	240067e2 	.word	0x240067e2
 8012480:	240067d8 	.word	0x240067d8
 8012484:	240067c8 	.word	0x240067c8
 8012488:	24006a38 	.word	0x24006a38
 801248c:	24006a3c 	.word	0x24006a3c
 8012490:	0801a754 	.word	0x0801a754
 8012494:	0801aa38 	.word	0x0801aa38
 8012498:	0801a7e4 	.word	0x0801a7e4
 801249c:	240067e0 	.word	0x240067e0
 80124a0:	240067e5 	.word	0x240067e5
 80124a4:	2400a784 	.word	0x2400a784
 80124a8:	697b      	ldr	r3, [r7, #20]
 80124aa:	68db      	ldr	r3, [r3, #12]
 80124ac:	617b      	str	r3, [r7, #20]
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d1d4      	bne.n	801245e <tcp_process+0x58e>
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2200      	movs	r2, #0
 80124b8:	60da      	str	r2, [r3, #12]
 80124ba:	4b77      	ldr	r3, [pc, #476]	; (8012698 <tcp_process+0x7c8>)
 80124bc:	2201      	movs	r2, #1
 80124be:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	220a      	movs	r2, #10
 80124c4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80124c6:	4b75      	ldr	r3, [pc, #468]	; (801269c <tcp_process+0x7cc>)
 80124c8:	681a      	ldr	r2, [r3, #0]
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	60da      	str	r2, [r3, #12]
 80124ce:	4a73      	ldr	r2, [pc, #460]	; (801269c <tcp_process+0x7cc>)
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	6013      	str	r3, [r2, #0]
 80124d4:	f002 fd98 	bl	8015008 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80124d8:	e0d2      	b.n	8012680 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	8b5b      	ldrh	r3, [r3, #26]
 80124de:	f043 0302 	orr.w	r3, r3, #2
 80124e2:	b29a      	uxth	r2, r3
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	2208      	movs	r2, #8
 80124ec:	751a      	strb	r2, [r3, #20]
      break;
 80124ee:	e0c7      	b.n	8012680 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80124f0:	4b6b      	ldr	r3, [pc, #428]	; (80126a0 <tcp_process+0x7d0>)
 80124f2:	781b      	ldrb	r3, [r3, #0]
 80124f4:	f003 0310 	and.w	r3, r3, #16
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	f000 80c1 	beq.w	8012680 <tcp_process+0x7b0>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012502:	4b68      	ldr	r3, [pc, #416]	; (80126a4 <tcp_process+0x7d4>)
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	429a      	cmp	r2, r3
 8012508:	f040 80ba 	bne.w	8012680 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012510:	2b00      	cmp	r3, #0
 8012512:	f040 80b5 	bne.w	8012680 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2206      	movs	r2, #6
 801251a:	751a      	strb	r2, [r3, #20]
      break;
 801251c:	e0b0      	b.n	8012680 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801251e:	6878      	ldr	r0, [r7, #4]
 8012520:	f000 f942 	bl	80127a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012524:	4b60      	ldr	r3, [pc, #384]	; (80126a8 <tcp_process+0x7d8>)
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	f003 0320 	and.w	r3, r3, #32
 801252c:	2b00      	cmp	r3, #0
 801252e:	f000 80a9 	beq.w	8012684 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	8b5b      	ldrh	r3, [r3, #26]
 8012536:	f043 0302 	orr.w	r3, r3, #2
 801253a:	b29a      	uxth	r2, r3
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012540:	6878      	ldr	r0, [r7, #4]
 8012542:	f7fe fd63 	bl	801100c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012546:	4b59      	ldr	r3, [pc, #356]	; (80126ac <tcp_process+0x7dc>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	687a      	ldr	r2, [r7, #4]
 801254c:	429a      	cmp	r2, r3
 801254e:	d105      	bne.n	801255c <tcp_process+0x68c>
 8012550:	4b56      	ldr	r3, [pc, #344]	; (80126ac <tcp_process+0x7dc>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	4a55      	ldr	r2, [pc, #340]	; (80126ac <tcp_process+0x7dc>)
 8012558:	6013      	str	r3, [r2, #0]
 801255a:	e013      	b.n	8012584 <tcp_process+0x6b4>
 801255c:	4b53      	ldr	r3, [pc, #332]	; (80126ac <tcp_process+0x7dc>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	613b      	str	r3, [r7, #16]
 8012562:	e00c      	b.n	801257e <tcp_process+0x6ae>
 8012564:	693b      	ldr	r3, [r7, #16]
 8012566:	68db      	ldr	r3, [r3, #12]
 8012568:	687a      	ldr	r2, [r7, #4]
 801256a:	429a      	cmp	r2, r3
 801256c:	d104      	bne.n	8012578 <tcp_process+0x6a8>
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	68da      	ldr	r2, [r3, #12]
 8012572:	693b      	ldr	r3, [r7, #16]
 8012574:	60da      	str	r2, [r3, #12]
 8012576:	e005      	b.n	8012584 <tcp_process+0x6b4>
 8012578:	693b      	ldr	r3, [r7, #16]
 801257a:	68db      	ldr	r3, [r3, #12]
 801257c:	613b      	str	r3, [r7, #16]
 801257e:	693b      	ldr	r3, [r7, #16]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d1ef      	bne.n	8012564 <tcp_process+0x694>
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2200      	movs	r2, #0
 8012588:	60da      	str	r2, [r3, #12]
 801258a:	4b43      	ldr	r3, [pc, #268]	; (8012698 <tcp_process+0x7c8>)
 801258c:	2201      	movs	r2, #1
 801258e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	220a      	movs	r2, #10
 8012594:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012596:	4b41      	ldr	r3, [pc, #260]	; (801269c <tcp_process+0x7cc>)
 8012598:	681a      	ldr	r2, [r3, #0]
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	60da      	str	r2, [r3, #12]
 801259e:	4a3f      	ldr	r2, [pc, #252]	; (801269c <tcp_process+0x7cc>)
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	6013      	str	r3, [r2, #0]
 80125a4:	f002 fd30 	bl	8015008 <tcp_timer_needed>
      }
      break;
 80125a8:	e06c      	b.n	8012684 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f000 f8fc 	bl	80127a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80125b0:	4b3b      	ldr	r3, [pc, #236]	; (80126a0 <tcp_process+0x7d0>)
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	f003 0310 	and.w	r3, r3, #16
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d065      	beq.n	8012688 <tcp_process+0x7b8>
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80125c0:	4b38      	ldr	r3, [pc, #224]	; (80126a4 <tcp_process+0x7d4>)
 80125c2:	681b      	ldr	r3, [r3, #0]
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d15f      	bne.n	8012688 <tcp_process+0x7b8>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d15b      	bne.n	8012688 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f7fe fd1b 	bl	801100c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80125d6:	4b35      	ldr	r3, [pc, #212]	; (80126ac <tcp_process+0x7dc>)
 80125d8:	681b      	ldr	r3, [r3, #0]
 80125da:	687a      	ldr	r2, [r7, #4]
 80125dc:	429a      	cmp	r2, r3
 80125de:	d105      	bne.n	80125ec <tcp_process+0x71c>
 80125e0:	4b32      	ldr	r3, [pc, #200]	; (80126ac <tcp_process+0x7dc>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	68db      	ldr	r3, [r3, #12]
 80125e6:	4a31      	ldr	r2, [pc, #196]	; (80126ac <tcp_process+0x7dc>)
 80125e8:	6013      	str	r3, [r2, #0]
 80125ea:	e013      	b.n	8012614 <tcp_process+0x744>
 80125ec:	4b2f      	ldr	r3, [pc, #188]	; (80126ac <tcp_process+0x7dc>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	60fb      	str	r3, [r7, #12]
 80125f2:	e00c      	b.n	801260e <tcp_process+0x73e>
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	68db      	ldr	r3, [r3, #12]
 80125f8:	687a      	ldr	r2, [r7, #4]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	d104      	bne.n	8012608 <tcp_process+0x738>
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	68da      	ldr	r2, [r3, #12]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	60da      	str	r2, [r3, #12]
 8012606:	e005      	b.n	8012614 <tcp_process+0x744>
 8012608:	68fb      	ldr	r3, [r7, #12]
 801260a:	68db      	ldr	r3, [r3, #12]
 801260c:	60fb      	str	r3, [r7, #12]
 801260e:	68fb      	ldr	r3, [r7, #12]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d1ef      	bne.n	80125f4 <tcp_process+0x724>
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	2200      	movs	r2, #0
 8012618:	60da      	str	r2, [r3, #12]
 801261a:	4b1f      	ldr	r3, [pc, #124]	; (8012698 <tcp_process+0x7c8>)
 801261c:	2201      	movs	r2, #1
 801261e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	220a      	movs	r2, #10
 8012624:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012626:	4b1d      	ldr	r3, [pc, #116]	; (801269c <tcp_process+0x7cc>)
 8012628:	681a      	ldr	r2, [r3, #0]
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	60da      	str	r2, [r3, #12]
 801262e:	4a1b      	ldr	r2, [pc, #108]	; (801269c <tcp_process+0x7cc>)
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6013      	str	r3, [r2, #0]
 8012634:	f002 fce8 	bl	8015008 <tcp_timer_needed>
      }
      break;
 8012638:	e026      	b.n	8012688 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f000 f8b4 	bl	80127a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012640:	4b17      	ldr	r3, [pc, #92]	; (80126a0 <tcp_process+0x7d0>)
 8012642:	781b      	ldrb	r3, [r3, #0]
 8012644:	f003 0310 	and.w	r3, r3, #16
 8012648:	2b00      	cmp	r3, #0
 801264a:	d01f      	beq.n	801268c <tcp_process+0x7bc>
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012650:	4b14      	ldr	r3, [pc, #80]	; (80126a4 <tcp_process+0x7d4>)
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	429a      	cmp	r2, r3
 8012656:	d119      	bne.n	801268c <tcp_process+0x7bc>
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801265c:	2b00      	cmp	r3, #0
 801265e:	d115      	bne.n	801268c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012660:	4b11      	ldr	r3, [pc, #68]	; (80126a8 <tcp_process+0x7d8>)
 8012662:	781b      	ldrb	r3, [r3, #0]
 8012664:	f043 0310 	orr.w	r3, r3, #16
 8012668:	b2da      	uxtb	r2, r3
 801266a:	4b0f      	ldr	r3, [pc, #60]	; (80126a8 <tcp_process+0x7d8>)
 801266c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801266e:	e00d      	b.n	801268c <tcp_process+0x7bc>
    default:
      break;
 8012670:	bf00      	nop
 8012672:	e00c      	b.n	801268e <tcp_process+0x7be>
      break;
 8012674:	bf00      	nop
 8012676:	e00a      	b.n	801268e <tcp_process+0x7be>
      break;
 8012678:	bf00      	nop
 801267a:	e008      	b.n	801268e <tcp_process+0x7be>
      break;
 801267c:	bf00      	nop
 801267e:	e006      	b.n	801268e <tcp_process+0x7be>
      break;
 8012680:	bf00      	nop
 8012682:	e004      	b.n	801268e <tcp_process+0x7be>
      break;
 8012684:	bf00      	nop
 8012686:	e002      	b.n	801268e <tcp_process+0x7be>
      break;
 8012688:	bf00      	nop
 801268a:	e000      	b.n	801268e <tcp_process+0x7be>
      break;
 801268c:	bf00      	nop
  }
  return ERR_OK;
 801268e:	2300      	movs	r3, #0
}
 8012690:	4618      	mov	r0, r3
 8012692:	3724      	adds	r7, #36	; 0x24
 8012694:	46bd      	mov	sp, r7
 8012696:	bd90      	pop	{r4, r7, pc}
 8012698:	2400a780 	.word	0x2400a780
 801269c:	2400a794 	.word	0x2400a794
 80126a0:	240067e4 	.word	0x240067e4
 80126a4:	240067dc 	.word	0x240067dc
 80126a8:	240067e5 	.word	0x240067e5
 80126ac:	2400a784 	.word	0x2400a784

080126b0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80126b0:	b5b0      	push	{r4, r5, r7, lr}
 80126b2:	b086      	sub	sp, #24
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	60b9      	str	r1, [r7, #8]
 80126ba:	607a      	str	r2, [r7, #4]
 80126bc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80126be:	e03e      	b.n	801273e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80126c4:	68bb      	ldr	r3, [r7, #8]
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80126ca:	697b      	ldr	r3, [r7, #20]
 80126cc:	685b      	ldr	r3, [r3, #4]
 80126ce:	4618      	mov	r0, r3
 80126d0:	f7fc fd1e 	bl	800f110 <pbuf_clen>
 80126d4:	4603      	mov	r3, r0
 80126d6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126de:	8a7a      	ldrh	r2, [r7, #18]
 80126e0:	429a      	cmp	r2, r3
 80126e2:	d906      	bls.n	80126f2 <tcp_free_acked_segments+0x42>
 80126e4:	4b2a      	ldr	r3, [pc, #168]	; (8012790 <tcp_free_acked_segments+0xe0>)
 80126e6:	f240 4257 	movw	r2, #1111	; 0x457
 80126ea:	492a      	ldr	r1, [pc, #168]	; (8012794 <tcp_free_acked_segments+0xe4>)
 80126ec:	482a      	ldr	r0, [pc, #168]	; (8012798 <tcp_free_acked_segments+0xe8>)
 80126ee:	f003 fcc5 	bl	801607c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80126f8:	8a7b      	ldrh	r3, [r7, #18]
 80126fa:	1ad3      	subs	r3, r2, r3
 80126fc:	b29a      	uxth	r2, r3
 80126fe:	68fb      	ldr	r3, [r7, #12]
 8012700:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	891a      	ldrh	r2, [r3, #8]
 8012708:	4b24      	ldr	r3, [pc, #144]	; (801279c <tcp_free_acked_segments+0xec>)
 801270a:	881b      	ldrh	r3, [r3, #0]
 801270c:	4413      	add	r3, r2
 801270e:	b29a      	uxth	r2, r3
 8012710:	4b22      	ldr	r3, [pc, #136]	; (801279c <tcp_free_acked_segments+0xec>)
 8012712:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012714:	6978      	ldr	r0, [r7, #20]
 8012716:	f7fe f9ec 	bl	8010af2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012720:	2b00      	cmp	r3, #0
 8012722:	d00c      	beq.n	801273e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d109      	bne.n	801273e <tcp_free_acked_segments+0x8e>
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d106      	bne.n	801273e <tcp_free_acked_segments+0x8e>
 8012730:	4b17      	ldr	r3, [pc, #92]	; (8012790 <tcp_free_acked_segments+0xe0>)
 8012732:	f240 4261 	movw	r2, #1121	; 0x461
 8012736:	491a      	ldr	r1, [pc, #104]	; (80127a0 <tcp_free_acked_segments+0xf0>)
 8012738:	4817      	ldr	r0, [pc, #92]	; (8012798 <tcp_free_acked_segments+0xe8>)
 801273a:	f003 fc9f 	bl	801607c <iprintf>
  while (seg_list != NULL &&
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d020      	beq.n	8012786 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012744:	68bb      	ldr	r3, [r7, #8]
 8012746:	68db      	ldr	r3, [r3, #12]
 8012748:	685b      	ldr	r3, [r3, #4]
 801274a:	4618      	mov	r0, r3
 801274c:	f7fb f867 	bl	800d81e <lwip_htonl>
 8012750:	4604      	mov	r4, r0
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	891b      	ldrh	r3, [r3, #8]
 8012756:	461d      	mov	r5, r3
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	68db      	ldr	r3, [r3, #12]
 801275c:	899b      	ldrh	r3, [r3, #12]
 801275e:	b29b      	uxth	r3, r3
 8012760:	4618      	mov	r0, r3
 8012762:	f7fb f847 	bl	800d7f4 <lwip_htons>
 8012766:	4603      	mov	r3, r0
 8012768:	b2db      	uxtb	r3, r3
 801276a:	f003 0303 	and.w	r3, r3, #3
 801276e:	2b00      	cmp	r3, #0
 8012770:	d001      	beq.n	8012776 <tcp_free_acked_segments+0xc6>
 8012772:	2301      	movs	r3, #1
 8012774:	e000      	b.n	8012778 <tcp_free_acked_segments+0xc8>
 8012776:	2300      	movs	r3, #0
 8012778:	442b      	add	r3, r5
 801277a:	18e2      	adds	r2, r4, r3
 801277c:	4b09      	ldr	r3, [pc, #36]	; (80127a4 <tcp_free_acked_segments+0xf4>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012782:	2b00      	cmp	r3, #0
 8012784:	dd9c      	ble.n	80126c0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012786:	68bb      	ldr	r3, [r7, #8]
}
 8012788:	4618      	mov	r0, r3
 801278a:	3718      	adds	r7, #24
 801278c:	46bd      	mov	sp, r7
 801278e:	bdb0      	pop	{r4, r5, r7, pc}
 8012790:	0801a754 	.word	0x0801a754
 8012794:	0801aa58 	.word	0x0801aa58
 8012798:	0801a7e4 	.word	0x0801a7e4
 801279c:	240067e0 	.word	0x240067e0
 80127a0:	0801aa80 	.word	0x0801aa80
 80127a4:	240067dc 	.word	0x240067dc

080127a8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80127a8:	b590      	push	{r4, r7, lr}
 80127aa:	b08d      	sub	sp, #52	; 0x34
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80127b0:	2300      	movs	r3, #0
 80127b2:	62bb      	str	r3, [r7, #40]	; 0x28

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d106      	bne.n	80127c8 <tcp_receive+0x20>
 80127ba:	4ba5      	ldr	r3, [pc, #660]	; (8012a50 <tcp_receive+0x2a8>)
 80127bc:	f240 427b 	movw	r2, #1147	; 0x47b
 80127c0:	49a4      	ldr	r1, [pc, #656]	; (8012a54 <tcp_receive+0x2ac>)
 80127c2:	48a5      	ldr	r0, [pc, #660]	; (8012a58 <tcp_receive+0x2b0>)
 80127c4:	f003 fc5a 	bl	801607c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	7d1b      	ldrb	r3, [r3, #20]
 80127cc:	2b03      	cmp	r3, #3
 80127ce:	d806      	bhi.n	80127de <tcp_receive+0x36>
 80127d0:	4b9f      	ldr	r3, [pc, #636]	; (8012a50 <tcp_receive+0x2a8>)
 80127d2:	f240 427c 	movw	r2, #1148	; 0x47c
 80127d6:	49a1      	ldr	r1, [pc, #644]	; (8012a5c <tcp_receive+0x2b4>)
 80127d8:	489f      	ldr	r0, [pc, #636]	; (8012a58 <tcp_receive+0x2b0>)
 80127da:	f003 fc4f 	bl	801607c <iprintf>

  if (flags & TCP_ACK) {
 80127de:	4ba0      	ldr	r3, [pc, #640]	; (8012a60 <tcp_receive+0x2b8>)
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	f003 0310 	and.w	r3, r3, #16
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	f000 8258 	beq.w	8012c9c <tcp_receive+0x4f4>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80127f2:	461a      	mov	r2, r3
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80127f8:	4413      	add	r3, r2
 80127fa:	61fb      	str	r3, [r7, #28]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012800:	4b98      	ldr	r3, [pc, #608]	; (8012a64 <tcp_receive+0x2bc>)
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	1ad3      	subs	r3, r2, r3
 8012806:	2b00      	cmp	r3, #0
 8012808:	db1b      	blt.n	8012842 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801280e:	4b95      	ldr	r3, [pc, #596]	; (8012a64 <tcp_receive+0x2bc>)
 8012810:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012812:	429a      	cmp	r2, r3
 8012814:	d106      	bne.n	8012824 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801281a:	4b93      	ldr	r3, [pc, #588]	; (8012a68 <tcp_receive+0x2c0>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	1ad3      	subs	r3, r2, r3
 8012820:	2b00      	cmp	r3, #0
 8012822:	db0e      	blt.n	8012842 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012828:	4b8f      	ldr	r3, [pc, #572]	; (8012a68 <tcp_receive+0x2c0>)
 801282a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801282c:	429a      	cmp	r2, r3
 801282e:	d125      	bne.n	801287c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012830:	4b8e      	ldr	r3, [pc, #568]	; (8012a6c <tcp_receive+0x2c4>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	89db      	ldrh	r3, [r3, #14]
 8012836:	b29a      	uxth	r2, r3
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801283e:	429a      	cmp	r2, r3
 8012840:	d91c      	bls.n	801287c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012842:	4b8a      	ldr	r3, [pc, #552]	; (8012a6c <tcp_receive+0x2c4>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	89db      	ldrh	r3, [r3, #14]
 8012848:	b29a      	uxth	r2, r3
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801285c:	429a      	cmp	r2, r3
 801285e:	d205      	bcs.n	801286c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801286c:	4b7d      	ldr	r3, [pc, #500]	; (8012a64 <tcp_receive+0x2bc>)
 801286e:	681a      	ldr	r2, [r3, #0]
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012874:	4b7c      	ldr	r3, [pc, #496]	; (8012a68 <tcp_receive+0x2c0>)
 8012876:	681a      	ldr	r2, [r3, #0]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801287c:	4b7a      	ldr	r3, [pc, #488]	; (8012a68 <tcp_receive+0x2c0>)
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012884:	1ad3      	subs	r3, r2, r3
 8012886:	2b00      	cmp	r3, #0
 8012888:	dc58      	bgt.n	801293c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801288a:	4b79      	ldr	r3, [pc, #484]	; (8012a70 <tcp_receive+0x2c8>)
 801288c:	881b      	ldrh	r3, [r3, #0]
 801288e:	2b00      	cmp	r3, #0
 8012890:	d14b      	bne.n	801292a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012896:	687a      	ldr	r2, [r7, #4]
 8012898:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801289c:	4413      	add	r3, r2
 801289e:	69fa      	ldr	r2, [r7, #28]
 80128a0:	429a      	cmp	r2, r3
 80128a2:	d142      	bne.n	801292a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	db3d      	blt.n	801292a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80128b2:	4b6d      	ldr	r3, [pc, #436]	; (8012a68 <tcp_receive+0x2c0>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	429a      	cmp	r2, r3
 80128b8:	d137      	bne.n	801292a <tcp_receive+0x182>
              found_dupack = 1;
 80128ba:	2301      	movs	r3, #1
 80128bc:	62bb      	str	r3, [r7, #40]	; 0x28
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80128c4:	2bff      	cmp	r3, #255	; 0xff
 80128c6:	d007      	beq.n	80128d8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80128ce:	3301      	adds	r3, #1
 80128d0:	b2da      	uxtb	r2, r3
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80128de:	2b03      	cmp	r3, #3
 80128e0:	d91b      	bls.n	801291a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128ec:	4413      	add	r3, r2
 80128ee:	b29a      	uxth	r2, r3
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80128f6:	429a      	cmp	r2, r3
 80128f8:	d30a      	bcc.n	8012910 <tcp_receive+0x168>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012904:	4413      	add	r3, r2
 8012906:	b29a      	uxth	r2, r3
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801290e:	e004      	b.n	801291a <tcp_receive+0x172>
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012916:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012920:	2b02      	cmp	r3, #2
 8012922:	d902      	bls.n	801292a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f002 f811 	bl	801494c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801292c:	2b00      	cmp	r3, #0
 801292e:	f040 815e 	bne.w	8012bee <tcp_receive+0x446>
        pcb->dupacks = 0;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	2200      	movs	r2, #0
 8012936:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801293a:	e158      	b.n	8012bee <tcp_receive+0x446>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801293c:	4b4a      	ldr	r3, [pc, #296]	; (8012a68 <tcp_receive+0x2c0>)
 801293e:	681a      	ldr	r2, [r3, #0]
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012944:	1ad3      	subs	r3, r2, r3
 8012946:	3b01      	subs	r3, #1
 8012948:	2b00      	cmp	r3, #0
 801294a:	f2c0 814b 	blt.w	8012be4 <tcp_receive+0x43c>
 801294e:	4b46      	ldr	r3, [pc, #280]	; (8012a68 <tcp_receive+0x2c0>)
 8012950:	681a      	ldr	r2, [r3, #0]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012956:	1ad3      	subs	r3, r2, r3
 8012958:	2b00      	cmp	r3, #0
 801295a:	f300 8143 	bgt.w	8012be4 <tcp_receive+0x43c>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	8b5b      	ldrh	r3, [r3, #26]
 8012962:	f003 0304 	and.w	r3, r3, #4
 8012966:	2b00      	cmp	r3, #0
 8012968:	d010      	beq.n	801298c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	8b5b      	ldrh	r3, [r3, #26]
 801296e:	f023 0304 	bic.w	r3, r3, #4
 8012972:	b29a      	uxth	r2, r3
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2200      	movs	r2, #0
 8012988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2200      	movs	r2, #0
 8012990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801299a:	10db      	asrs	r3, r3, #3
 801299c:	b21b      	sxth	r3, r3
 801299e:	b29a      	uxth	r2, r3
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80129a6:	b29b      	uxth	r3, r3
 80129a8:	4413      	add	r3, r2
 80129aa:	b29b      	uxth	r3, r3
 80129ac:	b21a      	sxth	r2, r3
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80129b4:	4b2c      	ldr	r3, [pc, #176]	; (8012a68 <tcp_receive+0x2c0>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	b29a      	uxth	r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129be:	b29b      	uxth	r3, r3
 80129c0:	1ad3      	subs	r3, r2, r3
 80129c2:	837b      	strh	r3, [r7, #26]

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2200      	movs	r2, #0
 80129c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80129cc:	4b26      	ldr	r3, [pc, #152]	; (8012a68 <tcp_receive+0x2c0>)
 80129ce:	681a      	ldr	r2, [r3, #0]
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	7d1b      	ldrb	r3, [r3, #20]
 80129d8:	2b03      	cmp	r3, #3
 80129da:	f240 8094 	bls.w	8012b06 <tcp_receive+0x35e>
        if (pcb->cwnd < pcb->ssthresh) {
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d242      	bcs.n	8012a74 <tcp_receive+0x2cc>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	8b5b      	ldrh	r3, [r3, #26]
 80129f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d001      	beq.n	80129fe <tcp_receive+0x256>
 80129fa:	2301      	movs	r3, #1
 80129fc:	e000      	b.n	8012a00 <tcp_receive+0x258>
 80129fe:	2302      	movs	r3, #2
 8012a00:	767b      	strb	r3, [r7, #25]
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8012a02:	7e7b      	ldrb	r3, [r7, #25]
 8012a04:	b29a      	uxth	r2, r3
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a0a:	fb12 f303 	smulbb	r3, r2, r3
 8012a0e:	b29b      	uxth	r3, r3
 8012a10:	8b7a      	ldrh	r2, [r7, #26]
 8012a12:	4293      	cmp	r3, r2
 8012a14:	bf28      	it	cs
 8012a16:	4613      	movcs	r3, r2
 8012a18:	82fb      	strh	r3, [r7, #22]
          TCP_WND_INC(pcb->cwnd, increase);
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a20:	8afb      	ldrh	r3, [r7, #22]
 8012a22:	4413      	add	r3, r2
 8012a24:	b29a      	uxth	r2, r3
 8012a26:	687b      	ldr	r3, [r7, #4]
 8012a28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012a2c:	429a      	cmp	r2, r3
 8012a2e:	d309      	bcc.n	8012a44 <tcp_receive+0x29c>
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012a36:	8afb      	ldrh	r3, [r7, #22]
 8012a38:	4413      	add	r3, r2
 8012a3a:	b29a      	uxth	r2, r3
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012a42:	e060      	b.n	8012b06 <tcp_receive+0x35e>
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012a4e:	e05a      	b.n	8012b06 <tcp_receive+0x35e>
 8012a50:	0801a754 	.word	0x0801a754
 8012a54:	0801aaa0 	.word	0x0801aaa0
 8012a58:	0801a7e4 	.word	0x0801a7e4
 8012a5c:	0801aabc 	.word	0x0801aabc
 8012a60:	240067e4 	.word	0x240067e4
 8012a64:	240067d8 	.word	0x240067d8
 8012a68:	240067dc 	.word	0x240067dc
 8012a6c:	240067c8 	.word	0x240067c8
 8012a70:	240067e2 	.word	0x240067e2
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012a7a:	8b7b      	ldrh	r3, [r7, #26]
 8012a7c:	4413      	add	r3, r2
 8012a7e:	b29a      	uxth	r2, r3
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d309      	bcc.n	8012a9e <tcp_receive+0x2f6>
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012a90:	8b7b      	ldrh	r3, [r7, #26]
 8012a92:	4413      	add	r3, r2
 8012a94:	b29a      	uxth	r2, r3
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8012a9c:	e004      	b.n	8012aa8 <tcp_receive+0x300>
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d326      	bcc.n	8012b06 <tcp_receive+0x35e>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ac4:	1ad3      	subs	r3, r2, r3
 8012ac6:	b29a      	uxth	r2, r3
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012ad8:	4413      	add	r3, r2
 8012ada:	b29a      	uxth	r2, r3
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d30a      	bcc.n	8012afc <tcp_receive+0x354>
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012af0:	4413      	add	r3, r2
 8012af2:	b29a      	uxth	r2, r3
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012afa:	e004      	b.n	8012b06 <tcp_receive+0x35e>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b0e:	4a91      	ldr	r2, [pc, #580]	; (8012d54 <tcp_receive+0x5ac>)
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f7ff fdcd 	bl	80126b0 <tcp_free_acked_segments>
 8012b16:	4602      	mov	r2, r0
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b24:	4a8c      	ldr	r2, [pc, #560]	; (8012d58 <tcp_receive+0x5b0>)
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f7ff fdc2 	bl	80126b0 <tcp_free_acked_segments>
 8012b2c:	4602      	mov	r2, r0
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d104      	bne.n	8012b44 <tcp_receive+0x39c>
        pcb->rtime = -1;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b40:	861a      	strh	r2, [r3, #48]	; 0x30
 8012b42:	e002      	b.n	8012b4a <tcp_receive+0x3a2>
      } else {
        pcb->rtime = 0;
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	2200      	movs	r2, #0
 8012b48:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d103      	bne.n	8012b60 <tcp_receive+0x3b8>
        pcb->unsent_oversize = 0;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	2200      	movs	r2, #0
 8012b5c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012b66:	4b7d      	ldr	r3, [pc, #500]	; (8012d5c <tcp_receive+0x5b4>)
 8012b68:	881b      	ldrh	r3, [r3, #0]
 8012b6a:	4413      	add	r3, r2
 8012b6c:	b29a      	uxth	r2, r3
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	8b5b      	ldrh	r3, [r3, #26]
 8012b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d035      	beq.n	8012bec <tcp_receive+0x444>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d118      	bne.n	8012bba <tcp_receive+0x412>
          if ((pcb->unsent == NULL) ||
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d00c      	beq.n	8012baa <tcp_receive+0x402>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b98:	68db      	ldr	r3, [r3, #12]
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7fa fe3e 	bl	800d81e <lwip_htonl>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	dc20      	bgt.n	8012bec <tcp_receive+0x444>
            tcp_clear_flags(pcb, TF_RTO);
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	8b5b      	ldrh	r3, [r3, #26]
 8012bae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012bb8:	e018      	b.n	8012bec <tcp_receive+0x444>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bc2:	68db      	ldr	r3, [r3, #12]
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7fa fe29 	bl	800d81e <lwip_htonl>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	1ae3      	subs	r3, r4, r3
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	dc0b      	bgt.n	8012bec <tcp_receive+0x444>
          tcp_clear_flags(pcb, TF_RTO);
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	8b5b      	ldrh	r3, [r3, #26]
 8012bd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8012bdc:	b29a      	uxth	r2, r3
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012be2:	e003      	b.n	8012bec <tcp_receive+0x444>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8012be4:	6878      	ldr	r0, [r7, #4]
 8012be6:	f002 f89f 	bl	8014d28 <tcp_send_empty_ack>
 8012bea:	e000      	b.n	8012bee <tcp_receive+0x446>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012bec:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d052      	beq.n	8012c9c <tcp_receive+0x4f4>
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012bfa:	4b59      	ldr	r3, [pc, #356]	; (8012d60 <tcp_receive+0x5b8>)
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	1ad3      	subs	r3, r2, r3
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	da4b      	bge.n	8012c9c <tcp_receive+0x4f4>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8012c04:	4b57      	ldr	r3, [pc, #348]	; (8012d64 <tcp_receive+0x5bc>)
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	b29a      	uxth	r2, r3
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c0e:	b29b      	uxth	r3, r3
 8012c10:	1ad3      	subs	r3, r2, r3
 8012c12:	b29b      	uxth	r3, r3
 8012c14:	85fb      	strh	r3, [r7, #46]	; 0x2e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8012c16:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c1e:	10db      	asrs	r3, r3, #3
 8012c20:	b21b      	sxth	r3, r3
 8012c22:	b29b      	uxth	r3, r3
 8012c24:	1ad3      	subs	r3, r2, r3
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sa = (s16_t)(pcb->sa + m);
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c30:	b29a      	uxth	r2, r3
 8012c32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012c34:	4413      	add	r3, r2
 8012c36:	b29b      	uxth	r3, r3
 8012c38:	b21a      	sxth	r2, r3
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8012c3e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	da03      	bge.n	8012c4e <tcp_receive+0x4a6>
        m = (s16_t) - m;
 8012c46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012c48:	425b      	negs	r3, r3
 8012c4a:	b29b      	uxth	r3, r3
 8012c4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8012c4e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c56:	109b      	asrs	r3, r3, #2
 8012c58:	b21b      	sxth	r3, r3
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	1ad3      	subs	r3, r2, r3
 8012c5e:	b29b      	uxth	r3, r3
 8012c60:	85fb      	strh	r3, [r7, #46]	; 0x2e
      pcb->sv = (s16_t)(pcb->sv + m);
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c68:	b29a      	uxth	r2, r3
 8012c6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012c6c:	4413      	add	r3, r2
 8012c6e:	b29b      	uxth	r3, r3
 8012c70:	b21a      	sxth	r2, r3
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012c7c:	10db      	asrs	r3, r3, #3
 8012c7e:	b21b      	sxth	r3, r3
 8012c80:	b29a      	uxth	r2, r3
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012c88:	b29b      	uxth	r3, r3
 8012c8a:	4413      	add	r3, r2
 8012c8c:	b29b      	uxth	r3, r3
 8012c8e:	b21a      	sxth	r2, r3
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2200      	movs	r2, #0
 8012c9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8012c9c:	4b32      	ldr	r3, [pc, #200]	; (8012d68 <tcp_receive+0x5c0>)
 8012c9e:	881b      	ldrh	r3, [r3, #0]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	f000 81c7 	beq.w	8013034 <tcp_receive+0x88c>
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	7d1b      	ldrb	r3, [r3, #20]
 8012caa:	2b06      	cmp	r3, #6
 8012cac:	f200 81c2 	bhi.w	8013034 <tcp_receive+0x88c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cb4:	4b2d      	ldr	r3, [pc, #180]	; (8012d6c <tcp_receive+0x5c4>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	1ad3      	subs	r3, r2, r3
 8012cba:	3b01      	subs	r3, #1
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	f2c0 8085 	blt.w	8012dcc <tcp_receive+0x624>
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012cc6:	4b28      	ldr	r3, [pc, #160]	; (8012d68 <tcp_receive+0x5c0>)
 8012cc8:	881b      	ldrh	r3, [r3, #0]
 8012cca:	4619      	mov	r1, r3
 8012ccc:	4b27      	ldr	r3, [pc, #156]	; (8012d6c <tcp_receive+0x5c4>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	440b      	add	r3, r1
 8012cd2:	1ad3      	subs	r3, r2, r3
 8012cd4:	3301      	adds	r3, #1
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	dc78      	bgt.n	8012dcc <tcp_receive+0x624>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8012cda:	4b25      	ldr	r3, [pc, #148]	; (8012d70 <tcp_receive+0x5c8>)
 8012cdc:	685b      	ldr	r3, [r3, #4]
 8012cde:	627b      	str	r3, [r7, #36]	; 0x24
      u32_t off32 = pcb->rcv_nxt - seqno;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ce4:	4b21      	ldr	r3, [pc, #132]	; (8012d6c <tcp_receive+0x5c4>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	1ad3      	subs	r3, r2, r3
 8012cea:	613b      	str	r3, [r7, #16]
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8012cec:	4b20      	ldr	r3, [pc, #128]	; (8012d70 <tcp_receive+0x5c8>)
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d106      	bne.n	8012d02 <tcp_receive+0x55a>
 8012cf4:	4b1f      	ldr	r3, [pc, #124]	; (8012d74 <tcp_receive+0x5cc>)
 8012cf6:	f240 5294 	movw	r2, #1428	; 0x594
 8012cfa:	491f      	ldr	r1, [pc, #124]	; (8012d78 <tcp_receive+0x5d0>)
 8012cfc:	481f      	ldr	r0, [pc, #124]	; (8012d7c <tcp_receive+0x5d4>)
 8012cfe:	f003 f9bd 	bl	801607c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8012d08:	4293      	cmp	r3, r2
 8012d0a:	d906      	bls.n	8012d1a <tcp_receive+0x572>
 8012d0c:	4b19      	ldr	r3, [pc, #100]	; (8012d74 <tcp_receive+0x5cc>)
 8012d0e:	f240 5295 	movw	r2, #1429	; 0x595
 8012d12:	491b      	ldr	r1, [pc, #108]	; (8012d80 <tcp_receive+0x5d8>)
 8012d14:	4819      	ldr	r0, [pc, #100]	; (8012d7c <tcp_receive+0x5d4>)
 8012d16:	f003 f9b1 	bl	801607c <iprintf>
      off = (u16_t)off32;
 8012d1a:	693b      	ldr	r3, [r7, #16]
 8012d1c:	847b      	strh	r3, [r7, #34]	; 0x22
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8012d1e:	4b14      	ldr	r3, [pc, #80]	; (8012d70 <tcp_receive+0x5c8>)
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	891b      	ldrh	r3, [r3, #8]
 8012d24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012d26:	429a      	cmp	r2, r3
 8012d28:	d906      	bls.n	8012d38 <tcp_receive+0x590>
 8012d2a:	4b12      	ldr	r3, [pc, #72]	; (8012d74 <tcp_receive+0x5cc>)
 8012d2c:	f240 5297 	movw	r2, #1431	; 0x597
 8012d30:	4914      	ldr	r1, [pc, #80]	; (8012d84 <tcp_receive+0x5dc>)
 8012d32:	4812      	ldr	r0, [pc, #72]	; (8012d7c <tcp_receive+0x5d4>)
 8012d34:	f003 f9a2 	bl	801607c <iprintf>
      inseg.len -= off;
 8012d38:	4b0d      	ldr	r3, [pc, #52]	; (8012d70 <tcp_receive+0x5c8>)
 8012d3a:	891a      	ldrh	r2, [r3, #8]
 8012d3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d3e:	1ad3      	subs	r3, r2, r3
 8012d40:	b29a      	uxth	r2, r3
 8012d42:	4b0b      	ldr	r3, [pc, #44]	; (8012d70 <tcp_receive+0x5c8>)
 8012d44:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8012d46:	4b0a      	ldr	r3, [pc, #40]	; (8012d70 <tcp_receive+0x5c8>)
 8012d48:	685b      	ldr	r3, [r3, #4]
 8012d4a:	891a      	ldrh	r2, [r3, #8]
 8012d4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012d4e:	1ad3      	subs	r3, r2, r3
 8012d50:	81fb      	strh	r3, [r7, #14]
      while (p->len < off) {
 8012d52:	e027      	b.n	8012da4 <tcp_receive+0x5fc>
 8012d54:	0801aad8 	.word	0x0801aad8
 8012d58:	0801aae0 	.word	0x0801aae0
 8012d5c:	240067e0 	.word	0x240067e0
 8012d60:	240067dc 	.word	0x240067dc
 8012d64:	2400a788 	.word	0x2400a788
 8012d68:	240067e2 	.word	0x240067e2
 8012d6c:	240067d8 	.word	0x240067d8
 8012d70:	240067b8 	.word	0x240067b8
 8012d74:	0801a754 	.word	0x0801a754
 8012d78:	0801aae8 	.word	0x0801aae8
 8012d7c:	0801a7e4 	.word	0x0801a7e4
 8012d80:	0801aaf8 	.word	0x0801aaf8
 8012d84:	0801ab08 	.word	0x0801ab08
        off -= p->len;
 8012d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d8a:	895b      	ldrh	r3, [r3, #10]
 8012d8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012d8e:	1ad3      	subs	r3, r2, r3
 8012d90:	847b      	strh	r3, [r7, #34]	; 0x22
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8012d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d94:	89fa      	ldrh	r2, [r7, #14]
 8012d96:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8012d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8012d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	627b      	str	r3, [r7, #36]	; 0x24
      while (p->len < off) {
 8012da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012da6:	895b      	ldrh	r3, [r3, #10]
 8012da8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d8ec      	bhi.n	8012d88 <tcp_receive+0x5e0>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8012dae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012db0:	4619      	mov	r1, r3
 8012db2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012db4:	f7fc f898 	bl	800eee8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dbc:	4a94      	ldr	r2, [pc, #592]	; (8013010 <tcp_receive+0x868>)
 8012dbe:	6013      	str	r3, [r2, #0]
 8012dc0:	4b94      	ldr	r3, [pc, #592]	; (8013014 <tcp_receive+0x86c>)
 8012dc2:	68db      	ldr	r3, [r3, #12]
 8012dc4:	4a92      	ldr	r2, [pc, #584]	; (8013010 <tcp_receive+0x868>)
 8012dc6:	6812      	ldr	r2, [r2, #0]
 8012dc8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8012dca:	e00d      	b.n	8012de8 <tcp_receive+0x640>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8012dcc:	4b90      	ldr	r3, [pc, #576]	; (8013010 <tcp_receive+0x868>)
 8012dce:	681a      	ldr	r2, [r3, #0]
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012dd4:	1ad3      	subs	r3, r2, r3
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	da06      	bge.n	8012de8 <tcp_receive+0x640>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	8b5b      	ldrh	r3, [r3, #26]
 8012dde:	f043 0302 	orr.w	r3, r3, #2
 8012de2:	b29a      	uxth	r2, r3
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8012de8:	4b89      	ldr	r3, [pc, #548]	; (8013010 <tcp_receive+0x868>)
 8012dea:	681a      	ldr	r2, [r3, #0]
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012df0:	1ad3      	subs	r3, r2, r3
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	f2c0 8106 	blt.w	8013004 <tcp_receive+0x85c>
 8012df8:	4b85      	ldr	r3, [pc, #532]	; (8013010 <tcp_receive+0x868>)
 8012dfa:	681a      	ldr	r2, [r3, #0]
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e00:	6879      	ldr	r1, [r7, #4]
 8012e02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012e04:	440b      	add	r3, r1
 8012e06:	1ad3      	subs	r3, r2, r3
 8012e08:	3301      	adds	r3, #1
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	f300 80fa 	bgt.w	8013004 <tcp_receive+0x85c>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012e14:	4b7e      	ldr	r3, [pc, #504]	; (8013010 <tcp_receive+0x868>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	f040 80ef 	bne.w	8012ffc <tcp_receive+0x854>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8012e1e:	4b7d      	ldr	r3, [pc, #500]	; (8013014 <tcp_receive+0x86c>)
 8012e20:	891c      	ldrh	r4, [r3, #8]
 8012e22:	4b7c      	ldr	r3, [pc, #496]	; (8013014 <tcp_receive+0x86c>)
 8012e24:	68db      	ldr	r3, [r3, #12]
 8012e26:	899b      	ldrh	r3, [r3, #12]
 8012e28:	b29b      	uxth	r3, r3
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7fa fce2 	bl	800d7f4 <lwip_htons>
 8012e30:	4603      	mov	r3, r0
 8012e32:	b2db      	uxtb	r3, r3
 8012e34:	f003 0303 	and.w	r3, r3, #3
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d001      	beq.n	8012e40 <tcp_receive+0x698>
 8012e3c:	2301      	movs	r3, #1
 8012e3e:	e000      	b.n	8012e42 <tcp_receive+0x69a>
 8012e40:	2300      	movs	r3, #0
 8012e42:	4423      	add	r3, r4
 8012e44:	b29a      	uxth	r2, r3
 8012e46:	4b74      	ldr	r3, [pc, #464]	; (8013018 <tcp_receive+0x870>)
 8012e48:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012e4e:	4b72      	ldr	r3, [pc, #456]	; (8013018 <tcp_receive+0x870>)
 8012e50:	881b      	ldrh	r3, [r3, #0]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d275      	bcs.n	8012f42 <tcp_receive+0x79a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012e56:	4b6f      	ldr	r3, [pc, #444]	; (8013014 <tcp_receive+0x86c>)
 8012e58:	68db      	ldr	r3, [r3, #12]
 8012e5a:	899b      	ldrh	r3, [r3, #12]
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f7fa fcc8 	bl	800d7f4 <lwip_htons>
 8012e64:	4603      	mov	r3, r0
 8012e66:	b2db      	uxtb	r3, r3
 8012e68:	f003 0301 	and.w	r3, r3, #1
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d01f      	beq.n	8012eb0 <tcp_receive+0x708>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8012e70:	4b68      	ldr	r3, [pc, #416]	; (8013014 <tcp_receive+0x86c>)
 8012e72:	68db      	ldr	r3, [r3, #12]
 8012e74:	899b      	ldrh	r3, [r3, #12]
 8012e76:	b29b      	uxth	r3, r3
 8012e78:	b21b      	sxth	r3, r3
 8012e7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012e7e:	b21c      	sxth	r4, r3
 8012e80:	4b64      	ldr	r3, [pc, #400]	; (8013014 <tcp_receive+0x86c>)
 8012e82:	68db      	ldr	r3, [r3, #12]
 8012e84:	899b      	ldrh	r3, [r3, #12]
 8012e86:	b29b      	uxth	r3, r3
 8012e88:	4618      	mov	r0, r3
 8012e8a:	f7fa fcb3 	bl	800d7f4 <lwip_htons>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	b2db      	uxtb	r3, r3
 8012e92:	b29b      	uxth	r3, r3
 8012e94:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	f7fa fcaa 	bl	800d7f4 <lwip_htons>
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	b21b      	sxth	r3, r3
 8012ea4:	4323      	orrs	r3, r4
 8012ea6:	b21a      	sxth	r2, r3
 8012ea8:	4b5a      	ldr	r3, [pc, #360]	; (8013014 <tcp_receive+0x86c>)
 8012eaa:	68db      	ldr	r3, [r3, #12]
 8012eac:	b292      	uxth	r2, r2
 8012eae:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012eb4:	4b57      	ldr	r3, [pc, #348]	; (8013014 <tcp_receive+0x86c>)
 8012eb6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8012eb8:	4b56      	ldr	r3, [pc, #344]	; (8013014 <tcp_receive+0x86c>)
 8012eba:	68db      	ldr	r3, [r3, #12]
 8012ebc:	899b      	ldrh	r3, [r3, #12]
 8012ebe:	b29b      	uxth	r3, r3
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f7fa fc97 	bl	800d7f4 <lwip_htons>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	b2db      	uxtb	r3, r3
 8012eca:	f003 0302 	and.w	r3, r3, #2
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d005      	beq.n	8012ede <tcp_receive+0x736>
            inseg.len -= 1;
 8012ed2:	4b50      	ldr	r3, [pc, #320]	; (8013014 <tcp_receive+0x86c>)
 8012ed4:	891b      	ldrh	r3, [r3, #8]
 8012ed6:	3b01      	subs	r3, #1
 8012ed8:	b29a      	uxth	r2, r3
 8012eda:	4b4e      	ldr	r3, [pc, #312]	; (8013014 <tcp_receive+0x86c>)
 8012edc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8012ede:	4b4d      	ldr	r3, [pc, #308]	; (8013014 <tcp_receive+0x86c>)
 8012ee0:	685b      	ldr	r3, [r3, #4]
 8012ee2:	4a4c      	ldr	r2, [pc, #304]	; (8013014 <tcp_receive+0x86c>)
 8012ee4:	8912      	ldrh	r2, [r2, #8]
 8012ee6:	4611      	mov	r1, r2
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fb fefd 	bl	800ece8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8012eee:	4b49      	ldr	r3, [pc, #292]	; (8013014 <tcp_receive+0x86c>)
 8012ef0:	891c      	ldrh	r4, [r3, #8]
 8012ef2:	4b48      	ldr	r3, [pc, #288]	; (8013014 <tcp_receive+0x86c>)
 8012ef4:	68db      	ldr	r3, [r3, #12]
 8012ef6:	899b      	ldrh	r3, [r3, #12]
 8012ef8:	b29b      	uxth	r3, r3
 8012efa:	4618      	mov	r0, r3
 8012efc:	f7fa fc7a 	bl	800d7f4 <lwip_htons>
 8012f00:	4603      	mov	r3, r0
 8012f02:	b2db      	uxtb	r3, r3
 8012f04:	f003 0303 	and.w	r3, r3, #3
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d001      	beq.n	8012f10 <tcp_receive+0x768>
 8012f0c:	2301      	movs	r3, #1
 8012f0e:	e000      	b.n	8012f12 <tcp_receive+0x76a>
 8012f10:	2300      	movs	r3, #0
 8012f12:	4423      	add	r3, r4
 8012f14:	b29a      	uxth	r2, r3
 8012f16:	4b40      	ldr	r3, [pc, #256]	; (8013018 <tcp_receive+0x870>)
 8012f18:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8012f1a:	4b3f      	ldr	r3, [pc, #252]	; (8013018 <tcp_receive+0x870>)
 8012f1c:	881b      	ldrh	r3, [r3, #0]
 8012f1e:	461a      	mov	r2, r3
 8012f20:	4b3b      	ldr	r3, [pc, #236]	; (8013010 <tcp_receive+0x868>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	441a      	add	r2, r3
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f2a:	6879      	ldr	r1, [r7, #4]
 8012f2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8012f2e:	440b      	add	r3, r1
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d006      	beq.n	8012f42 <tcp_receive+0x79a>
 8012f34:	4b39      	ldr	r3, [pc, #228]	; (801301c <tcp_receive+0x874>)
 8012f36:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8012f3a:	4939      	ldr	r1, [pc, #228]	; (8013020 <tcp_receive+0x878>)
 8012f3c:	4839      	ldr	r0, [pc, #228]	; (8013024 <tcp_receive+0x87c>)
 8012f3e:	f003 f89d 	bl	801607c <iprintf>
            pcb->ooseq = next;
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8012f42:	4b35      	ldr	r3, [pc, #212]	; (8013018 <tcp_receive+0x870>)
 8012f44:	881b      	ldrh	r3, [r3, #0]
 8012f46:	461a      	mov	r2, r3
 8012f48:	4b31      	ldr	r3, [pc, #196]	; (8013010 <tcp_receive+0x868>)
 8012f4a:	681b      	ldr	r3, [r3, #0]
 8012f4c:	441a      	add	r2, r3
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012f56:	4b30      	ldr	r3, [pc, #192]	; (8013018 <tcp_receive+0x870>)
 8012f58:	881b      	ldrh	r3, [r3, #0]
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	d206      	bcs.n	8012f6c <tcp_receive+0x7c4>
 8012f5e:	4b2f      	ldr	r3, [pc, #188]	; (801301c <tcp_receive+0x874>)
 8012f60:	f240 6207 	movw	r2, #1543	; 0x607
 8012f64:	4930      	ldr	r1, [pc, #192]	; (8013028 <tcp_receive+0x880>)
 8012f66:	482f      	ldr	r0, [pc, #188]	; (8013024 <tcp_receive+0x87c>)
 8012f68:	f003 f888 	bl	801607c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012f70:	4b29      	ldr	r3, [pc, #164]	; (8013018 <tcp_receive+0x870>)
 8012f72:	881b      	ldrh	r3, [r3, #0]
 8012f74:	1ad3      	subs	r3, r2, r3
 8012f76:	b29a      	uxth	r2, r3
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8012f7c:	6878      	ldr	r0, [r7, #4]
 8012f7e:	f7fc ff8d 	bl	800fe9c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8012f82:	4b24      	ldr	r3, [pc, #144]	; (8013014 <tcp_receive+0x86c>)
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	891b      	ldrh	r3, [r3, #8]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d006      	beq.n	8012f9a <tcp_receive+0x7f2>
          recv_data = inseg.p;
 8012f8c:	4b21      	ldr	r3, [pc, #132]	; (8013014 <tcp_receive+0x86c>)
 8012f8e:	685b      	ldr	r3, [r3, #4]
 8012f90:	4a26      	ldr	r2, [pc, #152]	; (801302c <tcp_receive+0x884>)
 8012f92:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8012f94:	4b1f      	ldr	r3, [pc, #124]	; (8013014 <tcp_receive+0x86c>)
 8012f96:	2200      	movs	r2, #0
 8012f98:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8012f9a:	4b1e      	ldr	r3, [pc, #120]	; (8013014 <tcp_receive+0x86c>)
 8012f9c:	68db      	ldr	r3, [r3, #12]
 8012f9e:	899b      	ldrh	r3, [r3, #12]
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7fa fc26 	bl	800d7f4 <lwip_htons>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	b2db      	uxtb	r3, r3
 8012fac:	f003 0301 	and.w	r3, r3, #1
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d006      	beq.n	8012fc2 <tcp_receive+0x81a>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8012fb4:	4b1e      	ldr	r3, [pc, #120]	; (8013030 <tcp_receive+0x888>)
 8012fb6:	781b      	ldrb	r3, [r3, #0]
 8012fb8:	f043 0320 	orr.w	r3, r3, #32
 8012fbc:	b2da      	uxtb	r2, r3
 8012fbe:	4b1c      	ldr	r3, [pc, #112]	; (8013030 <tcp_receive+0x888>)
 8012fc0:	701a      	strb	r2, [r3, #0]
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	8b5b      	ldrh	r3, [r3, #26]
 8012fc6:	f003 0301 	and.w	r3, r3, #1
 8012fca:	2b00      	cmp	r3, #0
 8012fcc:	d00e      	beq.n	8012fec <tcp_receive+0x844>
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	8b5b      	ldrh	r3, [r3, #26]
 8012fd2:	f023 0301 	bic.w	r3, r3, #1
 8012fd6:	b29a      	uxth	r2, r3
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	835a      	strh	r2, [r3, #26]
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	8b5b      	ldrh	r3, [r3, #26]
 8012fe0:	f043 0302 	orr.w	r3, r3, #2
 8012fe4:	b29a      	uxth	r2, r3
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012fea:	e00f      	b.n	801300c <tcp_receive+0x864>
        tcp_ack(pcb);
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	8b5b      	ldrh	r3, [r3, #26]
 8012ff0:	f043 0301 	orr.w	r3, r3, #1
 8012ff4:	b29a      	uxth	r2, r3
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8012ffa:	e007      	b.n	801300c <tcp_receive+0x864>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f001 fe93 	bl	8014d28 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013002:	e003      	b.n	801300c <tcp_receive+0x864>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f001 fe8f 	bl	8014d28 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801300a:	e02d      	b.n	8013068 <tcp_receive+0x8c0>
 801300c:	e02c      	b.n	8013068 <tcp_receive+0x8c0>
 801300e:	bf00      	nop
 8013010:	240067d8 	.word	0x240067d8
 8013014:	240067b8 	.word	0x240067b8
 8013018:	240067e2 	.word	0x240067e2
 801301c:	0801a754 	.word	0x0801a754
 8013020:	0801ab18 	.word	0x0801ab18
 8013024:	0801a7e4 	.word	0x0801a7e4
 8013028:	0801ab50 	.word	0x0801ab50
 801302c:	240067e8 	.word	0x240067e8
 8013030:	240067e5 	.word	0x240067e5
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013034:	4b0e      	ldr	r3, [pc, #56]	; (8013070 <tcp_receive+0x8c8>)
 8013036:	681a      	ldr	r2, [r3, #0]
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801303c:	1ad3      	subs	r3, r2, r3
 801303e:	2b00      	cmp	r3, #0
 8013040:	db0a      	blt.n	8013058 <tcp_receive+0x8b0>
 8013042:	4b0b      	ldr	r3, [pc, #44]	; (8013070 <tcp_receive+0x8c8>)
 8013044:	681a      	ldr	r2, [r3, #0]
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801304a:	6879      	ldr	r1, [r7, #4]
 801304c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801304e:	440b      	add	r3, r1
 8013050:	1ad3      	subs	r3, r2, r3
 8013052:	3301      	adds	r3, #1
 8013054:	2b00      	cmp	r3, #0
 8013056:	dd07      	ble.n	8013068 <tcp_receive+0x8c0>
      tcp_ack_now(pcb);
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	8b5b      	ldrh	r3, [r3, #26]
 801305c:	f043 0302 	orr.w	r3, r3, #2
 8013060:	b29a      	uxth	r2, r3
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013066:	e7ff      	b.n	8013068 <tcp_receive+0x8c0>
 8013068:	bf00      	nop
 801306a:	3734      	adds	r7, #52	; 0x34
 801306c:	46bd      	mov	sp, r7
 801306e:	bd90      	pop	{r4, r7, pc}
 8013070:	240067d8 	.word	0x240067d8

08013074 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013074:	b480      	push	{r7}
 8013076:	b083      	sub	sp, #12
 8013078:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801307a:	4b15      	ldr	r3, [pc, #84]	; (80130d0 <tcp_get_next_optbyte+0x5c>)
 801307c:	881b      	ldrh	r3, [r3, #0]
 801307e:	1c5a      	adds	r2, r3, #1
 8013080:	b291      	uxth	r1, r2
 8013082:	4a13      	ldr	r2, [pc, #76]	; (80130d0 <tcp_get_next_optbyte+0x5c>)
 8013084:	8011      	strh	r1, [r2, #0]
 8013086:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013088:	4b12      	ldr	r3, [pc, #72]	; (80130d4 <tcp_get_next_optbyte+0x60>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d004      	beq.n	801309a <tcp_get_next_optbyte+0x26>
 8013090:	4b11      	ldr	r3, [pc, #68]	; (80130d8 <tcp_get_next_optbyte+0x64>)
 8013092:	881b      	ldrh	r3, [r3, #0]
 8013094:	88fa      	ldrh	r2, [r7, #6]
 8013096:	429a      	cmp	r2, r3
 8013098:	d208      	bcs.n	80130ac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801309a:	4b10      	ldr	r3, [pc, #64]	; (80130dc <tcp_get_next_optbyte+0x68>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	3314      	adds	r3, #20
 80130a0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80130a2:	88fb      	ldrh	r3, [r7, #6]
 80130a4:	683a      	ldr	r2, [r7, #0]
 80130a6:	4413      	add	r3, r2
 80130a8:	781b      	ldrb	r3, [r3, #0]
 80130aa:	e00b      	b.n	80130c4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80130ac:	88fb      	ldrh	r3, [r7, #6]
 80130ae:	b2da      	uxtb	r2, r3
 80130b0:	4b09      	ldr	r3, [pc, #36]	; (80130d8 <tcp_get_next_optbyte+0x64>)
 80130b2:	881b      	ldrh	r3, [r3, #0]
 80130b4:	b2db      	uxtb	r3, r3
 80130b6:	1ad3      	subs	r3, r2, r3
 80130b8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80130ba:	4b06      	ldr	r3, [pc, #24]	; (80130d4 <tcp_get_next_optbyte+0x60>)
 80130bc:	681a      	ldr	r2, [r3, #0]
 80130be:	797b      	ldrb	r3, [r7, #5]
 80130c0:	4413      	add	r3, r2
 80130c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	370c      	adds	r7, #12
 80130c8:	46bd      	mov	sp, r7
 80130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ce:	4770      	bx	lr
 80130d0:	240067d4 	.word	0x240067d4
 80130d4:	240067d0 	.word	0x240067d0
 80130d8:	240067ce 	.word	0x240067ce
 80130dc:	240067c8 	.word	0x240067c8

080130e0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80130e0:	b580      	push	{r7, lr}
 80130e2:	b084      	sub	sp, #16
 80130e4:	af00      	add	r7, sp, #0
 80130e6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d106      	bne.n	80130fc <tcp_parseopt+0x1c>
 80130ee:	4b32      	ldr	r3, [pc, #200]	; (80131b8 <tcp_parseopt+0xd8>)
 80130f0:	f240 727d 	movw	r2, #1917	; 0x77d
 80130f4:	4931      	ldr	r1, [pc, #196]	; (80131bc <tcp_parseopt+0xdc>)
 80130f6:	4832      	ldr	r0, [pc, #200]	; (80131c0 <tcp_parseopt+0xe0>)
 80130f8:	f002 ffc0 	bl	801607c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80130fc:	4b31      	ldr	r3, [pc, #196]	; (80131c4 <tcp_parseopt+0xe4>)
 80130fe:	881b      	ldrh	r3, [r3, #0]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d056      	beq.n	80131b2 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013104:	4b30      	ldr	r3, [pc, #192]	; (80131c8 <tcp_parseopt+0xe8>)
 8013106:	2200      	movs	r2, #0
 8013108:	801a      	strh	r2, [r3, #0]
 801310a:	e046      	b.n	801319a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 801310c:	f7ff ffb2 	bl	8013074 <tcp_get_next_optbyte>
 8013110:	4603      	mov	r3, r0
 8013112:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013114:	7bfb      	ldrb	r3, [r7, #15]
 8013116:	2b02      	cmp	r3, #2
 8013118:	d006      	beq.n	8013128 <tcp_parseopt+0x48>
 801311a:	2b02      	cmp	r3, #2
 801311c:	dc2c      	bgt.n	8013178 <tcp_parseopt+0x98>
 801311e:	2b00      	cmp	r3, #0
 8013120:	d042      	beq.n	80131a8 <tcp_parseopt+0xc8>
 8013122:	2b01      	cmp	r3, #1
 8013124:	d128      	bne.n	8013178 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013126:	e038      	b.n	801319a <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013128:	f7ff ffa4 	bl	8013074 <tcp_get_next_optbyte>
 801312c:	4603      	mov	r3, r0
 801312e:	2b04      	cmp	r3, #4
 8013130:	d13c      	bne.n	80131ac <tcp_parseopt+0xcc>
 8013132:	4b25      	ldr	r3, [pc, #148]	; (80131c8 <tcp_parseopt+0xe8>)
 8013134:	881b      	ldrh	r3, [r3, #0]
 8013136:	3301      	adds	r3, #1
 8013138:	4a22      	ldr	r2, [pc, #136]	; (80131c4 <tcp_parseopt+0xe4>)
 801313a:	8812      	ldrh	r2, [r2, #0]
 801313c:	4293      	cmp	r3, r2
 801313e:	da35      	bge.n	80131ac <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013140:	f7ff ff98 	bl	8013074 <tcp_get_next_optbyte>
 8013144:	4603      	mov	r3, r0
 8013146:	b29b      	uxth	r3, r3
 8013148:	021b      	lsls	r3, r3, #8
 801314a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801314c:	f7ff ff92 	bl	8013074 <tcp_get_next_optbyte>
 8013150:	4603      	mov	r3, r0
 8013152:	b29a      	uxth	r2, r3
 8013154:	89bb      	ldrh	r3, [r7, #12]
 8013156:	4313      	orrs	r3, r2
 8013158:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801315a:	89bb      	ldrh	r3, [r7, #12]
 801315c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8013160:	4293      	cmp	r3, r2
 8013162:	d804      	bhi.n	801316e <tcp_parseopt+0x8e>
 8013164:	89bb      	ldrh	r3, [r7, #12]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d001      	beq.n	801316e <tcp_parseopt+0x8e>
 801316a:	89ba      	ldrh	r2, [r7, #12]
 801316c:	e001      	b.n	8013172 <tcp_parseopt+0x92>
 801316e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013176:	e010      	b.n	801319a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013178:	f7ff ff7c 	bl	8013074 <tcp_get_next_optbyte>
 801317c:	4603      	mov	r3, r0
 801317e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013180:	7afb      	ldrb	r3, [r7, #11]
 8013182:	2b01      	cmp	r3, #1
 8013184:	d914      	bls.n	80131b0 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013186:	7afb      	ldrb	r3, [r7, #11]
 8013188:	b29a      	uxth	r2, r3
 801318a:	4b0f      	ldr	r3, [pc, #60]	; (80131c8 <tcp_parseopt+0xe8>)
 801318c:	881b      	ldrh	r3, [r3, #0]
 801318e:	4413      	add	r3, r2
 8013190:	b29b      	uxth	r3, r3
 8013192:	3b02      	subs	r3, #2
 8013194:	b29a      	uxth	r2, r3
 8013196:	4b0c      	ldr	r3, [pc, #48]	; (80131c8 <tcp_parseopt+0xe8>)
 8013198:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801319a:	4b0b      	ldr	r3, [pc, #44]	; (80131c8 <tcp_parseopt+0xe8>)
 801319c:	881a      	ldrh	r2, [r3, #0]
 801319e:	4b09      	ldr	r3, [pc, #36]	; (80131c4 <tcp_parseopt+0xe4>)
 80131a0:	881b      	ldrh	r3, [r3, #0]
 80131a2:	429a      	cmp	r2, r3
 80131a4:	d3b2      	bcc.n	801310c <tcp_parseopt+0x2c>
 80131a6:	e004      	b.n	80131b2 <tcp_parseopt+0xd2>
          return;
 80131a8:	bf00      	nop
 80131aa:	e002      	b.n	80131b2 <tcp_parseopt+0xd2>
            return;
 80131ac:	bf00      	nop
 80131ae:	e000      	b.n	80131b2 <tcp_parseopt+0xd2>
            return;
 80131b0:	bf00      	nop
      }
    }
  }
}
 80131b2:	3710      	adds	r7, #16
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}
 80131b8:	0801a754 	.word	0x0801a754
 80131bc:	0801ab70 	.word	0x0801ab70
 80131c0:	0801a7e4 	.word	0x0801a7e4
 80131c4:	240067cc 	.word	0x240067cc
 80131c8:	240067d4 	.word	0x240067d4

080131cc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80131cc:	b480      	push	{r7}
 80131ce:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80131d0:	4b05      	ldr	r3, [pc, #20]	; (80131e8 <tcp_trigger_input_pcb_close+0x1c>)
 80131d2:	781b      	ldrb	r3, [r3, #0]
 80131d4:	f043 0310 	orr.w	r3, r3, #16
 80131d8:	b2da      	uxtb	r2, r3
 80131da:	4b03      	ldr	r3, [pc, #12]	; (80131e8 <tcp_trigger_input_pcb_close+0x1c>)
 80131dc:	701a      	strb	r2, [r3, #0]
}
 80131de:	bf00      	nop
 80131e0:	46bd      	mov	sp, r7
 80131e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e6:	4770      	bx	lr
 80131e8:	240067e5 	.word	0x240067e5

080131ec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b084      	sub	sp, #16
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	60f8      	str	r0, [r7, #12]
 80131f4:	60b9      	str	r1, [r7, #8]
 80131f6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d00a      	beq.n	8013214 <tcp_route+0x28>
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	7a1b      	ldrb	r3, [r3, #8]
 8013202:	2b00      	cmp	r3, #0
 8013204:	d006      	beq.n	8013214 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013206:	68fb      	ldr	r3, [r7, #12]
 8013208:	7a1b      	ldrb	r3, [r3, #8]
 801320a:	4618      	mov	r0, r3
 801320c:	f7fb fbc0 	bl	800e990 <netif_get_by_index>
 8013210:	4603      	mov	r3, r0
 8013212:	e003      	b.n	801321c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f7f9 f9dd 	bl	800c5d4 <ip4_route>
 801321a:	4603      	mov	r3, r0
  }
}
 801321c:	4618      	mov	r0, r3
 801321e:	3710      	adds	r7, #16
 8013220:	46bd      	mov	sp, r7
 8013222:	bd80      	pop	{r7, pc}

08013224 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013224:	b590      	push	{r4, r7, lr}
 8013226:	b087      	sub	sp, #28
 8013228:	af00      	add	r7, sp, #0
 801322a:	60f8      	str	r0, [r7, #12]
 801322c:	60b9      	str	r1, [r7, #8]
 801322e:	603b      	str	r3, [r7, #0]
 8013230:	4613      	mov	r3, r2
 8013232:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	2b00      	cmp	r3, #0
 8013238:	d105      	bne.n	8013246 <tcp_create_segment+0x22>
 801323a:	4b44      	ldr	r3, [pc, #272]	; (801334c <tcp_create_segment+0x128>)
 801323c:	22a3      	movs	r2, #163	; 0xa3
 801323e:	4944      	ldr	r1, [pc, #272]	; (8013350 <tcp_create_segment+0x12c>)
 8013240:	4844      	ldr	r0, [pc, #272]	; (8013354 <tcp_create_segment+0x130>)
 8013242:	f002 ff1b 	bl	801607c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d105      	bne.n	8013258 <tcp_create_segment+0x34>
 801324c:	4b3f      	ldr	r3, [pc, #252]	; (801334c <tcp_create_segment+0x128>)
 801324e:	22a4      	movs	r2, #164	; 0xa4
 8013250:	4941      	ldr	r1, [pc, #260]	; (8013358 <tcp_create_segment+0x134>)
 8013252:	4840      	ldr	r0, [pc, #256]	; (8013354 <tcp_create_segment+0x130>)
 8013254:	f002 ff12 	bl	801607c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013258:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801325c:	009b      	lsls	r3, r3, #2
 801325e:	b2db      	uxtb	r3, r3
 8013260:	f003 0304 	and.w	r3, r3, #4
 8013264:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013266:	2003      	movs	r0, #3
 8013268:	f7fb f806 	bl	800e278 <memp_malloc>
 801326c:	6138      	str	r0, [r7, #16]
 801326e:	693b      	ldr	r3, [r7, #16]
 8013270:	2b00      	cmp	r3, #0
 8013272:	d104      	bne.n	801327e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013274:	68b8      	ldr	r0, [r7, #8]
 8013276:	f7fb febd 	bl	800eff4 <pbuf_free>
    return NULL;
 801327a:	2300      	movs	r3, #0
 801327c:	e061      	b.n	8013342 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801327e:	693b      	ldr	r3, [r7, #16]
 8013280:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013284:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	2200      	movs	r2, #0
 801328a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801328c:	693b      	ldr	r3, [r7, #16]
 801328e:	68ba      	ldr	r2, [r7, #8]
 8013290:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	891a      	ldrh	r2, [r3, #8]
 8013296:	7dfb      	ldrb	r3, [r7, #23]
 8013298:	b29b      	uxth	r3, r3
 801329a:	429a      	cmp	r2, r3
 801329c:	d205      	bcs.n	80132aa <tcp_create_segment+0x86>
 801329e:	4b2b      	ldr	r3, [pc, #172]	; (801334c <tcp_create_segment+0x128>)
 80132a0:	22b0      	movs	r2, #176	; 0xb0
 80132a2:	492e      	ldr	r1, [pc, #184]	; (801335c <tcp_create_segment+0x138>)
 80132a4:	482b      	ldr	r0, [pc, #172]	; (8013354 <tcp_create_segment+0x130>)
 80132a6:	f002 fee9 	bl	801607c <iprintf>
  seg->len = p->tot_len - optlen;
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	891a      	ldrh	r2, [r3, #8]
 80132ae:	7dfb      	ldrb	r3, [r7, #23]
 80132b0:	b29b      	uxth	r3, r3
 80132b2:	1ad3      	subs	r3, r2, r3
 80132b4:	b29a      	uxth	r2, r3
 80132b6:	693b      	ldr	r3, [r7, #16]
 80132b8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80132ba:	2114      	movs	r1, #20
 80132bc:	68b8      	ldr	r0, [r7, #8]
 80132be:	f7fb fe03 	bl	800eec8 <pbuf_add_header>
 80132c2:	4603      	mov	r3, r0
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d004      	beq.n	80132d2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80132c8:	6938      	ldr	r0, [r7, #16]
 80132ca:	f7fd fc12 	bl	8010af2 <tcp_seg_free>
    return NULL;
 80132ce:	2300      	movs	r3, #0
 80132d0:	e037      	b.n	8013342 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	685b      	ldr	r3, [r3, #4]
 80132d6:	685a      	ldr	r2, [r3, #4]
 80132d8:	693b      	ldr	r3, [r7, #16]
 80132da:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	8ada      	ldrh	r2, [r3, #22]
 80132e0:	693b      	ldr	r3, [r7, #16]
 80132e2:	68dc      	ldr	r4, [r3, #12]
 80132e4:	4610      	mov	r0, r2
 80132e6:	f7fa fa85 	bl	800d7f4 <lwip_htons>
 80132ea:	4603      	mov	r3, r0
 80132ec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	8b1a      	ldrh	r2, [r3, #24]
 80132f2:	693b      	ldr	r3, [r7, #16]
 80132f4:	68dc      	ldr	r4, [r3, #12]
 80132f6:	4610      	mov	r0, r2
 80132f8:	f7fa fa7c 	bl	800d7f4 <lwip_htons>
 80132fc:	4603      	mov	r3, r0
 80132fe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8013300:	693b      	ldr	r3, [r7, #16]
 8013302:	68dc      	ldr	r4, [r3, #12]
 8013304:	6838      	ldr	r0, [r7, #0]
 8013306:	f7fa fa8a 	bl	800d81e <lwip_htonl>
 801330a:	4603      	mov	r3, r0
 801330c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801330e:	7dfb      	ldrb	r3, [r7, #23]
 8013310:	089b      	lsrs	r3, r3, #2
 8013312:	b2db      	uxtb	r3, r3
 8013314:	b29b      	uxth	r3, r3
 8013316:	3305      	adds	r3, #5
 8013318:	b29b      	uxth	r3, r3
 801331a:	031b      	lsls	r3, r3, #12
 801331c:	b29a      	uxth	r2, r3
 801331e:	79fb      	ldrb	r3, [r7, #7]
 8013320:	b29b      	uxth	r3, r3
 8013322:	4313      	orrs	r3, r2
 8013324:	b29a      	uxth	r2, r3
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	68dc      	ldr	r4, [r3, #12]
 801332a:	4610      	mov	r0, r2
 801332c:	f7fa fa62 	bl	800d7f4 <lwip_htons>
 8013330:	4603      	mov	r3, r0
 8013332:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	68db      	ldr	r3, [r3, #12]
 8013338:	2200      	movs	r2, #0
 801333a:	749a      	strb	r2, [r3, #18]
 801333c:	2200      	movs	r2, #0
 801333e:	74da      	strb	r2, [r3, #19]
  return seg;
 8013340:	693b      	ldr	r3, [r7, #16]
}
 8013342:	4618      	mov	r0, r3
 8013344:	371c      	adds	r7, #28
 8013346:	46bd      	mov	sp, r7
 8013348:	bd90      	pop	{r4, r7, pc}
 801334a:	bf00      	nop
 801334c:	0801ab8c 	.word	0x0801ab8c
 8013350:	0801ac04 	.word	0x0801ac04
 8013354:	0801ac24 	.word	0x0801ac24
 8013358:	0801ac4c 	.word	0x0801ac4c
 801335c:	0801ac70 	.word	0x0801ac70

08013360 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8013360:	b580      	push	{r7, lr}
 8013362:	b086      	sub	sp, #24
 8013364:	af00      	add	r7, sp, #0
 8013366:	607b      	str	r3, [r7, #4]
 8013368:	4603      	mov	r3, r0
 801336a:	73fb      	strb	r3, [r7, #15]
 801336c:	460b      	mov	r3, r1
 801336e:	81bb      	strh	r3, [r7, #12]
 8013370:	4613      	mov	r3, r2
 8013372:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8013374:	89bb      	ldrh	r3, [r7, #12]
 8013376:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	2b00      	cmp	r3, #0
 801337c:	d105      	bne.n	801338a <tcp_pbuf_prealloc+0x2a>
 801337e:	4b30      	ldr	r3, [pc, #192]	; (8013440 <tcp_pbuf_prealloc+0xe0>)
 8013380:	22e8      	movs	r2, #232	; 0xe8
 8013382:	4930      	ldr	r1, [pc, #192]	; (8013444 <tcp_pbuf_prealloc+0xe4>)
 8013384:	4830      	ldr	r0, [pc, #192]	; (8013448 <tcp_pbuf_prealloc+0xe8>)
 8013386:	f002 fe79 	bl	801607c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801338a:	6a3b      	ldr	r3, [r7, #32]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d105      	bne.n	801339c <tcp_pbuf_prealloc+0x3c>
 8013390:	4b2b      	ldr	r3, [pc, #172]	; (8013440 <tcp_pbuf_prealloc+0xe0>)
 8013392:	22e9      	movs	r2, #233	; 0xe9
 8013394:	492d      	ldr	r1, [pc, #180]	; (801344c <tcp_pbuf_prealloc+0xec>)
 8013396:	482c      	ldr	r0, [pc, #176]	; (8013448 <tcp_pbuf_prealloc+0xe8>)
 8013398:	f002 fe70 	bl	801607c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801339c:	89ba      	ldrh	r2, [r7, #12]
 801339e:	897b      	ldrh	r3, [r7, #10]
 80133a0:	429a      	cmp	r2, r3
 80133a2:	d221      	bcs.n	80133e8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80133a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80133a8:	f003 0302 	and.w	r3, r3, #2
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d111      	bne.n	80133d4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80133b0:	6a3b      	ldr	r3, [r7, #32]
 80133b2:	8b5b      	ldrh	r3, [r3, #26]
 80133b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d115      	bne.n	80133e8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80133bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d007      	beq.n	80133d4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80133c4:	6a3b      	ldr	r3, [r7, #32]
 80133c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d103      	bne.n	80133d4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80133cc:	6a3b      	ldr	r3, [r7, #32]
 80133ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d009      	beq.n	80133e8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80133d4:	89bb      	ldrh	r3, [r7, #12]
 80133d6:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 80133da:	f023 0203 	bic.w	r2, r3, #3
 80133de:	897b      	ldrh	r3, [r7, #10]
 80133e0:	4293      	cmp	r3, r2
 80133e2:	bf28      	it	cs
 80133e4:	4613      	movcs	r3, r2
 80133e6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80133e8:	8af9      	ldrh	r1, [r7, #22]
 80133ea:	7bfb      	ldrb	r3, [r7, #15]
 80133ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7fb fb1d 	bl	800ea30 <pbuf_alloc>
 80133f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80133f8:	693b      	ldr	r3, [r7, #16]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d101      	bne.n	8013402 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 80133fe:	2300      	movs	r3, #0
 8013400:	e019      	b.n	8013436 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	2b00      	cmp	r3, #0
 8013408:	d006      	beq.n	8013418 <tcp_pbuf_prealloc+0xb8>
 801340a:	4b0d      	ldr	r3, [pc, #52]	; (8013440 <tcp_pbuf_prealloc+0xe0>)
 801340c:	f240 120b 	movw	r2, #267	; 0x10b
 8013410:	490f      	ldr	r1, [pc, #60]	; (8013450 <tcp_pbuf_prealloc+0xf0>)
 8013412:	480d      	ldr	r0, [pc, #52]	; (8013448 <tcp_pbuf_prealloc+0xe8>)
 8013414:	f002 fe32 	bl	801607c <iprintf>
  *oversize = p->len - length;
 8013418:	693b      	ldr	r3, [r7, #16]
 801341a:	895a      	ldrh	r2, [r3, #10]
 801341c:	89bb      	ldrh	r3, [r7, #12]
 801341e:	1ad3      	subs	r3, r2, r3
 8013420:	b29a      	uxth	r2, r3
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8013426:	693b      	ldr	r3, [r7, #16]
 8013428:	89ba      	ldrh	r2, [r7, #12]
 801342a:	811a      	strh	r2, [r3, #8]
 801342c:	693b      	ldr	r3, [r7, #16]
 801342e:	891a      	ldrh	r2, [r3, #8]
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	815a      	strh	r2, [r3, #10]
  return p;
 8013434:	693b      	ldr	r3, [r7, #16]
}
 8013436:	4618      	mov	r0, r3
 8013438:	3718      	adds	r7, #24
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	0801ab8c 	.word	0x0801ab8c
 8013444:	0801ac88 	.word	0x0801ac88
 8013448:	0801ac24 	.word	0x0801ac24
 801344c:	0801acac 	.word	0x0801acac
 8013450:	0801accc 	.word	0x0801accc

08013454 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b082      	sub	sp, #8
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
 801345c:	460b      	mov	r3, r1
 801345e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d106      	bne.n	8013474 <tcp_write_checks+0x20>
 8013466:	4b33      	ldr	r3, [pc, #204]	; (8013534 <tcp_write_checks+0xe0>)
 8013468:	f240 1233 	movw	r2, #307	; 0x133
 801346c:	4932      	ldr	r1, [pc, #200]	; (8013538 <tcp_write_checks+0xe4>)
 801346e:	4833      	ldr	r0, [pc, #204]	; (801353c <tcp_write_checks+0xe8>)
 8013470:	f002 fe04 	bl	801607c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	7d1b      	ldrb	r3, [r3, #20]
 8013478:	2b04      	cmp	r3, #4
 801347a:	d00e      	beq.n	801349a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8013480:	2b07      	cmp	r3, #7
 8013482:	d00a      	beq.n	801349a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8013488:	2b02      	cmp	r3, #2
 801348a:	d006      	beq.n	801349a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8013490:	2b03      	cmp	r3, #3
 8013492:	d002      	beq.n	801349a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8013494:	f06f 030a 	mvn.w	r3, #10
 8013498:	e048      	b.n	801352c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801349a:	887b      	ldrh	r3, [r7, #2]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d101      	bne.n	80134a4 <tcp_write_checks+0x50>
    return ERR_OK;
 80134a0:	2300      	movs	r3, #0
 80134a2:	e043      	b.n	801352c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80134aa:	887a      	ldrh	r2, [r7, #2]
 80134ac:	429a      	cmp	r2, r3
 80134ae:	d909      	bls.n	80134c4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	8b5b      	ldrh	r3, [r3, #26]
 80134b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134b8:	b29a      	uxth	r2, r3
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80134be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134c2:	e033      	b.n	801352c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134ca:	2b07      	cmp	r3, #7
 80134cc:	d909      	bls.n	80134e2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	8b5b      	ldrh	r3, [r3, #26]
 80134d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134d6:	b29a      	uxth	r2, r3
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80134dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134e0:	e024      	b.n	801352c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d00f      	beq.n	801350c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d11a      	bne.n	801352a <tcp_write_checks+0xd6>
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d116      	bne.n	801352a <tcp_write_checks+0xd6>
 80134fc:	4b0d      	ldr	r3, [pc, #52]	; (8013534 <tcp_write_checks+0xe0>)
 80134fe:	f240 1255 	movw	r2, #341	; 0x155
 8013502:	490f      	ldr	r1, [pc, #60]	; (8013540 <tcp_write_checks+0xec>)
 8013504:	480d      	ldr	r0, [pc, #52]	; (801353c <tcp_write_checks+0xe8>)
 8013506:	f002 fdb9 	bl	801607c <iprintf>
 801350a:	e00e      	b.n	801352a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013510:	2b00      	cmp	r3, #0
 8013512:	d103      	bne.n	801351c <tcp_write_checks+0xc8>
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013518:	2b00      	cmp	r3, #0
 801351a:	d006      	beq.n	801352a <tcp_write_checks+0xd6>
 801351c:	4b05      	ldr	r3, [pc, #20]	; (8013534 <tcp_write_checks+0xe0>)
 801351e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8013522:	4908      	ldr	r1, [pc, #32]	; (8013544 <tcp_write_checks+0xf0>)
 8013524:	4805      	ldr	r0, [pc, #20]	; (801353c <tcp_write_checks+0xe8>)
 8013526:	f002 fda9 	bl	801607c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801352a:	2300      	movs	r3, #0
}
 801352c:	4618      	mov	r0, r3
 801352e:	3708      	adds	r7, #8
 8013530:	46bd      	mov	sp, r7
 8013532:	bd80      	pop	{r7, pc}
 8013534:	0801ab8c 	.word	0x0801ab8c
 8013538:	0801ace0 	.word	0x0801ace0
 801353c:	0801ac24 	.word	0x0801ac24
 8013540:	0801ad00 	.word	0x0801ad00
 8013544:	0801ad3c 	.word	0x0801ad3c

08013548 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8013548:	b590      	push	{r4, r7, lr}
 801354a:	b09b      	sub	sp, #108	; 0x6c
 801354c:	af04      	add	r7, sp, #16
 801354e:	60f8      	str	r0, [r7, #12]
 8013550:	60b9      	str	r1, [r7, #8]
 8013552:	4611      	mov	r1, r2
 8013554:	461a      	mov	r2, r3
 8013556:	460b      	mov	r3, r1
 8013558:	80fb      	strh	r3, [r7, #6]
 801355a:	4613      	mov	r3, r2
 801355c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801355e:	2300      	movs	r3, #0
 8013560:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8013562:	2300      	movs	r3, #0
 8013564:	653b      	str	r3, [r7, #80]	; 0x50
 8013566:	2300      	movs	r3, #0
 8013568:	64fb      	str	r3, [r7, #76]	; 0x4c
 801356a:	2300      	movs	r3, #0
 801356c:	64bb      	str	r3, [r7, #72]	; 0x48
 801356e:	2300      	movs	r3, #0
 8013570:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8013572:	2300      	movs	r3, #0
 8013574:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8013578:	2300      	movs	r3, #0
 801357a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801357e:	2300      	movs	r3, #0
 8013580:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8013582:	2300      	movs	r3, #0
 8013584:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8013586:	2300      	movs	r3, #0
 8013588:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801358a:	68fb      	ldr	r3, [r7, #12]
 801358c:	2b00      	cmp	r3, #0
 801358e:	d109      	bne.n	80135a4 <tcp_write+0x5c>
 8013590:	4ba4      	ldr	r3, [pc, #656]	; (8013824 <tcp_write+0x2dc>)
 8013592:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013596:	49a4      	ldr	r1, [pc, #656]	; (8013828 <tcp_write+0x2e0>)
 8013598:	48a4      	ldr	r0, [pc, #656]	; (801382c <tcp_write+0x2e4>)
 801359a:	f002 fd6f 	bl	801607c <iprintf>
 801359e:	f06f 030f 	mvn.w	r3, #15
 80135a2:	e32a      	b.n	8013bfa <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80135aa:	085b      	lsrs	r3, r3, #1
 80135ac:	b29a      	uxth	r2, r3
 80135ae:	68fb      	ldr	r3, [r7, #12]
 80135b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135b2:	4293      	cmp	r3, r2
 80135b4:	bf28      	it	cs
 80135b6:	4613      	movcs	r3, r2
 80135b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80135ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d102      	bne.n	80135c6 <tcp_write+0x7e>
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135c4:	e000      	b.n	80135c8 <tcp_write+0x80>
 80135c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80135c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80135ca:	68bb      	ldr	r3, [r7, #8]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d109      	bne.n	80135e4 <tcp_write+0x9c>
 80135d0:	4b94      	ldr	r3, [pc, #592]	; (8013824 <tcp_write+0x2dc>)
 80135d2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80135d6:	4996      	ldr	r1, [pc, #600]	; (8013830 <tcp_write+0x2e8>)
 80135d8:	4894      	ldr	r0, [pc, #592]	; (801382c <tcp_write+0x2e4>)
 80135da:	f002 fd4f 	bl	801607c <iprintf>
 80135de:	f06f 030f 	mvn.w	r3, #15
 80135e2:	e30a      	b.n	8013bfa <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80135e4:	88fb      	ldrh	r3, [r7, #6]
 80135e6:	4619      	mov	r1, r3
 80135e8:	68f8      	ldr	r0, [r7, #12]
 80135ea:	f7ff ff33 	bl	8013454 <tcp_write_checks>
 80135ee:	4603      	mov	r3, r0
 80135f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80135f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d002      	beq.n	8013602 <tcp_write+0xba>
    return err;
 80135fc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8013600:	e2fb      	b.n	8013bfa <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013608:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801360c:	2300      	movs	r3, #0
 801360e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013616:	2b00      	cmp	r3, #0
 8013618:	f000 80f6 	beq.w	8013808 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013620:	653b      	str	r3, [r7, #80]	; 0x50
 8013622:	e002      	b.n	801362a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8013624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801362a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d1f8      	bne.n	8013624 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8013632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013634:	7a9b      	ldrb	r3, [r3, #10]
 8013636:	009b      	lsls	r3, r3, #2
 8013638:	b29b      	uxth	r3, r3
 801363a:	f003 0304 	and.w	r3, r3, #4
 801363e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8013640:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013644:	891b      	ldrh	r3, [r3, #8]
 8013646:	4619      	mov	r1, r3
 8013648:	8c3b      	ldrh	r3, [r7, #32]
 801364a:	440b      	add	r3, r1
 801364c:	429a      	cmp	r2, r3
 801364e:	da06      	bge.n	801365e <tcp_write+0x116>
 8013650:	4b74      	ldr	r3, [pc, #464]	; (8013824 <tcp_write+0x2dc>)
 8013652:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013656:	4977      	ldr	r1, [pc, #476]	; (8013834 <tcp_write+0x2ec>)
 8013658:	4874      	ldr	r0, [pc, #464]	; (801382c <tcp_write+0x2e4>)
 801365a:	f002 fd0f 	bl	801607c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801365e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013660:	891a      	ldrh	r2, [r3, #8]
 8013662:	8c3b      	ldrh	r3, [r7, #32]
 8013664:	4413      	add	r3, r2
 8013666:	b29b      	uxth	r3, r3
 8013668:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801366a:	1ad3      	subs	r3, r2, r3
 801366c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8013674:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8013676:	8a7b      	ldrh	r3, [r7, #18]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d026      	beq.n	80136ca <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801367c:	8a7b      	ldrh	r3, [r7, #18]
 801367e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013680:	429a      	cmp	r2, r3
 8013682:	d206      	bcs.n	8013692 <tcp_write+0x14a>
 8013684:	4b67      	ldr	r3, [pc, #412]	; (8013824 <tcp_write+0x2dc>)
 8013686:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801368a:	496b      	ldr	r1, [pc, #428]	; (8013838 <tcp_write+0x2f0>)
 801368c:	4867      	ldr	r0, [pc, #412]	; (801382c <tcp_write+0x2e4>)
 801368e:	f002 fcf5 	bl	801607c <iprintf>
      seg = last_unsent;
 8013692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013694:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8013696:	8a7b      	ldrh	r3, [r7, #18]
 8013698:	88fa      	ldrh	r2, [r7, #6]
 801369a:	4293      	cmp	r3, r2
 801369c:	bf28      	it	cs
 801369e:	4613      	movcs	r3, r2
 80136a0:	b29b      	uxth	r3, r3
 80136a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80136a4:	4293      	cmp	r3, r2
 80136a6:	bf28      	it	cs
 80136a8:	4613      	movcs	r3, r2
 80136aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80136ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136b2:	4413      	add	r3, r2
 80136b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80136b8:	8a7a      	ldrh	r2, [r7, #18]
 80136ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136bc:	1ad3      	subs	r3, r2, r3
 80136be:	b29b      	uxth	r3, r3
 80136c0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80136c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80136c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80136c6:	1ad3      	subs	r3, r2, r3
 80136c8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80136ca:	8a7b      	ldrh	r3, [r7, #18]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d00b      	beq.n	80136e8 <tcp_write+0x1a0>
 80136d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136d4:	88fb      	ldrh	r3, [r7, #6]
 80136d6:	429a      	cmp	r2, r3
 80136d8:	d006      	beq.n	80136e8 <tcp_write+0x1a0>
 80136da:	4b52      	ldr	r3, [pc, #328]	; (8013824 <tcp_write+0x2dc>)
 80136dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80136e0:	4956      	ldr	r1, [pc, #344]	; (801383c <tcp_write+0x2f4>)
 80136e2:	4852      	ldr	r0, [pc, #328]	; (801382c <tcp_write+0x2e4>)
 80136e4:	f002 fcca 	bl	801607c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80136e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80136ec:	88fb      	ldrh	r3, [r7, #6]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	f080 8167 	bcs.w	80139c2 <tcp_write+0x47a>
 80136f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	f000 8163 	beq.w	80139c2 <tcp_write+0x47a>
 80136fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80136fe:	891b      	ldrh	r3, [r3, #8]
 8013700:	2b00      	cmp	r3, #0
 8013702:	f000 815e 	beq.w	80139c2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8013706:	88fa      	ldrh	r2, [r7, #6]
 8013708:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801370c:	1ad2      	subs	r2, r2, r3
 801370e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013710:	4293      	cmp	r3, r2
 8013712:	bfa8      	it	ge
 8013714:	4613      	movge	r3, r2
 8013716:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8013718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801371a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801371c:	797b      	ldrb	r3, [r7, #5]
 801371e:	f003 0301 	and.w	r3, r3, #1
 8013722:	2b00      	cmp	r3, #0
 8013724:	d027      	beq.n	8013776 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8013726:	f107 0012 	add.w	r0, r7, #18
 801372a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801372c:	8bf9      	ldrh	r1, [r7, #30]
 801372e:	2301      	movs	r3, #1
 8013730:	9302      	str	r3, [sp, #8]
 8013732:	797b      	ldrb	r3, [r7, #5]
 8013734:	9301      	str	r3, [sp, #4]
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	9300      	str	r3, [sp, #0]
 801373a:	4603      	mov	r3, r0
 801373c:	2000      	movs	r0, #0
 801373e:	f7ff fe0f 	bl	8013360 <tcp_pbuf_prealloc>
 8013742:	6578      	str	r0, [r7, #84]	; 0x54
 8013744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013746:	2b00      	cmp	r3, #0
 8013748:	f000 8225 	beq.w	8013b96 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801374c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801374e:	6858      	ldr	r0, [r3, #4]
 8013750:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013754:	68ba      	ldr	r2, [r7, #8]
 8013756:	4413      	add	r3, r2
 8013758:	8bfa      	ldrh	r2, [r7, #30]
 801375a:	4619      	mov	r1, r3
 801375c:	f002 fc5e 	bl	801601c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8013760:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013762:	f7fb fcd5 	bl	800f110 <pbuf_clen>
 8013766:	4603      	mov	r3, r0
 8013768:	461a      	mov	r2, r3
 801376a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801376e:	4413      	add	r3, r2
 8013770:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8013774:	e041      	b.n	80137fa <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8013776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013778:	685b      	ldr	r3, [r3, #4]
 801377a:	637b      	str	r3, [r7, #52]	; 0x34
 801377c:	e002      	b.n	8013784 <tcp_write+0x23c>
 801377e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	637b      	str	r3, [r7, #52]	; 0x34
 8013784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d1f8      	bne.n	801377e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801378c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801378e:	7b1b      	ldrb	r3, [r3, #12]
 8013790:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8013794:	2b00      	cmp	r3, #0
 8013796:	d115      	bne.n	80137c4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8013798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801379a:	685b      	ldr	r3, [r3, #4]
 801379c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801379e:	8952      	ldrh	r2, [r2, #10]
 80137a0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80137a2:	68ba      	ldr	r2, [r7, #8]
 80137a4:	429a      	cmp	r2, r3
 80137a6:	d10d      	bne.n	80137c4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80137a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d006      	beq.n	80137be <tcp_write+0x276>
 80137b0:	4b1c      	ldr	r3, [pc, #112]	; (8013824 <tcp_write+0x2dc>)
 80137b2:	f240 2231 	movw	r2, #561	; 0x231
 80137b6:	4922      	ldr	r1, [pc, #136]	; (8013840 <tcp_write+0x2f8>)
 80137b8:	481c      	ldr	r0, [pc, #112]	; (801382c <tcp_write+0x2e4>)
 80137ba:	f002 fc5f 	bl	801607c <iprintf>
          extendlen = seglen;
 80137be:	8bfb      	ldrh	r3, [r7, #30]
 80137c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80137c2:	e01a      	b.n	80137fa <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80137c4:	8bfb      	ldrh	r3, [r7, #30]
 80137c6:	2201      	movs	r2, #1
 80137c8:	4619      	mov	r1, r3
 80137ca:	2000      	movs	r0, #0
 80137cc:	f7fb f930 	bl	800ea30 <pbuf_alloc>
 80137d0:	6578      	str	r0, [r7, #84]	; 0x54
 80137d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	f000 81e0 	beq.w	8013b9a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80137da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80137de:	68ba      	ldr	r2, [r7, #8]
 80137e0:	441a      	add	r2, r3
 80137e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80137e4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80137e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80137e8:	f7fb fc92 	bl	800f110 <pbuf_clen>
 80137ec:	4603      	mov	r3, r0
 80137ee:	461a      	mov	r2, r3
 80137f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80137f4:	4413      	add	r3, r2
 80137f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80137fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80137fe:	8bfb      	ldrh	r3, [r7, #30]
 8013800:	4413      	add	r3, r2
 8013802:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013806:	e0dc      	b.n	80139c2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8013808:	68fb      	ldr	r3, [r7, #12]
 801380a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801380e:	2b00      	cmp	r3, #0
 8013810:	f000 80d7 	beq.w	80139c2 <tcp_write+0x47a>
 8013814:	4b03      	ldr	r3, [pc, #12]	; (8013824 <tcp_write+0x2dc>)
 8013816:	f240 224a 	movw	r2, #586	; 0x24a
 801381a:	490a      	ldr	r1, [pc, #40]	; (8013844 <tcp_write+0x2fc>)
 801381c:	4803      	ldr	r0, [pc, #12]	; (801382c <tcp_write+0x2e4>)
 801381e:	f002 fc2d 	bl	801607c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8013822:	e0ce      	b.n	80139c2 <tcp_write+0x47a>
 8013824:	0801ab8c 	.word	0x0801ab8c
 8013828:	0801ad70 	.word	0x0801ad70
 801382c:	0801ac24 	.word	0x0801ac24
 8013830:	0801ad88 	.word	0x0801ad88
 8013834:	0801adbc 	.word	0x0801adbc
 8013838:	0801add4 	.word	0x0801add4
 801383c:	0801adf4 	.word	0x0801adf4
 8013840:	0801ae14 	.word	0x0801ae14
 8013844:	0801ae40 	.word	0x0801ae40
    struct pbuf *p;
    u16_t left = len - pos;
 8013848:	88fa      	ldrh	r2, [r7, #6]
 801384a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801384e:	1ad3      	subs	r3, r2, r3
 8013850:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8013852:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013856:	b29b      	uxth	r3, r3
 8013858:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801385a:	1ad3      	subs	r3, r2, r3
 801385c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801385e:	8b7a      	ldrh	r2, [r7, #26]
 8013860:	8bbb      	ldrh	r3, [r7, #28]
 8013862:	4293      	cmp	r3, r2
 8013864:	bf28      	it	cs
 8013866:	4613      	movcs	r3, r2
 8013868:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801386a:	797b      	ldrb	r3, [r7, #5]
 801386c:	f003 0301 	and.w	r3, r3, #1
 8013870:	2b00      	cmp	r3, #0
 8013872:	d036      	beq.n	80138e2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8013874:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013878:	b29a      	uxth	r2, r3
 801387a:	8b3b      	ldrh	r3, [r7, #24]
 801387c:	4413      	add	r3, r2
 801387e:	b299      	uxth	r1, r3
 8013880:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013882:	2b00      	cmp	r3, #0
 8013884:	bf0c      	ite	eq
 8013886:	2301      	moveq	r3, #1
 8013888:	2300      	movne	r3, #0
 801388a:	b2db      	uxtb	r3, r3
 801388c:	f107 0012 	add.w	r0, r7, #18
 8013890:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013892:	9302      	str	r3, [sp, #8]
 8013894:	797b      	ldrb	r3, [r7, #5]
 8013896:	9301      	str	r3, [sp, #4]
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	9300      	str	r3, [sp, #0]
 801389c:	4603      	mov	r3, r0
 801389e:	2036      	movs	r0, #54	; 0x36
 80138a0:	f7ff fd5e 	bl	8013360 <tcp_pbuf_prealloc>
 80138a4:	6338      	str	r0, [r7, #48]	; 0x30
 80138a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	f000 8178 	beq.w	8013b9e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80138ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b0:	895b      	ldrh	r3, [r3, #10]
 80138b2:	8b3a      	ldrh	r2, [r7, #24]
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d906      	bls.n	80138c6 <tcp_write+0x37e>
 80138b8:	4b8c      	ldr	r3, [pc, #560]	; (8013aec <tcp_write+0x5a4>)
 80138ba:	f240 2266 	movw	r2, #614	; 0x266
 80138be:	498c      	ldr	r1, [pc, #560]	; (8013af0 <tcp_write+0x5a8>)
 80138c0:	488c      	ldr	r0, [pc, #560]	; (8013af4 <tcp_write+0x5ac>)
 80138c2:	f002 fbdb 	bl	801607c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80138c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c8:	685a      	ldr	r2, [r3, #4]
 80138ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80138ce:	18d0      	adds	r0, r2, r3
 80138d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80138d4:	68ba      	ldr	r2, [r7, #8]
 80138d6:	4413      	add	r3, r2
 80138d8:	8b3a      	ldrh	r2, [r7, #24]
 80138da:	4619      	mov	r1, r3
 80138dc:	f002 fb9e 	bl	801601c <memcpy>
 80138e0:	e02f      	b.n	8013942 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80138e2:	8a7b      	ldrh	r3, [r7, #18]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d006      	beq.n	80138f6 <tcp_write+0x3ae>
 80138e8:	4b80      	ldr	r3, [pc, #512]	; (8013aec <tcp_write+0x5a4>)
 80138ea:	f240 2271 	movw	r2, #625	; 0x271
 80138ee:	4982      	ldr	r1, [pc, #520]	; (8013af8 <tcp_write+0x5b0>)
 80138f0:	4880      	ldr	r0, [pc, #512]	; (8013af4 <tcp_write+0x5ac>)
 80138f2:	f002 fbc3 	bl	801607c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80138f6:	8b3b      	ldrh	r3, [r7, #24]
 80138f8:	2201      	movs	r2, #1
 80138fa:	4619      	mov	r1, r3
 80138fc:	2036      	movs	r0, #54	; 0x36
 80138fe:	f7fb f897 	bl	800ea30 <pbuf_alloc>
 8013902:	6178      	str	r0, [r7, #20]
 8013904:	697b      	ldr	r3, [r7, #20]
 8013906:	2b00      	cmp	r3, #0
 8013908:	f000 814b 	beq.w	8013ba2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801390c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013910:	68ba      	ldr	r2, [r7, #8]
 8013912:	441a      	add	r2, r3
 8013914:	697b      	ldr	r3, [r7, #20]
 8013916:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013918:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801391c:	b29b      	uxth	r3, r3
 801391e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013922:	4619      	mov	r1, r3
 8013924:	2036      	movs	r0, #54	; 0x36
 8013926:	f7fb f883 	bl	800ea30 <pbuf_alloc>
 801392a:	6338      	str	r0, [r7, #48]	; 0x30
 801392c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801392e:	2b00      	cmp	r3, #0
 8013930:	d103      	bne.n	801393a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8013932:	6978      	ldr	r0, [r7, #20]
 8013934:	f7fb fb5e 	bl	800eff4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8013938:	e136      	b.n	8013ba8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801393a:	6979      	ldr	r1, [r7, #20]
 801393c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801393e:	f7fb fc27 	bl	800f190 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8013942:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013944:	f7fb fbe4 	bl	800f110 <pbuf_clen>
 8013948:	4603      	mov	r3, r0
 801394a:	461a      	mov	r2, r3
 801394c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013950:	4413      	add	r3, r2
 8013952:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8013956:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801395a:	2b08      	cmp	r3, #8
 801395c:	d903      	bls.n	8013966 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801395e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013960:	f7fb fb48 	bl	800eff4 <pbuf_free>
      goto memerr;
 8013964:	e120      	b.n	8013ba8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801396a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801396e:	441a      	add	r2, r3
 8013970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013974:	9300      	str	r3, [sp, #0]
 8013976:	4613      	mov	r3, r2
 8013978:	2200      	movs	r2, #0
 801397a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801397c:	68f8      	ldr	r0, [r7, #12]
 801397e:	f7ff fc51 	bl	8013224 <tcp_create_segment>
 8013982:	64f8      	str	r0, [r7, #76]	; 0x4c
 8013984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013986:	2b00      	cmp	r3, #0
 8013988:	f000 810d 	beq.w	8013ba6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801398c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801398e:	2b00      	cmp	r3, #0
 8013990:	d102      	bne.n	8013998 <tcp_write+0x450>
      queue = seg;
 8013992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013994:	647b      	str	r3, [r7, #68]	; 0x44
 8013996:	e00c      	b.n	80139b2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8013998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801399a:	2b00      	cmp	r3, #0
 801399c:	d106      	bne.n	80139ac <tcp_write+0x464>
 801399e:	4b53      	ldr	r3, [pc, #332]	; (8013aec <tcp_write+0x5a4>)
 80139a0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80139a4:	4955      	ldr	r1, [pc, #340]	; (8013afc <tcp_write+0x5b4>)
 80139a6:	4853      	ldr	r0, [pc, #332]	; (8013af4 <tcp_write+0x5ac>)
 80139a8:	f002 fb68 	bl	801607c <iprintf>
      prev_seg->next = seg;
 80139ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80139b0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80139b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139b4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80139b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139ba:	8b3b      	ldrh	r3, [r7, #24]
 80139bc:	4413      	add	r3, r2
 80139be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80139c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139c6:	88fb      	ldrh	r3, [r7, #6]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	f4ff af3d 	bcc.w	8013848 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80139ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d02c      	beq.n	8013a2e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80139d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139da:	e01e      	b.n	8013a1a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80139dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139de:	891a      	ldrh	r2, [r3, #8]
 80139e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80139e2:	4413      	add	r3, r2
 80139e4:	b29a      	uxth	r2, r3
 80139e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139e8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80139ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d110      	bne.n	8013a14 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80139f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f4:	685b      	ldr	r3, [r3, #4]
 80139f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139f8:	8952      	ldrh	r2, [r2, #10]
 80139fa:	4413      	add	r3, r2
 80139fc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80139fe:	68b9      	ldr	r1, [r7, #8]
 8013a00:	4618      	mov	r0, r3
 8013a02:	f002 fb0b 	bl	801601c <memcpy>
        p->len += oversize_used;
 8013a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a08:	895a      	ldrh	r2, [r3, #10]
 8013a0a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a0c:	4413      	add	r3, r2
 8013a0e:	b29a      	uxth	r2, r3
 8013a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a12:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8013a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d1dd      	bne.n	80139dc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8013a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a22:	891a      	ldrh	r2, [r3, #8]
 8013a24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a26:	4413      	add	r3, r2
 8013a28:	b29a      	uxth	r2, r3
 8013a2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a2c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8013a2e:	8a7a      	ldrh	r2, [r7, #18]
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8013a36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d018      	beq.n	8013a6e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8013a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d106      	bne.n	8013a50 <tcp_write+0x508>
 8013a42:	4b2a      	ldr	r3, [pc, #168]	; (8013aec <tcp_write+0x5a4>)
 8013a44:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8013a48:	492d      	ldr	r1, [pc, #180]	; (8013b00 <tcp_write+0x5b8>)
 8013a4a:	482a      	ldr	r0, [pc, #168]	; (8013af4 <tcp_write+0x5ac>)
 8013a4c:	f002 fb16 	bl	801607c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8013a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a52:	685b      	ldr	r3, [r3, #4]
 8013a54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7fb fb9a 	bl	800f190 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8013a5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a5e:	891a      	ldrh	r2, [r3, #8]
 8013a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a62:	891b      	ldrh	r3, [r3, #8]
 8013a64:	4413      	add	r3, r2
 8013a66:	b29a      	uxth	r2, r3
 8013a68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a6a:	811a      	strh	r2, [r3, #8]
 8013a6c:	e037      	b.n	8013ade <tcp_write+0x596>
  } else if (extendlen > 0) {
 8013a6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d034      	beq.n	8013ade <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8013a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d003      	beq.n	8013a82 <tcp_write+0x53a>
 8013a7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a7c:	685b      	ldr	r3, [r3, #4]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d106      	bne.n	8013a90 <tcp_write+0x548>
 8013a82:	4b1a      	ldr	r3, [pc, #104]	; (8013aec <tcp_write+0x5a4>)
 8013a84:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013a88:	491e      	ldr	r1, [pc, #120]	; (8013b04 <tcp_write+0x5bc>)
 8013a8a:	481a      	ldr	r0, [pc, #104]	; (8013af4 <tcp_write+0x5ac>)
 8013a8c:	f002 faf6 	bl	801607c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013a90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a92:	685b      	ldr	r3, [r3, #4]
 8013a94:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a96:	e009      	b.n	8013aac <tcp_write+0x564>
      p->tot_len += extendlen;
 8013a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a9a:	891a      	ldrh	r2, [r3, #8]
 8013a9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013a9e:	4413      	add	r3, r2
 8013aa0:	b29a      	uxth	r2, r3
 8013aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8013aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	62bb      	str	r3, [r7, #40]	; 0x28
 8013aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d1f1      	bne.n	8013a98 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8013ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab6:	891a      	ldrh	r2, [r3, #8]
 8013ab8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013aba:	4413      	add	r3, r2
 8013abc:	b29a      	uxth	r2, r3
 8013abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8013ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac4:	895a      	ldrh	r2, [r3, #10]
 8013ac6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013ac8:	4413      	add	r3, r2
 8013aca:	b29a      	uxth	r2, r3
 8013acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ace:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8013ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ad2:	891a      	ldrh	r2, [r3, #8]
 8013ad4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013ad6:	4413      	add	r3, r2
 8013ad8:	b29a      	uxth	r2, r3
 8013ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013adc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8013ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d111      	bne.n	8013b08 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013ae8:	66da      	str	r2, [r3, #108]	; 0x6c
 8013aea:	e010      	b.n	8013b0e <tcp_write+0x5c6>
 8013aec:	0801ab8c 	.word	0x0801ab8c
 8013af0:	0801ae70 	.word	0x0801ae70
 8013af4:	0801ac24 	.word	0x0801ac24
 8013af8:	0801aeb0 	.word	0x0801aeb0
 8013afc:	0801aec0 	.word	0x0801aec0
 8013b00:	0801aed4 	.word	0x0801aed4
 8013b04:	0801af0c 	.word	0x0801af0c
  } else {
    last_unsent->next = queue;
 8013b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013b0c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013b12:	88fb      	ldrh	r3, [r7, #6]
 8013b14:	441a      	add	r2, r3
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8013b1a:	68fb      	ldr	r3, [r7, #12]
 8013b1c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013b20:	88fb      	ldrh	r3, [r7, #6]
 8013b22:	1ad3      	subs	r3, r2, r3
 8013b24:	b29a      	uxth	r2, r3
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8013b2c:	68fb      	ldr	r3, [r7, #12]
 8013b2e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013b32:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b3c:	2b00      	cmp	r3, #0
 8013b3e:	d00e      	beq.n	8013b5e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d10a      	bne.n	8013b5e <tcp_write+0x616>
 8013b48:	68fb      	ldr	r3, [r7, #12]
 8013b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d106      	bne.n	8013b5e <tcp_write+0x616>
 8013b50:	4b2c      	ldr	r3, [pc, #176]	; (8013c04 <tcp_write+0x6bc>)
 8013b52:	f240 3212 	movw	r2, #786	; 0x312
 8013b56:	492c      	ldr	r1, [pc, #176]	; (8013c08 <tcp_write+0x6c0>)
 8013b58:	482c      	ldr	r0, [pc, #176]	; (8013c0c <tcp_write+0x6c4>)
 8013b5a:	f002 fa8f 	bl	801607c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8013b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d016      	beq.n	8013b92 <tcp_write+0x64a>
 8013b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b66:	68db      	ldr	r3, [r3, #12]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d012      	beq.n	8013b92 <tcp_write+0x64a>
 8013b6c:	797b      	ldrb	r3, [r7, #5]
 8013b6e:	f003 0302 	and.w	r3, r3, #2
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d10d      	bne.n	8013b92 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8013b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b78:	68db      	ldr	r3, [r3, #12]
 8013b7a:	899b      	ldrh	r3, [r3, #12]
 8013b7c:	b29c      	uxth	r4, r3
 8013b7e:	2008      	movs	r0, #8
 8013b80:	f7f9 fe38 	bl	800d7f4 <lwip_htons>
 8013b84:	4603      	mov	r3, r0
 8013b86:	461a      	mov	r2, r3
 8013b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013b8a:	68db      	ldr	r3, [r3, #12]
 8013b8c:	4322      	orrs	r2, r4
 8013b8e:	b292      	uxth	r2, r2
 8013b90:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8013b92:	2300      	movs	r3, #0
 8013b94:	e031      	b.n	8013bfa <tcp_write+0x6b2>
          goto memerr;
 8013b96:	bf00      	nop
 8013b98:	e006      	b.n	8013ba8 <tcp_write+0x660>
            goto memerr;
 8013b9a:	bf00      	nop
 8013b9c:	e004      	b.n	8013ba8 <tcp_write+0x660>
        goto memerr;
 8013b9e:	bf00      	nop
 8013ba0:	e002      	b.n	8013ba8 <tcp_write+0x660>
        goto memerr;
 8013ba2:	bf00      	nop
 8013ba4:	e000      	b.n	8013ba8 <tcp_write+0x660>
      goto memerr;
 8013ba6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	8b5b      	ldrh	r3, [r3, #26]
 8013bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013bb0:	b29a      	uxth	r2, r3
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8013bb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d002      	beq.n	8013bc2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8013bbc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8013bbe:	f7fb fa19 	bl	800eff4 <pbuf_free>
  }
  if (queue != NULL) {
 8013bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d002      	beq.n	8013bce <tcp_write+0x686>
    tcp_segs_free(queue);
 8013bc8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8013bca:	f7fc ff7d 	bl	8010ac8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d00e      	beq.n	8013bf6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8013bd8:	68fb      	ldr	r3, [r7, #12]
 8013bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d10a      	bne.n	8013bf6 <tcp_write+0x6ae>
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d106      	bne.n	8013bf6 <tcp_write+0x6ae>
 8013be8:	4b06      	ldr	r3, [pc, #24]	; (8013c04 <tcp_write+0x6bc>)
 8013bea:	f240 3227 	movw	r2, #807	; 0x327
 8013bee:	4906      	ldr	r1, [pc, #24]	; (8013c08 <tcp_write+0x6c0>)
 8013bf0:	4806      	ldr	r0, [pc, #24]	; (8013c0c <tcp_write+0x6c4>)
 8013bf2:	f002 fa43 	bl	801607c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8013bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	375c      	adds	r7, #92	; 0x5c
 8013bfe:	46bd      	mov	sp, r7
 8013c00:	bd90      	pop	{r4, r7, pc}
 8013c02:	bf00      	nop
 8013c04:	0801ab8c 	.word	0x0801ab8c
 8013c08:	0801af44 	.word	0x0801af44
 8013c0c:	0801ac24 	.word	0x0801ac24

08013c10 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8013c10:	b590      	push	{r4, r7, lr}
 8013c12:	b08b      	sub	sp, #44	; 0x2c
 8013c14:	af02      	add	r7, sp, #8
 8013c16:	6078      	str	r0, [r7, #4]
 8013c18:	460b      	mov	r3, r1
 8013c1a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8013c1c:	2300      	movs	r3, #0
 8013c1e:	61fb      	str	r3, [r7, #28]
 8013c20:	2300      	movs	r3, #0
 8013c22:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8013c24:	2300      	movs	r3, #0
 8013c26:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8013c28:	687b      	ldr	r3, [r7, #4]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d106      	bne.n	8013c3c <tcp_split_unsent_seg+0x2c>
 8013c2e:	4b95      	ldr	r3, [pc, #596]	; (8013e84 <tcp_split_unsent_seg+0x274>)
 8013c30:	f240 324b 	movw	r2, #843	; 0x34b
 8013c34:	4994      	ldr	r1, [pc, #592]	; (8013e88 <tcp_split_unsent_seg+0x278>)
 8013c36:	4895      	ldr	r0, [pc, #596]	; (8013e8c <tcp_split_unsent_seg+0x27c>)
 8013c38:	f002 fa20 	bl	801607c <iprintf>

  useg = pcb->unsent;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c40:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d102      	bne.n	8013c4e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8013c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013c4c:	e116      	b.n	8013e7c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8013c4e:	887b      	ldrh	r3, [r7, #2]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d109      	bne.n	8013c68 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8013c54:	4b8b      	ldr	r3, [pc, #556]	; (8013e84 <tcp_split_unsent_seg+0x274>)
 8013c56:	f240 3253 	movw	r2, #851	; 0x353
 8013c5a:	498d      	ldr	r1, [pc, #564]	; (8013e90 <tcp_split_unsent_seg+0x280>)
 8013c5c:	488b      	ldr	r0, [pc, #556]	; (8013e8c <tcp_split_unsent_seg+0x27c>)
 8013c5e:	f002 fa0d 	bl	801607c <iprintf>
    return ERR_VAL;
 8013c62:	f06f 0305 	mvn.w	r3, #5
 8013c66:	e109      	b.n	8013e7c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8013c68:	697b      	ldr	r3, [r7, #20]
 8013c6a:	891b      	ldrh	r3, [r3, #8]
 8013c6c:	887a      	ldrh	r2, [r7, #2]
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d301      	bcc.n	8013c76 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8013c72:	2300      	movs	r3, #0
 8013c74:	e102      	b.n	8013e7c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013c7a:	887a      	ldrh	r2, [r7, #2]
 8013c7c:	429a      	cmp	r2, r3
 8013c7e:	d906      	bls.n	8013c8e <tcp_split_unsent_seg+0x7e>
 8013c80:	4b80      	ldr	r3, [pc, #512]	; (8013e84 <tcp_split_unsent_seg+0x274>)
 8013c82:	f240 325b 	movw	r2, #859	; 0x35b
 8013c86:	4983      	ldr	r1, [pc, #524]	; (8013e94 <tcp_split_unsent_seg+0x284>)
 8013c88:	4880      	ldr	r0, [pc, #512]	; (8013e8c <tcp_split_unsent_seg+0x27c>)
 8013c8a:	f002 f9f7 	bl	801607c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	891b      	ldrh	r3, [r3, #8]
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d106      	bne.n	8013ca4 <tcp_split_unsent_seg+0x94>
 8013c96:	4b7b      	ldr	r3, [pc, #492]	; (8013e84 <tcp_split_unsent_seg+0x274>)
 8013c98:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8013c9c:	497e      	ldr	r1, [pc, #504]	; (8013e98 <tcp_split_unsent_seg+0x288>)
 8013c9e:	487b      	ldr	r0, [pc, #492]	; (8013e8c <tcp_split_unsent_seg+0x27c>)
 8013ca0:	f002 f9ec 	bl	801607c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8013ca4:	697b      	ldr	r3, [r7, #20]
 8013ca6:	7a9b      	ldrb	r3, [r3, #10]
 8013ca8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8013caa:	7bfb      	ldrb	r3, [r7, #15]
 8013cac:	009b      	lsls	r3, r3, #2
 8013cae:	b2db      	uxtb	r3, r3
 8013cb0:	f003 0304 	and.w	r3, r3, #4
 8013cb4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	891a      	ldrh	r2, [r3, #8]
 8013cba:	887b      	ldrh	r3, [r7, #2]
 8013cbc:	1ad3      	subs	r3, r2, r3
 8013cbe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8013cc0:	7bbb      	ldrb	r3, [r7, #14]
 8013cc2:	b29a      	uxth	r2, r3
 8013cc4:	89bb      	ldrh	r3, [r7, #12]
 8013cc6:	4413      	add	r3, r2
 8013cc8:	b29b      	uxth	r3, r3
 8013cca:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013cce:	4619      	mov	r1, r3
 8013cd0:	2036      	movs	r0, #54	; 0x36
 8013cd2:	f7fa fead 	bl	800ea30 <pbuf_alloc>
 8013cd6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8013cd8:	693b      	ldr	r3, [r7, #16]
 8013cda:	2b00      	cmp	r3, #0
 8013cdc:	f000 80b7 	beq.w	8013e4e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8013ce0:	697b      	ldr	r3, [r7, #20]
 8013ce2:	685b      	ldr	r3, [r3, #4]
 8013ce4:	891a      	ldrh	r2, [r3, #8]
 8013ce6:	697b      	ldr	r3, [r7, #20]
 8013ce8:	891b      	ldrh	r3, [r3, #8]
 8013cea:	1ad3      	subs	r3, r2, r3
 8013cec:	b29a      	uxth	r2, r3
 8013cee:	887b      	ldrh	r3, [r7, #2]
 8013cf0:	4413      	add	r3, r2
 8013cf2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8013cf4:	697b      	ldr	r3, [r7, #20]
 8013cf6:	6858      	ldr	r0, [r3, #4]
 8013cf8:	693b      	ldr	r3, [r7, #16]
 8013cfa:	685a      	ldr	r2, [r3, #4]
 8013cfc:	7bbb      	ldrb	r3, [r7, #14]
 8013cfe:	18d1      	adds	r1, r2, r3
 8013d00:	897b      	ldrh	r3, [r7, #10]
 8013d02:	89ba      	ldrh	r2, [r7, #12]
 8013d04:	f7fb fb6c 	bl	800f3e0 <pbuf_copy_partial>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	461a      	mov	r2, r3
 8013d0c:	89bb      	ldrh	r3, [r7, #12]
 8013d0e:	4293      	cmp	r3, r2
 8013d10:	f040 809f 	bne.w	8013e52 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	68db      	ldr	r3, [r3, #12]
 8013d18:	899b      	ldrh	r3, [r3, #12]
 8013d1a:	b29b      	uxth	r3, r3
 8013d1c:	4618      	mov	r0, r3
 8013d1e:	f7f9 fd69 	bl	800d7f4 <lwip_htons>
 8013d22:	4603      	mov	r3, r0
 8013d24:	b2db      	uxtb	r3, r3
 8013d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d2a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8013d30:	7efb      	ldrb	r3, [r7, #27]
 8013d32:	f003 0308 	and.w	r3, r3, #8
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d007      	beq.n	8013d4a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8013d3a:	7efb      	ldrb	r3, [r7, #27]
 8013d3c:	f023 0308 	bic.w	r3, r3, #8
 8013d40:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8013d42:	7ebb      	ldrb	r3, [r7, #26]
 8013d44:	f043 0308 	orr.w	r3, r3, #8
 8013d48:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8013d4a:	7efb      	ldrb	r3, [r7, #27]
 8013d4c:	f003 0301 	and.w	r3, r3, #1
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d007      	beq.n	8013d64 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8013d54:	7efb      	ldrb	r3, [r7, #27]
 8013d56:	f023 0301 	bic.w	r3, r3, #1
 8013d5a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8013d5c:	7ebb      	ldrb	r3, [r7, #26]
 8013d5e:	f043 0301 	orr.w	r3, r3, #1
 8013d62:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	68db      	ldr	r3, [r3, #12]
 8013d68:	685b      	ldr	r3, [r3, #4]
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f7f9 fd57 	bl	800d81e <lwip_htonl>
 8013d70:	4602      	mov	r2, r0
 8013d72:	887b      	ldrh	r3, [r7, #2]
 8013d74:	18d1      	adds	r1, r2, r3
 8013d76:	7eba      	ldrb	r2, [r7, #26]
 8013d78:	7bfb      	ldrb	r3, [r7, #15]
 8013d7a:	9300      	str	r3, [sp, #0]
 8013d7c:	460b      	mov	r3, r1
 8013d7e:	6939      	ldr	r1, [r7, #16]
 8013d80:	6878      	ldr	r0, [r7, #4]
 8013d82:	f7ff fa4f 	bl	8013224 <tcp_create_segment>
 8013d86:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8013d88:	69fb      	ldr	r3, [r7, #28]
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d063      	beq.n	8013e56 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8013d8e:	697b      	ldr	r3, [r7, #20]
 8013d90:	685b      	ldr	r3, [r3, #4]
 8013d92:	4618      	mov	r0, r3
 8013d94:	f7fb f9bc 	bl	800f110 <pbuf_clen>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	461a      	mov	r2, r3
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013da2:	1a9b      	subs	r3, r3, r2
 8013da4:	b29a      	uxth	r2, r3
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8013dac:	697b      	ldr	r3, [r7, #20]
 8013dae:	6858      	ldr	r0, [r3, #4]
 8013db0:	697b      	ldr	r3, [r7, #20]
 8013db2:	685b      	ldr	r3, [r3, #4]
 8013db4:	891a      	ldrh	r2, [r3, #8]
 8013db6:	89bb      	ldrh	r3, [r7, #12]
 8013db8:	1ad3      	subs	r3, r2, r3
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	f7fa ff93 	bl	800ece8 <pbuf_realloc>
  useg->len -= remainder;
 8013dc2:	697b      	ldr	r3, [r7, #20]
 8013dc4:	891a      	ldrh	r2, [r3, #8]
 8013dc6:	89bb      	ldrh	r3, [r7, #12]
 8013dc8:	1ad3      	subs	r3, r2, r3
 8013dca:	b29a      	uxth	r2, r3
 8013dcc:	697b      	ldr	r3, [r7, #20]
 8013dce:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8013dd0:	697b      	ldr	r3, [r7, #20]
 8013dd2:	68db      	ldr	r3, [r3, #12]
 8013dd4:	899b      	ldrh	r3, [r3, #12]
 8013dd6:	b29c      	uxth	r4, r3
 8013dd8:	7efb      	ldrb	r3, [r7, #27]
 8013dda:	b29b      	uxth	r3, r3
 8013ddc:	4618      	mov	r0, r3
 8013dde:	f7f9 fd09 	bl	800d7f4 <lwip_htons>
 8013de2:	4603      	mov	r3, r0
 8013de4:	461a      	mov	r2, r3
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	68db      	ldr	r3, [r3, #12]
 8013dea:	4322      	orrs	r2, r4
 8013dec:	b292      	uxth	r2, r2
 8013dee:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	685b      	ldr	r3, [r3, #4]
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7fb f98b 	bl	800f110 <pbuf_clen>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	461a      	mov	r2, r3
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e04:	4413      	add	r3, r2
 8013e06:	b29a      	uxth	r2, r3
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013e0e:	69fb      	ldr	r3, [r7, #28]
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7fb f97c 	bl	800f110 <pbuf_clen>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	461a      	mov	r2, r3
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013e22:	4413      	add	r3, r2
 8013e24:	b29a      	uxth	r2, r3
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8013e2c:	697b      	ldr	r3, [r7, #20]
 8013e2e:	681a      	ldr	r2, [r3, #0]
 8013e30:	69fb      	ldr	r3, [r7, #28]
 8013e32:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8013e34:	697b      	ldr	r3, [r7, #20]
 8013e36:	69fa      	ldr	r2, [r7, #28]
 8013e38:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8013e3a:	69fb      	ldr	r3, [r7, #28]
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d103      	bne.n	8013e4a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8013e42:	687b      	ldr	r3, [r7, #4]
 8013e44:	2200      	movs	r2, #0
 8013e46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	e016      	b.n	8013e7c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8013e4e:	bf00      	nop
 8013e50:	e002      	b.n	8013e58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013e52:	bf00      	nop
 8013e54:	e000      	b.n	8013e58 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8013e56:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d006      	beq.n	8013e6c <tcp_split_unsent_seg+0x25c>
 8013e5e:	4b09      	ldr	r3, [pc, #36]	; (8013e84 <tcp_split_unsent_seg+0x274>)
 8013e60:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8013e64:	490d      	ldr	r1, [pc, #52]	; (8013e9c <tcp_split_unsent_seg+0x28c>)
 8013e66:	4809      	ldr	r0, [pc, #36]	; (8013e8c <tcp_split_unsent_seg+0x27c>)
 8013e68:	f002 f908 	bl	801607c <iprintf>
  if (p != NULL) {
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d002      	beq.n	8013e78 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8013e72:	6938      	ldr	r0, [r7, #16]
 8013e74:	f7fb f8be 	bl	800eff4 <pbuf_free>
  }

  return ERR_MEM;
 8013e78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3724      	adds	r7, #36	; 0x24
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd90      	pop	{r4, r7, pc}
 8013e84:	0801ab8c 	.word	0x0801ab8c
 8013e88:	0801af64 	.word	0x0801af64
 8013e8c:	0801ac24 	.word	0x0801ac24
 8013e90:	0801af88 	.word	0x0801af88
 8013e94:	0801afac 	.word	0x0801afac
 8013e98:	0801afbc 	.word	0x0801afbc
 8013e9c:	0801afcc 	.word	0x0801afcc

08013ea0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8013ea0:	b590      	push	{r4, r7, lr}
 8013ea2:	b085      	sub	sp, #20
 8013ea4:	af00      	add	r7, sp, #0
 8013ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d106      	bne.n	8013ebc <tcp_send_fin+0x1c>
 8013eae:	4b21      	ldr	r3, [pc, #132]	; (8013f34 <tcp_send_fin+0x94>)
 8013eb0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8013eb4:	4920      	ldr	r1, [pc, #128]	; (8013f38 <tcp_send_fin+0x98>)
 8013eb6:	4821      	ldr	r0, [pc, #132]	; (8013f3c <tcp_send_fin+0x9c>)
 8013eb8:	f002 f8e0 	bl	801607c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d02e      	beq.n	8013f22 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ec8:	60fb      	str	r3, [r7, #12]
 8013eca:	e002      	b.n	8013ed2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d1f8      	bne.n	8013ecc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	68db      	ldr	r3, [r3, #12]
 8013ede:	899b      	ldrh	r3, [r3, #12]
 8013ee0:	b29b      	uxth	r3, r3
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f7f9 fc86 	bl	800d7f4 <lwip_htons>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	b2db      	uxtb	r3, r3
 8013eec:	f003 0307 	and.w	r3, r3, #7
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d116      	bne.n	8013f22 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	68db      	ldr	r3, [r3, #12]
 8013ef8:	899b      	ldrh	r3, [r3, #12]
 8013efa:	b29c      	uxth	r4, r3
 8013efc:	2001      	movs	r0, #1
 8013efe:	f7f9 fc79 	bl	800d7f4 <lwip_htons>
 8013f02:	4603      	mov	r3, r0
 8013f04:	461a      	mov	r2, r3
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	68db      	ldr	r3, [r3, #12]
 8013f0a:	4322      	orrs	r2, r4
 8013f0c:	b292      	uxth	r2, r2
 8013f0e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	8b5b      	ldrh	r3, [r3, #26]
 8013f14:	f043 0320 	orr.w	r3, r3, #32
 8013f18:	b29a      	uxth	r2, r3
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	e004      	b.n	8013f2c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8013f22:	2101      	movs	r1, #1
 8013f24:	6878      	ldr	r0, [r7, #4]
 8013f26:	f000 f80b 	bl	8013f40 <tcp_enqueue_flags>
 8013f2a:	4603      	mov	r3, r0
}
 8013f2c:	4618      	mov	r0, r3
 8013f2e:	3714      	adds	r7, #20
 8013f30:	46bd      	mov	sp, r7
 8013f32:	bd90      	pop	{r4, r7, pc}
 8013f34:	0801ab8c 	.word	0x0801ab8c
 8013f38:	0801afd8 	.word	0x0801afd8
 8013f3c:	0801ac24 	.word	0x0801ac24

08013f40 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b08a      	sub	sp, #40	; 0x28
 8013f44:	af02      	add	r7, sp, #8
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	460b      	mov	r3, r1
 8013f4a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8013f50:	2300      	movs	r3, #0
 8013f52:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8013f54:	78fb      	ldrb	r3, [r7, #3]
 8013f56:	f003 0303 	and.w	r3, r3, #3
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d106      	bne.n	8013f6c <tcp_enqueue_flags+0x2c>
 8013f5e:	4b67      	ldr	r3, [pc, #412]	; (80140fc <tcp_enqueue_flags+0x1bc>)
 8013f60:	f240 4211 	movw	r2, #1041	; 0x411
 8013f64:	4966      	ldr	r1, [pc, #408]	; (8014100 <tcp_enqueue_flags+0x1c0>)
 8013f66:	4867      	ldr	r0, [pc, #412]	; (8014104 <tcp_enqueue_flags+0x1c4>)
 8013f68:	f002 f888 	bl	801607c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2b00      	cmp	r3, #0
 8013f70:	d106      	bne.n	8013f80 <tcp_enqueue_flags+0x40>
 8013f72:	4b62      	ldr	r3, [pc, #392]	; (80140fc <tcp_enqueue_flags+0x1bc>)
 8013f74:	f240 4213 	movw	r2, #1043	; 0x413
 8013f78:	4963      	ldr	r1, [pc, #396]	; (8014108 <tcp_enqueue_flags+0x1c8>)
 8013f7a:	4862      	ldr	r0, [pc, #392]	; (8014104 <tcp_enqueue_flags+0x1c4>)
 8013f7c:	f002 f87e 	bl	801607c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013f80:	78fb      	ldrb	r3, [r7, #3]
 8013f82:	f003 0302 	and.w	r3, r3, #2
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d001      	beq.n	8013f8e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8013f8a:	2301      	movs	r3, #1
 8013f8c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013f8e:	7ffb      	ldrb	r3, [r7, #31]
 8013f90:	009b      	lsls	r3, r3, #2
 8013f92:	b2db      	uxtb	r3, r3
 8013f94:	f003 0304 	and.w	r3, r3, #4
 8013f98:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8013f9a:	7dfb      	ldrb	r3, [r7, #23]
 8013f9c:	b29b      	uxth	r3, r3
 8013f9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013fa2:	4619      	mov	r1, r3
 8013fa4:	2036      	movs	r0, #54	; 0x36
 8013fa6:	f7fa fd43 	bl	800ea30 <pbuf_alloc>
 8013faa:	6138      	str	r0, [r7, #16]
 8013fac:	693b      	ldr	r3, [r7, #16]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d109      	bne.n	8013fc6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	8b5b      	ldrh	r3, [r3, #26]
 8013fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013fba:	b29a      	uxth	r2, r3
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013fc4:	e095      	b.n	80140f2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8013fc6:	693b      	ldr	r3, [r7, #16]
 8013fc8:	895a      	ldrh	r2, [r3, #10]
 8013fca:	7dfb      	ldrb	r3, [r7, #23]
 8013fcc:	b29b      	uxth	r3, r3
 8013fce:	429a      	cmp	r2, r3
 8013fd0:	d206      	bcs.n	8013fe0 <tcp_enqueue_flags+0xa0>
 8013fd2:	4b4a      	ldr	r3, [pc, #296]	; (80140fc <tcp_enqueue_flags+0x1bc>)
 8013fd4:	f240 4239 	movw	r2, #1081	; 0x439
 8013fd8:	494c      	ldr	r1, [pc, #304]	; (801410c <tcp_enqueue_flags+0x1cc>)
 8013fda:	484a      	ldr	r0, [pc, #296]	; (8014104 <tcp_enqueue_flags+0x1c4>)
 8013fdc:	f002 f84e 	bl	801607c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8013fe4:	78fa      	ldrb	r2, [r7, #3]
 8013fe6:	7ffb      	ldrb	r3, [r7, #31]
 8013fe8:	9300      	str	r3, [sp, #0]
 8013fea:	460b      	mov	r3, r1
 8013fec:	6939      	ldr	r1, [r7, #16]
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f7ff f918 	bl	8013224 <tcp_create_segment>
 8013ff4:	60f8      	str	r0, [r7, #12]
 8013ff6:	68fb      	ldr	r3, [r7, #12]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d109      	bne.n	8014010 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	8b5b      	ldrh	r3, [r3, #26]
 8014000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014004:	b29a      	uxth	r2, r3
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801400a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801400e:	e070      	b.n	80140f2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	68db      	ldr	r3, [r3, #12]
 8014014:	f003 0303 	and.w	r3, r3, #3
 8014018:	2b00      	cmp	r3, #0
 801401a:	d006      	beq.n	801402a <tcp_enqueue_flags+0xea>
 801401c:	4b37      	ldr	r3, [pc, #220]	; (80140fc <tcp_enqueue_flags+0x1bc>)
 801401e:	f240 4242 	movw	r2, #1090	; 0x442
 8014022:	493b      	ldr	r1, [pc, #236]	; (8014110 <tcp_enqueue_flags+0x1d0>)
 8014024:	4837      	ldr	r0, [pc, #220]	; (8014104 <tcp_enqueue_flags+0x1c4>)
 8014026:	f002 f829 	bl	801607c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801402a:	68fb      	ldr	r3, [r7, #12]
 801402c:	891b      	ldrh	r3, [r3, #8]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d006      	beq.n	8014040 <tcp_enqueue_flags+0x100>
 8014032:	4b32      	ldr	r3, [pc, #200]	; (80140fc <tcp_enqueue_flags+0x1bc>)
 8014034:	f240 4243 	movw	r2, #1091	; 0x443
 8014038:	4936      	ldr	r1, [pc, #216]	; (8014114 <tcp_enqueue_flags+0x1d4>)
 801403a:	4832      	ldr	r0, [pc, #200]	; (8014104 <tcp_enqueue_flags+0x1c4>)
 801403c:	f002 f81e 	bl	801607c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014044:	2b00      	cmp	r3, #0
 8014046:	d103      	bne.n	8014050 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	68fa      	ldr	r2, [r7, #12]
 801404c:	66da      	str	r2, [r3, #108]	; 0x6c
 801404e:	e00d      	b.n	801406c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014054:	61bb      	str	r3, [r7, #24]
 8014056:	e002      	b.n	801405e <tcp_enqueue_flags+0x11e>
 8014058:	69bb      	ldr	r3, [r7, #24]
 801405a:	681b      	ldr	r3, [r3, #0]
 801405c:	61bb      	str	r3, [r7, #24]
 801405e:	69bb      	ldr	r3, [r7, #24]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d1f8      	bne.n	8014058 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8014066:	69bb      	ldr	r3, [r7, #24]
 8014068:	68fa      	ldr	r2, [r7, #12]
 801406a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	2200      	movs	r2, #0
 8014070:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8014074:	78fb      	ldrb	r3, [r7, #3]
 8014076:	f003 0302 	and.w	r3, r3, #2
 801407a:	2b00      	cmp	r3, #0
 801407c:	d104      	bne.n	8014088 <tcp_enqueue_flags+0x148>
 801407e:	78fb      	ldrb	r3, [r7, #3]
 8014080:	f003 0301 	and.w	r3, r3, #1
 8014084:	2b00      	cmp	r3, #0
 8014086:	d004      	beq.n	8014092 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801408c:	1c5a      	adds	r2, r3, #1
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014092:	78fb      	ldrb	r3, [r7, #3]
 8014094:	f003 0301 	and.w	r3, r3, #1
 8014098:	2b00      	cmp	r3, #0
 801409a:	d006      	beq.n	80140aa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	8b5b      	ldrh	r3, [r3, #26]
 80140a0:	f043 0320 	orr.w	r3, r3, #32
 80140a4:	b29a      	uxth	r2, r3
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	685b      	ldr	r3, [r3, #4]
 80140ae:	4618      	mov	r0, r3
 80140b0:	f7fb f82e 	bl	800f110 <pbuf_clen>
 80140b4:	4603      	mov	r3, r0
 80140b6:	461a      	mov	r2, r3
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80140be:	4413      	add	r3, r2
 80140c0:	b29a      	uxth	r2, r3
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	d00e      	beq.n	80140f0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d10a      	bne.n	80140f0 <tcp_enqueue_flags+0x1b0>
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d106      	bne.n	80140f0 <tcp_enqueue_flags+0x1b0>
 80140e2:	4b06      	ldr	r3, [pc, #24]	; (80140fc <tcp_enqueue_flags+0x1bc>)
 80140e4:	f240 4265 	movw	r2, #1125	; 0x465
 80140e8:	490b      	ldr	r1, [pc, #44]	; (8014118 <tcp_enqueue_flags+0x1d8>)
 80140ea:	4806      	ldr	r0, [pc, #24]	; (8014104 <tcp_enqueue_flags+0x1c4>)
 80140ec:	f001 ffc6 	bl	801607c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80140f0:	2300      	movs	r3, #0
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3720      	adds	r7, #32
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}
 80140fa:	bf00      	nop
 80140fc:	0801ab8c 	.word	0x0801ab8c
 8014100:	0801aff4 	.word	0x0801aff4
 8014104:	0801ac24 	.word	0x0801ac24
 8014108:	0801b04c 	.word	0x0801b04c
 801410c:	0801b06c 	.word	0x0801b06c
 8014110:	0801b0a8 	.word	0x0801b0a8
 8014114:	0801b0c0 	.word	0x0801b0c0
 8014118:	0801b0ec 	.word	0x0801b0ec

0801411c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801411c:	b5b0      	push	{r4, r5, r7, lr}
 801411e:	b08a      	sub	sp, #40	; 0x28
 8014120:	af00      	add	r7, sp, #0
 8014122:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2b00      	cmp	r3, #0
 8014128:	d106      	bne.n	8014138 <tcp_output+0x1c>
 801412a:	4b9e      	ldr	r3, [pc, #632]	; (80143a4 <tcp_output+0x288>)
 801412c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8014130:	499d      	ldr	r1, [pc, #628]	; (80143a8 <tcp_output+0x28c>)
 8014132:	489e      	ldr	r0, [pc, #632]	; (80143ac <tcp_output+0x290>)
 8014134:	f001 ffa2 	bl	801607c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	7d1b      	ldrb	r3, [r3, #20]
 801413c:	2b01      	cmp	r3, #1
 801413e:	d106      	bne.n	801414e <tcp_output+0x32>
 8014140:	4b98      	ldr	r3, [pc, #608]	; (80143a4 <tcp_output+0x288>)
 8014142:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8014146:	499a      	ldr	r1, [pc, #616]	; (80143b0 <tcp_output+0x294>)
 8014148:	4898      	ldr	r0, [pc, #608]	; (80143ac <tcp_output+0x290>)
 801414a:	f001 ff97 	bl	801607c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801414e:	4b99      	ldr	r3, [pc, #612]	; (80143b4 <tcp_output+0x298>)
 8014150:	681b      	ldr	r3, [r3, #0]
 8014152:	687a      	ldr	r2, [r7, #4]
 8014154:	429a      	cmp	r2, r3
 8014156:	d101      	bne.n	801415c <tcp_output+0x40>
    return ERR_OK;
 8014158:	2300      	movs	r3, #0
 801415a:	e1ce      	b.n	80144fa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014168:	4293      	cmp	r3, r2
 801416a:	bf28      	it	cs
 801416c:	4613      	movcs	r3, r2
 801416e:	b29b      	uxth	r3, r3
 8014170:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014176:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8014178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801417a:	2b00      	cmp	r3, #0
 801417c:	d10b      	bne.n	8014196 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	8b5b      	ldrh	r3, [r3, #26]
 8014182:	f003 0302 	and.w	r3, r3, #2
 8014186:	2b00      	cmp	r3, #0
 8014188:	f000 81aa 	beq.w	80144e0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801418c:	6878      	ldr	r0, [r7, #4]
 801418e:	f000 fdcb 	bl	8014d28 <tcp_send_empty_ack>
 8014192:	4603      	mov	r3, r0
 8014194:	e1b1      	b.n	80144fa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014196:	6879      	ldr	r1, [r7, #4]
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	3304      	adds	r3, #4
 801419c:	461a      	mov	r2, r3
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	f7ff f824 	bl	80131ec <tcp_route>
 80141a4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80141a6:	697b      	ldr	r3, [r7, #20]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d102      	bne.n	80141b2 <tcp_output+0x96>
    return ERR_RTE;
 80141ac:	f06f 0303 	mvn.w	r3, #3
 80141b0:	e1a3      	b.n	80144fa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	d003      	beq.n	80141c0 <tcp_output+0xa4>
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d111      	bne.n	80141e4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80141c0:	697b      	ldr	r3, [r7, #20]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d002      	beq.n	80141cc <tcp_output+0xb0>
 80141c6:	697b      	ldr	r3, [r7, #20]
 80141c8:	3304      	adds	r3, #4
 80141ca:	e000      	b.n	80141ce <tcp_output+0xb2>
 80141cc:	2300      	movs	r3, #0
 80141ce:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80141d0:	693b      	ldr	r3, [r7, #16]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d102      	bne.n	80141dc <tcp_output+0xc0>
      return ERR_RTE;
 80141d6:	f06f 0303 	mvn.w	r3, #3
 80141da:	e18e      	b.n	80144fa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80141dc:	693b      	ldr	r3, [r7, #16]
 80141de:	681a      	ldr	r2, [r3, #0]
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80141e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141e6:	68db      	ldr	r3, [r3, #12]
 80141e8:	685b      	ldr	r3, [r3, #4]
 80141ea:	4618      	mov	r0, r3
 80141ec:	f7f9 fb17 	bl	800d81e <lwip_htonl>
 80141f0:	4602      	mov	r2, r0
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80141f6:	1ad3      	subs	r3, r2, r3
 80141f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141fa:	8912      	ldrh	r2, [r2, #8]
 80141fc:	4413      	add	r3, r2
 80141fe:	69ba      	ldr	r2, [r7, #24]
 8014200:	429a      	cmp	r2, r3
 8014202:	d227      	bcs.n	8014254 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801420a:	461a      	mov	r2, r3
 801420c:	69bb      	ldr	r3, [r7, #24]
 801420e:	4293      	cmp	r3, r2
 8014210:	d114      	bne.n	801423c <tcp_output+0x120>
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014216:	2b00      	cmp	r3, #0
 8014218:	d110      	bne.n	801423c <tcp_output+0x120>
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8014220:	2b00      	cmp	r3, #0
 8014222:	d10b      	bne.n	801423c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	2200      	movs	r2, #0
 8014228:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	2201      	movs	r2, #1
 8014230:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
      pcb->persist_probe = 0;
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2200      	movs	r2, #0
 8014238:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801423c:	687b      	ldr	r3, [r7, #4]
 801423e:	8b5b      	ldrh	r3, [r3, #26]
 8014240:	f003 0302 	and.w	r3, r3, #2
 8014244:	2b00      	cmp	r3, #0
 8014246:	f000 814d 	beq.w	80144e4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801424a:	6878      	ldr	r0, [r7, #4]
 801424c:	f000 fd6c 	bl	8014d28 <tcp_send_empty_ack>
 8014250:	4603      	mov	r3, r0
 8014252:	e152      	b.n	80144fa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2200      	movs	r2, #0
 8014258:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014260:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8014262:	6a3b      	ldr	r3, [r7, #32]
 8014264:	2b00      	cmp	r3, #0
 8014266:	f000 811c 	beq.w	80144a2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801426a:	e002      	b.n	8014272 <tcp_output+0x156>
 801426c:	6a3b      	ldr	r3, [r7, #32]
 801426e:	681b      	ldr	r3, [r3, #0]
 8014270:	623b      	str	r3, [r7, #32]
 8014272:	6a3b      	ldr	r3, [r7, #32]
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d1f8      	bne.n	801426c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801427a:	e112      	b.n	80144a2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801427e:	68db      	ldr	r3, [r3, #12]
 8014280:	899b      	ldrh	r3, [r3, #12]
 8014282:	b29b      	uxth	r3, r3
 8014284:	4618      	mov	r0, r3
 8014286:	f7f9 fab5 	bl	800d7f4 <lwip_htons>
 801428a:	4603      	mov	r3, r0
 801428c:	b2db      	uxtb	r3, r3
 801428e:	f003 0304 	and.w	r3, r3, #4
 8014292:	2b00      	cmp	r3, #0
 8014294:	d006      	beq.n	80142a4 <tcp_output+0x188>
 8014296:	4b43      	ldr	r3, [pc, #268]	; (80143a4 <tcp_output+0x288>)
 8014298:	f240 5236 	movw	r2, #1334	; 0x536
 801429c:	4946      	ldr	r1, [pc, #280]	; (80143b8 <tcp_output+0x29c>)
 801429e:	4843      	ldr	r0, [pc, #268]	; (80143ac <tcp_output+0x290>)
 80142a0:	f001 feec 	bl	801607c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d01f      	beq.n	80142ec <tcp_output+0x1d0>
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	8b5b      	ldrh	r3, [r3, #26]
 80142b0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d119      	bne.n	80142ec <tcp_output+0x1d0>
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d00b      	beq.n	80142d8 <tcp_output+0x1bc>
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142c4:	681b      	ldr	r3, [r3, #0]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d110      	bne.n	80142ec <tcp_output+0x1d0>
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80142ce:	891a      	ldrh	r2, [r3, #8]
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142d4:	429a      	cmp	r2, r3
 80142d6:	d209      	bcs.n	80142ec <tcp_output+0x1d0>
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d004      	beq.n	80142ec <tcp_output+0x1d0>
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80142e8:	2b07      	cmp	r3, #7
 80142ea:	d901      	bls.n	80142f0 <tcp_output+0x1d4>
 80142ec:	2301      	movs	r3, #1
 80142ee:	e000      	b.n	80142f2 <tcp_output+0x1d6>
 80142f0:	2300      	movs	r3, #0
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d106      	bne.n	8014304 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	8b5b      	ldrh	r3, [r3, #26]
 80142fa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80142fe:	2b00      	cmp	r3, #0
 8014300:	f000 80e4 	beq.w	80144cc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	7d1b      	ldrb	r3, [r3, #20]
 8014308:	2b02      	cmp	r3, #2
 801430a:	d00d      	beq.n	8014328 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801430c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801430e:	68db      	ldr	r3, [r3, #12]
 8014310:	899b      	ldrh	r3, [r3, #12]
 8014312:	b29c      	uxth	r4, r3
 8014314:	2010      	movs	r0, #16
 8014316:	f7f9 fa6d 	bl	800d7f4 <lwip_htons>
 801431a:	4603      	mov	r3, r0
 801431c:	461a      	mov	r2, r3
 801431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014320:	68db      	ldr	r3, [r3, #12]
 8014322:	4322      	orrs	r2, r4
 8014324:	b292      	uxth	r2, r2
 8014326:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014328:	697a      	ldr	r2, [r7, #20]
 801432a:	6879      	ldr	r1, [r7, #4]
 801432c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801432e:	f000 f909 	bl	8014544 <tcp_output_segment>
 8014332:	4603      	mov	r3, r0
 8014334:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8014336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d009      	beq.n	8014352 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	8b5b      	ldrh	r3, [r3, #26]
 8014342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014346:	b29a      	uxth	r2, r3
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	835a      	strh	r2, [r3, #26]
      return err;
 801434c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014350:	e0d3      	b.n	80144fa <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8014352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014354:	681a      	ldr	r2, [r3, #0]
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	7d1b      	ldrb	r3, [r3, #20]
 801435e:	2b02      	cmp	r3, #2
 8014360:	d006      	beq.n	8014370 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	8b5b      	ldrh	r3, [r3, #26]
 8014366:	f023 0303 	bic.w	r3, r3, #3
 801436a:	b29a      	uxth	r2, r3
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014372:	68db      	ldr	r3, [r3, #12]
 8014374:	685b      	ldr	r3, [r3, #4]
 8014376:	4618      	mov	r0, r3
 8014378:	f7f9 fa51 	bl	800d81e <lwip_htonl>
 801437c:	4604      	mov	r4, r0
 801437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014380:	891b      	ldrh	r3, [r3, #8]
 8014382:	461d      	mov	r5, r3
 8014384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014386:	68db      	ldr	r3, [r3, #12]
 8014388:	899b      	ldrh	r3, [r3, #12]
 801438a:	b29b      	uxth	r3, r3
 801438c:	4618      	mov	r0, r3
 801438e:	f7f9 fa31 	bl	800d7f4 <lwip_htons>
 8014392:	4603      	mov	r3, r0
 8014394:	b2db      	uxtb	r3, r3
 8014396:	f003 0303 	and.w	r3, r3, #3
 801439a:	2b00      	cmp	r3, #0
 801439c:	d00e      	beq.n	80143bc <tcp_output+0x2a0>
 801439e:	2301      	movs	r3, #1
 80143a0:	e00d      	b.n	80143be <tcp_output+0x2a2>
 80143a2:	bf00      	nop
 80143a4:	0801ab8c 	.word	0x0801ab8c
 80143a8:	0801b114 	.word	0x0801b114
 80143ac:	0801ac24 	.word	0x0801ac24
 80143b0:	0801b12c 	.word	0x0801b12c
 80143b4:	2400a798 	.word	0x2400a798
 80143b8:	0801b154 	.word	0x0801b154
 80143bc:	2300      	movs	r3, #0
 80143be:	442b      	add	r3, r5
 80143c0:	4423      	add	r3, r4
 80143c2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80143c8:	68bb      	ldr	r3, [r7, #8]
 80143ca:	1ad3      	subs	r3, r2, r3
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	da02      	bge.n	80143d6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	68ba      	ldr	r2, [r7, #8]
 80143d4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80143d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143d8:	891b      	ldrh	r3, [r3, #8]
 80143da:	461c      	mov	r4, r3
 80143dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143de:	68db      	ldr	r3, [r3, #12]
 80143e0:	899b      	ldrh	r3, [r3, #12]
 80143e2:	b29b      	uxth	r3, r3
 80143e4:	4618      	mov	r0, r3
 80143e6:	f7f9 fa05 	bl	800d7f4 <lwip_htons>
 80143ea:	4603      	mov	r3, r0
 80143ec:	b2db      	uxtb	r3, r3
 80143ee:	f003 0303 	and.w	r3, r3, #3
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d001      	beq.n	80143fa <tcp_output+0x2de>
 80143f6:	2301      	movs	r3, #1
 80143f8:	e000      	b.n	80143fc <tcp_output+0x2e0>
 80143fa:	2300      	movs	r3, #0
 80143fc:	4423      	add	r3, r4
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d049      	beq.n	8014496 <tcp_output+0x37a>
      seg->next = NULL;
 8014402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014404:	2200      	movs	r2, #0
 8014406:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801440c:	2b00      	cmp	r3, #0
 801440e:	d105      	bne.n	801441c <tcp_output+0x300>
        pcb->unacked = seg;
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014414:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014418:	623b      	str	r3, [r7, #32]
 801441a:	e03f      	b.n	801449c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801441e:	68db      	ldr	r3, [r3, #12]
 8014420:	685b      	ldr	r3, [r3, #4]
 8014422:	4618      	mov	r0, r3
 8014424:	f7f9 f9fb 	bl	800d81e <lwip_htonl>
 8014428:	4604      	mov	r4, r0
 801442a:	6a3b      	ldr	r3, [r7, #32]
 801442c:	68db      	ldr	r3, [r3, #12]
 801442e:	685b      	ldr	r3, [r3, #4]
 8014430:	4618      	mov	r0, r3
 8014432:	f7f9 f9f4 	bl	800d81e <lwip_htonl>
 8014436:	4603      	mov	r3, r0
 8014438:	1ae3      	subs	r3, r4, r3
 801443a:	2b00      	cmp	r3, #0
 801443c:	da24      	bge.n	8014488 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	3370      	adds	r3, #112	; 0x70
 8014442:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8014444:	e002      	b.n	801444c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8014446:	69fb      	ldr	r3, [r7, #28]
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801444c:	69fb      	ldr	r3, [r7, #28]
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	2b00      	cmp	r3, #0
 8014452:	d011      	beq.n	8014478 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014454:	69fb      	ldr	r3, [r7, #28]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	68db      	ldr	r3, [r3, #12]
 801445a:	685b      	ldr	r3, [r3, #4]
 801445c:	4618      	mov	r0, r3
 801445e:	f7f9 f9de 	bl	800d81e <lwip_htonl>
 8014462:	4604      	mov	r4, r0
 8014464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014466:	68db      	ldr	r3, [r3, #12]
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	4618      	mov	r0, r3
 801446c:	f7f9 f9d7 	bl	800d81e <lwip_htonl>
 8014470:	4603      	mov	r3, r0
 8014472:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8014474:	2b00      	cmp	r3, #0
 8014476:	dbe6      	blt.n	8014446 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8014478:	69fb      	ldr	r3, [r7, #28]
 801447a:	681a      	ldr	r2, [r3, #0]
 801447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801447e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8014480:	69fb      	ldr	r3, [r7, #28]
 8014482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014484:	601a      	str	r2, [r3, #0]
 8014486:	e009      	b.n	801449c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8014488:	6a3b      	ldr	r3, [r7, #32]
 801448a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801448c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801448e:	6a3b      	ldr	r3, [r7, #32]
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	623b      	str	r3, [r7, #32]
 8014494:	e002      	b.n	801449c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014496:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014498:	f7fc fb2b 	bl	8010af2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144a0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80144a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	d012      	beq.n	80144ce <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80144a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80144aa:	68db      	ldr	r3, [r3, #12]
 80144ac:	685b      	ldr	r3, [r3, #4]
 80144ae:	4618      	mov	r0, r3
 80144b0:	f7f9 f9b5 	bl	800d81e <lwip_htonl>
 80144b4:	4602      	mov	r2, r0
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144ba:	1ad3      	subs	r3, r2, r3
 80144bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144be:	8912      	ldrh	r2, [r2, #8]
 80144c0:	4413      	add	r3, r2
  while (seg != NULL &&
 80144c2:	69ba      	ldr	r2, [r7, #24]
 80144c4:	429a      	cmp	r2, r3
 80144c6:	f4bf aed9 	bcs.w	801427c <tcp_output+0x160>
 80144ca:	e000      	b.n	80144ce <tcp_output+0x3b2>
      break;
 80144cc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d108      	bne.n	80144e8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	2200      	movs	r2, #0
 80144da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80144de:	e004      	b.n	80144ea <tcp_output+0x3ce>
    goto output_done;
 80144e0:	bf00      	nop
 80144e2:	e002      	b.n	80144ea <tcp_output+0x3ce>
    goto output_done;
 80144e4:	bf00      	nop
 80144e6:	e000      	b.n	80144ea <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80144e8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	8b5b      	ldrh	r3, [r3, #26]
 80144ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80144f2:	b29a      	uxth	r2, r3
 80144f4:	687b      	ldr	r3, [r7, #4]
 80144f6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80144f8:	2300      	movs	r3, #0
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	3728      	adds	r7, #40	; 0x28
 80144fe:	46bd      	mov	sp, r7
 8014500:	bdb0      	pop	{r4, r5, r7, pc}
 8014502:	bf00      	nop

08014504 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b082      	sub	sp, #8
 8014508:	af00      	add	r7, sp, #0
 801450a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d106      	bne.n	8014520 <tcp_output_segment_busy+0x1c>
 8014512:	4b09      	ldr	r3, [pc, #36]	; (8014538 <tcp_output_segment_busy+0x34>)
 8014514:	f240 529a 	movw	r2, #1434	; 0x59a
 8014518:	4908      	ldr	r1, [pc, #32]	; (801453c <tcp_output_segment_busy+0x38>)
 801451a:	4809      	ldr	r0, [pc, #36]	; (8014540 <tcp_output_segment_busy+0x3c>)
 801451c:	f001 fdae 	bl	801607c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	685b      	ldr	r3, [r3, #4]
 8014524:	7b9b      	ldrb	r3, [r3, #14]
 8014526:	2b01      	cmp	r3, #1
 8014528:	d001      	beq.n	801452e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801452a:	2301      	movs	r3, #1
 801452c:	e000      	b.n	8014530 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801452e:	2300      	movs	r3, #0
}
 8014530:	4618      	mov	r0, r3
 8014532:	3708      	adds	r7, #8
 8014534:	46bd      	mov	sp, r7
 8014536:	bd80      	pop	{r7, pc}
 8014538:	0801ab8c 	.word	0x0801ab8c
 801453c:	0801b16c 	.word	0x0801b16c
 8014540:	0801ac24 	.word	0x0801ac24

08014544 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8014544:	b5b0      	push	{r4, r5, r7, lr}
 8014546:	b08c      	sub	sp, #48	; 0x30
 8014548:	af04      	add	r7, sp, #16
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d106      	bne.n	8014564 <tcp_output_segment+0x20>
 8014556:	4b63      	ldr	r3, [pc, #396]	; (80146e4 <tcp_output_segment+0x1a0>)
 8014558:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801455c:	4962      	ldr	r1, [pc, #392]	; (80146e8 <tcp_output_segment+0x1a4>)
 801455e:	4863      	ldr	r0, [pc, #396]	; (80146ec <tcp_output_segment+0x1a8>)
 8014560:	f001 fd8c 	bl	801607c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8014564:	68bb      	ldr	r3, [r7, #8]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d106      	bne.n	8014578 <tcp_output_segment+0x34>
 801456a:	4b5e      	ldr	r3, [pc, #376]	; (80146e4 <tcp_output_segment+0x1a0>)
 801456c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8014570:	495f      	ldr	r1, [pc, #380]	; (80146f0 <tcp_output_segment+0x1ac>)
 8014572:	485e      	ldr	r0, [pc, #376]	; (80146ec <tcp_output_segment+0x1a8>)
 8014574:	f001 fd82 	bl	801607c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2b00      	cmp	r3, #0
 801457c:	d106      	bne.n	801458c <tcp_output_segment+0x48>
 801457e:	4b59      	ldr	r3, [pc, #356]	; (80146e4 <tcp_output_segment+0x1a0>)
 8014580:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8014584:	495b      	ldr	r1, [pc, #364]	; (80146f4 <tcp_output_segment+0x1b0>)
 8014586:	4859      	ldr	r0, [pc, #356]	; (80146ec <tcp_output_segment+0x1a8>)
 8014588:	f001 fd78 	bl	801607c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801458c:	68f8      	ldr	r0, [r7, #12]
 801458e:	f7ff ffb9 	bl	8014504 <tcp_output_segment_busy>
 8014592:	4603      	mov	r3, r0
 8014594:	2b00      	cmp	r3, #0
 8014596:	d001      	beq.n	801459c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014598:	2300      	movs	r3, #0
 801459a:	e09f      	b.n	80146dc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801459c:	68bb      	ldr	r3, [r7, #8]
 801459e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80145a0:	68fb      	ldr	r3, [r7, #12]
 80145a2:	68dc      	ldr	r4, [r3, #12]
 80145a4:	4610      	mov	r0, r2
 80145a6:	f7f9 f93a 	bl	800d81e <lwip_htonl>
 80145aa:	4603      	mov	r3, r0
 80145ac:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80145ae:	68bb      	ldr	r3, [r7, #8]
 80145b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80145b2:	68fb      	ldr	r3, [r7, #12]
 80145b4:	68dc      	ldr	r4, [r3, #12]
 80145b6:	4610      	mov	r0, r2
 80145b8:	f7f9 f91c 	bl	800d7f4 <lwip_htons>
 80145bc:	4603      	mov	r3, r0
 80145be:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80145c0:	68bb      	ldr	r3, [r7, #8]
 80145c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145c4:	68ba      	ldr	r2, [r7, #8]
 80145c6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80145c8:	441a      	add	r2, r3
 80145ca:	68bb      	ldr	r3, [r7, #8]
 80145cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	68db      	ldr	r3, [r3, #12]
 80145d2:	3314      	adds	r3, #20
 80145d4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	7a9b      	ldrb	r3, [r3, #10]
 80145da:	f003 0301 	and.w	r3, r3, #1
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d015      	beq.n	801460e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80145e2:	68bb      	ldr	r3, [r7, #8]
 80145e4:	3304      	adds	r3, #4
 80145e6:	461a      	mov	r2, r3
 80145e8:	6879      	ldr	r1, [r7, #4]
 80145ea:	f240 50b4 	movw	r0, #1460	; 0x5b4
 80145ee:	f7fc fe03 	bl	80111f8 <tcp_eff_send_mss_netif>
 80145f2:	4603      	mov	r3, r0
 80145f4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80145f6:	8b7b      	ldrh	r3, [r7, #26]
 80145f8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7f9 f90e 	bl	800d81e <lwip_htonl>
 8014602:	4602      	mov	r2, r0
 8014604:	69fb      	ldr	r3, [r7, #28]
 8014606:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014608:	69fb      	ldr	r3, [r7, #28]
 801460a:	3304      	adds	r3, #4
 801460c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801460e:	68bb      	ldr	r3, [r7, #8]
 8014610:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014614:	2b00      	cmp	r3, #0
 8014616:	da02      	bge.n	801461e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	2200      	movs	r2, #0
 801461c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014622:	2b00      	cmp	r3, #0
 8014624:	d10c      	bne.n	8014640 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014626:	4b34      	ldr	r3, [pc, #208]	; (80146f8 <tcp_output_segment+0x1b4>)
 8014628:	681a      	ldr	r2, [r3, #0]
 801462a:	68bb      	ldr	r3, [r7, #8]
 801462c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801462e:	68fb      	ldr	r3, [r7, #12]
 8014630:	68db      	ldr	r3, [r3, #12]
 8014632:	685b      	ldr	r3, [r3, #4]
 8014634:	4618      	mov	r0, r3
 8014636:	f7f9 f8f2 	bl	800d81e <lwip_htonl>
 801463a:	4602      	mov	r2, r0
 801463c:	68bb      	ldr	r3, [r7, #8]
 801463e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	68da      	ldr	r2, [r3, #12]
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	685b      	ldr	r3, [r3, #4]
 8014648:	685b      	ldr	r3, [r3, #4]
 801464a:	1ad3      	subs	r3, r2, r3
 801464c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	685b      	ldr	r3, [r3, #4]
 8014652:	8959      	ldrh	r1, [r3, #10]
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	685b      	ldr	r3, [r3, #4]
 8014658:	8b3a      	ldrh	r2, [r7, #24]
 801465a:	1a8a      	subs	r2, r1, r2
 801465c:	b292      	uxth	r2, r2
 801465e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	8919      	ldrh	r1, [r3, #8]
 8014666:	68fb      	ldr	r3, [r7, #12]
 8014668:	685b      	ldr	r3, [r3, #4]
 801466a:	8b3a      	ldrh	r2, [r7, #24]
 801466c:	1a8a      	subs	r2, r1, r2
 801466e:	b292      	uxth	r2, r2
 8014670:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	685b      	ldr	r3, [r3, #4]
 8014676:	68fa      	ldr	r2, [r7, #12]
 8014678:	68d2      	ldr	r2, [r2, #12]
 801467a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	68db      	ldr	r3, [r3, #12]
 8014680:	2200      	movs	r2, #0
 8014682:	741a      	strb	r2, [r3, #16]
 8014684:	2200      	movs	r2, #0
 8014686:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	68db      	ldr	r3, [r3, #12]
 801468c:	f103 0214 	add.w	r2, r3, #20
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	7a9b      	ldrb	r3, [r3, #10]
 8014694:	009b      	lsls	r3, r3, #2
 8014696:	f003 0304 	and.w	r3, r3, #4
 801469a:	4413      	add	r3, r2
 801469c:	69fa      	ldr	r2, [r7, #28]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d006      	beq.n	80146b0 <tcp_output_segment+0x16c>
 80146a2:	4b10      	ldr	r3, [pc, #64]	; (80146e4 <tcp_output_segment+0x1a0>)
 80146a4:	f240 621c 	movw	r2, #1564	; 0x61c
 80146a8:	4914      	ldr	r1, [pc, #80]	; (80146fc <tcp_output_segment+0x1b8>)
 80146aa:	4810      	ldr	r0, [pc, #64]	; (80146ec <tcp_output_segment+0x1a8>)
 80146ac:	f001 fce6 	bl	801607c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	6858      	ldr	r0, [r3, #4]
 80146b4:	68b9      	ldr	r1, [r7, #8]
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	1d1c      	adds	r4, r3, #4
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	7add      	ldrb	r5, [r3, #11]
 80146be:	68bb      	ldr	r3, [r7, #8]
 80146c0:	7a9b      	ldrb	r3, [r3, #10]
 80146c2:	687a      	ldr	r2, [r7, #4]
 80146c4:	9202      	str	r2, [sp, #8]
 80146c6:	2206      	movs	r2, #6
 80146c8:	9201      	str	r2, [sp, #4]
 80146ca:	9300      	str	r3, [sp, #0]
 80146cc:	462b      	mov	r3, r5
 80146ce:	4622      	mov	r2, r4
 80146d0:	f7f8 f93e 	bl	800c950 <ip4_output_if>
 80146d4:	4603      	mov	r3, r0
 80146d6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80146d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80146dc:	4618      	mov	r0, r3
 80146de:	3720      	adds	r7, #32
 80146e0:	46bd      	mov	sp, r7
 80146e2:	bdb0      	pop	{r4, r5, r7, pc}
 80146e4:	0801ab8c 	.word	0x0801ab8c
 80146e8:	0801b194 	.word	0x0801b194
 80146ec:	0801ac24 	.word	0x0801ac24
 80146f0:	0801b1b4 	.word	0x0801b1b4
 80146f4:	0801b1d4 	.word	0x0801b1d4
 80146f8:	2400a788 	.word	0x2400a788
 80146fc:	0801b1f8 	.word	0x0801b1f8

08014700 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014700:	b5b0      	push	{r4, r5, r7, lr}
 8014702:	b084      	sub	sp, #16
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	2b00      	cmp	r3, #0
 801470c:	d106      	bne.n	801471c <tcp_rexmit_rto_prepare+0x1c>
 801470e:	4b31      	ldr	r3, [pc, #196]	; (80147d4 <tcp_rexmit_rto_prepare+0xd4>)
 8014710:	f240 6263 	movw	r2, #1635	; 0x663
 8014714:	4930      	ldr	r1, [pc, #192]	; (80147d8 <tcp_rexmit_rto_prepare+0xd8>)
 8014716:	4831      	ldr	r0, [pc, #196]	; (80147dc <tcp_rexmit_rto_prepare+0xdc>)
 8014718:	f001 fcb0 	bl	801607c <iprintf>

  if (pcb->unacked == NULL) {
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014720:	2b00      	cmp	r3, #0
 8014722:	d102      	bne.n	801472a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014724:	f06f 0305 	mvn.w	r3, #5
 8014728:	e050      	b.n	80147cc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801472e:	60fb      	str	r3, [r7, #12]
 8014730:	e00b      	b.n	801474a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014732:	68f8      	ldr	r0, [r7, #12]
 8014734:	f7ff fee6 	bl	8014504 <tcp_output_segment_busy>
 8014738:	4603      	mov	r3, r0
 801473a:	2b00      	cmp	r3, #0
 801473c:	d002      	beq.n	8014744 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801473e:	f06f 0305 	mvn.w	r3, #5
 8014742:	e043      	b.n	80147cc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	60fb      	str	r3, [r7, #12]
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d1ef      	bne.n	8014732 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014752:	68f8      	ldr	r0, [r7, #12]
 8014754:	f7ff fed6 	bl	8014504 <tcp_output_segment_busy>
 8014758:	4603      	mov	r3, r0
 801475a:	2b00      	cmp	r3, #0
 801475c:	d002      	beq.n	8014764 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801475e:	f06f 0305 	mvn.w	r3, #5
 8014762:	e033      	b.n	80147cc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014768:	68fb      	ldr	r3, [r7, #12]
 801476a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801476c:	687b      	ldr	r3, [r7, #4]
 801476e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	2200      	movs	r2, #0
 8014778:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	8b5b      	ldrh	r3, [r3, #26]
 801477e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014782:	b29a      	uxth	r2, r3
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	68db      	ldr	r3, [r3, #12]
 801478c:	685b      	ldr	r3, [r3, #4]
 801478e:	4618      	mov	r0, r3
 8014790:	f7f9 f845 	bl	800d81e <lwip_htonl>
 8014794:	4604      	mov	r4, r0
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	891b      	ldrh	r3, [r3, #8]
 801479a:	461d      	mov	r5, r3
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	68db      	ldr	r3, [r3, #12]
 80147a0:	899b      	ldrh	r3, [r3, #12]
 80147a2:	b29b      	uxth	r3, r3
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7f9 f825 	bl	800d7f4 <lwip_htons>
 80147aa:	4603      	mov	r3, r0
 80147ac:	b2db      	uxtb	r3, r3
 80147ae:	f003 0303 	and.w	r3, r3, #3
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d001      	beq.n	80147ba <tcp_rexmit_rto_prepare+0xba>
 80147b6:	2301      	movs	r3, #1
 80147b8:	e000      	b.n	80147bc <tcp_rexmit_rto_prepare+0xbc>
 80147ba:	2300      	movs	r3, #0
 80147bc:	442b      	add	r3, r5
 80147be:	18e2      	adds	r2, r4, r3
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	2200      	movs	r2, #0
 80147c8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80147ca:	2300      	movs	r3, #0
}
 80147cc:	4618      	mov	r0, r3
 80147ce:	3710      	adds	r7, #16
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bdb0      	pop	{r4, r5, r7, pc}
 80147d4:	0801ab8c 	.word	0x0801ab8c
 80147d8:	0801b20c 	.word	0x0801b20c
 80147dc:	0801ac24 	.word	0x0801ac24

080147e0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b082      	sub	sp, #8
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d106      	bne.n	80147fc <tcp_rexmit_rto_commit+0x1c>
 80147ee:	4b0d      	ldr	r3, [pc, #52]	; (8014824 <tcp_rexmit_rto_commit+0x44>)
 80147f0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80147f4:	490c      	ldr	r1, [pc, #48]	; (8014828 <tcp_rexmit_rto_commit+0x48>)
 80147f6:	480d      	ldr	r0, [pc, #52]	; (801482c <tcp_rexmit_rto_commit+0x4c>)
 80147f8:	f001 fc40 	bl	801607c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014802:	2bff      	cmp	r3, #255	; 0xff
 8014804:	d007      	beq.n	8014816 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801480c:	3301      	adds	r3, #1
 801480e:	b2da      	uxtb	r2, r3
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014816:	6878      	ldr	r0, [r7, #4]
 8014818:	f7ff fc80 	bl	801411c <tcp_output>
}
 801481c:	bf00      	nop
 801481e:	3708      	adds	r7, #8
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}
 8014824:	0801ab8c 	.word	0x0801ab8c
 8014828:	0801b230 	.word	0x0801b230
 801482c:	0801ac24 	.word	0x0801ac24

08014830 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014830:	b580      	push	{r7, lr}
 8014832:	b082      	sub	sp, #8
 8014834:	af00      	add	r7, sp, #0
 8014836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d106      	bne.n	801484c <tcp_rexmit_rto+0x1c>
 801483e:	4b0a      	ldr	r3, [pc, #40]	; (8014868 <tcp_rexmit_rto+0x38>)
 8014840:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014844:	4909      	ldr	r1, [pc, #36]	; (801486c <tcp_rexmit_rto+0x3c>)
 8014846:	480a      	ldr	r0, [pc, #40]	; (8014870 <tcp_rexmit_rto+0x40>)
 8014848:	f001 fc18 	bl	801607c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801484c:	6878      	ldr	r0, [r7, #4]
 801484e:	f7ff ff57 	bl	8014700 <tcp_rexmit_rto_prepare>
 8014852:	4603      	mov	r3, r0
 8014854:	2b00      	cmp	r3, #0
 8014856:	d102      	bne.n	801485e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014858:	6878      	ldr	r0, [r7, #4]
 801485a:	f7ff ffc1 	bl	80147e0 <tcp_rexmit_rto_commit>
  }
}
 801485e:	bf00      	nop
 8014860:	3708      	adds	r7, #8
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}
 8014866:	bf00      	nop
 8014868:	0801ab8c 	.word	0x0801ab8c
 801486c:	0801b254 	.word	0x0801b254
 8014870:	0801ac24 	.word	0x0801ac24

08014874 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014874:	b590      	push	{r4, r7, lr}
 8014876:	b085      	sub	sp, #20
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d106      	bne.n	8014890 <tcp_rexmit+0x1c>
 8014882:	4b2f      	ldr	r3, [pc, #188]	; (8014940 <tcp_rexmit+0xcc>)
 8014884:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014888:	492e      	ldr	r1, [pc, #184]	; (8014944 <tcp_rexmit+0xd0>)
 801488a:	482f      	ldr	r0, [pc, #188]	; (8014948 <tcp_rexmit+0xd4>)
 801488c:	f001 fbf6 	bl	801607c <iprintf>

  if (pcb->unacked == NULL) {
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014894:	2b00      	cmp	r3, #0
 8014896:	d102      	bne.n	801489e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014898:	f06f 0305 	mvn.w	r3, #5
 801489c:	e04c      	b.n	8014938 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80148a2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80148a4:	68b8      	ldr	r0, [r7, #8]
 80148a6:	f7ff fe2d 	bl	8014504 <tcp_output_segment_busy>
 80148aa:	4603      	mov	r3, r0
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d002      	beq.n	80148b6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80148b0:	f06f 0305 	mvn.w	r3, #5
 80148b4:	e040      	b.n	8014938 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80148b6:	68bb      	ldr	r3, [r7, #8]
 80148b8:	681a      	ldr	r2, [r3, #0]
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	336c      	adds	r3, #108	; 0x6c
 80148c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80148c4:	e002      	b.n	80148cc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d011      	beq.n	80148f8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	68db      	ldr	r3, [r3, #12]
 80148da:	685b      	ldr	r3, [r3, #4]
 80148dc:	4618      	mov	r0, r3
 80148de:	f7f8 ff9e 	bl	800d81e <lwip_htonl>
 80148e2:	4604      	mov	r4, r0
 80148e4:	68bb      	ldr	r3, [r7, #8]
 80148e6:	68db      	ldr	r3, [r3, #12]
 80148e8:	685b      	ldr	r3, [r3, #4]
 80148ea:	4618      	mov	r0, r3
 80148ec:	f7f8 ff97 	bl	800d81e <lwip_htonl>
 80148f0:	4603      	mov	r3, r0
 80148f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	dbe6      	blt.n	80148c6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	681a      	ldr	r2, [r3, #0]
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	68ba      	ldr	r2, [r7, #8]
 8014904:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014906:	68bb      	ldr	r3, [r7, #8]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	2b00      	cmp	r3, #0
 801490c:	d103      	bne.n	8014916 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	2200      	movs	r2, #0
 8014912:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801491c:	2bff      	cmp	r3, #255	; 0xff
 801491e:	d007      	beq.n	8014930 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014926:	3301      	adds	r3, #1
 8014928:	b2da      	uxtb	r2, r3
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	2200      	movs	r2, #0
 8014934:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014936:	2300      	movs	r3, #0
}
 8014938:	4618      	mov	r0, r3
 801493a:	3714      	adds	r7, #20
 801493c:	46bd      	mov	sp, r7
 801493e:	bd90      	pop	{r4, r7, pc}
 8014940:	0801ab8c 	.word	0x0801ab8c
 8014944:	0801b270 	.word	0x0801b270
 8014948:	0801ac24 	.word	0x0801ac24

0801494c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801494c:	b580      	push	{r7, lr}
 801494e:	b082      	sub	sp, #8
 8014950:	af00      	add	r7, sp, #0
 8014952:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d106      	bne.n	8014968 <tcp_rexmit_fast+0x1c>
 801495a:	4b2a      	ldr	r3, [pc, #168]	; (8014a04 <tcp_rexmit_fast+0xb8>)
 801495c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014960:	4929      	ldr	r1, [pc, #164]	; (8014a08 <tcp_rexmit_fast+0xbc>)
 8014962:	482a      	ldr	r0, [pc, #168]	; (8014a0c <tcp_rexmit_fast+0xc0>)
 8014964:	f001 fb8a 	bl	801607c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801496c:	2b00      	cmp	r3, #0
 801496e:	d045      	beq.n	80149fc <tcp_rexmit_fast+0xb0>
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	8b5b      	ldrh	r3, [r3, #26]
 8014974:	f003 0304 	and.w	r3, r3, #4
 8014978:	2b00      	cmp	r3, #0
 801497a:	d13f      	bne.n	80149fc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f7ff ff79 	bl	8014874 <tcp_rexmit>
 8014982:	4603      	mov	r3, r0
 8014984:	2b00      	cmp	r3, #0
 8014986:	d139      	bne.n	80149fc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014994:	4293      	cmp	r3, r2
 8014996:	bf28      	it	cs
 8014998:	4613      	movcs	r3, r2
 801499a:	b29b      	uxth	r3, r3
 801499c:	2b00      	cmp	r3, #0
 801499e:	da00      	bge.n	80149a2 <tcp_rexmit_fast+0x56>
 80149a0:	3301      	adds	r3, #1
 80149a2:	105b      	asrs	r3, r3, #1
 80149a4:	b29a      	uxth	r2, r3
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80149b2:	461a      	mov	r2, r3
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149b8:	005b      	lsls	r3, r3, #1
 80149ba:	429a      	cmp	r2, r3
 80149bc:	d206      	bcs.n	80149cc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149c2:	005b      	lsls	r3, r3, #1
 80149c4:	b29a      	uxth	r2, r3
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80149d6:	4619      	mov	r1, r3
 80149d8:	0049      	lsls	r1, r1, #1
 80149da:	440b      	add	r3, r1
 80149dc:	b29b      	uxth	r3, r3
 80149de:	4413      	add	r3, r2
 80149e0:	b29a      	uxth	r2, r3
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	8b5b      	ldrh	r3, [r3, #26]
 80149ec:	f043 0304 	orr.w	r3, r3, #4
 80149f0:	b29a      	uxth	r2, r3
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	2200      	movs	r2, #0
 80149fa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80149fc:	bf00      	nop
 80149fe:	3708      	adds	r7, #8
 8014a00:	46bd      	mov	sp, r7
 8014a02:	bd80      	pop	{r7, pc}
 8014a04:	0801ab8c 	.word	0x0801ab8c
 8014a08:	0801b288 	.word	0x0801b288
 8014a0c:	0801ac24 	.word	0x0801ac24

08014a10 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b086      	sub	sp, #24
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	60f8      	str	r0, [r7, #12]
 8014a18:	607b      	str	r3, [r7, #4]
 8014a1a:	460b      	mov	r3, r1
 8014a1c:	817b      	strh	r3, [r7, #10]
 8014a1e:	4613      	mov	r3, r2
 8014a20:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014a22:	897a      	ldrh	r2, [r7, #10]
 8014a24:	893b      	ldrh	r3, [r7, #8]
 8014a26:	4413      	add	r3, r2
 8014a28:	b29b      	uxth	r3, r3
 8014a2a:	3314      	adds	r3, #20
 8014a2c:	b29b      	uxth	r3, r3
 8014a2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a32:	4619      	mov	r1, r3
 8014a34:	2022      	movs	r0, #34	; 0x22
 8014a36:	f7f9 fffb 	bl	800ea30 <pbuf_alloc>
 8014a3a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014a3c:	697b      	ldr	r3, [r7, #20]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d04d      	beq.n	8014ade <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014a42:	897b      	ldrh	r3, [r7, #10]
 8014a44:	3313      	adds	r3, #19
 8014a46:	697a      	ldr	r2, [r7, #20]
 8014a48:	8952      	ldrh	r2, [r2, #10]
 8014a4a:	4293      	cmp	r3, r2
 8014a4c:	db06      	blt.n	8014a5c <tcp_output_alloc_header_common+0x4c>
 8014a4e:	4b26      	ldr	r3, [pc, #152]	; (8014ae8 <tcp_output_alloc_header_common+0xd8>)
 8014a50:	f240 7223 	movw	r2, #1827	; 0x723
 8014a54:	4925      	ldr	r1, [pc, #148]	; (8014aec <tcp_output_alloc_header_common+0xdc>)
 8014a56:	4826      	ldr	r0, [pc, #152]	; (8014af0 <tcp_output_alloc_header_common+0xe0>)
 8014a58:	f001 fb10 	bl	801607c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	685b      	ldr	r3, [r3, #4]
 8014a60:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014a62:	8c3b      	ldrh	r3, [r7, #32]
 8014a64:	4618      	mov	r0, r3
 8014a66:	f7f8 fec5 	bl	800d7f4 <lwip_htons>
 8014a6a:	4603      	mov	r3, r0
 8014a6c:	461a      	mov	r2, r3
 8014a6e:	693b      	ldr	r3, [r7, #16]
 8014a70:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7f8 febd 	bl	800d7f4 <lwip_htons>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	461a      	mov	r2, r3
 8014a7e:	693b      	ldr	r3, [r7, #16]
 8014a80:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	687a      	ldr	r2, [r7, #4]
 8014a86:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014a88:	68f8      	ldr	r0, [r7, #12]
 8014a8a:	f7f8 fec8 	bl	800d81e <lwip_htonl>
 8014a8e:	4602      	mov	r2, r0
 8014a90:	693b      	ldr	r3, [r7, #16]
 8014a92:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014a94:	897b      	ldrh	r3, [r7, #10]
 8014a96:	089b      	lsrs	r3, r3, #2
 8014a98:	b29b      	uxth	r3, r3
 8014a9a:	3305      	adds	r3, #5
 8014a9c:	b29b      	uxth	r3, r3
 8014a9e:	031b      	lsls	r3, r3, #12
 8014aa0:	b29a      	uxth	r2, r3
 8014aa2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014aa6:	b29b      	uxth	r3, r3
 8014aa8:	4313      	orrs	r3, r2
 8014aaa:	b29b      	uxth	r3, r3
 8014aac:	4618      	mov	r0, r3
 8014aae:	f7f8 fea1 	bl	800d7f4 <lwip_htons>
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	461a      	mov	r2, r3
 8014ab6:	693b      	ldr	r3, [r7, #16]
 8014ab8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014aba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014abc:	4618      	mov	r0, r3
 8014abe:	f7f8 fe99 	bl	800d7f4 <lwip_htons>
 8014ac2:	4603      	mov	r3, r0
 8014ac4:	461a      	mov	r2, r3
 8014ac6:	693b      	ldr	r3, [r7, #16]
 8014ac8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014aca:	693b      	ldr	r3, [r7, #16]
 8014acc:	2200      	movs	r2, #0
 8014ace:	741a      	strb	r2, [r3, #16]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014ad4:	693b      	ldr	r3, [r7, #16]
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	749a      	strb	r2, [r3, #18]
 8014ada:	2200      	movs	r2, #0
 8014adc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014ade:	697b      	ldr	r3, [r7, #20]
}
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	3718      	adds	r7, #24
 8014ae4:	46bd      	mov	sp, r7
 8014ae6:	bd80      	pop	{r7, pc}
 8014ae8:	0801ab8c 	.word	0x0801ab8c
 8014aec:	0801b2a8 	.word	0x0801b2a8
 8014af0:	0801ac24 	.word	0x0801ac24

08014af4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014af4:	b5b0      	push	{r4, r5, r7, lr}
 8014af6:	b08a      	sub	sp, #40	; 0x28
 8014af8:	af04      	add	r7, sp, #16
 8014afa:	60f8      	str	r0, [r7, #12]
 8014afc:	607b      	str	r3, [r7, #4]
 8014afe:	460b      	mov	r3, r1
 8014b00:	817b      	strh	r3, [r7, #10]
 8014b02:	4613      	mov	r3, r2
 8014b04:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d106      	bne.n	8014b1a <tcp_output_alloc_header+0x26>
 8014b0c:	4b15      	ldr	r3, [pc, #84]	; (8014b64 <tcp_output_alloc_header+0x70>)
 8014b0e:	f240 7242 	movw	r2, #1858	; 0x742
 8014b12:	4915      	ldr	r1, [pc, #84]	; (8014b68 <tcp_output_alloc_header+0x74>)
 8014b14:	4815      	ldr	r0, [pc, #84]	; (8014b6c <tcp_output_alloc_header+0x78>)
 8014b16:	f001 fab1 	bl	801607c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014b1a:	68fb      	ldr	r3, [r7, #12]
 8014b1c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	8adb      	ldrh	r3, [r3, #22]
 8014b22:	68fa      	ldr	r2, [r7, #12]
 8014b24:	8b12      	ldrh	r2, [r2, #24]
 8014b26:	68f9      	ldr	r1, [r7, #12]
 8014b28:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014b2a:	893d      	ldrh	r5, [r7, #8]
 8014b2c:	897c      	ldrh	r4, [r7, #10]
 8014b2e:	9103      	str	r1, [sp, #12]
 8014b30:	2110      	movs	r1, #16
 8014b32:	9102      	str	r1, [sp, #8]
 8014b34:	9201      	str	r2, [sp, #4]
 8014b36:	9300      	str	r3, [sp, #0]
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	462a      	mov	r2, r5
 8014b3c:	4621      	mov	r1, r4
 8014b3e:	f7ff ff67 	bl	8014a10 <tcp_output_alloc_header_common>
 8014b42:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014b44:	697b      	ldr	r3, [r7, #20]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d006      	beq.n	8014b58 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014b4a:	68fb      	ldr	r3, [r7, #12]
 8014b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b4e:	68fa      	ldr	r2, [r7, #12]
 8014b50:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014b52:	441a      	add	r2, r3
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014b58:	697b      	ldr	r3, [r7, #20]
}
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	3718      	adds	r7, #24
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bdb0      	pop	{r4, r5, r7, pc}
 8014b62:	bf00      	nop
 8014b64:	0801ab8c 	.word	0x0801ab8c
 8014b68:	0801b2d8 	.word	0x0801b2d8
 8014b6c:	0801ac24 	.word	0x0801ac24

08014b70 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014b70:	b580      	push	{r7, lr}
 8014b72:	b088      	sub	sp, #32
 8014b74:	af00      	add	r7, sp, #0
 8014b76:	60f8      	str	r0, [r7, #12]
 8014b78:	60b9      	str	r1, [r7, #8]
 8014b7a:	4611      	mov	r1, r2
 8014b7c:	461a      	mov	r2, r3
 8014b7e:	460b      	mov	r3, r1
 8014b80:	71fb      	strb	r3, [r7, #7]
 8014b82:	4613      	mov	r3, r2
 8014b84:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014b86:	2300      	movs	r3, #0
 8014b88:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014b8a:	68bb      	ldr	r3, [r7, #8]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d106      	bne.n	8014b9e <tcp_output_fill_options+0x2e>
 8014b90:	4b13      	ldr	r3, [pc, #76]	; (8014be0 <tcp_output_fill_options+0x70>)
 8014b92:	f240 7256 	movw	r2, #1878	; 0x756
 8014b96:	4913      	ldr	r1, [pc, #76]	; (8014be4 <tcp_output_fill_options+0x74>)
 8014b98:	4813      	ldr	r0, [pc, #76]	; (8014be8 <tcp_output_fill_options+0x78>)
 8014b9a:	f001 fa6f 	bl	801607c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014b9e:	68bb      	ldr	r3, [r7, #8]
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8014ba4:	69bb      	ldr	r3, [r7, #24]
 8014ba6:	3314      	adds	r3, #20
 8014ba8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014baa:	69bb      	ldr	r3, [r7, #24]
 8014bac:	f103 0214 	add.w	r2, r3, #20
 8014bb0:	8bfb      	ldrh	r3, [r7, #30]
 8014bb2:	009b      	lsls	r3, r3, #2
 8014bb4:	4619      	mov	r1, r3
 8014bb6:	79fb      	ldrb	r3, [r7, #7]
 8014bb8:	009b      	lsls	r3, r3, #2
 8014bba:	f003 0304 	and.w	r3, r3, #4
 8014bbe:	440b      	add	r3, r1
 8014bc0:	4413      	add	r3, r2
 8014bc2:	697a      	ldr	r2, [r7, #20]
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	d006      	beq.n	8014bd6 <tcp_output_fill_options+0x66>
 8014bc8:	4b05      	ldr	r3, [pc, #20]	; (8014be0 <tcp_output_fill_options+0x70>)
 8014bca:	f240 7275 	movw	r2, #1909	; 0x775
 8014bce:	4907      	ldr	r1, [pc, #28]	; (8014bec <tcp_output_fill_options+0x7c>)
 8014bd0:	4805      	ldr	r0, [pc, #20]	; (8014be8 <tcp_output_fill_options+0x78>)
 8014bd2:	f001 fa53 	bl	801607c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014bd6:	bf00      	nop
 8014bd8:	3720      	adds	r7, #32
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	bd80      	pop	{r7, pc}
 8014bde:	bf00      	nop
 8014be0:	0801ab8c 	.word	0x0801ab8c
 8014be4:	0801b300 	.word	0x0801b300
 8014be8:	0801ac24 	.word	0x0801ac24
 8014bec:	0801b1f8 	.word	0x0801b1f8

08014bf0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b08a      	sub	sp, #40	; 0x28
 8014bf4:	af04      	add	r7, sp, #16
 8014bf6:	60f8      	str	r0, [r7, #12]
 8014bf8:	60b9      	str	r1, [r7, #8]
 8014bfa:	607a      	str	r2, [r7, #4]
 8014bfc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d106      	bne.n	8014c12 <tcp_output_control_segment+0x22>
 8014c04:	4b1c      	ldr	r3, [pc, #112]	; (8014c78 <tcp_output_control_segment+0x88>)
 8014c06:	f240 7287 	movw	r2, #1927	; 0x787
 8014c0a:	491c      	ldr	r1, [pc, #112]	; (8014c7c <tcp_output_control_segment+0x8c>)
 8014c0c:	481c      	ldr	r0, [pc, #112]	; (8014c80 <tcp_output_control_segment+0x90>)
 8014c0e:	f001 fa35 	bl	801607c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8014c12:	683a      	ldr	r2, [r7, #0]
 8014c14:	6879      	ldr	r1, [r7, #4]
 8014c16:	68f8      	ldr	r0, [r7, #12]
 8014c18:	f7fe fae8 	bl	80131ec <tcp_route>
 8014c1c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8014c1e:	693b      	ldr	r3, [r7, #16]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d102      	bne.n	8014c2a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8014c24:	23fc      	movs	r3, #252	; 0xfc
 8014c26:	75fb      	strb	r3, [r7, #23]
 8014c28:	e01c      	b.n	8014c64 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d006      	beq.n	8014c3e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8014c30:	68fb      	ldr	r3, [r7, #12]
 8014c32:	7adb      	ldrb	r3, [r3, #11]
 8014c34:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	7a9b      	ldrb	r3, [r3, #10]
 8014c3a:	757b      	strb	r3, [r7, #21]
 8014c3c:	e003      	b.n	8014c46 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8014c3e:	23ff      	movs	r3, #255	; 0xff
 8014c40:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8014c42:	2300      	movs	r3, #0
 8014c44:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8014c46:	7dba      	ldrb	r2, [r7, #22]
 8014c48:	693b      	ldr	r3, [r7, #16]
 8014c4a:	9302      	str	r3, [sp, #8]
 8014c4c:	2306      	movs	r3, #6
 8014c4e:	9301      	str	r3, [sp, #4]
 8014c50:	7d7b      	ldrb	r3, [r7, #21]
 8014c52:	9300      	str	r3, [sp, #0]
 8014c54:	4613      	mov	r3, r2
 8014c56:	683a      	ldr	r2, [r7, #0]
 8014c58:	6879      	ldr	r1, [r7, #4]
 8014c5a:	68b8      	ldr	r0, [r7, #8]
 8014c5c:	f7f7 fe78 	bl	800c950 <ip4_output_if>
 8014c60:	4603      	mov	r3, r0
 8014c62:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014c64:	68b8      	ldr	r0, [r7, #8]
 8014c66:	f7fa f9c5 	bl	800eff4 <pbuf_free>
  return err;
 8014c6a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014c6e:	4618      	mov	r0, r3
 8014c70:	3718      	adds	r7, #24
 8014c72:	46bd      	mov	sp, r7
 8014c74:	bd80      	pop	{r7, pc}
 8014c76:	bf00      	nop
 8014c78:	0801ab8c 	.word	0x0801ab8c
 8014c7c:	0801b328 	.word	0x0801b328
 8014c80:	0801ac24 	.word	0x0801ac24

08014c84 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014c84:	b590      	push	{r4, r7, lr}
 8014c86:	b08b      	sub	sp, #44	; 0x2c
 8014c88:	af04      	add	r7, sp, #16
 8014c8a:	60f8      	str	r0, [r7, #12]
 8014c8c:	60b9      	str	r1, [r7, #8]
 8014c8e:	607a      	str	r2, [r7, #4]
 8014c90:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8014c92:	683b      	ldr	r3, [r7, #0]
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d106      	bne.n	8014ca6 <tcp_rst+0x22>
 8014c98:	4b1f      	ldr	r3, [pc, #124]	; (8014d18 <tcp_rst+0x94>)
 8014c9a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8014c9e:	491f      	ldr	r1, [pc, #124]	; (8014d1c <tcp_rst+0x98>)
 8014ca0:	481f      	ldr	r0, [pc, #124]	; (8014d20 <tcp_rst+0x9c>)
 8014ca2:	f001 f9eb 	bl	801607c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d106      	bne.n	8014cba <tcp_rst+0x36>
 8014cac:	4b1a      	ldr	r3, [pc, #104]	; (8014d18 <tcp_rst+0x94>)
 8014cae:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8014cb2:	491c      	ldr	r1, [pc, #112]	; (8014d24 <tcp_rst+0xa0>)
 8014cb4:	481a      	ldr	r0, [pc, #104]	; (8014d20 <tcp_rst+0x9c>)
 8014cb6:	f001 f9e1 	bl	801607c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014cba:	2300      	movs	r3, #0
 8014cbc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014cbe:	f646 030b 	movw	r3, #26635	; 0x680b
 8014cc2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8014cc4:	7dfb      	ldrb	r3, [r7, #23]
 8014cc6:	b29c      	uxth	r4, r3
 8014cc8:	68b8      	ldr	r0, [r7, #8]
 8014cca:	f7f8 fda8 	bl	800d81e <lwip_htonl>
 8014cce:	4602      	mov	r2, r0
 8014cd0:	8abb      	ldrh	r3, [r7, #20]
 8014cd2:	9303      	str	r3, [sp, #12]
 8014cd4:	2314      	movs	r3, #20
 8014cd6:	9302      	str	r3, [sp, #8]
 8014cd8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014cda:	9301      	str	r3, [sp, #4]
 8014cdc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014cde:	9300      	str	r3, [sp, #0]
 8014ce0:	4613      	mov	r3, r2
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	4621      	mov	r1, r4
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f7ff fe92 	bl	8014a10 <tcp_output_alloc_header_common>
 8014cec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8014cee:	693b      	ldr	r3, [r7, #16]
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d00c      	beq.n	8014d0e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014cf4:	7dfb      	ldrb	r3, [r7, #23]
 8014cf6:	2200      	movs	r2, #0
 8014cf8:	6939      	ldr	r1, [r7, #16]
 8014cfa:	68f8      	ldr	r0, [r7, #12]
 8014cfc:	f7ff ff38 	bl	8014b70 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8014d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d02:	683a      	ldr	r2, [r7, #0]
 8014d04:	6939      	ldr	r1, [r7, #16]
 8014d06:	68f8      	ldr	r0, [r7, #12]
 8014d08:	f7ff ff72 	bl	8014bf0 <tcp_output_control_segment>
 8014d0c:	e000      	b.n	8014d10 <tcp_rst+0x8c>
    return;
 8014d0e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8014d10:	371c      	adds	r7, #28
 8014d12:	46bd      	mov	sp, r7
 8014d14:	bd90      	pop	{r4, r7, pc}
 8014d16:	bf00      	nop
 8014d18:	0801ab8c 	.word	0x0801ab8c
 8014d1c:	0801b354 	.word	0x0801b354
 8014d20:	0801ac24 	.word	0x0801ac24
 8014d24:	0801b370 	.word	0x0801b370

08014d28 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014d28:	b590      	push	{r4, r7, lr}
 8014d2a:	b087      	sub	sp, #28
 8014d2c:	af00      	add	r7, sp, #0
 8014d2e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014d30:	2300      	movs	r3, #0
 8014d32:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8014d34:	2300      	movs	r3, #0
 8014d36:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d106      	bne.n	8014d4c <tcp_send_empty_ack+0x24>
 8014d3e:	4b28      	ldr	r3, [pc, #160]	; (8014de0 <tcp_send_empty_ack+0xb8>)
 8014d40:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8014d44:	4927      	ldr	r1, [pc, #156]	; (8014de4 <tcp_send_empty_ack+0xbc>)
 8014d46:	4828      	ldr	r0, [pc, #160]	; (8014de8 <tcp_send_empty_ack+0xc0>)
 8014d48:	f001 f998 	bl	801607c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014d4c:	7dfb      	ldrb	r3, [r7, #23]
 8014d4e:	009b      	lsls	r3, r3, #2
 8014d50:	b2db      	uxtb	r3, r3
 8014d52:	f003 0304 	and.w	r3, r3, #4
 8014d56:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014d58:	7d7b      	ldrb	r3, [r7, #21]
 8014d5a:	b29c      	uxth	r4, r3
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014d60:	4618      	mov	r0, r3
 8014d62:	f7f8 fd5c 	bl	800d81e <lwip_htonl>
 8014d66:	4603      	mov	r3, r0
 8014d68:	2200      	movs	r2, #0
 8014d6a:	4621      	mov	r1, r4
 8014d6c:	6878      	ldr	r0, [r7, #4]
 8014d6e:	f7ff fec1 	bl	8014af4 <tcp_output_alloc_header>
 8014d72:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014d74:	693b      	ldr	r3, [r7, #16]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d109      	bne.n	8014d8e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	8b5b      	ldrh	r3, [r3, #26]
 8014d7e:	f043 0303 	orr.w	r3, r3, #3
 8014d82:	b29a      	uxth	r2, r3
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8014d88:	f06f 0301 	mvn.w	r3, #1
 8014d8c:	e023      	b.n	8014dd6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014d8e:	7dbb      	ldrb	r3, [r7, #22]
 8014d90:	7dfa      	ldrb	r2, [r7, #23]
 8014d92:	6939      	ldr	r1, [r7, #16]
 8014d94:	6878      	ldr	r0, [r7, #4]
 8014d96:	f7ff feeb 	bl	8014b70 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014d9a:	687a      	ldr	r2, [r7, #4]
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	3304      	adds	r3, #4
 8014da0:	6939      	ldr	r1, [r7, #16]
 8014da2:	6878      	ldr	r0, [r7, #4]
 8014da4:	f7ff ff24 	bl	8014bf0 <tcp_output_control_segment>
 8014da8:	4603      	mov	r3, r0
 8014daa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8014dac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d007      	beq.n	8014dc4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	8b5b      	ldrh	r3, [r3, #26]
 8014db8:	f043 0303 	orr.w	r3, r3, #3
 8014dbc:	b29a      	uxth	r2, r3
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	835a      	strh	r2, [r3, #26]
 8014dc2:	e006      	b.n	8014dd2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	8b5b      	ldrh	r3, [r3, #26]
 8014dc8:	f023 0303 	bic.w	r3, r3, #3
 8014dcc:	b29a      	uxth	r2, r3
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8014dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	371c      	adds	r7, #28
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd90      	pop	{r4, r7, pc}
 8014dde:	bf00      	nop
 8014de0:	0801ab8c 	.word	0x0801ab8c
 8014de4:	0801b38c 	.word	0x0801b38c
 8014de8:	0801ac24 	.word	0x0801ac24

08014dec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8014dec:	b590      	push	{r4, r7, lr}
 8014dee:	b087      	sub	sp, #28
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014df4:	2300      	movs	r3, #0
 8014df6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d106      	bne.n	8014e0c <tcp_keepalive+0x20>
 8014dfe:	4b18      	ldr	r3, [pc, #96]	; (8014e60 <tcp_keepalive+0x74>)
 8014e00:	f640 0224 	movw	r2, #2084	; 0x824
 8014e04:	4917      	ldr	r1, [pc, #92]	; (8014e64 <tcp_keepalive+0x78>)
 8014e06:	4818      	ldr	r0, [pc, #96]	; (8014e68 <tcp_keepalive+0x7c>)
 8014e08:	f001 f938 	bl	801607c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8014e0c:	7dfb      	ldrb	r3, [r7, #23]
 8014e0e:	b29c      	uxth	r4, r3
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e14:	3b01      	subs	r3, #1
 8014e16:	4618      	mov	r0, r3
 8014e18:	f7f8 fd01 	bl	800d81e <lwip_htonl>
 8014e1c:	4603      	mov	r3, r0
 8014e1e:	2200      	movs	r2, #0
 8014e20:	4621      	mov	r1, r4
 8014e22:	6878      	ldr	r0, [r7, #4]
 8014e24:	f7ff fe66 	bl	8014af4 <tcp_output_alloc_header>
 8014e28:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014e2a:	693b      	ldr	r3, [r7, #16]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d102      	bne.n	8014e36 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8014e30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e34:	e010      	b.n	8014e58 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014e36:	7dfb      	ldrb	r3, [r7, #23]
 8014e38:	2200      	movs	r2, #0
 8014e3a:	6939      	ldr	r1, [r7, #16]
 8014e3c:	6878      	ldr	r0, [r7, #4]
 8014e3e:	f7ff fe97 	bl	8014b70 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014e42:	687a      	ldr	r2, [r7, #4]
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	3304      	adds	r3, #4
 8014e48:	6939      	ldr	r1, [r7, #16]
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f7ff fed0 	bl	8014bf0 <tcp_output_control_segment>
 8014e50:	4603      	mov	r3, r0
 8014e52:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014e58:	4618      	mov	r0, r3
 8014e5a:	371c      	adds	r7, #28
 8014e5c:	46bd      	mov	sp, r7
 8014e5e:	bd90      	pop	{r4, r7, pc}
 8014e60:	0801ab8c 	.word	0x0801ab8c
 8014e64:	0801b3ac 	.word	0x0801b3ac
 8014e68:	0801ac24 	.word	0x0801ac24

08014e6c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8014e6c:	b590      	push	{r4, r7, lr}
 8014e6e:	b08b      	sub	sp, #44	; 0x2c
 8014e70:	af00      	add	r7, sp, #0
 8014e72:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014e74:	2300      	movs	r3, #0
 8014e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d106      	bne.n	8014e8e <tcp_zero_window_probe+0x22>
 8014e80:	4b4c      	ldr	r3, [pc, #304]	; (8014fb4 <tcp_zero_window_probe+0x148>)
 8014e82:	f640 024f 	movw	r2, #2127	; 0x84f
 8014e86:	494c      	ldr	r1, [pc, #304]	; (8014fb8 <tcp_zero_window_probe+0x14c>)
 8014e88:	484c      	ldr	r0, [pc, #304]	; (8014fbc <tcp_zero_window_probe+0x150>)
 8014e8a:	f001 f8f7 	bl	801607c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e92:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8014e94:	6a3b      	ldr	r3, [r7, #32]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d101      	bne.n	8014e9e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	e086      	b.n	8014fac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8014ea4:	2bff      	cmp	r3, #255	; 0xff
 8014ea6:	d007      	beq.n	8014eb8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8014eae:	3301      	adds	r3, #1
 8014eb0:	b2da      	uxtb	r2, r3
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8014eb8:	6a3b      	ldr	r3, [r7, #32]
 8014eba:	68db      	ldr	r3, [r3, #12]
 8014ebc:	899b      	ldrh	r3, [r3, #12]
 8014ebe:	b29b      	uxth	r3, r3
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f7f8 fc97 	bl	800d7f4 <lwip_htons>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	b2db      	uxtb	r3, r3
 8014eca:	f003 0301 	and.w	r3, r3, #1
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d005      	beq.n	8014ede <tcp_zero_window_probe+0x72>
 8014ed2:	6a3b      	ldr	r3, [r7, #32]
 8014ed4:	891b      	ldrh	r3, [r3, #8]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d101      	bne.n	8014ede <tcp_zero_window_probe+0x72>
 8014eda:	2301      	movs	r3, #1
 8014edc:	e000      	b.n	8014ee0 <tcp_zero_window_probe+0x74>
 8014ede:	2300      	movs	r3, #0
 8014ee0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8014ee2:	7ffb      	ldrb	r3, [r7, #31]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	bf0c      	ite	eq
 8014ee8:	2301      	moveq	r3, #1
 8014eea:	2300      	movne	r3, #0
 8014eec:	b2db      	uxtb	r3, r3
 8014eee:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8014ef0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014ef4:	b299      	uxth	r1, r3
 8014ef6:	6a3b      	ldr	r3, [r7, #32]
 8014ef8:	68db      	ldr	r3, [r3, #12]
 8014efa:	685b      	ldr	r3, [r3, #4]
 8014efc:	8bba      	ldrh	r2, [r7, #28]
 8014efe:	6878      	ldr	r0, [r7, #4]
 8014f00:	f7ff fdf8 	bl	8014af4 <tcp_output_alloc_header>
 8014f04:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014f06:	69bb      	ldr	r3, [r7, #24]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d102      	bne.n	8014f12 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8014f0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f10:	e04c      	b.n	8014fac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8014f12:	69bb      	ldr	r3, [r7, #24]
 8014f14:	685b      	ldr	r3, [r3, #4]
 8014f16:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014f18:	7ffb      	ldrb	r3, [r7, #31]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d011      	beq.n	8014f42 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	899b      	ldrh	r3, [r3, #12]
 8014f22:	b29b      	uxth	r3, r3
 8014f24:	b21b      	sxth	r3, r3
 8014f26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014f2a:	b21c      	sxth	r4, r3
 8014f2c:	2011      	movs	r0, #17
 8014f2e:	f7f8 fc61 	bl	800d7f4 <lwip_htons>
 8014f32:	4603      	mov	r3, r0
 8014f34:	b21b      	sxth	r3, r3
 8014f36:	4323      	orrs	r3, r4
 8014f38:	b21b      	sxth	r3, r3
 8014f3a:	b29a      	uxth	r2, r3
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	819a      	strh	r2, [r3, #12]
 8014f40:	e010      	b.n	8014f64 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8014f42:	69bb      	ldr	r3, [r7, #24]
 8014f44:	685b      	ldr	r3, [r3, #4]
 8014f46:	3314      	adds	r3, #20
 8014f48:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014f4a:	6a3b      	ldr	r3, [r7, #32]
 8014f4c:	6858      	ldr	r0, [r3, #4]
 8014f4e:	6a3b      	ldr	r3, [r7, #32]
 8014f50:	685b      	ldr	r3, [r3, #4]
 8014f52:	891a      	ldrh	r2, [r3, #8]
 8014f54:	6a3b      	ldr	r3, [r7, #32]
 8014f56:	891b      	ldrh	r3, [r3, #8]
 8014f58:	1ad3      	subs	r3, r2, r3
 8014f5a:	b29b      	uxth	r3, r3
 8014f5c:	2201      	movs	r2, #1
 8014f5e:	6939      	ldr	r1, [r7, #16]
 8014f60:	f7fa fa3e 	bl	800f3e0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8014f64:	6a3b      	ldr	r3, [r7, #32]
 8014f66:	68db      	ldr	r3, [r3, #12]
 8014f68:	685b      	ldr	r3, [r3, #4]
 8014f6a:	4618      	mov	r0, r3
 8014f6c:	f7f8 fc57 	bl	800d81e <lwip_htonl>
 8014f70:	4603      	mov	r3, r0
 8014f72:	3301      	adds	r3, #1
 8014f74:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	1ad3      	subs	r3, r2, r3
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	da02      	bge.n	8014f88 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	68fa      	ldr	r2, [r7, #12]
 8014f86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8014f88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	69b9      	ldr	r1, [r7, #24]
 8014f90:	6878      	ldr	r0, [r7, #4]
 8014f92:	f7ff fded 	bl	8014b70 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014f96:	687a      	ldr	r2, [r7, #4]
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	3304      	adds	r3, #4
 8014f9c:	69b9      	ldr	r1, [r7, #24]
 8014f9e:	6878      	ldr	r0, [r7, #4]
 8014fa0:	f7ff fe26 	bl	8014bf0 <tcp_output_control_segment>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8014fa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	372c      	adds	r7, #44	; 0x2c
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd90      	pop	{r4, r7, pc}
 8014fb4:	0801ab8c 	.word	0x0801ab8c
 8014fb8:	0801b3c8 	.word	0x0801b3c8
 8014fbc:	0801ac24 	.word	0x0801ac24

08014fc0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014fc8:	f7fa faf8 	bl	800f5bc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014fcc:	4b0a      	ldr	r3, [pc, #40]	; (8014ff8 <tcpip_tcp_timer+0x38>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d103      	bne.n	8014fdc <tcpip_tcp_timer+0x1c>
 8014fd4:	4b09      	ldr	r3, [pc, #36]	; (8014ffc <tcpip_tcp_timer+0x3c>)
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d005      	beq.n	8014fe8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014fdc:	2200      	movs	r2, #0
 8014fde:	4908      	ldr	r1, [pc, #32]	; (8015000 <tcpip_tcp_timer+0x40>)
 8014fe0:	20fa      	movs	r0, #250	; 0xfa
 8014fe2:	f000 f8f3 	bl	80151cc <sys_timeout>
 8014fe6:	e003      	b.n	8014ff0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014fe8:	4b06      	ldr	r3, [pc, #24]	; (8015004 <tcpip_tcp_timer+0x44>)
 8014fea:	2200      	movs	r2, #0
 8014fec:	601a      	str	r2, [r3, #0]
  }
}
 8014fee:	bf00      	nop
 8014ff0:	bf00      	nop
 8014ff2:	3708      	adds	r7, #8
 8014ff4:	46bd      	mov	sp, r7
 8014ff6:	bd80      	pop	{r7, pc}
 8014ff8:	2400a784 	.word	0x2400a784
 8014ffc:	2400a794 	.word	0x2400a794
 8015000:	08014fc1 	.word	0x08014fc1
 8015004:	240067f4 	.word	0x240067f4

08015008 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801500c:	4b0a      	ldr	r3, [pc, #40]	; (8015038 <tcp_timer_needed+0x30>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d10f      	bne.n	8015034 <tcp_timer_needed+0x2c>
 8015014:	4b09      	ldr	r3, [pc, #36]	; (801503c <tcp_timer_needed+0x34>)
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d103      	bne.n	8015024 <tcp_timer_needed+0x1c>
 801501c:	4b08      	ldr	r3, [pc, #32]	; (8015040 <tcp_timer_needed+0x38>)
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	2b00      	cmp	r3, #0
 8015022:	d007      	beq.n	8015034 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015024:	4b04      	ldr	r3, [pc, #16]	; (8015038 <tcp_timer_needed+0x30>)
 8015026:	2201      	movs	r2, #1
 8015028:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801502a:	2200      	movs	r2, #0
 801502c:	4905      	ldr	r1, [pc, #20]	; (8015044 <tcp_timer_needed+0x3c>)
 801502e:	20fa      	movs	r0, #250	; 0xfa
 8015030:	f000 f8cc 	bl	80151cc <sys_timeout>
  }
}
 8015034:	bf00      	nop
 8015036:	bd80      	pop	{r7, pc}
 8015038:	240067f4 	.word	0x240067f4
 801503c:	2400a784 	.word	0x2400a784
 8015040:	2400a794 	.word	0x2400a794
 8015044:	08014fc1 	.word	0x08014fc1

08015048 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b086      	sub	sp, #24
 801504c:	af00      	add	r7, sp, #0
 801504e:	60f8      	str	r0, [r7, #12]
 8015050:	60b9      	str	r1, [r7, #8]
 8015052:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8015054:	200a      	movs	r0, #10
 8015056:	f7f9 f90f 	bl	800e278 <memp_malloc>
 801505a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801505c:	693b      	ldr	r3, [r7, #16]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d109      	bne.n	8015076 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8015062:	693b      	ldr	r3, [r7, #16]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d151      	bne.n	801510c <sys_timeout_abs+0xc4>
 8015068:	4b2a      	ldr	r3, [pc, #168]	; (8015114 <sys_timeout_abs+0xcc>)
 801506a:	22be      	movs	r2, #190	; 0xbe
 801506c:	492a      	ldr	r1, [pc, #168]	; (8015118 <sys_timeout_abs+0xd0>)
 801506e:	482b      	ldr	r0, [pc, #172]	; (801511c <sys_timeout_abs+0xd4>)
 8015070:	f001 f804 	bl	801607c <iprintf>
    return;
 8015074:	e04a      	b.n	801510c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8015076:	693b      	ldr	r3, [r7, #16]
 8015078:	2200      	movs	r2, #0
 801507a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801507c:	693b      	ldr	r3, [r7, #16]
 801507e:	68ba      	ldr	r2, [r7, #8]
 8015080:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8015082:	693b      	ldr	r3, [r7, #16]
 8015084:	687a      	ldr	r2, [r7, #4]
 8015086:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8015088:	693b      	ldr	r3, [r7, #16]
 801508a:	68fa      	ldr	r2, [r7, #12]
 801508c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801508e:	4b24      	ldr	r3, [pc, #144]	; (8015120 <sys_timeout_abs+0xd8>)
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d103      	bne.n	801509e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015096:	4a22      	ldr	r2, [pc, #136]	; (8015120 <sys_timeout_abs+0xd8>)
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	6013      	str	r3, [r2, #0]
    return;
 801509c:	e037      	b.n	801510e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	685a      	ldr	r2, [r3, #4]
 80150a2:	4b1f      	ldr	r3, [pc, #124]	; (8015120 <sys_timeout_abs+0xd8>)
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	685b      	ldr	r3, [r3, #4]
 80150a8:	1ad3      	subs	r3, r2, r3
 80150aa:	0fdb      	lsrs	r3, r3, #31
 80150ac:	f003 0301 	and.w	r3, r3, #1
 80150b0:	b2db      	uxtb	r3, r3
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d007      	beq.n	80150c6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80150b6:	4b1a      	ldr	r3, [pc, #104]	; (8015120 <sys_timeout_abs+0xd8>)
 80150b8:	681a      	ldr	r2, [r3, #0]
 80150ba:	693b      	ldr	r3, [r7, #16]
 80150bc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80150be:	4a18      	ldr	r2, [pc, #96]	; (8015120 <sys_timeout_abs+0xd8>)
 80150c0:	693b      	ldr	r3, [r7, #16]
 80150c2:	6013      	str	r3, [r2, #0]
 80150c4:	e023      	b.n	801510e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80150c6:	4b16      	ldr	r3, [pc, #88]	; (8015120 <sys_timeout_abs+0xd8>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	617b      	str	r3, [r7, #20]
 80150cc:	e01a      	b.n	8015104 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80150ce:	697b      	ldr	r3, [r7, #20]
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d00b      	beq.n	80150ee <sys_timeout_abs+0xa6>
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	685a      	ldr	r2, [r3, #4]
 80150da:	697b      	ldr	r3, [r7, #20]
 80150dc:	681b      	ldr	r3, [r3, #0]
 80150de:	685b      	ldr	r3, [r3, #4]
 80150e0:	1ad3      	subs	r3, r2, r3
 80150e2:	0fdb      	lsrs	r3, r3, #31
 80150e4:	f003 0301 	and.w	r3, r3, #1
 80150e8:	b2db      	uxtb	r3, r3
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d007      	beq.n	80150fe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80150ee:	697b      	ldr	r3, [r7, #20]
 80150f0:	681a      	ldr	r2, [r3, #0]
 80150f2:	693b      	ldr	r3, [r7, #16]
 80150f4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80150f6:	697b      	ldr	r3, [r7, #20]
 80150f8:	693a      	ldr	r2, [r7, #16]
 80150fa:	601a      	str	r2, [r3, #0]
        break;
 80150fc:	e007      	b.n	801510e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80150fe:	697b      	ldr	r3, [r7, #20]
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	617b      	str	r3, [r7, #20]
 8015104:	697b      	ldr	r3, [r7, #20]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d1e1      	bne.n	80150ce <sys_timeout_abs+0x86>
 801510a:	e000      	b.n	801510e <sys_timeout_abs+0xc6>
    return;
 801510c:	bf00      	nop
      }
    }
  }
}
 801510e:	3718      	adds	r7, #24
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}
 8015114:	0801b408 	.word	0x0801b408
 8015118:	0801b480 	.word	0x0801b480
 801511c:	0801b4c0 	.word	0x0801b4c0
 8015120:	240067ec 	.word	0x240067ec

08015124 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b086      	sub	sp, #24
 8015128:	af00      	add	r7, sp, #0
 801512a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8015130:	697b      	ldr	r3, [r7, #20]
 8015132:	685b      	ldr	r3, [r3, #4]
 8015134:	4798      	blx	r3

  now = sys_now();
 8015136:	f7eb fc05 	bl	8000944 <sys_now>
 801513a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801513c:	697b      	ldr	r3, [r7, #20]
 801513e:	681a      	ldr	r2, [r3, #0]
 8015140:	4b0f      	ldr	r3, [pc, #60]	; (8015180 <lwip_cyclic_timer+0x5c>)
 8015142:	681b      	ldr	r3, [r3, #0]
 8015144:	4413      	add	r3, r2
 8015146:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8015148:	68fa      	ldr	r2, [r7, #12]
 801514a:	693b      	ldr	r3, [r7, #16]
 801514c:	1ad3      	subs	r3, r2, r3
 801514e:	0fdb      	lsrs	r3, r3, #31
 8015150:	f003 0301 	and.w	r3, r3, #1
 8015154:	b2db      	uxtb	r3, r3
 8015156:	2b00      	cmp	r3, #0
 8015158:	d009      	beq.n	801516e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801515a:	697b      	ldr	r3, [r7, #20]
 801515c:	681a      	ldr	r2, [r3, #0]
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	4413      	add	r3, r2
 8015162:	687a      	ldr	r2, [r7, #4]
 8015164:	4907      	ldr	r1, [pc, #28]	; (8015184 <lwip_cyclic_timer+0x60>)
 8015166:	4618      	mov	r0, r3
 8015168:	f7ff ff6e 	bl	8015048 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801516c:	e004      	b.n	8015178 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801516e:	687a      	ldr	r2, [r7, #4]
 8015170:	4904      	ldr	r1, [pc, #16]	; (8015184 <lwip_cyclic_timer+0x60>)
 8015172:	68f8      	ldr	r0, [r7, #12]
 8015174:	f7ff ff68 	bl	8015048 <sys_timeout_abs>
}
 8015178:	bf00      	nop
 801517a:	3718      	adds	r7, #24
 801517c:	46bd      	mov	sp, r7
 801517e:	bd80      	pop	{r7, pc}
 8015180:	240067f0 	.word	0x240067f0
 8015184:	08015125 	.word	0x08015125

08015188 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8015188:	b580      	push	{r7, lr}
 801518a:	b082      	sub	sp, #8
 801518c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801518e:	2301      	movs	r3, #1
 8015190:	607b      	str	r3, [r7, #4]
 8015192:	e00e      	b.n	80151b2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015194:	4a0b      	ldr	r2, [pc, #44]	; (80151c4 <sys_timeouts_init+0x3c>)
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	00db      	lsls	r3, r3, #3
 80151a0:	4a08      	ldr	r2, [pc, #32]	; (80151c4 <sys_timeouts_init+0x3c>)
 80151a2:	4413      	add	r3, r2
 80151a4:	461a      	mov	r2, r3
 80151a6:	4908      	ldr	r1, [pc, #32]	; (80151c8 <sys_timeouts_init+0x40>)
 80151a8:	f000 f810 	bl	80151cc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	3301      	adds	r3, #1
 80151b0:	607b      	str	r3, [r7, #4]
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	2b02      	cmp	r3, #2
 80151b6:	d9ed      	bls.n	8015194 <sys_timeouts_init+0xc>
  }
}
 80151b8:	bf00      	nop
 80151ba:	bf00      	nop
 80151bc:	3708      	adds	r7, #8
 80151be:	46bd      	mov	sp, r7
 80151c0:	bd80      	pop	{r7, pc}
 80151c2:	bf00      	nop
 80151c4:	0801b3ec 	.word	0x0801b3ec
 80151c8:	08015125 	.word	0x08015125

080151cc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b086      	sub	sp, #24
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	60f8      	str	r0, [r7, #12]
 80151d4:	60b9      	str	r1, [r7, #8]
 80151d6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80151de:	d306      	bcc.n	80151ee <sys_timeout+0x22>
 80151e0:	4b0a      	ldr	r3, [pc, #40]	; (801520c <sys_timeout+0x40>)
 80151e2:	f240 1229 	movw	r2, #297	; 0x129
 80151e6:	490a      	ldr	r1, [pc, #40]	; (8015210 <sys_timeout+0x44>)
 80151e8:	480a      	ldr	r0, [pc, #40]	; (8015214 <sys_timeout+0x48>)
 80151ea:	f000 ff47 	bl	801607c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80151ee:	f7eb fba9 	bl	8000944 <sys_now>
 80151f2:	4602      	mov	r2, r0
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	4413      	add	r3, r2
 80151f8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80151fa:	687a      	ldr	r2, [r7, #4]
 80151fc:	68b9      	ldr	r1, [r7, #8]
 80151fe:	6978      	ldr	r0, [r7, #20]
 8015200:	f7ff ff22 	bl	8015048 <sys_timeout_abs>
#endif
}
 8015204:	bf00      	nop
 8015206:	3718      	adds	r7, #24
 8015208:	46bd      	mov	sp, r7
 801520a:	bd80      	pop	{r7, pc}
 801520c:	0801b408 	.word	0x0801b408
 8015210:	0801b4e8 	.word	0x0801b4e8
 8015214:	0801b4c0 	.word	0x0801b4c0

08015218 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b084      	sub	sp, #16
 801521c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801521e:	f7eb fb91 	bl	8000944 <sys_now>
 8015222:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8015224:	4b17      	ldr	r3, [pc, #92]	; (8015284 <sys_check_timeouts+0x6c>)
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801522a:	68bb      	ldr	r3, [r7, #8]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d022      	beq.n	8015276 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	685b      	ldr	r3, [r3, #4]
 8015234:	68fa      	ldr	r2, [r7, #12]
 8015236:	1ad3      	subs	r3, r2, r3
 8015238:	0fdb      	lsrs	r3, r3, #31
 801523a:	f003 0301 	and.w	r3, r3, #1
 801523e:	b2db      	uxtb	r3, r3
 8015240:	2b00      	cmp	r3, #0
 8015242:	d11a      	bne.n	801527a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8015244:	68bb      	ldr	r3, [r7, #8]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	4a0e      	ldr	r2, [pc, #56]	; (8015284 <sys_check_timeouts+0x6c>)
 801524a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801524c:	68bb      	ldr	r3, [r7, #8]
 801524e:	689b      	ldr	r3, [r3, #8]
 8015250:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8015252:	68bb      	ldr	r3, [r7, #8]
 8015254:	68db      	ldr	r3, [r3, #12]
 8015256:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	685b      	ldr	r3, [r3, #4]
 801525c:	4a0a      	ldr	r2, [pc, #40]	; (8015288 <sys_check_timeouts+0x70>)
 801525e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8015260:	68b9      	ldr	r1, [r7, #8]
 8015262:	200a      	movs	r0, #10
 8015264:	f7f9 f87e 	bl	800e364 <memp_free>
    if (handler != NULL) {
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d0da      	beq.n	8015224 <sys_check_timeouts+0xc>
      handler(arg);
 801526e:	687b      	ldr	r3, [r7, #4]
 8015270:	6838      	ldr	r0, [r7, #0]
 8015272:	4798      	blx	r3
  do {
 8015274:	e7d6      	b.n	8015224 <sys_check_timeouts+0xc>
      return;
 8015276:	bf00      	nop
 8015278:	e000      	b.n	801527c <sys_check_timeouts+0x64>
      return;
 801527a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801527c:	3710      	adds	r7, #16
 801527e:	46bd      	mov	sp, r7
 8015280:	bd80      	pop	{r7, pc}
 8015282:	bf00      	nop
 8015284:	240067ec 	.word	0x240067ec
 8015288:	240067f0 	.word	0x240067f0

0801528c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801528c:	b580      	push	{r7, lr}
 801528e:	b082      	sub	sp, #8
 8015290:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8015292:	4b16      	ldr	r3, [pc, #88]	; (80152ec <sys_timeouts_sleeptime+0x60>)
 8015294:	681b      	ldr	r3, [r3, #0]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d102      	bne.n	80152a0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801529a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801529e:	e020      	b.n	80152e2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80152a0:	f7eb fb50 	bl	8000944 <sys_now>
 80152a4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80152a6:	4b11      	ldr	r3, [pc, #68]	; (80152ec <sys_timeouts_sleeptime+0x60>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	685a      	ldr	r2, [r3, #4]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	1ad3      	subs	r3, r2, r3
 80152b0:	0fdb      	lsrs	r3, r3, #31
 80152b2:	f003 0301 	and.w	r3, r3, #1
 80152b6:	b2db      	uxtb	r3, r3
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d001      	beq.n	80152c0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80152bc:	2300      	movs	r3, #0
 80152be:	e010      	b.n	80152e2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80152c0:	4b0a      	ldr	r3, [pc, #40]	; (80152ec <sys_timeouts_sleeptime+0x60>)
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	685a      	ldr	r2, [r3, #4]
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	1ad3      	subs	r3, r2, r3
 80152ca:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80152cc:	683b      	ldr	r3, [r7, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	da06      	bge.n	80152e0 <sys_timeouts_sleeptime+0x54>
 80152d2:	4b07      	ldr	r3, [pc, #28]	; (80152f0 <sys_timeouts_sleeptime+0x64>)
 80152d4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80152d8:	4906      	ldr	r1, [pc, #24]	; (80152f4 <sys_timeouts_sleeptime+0x68>)
 80152da:	4807      	ldr	r0, [pc, #28]	; (80152f8 <sys_timeouts_sleeptime+0x6c>)
 80152dc:	f000 fece 	bl	801607c <iprintf>
    return ret;
 80152e0:	683b      	ldr	r3, [r7, #0]
  }
}
 80152e2:	4618      	mov	r0, r3
 80152e4:	3708      	adds	r7, #8
 80152e6:	46bd      	mov	sp, r7
 80152e8:	bd80      	pop	{r7, pc}
 80152ea:	bf00      	nop
 80152ec:	240067ec 	.word	0x240067ec
 80152f0:	0801b408 	.word	0x0801b408
 80152f4:	0801b520 	.word	0x0801b520
 80152f8:	0801b4c0 	.word	0x0801b4c0

080152fc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80152fc:	b580      	push	{r7, lr}
 80152fe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8015300:	f000 fed4 	bl	80160ac <rand>
 8015304:	4603      	mov	r3, r0
 8015306:	b29b      	uxth	r3, r3
 8015308:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801530c:	b29b      	uxth	r3, r3
 801530e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8015312:	b29a      	uxth	r2, r3
 8015314:	4b01      	ldr	r3, [pc, #4]	; (801531c <udp_init+0x20>)
 8015316:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8015318:	bf00      	nop
 801531a:	bd80      	pop	{r7, pc}
 801531c:	2400004c 	.word	0x2400004c

08015320 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8015320:	b480      	push	{r7}
 8015322:	b083      	sub	sp, #12
 8015324:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8015326:	2300      	movs	r3, #0
 8015328:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801532a:	4b17      	ldr	r3, [pc, #92]	; (8015388 <udp_new_port+0x68>)
 801532c:	881b      	ldrh	r3, [r3, #0]
 801532e:	1c5a      	adds	r2, r3, #1
 8015330:	b291      	uxth	r1, r2
 8015332:	4a15      	ldr	r2, [pc, #84]	; (8015388 <udp_new_port+0x68>)
 8015334:	8011      	strh	r1, [r2, #0]
 8015336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801533a:	4293      	cmp	r3, r2
 801533c:	d103      	bne.n	8015346 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801533e:	4b12      	ldr	r3, [pc, #72]	; (8015388 <udp_new_port+0x68>)
 8015340:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015344:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8015346:	4b11      	ldr	r3, [pc, #68]	; (801538c <udp_new_port+0x6c>)
 8015348:	681b      	ldr	r3, [r3, #0]
 801534a:	603b      	str	r3, [r7, #0]
 801534c:	e011      	b.n	8015372 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801534e:	683b      	ldr	r3, [r7, #0]
 8015350:	8a5a      	ldrh	r2, [r3, #18]
 8015352:	4b0d      	ldr	r3, [pc, #52]	; (8015388 <udp_new_port+0x68>)
 8015354:	881b      	ldrh	r3, [r3, #0]
 8015356:	429a      	cmp	r2, r3
 8015358:	d108      	bne.n	801536c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801535a:	88fb      	ldrh	r3, [r7, #6]
 801535c:	3301      	adds	r3, #1
 801535e:	80fb      	strh	r3, [r7, #6]
 8015360:	88fb      	ldrh	r3, [r7, #6]
 8015362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015366:	d3e0      	bcc.n	801532a <udp_new_port+0xa>
        return 0;
 8015368:	2300      	movs	r3, #0
 801536a:	e007      	b.n	801537c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	68db      	ldr	r3, [r3, #12]
 8015370:	603b      	str	r3, [r7, #0]
 8015372:	683b      	ldr	r3, [r7, #0]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d1ea      	bne.n	801534e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8015378:	4b03      	ldr	r3, [pc, #12]	; (8015388 <udp_new_port+0x68>)
 801537a:	881b      	ldrh	r3, [r3, #0]
}
 801537c:	4618      	mov	r0, r3
 801537e:	370c      	adds	r7, #12
 8015380:	46bd      	mov	sp, r7
 8015382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015386:	4770      	bx	lr
 8015388:	2400004c 	.word	0x2400004c
 801538c:	2400a79c 	.word	0x2400a79c

08015390 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b084      	sub	sp, #16
 8015394:	af00      	add	r7, sp, #0
 8015396:	60f8      	str	r0, [r7, #12]
 8015398:	60b9      	str	r1, [r7, #8]
 801539a:	4613      	mov	r3, r2
 801539c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	d105      	bne.n	80153b0 <udp_input_local_match+0x20>
 80153a4:	4b27      	ldr	r3, [pc, #156]	; (8015444 <udp_input_local_match+0xb4>)
 80153a6:	2287      	movs	r2, #135	; 0x87
 80153a8:	4927      	ldr	r1, [pc, #156]	; (8015448 <udp_input_local_match+0xb8>)
 80153aa:	4828      	ldr	r0, [pc, #160]	; (801544c <udp_input_local_match+0xbc>)
 80153ac:	f000 fe66 	bl	801607c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80153b0:	68bb      	ldr	r3, [r7, #8]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d105      	bne.n	80153c2 <udp_input_local_match+0x32>
 80153b6:	4b23      	ldr	r3, [pc, #140]	; (8015444 <udp_input_local_match+0xb4>)
 80153b8:	2288      	movs	r2, #136	; 0x88
 80153ba:	4925      	ldr	r1, [pc, #148]	; (8015450 <udp_input_local_match+0xc0>)
 80153bc:	4823      	ldr	r0, [pc, #140]	; (801544c <udp_input_local_match+0xbc>)
 80153be:	f000 fe5d 	bl	801607c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	7a1b      	ldrb	r3, [r3, #8]
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d00b      	beq.n	80153e2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80153ca:	68fb      	ldr	r3, [r7, #12]
 80153cc:	7a1a      	ldrb	r2, [r3, #8]
 80153ce:	4b21      	ldr	r3, [pc, #132]	; (8015454 <udp_input_local_match+0xc4>)
 80153d0:	685b      	ldr	r3, [r3, #4]
 80153d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80153d6:	3301      	adds	r3, #1
 80153d8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153da:	429a      	cmp	r2, r3
 80153dc:	d001      	beq.n	80153e2 <udp_input_local_match+0x52>
    return 0;
 80153de:	2300      	movs	r3, #0
 80153e0:	e02b      	b.n	801543a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80153e2:	79fb      	ldrb	r3, [r7, #7]
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d018      	beq.n	801541a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d013      	beq.n	8015416 <udp_input_local_match+0x86>
 80153ee:	68fb      	ldr	r3, [r7, #12]
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d00f      	beq.n	8015416 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80153f6:	4b17      	ldr	r3, [pc, #92]	; (8015454 <udp_input_local_match+0xc4>)
 80153f8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80153fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80153fe:	d00a      	beq.n	8015416 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8015400:	68fb      	ldr	r3, [r7, #12]
 8015402:	681a      	ldr	r2, [r3, #0]
 8015404:	4b13      	ldr	r3, [pc, #76]	; (8015454 <udp_input_local_match+0xc4>)
 8015406:	695b      	ldr	r3, [r3, #20]
 8015408:	405a      	eors	r2, r3
 801540a:	68bb      	ldr	r3, [r7, #8]
 801540c:	3308      	adds	r3, #8
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015412:	2b00      	cmp	r3, #0
 8015414:	d110      	bne.n	8015438 <udp_input_local_match+0xa8>
          return 1;
 8015416:	2301      	movs	r3, #1
 8015418:	e00f      	b.n	801543a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801541a:	68fb      	ldr	r3, [r7, #12]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d009      	beq.n	8015434 <udp_input_local_match+0xa4>
 8015420:	68fb      	ldr	r3, [r7, #12]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d005      	beq.n	8015434 <udp_input_local_match+0xa4>
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	681a      	ldr	r2, [r3, #0]
 801542c:	4b09      	ldr	r3, [pc, #36]	; (8015454 <udp_input_local_match+0xc4>)
 801542e:	695b      	ldr	r3, [r3, #20]
 8015430:	429a      	cmp	r2, r3
 8015432:	d101      	bne.n	8015438 <udp_input_local_match+0xa8>
        return 1;
 8015434:	2301      	movs	r3, #1
 8015436:	e000      	b.n	801543a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015438:	2300      	movs	r3, #0
}
 801543a:	4618      	mov	r0, r3
 801543c:	3710      	adds	r7, #16
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}
 8015442:	bf00      	nop
 8015444:	0801b534 	.word	0x0801b534
 8015448:	0801b5a8 	.word	0x0801b5a8
 801544c:	0801b5cc 	.word	0x0801b5cc
 8015450:	0801b5f4 	.word	0x0801b5f4
 8015454:	24006a28 	.word	0x24006a28

08015458 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015458:	b590      	push	{r4, r7, lr}
 801545a:	b08d      	sub	sp, #52	; 0x34
 801545c:	af02      	add	r7, sp, #8
 801545e:	6078      	str	r0, [r7, #4]
 8015460:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8015462:	2300      	movs	r3, #0
 8015464:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d105      	bne.n	8015478 <udp_input+0x20>
 801546c:	4b7c      	ldr	r3, [pc, #496]	; (8015660 <udp_input+0x208>)
 801546e:	22cf      	movs	r2, #207	; 0xcf
 8015470:	497c      	ldr	r1, [pc, #496]	; (8015664 <udp_input+0x20c>)
 8015472:	487d      	ldr	r0, [pc, #500]	; (8015668 <udp_input+0x210>)
 8015474:	f000 fe02 	bl	801607c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015478:	683b      	ldr	r3, [r7, #0]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d105      	bne.n	801548a <udp_input+0x32>
 801547e:	4b78      	ldr	r3, [pc, #480]	; (8015660 <udp_input+0x208>)
 8015480:	22d0      	movs	r2, #208	; 0xd0
 8015482:	497a      	ldr	r1, [pc, #488]	; (801566c <udp_input+0x214>)
 8015484:	4878      	ldr	r0, [pc, #480]	; (8015668 <udp_input+0x210>)
 8015486:	f000 fdf9 	bl	801607c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	895b      	ldrh	r3, [r3, #10]
 801548e:	2b07      	cmp	r3, #7
 8015490:	d803      	bhi.n	801549a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8015492:	6878      	ldr	r0, [r7, #4]
 8015494:	f7f9 fdae 	bl	800eff4 <pbuf_free>
    goto end;
 8015498:	e0de      	b.n	8015658 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	685b      	ldr	r3, [r3, #4]
 801549e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80154a0:	4b73      	ldr	r3, [pc, #460]	; (8015670 <udp_input+0x218>)
 80154a2:	695b      	ldr	r3, [r3, #20]
 80154a4:	4a72      	ldr	r2, [pc, #456]	; (8015670 <udp_input+0x218>)
 80154a6:	6812      	ldr	r2, [r2, #0]
 80154a8:	4611      	mov	r1, r2
 80154aa:	4618      	mov	r0, r3
 80154ac:	f7f7 fb28 	bl	800cb00 <ip4_addr_isbroadcast_u32>
 80154b0:	4603      	mov	r3, r0
 80154b2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80154b4:	697b      	ldr	r3, [r7, #20]
 80154b6:	881b      	ldrh	r3, [r3, #0]
 80154b8:	b29b      	uxth	r3, r3
 80154ba:	4618      	mov	r0, r3
 80154bc:	f7f8 f99a 	bl	800d7f4 <lwip_htons>
 80154c0:	4603      	mov	r3, r0
 80154c2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80154c4:	697b      	ldr	r3, [r7, #20]
 80154c6:	885b      	ldrh	r3, [r3, #2]
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	4618      	mov	r0, r3
 80154cc:	f7f8 f992 	bl	800d7f4 <lwip_htons>
 80154d0:	4603      	mov	r3, r0
 80154d2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80154d4:	2300      	movs	r3, #0
 80154d6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80154d8:	2300      	movs	r3, #0
 80154da:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80154dc:	2300      	movs	r3, #0
 80154de:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80154e0:	4b64      	ldr	r3, [pc, #400]	; (8015674 <udp_input+0x21c>)
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	627b      	str	r3, [r7, #36]	; 0x24
 80154e6:	e054      	b.n	8015592 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80154e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154ea:	8a5b      	ldrh	r3, [r3, #18]
 80154ec:	89fa      	ldrh	r2, [r7, #14]
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d14a      	bne.n	8015588 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80154f2:	7cfb      	ldrb	r3, [r7, #19]
 80154f4:	461a      	mov	r2, r3
 80154f6:	6839      	ldr	r1, [r7, #0]
 80154f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80154fa:	f7ff ff49 	bl	8015390 <udp_input_local_match>
 80154fe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8015500:	2b00      	cmp	r3, #0
 8015502:	d041      	beq.n	8015588 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015506:	7c1b      	ldrb	r3, [r3, #16]
 8015508:	f003 0304 	and.w	r3, r3, #4
 801550c:	2b00      	cmp	r3, #0
 801550e:	d11d      	bne.n	801554c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8015510:	69fb      	ldr	r3, [r7, #28]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d102      	bne.n	801551c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015518:	61fb      	str	r3, [r7, #28]
 801551a:	e017      	b.n	801554c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801551c:	7cfb      	ldrb	r3, [r7, #19]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d014      	beq.n	801554c <udp_input+0xf4>
 8015522:	4b53      	ldr	r3, [pc, #332]	; (8015670 <udp_input+0x218>)
 8015524:	695b      	ldr	r3, [r3, #20]
 8015526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801552a:	d10f      	bne.n	801554c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801552c:	69fb      	ldr	r3, [r7, #28]
 801552e:	681a      	ldr	r2, [r3, #0]
 8015530:	683b      	ldr	r3, [r7, #0]
 8015532:	3304      	adds	r3, #4
 8015534:	681b      	ldr	r3, [r3, #0]
 8015536:	429a      	cmp	r2, r3
 8015538:	d008      	beq.n	801554c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801553c:	681a      	ldr	r2, [r3, #0]
 801553e:	683b      	ldr	r3, [r7, #0]
 8015540:	3304      	adds	r3, #4
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	429a      	cmp	r2, r3
 8015546:	d101      	bne.n	801554c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801554a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801554e:	8a9b      	ldrh	r3, [r3, #20]
 8015550:	8a3a      	ldrh	r2, [r7, #16]
 8015552:	429a      	cmp	r2, r3
 8015554:	d118      	bne.n	8015588 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015558:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801555a:	2b00      	cmp	r3, #0
 801555c:	d005      	beq.n	801556a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015560:	685a      	ldr	r2, [r3, #4]
 8015562:	4b43      	ldr	r3, [pc, #268]	; (8015670 <udp_input+0x218>)
 8015564:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015566:	429a      	cmp	r2, r3
 8015568:	d10e      	bne.n	8015588 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801556a:	6a3b      	ldr	r3, [r7, #32]
 801556c:	2b00      	cmp	r3, #0
 801556e:	d014      	beq.n	801559a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8015570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015572:	68da      	ldr	r2, [r3, #12]
 8015574:	6a3b      	ldr	r3, [r7, #32]
 8015576:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015578:	4b3e      	ldr	r3, [pc, #248]	; (8015674 <udp_input+0x21c>)
 801557a:	681a      	ldr	r2, [r3, #0]
 801557c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801557e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8015580:	4a3c      	ldr	r2, [pc, #240]	; (8015674 <udp_input+0x21c>)
 8015582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015584:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8015586:	e008      	b.n	801559a <udp_input+0x142>
      }
    }

    prev = pcb;
 8015588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801558a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801558e:	68db      	ldr	r3, [r3, #12]
 8015590:	627b      	str	r3, [r7, #36]	; 0x24
 8015592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015594:	2b00      	cmp	r3, #0
 8015596:	d1a7      	bne.n	80154e8 <udp_input+0x90>
 8015598:	e000      	b.n	801559c <udp_input+0x144>
        break;
 801559a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d101      	bne.n	80155a6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80155a2:	69fb      	ldr	r3, [r7, #28]
 80155a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80155a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155a8:	2b00      	cmp	r3, #0
 80155aa:	d002      	beq.n	80155b2 <udp_input+0x15a>
    for_us = 1;
 80155ac:	2301      	movs	r3, #1
 80155ae:	76fb      	strb	r3, [r7, #27]
 80155b0:	e00a      	b.n	80155c8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80155b2:	683b      	ldr	r3, [r7, #0]
 80155b4:	3304      	adds	r3, #4
 80155b6:	681a      	ldr	r2, [r3, #0]
 80155b8:	4b2d      	ldr	r3, [pc, #180]	; (8015670 <udp_input+0x218>)
 80155ba:	695b      	ldr	r3, [r3, #20]
 80155bc:	429a      	cmp	r2, r3
 80155be:	bf0c      	ite	eq
 80155c0:	2301      	moveq	r3, #1
 80155c2:	2300      	movne	r3, #0
 80155c4:	b2db      	uxtb	r3, r3
 80155c6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80155c8:	7efb      	ldrb	r3, [r7, #27]
 80155ca:	2b00      	cmp	r3, #0
 80155cc:	d041      	beq.n	8015652 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80155ce:	2108      	movs	r1, #8
 80155d0:	6878      	ldr	r0, [r7, #4]
 80155d2:	f7f9 fc89 	bl	800eee8 <pbuf_remove_header>
 80155d6:	4603      	mov	r3, r0
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d00a      	beq.n	80155f2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80155dc:	4b20      	ldr	r3, [pc, #128]	; (8015660 <udp_input+0x208>)
 80155de:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80155e2:	4925      	ldr	r1, [pc, #148]	; (8015678 <udp_input+0x220>)
 80155e4:	4820      	ldr	r0, [pc, #128]	; (8015668 <udp_input+0x210>)
 80155e6:	f000 fd49 	bl	801607c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80155ea:	6878      	ldr	r0, [r7, #4]
 80155ec:	f7f9 fd02 	bl	800eff4 <pbuf_free>
      goto end;
 80155f0:	e032      	b.n	8015658 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80155f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155f4:	2b00      	cmp	r3, #0
 80155f6:	d012      	beq.n	801561e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80155f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155fa:	699b      	ldr	r3, [r3, #24]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d00a      	beq.n	8015616 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8015600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015602:	699c      	ldr	r4, [r3, #24]
 8015604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015606:	69d8      	ldr	r0, [r3, #28]
 8015608:	8a3b      	ldrh	r3, [r7, #16]
 801560a:	9300      	str	r3, [sp, #0]
 801560c:	4b1b      	ldr	r3, [pc, #108]	; (801567c <udp_input+0x224>)
 801560e:	687a      	ldr	r2, [r7, #4]
 8015610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015612:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015614:	e021      	b.n	801565a <udp_input+0x202>
        pbuf_free(p);
 8015616:	6878      	ldr	r0, [r7, #4]
 8015618:	f7f9 fcec 	bl	800eff4 <pbuf_free>
        goto end;
 801561c:	e01c      	b.n	8015658 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801561e:	7cfb      	ldrb	r3, [r7, #19]
 8015620:	2b00      	cmp	r3, #0
 8015622:	d112      	bne.n	801564a <udp_input+0x1f2>
 8015624:	4b12      	ldr	r3, [pc, #72]	; (8015670 <udp_input+0x218>)
 8015626:	695b      	ldr	r3, [r3, #20]
 8015628:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801562c:	2be0      	cmp	r3, #224	; 0xe0
 801562e:	d00c      	beq.n	801564a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015630:	4b0f      	ldr	r3, [pc, #60]	; (8015670 <udp_input+0x218>)
 8015632:	899b      	ldrh	r3, [r3, #12]
 8015634:	3308      	adds	r3, #8
 8015636:	b29b      	uxth	r3, r3
 8015638:	b21b      	sxth	r3, r3
 801563a:	4619      	mov	r1, r3
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f7f9 fcc6 	bl	800efce <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015642:	2103      	movs	r1, #3
 8015644:	6878      	ldr	r0, [r7, #4]
 8015646:	f7f6 ff31 	bl	800c4ac <icmp_dest_unreach>
      pbuf_free(p);
 801564a:	6878      	ldr	r0, [r7, #4]
 801564c:	f7f9 fcd2 	bl	800eff4 <pbuf_free>
  return;
 8015650:	e003      	b.n	801565a <udp_input+0x202>
    pbuf_free(p);
 8015652:	6878      	ldr	r0, [r7, #4]
 8015654:	f7f9 fcce 	bl	800eff4 <pbuf_free>
  return;
 8015658:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801565a:	372c      	adds	r7, #44	; 0x2c
 801565c:	46bd      	mov	sp, r7
 801565e:	bd90      	pop	{r4, r7, pc}
 8015660:	0801b534 	.word	0x0801b534
 8015664:	0801b61c 	.word	0x0801b61c
 8015668:	0801b5cc 	.word	0x0801b5cc
 801566c:	0801b634 	.word	0x0801b634
 8015670:	24006a28 	.word	0x24006a28
 8015674:	2400a79c 	.word	0x2400a79c
 8015678:	0801b650 	.word	0x0801b650
 801567c:	24006a38 	.word	0x24006a38

08015680 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b086      	sub	sp, #24
 8015684:	af00      	add	r7, sp, #0
 8015686:	60f8      	str	r0, [r7, #12]
 8015688:	60b9      	str	r1, [r7, #8]
 801568a:	4613      	mov	r3, r2
 801568c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801568e:	68bb      	ldr	r3, [r7, #8]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d101      	bne.n	8015698 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015694:	4b39      	ldr	r3, [pc, #228]	; (801577c <udp_bind+0xfc>)
 8015696:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	2b00      	cmp	r3, #0
 801569c:	d109      	bne.n	80156b2 <udp_bind+0x32>
 801569e:	4b38      	ldr	r3, [pc, #224]	; (8015780 <udp_bind+0x100>)
 80156a0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80156a4:	4937      	ldr	r1, [pc, #220]	; (8015784 <udp_bind+0x104>)
 80156a6:	4838      	ldr	r0, [pc, #224]	; (8015788 <udp_bind+0x108>)
 80156a8:	f000 fce8 	bl	801607c <iprintf>
 80156ac:	f06f 030f 	mvn.w	r3, #15
 80156b0:	e060      	b.n	8015774 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80156b2:	2300      	movs	r3, #0
 80156b4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80156b6:	4b35      	ldr	r3, [pc, #212]	; (801578c <udp_bind+0x10c>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	617b      	str	r3, [r7, #20]
 80156bc:	e009      	b.n	80156d2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80156be:	68fa      	ldr	r2, [r7, #12]
 80156c0:	697b      	ldr	r3, [r7, #20]
 80156c2:	429a      	cmp	r2, r3
 80156c4:	d102      	bne.n	80156cc <udp_bind+0x4c>
      rebind = 1;
 80156c6:	2301      	movs	r3, #1
 80156c8:	74fb      	strb	r3, [r7, #19]
      break;
 80156ca:	e005      	b.n	80156d8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	68db      	ldr	r3, [r3, #12]
 80156d0:	617b      	str	r3, [r7, #20]
 80156d2:	697b      	ldr	r3, [r7, #20]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d1f2      	bne.n	80156be <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80156d8:	88fb      	ldrh	r3, [r7, #6]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d109      	bne.n	80156f2 <udp_bind+0x72>
    port = udp_new_port();
 80156de:	f7ff fe1f 	bl	8015320 <udp_new_port>
 80156e2:	4603      	mov	r3, r0
 80156e4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80156e6:	88fb      	ldrh	r3, [r7, #6]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d12c      	bne.n	8015746 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80156ec:	f06f 0307 	mvn.w	r3, #7
 80156f0:	e040      	b.n	8015774 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80156f2:	4b26      	ldr	r3, [pc, #152]	; (801578c <udp_bind+0x10c>)
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	617b      	str	r3, [r7, #20]
 80156f8:	e022      	b.n	8015740 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80156fa:	68fa      	ldr	r2, [r7, #12]
 80156fc:	697b      	ldr	r3, [r7, #20]
 80156fe:	429a      	cmp	r2, r3
 8015700:	d01b      	beq.n	801573a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	8a5b      	ldrh	r3, [r3, #18]
 8015706:	88fa      	ldrh	r2, [r7, #6]
 8015708:	429a      	cmp	r2, r3
 801570a:	d116      	bne.n	801573a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801570c:	697b      	ldr	r3, [r7, #20]
 801570e:	681a      	ldr	r2, [r3, #0]
 8015710:	68bb      	ldr	r3, [r7, #8]
 8015712:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015714:	429a      	cmp	r2, r3
 8015716:	d00d      	beq.n	8015734 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d00a      	beq.n	8015734 <udp_bind+0xb4>
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d006      	beq.n	8015734 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8015726:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8015728:	2b00      	cmp	r3, #0
 801572a:	d003      	beq.n	8015734 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801572c:	697b      	ldr	r3, [r7, #20]
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d102      	bne.n	801573a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015734:	f06f 0307 	mvn.w	r3, #7
 8015738:	e01c      	b.n	8015774 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801573a:	697b      	ldr	r3, [r7, #20]
 801573c:	68db      	ldr	r3, [r3, #12]
 801573e:	617b      	str	r3, [r7, #20]
 8015740:	697b      	ldr	r3, [r7, #20]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d1d9      	bne.n	80156fa <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d002      	beq.n	8015752 <udp_bind+0xd2>
 801574c:	68bb      	ldr	r3, [r7, #8]
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	e000      	b.n	8015754 <udp_bind+0xd4>
 8015752:	2300      	movs	r3, #0
 8015754:	68fa      	ldr	r2, [r7, #12]
 8015756:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	88fa      	ldrh	r2, [r7, #6]
 801575c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801575e:	7cfb      	ldrb	r3, [r7, #19]
 8015760:	2b00      	cmp	r3, #0
 8015762:	d106      	bne.n	8015772 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015764:	4b09      	ldr	r3, [pc, #36]	; (801578c <udp_bind+0x10c>)
 8015766:	681a      	ldr	r2, [r3, #0]
 8015768:	68fb      	ldr	r3, [r7, #12]
 801576a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801576c:	4a07      	ldr	r2, [pc, #28]	; (801578c <udp_bind+0x10c>)
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8015772:	2300      	movs	r3, #0
}
 8015774:	4618      	mov	r0, r3
 8015776:	3718      	adds	r7, #24
 8015778:	46bd      	mov	sp, r7
 801577a:	bd80      	pop	{r7, pc}
 801577c:	08018ff8 	.word	0x08018ff8
 8015780:	0801b534 	.word	0x0801b534
 8015784:	0801b840 	.word	0x0801b840
 8015788:	0801b5cc 	.word	0x0801b5cc
 801578c:	2400a79c 	.word	0x2400a79c

08015790 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b086      	sub	sp, #24
 8015794:	af00      	add	r7, sp, #0
 8015796:	60f8      	str	r0, [r7, #12]
 8015798:	60b9      	str	r1, [r7, #8]
 801579a:	4613      	mov	r3, r2
 801579c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d109      	bne.n	80157b8 <udp_connect+0x28>
 80157a4:	4b2c      	ldr	r3, [pc, #176]	; (8015858 <udp_connect+0xc8>)
 80157a6:	f240 4235 	movw	r2, #1077	; 0x435
 80157aa:	492c      	ldr	r1, [pc, #176]	; (801585c <udp_connect+0xcc>)
 80157ac:	482c      	ldr	r0, [pc, #176]	; (8015860 <udp_connect+0xd0>)
 80157ae:	f000 fc65 	bl	801607c <iprintf>
 80157b2:	f06f 030f 	mvn.w	r3, #15
 80157b6:	e04b      	b.n	8015850 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80157b8:	68bb      	ldr	r3, [r7, #8]
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d109      	bne.n	80157d2 <udp_connect+0x42>
 80157be:	4b26      	ldr	r3, [pc, #152]	; (8015858 <udp_connect+0xc8>)
 80157c0:	f240 4236 	movw	r2, #1078	; 0x436
 80157c4:	4927      	ldr	r1, [pc, #156]	; (8015864 <udp_connect+0xd4>)
 80157c6:	4826      	ldr	r0, [pc, #152]	; (8015860 <udp_connect+0xd0>)
 80157c8:	f000 fc58 	bl	801607c <iprintf>
 80157cc:	f06f 030f 	mvn.w	r3, #15
 80157d0:	e03e      	b.n	8015850 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	8a5b      	ldrh	r3, [r3, #18]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d10f      	bne.n	80157fa <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80157da:	68f9      	ldr	r1, [r7, #12]
 80157dc:	68fb      	ldr	r3, [r7, #12]
 80157de:	8a5b      	ldrh	r3, [r3, #18]
 80157e0:	461a      	mov	r2, r3
 80157e2:	68f8      	ldr	r0, [r7, #12]
 80157e4:	f7ff ff4c 	bl	8015680 <udp_bind>
 80157e8:	4603      	mov	r3, r0
 80157ea:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80157ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d002      	beq.n	80157fa <udp_connect+0x6a>
      return err;
 80157f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157f8:	e02a      	b.n	8015850 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80157fa:	68bb      	ldr	r3, [r7, #8]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d002      	beq.n	8015806 <udp_connect+0x76>
 8015800:	68bb      	ldr	r3, [r7, #8]
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	e000      	b.n	8015808 <udp_connect+0x78>
 8015806:	2300      	movs	r3, #0
 8015808:	68fa      	ldr	r2, [r7, #12]
 801580a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	88fa      	ldrh	r2, [r7, #6]
 8015810:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	7c1b      	ldrb	r3, [r3, #16]
 8015816:	f043 0304 	orr.w	r3, r3, #4
 801581a:	b2da      	uxtb	r2, r3
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015820:	4b11      	ldr	r3, [pc, #68]	; (8015868 <udp_connect+0xd8>)
 8015822:	681b      	ldr	r3, [r3, #0]
 8015824:	617b      	str	r3, [r7, #20]
 8015826:	e008      	b.n	801583a <udp_connect+0xaa>
    if (pcb == ipcb) {
 8015828:	68fa      	ldr	r2, [r7, #12]
 801582a:	697b      	ldr	r3, [r7, #20]
 801582c:	429a      	cmp	r2, r3
 801582e:	d101      	bne.n	8015834 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8015830:	2300      	movs	r3, #0
 8015832:	e00d      	b.n	8015850 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015834:	697b      	ldr	r3, [r7, #20]
 8015836:	68db      	ldr	r3, [r3, #12]
 8015838:	617b      	str	r3, [r7, #20]
 801583a:	697b      	ldr	r3, [r7, #20]
 801583c:	2b00      	cmp	r3, #0
 801583e:	d1f3      	bne.n	8015828 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8015840:	4b09      	ldr	r3, [pc, #36]	; (8015868 <udp_connect+0xd8>)
 8015842:	681a      	ldr	r2, [r3, #0]
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015848:	4a07      	ldr	r2, [pc, #28]	; (8015868 <udp_connect+0xd8>)
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801584e:	2300      	movs	r3, #0
}
 8015850:	4618      	mov	r0, r3
 8015852:	3718      	adds	r7, #24
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}
 8015858:	0801b534 	.word	0x0801b534
 801585c:	0801b858 	.word	0x0801b858
 8015860:	0801b5cc 	.word	0x0801b5cc
 8015864:	0801b874 	.word	0x0801b874
 8015868:	2400a79c 	.word	0x2400a79c

0801586c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b084      	sub	sp, #16
 8015870:	af00      	add	r7, sp, #0
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d107      	bne.n	801588e <udp_recv+0x22>
 801587e:	4b08      	ldr	r3, [pc, #32]	; (80158a0 <udp_recv+0x34>)
 8015880:	f240 428a 	movw	r2, #1162	; 0x48a
 8015884:	4907      	ldr	r1, [pc, #28]	; (80158a4 <udp_recv+0x38>)
 8015886:	4808      	ldr	r0, [pc, #32]	; (80158a8 <udp_recv+0x3c>)
 8015888:	f000 fbf8 	bl	801607c <iprintf>
 801588c:	e005      	b.n	801589a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	68ba      	ldr	r2, [r7, #8]
 8015892:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	687a      	ldr	r2, [r7, #4]
 8015898:	61da      	str	r2, [r3, #28]
}
 801589a:	3710      	adds	r7, #16
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}
 80158a0:	0801b534 	.word	0x0801b534
 80158a4:	0801b8ac 	.word	0x0801b8ac
 80158a8:	0801b5cc 	.word	0x0801b5cc

080158ac <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80158ac:	b580      	push	{r7, lr}
 80158ae:	b084      	sub	sp, #16
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d107      	bne.n	80158ca <udp_remove+0x1e>
 80158ba:	4b19      	ldr	r3, [pc, #100]	; (8015920 <udp_remove+0x74>)
 80158bc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80158c0:	4918      	ldr	r1, [pc, #96]	; (8015924 <udp_remove+0x78>)
 80158c2:	4819      	ldr	r0, [pc, #100]	; (8015928 <udp_remove+0x7c>)
 80158c4:	f000 fbda 	bl	801607c <iprintf>
 80158c8:	e026      	b.n	8015918 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80158ca:	4b18      	ldr	r3, [pc, #96]	; (801592c <udp_remove+0x80>)
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	687a      	ldr	r2, [r7, #4]
 80158d0:	429a      	cmp	r2, r3
 80158d2:	d105      	bne.n	80158e0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80158d4:	4b15      	ldr	r3, [pc, #84]	; (801592c <udp_remove+0x80>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	68db      	ldr	r3, [r3, #12]
 80158da:	4a14      	ldr	r2, [pc, #80]	; (801592c <udp_remove+0x80>)
 80158dc:	6013      	str	r3, [r2, #0]
 80158de:	e017      	b.n	8015910 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80158e0:	4b12      	ldr	r3, [pc, #72]	; (801592c <udp_remove+0x80>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	60fb      	str	r3, [r7, #12]
 80158e6:	e010      	b.n	801590a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	68db      	ldr	r3, [r3, #12]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d009      	beq.n	8015904 <udp_remove+0x58>
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	68db      	ldr	r3, [r3, #12]
 80158f4:	687a      	ldr	r2, [r7, #4]
 80158f6:	429a      	cmp	r2, r3
 80158f8:	d104      	bne.n	8015904 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	68da      	ldr	r2, [r3, #12]
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	60da      	str	r2, [r3, #12]
        break;
 8015902:	e005      	b.n	8015910 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	68db      	ldr	r3, [r3, #12]
 8015908:	60fb      	str	r3, [r7, #12]
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d1eb      	bne.n	80158e8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8015910:	6879      	ldr	r1, [r7, #4]
 8015912:	2000      	movs	r0, #0
 8015914:	f7f8 fd26 	bl	800e364 <memp_free>
}
 8015918:	3710      	adds	r7, #16
 801591a:	46bd      	mov	sp, r7
 801591c:	bd80      	pop	{r7, pc}
 801591e:	bf00      	nop
 8015920:	0801b534 	.word	0x0801b534
 8015924:	0801b8c4 	.word	0x0801b8c4
 8015928:	0801b5cc 	.word	0x0801b5cc
 801592c:	2400a79c 	.word	0x2400a79c

08015930 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b082      	sub	sp, #8
 8015934:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8015936:	2000      	movs	r0, #0
 8015938:	f7f8 fc9e 	bl	800e278 <memp_malloc>
 801593c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	2b00      	cmp	r3, #0
 8015942:	d007      	beq.n	8015954 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8015944:	2220      	movs	r2, #32
 8015946:	2100      	movs	r1, #0
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f000 fb8f 	bl	801606c <memset>
    pcb->ttl = UDP_TTL;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	22ff      	movs	r2, #255	; 0xff
 8015952:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8015954:	687b      	ldr	r3, [r7, #4]
}
 8015956:	4618      	mov	r0, r3
 8015958:	3708      	adds	r7, #8
 801595a:	46bd      	mov	sp, r7
 801595c:	bd80      	pop	{r7, pc}

0801595e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801595e:	b580      	push	{r7, lr}
 8015960:	b084      	sub	sp, #16
 8015962:	af00      	add	r7, sp, #0
 8015964:	4603      	mov	r3, r0
 8015966:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015968:	f7ff ffe2 	bl	8015930 <udp_new>
 801596c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801596e:	68fb      	ldr	r3, [r7, #12]
}
 8015970:	4618      	mov	r0, r3
 8015972:	3710      	adds	r7, #16
 8015974:	46bd      	mov	sp, r7
 8015976:	bd80      	pop	{r7, pc}

08015978 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015978:	b480      	push	{r7}
 801597a:	b085      	sub	sp, #20
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
 8015980:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d01e      	beq.n	80159c6 <udp_netif_ip_addr_changed+0x4e>
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d01a      	beq.n	80159c6 <udp_netif_ip_addr_changed+0x4e>
 8015990:	683b      	ldr	r3, [r7, #0]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d017      	beq.n	80159c6 <udp_netif_ip_addr_changed+0x4e>
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d013      	beq.n	80159c6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801599e:	4b0d      	ldr	r3, [pc, #52]	; (80159d4 <udp_netif_ip_addr_changed+0x5c>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	60fb      	str	r3, [r7, #12]
 80159a4:	e00c      	b.n	80159c0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	681a      	ldr	r2, [r3, #0]
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	429a      	cmp	r2, r3
 80159b0:	d103      	bne.n	80159ba <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	681a      	ldr	r2, [r3, #0]
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	68db      	ldr	r3, [r3, #12]
 80159be:	60fb      	str	r3, [r7, #12]
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d1ef      	bne.n	80159a6 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80159c6:	bf00      	nop
 80159c8:	3714      	adds	r7, #20
 80159ca:	46bd      	mov	sp, r7
 80159cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d0:	4770      	bx	lr
 80159d2:	bf00      	nop
 80159d4:	2400a79c 	.word	0x2400a79c

080159d8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b086      	sub	sp, #24
 80159dc:	af00      	add	r7, sp, #0
 80159de:	6078      	str	r0, [r7, #4]
 80159e0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80159e2:	230e      	movs	r3, #14
 80159e4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	895b      	ldrh	r3, [r3, #10]
 80159ea:	2b0e      	cmp	r3, #14
 80159ec:	d96e      	bls.n	8015acc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	7bdb      	ldrb	r3, [r3, #15]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d106      	bne.n	8015a04 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80159f6:	683b      	ldr	r3, [r7, #0]
 80159f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80159fc:	3301      	adds	r3, #1
 80159fe:	b2da      	uxtb	r2, r3
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	685b      	ldr	r3, [r3, #4]
 8015a08:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015a0a:	693b      	ldr	r3, [r7, #16]
 8015a0c:	7b1a      	ldrb	r2, [r3, #12]
 8015a0e:	7b5b      	ldrb	r3, [r3, #13]
 8015a10:	021b      	lsls	r3, r3, #8
 8015a12:	4313      	orrs	r3, r2
 8015a14:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015a16:	693b      	ldr	r3, [r7, #16]
 8015a18:	781b      	ldrb	r3, [r3, #0]
 8015a1a:	f003 0301 	and.w	r3, r3, #1
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d023      	beq.n	8015a6a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	781b      	ldrb	r3, [r3, #0]
 8015a26:	2b01      	cmp	r3, #1
 8015a28:	d10f      	bne.n	8015a4a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015a2a:	693b      	ldr	r3, [r7, #16]
 8015a2c:	785b      	ldrb	r3, [r3, #1]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d11b      	bne.n	8015a6a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015a32:	693b      	ldr	r3, [r7, #16]
 8015a34:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015a36:	2b5e      	cmp	r3, #94	; 0x5e
 8015a38:	d117      	bne.n	8015a6a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	7b5b      	ldrb	r3, [r3, #13]
 8015a3e:	f043 0310 	orr.w	r3, r3, #16
 8015a42:	b2da      	uxtb	r2, r3
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	735a      	strb	r2, [r3, #13]
 8015a48:	e00f      	b.n	8015a6a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015a4a:	693b      	ldr	r3, [r7, #16]
 8015a4c:	2206      	movs	r2, #6
 8015a4e:	4928      	ldr	r1, [pc, #160]	; (8015af0 <ethernet_input+0x118>)
 8015a50:	4618      	mov	r0, r3
 8015a52:	f000 fad5 	bl	8016000 <memcmp>
 8015a56:	4603      	mov	r3, r0
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	d106      	bne.n	8015a6a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	7b5b      	ldrb	r3, [r3, #13]
 8015a60:	f043 0308 	orr.w	r3, r3, #8
 8015a64:	b2da      	uxtb	r2, r3
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015a6a:	89fb      	ldrh	r3, [r7, #14]
 8015a6c:	2b08      	cmp	r3, #8
 8015a6e:	d003      	beq.n	8015a78 <ethernet_input+0xa0>
 8015a70:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015a74:	d014      	beq.n	8015aa0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015a76:	e032      	b.n	8015ade <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015a78:	683b      	ldr	r3, [r7, #0]
 8015a7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a7e:	f003 0308 	and.w	r3, r3, #8
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	d024      	beq.n	8015ad0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015a86:	8afb      	ldrh	r3, [r7, #22]
 8015a88:	4619      	mov	r1, r3
 8015a8a:	6878      	ldr	r0, [r7, #4]
 8015a8c:	f7f9 fa2c 	bl	800eee8 <pbuf_remove_header>
 8015a90:	4603      	mov	r3, r0
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d11e      	bne.n	8015ad4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015a96:	6839      	ldr	r1, [r7, #0]
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f7f6 fe35 	bl	800c708 <ip4_input>
      break;
 8015a9e:	e013      	b.n	8015ac8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015aa6:	f003 0308 	and.w	r3, r3, #8
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d014      	beq.n	8015ad8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015aae:	8afb      	ldrh	r3, [r7, #22]
 8015ab0:	4619      	mov	r1, r3
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f7f9 fa18 	bl	800eee8 <pbuf_remove_header>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d10e      	bne.n	8015adc <ethernet_input+0x104>
        etharp_input(p, netif);
 8015abe:	6839      	ldr	r1, [r7, #0]
 8015ac0:	6878      	ldr	r0, [r7, #4]
 8015ac2:	f7f5 ffb9 	bl	800ba38 <etharp_input>
      break;
 8015ac6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	e00c      	b.n	8015ae6 <ethernet_input+0x10e>
    goto free_and_return;
 8015acc:	bf00      	nop
 8015ace:	e006      	b.n	8015ade <ethernet_input+0x106>
        goto free_and_return;
 8015ad0:	bf00      	nop
 8015ad2:	e004      	b.n	8015ade <ethernet_input+0x106>
        goto free_and_return;
 8015ad4:	bf00      	nop
 8015ad6:	e002      	b.n	8015ade <ethernet_input+0x106>
        goto free_and_return;
 8015ad8:	bf00      	nop
 8015ada:	e000      	b.n	8015ade <ethernet_input+0x106>
        goto free_and_return;
 8015adc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f7f9 fa88 	bl	800eff4 <pbuf_free>
  return ERR_OK;
 8015ae4:	2300      	movs	r3, #0
}
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	3718      	adds	r7, #24
 8015aea:	46bd      	mov	sp, r7
 8015aec:	bd80      	pop	{r7, pc}
 8015aee:	bf00      	nop
 8015af0:	0801b8dc 	.word	0x0801b8dc

08015af4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b086      	sub	sp, #24
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	60f8      	str	r0, [r7, #12]
 8015afc:	60b9      	str	r1, [r7, #8]
 8015afe:	607a      	str	r2, [r7, #4]
 8015b00:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015b02:	8c3b      	ldrh	r3, [r7, #32]
 8015b04:	4618      	mov	r0, r3
 8015b06:	f7f7 fe75 	bl	800d7f4 <lwip_htons>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015b0e:	210e      	movs	r1, #14
 8015b10:	68b8      	ldr	r0, [r7, #8]
 8015b12:	f7f9 f9d9 	bl	800eec8 <pbuf_add_header>
 8015b16:	4603      	mov	r3, r0
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d125      	bne.n	8015b68 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015b1c:	68bb      	ldr	r3, [r7, #8]
 8015b1e:	685b      	ldr	r3, [r3, #4]
 8015b20:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015b22:	693b      	ldr	r3, [r7, #16]
 8015b24:	8afa      	ldrh	r2, [r7, #22]
 8015b26:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015b28:	693b      	ldr	r3, [r7, #16]
 8015b2a:	2206      	movs	r2, #6
 8015b2c:	6839      	ldr	r1, [r7, #0]
 8015b2e:	4618      	mov	r0, r3
 8015b30:	f000 fa74 	bl	801601c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015b34:	693b      	ldr	r3, [r7, #16]
 8015b36:	3306      	adds	r3, #6
 8015b38:	2206      	movs	r2, #6
 8015b3a:	6879      	ldr	r1, [r7, #4]
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	f000 fa6d 	bl	801601c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015b48:	2b06      	cmp	r3, #6
 8015b4a:	d006      	beq.n	8015b5a <ethernet_output+0x66>
 8015b4c:	4b0a      	ldr	r3, [pc, #40]	; (8015b78 <ethernet_output+0x84>)
 8015b4e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015b52:	490a      	ldr	r1, [pc, #40]	; (8015b7c <ethernet_output+0x88>)
 8015b54:	480a      	ldr	r0, [pc, #40]	; (8015b80 <ethernet_output+0x8c>)
 8015b56:	f000 fa91 	bl	801607c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	699b      	ldr	r3, [r3, #24]
 8015b5e:	68b9      	ldr	r1, [r7, #8]
 8015b60:	68f8      	ldr	r0, [r7, #12]
 8015b62:	4798      	blx	r3
 8015b64:	4603      	mov	r3, r0
 8015b66:	e002      	b.n	8015b6e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015b68:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015b6a:	f06f 0301 	mvn.w	r3, #1
}
 8015b6e:	4618      	mov	r0, r3
 8015b70:	3718      	adds	r7, #24
 8015b72:	46bd      	mov	sp, r7
 8015b74:	bd80      	pop	{r7, pc}
 8015b76:	bf00      	nop
 8015b78:	0801b8ec 	.word	0x0801b8ec
 8015b7c:	0801b964 	.word	0x0801b964
 8015b80:	0801b998 	.word	0x0801b998

08015b84 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b084      	sub	sp, #16
 8015b88:	af00      	add	r7, sp, #0
 8015b8a:	6078      	str	r0, [r7, #4]
 8015b8c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015b8e:	683b      	ldr	r3, [r7, #0]
 8015b90:	60bb      	str	r3, [r7, #8]
 8015b92:	2304      	movs	r3, #4
 8015b94:	60fb      	str	r3, [r7, #12]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015b96:	f107 0308 	add.w	r3, r7, #8
 8015b9a:	2100      	movs	r1, #0
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f7f2 faba 	bl	8008116 <osMessageCreate>
 8015ba2:	4602      	mov	r2, r0
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d102      	bne.n	8015bb6 <sys_mbox_new+0x32>
    return ERR_MEM;
 8015bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015bb4:	e000      	b.n	8015bb8 <sys_mbox_new+0x34>

  return ERR_OK;
 8015bb6:	2300      	movs	r3, #0
}
 8015bb8:	4618      	mov	r0, r3
 8015bba:	3710      	adds	r7, #16
 8015bbc:	46bd      	mov	sp, r7
 8015bbe:	bd80      	pop	{r7, pc}

08015bc0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b082      	sub	sp, #8
 8015bc4:	af00      	add	r7, sp, #0
 8015bc6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f7f2 fb80 	bl	80082d2 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f7f2 fb91 	bl	80082fe <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8015bdc:	bf00      	nop
 8015bde:	3708      	adds	r7, #8
 8015be0:	46bd      	mov	sp, r7
 8015be2:	bd80      	pop	{r7, pc}

08015be4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b084      	sub	sp, #16
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6078      	str	r0, [r7, #4]
 8015bec:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	6839      	ldr	r1, [r7, #0]
 8015bf4:	2200      	movs	r2, #0
 8015bf6:	4618      	mov	r0, r3
 8015bf8:	f7f2 faa0 	bl	800813c <osMessagePut>
 8015bfc:	4603      	mov	r3, r0
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d102      	bne.n	8015c08 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015c02:	2300      	movs	r3, #0
 8015c04:	73fb      	strb	r3, [r7, #15]
 8015c06:	e001      	b.n	8015c0c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015c08:	23ff      	movs	r3, #255	; 0xff
 8015c0a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015c0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015c10:	4618      	mov	r0, r3
 8015c12:	3710      	adds	r7, #16
 8015c14:	46bd      	mov	sp, r7
 8015c16:	bd80      	pop	{r7, pc}

08015c18 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b08c      	sub	sp, #48	; 0x30
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	61f8      	str	r0, [r7, #28]
 8015c20:	61b9      	str	r1, [r7, #24]
 8015c22:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015c24:	f7f2 f8d5 	bl	8007dd2 <osKernelSysTick>
 8015c28:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015c2a:	697b      	ldr	r3, [r7, #20]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d017      	beq.n	8015c60 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015c30:	69fb      	ldr	r3, [r7, #28]
 8015c32:	6819      	ldr	r1, [r3, #0]
 8015c34:	f107 0320 	add.w	r3, r7, #32
 8015c38:	697a      	ldr	r2, [r7, #20]
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	f7f2 fabe 	bl	80081bc <osMessageGet>

    if(event.status == osEventMessage)
 8015c40:	6a3b      	ldr	r3, [r7, #32]
 8015c42:	2b10      	cmp	r3, #16
 8015c44:	d109      	bne.n	8015c5a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c48:	461a      	mov	r2, r3
 8015c4a:	69bb      	ldr	r3, [r7, #24]
 8015c4c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015c4e:	f7f2 f8c0 	bl	8007dd2 <osKernelSysTick>
 8015c52:	4602      	mov	r2, r0
 8015c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c56:	1ad3      	subs	r3, r2, r3
 8015c58:	e019      	b.n	8015c8e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015c5e:	e016      	b.n	8015c8e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015c60:	69fb      	ldr	r3, [r7, #28]
 8015c62:	6819      	ldr	r1, [r3, #0]
 8015c64:	463b      	mov	r3, r7
 8015c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	f7f2 faa6 	bl	80081bc <osMessageGet>
 8015c70:	f107 0320 	add.w	r3, r7, #32
 8015c74:	463a      	mov	r2, r7
 8015c76:	ca07      	ldmia	r2, {r0, r1, r2}
 8015c78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7e:	461a      	mov	r2, r3
 8015c80:	69bb      	ldr	r3, [r7, #24]
 8015c82:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015c84:	f7f2 f8a5 	bl	8007dd2 <osKernelSysTick>
 8015c88:	4602      	mov	r2, r0
 8015c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c8c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015c8e:	4618      	mov	r0, r3
 8015c90:	3730      	adds	r7, #48	; 0x30
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bd80      	pop	{r7, pc}

08015c96 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8015c96:	b580      	push	{r7, lr}
 8015c98:	b086      	sub	sp, #24
 8015c9a:	af00      	add	r7, sp, #0
 8015c9c:	6078      	str	r0, [r7, #4]
 8015c9e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	6819      	ldr	r1, [r3, #0]
 8015ca4:	f107 030c 	add.w	r3, r7, #12
 8015ca8:	2200      	movs	r2, #0
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7f2 fa86 	bl	80081bc <osMessageGet>

  if(event.status == osEventMessage)
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	2b10      	cmp	r3, #16
 8015cb4:	d105      	bne.n	8015cc2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8015cb6:	693b      	ldr	r3, [r7, #16]
 8015cb8:	461a      	mov	r2, r3
 8015cba:	683b      	ldr	r3, [r7, #0]
 8015cbc:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	e001      	b.n	8015cc6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8015cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	3718      	adds	r7, #24
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	bd80      	pop	{r7, pc}

08015cce <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015cce:	b480      	push	{r7}
 8015cd0:	b083      	sub	sp, #12
 8015cd2:	af00      	add	r7, sp, #0
 8015cd4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d101      	bne.n	8015ce2 <sys_mbox_valid+0x14>
    return 0;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	e000      	b.n	8015ce4 <sys_mbox_valid+0x16>
  else
    return 1;
 8015ce2:	2301      	movs	r3, #1
}
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	370c      	adds	r7, #12
 8015ce8:	46bd      	mov	sp, r7
 8015cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cee:	4770      	bx	lr

08015cf0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8015cf0:	b480      	push	{r7}
 8015cf2:	b083      	sub	sp, #12
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	601a      	str	r2, [r3, #0]
}
 8015cfe:	bf00      	nop
 8015d00:	370c      	adds	r7, #12
 8015d02:	46bd      	mov	sp, r7
 8015d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d08:	4770      	bx	lr

08015d0a <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015d0a:	b580      	push	{r7, lr}
 8015d0c:	b084      	sub	sp, #16
 8015d0e:	af00      	add	r7, sp, #0
 8015d10:	6078      	str	r0, [r7, #4]
 8015d12:	460b      	mov	r3, r1
 8015d14:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8015d16:	2300      	movs	r3, #0
 8015d18:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8015d1a:	f107 030c 	add.w	r3, r7, #12
 8015d1e:	2101      	movs	r1, #1
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7f2 f93d 	bl	8007fa0 <osSemaphoreCreate>
 8015d26:	4602      	mov	r2, r0
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d102      	bne.n	8015d3a <sys_sem_new+0x30>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d38:	e009      	b.n	8015d4e <sys_sem_new+0x44>
  }

  if(count == 0)	// Means it can't be taken
 8015d3a:	78fb      	ldrb	r3, [r7, #3]
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d105      	bne.n	8015d4c <sys_sem_new+0x42>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	2100      	movs	r1, #0
 8015d46:	4618      	mov	r0, r3
 8015d48:	f7f2 f94e 	bl	8007fe8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015d4c:	2300      	movs	r3, #0
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	3710      	adds	r7, #16
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd80      	pop	{r7, pc}

08015d56 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015d56:	b580      	push	{r7, lr}
 8015d58:	b084      	sub	sp, #16
 8015d5a:	af00      	add	r7, sp, #0
 8015d5c:	6078      	str	r0, [r7, #4]
 8015d5e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8015d60:	f7f2 f837 	bl	8007dd2 <osKernelSysTick>
 8015d64:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015d66:	683b      	ldr	r3, [r7, #0]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d011      	beq.n	8015d90 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	6839      	ldr	r1, [r7, #0]
 8015d72:	4618      	mov	r0, r3
 8015d74:	f7f2 f938 	bl	8007fe8 <osSemaphoreWait>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d105      	bne.n	8015d8a <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8015d7e:	f7f2 f828 	bl	8007dd2 <osKernelSysTick>
 8015d82:	4602      	mov	r2, r0
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	1ad3      	subs	r3, r2, r3
 8015d88:	e012      	b.n	8015db0 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015d8e:	e00f      	b.n	8015db0 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8015d90:	bf00      	nop
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015d9a:	4618      	mov	r0, r3
 8015d9c:	f7f2 f924 	bl	8007fe8 <osSemaphoreWait>
 8015da0:	4603      	mov	r3, r0
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d1f5      	bne.n	8015d92 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8015da6:	f7f2 f814 	bl	8007dd2 <osKernelSysTick>
 8015daa:	4602      	mov	r2, r0
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015db0:	4618      	mov	r0, r3
 8015db2:	3710      	adds	r7, #16
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd80      	pop	{r7, pc}

08015db8 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b082      	sub	sp, #8
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	f7f2 f95d 	bl	8008084 <osSemaphoreRelease>
}
 8015dca:	bf00      	nop
 8015dcc:	3708      	adds	r7, #8
 8015dce:	46bd      	mov	sp, r7
 8015dd0:	bd80      	pop	{r7, pc}

08015dd2 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8015dd2:	b580      	push	{r7, lr}
 8015dd4:	b082      	sub	sp, #8
 8015dd6:	af00      	add	r7, sp, #0
 8015dd8:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7f2 f986 	bl	80080f0 <osSemaphoreDelete>
}
 8015de4:	bf00      	nop
 8015de6:	3708      	adds	r7, #8
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}

08015dec <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8015dec:	b480      	push	{r7}
 8015dee:	b083      	sub	sp, #12
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	681b      	ldr	r3, [r3, #0]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d101      	bne.n	8015e00 <sys_sem_valid+0x14>
    return 0;
 8015dfc:	2300      	movs	r3, #0
 8015dfe:	e000      	b.n	8015e02 <sys_sem_valid+0x16>
  else
    return 1;
 8015e00:	2301      	movs	r3, #1
}
 8015e02:	4618      	mov	r0, r3
 8015e04:	370c      	adds	r7, #12
 8015e06:	46bd      	mov	sp, r7
 8015e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e0c:	4770      	bx	lr

08015e0e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8015e0e:	b480      	push	{r7}
 8015e10:	b083      	sub	sp, #12
 8015e12:	af00      	add	r7, sp, #0
 8015e14:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	2200      	movs	r2, #0
 8015e1a:	601a      	str	r2, [r3, #0]
}
 8015e1c:	bf00      	nop
 8015e1e:	370c      	adds	r7, #12
 8015e20:	46bd      	mov	sp, r7
 8015e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e26:	4770      	bx	lr

08015e28 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015e2c:	4803      	ldr	r0, [pc, #12]	; (8015e3c <sys_init+0x14>)
 8015e2e:	f7f2 f827 	bl	8007e80 <osMutexCreate>
 8015e32:	4603      	mov	r3, r0
 8015e34:	4a02      	ldr	r2, [pc, #8]	; (8015e40 <sys_init+0x18>)
 8015e36:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015e38:	bf00      	nop
 8015e3a:	bd80      	pop	{r7, pc}
 8015e3c:	0801b9c0 	.word	0x0801b9c0
 8015e40:	2400a7a4 	.word	0x2400a7a4

08015e44 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015e44:	b580      	push	{r7, lr}
 8015e46:	b084      	sub	sp, #16
 8015e48:	af00      	add	r7, sp, #0
 8015e4a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015e50:	f107 030c 	add.w	r3, r7, #12
 8015e54:	4618      	mov	r0, r3
 8015e56:	f7f2 f813 	bl	8007e80 <osMutexCreate>
 8015e5a:	4602      	mov	r2, r0
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	681b      	ldr	r3, [r3, #0]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d102      	bne.n	8015e6e <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015e68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e6c:	e000      	b.n	8015e70 <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015e6e:	2300      	movs	r3, #0
}
 8015e70:	4618      	mov	r0, r3
 8015e72:	3710      	adds	r7, #16
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}

08015e78 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b082      	sub	sp, #8
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f7f2 f805 	bl	8007e98 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015e8e:	bf00      	nop
 8015e90:	3708      	adds	r7, #8
 8015e92:	46bd      	mov	sp, r7
 8015e94:	bd80      	pop	{r7, pc}

08015e96 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015e96:	b580      	push	{r7, lr}
 8015e98:	b082      	sub	sp, #8
 8015e9a:	af00      	add	r7, sp, #0
 8015e9c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	f7f2 f846 	bl	8007f34 <osMutexRelease>
}
 8015ea8:	bf00      	nop
 8015eaa:	3708      	adds	r7, #8
 8015eac:	46bd      	mov	sp, r7
 8015eae:	bd80      	pop	{r7, pc}

08015eb0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b08a      	sub	sp, #40	; 0x28
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	60f8      	str	r0, [r7, #12]
 8015eb8:	60b9      	str	r1, [r7, #8]
 8015eba:	607a      	str	r2, [r7, #4]
 8015ebc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	617b      	str	r3, [r7, #20]
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	61bb      	str	r3, [r7, #24]
 8015ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ec8:	b21b      	sxth	r3, r3
 8015eca:	83bb      	strh	r3, [r7, #28]
 8015ecc:	2300      	movs	r3, #0
 8015ece:	623b      	str	r3, [r7, #32]
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015ed4:	f107 0314 	add.w	r3, r7, #20
 8015ed8:	6879      	ldr	r1, [r7, #4]
 8015eda:	4618      	mov	r0, r3
 8015edc:	f7f1 ff89 	bl	8007df2 <osThreadCreate>
 8015ee0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015ee2:	4618      	mov	r0, r3
 8015ee4:	3728      	adds	r7, #40	; 0x28
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	bd80      	pop	{r7, pc}
	...

08015eec <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015eec:	b580      	push	{r7, lr}
 8015eee:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015ef0:	4b04      	ldr	r3, [pc, #16]	; (8015f04 <sys_arch_protect+0x18>)
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7f1 ffcd 	bl	8007e98 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015efe:	2301      	movs	r3, #1
}
 8015f00:	4618      	mov	r0, r3
 8015f02:	bd80      	pop	{r7, pc}
 8015f04:	2400a7a4 	.word	0x2400a7a4

08015f08 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015f10:	4b04      	ldr	r3, [pc, #16]	; (8015f24 <sys_arch_unprotect+0x1c>)
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	4618      	mov	r0, r3
 8015f16:	f7f2 f80d 	bl	8007f34 <osMutexRelease>
}
 8015f1a:	bf00      	nop
 8015f1c:	3708      	adds	r7, #8
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	bd80      	pop	{r7, pc}
 8015f22:	bf00      	nop
 8015f24:	2400a7a4 	.word	0x2400a7a4

08015f28 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 8015f28:	b580      	push	{r7, lr}
 8015f2a:	b084      	sub	sp, #16
 8015f2c:	af00      	add	r7, sp, #0
 8015f2e:	6078      	str	r0, [r7, #4]
 8015f30:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d002      	beq.n	8015f3e <fs_open+0x16>
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d102      	bne.n	8015f44 <fs_open+0x1c>
    return ERR_ARG;
 8015f3e:	f06f 030f 	mvn.w	r3, #15
 8015f42:	e028      	b.n	8015f96 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8015f44:	4b16      	ldr	r3, [pc, #88]	; (8015fa0 <fs_open+0x78>)
 8015f46:	60fb      	str	r3, [r7, #12]
 8015f48:	e020      	b.n	8015f8c <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	4619      	mov	r1, r3
 8015f50:	6838      	ldr	r0, [r7, #0]
 8015f52:	f7ea f9c5 	bl	80002e0 <strcmp>
 8015f56:	4603      	mov	r3, r0
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d114      	bne.n	8015f86 <fs_open+0x5e>
      file->data = (const char *)f->data;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	689a      	ldr	r2, [r3, #8]
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	68da      	ldr	r2, [r3, #12]
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 8015f6c:	68fb      	ldr	r3, [r7, #12]
 8015f6e:	68da      	ldr	r2, [r3, #12]
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	2200      	movs	r2, #0
 8015f78:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 8015f7a:	68fb      	ldr	r3, [r7, #12]
 8015f7c:	7c1a      	ldrb	r2, [r3, #16]
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 8015f82:	2300      	movs	r3, #0
 8015f84:	e007      	b.n	8015f96 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	60fb      	str	r3, [r7, #12]
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	2b00      	cmp	r3, #0
 8015f90:	d1db      	bne.n	8015f4a <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 8015f92:	f06f 0305 	mvn.w	r3, #5
}
 8015f96:	4618      	mov	r0, r3
 8015f98:	3710      	adds	r7, #16
 8015f9a:	46bd      	mov	sp, r7
 8015f9c:	bd80      	pop	{r7, pc}
 8015f9e:	bf00      	nop
 8015fa0:	0802ba00 	.word	0x0802ba00

08015fa4 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 8015fa4:	b480      	push	{r7}
 8015fa6:	b083      	sub	sp, #12
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8015fac:	bf00      	nop
 8015fae:	370c      	adds	r7, #12
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb6:	4770      	bx	lr

08015fb8 <__libc_init_array>:
 8015fb8:	b570      	push	{r4, r5, r6, lr}
 8015fba:	4d0d      	ldr	r5, [pc, #52]	; (8015ff0 <__libc_init_array+0x38>)
 8015fbc:	4c0d      	ldr	r4, [pc, #52]	; (8015ff4 <__libc_init_array+0x3c>)
 8015fbe:	1b64      	subs	r4, r4, r5
 8015fc0:	10a4      	asrs	r4, r4, #2
 8015fc2:	2600      	movs	r6, #0
 8015fc4:	42a6      	cmp	r6, r4
 8015fc6:	d109      	bne.n	8015fdc <__libc_init_array+0x24>
 8015fc8:	4d0b      	ldr	r5, [pc, #44]	; (8015ff8 <__libc_init_array+0x40>)
 8015fca:	4c0c      	ldr	r4, [pc, #48]	; (8015ffc <__libc_init_array+0x44>)
 8015fcc:	f001 fa94 	bl	80174f8 <_init>
 8015fd0:	1b64      	subs	r4, r4, r5
 8015fd2:	10a4      	asrs	r4, r4, #2
 8015fd4:	2600      	movs	r6, #0
 8015fd6:	42a6      	cmp	r6, r4
 8015fd8:	d105      	bne.n	8015fe6 <__libc_init_array+0x2e>
 8015fda:	bd70      	pop	{r4, r5, r6, pc}
 8015fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015fe0:	4798      	blx	r3
 8015fe2:	3601      	adds	r6, #1
 8015fe4:	e7ee      	b.n	8015fc4 <__libc_init_array+0xc>
 8015fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8015fea:	4798      	blx	r3
 8015fec:	3601      	adds	r6, #1
 8015fee:	e7f2      	b.n	8015fd6 <__libc_init_array+0x1e>
 8015ff0:	0802bb60 	.word	0x0802bb60
 8015ff4:	0802bb60 	.word	0x0802bb60
 8015ff8:	0802bb60 	.word	0x0802bb60
 8015ffc:	0802bb64 	.word	0x0802bb64

08016000 <memcmp>:
 8016000:	b530      	push	{r4, r5, lr}
 8016002:	3901      	subs	r1, #1
 8016004:	2400      	movs	r4, #0
 8016006:	42a2      	cmp	r2, r4
 8016008:	d101      	bne.n	801600e <memcmp+0xe>
 801600a:	2000      	movs	r0, #0
 801600c:	e005      	b.n	801601a <memcmp+0x1a>
 801600e:	5d03      	ldrb	r3, [r0, r4]
 8016010:	3401      	adds	r4, #1
 8016012:	5d0d      	ldrb	r5, [r1, r4]
 8016014:	42ab      	cmp	r3, r5
 8016016:	d0f6      	beq.n	8016006 <memcmp+0x6>
 8016018:	1b58      	subs	r0, r3, r5
 801601a:	bd30      	pop	{r4, r5, pc}

0801601c <memcpy>:
 801601c:	440a      	add	r2, r1
 801601e:	4291      	cmp	r1, r2
 8016020:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8016024:	d100      	bne.n	8016028 <memcpy+0xc>
 8016026:	4770      	bx	lr
 8016028:	b510      	push	{r4, lr}
 801602a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801602e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016032:	4291      	cmp	r1, r2
 8016034:	d1f9      	bne.n	801602a <memcpy+0xe>
 8016036:	bd10      	pop	{r4, pc}

08016038 <memmove>:
 8016038:	4288      	cmp	r0, r1
 801603a:	b510      	push	{r4, lr}
 801603c:	eb01 0402 	add.w	r4, r1, r2
 8016040:	d902      	bls.n	8016048 <memmove+0x10>
 8016042:	4284      	cmp	r4, r0
 8016044:	4623      	mov	r3, r4
 8016046:	d807      	bhi.n	8016058 <memmove+0x20>
 8016048:	1e43      	subs	r3, r0, #1
 801604a:	42a1      	cmp	r1, r4
 801604c:	d008      	beq.n	8016060 <memmove+0x28>
 801604e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016056:	e7f8      	b.n	801604a <memmove+0x12>
 8016058:	4402      	add	r2, r0
 801605a:	4601      	mov	r1, r0
 801605c:	428a      	cmp	r2, r1
 801605e:	d100      	bne.n	8016062 <memmove+0x2a>
 8016060:	bd10      	pop	{r4, pc}
 8016062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801606a:	e7f7      	b.n	801605c <memmove+0x24>

0801606c <memset>:
 801606c:	4402      	add	r2, r0
 801606e:	4603      	mov	r3, r0
 8016070:	4293      	cmp	r3, r2
 8016072:	d100      	bne.n	8016076 <memset+0xa>
 8016074:	4770      	bx	lr
 8016076:	f803 1b01 	strb.w	r1, [r3], #1
 801607a:	e7f9      	b.n	8016070 <memset+0x4>

0801607c <iprintf>:
 801607c:	b40f      	push	{r0, r1, r2, r3}
 801607e:	4b0a      	ldr	r3, [pc, #40]	; (80160a8 <iprintf+0x2c>)
 8016080:	b513      	push	{r0, r1, r4, lr}
 8016082:	681c      	ldr	r4, [r3, #0]
 8016084:	b124      	cbz	r4, 8016090 <iprintf+0x14>
 8016086:	69a3      	ldr	r3, [r4, #24]
 8016088:	b913      	cbnz	r3, 8016090 <iprintf+0x14>
 801608a:	4620      	mov	r0, r4
 801608c:	f000 f90e 	bl	80162ac <__sinit>
 8016090:	ab05      	add	r3, sp, #20
 8016092:	9a04      	ldr	r2, [sp, #16]
 8016094:	68a1      	ldr	r1, [r4, #8]
 8016096:	9301      	str	r3, [sp, #4]
 8016098:	4620      	mov	r0, r4
 801609a:	f000 fbf1 	bl	8016880 <_vfiprintf_r>
 801609e:	b002      	add	sp, #8
 80160a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80160a4:	b004      	add	sp, #16
 80160a6:	4770      	bx	lr
 80160a8:	24000050 	.word	0x24000050

080160ac <rand>:
 80160ac:	4b17      	ldr	r3, [pc, #92]	; (801610c <rand+0x60>)
 80160ae:	b510      	push	{r4, lr}
 80160b0:	681c      	ldr	r4, [r3, #0]
 80160b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80160b4:	b9b3      	cbnz	r3, 80160e4 <rand+0x38>
 80160b6:	2018      	movs	r0, #24
 80160b8:	f000 f9aa 	bl	8016410 <malloc>
 80160bc:	63a0      	str	r0, [r4, #56]	; 0x38
 80160be:	b928      	cbnz	r0, 80160cc <rand+0x20>
 80160c0:	4602      	mov	r2, r0
 80160c2:	4b13      	ldr	r3, [pc, #76]	; (8016110 <rand+0x64>)
 80160c4:	4813      	ldr	r0, [pc, #76]	; (8016114 <rand+0x68>)
 80160c6:	214e      	movs	r1, #78	; 0x4e
 80160c8:	f000 f87a 	bl	80161c0 <__assert_func>
 80160cc:	4a12      	ldr	r2, [pc, #72]	; (8016118 <rand+0x6c>)
 80160ce:	4b13      	ldr	r3, [pc, #76]	; (801611c <rand+0x70>)
 80160d0:	e9c0 2300 	strd	r2, r3, [r0]
 80160d4:	4b12      	ldr	r3, [pc, #72]	; (8016120 <rand+0x74>)
 80160d6:	6083      	str	r3, [r0, #8]
 80160d8:	230b      	movs	r3, #11
 80160da:	8183      	strh	r3, [r0, #12]
 80160dc:	2201      	movs	r2, #1
 80160de:	2300      	movs	r3, #0
 80160e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80160e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80160e6:	480f      	ldr	r0, [pc, #60]	; (8016124 <rand+0x78>)
 80160e8:	690a      	ldr	r2, [r1, #16]
 80160ea:	694b      	ldr	r3, [r1, #20]
 80160ec:	4c0e      	ldr	r4, [pc, #56]	; (8016128 <rand+0x7c>)
 80160ee:	4350      	muls	r0, r2
 80160f0:	fb04 0003 	mla	r0, r4, r3, r0
 80160f4:	fba2 3404 	umull	r3, r4, r2, r4
 80160f8:	1c5a      	adds	r2, r3, #1
 80160fa:	4404      	add	r4, r0
 80160fc:	f144 0000 	adc.w	r0, r4, #0
 8016100:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016104:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016108:	bd10      	pop	{r4, pc}
 801610a:	bf00      	nop
 801610c:	24000050 	.word	0x24000050
 8016110:	0802ba18 	.word	0x0802ba18
 8016114:	0802ba2f 	.word	0x0802ba2f
 8016118:	abcd330e 	.word	0xabcd330e
 801611c:	e66d1234 	.word	0xe66d1234
 8016120:	0005deec 	.word	0x0005deec
 8016124:	5851f42d 	.word	0x5851f42d
 8016128:	4c957f2d 	.word	0x4c957f2d

0801612c <siprintf>:
 801612c:	b40e      	push	{r1, r2, r3}
 801612e:	b500      	push	{lr}
 8016130:	b09c      	sub	sp, #112	; 0x70
 8016132:	ab1d      	add	r3, sp, #116	; 0x74
 8016134:	9002      	str	r0, [sp, #8]
 8016136:	9006      	str	r0, [sp, #24]
 8016138:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801613c:	4809      	ldr	r0, [pc, #36]	; (8016164 <siprintf+0x38>)
 801613e:	9107      	str	r1, [sp, #28]
 8016140:	9104      	str	r1, [sp, #16]
 8016142:	4909      	ldr	r1, [pc, #36]	; (8016168 <siprintf+0x3c>)
 8016144:	f853 2b04 	ldr.w	r2, [r3], #4
 8016148:	9105      	str	r1, [sp, #20]
 801614a:	6800      	ldr	r0, [r0, #0]
 801614c:	9301      	str	r3, [sp, #4]
 801614e:	a902      	add	r1, sp, #8
 8016150:	f000 fa6c 	bl	801662c <_svfiprintf_r>
 8016154:	9b02      	ldr	r3, [sp, #8]
 8016156:	2200      	movs	r2, #0
 8016158:	701a      	strb	r2, [r3, #0]
 801615a:	b01c      	add	sp, #112	; 0x70
 801615c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016160:	b003      	add	sp, #12
 8016162:	4770      	bx	lr
 8016164:	24000050 	.word	0x24000050
 8016168:	ffff0208 	.word	0xffff0208

0801616c <strcat>:
 801616c:	b510      	push	{r4, lr}
 801616e:	4602      	mov	r2, r0
 8016170:	7814      	ldrb	r4, [r2, #0]
 8016172:	4613      	mov	r3, r2
 8016174:	3201      	adds	r2, #1
 8016176:	2c00      	cmp	r4, #0
 8016178:	d1fa      	bne.n	8016170 <strcat+0x4>
 801617a:	3b01      	subs	r3, #1
 801617c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016180:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016184:	2a00      	cmp	r2, #0
 8016186:	d1f9      	bne.n	801617c <strcat+0x10>
 8016188:	bd10      	pop	{r4, pc}

0801618a <strcpy>:
 801618a:	4603      	mov	r3, r0
 801618c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016190:	f803 2b01 	strb.w	r2, [r3], #1
 8016194:	2a00      	cmp	r2, #0
 8016196:	d1f9      	bne.n	801618c <strcpy+0x2>
 8016198:	4770      	bx	lr

0801619a <strncmp>:
 801619a:	b510      	push	{r4, lr}
 801619c:	b16a      	cbz	r2, 80161ba <strncmp+0x20>
 801619e:	3901      	subs	r1, #1
 80161a0:	1884      	adds	r4, r0, r2
 80161a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80161a6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80161aa:	4293      	cmp	r3, r2
 80161ac:	d103      	bne.n	80161b6 <strncmp+0x1c>
 80161ae:	42a0      	cmp	r0, r4
 80161b0:	d001      	beq.n	80161b6 <strncmp+0x1c>
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d1f5      	bne.n	80161a2 <strncmp+0x8>
 80161b6:	1a98      	subs	r0, r3, r2
 80161b8:	bd10      	pop	{r4, pc}
 80161ba:	4610      	mov	r0, r2
 80161bc:	e7fc      	b.n	80161b8 <strncmp+0x1e>
	...

080161c0 <__assert_func>:
 80161c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80161c2:	4614      	mov	r4, r2
 80161c4:	461a      	mov	r2, r3
 80161c6:	4b09      	ldr	r3, [pc, #36]	; (80161ec <__assert_func+0x2c>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	4605      	mov	r5, r0
 80161cc:	68d8      	ldr	r0, [r3, #12]
 80161ce:	b14c      	cbz	r4, 80161e4 <__assert_func+0x24>
 80161d0:	4b07      	ldr	r3, [pc, #28]	; (80161f0 <__assert_func+0x30>)
 80161d2:	9100      	str	r1, [sp, #0]
 80161d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80161d8:	4906      	ldr	r1, [pc, #24]	; (80161f4 <__assert_func+0x34>)
 80161da:	462b      	mov	r3, r5
 80161dc:	f000 f8e4 	bl	80163a8 <fiprintf>
 80161e0:	f000 ff38 	bl	8017054 <abort>
 80161e4:	4b04      	ldr	r3, [pc, #16]	; (80161f8 <__assert_func+0x38>)
 80161e6:	461c      	mov	r4, r3
 80161e8:	e7f3      	b.n	80161d2 <__assert_func+0x12>
 80161ea:	bf00      	nop
 80161ec:	24000050 	.word	0x24000050
 80161f0:	0802ba8e 	.word	0x0802ba8e
 80161f4:	0802ba9b 	.word	0x0802ba9b
 80161f8:	0802bac9 	.word	0x0802bac9

080161fc <std>:
 80161fc:	2300      	movs	r3, #0
 80161fe:	b510      	push	{r4, lr}
 8016200:	4604      	mov	r4, r0
 8016202:	e9c0 3300 	strd	r3, r3, [r0]
 8016206:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801620a:	6083      	str	r3, [r0, #8]
 801620c:	8181      	strh	r1, [r0, #12]
 801620e:	6643      	str	r3, [r0, #100]	; 0x64
 8016210:	81c2      	strh	r2, [r0, #14]
 8016212:	6183      	str	r3, [r0, #24]
 8016214:	4619      	mov	r1, r3
 8016216:	2208      	movs	r2, #8
 8016218:	305c      	adds	r0, #92	; 0x5c
 801621a:	f7ff ff27 	bl	801606c <memset>
 801621e:	4b05      	ldr	r3, [pc, #20]	; (8016234 <std+0x38>)
 8016220:	6263      	str	r3, [r4, #36]	; 0x24
 8016222:	4b05      	ldr	r3, [pc, #20]	; (8016238 <std+0x3c>)
 8016224:	62a3      	str	r3, [r4, #40]	; 0x28
 8016226:	4b05      	ldr	r3, [pc, #20]	; (801623c <std+0x40>)
 8016228:	62e3      	str	r3, [r4, #44]	; 0x2c
 801622a:	4b05      	ldr	r3, [pc, #20]	; (8016240 <std+0x44>)
 801622c:	6224      	str	r4, [r4, #32]
 801622e:	6323      	str	r3, [r4, #48]	; 0x30
 8016230:	bd10      	pop	{r4, pc}
 8016232:	bf00      	nop
 8016234:	08016e29 	.word	0x08016e29
 8016238:	08016e4b 	.word	0x08016e4b
 801623c:	08016e83 	.word	0x08016e83
 8016240:	08016ea7 	.word	0x08016ea7

08016244 <_cleanup_r>:
 8016244:	4901      	ldr	r1, [pc, #4]	; (801624c <_cleanup_r+0x8>)
 8016246:	f000 b8c1 	b.w	80163cc <_fwalk_reent>
 801624a:	bf00      	nop
 801624c:	08017191 	.word	0x08017191

08016250 <__sfmoreglue>:
 8016250:	b570      	push	{r4, r5, r6, lr}
 8016252:	1e4a      	subs	r2, r1, #1
 8016254:	2568      	movs	r5, #104	; 0x68
 8016256:	4355      	muls	r5, r2
 8016258:	460e      	mov	r6, r1
 801625a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801625e:	f000 f92f 	bl	80164c0 <_malloc_r>
 8016262:	4604      	mov	r4, r0
 8016264:	b140      	cbz	r0, 8016278 <__sfmoreglue+0x28>
 8016266:	2100      	movs	r1, #0
 8016268:	e9c0 1600 	strd	r1, r6, [r0]
 801626c:	300c      	adds	r0, #12
 801626e:	60a0      	str	r0, [r4, #8]
 8016270:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016274:	f7ff fefa 	bl	801606c <memset>
 8016278:	4620      	mov	r0, r4
 801627a:	bd70      	pop	{r4, r5, r6, pc}

0801627c <__sfp_lock_acquire>:
 801627c:	4801      	ldr	r0, [pc, #4]	; (8016284 <__sfp_lock_acquire+0x8>)
 801627e:	f000 b8c5 	b.w	801640c <__retarget_lock_acquire_recursive>
 8016282:	bf00      	nop
 8016284:	2400a7b0 	.word	0x2400a7b0

08016288 <__sfp_lock_release>:
 8016288:	4801      	ldr	r0, [pc, #4]	; (8016290 <__sfp_lock_release+0x8>)
 801628a:	f000 b8c0 	b.w	801640e <__retarget_lock_release_recursive>
 801628e:	bf00      	nop
 8016290:	2400a7b0 	.word	0x2400a7b0

08016294 <__sinit_lock_acquire>:
 8016294:	4801      	ldr	r0, [pc, #4]	; (801629c <__sinit_lock_acquire+0x8>)
 8016296:	f000 b8b9 	b.w	801640c <__retarget_lock_acquire_recursive>
 801629a:	bf00      	nop
 801629c:	2400a7ab 	.word	0x2400a7ab

080162a0 <__sinit_lock_release>:
 80162a0:	4801      	ldr	r0, [pc, #4]	; (80162a8 <__sinit_lock_release+0x8>)
 80162a2:	f000 b8b4 	b.w	801640e <__retarget_lock_release_recursive>
 80162a6:	bf00      	nop
 80162a8:	2400a7ab 	.word	0x2400a7ab

080162ac <__sinit>:
 80162ac:	b510      	push	{r4, lr}
 80162ae:	4604      	mov	r4, r0
 80162b0:	f7ff fff0 	bl	8016294 <__sinit_lock_acquire>
 80162b4:	69a3      	ldr	r3, [r4, #24]
 80162b6:	b11b      	cbz	r3, 80162c0 <__sinit+0x14>
 80162b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162bc:	f7ff bff0 	b.w	80162a0 <__sinit_lock_release>
 80162c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80162c4:	6523      	str	r3, [r4, #80]	; 0x50
 80162c6:	4b13      	ldr	r3, [pc, #76]	; (8016314 <__sinit+0x68>)
 80162c8:	4a13      	ldr	r2, [pc, #76]	; (8016318 <__sinit+0x6c>)
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80162ce:	42a3      	cmp	r3, r4
 80162d0:	bf04      	itt	eq
 80162d2:	2301      	moveq	r3, #1
 80162d4:	61a3      	streq	r3, [r4, #24]
 80162d6:	4620      	mov	r0, r4
 80162d8:	f000 f820 	bl	801631c <__sfp>
 80162dc:	6060      	str	r0, [r4, #4]
 80162de:	4620      	mov	r0, r4
 80162e0:	f000 f81c 	bl	801631c <__sfp>
 80162e4:	60a0      	str	r0, [r4, #8]
 80162e6:	4620      	mov	r0, r4
 80162e8:	f000 f818 	bl	801631c <__sfp>
 80162ec:	2200      	movs	r2, #0
 80162ee:	60e0      	str	r0, [r4, #12]
 80162f0:	2104      	movs	r1, #4
 80162f2:	6860      	ldr	r0, [r4, #4]
 80162f4:	f7ff ff82 	bl	80161fc <std>
 80162f8:	68a0      	ldr	r0, [r4, #8]
 80162fa:	2201      	movs	r2, #1
 80162fc:	2109      	movs	r1, #9
 80162fe:	f7ff ff7d 	bl	80161fc <std>
 8016302:	68e0      	ldr	r0, [r4, #12]
 8016304:	2202      	movs	r2, #2
 8016306:	2112      	movs	r1, #18
 8016308:	f7ff ff78 	bl	80161fc <std>
 801630c:	2301      	movs	r3, #1
 801630e:	61a3      	str	r3, [r4, #24]
 8016310:	e7d2      	b.n	80162b8 <__sinit+0xc>
 8016312:	bf00      	nop
 8016314:	0802ba14 	.word	0x0802ba14
 8016318:	08016245 	.word	0x08016245

0801631c <__sfp>:
 801631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801631e:	4607      	mov	r7, r0
 8016320:	f7ff ffac 	bl	801627c <__sfp_lock_acquire>
 8016324:	4b1e      	ldr	r3, [pc, #120]	; (80163a0 <__sfp+0x84>)
 8016326:	681e      	ldr	r6, [r3, #0]
 8016328:	69b3      	ldr	r3, [r6, #24]
 801632a:	b913      	cbnz	r3, 8016332 <__sfp+0x16>
 801632c:	4630      	mov	r0, r6
 801632e:	f7ff ffbd 	bl	80162ac <__sinit>
 8016332:	3648      	adds	r6, #72	; 0x48
 8016334:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016338:	3b01      	subs	r3, #1
 801633a:	d503      	bpl.n	8016344 <__sfp+0x28>
 801633c:	6833      	ldr	r3, [r6, #0]
 801633e:	b30b      	cbz	r3, 8016384 <__sfp+0x68>
 8016340:	6836      	ldr	r6, [r6, #0]
 8016342:	e7f7      	b.n	8016334 <__sfp+0x18>
 8016344:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016348:	b9d5      	cbnz	r5, 8016380 <__sfp+0x64>
 801634a:	4b16      	ldr	r3, [pc, #88]	; (80163a4 <__sfp+0x88>)
 801634c:	60e3      	str	r3, [r4, #12]
 801634e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016352:	6665      	str	r5, [r4, #100]	; 0x64
 8016354:	f000 f859 	bl	801640a <__retarget_lock_init_recursive>
 8016358:	f7ff ff96 	bl	8016288 <__sfp_lock_release>
 801635c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016360:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016364:	6025      	str	r5, [r4, #0]
 8016366:	61a5      	str	r5, [r4, #24]
 8016368:	2208      	movs	r2, #8
 801636a:	4629      	mov	r1, r5
 801636c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016370:	f7ff fe7c 	bl	801606c <memset>
 8016374:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016378:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801637c:	4620      	mov	r0, r4
 801637e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016380:	3468      	adds	r4, #104	; 0x68
 8016382:	e7d9      	b.n	8016338 <__sfp+0x1c>
 8016384:	2104      	movs	r1, #4
 8016386:	4638      	mov	r0, r7
 8016388:	f7ff ff62 	bl	8016250 <__sfmoreglue>
 801638c:	4604      	mov	r4, r0
 801638e:	6030      	str	r0, [r6, #0]
 8016390:	2800      	cmp	r0, #0
 8016392:	d1d5      	bne.n	8016340 <__sfp+0x24>
 8016394:	f7ff ff78 	bl	8016288 <__sfp_lock_release>
 8016398:	230c      	movs	r3, #12
 801639a:	603b      	str	r3, [r7, #0]
 801639c:	e7ee      	b.n	801637c <__sfp+0x60>
 801639e:	bf00      	nop
 80163a0:	0802ba14 	.word	0x0802ba14
 80163a4:	ffff0001 	.word	0xffff0001

080163a8 <fiprintf>:
 80163a8:	b40e      	push	{r1, r2, r3}
 80163aa:	b503      	push	{r0, r1, lr}
 80163ac:	4601      	mov	r1, r0
 80163ae:	ab03      	add	r3, sp, #12
 80163b0:	4805      	ldr	r0, [pc, #20]	; (80163c8 <fiprintf+0x20>)
 80163b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80163b6:	6800      	ldr	r0, [r0, #0]
 80163b8:	9301      	str	r3, [sp, #4]
 80163ba:	f000 fa61 	bl	8016880 <_vfiprintf_r>
 80163be:	b002      	add	sp, #8
 80163c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80163c4:	b003      	add	sp, #12
 80163c6:	4770      	bx	lr
 80163c8:	24000050 	.word	0x24000050

080163cc <_fwalk_reent>:
 80163cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163d0:	4606      	mov	r6, r0
 80163d2:	4688      	mov	r8, r1
 80163d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80163d8:	2700      	movs	r7, #0
 80163da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80163de:	f1b9 0901 	subs.w	r9, r9, #1
 80163e2:	d505      	bpl.n	80163f0 <_fwalk_reent+0x24>
 80163e4:	6824      	ldr	r4, [r4, #0]
 80163e6:	2c00      	cmp	r4, #0
 80163e8:	d1f7      	bne.n	80163da <_fwalk_reent+0xe>
 80163ea:	4638      	mov	r0, r7
 80163ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163f0:	89ab      	ldrh	r3, [r5, #12]
 80163f2:	2b01      	cmp	r3, #1
 80163f4:	d907      	bls.n	8016406 <_fwalk_reent+0x3a>
 80163f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80163fa:	3301      	adds	r3, #1
 80163fc:	d003      	beq.n	8016406 <_fwalk_reent+0x3a>
 80163fe:	4629      	mov	r1, r5
 8016400:	4630      	mov	r0, r6
 8016402:	47c0      	blx	r8
 8016404:	4307      	orrs	r7, r0
 8016406:	3568      	adds	r5, #104	; 0x68
 8016408:	e7e9      	b.n	80163de <_fwalk_reent+0x12>

0801640a <__retarget_lock_init_recursive>:
 801640a:	4770      	bx	lr

0801640c <__retarget_lock_acquire_recursive>:
 801640c:	4770      	bx	lr

0801640e <__retarget_lock_release_recursive>:
 801640e:	4770      	bx	lr

08016410 <malloc>:
 8016410:	4b02      	ldr	r3, [pc, #8]	; (801641c <malloc+0xc>)
 8016412:	4601      	mov	r1, r0
 8016414:	6818      	ldr	r0, [r3, #0]
 8016416:	f000 b853 	b.w	80164c0 <_malloc_r>
 801641a:	bf00      	nop
 801641c:	24000050 	.word	0x24000050

08016420 <_free_r>:
 8016420:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016422:	2900      	cmp	r1, #0
 8016424:	d048      	beq.n	80164b8 <_free_r+0x98>
 8016426:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801642a:	9001      	str	r0, [sp, #4]
 801642c:	2b00      	cmp	r3, #0
 801642e:	f1a1 0404 	sub.w	r4, r1, #4
 8016432:	bfb8      	it	lt
 8016434:	18e4      	addlt	r4, r4, r3
 8016436:	f000 ff5d 	bl	80172f4 <__malloc_lock>
 801643a:	4a20      	ldr	r2, [pc, #128]	; (80164bc <_free_r+0x9c>)
 801643c:	9801      	ldr	r0, [sp, #4]
 801643e:	6813      	ldr	r3, [r2, #0]
 8016440:	4615      	mov	r5, r2
 8016442:	b933      	cbnz	r3, 8016452 <_free_r+0x32>
 8016444:	6063      	str	r3, [r4, #4]
 8016446:	6014      	str	r4, [r2, #0]
 8016448:	b003      	add	sp, #12
 801644a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801644e:	f000 bf57 	b.w	8017300 <__malloc_unlock>
 8016452:	42a3      	cmp	r3, r4
 8016454:	d90b      	bls.n	801646e <_free_r+0x4e>
 8016456:	6821      	ldr	r1, [r4, #0]
 8016458:	1862      	adds	r2, r4, r1
 801645a:	4293      	cmp	r3, r2
 801645c:	bf04      	itt	eq
 801645e:	681a      	ldreq	r2, [r3, #0]
 8016460:	685b      	ldreq	r3, [r3, #4]
 8016462:	6063      	str	r3, [r4, #4]
 8016464:	bf04      	itt	eq
 8016466:	1852      	addeq	r2, r2, r1
 8016468:	6022      	streq	r2, [r4, #0]
 801646a:	602c      	str	r4, [r5, #0]
 801646c:	e7ec      	b.n	8016448 <_free_r+0x28>
 801646e:	461a      	mov	r2, r3
 8016470:	685b      	ldr	r3, [r3, #4]
 8016472:	b10b      	cbz	r3, 8016478 <_free_r+0x58>
 8016474:	42a3      	cmp	r3, r4
 8016476:	d9fa      	bls.n	801646e <_free_r+0x4e>
 8016478:	6811      	ldr	r1, [r2, #0]
 801647a:	1855      	adds	r5, r2, r1
 801647c:	42a5      	cmp	r5, r4
 801647e:	d10b      	bne.n	8016498 <_free_r+0x78>
 8016480:	6824      	ldr	r4, [r4, #0]
 8016482:	4421      	add	r1, r4
 8016484:	1854      	adds	r4, r2, r1
 8016486:	42a3      	cmp	r3, r4
 8016488:	6011      	str	r1, [r2, #0]
 801648a:	d1dd      	bne.n	8016448 <_free_r+0x28>
 801648c:	681c      	ldr	r4, [r3, #0]
 801648e:	685b      	ldr	r3, [r3, #4]
 8016490:	6053      	str	r3, [r2, #4]
 8016492:	4421      	add	r1, r4
 8016494:	6011      	str	r1, [r2, #0]
 8016496:	e7d7      	b.n	8016448 <_free_r+0x28>
 8016498:	d902      	bls.n	80164a0 <_free_r+0x80>
 801649a:	230c      	movs	r3, #12
 801649c:	6003      	str	r3, [r0, #0]
 801649e:	e7d3      	b.n	8016448 <_free_r+0x28>
 80164a0:	6825      	ldr	r5, [r4, #0]
 80164a2:	1961      	adds	r1, r4, r5
 80164a4:	428b      	cmp	r3, r1
 80164a6:	bf04      	itt	eq
 80164a8:	6819      	ldreq	r1, [r3, #0]
 80164aa:	685b      	ldreq	r3, [r3, #4]
 80164ac:	6063      	str	r3, [r4, #4]
 80164ae:	bf04      	itt	eq
 80164b0:	1949      	addeq	r1, r1, r5
 80164b2:	6021      	streq	r1, [r4, #0]
 80164b4:	6054      	str	r4, [r2, #4]
 80164b6:	e7c7      	b.n	8016448 <_free_r+0x28>
 80164b8:	b003      	add	sp, #12
 80164ba:	bd30      	pop	{r4, r5, pc}
 80164bc:	240067f8 	.word	0x240067f8

080164c0 <_malloc_r>:
 80164c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164c2:	1ccd      	adds	r5, r1, #3
 80164c4:	f025 0503 	bic.w	r5, r5, #3
 80164c8:	3508      	adds	r5, #8
 80164ca:	2d0c      	cmp	r5, #12
 80164cc:	bf38      	it	cc
 80164ce:	250c      	movcc	r5, #12
 80164d0:	2d00      	cmp	r5, #0
 80164d2:	4606      	mov	r6, r0
 80164d4:	db01      	blt.n	80164da <_malloc_r+0x1a>
 80164d6:	42a9      	cmp	r1, r5
 80164d8:	d903      	bls.n	80164e2 <_malloc_r+0x22>
 80164da:	230c      	movs	r3, #12
 80164dc:	6033      	str	r3, [r6, #0]
 80164de:	2000      	movs	r0, #0
 80164e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164e2:	f000 ff07 	bl	80172f4 <__malloc_lock>
 80164e6:	4921      	ldr	r1, [pc, #132]	; (801656c <_malloc_r+0xac>)
 80164e8:	680a      	ldr	r2, [r1, #0]
 80164ea:	4614      	mov	r4, r2
 80164ec:	b99c      	cbnz	r4, 8016516 <_malloc_r+0x56>
 80164ee:	4f20      	ldr	r7, [pc, #128]	; (8016570 <_malloc_r+0xb0>)
 80164f0:	683b      	ldr	r3, [r7, #0]
 80164f2:	b923      	cbnz	r3, 80164fe <_malloc_r+0x3e>
 80164f4:	4621      	mov	r1, r4
 80164f6:	4630      	mov	r0, r6
 80164f8:	f000 fc86 	bl	8016e08 <_sbrk_r>
 80164fc:	6038      	str	r0, [r7, #0]
 80164fe:	4629      	mov	r1, r5
 8016500:	4630      	mov	r0, r6
 8016502:	f000 fc81 	bl	8016e08 <_sbrk_r>
 8016506:	1c43      	adds	r3, r0, #1
 8016508:	d123      	bne.n	8016552 <_malloc_r+0x92>
 801650a:	230c      	movs	r3, #12
 801650c:	6033      	str	r3, [r6, #0]
 801650e:	4630      	mov	r0, r6
 8016510:	f000 fef6 	bl	8017300 <__malloc_unlock>
 8016514:	e7e3      	b.n	80164de <_malloc_r+0x1e>
 8016516:	6823      	ldr	r3, [r4, #0]
 8016518:	1b5b      	subs	r3, r3, r5
 801651a:	d417      	bmi.n	801654c <_malloc_r+0x8c>
 801651c:	2b0b      	cmp	r3, #11
 801651e:	d903      	bls.n	8016528 <_malloc_r+0x68>
 8016520:	6023      	str	r3, [r4, #0]
 8016522:	441c      	add	r4, r3
 8016524:	6025      	str	r5, [r4, #0]
 8016526:	e004      	b.n	8016532 <_malloc_r+0x72>
 8016528:	6863      	ldr	r3, [r4, #4]
 801652a:	42a2      	cmp	r2, r4
 801652c:	bf0c      	ite	eq
 801652e:	600b      	streq	r3, [r1, #0]
 8016530:	6053      	strne	r3, [r2, #4]
 8016532:	4630      	mov	r0, r6
 8016534:	f000 fee4 	bl	8017300 <__malloc_unlock>
 8016538:	f104 000b 	add.w	r0, r4, #11
 801653c:	1d23      	adds	r3, r4, #4
 801653e:	f020 0007 	bic.w	r0, r0, #7
 8016542:	1ac2      	subs	r2, r0, r3
 8016544:	d0cc      	beq.n	80164e0 <_malloc_r+0x20>
 8016546:	1a1b      	subs	r3, r3, r0
 8016548:	50a3      	str	r3, [r4, r2]
 801654a:	e7c9      	b.n	80164e0 <_malloc_r+0x20>
 801654c:	4622      	mov	r2, r4
 801654e:	6864      	ldr	r4, [r4, #4]
 8016550:	e7cc      	b.n	80164ec <_malloc_r+0x2c>
 8016552:	1cc4      	adds	r4, r0, #3
 8016554:	f024 0403 	bic.w	r4, r4, #3
 8016558:	42a0      	cmp	r0, r4
 801655a:	d0e3      	beq.n	8016524 <_malloc_r+0x64>
 801655c:	1a21      	subs	r1, r4, r0
 801655e:	4630      	mov	r0, r6
 8016560:	f000 fc52 	bl	8016e08 <_sbrk_r>
 8016564:	3001      	adds	r0, #1
 8016566:	d1dd      	bne.n	8016524 <_malloc_r+0x64>
 8016568:	e7cf      	b.n	801650a <_malloc_r+0x4a>
 801656a:	bf00      	nop
 801656c:	240067f8 	.word	0x240067f8
 8016570:	240067fc 	.word	0x240067fc

08016574 <__ssputs_r>:
 8016574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016578:	688e      	ldr	r6, [r1, #8]
 801657a:	429e      	cmp	r6, r3
 801657c:	4682      	mov	sl, r0
 801657e:	460c      	mov	r4, r1
 8016580:	4690      	mov	r8, r2
 8016582:	461f      	mov	r7, r3
 8016584:	d838      	bhi.n	80165f8 <__ssputs_r+0x84>
 8016586:	898a      	ldrh	r2, [r1, #12]
 8016588:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801658c:	d032      	beq.n	80165f4 <__ssputs_r+0x80>
 801658e:	6825      	ldr	r5, [r4, #0]
 8016590:	6909      	ldr	r1, [r1, #16]
 8016592:	eba5 0901 	sub.w	r9, r5, r1
 8016596:	6965      	ldr	r5, [r4, #20]
 8016598:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801659c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80165a0:	3301      	adds	r3, #1
 80165a2:	444b      	add	r3, r9
 80165a4:	106d      	asrs	r5, r5, #1
 80165a6:	429d      	cmp	r5, r3
 80165a8:	bf38      	it	cc
 80165aa:	461d      	movcc	r5, r3
 80165ac:	0553      	lsls	r3, r2, #21
 80165ae:	d531      	bpl.n	8016614 <__ssputs_r+0xa0>
 80165b0:	4629      	mov	r1, r5
 80165b2:	f7ff ff85 	bl	80164c0 <_malloc_r>
 80165b6:	4606      	mov	r6, r0
 80165b8:	b950      	cbnz	r0, 80165d0 <__ssputs_r+0x5c>
 80165ba:	230c      	movs	r3, #12
 80165bc:	f8ca 3000 	str.w	r3, [sl]
 80165c0:	89a3      	ldrh	r3, [r4, #12]
 80165c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165c6:	81a3      	strh	r3, [r4, #12]
 80165c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80165cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165d0:	6921      	ldr	r1, [r4, #16]
 80165d2:	464a      	mov	r2, r9
 80165d4:	f7ff fd22 	bl	801601c <memcpy>
 80165d8:	89a3      	ldrh	r3, [r4, #12]
 80165da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80165de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80165e2:	81a3      	strh	r3, [r4, #12]
 80165e4:	6126      	str	r6, [r4, #16]
 80165e6:	6165      	str	r5, [r4, #20]
 80165e8:	444e      	add	r6, r9
 80165ea:	eba5 0509 	sub.w	r5, r5, r9
 80165ee:	6026      	str	r6, [r4, #0]
 80165f0:	60a5      	str	r5, [r4, #8]
 80165f2:	463e      	mov	r6, r7
 80165f4:	42be      	cmp	r6, r7
 80165f6:	d900      	bls.n	80165fa <__ssputs_r+0x86>
 80165f8:	463e      	mov	r6, r7
 80165fa:	4632      	mov	r2, r6
 80165fc:	6820      	ldr	r0, [r4, #0]
 80165fe:	4641      	mov	r1, r8
 8016600:	f7ff fd1a 	bl	8016038 <memmove>
 8016604:	68a3      	ldr	r3, [r4, #8]
 8016606:	6822      	ldr	r2, [r4, #0]
 8016608:	1b9b      	subs	r3, r3, r6
 801660a:	4432      	add	r2, r6
 801660c:	60a3      	str	r3, [r4, #8]
 801660e:	6022      	str	r2, [r4, #0]
 8016610:	2000      	movs	r0, #0
 8016612:	e7db      	b.n	80165cc <__ssputs_r+0x58>
 8016614:	462a      	mov	r2, r5
 8016616:	f000 fe79 	bl	801730c <_realloc_r>
 801661a:	4606      	mov	r6, r0
 801661c:	2800      	cmp	r0, #0
 801661e:	d1e1      	bne.n	80165e4 <__ssputs_r+0x70>
 8016620:	6921      	ldr	r1, [r4, #16]
 8016622:	4650      	mov	r0, sl
 8016624:	f7ff fefc 	bl	8016420 <_free_r>
 8016628:	e7c7      	b.n	80165ba <__ssputs_r+0x46>
	...

0801662c <_svfiprintf_r>:
 801662c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016630:	4698      	mov	r8, r3
 8016632:	898b      	ldrh	r3, [r1, #12]
 8016634:	061b      	lsls	r3, r3, #24
 8016636:	b09d      	sub	sp, #116	; 0x74
 8016638:	4607      	mov	r7, r0
 801663a:	460d      	mov	r5, r1
 801663c:	4614      	mov	r4, r2
 801663e:	d50e      	bpl.n	801665e <_svfiprintf_r+0x32>
 8016640:	690b      	ldr	r3, [r1, #16]
 8016642:	b963      	cbnz	r3, 801665e <_svfiprintf_r+0x32>
 8016644:	2140      	movs	r1, #64	; 0x40
 8016646:	f7ff ff3b 	bl	80164c0 <_malloc_r>
 801664a:	6028      	str	r0, [r5, #0]
 801664c:	6128      	str	r0, [r5, #16]
 801664e:	b920      	cbnz	r0, 801665a <_svfiprintf_r+0x2e>
 8016650:	230c      	movs	r3, #12
 8016652:	603b      	str	r3, [r7, #0]
 8016654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016658:	e0d1      	b.n	80167fe <_svfiprintf_r+0x1d2>
 801665a:	2340      	movs	r3, #64	; 0x40
 801665c:	616b      	str	r3, [r5, #20]
 801665e:	2300      	movs	r3, #0
 8016660:	9309      	str	r3, [sp, #36]	; 0x24
 8016662:	2320      	movs	r3, #32
 8016664:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016668:	f8cd 800c 	str.w	r8, [sp, #12]
 801666c:	2330      	movs	r3, #48	; 0x30
 801666e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016818 <_svfiprintf_r+0x1ec>
 8016672:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016676:	f04f 0901 	mov.w	r9, #1
 801667a:	4623      	mov	r3, r4
 801667c:	469a      	mov	sl, r3
 801667e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016682:	b10a      	cbz	r2, 8016688 <_svfiprintf_r+0x5c>
 8016684:	2a25      	cmp	r2, #37	; 0x25
 8016686:	d1f9      	bne.n	801667c <_svfiprintf_r+0x50>
 8016688:	ebba 0b04 	subs.w	fp, sl, r4
 801668c:	d00b      	beq.n	80166a6 <_svfiprintf_r+0x7a>
 801668e:	465b      	mov	r3, fp
 8016690:	4622      	mov	r2, r4
 8016692:	4629      	mov	r1, r5
 8016694:	4638      	mov	r0, r7
 8016696:	f7ff ff6d 	bl	8016574 <__ssputs_r>
 801669a:	3001      	adds	r0, #1
 801669c:	f000 80aa 	beq.w	80167f4 <_svfiprintf_r+0x1c8>
 80166a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80166a2:	445a      	add	r2, fp
 80166a4:	9209      	str	r2, [sp, #36]	; 0x24
 80166a6:	f89a 3000 	ldrb.w	r3, [sl]
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	f000 80a2 	beq.w	80167f4 <_svfiprintf_r+0x1c8>
 80166b0:	2300      	movs	r3, #0
 80166b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80166b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80166ba:	f10a 0a01 	add.w	sl, sl, #1
 80166be:	9304      	str	r3, [sp, #16]
 80166c0:	9307      	str	r3, [sp, #28]
 80166c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80166c6:	931a      	str	r3, [sp, #104]	; 0x68
 80166c8:	4654      	mov	r4, sl
 80166ca:	2205      	movs	r2, #5
 80166cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166d0:	4851      	ldr	r0, [pc, #324]	; (8016818 <_svfiprintf_r+0x1ec>)
 80166d2:	f7e9 fe1d 	bl	8000310 <memchr>
 80166d6:	9a04      	ldr	r2, [sp, #16]
 80166d8:	b9d8      	cbnz	r0, 8016712 <_svfiprintf_r+0xe6>
 80166da:	06d0      	lsls	r0, r2, #27
 80166dc:	bf44      	itt	mi
 80166de:	2320      	movmi	r3, #32
 80166e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80166e4:	0711      	lsls	r1, r2, #28
 80166e6:	bf44      	itt	mi
 80166e8:	232b      	movmi	r3, #43	; 0x2b
 80166ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80166ee:	f89a 3000 	ldrb.w	r3, [sl]
 80166f2:	2b2a      	cmp	r3, #42	; 0x2a
 80166f4:	d015      	beq.n	8016722 <_svfiprintf_r+0xf6>
 80166f6:	9a07      	ldr	r2, [sp, #28]
 80166f8:	4654      	mov	r4, sl
 80166fa:	2000      	movs	r0, #0
 80166fc:	f04f 0c0a 	mov.w	ip, #10
 8016700:	4621      	mov	r1, r4
 8016702:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016706:	3b30      	subs	r3, #48	; 0x30
 8016708:	2b09      	cmp	r3, #9
 801670a:	d94e      	bls.n	80167aa <_svfiprintf_r+0x17e>
 801670c:	b1b0      	cbz	r0, 801673c <_svfiprintf_r+0x110>
 801670e:	9207      	str	r2, [sp, #28]
 8016710:	e014      	b.n	801673c <_svfiprintf_r+0x110>
 8016712:	eba0 0308 	sub.w	r3, r0, r8
 8016716:	fa09 f303 	lsl.w	r3, r9, r3
 801671a:	4313      	orrs	r3, r2
 801671c:	9304      	str	r3, [sp, #16]
 801671e:	46a2      	mov	sl, r4
 8016720:	e7d2      	b.n	80166c8 <_svfiprintf_r+0x9c>
 8016722:	9b03      	ldr	r3, [sp, #12]
 8016724:	1d19      	adds	r1, r3, #4
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	9103      	str	r1, [sp, #12]
 801672a:	2b00      	cmp	r3, #0
 801672c:	bfbb      	ittet	lt
 801672e:	425b      	neglt	r3, r3
 8016730:	f042 0202 	orrlt.w	r2, r2, #2
 8016734:	9307      	strge	r3, [sp, #28]
 8016736:	9307      	strlt	r3, [sp, #28]
 8016738:	bfb8      	it	lt
 801673a:	9204      	strlt	r2, [sp, #16]
 801673c:	7823      	ldrb	r3, [r4, #0]
 801673e:	2b2e      	cmp	r3, #46	; 0x2e
 8016740:	d10c      	bne.n	801675c <_svfiprintf_r+0x130>
 8016742:	7863      	ldrb	r3, [r4, #1]
 8016744:	2b2a      	cmp	r3, #42	; 0x2a
 8016746:	d135      	bne.n	80167b4 <_svfiprintf_r+0x188>
 8016748:	9b03      	ldr	r3, [sp, #12]
 801674a:	1d1a      	adds	r2, r3, #4
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	9203      	str	r2, [sp, #12]
 8016750:	2b00      	cmp	r3, #0
 8016752:	bfb8      	it	lt
 8016754:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8016758:	3402      	adds	r4, #2
 801675a:	9305      	str	r3, [sp, #20]
 801675c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016828 <_svfiprintf_r+0x1fc>
 8016760:	7821      	ldrb	r1, [r4, #0]
 8016762:	2203      	movs	r2, #3
 8016764:	4650      	mov	r0, sl
 8016766:	f7e9 fdd3 	bl	8000310 <memchr>
 801676a:	b140      	cbz	r0, 801677e <_svfiprintf_r+0x152>
 801676c:	2340      	movs	r3, #64	; 0x40
 801676e:	eba0 000a 	sub.w	r0, r0, sl
 8016772:	fa03 f000 	lsl.w	r0, r3, r0
 8016776:	9b04      	ldr	r3, [sp, #16]
 8016778:	4303      	orrs	r3, r0
 801677a:	3401      	adds	r4, #1
 801677c:	9304      	str	r3, [sp, #16]
 801677e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016782:	4826      	ldr	r0, [pc, #152]	; (801681c <_svfiprintf_r+0x1f0>)
 8016784:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016788:	2206      	movs	r2, #6
 801678a:	f7e9 fdc1 	bl	8000310 <memchr>
 801678e:	2800      	cmp	r0, #0
 8016790:	d038      	beq.n	8016804 <_svfiprintf_r+0x1d8>
 8016792:	4b23      	ldr	r3, [pc, #140]	; (8016820 <_svfiprintf_r+0x1f4>)
 8016794:	bb1b      	cbnz	r3, 80167de <_svfiprintf_r+0x1b2>
 8016796:	9b03      	ldr	r3, [sp, #12]
 8016798:	3307      	adds	r3, #7
 801679a:	f023 0307 	bic.w	r3, r3, #7
 801679e:	3308      	adds	r3, #8
 80167a0:	9303      	str	r3, [sp, #12]
 80167a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167a4:	4433      	add	r3, r6
 80167a6:	9309      	str	r3, [sp, #36]	; 0x24
 80167a8:	e767      	b.n	801667a <_svfiprintf_r+0x4e>
 80167aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80167ae:	460c      	mov	r4, r1
 80167b0:	2001      	movs	r0, #1
 80167b2:	e7a5      	b.n	8016700 <_svfiprintf_r+0xd4>
 80167b4:	2300      	movs	r3, #0
 80167b6:	3401      	adds	r4, #1
 80167b8:	9305      	str	r3, [sp, #20]
 80167ba:	4619      	mov	r1, r3
 80167bc:	f04f 0c0a 	mov.w	ip, #10
 80167c0:	4620      	mov	r0, r4
 80167c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80167c6:	3a30      	subs	r2, #48	; 0x30
 80167c8:	2a09      	cmp	r2, #9
 80167ca:	d903      	bls.n	80167d4 <_svfiprintf_r+0x1a8>
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	d0c5      	beq.n	801675c <_svfiprintf_r+0x130>
 80167d0:	9105      	str	r1, [sp, #20]
 80167d2:	e7c3      	b.n	801675c <_svfiprintf_r+0x130>
 80167d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80167d8:	4604      	mov	r4, r0
 80167da:	2301      	movs	r3, #1
 80167dc:	e7f0      	b.n	80167c0 <_svfiprintf_r+0x194>
 80167de:	ab03      	add	r3, sp, #12
 80167e0:	9300      	str	r3, [sp, #0]
 80167e2:	462a      	mov	r2, r5
 80167e4:	4b0f      	ldr	r3, [pc, #60]	; (8016824 <_svfiprintf_r+0x1f8>)
 80167e6:	a904      	add	r1, sp, #16
 80167e8:	4638      	mov	r0, r7
 80167ea:	f3af 8000 	nop.w
 80167ee:	1c42      	adds	r2, r0, #1
 80167f0:	4606      	mov	r6, r0
 80167f2:	d1d6      	bne.n	80167a2 <_svfiprintf_r+0x176>
 80167f4:	89ab      	ldrh	r3, [r5, #12]
 80167f6:	065b      	lsls	r3, r3, #25
 80167f8:	f53f af2c 	bmi.w	8016654 <_svfiprintf_r+0x28>
 80167fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80167fe:	b01d      	add	sp, #116	; 0x74
 8016800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016804:	ab03      	add	r3, sp, #12
 8016806:	9300      	str	r3, [sp, #0]
 8016808:	462a      	mov	r2, r5
 801680a:	4b06      	ldr	r3, [pc, #24]	; (8016824 <_svfiprintf_r+0x1f8>)
 801680c:	a904      	add	r1, sp, #16
 801680e:	4638      	mov	r0, r7
 8016810:	f000 f9d4 	bl	8016bbc <_printf_i>
 8016814:	e7eb      	b.n	80167ee <_svfiprintf_r+0x1c2>
 8016816:	bf00      	nop
 8016818:	0802bb2c 	.word	0x0802bb2c
 801681c:	0802bb36 	.word	0x0802bb36
 8016820:	00000000 	.word	0x00000000
 8016824:	08016575 	.word	0x08016575
 8016828:	0802bb32 	.word	0x0802bb32

0801682c <__sfputc_r>:
 801682c:	6893      	ldr	r3, [r2, #8]
 801682e:	3b01      	subs	r3, #1
 8016830:	2b00      	cmp	r3, #0
 8016832:	b410      	push	{r4}
 8016834:	6093      	str	r3, [r2, #8]
 8016836:	da08      	bge.n	801684a <__sfputc_r+0x1e>
 8016838:	6994      	ldr	r4, [r2, #24]
 801683a:	42a3      	cmp	r3, r4
 801683c:	db01      	blt.n	8016842 <__sfputc_r+0x16>
 801683e:	290a      	cmp	r1, #10
 8016840:	d103      	bne.n	801684a <__sfputc_r+0x1e>
 8016842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016846:	f000 bb33 	b.w	8016eb0 <__swbuf_r>
 801684a:	6813      	ldr	r3, [r2, #0]
 801684c:	1c58      	adds	r0, r3, #1
 801684e:	6010      	str	r0, [r2, #0]
 8016850:	7019      	strb	r1, [r3, #0]
 8016852:	4608      	mov	r0, r1
 8016854:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016858:	4770      	bx	lr

0801685a <__sfputs_r>:
 801685a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801685c:	4606      	mov	r6, r0
 801685e:	460f      	mov	r7, r1
 8016860:	4614      	mov	r4, r2
 8016862:	18d5      	adds	r5, r2, r3
 8016864:	42ac      	cmp	r4, r5
 8016866:	d101      	bne.n	801686c <__sfputs_r+0x12>
 8016868:	2000      	movs	r0, #0
 801686a:	e007      	b.n	801687c <__sfputs_r+0x22>
 801686c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016870:	463a      	mov	r2, r7
 8016872:	4630      	mov	r0, r6
 8016874:	f7ff ffda 	bl	801682c <__sfputc_r>
 8016878:	1c43      	adds	r3, r0, #1
 801687a:	d1f3      	bne.n	8016864 <__sfputs_r+0xa>
 801687c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016880 <_vfiprintf_r>:
 8016880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016884:	460d      	mov	r5, r1
 8016886:	b09d      	sub	sp, #116	; 0x74
 8016888:	4614      	mov	r4, r2
 801688a:	4698      	mov	r8, r3
 801688c:	4606      	mov	r6, r0
 801688e:	b118      	cbz	r0, 8016898 <_vfiprintf_r+0x18>
 8016890:	6983      	ldr	r3, [r0, #24]
 8016892:	b90b      	cbnz	r3, 8016898 <_vfiprintf_r+0x18>
 8016894:	f7ff fd0a 	bl	80162ac <__sinit>
 8016898:	4b89      	ldr	r3, [pc, #548]	; (8016ac0 <_vfiprintf_r+0x240>)
 801689a:	429d      	cmp	r5, r3
 801689c:	d11b      	bne.n	80168d6 <_vfiprintf_r+0x56>
 801689e:	6875      	ldr	r5, [r6, #4]
 80168a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80168a2:	07d9      	lsls	r1, r3, #31
 80168a4:	d405      	bmi.n	80168b2 <_vfiprintf_r+0x32>
 80168a6:	89ab      	ldrh	r3, [r5, #12]
 80168a8:	059a      	lsls	r2, r3, #22
 80168aa:	d402      	bmi.n	80168b2 <_vfiprintf_r+0x32>
 80168ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80168ae:	f7ff fdad 	bl	801640c <__retarget_lock_acquire_recursive>
 80168b2:	89ab      	ldrh	r3, [r5, #12]
 80168b4:	071b      	lsls	r3, r3, #28
 80168b6:	d501      	bpl.n	80168bc <_vfiprintf_r+0x3c>
 80168b8:	692b      	ldr	r3, [r5, #16]
 80168ba:	b9eb      	cbnz	r3, 80168f8 <_vfiprintf_r+0x78>
 80168bc:	4629      	mov	r1, r5
 80168be:	4630      	mov	r0, r6
 80168c0:	f000 fb5a 	bl	8016f78 <__swsetup_r>
 80168c4:	b1c0      	cbz	r0, 80168f8 <_vfiprintf_r+0x78>
 80168c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80168c8:	07dc      	lsls	r4, r3, #31
 80168ca:	d50e      	bpl.n	80168ea <_vfiprintf_r+0x6a>
 80168cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80168d0:	b01d      	add	sp, #116	; 0x74
 80168d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168d6:	4b7b      	ldr	r3, [pc, #492]	; (8016ac4 <_vfiprintf_r+0x244>)
 80168d8:	429d      	cmp	r5, r3
 80168da:	d101      	bne.n	80168e0 <_vfiprintf_r+0x60>
 80168dc:	68b5      	ldr	r5, [r6, #8]
 80168de:	e7df      	b.n	80168a0 <_vfiprintf_r+0x20>
 80168e0:	4b79      	ldr	r3, [pc, #484]	; (8016ac8 <_vfiprintf_r+0x248>)
 80168e2:	429d      	cmp	r5, r3
 80168e4:	bf08      	it	eq
 80168e6:	68f5      	ldreq	r5, [r6, #12]
 80168e8:	e7da      	b.n	80168a0 <_vfiprintf_r+0x20>
 80168ea:	89ab      	ldrh	r3, [r5, #12]
 80168ec:	0598      	lsls	r0, r3, #22
 80168ee:	d4ed      	bmi.n	80168cc <_vfiprintf_r+0x4c>
 80168f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80168f2:	f7ff fd8c 	bl	801640e <__retarget_lock_release_recursive>
 80168f6:	e7e9      	b.n	80168cc <_vfiprintf_r+0x4c>
 80168f8:	2300      	movs	r3, #0
 80168fa:	9309      	str	r3, [sp, #36]	; 0x24
 80168fc:	2320      	movs	r3, #32
 80168fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016902:	f8cd 800c 	str.w	r8, [sp, #12]
 8016906:	2330      	movs	r3, #48	; 0x30
 8016908:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016acc <_vfiprintf_r+0x24c>
 801690c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016910:	f04f 0901 	mov.w	r9, #1
 8016914:	4623      	mov	r3, r4
 8016916:	469a      	mov	sl, r3
 8016918:	f813 2b01 	ldrb.w	r2, [r3], #1
 801691c:	b10a      	cbz	r2, 8016922 <_vfiprintf_r+0xa2>
 801691e:	2a25      	cmp	r2, #37	; 0x25
 8016920:	d1f9      	bne.n	8016916 <_vfiprintf_r+0x96>
 8016922:	ebba 0b04 	subs.w	fp, sl, r4
 8016926:	d00b      	beq.n	8016940 <_vfiprintf_r+0xc0>
 8016928:	465b      	mov	r3, fp
 801692a:	4622      	mov	r2, r4
 801692c:	4629      	mov	r1, r5
 801692e:	4630      	mov	r0, r6
 8016930:	f7ff ff93 	bl	801685a <__sfputs_r>
 8016934:	3001      	adds	r0, #1
 8016936:	f000 80aa 	beq.w	8016a8e <_vfiprintf_r+0x20e>
 801693a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801693c:	445a      	add	r2, fp
 801693e:	9209      	str	r2, [sp, #36]	; 0x24
 8016940:	f89a 3000 	ldrb.w	r3, [sl]
 8016944:	2b00      	cmp	r3, #0
 8016946:	f000 80a2 	beq.w	8016a8e <_vfiprintf_r+0x20e>
 801694a:	2300      	movs	r3, #0
 801694c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016954:	f10a 0a01 	add.w	sl, sl, #1
 8016958:	9304      	str	r3, [sp, #16]
 801695a:	9307      	str	r3, [sp, #28]
 801695c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016960:	931a      	str	r3, [sp, #104]	; 0x68
 8016962:	4654      	mov	r4, sl
 8016964:	2205      	movs	r2, #5
 8016966:	f814 1b01 	ldrb.w	r1, [r4], #1
 801696a:	4858      	ldr	r0, [pc, #352]	; (8016acc <_vfiprintf_r+0x24c>)
 801696c:	f7e9 fcd0 	bl	8000310 <memchr>
 8016970:	9a04      	ldr	r2, [sp, #16]
 8016972:	b9d8      	cbnz	r0, 80169ac <_vfiprintf_r+0x12c>
 8016974:	06d1      	lsls	r1, r2, #27
 8016976:	bf44      	itt	mi
 8016978:	2320      	movmi	r3, #32
 801697a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801697e:	0713      	lsls	r3, r2, #28
 8016980:	bf44      	itt	mi
 8016982:	232b      	movmi	r3, #43	; 0x2b
 8016984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016988:	f89a 3000 	ldrb.w	r3, [sl]
 801698c:	2b2a      	cmp	r3, #42	; 0x2a
 801698e:	d015      	beq.n	80169bc <_vfiprintf_r+0x13c>
 8016990:	9a07      	ldr	r2, [sp, #28]
 8016992:	4654      	mov	r4, sl
 8016994:	2000      	movs	r0, #0
 8016996:	f04f 0c0a 	mov.w	ip, #10
 801699a:	4621      	mov	r1, r4
 801699c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80169a0:	3b30      	subs	r3, #48	; 0x30
 80169a2:	2b09      	cmp	r3, #9
 80169a4:	d94e      	bls.n	8016a44 <_vfiprintf_r+0x1c4>
 80169a6:	b1b0      	cbz	r0, 80169d6 <_vfiprintf_r+0x156>
 80169a8:	9207      	str	r2, [sp, #28]
 80169aa:	e014      	b.n	80169d6 <_vfiprintf_r+0x156>
 80169ac:	eba0 0308 	sub.w	r3, r0, r8
 80169b0:	fa09 f303 	lsl.w	r3, r9, r3
 80169b4:	4313      	orrs	r3, r2
 80169b6:	9304      	str	r3, [sp, #16]
 80169b8:	46a2      	mov	sl, r4
 80169ba:	e7d2      	b.n	8016962 <_vfiprintf_r+0xe2>
 80169bc:	9b03      	ldr	r3, [sp, #12]
 80169be:	1d19      	adds	r1, r3, #4
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	9103      	str	r1, [sp, #12]
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	bfbb      	ittet	lt
 80169c8:	425b      	neglt	r3, r3
 80169ca:	f042 0202 	orrlt.w	r2, r2, #2
 80169ce:	9307      	strge	r3, [sp, #28]
 80169d0:	9307      	strlt	r3, [sp, #28]
 80169d2:	bfb8      	it	lt
 80169d4:	9204      	strlt	r2, [sp, #16]
 80169d6:	7823      	ldrb	r3, [r4, #0]
 80169d8:	2b2e      	cmp	r3, #46	; 0x2e
 80169da:	d10c      	bne.n	80169f6 <_vfiprintf_r+0x176>
 80169dc:	7863      	ldrb	r3, [r4, #1]
 80169de:	2b2a      	cmp	r3, #42	; 0x2a
 80169e0:	d135      	bne.n	8016a4e <_vfiprintf_r+0x1ce>
 80169e2:	9b03      	ldr	r3, [sp, #12]
 80169e4:	1d1a      	adds	r2, r3, #4
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	9203      	str	r2, [sp, #12]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	bfb8      	it	lt
 80169ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80169f2:	3402      	adds	r4, #2
 80169f4:	9305      	str	r3, [sp, #20]
 80169f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016adc <_vfiprintf_r+0x25c>
 80169fa:	7821      	ldrb	r1, [r4, #0]
 80169fc:	2203      	movs	r2, #3
 80169fe:	4650      	mov	r0, sl
 8016a00:	f7e9 fc86 	bl	8000310 <memchr>
 8016a04:	b140      	cbz	r0, 8016a18 <_vfiprintf_r+0x198>
 8016a06:	2340      	movs	r3, #64	; 0x40
 8016a08:	eba0 000a 	sub.w	r0, r0, sl
 8016a0c:	fa03 f000 	lsl.w	r0, r3, r0
 8016a10:	9b04      	ldr	r3, [sp, #16]
 8016a12:	4303      	orrs	r3, r0
 8016a14:	3401      	adds	r4, #1
 8016a16:	9304      	str	r3, [sp, #16]
 8016a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016a1c:	482c      	ldr	r0, [pc, #176]	; (8016ad0 <_vfiprintf_r+0x250>)
 8016a1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016a22:	2206      	movs	r2, #6
 8016a24:	f7e9 fc74 	bl	8000310 <memchr>
 8016a28:	2800      	cmp	r0, #0
 8016a2a:	d03f      	beq.n	8016aac <_vfiprintf_r+0x22c>
 8016a2c:	4b29      	ldr	r3, [pc, #164]	; (8016ad4 <_vfiprintf_r+0x254>)
 8016a2e:	bb1b      	cbnz	r3, 8016a78 <_vfiprintf_r+0x1f8>
 8016a30:	9b03      	ldr	r3, [sp, #12]
 8016a32:	3307      	adds	r3, #7
 8016a34:	f023 0307 	bic.w	r3, r3, #7
 8016a38:	3308      	adds	r3, #8
 8016a3a:	9303      	str	r3, [sp, #12]
 8016a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a3e:	443b      	add	r3, r7
 8016a40:	9309      	str	r3, [sp, #36]	; 0x24
 8016a42:	e767      	b.n	8016914 <_vfiprintf_r+0x94>
 8016a44:	fb0c 3202 	mla	r2, ip, r2, r3
 8016a48:	460c      	mov	r4, r1
 8016a4a:	2001      	movs	r0, #1
 8016a4c:	e7a5      	b.n	801699a <_vfiprintf_r+0x11a>
 8016a4e:	2300      	movs	r3, #0
 8016a50:	3401      	adds	r4, #1
 8016a52:	9305      	str	r3, [sp, #20]
 8016a54:	4619      	mov	r1, r3
 8016a56:	f04f 0c0a 	mov.w	ip, #10
 8016a5a:	4620      	mov	r0, r4
 8016a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016a60:	3a30      	subs	r2, #48	; 0x30
 8016a62:	2a09      	cmp	r2, #9
 8016a64:	d903      	bls.n	8016a6e <_vfiprintf_r+0x1ee>
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d0c5      	beq.n	80169f6 <_vfiprintf_r+0x176>
 8016a6a:	9105      	str	r1, [sp, #20]
 8016a6c:	e7c3      	b.n	80169f6 <_vfiprintf_r+0x176>
 8016a6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8016a72:	4604      	mov	r4, r0
 8016a74:	2301      	movs	r3, #1
 8016a76:	e7f0      	b.n	8016a5a <_vfiprintf_r+0x1da>
 8016a78:	ab03      	add	r3, sp, #12
 8016a7a:	9300      	str	r3, [sp, #0]
 8016a7c:	462a      	mov	r2, r5
 8016a7e:	4b16      	ldr	r3, [pc, #88]	; (8016ad8 <_vfiprintf_r+0x258>)
 8016a80:	a904      	add	r1, sp, #16
 8016a82:	4630      	mov	r0, r6
 8016a84:	f3af 8000 	nop.w
 8016a88:	4607      	mov	r7, r0
 8016a8a:	1c78      	adds	r0, r7, #1
 8016a8c:	d1d6      	bne.n	8016a3c <_vfiprintf_r+0x1bc>
 8016a8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016a90:	07d9      	lsls	r1, r3, #31
 8016a92:	d405      	bmi.n	8016aa0 <_vfiprintf_r+0x220>
 8016a94:	89ab      	ldrh	r3, [r5, #12]
 8016a96:	059a      	lsls	r2, r3, #22
 8016a98:	d402      	bmi.n	8016aa0 <_vfiprintf_r+0x220>
 8016a9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016a9c:	f7ff fcb7 	bl	801640e <__retarget_lock_release_recursive>
 8016aa0:	89ab      	ldrh	r3, [r5, #12]
 8016aa2:	065b      	lsls	r3, r3, #25
 8016aa4:	f53f af12 	bmi.w	80168cc <_vfiprintf_r+0x4c>
 8016aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016aaa:	e711      	b.n	80168d0 <_vfiprintf_r+0x50>
 8016aac:	ab03      	add	r3, sp, #12
 8016aae:	9300      	str	r3, [sp, #0]
 8016ab0:	462a      	mov	r2, r5
 8016ab2:	4b09      	ldr	r3, [pc, #36]	; (8016ad8 <_vfiprintf_r+0x258>)
 8016ab4:	a904      	add	r1, sp, #16
 8016ab6:	4630      	mov	r0, r6
 8016ab8:	f000 f880 	bl	8016bbc <_printf_i>
 8016abc:	e7e4      	b.n	8016a88 <_vfiprintf_r+0x208>
 8016abe:	bf00      	nop
 8016ac0:	0802baec 	.word	0x0802baec
 8016ac4:	0802bb0c 	.word	0x0802bb0c
 8016ac8:	0802bacc 	.word	0x0802bacc
 8016acc:	0802bb2c 	.word	0x0802bb2c
 8016ad0:	0802bb36 	.word	0x0802bb36
 8016ad4:	00000000 	.word	0x00000000
 8016ad8:	0801685b 	.word	0x0801685b
 8016adc:	0802bb32 	.word	0x0802bb32

08016ae0 <_printf_common>:
 8016ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ae4:	4616      	mov	r6, r2
 8016ae6:	4699      	mov	r9, r3
 8016ae8:	688a      	ldr	r2, [r1, #8]
 8016aea:	690b      	ldr	r3, [r1, #16]
 8016aec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016af0:	4293      	cmp	r3, r2
 8016af2:	bfb8      	it	lt
 8016af4:	4613      	movlt	r3, r2
 8016af6:	6033      	str	r3, [r6, #0]
 8016af8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016afc:	4607      	mov	r7, r0
 8016afe:	460c      	mov	r4, r1
 8016b00:	b10a      	cbz	r2, 8016b06 <_printf_common+0x26>
 8016b02:	3301      	adds	r3, #1
 8016b04:	6033      	str	r3, [r6, #0]
 8016b06:	6823      	ldr	r3, [r4, #0]
 8016b08:	0699      	lsls	r1, r3, #26
 8016b0a:	bf42      	ittt	mi
 8016b0c:	6833      	ldrmi	r3, [r6, #0]
 8016b0e:	3302      	addmi	r3, #2
 8016b10:	6033      	strmi	r3, [r6, #0]
 8016b12:	6825      	ldr	r5, [r4, #0]
 8016b14:	f015 0506 	ands.w	r5, r5, #6
 8016b18:	d106      	bne.n	8016b28 <_printf_common+0x48>
 8016b1a:	f104 0a19 	add.w	sl, r4, #25
 8016b1e:	68e3      	ldr	r3, [r4, #12]
 8016b20:	6832      	ldr	r2, [r6, #0]
 8016b22:	1a9b      	subs	r3, r3, r2
 8016b24:	42ab      	cmp	r3, r5
 8016b26:	dc26      	bgt.n	8016b76 <_printf_common+0x96>
 8016b28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016b2c:	1e13      	subs	r3, r2, #0
 8016b2e:	6822      	ldr	r2, [r4, #0]
 8016b30:	bf18      	it	ne
 8016b32:	2301      	movne	r3, #1
 8016b34:	0692      	lsls	r2, r2, #26
 8016b36:	d42b      	bmi.n	8016b90 <_printf_common+0xb0>
 8016b38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016b3c:	4649      	mov	r1, r9
 8016b3e:	4638      	mov	r0, r7
 8016b40:	47c0      	blx	r8
 8016b42:	3001      	adds	r0, #1
 8016b44:	d01e      	beq.n	8016b84 <_printf_common+0xa4>
 8016b46:	6823      	ldr	r3, [r4, #0]
 8016b48:	68e5      	ldr	r5, [r4, #12]
 8016b4a:	6832      	ldr	r2, [r6, #0]
 8016b4c:	f003 0306 	and.w	r3, r3, #6
 8016b50:	2b04      	cmp	r3, #4
 8016b52:	bf08      	it	eq
 8016b54:	1aad      	subeq	r5, r5, r2
 8016b56:	68a3      	ldr	r3, [r4, #8]
 8016b58:	6922      	ldr	r2, [r4, #16]
 8016b5a:	bf0c      	ite	eq
 8016b5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016b60:	2500      	movne	r5, #0
 8016b62:	4293      	cmp	r3, r2
 8016b64:	bfc4      	itt	gt
 8016b66:	1a9b      	subgt	r3, r3, r2
 8016b68:	18ed      	addgt	r5, r5, r3
 8016b6a:	2600      	movs	r6, #0
 8016b6c:	341a      	adds	r4, #26
 8016b6e:	42b5      	cmp	r5, r6
 8016b70:	d11a      	bne.n	8016ba8 <_printf_common+0xc8>
 8016b72:	2000      	movs	r0, #0
 8016b74:	e008      	b.n	8016b88 <_printf_common+0xa8>
 8016b76:	2301      	movs	r3, #1
 8016b78:	4652      	mov	r2, sl
 8016b7a:	4649      	mov	r1, r9
 8016b7c:	4638      	mov	r0, r7
 8016b7e:	47c0      	blx	r8
 8016b80:	3001      	adds	r0, #1
 8016b82:	d103      	bne.n	8016b8c <_printf_common+0xac>
 8016b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b8c:	3501      	adds	r5, #1
 8016b8e:	e7c6      	b.n	8016b1e <_printf_common+0x3e>
 8016b90:	18e1      	adds	r1, r4, r3
 8016b92:	1c5a      	adds	r2, r3, #1
 8016b94:	2030      	movs	r0, #48	; 0x30
 8016b96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016b9a:	4422      	add	r2, r4
 8016b9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016ba0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016ba4:	3302      	adds	r3, #2
 8016ba6:	e7c7      	b.n	8016b38 <_printf_common+0x58>
 8016ba8:	2301      	movs	r3, #1
 8016baa:	4622      	mov	r2, r4
 8016bac:	4649      	mov	r1, r9
 8016bae:	4638      	mov	r0, r7
 8016bb0:	47c0      	blx	r8
 8016bb2:	3001      	adds	r0, #1
 8016bb4:	d0e6      	beq.n	8016b84 <_printf_common+0xa4>
 8016bb6:	3601      	adds	r6, #1
 8016bb8:	e7d9      	b.n	8016b6e <_printf_common+0x8e>
	...

08016bbc <_printf_i>:
 8016bbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016bc0:	460c      	mov	r4, r1
 8016bc2:	4691      	mov	r9, r2
 8016bc4:	7e27      	ldrb	r7, [r4, #24]
 8016bc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016bc8:	2f78      	cmp	r7, #120	; 0x78
 8016bca:	4680      	mov	r8, r0
 8016bcc:	469a      	mov	sl, r3
 8016bce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016bd2:	d807      	bhi.n	8016be4 <_printf_i+0x28>
 8016bd4:	2f62      	cmp	r7, #98	; 0x62
 8016bd6:	d80a      	bhi.n	8016bee <_printf_i+0x32>
 8016bd8:	2f00      	cmp	r7, #0
 8016bda:	f000 80d8 	beq.w	8016d8e <_printf_i+0x1d2>
 8016bde:	2f58      	cmp	r7, #88	; 0x58
 8016be0:	f000 80a3 	beq.w	8016d2a <_printf_i+0x16e>
 8016be4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016be8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016bec:	e03a      	b.n	8016c64 <_printf_i+0xa8>
 8016bee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016bf2:	2b15      	cmp	r3, #21
 8016bf4:	d8f6      	bhi.n	8016be4 <_printf_i+0x28>
 8016bf6:	a001      	add	r0, pc, #4	; (adr r0, 8016bfc <_printf_i+0x40>)
 8016bf8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016bfc:	08016c55 	.word	0x08016c55
 8016c00:	08016c69 	.word	0x08016c69
 8016c04:	08016be5 	.word	0x08016be5
 8016c08:	08016be5 	.word	0x08016be5
 8016c0c:	08016be5 	.word	0x08016be5
 8016c10:	08016be5 	.word	0x08016be5
 8016c14:	08016c69 	.word	0x08016c69
 8016c18:	08016be5 	.word	0x08016be5
 8016c1c:	08016be5 	.word	0x08016be5
 8016c20:	08016be5 	.word	0x08016be5
 8016c24:	08016be5 	.word	0x08016be5
 8016c28:	08016d75 	.word	0x08016d75
 8016c2c:	08016c99 	.word	0x08016c99
 8016c30:	08016d57 	.word	0x08016d57
 8016c34:	08016be5 	.word	0x08016be5
 8016c38:	08016be5 	.word	0x08016be5
 8016c3c:	08016d97 	.word	0x08016d97
 8016c40:	08016be5 	.word	0x08016be5
 8016c44:	08016c99 	.word	0x08016c99
 8016c48:	08016be5 	.word	0x08016be5
 8016c4c:	08016be5 	.word	0x08016be5
 8016c50:	08016d5f 	.word	0x08016d5f
 8016c54:	680b      	ldr	r3, [r1, #0]
 8016c56:	1d1a      	adds	r2, r3, #4
 8016c58:	681b      	ldr	r3, [r3, #0]
 8016c5a:	600a      	str	r2, [r1, #0]
 8016c5c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016c60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016c64:	2301      	movs	r3, #1
 8016c66:	e0a3      	b.n	8016db0 <_printf_i+0x1f4>
 8016c68:	6825      	ldr	r5, [r4, #0]
 8016c6a:	6808      	ldr	r0, [r1, #0]
 8016c6c:	062e      	lsls	r6, r5, #24
 8016c6e:	f100 0304 	add.w	r3, r0, #4
 8016c72:	d50a      	bpl.n	8016c8a <_printf_i+0xce>
 8016c74:	6805      	ldr	r5, [r0, #0]
 8016c76:	600b      	str	r3, [r1, #0]
 8016c78:	2d00      	cmp	r5, #0
 8016c7a:	da03      	bge.n	8016c84 <_printf_i+0xc8>
 8016c7c:	232d      	movs	r3, #45	; 0x2d
 8016c7e:	426d      	negs	r5, r5
 8016c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016c84:	485e      	ldr	r0, [pc, #376]	; (8016e00 <_printf_i+0x244>)
 8016c86:	230a      	movs	r3, #10
 8016c88:	e019      	b.n	8016cbe <_printf_i+0x102>
 8016c8a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016c8e:	6805      	ldr	r5, [r0, #0]
 8016c90:	600b      	str	r3, [r1, #0]
 8016c92:	bf18      	it	ne
 8016c94:	b22d      	sxthne	r5, r5
 8016c96:	e7ef      	b.n	8016c78 <_printf_i+0xbc>
 8016c98:	680b      	ldr	r3, [r1, #0]
 8016c9a:	6825      	ldr	r5, [r4, #0]
 8016c9c:	1d18      	adds	r0, r3, #4
 8016c9e:	6008      	str	r0, [r1, #0]
 8016ca0:	0628      	lsls	r0, r5, #24
 8016ca2:	d501      	bpl.n	8016ca8 <_printf_i+0xec>
 8016ca4:	681d      	ldr	r5, [r3, #0]
 8016ca6:	e002      	b.n	8016cae <_printf_i+0xf2>
 8016ca8:	0669      	lsls	r1, r5, #25
 8016caa:	d5fb      	bpl.n	8016ca4 <_printf_i+0xe8>
 8016cac:	881d      	ldrh	r5, [r3, #0]
 8016cae:	4854      	ldr	r0, [pc, #336]	; (8016e00 <_printf_i+0x244>)
 8016cb0:	2f6f      	cmp	r7, #111	; 0x6f
 8016cb2:	bf0c      	ite	eq
 8016cb4:	2308      	moveq	r3, #8
 8016cb6:	230a      	movne	r3, #10
 8016cb8:	2100      	movs	r1, #0
 8016cba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016cbe:	6866      	ldr	r6, [r4, #4]
 8016cc0:	60a6      	str	r6, [r4, #8]
 8016cc2:	2e00      	cmp	r6, #0
 8016cc4:	bfa2      	ittt	ge
 8016cc6:	6821      	ldrge	r1, [r4, #0]
 8016cc8:	f021 0104 	bicge.w	r1, r1, #4
 8016ccc:	6021      	strge	r1, [r4, #0]
 8016cce:	b90d      	cbnz	r5, 8016cd4 <_printf_i+0x118>
 8016cd0:	2e00      	cmp	r6, #0
 8016cd2:	d04d      	beq.n	8016d70 <_printf_i+0x1b4>
 8016cd4:	4616      	mov	r6, r2
 8016cd6:	fbb5 f1f3 	udiv	r1, r5, r3
 8016cda:	fb03 5711 	mls	r7, r3, r1, r5
 8016cde:	5dc7      	ldrb	r7, [r0, r7]
 8016ce0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016ce4:	462f      	mov	r7, r5
 8016ce6:	42bb      	cmp	r3, r7
 8016ce8:	460d      	mov	r5, r1
 8016cea:	d9f4      	bls.n	8016cd6 <_printf_i+0x11a>
 8016cec:	2b08      	cmp	r3, #8
 8016cee:	d10b      	bne.n	8016d08 <_printf_i+0x14c>
 8016cf0:	6823      	ldr	r3, [r4, #0]
 8016cf2:	07df      	lsls	r7, r3, #31
 8016cf4:	d508      	bpl.n	8016d08 <_printf_i+0x14c>
 8016cf6:	6923      	ldr	r3, [r4, #16]
 8016cf8:	6861      	ldr	r1, [r4, #4]
 8016cfa:	4299      	cmp	r1, r3
 8016cfc:	bfde      	ittt	le
 8016cfe:	2330      	movle	r3, #48	; 0x30
 8016d00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016d04:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8016d08:	1b92      	subs	r2, r2, r6
 8016d0a:	6122      	str	r2, [r4, #16]
 8016d0c:	f8cd a000 	str.w	sl, [sp]
 8016d10:	464b      	mov	r3, r9
 8016d12:	aa03      	add	r2, sp, #12
 8016d14:	4621      	mov	r1, r4
 8016d16:	4640      	mov	r0, r8
 8016d18:	f7ff fee2 	bl	8016ae0 <_printf_common>
 8016d1c:	3001      	adds	r0, #1
 8016d1e:	d14c      	bne.n	8016dba <_printf_i+0x1fe>
 8016d20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016d24:	b004      	add	sp, #16
 8016d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d2a:	4835      	ldr	r0, [pc, #212]	; (8016e00 <_printf_i+0x244>)
 8016d2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016d30:	6823      	ldr	r3, [r4, #0]
 8016d32:	680e      	ldr	r6, [r1, #0]
 8016d34:	061f      	lsls	r7, r3, #24
 8016d36:	f856 5b04 	ldr.w	r5, [r6], #4
 8016d3a:	600e      	str	r6, [r1, #0]
 8016d3c:	d514      	bpl.n	8016d68 <_printf_i+0x1ac>
 8016d3e:	07d9      	lsls	r1, r3, #31
 8016d40:	bf44      	itt	mi
 8016d42:	f043 0320 	orrmi.w	r3, r3, #32
 8016d46:	6023      	strmi	r3, [r4, #0]
 8016d48:	b91d      	cbnz	r5, 8016d52 <_printf_i+0x196>
 8016d4a:	6823      	ldr	r3, [r4, #0]
 8016d4c:	f023 0320 	bic.w	r3, r3, #32
 8016d50:	6023      	str	r3, [r4, #0]
 8016d52:	2310      	movs	r3, #16
 8016d54:	e7b0      	b.n	8016cb8 <_printf_i+0xfc>
 8016d56:	6823      	ldr	r3, [r4, #0]
 8016d58:	f043 0320 	orr.w	r3, r3, #32
 8016d5c:	6023      	str	r3, [r4, #0]
 8016d5e:	2378      	movs	r3, #120	; 0x78
 8016d60:	4828      	ldr	r0, [pc, #160]	; (8016e04 <_printf_i+0x248>)
 8016d62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016d66:	e7e3      	b.n	8016d30 <_printf_i+0x174>
 8016d68:	065e      	lsls	r6, r3, #25
 8016d6a:	bf48      	it	mi
 8016d6c:	b2ad      	uxthmi	r5, r5
 8016d6e:	e7e6      	b.n	8016d3e <_printf_i+0x182>
 8016d70:	4616      	mov	r6, r2
 8016d72:	e7bb      	b.n	8016cec <_printf_i+0x130>
 8016d74:	680b      	ldr	r3, [r1, #0]
 8016d76:	6826      	ldr	r6, [r4, #0]
 8016d78:	6960      	ldr	r0, [r4, #20]
 8016d7a:	1d1d      	adds	r5, r3, #4
 8016d7c:	600d      	str	r5, [r1, #0]
 8016d7e:	0635      	lsls	r5, r6, #24
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	d501      	bpl.n	8016d88 <_printf_i+0x1cc>
 8016d84:	6018      	str	r0, [r3, #0]
 8016d86:	e002      	b.n	8016d8e <_printf_i+0x1d2>
 8016d88:	0671      	lsls	r1, r6, #25
 8016d8a:	d5fb      	bpl.n	8016d84 <_printf_i+0x1c8>
 8016d8c:	8018      	strh	r0, [r3, #0]
 8016d8e:	2300      	movs	r3, #0
 8016d90:	6123      	str	r3, [r4, #16]
 8016d92:	4616      	mov	r6, r2
 8016d94:	e7ba      	b.n	8016d0c <_printf_i+0x150>
 8016d96:	680b      	ldr	r3, [r1, #0]
 8016d98:	1d1a      	adds	r2, r3, #4
 8016d9a:	600a      	str	r2, [r1, #0]
 8016d9c:	681e      	ldr	r6, [r3, #0]
 8016d9e:	6862      	ldr	r2, [r4, #4]
 8016da0:	2100      	movs	r1, #0
 8016da2:	4630      	mov	r0, r6
 8016da4:	f7e9 fab4 	bl	8000310 <memchr>
 8016da8:	b108      	cbz	r0, 8016dae <_printf_i+0x1f2>
 8016daa:	1b80      	subs	r0, r0, r6
 8016dac:	6060      	str	r0, [r4, #4]
 8016dae:	6863      	ldr	r3, [r4, #4]
 8016db0:	6123      	str	r3, [r4, #16]
 8016db2:	2300      	movs	r3, #0
 8016db4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016db8:	e7a8      	b.n	8016d0c <_printf_i+0x150>
 8016dba:	6923      	ldr	r3, [r4, #16]
 8016dbc:	4632      	mov	r2, r6
 8016dbe:	4649      	mov	r1, r9
 8016dc0:	4640      	mov	r0, r8
 8016dc2:	47d0      	blx	sl
 8016dc4:	3001      	adds	r0, #1
 8016dc6:	d0ab      	beq.n	8016d20 <_printf_i+0x164>
 8016dc8:	6823      	ldr	r3, [r4, #0]
 8016dca:	079b      	lsls	r3, r3, #30
 8016dcc:	d413      	bmi.n	8016df6 <_printf_i+0x23a>
 8016dce:	68e0      	ldr	r0, [r4, #12]
 8016dd0:	9b03      	ldr	r3, [sp, #12]
 8016dd2:	4298      	cmp	r0, r3
 8016dd4:	bfb8      	it	lt
 8016dd6:	4618      	movlt	r0, r3
 8016dd8:	e7a4      	b.n	8016d24 <_printf_i+0x168>
 8016dda:	2301      	movs	r3, #1
 8016ddc:	4632      	mov	r2, r6
 8016dde:	4649      	mov	r1, r9
 8016de0:	4640      	mov	r0, r8
 8016de2:	47d0      	blx	sl
 8016de4:	3001      	adds	r0, #1
 8016de6:	d09b      	beq.n	8016d20 <_printf_i+0x164>
 8016de8:	3501      	adds	r5, #1
 8016dea:	68e3      	ldr	r3, [r4, #12]
 8016dec:	9903      	ldr	r1, [sp, #12]
 8016dee:	1a5b      	subs	r3, r3, r1
 8016df0:	42ab      	cmp	r3, r5
 8016df2:	dcf2      	bgt.n	8016dda <_printf_i+0x21e>
 8016df4:	e7eb      	b.n	8016dce <_printf_i+0x212>
 8016df6:	2500      	movs	r5, #0
 8016df8:	f104 0619 	add.w	r6, r4, #25
 8016dfc:	e7f5      	b.n	8016dea <_printf_i+0x22e>
 8016dfe:	bf00      	nop
 8016e00:	0802bb3d 	.word	0x0802bb3d
 8016e04:	0802bb4e 	.word	0x0802bb4e

08016e08 <_sbrk_r>:
 8016e08:	b538      	push	{r3, r4, r5, lr}
 8016e0a:	4d06      	ldr	r5, [pc, #24]	; (8016e24 <_sbrk_r+0x1c>)
 8016e0c:	2300      	movs	r3, #0
 8016e0e:	4604      	mov	r4, r0
 8016e10:	4608      	mov	r0, r1
 8016e12:	602b      	str	r3, [r5, #0]
 8016e14:	f000 fb58 	bl	80174c8 <_sbrk>
 8016e18:	1c43      	adds	r3, r0, #1
 8016e1a:	d102      	bne.n	8016e22 <_sbrk_r+0x1a>
 8016e1c:	682b      	ldr	r3, [r5, #0]
 8016e1e:	b103      	cbz	r3, 8016e22 <_sbrk_r+0x1a>
 8016e20:	6023      	str	r3, [r4, #0]
 8016e22:	bd38      	pop	{r3, r4, r5, pc}
 8016e24:	2400a7a0 	.word	0x2400a7a0

08016e28 <__sread>:
 8016e28:	b510      	push	{r4, lr}
 8016e2a:	460c      	mov	r4, r1
 8016e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e30:	f000 fa92 	bl	8017358 <_read_r>
 8016e34:	2800      	cmp	r0, #0
 8016e36:	bfab      	itete	ge
 8016e38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8016e3c:	181b      	addge	r3, r3, r0
 8016e3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016e42:	bfac      	ite	ge
 8016e44:	6563      	strge	r3, [r4, #84]	; 0x54
 8016e46:	81a3      	strhlt	r3, [r4, #12]
 8016e48:	bd10      	pop	{r4, pc}

08016e4a <__swrite>:
 8016e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e4e:	461f      	mov	r7, r3
 8016e50:	898b      	ldrh	r3, [r1, #12]
 8016e52:	05db      	lsls	r3, r3, #23
 8016e54:	4605      	mov	r5, r0
 8016e56:	460c      	mov	r4, r1
 8016e58:	4616      	mov	r6, r2
 8016e5a:	d505      	bpl.n	8016e68 <__swrite+0x1e>
 8016e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e60:	2302      	movs	r3, #2
 8016e62:	2200      	movs	r2, #0
 8016e64:	f000 f9d0 	bl	8017208 <_lseek_r>
 8016e68:	89a3      	ldrh	r3, [r4, #12]
 8016e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e72:	81a3      	strh	r3, [r4, #12]
 8016e74:	4632      	mov	r2, r6
 8016e76:	463b      	mov	r3, r7
 8016e78:	4628      	mov	r0, r5
 8016e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016e7e:	f000 b869 	b.w	8016f54 <_write_r>

08016e82 <__sseek>:
 8016e82:	b510      	push	{r4, lr}
 8016e84:	460c      	mov	r4, r1
 8016e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e8a:	f000 f9bd 	bl	8017208 <_lseek_r>
 8016e8e:	1c43      	adds	r3, r0, #1
 8016e90:	89a3      	ldrh	r3, [r4, #12]
 8016e92:	bf15      	itete	ne
 8016e94:	6560      	strne	r0, [r4, #84]	; 0x54
 8016e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016e9e:	81a3      	strheq	r3, [r4, #12]
 8016ea0:	bf18      	it	ne
 8016ea2:	81a3      	strhne	r3, [r4, #12]
 8016ea4:	bd10      	pop	{r4, pc}

08016ea6 <__sclose>:
 8016ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016eaa:	f000 b8db 	b.w	8017064 <_close_r>
	...

08016eb0 <__swbuf_r>:
 8016eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016eb2:	460e      	mov	r6, r1
 8016eb4:	4614      	mov	r4, r2
 8016eb6:	4605      	mov	r5, r0
 8016eb8:	b118      	cbz	r0, 8016ec2 <__swbuf_r+0x12>
 8016eba:	6983      	ldr	r3, [r0, #24]
 8016ebc:	b90b      	cbnz	r3, 8016ec2 <__swbuf_r+0x12>
 8016ebe:	f7ff f9f5 	bl	80162ac <__sinit>
 8016ec2:	4b21      	ldr	r3, [pc, #132]	; (8016f48 <__swbuf_r+0x98>)
 8016ec4:	429c      	cmp	r4, r3
 8016ec6:	d12b      	bne.n	8016f20 <__swbuf_r+0x70>
 8016ec8:	686c      	ldr	r4, [r5, #4]
 8016eca:	69a3      	ldr	r3, [r4, #24]
 8016ecc:	60a3      	str	r3, [r4, #8]
 8016ece:	89a3      	ldrh	r3, [r4, #12]
 8016ed0:	071a      	lsls	r2, r3, #28
 8016ed2:	d52f      	bpl.n	8016f34 <__swbuf_r+0x84>
 8016ed4:	6923      	ldr	r3, [r4, #16]
 8016ed6:	b36b      	cbz	r3, 8016f34 <__swbuf_r+0x84>
 8016ed8:	6923      	ldr	r3, [r4, #16]
 8016eda:	6820      	ldr	r0, [r4, #0]
 8016edc:	1ac0      	subs	r0, r0, r3
 8016ede:	6963      	ldr	r3, [r4, #20]
 8016ee0:	b2f6      	uxtb	r6, r6
 8016ee2:	4283      	cmp	r3, r0
 8016ee4:	4637      	mov	r7, r6
 8016ee6:	dc04      	bgt.n	8016ef2 <__swbuf_r+0x42>
 8016ee8:	4621      	mov	r1, r4
 8016eea:	4628      	mov	r0, r5
 8016eec:	f000 f950 	bl	8017190 <_fflush_r>
 8016ef0:	bb30      	cbnz	r0, 8016f40 <__swbuf_r+0x90>
 8016ef2:	68a3      	ldr	r3, [r4, #8]
 8016ef4:	3b01      	subs	r3, #1
 8016ef6:	60a3      	str	r3, [r4, #8]
 8016ef8:	6823      	ldr	r3, [r4, #0]
 8016efa:	1c5a      	adds	r2, r3, #1
 8016efc:	6022      	str	r2, [r4, #0]
 8016efe:	701e      	strb	r6, [r3, #0]
 8016f00:	6963      	ldr	r3, [r4, #20]
 8016f02:	3001      	adds	r0, #1
 8016f04:	4283      	cmp	r3, r0
 8016f06:	d004      	beq.n	8016f12 <__swbuf_r+0x62>
 8016f08:	89a3      	ldrh	r3, [r4, #12]
 8016f0a:	07db      	lsls	r3, r3, #31
 8016f0c:	d506      	bpl.n	8016f1c <__swbuf_r+0x6c>
 8016f0e:	2e0a      	cmp	r6, #10
 8016f10:	d104      	bne.n	8016f1c <__swbuf_r+0x6c>
 8016f12:	4621      	mov	r1, r4
 8016f14:	4628      	mov	r0, r5
 8016f16:	f000 f93b 	bl	8017190 <_fflush_r>
 8016f1a:	b988      	cbnz	r0, 8016f40 <__swbuf_r+0x90>
 8016f1c:	4638      	mov	r0, r7
 8016f1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f20:	4b0a      	ldr	r3, [pc, #40]	; (8016f4c <__swbuf_r+0x9c>)
 8016f22:	429c      	cmp	r4, r3
 8016f24:	d101      	bne.n	8016f2a <__swbuf_r+0x7a>
 8016f26:	68ac      	ldr	r4, [r5, #8]
 8016f28:	e7cf      	b.n	8016eca <__swbuf_r+0x1a>
 8016f2a:	4b09      	ldr	r3, [pc, #36]	; (8016f50 <__swbuf_r+0xa0>)
 8016f2c:	429c      	cmp	r4, r3
 8016f2e:	bf08      	it	eq
 8016f30:	68ec      	ldreq	r4, [r5, #12]
 8016f32:	e7ca      	b.n	8016eca <__swbuf_r+0x1a>
 8016f34:	4621      	mov	r1, r4
 8016f36:	4628      	mov	r0, r5
 8016f38:	f000 f81e 	bl	8016f78 <__swsetup_r>
 8016f3c:	2800      	cmp	r0, #0
 8016f3e:	d0cb      	beq.n	8016ed8 <__swbuf_r+0x28>
 8016f40:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8016f44:	e7ea      	b.n	8016f1c <__swbuf_r+0x6c>
 8016f46:	bf00      	nop
 8016f48:	0802baec 	.word	0x0802baec
 8016f4c:	0802bb0c 	.word	0x0802bb0c
 8016f50:	0802bacc 	.word	0x0802bacc

08016f54 <_write_r>:
 8016f54:	b538      	push	{r3, r4, r5, lr}
 8016f56:	4d07      	ldr	r5, [pc, #28]	; (8016f74 <_write_r+0x20>)
 8016f58:	4604      	mov	r4, r0
 8016f5a:	4608      	mov	r0, r1
 8016f5c:	4611      	mov	r1, r2
 8016f5e:	2200      	movs	r2, #0
 8016f60:	602a      	str	r2, [r5, #0]
 8016f62:	461a      	mov	r2, r3
 8016f64:	f000 fabe 	bl	80174e4 <_write>
 8016f68:	1c43      	adds	r3, r0, #1
 8016f6a:	d102      	bne.n	8016f72 <_write_r+0x1e>
 8016f6c:	682b      	ldr	r3, [r5, #0]
 8016f6e:	b103      	cbz	r3, 8016f72 <_write_r+0x1e>
 8016f70:	6023      	str	r3, [r4, #0]
 8016f72:	bd38      	pop	{r3, r4, r5, pc}
 8016f74:	2400a7a0 	.word	0x2400a7a0

08016f78 <__swsetup_r>:
 8016f78:	4b32      	ldr	r3, [pc, #200]	; (8017044 <__swsetup_r+0xcc>)
 8016f7a:	b570      	push	{r4, r5, r6, lr}
 8016f7c:	681d      	ldr	r5, [r3, #0]
 8016f7e:	4606      	mov	r6, r0
 8016f80:	460c      	mov	r4, r1
 8016f82:	b125      	cbz	r5, 8016f8e <__swsetup_r+0x16>
 8016f84:	69ab      	ldr	r3, [r5, #24]
 8016f86:	b913      	cbnz	r3, 8016f8e <__swsetup_r+0x16>
 8016f88:	4628      	mov	r0, r5
 8016f8a:	f7ff f98f 	bl	80162ac <__sinit>
 8016f8e:	4b2e      	ldr	r3, [pc, #184]	; (8017048 <__swsetup_r+0xd0>)
 8016f90:	429c      	cmp	r4, r3
 8016f92:	d10f      	bne.n	8016fb4 <__swsetup_r+0x3c>
 8016f94:	686c      	ldr	r4, [r5, #4]
 8016f96:	89a3      	ldrh	r3, [r4, #12]
 8016f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016f9c:	0719      	lsls	r1, r3, #28
 8016f9e:	d42c      	bmi.n	8016ffa <__swsetup_r+0x82>
 8016fa0:	06dd      	lsls	r5, r3, #27
 8016fa2:	d411      	bmi.n	8016fc8 <__swsetup_r+0x50>
 8016fa4:	2309      	movs	r3, #9
 8016fa6:	6033      	str	r3, [r6, #0]
 8016fa8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016fac:	81a3      	strh	r3, [r4, #12]
 8016fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016fb2:	e03e      	b.n	8017032 <__swsetup_r+0xba>
 8016fb4:	4b25      	ldr	r3, [pc, #148]	; (801704c <__swsetup_r+0xd4>)
 8016fb6:	429c      	cmp	r4, r3
 8016fb8:	d101      	bne.n	8016fbe <__swsetup_r+0x46>
 8016fba:	68ac      	ldr	r4, [r5, #8]
 8016fbc:	e7eb      	b.n	8016f96 <__swsetup_r+0x1e>
 8016fbe:	4b24      	ldr	r3, [pc, #144]	; (8017050 <__swsetup_r+0xd8>)
 8016fc0:	429c      	cmp	r4, r3
 8016fc2:	bf08      	it	eq
 8016fc4:	68ec      	ldreq	r4, [r5, #12]
 8016fc6:	e7e6      	b.n	8016f96 <__swsetup_r+0x1e>
 8016fc8:	0758      	lsls	r0, r3, #29
 8016fca:	d512      	bpl.n	8016ff2 <__swsetup_r+0x7a>
 8016fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fce:	b141      	cbz	r1, 8016fe2 <__swsetup_r+0x6a>
 8016fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016fd4:	4299      	cmp	r1, r3
 8016fd6:	d002      	beq.n	8016fde <__swsetup_r+0x66>
 8016fd8:	4630      	mov	r0, r6
 8016fda:	f7ff fa21 	bl	8016420 <_free_r>
 8016fde:	2300      	movs	r3, #0
 8016fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8016fe2:	89a3      	ldrh	r3, [r4, #12]
 8016fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016fe8:	81a3      	strh	r3, [r4, #12]
 8016fea:	2300      	movs	r3, #0
 8016fec:	6063      	str	r3, [r4, #4]
 8016fee:	6923      	ldr	r3, [r4, #16]
 8016ff0:	6023      	str	r3, [r4, #0]
 8016ff2:	89a3      	ldrh	r3, [r4, #12]
 8016ff4:	f043 0308 	orr.w	r3, r3, #8
 8016ff8:	81a3      	strh	r3, [r4, #12]
 8016ffa:	6923      	ldr	r3, [r4, #16]
 8016ffc:	b94b      	cbnz	r3, 8017012 <__swsetup_r+0x9a>
 8016ffe:	89a3      	ldrh	r3, [r4, #12]
 8017000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017008:	d003      	beq.n	8017012 <__swsetup_r+0x9a>
 801700a:	4621      	mov	r1, r4
 801700c:	4630      	mov	r0, r6
 801700e:	f000 f931 	bl	8017274 <__smakebuf_r>
 8017012:	89a0      	ldrh	r0, [r4, #12]
 8017014:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017018:	f010 0301 	ands.w	r3, r0, #1
 801701c:	d00a      	beq.n	8017034 <__swsetup_r+0xbc>
 801701e:	2300      	movs	r3, #0
 8017020:	60a3      	str	r3, [r4, #8]
 8017022:	6963      	ldr	r3, [r4, #20]
 8017024:	425b      	negs	r3, r3
 8017026:	61a3      	str	r3, [r4, #24]
 8017028:	6923      	ldr	r3, [r4, #16]
 801702a:	b943      	cbnz	r3, 801703e <__swsetup_r+0xc6>
 801702c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017030:	d1ba      	bne.n	8016fa8 <__swsetup_r+0x30>
 8017032:	bd70      	pop	{r4, r5, r6, pc}
 8017034:	0781      	lsls	r1, r0, #30
 8017036:	bf58      	it	pl
 8017038:	6963      	ldrpl	r3, [r4, #20]
 801703a:	60a3      	str	r3, [r4, #8]
 801703c:	e7f4      	b.n	8017028 <__swsetup_r+0xb0>
 801703e:	2000      	movs	r0, #0
 8017040:	e7f7      	b.n	8017032 <__swsetup_r+0xba>
 8017042:	bf00      	nop
 8017044:	24000050 	.word	0x24000050
 8017048:	0802baec 	.word	0x0802baec
 801704c:	0802bb0c 	.word	0x0802bb0c
 8017050:	0802bacc 	.word	0x0802bacc

08017054 <abort>:
 8017054:	b508      	push	{r3, lr}
 8017056:	2006      	movs	r0, #6
 8017058:	f000 f9b8 	bl	80173cc <raise>
 801705c:	2001      	movs	r0, #1
 801705e:	f000 fa49 	bl	80174f4 <_exit>
	...

08017064 <_close_r>:
 8017064:	b538      	push	{r3, r4, r5, lr}
 8017066:	4d06      	ldr	r5, [pc, #24]	; (8017080 <_close_r+0x1c>)
 8017068:	2300      	movs	r3, #0
 801706a:	4604      	mov	r4, r0
 801706c:	4608      	mov	r0, r1
 801706e:	602b      	str	r3, [r5, #0]
 8017070:	f000 f9f2 	bl	8017458 <_close>
 8017074:	1c43      	adds	r3, r0, #1
 8017076:	d102      	bne.n	801707e <_close_r+0x1a>
 8017078:	682b      	ldr	r3, [r5, #0]
 801707a:	b103      	cbz	r3, 801707e <_close_r+0x1a>
 801707c:	6023      	str	r3, [r4, #0]
 801707e:	bd38      	pop	{r3, r4, r5, pc}
 8017080:	2400a7a0 	.word	0x2400a7a0

08017084 <__sflush_r>:
 8017084:	898a      	ldrh	r2, [r1, #12]
 8017086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801708a:	4605      	mov	r5, r0
 801708c:	0710      	lsls	r0, r2, #28
 801708e:	460c      	mov	r4, r1
 8017090:	d458      	bmi.n	8017144 <__sflush_r+0xc0>
 8017092:	684b      	ldr	r3, [r1, #4]
 8017094:	2b00      	cmp	r3, #0
 8017096:	dc05      	bgt.n	80170a4 <__sflush_r+0x20>
 8017098:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801709a:	2b00      	cmp	r3, #0
 801709c:	dc02      	bgt.n	80170a4 <__sflush_r+0x20>
 801709e:	2000      	movs	r0, #0
 80170a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80170a6:	2e00      	cmp	r6, #0
 80170a8:	d0f9      	beq.n	801709e <__sflush_r+0x1a>
 80170aa:	2300      	movs	r3, #0
 80170ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80170b0:	682f      	ldr	r7, [r5, #0]
 80170b2:	602b      	str	r3, [r5, #0]
 80170b4:	d032      	beq.n	801711c <__sflush_r+0x98>
 80170b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80170b8:	89a3      	ldrh	r3, [r4, #12]
 80170ba:	075a      	lsls	r2, r3, #29
 80170bc:	d505      	bpl.n	80170ca <__sflush_r+0x46>
 80170be:	6863      	ldr	r3, [r4, #4]
 80170c0:	1ac0      	subs	r0, r0, r3
 80170c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80170c4:	b10b      	cbz	r3, 80170ca <__sflush_r+0x46>
 80170c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80170c8:	1ac0      	subs	r0, r0, r3
 80170ca:	2300      	movs	r3, #0
 80170cc:	4602      	mov	r2, r0
 80170ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80170d0:	6a21      	ldr	r1, [r4, #32]
 80170d2:	4628      	mov	r0, r5
 80170d4:	47b0      	blx	r6
 80170d6:	1c43      	adds	r3, r0, #1
 80170d8:	89a3      	ldrh	r3, [r4, #12]
 80170da:	d106      	bne.n	80170ea <__sflush_r+0x66>
 80170dc:	6829      	ldr	r1, [r5, #0]
 80170de:	291d      	cmp	r1, #29
 80170e0:	d82c      	bhi.n	801713c <__sflush_r+0xb8>
 80170e2:	4a2a      	ldr	r2, [pc, #168]	; (801718c <__sflush_r+0x108>)
 80170e4:	40ca      	lsrs	r2, r1
 80170e6:	07d6      	lsls	r6, r2, #31
 80170e8:	d528      	bpl.n	801713c <__sflush_r+0xb8>
 80170ea:	2200      	movs	r2, #0
 80170ec:	6062      	str	r2, [r4, #4]
 80170ee:	04d9      	lsls	r1, r3, #19
 80170f0:	6922      	ldr	r2, [r4, #16]
 80170f2:	6022      	str	r2, [r4, #0]
 80170f4:	d504      	bpl.n	8017100 <__sflush_r+0x7c>
 80170f6:	1c42      	adds	r2, r0, #1
 80170f8:	d101      	bne.n	80170fe <__sflush_r+0x7a>
 80170fa:	682b      	ldr	r3, [r5, #0]
 80170fc:	b903      	cbnz	r3, 8017100 <__sflush_r+0x7c>
 80170fe:	6560      	str	r0, [r4, #84]	; 0x54
 8017100:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017102:	602f      	str	r7, [r5, #0]
 8017104:	2900      	cmp	r1, #0
 8017106:	d0ca      	beq.n	801709e <__sflush_r+0x1a>
 8017108:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801710c:	4299      	cmp	r1, r3
 801710e:	d002      	beq.n	8017116 <__sflush_r+0x92>
 8017110:	4628      	mov	r0, r5
 8017112:	f7ff f985 	bl	8016420 <_free_r>
 8017116:	2000      	movs	r0, #0
 8017118:	6360      	str	r0, [r4, #52]	; 0x34
 801711a:	e7c1      	b.n	80170a0 <__sflush_r+0x1c>
 801711c:	6a21      	ldr	r1, [r4, #32]
 801711e:	2301      	movs	r3, #1
 8017120:	4628      	mov	r0, r5
 8017122:	47b0      	blx	r6
 8017124:	1c41      	adds	r1, r0, #1
 8017126:	d1c7      	bne.n	80170b8 <__sflush_r+0x34>
 8017128:	682b      	ldr	r3, [r5, #0]
 801712a:	2b00      	cmp	r3, #0
 801712c:	d0c4      	beq.n	80170b8 <__sflush_r+0x34>
 801712e:	2b1d      	cmp	r3, #29
 8017130:	d001      	beq.n	8017136 <__sflush_r+0xb2>
 8017132:	2b16      	cmp	r3, #22
 8017134:	d101      	bne.n	801713a <__sflush_r+0xb6>
 8017136:	602f      	str	r7, [r5, #0]
 8017138:	e7b1      	b.n	801709e <__sflush_r+0x1a>
 801713a:	89a3      	ldrh	r3, [r4, #12]
 801713c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017140:	81a3      	strh	r3, [r4, #12]
 8017142:	e7ad      	b.n	80170a0 <__sflush_r+0x1c>
 8017144:	690f      	ldr	r7, [r1, #16]
 8017146:	2f00      	cmp	r7, #0
 8017148:	d0a9      	beq.n	801709e <__sflush_r+0x1a>
 801714a:	0793      	lsls	r3, r2, #30
 801714c:	680e      	ldr	r6, [r1, #0]
 801714e:	bf08      	it	eq
 8017150:	694b      	ldreq	r3, [r1, #20]
 8017152:	600f      	str	r7, [r1, #0]
 8017154:	bf18      	it	ne
 8017156:	2300      	movne	r3, #0
 8017158:	eba6 0807 	sub.w	r8, r6, r7
 801715c:	608b      	str	r3, [r1, #8]
 801715e:	f1b8 0f00 	cmp.w	r8, #0
 8017162:	dd9c      	ble.n	801709e <__sflush_r+0x1a>
 8017164:	6a21      	ldr	r1, [r4, #32]
 8017166:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017168:	4643      	mov	r3, r8
 801716a:	463a      	mov	r2, r7
 801716c:	4628      	mov	r0, r5
 801716e:	47b0      	blx	r6
 8017170:	2800      	cmp	r0, #0
 8017172:	dc06      	bgt.n	8017182 <__sflush_r+0xfe>
 8017174:	89a3      	ldrh	r3, [r4, #12]
 8017176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801717a:	81a3      	strh	r3, [r4, #12]
 801717c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017180:	e78e      	b.n	80170a0 <__sflush_r+0x1c>
 8017182:	4407      	add	r7, r0
 8017184:	eba8 0800 	sub.w	r8, r8, r0
 8017188:	e7e9      	b.n	801715e <__sflush_r+0xda>
 801718a:	bf00      	nop
 801718c:	20400001 	.word	0x20400001

08017190 <_fflush_r>:
 8017190:	b538      	push	{r3, r4, r5, lr}
 8017192:	690b      	ldr	r3, [r1, #16]
 8017194:	4605      	mov	r5, r0
 8017196:	460c      	mov	r4, r1
 8017198:	b913      	cbnz	r3, 80171a0 <_fflush_r+0x10>
 801719a:	2500      	movs	r5, #0
 801719c:	4628      	mov	r0, r5
 801719e:	bd38      	pop	{r3, r4, r5, pc}
 80171a0:	b118      	cbz	r0, 80171aa <_fflush_r+0x1a>
 80171a2:	6983      	ldr	r3, [r0, #24]
 80171a4:	b90b      	cbnz	r3, 80171aa <_fflush_r+0x1a>
 80171a6:	f7ff f881 	bl	80162ac <__sinit>
 80171aa:	4b14      	ldr	r3, [pc, #80]	; (80171fc <_fflush_r+0x6c>)
 80171ac:	429c      	cmp	r4, r3
 80171ae:	d11b      	bne.n	80171e8 <_fflush_r+0x58>
 80171b0:	686c      	ldr	r4, [r5, #4]
 80171b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171b6:	2b00      	cmp	r3, #0
 80171b8:	d0ef      	beq.n	801719a <_fflush_r+0xa>
 80171ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80171bc:	07d0      	lsls	r0, r2, #31
 80171be:	d404      	bmi.n	80171ca <_fflush_r+0x3a>
 80171c0:	0599      	lsls	r1, r3, #22
 80171c2:	d402      	bmi.n	80171ca <_fflush_r+0x3a>
 80171c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80171c6:	f7ff f921 	bl	801640c <__retarget_lock_acquire_recursive>
 80171ca:	4628      	mov	r0, r5
 80171cc:	4621      	mov	r1, r4
 80171ce:	f7ff ff59 	bl	8017084 <__sflush_r>
 80171d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80171d4:	07da      	lsls	r2, r3, #31
 80171d6:	4605      	mov	r5, r0
 80171d8:	d4e0      	bmi.n	801719c <_fflush_r+0xc>
 80171da:	89a3      	ldrh	r3, [r4, #12]
 80171dc:	059b      	lsls	r3, r3, #22
 80171de:	d4dd      	bmi.n	801719c <_fflush_r+0xc>
 80171e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80171e2:	f7ff f914 	bl	801640e <__retarget_lock_release_recursive>
 80171e6:	e7d9      	b.n	801719c <_fflush_r+0xc>
 80171e8:	4b05      	ldr	r3, [pc, #20]	; (8017200 <_fflush_r+0x70>)
 80171ea:	429c      	cmp	r4, r3
 80171ec:	d101      	bne.n	80171f2 <_fflush_r+0x62>
 80171ee:	68ac      	ldr	r4, [r5, #8]
 80171f0:	e7df      	b.n	80171b2 <_fflush_r+0x22>
 80171f2:	4b04      	ldr	r3, [pc, #16]	; (8017204 <_fflush_r+0x74>)
 80171f4:	429c      	cmp	r4, r3
 80171f6:	bf08      	it	eq
 80171f8:	68ec      	ldreq	r4, [r5, #12]
 80171fa:	e7da      	b.n	80171b2 <_fflush_r+0x22>
 80171fc:	0802baec 	.word	0x0802baec
 8017200:	0802bb0c 	.word	0x0802bb0c
 8017204:	0802bacc 	.word	0x0802bacc

08017208 <_lseek_r>:
 8017208:	b538      	push	{r3, r4, r5, lr}
 801720a:	4d07      	ldr	r5, [pc, #28]	; (8017228 <_lseek_r+0x20>)
 801720c:	4604      	mov	r4, r0
 801720e:	4608      	mov	r0, r1
 8017210:	4611      	mov	r1, r2
 8017212:	2200      	movs	r2, #0
 8017214:	602a      	str	r2, [r5, #0]
 8017216:	461a      	mov	r2, r3
 8017218:	f000 f946 	bl	80174a8 <_lseek>
 801721c:	1c43      	adds	r3, r0, #1
 801721e:	d102      	bne.n	8017226 <_lseek_r+0x1e>
 8017220:	682b      	ldr	r3, [r5, #0]
 8017222:	b103      	cbz	r3, 8017226 <_lseek_r+0x1e>
 8017224:	6023      	str	r3, [r4, #0]
 8017226:	bd38      	pop	{r3, r4, r5, pc}
 8017228:	2400a7a0 	.word	0x2400a7a0

0801722c <__swhatbuf_r>:
 801722c:	b570      	push	{r4, r5, r6, lr}
 801722e:	460e      	mov	r6, r1
 8017230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017234:	2900      	cmp	r1, #0
 8017236:	b096      	sub	sp, #88	; 0x58
 8017238:	4614      	mov	r4, r2
 801723a:	461d      	mov	r5, r3
 801723c:	da07      	bge.n	801724e <__swhatbuf_r+0x22>
 801723e:	2300      	movs	r3, #0
 8017240:	602b      	str	r3, [r5, #0]
 8017242:	89b3      	ldrh	r3, [r6, #12]
 8017244:	061a      	lsls	r2, r3, #24
 8017246:	d410      	bmi.n	801726a <__swhatbuf_r+0x3e>
 8017248:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801724c:	e00e      	b.n	801726c <__swhatbuf_r+0x40>
 801724e:	466a      	mov	r2, sp
 8017250:	f000 f8d8 	bl	8017404 <_fstat_r>
 8017254:	2800      	cmp	r0, #0
 8017256:	dbf2      	blt.n	801723e <__swhatbuf_r+0x12>
 8017258:	9a01      	ldr	r2, [sp, #4]
 801725a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801725e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017262:	425a      	negs	r2, r3
 8017264:	415a      	adcs	r2, r3
 8017266:	602a      	str	r2, [r5, #0]
 8017268:	e7ee      	b.n	8017248 <__swhatbuf_r+0x1c>
 801726a:	2340      	movs	r3, #64	; 0x40
 801726c:	2000      	movs	r0, #0
 801726e:	6023      	str	r3, [r4, #0]
 8017270:	b016      	add	sp, #88	; 0x58
 8017272:	bd70      	pop	{r4, r5, r6, pc}

08017274 <__smakebuf_r>:
 8017274:	898b      	ldrh	r3, [r1, #12]
 8017276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017278:	079d      	lsls	r5, r3, #30
 801727a:	4606      	mov	r6, r0
 801727c:	460c      	mov	r4, r1
 801727e:	d507      	bpl.n	8017290 <__smakebuf_r+0x1c>
 8017280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017284:	6023      	str	r3, [r4, #0]
 8017286:	6123      	str	r3, [r4, #16]
 8017288:	2301      	movs	r3, #1
 801728a:	6163      	str	r3, [r4, #20]
 801728c:	b002      	add	sp, #8
 801728e:	bd70      	pop	{r4, r5, r6, pc}
 8017290:	ab01      	add	r3, sp, #4
 8017292:	466a      	mov	r2, sp
 8017294:	f7ff ffca 	bl	801722c <__swhatbuf_r>
 8017298:	9900      	ldr	r1, [sp, #0]
 801729a:	4605      	mov	r5, r0
 801729c:	4630      	mov	r0, r6
 801729e:	f7ff f90f 	bl	80164c0 <_malloc_r>
 80172a2:	b948      	cbnz	r0, 80172b8 <__smakebuf_r+0x44>
 80172a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80172a8:	059a      	lsls	r2, r3, #22
 80172aa:	d4ef      	bmi.n	801728c <__smakebuf_r+0x18>
 80172ac:	f023 0303 	bic.w	r3, r3, #3
 80172b0:	f043 0302 	orr.w	r3, r3, #2
 80172b4:	81a3      	strh	r3, [r4, #12]
 80172b6:	e7e3      	b.n	8017280 <__smakebuf_r+0xc>
 80172b8:	4b0d      	ldr	r3, [pc, #52]	; (80172f0 <__smakebuf_r+0x7c>)
 80172ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80172bc:	89a3      	ldrh	r3, [r4, #12]
 80172be:	6020      	str	r0, [r4, #0]
 80172c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80172c4:	81a3      	strh	r3, [r4, #12]
 80172c6:	9b00      	ldr	r3, [sp, #0]
 80172c8:	6163      	str	r3, [r4, #20]
 80172ca:	9b01      	ldr	r3, [sp, #4]
 80172cc:	6120      	str	r0, [r4, #16]
 80172ce:	b15b      	cbz	r3, 80172e8 <__smakebuf_r+0x74>
 80172d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172d4:	4630      	mov	r0, r6
 80172d6:	f000 f8a7 	bl	8017428 <_isatty_r>
 80172da:	b128      	cbz	r0, 80172e8 <__smakebuf_r+0x74>
 80172dc:	89a3      	ldrh	r3, [r4, #12]
 80172de:	f023 0303 	bic.w	r3, r3, #3
 80172e2:	f043 0301 	orr.w	r3, r3, #1
 80172e6:	81a3      	strh	r3, [r4, #12]
 80172e8:	89a0      	ldrh	r0, [r4, #12]
 80172ea:	4305      	orrs	r5, r0
 80172ec:	81a5      	strh	r5, [r4, #12]
 80172ee:	e7cd      	b.n	801728c <__smakebuf_r+0x18>
 80172f0:	08016245 	.word	0x08016245

080172f4 <__malloc_lock>:
 80172f4:	4801      	ldr	r0, [pc, #4]	; (80172fc <__malloc_lock+0x8>)
 80172f6:	f7ff b889 	b.w	801640c <__retarget_lock_acquire_recursive>
 80172fa:	bf00      	nop
 80172fc:	2400a7ac 	.word	0x2400a7ac

08017300 <__malloc_unlock>:
 8017300:	4801      	ldr	r0, [pc, #4]	; (8017308 <__malloc_unlock+0x8>)
 8017302:	f7ff b884 	b.w	801640e <__retarget_lock_release_recursive>
 8017306:	bf00      	nop
 8017308:	2400a7ac 	.word	0x2400a7ac

0801730c <_realloc_r>:
 801730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801730e:	4607      	mov	r7, r0
 8017310:	4614      	mov	r4, r2
 8017312:	460e      	mov	r6, r1
 8017314:	b921      	cbnz	r1, 8017320 <_realloc_r+0x14>
 8017316:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801731a:	4611      	mov	r1, r2
 801731c:	f7ff b8d0 	b.w	80164c0 <_malloc_r>
 8017320:	b922      	cbnz	r2, 801732c <_realloc_r+0x20>
 8017322:	f7ff f87d 	bl	8016420 <_free_r>
 8017326:	4625      	mov	r5, r4
 8017328:	4628      	mov	r0, r5
 801732a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801732c:	f000 f88c 	bl	8017448 <_malloc_usable_size_r>
 8017330:	42a0      	cmp	r0, r4
 8017332:	d20f      	bcs.n	8017354 <_realloc_r+0x48>
 8017334:	4621      	mov	r1, r4
 8017336:	4638      	mov	r0, r7
 8017338:	f7ff f8c2 	bl	80164c0 <_malloc_r>
 801733c:	4605      	mov	r5, r0
 801733e:	2800      	cmp	r0, #0
 8017340:	d0f2      	beq.n	8017328 <_realloc_r+0x1c>
 8017342:	4631      	mov	r1, r6
 8017344:	4622      	mov	r2, r4
 8017346:	f7fe fe69 	bl	801601c <memcpy>
 801734a:	4631      	mov	r1, r6
 801734c:	4638      	mov	r0, r7
 801734e:	f7ff f867 	bl	8016420 <_free_r>
 8017352:	e7e9      	b.n	8017328 <_realloc_r+0x1c>
 8017354:	4635      	mov	r5, r6
 8017356:	e7e7      	b.n	8017328 <_realloc_r+0x1c>

08017358 <_read_r>:
 8017358:	b538      	push	{r3, r4, r5, lr}
 801735a:	4d07      	ldr	r5, [pc, #28]	; (8017378 <_read_r+0x20>)
 801735c:	4604      	mov	r4, r0
 801735e:	4608      	mov	r0, r1
 8017360:	4611      	mov	r1, r2
 8017362:	2200      	movs	r2, #0
 8017364:	602a      	str	r2, [r5, #0]
 8017366:	461a      	mov	r2, r3
 8017368:	f000 f8a6 	bl	80174b8 <_read>
 801736c:	1c43      	adds	r3, r0, #1
 801736e:	d102      	bne.n	8017376 <_read_r+0x1e>
 8017370:	682b      	ldr	r3, [r5, #0]
 8017372:	b103      	cbz	r3, 8017376 <_read_r+0x1e>
 8017374:	6023      	str	r3, [r4, #0]
 8017376:	bd38      	pop	{r3, r4, r5, pc}
 8017378:	2400a7a0 	.word	0x2400a7a0

0801737c <_raise_r>:
 801737c:	291f      	cmp	r1, #31
 801737e:	b538      	push	{r3, r4, r5, lr}
 8017380:	4604      	mov	r4, r0
 8017382:	460d      	mov	r5, r1
 8017384:	d904      	bls.n	8017390 <_raise_r+0x14>
 8017386:	2316      	movs	r3, #22
 8017388:	6003      	str	r3, [r0, #0]
 801738a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801738e:	bd38      	pop	{r3, r4, r5, pc}
 8017390:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017392:	b112      	cbz	r2, 801739a <_raise_r+0x1e>
 8017394:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017398:	b94b      	cbnz	r3, 80173ae <_raise_r+0x32>
 801739a:	4620      	mov	r0, r4
 801739c:	f000 f830 	bl	8017400 <_getpid_r>
 80173a0:	462a      	mov	r2, r5
 80173a2:	4601      	mov	r1, r0
 80173a4:	4620      	mov	r0, r4
 80173a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80173aa:	f000 b817 	b.w	80173dc <_kill_r>
 80173ae:	2b01      	cmp	r3, #1
 80173b0:	d00a      	beq.n	80173c8 <_raise_r+0x4c>
 80173b2:	1c59      	adds	r1, r3, #1
 80173b4:	d103      	bne.n	80173be <_raise_r+0x42>
 80173b6:	2316      	movs	r3, #22
 80173b8:	6003      	str	r3, [r0, #0]
 80173ba:	2001      	movs	r0, #1
 80173bc:	e7e7      	b.n	801738e <_raise_r+0x12>
 80173be:	2400      	movs	r4, #0
 80173c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80173c4:	4628      	mov	r0, r5
 80173c6:	4798      	blx	r3
 80173c8:	2000      	movs	r0, #0
 80173ca:	e7e0      	b.n	801738e <_raise_r+0x12>

080173cc <raise>:
 80173cc:	4b02      	ldr	r3, [pc, #8]	; (80173d8 <raise+0xc>)
 80173ce:	4601      	mov	r1, r0
 80173d0:	6818      	ldr	r0, [r3, #0]
 80173d2:	f7ff bfd3 	b.w	801737c <_raise_r>
 80173d6:	bf00      	nop
 80173d8:	24000050 	.word	0x24000050

080173dc <_kill_r>:
 80173dc:	b538      	push	{r3, r4, r5, lr}
 80173de:	4d07      	ldr	r5, [pc, #28]	; (80173fc <_kill_r+0x20>)
 80173e0:	2300      	movs	r3, #0
 80173e2:	4604      	mov	r4, r0
 80173e4:	4608      	mov	r0, r1
 80173e6:	4611      	mov	r1, r2
 80173e8:	602b      	str	r3, [r5, #0]
 80173ea:	f000 f855 	bl	8017498 <_kill>
 80173ee:	1c43      	adds	r3, r0, #1
 80173f0:	d102      	bne.n	80173f8 <_kill_r+0x1c>
 80173f2:	682b      	ldr	r3, [r5, #0]
 80173f4:	b103      	cbz	r3, 80173f8 <_kill_r+0x1c>
 80173f6:	6023      	str	r3, [r4, #0]
 80173f8:	bd38      	pop	{r3, r4, r5, pc}
 80173fa:	bf00      	nop
 80173fc:	2400a7a0 	.word	0x2400a7a0

08017400 <_getpid_r>:
 8017400:	f000 b83a 	b.w	8017478 <_getpid>

08017404 <_fstat_r>:
 8017404:	b538      	push	{r3, r4, r5, lr}
 8017406:	4d07      	ldr	r5, [pc, #28]	; (8017424 <_fstat_r+0x20>)
 8017408:	2300      	movs	r3, #0
 801740a:	4604      	mov	r4, r0
 801740c:	4608      	mov	r0, r1
 801740e:	4611      	mov	r1, r2
 8017410:	602b      	str	r3, [r5, #0]
 8017412:	f000 f829 	bl	8017468 <_fstat>
 8017416:	1c43      	adds	r3, r0, #1
 8017418:	d102      	bne.n	8017420 <_fstat_r+0x1c>
 801741a:	682b      	ldr	r3, [r5, #0]
 801741c:	b103      	cbz	r3, 8017420 <_fstat_r+0x1c>
 801741e:	6023      	str	r3, [r4, #0]
 8017420:	bd38      	pop	{r3, r4, r5, pc}
 8017422:	bf00      	nop
 8017424:	2400a7a0 	.word	0x2400a7a0

08017428 <_isatty_r>:
 8017428:	b538      	push	{r3, r4, r5, lr}
 801742a:	4d06      	ldr	r5, [pc, #24]	; (8017444 <_isatty_r+0x1c>)
 801742c:	2300      	movs	r3, #0
 801742e:	4604      	mov	r4, r0
 8017430:	4608      	mov	r0, r1
 8017432:	602b      	str	r3, [r5, #0]
 8017434:	f000 f828 	bl	8017488 <_isatty>
 8017438:	1c43      	adds	r3, r0, #1
 801743a:	d102      	bne.n	8017442 <_isatty_r+0x1a>
 801743c:	682b      	ldr	r3, [r5, #0]
 801743e:	b103      	cbz	r3, 8017442 <_isatty_r+0x1a>
 8017440:	6023      	str	r3, [r4, #0]
 8017442:	bd38      	pop	{r3, r4, r5, pc}
 8017444:	2400a7a0 	.word	0x2400a7a0

08017448 <_malloc_usable_size_r>:
 8017448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801744c:	1f18      	subs	r0, r3, #4
 801744e:	2b00      	cmp	r3, #0
 8017450:	bfbc      	itt	lt
 8017452:	580b      	ldrlt	r3, [r1, r0]
 8017454:	18c0      	addlt	r0, r0, r3
 8017456:	4770      	bx	lr

08017458 <_close>:
 8017458:	4b02      	ldr	r3, [pc, #8]	; (8017464 <_close+0xc>)
 801745a:	2258      	movs	r2, #88	; 0x58
 801745c:	601a      	str	r2, [r3, #0]
 801745e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017462:	4770      	bx	lr
 8017464:	2400a7a0 	.word	0x2400a7a0

08017468 <_fstat>:
 8017468:	4b02      	ldr	r3, [pc, #8]	; (8017474 <_fstat+0xc>)
 801746a:	2258      	movs	r2, #88	; 0x58
 801746c:	601a      	str	r2, [r3, #0]
 801746e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017472:	4770      	bx	lr
 8017474:	2400a7a0 	.word	0x2400a7a0

08017478 <_getpid>:
 8017478:	4b02      	ldr	r3, [pc, #8]	; (8017484 <_getpid+0xc>)
 801747a:	2258      	movs	r2, #88	; 0x58
 801747c:	601a      	str	r2, [r3, #0]
 801747e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017482:	4770      	bx	lr
 8017484:	2400a7a0 	.word	0x2400a7a0

08017488 <_isatty>:
 8017488:	4b02      	ldr	r3, [pc, #8]	; (8017494 <_isatty+0xc>)
 801748a:	2258      	movs	r2, #88	; 0x58
 801748c:	601a      	str	r2, [r3, #0]
 801748e:	2000      	movs	r0, #0
 8017490:	4770      	bx	lr
 8017492:	bf00      	nop
 8017494:	2400a7a0 	.word	0x2400a7a0

08017498 <_kill>:
 8017498:	4b02      	ldr	r3, [pc, #8]	; (80174a4 <_kill+0xc>)
 801749a:	2258      	movs	r2, #88	; 0x58
 801749c:	601a      	str	r2, [r3, #0]
 801749e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174a2:	4770      	bx	lr
 80174a4:	2400a7a0 	.word	0x2400a7a0

080174a8 <_lseek>:
 80174a8:	4b02      	ldr	r3, [pc, #8]	; (80174b4 <_lseek+0xc>)
 80174aa:	2258      	movs	r2, #88	; 0x58
 80174ac:	601a      	str	r2, [r3, #0]
 80174ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174b2:	4770      	bx	lr
 80174b4:	2400a7a0 	.word	0x2400a7a0

080174b8 <_read>:
 80174b8:	4b02      	ldr	r3, [pc, #8]	; (80174c4 <_read+0xc>)
 80174ba:	2258      	movs	r2, #88	; 0x58
 80174bc:	601a      	str	r2, [r3, #0]
 80174be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174c2:	4770      	bx	lr
 80174c4:	2400a7a0 	.word	0x2400a7a0

080174c8 <_sbrk>:
 80174c8:	4b04      	ldr	r3, [pc, #16]	; (80174dc <_sbrk+0x14>)
 80174ca:	6819      	ldr	r1, [r3, #0]
 80174cc:	4602      	mov	r2, r0
 80174ce:	b909      	cbnz	r1, 80174d4 <_sbrk+0xc>
 80174d0:	4903      	ldr	r1, [pc, #12]	; (80174e0 <_sbrk+0x18>)
 80174d2:	6019      	str	r1, [r3, #0]
 80174d4:	6818      	ldr	r0, [r3, #0]
 80174d6:	4402      	add	r2, r0
 80174d8:	601a      	str	r2, [r3, #0]
 80174da:	4770      	bx	lr
 80174dc:	24006800 	.word	0x24006800
 80174e0:	2400a7b8 	.word	0x2400a7b8

080174e4 <_write>:
 80174e4:	4b02      	ldr	r3, [pc, #8]	; (80174f0 <_write+0xc>)
 80174e6:	2258      	movs	r2, #88	; 0x58
 80174e8:	601a      	str	r2, [r3, #0]
 80174ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80174ee:	4770      	bx	lr
 80174f0:	2400a7a0 	.word	0x2400a7a0

080174f4 <_exit>:
 80174f4:	e7fe      	b.n	80174f4 <_exit>
	...

080174f8 <_init>:
 80174f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174fa:	bf00      	nop
 80174fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174fe:	bc08      	pop	{r3}
 8017500:	469e      	mov	lr, r3
 8017502:	4770      	bx	lr

08017504 <_fini>:
 8017504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017506:	bf00      	nop
 8017508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801750a:	bc08      	pop	{r3}
 801750c:	469e      	mov	lr, r3
 801750e:	4770      	bx	lr
